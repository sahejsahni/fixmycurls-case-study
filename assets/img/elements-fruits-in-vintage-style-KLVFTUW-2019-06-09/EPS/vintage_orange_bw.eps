%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_orange_bw.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 561 559
%%HiResBoundingBox: 0 0 560.4214 558.2339
%%CropBox: 0 0 560.4214 558.2339
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_apelsin_bw</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T00:39:26+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T00:39:27+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T00:39:27+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FVskkcSNJIwSNRVnYgADxJOKvP8AzX+e/wCXfly4+qyXj6ldD7cWnBJ+H+tIWSKvtyr45A5AGYgS&#xA;lenfnpe+YGCeUvJup6rU0E05jtYB/rTfvo1+k4BkvkE8FcymTW355auKveaR5Ygb7Igje/ul/wBb&#xA;1P3J+jD6ij0oaT8mdS1Gp1/zxrl6zfaW2lW0ir7RUlQYODvK8fk0n5CaMiGNfNHmQRH7UYv0CmvW&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:CB5CD139D1E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:CC5CD139D1E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:45922dfa-7423-1143-9e12-f8c2b02976be</stRef:instanceID>
            <stRef:documentID>xmp.did:0A80117407206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -558.234 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 558.234 li
560.421 558.234 li
560.421 0 li
cp
clp
[1 0 0 1 0 0 ]ct
145.959 21.3896 mo
145.959 21.3896 153.459 17.0146 159.709 16.3896 cv
165.959 15.7646 163.459 12.0146 173.459 11.3896 cv
183.459 10.7646 189.502 9.51855 197.002 7.64355 cv
204.502 5.76855 214.502 3.26855 221.377 2.01855 cv
228.252 .768555 234.084 2.22559 243.459 1.60059 cv
252.834 .975586 261.791 -1.11035 269.916 .764648 cv
278.041 2.63965 281.377 3.89355 285.752 4.51855 cv
290.127 5.14355 298.042 3.26465 306.167 6.38965 cv
314.292 9.51465 315.542 10.1396 323.042 10.7646 cv
330.542 11.3896 340.959 12.6396 346.584 16.3896 cv
346.584 16.3896 353.459 22.0146 358.459 22.6396 cv
363.459 23.2646 370.334 28.2646 374.084 30.7646 cv
377.834 33.2646 381.167 34.5146 386.792 39.5146 cv
392.417 44.5146 406.167 53.2646 411.167 57.6396 cv
416.167 62.0146 421.792 66.3896 425.542 72.6396 cv
429.292 78.8896 442.209 85.1396 450.334 98.2646 cv
458.459 111.39 469.917 123.265 481.167 149.515 cv
492.417 175.765 499.292 201.39 500.542 237.015 cv
501.792 272.64 497.834 273.265 497.834 278.89 cv
497.834 284.515 496.584 292.015 496.584 297.64 cv
496.584 303.265 493.667 311.39 491.167 319.515 cv
488.667 327.64 484.917 343.89 481.167 350.765 cv
477.417 357.64 478.459 370.14 471.584 379.515 cv
464.709 388.894 462.834 389.519 460.959 395.769 cv
459.084 402.019 454.709 403.894 451.584 408.269 cv
448.459 412.644 448.667 408.894 444.917 415.144 cv
441.167 421.394 435.542 428.269 422.417 435.144 cv
409.292 442.019 394.084 458.269 375.959 465.144 cv
357.834 472.019 345.334 478.269 338.459 479.519 cv
331.584 480.769 325.959 480.769 318.459 483.269 cv
310.959 485.769 308.459 485.144 296.584 487.019 cv
284.709 488.894 272.834 489.519 265.959 490.144 cv
259.084 490.769 242.834 487.644 235.959 487.644 cv
229.084 487.644 217.209 483.894 207.209 484.519 cv
197.209 485.144 191.584 482.644 179.709 479.519 cv
167.834 476.394 148.459 471.394 135.334 466.394 cv
122.209 461.394 119.084 460.144 109.709 454.519 cv
100.334 448.894 98.041 443.894 92.416 440.144 cv
86.791 436.394 75.959 431.394 71.584 425.769 cv
67.209 420.144 65.334 418.269 60.959 411.394 cv
56.584 404.519 56.584 402.644 52.209 397.644 cv
47.834 392.644 47.834 392.019 44.084 387.019 cv
40.334 382.019 40.334 382.019 35.334 371.39 cv
30.334 360.765 29.709 358.89 26.584 353.89 cv
23.459 348.89 17.209 333.89 16.584 328.265 cv
16.584 328.265 15.334 321.39 13.459 315.765 cv
11.584 310.14 9.70898 307.64 9.08398 300.765 cv
8.45898 293.89 4.70898 291.39 5.33398 286.39 cv
5.95898 281.39 2.20898 277.64 2.83398 270.765 cv
3.45898 263.89 3.45898 257.015 4.08398 249.515 cv
4.70898 242.015 2.83398 240.14 3.45898 235.765 cv
4.08398 231.39 4.08398 225.765 4.70898 222.64 cv
5.33398 219.515 5.33398 215.14 6.58398 212.64 cv
7.83398 210.14 5.33398 203.89 7.20898 198.265 cv
9.08398 192.64 10.959 192.015 11.584 181.39 cv
12.209 170.765 15.959 168.265 17.834 162.64 cv
19.709 157.015 22.209 151.39 24.709 144.515 cv
27.209 137.64 31.584 132.015 35.959 121.39 cv
40.334 110.765 45.334 110.14 45.959 105.14 cv
46.584 100.14 49.709 93.2646 54.084 90.7646 cv
58.459 88.2646 67.209 72.6396 71.584 70.7646 cv
75.959 68.8896 83.459 58.2646 91.584 53.8896 cv
99.709 49.5146 103.459 45.1396 109.084 42.0146 cv
114.709 38.8896 124.084 30.1396 125.959 29.5146 cv
127.834 28.8896 136.584 22.6396 145.959 21.3896 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.27451 .207843 .145098 rgb
f
263.865 484.558 mo
260.193 484.558 254.646 483.871 249.287 483.207 cv
244.139 482.574 239.275 481.968 235.959 481.968 cv
233.592 481.968 230.033 481.355 226.264 480.699 cv
221.1 479.792 215.24 478.777 209.549 478.777 cv
208.643 478.777 207.744 478.804 206.857 478.855 cv
205.936 478.91 205.057 478.941 204.213 478.941 cv
198.67 478.941 194.404 477.73 187.947 475.902 cv
185.893 475.328 183.662 474.691 181.15 474.027 cv
179.131 473.503 li
167.322 470.394 149.475 465.707 137.354 461.089 cv
124.303 456.121 121.561 455.015 112.627 449.652 cv
107.744 446.722 105.057 444.019 102.455 441.402 cv
100.443 439.378 98.3691 437.292 95.5605 435.425 cv
93.8574 434.285 91.7012 433.042 89.3887 431.707 cv
84.5371 428.902 78.498 425.417 76.0605 422.281 cv
74.9512 420.855 73.998 419.664 73.123 418.57 cv
70.5566 415.367 68.8613 413.246 65.748 408.347 cv
64.1621 405.863 63.1855 404.066 62.3535 402.535 cv
60.873 399.82 59.5918 397.464 56.4785 393.902 cv
53.7871 390.835 52.9512 389.644 51.5684 387.683 cv
50.8145 386.617 49.9434 385.378 48.623 383.609 cv
45.2168 379.074 45.2168 379.074 40.4668 368.976 cv
37.6152 362.863 li
35.0449 357.316 33.9785 355.023 31.3965 350.886 cv
28.4902 346.242 22.709 332.035 22.2207 327.64 cv
22.1074 326.957 20.8184 319.91 18.8379 313.972 cv
18.252 312.207 17.666 310.722 17.1074 309.328 cv
15.9434 306.398 15.0957 304.285 14.7324 300.253 cv
14.3457 296.015 13.0059 293.011 12.0293 290.82 cv
11.127 288.781 10.8418 288.046 10.959 287.093 cv
11.4121 283.488 10.459 280.554 9.61914 277.96 cv
8.88477 275.71 8.25586 273.761 8.48242 271.277 cv
8.80664 267.675 8.97461 264.073 9.13477 260.382 cv
9.28711 257.015 9.43555 253.573 9.73633 249.983 cv
10.1309 245.237 9.64648 242.265 9.29492 240.089 cv
9.0293 238.444 8.91602 237.667 9.07227 236.565 cv
9.38867 234.366 9.56055 231.866 9.7168 229.495 cv
9.86133 227.304 10.0137 225.03 10.2715 223.749 cv
10.5137 222.53 10.6816 221.151 10.8418 219.745 cv
11.0215 218.222 11.2832 215.921 11.6582 215.175 cv
12.9355 212.616 12.6699 209.886 12.3926 206.991 cv
12.1699 204.679 11.9199 202.062 12.5879 200.05 cv
13.0449 198.683 13.5098 197.655 13.9434 196.679 cv
15.6309 192.878 16.7715 189.788 17.2441 181.722 cv
17.5957 175.765 18.9902 173.163 20.6035 170.147 cv
21.4746 168.534 22.4551 166.702 23.2129 164.425 cv
24.2285 161.386 25.4395 158.339 26.7246 155.081 cv
27.791 152.374 28.916 149.538 30.0371 146.448 cv
31.1074 143.519 32.6465 140.683 34.4316 137.394 cv
36.4941 133.604 38.834 129.304 41.2051 123.546 cv
43.1777 118.753 45.2051 116.487 46.9902 114.483 cv
48.9043 112.347 51.0762 109.913 51.584 105.843 cv
52.0879 101.827 54.6191 96.9834 56.8965 95.6865 cv
59.8887 93.9756 62.6777 90.3037 66.9902 84.4443 cv
69.1113 81.5654 72.6621 76.749 74.0371 75.8623 cv
76.7949 74.6982 79.6074 71.874 83.1699 68.292 cv
86.6191 64.8271 90.5371 60.8896 94.2715 58.8779 cv
99.1895 56.2334 102.596 53.6157 105.6 51.3076 cv
107.803 49.6123 109.705 48.1514 111.842 46.9639 cv
115.42 44.9795 119.979 41.2764 123.643 38.3037 cv
125.244 37.0029 127.396 35.2529 128.213 34.7178 cv
129.045 34.3857 129.939 33.8779 131.287 33.124 cv
134.588 31.2607 140.725 27.8037 146.709 27.0029 cv
147.83 26.8584 li
148.811 26.2881 li
150.615 25.2407 156.189 22.4326 160.279 22.0303 cv
164.686 21.585 166.814 19.8545 168.225 18.71 cv
169.24 17.8818 169.979 17.2881 173.811 17.042 cv
181.139 16.585 186.416 14.6318 191.072 12.9014 cv
193.416 12.0381 195.631 11.2217 197.963 10.6357 cv
205.268 8.81152 215.166 6.95605 221.975 5.71387 cv
223.865 5.37402 225.709 5.22559 228.131 5.22559 cv
229.295 5.22559 230.482 5.25684 231.729 5.28418 cv
233.201 5.32324 234.748 5.37012 236.439 5.37012 cv
238.299 5.37012 240.326 5.31934 242.588 5.16699 cv
247.014 4.84668 li
251.303 4.52246 255.736 4.19043 259.842 4.19043 cv
263.584 4.19043 266.596 4.46387 269.061 5.03809 cv
275.451 6.51074 278.584 6.88574 281.616 7.24902 cv
282.549 7.36572 283.487 7.47168 284.538 7.62402 cv
286.233 7.8623 288.077 7.88184 290.209 7.90918 cv
294.229 7.94824 299.229 7.99512 303.924 9.80371 cv
312.831 13.2295 318.495 13.8975 326.116 14.5342 cv
331.713 15.0029 337.471 17.167 343.225 20.96 cv
345.03 22.4053 351.756 27.5107 357.756 28.2646 cv
360.858 28.6514 366.522 32.4907 369.569 34.5537 cv
370.944 35.4795 li
372.674 36.6318 374.405 37.4248 376.077 38.1943 cv
378.67 39.3779 381.116 40.499 384.073 43.1279 cv
387.366 46.0576 392.885 49.4639 398.217 52.7646 cv
402.561 55.46 407.061 58.2451 409.1 60.0303 cv
410.413 61.1748 li
414.444 64.6709 416.28 66.2686 419.225 71.1787 cv
421.147 74.3779 424.624 77.8154 429.022 82.1709 cv
434.409 87.5029 441.108 94.1279 445.518 101.241 cv
448.213 105.597 451.534 109.983 455.045 114.62 cv
462.729 124.769 469.35 135.28 476.792 152.64 cv
488.03 178.866 493.1 203.702 494.292 237.64 cv
495.174 262.843 494.346 267.698 493.131 272.726 cv
492.612 274.851 492.167 276.687 492.167 278.89 cv
492.167 281.433 491.866 284.632 491.569 287.726 cv
491.249 291.085 490.917 294.558 490.917 297.64 cv
490.917 302.933 489.042 308.449 486.792 315.765 cv
485.858 318.792 484.85 327.539 483.667 332.64 cv
481.831 340.605 479.483 345.722 477.417 349.515 cv
476.202 351.742 474.717 359.796 473.667 362.015 cv
471.518 366.546 471.44 370.125 467.014 376.16 cv
464.967 378.953 463.374 380.953 462.1 382.542 cv
459.014 386.41 457.147 388.753 455.53 394.136 cv
454.737 396.785 453.264 398.218 451.233 400.21 cv
449.889 401.527 448.37 403.023 446.971 404.964 cv
444.795 408.023 443.956 409.496 442.678 411.734 cv
442.002 412.933 439.385 415.394 437.417 417.019 cv
426.792 425.769 435.584 422.652 423.667 428.894 cv
418.627 431.527 410.959 438.792 405.186 442.535 cv
395.663 448.707 384.866 455.699 373.952 459.839 cv
366.768 462.566 360.463 465.191 355.034 467.449 cv
347.202 470.707 341.022 473.285 337.444 473.941 cv
335.307 474.324 333.295 474.585 331.307 474.847 cv
326.854 475.425 322.245 476.031 316.67 477.886 cv
312.413 479.3 310.186 479.566 305.749 480.074 cv
303.178 480.367 300.053 480.73 295.702 481.41 cv
286.858 482.808 277.795 483.511 271.182 484.027 cv
269.033 484.195 267.1 484.339 265.447 484.496 cv
264.975 484.535 264.447 484.558 263.865 484.558 cv
cp
1 .572549 0 rgb
f
365.284 40.4404 mo
365.284 40.4404 471.397 105.362 482.284 211.999 cv
493.834 325.07 443.799 445.16 309.092 476.355 cv
309.092 476.355 422.842 443.621 458.42 328.968 cv
516.663 141.3 365.284 40.4404 365.284 40.4404 cv
cp
.27451 .207843 .145098 rgb
f
416.167 74.5146 mo
416.167 74.5146 487.881 138.897 486.167 245.765 cv
484.292 362.64 423.042 427.019 423.042 427.019 cv
423.042 427.019 465.542 397.019 484.292 322.64 cv
489.62 301.503 491.323 273.269 492.627 247.362 cv
497.245 155.761 443.108 93.7568 416.167 74.5146 cv
cp
1 .819608 .678431 rgb
f
230.615 108.581 mo
230.631 108.593 230.635 108.601 230.635 108.601 cv
230.607 108.601 229.932 108.3 229.041 108.3 cv
227.986 108.366 227.092 108.405 226.17 108.405 cv
223.459 108.405 221.342 108.011 219.678 107.386 cv
218.471 107.8 217.037 108.112 215.346 108.288 cv
212.076 108.64 210.252 108.937 209.268 109.128 cv
208.107 110.401 li
200.928 110.401 li
198.732 103.89 li
199.045 103.144 li
198.568 98.6943 198.432 95.292 198.678 92.6279 cv
197.498 91.3657 196.381 89.6357 195.482 87.2881 cv
193.498 82.0732 192.127 73.8076 191.975 72.8818 cv
204.006 70.0967 li
203.381 68.0146 201.943 67.167 201.494 67.0342 cv
201.494 67.0342 201.928 67.1592 203.014 67.1592 cv
203.014 67.1592 li
203.9 67.1592 205.01 67.0811 206.357 66.8975 cv
207.088 66.7998 li
210.99 66.2686 214.354 65.8115 217.299 65.8115 cv
219.877 65.8115 222.084 66.21 223.912 67.0107 cv
226.064 66.0576 228.865 65.2021 231.951 65.2021 cv
232.443 65.2021 232.939 65.2256 233.443 65.2764 cv
233.744 65.2998 234.033 65.3154 234.303 65.3154 cv
235.678 65.3154 236.725 65.0029 238.029 64.6006 cv
239.475 64.1592 241.115 63.6592 243.107 63.6592 cv
245.443 63.6592 247.4 63.4756 247.506 63.46 cv
255.639 62.6553 li
254.209 70.7021 li
254.115 71.2178 253.201 75.9404 249.475 81.8037 cv
248.627 83.1357 247.936 84.4053 247.334 85.5068 cv
246.338 87.335 245.205 89.4014 243.607 90.9287 cv
243.725 93.1123 243.471 95.8467 242.002 98.6396 cv
240.232 102.019 239.943 103.937 239.943 103.956 cv
238.639 113.19 li
230.615 108.581 li
cp
.27451 .207843 .145098 rgb
f
181.529 138.397 mo
181.529 138.397 201.537 149.944 245.412 143.788 cv
245.412 143.788 207.701 159.183 181.529 138.397 cv
cp
.984314 .886275 .866667 rgb
f
168.443 144.171 mo
168.443 144.171 195.381 168.034 262.732 148.792 cv
262.732 148.792 201.154 176.116 168.443 144.171 cv
cp
f
164.975 154.948 mo
164.975 154.948 198.076 181.507 262.732 158.409 cv
262.732 158.409 201.537 189.202 164.975 154.948 cv
cp
f
156.893 164.187 mo
156.893 164.187 169.666 175.897 202.693 178.812 cv
228.865 181.12 260.424 172.269 273.123 163.8 cv
273.123 163.8 259.271 181.12 207.311 182.659 cv
189.326 183.194 165.139 176.569 156.893 164.187 cv
cp
f
146.502 173.808 mo
146.502 173.808 162.666 188.815 204.232 191.124 cv
245.799 193.437 270.436 178.038 281.206 171.882 cv
281.206 171.882 266.686 191.554 225.014 194.593 cv
188.068 197.284 157.662 186.12 146.502 173.808 cv
cp
f
148.428 185.354 mo
148.428 185.354 164.588 200.362 206.154 202.675 cv
247.725 204.983 272.357 189.589 283.135 183.429 cv
283.135 183.429 268.607 203.097 226.936 206.136 cv
189.994 208.831 159.584 197.667 148.428 185.354 cv
cp
f
157.662 199.206 mo
157.662 199.206 170.436 210.917 203.459 213.835 cv
229.631 216.144 261.193 207.292 273.896 198.827 cv
273.896 198.827 251.186 219.608 208.08 217.683 cv
188.822 216.823 165.361 209.601 157.662 199.206 cv
cp
f
158.818 209.218 mo
158.818 209.218 171.592 220.925 204.619 223.839 cv
230.791 226.151 262.35 217.296 275.053 208.831 cv
275.053 208.831 252.342 229.616 209.236 227.687 cv
189.975 226.827 166.518 219.608 158.818 209.218 cv
cp
f
158.045 219.991 mo
158.045 219.991 170.818 231.702 203.846 234.616 cv
230.018 236.925 261.576 228.073 274.279 219.608 cv
274.279 219.608 251.572 240.39 208.467 238.464 cv
189.201 237.604 165.748 230.382 158.045 219.991 cv
cp
f
157.279 229.616 mo
157.279 229.616 170.053 241.319 203.08 244.241 cv
229.252 246.55 260.811 237.698 273.51 229.229 cv
273.51 229.229 250.803 250.011 207.701 248.089 cv
188.432 247.229 164.975 240.007 157.279 229.616 cv
cp
f
gsave
103.369 59.5771 mo
103.369 59.5771 32.1855 112.155 24.1621 234.831 cv
16.1387 357.511 119.412 457.515 203.631 480.199 cv
203.631 480.199 86.0645 375.183 122.287 213.253 cv
158.51 51.3193 103.369 59.5771 103.369 59.5771 cv
cp
clp
90.834 69.3467 mo
90.834 69.3467 95.8496 87.9092 135.955 92.5459 cv
135.955 92.5459 92.834 94.0928 90.834 69.3467 cv
cp
.27451 .207843 .145098 rgb
f
84.3184 77.6006 mo
84.3184 77.6006 89.834 103.89 145.482 103.37 cv
145.482 103.37 83.3184 108.534 84.3184 77.6006 cv
cp
f
76.8027 86.2334 mo
76.8027 86.2334 82.8184 114.065 141.475 111.487 cv
141.475 111.487 79.8105 122.835 76.8027 86.2334 cv
cp
f
70.4043 96.9404 mo
70.4043 96.9404 75.6699 111.249 97.0996 117.819 cv
118.529 124.394 126.803 120.909 145.975 118.976 cv
145.975 118.976 119.932 128.905 97.4746 121.687 cv
73.4121 113.956 70.4043 96.9404 70.4043 96.9404 cv
cp
f
64.3145 103.065 mo
64.3145 103.065 68.5684 117.722 89.4824 125.862 cv
110.389 134.015 118.881 131.155 138.143 130.655 cv
138.143 130.655 111.475 138.62 89.5801 129.749 cv
66.127 120.253 64.3145 103.065 64.3145 103.065 cv
cp
f
57.998 116.276 mo
57.998 116.276 69.1152 134.718 92.2051 140.241 cv
119.662 146.815 145.225 139.085 145.225 139.085 cv
145.225 139.085 120.787 149.519 94.0918 144.495 cv
63.4043 138.718 57.998 116.276 57.998 116.276 cv
cp
f
51.7129 123.483 mo
51.7129 123.483 61.8301 142.53 84.5879 149.358 cv
111.639 157.483 137.584 151.214 137.584 151.214 cv
137.584 151.214 112.623 160.253 86.2324 153.714 cv
55.9043 146.202 51.7129 123.483 51.7129 123.483 cv
cp
f
47.6934 134.237 mo
47.6934 134.237 58.0996 153.112 80.9668 159.573 cv
108.139 167.249 133.979 160.554 133.979 160.554 cv
133.979 160.554 109.158 169.999 82.6777 163.897 cv
52.2363 156.886 47.6934 134.237 47.6934 134.237 cv
cp
f
42.4277 143.519 mo
42.4277 143.519 52.834 162.394 75.7012 168.851 cv
102.873 176.53 128.721 169.835 128.721 169.835 cv
128.721 169.835 103.896 179.276 77.4199 173.175 cv
46.9668 166.159 42.4277 143.519 42.4277 143.519 cv
cp
f
38.6699 152.409 mo
38.6699 152.409 49.0762 171.288 71.9473 177.741 cv
99.1152 185.421 124.959 178.729 124.959 178.729 cv
124.959 178.729 100.135 188.167 73.6543 182.069 cv
43.2129 175.05 38.6699 152.409 38.6699 152.409 cv
cp
f
34.1543 161.687 mo
34.1543 161.687 44.5645 180.569 67.4316 187.019 cv
94.6035 194.698 120.447 188.007 120.447 188.007 cv
120.447 188.007 95.623 197.448 69.1465 191.347 cv
38.6934 184.335 34.1543 161.687 34.1543 161.687 cv
cp
f
29.9902 170.577 mo
29.9902 170.577 40.3965 189.456 63.2559 195.909 cv
90.4355 203.585 116.271 196.897 116.271 196.897 cv
116.271 196.897 91.4551 206.339 64.9746 200.237 cv
34.5293 193.226 29.9902 170.577 29.9902 170.577 cv
cp
f
27.7402 183.597 mo
27.7402 183.597 39.2324 201.784 62.4355 206.819 cv
90.0098 212.792 115.408 204.511 115.408 204.511 cv
115.408 204.511 91.1855 215.472 64.3965 211.022 cv
33.5996 205.917 27.7402 183.597 27.7402 183.597 cv
cp
f
24.0918 192.733 mo
24.0918 192.733 35.5918 210.925 58.7949 215.96 cv
86.3652 221.933 111.771 213.651 111.771 213.651 cv
111.771 213.651 87.5488 224.612 60.7559 220.163 cv
29.9551 215.05 24.0918 192.733 24.0918 192.733 cv
cp
f
24.2715 207.718 mo
24.2715 207.718 37.0449 224.983 60.5449 228.241 cv
88.4707 232.101 113.209 221.917 113.209 221.917 cv
113.209 221.917 89.8418 234.69 62.8066 232.292 cv
31.7246 229.53 24.2715 207.718 24.2715 207.718 cv
cp
f
21.2988 217.108 mo
21.2988 217.108 34.0723 234.378 57.5723 237.628 cv
85.498 241.495 110.232 231.312 110.232 231.312 cv
110.232 231.312 86.8652 244.085 59.8262 241.679 cv
28.748 238.917 21.2988 217.108 21.2988 217.108 cv
cp
f
19.9785 228.761 mo
19.9785 228.761 33.3809 245.515 56.9902 247.843 cv
85.0371 250.597 109.373 239.444 109.373 239.444 cv
109.373 239.444 86.5059 253.132 59.4043 251.8 cv
28.2402 250.265 19.9785 228.761 19.9785 228.761 cv
cp
f
17.3574 238.265 mo
17.3574 238.265 30.7598 255.011 54.3691 257.347 cv
82.4199 260.104 106.756 248.956 106.756 248.956 cv
106.756 248.956 83.8809 262.636 56.7793 261.296 cv
25.6074 259.765 17.3574 238.265 17.3574 238.265 cv
cp
f
20.1855 252.96 mo
20.1855 252.96 34.873 268.534 58.584 268.886 cv
86.7637 269.288 110.135 256.136 110.135 256.136 cv
110.135 256.136 88.4199 271.687 61.3066 272.628 cv
30.123 273.703 20.1855 252.96 20.1855 252.96 cv
cp
f
18.3262 262.647 mo
18.3262 262.647 33.0137 278.226 56.7285 278.574 cv
84.8965 278.984 108.275 265.831 108.275 265.831 cv
108.275 265.831 86.5527 281.378 59.4434 282.312 cv
28.252 283.386 18.3262 262.647 18.3262 262.647 cv
cp
f
19.9746 276.195 mo
19.9746 276.195 35.7715 290.578 59.4355 289.074 cv
87.5566 287.285 109.896 272.351 109.896 272.351 cv
109.896 272.351 89.3926 289.55 62.4277 292.601 cv
31.4121 296.101 19.9746 276.195 19.9746 276.195 cv
cp
f
18.834 286.003 mo
18.834 286.003 34.6191 300.39 58.2949 298.878 cv
86.416 297.101 108.756 282.16 108.756 282.16 cv
108.756 282.16 88.248 299.359 61.2793 302.406 cv
30.2559 305.906 18.834 286.003 18.834 286.003 cv
cp
f
21.1699 299.855 mo
21.1699 299.855 37.873 313.109 61.3965 309.964 cv
89.3301 306.21 110.631 289.75 110.631 289.75 cv
110.631 289.75 91.3105 308.343 64.6074 313.265 cv
33.8887 318.925 21.1699 299.855 21.1699 299.855 cv
cp
f
20.6777 309.73 mo
20.6777 309.73 37.3809 322.98 60.9082 319.824 cv
88.8457 316.078 110.139 299.617 110.139 299.617 cv
110.139 299.617 90.8145 318.207 64.1113 323.128 cv
33.3965 328.789 20.6777 309.73 20.6777 309.73 cv
cp
f
29.3809 323.984 mo
29.3809 323.984 47.3027 335.421 70.3887 329.824 cv
97.8066 323.164 117.365 304.554 117.365 304.554 cv
117.365 304.554 99.9941 325.078 73.9199 332.773 cv
43.9199 341.625 29.3809 323.984 29.3809 323.984 cv
cp
f
29.8652 333.855 mo
29.8652 333.855 47.7949 345.285 70.8809 339.679 cv
98.3027 333.035 117.861 314.433 117.861 314.433 cv
117.861 314.433 100.479 334.945 74.3965 342.64 cv
44.4082 351.488 29.8652 333.855 29.8652 333.855 cv
cp
f
31.6309 344.867 mo
31.6309 344.867 49.5605 356.296 72.6504 350.703 cv
100.061 344.035 119.623 325.433 119.623 325.433 cv
119.623 325.433 102.256 345.96 76.1699 353.656 cv
46.1777 362.503 31.6309 344.867 31.6309 344.867 cv
cp
f
32.123 354.73 mo
32.123 354.73 50.0527 366.16 73.1387 360.558 cv
100.561 353.914 120.115 335.312 120.115 335.312 cv
120.115 335.312 102.729 355.824 76.6543 363.519 cv
46.6621 372.355 32.123 354.73 32.123 354.73 cv
cp
f
33.1348 365.355 mo
33.1348 365.355 51.0645 376.789 74.1543 371.183 cv
101.568 364.523 121.123 345.917 121.123 345.917 cv
121.123 345.917 103.756 366.445 77.6777 374.14 cv
47.6777 382.996 33.1348 365.355 33.1348 365.355 cv
cp
f
33.627 375.222 mo
33.627 375.222 51.5566 386.656 74.6387 381.05 cv
102.064 374.398 121.619 355.792 121.619 355.792 cv
121.619 355.792 104.236 376.312 78.1582 384.011 cv
48.1699 392.847 33.627 375.222 33.627 375.222 cv
cp
f
36.5176 384.3 mo
36.5176 384.3 54.4473 395.73 77.5332 390.132 cv
104.955 383.472 124.51 364.867 124.51 364.867 cv
124.51 364.867 107.139 385.394 81.0605 393.089 cv
51.0645 401.941 36.5176 384.3 36.5176 384.3 cv
cp
f
37.0098 394.167 mo
37.0098 394.167 54.9395 405.589 78.0215 399.996 cv
105.447 393.347 125.01 374.738 125.01 374.738 cv
125.01 374.738 107.623 395.261 81.541 402.957 cv
51.5527 411.792 37.0098 394.167 37.0098 394.167 cv
cp
f
40.6543 402.847 mo
40.6543 402.847 58.584 414.292 81.6699 408.687 cv
109.092 402.027 128.646 383.425 128.646 383.425 cv
128.646 383.425 111.271 403.941 85.1934 411.636 cv
55.2012 420.496 40.6543 402.847 40.6543 402.847 cv
cp
f
41.1504 412.722 mo
41.1504 412.722 59.0762 424.156 82.1582 418.55 cv
109.58 411.902 129.139 393.296 129.139 393.296 cv
129.139 393.296 111.756 413.804 85.6777 421.5 cv
55.6855 430.355 41.1504 412.722 41.1504 412.722 cv
cp
f
49.0684 418.503 mo
49.0684 418.503 66.998 429.925 90.0879 424.332 cv
117.506 417.671 137.061 399.066 137.061 399.066 cv
137.061 399.066 119.686 419.597 93.6113 427.292 cv
63.6113 436.136 49.0684 418.503 49.0684 418.503 cv
cp
f
49.5605 428.375 mo
49.5605 428.375 67.4902 439.8 90.5684 434.195 cv
117.99 427.542 137.553 408.941 137.553 408.941 cv
137.553 408.941 120.17 429.457 94.0918 437.152 cv
64.1074 445.992 49.5605 428.375 49.5605 428.375 cv
cp
f
56.584 434.742 mo
56.584 434.742 74.5137 446.167 97.5996 440.574 cv
125.021 433.91 144.58 415.308 144.58 415.308 cv
144.58 415.308 127.205 435.824 101.127 443.531 cv
71.1309 452.378 56.584 434.742 56.584 434.742 cv
cp
f
57.084 444.605 mo
57.084 444.605 75.0098 456.031 98.0957 450.425 cv
125.514 443.785 145.072 425.183 145.072 425.183 cv
145.072 425.183 127.689 445.699 101.611 453.394 cv
71.6191 462.23 57.084 444.605 57.084 444.605 cv
cp
f
64.1074 450.582 mo
64.1074 450.582 82.041 462.019 105.127 456.421 cv
132.545 449.761 152.1 431.148 152.1 431.148 cv
152.1 431.148 134.732 451.675 108.65 459.371 cv
78.6504 468.23 64.1074 450.582 64.1074 450.582 cv
cp
f
64.5996 460.457 mo
64.5996 460.457 82.5293 471.878 105.607 466.277 cv
133.037 459.636 152.592 441.031 152.592 441.031 cv
152.592 441.031 135.209 461.55 109.135 469.234 cv
79.1387 478.082 64.5996 460.457 64.5996 460.457 cv
cp
f
grestore
66.791 95.7646 mo
66.791 95.7646 -5.70898 185.14 28.666 311.39 cv
58.7324 421.832 129.916 452.644 129.916 452.644 cv
129.916 452.644 36.791 412.019 15.8691 288.734 cv
-6.09961 159.296 66.791 95.7646 66.791 95.7646 cv
cp
1 .819608 .678431 rgb
f
97.4746 64.8545 mo
97.4746 64.8545 50.7246 94.0928 25.1621 188.429 cv
-.408203 282.761 47.416 420.144 156.127 457.253 cv
156.127 457.253 58.041 413.894 33.6895 296.691 cv
3.30273 150.456 97.4746 64.8545 97.4746 64.8545 cv
cp
.27451 .207843 .145098 rgb
f
gsave
365.284 40.4404 mo
365.284 40.4404 458.002 107.659 470.522 187.335 cv
483.042 267.015 483.667 374.515 360.542 453.894 cv
360.542 453.894 454.917 373.89 431.167 228.89 cv
411.495 108.776 333.667 82.6396 332.417 68.8896 cv
331.167 55.1396 365.284 40.4404 365.284 40.4404 cv
cp
clp
465.487 155.44 mo
465.487 155.44 463.444 179.655 419.78 189.542 cv
419.78 189.542 450.959 180.108 465.487 155.44 cv
cp
f
471.413 163.593 mo
471.413 163.593 469.366 187.8 425.717 197.687 cv
425.717 197.687 456.424 187.812 471.413 163.593 cv
cp
f
372.592 41.7407 mo
372.592 41.7407 365.28 57.1357 344.112 64.0615 cv
344.112 64.0615 367.202 62.1357 372.592 41.7407 cv
cp
f
378.749 45.9756 mo
378.749 45.9756 382.983 62.5225 344.499 75.9951 cv
344.499 75.9951 369.897 67.1396 378.749 45.9756 cv
cp
f
385.292 50.9756 mo
385.292 50.9756 384.905 74.0693 342.186 88.3076 cv
342.186 88.3076 372.85 75.7334 385.292 50.9756 cv
cp
f
391.069 56.2373 mo
391.069 56.2373 393.885 81.6396 350.592 94.499 cv
350.592 94.499 381.104 84.5576 391.069 56.2373 cv
cp
f
398.448 62.1084 mo
398.448 62.1084 399.538 86.3857 357.514 101.808 cv
357.514 101.808 386.959 88.3076 398.448 62.1084 cv
cp
f
405.374 67.8818 mo
405.374 67.8818 406.459 92.1553 364.444 107.585 cv
364.444 107.585 393.374 94.4717 405.374 67.8818 cv
cp
f
412.299 75.1943 mo
412.299 75.1943 413.389 99.4717 371.374 114.894 cv
371.374 114.894 401.584 100.37 412.299 75.1943 cv
cp
f
420.256 83.2803 mo
420.256 83.2803 421.346 107.558 379.331 122.976 cv
379.331 122.976 407.745 109.862 420.256 83.2803 cv
cp
f
427.182 90.5889 mo
427.182 90.5889 428.276 118.327 386.256 130.292 cv
386.256 130.292 417.221 118.909 427.182 90.5889 cv
cp
f
434.116 99.1826 mo
434.116 99.1826 435.202 123.46 393.182 138.886 cv
393.182 138.886 422.885 125.515 434.116 99.1826 cv
cp
f
441.038 106.495 mo
441.038 106.495 442.127 130.772 400.112 146.198 cv
400.112 146.198 429.295 132.444 441.038 106.495 cv
cp
f
445.698 118.206 mo
445.698 118.206 445.67 142.507 402.991 155.987 cv
402.991 155.987 433.272 143.991 445.698 118.206 cv
cp
f
452.28 125.823 mo
452.28 125.823 452.256 150.124 409.577 163.604 cv
409.577 163.604 439.358 151.21 452.28 125.823 cv
cp
f
456.456 135.323 mo
456.456 135.323 456.17 159.628 413.35 172.659 cv
413.35 172.659 443.76 160.983 456.456 135.323 cv
cp
f
462.952 143.026 mo
462.952 143.026 462.67 167.315 419.854 180.351 cv
419.854 180.351 449.764 168.269 462.952 143.026 cv
cp
f
469.932 178.839 mo
469.932 178.839 465.44 203.944 417.608 209.815 cv
417.608 209.815 451.991 203.132 469.932 178.839 cv
cp
f
475.522 187.96 mo
475.522 187.96 471.026 213.058 423.202 218.933 cv
423.202 218.933 457.124 211.745 475.522 187.96 cv
cp
f
476.022 200.858 mo
476.022 200.858 470.635 225.78 422.624 229.944 cv
422.624 229.944 457.233 224.495 476.022 200.858 cv
cp
f
481.284 210.175 mo
481.284 210.175 475.889 235.089 427.897 239.257 cv
427.897 239.257 462.042 233.284 481.284 210.175 cv
cp
f
479.385 225.722 mo
479.385 225.722 471.495 249.968 423.303 249.237 cv
423.303 249.237 458.288 247.331 479.385 225.722 cv
cp
f
483.678 235.526 mo
483.678 235.526 475.776 259.765 427.608 259.03 cv
427.608 259.03 462.182 256.562 483.678 235.526 cv
cp
f
478.995 250.714 mo
478.995 250.714 468.721 274.054 420.842 268.507 cv
420.842 268.507 455.842 270.104 478.995 250.714 cv
cp
f
482.288 260.897 mo
482.288 260.897 472.006 284.23 424.147 278.683 cv
424.147 278.683 458.799 279.675 482.288 260.897 cv
cp
f
477.862 274.496 mo
477.862 274.496 465.467 296.777 418.315 286.804 cv
418.315 286.804 453.014 291.644 477.862 274.496 cv
cp
f
480.202 284.941 mo
480.202 284.941 467.788 307.214 420.655 297.246 cv
420.655 297.246 455.061 301.453 480.202 284.941 cv
cp
f
473.452 298.128 mo
473.452 298.128 458.94 319.089 412.983 304.558 cv
412.983 304.558 447.042 312.773 473.452 298.128 cv
cp
f
474.76 308.753 mo
474.76 308.753 460.225 329.707 414.292 315.175 cv
414.292 315.175 448.124 322.738 474.76 308.753 cv
cp
f
468.631 320.808 mo
468.631 320.808 452.553 340.605 407.846 322.597 cv
407.846 322.597 441.17 333.39 468.631 320.808 cv
cp
f
469.116 331.503 mo
469.116 331.503 453.026 351.289 408.338 333.289 cv
408.338 333.289 441.491 343.41 469.116 331.503 cv
cp
f
458.428 346.14 mo
458.428 346.14 439.799 363.558 397.959 339.636 cv
397.959 339.636 429.506 354.867 458.428 346.14 cv
cp
f
457.452 356.796 mo
457.452 356.796 438.811 374.21 396.999 350.296 cv
396.999 350.296 428.459 364.835 457.452 356.796 cv
cp
f
447.706 368.894 mo
447.706 368.894 427.405 384.332 388.202 356.292 cv
388.202 356.292 418.042 374.648 447.706 368.894 cv
cp
f
445.655 379.398 mo
445.655 379.398 425.346 394.832 386.167 366.8 cv
386.167 366.8 415.991 384.457 445.655 379.398 cv
cp
f
431.846 389.808 mo
431.846 389.808 409.561 402.203 374.745 368.875 cv
374.745 368.875 401.67 391.285 431.846 389.808 cv
cp
f
428.319 399.917 mo
428.319 399.917 406.022 412.3 371.233 378.984 cv
371.233 378.984 398.249 400.707 428.319 399.917 cv
cp
f
416.944 408.871 mo
416.944 408.871 394.12 420.25 360.85 385.386 cv
360.85 385.386 386.733 408.988 416.944 408.871 cv
cp
f
412.967 418.816 mo
412.967 418.816 390.135 430.183 356.885 395.328 cv
356.885 395.328 382.885 418.246 412.967 418.816 cv
cp
f
397.26 425.23 mo
397.26 425.23 373.104 433.386 344.897 394.3 cv
344.897 394.3 367.319 421.214 397.26 425.23 cv
cp
f
391.967 434.527 mo
391.967 434.527 367.795 442.683 339.616 403.609 cv
339.616 403.609 362.249 429.871 391.967 434.527 cv
cp
f
379.069 441.98 mo
379.069 441.98 354.202 447.613 330.151 405.855 cv
330.151 405.855 349.694 434.917 379.069 441.98 cv
cp
f
369.002 447.605 mo
369.002 447.605 344.124 453.246 320.088 411.488 cv
320.088 411.488 339.917 439.925 369.002 447.605 cv
cp
f
grestore
250.654 104.933 mo
250.654 104.933 261.166 100.558 266.58 106.808 cv
266.58 106.808 270.752 107.644 272.83 110.558 cv
274.912 113.476 275.232 115.354 278.569 114.933 cv
281.905 114.515 283.569 113.269 284.819 114.933 cv
286.069 116.601 286.897 110.765 291.483 114.101 cv
296.069 117.433 296.897 116.593 300.233 115.765 cv
303.569 114.933 308.983 116.183 308.983 116.183 cv
308.983 116.183 307.741 112.843 303.155 112.015 cv
298.569 111.183 299.756 107.585 298.569 107.015 cv
295.545 105.554 295.545 103.261 299.295 103.679 cv
304.19 104.226 302.639 106.093 305.233 105.765 cv
305.233 105.765 303.573 100.765 298.155 100.765 cv
292.733 100.765 292.741 101.183 288.155 101.183 cv
283.569 101.183 281.905 100.769 278.155 101.183 cv
274.404 101.601 271.482 100.351 271.482 100.351 cv
265.654 99.9326 li
265.654 99.9326 253.99 99.9326 250.654 104.933 cv
cp
.964706 .823529 .607843 rgb
f
215.654 120.765 mo
215.654 120.765 218.564 129.929 207.732 135.765 cv
207.732 135.765 211.068 139.093 217.318 138.265 cv
217.318 138.265 208.982 138.683 207.318 141.601 cv
205.654 144.515 203.982 144.515 203.982 144.515 cv
203.982 144.515 206.072 145.343 210.654 143.265 cv
215.232 141.183 220.654 139.104 226.904 139.933 cv
233.154 140.765 233.154 140.765 233.154 140.765 cv
233.154 140.765 227.74 137.854 223.154 137.433 cv
218.568 137.015 223.154 138.679 218.568 137.015 cv
213.982 135.351 213.982 134.929 216.482 133.265 cv
218.982 131.601 218.572 125.765 215.654 120.765 cv
cp
f
251.482 61.6006 mo
251.482 61.6006 260.232 56.6006 268.982 56.6006 cv
268.982 56.6006 266.064 54.9326 260.232 56.6006 cv
260.232 56.6006 271.072 52.8506 276.904 54.1006 cv
282.733 55.3506 285.233 54.9326 285.233 54.9326 cv
279.405 52.4326 li
279.405 52.4326 285.331 49.3076 292.417 49.3076 cv
299.502 49.3076 301.069 52.8506 301.069 52.8506 cv
301.069 52.8506 297.42 44.3037 306.905 47.4326 cv
312.28 49.21 311.584 46.8076 318.252 45.5576 cv
324.917 44.3076 327.315 47.0186 330.233 49.9326 cv
333.155 52.8506 337.831 49.3076 339.917 49.7256 cv
342.002 50.1396 343.67 53.8936 348.252 53.8936 cv
352.831 53.8936 357.002 55.5576 357.002 55.5576 cv
357.002 55.5576 353.569 52.0146 351.069 50.3506 cv
348.569 48.6826 346.897 45.7646 343.983 44.5146 cv
341.069 43.2646 342.315 41.1826 336.483 39.1006 cv
330.655 37.0146 330.655 37.0146 330.655 37.0146 cv
330.655 37.0146 338.573 34.9287 346.905 42.0146 cv
346.905 42.0146 342.745 35.7607 338.573 34.9287 cv
334.405 34.1006 332.733 33.2686 330.233 31.1826 cv
327.733 29.1006 321.069 27.0146 321.069 27.0146 cv
321.069 27.0146 328.991 25.7686 333.155 31.1826 cv
333.155 31.1826 331.905 25.7646 323.569 24.1006 cv
323.569 24.1006 319.405 19.9326 313.155 19.1006 cv
313.155 19.1006 305.655 14.5146 294.819 15.7646 cv
294.819 15.7646 291.483 17.8506 286.069 17.8506 cv
280.655 17.8506 279.405 17.8428 278.569 20.7646 cv
277.732 23.6826 276.068 23.6826 269.818 24.1006 cv
263.568 24.5146 255.654 25.3428 251.904 30.7646 cv
251.904 30.7646 255.24 28.2686 260.654 28.6826 cv
260.654 28.6826 252.314 30.3506 256.482 30.3506 cv
260.654 30.3506 259.396 31.6006 256.482 32.8506 cv
253.568 34.1006 252.318 37.4326 252.318 37.4326 cv
252.318 37.4326 258.146 32.8506 263.982 34.1006 cv
269.818 35.3506 270.232 34.5146 275.232 35.3506 cv
280.233 36.1826 280.647 34.9326 283.983 34.1006 cv
287.319 33.2646 291.483 32.4326 296.483 34.1006 cv
296.483 34.1006 288.147 35.3428 285.233 38.2646 cv
282.319 41.1826 283.155 42.0186 278.569 42.4326 cv
273.982 42.8506 271.482 41.6006 271.482 41.6006 cv
271.482 41.6006 271.904 44.5146 276.904 44.5146 cv
276.904 44.5146 276.072 46.1787 270.654 47.0146 cv
265.232 47.8506 252.732 56.1826 251.482 61.6006 cv
cp
f
303.569 28.2646 mo
303.569 28.2646 299.823 26.5928 296.905 27.0146 cv
293.983 27.4326 293.991 29.9326 296.905 29.9326 cv
299.819 29.9326 303.983 29.9287 303.569 28.2646 cv
cp
1 .572549 0 rgb
f
308.569 34.5146 mo
308.569 34.5146 313.147 34.0928 315.233 35.7646 cv
317.319 37.4326 318.155 38.2646 313.569 38.2646 cv
308.983 38.2646 303.155 34.9287 308.569 34.5146 cv
cp
f
285.233 105.351 mo
285.233 105.351 292.733 108.679 282.733 109.101 cv
272.732 109.519 278.146 104.933 285.233 105.351 cv
cp
f
208.568 129.515 mo
208.568 129.515 202.732 132.019 199.818 131.183 cv
196.904 130.351 196.904 132.015 198.154 132.851 cv
199.404 133.683 201.904 137.015 196.904 136.601 cv
191.904 136.183 193.572 134.101 188.154 134.101 cv
182.732 134.101 182.732 134.101 182.732 134.101 cv
182.732 134.101 187.322 132.433 189.404 131.183 cv
191.482 129.933 191.068 128.269 193.568 129.933 cv
196.068 131.601 194.818 126.601 194.818 126.601 cv
194.818 126.601 196.482 128.265 201.482 129.101 cv
206.482 129.933 208.568 129.515 208.568 129.515 cv
cp
.964706 .823529 .607843 rgb
f
207.318 109.515 mo
207.318 109.515 209.396 109.093 206.482 113.265 cv
203.568 117.433 204.822 117.851 208.154 117.851 cv
211.482 117.851 211.482 117.851 211.482 117.851 cv
211.482 117.851 210.24 119.093 205.654 119.515 cv
201.068 119.933 199.822 116.183 198.154 119.101 cv
196.482 122.015 201.49 123.269 196.904 123.683 cv
192.318 124.101 196.482 126.601 191.482 127.851 cv
186.482 129.101 181.904 128.265 179.818 129.101 cv
177.732 129.933 171.482 133.265 171.482 133.265 cv
171.482 133.265 174.396 129.104 180.232 126.183 cv
186.068 123.265 188.568 119.933 188.568 119.933 cv
188.568 119.933 182.732 123.683 177.732 124.101 cv
172.732 124.515 172.732 124.515 172.732 124.515 cv
172.732 124.515 170.654 122.843 176.904 122.015 cv
183.154 121.183 184.822 121.183 186.904 117.851 cv
188.982 114.515 190.24 112.843 193.154 113.265 cv
196.068 113.683 194.822 112.015 199.404 112.015 cv
203.982 112.015 207.318 109.515 207.318 109.515 cv
cp
f
196.58 97.6436 mo
196.58 97.6436 190.33 101.808 184.916 107.226 cv
181.674 110.468 179.822 111.183 175.654 111.601 cv
171.482 112.015 171.482 116.593 176.068 117.015 cv
176.068 117.015 171.482 118.265 167.318 117.851 cv
163.154 117.433 163.146 117.015 161.482 119.515 cv
159.818 122.015 161.068 123.265 156.068 122.015 cv
151.068 120.765 146.068 122.433 146.068 122.433 cv
146.068 122.433 148.982 119.104 152.318 118.683 cv
155.654 118.265 156.896 114.933 151.482 114.933 cv
146.068 114.933 143.982 114.929 145.232 113.265 cv
146.482 111.601 146.482 111.183 141.068 110.351 cv
135.654 109.515 131.904 111.183 131.904 111.183 cv
131.904 111.183 143.982 104.933 147.318 107.433 cv
150.654 109.933 144.396 110.769 152.732 111.183 cv
161.068 111.601 159.404 109.933 163.568 111.183 cv
167.732 112.433 168.982 111.179 172.732 109.515 cv
176.482 107.851 174.342 110.116 177.83 105.976 cv
182.928 99.9326 196.58 97.6436 196.58 97.6436 cv
cp
f
197.314 91.1826 mo
197.314 91.1826 195.232 90.3428 188.146 92.0146 cv
181.064 93.6826 175.959 96.8037 169.709 103.476 cv
166.521 106.874 170.545 96.1787 180.646 91.6006 cv
185.232 89.5186 188.146 89.5146 188.146 89.5146 cv
188.146 89.5146 184.404 83.2686 177.732 84.9326 cv
171.064 86.6006 166.482 89.5146 165.646 87.8506 cv
164.814 86.1826 168.146 86.1787 163.146 85.7646 cv
158.146 85.3506 161.482 82.4326 158.146 82.4326 cv
154.814 82.4326 148.982 78.2646 148.982 78.2646 cv
148.982 78.2646 155.646 80.3545 161.896 79.9326 cv
168.146 79.5146 164.498 76.8076 156.58 76.3936 cv
156.58 76.3936 170.643 74.5107 174.814 77.4287 cv
178.982 80.3506 178.564 79.9326 181.896 81.1826 cv
185.232 82.4326 186.904 84.9287 188.982 87.0146 cv
191.064 89.1006 193.979 90.7686 197.314 91.1826 cv
cp
f
188.459 69.7256 mo
188.459 69.7256 188.146 67.8506 182.521 67.5381 cv
176.896 67.2256 174.709 68.7881 176.896 67.2256 cv
179.084 65.6631 179.396 65.9756 175.334 64.1006 cv
171.271 62.2256 170.646 60.3506 168.771 60.3506 cv
166.896 60.3506 161.271 59.1006 161.271 59.1006 cv
161.271 59.1006 167.834 57.5381 170.334 59.1006 cv
172.834 60.6631 171.271 59.1006 170.959 57.8506 cv
170.646 56.6006 171.896 51.9131 169.709 52.8506 cv
167.521 53.7881 167.834 56.9131 167.834 56.9131 cv
167.834 56.9131 165.959 53.1631 163.146 53.4756 cv
160.334 53.7881 161.896 55.0381 158.459 55.0381 cv
155.021 55.0381 162.834 55.9756 154.709 56.2881 cv
146.584 56.6006 150.021 54.1006 147.209 54.4131 cv
144.396 54.7256 143.146 55.0381 142.521 54.1006 cv
141.896 53.1631 145.959 53.1631 145.959 51.2881 cv
145.959 49.4131 145.021 47.2256 143.146 48.1631 cv
141.271 49.1006 138.393 49.499 137.834 50.6631 cv
136.584 53.2646 143.045 55.5537 143.045 55.5537 cv
143.045 55.5537 141.896 55.3506 136.271 55.6631 cv
130.646 55.9756 127.834 53.4756 129.084 53.1631 cv
130.334 52.8506 131.271 51.9131 129.709 51.2881 cv
128.146 50.6631 127.209 49.4131 128.771 48.7881 cv
130.334 48.1631 132.834 48.4756 130.334 48.1631 cv
127.834 47.8506 125.959 47.8506 125.959 47.8506 cv
125.959 47.8506 130.334 45.0381 134.084 45.3506 cv
137.834 45.6631 135.334 40.9756 138.459 40.9756 cv
141.584 40.9756 140.439 41.7021 145.752 41.3896 cv
151.064 41.0771 153.771 39.4131 153.771 39.4131 cv
153.771 39.4131 146.271 44.1006 150.646 44.7256 cv
155.021 45.3506 154.396 41.2881 156.584 43.1631 cv
158.771 45.0381 160.334 48.7881 163.459 47.8506 cv
166.584 46.9131 164.084 44.1006 164.084 44.1006 cv
164.084 44.1006 169.709 45.0381 173.146 49.4131 cv
176.584 53.7881 176.896 51.6006 178.459 54.7256 cv
180.021 57.8506 181.271 59.1006 181.271 59.1006 cv
175.021 56.9131 li
175.021 56.9131 178.146 60.3506 182.209 62.5381 cv
186.271 64.7256 188.459 69.7256 188.459 69.7256 cv
cp
f
181.795 39.1006 mo
181.795 39.1006 177.521 39.1006 171.584 38.7881 cv
165.646 38.4756 167.209 37.2256 163.146 38.4756 cv
159.084 39.7256 156.896 39.7256 156.896 39.7256 cv
156.896 39.7256 160.021 38.4756 162.209 36.6006 cv
164.396 34.7256 164.709 34.4131 166.584 34.1006 cv
168.459 33.7881 169.396 30.9756 167.209 30.9756 cv
165.021 30.9756 167.834 31.2881 164.709 29.7256 cv
161.584 28.1631 157.209 27.8506 157.209 27.8506 cv
157.209 27.8506 157.209 25.3506 162.521 25.0381 cv
167.834 24.7256 164.396 22.2256 169.396 21.9131 cv
174.396 21.6006 175.959 18.4756 177.834 18.4756 cv
179.709 18.4756 184.084 17.2256 184.084 17.2256 cv
184.084 17.2256 180.021 19.1006 180.646 21.9131 cv
181.271 24.7256 180.959 24.4131 179.084 25.3506 cv
177.209 26.2881 175.021 25.0381 174.084 24.4131 cv
173.146 23.7881 170.334 22.8506 169.709 25.0381 cv
169.084 27.2256 166.896 28.4756 171.271 28.4756 cv
175.646 28.4756 183.045 30.5537 183.045 30.5537 cv
183.045 30.5537 178.146 30.0381 175.959 30.6631 cv
173.771 31.2881 174.506 31.335 173.146 33.1631 cv
170.127 37.2256 179.92 35.0381 181.795 39.1006 cv
cp
f
214.396 56.2881 mo
214.396 56.2881 209.084 49.7256 205.646 47.8506 cv
202.209 45.9756 203.459 45.3506 198.771 44.4131 cv
194.084 43.4756 184.916 41.8076 184.916 41.8076 cv
184.916 41.8076 198.459 40.9756 201.896 43.4756 cv
201.896 43.4756 203.146 44.1006 203.146 43.1631 cv
203.146 42.2256 204.084 41.6006 197.521 40.3506 cv
190.959 39.1006 191.271 39.3037 187.834 36.8037 cv
184.396 34.3037 180.646 34.7256 180.646 34.7256 cv
180.646 34.7256 184.396 34.1006 185.959 33.4756 cv
187.521 32.8506 188.146 33.4756 189.396 35.0381 cv
190.646 36.6006 193.459 37.2256 193.459 35.9756 cv
193.459 34.7256 189.396 34.7256 192.521 31.6006 cv
195.646 28.4756 191.584 28.4756 196.271 26.6006 cv
200.959 24.7256 205.334 23.4756 205.646 21.9131 cv
205.959 20.3506 208.771 21.2881 208.771 21.2881 cv
208.771 21.2881 206.896 19.7256 208.771 19.4131 cv
210.646 19.1006 209.084 16.6006 213.771 16.6006 cv
218.459 16.6006 216.584 14.4131 220.959 14.4131 cv
225.334 14.4131 226.584 13.4756 227.521 13.4756 cv
228.459 13.4756 224.396 14.1006 226.271 15.6631 cv
228.146 17.2256 226.271 18.7881 226.271 18.7881 cv
226.271 18.7881 220.646 14.4131 220.334 17.5381 cv
220.021 20.6631 216.896 17.5381 217.209 20.0381 cv
217.521 22.5381 215.959 20.0381 214.084 19.7256 cv
212.209 19.4131 209.084 21.6006 210.959 23.1631 cv
212.834 24.7256 209.084 24.1006 210.959 26.2881 cv
212.834 28.4756 210.021 25.9756 215.021 26.9131 cv
220.021 27.8506 219.084 24.1006 220.959 24.4131 cv
222.834 24.7256 222.834 22.5381 224.709 22.5381 cv
226.584 22.5381 226.896 23.1631 227.834 20.9756 cv
228.771 18.7881 226.271 20.3506 228.771 18.7881 cv
231.271 17.2256 233.459 14.7256 233.459 14.7256 cv
233.459 14.7256 231.896 18.4756 232.834 20.0381 cv
233.771 21.6006 237.209 20.8657 235.334 23.6787 cv
233.459 26.4907 241.584 29.7256 241.584 29.7256 cv
241.584 29.7256 237.209 27.5381 235.334 30.6631 cv
233.459 33.7881 230.334 35.3506 230.021 33.1631 cv
229.709 30.9756 226.896 27.5381 224.084 30.3506 cv
221.271 33.1631 220.021 32.2256 219.396 31.2881 cv
218.771 30.3506 213.771 30.3506 213.771 30.3506 cv
215.959 33.7881 li
215.959 33.7881 210.646 32.2256 208.459 31.9131 cv
206.271 31.6006 202.521 31.2881 206.896 33.1631 cv
211.271 35.0381 210.646 36.2881 210.646 36.2881 cv
210.646 36.2881 202.209 33.7881 201.271 35.0381 cv
200.334 36.2881 201.584 37.5381 203.459 37.8506 cv
205.334 38.1631 207.209 36.9131 210.646 38.4756 cv
214.084 40.0381 217.209 44.1006 217.209 44.1006 cv
217.209 44.1006 213.146 40.9756 209.709 40.0381 cv
209.709 40.0381 212.834 42.2256 211.896 44.4131 cv
211.896 44.4131 210.334 43.7881 207.834 43.4756 cv
205.334 43.1631 206.271 44.1006 208.146 45.6631 cv
210.021 47.2256 207.834 48.4756 210.646 49.7256 cv
213.459 50.9756 214.396 51.9131 214.396 56.2881 cv
cp
f
254.705 35.2451 mo
254.705 35.2451 251.893 38.3701 249.08 38.6826 cv
246.268 38.9951 248.143 38.0576 244.08 38.9951 cv
240.018 39.9326 236.166 47.4326 236.166 47.4326 cv
236.166 47.4326 236.893 37.4326 240.643 36.8076 cv
244.393 36.1826 242.518 35.5576 246.268 36.1826 cv
250.018 36.8076 251.268 37.1201 254.705 35.2451 cv
cp
f
290.752 28.0576 mo
290.752 28.0576 284.397 31.6006 280.022 31.6006 cv
275.646 31.6006 279.397 29.4131 276.584 29.7256 cv
273.771 30.0381 272.834 28.4756 270.959 30.0381 cv
269.084 31.6006 265.646 30.0381 265.646 30.0381 cv
265.646 30.0381 269.084 28.1631 273.771 28.1631 cv
278.459 28.1631 280.022 29.1006 282.209 28.1631 cv
284.397 27.2256 290.752 28.0576 290.752 28.0576 cv
cp
1 .572549 0 rgb
f
294.084 45.9756 mo
290.334 44.7256 290.959 43.1631 293.459 43.1631 cv
303.772 43.1631 297.834 47.2256 294.084 45.9756 cv
cp
f
159.396 66.6006 mo
159.396 66.6006 158.639 65.7021 154.396 65.3506 cv
144.295 64.5146 132.002 66.8037 132.002 66.8037 cv
132.002 66.8037 141.689 62.9521 150.127 63.4756 cv
154.193 63.7295 154.865 63.874 156.795 64.3037 cv
158.67 64.7256 158.146 62.2256 158.146 62.2256 cv
158.146 62.2256 160.021 64.1006 159.396 66.6006 cv
cp
.964706 .823529 .607843 rgb
f
319.397 87.5381 mo
319.397 87.5381 312.557 86.8584 308.877 85.3506 cv
304.811 83.6826 302.522 81.6006 302.522 81.6006 cv
302.522 81.6006 305.959 82.8506 306.584 81.9131 cv
307.209 80.9756 305.647 80.0381 303.772 78.1631 cv
301.897 76.2881 302.209 73.7881 297.834 75.9756 cv
293.459 78.1631 287.834 75.6631 287.834 75.6631 cv
287.834 75.6631 288.147 73.7881 291.897 74.7256 cv
295.647 75.6631 299.709 73.1631 298.147 71.2881 cv
296.584 69.4131 295.647 68.4756 290.959 69.1006 cv
286.272 69.7256 283.459 68.4756 283.459 68.4756 cv
283.459 68.4756 288.147 67.2256 291.272 65.6631 cv
294.397 64.1006 298.147 64.7256 298.772 67.2256 cv
299.397 69.7256 301.272 70.3506 302.209 70.9756 cv
303.147 71.6006 307.834 71.9131 310.334 70.0381 cv
312.834 68.1631 312.834 68.1631 312.834 68.1631 cv
312.834 68.1631 312.209 72.2256 308.459 73.1631 cv
304.709 74.1006 308.147 76.6006 307.522 77.5381 cv
306.897 78.4756 309.709 81.6006 309.709 81.6006 cv
312.522 80.9756 li
312.522 80.9756 310.022 82.8506 312.209 84.1006 cv
314.397 85.3506 319.397 87.5381 319.397 87.5381 cv
cp
f
254.396 68.1631 mo
254.396 68.1631 260.334 62.5381 267.209 61.2881 cv
274.084 60.0381 280.022 59.1006 280.022 59.1006 cv
280.022 59.1006 270.334 58.1631 268.459 59.4131 cv
266.584 60.6631 264.084 60.3506 260.959 62.2256 cv
257.834 64.1006 255.646 65.3506 254.396 68.1631 cv
cp
f
136.896 79.4131 mo
136.896 79.4131 131.896 82.2256 127.209 79.4131 cv
122.521 76.6006 121.584 77.5381 118.146 79.4131 cv
114.709 81.2881 113.771 78.1631 114.709 77.2256 cv
115.646 76.2881 116.896 73.1631 116.896 73.1631 cv
116.896 73.1631 116.584 76.2881 113.146 76.2881 cv
109.709 76.2881 112.521 78.1631 113.146 80.0381 cv
113.771 81.9131 115.334 84.4131 117.521 82.5381 cv
119.709 80.6631 120.646 81.2881 122.521 80.6631 cv
124.396 80.0381 123.771 79.1006 125.959 80.6631 cv
128.146 82.2256 134.709 83.7881 136.896 79.4131 cv
cp
f
251.896 41.2881 mo
251.896 41.2881 248.771 42.2256 247.521 43.7881 cv
246.271 45.3506 245.334 45.0381 245.334 43.4756 cv
245.334 41.9131 244.709 41.2881 246.584 40.6631 cv
248.459 40.0381 250.959 39.7256 251.896 41.2881 cv
cp
f
193.787 67.9521 mo
193.787 67.9521 188.717 58.1514 172.818 53.749 cv
172.818 53.749 184.994 55.1084 192.436 62.8818 cv
192.436 62.8818 191.756 57.46 195.135 60.1748 cv
198.521 62.8818 199.877 58.1357 202.584 60.1748 cv
205.287 62.1982 203.928 60.1748 207.314 61.5264 cv
210.697 62.8818 204.951 56.1123 204.951 56.1123 cv
204.951 56.1123 208.678 56.1201 211.033 60.8506 cv
213.396 65.585 210.357 56.7959 214.42 60.8506 cv
218.471 64.9092 216.791 58.8115 220.166 61.1904 cv
223.545 63.5576 223.201 66.2568 223.545 60.5107 cv
223.885 54.7646 226.256 42.2529 226.256 42.2529 cv
225.576 58.1357 li
225.576 58.1357 227.779 45.4951 229.627 51.0381 cv
231.326 56.1123 229.627 59.1592 229.627 59.1592 cv
232.342 49.3545 li
232.342 57.1279 li
232.342 57.1279 236.061 45.9756 239.1 40.5576 cv
239.1 40.5576 236.053 52.0576 234.705 57.8115 cv
233.357 63.5576 236.658 50.1592 237.748 54.7646 cv
239.1 60.5107 243.154 52.7334 242.818 55.4365 cv
242.482 58.1357 243.158 57.8115 245.189 54.4209 cv
247.221 51.0381 259.396 37.5186 275.967 36.1631 cv
275.967 36.1631 253.314 42.5967 244.514 67.9521 cv
244.514 67.9521 256.693 45.9678 276.639 39.8818 cv
276.639 39.8818 262.092 44.9482 254.318 61.5264 cv
254.318 61.5264 267.514 54.7568 261.764 61.1904 cv
256.006 67.6084 258.041 64.2295 257.365 67.6084 cv
256.693 70.9951 270.209 62.542 270.209 62.542 cv
254.994 77.4209 li
254.994 77.4209 258.041 74.5186 265.752 72.2256 cv
273.459 69.9287 283.252 70.7646 283.252 70.7646 cv
283.252 70.7646 270.264 72.3076 264.709 74.7256 cv
259.162 77.1396 253.139 81.4756 251.615 83.8467 cv
248.572 88.5732 251.951 87.2295 248.912 89.9326 cv
245.869 92.6357 255.346 90.2725 249.588 93.9873 cv
243.834 97.7061 246.205 102.78 246.205 102.78 cv
246.205 102.78 241.467 111.233 240.451 111.233 cv
239.443 111.233 226.596 109.882 223.213 111.905 cv
219.826 113.937 219.814 114.288 220.502 117.663 cv
221.182 121.042 220.506 135.585 220.166 136.601 cv
219.826 137.608 219.814 116.647 216.439 114.276 cv
213.068 111.905 209.678 113.937 204.271 116.312 cv
198.861 118.679 187.025 128.827 187.025 128.827 cv
187.025 128.827 195.818 116.647 205.623 111.233 cv
215.424 105.823 203.588 107.519 199.193 110.222 cv
194.803 112.921 187.025 120.026 187.025 120.026 cv
187.025 120.026 188.717 112.921 201.225 105.147 cv
213.744 97.3701 186.35 109.55 186.35 109.55 cv
186.35 109.55 191.084 104.144 195.135 102.448 cv
199.193 100.749 196.83 98.3857 192.779 100.417 cv
188.721 102.448 174.174 110.558 174.174 110.558 cv
174.174 110.558 185.33 99.4053 192.436 97.3701 cv
199.537 95.3428 197.498 93.3115 192.092 94.3271 cv
186.693 95.3428 181.615 97.0342 181.615 97.0342 cv
181.615 97.0342 182.283 91.96 189.045 91.96 cv
195.818 91.96 182.287 88.585 187.365 88.2451 cv
192.436 87.9014 189.061 86.2021 183.646 83.5029 cv
178.232 80.7998 159.631 78.7725 159.631 78.7725 cv
159.631 78.7725 175.529 76.0615 185.678 81.4717 cv
195.818 86.8936 190.068 79.4443 182.963 74.042 cv
178.748 70.8271 176.537 69.6318 182.963 71.3271 cv
189.393 73.0264 175.869 62.542 183.646 65.585 cv
191.42 68.624 193.787 67.9521 193.787 67.9521 cv
cp
.27451 .207843 .145098 rgb
f
223.264 72.6553 mo
223.264 72.6553 228.396 68.8154 234.041 69.3232 cv
239.693 69.835 242.514 67.5264 245.592 67.5264 cv
248.666 67.5264 251.232 67.2686 251.232 67.2686 cv
251.232 67.2686 250.463 71.6279 246.869 77.2725 cv
243.279 82.9209 242.002 87.542 239.432 86.7686 cv
236.865 85.999 240.982 91.3896 238.146 96.7764 cv
235.326 102.167 235.072 105.241 235.072 105.241 cv
235.072 105.241 232.51 103.71 228.916 103.964 cv
225.318 104.218 219.158 104.218 219.42 100.37 cv
219.42 100.37 220.709 103.19 213.521 103.964 cv
206.334 104.733 202.74 105.507 202.99 106.272 cv
203.256 107.042 200.951 92.9326 203.51 90.1084 cv
203.51 90.1084 200.428 90.1084 198.377 84.7178 cv
196.326 79.335 194.787 69.835 194.787 69.835 cv
194.787 69.835 195.561 72.4014 205.053 71.1157 cv
214.541 69.835 221.209 68.8076 223.264 72.6553 cv
cp
.827451 .713726 .117647 rgb
f
220.428 95.2139 mo
219.732 95.2139 218.998 95.1826 218.248 95.1357 cv
209.654 94.5537 207.732 90.7256 207.35 89.5693 cv
207.01 88.5264 li
207.361 87.4907 li
207.482 87.0811 207.811 85.7334 207.686 84.5889 cv
207.639 84.2217 207.576 83.8857 207.506 83.5654 cv
207.08 81.4639 206.869 79.3154 208.912 76.1982 cv
211.412 72.4131 219.229 71.417 222.467 71.1631 cv
223.443 71.21 227.08 71.6904 229.732 76.0537 cv
230.111 76.6904 li
232.979 81.374 236.221 86.6865 233.576 90.2529 cv
231.279 93.3584 226.35 95.2139 220.428 95.2139 cv
cp
.27451 .207843 .145098 rgb
f
222.498 72.9131 mo
222.498 72.9131 225.061 73.167 227.115 76.5068 cv
229.162 79.8428 233.018 85.749 231.479 87.7998 cv
229.936 89.8506 225.576 92.167 217.881 91.6475 cv
210.178 91.1318 209.154 88.0498 209.154 88.0498 cv
209.154 88.0498 209.928 85.7407 209.67 83.4365 cv
209.412 81.1201 208.389 79.8428 210.439 76.7646 cv
212.49 73.6826 222.498 72.9131 222.498 72.9131 cv
cp
.360784 .388235 0 rgb
f
234.553 90.8779 mo
234.553 90.8779 238.084 89.2686 236.545 82.3467 cv
235.006 75.417 226.857 70.8657 226.857 70.8657 cv
226.857 70.8657 231.99 70.5967 235.072 74.9639 cv
238.146 79.335 241.225 87.5459 234.553 90.8779 cv
cp
.27451 .207843 .145098 rgb
f
212.557 83.9678 mo
209.42 83.9678 207.236 82.2061 207.01 79.4795 cv
206.658 75.0889 211.115 72.0967 215.717 71.0811 cv
217.045 70.7842 218.373 70.6357 219.662 70.6357 cv
221.908 70.6357 223.334 71.085 223.592 71.1787 cv
224.889 71.6631 226.334 72.8506 226.506 74.6982 cv
226.768 77.5576 223.9 79.5771 221.713 80.8428 cv
219.271 82.2646 215.697 83.9678 212.557 83.9678 cv
cp
f
223.525 72.6553 mo
223.525 72.6553 227.365 74.1982 220.697 78.3037 cv
214.029 82.4092 209.158 82.667 208.9 79.335 cv
208.643 75.9951 212.701 73.5068 216.342 72.6553 cv
220.697 71.6318 223.525 72.6553 223.525 72.6553 cv
cp
.705882 .678431 .45098 rgb
f
218.393 75.7334 mo
218.393 75.7334 213.002 79.0732 213.002 76.7646 cv
213.002 74.4561 219.932 73.6787 218.393 75.7334 cv
cp
.27451 .207843 .145098 rgb
f
219.229 96.3936 mo
219.229 96.3936 217.107 102.55 225.576 104.476 cv
225.576 104.476 223.842 105.628 220.764 104.284 cv
217.689 102.937 217.689 98.8936 219.229 96.3936 cv
cp
f
229.232 91.9639 mo
229.232 91.9639 232.119 94.6592 232.119 97.3545 cv
232.119 100.046 232.889 102.55 232.889 102.55 cv
232.889 102.55 231.154 99.667 230.967 97.7407 cv
230.771 95.8115 226.346 93.6982 226.346 93.6982 cv
226.346 93.6982 227.115 91.7764 229.232 91.9639 cv
cp
f
213.068 92.3506 mo
213.068 92.3506 208.064 93.5029 206.908 98.3193 cv
206.908 98.3193 207.482 93.5029 209.799 91.9639 cv
213.068 92.3506 li
cp
f
207.873 79.8428 mo
207.873 79.8428 206.334 77.1475 202.674 75.9951 cv
199.018 74.8428 198.061 73.1084 198.061 73.1084 cv
198.061 73.1084 198.252 75.417 200.365 76.3779 cv
202.482 77.3428 207.115 79.9014 207.686 84.5889 cv
207.873 79.8428 li
cp
f
235.389 76.5693 mo
235.389 76.5693 236.35 73.6826 239.818 72.9131 cv
243.279 72.1475 248.475 69.2607 248.475 69.2607 cv
248.475 69.2607 245.205 72.9131 240.971 74.2607 cv
236.736 75.6084 236.928 78.6904 236.928 78.6904 cv
235.389 76.5693 li
cp
f
338.147 135.452 mo
338.147 135.452 337.522 137.952 335.334 137.015 cv
333.147 136.077 332.209 132.64 335.022 132.327 cv
337.834 132.015 337.522 134.202 338.147 135.452 cv
cp
f
323.459 139.827 mo
323.459 139.827 324.397 142.327 322.209 142.015 cv
320.022 141.702 320.647 138.265 323.459 139.827 cv
cp
f
338.772 152.327 mo
338.772 152.327 337.834 154.202 335.647 153.577 cv
333.459 152.952 334.397 150.452 335.647 150.14 cv
336.897 149.827 339.084 150.14 338.772 152.327 cv
cp
f
355.022 163.265 mo
355.022 163.265 352.522 165.765 350.959 164.515 cv
349.397 163.265 349.084 160.765 350.959 161.077 cv
352.834 161.39 355.959 161.702 355.022 163.265 cv
cp
f
318.772 170.14 mo
318.772 170.14 319.709 173.577 316.584 172.64 cv
313.459 171.702 314.709 169.827 316.897 169.202 cv
319.084 168.577 318.772 170.14 318.772 170.14 cv
cp
f
306.272 182.015 mo
306.272 182.015 306.897 185.452 304.709 184.827 cv
302.522 184.202 302.209 181.702 303.459 181.077 cv
304.709 180.452 304.397 180.14 306.272 182.015 cv
cp
f
333.459 210.14 mo
333.459 210.14 332.834 213.577 330.022 210.765 cv
327.209 207.952 329.397 207.327 331.272 207.327 cv
333.147 207.327 333.459 208.577 333.459 210.14 cv
cp
f
358.459 140.765 mo
358.459 140.765 359.397 143.89 356.272 143.265 cv
353.147 142.64 351.897 140.765 354.709 139.515 cv
357.522 138.265 358.147 138.577 358.459 140.765 cv
cp
f
312.209 123.89 mo
312.209 123.89 314.709 125.765 312.209 126.077 cv
309.709 126.39 306.584 124.202 308.459 122.952 cv
310.334 121.702 311.584 122.327 312.209 123.89 cv
cp
f
310.022 139.202 mo
310.022 139.202 312.522 142.64 309.397 141.702 cv
306.272 140.765 303.772 138.89 305.959 137.64 cv
308.147 136.39 310.022 138.265 310.022 139.202 cv
cp
f
350.022 197.015 mo
350.022 197.015 349.709 199.827 347.209 199.515 cv
344.709 199.202 341.897 197.952 345.022 196.39 cv
348.147 194.827 350.022 194.827 350.022 197.015 cv
cp
f
354.084 229.515 mo
354.084 229.515 354.213 230.136 354.124 230.769 cv
354.022 231.554 353.6 232.362 352.209 232.015 cv
349.709 231.39 349.397 228.265 351.584 227.64 cv
353.772 227.015 354.084 229.515 354.084 229.515 cv
cp
f
319.084 229.827 mo
319.084 229.827 320.647 231.077 318.147 231.702 cv
315.647 232.327 313.772 229.827 315.959 228.89 cv
318.147 227.952 319.084 229.827 319.084 229.827 cv
cp
f
332.522 238.265 mo
332.522 238.265 334.709 242.952 331.272 241.39 cv
327.834 239.827 328.459 235.765 332.522 238.265 cv
cp
f
118.576 47.2568 mo
118.576 47.2568 171.947 .0498047 277.662 8.26074 cv
277.662 8.26074 174.002 9.28418 118.576 47.2568 cv
cp
.984314 .886275 .866667 rgb
f
212.416 56.8076 mo
212.416 56.8076 204.502 43.4795 177.002 45.1436 cv
177.002 45.1436 198.666 45.9756 212.416 56.8076 cv
cp
.964706 .823529 .607843 rgb
f
181.166 77.2256 mo
181.166 77.2256 169.08 67.2256 139.08 72.2256 cv
139.08 72.2256 157.416 69.7256 181.166 77.2256 cv
cp
f
203.51 90.1084 mo
203.51 90.1084 200.654 96.5693 202.99 106.272 cv
202.99 106.272 206.709 104.866 213.521 103.964 cv
213.521 103.964 206.592 103.054 203.67 104.515 cv
203.67 104.515 201.061 99.4561 203.51 90.1084 cv
cp
.933333 .886275 .533333 rgb
f
250.334 100.351 mo
250.334 100.351 263.252 90.9756 280.334 98.0537 cv
280.334 98.0537 266.795 94.5146 250.334 100.351 cv
cp
.964706 .823529 .607843 rgb
f
248.459 30.3506 mo
248.459 30.3506 253.252 22.0146 272.834 20.7646 cv
272.834 20.7646 255.334 16.6006 248.459 30.3506 cv
cp
f
175.752 71.8037 mo
175.752 71.8037 165.131 67.4326 149.92 68.4756 cv
149.92 68.4756 162.83 64.5107 175.752 71.8037 cv
cp
f
182.834 88.2646 mo
182.834 88.2646 169.295 89.3037 160.334 105.14 cv
160.334 105.14 169.502 93.2646 182.834 88.2646 cv
cp
f
255.334 82.6396 mo
255.334 82.6396 263.67 73.4756 282.209 75.9756 cv
282.209 75.9756 266.17 75.9756 255.334 82.6396 cv
cp
f
249.084 23.4756 mo
249.084 23.4756 255.752 14.5107 276.377 16.8037 cv
276.377 16.8037 263.045 16.3936 249.084 23.4756 cv
cp
f
152.834 47.8506 mo
152.834 47.8506 155.33 45.5537 157.627 47.2256 cv
159.92 48.8936 158.041 49.7295 155.752 50.1436 cv
153.459 50.5576 153.877 49.3076 151.377 49.3076 cv
148.877 49.3076 147.42 49.5186 147.42 49.5186 cv
147.42 49.5186 150.127 47.6396 152.834 47.8506 cv
cp
1 .572549 0 rgb
f
143.045 43.4756 mo
143.045 43.4756 143.045 45.1436 140.334 44.9326 cv
137.627 44.7256 142.006 41.8037 143.045 43.4756 cv
cp
f
209.92 28.6826 mo
209.92 28.6826 201.381 26.6006 195.545 28.6826 cv
189.709 30.7686 189.709 30.7686 189.709 30.7686 cv
189.709 30.7686 194.295 26.1787 200.334 25.9756 cv
206.377 25.7686 209.92 28.6826 209.92 28.6826 cv
cp
f
291.377 19.3076 mo
291.377 19.3076 310.542 15.7686 327.627 20.5576 cv
330.959 24.9326 li
330.959 24.9326 316.17 18.6826 291.377 19.3076 cv
cp
f
209.92 28.6826 mo
209.92 28.6826 203.67 23.2686 187.42 29.9326 cv
187.42 29.9326 194.092 24.7256 201.795 24.9326 cv
209.502 25.1436 209.92 28.6826 209.92 28.6826 cv
cp
.964706 .823529 .607843 rgb
f
143.195 23.1255 mo
143.195 23.1255 150.695 18.7505 156.945 18.1255 cv
163.195 17.5005 160.695 13.7505 170.695 13.1255 cv
180.695 12.5005 186.738 11.2544 194.238 9.37939 cv
201.738 7.50439 211.738 5.00439 218.613 3.75439 cv
225.488 2.50439 231.32 3.96143 240.695 3.33643 cv
250.07 2.71143 259.027 .625488 267.152 2.50049 cv
275.277 4.37549 278.614 5.62939 282.989 6.25439 cv
287.364 6.87939 295.278 5.00049 303.403 8.12549 cv
311.528 11.2505 312.778 11.8755 320.278 12.5005 cv
327.778 13.1255 338.196 14.3755 343.821 18.1255 cv
343.821 18.1255 350.696 23.7505 355.696 24.3755 cv
360.696 25.0005 367.571 30.0005 371.321 32.5005 cv
375.071 35.0005 378.403 36.2505 384.028 41.2505 cv
389.653 46.2505 403.403 55.0005 408.403 59.3755 cv
413.403 63.7505 419.028 68.1255 422.778 74.3755 cv
426.528 80.6255 439.446 86.8755 447.571 100 cv
455.696 113.125 467.153 125 478.403 151.25 cv
489.653 177.5 496.528 203.125 497.778 238.75 cv
499.028 274.375 495.071 275 495.071 280.625 cv
495.071 286.25 493.821 293.75 493.821 299.375 cv
493.821 305 490.903 313.125 488.403 321.25 cv
485.903 329.375 482.153 345.625 478.403 352.5 cv
474.653 359.375 475.696 371.875 468.821 381.25 cv
461.946 390.629 460.071 391.254 458.196 397.504 cv
456.321 403.754 451.946 405.629 448.821 410.004 cv
445.696 414.379 445.903 410.629 442.153 416.879 cv
438.403 423.129 432.778 430.004 419.653 436.879 cv
406.528 443.754 391.321 460.004 373.196 466.879 cv
355.071 473.754 342.571 480.004 335.696 481.254 cv
328.821 482.504 323.196 482.504 315.696 485.004 cv
308.196 487.504 305.696 486.879 293.821 488.754 cv
281.946 490.629 270.07 491.254 263.195 491.879 cv
256.32 492.504 240.07 489.379 233.195 489.379 cv
226.32 489.379 214.445 485.629 204.445 486.254 cv
194.445 486.879 188.82 484.379 176.945 481.254 cv
165.07 478.129 145.695 473.129 132.57 468.129 cv
119.445 463.129 116.32 461.879 106.945 456.254 cv
97.5703 450.629 95.2773 445.629 89.6523 441.879 cv
84.0273 438.129 73.1953 433.129 68.8203 427.504 cv
64.4453 421.879 62.5703 420.004 58.1953 413.129 cv
53.8203 406.254 53.8203 404.379 49.4453 399.379 cv
45.0703 394.379 45.0703 393.754 41.3203 388.754 cv
37.5703 383.75 37.5703 383.75 32.5703 373.125 cv
27.5703 362.5 26.9453 360.625 23.8203 355.625 cv
20.6953 350.625 14.4453 335.625 13.8203 330 cv
13.8203 330 12.5703 323.125 10.6953 317.5 cv
8.82031 311.875 6.94531 309.375 6.32031 302.5 cv
5.69531 295.625 1.94531 293.125 2.57031 288.125 cv
3.19531 283.125 -.554688 279.375 .0703125 272.5 cv
.695313 265.625 .695313 258.75 1.32031 251.25 cv
1.94531 243.75 .0703125 241.875 .695313 237.5 cv
1.32031 233.125 1.32031 227.5 1.94531 224.375 cv
2.57031 221.25 2.57031 216.875 3.82031 214.375 cv
5.07031 211.875 2.57031 205.625 4.44531 200 cv
6.32031 194.375 8.19531 193.75 8.82031 183.125 cv
9.44531 172.5 13.1953 170 15.0703 164.375 cv
16.9453 158.75 19.4453 153.125 21.9453 146.25 cv
24.4453 139.375 28.8203 133.75 33.1953 123.125 cv
37.5703 112.5 42.5703 111.875 43.1953 106.875 cv
43.8203 101.875 46.9453 95.0005 51.3203 92.5005 cv
55.6953 90.0005 64.4453 74.3755 68.8203 72.5005 cv
73.1953 70.6255 80.6953 60.0005 88.8203 55.6255 cv
96.9453 51.2505 100.695 46.8755 106.32 43.7505 cv
111.945 40.6255 121.32 31.8755 123.195 31.2505 cv
125.07 30.6255 133.82 24.3755 143.195 23.1255 cv
cp
.27451 .207843 .145098 rgb
f
261.102 486.293 mo
257.43 486.293 251.883 485.606 246.523 484.942 cv
241.375 484.309 236.512 483.704 233.195 483.704 cv
230.828 483.704 227.27 483.09 223.5 482.434 cv
218.336 481.528 212.477 480.512 206.785 480.512 cv
205.879 480.512 204.98 480.54 204.094 480.59 cv
203.172 480.645 202.293 480.676 201.449 480.676 cv
195.906 480.676 191.641 479.465 185.184 477.637 cv
183.129 477.063 180.898 476.426 178.387 475.762 cv
176.367 475.239 li
164.559 472.129 146.711 467.442 134.59 462.825 cv
121.539 457.856 118.797 456.75 109.863 451.387 cv
104.98 448.458 102.293 445.754 99.6914 443.137 cv
97.6797 441.114 95.6055 439.028 92.7969 437.161 cv
91.0938 436.02 88.9375 434.778 86.625 433.442 cv
81.7734 430.637 75.7344 427.153 73.2969 424.016 cv
72.1875 422.59 71.2344 421.399 70.3594 420.305 cv
67.793 417.102 66.0977 414.981 62.9844 410.083 cv
61.3984 407.598 60.4219 405.801 59.5898 404.27 cv
58.1094 401.555 56.8281 399.2 53.7148 395.637 cv
51.0234 392.571 50.1875 391.379 48.8047 389.418 cv
48.0508 388.352 47.1797 387.114 45.8594 385.344 cv
42.4531 380.809 42.4531 380.809 37.7031 370.711 cv
34.8516 364.598 li
32.2813 359.051 31.2148 356.758 28.6328 352.622 cv
25.7266 347.977 19.9453 333.77 19.457 329.375 cv
19.3438 328.692 18.0547 321.645 16.0742 315.708 cv
15.4883 313.942 14.9023 312.458 14.3438 311.063 cv
13.1797 308.133 12.332 306.02 11.9688 301.989 cv
11.582 297.75 10.2422 294.747 9.26563 292.555 cv
8.36328 290.516 8.07813 289.782 8.19531 288.829 cv
8.64844 285.223 7.69531 282.29 6.85547 279.696 cv
6.12109 277.446 5.49219 275.497 5.71875 273.012 cv
6.04297 269.411 6.21094 265.809 6.37109 262.118 cv
6.52344 258.75 6.67188 255.309 6.97266 251.719 cv
7.36719 246.973 6.88281 244 6.53125 241.825 cv
6.26563 240.18 6.15234 239.403 6.30859 238.301 cv
6.625 236.102 6.79688 233.602 6.95313 231.231 cv
7.09766 229.04 7.25 226.766 7.50781 225.485 cv
7.75 224.266 7.91797 222.887 8.07813 221.481 cv
8.25781 219.958 8.51953 217.657 8.89453 216.911 cv
10.1719 214.352 9.90625 211.622 9.62891 208.727 cv
9.40625 206.415 9.15625 203.797 9.82422 201.786 cv
10.2813 200.418 10.7461 199.391 11.1797 198.415 cv
12.8672 194.614 14.0078 191.524 14.4805 183.458 cv
14.832 177.5 16.2266 174.899 17.8398 171.883 cv
18.7109 170.27 19.6914 168.438 20.4492 166.161 cv
21.4648 163.122 22.6758 160.075 23.9609 156.817 cv
25.0273 154.11 26.1523 151.274 27.2734 148.184 cv
28.3438 145.254 29.8828 142.418 31.668 139.129 cv
33.7305 135.34 36.0703 131.04 38.4414 125.282 cv
40.4141 120.489 42.4414 118.223 44.2266 116.219 cv
46.1406 114.083 48.3125 111.649 48.8203 107.579 cv
49.3242 103.563 51.8555 98.7192 54.1328 97.4224 cv
57.125 95.7114 59.9141 92.0396 64.2266 86.1802 cv
66.3477 83.3013 69.8984 78.4849 71.2734 77.5981 cv
74.0313 76.4341 76.8438 73.6099 80.4063 70.0278 cv
83.8555 66.563 87.7734 62.6255 91.5078 60.6138 cv
96.4258 57.9692 99.832 55.3521 102.836 53.0435 cv
105.039 51.3481 106.941 49.8872 109.078 48.6997 cv
112.656 46.7153 117.215 43.0122 120.879 40.0396 cv
122.48 38.7388 124.633 36.9888 125.449 36.4536 cv
126.281 36.1216 127.176 35.6138 128.523 34.8599 cv
131.824 32.9966 137.961 29.5396 143.945 28.7388 cv
145.066 28.5942 li
146.047 28.0239 li
147.852 26.9771 153.426 24.1685 157.516 23.7661 cv
161.922 23.3208 164.051 21.5903 165.461 20.4458 cv
166.477 19.6177 167.215 19.0239 171.047 18.7778 cv
178.375 18.3208 183.652 16.3677 188.309 14.6372 cv
190.652 13.7739 192.867 12.9575 195.199 12.3716 cv
202.504 10.5474 212.402 8.69189 219.211 7.44971 cv
221.102 7.10986 222.945 6.96143 225.367 6.96143 cv
226.531 6.96143 227.719 6.99268 228.965 7.02002 cv
230.438 7.05908 231.984 7.10596 233.676 7.10596 cv
235.535 7.10596 237.563 7.05518 239.824 6.90283 cv
244.25 6.58252 li
248.539 6.2583 252.973 5.92627 257.078 5.92627 cv
260.82 5.92627 263.832 6.19971 266.297 6.77393 cv
272.688 8.24658 275.82 8.62158 278.852 8.98486 cv
279.786 9.10205 280.723 9.20752 281.774 9.35986 cv
283.469 9.59814 285.313 9.61768 287.446 9.64502 cv
291.465 9.68408 296.465 9.73096 301.161 11.5396 cv
310.067 14.9653 315.731 15.6333 323.352 16.27 cv
328.95 16.7388 334.708 18.9028 340.461 22.6958 cv
342.266 24.1411 348.993 29.2466 354.993 30.0005 cv
358.094 30.3872 363.758 34.2271 366.805 36.2896 cv
368.18 37.2153 li
369.911 38.3677 371.641 39.1606 373.313 39.9302 cv
375.907 41.1138 378.352 42.2349 381.309 44.8638 cv
384.602 47.7935 390.122 51.1997 395.454 54.5005 cv
399.797 57.1958 404.297 59.981 406.336 61.7661 cv
407.649 62.9106 li
411.68 66.4067 413.516 68.0044 416.461 72.9146 cv
418.383 76.1138 421.86 79.5513 426.258 83.9067 cv
431.645 89.2388 438.344 95.8638 442.754 102.977 cv
445.45 107.333 448.77 111.719 452.282 116.356 cv
459.965 126.504 466.586 137.016 474.028 154.375 cv
485.266 180.602 490.336 205.438 491.528 239.375 cv
492.411 264.579 491.583 269.434 490.368 274.461 cv
489.848 276.586 489.403 278.422 489.403 280.625 cv
489.403 283.168 489.102 286.368 488.805 289.461 cv
488.485 292.821 488.153 296.293 488.153 299.375 cv
488.153 304.668 486.278 310.184 484.028 317.5 cv
483.094 320.528 482.086 329.274 480.903 334.375 cv
479.067 342.34 476.719 347.458 474.653 351.25 cv
473.438 353.477 471.954 361.532 470.903 363.75 cv
468.754 368.282 468.676 371.86 464.25 377.895 cv
462.204 380.688 460.61 382.684 459.336 384.282 cv
456.25 388.145 454.383 390.489 452.766 395.872 cv
451.973 398.52 450.5 399.954 448.469 401.946 cv
447.125 403.262 445.606 404.758 444.208 406.7 cv
442.032 409.758 441.192 411.231 439.915 413.469 cv
439.239 414.668 436.622 417.129 434.653 418.754 cv
424.028 427.504 432.821 424.387 420.903 430.629 cv
415.864 433.262 408.196 440.528 402.422 444.27 cv
392.899 450.442 382.102 457.434 371.188 461.575 cv
364.004 464.301 357.7 466.926 352.27 469.184 cv
344.438 472.442 338.258 475.02 334.68 475.676 cv
332.543 476.059 330.532 476.321 328.543 476.583 cv
324.09 477.161 319.481 477.766 313.907 479.622 cv
309.649 481.036 307.422 481.301 302.985 481.809 cv
300.415 482.102 297.29 482.465 292.938 483.145 cv
284.094 484.543 275.031 485.247 268.418 485.762 cv
266.27 485.93 264.336 486.075 262.684 486.231 cv
262.211 486.27 261.684 486.293 261.102 486.293 cv
cp
1 1 1 rgb
f
362.52 42.1763 mo
362.52 42.1763 468.633 107.098 479.52 213.735 cv
491.071 326.805 441.036 446.895 306.329 478.09 cv
306.329 478.09 420.079 445.356 455.657 330.704 cv
513.899 143.036 362.52 42.1763 362.52 42.1763 cv
cp
.27451 .207843 .145098 rgb
f
227.852 110.317 mo
227.867 110.329 227.871 110.336 227.871 110.336 cv
227.844 110.336 227.168 110.036 226.277 110.036 cv
225.223 110.102 224.328 110.141 223.406 110.141 cv
220.695 110.141 218.578 109.747 216.914 109.122 cv
215.707 109.536 214.273 109.848 212.582 110.024 cv
209.313 110.375 207.488 110.672 206.504 110.864 cv
205.344 112.137 li
198.164 112.137 li
195.969 105.625 li
196.281 104.879 li
195.805 100.43 195.668 97.0278 195.914 94.3638 cv
194.734 93.1021 193.617 91.3716 192.719 89.0239 cv
190.734 83.8091 189.363 75.5435 189.211 74.6177 cv
201.242 71.8325 li
200.617 69.7505 199.18 68.9028 198.73 68.77 cv
198.73 68.77 199.164 68.895 200.25 68.895 cv
200.25 68.895 li
201.137 68.895 202.246 68.8169 203.594 68.6333 cv
204.324 68.5356 li
208.227 68.0044 211.59 67.5474 214.535 67.5474 cv
217.113 67.5474 219.32 67.9458 221.148 68.7466 cv
223.301 67.7935 226.102 66.938 229.188 66.938 cv
229.68 66.938 230.176 66.9614 230.68 67.0122 cv
230.98 67.0356 231.27 67.0513 231.539 67.0513 cv
232.914 67.0513 233.961 66.7388 235.266 66.3364 cv
236.711 65.895 238.352 65.395 240.344 65.395 cv
242.68 65.395 244.637 65.2114 244.742 65.1958 cv
252.875 64.3911 li
251.445 72.438 li
251.352 72.9536 250.438 77.6763 246.711 83.5396 cv
245.863 84.8716 245.172 86.1411 244.57 87.2427 cv
243.574 89.0708 242.441 91.1372 240.844 92.6646 cv
240.961 94.8481 240.707 97.5825 239.238 100.375 cv
237.469 103.754 237.18 105.672 237.18 105.692 cv
235.875 114.926 li
227.852 110.317 li
cp
f
178.766 140.133 mo
178.766 140.133 198.773 151.68 242.648 145.524 cv
242.648 145.524 204.938 160.918 178.766 140.133 cv
cp
f
165.68 145.907 mo
165.68 145.907 192.617 169.77 259.969 150.528 cv
259.969 150.528 198.391 177.852 165.68 145.907 cv
cp
f
162.211 156.684 mo
162.211 156.684 195.313 183.243 259.969 160.145 cv
259.969 160.145 198.773 190.938 162.211 156.684 cv
cp
f
154.129 165.922 mo
154.129 165.922 166.902 177.633 199.93 180.547 cv
226.102 182.856 257.66 174.004 270.359 165.536 cv
270.359 165.536 256.508 182.856 204.547 184.395 cv
186.563 184.93 162.375 178.305 154.129 165.922 cv
cp
f
143.738 175.543 mo
143.738 175.543 159.902 190.551 201.469 192.86 cv
243.035 195.172 267.672 179.774 278.442 173.618 cv
278.442 173.618 263.922 193.29 222.25 196.329 cv
185.305 199.02 154.898 187.856 143.738 175.543 cv
cp
f
145.664 187.09 mo
145.664 187.09 161.824 202.098 203.391 204.411 cv
244.961 206.719 269.594 191.325 280.372 185.165 cv
280.372 185.165 265.844 204.833 224.172 207.872 cv
187.23 210.567 156.82 199.403 145.664 187.09 cv
cp
f
154.898 200.942 mo
154.898 200.942 167.672 212.653 200.695 215.571 cv
226.867 217.879 258.43 209.028 271.133 200.563 cv
271.133 200.563 248.422 221.344 205.316 219.418 cv
186.059 218.559 162.598 211.336 154.898 200.942 cv
cp
f
156.055 210.954 mo
156.055 210.954 168.828 222.661 201.855 225.575 cv
228.027 227.887 259.586 219.032 272.289 210.567 cv
272.289 210.567 249.578 231.352 206.473 229.422 cv
187.211 228.563 163.754 221.344 156.055 210.954 cv
cp
f
155.281 221.727 mo
155.281 221.727 168.055 233.438 201.082 236.352 cv
227.254 238.661 258.813 229.809 271.516 221.344 cv
271.516 221.344 248.809 242.125 205.703 240.2 cv
186.438 239.34 162.984 232.118 155.281 221.727 cv
cp
f
154.516 231.352 mo
154.516 231.352 167.289 243.055 200.316 245.977 cv
226.488 248.286 258.047 239.434 270.746 230.965 cv
270.746 230.965 248.039 251.747 204.938 249.825 cv
185.668 248.965 162.211 241.743 154.516 231.352 cv
cp
f
gsave
100.605 61.313 mo
100.605 61.313 29.4219 113.891 21.3984 236.567 cv
13.375 359.247 116.648 459.25 200.867 481.934 cv
200.867 481.934 83.3008 376.918 119.523 214.989 cv
155.746 53.0552 100.605 61.313 100.605 61.313 cv
cp
clp
88.0703 71.0825 mo
88.0703 71.0825 93.0859 89.645 133.191 94.2817 cv
133.191 94.2817 90.0703 95.8286 88.0703 71.0825 cv
cp
f
81.5547 79.3364 mo
81.5547 79.3364 87.0703 105.625 142.719 105.106 cv
142.719 105.106 80.5547 110.27 81.5547 79.3364 cv
cp
f
74.0391 87.9692 mo
74.0391 87.9692 80.0547 115.801 138.711 113.223 cv
138.711 113.223 77.0469 124.571 74.0391 87.9692 cv
cp
f
67.6406 98.6763 mo
67.6406 98.6763 72.9063 112.985 94.3359 119.555 cv
115.766 126.129 124.039 122.645 143.211 120.711 cv
143.211 120.711 117.168 130.641 94.7109 123.422 cv
70.6484 115.692 67.6406 98.6763 67.6406 98.6763 cv
cp
f
61.5508 104.801 mo
61.5508 104.801 65.8047 119.458 86.7188 127.598 cv
107.625 135.75 116.117 132.891 135.379 132.391 cv
135.379 132.391 108.711 140.356 86.8164 131.485 cv
63.3633 121.989 61.5508 104.801 61.5508 104.801 cv
cp
f
55.2344 118.012 mo
55.2344 118.012 66.3516 136.454 89.4414 141.977 cv
116.898 148.551 142.461 140.821 142.461 140.821 cv
142.461 140.821 118.023 151.254 91.3281 146.231 cv
60.6406 140.454 55.2344 118.012 55.2344 118.012 cv
cp
f
48.9492 125.219 mo
48.9492 125.219 59.0664 144.266 81.8242 151.094 cv
108.875 159.219 134.82 152.95 134.82 152.95 cv
134.82 152.95 109.859 161.989 83.4688 155.45 cv
53.1406 147.938 48.9492 125.219 48.9492 125.219 cv
cp
f
44.9297 135.973 mo
44.9297 135.973 55.3359 154.848 78.2031 161.309 cv
105.375 168.985 131.215 162.29 131.215 162.29 cv
131.215 162.29 106.395 171.735 79.9141 165.633 cv
49.4727 158.622 44.9297 135.973 44.9297 135.973 cv
cp
f
39.6641 145.254 mo
39.6641 145.254 50.0703 164.129 72.9375 170.586 cv
100.109 178.266 125.957 171.571 125.957 171.571 cv
125.957 171.571 101.133 181.012 74.6563 174.911 cv
44.2031 167.895 39.6641 145.254 39.6641 145.254 cv
cp
f
35.9063 154.145 mo
35.9063 154.145 46.3125 173.024 69.1836 179.477 cv
96.3516 187.157 122.195 180.465 122.195 180.465 cv
122.195 180.465 97.3711 189.903 70.8906 183.805 cv
40.4492 176.786 35.9063 154.145 35.9063 154.145 cv
cp
f
31.3906 163.422 mo
31.3906 163.422 41.8008 182.305 64.668 188.754 cv
91.8398 196.434 117.684 189.743 117.684 189.743 cv
117.684 189.743 92.8594 199.184 66.3828 193.083 cv
35.9297 186.071 31.3906 163.422 31.3906 163.422 cv
cp
f
27.2266 172.313 mo
27.2266 172.313 37.6328 191.192 60.4922 197.645 cv
87.6719 205.321 113.508 198.633 113.508 198.633 cv
113.508 198.633 88.6914 208.075 62.2109 201.973 cv
31.7656 194.961 27.2266 172.313 27.2266 172.313 cv
cp
f
24.9766 185.333 mo
24.9766 185.333 36.4688 203.52 59.6719 208.555 cv
87.2461 214.528 112.645 206.247 112.645 206.247 cv
112.645 206.247 88.4219 217.208 61.6328 212.758 cv
30.8359 207.653 24.9766 185.333 24.9766 185.333 cv
cp
f
21.3281 194.469 mo
21.3281 194.469 32.8281 212.661 56.0313 217.696 cv
83.6016 223.668 109.008 215.387 109.008 215.387 cv
109.008 215.387 84.7852 226.348 57.9922 221.899 cv
27.1914 216.786 21.3281 194.469 21.3281 194.469 cv
cp
f
21.5078 209.454 mo
21.5078 209.454 34.2813 226.719 57.7813 229.977 cv
85.707 233.836 110.445 223.653 110.445 223.653 cv
110.445 223.653 87.0781 236.426 60.043 234.028 cv
28.9609 231.266 21.5078 209.454 21.5078 209.454 cv
cp
f
18.5352 218.844 mo
18.5352 218.844 31.3086 236.114 54.8086 239.364 cv
82.7344 243.231 107.469 233.047 107.469 233.047 cv
107.469 233.047 84.1016 245.821 57.0625 243.415 cv
25.9844 240.653 18.5352 218.844 18.5352 218.844 cv
cp
f
17.2148 230.497 mo
17.2148 230.497 30.6172 247.25 54.2266 249.579 cv
82.2734 252.333 106.609 241.18 106.609 241.18 cv
106.609 241.18 83.7422 254.868 56.6406 253.536 cv
25.4766 252 17.2148 230.497 17.2148 230.497 cv
cp
f
14.5938 240 mo
14.5938 240 27.9961 256.747 51.6055 259.083 cv
79.6563 261.84 103.992 250.692 103.992 250.692 cv
103.992 250.692 81.1172 264.372 54.0156 263.032 cv
22.8438 261.5 14.5938 240 14.5938 240 cv
cp
f
17.4219 254.696 mo
17.4219 254.696 32.1094 270.27 55.8203 270.622 cv
84 271.024 107.371 257.872 107.371 257.872 cv
107.371 257.872 85.6563 273.422 58.543 274.364 cv
27.3594 275.438 17.4219 254.696 17.4219 254.696 cv
cp
f
15.5625 264.383 mo
15.5625 264.383 30.25 279.961 53.9648 280.309 cv
82.1328 280.719 105.512 267.567 105.512 267.567 cv
105.512 267.567 83.7891 283.114 56.6797 284.047 cv
25.4883 285.122 15.5625 264.383 15.5625 264.383 cv
cp
f
17.2109 277.93 mo
17.2109 277.93 33.0078 292.313 56.6719 290.809 cv
84.793 289.02 107.133 274.086 107.133 274.086 cv
107.133 274.086 86.6289 291.286 59.6641 294.336 cv
28.6484 297.836 17.2109 277.93 17.2109 277.93 cv
cp
f
16.0703 287.739 mo
16.0703 287.739 31.8555 302.125 55.5313 300.614 cv
83.6523 298.836 105.992 283.895 105.992 283.895 cv
105.992 283.895 85.4844 301.094 58.5156 304.141 cv
27.4922 307.641 16.0703 287.739 16.0703 287.739 cv
cp
f
18.4063 301.59 mo
18.4063 301.59 35.1094 314.844 58.6328 311.7 cv
86.5664 307.946 107.867 291.485 107.867 291.485 cv
107.867 291.485 88.5469 310.079 61.8438 315 cv
31.125 320.661 18.4063 301.59 18.4063 301.59 cv
cp
f
17.9141 311.465 mo
17.9141 311.465 34.6172 324.715 58.1445 321.559 cv
86.082 317.813 107.375 301.352 107.375 301.352 cv
107.375 301.352 88.0508 319.942 61.3477 324.864 cv
30.6328 330.524 17.9141 311.465 17.9141 311.465 cv
cp
f
26.6172 325.719 mo
26.6172 325.719 44.5391 337.157 67.625 331.559 cv
95.043 324.899 114.602 306.29 114.602 306.29 cv
114.602 306.29 97.2305 326.813 71.1563 334.508 cv
41.1563 343.36 26.6172 325.719 26.6172 325.719 cv
cp
f
27.1016 335.59 mo
27.1016 335.59 45.0313 347.02 68.1172 341.415 cv
95.5391 334.77 115.098 316.168 115.098 316.168 cv
115.098 316.168 97.7148 336.68 71.6328 344.375 cv
41.6445 353.223 27.1016 335.59 27.1016 335.59 cv
cp
f
28.8672 346.602 mo
28.8672 346.602 46.7969 358.032 69.8867 352.438 cv
97.2969 345.77 116.859 327.168 116.859 327.168 cv
116.859 327.168 99.4922 347.696 73.4063 355.391 cv
43.4141 364.239 28.8672 346.602 28.8672 346.602 cv
cp
f
29.3594 356.465 mo
29.3594 356.465 47.2891 367.895 70.375 362.293 cv
97.7969 355.649 117.352 337.047 117.352 337.047 cv
117.352 337.047 99.9648 357.559 73.8906 365.254 cv
43.8984 374.09 29.3594 356.465 29.3594 356.465 cv
cp
f
30.3711 367.09 mo
30.3711 367.09 48.3008 378.524 71.3906 372.918 cv
98.8047 366.258 118.359 347.653 118.359 347.653 cv
118.359 347.653 100.992 368.18 74.9141 375.875 cv
44.9141 384.727 30.3711 367.09 30.3711 367.09 cv
cp
f
30.8633 376.958 mo
30.8633 376.958 48.793 388.391 71.875 382.782 cv
99.3008 376.133 118.855 357.528 118.855 357.528 cv
118.855 357.528 101.473 378.047 75.3945 385.747 cv
45.4063 394.583 30.8633 376.958 30.8633 376.958 cv
cp
f
33.7539 386.036 mo
33.7539 386.036 51.6836 397.465 74.7695 391.868 cv
102.191 385.208 121.746 366.602 121.746 366.602 cv
121.746 366.602 104.375 387.129 78.2969 394.825 cv
48.3008 403.676 33.7539 386.036 33.7539 386.036 cv
cp
f
34.2461 395.903 mo
34.2461 395.903 52.1758 407.325 75.2578 401.731 cv
102.684 395.083 122.246 376.473 122.246 376.473 cv
122.246 376.473 104.859 396.997 78.7773 404.692 cv
48.7891 413.528 34.2461 395.903 34.2461 395.903 cv
cp
f
37.8906 404.583 mo
37.8906 404.583 55.8203 416.028 78.9063 410.422 cv
106.328 403.762 125.883 385.161 125.883 385.161 cv
125.883 385.161 108.508 405.676 82.4297 413.372 cv
52.4375 422.231 37.8906 404.583 37.8906 404.583 cv
cp
f
38.3867 414.458 mo
38.3867 414.458 56.3125 425.891 79.3945 420.286 cv
106.816 413.637 126.375 395.032 126.375 395.032 cv
126.375 395.032 108.992 415.54 82.9141 423.235 cv
52.9219 432.09 38.3867 414.458 38.3867 414.458 cv
cp
f
46.3047 420.239 mo
46.3047 420.239 64.2344 431.661 87.3242 426.067 cv
114.742 419.407 134.297 400.801 134.297 400.801 cv
134.297 400.801 116.922 421.333 90.8477 429.028 cv
60.8477 437.872 46.3047 420.239 46.3047 420.239 cv
cp
f
46.7969 430.11 mo
46.7969 430.11 64.7266 441.536 87.8047 435.93 cv
115.227 429.278 134.789 410.676 134.789 410.676 cv
134.789 410.676 117.406 431.192 91.3281 438.887 cv
61.3438 447.727 46.7969 430.11 46.7969 430.11 cv
cp
f
53.8203 436.477 mo
53.8203 436.477 71.75 447.903 94.8359 442.309 cv
122.258 435.645 141.816 417.043 141.816 417.043 cv
141.816 417.043 124.441 437.559 98.3633 445.266 cv
68.3672 454.114 53.8203 436.477 53.8203 436.477 cv
cp
f
54.3203 446.34 mo
54.3203 446.34 72.2461 457.766 95.332 452.161 cv
122.75 445.52 142.309 426.918 142.309 426.918 cv
142.309 426.918 124.926 447.434 98.8477 455.129 cv
68.8555 463.965 54.3203 446.34 54.3203 446.34 cv
cp
f
61.3438 452.317 mo
61.3438 452.317 79.2773 463.754 102.363 458.157 cv
129.781 451.497 149.336 432.883 149.336 432.883 cv
149.336 432.883 131.969 453.411 105.887 461.106 cv
75.8867 469.965 61.3438 452.317 61.3438 452.317 cv
cp
f
61.8359 462.192 mo
61.8359 462.192 79.7656 473.614 102.844 468.012 cv
130.273 461.372 149.828 442.766 149.828 442.766 cv
149.828 442.766 132.445 463.286 106.371 470.969 cv
76.375 479.817 61.8359 462.192 61.8359 462.192 cv
cp
f
grestore
94.7109 66.5903 mo
94.7109 66.5903 47.9609 95.8286 22.3984 190.165 cv
-3.17188 284.497 44.6523 421.879 153.363 458.989 cv
153.363 458.989 55.2773 415.629 30.9258 298.426 cv
.539063 152.192 94.7109 66.5903 94.7109 66.5903 cv
cp
f
gsave
362.52 42.1763 mo
362.52 42.1763 455.239 109.395 467.758 189.071 cv
480.278 268.75 480.903 376.25 357.778 455.629 cv
357.778 455.629 452.153 375.625 428.403 230.625 cv
408.731 110.512 330.903 84.3755 329.653 70.6255 cv
328.403 56.8755 362.52 42.1763 362.52 42.1763 cv
cp
clp
462.723 157.176 mo
462.723 157.176 460.68 181.391 417.016 191.278 cv
417.016 191.278 448.196 181.844 462.723 157.176 cv
cp
f
468.649 165.329 mo
468.649 165.329 466.602 189.536 422.954 199.422 cv
422.954 199.422 453.661 189.547 468.649 165.329 cv
cp
f
369.829 43.4771 mo
369.829 43.4771 362.516 58.8716 341.348 65.7974 cv
341.348 65.7974 364.438 63.8716 369.829 43.4771 cv
cp
f
375.985 47.7114 mo
375.985 47.7114 380.219 64.2583 341.735 77.731 cv
341.735 77.731 367.133 68.8755 375.985 47.7114 cv
cp
f
382.528 52.7114 mo
382.528 52.7114 382.141 75.8052 339.422 90.0435 cv
339.422 90.0435 370.086 77.4692 382.528 52.7114 cv
cp
f
388.305 57.9731 mo
388.305 57.9731 391.122 83.3755 347.829 96.2349 cv
347.829 96.2349 378.34 86.2935 388.305 57.9731 cv
cp
f
395.684 63.8442 mo
395.684 63.8442 396.774 88.1216 354.75 103.543 cv
354.75 103.543 384.196 90.0435 395.684 63.8442 cv
cp
f
402.61 69.6177 mo
402.61 69.6177 403.696 93.8911 361.68 109.321 cv
361.68 109.321 390.61 96.2075 402.61 69.6177 cv
cp
f
409.536 76.9302 mo
409.536 76.9302 410.625 101.208 368.61 116.629 cv
368.61 116.629 398.821 102.106 409.536 76.9302 cv
cp
f
417.493 85.0161 mo
417.493 85.0161 418.583 109.293 376.567 124.711 cv
376.567 124.711 404.981 111.598 417.493 85.0161 cv
cp
f
424.418 92.3247 mo
424.418 92.3247 425.512 120.063 383.493 132.028 cv
383.493 132.028 414.458 120.645 424.418 92.3247 cv
cp
f
431.352 100.918 mo
431.352 100.918 432.438 125.196 390.418 140.622 cv
390.418 140.622 420.122 127.25 431.352 100.918 cv
cp
f
438.274 108.231 mo
438.274 108.231 439.364 132.508 397.348 147.934 cv
397.348 147.934 426.532 134.18 438.274 108.231 cv
cp
f
442.934 119.942 mo
442.934 119.942 442.907 144.243 400.227 157.723 cv
400.227 157.723 430.508 145.727 442.934 119.942 cv
cp
f
449.516 127.559 mo
449.516 127.559 449.493 151.86 406.813 165.34 cv
406.813 165.34 436.594 152.946 449.516 127.559 cv
cp
f
453.692 137.059 mo
453.692 137.059 453.407 161.364 410.586 174.395 cv
410.586 174.395 440.997 162.719 453.692 137.059 cv
cp
f
460.188 144.762 mo
460.188 144.762 459.907 169.051 417.09 182.086 cv
417.09 182.086 447 170.004 460.188 144.762 cv
cp
f
467.168 180.575 mo
467.168 180.575 462.676 205.68 414.844 211.551 cv
414.844 211.551 449.227 204.868 467.168 180.575 cv
cp
f
472.758 189.696 mo
472.758 189.696 468.262 214.793 420.438 220.668 cv
420.438 220.668 454.36 213.481 472.758 189.696 cv
cp
f
473.258 202.594 mo
473.258 202.594 467.872 227.516 419.86 231.68 cv
419.86 231.68 454.469 226.231 473.258 202.594 cv
cp
f
478.52 211.911 mo
478.52 211.911 473.125 236.825 425.133 240.993 cv
425.133 240.993 459.278 235.02 478.52 211.911 cv
cp
f
476.622 227.458 mo
476.622 227.458 468.731 251.704 420.54 250.973 cv
420.54 250.973 455.524 249.067 476.622 227.458 cv
cp
f
480.915 237.262 mo
480.915 237.262 473.012 261.5 424.844 260.766 cv
424.844 260.766 459.418 258.297 480.915 237.262 cv
cp
f
476.231 252.45 mo
476.231 252.45 465.958 275.79 418.079 270.243 cv
418.079 270.243 453.079 271.84 476.231 252.45 cv
cp
f
479.524 262.633 mo
479.524 262.633 469.243 285.965 421.383 280.418 cv
421.383 280.418 456.036 281.411 479.524 262.633 cv
cp
f
475.098 276.231 mo
475.098 276.231 462.704 298.512 415.551 288.54 cv
415.551 288.54 450.25 293.379 475.098 276.231 cv
cp
f
477.438 286.676 mo
477.438 286.676 465.024 308.95 417.891 298.981 cv
417.891 298.981 452.297 303.188 477.438 286.676 cv
cp
f
470.688 299.864 mo
470.688 299.864 456.176 320.825 410.219 306.293 cv
410.219 306.293 444.278 314.508 470.688 299.864 cv
cp
f
471.997 310.489 mo
471.997 310.489 457.461 331.442 411.528 316.911 cv
411.528 316.911 445.36 324.473 471.997 310.489 cv
cp
f
465.868 322.543 mo
465.868 322.543 449.79 342.34 405.083 324.333 cv
405.083 324.333 438.407 335.125 465.868 322.543 cv
cp
f
466.352 333.239 mo
466.352 333.239 450.262 353.024 405.575 335.024 cv
405.575 335.024 438.727 345.145 466.352 333.239 cv
cp
f
455.665 347.875 mo
455.665 347.875 437.036 365.293 395.196 341.372 cv
395.196 341.372 426.743 356.602 455.665 347.875 cv
cp
f
454.688 358.532 mo
454.688 358.532 436.047 375.946 394.235 352.032 cv
394.235 352.032 425.696 366.571 454.688 358.532 cv
cp
f
444.942 370.629 mo
444.942 370.629 424.641 386.067 385.438 358.028 cv
385.438 358.028 415.278 376.383 444.942 370.629 cv
cp
f
442.891 381.133 mo
442.891 381.133 422.583 396.567 383.403 368.536 cv
383.403 368.536 413.227 386.192 442.891 381.133 cv
cp
f
429.083 391.543 mo
429.083 391.543 406.797 403.938 371.981 370.61 cv
371.981 370.61 398.907 393.02 429.083 391.543 cv
cp
f
425.555 401.653 mo
425.555 401.653 403.258 414.036 368.469 380.719 cv
368.469 380.719 395.485 402.442 425.555 401.653 cv
cp
f
414.18 410.606 mo
414.18 410.606 391.356 421.985 358.086 387.122 cv
358.086 387.122 383.969 410.723 414.18 410.606 cv
cp
f
410.204 420.551 mo
410.204 420.551 387.372 431.918 354.122 397.063 cv
354.122 397.063 380.122 419.981 410.204 420.551 cv
cp
f
394.497 426.965 mo
394.497 426.965 370.34 435.122 342.133 396.036 cv
342.133 396.036 364.555 422.95 394.497 426.965 cv
cp
f
389.204 436.262 mo
389.204 436.262 365.032 444.418 336.852 405.344 cv
336.852 405.344 359.485 431.606 389.204 436.262 cv
cp
f
376.305 443.715 mo
376.305 443.715 351.438 449.348 327.387 407.59 cv
327.387 407.59 346.93 436.653 376.305 443.715 cv
cp
f
366.239 449.34 mo
366.239 449.34 341.36 454.981 317.325 413.223 cv
317.325 413.223 337.153 441.661 366.239 449.34 cv
cp
f
grestore
191.023 69.688 mo
191.023 69.688 185.953 59.8872 170.055 55.4849 cv
170.055 55.4849 182.23 56.8442 189.672 64.6177 cv
189.672 64.6177 188.992 59.1958 192.371 61.9106 cv
195.758 64.6177 197.113 59.8716 199.82 61.9106 cv
202.523 63.9341 201.164 61.9106 204.551 63.2622 cv
207.934 64.6177 202.188 57.8481 202.188 57.8481 cv
202.188 57.8481 205.914 57.856 208.27 62.5864 cv
210.633 67.3208 207.594 58.5317 211.656 62.5864 cv
215.707 66.645 214.027 60.5474 217.402 62.9263 cv
220.781 65.2935 220.438 67.9927 220.781 62.2466 cv
221.121 56.5005 223.492 43.9888 223.492 43.9888 cv
222.813 59.8716 li
222.813 59.8716 225.016 47.231 226.863 52.7739 cv
228.563 57.8481 226.863 60.895 226.863 60.895 cv
229.578 51.0903 li
229.578 58.8638 li
229.578 58.8638 233.297 47.7114 236.336 42.2935 cv
236.336 42.2935 233.289 53.7935 231.941 59.5474 cv
230.594 65.2935 233.895 51.895 234.984 56.5005 cv
236.336 62.2466 240.391 54.4692 240.055 57.1724 cv
239.719 59.8716 240.395 59.5474 242.426 56.1567 cv
244.457 52.7739 256.633 39.2544 273.203 37.8989 cv
273.203 37.8989 250.551 44.3325 241.75 69.688 cv
241.75 69.688 253.93 47.7036 273.875 41.6177 cv
273.875 41.6177 259.328 46.6841 251.555 63.2622 cv
251.555 63.2622 264.75 56.4927 259 62.9263 cv
253.242 69.3442 255.277 65.9653 254.602 69.3442 cv
253.93 72.731 267.445 64.2778 267.445 64.2778 cv
252.23 79.1567 li
252.23 79.1567 255.277 76.2544 262.988 73.9614 cv
270.695 71.6646 280.489 72.5005 280.489 72.5005 cv
280.489 72.5005 267.5 74.0435 261.945 76.4614 cv
256.398 78.8755 250.375 83.2114 248.852 85.5825 cv
245.809 90.3091 249.188 88.9653 246.148 91.6685 cv
243.105 94.3716 252.582 92.0083 246.824 95.7231 cv
241.07 99.4419 243.441 104.516 243.441 104.516 cv
243.441 104.516 238.703 112.969 237.688 112.969 cv
236.68 112.969 223.832 111.618 220.449 113.641 cv
217.063 115.672 217.051 116.024 217.738 119.399 cv
218.418 122.778 217.742 137.321 217.402 138.336 cv
217.063 139.344 217.051 118.383 213.676 116.012 cv
210.305 113.641 206.914 115.672 201.508 118.047 cv
196.098 120.415 184.262 130.563 184.262 130.563 cv
184.262 130.563 193.055 118.383 202.859 112.969 cv
212.66 107.559 200.824 109.254 196.43 111.958 cv
192.039 114.657 184.262 121.762 184.262 121.762 cv
184.262 121.762 185.953 114.657 198.461 106.883 cv
210.98 99.106 183.586 111.286 183.586 111.286 cv
183.586 111.286 188.32 105.879 192.371 104.184 cv
196.43 102.485 194.066 100.122 190.016 102.153 cv
185.957 104.184 171.41 112.293 171.41 112.293 cv
171.41 112.293 182.566 101.141 189.672 99.106 cv
196.773 97.0786 194.734 95.0474 189.328 96.063 cv
183.93 97.0786 178.852 98.77 178.852 98.77 cv
178.852 98.77 179.52 93.6958 186.281 93.6958 cv
193.055 93.6958 179.523 90.3208 184.602 89.981 cv
189.672 89.6372 186.297 87.938 180.883 85.2388 cv
175.469 82.5356 156.867 80.5083 156.867 80.5083 cv
156.867 80.5083 172.766 77.7974 182.914 83.2075 cv
193.055 88.6294 187.305 81.1802 180.199 75.7778 cv
175.984 72.563 173.773 71.3677 180.199 73.063 cv
186.629 74.7622 173.105 64.2778 180.883 67.3208 cv
188.656 70.3599 191.023 69.688 191.023 69.688 cv
cp
f
220.5 74.3911 mo
220.5 74.3911 225.633 70.5513 231.277 71.0591 cv
236.93 71.5708 239.75 69.2622 242.828 69.2622 cv
245.902 69.2622 248.469 69.0044 248.469 69.0044 cv
248.469 69.0044 247.699 73.3638 244.105 79.0083 cv
240.516 84.6567 239.238 89.2778 236.668 88.5044 cv
234.102 87.7349 238.219 93.1255 235.383 98.5122 cv
232.563 103.903 232.309 106.977 232.309 106.977 cv
232.309 106.977 229.746 105.446 226.152 105.7 cv
222.555 105.954 216.395 105.954 216.656 102.106 cv
216.656 102.106 217.945 104.926 210.758 105.7 cv
203.57 106.469 199.977 107.243 200.227 108.008 cv
200.492 108.778 198.188 94.6685 200.746 91.8442 cv
200.746 91.8442 197.664 91.8442 195.613 86.4536 cv
193.563 81.0708 192.023 71.5708 192.023 71.5708 cv
192.023 71.5708 192.797 74.1372 202.289 72.8521 cv
211.777 71.5708 218.445 70.5435 220.5 74.3911 cv
cp
1 1 1 rgb
f
217.664 96.9497 mo
216.969 96.9497 216.234 96.9185 215.484 96.8716 cv
206.891 96.2896 204.969 92.4614 204.586 91.3052 cv
204.246 90.2622 li
204.598 89.2271 li
204.719 88.8169 205.047 87.4692 204.922 86.3247 cv
204.875 85.9575 204.813 85.6216 204.742 85.3013 cv
204.316 83.1997 204.105 81.0513 206.148 77.9341 cv
208.648 74.1489 216.465 73.1528 219.703 72.8989 cv
220.68 72.9458 224.316 73.4263 226.969 77.7896 cv
227.348 78.4263 li
230.215 83.1099 233.457 88.4224 230.813 91.9888 cv
228.516 95.0942 223.586 96.9497 217.664 96.9497 cv
cp
.27451 .207843 .145098 rgb
f
219.734 74.6489 mo
219.734 74.6489 222.297 74.9028 224.352 78.2427 cv
226.398 81.5786 230.254 87.4849 228.715 89.5356 cv
227.172 91.5864 222.813 93.9028 215.117 93.3833 cv
207.414 92.8677 206.391 89.7856 206.391 89.7856 cv
206.391 89.7856 207.164 87.4771 206.906 85.1724 cv
206.648 82.856 205.625 81.5786 207.676 78.5005 cv
209.727 75.4185 219.734 74.6489 219.734 74.6489 cv
cp
1 1 1 rgb
f
231.789 92.6138 mo
231.789 92.6138 235.32 91.0044 233.781 84.0825 cv
232.242 77.1528 224.094 72.6021 224.094 72.6021 cv
224.094 72.6021 229.227 72.3325 232.309 76.6997 cv
235.383 81.0708 238.461 89.2817 231.789 92.6138 cv
cp
.27451 .207843 .145098 rgb
f
209.793 85.7036 mo
206.656 85.7036 204.473 83.9419 204.246 81.2153 cv
203.895 76.8247 208.352 73.8325 212.953 72.8169 cv
214.281 72.52 215.609 72.3716 216.898 72.3716 cv
219.145 72.3716 220.57 72.8208 220.828 72.9146 cv
222.125 73.3989 223.57 74.5864 223.742 76.4341 cv
224.004 79.2935 221.137 81.313 218.949 82.5786 cv
216.508 84.0005 212.934 85.7036 209.793 85.7036 cv
cp
f
220.762 74.3911 mo
220.762 74.3911 224.602 75.9341 217.934 80.0396 cv
211.266 84.145 206.395 84.4028 206.137 81.0708 cv
205.879 77.731 209.938 75.2427 213.578 74.3911 cv
217.934 73.3677 220.762 74.3911 220.762 74.3911 cv
cp
1 1 1 rgb
f
215.629 77.4692 mo
215.629 77.4692 210.238 80.8091 210.238 78.5005 cv
210.238 76.1919 217.168 75.4146 215.629 77.4692 cv
cp
.27451 .207843 .145098 rgb
f
216.465 98.1294 mo
216.465 98.1294 214.344 104.286 222.813 106.211 cv
222.813 106.211 221.078 107.364 218 106.02 cv
214.926 104.672 214.926 100.629 216.465 98.1294 cv
cp
f
226.469 93.6997 mo
226.469 93.6997 229.355 96.395 229.355 99.0903 cv
229.355 101.782 230.125 104.286 230.125 104.286 cv
230.125 104.286 228.391 101.403 228.203 99.4771 cv
228.008 97.5474 223.582 95.4341 223.582 95.4341 cv
223.582 95.4341 224.352 93.5122 226.469 93.6997 cv
cp
f
210.305 94.0864 mo
210.305 94.0864 205.301 95.2388 204.145 100.055 cv
204.145 100.055 204.719 95.2388 207.035 93.6997 cv
210.305 94.0864 li
cp
f
205.109 81.5786 mo
205.109 81.5786 203.57 78.8833 199.91 77.731 cv
196.254 76.5786 195.297 74.8442 195.297 74.8442 cv
195.297 74.8442 195.488 77.1528 197.602 78.1138 cv
199.719 79.0786 204.352 81.6372 204.922 86.3247 cv
205.109 81.5786 li
cp
f
232.625 78.3052 mo
232.625 78.3052 233.586 75.4185 237.055 74.6489 cv
240.516 73.8833 245.711 70.9966 245.711 70.9966 cv
245.711 70.9966 242.441 74.6489 238.207 75.9966 cv
233.973 77.3442 234.164 80.4263 234.164 80.4263 cv
232.625 78.3052 li
cp
f
335.383 137.188 mo
335.383 137.188 334.758 139.688 332.571 138.75 cv
330.383 137.813 329.446 134.375 332.258 134.063 cv
335.071 133.75 334.758 135.938 335.383 137.188 cv
cp
f
320.696 141.563 mo
320.696 141.563 321.633 144.063 319.446 143.75 cv
317.258 143.438 317.883 140 320.696 141.563 cv
cp
f
336.008 154.063 mo
336.008 154.063 335.071 155.938 332.883 155.313 cv
330.696 154.688 331.633 152.188 332.883 151.875 cv
334.133 151.563 336.321 151.875 336.008 154.063 cv
cp
f
352.258 165 mo
352.258 165 349.758 167.5 348.196 166.25 cv
346.633 165 346.321 162.5 348.196 162.813 cv
350.071 163.125 353.196 163.438 352.258 165 cv
cp
f
316.008 171.875 mo
316.008 171.875 316.946 175.313 313.821 174.375 cv
310.696 173.438 311.946 171.563 314.133 170.938 cv
316.321 170.313 316.008 171.875 316.008 171.875 cv
cp
f
303.508 183.75 mo
303.508 183.75 304.133 187.188 301.946 186.563 cv
299.758 185.938 299.446 183.438 300.696 182.813 cv
301.946 182.188 301.633 181.875 303.508 183.75 cv
cp
f
330.696 211.875 mo
330.696 211.875 330.071 215.313 327.258 212.5 cv
324.446 209.688 326.633 209.063 328.508 209.063 cv
330.383 209.063 330.696 210.313 330.696 211.875 cv
cp
f
355.696 142.5 mo
355.696 142.5 356.633 145.625 353.508 145 cv
350.383 144.375 349.133 142.5 351.946 141.25 cv
354.758 140 355.383 140.313 355.696 142.5 cv
cp
f
309.446 125.625 mo
309.446 125.625 311.946 127.5 309.446 127.813 cv
306.946 128.125 303.821 125.938 305.696 124.688 cv
307.571 123.438 308.821 124.063 309.446 125.625 cv
cp
f
307.258 140.938 mo
307.258 140.938 309.758 144.375 306.633 143.438 cv
303.508 142.5 301.008 140.625 303.196 139.375 cv
305.383 138.125 307.258 140 307.258 140.938 cv
cp
f
347.258 198.75 mo
347.258 198.75 346.946 201.563 344.446 201.25 cv
341.946 200.938 339.133 199.688 342.258 198.125 cv
345.383 196.563 347.258 196.563 347.258 198.75 cv
cp
f
351.321 231.25 mo
351.321 231.25 351.45 231.872 351.36 232.504 cv
351.258 233.29 350.836 234.098 349.446 233.75 cv
346.946 233.125 346.633 230 348.821 229.375 cv
351.008 228.75 351.321 231.25 351.321 231.25 cv
cp
f
316.321 231.563 mo
316.321 231.563 317.883 232.813 315.383 233.438 cv
312.883 234.063 311.008 231.563 313.196 230.625 cv
315.383 229.688 316.321 231.563 316.321 231.563 cv
cp
f
329.758 240 mo
329.758 240 331.946 244.688 328.508 243.125 cv
325.071 241.563 325.696 237.5 329.758 240 cv
cp
f
209.652 58.5435 mo
209.652 58.5435 201.738 45.2153 174.238 46.8794 cv
174.238 46.8794 195.902 47.7114 209.652 58.5435 cv
cp
f
178.402 78.9614 mo
178.402 78.9614 166.316 68.9614 136.316 73.9614 cv
136.316 73.9614 154.652 71.4614 178.402 78.9614 cv
cp
f
247.57 102.086 mo
247.57 102.086 260.488 92.7114 277.57 99.7896 cv
277.57 99.7896 264.031 96.2505 247.57 102.086 cv
cp
f
245.695 32.0864 mo
245.695 32.0864 250.488 23.7505 270.07 22.5005 cv
270.07 22.5005 252.57 18.3364 245.695 32.0864 cv
cp
f
172.988 73.5396 mo
172.988 73.5396 162.367 69.1685 147.156 70.2114 cv
147.156 70.2114 160.066 66.2466 172.988 73.5396 cv
cp
f
180.07 90.0005 mo
180.07 90.0005 166.531 91.0396 157.57 106.875 cv
157.57 106.875 166.738 95.0005 180.07 90.0005 cv
cp
f
252.57 84.3755 mo
252.57 84.3755 260.906 75.2114 279.446 77.7114 cv
279.446 77.7114 263.406 77.7114 252.57 84.3755 cv
cp
f
246.32 25.2114 mo
246.32 25.2114 252.988 16.2466 273.613 18.5396 cv
273.613 18.5396 260.281 18.1294 246.32 25.2114 cv
cp
f
150.07 49.5864 mo
150.07 49.5864 152.566 47.2896 154.863 48.9614 cv
157.156 50.6294 155.277 51.4653 152.988 51.8794 cv
150.695 52.2935 151.113 51.0435 148.613 51.0435 cv
146.113 51.0435 144.656 51.2544 144.656 51.2544 cv
144.656 51.2544 147.363 49.3755 150.07 49.5864 cv
cp
1 1 1 rgb
f
140.281 45.2114 mo
140.281 45.2114 140.281 46.8794 137.57 46.6685 cv
134.863 46.4614 139.242 43.5396 140.281 45.2114 cv
cp
f
207.156 30.4185 mo
207.156 30.4185 198.617 28.3364 192.781 30.4185 cv
186.945 32.5044 186.945 32.5044 186.945 32.5044 cv
186.945 32.5044 191.531 27.9146 197.57 27.7114 cv
203.613 27.5044 207.156 30.4185 207.156 30.4185 cv
cp
f
288.614 21.0435 mo
288.614 21.0435 307.778 17.5044 324.864 22.2935 cv
328.196 26.6685 li
328.196 26.6685 313.407 20.4185 288.614 21.0435 cv
cp
f
207.156 30.4185 mo
207.156 30.4185 200.906 25.0044 184.656 31.6685 cv
184.656 31.6685 191.328 26.4614 199.031 26.6685 cv
206.738 26.8794 207.156 30.4185 207.156 30.4185 cv
cp
f
364.36 357.153 mo
366.391 352.075 li
366.536 351.715 380.153 317.676 385.61 300.946 cv
383.458 294.645 377.954 276.629 376.528 252.946 cv
374.743 223.153 380.18 177.305 400.856 137.989 cv
421.997 97.7622 432.008 87.9575 444.864 77.5942 cv
459.254 65.9888 492.602 58.1411 521.383 65.6958 cv
523.262 66.188 li
524.625 67.5786 li
527.364 70.4106 551.551 95.8286 554.223 115.739 cv
559.247 153.336 550.938 187.032 529.512 215.887 cv
499.567 256.239 475.012 278.563 444.786 292.938 cv
431.7 299.161 423.54 302.43 418.145 304.59 cv
411.286 307.336 409.438 308.075 406.309 311.004 cv
402.583 314.512 391.704 339.309 383.754 360.27 cv
380.532 368.754 li
364.36 357.153 li
cp
.27451 .207843 .145098 rgb
f
372.875 354.672 mo
372.875 354.672 387.969 316.993 392.981 300.809 cv
392.981 300.809 385.2 280.778 383.5 252.528 cv
381.801 224.274 386.735 179.852 407.032 141.243 cv
427.329 102.633 436.504 93.3013 449.247 83.0239 cv
461.989 72.7505 492.731 65.3911 519.606 72.4497 cv
519.606 72.4497 544.86 98.4692 547.293 116.668 cv
549.731 134.86 552.161 173.672 523.911 211.727 cv
495.661 249.774 471.606 272.442 441.793 286.629 cv
411.969 300.817 408.735 299.161 401.536 305.911 cv
394.336 312.665 377.227 357.786 377.227 357.786 cv
372.875 354.672 li
cp
1 1 1 rgb
f
396.86 302.141 mo
396.86 302.141 418.961 261.442 441.094 217.493 cv
463.223 173.543 518.571 80.2231 518.571 80.2231 cv
518.571 80.2231 503.532 111.415 482.774 146.61 cv
462.016 181.805 402.54 303 396.86 302.141 cv
cp
.27451 .207843 .145098 rgb
f
470.653 182.344 mo
470.653 182.344 511.797 176.418 541.59 162.079 cv
541.59 162.079 518.454 177.879 470.661 185.875 cv
470.661 185.875 467.059 184.606 470.653 182.344 cv
cp
f
466.391 192.833 mo
466.391 192.833 507.54 186.891 537.329 172.555 cv
537.329 172.555 514.196 188.36 466.395 196.36 cv
466.395 196.36 462.801 195.086 466.391 192.833 cv
cp
f
460.981 202.747 mo
460.981 202.747 502.114 196.809 531.918 182.469 cv
531.918 182.469 508.77 198.27 460.981 206.266 cv
460.981 206.266 457.383 205 460.981 202.747 cv
cp
f
455.665 213.008 mo
455.665 213.008 496.797 207.079 526.598 192.735 cv
526.598 192.735 503.454 208.543 455.668 216.54 cv
455.668 216.54 452.067 215.266 455.665 213.008 cv
cp
f
451.403 223.493 mo
451.403 223.493 492.54 217.555 522.329 203.215 cv
522.329 203.215 499.196 219.02 451.407 227.02 cv
451.407 227.02 447.809 225.75 451.403 223.493 cv
cp
f
445.981 233.407 mo
445.981 233.407 487.125 227.473 516.926 213.133 cv
516.926 213.133 493.778 228.934 445.989 236.93 cv
445.989 236.93 442.387 235.665 445.981 233.407 cv
cp
f
486.754 150.848 mo
486.754 150.848 509.239 149.317 540.625 137.297 cv
540.625 137.297 521.911 147.965 486.762 154.372 cv
486.762 154.372 483.161 153.102 486.754 150.848 cv
cp
f
482.489 161.329 mo
482.489 161.329 509.399 158.329 541.77 145.833 cv
541.77 145.833 525.25 156.032 482.497 164.852 cv
482.497 164.852 478.903 163.575 482.489 161.329 cv
cp
f
477.083 171.239 mo
477.083 171.239 510.922 167.95 540.727 153.614 cv
540.727 153.614 524.868 166.766 477.083 174.766 cv
477.083 174.766 473.481 173.493 477.083 171.239 cv
cp
f
501.227 126.911 mo
501.227 126.911 518.809 125.622 543.434 116.407 cv
543.434 116.407 528.735 124.52 501.208 129.559 cv
501.208 129.559 498.399 128.625 501.227 126.911 cv
cp
f
497.813 134.782 mo
497.813 134.782 518.883 132.352 544.274 122.793 cv
544.274 122.793 531.293 130.54 497.797 137.43 cv
497.797 137.43 494.997 136.504 497.813 134.782 cv
cp
f
493.516 142.243 mo
493.516 142.243 520.016 139.551 543.415 128.625 cv
543.415 128.625 530.922 138.583 493.497 144.891 cv
493.497 144.891 490.688 143.961 493.516 142.243 cv
cp
f
438.84 244.266 mo
438.84 244.266 479.973 238.333 509.77 223.997 cv
509.77 223.997 486.625 239.797 438.844 247.793 cv
438.844 247.793 435.239 246.524 438.84 244.266 cv
cp
f
434.575 254.754 mo
434.575 254.754 465.875 250.813 494.086 239.743 cv
494.086 239.743 478.161 251.774 434.583 258.274 cv
434.583 258.274 430.981 257 434.575 254.754 cv
cp
f
429.161 264.661 mo
429.161 264.661 448.231 264.29 477.399 255.172 cv
477.399 255.172 468.575 261.911 429.161 268.192 cv
429.161 268.192 425.563 266.915 429.161 264.661 cv
cp
f
419.989 274.215 mo
419.989 274.215 435.34 276.961 464.883 266.75 cv
464.883 266.75 448.114 277.684 419.786 277.743 cv
419.786 277.743 416.27 276.258 419.989 274.215 cv
cp
f
505.52 118.36 mo
505.52 118.36 519.856 117.692 539.668 109.407 cv
539.668 109.407 527.934 116.954 505.598 120.993 cv
505.598 120.993 503.266 119.958 505.52 118.36 cv
cp
f
509.625 110.54 mo
509.625 110.54 521.434 110.348 537.528 102.774 cv
537.528 102.774 528.09 109.875 509.782 113.153 cv
509.782 113.153 507.817 112.047 509.625 110.54 cv
cp
f
513.258 101.727 mo
513.258 101.727 522.594 102.02 535.004 95.1489 cv
535.004 95.1489 527.829 101.817 513.493 104.325 cv
513.493 104.325 511.899 103.153 513.258 101.727 cv
cp
f
458.907 177.512 mo
458.907 177.512 441.481 139.782 437.278 106.985 cv
437.278 106.985 436.618 134.997 455.942 179.43 cv
455.942 179.43 458.969 181.754 458.907 177.512 cv
cp
f
452.438 186.797 mo
452.438 186.797 435.004 149.055 430.805 116.262 cv
430.805 116.262 430.145 144.274 449.469 188.708 cv
449.469 188.708 452.5 191.036 452.438 186.797 cv
cp
f
447.075 196.731 mo
447.075 196.731 429.645 159 425.434 126.2 cv
425.434 126.2 424.79 154.219 444.114 198.645 cv
444.114 198.645 447.145 200.977 447.075 196.731 cv
cp
f
441.356 206.786 mo
441.356 206.786 423.93 169.055 419.727 136.258 cv
419.727 136.258 419.079 164.266 438.399 208.708 cv
438.399 208.708 441.43 211.028 441.356 206.786 cv
cp
f
434.895 216.071 mo
434.895 216.071 417.45 178.329 413.258 145.543 cv
413.258 145.543 412.606 173.547 431.93 217.989 cv
431.93 217.989 434.958 220.305 434.895 216.071 cv
cp
f
429.528 226.012 mo
429.528 226.012 412.094 188.282 407.891 155.477 cv
407.891 155.477 407.247 183.504 426.563 227.93 cv
426.563 227.93 429.594 230.254 429.528 226.012 cv
cp
f
476.559 146.848 mo
476.559 146.848 465.602 127.165 458.579 94.2935 cv
458.579 94.2935 459.821 115.809 473.598 148.766 cv
473.598 148.766 476.625 151.094 476.559 146.848 cv
cp
f
470.094 156.141 mo
470.094 156.141 457.95 131.934 450.797 97.9849 cv
450.797 97.9849 451.247 117.395 467.137 158.055 cv
467.137 158.055 470.157 160.372 470.094 156.141 cv
cp
f
464.727 166.071 mo
464.727 166.071 449.047 135.895 444.844 103.094 cv
444.844 103.094 442.446 123.555 461.77 168 cv
461.77 168 464.801 170.321 464.727 166.071 cv
cp
f
488.75 121.68 mo
488.75 121.68 480.254 106.227 474.567 80.5552 cv
474.567 80.5552 475.766 97.3013 486.543 123.137 cv
486.543 123.137 488.852 124.989 488.75 121.68 cv
cp
f
484.008 128.825 mo
484.008 128.825 474.567 109.833 468.747 83.3286 cv
468.747 83.3286 469.325 98.4458 481.793 130.282 cv
481.793 130.282 484.102 132.129 484.008 128.825 cv
cp
f
480.094 136.493 mo
480.094 136.493 467.907 112.805 464.333 87.2271 cv
464.333 87.2271 462.786 103.125 477.875 137.942 cv
477.875 137.942 480.192 139.801 480.094 136.493 cv
cp
f
424.313 237.926 mo
424.313 237.926 406.879 200.188 402.68 167.399 cv
402.68 167.399 402.028 195.407 421.356 239.836 cv
421.356 239.836 424.379 242.168 424.313 237.926 cv
cp
f
417.84 247.208 mo
417.84 247.208 404.098 218.817 398.012 189.118 cv
398.012 189.118 396.598 209.032 414.887 249.122 cv
414.887 249.122 417.907 251.442 417.84 247.208 cv
cp
f
412.481 257.145 mo
412.481 257.145 402.407 240.954 394.161 211.524 cv
394.161 211.524 393.317 222.59 409.52 259.071 cv
409.52 259.071 412.543 261.387 412.481 257.145 cv
cp
f
409.458 270.047 mo
409.458 270.047 398.805 258.661 391.266 228.321 cv
391.266 228.321 391.239 248.348 406.614 272.129 cv
406.614 272.129 409.77 274.278 409.458 270.047 cv
cp
f
493.59 113.418 mo
493.59 113.418 486.333 101.036 482.489 79.9028 cv
482.489 79.9028 482.555 93.856 491.325 114.786 cv
491.325 114.786 493.461 116.184 493.59 113.418 cv
cp
f
497.907 105.715 mo
497.907 105.715 491.625 95.6997 489.215 78.0825 cv
489.215 78.0825 488.403 89.8755 495.625 107 cv
495.625 107 497.622 108.055 497.907 105.715 cv
cp
f
503.317 97.8677 mo
503.317 97.8677 497.989 90.2075 496.981 76.0474 cv
496.981 76.0474 495.297 85.6958 501.004 99.0942 cv
501.004 99.0942 502.856 99.7817 503.317 97.8677 cv
cp
f
385.153 401.411 mo
384.426 401.411 367.2 401.333 349.239 394.254 cv
344.75 392.485 335.641 389.723 324.106 386.223 cv
293.301 376.879 246.743 362.747 216.547 346.145 cv
206.446 340.61 li
171.54 321.543 152.301 307.54 127.036 277.422 cv
98.3794 243.258 102.954 209.938 103.325 208.473 cv
103.958 205.997 li
106.036 204.512 li
121.637 193.372 160.875 186.258 181.036 186.258 cv
183.161 186.282 li
197.59 186.68 210.278 190.868 221.485 194.563 cv
225.586 195.915 229.594 197.239 233.571 198.336 cv
244.883 201.458 249.848 204.571 258.864 210.223 cv
262.75 212.665 267.567 215.68 274.223 219.551 cv
295.567 231.961 333.747 260.497 351.782 285.094 cv
367.774 306.903 377.903 333.473 380.297 359.926 cv
382.098 379.684 390.391 389.801 390.469 389.907 cv
400.055 401.364 li
385.153 401.411 li
cp
f
385.153 394.426 mo
385.153 394.426 375.403 383.137 373.348 360.551 cv
371.301 337.973 363.09 312.321 346.157 289.227 cv
329.219 266.133 301.512 239.446 279.442 226.618 cv
257.372 213.79 246.59 209.172 231.715 205.067 cv
216.836 200.958 201.442 193.77 182.969 193.262 cv
164.493 192.75 124.458 199.93 110.094 210.196 cv
110.094 210.196 105.473 244.579 132.165 276.395 cv
158.852 308.215 178.868 317.458 219.918 340.036 cv
260.961 362.602 334.86 381.09 351.797 387.758 cv
368.731 394.426 385.153 394.426 385.153 394.426 cv
cp
1 1 1 rgb
f
382.852 398.286 mo
380.915 398.071 334.856 392.887 281.434 375.942 cv
236.434 361.653 156.977 336.379 112.149 252.79 cv
111.54 251.668 106.508 239.446 106.508 239.446 cv
103.422 228.161 li
116.25 245.094 li
122.504 256.504 158.629 316.321 231.715 336.95 cv
270.481 347.895 297.438 351.782 313.684 356.098 cv
333.286 361.293 342.153 363.879 352.172 367.356 cv
376.942 375.95 393.715 394.997 394.391 395.454 cv
382.852 398.286 li
cp
.27451 .207843 .145098 rgb
f
371.813 386.215 mo
371.813 386.215 303.043 354.411 256.348 320.016 cv
209.649 285.633 115.739 217.379 115.739 217.379 cv
115.739 217.379 187.856 268.024 231.715 297.946 cv
297.915 343.11 378.997 387.239 378.997 387.239 cv
371.813 386.215 li
cp
f
113.176 246.633 mo
113.176 246.633 148.59 317.442 232.231 341.051 cv
315.875 364.661 331.782 367.231 349.747 373.903 cv
367.711 380.571 383.614 391.34 383.614 391.34 cv
383.614 391.34 336.918 386.215 283.543 369.282 cv
230.176 352.348 154.743 325.661 113.176 246.633 cv
cp
1 1 1 rgb
f
257.372 308.465 mo
257.372 308.465 259.301 259.973 250.833 222.637 cv
250.833 222.637 261.993 252.657 260.84 309.235 cv
260.84 309.235 258.911 313.083 257.372 308.465 cv
cp
.27451 .207843 .145098 rgb
f
266.098 313.594 mo
266.098 313.594 268.024 265.098 259.555 227.77 cv
259.555 227.77 270.719 257.79 269.567 314.368 cv
269.567 314.368 267.641 318.215 266.098 313.594 cv
cp
f
276.11 320.266 mo
276.11 320.266 278.032 271.77 269.567 234.434 cv
269.567 234.434 280.727 264.461 279.571 321.032 cv
279.571 321.032 277.645 324.883 276.11 320.266 cv
cp
f
285.856 327.196 mo
285.856 327.196 287.778 278.7 279.313 241.364 cv
279.313 241.364 290.473 271.383 289.321 327.961 cv
289.321 327.961 287.399 331.813 285.856 327.196 cv
cp
f
294.583 332.321 mo
294.583 332.321 296.504 283.825 288.036 246.497 cv
288.036 246.497 299.2 276.516 298.043 333.094 cv
298.043 333.094 296.118 336.938 294.583 332.321 cv
cp
f
304.586 338.989 mo
304.586 338.989 306.512 290.497 298.043 253.161 cv
298.043 253.161 309.204 283.184 308.051 339.762 cv
308.051 339.762 306.129 343.606 304.586 338.989 cv
cp
f
313.571 344.379 mo
313.571 344.379 315.493 295.887 307.028 258.551 cv
307.028 258.551 318.184 288.571 317.032 345.153 cv
317.032 345.153 315.106 348.997 313.571 344.379 cv
cp
f
322.29 349.504 mo
322.29 349.504 324.215 301.012 315.747 263.684 cv
315.747 263.684 326.911 293.704 325.758 350.278 cv
325.758 350.278 323.833 354.125 322.29 349.504 cv
cp
f
332.301 356.176 mo
332.301 356.176 334.223 307.684 325.758 270.348 cv
325.758 270.348 336.918 300.372 335.762 356.95 cv
335.762 356.95 333.84 360.793 332.301 356.176 cv
cp
f
228.125 289.012 mo
228.125 289.012 230.051 242.454 221.583 206.61 cv
221.583 206.61 232.747 235.43 231.586 289.754 cv
231.586 289.754 229.665 293.45 228.125 289.012 cv
cp
f
236.852 293.938 mo
236.852 293.938 238.774 247.379 230.309 211.532 cv
230.309 211.532 241.469 240.352 240.313 294.676 cv
240.313 294.676 238.387 298.375 236.852 293.938 cv
cp
f
246.856 300.34 mo
246.856 300.34 248.778 253.778 240.313 217.938 cv
240.313 217.938 251.473 246.758 250.317 301.083 cv
250.317 301.083 248.395 304.774 246.856 300.34 cv
cp
f
200.415 271.747 mo
200.415 271.747 202.34 230.227 193.872 198.262 cv
193.872 198.262 205.036 223.965 203.879 272.411 cv
203.879 272.411 201.954 275.704 200.415 271.747 cv
cp
f
209.137 276.141 mo
209.137 276.141 211.067 234.618 202.594 202.653 cv
202.594 202.653 213.754 228.356 212.602 276.797 cv
212.602 276.797 210.68 280.094 209.137 276.141 cv
cp
f
219.145 281.848 mo
219.145 281.848 221.071 240.329 212.602 208.36 cv
212.602 208.36 223.766 234.071 222.614 282.512 cv
222.614 282.512 220.684 285.809 219.145 281.848 cv
cp
f
172.442 253.571 mo
172.442 253.571 174.372 220.149 165.899 194.415 cv
165.899 194.415 177.059 215.106 175.911 254.102 cv
175.911 254.102 173.985 256.754 172.442 253.571 cv
cp
f
181.168 257.106 mo
181.168 257.106 183.09 223.68 174.625 197.95 cv
174.625 197.95 185.786 218.641 184.633 257.637 cv
184.633 257.637 182.711 260.29 181.168 257.106 cv
cp
f
191.176 261.7 mo
191.176 261.7 193.102 228.278 184.633 202.547 cv
184.633 202.547 195.797 223.239 194.637 262.235 cv
194.637 262.235 192.715 264.891 191.176 261.7 cv
cp
f
343.59 361.059 mo
343.59 361.059 346.157 322.454 337.684 285.118 cv
337.684 285.118 348.208 305.254 347.051 361.833 cv
347.051 361.833 345.129 365.676 343.59 361.059 cv
cp
f
352.309 366.184 mo
352.309 366.184 356.422 338.239 349.493 301.032 cv
349.493 301.032 356.422 312.829 355.778 366.958 cv
355.778 366.958 353.852 370.805 352.309 366.184 cv
cp
f
362.321 372.856 mo
362.321 372.856 367.458 345.161 360.012 317.708 cv
360.012 317.708 368.735 340.286 365.786 373.629 cv
365.786 373.629 363.61 375.442 362.321 372.856 cv
cp
f
163.059 245.594 mo
163.059 245.594 164.782 218.379 157.172 197.434 cv
157.172 197.434 167.208 214.278 166.168 246.028 cv
166.168 246.028 164.438 248.184 163.059 245.594 cv
cp
f
152.973 240.094 mo
152.973 240.094 154.598 215.993 147.426 197.438 cv
147.426 197.438 156.887 212.36 155.903 240.481 cv
155.903 240.481 154.278 242.395 152.973 240.094 cv
cp
f
143.735 232.665 mo
143.735 232.665 145.368 214.215 138.188 200.008 cv
138.188 200.008 147.653 211.426 146.668 232.958 cv
146.668 232.958 145.04 234.426 143.735 232.665 cv
cp
f
133.465 226.594 mo
133.465 226.594 135.098 210.129 127.926 197.45 cv
127.926 197.45 137.383 207.637 136.403 226.864 cv
136.403 226.864 134.77 228.172 133.465 226.594 cv
cp
f
gsave
124.469 230.227 mo
124.469 230.227 168.09 260.5 180.407 269.739 cv
192.719 278.977 263.028 328.75 274.829 333.879 cv
286.625 339.02 314.856 356.977 314.856 356.977 cv
314.856 356.977 283.043 350.825 258.922 344.153 cv
234.801 337.473 185.532 327.208 154.747 295.399 cv
123.958 263.586 113.18 229.2 113.18 229.2 cv
124.469 230.227 li
cp
clp
259.387 302.352 mo
259.387 302.352 217.661 327.129 180.797 337.465 cv
180.797 337.465 212.516 332.985 261.715 305.028 cv
261.715 305.028 264.184 301.5 259.387 302.352 cv
cp
f
268.051 307.575 mo
268.051 307.575 226.325 332.364 189.469 342.7 cv
189.469 342.7 221.176 338.215 270.375 310.254 cv
270.375 310.254 272.848 306.735 268.051 307.575 cv
cp
f
278.684 313.2 mo
278.684 313.2 236.954 337.981 200.094 348.317 cv
200.094 348.317 231.801 343.84 281.012 315.879 cv
281.012 315.879 283.473 312.356 278.684 313.2 cv
cp
f
289.415 318.473 mo
289.415 318.473 247.684 343.254 210.833 353.59 cv
210.833 353.59 242.543 349.114 291.743 321.153 cv
291.743 321.153 294.208 317.629 289.415 318.473 cv
cp
f
298.083 323.704 mo
298.083 323.704 256.352 348.489 219.497 358.825 cv
219.497 358.825 251.208 354.34 300.411 326.379 cv
300.411 326.379 302.875 322.86 298.083 323.704 cv
cp
f
308.715 329.329 mo
308.715 329.329 266.989 354.114 230.129 364.45 cv
230.129 364.45 261.836 359.965 311.04 332.008 cv
311.04 332.008 313.504 328.485 308.715 329.329 cv
cp
f
317.731 334.653 mo
317.731 334.653 276 359.45 239.141 369.778 cv
239.141 369.778 270.848 365.297 320.051 337.34 cv
320.051 337.34 322.52 333.813 317.731 334.653 cv
cp
f
326.387 339.887 mo
326.387 339.887 284.665 364.672 247.797 375.004 cv
247.797 375.004 279.516 370.52 328.715 342.575 cv
328.715 342.575 331.188 339.047 326.387 339.887 cv
cp
f
337.02 345.512 mo
337.02 345.512 295.297 370.286 258.434 380.622 cv
258.434 380.622 290.153 376.145 339.348 348.188 cv
339.348 348.188 341.813 344.661 337.02 345.512 cv
cp
f
228.356 285.891 mo
228.356 285.891 188.325 309.754 152.774 319.383 cv
152.774 319.383 183.434 315.465 230.649 288.586 cv
230.649 288.586 232.985 285.125 228.356 285.891 cv
cp
f
236.836 291.219 mo
236.836 291.219 196.813 315.079 161.254 324.708 cv
161.254 324.708 191.918 320.793 239.137 293.915 cv
239.137 293.915 241.473 290.458 236.836 291.219 cv
cp
f
247.239 296.969 mo
247.239 296.969 207.204 320.836 171.657 330.458 cv
171.657 330.458 202.317 326.543 249.532 299.661 cv
249.532 299.661 251.864 296.208 247.239 296.969 cv
cp
f
199.977 269.743 mo
199.977 269.743 164.379 291.208 132.243 298.981 cv
132.243 298.981 160.157 296.559 202.204 272.473 cv
202.204 272.473 204.184 269.215 199.977 269.743 cv
cp
f
207.989 275.325 mo
207.989 275.325 172.399 296.79 140.258 304.563 cv
140.258 304.563 168.176 302.141 210.219 278.055 cv
210.219 278.055 212.204 274.797 207.989 275.325 cv
cp
f
217.778 281.403 mo
217.778 281.403 182.184 302.868 150.043 310.653 cv
150.043 310.653 177.965 308.219 220.004 284.133 cv
220.004 284.133 221.989 280.875 217.778 281.403 cv
cp
f
170.676 253.801 mo
170.676 253.801 142.204 271.407 115.536 276.219 cv
115.536 276.219 139.043 276.184 172.79 256.598 cv
172.79 256.598 174.204 253.641 170.676 253.801 cv
cp
f
177.942 259.793 mo
177.942 259.793 149.458 277.403 122.797 282.208 cv
122.797 282.208 146.309 282.168 180.051 262.586 cv
180.051 262.586 181.469 259.625 177.942 259.793 cv
cp
f
186.743 266.399 mo
186.743 266.399 158.266 284.016 131.614 288.821 cv
131.614 288.821 155.118 288.782 188.852 269.196 cv
188.852 269.196 190.278 266.239 186.743 266.399 cv
cp
f
346.692 353.11 mo
346.692 353.11 313.965 373.754 277.098 384.086 cv
277.098 384.086 299.817 383.754 349.02 355.786 cv
349.02 355.786 351.485 352.262 346.692 353.11 cv
cp
f
355.356 358.344 mo
355.356 358.344 332.723 375.27 296.715 386.887 cv
296.715 386.887 310.391 387.356 357.68 361.02 cv
357.68 361.02 360.145 357.497 355.356 358.344 cv
cp
f
365.981 363.969 mo
365.981 363.969 344.075 381.676 316.387 388.2 cv
316.387 388.2 340.403 385.114 368.309 366.645 cv
368.309 366.645 368.868 363.872 365.981 363.969 cv
cp
f
159.184 249.344 mo
159.184 249.344 136.079 263.825 114.04 267.11 cv
114.04 267.11 133.622 267.907 161.051 251.875 cv
161.051 251.875 162.125 249.333 159.184 249.344 cv
cp
f
149.551 243.098 mo
149.551 243.098 129.129 256.008 109.399 258.532 cv
109.399 258.532 127.028 259.747 151.286 245.497 cv
151.286 245.497 152.188 243.153 149.551 243.098 cv
cp
f
138.618 238.512 mo
138.618 238.512 123.168 248.731 107.262 249.188 cv
107.262 249.188 121.809 252.067 140.27 240.954 cv
140.27 240.954 140.786 238.821 138.618 238.512 cv
cp
f
128.395 232.375 mo
128.395 232.375 114.688 241.649 100.122 241.383 cv
100.122 241.383 113.59 244.844 130.024 234.825 cv
130.024 234.825 130.403 232.77 128.395 232.375 cv
cp
f
grestore
344.042 558.234 mo
339.639 558.234 335.319 558.085 331.229 557.812 cv
304.686 556.015 279.764 547.828 247.877 530.441 cv
216.327 513.226 192.756 486.289 189.42 481.699 cv
188.385 480.273 187.045 478.804 185.35 476.937 cv
181.928 473.183 177.233 468.031 171.616 459.289 cv
162.995 445.882 158.245 438.042 154.655 431.32 cv
150.803 424.113 148.866 417.851 148.788 417.582 cv
139.733 390 135.456 369.804 134.518 350.16 cv
134.061 340.511 133.495 333.648 133.03 328.125 cv
132.584 322.75 132.256 318.863 132.256 315.109 cv
132.256 311.113 133.342 307.121 134.393 303.265 cv
135.409 299.523 136.463 295.664 135.991 293.285 cv
134.081 283.73 140.377 276.527 141.1 275.734 cv
143.502 273.125 li
151.03 274.8 li
156.28 275.968 161.061 279.601 161.592 280.003 cv
202.366 294.199 li
213.143 298.82 li
212.151 313.636 211.42 389.222 265.51 449.613 cv
297.37 485.187 325.163 504.464 345.897 505.363 cv
346.624 505.394 347.334 505.41 348.073 505.41 cv
409.045 505.41 495.377 399.757 520.381 367.375 cv
521.174 366.343 472.577 356.574 472.799 356.292 cv
475.991 352.402 530.35 359.359 536.686 359.359 cv
538.819 359.359 540.276 359.601 540.276 359.601 cv
543.417 360.132 li
544.858 363.007 li
547.698 368.937 561.803 399.121 560.311 411.972 cv
559.311 420.695 555.42 442.582 541.034 457.515 cv
529.963 469.015 516.198 482.421 505.963 491.675 cv
501.799 495.449 498.417 498.437 495.354 501.132 cv
491.483 504.554 488.139 507.511 484.366 511.027 cv
474.706 520.042 447.897 532.816 427.116 541.953 cv
403.569 552.296 373.288 558.234 344.042 558.234 cv
cp
f
157.815 284.859 mo
157.815 284.859 153.756 281.699 149.694 280.796 cv
145.627 279.886 145.627 279.886 145.627 279.886 cv
145.627 279.886 140.663 285.308 142.014 292.082 cv
143.374 298.851 138.397 307.882 138.397 315.109 cv
138.397 322.328 139.756 330.91 140.663 349.875 cv
141.569 368.832 145.624 388.238 154.655 415.781 cv
154.655 415.781 156.459 421.656 160.069 428.429 cv
163.69 435.199 168.655 443.332 176.784 455.96 cv
184.909 468.605 190.78 473.121 194.389 478.085 cv
197.995 483.058 221.022 508.789 250.819 525.042 cv
280.616 541.3 304.999 549.878 331.639 551.683 cv
358.28 553.488 394.846 549.414 424.647 536.332 cv
454.44 523.238 473.405 512.851 480.174 506.535 cv
486.944 500.207 492.366 495.699 501.85 487.121 cv
511.327 478.546 524.87 465.449 536.608 453.257 cv
548.346 441.07 552.858 423.007 554.217 411.269 cv
555.569 399.531 539.319 365.667 539.319 365.667 cv
539.319 365.667 530.741 364.316 526.678 369.281 cv
522.616 374.25 418.319 514.66 345.631 511.5 cv
272.944 508.343 156.014 311.949 157.815 284.859 cv
cp
1 1 1 rgb
f
184.002 291.156 mo
152.85 281.23 li
152.85 281.23 154.655 288.007 151.944 288.906 cv
149.237 289.804 147.428 287.55 147.428 287.55 cv
147.428 287.55 148.792 291.156 146.979 293.417 cv
145.174 295.675 148.338 296.128 150.143 296.128 cv
151.944 296.128 151.944 298.839 150.143 302.445 cv
148.338 306.054 144.276 307.414 144.276 307.414 cv
144.276 307.414 144.733 307.414 146.979 312.382 cv
149.237 317.347 146.077 317.796 146.077 317.796 cv
146.077 317.796 149.237 318.703 147.881 321.417 cv
146.53 324.121 143.815 321.417 143.815 321.417 cv
143.815 329.082 li
143.815 329.082 147.428 327.73 147.428 331.792 cv
147.428 335.859 143.374 336.308 143.374 336.308 cv
144.276 340.824 li
144.276 340.824 148.334 339.468 149.237 342.632 cv
150.143 345.792 145.174 349.398 145.174 349.398 cv
145.174 349.398 149.237 350.753 151.499 356.171 cv
153.756 361.593 145.627 365.648 145.627 365.648 cv
145.627 365.648 156.014 371.984 152.401 382.363 cv
148.788 392.746 151.952 395.453 153.756 395.453 cv
155.565 395.453 157.37 397.71 156.463 401.777 cv
155.565 405.835 156.917 404.933 159.624 406.285 cv
162.331 407.636 166.397 411.71 163.233 417.578 cv
163.233 417.578 170.905 417.578 167.752 423.441 cv
167.752 423.441 164.143 424.8 167.303 428.863 cv
170.456 432.925 174.967 432.921 173.616 438.792 cv
172.264 444.664 169.999 444.214 173.616 442.406 cv
177.229 440.605 179.03 442.863 179.94 446.015 cv
180.842 449.179 177.678 449.625 177.678 449.625 cv
177.678 449.625 180.842 447.375 182.647 453.691 cv
184.452 460.019 182.647 460.019 182.647 460.019 cv
182.647 460.019 187.616 455.042 189.42 458.656 cv
191.225 462.269 189.42 463.625 189.42 463.625 cv
189.42 463.625 194.842 459.113 197.096 464.078 cv
199.354 469.042 195.292 472.652 195.292 472.652 cv
195.292 472.652 198.893 469.042 202.057 473.109 cv
205.221 477.171 203.87 479.882 203.87 479.882 cv
203.87 479.882 208.831 476.265 209.741 481.683 cv
210.643 487.105 214.706 482.593 215.159 488.003 cv
215.604 493.429 223.737 487.554 222.831 492.972 cv
221.932 498.39 227.792 496.132 227.346 500.199 cv
226.897 504.257 228.698 506.058 230.057 505.16 cv
231.405 504.257 234.12 500.644 234.12 500.644 cv
234.12 500.644 232.764 506.066 235.022 507.417 cv
237.272 508.773 240.436 506.066 240.436 506.066 cv
240.436 506.066 235.928 510.582 239.084 512.835 cv
242.245 515.097 243.596 510.585 247.663 511.031 cv
251.725 511.484 248.112 516.898 248.112 516.898 cv
248.112 516.898 252.17 514.64 254.885 517.355 cv
257.592 520.058 258.499 523.222 258.499 523.222 cv
265.721 527.285 li
265.721 527.285 260.76 522.769 266.17 520.968 cv
271.588 519.16 274.749 525.023 271.139 529.093 cv
271.139 529.093 277.459 526.835 278.811 528.636 cv
278.811 528.636 278.893 530.285 280.616 532.726 cv
281.94 534.601 279.264 530.468 284.233 531.363 cv
289.198 532.265 288.299 536.781 288.299 536.781 cv
288.299 536.781 291.913 533.167 295.967 533.617 cv
300.038 534.078 291.452 537.691 296.42 539.492 cv
301.389 541.3 300.491 538.578 304.1 539.039 cv
307.709 539.492 307.709 533.167 307.709 533.167 cv
307.709 533.167 310.413 535.429 309.963 539.492 cv
309.518 543.558 317.186 537.691 318.542 542.203 cv
319.901 546.718 323.963 539.492 325.315 544.003 cv
326.667 548.519 332.538 547.613 333.897 544.453 cv
335.252 541.3 337.057 544.007 337.959 546.265 cv
338.858 548.519 345.631 545.812 345.631 545.812 cv
345.631 545.812 344.733 542.203 348.795 542.652 cv
352.858 543.101 349.694 548.07 349.694 548.07 cv
349.694 548.07 353.764 548.968 356.92 548.07 cv
360.081 547.167 363.241 547.167 363.241 547.167 cv
363.241 547.167 357.374 542.652 360.983 539.945 cv
364.592 537.23 368.209 540.39 366.405 544.453 cv
364.592 548.519 367.752 544.914 370.467 545.363 cv
373.17 545.812 374.077 543.101 374.077 543.101 cv
373.17 541.3 li
373.17 541.3 371.366 536.332 376.78 536.332 cv
382.202 536.332 381.756 538.14 381.307 539.945 cv
380.846 541.75 387.624 541.3 390.78 539.945 cv
393.936 538.585 393.495 534.078 395.295 533.167 cv
397.1 532.265 402.526 531.808 400.264 536.332 cv
398.006 540.851 406.584 535.882 408.385 535.429 cv
410.194 534.972 410.198 531.363 412.452 532.265 cv
414.709 533.167 413.358 528.203 416.522 526.847 cv
419.674 525.492 421.483 526.847 427.799 525.492 cv
434.12 524.14 431.862 524.144 433.67 521.886 cv
435.483 519.625 439.088 517.363 439.088 520.078 cv
439.088 522.785 440.897 516.917 440.897 516.917 cv
440.897 516.917 438.639 512.847 442.702 511.953 cv
446.764 511.05 449.022 513.304 447.674 515.562 cv
446.315 517.824 450.377 513.753 450.377 513.753 cv
450.377 513.753 447.674 506.535 452.178 506.085 cv
456.698 505.628 460.756 504.726 462.116 504.726 cv
463.467 504.726 463.924 502.015 463.924 502.015 cv
463.924 502.015 458.948 501.113 462.116 496.597 cv
465.28 492.089 467.088 495.699 466.631 498.402 cv
466.174 501.113 469.788 494.796 469.788 494.796 cv
469.788 494.796 468.436 489.835 472.502 489.375 cv
476.561 488.925 476.116 492.539 476.116 492.539 cv
483.78 488.023 li
483.78 488.023 483.338 483.058 486.042 484.41 cv
488.749 485.765 486.491 481.71 490.553 479.898 cv
494.616 478.085 491.913 474.027 490.108 473.125 cv
488.303 472.218 486.038 467.71 490.553 466.8 cv
495.077 465.898 495.522 467.257 495.522 470.414 cv
495.522 473.574 500.495 470.414 500.944 466.359 cv
501.389 462.289 499.592 460.933 503.202 460.48 cv
506.811 460.031 503.202 458.222 506.354 456.871 cv
509.518 455.519 504.553 454.16 506.354 450.996 cv
508.163 447.843 510.877 446.48 510.877 449.644 cv
510.877 452.808 512.229 448.75 514.491 446.035 cv
516.745 443.332 522.163 439.718 516.745 439.718 cv
511.327 439.718 509.518 433.39 512.682 432.035 cv
515.842 430.683 516.292 433.39 516.292 433.39 cv
516.292 433.39 513.581 427.07 517.643 426.617 cv
521.709 426.171 521.709 428.429 521.709 428.429 cv
521.709 428.429 518.545 418.492 521.256 418.042 cv
523.967 417.593 523.963 415.781 524.417 411.718 cv
524.874 407.656 524.417 406.304 526.678 403.597 cv
528.932 400.882 523.522 396.378 526.678 394.566 cv
529.834 392.757 525.327 387.343 529.381 385.988 cv
533.452 384.628 534.342 383.277 533.897 380.57 cv
533.452 377.855 532.792 376.222 531.303 371.175 cv
529.862 366.273 533.87 363.988 533.87 363.988 cv
496.881 356.64 li
496.881 356.64 402.971 440.171 365.952 452.808 cv
328.932 465.449 280.163 441.976 252.17 418.042 cv
224.182 394.113 184.002 291.156 184.002 291.156 cv
cp
.27451 .207843 .145098 rgb
f
354.354 544.96 mo
354.389 544.058 354.256 543.125 353.819 542.23 cv
353.346 541.23 352.108 539.507 349.178 539.179 cv
348.795 539.14 348.452 539.121 348.127 539.121 cv
345.377 539.121 343.905 540.48 343.268 541.292 cv
342.772 541.925 342.467 542.597 342.288 543.246 cv
341.698 543.41 341.1 543.546 340.6 543.617 cv
338.889 540.273 336.823 539.531 335.319 539.531 cv
334.163 539.531 332.014 539.984 330.686 543.078 cv
330.608 543.257 330.061 543.617 329.44 543.617 cv
328.932 543.617 328.788 543.429 328.659 543 cv
327.538 539.253 324.663 538.964 323.807 538.964 cv
322.795 538.964 321.901 539.273 321.159 539.601 cv
320.045 537.847 318.194 536.906 315.85 536.906 cv
315.077 536.906 314.237 537.015 313.42 537.16 cv
312.909 533.089 310.299 530.781 309.944 530.492 cv
304.217 525.699 li
304.217 533.167 li
304.206 533.945 304.045 534.921 303.842 535.507 cv
303.659 535.503 303.483 535.492 303.319 535.492 cv
301.862 535.492 300.819 535.871 300.092 536.21 cv
300.569 535.285 300.834 534.14 300.331 532.835 cv
299.913 531.769 298.893 530.429 296.358 530.148 cv
295.991 530.109 295.624 530.089 295.26 530.089 cv
293.456 530.089 291.795 530.57 290.381 531.207 cv
289.506 529.98 287.842 528.472 284.858 527.929 cv
284.159 527.804 283.542 527.753 282.995 527.753 cv
282.897 527.753 282.799 527.753 282.698 527.753 cv
282.174 527.023 281.631 526.48 281.292 526.167 cv
280.495 525.312 279.092 524.449 276.702 524.449 cv
276.514 524.449 276.327 524.453 276.139 524.468 cv
276.057 523.566 275.823 522.675 275.448 521.82 cv
274.147 518.937 271.346 517.14 268.127 517.14 cv
267.124 517.14 266.092 517.308 265.069 517.652 cv
263.049 518.324 261.85 519.339 261.131 520.375 cv
260.467 518.91 259.284 516.816 257.35 514.886 cv
256.17 513.703 254.709 512.945 253.077 512.656 cv
253.045 511.964 252.893 511.265 252.581 510.589 cv
252.116 509.593 250.905 507.882 248.045 507.562 cv
247.096 507.511 li
245.311 507.511 243.881 508.07 242.764 508.683 cv
242.815 508.628 242.866 508.578 242.909 508.531 cv
242.717 502.953 li
242.452 503.179 237.542 503.863 237.206 504.035 cv
237.206 503.257 234.842 497.906 235.022 497.183 cv
231.327 498.546 li
231.163 498.765 231.002 498.976 230.842 499.183 cv
230.553 495.878 227.811 494.593 226.698 494.074 cv
226.452 493.96 226.077 493.785 225.967 493.703 cv
226.6 491.597 226.249 489.984 225.213 488.769 cv
223.678 486.953 221.397 486.953 220.651 486.953 cv
220.233 486.953 218.553 487.035 218.553 487.035 cv
217.834 482.285 214.538 481.66 213.26 481.417 cv
213.249 481.417 213.202 481.226 213.186 481.113 cv
212.463 476.812 209.608 475.246 207.139 475.207 cv
206.725 473.921 206.002 472.492 204.811 470.96 cv
203.639 469.457 202.381 468.617 201.209 468.16 cv
201.393 466.437 201.151 464.566 200.28 462.632 cv
199.014 459.847 196.682 458.257 193.885 458.257 cv
193.612 458.257 193.334 458.265 193.069 458.296 cv
192.917 457.906 192.741 457.511 192.542 457.101 cv
191.51 455.031 189.663 453.851 187.459 453.851 cv
187.088 453.851 186.709 453.882 186.327 453.949 cv
186.233 453.558 186.12 453.156 186.002 452.734 cv
185.358 450.472 184.479 448.925 183.542 447.875 cv
183.651 446.992 183.581 446.035 183.299 445.058 cv
181.92 440.265 179.26 438.785 177.233 438.398 cv
177.975 433.097 174.842 430.734 172.717 429.132 cv
171.737 428.39 170.819 427.699 170.061 426.718 cv
169.963 426.601 169.885 426.488 169.823 426.398 cv
170.202 426.25 li
170.823 425.097 li
172.663 421.679 172.018 419.23 171.155 417.777 cv
170.319 416.382 169.049 415.519 167.76 414.976 cv
168.038 413.058 167.772 411.441 167.389 410.246 cv
166.002 405.851 162.284 403.71 161.178 403.164 cv
160.702 402.925 160.264 402.746 159.862 402.589 cv
159.862 402.57 159.866 402.55 159.87 402.535 cv
160.604 399.273 160.104 396.347 158.463 394.312 cv
157.424 393.011 155.995 392.203 154.459 392.007 cv
154.206 391.328 153.764 389.058 155.69 383.511 cv
158.323 375.96 155.061 369.75 151.389 365.902 cv
154.327 363.246 156.608 359.367 154.717 354.824 cv
153.596 352.14 152.1 350.23 150.686 348.898 cv
152.174 346.976 153.385 344.433 152.592 341.671 cv
151.995 339.582 150.584 338.101 148.639 337.433 cv
149.959 336.148 150.924 334.296 150.924 331.792 cv
150.924 328.683 149.479 326.777 147.624 325.917 cv
149.049 325.523 150.249 324.492 151.002 322.98 cv
151.842 321.289 151.936 319.503 151.249 317.949 cv
151.17 317.769 151.081 317.597 150.983 317.425 cv
151.569 315.609 151.292 313.433 150.163 310.937 cv
149.788 310.128 149.452 309.394 149.139 308.734 cv
150.612 307.679 152.202 306.144 153.264 304.007 cv
154.608 301.328 155.858 297.558 154.186 294.855 cv
153.483 293.722 152.401 292.98 151.12 292.73 cv
151.131 292.679 151.139 292.636 151.155 292.589 cv
151.788 292.55 152.428 292.421 153.049 292.218 cv
155.858 291.285 156.772 288.75 156.917 286.191 cv
181.358 293.98 li
186.706 307.484 223.143 397.816 249.905 420.695 cv
271.022 438.753 308.178 459.839 343.377 459.839 cv
351.862 459.839 359.831 458.585 367.084 456.109 cv
402.389 444.062 485.959 370.949 497.897 360.406 cv
527.913 366.367 li
527.405 368 527.295 369.937 527.952 372.164 cv
529.069 375.875 li
529.764 378.109 530.159 379.375 530.456 381.144 cv
530.522 381.515 530.514 381.71 530.51 381.777 cv
530.51 381.773 530.506 381.773 530.495 381.773 cv
530.409 381.773 529.87 382.148 528.28 382.675 cv
523.401 384.308 524.03 389.062 524.276 390.855 cv
524.311 391.164 524.362 391.578 524.389 391.89 cv
520.838 394.406 522.522 398.605 523.182 400.234 cv
523.346 400.656 523.608 401.304 523.713 401.714 cv
521.487 404.523 521.327 406.695 521.139 409.191 cv
521.092 409.808 520.858 412.171 520.858 412.171 cv
520.76 413.031 520.651 414.046 520.526 414.625 cv
519.221 414.937 518.241 415.648 517.592 416.683 cv
517.174 417.339 516.256 418.8 516.893 423.195 cv
515.182 423.476 513.776 424.378 512.897 425.761 cv
512.35 426.632 512.069 427.593 511.959 428.574 cv
511.745 428.652 511.53 428.734 511.307 428.824 cv
508.545 430.011 507.135 432.96 507.795 436.183 cv
508.299 438.652 510.084 441.253 513.022 442.484 cv
512.577 442.929 512.163 443.378 511.803 443.8 cv
511.592 444.054 511.393 444.312 511.198 444.582 cv
510.749 444.425 510.28 444.351 509.819 444.351 cv
506.491 444.351 504.167 447.785 503.327 449.261 cv
502.03 451.539 502.401 453.515 503.014 454.906 cv
502.303 455.562 501.834 456.343 501.608 457.246 cv
497.038 458.457 497.334 462.089 497.459 463.539 cv
497.487 463.945 497.538 464.417 497.526 464.972 cv
496.502 463.687 494.928 463.039 492.838 463.039 cv
492.049 463.039 491.069 463.14 489.87 463.378 cv
486.85 463.984 484.834 465.933 484.479 468.585 cv
484.042 471.835 486.249 475.093 488.538 476.25 cv
488.663 476.332 488.846 476.542 488.991 476.757 cv
486.76 477.886 485.643 479.406 485.038 480.683 cv
483.811 480.726 482.682 481.25 481.842 482.167 cv
480.85 483.246 480.456 484.722 480.319 486.007 cv
477.725 487.535 li
476.85 486.699 475.409 485.843 473.17 485.843 cv
472.842 485.843 472.487 485.863 472.116 485.91 cv
469.495 486.203 468.049 487.578 467.295 488.687 cv
466.756 489.476 466.436 490.335 466.268 491.183 cv
465.811 491.039 465.342 490.972 464.858 490.972 cv
462.831 490.972 460.944 492.191 459.26 494.593 cv
457.131 497.628 457.397 500.015 457.995 501.476 cv
458.034 501.566 458.073 501.652 458.112 501.734 cv
458.104 501.734 458.092 501.738 458.077 501.738 cv
456.334 502.023 454.147 502.378 451.834 502.609 cv
449.819 502.812 448.151 503.812 447.139 505.433 cv
446.569 506.347 446.268 507.375 446.151 508.41 cv
445.608 508.304 445.038 508.261 444.452 508.261 cv
443.651 508.261 442.799 508.355 441.944 508.539 cv
438.991 509.199 437.772 511.015 437.307 512.042 cv
436.776 513.238 436.706 514.453 436.838 515.511 cv
434.374 516.132 432.053 518.324 430.944 519.703 cv
430.409 520.375 430.077 520.968 429.862 521.417 cv
429.389 521.554 428.553 521.769 427.069 522.082 cv
424.991 522.523 423.401 523.332 422.194 524.218 cv
420.913 523.492 419.436 523.058 417.999 523.058 cv
416.999 523.058 416.038 523.257 415.143 523.636 cv
412.499 524.769 411.502 527.027 410.999 528.691 cv
408.678 529.074 407.522 531.07 407.006 531.976 cv
406.952 532.074 406.897 532.179 406.838 532.269 cv
406.276 532.48 405.538 532.792 404.717 533.164 cv
404.569 533.234 404.393 533.312 404.198 533.398 cv
404.065 532.71 403.811 532.152 403.538 531.71 cv
402.936 530.726 401.424 529.082 398.112 529.082 cv
396.6 529.082 394.92 529.453 393.733 530.05 cv
391.686 531.074 390.979 533.128 390.459 534.632 cv
390.163 535.492 389.792 536.574 389.397 536.738 cv
388.377 537.179 386.549 537.535 384.983 537.621 cv
384.87 536.859 384.577 536.058 383.983 535.292 cv
382.284 533.121 379.241 532.835 376.78 532.835 cv
373.26 532.835 371.448 534.371 370.549 535.648 cv
369.846 536.656 369.534 537.734 369.428 538.73 cv
369.374 538.628 369.315 538.531 369.245 538.437 cv
368.03 536.558 365.956 535.441 363.698 535.441 cv
362.038 535.441 360.377 536.035 358.885 537.152 cv
357.245 538.39 356.327 540.117 356.315 542.031 cv
356.311 542.902 356.491 543.722 356.78 544.496 cv
356.51 544.566 356.237 544.632 355.967 544.71 cv
355.514 544.839 354.967 544.921 354.354 544.96 cv
cp
1 1 1 rgb
f
269.147 527.593 mo
269.147 527.593 264.53 521.937 269.147 522.457 cv
273.768 522.972 275.819 527.082 269.147 527.593 cv
cp
.27451 .207843 .145098 rgb
f
354.53 519.82 mo
346.233 519.82 337.17 519.042 329.01 517.636 cv
322.917 516.582 318.456 514.101 315.76 510.265 cv
315.139 509.375 314.627 508.433 314.206 507.437 cv
312.295 508.98 309.627 510.136 305.788 510.136 cv
301.311 510.136 295.342 508.585 286.999 505.246 cv
282.385 503.398 279.315 500.425 277.858 496.398 cv
277.608 495.687 277.42 494.98 277.28 494.273 cv
277.174 494.355 277.077 494.437 276.983 494.523 cv
275.178 496.027 273.116 496.792 270.858 496.792 cv
266.526 496.792 261.854 493.945 256.581 488.082 cv
255.702 487.109 255.198 486.617 254.924 486.367 cv
252.764 486.175 250.182 485 241.92 477.5 cv
236.667 472.714 234.741 467.539 234.608 462.652 cv
234.127 463.199 li
231.6 461.621 li
229.475 460.308 210.799 448.507 207.78 439.445 cv
207.249 437.851 207.057 436.246 207.206 434.667 cv
200.6 431.484 190.116 415.566 188.139 409.652 cv
187.413 407.476 187.604 405.187 188.686 402.792 cv
187.772 402.773 186.917 402.617 186.159 402.335 cv
177.85 399.214 167.135 348.949 169.045 336.886 cv
170.026 330.687 172.389 327.636 174.807 326.187 cv
166.35 312.675 172.87 289.531 173.202 288.39 cv
173.502 287.359 li
174.319 286.675 li
175.678 285.542 177.252 284.972 179.01 284.972 cv
181.268 284.972 183.299 285.914 185.252 286.832 cv
186.745 287.535 188.288 288.253 189.452 288.253 cv
189.733 288.253 189.979 288.214 190.221 288.117 cv
191.209 287.75 192.381 287.57 193.827 287.57 cv
199.428 287.57 208.959 290.351 216.62 292.597 cv
220.026 293.589 223.245 294.531 224.452 294.703 cv
227.167 295.093 232.67 296.906 240.292 299.406 cv
247.116 301.644 255.6 304.437 263.854 306.75 cv
277.311 310.511 281.209 310.929 291.639 312.042 cv
294.081 312.296 296.874 312.593 300.209 312.98 cv
309.182 314.015 317.78 316.992 326.092 319.882 cv
334.413 322.769 342.284 325.5 349.401 325.82 cv
365.655 326.562 376.827 334.484 378.362 333.988 cv
379.745 333.55 381.276 333.062 383.026 332.671 cv
384.002 332.457 385.053 332.355 386.225 332.355 cv
389.729 332.355 393.881 333.3 399.131 334.507 cv
404.249 335.679 410.624 337.14 418.061 338.039 cv
435.327 340.101 458.073 346.332 468.795 349.683 cv
474.831 351.566 476.209 351.816 478.491 351.816 cv
479.319 351.816 480.241 351.781 481.389 351.734 cv
483.413 351.656 486.096 351.546 490.108 351.546 cv
506.53 351.546 510.803 362.14 510.975 362.589 cv
511.256 363.335 li
511.198 364.132 li
509.948 379.507 503.795 385.328 498.479 387.437 cv
499.975 390.121 500.924 393.957 500.35 399.429 cv
498.811 414.039 486.002 432.531 477.76 441.39 cv
474.038 445.41 471.124 447.101 468.725 447.863 cv
469.417 454.64 463.991 465.14 451.448 473.73 cv
446.233 477.296 441.565 479.105 437.581 479.105 cv
437.346 479.105 437.116 479.097 436.893 479.085 cv
436.737 481.382 436.073 483.687 434.889 485.937 cv
429.557 496.093 414.889 503.496 403.518 506.085 cv
401.311 506.582 399.202 506.839 397.241 506.839 cv
395.67 506.839 394.276 506.679 393.045 506.421 cv
392.737 507.257 392.292 507.875 391.905 508.296 cv
385.241 517.808 367.944 519.82 354.53 519.82 cv
cp
f
179.577 290.363 mo
179.577 290.363 170.885 320.015 185.6 329.234 cv
185.6 329.234 177.569 324.625 175.569 337.14 cv
173.561 349.66 184.928 395.121 190.28 397.101 cv
195.631 399.082 211.686 387.875 211.686 387.875 cv
211.686 387.875 191.62 398.429 194.295 406.328 cv
196.971 414.234 210.354 430.714 212.362 428.734 cv
214.366 426.757 221.717 422.144 221.717 422.144 cv
221.717 422.144 211.014 427.414 213.698 435.316 cv
216.366 443.226 234.053 454.214 234.053 454.214 cv
251.553 432.964 li
251.553 432.964 231.76 457.726 246.471 470.902 cv
261.19 484.078 255.163 474.859 261.19 481.445 cv
267.213 488.039 272.557 490.675 276.569 487.375 cv
280.584 484.078 284.6 477.496 284.6 477.496 cv
284.6 477.496 276.569 491.992 289.959 497.261 cv
307.452 504.16 312.698 502.531 316.042 496.597 cv
319.389 490.675 319.389 488.039 319.389 488.039 cv
319.389 488.039 311.358 505.832 330.76 509.125 cv
350.159 512.414 381.6 513.07 389.624 501.21 cv
389.624 501.21 391.627 499.894 388.959 495.285 cv
386.276 490.675 388.284 501.21 402.999 497.914 cv
417.717 494.621 436.553 485.464 428.221 466.714 cv
428.221 466.714 436.448 475.511 449.159 466.945 cv
461.862 458.378 467.928 443.292 466.588 438.687 cv
465.252 434.074 465.881 445.207 474.577 435.976 cv
483.268 426.757 494.647 409.625 495.983 397.101 cv
497.323 384.589 489.295 383.273 489.295 383.273 cv
489.295 383.273 504.678 387.218 506.686 362.835 cv
506.686 362.835 503.776 356.792 489.733 356.792 cv
475.69 356.792 477.917 355.597 467.213 352.3 cv
456.514 349.003 434.44 343.078 417.717 341.097 cv
400.999 339.117 390.295 334.507 384.264 335.82 cv
378.256 337.14 374.909 339.781 371.569 336.484 cv
368.221 333.187 364.874 329.894 350.159 329.234 cv
335.436 328.57 318.713 318.691 301.319 316.718 cv
283.928 314.738 281.608 315.16 264.885 310.55 cv
248.163 305.941 231.084 299.585 226.405 298.921 cv
221.717 298.261 199.647 290.363 194.295 292.339 cv
188.944 294.316 183.592 287.066 179.577 290.363 cv
cp
1 1 1 rgb
f
gsave
322.358 353.789 mo
322.358 353.789 284.225 395.035 272.147 409.136 cv
260.081 423.234 235.702 450.8 238.038 459.589 cv
240.37 468.363 250.299 476.468 252.389 478.449 cv
254.459 480.433 267.952 487.941 275.217 490.527 cv
282.499 493.101 293.53 456.164 296.249 450.605 cv
298.952 445.058 311.67 397.218 319.284 383.433 cv
326.889 369.64 338.182 348.242 322.358 353.789 cv
cp
clp
242.624 454.882 mo
242.624 454.882 246.709 475.019 280.319 482.679 cv
280.319 482.679 252.85 470.078 242.624 454.882 cv
cp
.27451 .207843 .145098 rgb
f
246.92 447.464 mo
246.92 447.464 251.022 467.609 284.624 475.269 cv
284.624 475.269 257.155 462.66 246.92 447.464 cv
cp
f
249.85 437.953 mo
249.85 437.953 253.944 458.089 287.557 465.746 cv
287.557 465.746 260.084 453.144 249.85 437.953 cv
cp
f
253.944 430.136 mo
253.944 430.136 258.034 450.269 291.639 457.933 cv
291.639 457.933 264.167 445.332 253.944 430.136 cv
cp
f
258.545 422.816 mo
258.545 422.816 262.643 442.96 296.249 450.605 cv
296.249 450.605 268.78 438.003 258.545 422.816 cv
cp
f
261.823 415.425 mo
261.823 415.425 265.92 435.562 299.53 443.214 cv
299.53 443.214 272.053 430.625 261.823 415.425 cv
cp
f
265.51 407.824 mo
265.51 407.824 269.612 427.964 303.217 435.617 cv
303.217 435.617 275.745 423.019 265.51 407.824 cv
cp
f
270.42 400.597 mo
270.42 400.597 274.522 420.738 308.124 428.39 cv
308.124 428.39 280.651 415.781 270.42 400.597 cv
cp
f
272.057 392.023 mo
272.057 392.023 276.159 412.152 309.752 419.824 cv
309.752 419.824 282.284 407.21 272.057 392.023 cv
cp
f
274.51 384.046 mo
274.51 384.046 278.612 404.183 312.217 411.832 cv
312.217 411.832 284.745 399.23 274.51 384.046 cv
cp
f
273.803 375.425 mo
273.803 375.425 277.897 395.558 311.51 403.214 cv
311.51 403.214 284.042 390.605 273.803 375.425 cv
cp
f
275.67 368.273 mo
275.67 368.273 279.768 388.414 313.377 396.054 cv
313.377 396.054 285.901 383.453 275.67 368.273 cv
cp
f
279.284 361.976 mo
279.284 361.976 283.385 382.128 316.995 389.785 cv
316.995 389.785 289.522 377.179 279.284 361.976 cv
cp
f
281.581 355.625 mo
281.581 355.625 285.67 375.773 319.284 383.433 cv
319.284 383.433 291.811 370.82 281.581 355.625 cv
cp
f
284.756 348.539 mo
284.756 348.539 288.866 368.683 322.475 376.343 cv
322.475 376.343 295.002 363.742 284.756 348.539 cv
cp
f
286.639 341.386 mo
286.639 341.386 290.741 361.535 324.334 369.195 cv
324.334 369.195 296.858 356.582 286.639 341.386 cv
cp
f
291.784 335.585 mo
291.784 335.585 295.885 355.722 329.479 363.378 cv
329.479 363.378 302.014 350.773 291.784 335.585 cv
cp
f
grestore
gsave
316.874 331.078 mo
316.874 331.078 265.807 354.464 249.237 362.835 cv
232.67 371.203 199.557 387.265 198.334 396.281 cv
197.112 405.273 203.163 416.582 204.319 419.203 cv
205.467 421.832 215.03 433.957 220.741 439.132 cv
226.467 444.312 213.084 431.753 252.342 404.808 cv
257.428 401.32 290.303 367.046 302.635 357.257 cv
314.959 347.445 333.612 332.046 316.874 331.078 cv
cp
clp
204.374 393.691 mo
204.374 393.691 200.397 413.859 228.475 433.863 cv
228.475 433.863 207.967 411.66 204.374 393.691 cv
cp
.27451 .207843 .145098 rgb
f
211.194 388.507 mo
211.194 388.507 207.233 408.671 235.292 428.683 cv
235.292 428.683 214.795 406.464 211.194 388.507 cv
cp
f
217.561 380.855 mo
217.561 380.855 213.592 401.015 241.667 421.019 cv
241.667 421.019 221.159 398.82 217.561 380.855 cv
cp
f
224.354 375.218 mo
224.354 375.218 220.377 395.371 248.436 415.375 cv
248.436 415.375 227.936 393.175 224.354 375.218 cv
cp
f
231.413 370.234 mo
231.413 370.234 227.444 390.39 255.514 410.386 cv
255.514 410.386 235.018 388.179 231.413 370.234 cv
cp
f
237.284 364.667 mo
237.284 364.667 233.319 384.828 261.389 404.828 cv
261.389 404.828 240.874 382.628 237.284 364.667 cv
cp
f
243.616 359.074 mo
243.616 359.074 239.647 379.234 267.717 399.23 cv
267.717 399.23 247.209 377.027 243.616 359.074 cv
cp
f
250.924 354.289 mo
250.924 354.289 246.959 374.453 275.022 394.449 cv
275.022 394.449 254.53 372.242 250.924 354.289 cv
cp
f
255.741 347.003 mo
255.741 347.003 251.776 367.167 279.827 387.171 cv
279.827 387.171 259.327 364.96 255.741 347.003 cv
cp
f
261.073 340.589 mo
261.073 340.589 257.1 360.757 285.182 380.742 cv
285.182 380.742 264.667 358.535 261.073 340.589 cv
cp
f
263.737 332.359 mo
263.737 332.359 259.768 352.511 287.838 372.519 cv
287.838 372.519 267.331 350.308 263.737 332.359 cv
cp
f
268.217 326.476 mo
268.217 326.476 264.245 346.64 292.327 366.632 cv
292.327 366.632 271.815 344.425 268.217 326.476 cv
cp
f
273.971 322.054 mo
273.971 322.054 270.002 342.23 298.073 362.238 cv
298.073 362.238 277.565 340.035 273.971 322.054 cv
cp
f
278.53 317.082 mo
278.53 317.082 274.553 337.246 302.635 357.257 cv
302.635 357.257 282.127 335.035 278.53 317.082 cv
cp
f
284.198 311.761 mo
284.198 311.761 280.233 331.933 308.303 351.937 cv
308.303 351.937 287.799 329.73 284.198 311.761 cv
cp
f
288.678 305.878 mo
288.678 305.878 284.713 326.054 312.776 346.05 cv
312.776 346.05 292.264 323.839 288.678 305.878 cv
cp
f
295.663 302.503 mo
295.663 302.503 291.698 322.671 319.752 342.66 cv
319.752 342.66 299.26 320.464 295.663 302.503 cv
cp
f
grestore
gsave
338.581 365.265 mo
338.581 365.265 329.417 420.675 327.088 439.093 cv
324.756 457.511 319.553 493.937 326.334 499.996 cv
333.112 506.046 345.877 507.355 348.69 507.855 cv
351.514 508.375 366.913 507.226 374.393 505.39 cv
381.897 503.531 370.803 466.617 370.018 460.488 cv
369.225 454.359 353.553 407.402 352.323 391.71 cv
351.081 376 348.752 351.933 338.581 365.265 cv
cp
clp
327.577 493.546 mo
327.577 493.546 342.069 508.121 374.358 496.027 cv
374.358 496.027 344.475 500.609 327.577 493.546 cv
cp
.27451 .207843 .145098 rgb
f
327.096 484.992 mo
327.096 484.992 341.592 499.55 373.87 487.476 cv
373.87 487.476 343.991 492.05 327.096 484.992 cv
cp
f
324.315 475.429 mo
324.315 475.429 338.795 489.996 371.084 477.921 cv
371.084 477.921 341.217 482.496 324.315 475.429 cv
cp
f
323.436 466.652 mo
323.436 466.652 337.92 481.214 370.198 469.14 cv
370.198 469.14 340.327 473.714 323.436 466.652 cv
cp
f
323.256 458.007 mo
323.256 458.007 337.741 472.57 370.018 460.488 cv
370.018 460.488 340.139 465.062 323.256 458.007 cv
cp
f
321.92 450.031 mo
321.92 450.031 336.42 464.593 368.698 452.511 cv
368.698 452.511 338.815 457.101 321.92 450.031 cv
cp
f
320.823 441.652 mo
320.823 441.652 335.311 456.214 367.592 444.121 cv
367.592 444.121 337.721 448.71 320.823 441.652 cv
cp
f
320.944 432.914 mo
320.944 432.914 335.444 447.484 367.717 435.406 cv
367.717 435.406 337.842 439.964 320.944 432.914 cv
cp
f
317.6 424.847 mo
317.6 424.847 332.096 439.414 364.374 427.343 cv
364.374 427.343 334.499 431.925 317.6 424.847 cv
cp
f
315.26 416.839 mo
315.26 416.839 329.764 431.41 362.038 419.316 cv
362.038 419.316 332.163 423.898 315.26 416.839 cv
cp
f
309.928 410.031 mo
309.928 410.031 324.42 424.589 356.702 412.511 cv
356.702 412.511 326.823 417.085 309.928 410.031 cv
cp
f
307.557 403.031 mo
307.557 403.031 322.061 417.593 354.334 405.503 cv
354.334 405.503 324.452 410.089 307.557 403.031 cv
cp
f
307.116 395.785 mo
307.116 395.785 321.624 410.363 353.905 398.277 cv
353.905 398.277 324.03 402.863 307.116 395.785 cv
cp
f
305.534 389.222 mo
305.534 389.222 320.038 403.8 352.323 391.71 cv
352.323 391.71 322.44 396.285 305.534 389.222 cv
cp
f
304.303 381.558 mo
304.303 381.558 318.803 396.125 351.092 384.035 cv
351.092 384.035 321.213 388.605 304.303 381.558 cv
cp
f
301.936 374.546 mo
301.936 374.546 316.436 389.117 348.709 377.042 cv
348.709 377.042 318.819 381.617 301.936 374.546 cv
cp
f
303.038 366.871 mo
303.038 366.871 317.542 381.429 349.795 369.355 cv
349.795 369.355 319.94 373.929 303.038 366.871 cv
cp
f
grestore
gsave
356.366 354.898 mo
356.366 354.898 384.389 403.574 394.256 419.292 cv
404.124 435.019 423.182 466.496 432.268 466.89 cv
441.346 467.277 452.038 460.195 454.538 458.804 cv
457.053 457.414 468.241 446.769 472.858 440.609 cv
477.487 434.417 445.51 412.882 441.018 408.648 cv
436.526 404.406 394.647 378.011 383.752 366.64 cv
372.838 355.277 355.788 338.144 356.366 354.898 cv
cp
clp
429.139 461.105 mo
429.139 461.105 449.584 463.199 466.901 433.39 cv
466.901 433.39 446.686 455.871 429.139 461.105 cv
cp
.27451 .207843 .145098 rgb
f
423.346 454.804 mo
423.346 454.804 443.792 456.871 461.108 427.085 cv
461.108 427.085 440.889 449.55 423.346 454.804 cv
cp
f
415.135 449.171 mo
415.135 449.171 435.573 451.253 452.889 421.449 cv
452.889 421.449 432.682 443.917 415.135 449.171 cv
cp
f
408.889 442.925 mo
408.889 442.925 429.327 445.019 446.647 415.218 cv
446.647 415.218 426.444 437.695 408.889 442.925 cv
cp
f
403.28 436.359 mo
403.28 436.359 423.709 438.437 441.018 408.648 cv
441.018 408.648 420.807 431.125 403.28 436.359 cv
cp
f
397.19 431.027 mo
397.19 431.027 417.635 433.109 434.948 403.316 cv
434.948 403.316 414.741 425.8 397.19 431.027 cv
cp
f
391.03 425.246 mo
391.03 425.246 411.467 427.335 428.78 397.523 cv
428.78 397.523 408.581 420 391.03 425.246 cv
cp
f
385.584 418.41 mo
385.584 418.41 406.034 420.488 423.35 390.699 cv
423.35 390.699 403.127 413.16 385.584 418.41 cv
cp
f
377.889 414.289 mo
377.889 414.289 398.334 416.367 415.663 386.578 cv
415.663 386.578 395.448 409.054 377.889 414.289 cv
cp
f
371.006 409.574 mo
371.006 409.574 391.463 411.66 408.764 381.847 cv
408.764 381.847 388.553 404.328 371.006 409.574 cv
cp
f
362.565 407.687 mo
362.565 407.687 383.006 409.765 400.319 379.96 cv
400.319 379.96 380.104 402.437 362.565 407.687 cv
cp
f
356.295 403.769 mo
356.295 403.769 376.745 405.851 394.045 376.05 cv
394.045 376.05 373.834 398.527 356.295 403.769 cv
cp
f
351.358 398.441 mo
351.358 398.441 371.823 400.527 389.131 370.726 cv
389.131 370.726 368.928 393.203 351.358 398.441 cv
cp
f
345.983 394.371 mo
345.983 394.371 366.436 396.464 383.752 366.64 cv
383.752 366.64 363.534 389.121 345.983 394.371 cv
cp
f
340.17 389.218 mo
340.17 389.218 360.616 391.3 377.936 361.496 cv
377.936 361.496 357.717 383.964 340.17 389.218 cv
cp
f
333.897 385.296 mo
333.897 385.296 354.354 387.378 371.659 357.593 cv
371.659 357.593 351.436 380.074 333.897 385.296 cv
cp
f
329.885 378.664 mo
329.885 378.664 350.334 380.738 367.635 350.953 cv
367.635 350.953 347.436 373.414 329.885 378.664 cv
cp
f
grestore
gsave
307.049 324.976 mo
307.049 324.976 262.913 323.433 239.124 326.097 cv
220.682 328.16 183.792 324.472 178.495 331.867 cv
173.206 339.25 173.264 352.082 173.069 354.925 cv
172.858 357.792 175.643 372.98 178.268 380.23 cv
180.913 387.484 173.827 364.785 216.932 357.085 cv
223.006 356.007 275.354 337.656 290.827 334.765 cv
306.303 331.855 321.393 333.652 307.049 324.976 cv
cp
clp
185.042 332.406 mo
185.042 332.406 172.096 348.375 187.565 379.191 cv
187.565 379.191 179.811 349.964 185.042 332.406 cv
cp
.27451 .207843 .145098 rgb
f
193.495 331.011 mo
193.495 331.011 180.565 346.992 196.014 377.792 cv
196.014 377.792 188.284 348.574 193.495 331.011 cv
cp
f
202.698 327.222 mo
202.698 327.222 189.768 343.187 205.225 374 cv
205.225 374 197.483 344.785 202.698 327.222 cv
cp
f
211.342 325.41 mo
211.342 325.41 198.405 341.371 213.854 372.179 cv
213.854 372.179 206.112 342.968 211.342 325.41 cv
cp
f
219.909 324.308 mo
219.909 324.308 206.971 340.273 222.448 371.074 cv
222.448 371.074 214.706 341.855 219.909 324.308 cv
cp
f
227.694 322.132 mo
227.694 322.132 214.768 338.101 230.241 368.906 cv
230.241 368.906 222.479 339.683 227.694 322.132 cv
cp
f
235.913 320.148 mo
235.913 320.148 222.975 336.113 238.452 366.914 cv
238.452 366.914 230.702 337.699 235.913 320.148 cv
cp
f
244.616 319.332 mo
244.616 319.332 231.678 335.312 247.135 366.109 cv
247.135 366.109 239.401 336.894 244.616 319.332 cv
cp
f
252.272 315.14 mo
252.272 315.14 239.342 331.113 254.792 361.914 cv
254.792 361.914 247.053 332.695 252.272 315.14 cv
cp
f
259.983 311.972 mo
259.983 311.972 247.053 327.941 262.526 358.742 cv
262.526 358.742 254.772 329.511 259.983 311.972 cv
cp
f
266.19 305.933 mo
266.19 305.933 253.26 321.898 268.717 352.71 cv
268.717 352.71 260.975 323.488 266.19 305.933 cv
cp
f
272.897 302.832 mo
272.897 302.832 259.963 318.804 275.436 349.593 cv
275.436 349.593 267.686 320.382 272.897 302.832 cv
cp
f
280.057 301.617 mo
280.057 301.617 267.116 317.597 282.577 348.398 cv
282.577 348.398 274.831 319.191 280.057 301.617 cv
cp
f
286.409 299.347 mo
286.409 299.347 273.463 315.324 288.936 346.128 cv
288.936 346.128 281.194 316.898 286.409 299.347 cv
cp
f
293.905 297.296 mo
293.905 297.296 280.967 313.273 296.432 344.082 cv
296.432 344.082 288.694 314.863 293.905 297.296 cv
cp
f
300.616 294.191 mo
300.616 294.191 287.682 310.175 303.143 340.968 cv
303.143 340.968 295.393 311.742 300.616 294.191 cv
cp
f
308.366 294.476 mo
308.366 294.476 295.436 310.445 310.897 341.23 cv
310.897 341.23 303.151 312.031 308.366 294.476 cv
cp
f
grestore
172.6 352.171 mo
172.6 352.171 172.084 335.753 186.971 332.16 cv
195.069 330.207 212.116 329.589 221.35 328.57 cv
230.588 327.55 289.088 324.464 289.088 324.464 cv
180.295 324.464 li
180.295 324.464 167.467 332.16 172.6 352.171 cv
cp
.27451 .207843 .145098 rgb
f
386.073 507.667 mo
386.073 507.667 390.174 505.101 387.608 499.453 cv
385.053 493.808 383.514 489.707 384.022 484.062 cv
384.534 478.414 378.885 469.171 378.377 463.531 cv
377.866 457.89 371.194 431.203 371.194 431.203 cv
371.194 431.203 383.502 472.25 387.608 482.003 cv
391.717 491.757 393.768 499.972 399.417 500.996 cv
405.065 502.015 409.167 502.015 409.167 502.015 cv
409.167 502.015 394.362 507.226 393.045 506.421 cv
391.717 505.617 385.565 509.718 385.565 509.718 cv
386.073 507.667 li
cp
f
463.514 454.593 mo
463.514 454.593 471.209 452.542 466.588 443.82 cv
461.971 435.089 454.792 429.96 450.682 425.343 cv
446.577 420.722 425.538 398.664 425.538 398.664 cv
425.538 398.664 438.366 408.921 444.522 415.078 cv
450.682 421.234 460.436 425.855 466.077 433.039 cv
471.717 440.226 474.803 434.066 477.366 434.582 cv
479.928 435.089 485.065 428.421 485.065 428.421 cv
485.065 428.421 484.038 436.636 475.827 440.226 cv
467.616 443.82 463.514 454.593 463.514 454.593 cv
cp
f
gsave
378.834 340.156 mo
378.834 340.156 420.038 354.945 435.124 365.757 cv
450.213 376.574 490.885 388.382 499.436 385.312 cv
507.987 382.23 504.1 381.722 505.881 379.488 cv
507.686 377.246 512.428 355.589 509.186 362.734 cv
506.62 368.378 478.874 360.937 472.749 360.171 cv
460.432 358.632 443.327 355.96 428.104 351.957 cv
398.85 344.257 381.405 339.64 378.834 340.156 cv
cp
clp
483.249 391.246 mo
483.249 391.246 502.959 385.433 507.698 351.289 cv
507.698 351.289 497.506 379.746 483.249 391.246 cv
cp
f
475.499 387.601 mo
475.499 387.601 495.202 381.773 499.948 347.652 cv
499.948 347.652 489.752 376.093 475.499 387.601 cv
cp
f
465.764 385.5 mo
465.764 385.5 485.467 379.687 490.213 345.542 cv
490.213 345.542 480.026 373.996 465.764 385.5 cv
cp
f
457.624 382.089 mo
457.624 382.089 477.331 376.281 482.077 342.144 cv
482.077 342.144 471.889 370.597 457.624 382.089 cv
cp
f
449.944 378.136 mo
449.944 378.136 469.635 372.32 474.374 338.195 cv
474.374 338.195 464.182 366.652 449.944 378.136 cv
cp
f
442.288 375.503 mo
442.288 375.503 461.995 369.691 466.737 335.558 cv
466.737 335.558 456.549 364.023 442.288 375.503 cv
cp
f
434.397 372.492 mo
434.397 372.492 454.104 366.679 458.834 332.535 cv
458.834 332.535 448.655 360.992 434.397 372.492 cv
cp
f
426.764 368.222 mo
426.764 368.222 446.483 362.402 451.225 328.273 cv
451.225 328.273 441.018 356.718 426.764 368.222 cv
cp
f
418.088 367.324 mo
418.088 367.324 437.795 361.507 442.542 327.378 cv
442.542 327.378 432.35 355.832 418.088 367.324 cv
cp
f
409.928 365.566 mo
409.928 365.566 429.647 359.757 434.366 325.605 cv
434.366 325.605 424.178 354.066 409.928 365.566 cv
cp
f
401.409 367.023 mo
401.409 367.023 421.116 361.207 425.842 327.066 cv
425.842 327.066 415.647 355.519 401.409 367.023 cv
cp
f
394.12 365.773 mo
394.12 365.773 413.831 359.957 418.553 325.816 cv
418.553 325.816 408.358 354.273 394.12 365.773 cv
cp
f
387.526 362.71 mo
387.526 362.71 407.256 356.89 411.991 322.75 cv
411.991 322.75 401.803 351.207 387.526 362.71 cv
cp
f
381.014 360.976 mo
381.014 360.976 400.733 355.167 405.459 321.011 cv
405.459 321.011 395.264 349.472 381.014 360.976 cv
cp
f
373.686 358.417 mo
373.686 358.417 393.389 352.593 398.131 318.449 cv
398.131 318.449 387.932 346.906 373.686 358.417 cv
cp
f
366.389 357.16 mo
366.389 357.16 386.112 351.339 390.842 317.218 cv
390.842 317.218 380.647 345.679 366.389 357.16 cv
cp
f
360.163 352.539 mo
360.163 352.539 379.881 346.714 384.608 312.597 cv
384.608 312.597 374.417 341.031 360.163 352.539 cv
cp
f
grestore
gsave
302.155 320.304 mo
302.155 320.304 260.436 305.832 236.917 301.378 cv
218.69 297.91 184.51 283.535 177.28 289.039 cv
170.045 294.531 175.12 304.644 174.084 307.308 cv
173.045 309.98 174.084 319.117 178.19 322.707 cv
184.006 327.789 171.002 309.371 208.983 309.878 cv
215.139 309.964 266.209 317.843 281.85 319.628 cv
297.487 321.406 303.401 322.707 302.155 320.304 cv
cp
clp
183.377 291.48 mo
183.377 291.48 166.307 302.929 172.014 336.929 cv
172.014 336.929 173.206 306.722 183.377 291.48 cv
cp
f
191.866 292.636 mo
191.866 292.636 174.807 304.101 180.499 338.085 cv
180.499 338.085 181.706 307.875 191.866 292.636 cv
cp
f
201.772 291.722 mo
201.772 291.722 184.713 303.175 190.417 337.167 cv
190.417 337.167 191.62 306.972 201.772 291.722 cv
cp
f
210.569 292.535 mo
210.569 292.535 193.502 303.98 199.198 337.968 cv
199.198 337.968 200.397 307.773 210.569 292.535 cv
cp
f
219.081 294.003 mo
219.081 294.003 202.018 305.453 207.737 339.449 cv
207.737 339.449 208.944 309.242 219.081 294.003 cv
cp
f
227.163 294.23 mo
227.163 294.23 210.1 305.675 215.827 339.671 cv
215.827 339.671 217.01 309.453 227.163 294.23 cv
cp
f
235.6 294.738 mo
235.6 294.738 218.538 306.187 224.249 340.179 cv
224.249 340.179 225.452 309.98 235.6 294.738 cv
cp
f
244.163 296.527 mo
244.163 296.527 227.084 307.984 232.795 341.968 cv
232.795 341.968 234.002 311.773 244.163 296.527 cv
cp
f
252.709 294.777 mo
252.709 294.777 235.651 306.23 241.342 340.218 cv
241.342 340.218 242.557 310.011 252.709 294.777 cv
cp
f
261.014 294.015 mo
261.014 294.015 243.952 305.464 249.67 339.464 cv
249.67 339.464 250.866 309.25 261.014 294.015 cv
cp
f
268.717 290.078 mo
268.717 290.078 251.659 301.527 257.366 335.523 cv
257.366 335.523 258.561 305.312 268.717 290.078 cv
cp
f
276.045 289.082 mo
276.045 289.082 258.983 300.542 264.706 334.523 cv
264.706 334.523 265.897 304.316 276.045 289.082 cv
cp
f
283.245 290.031 mo
283.245 290.031 266.163 301.488 271.877 335.48 cv
271.877 335.48 273.073 305.285 283.245 290.031 cv
cp
f
289.979 289.726 mo
289.979 289.726 272.909 301.191 278.62 335.187 cv
278.62 335.187 279.827 304.964 289.979 289.726 cv
cp
f
297.756 289.976 mo
297.756 289.976 280.682 301.437 286.393 335.429 cv
286.393 335.429 287.592 305.234 297.756 289.976 cv
cp
f
305.084 288.988 mo
305.084 288.988 288.014 300.449 293.717 334.433 cv
293.717 334.433 294.92 304.23 305.084 288.988 cv
cp
f
312.405 291.546 mo
312.405 291.546 295.342 303 301.053 336.964 cv
301.053 336.964 302.245 306.789 312.405 291.546 cv
cp
f
grestore
322.956 464.574 mo
322.999 463.722 325.624 383.144 325.624 371.175 cv
325.624 368.656 325.624 362.753 324.85 361.695 cv
324.022 361.851 322.717 362.14 320.928 362.707 cv
315.862 364.574 268.592 414.847 243.417 444.562 cv
259.327 419.933 li
278.788 395.957 307.374 358.066 309.553 353.71 cv
310.295 352.226 310.233 351.617 310.225 351.562 cv
310.221 351.562 li
310.182 351.562 309.049 350.55 303.456 350.55 cv
298.596 350.55 235.174 371.378 201.85 384.003 cv
228.022 369.64 li
230.467 368.421 284.479 340.531 300.084 338.71 cv
303.26 338.339 305.487 335.941 306.569 334.484 cv
305.944 332.726 304.713 329.55 302.78 325.683 cv
300.709 322.695 239.745 301.742 223.401 298.312 cv
266.522 306.644 li
288.749 308.867 312.948 314.257 322.811 319.191 cv
331.112 323.339 343.752 324.671 354.948 325.601 cv
364.338 326.382 367.565 329.277 370.417 331.835 cv
371.178 332.519 371.952 333.222 372.917 333.898 cv
377.35 337.003 385.327 340.636 398.776 345.679 cv
413.104 351.054 494.206 385.792 494.87 386.058 cv
475.37 382.984 li
423.495 367.316 li
410.471 363.125 389.245 355.679 384.784 353.89 cv
380.749 352.281 372.381 349.878 365.858 349.878 cv
365.006 349.878 364.178 349.917 363.397 350.015 cv
360.784 350.316 360.213 351.328 360.026 351.656 cv
358.987 353.5 359.686 357.519 361.901 362.402 cv
365.506 370.324 407.01 433.226 423.538 457.386 cv
434.831 479.453 li
432.463 476.312 362.018 386.113 357.092 379.398 cv
355.483 377.207 354.022 374.671 352.6 372.218 cv
350.811 369.125 347.483 363.363 345.85 363.363 cv
344.858 363.441 li
339.635 363.851 338.522 364.082 338.28 368.121 cv
337.831 375.781 323.342 490.519 322.956 494.335 cv
322.956 464.574 li
cp
f
266.17 310.121 mo
266.17 310.121 302.749 317.808 305.905 324.121 cv
309.061 330.433 310.413 334.957 310.413 334.957 cv
310.413 334.957 307.053 341.417 300.487 342.179 cv
285.303 343.945 225.991 373.332 225.991 373.332 cv
225.991 373.332 295.331 347.054 303.456 347.054 cv
311.588 347.054 315.834 348.957 312.674 355.273 cv
309.518 361.593 258.948 423.89 258.948 423.89 cv
258.948 423.89 311.307 362.085 319.881 359.371 cv
328.456 356.664 329.12 358.988 329.12 371.175 cv
329.12 383.371 324.866 469.042 324.866 469.042 cv
324.866 469.042 334.342 375.589 334.792 367.91 cv
335.252 360.238 340.131 360.343 345.538 359.886 cv
350.959 359.445 354.94 370.562 359.909 377.335 cv
364.874 384.105 422.834 460.917 422.834 460.917 cv
422.834 460.917 363.241 373.781 358.729 363.847 cv
354.209 353.917 355.303 347.441 362.987 346.542 cv
370.667 345.644 381.569 348.847 386.077 350.656 cv
390.592 352.457 411.928 359.925 424.569 363.988 cv
437.202 368.058 478.819 381.457 478.819 381.457 cv
478.819 381.457 412.006 354.371 397.553 348.949 cv
383.108 343.531 375.428 339.917 370.917 336.761 cv
366.405 333.605 365.499 329.984 354.667 329.082 cv
343.827 328.183 330.276 326.828 321.252 322.308 cv
312.225 317.796 288.749 312.375 266.17 310.121 cv
cp
1 1 1 rgb
f
315.256 326.515 mo
315.256 326.515 321.42 330.621 320.389 333.703 cv
319.362 336.777 317.819 339.339 313.717 340.371 cv
309.616 341.398 302.428 345.5 308.584 343.449 cv
314.745 341.398 323.987 338.324 321.932 340.89 cv
319.87 343.449 322.952 339.863 322.44 343.964 cv
321.932 348.066 314.745 356.792 314.745 356.792 cv
314.745 356.792 325.002 347.046 327.569 346.015 cv
330.139 344.984 331.17 347.046 331.17 350.121 cv
331.17 353.203 331.678 371.156 331.678 371.156 cv
331.678 371.156 335.788 345.503 337.838 345.503 cv
339.885 345.503 342.448 339.859 344.506 344.476 cv
346.561 349.097 350.663 355.761 350.663 355.761 cv
350.663 355.761 347.1 342.906 349.639 340.371 cv
354.772 335.238 360.928 337.808 360.928 337.808 cv
371.706 340.89 li
371.706 340.89 355.28 331.136 351.694 331.652 cv
348.104 332.16 351.694 329.589 343.991 331.132 cv
336.295 332.671 341.936 329.589 338.346 330.621 cv
334.756 331.652 339.381 336.773 332.709 337.289 cv
326.034 337.808 325.002 334.21 322.952 332.16 cv
320.901 330.109 321.92 327.535 315.256 326.515 cv
cp
.27451 .207843 .145098 rgb
f
192.303 467.55 mo
192.303 467.55 191.147 464.855 194.225 464.855 cv
197.303 464.855 200.381 466.777 198.842 470.238 cv
197.303 473.707 192.303 471.398 192.303 467.55 cv
cp
f
168.436 434.835 mo
168.436 434.835 168.819 431.753 172.284 432.91 cv
175.749 434.062 177.252 436.601 173.616 438.792 cv
169.979 440.992 168.436 440.218 168.436 434.835 cv
cp
f
250.627 522.972 mo
250.627 522.972 247.932 519.894 251.393 518.742 cv
254.862 517.582 253.768 517.667 254.889 521.089 cv
256.014 524.511 253.702 525.285 250.627 522.972 cv
cp
f
549.889 407.968 mo
549.889 407.968 554.885 436.304 535.721 458.804 cv
529.053 467.14 li
529.053 467.14 544.889 450.468 549.889 407.968 cv
cp
f
319.889 521.3 mo
319.889 521.3 358.635 535.882 389.471 517.55 cv
389.471 517.55 363.639 542.968 319.889 521.3 cv
cp
f
535.311 461.3 mo
535.311 461.3 549.061 426.3 546.975 395.05 cv
546.975 395.05 539.889 440.89 529.475 467.968 cv
535.311 461.3 li
cp
f
528.647 464.632 mo
528.647 464.632 542.397 429.632 540.311 398.382 cv
540.311 398.382 533.225 444.222 522.811 471.304 cv
528.647 464.632 li
cp
f
506.19 484.582 mo
506.19 484.582 523.584 466.171 531.502 421.347 cv
531.502 421.347 533.983 443.769 518.639 476.3 cv
518.639 476.3 513.268 484.386 506.19 484.582 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_orange_bw.eps)
%%CreationDate: 3/12/2016 12:39 AM
%AI9_DataStream
%Gb",KBj27of'*(FT4e1Z31qB*]6\?[,p>ZR&-N\[$qUP`9P2*-q=+CW]8!=\B-:moljUMp\aMO\WG/J<[H:XU2j^\U.YV?n/7&3e
%,p=76L]7u2U$Jifs5dpDs"ub0WjqLVH9*BYe)B.T9D8i7@O-*N[G`dn900MTj5<Tgh^\Mgk$G`ipD]*OC8kBTX<]_'j=6"Wg_p$Q
%976;'V<[M;\s1BF^mNW;Fdt%Lr+rcIc8?8Y;PQ_AQj1<D^aPQMs-E%VQ$fQ2nFp>'?e?jGmg]-43Mq9Gprt/P***faU]$PDn7G]6
%)Z==JbJ&I,Cc(IgB!GP8[X_X^>;e-\i7E#I"&&pj^jkM*a$dp3c*^/<hG'a#$iXrp,]JX[`,6#g)DoTkK`q?EPQ0Tk#rcNos&g-4
%s4c@Us2)PDKTRs6S\;]FY+]nA>>(>!r2e'BU1XLCRAWb'%M/MYXd!VtFM>>`Bh9fu4O8Z[l1gV1%d,'.6.;$PiOK8'3F5TNZLOH\
%D/6AaWG>)OQ:'Aji*R8uh^aObI]hV\jaj>pc%G$Ui*Z_i7fOcafPd&QqYNmi.F0ZTjmec*<"".H[F#-1;@ZJ_N$nI?g#Fbf5P(@0
%bLKJuO(9Qq#-5CRQ+(gaHmDEl0!\^Q.u2XcZrL=SP+"Yi[V[OoBs*TF!(P]DXQWj)Zd&1U3d0^pebhBE:8J_G*'CSkT[)A>nZ5hq
%;;62Q?e1-h2T`fVF8<QVPb]8p5>V6MgbHV%D#+m#';6Ldm'LDW6ej];<AuF^NG9>l!jB^N)T]Vo2kj87PJ=R+6,15MXdXoq)NN]U
%@6h)L'EA$_>Q2l1hCH"la-ZI6X0u"gXoA:NI&^"+nIp8[juH[a^J\_r,\.ko1VlGOFh;mt)O%^@D.1MM#CjlDeP`YL%OMUn"Fiq0
%lEHl'"!!0RPFm:F0($;fB`E5%.Q75R;sbb)l]p956X4Oec4bu`C+7f2ll^cbJ-XNa0b^lad(/$8nDiS)^6'q2MJ)TemC\hT2h.IW
%K8$HF)eE0^H?Htc'E&UDpD!Wd&jb^FeGARBo;>uQh@YsV%Na,6Yl^FY5o6GYq.dHp8jq[s4BKF4m$S=UN3[pE\=aRiBS0JI/!k^a
%=pl?9d#s"bO)jnsUoRM<<H@a8r=I1IS7sV]gocQ>;-SBNlPMToQnp?J&*93Giu\dq]EEqdM8Jarn98=Frq18Dq^olLqE%X"UY*`>
%rs\^;2)5,,\Q",%Qf7;r`KO?O#M-Ki*E2WWY.IL/]N?Z5r<i5E'2Q(;eDNjpYN?oh0DKNnRp/EG4b+u4@<Qb'b`uA;c^u`!<,uR<
%!DEIOh+T:(s$QkGTCII4g/.tqIMWC:o*BlfIZk5b\R.H\Dao7HFW;2W<Dk&.f$\Ni:?f?RMAlT3No&fJ1:;7p.b2gca'q#Q`Bj^+
%YgZLW*D[SLCprUV@&$]lrbu-3W1hiL-6EU\Q0LZAfZ[^A4$qj^W#s`F;(/oKpUGb&LI5'UQ$;iEggqb(_O\^odZU%V*3>?/_p?p4
%?S*DN-o/B7s1!TslSTZl]&.1dU<!Si0d<s7C<pA9SqhB7s)8h(#jlmkk/VKjW!*\6'"%+RY$%ks30\U<EDbCT[8kQM0A6&W+OdKF
%^I+ku-N2L0.p'!n:,qmNh\S$h)e;]5\1W!4$du\BDr<&]WJT0XPa_pi@T.0mJ;I"2aY`,'fT\J"k<P@e]r`%hYq\0@``rY0SO-g=
%Jkm]$j^MFH[cLt&0"0kN>7R</en;deM[%+qgN2L.flN:+R2UD^/=j.tl'Dn*F+roJ3-5m,Ir7(N)?7!5=cJQfJoLJSC&heqc@GgW
%.CH=A<)]kU^Wa)(NFK&R^)FT)esiETbJ[=\p%5WM2[>kiLbq#hN3*X[*@d"F+,U+e'Q'f<ce.^_0%&<NhXV<E/==\KVoJkRc`ac]
%3i(o1;AA#]lo3U\A`?ipUZU``>?B5(2"IgUko>[`rA9l8&+[8EPh+61C_fGB\DT&FV-JGD>%og7PpiQ\4(N0sC!ct:r23Stpt#SO
%4_..oNb*Uj'*1Uem]*K85r%?4MIes)@Jhb[)#kPeNj2Y;<gqdj>S0VQ[uCK8<O\g]0U58Vb_60DCC%2Jo<1N'9kV^e7QDfT"6Aad
%k'>Wu7L>_^'dng1JR1_fYmYuc@5+Fk@#PVN#^XP1<H*,s+=8%^X1UD40UUn_^9\J(0,9uK0QVsOj>E0gs."%u7O.[h*r#!U[rEJQ
%NaG$B&X-.mm6kS*Z[!U9\r/PkkI1:GOjYs2hK9S7L'`'o#n\Q\>QrB^PC3?cO#AnrePa!Hqu;QcNh#c)VEtkfQd(ts+rT@AH9G=X
%[\Akcl8W*3F&l2E,/>lik%0eK\7PYZBDQ5J?9?3]FV0k2#rG"Y2E()AC_iDi*Bh6-<*3Vl2)-I5nM_[ZA7]MY`ptZ+_+$GIBt</#
%S-9irN1[8.nIb=^Vsn,B"@[?'+3$f[Et^2iUF>uf,!D\$1G+2kapSngQ-'_Od8@7.a.*&l)qR3hGtcOANr[CHY5./LWb^^NN!51=
%#_BgOo3A-OQO`qVT9&+8lQ%`5peh]U\(?D=GK?/J9r?RAiKnfY"!]n<g/Ns"EXnt)&3?<g9;ha1T1%"tU>sSY!7RQ;/-aXEU)EjH
%MqSFhSEUWn@jj$U=$2L-5W+?h9K%BYnd]^Z$\(R=Z&-6g&\L'OF6b%N1[F9SV\.C":5brHZj`bY(q#4$Ujq#)kFY2SA[:4'5fo:?
%kPdjL#OYDE=-%U\\EC@eZ6FftLf/2IH]8Jn#c`)+MW.n^*t/`lltO.:NcO*XgUQ1?qddt]LF-(N'V!(b-jEP\laWUf<%Cg2b3*!j
%epsil%\Q.Z`s#MC=RgGEhNd/CV*'2l2$-nIY2]R5Jgq[&1U[!^!b1r0FnQoXAWa#-bE7Ttl)o1`$\d8G^]qm+<$mJa".:Q7:1RP`
%(NCeE,l)(c3YNf37B@q37@E*FmR:T,'/)R_.2O9;0[h4lVE>Y@JgN9"\L=e(c"AIA,ml=>T8O>==2h]uEA#DK,&Q=EPR4[=L*WG9
%AhH\$`]ipeG*[/GU&Zu$)KhR.d\Br@6nV(W)OpM+5>/O8;1P(#>CW,>RVC!FM0,'8\6\,WbNUXN(Fd6P5)JMS:,+m:EMpDck72+(
%IUR!W3("EuNc3Uu23%0B->WQJn]"<sV4Th#N'14]HG(da0jhO&?aF7V2NrM?_R[[6/`piTa4E68ck<BpJ'IkHL`,5fZ*kEh[Jqp^
%Mj:]<jD(s&(3?n`,Zb@DKT=(ahjuZh6pSSeETO/,!63XSqU`fFY>GE:`7HEO7NF>WTD8c=?L],PZrbEK3POV,J`E`@TI$ZFH'aKf
%rCEoSTtXIJs6>'DH=]g'\9Q3L5afIJ/L&@-9L8=eOV"S)Q4Oi0\!DRE>D9iNIokTa`!kaM(Fo[hZrjm81U\<7=S$UY9VfQ6oc4i^
%ERC+%.f.Sl@G."+J5'%kQXO(;J$@qUUo?i`Jn[26\*L,CX7.C_LW65=M*Dn<s2?ho1$LqZ(-d[I?^#s)o@7l`g&TZF[h[l.p/?&0
%Y8n4ec:dbK14fsX?;nrLEqNo5]^.SPSB4`MK*ZA.M^Tio0udB$;.-m`(T7E?@sfsuE(aMB"_S&K@^9FP.VRK9K/kMmAZDQe/6,rf
%V?QR`'9^f]Lq"e6:/*K?r6d6Ys%\(ApQeJE`UVhWU#e95HNb[7r&9Z9%cAQK!S4[/LccuDq8P/H]7F]dA%jbpToV1q>Ffk3D]JA>
%#/=1Yo,V:I`A-706s;"1T!kA@7:^0$8S!W(hA,S$09rQPLBCF(St.g6_f?g!TLJp]Hbe9M]r5Ic&FjfC*PEg;.S6BSeI#F5Ppj,A
%B>iHhg'G8cX*tC6<7F;$llK"V9q"%t4_1gQm,-eU1\,ru(2p6dFl0C(Ji`"s(+Y*u=`sDC==s?ne[f*iXk%QY.q;J^lR[4M`NHQ"
%FVY$.Jg)33cc3+=#rb1-,ko&_\^e@XK9.+oU3_iXmd(5;pa,]:6uQJ3n!MofR3J%<gN^!CR[]IKqe'-in>R]1)0$NOC475"=+.N?
%l9X0pAP^La@()+F>p'2VP$kKPDWr/sd3g;c]D553[+/pmfH(Ye?=LrJm!/=Z3*rDMKcMhp$Uao[f^TS9?=LrJm!+@-0<sPK.NC+<
%!Ifl>MY+q!Uu9DNeOC%E_)'U_UmW_iE@kNqlku:IXO."&45.3s`4oS#@+'s-7"JdpMbQSgQk:.(pp[d%SUCEG9IbC103>g77m2h5
%14$r[/0&0Y(ft18Ic2,F@[[_a(gWM&NEi!M$;B'Ymf.@FE>mm)f:^U&qGLRHBj>3FT;fPHE1SRZJ)BstGG^KY7ArBb^WIY1So]+Z
%o#E1GiofZl6!`$idtZbu;lKSILf\2'eEI5\o.3<)ROiTMA/MJ4eK$@A1\NoF9=4D"ZiP&bb@]3?R'`'FeW4:^(>?u8BZn8])c!)(
%jOkBh=Yq7q#df*$#D=e=#XJ;?(*Y%.b'mh&`eX]?\K<CH/a,/PL%[ana114DdaP.#fs)W/$7sHSO"lb(E9tW4Hp<?I"+H1W0Z8F!
%$(&$(+(J4%GjNJ,r>8Jma8#+*B['eXN65;4cVEf:Ho"iM>:i=dq;lT`nI\GZVRP+]c!iJYQ$]FHo#-!4`DWL%ruJen"^I9)0pPdb
%(Cp*n&ldi8irVhG7]6]9P&'jG])Shm=7T3&lE:-HJh;Jq\Rje%,(_1XC+QeA^s"joT;b.E1K^2\7Z-eNaTu7?Bi_"-'\*L+:T*l#
%3Qb'iDW?<oXrA),%>sHUh%<I\'\*.jfq>rtr#E01-`n$>H9.UK1KXN#P$1$5L/(tpjR-pP9K>_?jQ0'[\lTRW-9^$TS#'Z!8AN0c
%?6Q5a7"c3,MTG<f:]:;\Su(R'[4De8/58l!+[Y>3'LibCfaT=eopWQf^"AX?/6a_FQ,V>0G]$/jc,J7=CsBrM>\q[@XYgn\Mk"p*
%/kuqH/pf3;7=ltqk9</+Rrbhp(RoKN3>\0+YrObX/7u\jM[%+qRrm44R<4RAM+tQQ1[0q"e\YHP(IbFO\igiqPFgcS%(#P6M7Y:Z
%0Yu]&p>rn:Ke9GX0c?<gVX$jmoeCgY8rSnRAqtZf:4\Ao329->aRN>W=&)Aur5EE&S#Wl$^=`@i'$4))B`9GLnP[PZj.a/A+!7'm
%IMNNeBt6]9,eU+h75O,_N(R6X3]#'bk>4UcNSA(I;fbpElB%Sor\c"@:#tas:(7Seraj2C^])!o,JBa&afi$(&!BatR(<N]$bj]S
%D*,i%,3dMr]dFXH8YR0S8u%fdnk4?NVJ5d\EBtBa=fKfKTB>]ne3iQg*`47YRPYRF"N9C#="Lg)7A,7(j#Ud]&[u#\Aitd@,8@HS
%9CT-@EJRHK0rn*<,-caeBOS]Q]A*\^VJRb^@Vp"Ak0J06*]c.sh5op.s+3q8<)#mqlnqb9hB?B]07n";]A<C_<iu/K!jFg5<f/4o
%.>i8B==5$$OTTlaVckO<3>_ZP^TAP-HZAb%m-H&B>q\+^bC66bk#952,"TS/-mWu0:GrV_<K-0m_3en7iSpk$*AE;k5)60O7lk$3
%a3B$F-c*2iD!pDB=.3FD-m5;*[pn;5$cfkkb*+FtUVJSJ_D-pUM1st8$'SID::N=^+-_c6kWt4n2E7[.ce\*-krFedh8N>k6sRWB
%\n_#aj<rer\L-WYI1(L;nXd6EdC;/]3="#%.+9jb4Bs-gq4E+c"YIWcV*CaE6.KrnDUub4M3fp-0d,drMR`l';VE"1f-Zt]b]],0
%=cp%7s3P\SGA-8WADE_o@k?R)cLU#DjTr<6`#$U!^?')Ij1P=h>\%=+EpKm%W(fAj6_?I2YerOQRl`LOq*,]E)3:1(jl=ZcWD6gh
%1//L%M"!Yb<iBLg1_Qp=4SA$n@XX47O%DFlB'pqektZqV;GT]:_@XL)U:MF.HB4J`A6Y>sr`$1c=X(/IPL'rK:1c.h1)i0?M:lNR
%l*2RjOGSTcJe.1X9&hbNQP:d.k%E!4EBQ0r.^Vs2J_ZgQ3?=/b@b8Z8E@d@FQ7A//$g4BG0M\mcRhX%-g;,X2Ji&hJ'&)kfV%A"_
%M:sLs3dt;8m(k5P`b&A^Vu<r2-2bsDJ%_u?G`9\XV<Z;-/61L+6?uM/riXV_OBUdF'llgYKrm-O_(E4iKAW:6HYQOfm4UKEDk-!J
%Plu<Q8pk"fc;WD/WW02TAhJRQrF&Q(9BR54I)f.Xl@hHIOA>g(mFGk3V(Nei32nh1rHu"Zn-ek=GEf$4AKlR#oClTqi\gZ,'A@m_
%bf!99b;V"Mp`"\:a5>g)$TL;t6is<'4u?8)0X*H59]G;CY28LQ<k@?n$:@WE(^-;$'*:;u"JMBqB=N9JK;$qr<XPs<o-t#,#N$.[
%i(8u_31QY$[p;&E,bQc(BV)8mN6A"I4Blmc&)2(u6R4kXY[_c9&`%OA/5+'=%B$8W;I]WR_r&-!/%^MPXAdHhJ-9@?s7,\4g^F.\
%5*OTR+X_BfMOAM/P[gS<%Al8)aiA4@<^=5KS$c`a)me4bc!F?C--]LM/DW+M&sBEcQkl^;N\DI/L-L?1Ct"5@i0ZI\PW(ZYDiT*a
%baYfZRr.6!(3!ZFGqsDOh:%%4>hQ>=a#3Atf*)A=30"kubb/moT\Yu$`sb"@d+;jU#&D5oPtacT4EMC?5;_HH#--(>"Ur!08Hs'M
%Bq?8bl^1o6PZrJh[uS"AbcS(lXYn(J2.F@)dR*BH?4YAts+g"Qf@Ctl\Lh]UflYH8DoSX`/S<HdRuZ1oos6A(oK6?276t`n[nJFe
%4#g\UHt-J6@U:&Gig:NhRhsP'"T9_1^+oAq+nsMsmMg6)R/=nY2s.hai4_\)I:M[aF5NA^`nYbHgt.LqDp3W>mMg6)R/?lPh"M2`
%k?=_E[kR\B.$eYF2Z(1NeFk?gdW79uEdD7_]PVo)^sl#t`5G?nN5mm]#)e0f/DHpa0N@QsFWH&KMI>[I:*!0Y_sbiB+nY,Jq"sTp
%>fgnBI0OQW"CZ:D:[?(fZ7.@3"5fJ@WcgH'AKN742!\,Bo%O5>jl?@PSXi"CrRY?sr\**a:9`sThQ_":U`HA`$T!";iNmg'nW*p)
%asY^P:A+Y(:\hV+Y?F503`F;4b'p1TaYeWCk)Q(6"sbPnB1HA;BF%V?kk"Dr2'AQ5:^,k9Rc]o:\Z/cLh!r0h)fs'kO"-.Lb?V`c
%3jd<>FN,DW<iudQe*-_me>!@-bMi+bTO4[e^[MVnd%n6*9a#to`C^.h4T'O[ckgBX^i-q5BHdEpmXCWn0fi2:eh`^UNeWE8Q>2>"
%1SUE3fEpO59O[$<3a9D6P<n[DB>2o0<m)/lrpH"=<uO(u_GH!(4cE.8s2M`4)#bD*IsXDdFd3oD^F+QGVgssi9#^_pY]8V-OgK5V
%83G`&F/8nV&,gARmGcHFY\i@_HI=[enf%ebcqh4A/g^]RbJlJr_Aip6mp_u9eTY.X6'FGZ"$Fb$l@r^X"n15"St/@a#sm1"!)P'S
%f9MGg<1BOrD#:-Th0SU-Gi_9G9^eX2;(IH0Ej<V@H8I!:Y5iQ$&c4!Rc!18`Y$9P;2tCQ%'Vs>+'$Z,VoC+CpI\GCD-hdL.[FC@g
%WaMRNQ4Sng/HbiJX-UhmJ1UYV?Vg%=rJ'3'KT*[;]@l<R[9Q#N_h#k<S82AOhm#YQg?e6o.i$SD0JlLuXACDoAYU]Do$pXO%;T]/
%O_QbSM>^\Sl.:jno=LnpD0^tAXp0tEMWIm<rCND8O^OM\]m3N#eI.3rIbV/P&jVSrC>trhL4?V]9UsY6XkM^I7DO/NkpK6Q<t"4m
%93[k%)6U^62pML:BT&Rj$6uB1A@L*j_%qb6Z7X8(XopO(?s`r"l(NQ#/CRnJea^9!!+rJ9fF)X[FOIM,*tZ2`S%<rhB0En[Tma+%
%EBWg9%,Gm7X6;N4,6%G8T/cKCBdP_G`FeP6==Q6/Zk$G;g3\O^F-X(4m`\Jn<GMW#=R$0!QDu=Cd_9((Po:YW)6Bte:4l3,0,89,
%=Yp3[J^'e&#^'4=2IIOml9lK4Q[ZXT+Mq;BqQ0,#ASMS-lD7jkTg-$6LUum"Lg6cZ9YeotWK*8`;!FQYDq'/lhS'+"3^t:&q+ifb
%Q\:pZP2XR\(TFNQX&MuaquAMQW:9-Bg%S@1ka5\g!_Tu5V..D>1uV-?GRG.>A::t[GHDi+G%04@oLhPjVe0dB+>o8B4_@-\E'Nhb
%YB!?fGIs<iQ&s*GW'c&7+Qs9(p$5hMNkXK0&()$0V:DG[__hK4'm_fZQ-3FmTRF(H&\79?<S-qk6<Kf"ckF3QG9n"73j>8_ea9Sh
%"Dqa%]*olLOkAGN(c%$9dlkr0OOTPEg=FH=riD\:JQ3g;muc;ZrG$<5JU*j_>s%?>f=36[:>f#V/.>jo%^];Uppe6<O=:L]>cAFB
%S)T$ZTeNI;@CT>?(5W(%f@?(eb%W^FVR`o6Y#O.<,uL`T09^P9,H<.['SFnu*a7>aVR[k<k5LW>PPVR%IJSN*A\+(0L1N5dIp()4
%MTG((Q%B_,"3!-Yg.#OGeThj#Pb(`L<&GreW/0Bg"#/-W\c3BS@uU:R7iD'92U6PL"Jg`3K@LaTHc:L4&r;BC5G6,f?N,Q6.%XFZ
%SSRdc_d2lA>!7.;Q/?a*ddMC(^Rg^q(H],3gh?%Ri(1'bP+IpqoR?,SZ6?,tCPnp3A^:kXHp6S__FYFS-[ubs3XFP\)>NW^+`h/o
%r1T)Y^h.g)rK'F\86m7Y`]CTZ4&`,M/6<43G?upJX7`g[i/PoT.T.It/%a4'rdrgXG.\g%IHjf_jo5a^(@IEj1^9Zg3]04J%BPi/
%`-GCt82c(\P6%4>(%D[L3p#\Xg44UD<gq,sWUk6.G&"BZ!n`H\M`$Zo:2R.@Q]iW!Ld?B*,V/js%^jX!^%0]GP9S>*3gBij_d'O7
%%<cl1SEE-Hn3bF3D`?0<.t47KGDEg/;bQg$"oUKUkqQT?d%adf=,6H^%)N#;.(#_*^oi5UmPO,YJ<!YV5EIm%Y?[n:3$ecN)p496
%jY.L=J"Jho-BA!;OM@GP((t!;%uti-^+LZ`odc\e$#9.uBsH0)R!3ZS<QZs!ekWtTJ[TbHrHeX#*;'`D40W4tEDgV=F+\-.qf8T\
%+-GBGs2&mZdF(G_d%Kc8f0Gr2/NQ*eMe7-kW^gsZ%\Vu6d//*rrkGnXhR=G<YJ\ij>SqWeb1.[A%,#V3M^M9a=4"H-%&?j7WC3_Z
%o,Q*nNiH5u[SK)d>CCc)p'#:8'uVa#h1)bE%2H]5(tPl38sL>F.aVmNP,gMGTsQCs5g9@rIl^CLlg3H/etRAkGNpQn\oTu!q5(7\
%?d@1T)I5Fcd(@!_#bAjpO3kRMk?!Mt6E+!MX]>X4?BU1Wj9^ehV[W^RDfuGn[VrZK'%D8q$s=bP\t2@M7k";&*Ar0a%/i8no4OFQ
%lFar]KfI7-C#h,i!u<7u_/?l4q9M;if^;mZSe(H?FOG!+iIb!m`d\IZ=$Ql!"3DM7ef?iXMYi:CC8p9X<Rtm%p<;E-QB\45Hp<.S
%s1Huip'W;U"8^RU.(;j7ke!c&k/,c9R;fcNIhi&39X,#-E]Bg$HFC$R@!dr]L[Y(IX,m.%>kUoo:J19j4+"-t#ZnV5G-94d8b^Y6
%VT4VXF\c&]<<D8FAG72,0)ZeMP%(QSVn2e0JW$;XAUI;\e<aU(!P8jg+KTpXlnNsuIA>'6h@qJo!VE-VD4hTd<.@t/[js<#.cIEt
%*nH82*T5(1@FM_N"et/dLN'I'hmjHu`4rGVWpf?[09kuGbp#5Ah@A,\eO"V171l31G"blE#%=$@G6j)N5tA_o?iM:0s2!('"TCV/
%;#8k0m;8O/=6t_SM8%tANApoReSf%c@.#8b+p!`P'+K-M/j4oDTn)"X;$4]t=,\;=]l3[fR"o,%_*ApV28CV$4E$K\._0#&OIYW(
%@=-O&EM0d./OZ=K]/\0hY56#',:sB+Qq8*]g/_Fg*IQV056,U?`83R6S.>/K5q"a,jsgOBGS.BcGfN)*\J&g#''[P%!.EC4"5Q'[
%QT*`$hZoi,Lu'Okip[p%QirLj!]69tPf!g;6hp5JOna@m<t^MJ-/Rij-*^H"[2*EqfbW+a!j/.aY(8g7$IofO8XXB+XA:0nKQ1Jr
%mfnj=R.sIbQ)KsUBXO#mOd!X3\.,&%$m,Kc.m/iXQA[@A@,YLF$K*bgXPuWn5>e4i81mc^n[LfN<WJKi_WHZ'UQn'a%<#6%jF_>G
%`[f7*i!;VA92n^A)_*`YXi^g]n4I#\H%iD#^0[lM1M8ejiikJbndh)u8G=A/j?q>p*I6fGOAriD2GDi4<(R0T1PG>;9m"[p2GcYq
%jK-\YX(AfX^T7$cd(K]R4$&-d9C*L;[HXu5OE&\3k'5KsP][97pmo;l+m@1b`f_7M;ls$RlG+2#LoHU'jWHuPH4%Pd;;Y`m\sCLF
%<IbH`4>""dSq6BSW^"122:j%;0Lb;R5EF5-8mt[]pVi@j?APt+-b.c3<i*m5o(D9>Y.:,#j4=Nk@QI9j;].(04a)()l#?tdk0F(E
%IXfMMhXMQqN'+&parPA"o"\f\.NcS"6a!oI-lPB9PGFBVXp?[K:F[<jEr0PH=q?7(>o3>2Nt5T5l(0@#`^6hp3cua*>X?`!ePp[V
%6@s$;eVoJmN>'Wq!Tei/%V(lcDZo&NU,f8#S\C<n.WVN99Z$gc,V[G3aGrhQK*N6!"14j@Z@q't@b?]]V.RG@2ktLSA9[uuZg._=
%.GR"L^Y=ergKh3tZ-hg'Mm@+ca`sJR4C$ma%^>"d7lKp<3u\r_mtFnLYIbAQDI*'+,@W+'jq$bs7XieRlTbo'^D<5Of-<)bQcoYM
%h<5&!b1+H(8B:'DSW,kEb##[sL.,"Xq[*F6p@VF.i3RG^0VfNiiArfjpY;j$2tf;a;")9_0Hc>b+G]V*h'e+HNtF%EG!3:3?'!"t
%Y0HSH3er&hK1fP6jMc8EOjUT"@Afl-MdSWF._'Mkr)0NjHg%<TUL-(0KqNmDaRHp\Y=R3HdMsYWZ7.$2.=3I`:[A"`ee##oa2[DT
%>2R@R<t2rMJ>!i#@@VKMk\!G.D^_,]3t,Z%#NW_4K%@9F;"8]l'PZA7&#5q9c7ccl++3Cn[4s/68ORk`"G8@[IdIU/4W>;)7/:RJ
%?puPC[T0k/@#:CmLs0j"Z]8Bo:D1;#FDE-g^AOnnU/K`E#9-lOY*B%<]g0Q(k0+XRO1m0J*Beb^ResVeg3C!:S6iD6/>',9<URQG
%hHQFu]MZm!)\;?1Y;YbQ/*lY252S)%XDEB7]X(p_jdkb8^>mKFdsRg&NQf_mfol&JIJ%sXanj^hXg-`-UHaHDelT?LeQ&g)c1K\i
%GMDG!VLPgII.f[p8L>OOorPQ,p]LscRI&^doD)rRoCH2?r4K\,.Ta(uWNCg8q;QJm5qAEZ+!.8.Q6%-a17;).oh"&o*]i/WoASMl
%YGoF!jG0d;%JO*&[_?pIrO0Gg8<t&J9676%r6)r+/493TrW)O@F8G:F8XJ"$+'24dkKT!-kHjBfaH&iZ]\*4k^@pRV&PiP!DJX\b
%qd+uk*rX5t't3P,Qee8E;[:JV._LV!\O$[inUAb:ju;n_]D7G-o6>C02.o$T9YXm0Z+.O<pjI>'D`rCFiUqipeU0Q)JU\CN2c$p/
%H"is8brPIV_]LDJn#m,`dbKc$bOriXXjm'\UL+;B_YWQ`Es%`5=$M(::K?tHbDX\i<hDG7YKr)do<`LPV!@b-Z$<MtJgp;Zf8U;k
%3Tm[9*#VpgV7?%P#DXjRT$8oAq<='K=(W:5D9o>&Cooi[g0F2"XI,:+qI2[6mVGk;0<T^OHs+im*dj`.T3(.TV!%H8#C%e,lm)C5
%"]=qTIBd059*5&gf[e!M#<S?O\[=r\H]+N^\;ZD3I&C,G$S8'DgtsmO+,eIOC\"[:UWkaQIq*3a#LB8sd^OaY5AH,&T5Q@HR29M^
%j?uMaelE/ChgVKP%!E'NmA;JC%.m0,%^tl/]`g.jC`e$"-FI"Nd[=T3GK+R60^[3[c[>"3o5cX-qXi%9c!9],_mFj_rggMWp[NZH
%G9aef3B\ei>6"84jU@GHS"C1O)53\i_WT0RZ1oJZISB-@1I$q\2i9ieVlQ`W\[1YBkn=(WI/_$'p']FEK'pIYnse.sp6.GgbX17t
%@n5LHY5j_NZ^-!Jpu4[/(PDA8G&uuMLX#^q_q3.605t4<%:MRD`lIp=2:V`_T\U'Y*k(mT0R'Do=F61XZ<u2mU4]iqCY9-CaHNI>
%FOg9FI9rJc%3M`6$mqS_kD^89$)%[#lLjkoeF@<?FL/DX>Q'\T5CJ_hBkrKronA1Yf6A[6(pR<BStDR'<*S!7\+_O6(UoU]2SHsj
%pf&POF0Je46=#B$<IP(d4]p>r45Xj6X82Me.He$de9qgRY=]lt-GTS$F*[#glZXo:L&Y`eQ:W+b'Gc8Q4SLVqm8"Psp.J[YrEaqn
%:>tb[lC._#h!$,Wk$E4>YI'bC=J,9*k:_<mIC1tH!*B.V]:#po[(X-LJTssg]_\j#X(It&W'*`PC_k1X;WU8'Fa3oU+jBIg0pnWB
%\Q"!XB-/]e?W-d!kDs'([mt.ZEVj"Hc@sL,j&\/*[sH=NEV%)g=,Ncj$?*X!)VOeiB-38ns2^^tk=;NGF88:<^IP:%__3>1B5)XN
%\6E/ii%j[0e^rMYqI70>bc\Vno-%07H2gGgN#%L,+kA6PPLemoZX64>aj]o5'(gS#3J.e;#<a*_+,d1(NDncmq$0r(Zq=\'#<uO5
%aBuX1O7fn^)bK8airee'm71m\\TOE'BH<Q/?`>jP1h\>AfCLMRprL;gp$&B^(V:V$BE.U??CZCmT/%JDHanp.]cg^"Cp2l+caD@X
%`A>b'=a;0Vju6TLD9pr]@$u1>C;tb#OY:V!8G]64YcY[X?_?k-[DE-VV0TN!g2bcLQ8AF7n`SUQG$1Tcps0@"'5T@^^#$1Fiam)F
%c8jI.m6;+NXATkic5u@%!'!D/JRo*bL)IJ^m(M+5`3r[7Xh>.fd>]H[l0_R9T>>m[C7/Hh%9g^\"NZKZ2Q8oXO:bVU>C@;1iIF`C
%/@3oMHq4=0Vq'sXDf?P!-_Zjb6&;`<j9,a^WY6W'#d3kcBsqF6Q[LcshB/3L_iKL19n*=FnuA8\AD0:7E#!Y'8K6<-4+OA+07E@Z
%59N8dip.J79/fCMjB3F:m(D'`Y?b3f^u7)+Zn=lU/M!B5]]e.r7^+_5G1WbD\UF@:T\DufEO='H`(U%@)6#f$Ai86#?GK$t<9XY,
%"_ccYUO+]B&Cq/M1p`p`Ib^$8$h!6OLlm`E\4`!-dOt92="N^d?[Mt^#]1[`lZ8t!p`t"WiCtW1rn'F<45a'Kb7?7+!U4m<Sc,hb
%BdJ,p8J8u\K'"Nl@/1u01RX0oUBg862N$CQf/N:;^E0Xr$gAL/F73jb-`i4W*g+!celnuj6X.g*/MFbEST&L_iG2Z]FkC3XKCob9
%kIllHf)FjVRlA+1@?ApXIVQW\fj-i;?9^a;[^9?VS]`RIBsI50.ikfFs2\6QIslWmi<pL&+)7;@V8K3FHV%QSR?f%FEgH6fCqaYb
%>bjWuDL$*S8F>cE],S'D_O:Y\Y@mo_V/5ghe[D%U5+40A\b^D\s(_s#L'eXYo%)u$N0ag9$Rnms)D;[R(SqTGKY!,XZ!lHs+b.7?
%>;0qD=aqaDiVhPc<1?(c:6UFe7TFf8R56tHhGtEDX07pMC&9WdY],bS\,PJ\qVBr9-E5//24Qk/$C`M5rQjjiair=3-eH?X)BO\s
%Gm(+h/*B96q_5GTrXFrP>Z7NIp.hcr3>eU=D>QnD%pl,+p=U7f%:GU4H-j0'IlHui@a9aUp21>q+*mWsWVNiCs2=LE=3\4Fo57oD
%_lQ"ebiWL%TX;E=_p<dgr;MU[IJs+-:R\VF:OKt0KfR(3TRX\#Y]9[8h?rWEpfNZo[j1sD6nXS8fNA>EAae+W0$4OT%H#VNqQkP9
%*s.n_<XRrOL.CpJ_ihIWfsT).a^>l3qu,95#MI?o$a6HlkET>MYGI"M^UR$fqfVbkhE"2g:Z]'+X0#0=WHW7k5+kKMIQ71<82OBi
%C!K05A5Cs_,tfm1]7.G/BluSN<kn$u@@;X$Zg7;\q0R0okNE)OYc>B=rIG12L3Dj!CkX4nXefC$buS!]9CEho3mQ^-pQW/`Ai]YF
%d/9.[VV#),>[">gJ,LkoA7<R_eo_*"cr-P=ibC]I4^PXBNj'GfCFA!ilUUCZ+0D%d*Y^mYH9[8A6bL"Nea[B7o=Fq^LSV:`]",<G
%S@\ta\RW']f3#L\O%:OZcXtg(2VNW&_:LZR'>2=m/QPY+MN+?)mYBmWqqCA\?Q39L7dpV8k'_FaKXn\6"t2?I9%7E@\G+>oa=_ko
%CSos9&d:JBB5cWB153$CUe#J(5+(pp[*6Oj#:uC2X7r25fjV\Q[\IKdMZ;_!02_CWmqK@tg_V[/6%sCm=GGFTqqh:[H2N*Y$Z,k0
%hYOGJp\@(-SHmXL4P5*B#KZDC:^3J-SilsVm*oj-It&UT?]+@?1K:$;URg+)V`a.FcC2$&DgpS,3<kIS'm\-i_Ie6oqjK;']m%7!
%O'L6HjSHlKosGV)+(_n'`@krk_oH<Qh35OYeGeDN)BLQp?@HtD(SX_:.kiM^Sit>7IG'($)TY*b!FEH_cu8gLiM2/5g#E<u5%RIi
%Aa,BTE%1C)IUSgISi.B-p#9fU![tsu^O#bGi4RC9-A^4N`oc7oq_Tkmn@WMVl0mp[*]BM(dbA`bBD:cTG'4r6g,_n[GPq10T!n=R
%jdM\a&@plRh>)>B\l*qRD?k9sV,TAEl.(uH^if:U(1EW]Dq-LJ#PIr_`-IhZh<jL5l@30N+MZ[RgU#Gik#1lY!&ePJe:En`p9NJ$
%neh9&%%'a"/NmctCtUg]p#^u,n`@dFN=R\R#XlZrlM&#C9)WNI:3uk?88XSiBh?,0&UsD'i[90"+UJtXNGUo'rd(u<.;`:+"^)o-
%pBUFJV[#Gd)o_[b/YI$'2cY.;<UE:IF>c[:]@D;RgGs[3;S+HKDq8"=[BNgepU2up?=3D0aJ%3acF:[Fbc1?sl/lWnq5=[thTu&Y
%6dQ"NInE_eGFp#+3_:[FU?J4VgY7L#^"<[Sb4B8Sd>po4Mq$ltb450sT01Dh^2'C'B!*<Oqs$Ij,PCFT]<Qgns6AQ!Z'FmO?DRFA
%8Nlm[ro%fHQX.ck6e_XUr8@SNb)q1^mag[DjN?hq%+or'ke)G3p<KGMb5,K./8Hn346=HEcHB9;Dgm+@r=kcf!F0]PJM-qG5U/K8
%Xa`;nCkX3cDSL(#P5Bspop*!N01)*hr7@Wj5?lg&Tpsusr^r<0RkB=Ulo9U;V5NMUpE'au^)=r3X5-h=eb;NXZZMAd>[)G4pDtaR
%e$!k=pUSgI2"0jb34nrZ$Il)C#Gu.ZJIZo!1imtF#CB9//VgLg<o_qqQZLi,Dq=4b^,IjGeU"M3h0L26cPA2ooJ*stqSHoQ,A#c*
%`o*NeQ;t-T_iI$?RVlE$B3mcoo0Mj7D"cZH5C@>Oo<)]g[gGW=J:9q)nM0(-I7HZ![Fho"K.rGXA:DA&lDmFJ/A:tLg(e<(XRR)C
%lYFg^&&OZ2Bh.YoiFrR[>%?g'rVX@>RBi.9]L.u.qCG"IBWL$sqI*_SF[*KDg!!Y8=F*!<cj*p=;pN3S(=(mf?E0GTS\JVO_#>;I
%W]B3-WRB'mFqtOKXbVu*7CocFe1]/1WXBC5mBn9GkJKnadpHYC!GVMZ2Y3R+<bD;1m?d+N<(07%AnlYfBtZpn8#:5W5(!8(FU18U
%L;'KWcMBo61h8l$`lNi)UkPm[IqAFtXWG7rp/UIl>0t]o;XHu@SKFT5O=3?H4OM_$L\6!SV9M6#8i[u')@nOSUS[[bgWdsjm]V4?
%TIsEa[QEOZ/b<X3J)C50QHm0iG158seZFE#HF:L^k4IqQq9^FkmXNr-'rd6pYQOfM1J%h3b7%3(<f]-TG98I>%_jY-lM#Z2mc0dl
%Y]MeVDeW<#=T)o]Xd!)s/*Pfq*F+!nnLjjqGe<5=+9AhD]^aZj1J22K#h?9WG71%iJpI7#pg@Z-lFNusp:0bE#)6iYet%k7Rjn)C
%UPXQojm;p2jUW<iICZWJY<49:eGBX4V4[c;PBoe?qF090A=]ieHVup58I/e?TASa:JJ))8<_lqK]pfU8T4FOJ7KbGXU)`fGr"@ie
%.,tQcm.qS2qa'PP0V")=ZA])'BI3!F%3=]+Uo`sZ%[P])CsJVO3gLp-h9<@r+/doUjF'uBm4KRbq,Hn5k!btOIsD"\KBp2&GdVPj
%V/RMNYl!a%mu6_'2fI:8#BAqp@Ap)8F,r62=22ERNRW6_W9Hsio"al^?[rtWXek_aeklZFc@&r9/:>+&H1T_il@4nup#E2)$"35.
%F*QK?T\Jnm_8`h*R:Y8_>AAR<g<Y73f`X+qafk&72D9nBi)KfI;X@!G["bqJp)YeL>BfLJ-lE&/nnl9)-reep<NeR`^>/F<XqV6=
%_\G?/A1q4l(5FP-If<H#ZY?;kr]fiApA7E3qr:oH*&BPqPOZ"b=ZSD(0Z"'td:]KS6r'@,+2R3VT2/H^c5H_Ul^77T?7)Wgb1l-I
%pB0WehckWK:NO>2hR2(P8kM0;*PQ_-gZ\5]ephQ>nE$DT2^`)2`t?CoRat#DCN!u37k3IJrHR]`o;).<^UEe!9fhAgD;fl'M?j[I
%g-AHF$N'+=V!>Dq3`\;6g3rQ"j0!$e&/0B1T&/9.=lFj5boKf6U5AbhoB0A%e#O6C^OJ@q&%lQN;kO%Rm.\,!IS+4YSc*lrjOo7L
%C3;=N03IJ0KnZ7"fm:+u#(*fuq]4l%45%Y>eIOl_/q7ofdcQ[s*$TsnpSG4G@A`S5rq.W4iYbkFo3d!KM9Z9W=e9%!B(]]ri`YDJ
%n^E+%\HNY/q%#6ZI+94V]8cFT_K'7hZuOTl#&*kFY7Ir1Dpg80c/.W[C'Xt`*csL%&Oj'(Xj*'I9rlMc4-ol)b/C=^H+K7sjg.JF
%(UBhGXjH=)=kV$tpplWh]XYG;rA"=Ha%Pq[oD7=Cf&!'gr:p0Sf']SeHfa;b'7e*K9&1'b:@aCr)EN[Os'(!g^4uUap<&#+Og:9(
%ms&hnB@2@d\$uQbl*.F\J,TePHN0r;d!NP'je6mAKU+I]m1oKiPM];okP6Imo)G;joC"_]lS;GXSMO^/DgqN@%+[SAEkh$WUZ!X_
%9,WBi+_-)G'Y]]*FV[.)m"I=>qfH$/o.VQarPG]jkKVtppTOe?hkBN5d;(iC)PW>N:)"!tiHP\,`Zk>AQE[T5qrI4\ju%Q1Z!F%C
%_c4>&ms?GN[k`f*`;K-iL3<ur)4T>7oR7n3k.huYj*).#H]9+ss8?#Wr]blL12.X$s6.Xe_JnuTa*)=UJNk^`2C*`K;3rA[e2@02
%,(9R@Zo$)Lo$((+FajMA[G@XZfm6!:9fEBZ=c"ml4*K'1AkPo\VJ@K2lfq'bi\lG$?=HtpQiWX=O1ViU4)2:WDNcU4@CW4hRsDLk
%oV>oAE"';e+I]0eD-kYUD0f(ccfX2t'6M4DWN4EaZ]c`FR:['sUc."j.>M+OWHm:L<PpCMknuhNY*S$SRiUi.q?^Am_]:7A]0\D;
%/p2;23&h`/*%gD!SAOjtM70+YAR'gmf/2^L\oK*j6W[rrNS<#s-!_JJKJkc'H(Jj$jlU[pd,[4B("O)K<Mq8d"hT[kl<[?j8n&bh
%bj-1?8Jp4tYtSF43#WiUGtFKLA6N_?/%g-QJtSNDeMW^9BYihPQN5]FdPQUt+r_HG'Sal0,S=='7Au3#?Xd*Gh)0`)1QoVO=\TL8
%dD97\&_a/`/DJt1:r<HE=e`j=,j[khnDL6>ie)snk[7=j4m:V>W!K7WJgoY`B_+(9#eFaX:13=$,u(*:g(`\#W^=V^qXG`F9jqdg
%-*<tT+[-%W)IZc.$6R-Ipn6RH7R_8eJr();%+(sYp^h`WG!1?rna1<t?0t1heWbS=\TuG]m"0uX&l,q:";CKnLB1,VG\7\@.)uOo
%/tj<U.ObZX7&]Hg,,ED!#HbF<"O>+U!9&7QY-CR8$r$l2*%OuY;jVjNK<qN`.);[a=titgWUX)`1n?^c@&uHji.#jB&HAW_Sa3]8
%"dY)%'jFrQn%HNs[3Q6d%IQBeaX[PtLuF3KTKSm2q&=L"Jgm+Q:g:06NHCnL42EiFiX5+R0]Ca%NbjCVf-6M*LYE.V/s7r5[3S$G
%f9@cd`[*bK']J#*,Uq^;_<-HR!"s$+#WN""()j?dMGtQk%7f+dZ7Qo2.j,j.U6?I_6Aaa6N);Q@[8OLd)"-*pe7jXLF>[$!UYSpf
%'F;M_QI0uE/-FBF3U5DY*_<P&D7!0M"]ER]WHnU3cn&:$6*o>p&:Jo8cA+tj08HSd-3*&qG#qU0p-NV^g5utb;lG?Gcu,.g_Z(3/
%WQe:=C/T3<^c^#ZgaKBC+rd1i_3,Sf>h*H6@Hr+*Z6'N7/\/Hn"^Oh+OK1r0!Ni?O>nPf'WuGeS?")U?V*p'Q'^RG.6#$d9hIU\X
%c%arbj!cOkL)[KKI"7q,>Za=Ggq9UEMR4^SA4`LAU68GYDB!aE!]d;5@HqN)R!5&#7o&:'*CjPpFkU-=D%9?UgBsJpU4q_0F`+g,
%T=4I0H-CDF[&&(p)Db0&;FfdSQ3"e"'JuDcPZWH:WJD/Rac6^lSmf_f,8eVX!KT+fDEQKmZ"#I./$Gbs3ef[NO0p+s(i7Q2edbE3
%e3#gS!RrT3FOY2M7u_Z@\pCRqf4ZBu=6,"C?$931LH6]aX/kOqCUVjFQ%l;QQ;fq5D*ht,fZ)XI(6\=W4[QIgFB.$HC656(KVpYc
%5fX5XC.P0Dgh&%R+LI*\eoKL.!+mc@e^7t5X35R<[d\6';]E-u)\%PV!Bq26",Yl8P1g-Ic#QiuPLkiK,X)oFJA_as0^uhl<_ljP
%88:7lBQ>Dn;r4@t_OEKL=XDdWUc9=#"m@cXl@dSQq(aCd8;d!#/[\H;a_FEufT@'.]XkKrYN=n`2eWTG);'colg8*O[Q4t.#@3l#
%+NINe4,Of,j+bXpQ'[3s(YR=H!:k`jn,e-Qn8L$74Z-ec\SZ[kW$u!uP";9h($r(E(prQX5[,pI=&e>eoV&=t6,O.S+D<FLe]kmQ
%1_`,YZYa0,DObJkEkl9Igf!>E%%r%b3Xe6<%Kh\i1u0@>*utCur51q#7GAKK92>QGc;$De2l.5?/4%9>Z67EAXAC]efVXFm)CY]Y
%Y#K5T1fsc&V1k-6PS#%.Uqh1;9/0#oju,1_Y>YUeD6/<hOVhD;:E?78B!Of]24%FR#BEG3<PY?7:$Fi,emd@=flJuL^>\WsY%'4=
%!RM%Zkt/e!6VTBU:=aMMVm@`nd1_7NZZ&.EFr\b+UN&N"rLhE=bL*I]Q9J-$#<Yhkl,^*69sZ\hC?+9O?TY!WX)O65-&CXT,d:B"
%&HOO3CIt2-bMaR*6-_LUG$)78&AJCG)R]YOEG.rRRBL+A)[JPNYsH9YW#aTi%829efp3NoggjU3$T'V(*F)Fl\i"1uT^)oHNN/<S
%lqV;+5QI\EiKZ3^[YY.FK!B(m'BO"c<ZBg6.qq&Ae@1*m&@hi(;)QhtGD/fAa&o=V^C3gaI1.tW2&aKuSjrHS"3Z<4!Yb`L10=c<
%M)no#Wr2o^2[kJ`&8VMq`k4CP2_<FSiUEnn_t>;19:&X@9jIf:=Ls'T3.P)j6\75SDPj6d%cB!q2+3L,#@*ZL>Xmjd8GfcWkq[t?
%_72TIH+`=^,6T3W)C!P.)K#OKKI1+*5j&p;4cW!>=D7Rmd[7:%RM)_e@7r3]oLW$BU(9uYMe<.fkmm$G[R[n7E<ef3ka/k%0Q@27
%6^,A%1_#YN$+eVW4?@.3XIU7jikS"%80&XA#+M!;Mip@re=b5>Z/KGKFp_b*/EqomP><X55\E!Ea<8Su>7)L..06L_V?@,-4sLO[
%':((K#NcB+,U#ko:J/3i-IC.nM0DNY0;"mVjP\XID;F8g7qgX(Ja=Mo'^PrV9u7m?J4m+nF9cb,.&:ua\I_$fQJu-l:#_s6c^$2Z
%2B_Z_'^'e8+kVh,G#PUt@04JYJ#BHN;A1cQg]:M*F"+VG!#kBQ$W/KqBhE"dZj'"!8J4Lm_K7/&\X&-r#*A@'m@(<J+hDKc1'dL\
%47UrMj\(;EQK-A301eoS*Y,9hUTSR3`$S<cK)K-dgch=U"AIblUF&^2`a]I"KT_UZCn)aj[)(uQa?k%Q8I20A6(8?DnN8hc6jAJ5
%!,:Y90&0HAnK:jtZ""0WZq3U"c#Q*E%[9KY5?u8smRZ=;g4X(BO%Z7c7]Sd%TRd-29)`5)D8Eo>CP>1DRbZF^G"[]TJDa!t_hCOP
%%;q</mZ&FoE`g)32B@Ja[+Qjejjl#MS?W,@R1l5u-P6?&(\jM<.3Lcoq!!f:aD_km(X`_2bkBoX/D/]#k`-lCaNoip5g?V]kT8(l
%>7>aq_;`C'Tc*VcaY@$?GpBks?.EK=3#5LA:mZd=`7gk%L01&&,tK>P%k[n\bMuM("WA`k]hAMN!cg#+=5[RS=%daCG5^&[\8;j&
%UI5d3i[BIo;Ricn.AUMt$k;q;Au'4JGmHqEdtR0*$dVjV$P&d>RP:UK0qjdX5kYSi!gDA\6jqX#!%k3qJ[*$sd0gBRJQHl.D?Kk<
%5P&j(RY(M,N\K1f'6>?*#e6fbD.(OV3)RN@*08k<1..PIbG[L?'#hYGFQmZe2m=1?%Otl-<6-7R5u*/tL+$O1!pg!!6/.l&4NBm>
%8)ASs,:s3]Q>('oFiMNT-X^hfLQG6,e#Aa5'n@X`VG2\[<jnY-IP_bmiM8>=c.ItY1nba]>'J(KNi%DG9!<m/cm$9)D7GCQQ,Q$0
%+]-O4`5!+mPL!J]a@UHl)_#ll).)7k+I3>Y[L?h0^j5aU;)Eib!_>Y%O:'C&1MdriEe#VJ'CdL['OKuPF_mbQ8OP)d!Ll'1cCTHC
%#tQ3E.+)HR+ALe@M)19Yj0#UF@![W'TG0QtOL*<2fE>$.K/tG<4/autL]r<N_dF,ioFiOEV(IM<C(g-blk(P<o@Pi19JeA`Q,4;Z
%k!u3g3$t=$"os(n6V"U!YmGtRJ]h4*>Si,"4^JQ.)seSo-#UYY&MP;b@P6kKP7"M48hq6I#'0t![J8N>;LpqGnOS/Jq?6*42B!sY
%q-cuY92O>I+pBeaq,X6)hZOlKE"Ojq(b[#Y;(j7Z&Xls9oa+-o.34sdGcd3UWYlNE'$-S*W<Ml._LMi3&(H2*1kD;/rW9VNB[\m)
%iagjP$Y:0%6?TSEL#d:8M0D)mli=gn(PfUg49b+[;"7(deQIf]2A0IO)n]]IJb^Mb/D(MQ,mVeZ=5-8d0"H-bjou5kE1;ru(#s6O
%i0Eelc-3&hR;]-aJS;WsfZ),?[9XPu(tu;N1sVu+,FKVX!\FlS!E<q3@Um4#,GIJP<Eemhga0(_N_nZDh!BSW@,&ag@?'8<7g=[;
%NggJY"/-UO.,*Z5d%rici&c[e.K*49GtA$4PWH0QN;K9B:$+Ue4*L:!WJ*5@XT:gR:pS+<8"@C,ksF"Tetm!1-+h&&cH4L[UD/-C
%Rn#U+P![8M7,+8aZb3jS<3()E)VBQo"PKW+']M0RZG>sT3"VeKMOGu.PX<Lu$k'Cd,Zh+@;[.+_FN4gVBAg'N!:<oUg$XG:jf$!V
%Jn+PV&Rh261F7m0g!AL`C1a&rNa6q)cmE8s5^0$d"AS6+:g-T'VnlOT[qVZ)U$sDFJSh:5G$8Qm)02e:GuA?Gj,3Tk)1n,c(,8)o
%]1`@].NL\"&a(!G7MCbA;OX#6EBgBsOm.mRRe.D4p5gG9;_isH`ja/)+BJiIafP;HRg$6Q<.8++e<H<6+mF:[p%/s-_&5C3._fN0
%dc,B01`Y"Kh.)+g4L+BX1us?1O2nSK8BM#ZK\PL+RjD&i;K^)tV.NPN-kc[S'#WcWh%S<!YW^#u+S*71;G7iL1^iI&^kXe3:bK6)
%`IKj6#0s3m11_@-WWl-Qd#'Rt1gN8ok+L]?D*W"LD?HljPH9eo=5Xi(?Ob1$jV^F>-=9f\FY/CA8rk,cl,qVMF[KB.8PNe_TWr2Z
%_+_SDFR7@dZTj5tKF@'&Ood([0!ch=N9--6#Q.i%,7!W_:BDc:Z7V:]TV:JM&UcsO&7fmmddI:N'9s0#&hA'E(3$R4#(Y1V+=S?!
%#R1u8Li$n7fPH7RK=M5oTiXm"@6c:[]?9qo5]0]4/#2$k?rmO-<"3C/UtSDYl,]8d;YP"g8(<9PT1((TB-:XdG9tU,[mR>8YmFCY
%4;.S'?l(#Dd<;Am8lq#CEBs=U1tM%Vp;b7u!2KaK-B6,m!$8K;%16Salq&GT:)a-j2*4@CfErhJUD*]\fHB@,:kB<2W6594(Uk\J
%DJ3'*A^isj6I9e,^+<rmNOZ(CWMBQ*6S];V2)ZR9<0cCmlU5'TSQVbM@JZ-Q;dq3]RdBY_#r.\\TFl=@f3d1=`TilMC*'F)UqBR%
%!VqOCF+c]WU]fa(*-3eo]8Emid)>+#):QRB&t[7Y61$_SI3EH`bX(l^&l1dm4_('9KT0(K.ZI"Uo^H6",eB(bKX=VEMEWgS[o&^V
%)9FUa3@\E]$9?m.D2,0=:QV(XQHK"g]ofimW%F7GdVd#hO[5KD*C#/R)_O`_c/U^G;dAtadNIU596+sm>(C\9'GO'KkW@M8\M$6!
%@*"UK$dRZS_#m_p`KVloF(F?q7\`nM!rsT(24:ql%R>+cakS^)8>e24p=bn!JbpaS3S5bpRF)lSct8FC.@_`[LD!uWoIlmS_$c85
%2/EZh.4HPC&CR!`/BnK$EjR9D:8lS`'m$+/NnuhB]jUt04+Y)OE/;FGo.p3_7D+`6%s/Pl(dPW?T.f>5a>T7HO7Y@,2(u:SjK'3D
%[5]DSPPH%<I*fXnEq%7kU^P]'j^:d26-g)<8r462E(4_b;E?CnD&ngoS5`^Fd5jA^.8ZfZCfLd2!OUPHDP[&t.qffbgR_la+@)`p
%*X/,$C9rDJh>B1:A'?s>FN``%"ASV9It>.8e$I`Lbg[t9>T9J[UGH*9%B1R"2-qTD#ZD>/gZEQ2^W]NkBS%A5f2QD.hK>)BKYkrA
%T7$]dOH+qt&6#e57?_41(f*tgCPo6Ws,l:D18>=nMQSBhs&hgaB7^[a"s$8eQCd0-+S3pA4:NU:+is>XU#(V'*!=9bX%Cd&DBB;m
%.td(,X\<&lngA#"Ls>osdKXf2Z@_!HDuc6<f[L<:./($p,h-Cm5S2s@rBg0%?'.XH(sq9\)]8aO1f#gY>RiQp`7.%IaiFMZ4P<5!
%)@sqM$='hoLV>o@0t'YakS.lQfK(B]3Xs]g*C4"4e29e_6[_T2*^$#"oJ3cq#XQO#/X8;Q,*uCG`[FrN@3R;Vl-uRD)aJ>CcD+t'
%MtL$]KGH/h4%r[r<=BIYWKZW7U-<@m:oURu#36F3$_q<S`FE,N.s'%n8F$H`D;YBlQ^=(H8:3OoWlP&_ZLl$_0j1#SUo5h>0M5Rc
%a,^k$`UT_AAo[`>d92oGPkZe)0N*Ri-Kl,<L%`ogZoGlMEEX>H8u*6CNteY6#tBg'iWLLFCLMhB,.9>E#VfO'5>p!s-5[nDMrR<b
%gsQ>#`,9RHRn%C2FMIT&r\-qIQc>'t_o;/@6ucr=#]X)h5>ibn-Fe%HQU[#Ic)'qT`,fYjbp0f?ps!<[1r1S;>rf`\j15kTRn%Y`
%#&Y:4Q(r7=h3A+bj7obsJ+Eq!9e]1u=&*`+.'K0!k&F_L")]+C,p"m8XB.0nRmqa=paGZ=@cF.NHte10@_O\8-rF=aE21@"8O/=L
%q5"BeM#EKo1.q2*PcRaA^GNbT&R\Kn7u.20W]Wlf=R,01NW[c*;'NheClAu7`X,+l#1E^M`.N&]^(FfMTjLK\IMa@\N"_-a(FCAH
%PfPO]T;0>ZEIq&^_pX.OH$kua&0jT!aTXFdN**YfDB:)N-dE!;@N+,W;N*i!&hB8sX.)V;EIs>4`H0(p7>tsY#Vfg/5>ouJ-Q".I
%N8mEc*9.0s`/\j8.+)NEh_0FPm3>#\@JjdnA=R&'-o+OO;B-Q%kSm*j+)W,m`o/.2PAu2:ilO0r8.fF'@&0/FI`-YfW%nf(-*BoT
%gcVknLYk)"9]JX!0%9S-ila<1PR'()^NkbUa_-hd1Q<J&c:mjl8u.k%\9Y0D0&R#_Af<m+]GW(6.H4#7N"U1Y/iZJQR3iasmS"7*
%PfPZ&hGIb.35I#jB@8t5Ld0qp;'O@bHb+J2)CH@N$8!"6)onXD"!/a$9fi%tZ08aY$5Pdo:K=E["=Qk^Oq*8FDn?Pu\Ho$NdP7U%
%7RL=Um`=*?B[MngNp7't71ZDNqV!5A2qb2Z&=--:Oc-liVV%$3/+$?3(Ye!gU*prcKrOtYa+WrM2j#Sp;aMta4eXhoX^oM/#$k]e
%-K3gns$,J/fSC%4):+Q)@_3I[E=m\V)q!h?G,RM;C1Qrr]I["=-qFI]1hd5g7-1S?/mYKa;b_!V,cRa+OAH\(aAG<pO4J?(MEHo8
%%Zf`gk7Z)T)^3\Y<LTjOI>pp&:R8b(?%shjiROWsbKJU6FHO\EWhI1]fX]EC0na"/e[5e[I%MsH/!)$!\S,Y#bon:*8B=7g'l@Co
%ADmY9TdtMQn)iVm#05"?JIW!.P*]0)R1%[4+=j36$>NEWf#\:H@#q:%-Kg9(IW(0\ishc(6sL9VBVVXJckKc<9:lO!odL:V='RXd
%*(BOr%lS+EbBF#na@)u-M,?*IE\%P!@iZ'Q/#,H4]al&=)Dt\gG4g*LE"LH%N;e'BWM3m[@\15T8*.^B5pG.H#WYn,n5)l*8jrb]
%jDYkCqms"kN$qjMFU:MW7K_#H7]HB#QTD"qdk!I$9B8I#A_#$(;rX'E-Vu[!>[A=[U_I;O"s43KoGsqeK<n1*45KtF25"-qQ=*FN
%%n1^kLleZPm)^J0S,Ho30t-TRS6V'YOi7o0N3#t9Qg!0k(H/\+DblIQ?Dtj1,[7INESKa^"9r%OQ[S?C3(8IM"'fLbO@OuX33\!O
%%U7cEPAlD]2Gl9\J0O`UD#-C;]3Eh>N_*Q4p2CSi'QBfoQSJoprLfRa)f[E8glm:%CaLX,8PuI_\40l]P;u&,*7Q=KU8B:9KW9k8
%+/*2qea@.O![Z3*=d0MKDGgn11Ht:d0]fp>YR*<?\O#G28rkIeR'pDcVo,)gfu-tCiXDGu7n^DZ[C/$E%X"O36=)jZYrH8Zr]fNS
%2X=#kL5^nXWR?d*g3C+X.5os]"o>H_UC`ge^k$CO2hJ'$[S3NlAj/hVr'r*gV1P0fGr8S8O*(PT<(@0&:e,]Y\O\-UOeY=BE]&T!
%f]-?nKfncOCG8)u%ssh>,*#1]$#[04QH71#i=]m8LGO[i>b0ZU.PZm"RW:Y[Zf'UkZ9E->X,\OeeeCS`:'kdC(m'Z$'e57WbW?6W
%aD7oiZ4*%X/].0.Y/CJ\R=PBX/mN\tKZR8'=3Mjt%Z3,ERF>W(OeRgVgNp.D@8J`dO$f+i:0)G4;ra?Bb`B;LB:C4u2kZLhnLTdK
%d!NI^?d*@;r=2gi&Aq+>i]n%Rcqp`G-n1?$Wd#k*IBj<"2uGmq"=g>i^iP=]d-53$]e<$U_kB==aBib"&`d?,36lt%7=iEj.nGUD
%be:>hdZ,b-`,pg!O9^it")c<k)EFVa(eL-hUYRDA?4@o(RZNe8D%8;ocDaiCV?glij:!\7&])<p<G/%sn9P/4Yo,+5GX-I/Z&:ee
%Wmre.9PG.WoX?MZ>aA//.E..P9WXM([:N6bK-s#WZs:DdE+?=JJJB!]iIZL&P1?Sf4^,o7e.F0q8A;q6BEMbFAFX-?XX:m$18#+%
%^h+ZG_8Th?WaY3j#%0)PGmUP=a]c]QP)0;l@Zb*<*%C#hR)hmee^1XX>2H+:82b1Q=E0\2"Y;42M(mmbB@BlC3YD:m.PZJi.>K'd
%;Y&\.qC@bL*/bOr"r;AKq?5rI?keQ_!'/Phc3_Ki+,CW4kXHa&XLW!M](0*3-^<[YH8EZ98Y3]t.*7@Ti+S:UB]sQ4j8qG3QFM`#
%9K:u^/4qJRg;8Ro-AA9_M-6MoR+)I@.V14C0HK/:l==2K+j`RXg7.$m7TghY;)qO&?rG@[EJ(lXD+c>gc3?)29ibAJU3e"M4_2!f
%nd-i0kQ'We[>p,?CJ=3*Y4OYp,#PE^(W$T6]R2<2n\JC"\sT9`g8=;b3]a1:0WY?IlV)3i.#a"C8mP@:,1buT5SV!`3.$d6PH84q
%.4WIp0%Y'=cG\r[kRI):8*<dUB$SE4>(W9K5e_-^G'R;h:&\Xu>n7[%i)gguMq*68'IB_sCRdLW_%PL:+"J`(@A'6u2(583Fs*dq
%4J>]=M-!5-(][L4.L0>]S(&Si3dL)$Z=m2%9O1s6;r/?=83+m`.H?W:8k8"Q"M7R0C2uof\gY)`3$n*_lkQ58Q%G6#"U]3FG*/h'
%NQLR"E6:F!5Trtc(*loq(R?F6)(FX`693&-L&>%kP:rCkBW,G)L7'_C,>agPV;!-kb.KT1j$5&GC<4%'8q1@j/s)26k-[1+HA&S=
%d.4%O6K//'jcF<DKrETDdHR*5a\7P?_OWG!U5F/@n.8U8cQ/Y#'T[]0Sh_snM0ZYNBS&EM[BHg4W?R5s%a5=npq`tYKtbcPM'hpF
%,@^km:HmBdU7Vp(']C.Lh,aWM@u.,d:a3sd8cZ[J<=L(d7o0?BkM8oOOQ73P*M>N];%s)rV2qJda:l>!;UE-br=f@.oVed@b[%fZ
%EZc$KU8\A#pF$A8)t&/I!l5mS9d$Z1;%s<*BW?YFm[G[6iR@3p)!#C$;&SFthcslWV]A?GOAOh>E<q3QUHD(b*_CdA@,G4?+L%W@
%&<b+QX@,U`hhOO9]#@:[YJ:)m'0C\B8;c9=;,dY-,H4V/1!]M);f?JIg,J-:07_G\g:``ig%`N6*g+b:fQ?p'L*"4Z-.XNPb99VR
%Q-mSFJ`Q-lb@YbPhmClp'RG_8)=i,=6=Q,kND4lmf=goCJ,aZjpKmo,jYjkiK\nHZS)5c;j^_*GZuj_Y@66AQF%VQkR0,(V(iUHi
%N@,9j.Vqit9,+r#1T>CRTJ)<X,39[c-fa<12+^VP*)e&WZQ#H<R'90JTdu4;YiT)D5*O.N39/eh'J#U@:!94\Op>+][*RjX$L-7H
%5Ui+nQdb%:^^LF1$2nHFehd(m/#@F!1+Gp-+8NSWc:s.^!4!#/;hCBl7o/GZLkM$mI%atIC5*V-LJ40I!t/8Th.iJ(:S_V-E?NK2
%+K$GJ2jJo%o!l!Nj>0njEPT]2ICB/G!f#DGAP5tS"#7fG"^qr&+-_A9B.;0OPj/2N(oH9^o)jBf_ZdnO<0jK)Q1kl3<]nNPVd)>Y
%<>7?Ce%sXGXRfi$OB<A%95b=H0`8ut4(IeD$GY*Sh*(qls4_&Tb8TL?fk0FuD!?$kT5U"hX3DW-melu"IrL'N0GLt%gB`t&AX/$H
%2b(B%J^I=Yhk`Fsq31qZ-VPjZ=!j_Q9\.4jnNYORi7F^o$U^.A6f3.YfZ^!)@#PLuSLEEUfC-%GFik2j_$VN4HFuR0\>IL&(V4np
%L3JY88)/]Q=o=WWS>8(\R3_$Q0"m&TZ2hXn.HL[84Z6oa5b/R#k"&jdYW;TNTE%,X^7E)1TXK4pe$[`"-Ye3/Eh]0SW`>kRiR-'%
%^Tot8H#JE-[c<]R>SQXY34>_5?Bb)>cuaEre^IS$RWO&!"l(/Jr<Bog;Da2$a\\ZXo9U=2QIMQ=_t*2!moG2f!uS%\%:ii^3X87,
%"0Af`9`$USbcQ]SZ0ABamD@YG?aA]"BsQ;8&`Jp=S'mQaO-qM,6P&g&bX^Y/0pI=3QDMi/]S$a:N'kg)#"P$Vm.AkK+VZlUf5/n8
%L@;aM_2`G9q*gogE]!sAgX^tGXt-B"-At1Y+#-\hINnq:TqFlnW6j)4<fk3=E^e8jZ%7Yg?;F0'HD*ee6GmA+KBq@YD<&KRUp5_O
%"#UfWJH#e`+NQ,+UhNS2.q5'15CXpB!]DAI/NU_C0[nt(.tX3h_*:gH@?,p$+$C-F#0W'I1#OEZ%0i?I1J7WjZ/*%D>K;I>4Nd<M
%C*u3f?uj7`*_T[aHr$pS5]([Ui!.^YBp6D:b%F<p"m&*K)<5=.R.C&"Ra(F!AQs`*1fI[p0F0RP'^2aY:iYqnD\j(h^U_Rl7;o'M
%%7&V2N"'('<U^kNl/7q$-fNWDWY"_[2DstSP%8$#Ni5C*'(7ha)%%D,_D_4t$DBh]*L&/]TB.afD#(N#;DcMbn$CPqps:_J=VDu?
%@@0qP@h,K8e51qkA3K1/+A3A4ikeJ:l"MsYZWR\/n.c,?mrgBZf9U=`R5-=_T8YHR1b&Mn`]V"4`8VL/U]hK)Hn'NCLm:QQ$M['9
%5&V/H@=KqmLoDG1ik]C[P_"m<Q*mY49aH@pgI0un`m<=XQlBDLg[#b3D"S)X`"a?_T>8C,k.X<GXH;j\FTKBg*tBO8<.6HI9[?Mk
%HZqLZ1S3jBp,+8:jK'#:X4ZW1-qe#L<<;/"'2h)kIt<Ir=OI\sVqIlrTs7B#+R.\PY2L%9FPZqYe0H'Dpf/g'1\a#`Ad9h5>2qCT
%`e=\g&Xp9_4^5U"<:gf[H=r'^:DnQf2<:(D_@5uc=,qU;N:$mr:3%e#:<kO\cNN'A;Rgi"7LY7u3@i<M.LB.1Yj"S',).sgI&0=#
%CP<US&PCq)P]-,>Fufa^_D&dJ\-A(/b1g[Pk@9GX]\gXUnaQss?6$8uD-?WXOGg&:8i6t5Pd&%3.om4.^rN2uT)M8BRqsm?&j0=A
%`6U-",gfljr=LMQ=1NH.Ys.qH=4^2c'c"DM@OM7"D!%3u.Joph)&,8RL%6D9GHMoAi39X4#<]RKpbf5e-so=;VZ02a6TClsQh8.N
%9I+&/K+7d2L,=[Ia)]!?Wc_cL%C4im%RCPm35W00PmA*T_4qZ!4iXa;WZCoo/]3]X3Ma^(e4,/:e;\HAoj.td;&q($p!-rGK,nO>
%NUb(58nl"=T*DJ-f=\rpJede*TTfr+"fT@:moF?A(]AUcq6<)8h[(\s9VPL:5(]b9Q3;e3Sp@K?IWR$X.p&21-jA(bbXA-4oj3=j
%WgDhh)<_YXX#^_N;DJ4#<piF-.'l9`SESKjmp:e.#&l2rCXItZHoKHX!j0C<[<uddIQ5^ir-"Q=5d%/HIJ&,]o&=oG81'i;LpdUR
%+Ac-/UUjYhJZ5ocC9haoetG%/MQn)*3Y8<((=sJhg$#PIU6eJGc@%#JcpLa_>W#[E$e$J?9*$3Z<oJ*mHsWUJ="M,*:sb+R'#knn
%F>ZfV=.1WC4?8O!Gd9l5BrTFVS*EA0n2JndO=AuO^$aS<&BqomVQ!pT7LXH,:jse*i_cZ4KLed\Fm5;**=X;iE]1HCBP9;jY<j[,
%=,Zl(6/lQ_X6bm(J%1.L7[DSKHu6#H67^`+^1o1*Ri6dc^#)k/'c0#4@d+4)(A#VQoGV^,5g39,pZLmDjc_L;W55ZXZcp5*E?;`<
%2-0>u,o193.5(\?6M[Sjo-Xr)Z4o(`_6g'E?3&Z;'d)Xr7IO!,+N=OM-*CnSntRW2BPdR[39gM\-7HqjBD<<<QgmjG3cWLgU2X_f
%H>\NEY24r5cL`6E0k&-)HAGmV'8b6A,r+W">7tsBkY.&S<L(aR2gVNlkTpg>??nedlR<4oOla3Rg'>B9Tne+s[M%'g8PuusmN:jh
%mPDkA/h?]?0n_5j8\V/Co)0rL7V(q;V/8&em5*5dU1fR5pt)k$gEmM2.737s%eti),F%g%R)B.EH"?>./lJ+CM^P^4AuR_i(b4[J
%KBRMK773b8C,K*g7D<(!fP*eY$L*D;_?H8;F]!7%jiQAmhD(9tXCb@bP1dQ57M&&='p%s^$]D_"9qb"qNN*?MBiKXOQd9Xh$7#mU
%3K>f[XiWo/#/;SkKpN[TMr.-.pW!SD?",7gjAsl-DjsF:<?r;HVl#QC0NE6kXRMuFo$UI0J`>e`elQ9H+jH12bGc=/.l>-$f>NUS
%LE5WD*C.P1<D1FE:DlH#>4GM%G532ipeH?'45[Bl4!kQ-$:4Q`(V5PBog73*'GGd5X^Rb1MSc*uAuP2<^7XBTYo",5cau7YI&>@l
%Q_)De:L_mS"`[E$kK9q%`5#5&k;J0+r=c3rgLmRr9d:^k"mIa*]gl,5TGK<sai+6Dj+<.!;LT>-0]U"Zct7?-#BITNUfa'Z\"p!9
%BW>5c`gc0&bTc,Og=&E9gQnclV&b3mZFE5BT:OgjQ(Y;%gqdS`ja`Um?a@-l<=9Wc%5C<+Jk]@-=OC&S5#,7J^_3qJ[S+_INmpV(
%KVNKtEEk\QoK[DaD+k\[1+FbsVf="ke!$tfHT-8o,\!eud!-Cr@O&%7cqlWT9l't2+nEKSJo*>6KFBH]"L:>sL?\M?+P#,Q)dl!u
%@C*J$2W@#C:+VQa<>-&j/?U@:GY6KXD"MTO"CkD94W'k%/3^/=_53G,:KeNI_9aDf65ERBi#jnl[A#Df>[IKGZ`SJ)`hc0b7]e1[
%0gEgH+_oI5kqGjDUR'./\QKRD2L<O\''N_fE8et&&K%;&C;[snD-^38Q6hk,=^+."_W@q"B18!f2^B'@AX.<OY*\\]dAPZkE'9>P
%N?p=o._(GA9<V6IXQ&$CeN5)j:[nhbP[d]07ZG<>?tjC]"p-@nMPUlqg?p1XAgQTTQ&70U.-a9qWb+i)'s#;W,aJk8Wo<lIXH[UD
%,n`sT0t;bG/"E9"FjF*,RnPqniQ:AmV,T6(O;:.uf-"=;;.n,>+\'S`E!*JH,"@@ro'2ER6<]nrKk1g8kd"k.CNb(an<#@2A&a4#
%C!]jmELi-H^"t?3ZtU92lE1g[-sBlAO5r_<lIkcc@_#5jM?u4TfhlU*7%U9o//R]h80:iC@FV7@fGF_A>iJT@==2lr+YT*nTEWSB
%]8TV9]@C,_'D0rH[a?1S2dGI4;<X8o7[E2'hJuMoW7JAnL!)@G"[2TlV1IsQj4>(U($`/2%W@K"@BZE+b$ReIhD544aNmn36Iu"s
%ZdV"2P47At_So=a.K$B1^I.7E2_4]t-!nJr5G@Ig!qR9C?bU62_VakC^6EE=m'%_8=4$?rEb%5/?eA=IJDsh>Uq98pcV(5l8?t%V
%j=Y/(kX-Jj-^U7oq!t/^7r&^=1>,UnGJPpk"BSm'=bV1XNp/m#6JZ:TJ,4TRUd%EF6WB^lP,Md1b/r$2UKp7km9cg!d8#(bC;K0A
%,T89"\[4t2`=S?Z!lg1(6Ua4^q#q"a^(6oYVA6_U.4J3bf0\8C]BQ#MY[a+B1I?u3:uNe%:2/JLkGPV;]T+S9hW*'3c4K6HH_q(:
%j*YDA+Nj-4Zrrr+d*VZ40&re-pZ7`@lp_b,Th9ZrOVt/5kAj^i"II!bnh%]cI4krp/R.miWF2B1WbO8c``]s@<0g$86E(r[kORX6
%\ILcuVmkm^k^p0Qar7/9H21H1SeVXLf\ElQoq68eoI]5tEtK?@ObB,]D.Kt)9o3VLX@i.0D-\Lc?p,IKJKl\6EO@M0ReN6@Ed1?Z
%A[tZ@0c,J:&is-dP9(HYN@8(uj@!ITLc2(6>?iN"Btqia>'RWrWFgb>IeB3'G5(s,`'NBmiU=PJ[`GtDZ_Z2M>[S#!D,Wo1=]NqF
%\t;=P5VJsATfGWpKYA":8`OB]2m0L.4aZ@&KQ-T`O%Xg=S>ApbJ/=9)4e`&0UuXInJXM`>MCrq;^Irj)Wa_,DM8.B<_0XPk:X9>6
%lT+%LU/E\00?BbPTUK\ahbP!40-tp\0)eG=f(bJV-<85dZ0J!N3[`!H=tJ9pUGD@e?a52ATa5qHY"Fc^/u:nHTPA3e34^IX86omm
%fVTTJMF3)0FcYjV3'jDNj]lkDA'F0r\6^plhOo0^%R6uR?$l,p#Is(Yl`G':79alecD6UcoUq:i0(h25aco4iM4qL.CH59:iMAXS
%Sq'SPj+Q]h8T,L(oX]o$1n^`\?Z+;p%6Gt_WN#aBaB<b;_"1jU-DkYGVCZ;<FYN&'8AA;GFkck>d-ZZ(H5Rm)\fOHT.^D]<_9=B3
%Leh+H6.9E@7mXC\7j<Z%)Fb6&4BZ^:c`FU'Q>!DdoL&`O,k*r5D;,]/"<9H1%@`R9j\F1SjX;R6mkiCB68N'(CVM<rl6%Z_f"sm3
%VK_0]&Qahr@G7_p283a38<%fP&O#`Jm*_,TD#ItZjb(M,$KcN!S;bmn/AFGBJL5])j*=mR<G+>5:G66M8&<aRWMdZ0F8[GVWh[Ml
%g8=_`Mg?ksbu=_7*ktgc/2fb2;Nb(@Hn.\,7[=^1TN@T\AfZU?:ogs=*$r>(V)OC2_9[hYWg,61nG)N7I1h=XTX*R3\UUu%Ai2n=
%c`moSPco/V>M\pWT-Sks:S[:rnl$-3frPKkS-lF$NaDnJijN/iDh&pdC%M]OXKX:7W:rtH$n(QEm)VahU]OBp&NsB=$sT,:QD-T<
%kPAt)@o1!KZ6i9@`.f?#fj&B^S7$H$HY:%BD;Y"`H9,]?E:F6?8K<*hn#C;P\O*uS1q@W\8jl&],K5mkQ&6'u(D-Ge3m<6h[\[?o
%0Kh?K\ODU@b*D$-q$L5Q%)K<IW6crp92fIP^[k'Y"#U"q61:VY]Bq[E9NQZL!L*T`nrH+pan6j>g[H!a9Gsk+8+:W9QdWF\*u_uI
%%4#EZbrQ7`pi-qkMgUoUJ5HK74aq`YQJbT$Pb*oalZR`:9D0:dQ.$OdGi,B=[2:f%n`Vprm;Df]%hn>-S]cn[-9qH/"fU,-6Y-6[
%dd^!F2tXdJ>mkI0ZCWICRVV[:]!QLiAfZU@ABOak%b'Q<piL7s^h2OZD6!00EnKV-,t#MsaG-k+D+Ql#Zbl645bd/3\%D#h5>6V7
%L@WjXh(9j?W+,&e0kFp+:bjk?e6@gGYs](O(Yb/B$MmIX$n8'N]=N0FZa:DMiQ'hdXXKo0q2K,'T'YUTQVI*P#L%;AAEFTR+;[/\
%9QpgpopbVtpO24[WR4jgE?8=EJ^E.Bho``FD>FApI=$NccmbC=;tj1<R[@igZ9m;-k>7DYFB[c"o2HK,IS0fhV62<Ue2Zc\b)]`S
%UbXnE#6?!ukYh8Pq9./fT8C;<cu7@eh=dBI9Nus*)Cs#E*m0XZl.aCG#u9/Uj:H>,ZRrU#A52W]6hkFPQHU!02sW0!=J"K_d<R9l
%"GZM`0WCU,Tu-[be5t?u9ms"Y#R\DsG@)@ZK:;Y\4Vh]Sf%OcfgYMUpT;I]Qcr:Gm-&XP/9T<gmX,laH[0Mb-nDM2O>EZL5Z2m=<
%dK[<tHfc<&'AL@J?K3Sj9SDpE2olkG-:,VCkYX88%"s!ij,oL7[WbI1&6rS#^Tl6Ll0WBcY)a2[F?qA;Qs=DWAd'_X$5:W<el6c#
%rfdkW[aUe_I:BF6&i0-cc^_mL!qU`c+5`7P/FP_KGM,U[TsFP0Vo4Y8;8kSrY\8%][E#gqQdX:%kt@Bu8meRd2s]l!qp(`9RXCdg
%C%B/0Aa/L@Z;7X"][-A/8Ug*M#h%>7dLO;fnOl#sX8)E_3XdG[]0O#7_h7-pHrNdB_`VRT+M6u*k!U-E[eb^`lp^)A`suW]V>=VK
%EXj5a9R==_^2mqgr/M5_5.;C\I4h'HFrgCH8+cM:qj\2<<PC0CP[?tuTK[k5WR%YuZ1@qJHad<QOsE3WI=_2)p!UVg&;Lkc*]NY(
%\#BT>/I8(9JUek"W$4[4ct<V9G)E;LYP9_^mWgR7.Ot&>MA.lLbguX\o^IdL\QqEe&ZV%GIud`\G(AZ=C\MFbO.lh\E`Z8/NiXKA
%M4%`;do%2IN8TKaDU=H8ooD;[HEa'=+t8SYVJhSJL>`pU+<UsPU#KsLBr0da1\;U6p,36hG@Q)C99+)mf7d<6@B)i,9WC(M=Vh*J
%1;7porIR;2`Ab3T`N^')'$X'KhL%$Ba3OQP+(^k1[)$]OkPc<s<5G%r#Gr0i&VHQo#K#^X;JpjF!;BuPCJRPk]$'cQ'Q1(kId*k[
%o3>O?O81"_9-Aa7<Z&=uMp.#GT(/qa7hjmo+8'.,rM.[O+bd7(cbrUs$ID-71*U/OVB2PI$i[2!1#nijA`Ee9I8BACG=-gp7qu?'
%q>+"r5UGTOEH\rAN;sK#6d2U7R]o9uV_Cpcj/giFYtjBdC\%G&+$8p]-[@;<ZCgk*LH0:N$ABZCbm/ato2nd+Ajr5$WCt&L<uq*b
%/DXZnZU?@6!3''qZH<J'Lg5N]6OPKGGlrPM0`(kCj,aUZ\/uTm+GAQ\$.QN)5?HI]"a8gAEs3E?0JMX+0a=ih@*``MS/=pX22B%"
%Y56,cZgP?WB`]u?FhRhBY/h<mjq20&FUMF']Th(\(`Y"O95mH=_I;h!s15.8]e#uYF]B\%d9":ek+uZ1A6)gF>n)?B>d3hd8LH5#
%"4g%Y[(OIKK<>Vi,jm)`rCGHbGA,UsBo#d>^C2)"\ugu*N9+$D[.DKJA9ZK,Lb^-tUn\e%A1jL%2S5!Q8s<:^5#cio>maEThMsb-
%A%gV,##)21mq)2:UPXo!(VdII:UY->[9#O&^Li[i4LVqI9FBd(,*rPL-(u6'nSEB>2H\"ZBkk[/9=b/pf,*Ytnc&4e<@&9L9f>5I
%CLTBTV#?XgpLn3h>S@h+biBgK!'qj@0=@/>@tcIBN=0Td2Mj<q[V>fQW9[$&>"G1f?S)F_?-AfnXNX'+]Sc0J8ri0!dIu*r"a@nP
%T>Coa>]<id$07@)HN<uQm#(Tl.PH#lFQAR.RFX'%_%gn>UGgZW$ZIec(nWX"G-/L'?ZN=d2nNbWcumnCGgoO^m;c:d@\/K04hWG-
%mg(DCCK?S\W6mI/NaLe+[MnJE-PTXU!-GUQ7V1gPk<8NhO[;`J:i^q7gV0&<?0?$A6*g5L&"]uBB#Strp5%0aJ]H;HM(#Q#X@h8W
%]tkTW94WNNEH->9$2GpQZ\#,P+&X8/huXBIN](mr![Ra;VJF;@7*h*i.T'N_'UBmi'0=&P9'LF@K^n%T.DfPo&_'j=+$uYj*Vsm,
%Mao,D*,4g/YUae[kV4Rl;^>gWm)UnD>Dno!:7g,&lhg&T)+Pu0lfMPEJS5PYkj(+eV4rcbej@Hg7iQs'&:;qrmp1tod`^]p3Z",1
%VeG^:bC(JL*:PD"/7q$J4EQs,e1'K1*G&H$KhnHBC!9s4N$4#%9K%qgB)NX\,[^(1^5'$P6K[a+\=,[(3LbG82+nP%p^H0`A0`7C
%Wab4F?aK((RCK;9#D;/e2/8"%SIk)]R$!N9\P;Vc(;%u6aeNr+V;.f>hWq(jN+,K*aKK#d\aM,qZ&Mhp`P$(X$8=3o1(>8Imd9?R
%g2(c1/9Q?n6d@1&bY=t-j[><b8"@rQ0rD;$+XDcW=9bp!1b_(X"cQ^Tbd%&9*8?>o`H0]^q6c[?UY1^c(AtYKI-%dPN3DrYZ`?pb
%8t2TIb$O]&o2&Nr+^9W07_*(p*a:`@g%ND_g`uHoJ@d"/B'GAsn8kprcPB0dVBA6U?#=2$&o8niZfVPK'#,Eo'?I\7rUDu?jf#_:
%.I1W]cT^B^q3n$]NH2imV<05;6G8N,ARb-\\s;;Kh$/_L55t5;+)3.#I%LVZM,0O'e61$1pRl?=b**U!5:q^IGHUQS1S="F]"%9#
%dSgsnqVrK2g@u5j^cN>=-q@0+.ESUb\pNnh*#$u!-kQRTFW'W/LsKRND]%ob64FUNl!icH;,-LYHuoBod[PR*HC.!$F..`n[PDgR
%3R><[]k\)N<g+E_YNtt,niQ/3a3k:X#f_<Pano7CJ#41s`u=%:B'CG:B*l8LmK5InT%B-!F"qMA^,uY^esK5"di%esTk?roSr_CW
%*.MTQ;qK6@&)Z7.>8DDfnW!4/qi/pB<i]*aa_o'O;S@AJV>D]iS?7FTNMU]hEOAW=8kuj-S^\9GCE?eN3mFaJF9Xh6D-9\\:>K;g
%Yb`UYJ%dS4jj-l5(l#+ZakaK:c+]>3)L=[3flR2ipgd*IS_<\MNB9S3WDUp<>VB[&hicK:C[/3HlC7`pS(CW!7X].1;`2h_M.2$b
%?3f%?Vfic`;&.O72H!pCmO*.,qHlV+:Ao>Vl(Z2@8a>0LPOF'h;/%Vm\1dsrZV:%`js>:fc'+!mW.,k`p9&UV?`hIDE0utUWRUg2
%C#K#fT0dFIphLgb9-^\odm,P'G'CN8K$duY<?,ffCC!Z2GmFn$l\'Nl'h%&cgMj0@9;^bJ_9t7_?V1BentNR4nl%K#`7js'UBt(R
%fu/FsV\*HER'LgSWroJ"8ZZcg$-\sAN`9*#Mq(8<5,gi"Q?PN^oqXfcdp1?5dVK"R<JoRsD0XL,1f(KcUJ+7B6X0QfL*Yrh3@lUl
%banIelaYM34JU#m?gB#)5PGQ5#qD?8[!hXrMQ^[Eqcb!5G>?oaAg=Y)3*0O2p+/Gr!41WuoV?b1S(7MJ'O"b&5F-r,)H4C"YuekU
%o4#?,1D3a6G&4K-_k/$m-$$8#f-'DXaMeVr&##G$[tE#BbO:cT7[:m@6VdI0Zcl`\QCR/FmqA/Hn+07<rd=$;_mY:d2SEnk#:SH<
%k6)2`SZ9W@%/S5_ohE]m_hkBT).mm";e&PXGX"rrG?m<+KPaEuGA]CLIbkrg]K`lB55I.g^)ST&d$k_MgF;RYP&)Usc7S:E>5OaL
%9b6C+^"\.*jBcW-WQ"RFToX%L'@ei3\`T@SIaN2W]t[b2c];U890E4NdEcmC0!W/)o9,VbpXXT5^ggM#&0G!L<%p[dJ_&N_?%Hp3
%Wq+S4j7i:0DEb_P.fZmCRAEFAj0JrOO;V%*T\BpF1t(45*/k7!<$bc<]ji4/&IPJBp]0(i-0oTVPi9@@!71\+0fDnV!8mk.];W""
%lN?<0VOZikoq$npmaGQ1T@3&0kL80-PeHr&3!$3sYBg+m.XMfnWV(O7qnW&*YA[_,kJ?ujUgd%#j4V$PLSasD3V<9$+72Wt6bbo'
%hRELWm+T"l0b5r3f&qP(430(CF6prW-2Fg@07S%O"f)UlIFu"S2.::=Ps?Z(MjGHe:-tEC7$#ci7?/h[\u1E>V5n3(U7V3L8*A;c
%&Li#"-[JQi6%>O$dF0fDUJJ./cI,ZrE/k/>-X6iHlrp@o%B$c3bo2-B5#[?;5XAS=&HJW6!-CAUH)"MbBs:aO4rEr($NGOhce^q(
%>q(tL@d*EJ7]a_UK"#iF/]'fs_/$'&*eal'l5I.89Q;E;BWM#i%"7T.3X4mBORpte,g_d6+jOCX^Z7u2e#eEBFV>:hBp`RUjj1nk
%aunP%56(9(i9-]q%+$a=),)Mc!l<63:@jX<5>Ie7kF2*--a9VHb](nU<qZOJh"suje@eYXWEc`$@<tJR`BE*AWSTMAC!L5FP&_D0
%)*_Jf&3"J5$Rs%U]qa?CU+p>^=JpThYA#-o0Yb!gFlnY6A_=RhA8>ObDU\Gil\;irS:!3s$qP$?k'iQ-217qBZT@4/PB'8n%VfU]
%5'EXoMM:3DI`A6GaXhl+;W:'P-/U8aDPDO73hE6f_f@$YqL4SIQB=XbG"\GmKQIcB1V_euZug$i'.=!_pem:MdReiAd3[JpS/6"`
%U[Ph-jK1)t6gq`1)bk:L2;;U2GQ$Oe]rNO<qABh?q`$nT)76@]D/%6:Nj#fp;_l%la"FQ@_4iN[`5au^73St@;R9U`BMf@&BW;8L
%ZE-:&kIU77Xg**#qt\c$0rVA7\g3$ilh0B5cBffS/T5*Tnp:2!'O!sEg&'`NQI5F_+-q?"%CqU:qPY^]C%#9@N3#1AXFKKuQdO!;
%f.LsiErWGiC"/S4)dLf#bEjf*<e"2#kIp+"e+<UaVN0]mj+`oRU^s^b?=jHUnMUU'HgomIE.(JK--O_8qW@77-.`'5-*:1>_ABs6
%-A.agkf?t2PL&n<-Mk],+$$?hFD?Q`p=5V6pSNFScV:?*Gf$'6j'W/eW-^]`FU;*raedk8(V*n\TD.PZg[<WQhT@tlnYW??HHdte
%B@ONESe%nMeWNesq5#uiR\@:8iVB!$dre4%Sj47(`+s*nN[dENSr`-`];E<13YWR=Noli%1Wsa]\,p"%co(:R@Oh2"HWueR'hhpI
%P7!M6Bg(($Y+AUN@iiS5et!ABC[>Ae1[,^[Ffpf>D52L+R76F@P,t\F'A"*r)hk&^:T@cbV#8ds;d\U1EK7\UXm]r;n9$-U4)b]5
%d<eT5G4c\YpnRH\IFo1lD6U!-Z;GfTGNQ#2#P33/ELa+E68t/nrda<fAl?7bjs,/X=!q*pE!]Xb>7+,>5(fa\,_D+TR(G6[X#Ko,
%rLk)=opGVdOV+U-:kV?*8u)OFmbVK"HMl2#E\o+cjBH>e*no1Ofl:hg4,NbTq98`<.ES=-T\D^lN-"C/@8[XZnS.<>Xr%#Wp5dO.
%JOmfFY5Rnp1];XO2=>1VWc@iUInnGd4cdtohWVNAf\r\]A'8/i9-KA'PM4AAR[]&orZ[Z?#6Nb@RV[??a?@%Ho>mZ$/K`h-3qUS9
%O#lNK0&`FHEZY$/RcET,o%,/Ck"@1M9]iV@-0\^%6(idaaWKh2[bn>9GI]%^=N35+V#6p%5,CpCh3Mh``]Malq*Wd5oA#KTa^uFW
%EQ?MBSm>P5j-%@5nj&Ml<MQ=i&PH$Id+,E2GI7$[)V5[e*t0>`b?(`uEe5m"!t""=PG`i#S]"_b[;F=!N^n$5=o4[KL^^5<jAFs)
%a7ILk)s880%X]3[IkMb"5L1>jIQlu[j3R<Te@m$HL229Cb<Y()etmWH*dkZW^$PUkK?4X@\Xfiq>Ahp9POO=0r>?)&s60;d)e?Wl
%))%A1J:X0cS\=KiT-nFB`4.)->"3tQjO;OGW33l>M3&R@F^PbEqR%!n8QQ/ao?541,//Ps!,?d8g?7[gAfG:OERZ9(53aP"%&9[r
%I<82oa,MZVbTCQ+)[0-<*m^fmYe2-%Hl$":"7o&FiRN<jgF23.&oW&C4Xd*^a#`>boP5E3r9]g3p5db,B8g;:8c%]A&nQH\,a]#L
%s(80D?YW2<FaQN2-_m_<Gp_Y@k7MD>7oaU3>p[_nn$5t7IEh`4X.e%IN*NB>]=CsjY>.Q/I7QWF$TfjZom0Yo42TXS,rZ0:J%R/"
%EHPEbFpW&sI5/VDOZQRTn`E<nlh6en[;p1N_9ZVcj87=dB,V)s06IcZm4UCo614cc%ue!1ZQh\rZnmgEN3`4V0(Wru*)WlE5([U%
%j@TiDK<CG:a)G(JMjafEiZYX3jKZbO2^O\3MpFV35:utS[^B8F[4>fKS<&uPq-o4O:+Cm:eo9\@[#NisR"O3P_d[<UD5MGg\IFb+
%K@=GU8]@X`P3<8F#]7]>mQDRS3EK4HjMT%jA!A#<mkt^CJK`FX;9QBR%uo=#G4j0capQt?2-M2aA)qUCFiT-T^:Q5e.+E>J\+?l@
%>i`%pDnDmkA,(AW.1"Nb(;4uuIZKMUI;J9Eq0)L!m=)FipB;Q9m"!U'M&ugH3.B2j,i'0W2??N"(Z<X*D;/]Yaf[sFl<VT/U*#p6
%4SnmbNMYG)d3Ftq753E"H68]%1,*nSmrW'qhGefg[`BLMZ+%ViEE#'<$c1g0KO`d"=frfM';j/)`I)5?7'46jht2?J#'F2S]'*!W
%00e;[_o:tF4`.EaFuOR?'AjZIVmLd-mtjs;PU)rUd+sak":2>G17O,>a=uGPZup>[IrSfV.L;_rNT:qjqb40KH\aWp/HWpS'8+F>
%?mg;f-C@_H</KEA!e7B2H8qsN$O8/7"+DB<(4!'<h[*'#6QU[b#D+6+rZ3LZ8b+kk,OV>-+24p;Jb[-]F8pQ11,)k]o8aJ#m_*jC
%j"6-3]/7QQET_77Aq@j]E.4/Ph&W*,4<g6H"'Nn#IEJT25JLK&qS0S<pj%(d0i>rL.B%*NIhF81A^)e2QTCHT5L2odpsOO0Oa8sV
%h*.?-=b`L<92YRHR@qj6@!*;A=?WY=ltX[Q^2No6XtbJZ[\V2?-0rA3bEbYe>>k?\emY;e,Y(GV:AK8aSikGi<-!&Pl?LR`.ni+-
%nZE;PXNuA<F/8)ef0@_(modNZ/n5&(n_Q[>B#Hd,1>89-PA0fMhrY3<a=H&<_9o6($ipb7EUBp/d4j&j+rS=<m,OEVj!\:4i0_ZS
%8i\ahk)g6<q)1?=^4f@-SfKS-G[>c=Q6&V]Sr31=All\W/Ms:L&64kS&s>L^cEE!2FfTs#1BAo?(@]iGP)51sNZk\3Q-UGRFJM^+
%p,/st&QD?MPNlF0hC@6hVUSsj]>co/UjBQ%+G^Kuhp]\R6V@FtgDuS\..g.G$*-@<9@E@%VQjR!qTeP>/4/(QE`-OShpHO"VDnJI
%kK=]0(.[6m.:"V$Pk2Fu7YaUF%o.h\HN6t@gU^C5kt]N6n:)epYPXlWIr$&UQ:#`Y?Yc+*dO0M9J<r%X!%&VEL(qP7dEZ[2fDRc!
%jhoiAA:MW!r!io:rbr_Y"J%4+J?\VQ80C.qq?duDJ,KEe#_)d\*XI4E'bLRsY@<*&guhO#]WC:962:C[O?mns/ms<N[P+;+O9hGt
%#;H6d6O;X6H@umIRs,SnjJQAbGQ$ME;@*8@)(UB8>X]$/kGrhNk^47&`1=)?L3Vh+UP<0,bIA_^HkeXep\n=^&?bC8oFT@,H2NaL
%Y(mi<,iG^O,,Y'L3$Nf/Xs&Ykb$N%"@HRl/,%gi+n3k?Z/g?1WmmTn^EqL5F7I^2@E()Ir/'&q0rCbce(uR0\#WlD2(Lbo3&4X16
%(GJ=gZ.DfApo002,OBalBnUPP!GdA'^PFeb^)-</f_6<D#RUDIjp:G32:N5\$l<nRa=!QK*oX;0_&aa9I0G%Pbkrsi#WlB^+Rs7:
%49gY]Snf`"r7Y-j&j@\H+HcHKT>r-!M7nF/inn+\,OpE],U*ORlRF4f4'tE&@HX]$,aK7<7jbM-6;@/X%Q<qr?#68c2I_pGiP1%D
%_BXC.V^0$bhK6Gg<9!$>)uS$Tf`-G/?%4&<W64n5o9$_k=ZhFKZ!_\`OG/b>duZ,P_R#md^O'es[4ghbVtL[Hk++:-Q_A'5?![Q(
%q;&1Q04Jh6[stUVFbB'UanC/g-\j2I<MUUVIL.N[?[Dr.LGO/Y0*_Sa7a0iCY%$O<C<r[;E.G"!3Bi=9a>r&LX4TGgm.:QJLOZgk
%TYp64Jt^)c>t*/GOm<pG%]B"-P0UZApjOb7%e'go%S?I24<4oN'iF/\HlZ.@,@<mi\\40`^t%C#Xs329o2TTI:?*(2*?ODppc>km
%i!G&Whm[A<4*f-oip?.F=-7[9FY@.in=3fNgNb`n?cLhdkEca(35@&33uHm2l4,m_`SFtc=-.V[^e<<A*8hS(*=Qm)ItqCCMSS7h
%Iia5t#QG,<&*`^$*$,UZ!YUQ>m56Gdj:DjlGg*:m+nG-7Y@-p?lX)s>nWS&(Q\V-8,4kSpGoiH1CO65ULBG2@cbl5l'qrZ1jr-^M
%.K4UW*q/MSS0"9V.nDhlW9!i\HMhYEO4MdPj[Y+iejurPp6\uFO4rX]Hlfc;n+-(k4hgXAY^9&Zf?ejq83W*l'860<JrcgV%E!r?
%E>?I5n'pqg53<*r,PbFKGTP%`"2'6J_Z=)[o<BS54JImLn3!QY-)%B<54@)"QZ7F5nghdF*oM<[*tIcI]$KaPT"t*j%'CcO]_gDi
%`q\Li]Ro_7Z[<\S-hWB*83ahff<B^Aq8*eY5NGMAi;NF:\;'cG%XSr^a04UrW'>Y]YN#Q6S8s\gA#%7*llV^IY+blkAFU33aPX[c
%!T_krGn_CM_)32TleC$QJ1OAYNs3IcGm+Yu1O'rOL]^mN"L@BD%27r+6@&\Jkf*u)$ndVpaYdV%gDfepC`l[MoB8HR!RKd.=epEd
%+ipJR4@Tke\;Co@bA"\A'?$#?5RK7sINC#<]-SNW"kgY5%5GpfYNIWmW.eMG%H?!BiWa[Cf8tXAFoHjV+=jM=UBcLDj:Zpg?0AtU
%+Cmq8Gmkk"m<KBh+7f"_68jogO!J6Xealm05Q1F!BL4r^qAjfIp9d&E..kul04G9.J6,R$0Yg>k69kGF*QUR;mT"'HG('U#L]b;A
%0?!I1"_#IS4HD5hDLh1G)1&cKhiBS3!FA&1iW-/i%@KVV7iUFf=7M%#q&88>:VXW"3TL4DTamdfA_a!6Oe4l[iW-/i&+SRb5p%k+
%]S8ZCe$$N=5]k2F^O\[]pA[5^d8.N+#7f.`#ke]Q,/8cV@hJMWHle:2VdI1@O3!jW)C!Q\S,3C:OUq(&.adXXT>2cLl.6`6M7dWM
%@h\M\V+:;K5Q1F!#Y!esY@&&aJ?((ej<.NDME(/W84D<i=0RQg%B+`3>/^3YX11S_rV@^Yd8.NkLg@q"Y+c`gG5_\p&NA\a"Ja_B
%r!%o'n&Ds<s+g5RdNO#`B_in;PY^gpgaOTW4HDVtqo&/7l?rVoJu]sqBA(FU#s-6>cYMHAFq@r2ca(mZGlTG"iYmL$Xf_RA+Bg+i
%hZ;/G%`C4Q/OL+T"4M8piAESH"#;tLW5YsR!ib8hFq%F:-D0X/YZaMHGTKtF"2"];7CIIV>jF:LmMkY!m/.4+QID7nLY1SdYCLHb
%#$cf6Ep%4'>J;`96Z$gnX'f/'g-+4,s)8]lMk.%<DN1[64mWs`E#EoD;Tgr]/U"i8^;Xg!!l)\T?3/uAD0cW-`BRU]iBl^oJ@I;K
%92Jk5i$oQ[4(!^%@cpem\N%ATOBgSs=$X;U^alWo5Q1F&0\6RjEY$I75?rp*8o=Q1J1_?$$:L5Yq`IDN(St%k/PG*KSk=4GIiru>
%.YT0X/__Z41t5H/S,O6;ClrO[MR%)eNh&KdSQBT\m">`W!DsRR:J#G@k"Y"Cb$jT=HDIC-&uZAg:-Q"n)8ADnf6')b006\e:(S'E
%Sbr4a<VpGpSGL/hQ?mTD:J=qPpA#71>P>`J.=9?*<=clMQ;aHG4f<?u1-9ZfaIdqlTP^lH_`A9qr"RJK?(LM[(NTOc3PVMb_e@J%
%]D_RT#G9fE'.m#G\UVU55PM-r<&DdC!_:3n23$>UcbL3^niZHNfG-Xfg6.Z$Wbl#3FiVfm7qmsNl.+tCG@o-jN+oE+?]3s/]]Gom
%U$;LJZ5#%W]Y=f(Vp$eE&^9U$9-U%J>!Lj83tt%&5MmrOkr_<8#1;C/I1,SKY:ee]9!,u[rT;fP-du1>jbf"390(+!#J,sR$EuU7
%h!(<2d'9#o^)*V%&=!IIjhKWYSm/cMl9MK7?;?*V8V[ii,MK`pAd/G[]C#n;iINGQ]iri,L57EtFd+NJq=SSf\_8ej]K6A]8uKV,
%-'_p9\?#T*Z.ZK6.cgpX5@p`u-GI!8#h<9@s*P.&K75!=o;)of,R9g7!l=tdSrS8[JD-7k(#+4jePRO`!J):J7QcO8f+Q`e\2rgC
%cfar=(@+$KSX"/T:2P!5<f*AKc5/lXWOjjH-A+:S[?IOX,j.)saWh#iLass:dj[J7coTSBq<N1Sk=tgLr],JJSt(tr/H0_u6i4T%
%(g<m%U9.PFFhc6]Z_tks_?Fbs&7g"UT<Eue'dmOp!VZ=J6_EXR9M<a(mLbMJ&pQ[NlD];Ymqd<Kil>Ju+`PLJ4`[eETuiJ0GB%7D
%]SJp<Ppan9J4rAY3-YE7#]*-q+/$&O#P^]Z]C$\1Ycq'>8"cX7.WRl^e)%mHT7IrjSuk]OgLd2Xi@%-k8@U\&iImlq?@JV_]%)K`
%3ljEe%f^pagksURC"`F6::uNVrAg3W?G)kr@u`Z<hjfnFC7`iH`H;=+0eG=ii?N3Ya\c[Hi/fHfnJAk:S*+lc==ZBGdPlC*8$sd=
%j(u%mE:W!\UC:$(4)3q-l:tp2hSY0XnkiI".1k>52C'Xl1Y]s2f;.Tgiuj7ke)R)L?qtC][r'7*1bVEQ-U)"WH>oo2n0%iQN9%;e
%k&&g.SPY/BkC.9efu<,1VpdVnMGkVoS1*"qSoQrR;nO\d?p</ZYI1?<9h'43!&@@/KU+Mdea)UMGRq]"m^RF!;hBM\>l<2NWYp,S
%S7^K*SqXPe("8,^H9$5::U7=I#b'AMZ7C/godb\X*iTD&dm>ufYm*4n'q@s,9s+IA$k\@O4\ieFTXaN@+@1R^-2Q0`;L51,r\feZ
%aLWf6C8\!q-R:b`$H\a7S3g@2.HXTRg<R,pN^=SMd]S,@UfV(bDoVHd2$tWVGO.PcP)X:>fR,]17oZB52R$E\RiQF7D-q00Vg%7K
%A`9-=K$;'9BA+B$84[+Nft=N[XtT&4B9(cidp,ft3hL<2V-;9:BjE*u4XFT@-/5k$9f^"k<07oXoK4B9i?iFT*Zj,_YgmeEmoMoP
%kMZCq?UVP<B7I%(T-mk#a;JG^&g-lOe5bJi3]1$0k"9MKr-Ig%KKunj=KU[bi7,`0o)Tg(,K8-XQJ"VD4Z=Dh`<2CaCDJ]$,8C\*
%_jcVB-U4m4Z,']OA,1LM<SJQ/2Bg!*YM+@FKX;=ZR94Pp:B5#nd4='mf]8)<=aRg5`ubhHR`\&K_4X>Ri3Uo]C.)"5Fc3*Zm('M(
%TfUqqiMkH.jOh#t1RL*C-GO[ndC]+kDqM/W]I2T>_dG-='TW6qDWAV71H)u>3D.tlc;-c:-4h4VB,,;Zkb+.X.CJ?bPN*na71TUP
%f(1+!B+;$Os1kU3VEeFRp!CT;/\HAlhFB'q8X&<BZmNf`.!>A#Tc0c=<\/XT[Y]ISb.r/lMU`ksQa3'3!1^P\IL5<3*rOP$EEN?q
%'mRY)`P8`2&9Fm1?SBt[22..3g1SR%PR<5P4%3,PQ4E@QMLPdA7r<)))d%tKM<BPr9O736pA)AJ$?G:`,dnH;(iNmt4$m>^=;7hE
%e2fij9[;3VFEXn\R.LdfU1\'jU!13^3M5a_^)8Trk_;*Lm+NJ$Lr7]NbVkT!pPbZHhDEOEQ+Ie4),K-J%WM*TZ1HKb(P/Y`h`6IX
%?Ft=lk4SA[qru_aDOuKkY2-d`If5;](\-(Cm[l9AT"fhu/U,\")RYr=[G/BqaE4f'=!rQi&%N`VfRf*qi+<!V>I\I*Q45D%BVR$8
%ZRa<=#3-EoQk2"sLS(J"AZV4EiuS0"qkp(2\TaV253nO7_GRS6h9lkp3MX,sUAVTh#[(@W\$_kp9V>"l4,(PR=`?_<Ji27Ng4@sk
%N'c8OfpYKl<VuldW;6AM?nMb'go/YHbW1\C@SJ-bLdA6rlJoA`C>L^Xqn/=9F86t.2Y$n$go7$"`h3nBCoPJ?-ua+C"BnQVJ>BiX
%9:dIVcLX$jo*$38h1@&ero1uR=9@ZK.R!M76^%^?fPPAL5\8=i_:C>r+:L&r(b'QWWEDab3=k1m7sR=CBlJd-[if?N`(Y28jk0`V
%?tHPFrim\siaJrND4)Oi<nZA!fiq#>`u81uHR@"tg^%qu0A[f*5P?=`Q*<7WKHjns'3ejL>HBe\o`+9MDq:D<N"4`dc]Z>@atNHp
%E$A+(_j3DV,<2/o$0no$XO-d:/JUj-g1_p+m#6#*%:hj1aH`X;0CES$g\3Ndj,W@*j>(MH!Y[dC%?GI!M.Ib8+*G?EpSI9tl[F=)
%r57%uET$K\BArr`4r"=D?98tD[pD-6GCKO-*9_b:FP]/5gQ-YcJ3]p.&[kXU;gANi!QjhNEd^=4!;p(OrOr:9e5@i79k9;:=lIJ.
%BfZKO@gYI81U],[^:(I#GNfF4)6"ISUO1WhrgMsh]Ibo[.ehElm.rr*)le?CBUXC.gElYERM>t>ZW[^<XIE^qrOr<;k+$V/-#run
%\gngMQ.>@m+96[d>Zg#@^jDukH%]#tb!%C9#^7h`,nQPBnZpoJlaF#LDTgIG]<3<uiBoLUXqJtSiadIMJ<,O\+_a`7.2BVCoX_A'
%D^atrq$<Ro.g(Xm_G;9&f!\R_2".JUVaX'T=BKMY_QGnshn/QM'Qh9Q#B=s"_g><n=oa#u2D#?YMgnDdki_sVE=TK[4)QEd(N1c&
%`Z@ug8%c6"Uu_pP>OjGUE#K>l#siQ>8DIc&!_e\VO<XST1l4pmY/l#8/Ut3U0d)HjGTSER)p6OjJQN+H?42=t#1<$S8p_D3mT9$B
%D#Vi)S]c1nm>gL^HM(%aI<tjcn6F[uGH>od@<247ei4&EDe;Dg:mlN''DTpT'#aUCq0WjQc(a>IAbK5]MDFY7'O7gLVOIUnhTU5i
%gI/ie:$1j579u7RO>Wau\D7.fO[=Nb[%)'uff!'pg>qJHRIGRoP[rN,Ke`4K8hjHS$<B)DnbtI3';qkVVuBWs,X1jt,'WOCgRbbi
%kXAU*cc&fBmIC&ahl&F,.dnb@:O)[mBT6sJ!3"QAI\]nX'j(<JY%Z+qD6ag;>1Ao<,2"HYD$`)%baSaSUTn"fM-)o'FKL9R-.SsN
%Q&-OM5548F^Vq`H1ehNm=5IgHEH!2WV6_#c1G3@ZDci5cM=4!56C/4^c@9ugafa!T%A<OC+Z<B6fGZUehDG(n5SWqc!jbV$r9nEW
%moC1h?1niUi)YR2qI[XGeX\=KXbl6ZK%N-u0A^ni%K&5?KinB]Lr(]Mm1?]"1.I@VM8:3CWp';u'3HN%+QuiA&D3m+M]T43]s!K`
%nCutqeSE0B!ZlW11#b'c2lfXKkPMq_XD.([s""s"^TU$6@[#h+.pT`gp]HB!")d(V:a%!CRH8aL:G;@b4IG0l.&EI(brGI_.bcPm
%4c@$s2W^0XC,l\(orJR]`9K2iD!mtiGFs`\Y7Ue_lF$Q<g[2$'=M^0Zddp)A7sgT_c>2cec5h_do=NnkJ.hToaZ/!WPN$\KbqK[)
%QJPClk.]r69PYDm@'q;!s-0@([YVbkVd@'sCsEUG.4^d%3JD0sn8j.QIJ/H/99Y@6GVFoE3fj/Pk2FA':4Ane^A1G;971brDKV@^
%`0sJW$'On`Z2N,`?`RE13&\2,53(A"/fEI@3bNs(IQh+%dh8A>k:7hCHb1^g4RLC+S^Gt$@pbteGFZd^#=2qbppA)s9.jj![Wr_[
%kT;8QDN`-?'P!Vr83q6DS!Q)uFO14CELWi(N%$6;1^MI&WB;R6A]&UWQ\^]`VU%3VAa#NQ=_$X`V\kWT1Q9$>,)BlQ;D,'$VS1W5
%Z()rYe@_\)1YXZ8U3%U*\G4d/GL%q%N7<&^n*DT+E'MZN5n@^KT'DfG8GdJA6IsL`XS@]H;tlltB0Bh&"[Vg3s!D'jl1Y=5Q<0mD
%DhG[YcS9()%(>Hl7&bNO9&J+OO$m@OEcZ;VSaP_tkEnHGSsP'XR,jAm0qma`LFMm'-h!t$9JT1c/&TWfP/jZ?-FT`@D&RZ[Rb)JI
%i\_,/!OL:(=L\3%9ftW=`72Q0pe7=,K;N[9FgoG0RtfW;,h;LG>/]0/h,i3Fg-2cD%/jO?4G(UC:lYmr_Z&:b\X>k<VWmlo>N42b
%c9B6rWh%2nh/Bk(>L4(oG<`en:3pYX,4BtT?i,3.^XQ*tM"_lfOF5Js>O+OhFjH(>fD5B6Y<`^<7bRC/qN*;SoPQ]EcR$,I&>0kT
%;G'Mh+F.G31^6<)lRain-#W0NP9&G.kM?A)fKj,&6.%FhKm$<[,:k#mamX+/WT!c9Ji2[2#H6QeUjaKPOu:m+Q".H`<NO?[A<ZCZ
%jlG,Ed/k<3H&ANH"?#_sTMgMNah=Kj;ZsB`44@IbbiY!LL&!ODnMjuQV($pFF;XnRHc5FPW1g^q=V*Ym9scd71=1T;f/[+u6guH9
%,sCsd3<AlLId+kT.I:+Lbmj0cSU7*0Rj788H'#IF4L0"`HXP_Nq[hUKWt^Vb]b."ONo_%$0#&LR+j8oF12V%\Q8MA#CDSp0GXVra
%K%OVu\=`&QLZYXm9<qLlg7mp8^U>\;^9fT?inDi;fqj_A`D9j#pD0a1VORT&/.VOqCAF1+XA]H2M"R=U`48B!0YPE-7sR%.>a1fi
%;oe?Dn\*A/j9u@pqd9HZ3hBCSK&)LQn$/*JL0?AhRMYR[HK"e`]aPbT"<!//;VfNp<6oZ%_ogjGRX?7?$m/A$H\*.cB:HUJ<A<)&
%*]6No?ej1/_cp0[\K<]<Z_rO\[#3m"jW/+^>u!QMdgRggDfXIjF8)F>`tqPY*r+"/0Ym/jRtMo6`G1X6j<gGT99dQ;[_>8,G!>X0
%UlflFCu7]mk9K0uV$IbIX*VlKJ17cr8f8LddQn0Ajk_ctLg6_)pfoV^mo`+Qi[75+VaGLXk1ld]TZk8&jgIlJT-&0G+pbNb,))>O
%M>Y=je>)+iA<;k]l).n'A##R3s85pfCThR*:VVA!G-UYh%D-2`JHt_*FUe]CA[i+XZfML&Eqbg9W-Uc-n(?9Q?/M0U;RWNHErVj*
%@-.JXfj6htfIh-PTfC[GR9`12?\Sf0">a,L\8P<q@cC.i/>CPn\(\o%8m_HErVU?/4`'oU%Pq%u&A%rkFj7cB7GYN[6t@!rjpn,$
%lT&3$?u6U/k5G:=,EUMsi2cs.s05'Qk'&/kD"F^VEY7g<M/ec\;u7Thr'6D&pP:<UPVUaibH"Zj2&F0eZBT0\,>G])2V\:[b5usI
%bOW90o$3R"0aY'4%!AS>MjCd%;_$7K!S8KaE?92SN&uJV)nYCOa:VhC>1n&e5@<I6a4SD(/%iVUDuMa1.sC(FZ,dZd"-=(m2OM__
%)PLpu\g""o@Fs5f&.lW8kZKFb;OJf?7qUu,(TP&anT3ofl\6:.o1ZJhWBA?=!Fm!%O#.&`4f>cn/+P=$[R_L1Ytdn/Va00h>U4e/
%[qodX;V`K/ZRGJR.mp"W&\`_8/pgmV<ja#K_jLS#Y,M$3Y/&rH4O9ka6WC;?1?Z*pY#RK%m-r5J5g5%:fJOO#d$qB;*#eXt6.._a
%#TBGGlF4i?@s[;nI[>^f7;e='Ms!r3r[iEJSfMkqE0&JC"=(=DE)pcn-O?tV*TOW5>B@s.DP#A[mlV7>]`\&o%.5dFfA0p1jrCCI
%."G:`?5KV,QG=!Y%q-C8plj=5)NA<jT<%u+nKcj5a5!bV9[Rp5ToK2S;H'HY(XM!YhT^<[kO$*P@^a5`TBBXJ7B;pg?WbGmS-)Qh
%D?_QNA789%ns;eGU3`Pd7]PlBb!5Hlfb@*-=0jc-QfV*ZruV%q1_'?:>M&k:o?CPT_W`Mq>Us`8?gG)">FT*=PA?7pZb8`e0M+Sf
%:5HgR7gp,!0GC/Jh)&nB..be7#R,km)[_%nqo^+/U'PRIB@LH=%_%jCkr93:Ze2QEDD>D%"6cBR/t?DHgGL>!/'*aOQHo=bqWYSi
%fZ\4;b5-?b4Y\S=B+^C9'4at?-Kp0Q*rUj_,]bRjk;kOtIu7UM/#@A`_f&tIjb@SAr,tEb"Io,_mG\jtq`\u4`N.m>F)6.R-[!Y1
%R_N]fO%@E./^^h6a3I'(pqiOs`Q<d]&6k[j8ap?lB3W)KnJn-;>HX?]e9k6Jm"]2tTC76W8Bh)/5!F$>J)7ehjW3X?@Rd3'op8"@
%m:NPb=b3W/1r6,NMu30!Qao?p"j-@//?5J%*c&,+f9ZC/ao2!UA7TZ/;j`EE2&<PphPQKuip6J(9R_b3UJ^4,q0ht[H2b3_)ffAc
%0pH,0GOg$&XYG*a>n`4$fbXJ$q3kh^;OURCM.4@bULmsMX_>dem;(TeeCUYhFPjIEc>QqTd5INl[`6T[;fgQac*mptJ$GOHc(<1j
%FaM2<&)6rs*J81:/^]h@#q29[/ImUT_%^gr((4SOK`$,%d%pRRF\SSV%^Oj[kI&'AB6-c3#gj>H/hplBRpXf*cL(tkj\u>&U8s\A
%gU'\q.#2XcBUNhDq@^S`o^aZL??/O44D[q&C;T(nY&U$9CY5CV#Bq.H?Otg&/1/*&D0*eUR$$IXBm@hu6n.=gf8rY'de=uAXC_<U
%N`u>@Z`SpP5CB>NiMCJ7g$D:iD+i!Sqi'X8ks+'7U;Oh/ce#lQ-6'N=4,Ln$.Zd"^YJ,g7Sp<PP5#,NoV!hJre0F4iL,sssL<XQi
%914I*ak'@Fk'fk;lPS^Bm;0%MF,6*m*jI'%@6OE4-45;Z/n`CADWBg<*YZ`4P@'ZMc.eX)SgqV>cf78%"W1Nd6!K8TDa=bePNubc
%q8uNGES!>iFQ@-U\Y'n15B9XlY_Ki,Jl<)ga!7G'I'IiW"BItO.\'0sIpR`lp8!`^GCr,`E?IZMdaq]<I5U_.DlMIAiPsh"YgunI
%k=]W(C,(ckld(2hQiEWPha_Q5Pcem#VO+rta(EdY'`.J>RLSb'0jr\%#QWNdApq&R-S\1$5hb5n+2;2VS"6mill6QsR)aM'KXgDj
%`-lMr^$U]9p2s<g$GZb_(q6W',&0+^lP\Y'8-jcc;/4%Uf2=PaI3jF8f32p-P+E2gOEJ;%\08P7F]58:eu)5tg;"g.CRfj\cHH;K
%\]ihU%sYC66TRLn2ecrhoE6n[[[XEJ:pY)))j&Rg9Edh(eVS,sYQd]&+PAaGZZV`a_@<$897sWq6\oC:LepHR`?Ys`i\J1V&fJ&:
%[4\@4bk*eaAF5VBdCc;D#(IYF`$&nt*'/Z6)K!j&*TdbYd!FL[CUsllU<!q[i]E78CpAO;MUBBS[u;CWiJQC(ZXVD#HPW(WED.Ru
%:1H;".Y@D]q"8a3!peZ>Ej6W+]e'B;6]`c(@g<8FVh=3hWHdDf)r^>T-plF`QZ,h_kM$"&e"hJ`"BZr,eY)p_7C*?7?+@Cuqi;/I
%fi$_MeUff$b5i6c_5AiM"_/UgF5DD0Q;5T;h>p#OFe[5p,TO83Or,Ct>Enthf@ed6BT7Ub6U$hik'9Iu[&pt3pi29$$0F@Y5>mEW
%rRXL?2eEeI(S<VBJYO"\(.l*<MpW?h-[`#.aZJO)l6<3L+\cc)M0D<@j!OfaL&c..ce7H?5X)]sf9:LrbQ/38g02-%'-,&J`6pPb
%eHd2D`0':V$J;#MC<m/g\fZBr&EAfgDJ7Z-q:4N6EtJf7N^IEgT..LG=6%plGn@5p^TdD/GM-8UI@IceLj`q&22H`sLL/tP]Aq[Y
%D[0gCNHe6L!nqq#&ZfK!QDg*<D09T)YWD"2kLgl>PFA?X2fqD<%=&U#grZ$D3$-@L03dKd0SR/JA#6M9q/Z`_*L;(q)q!fo/A!m%
%I_L-g!PPoWUfft&#%*OI;\s2LJ0.u*$-DB-hu%P'gor;l!A%<CgU/++[5r6H]])C(,]./5/d-pNoFI^b1)3R</%APkgUZsnr!?mg
%,13&VDg^eE*F[3bT;s6](\2D8A'=5sKc@Nd7K//CSqHNM/]ITsh5_7`3[63bD'uZ,Z<ENY1PZmQEo@"Vn]QR9r=I7;P,J+,(6I35
%.k8>&#d;R5bT&n'YAIE?7-.?p,KV1\plLE/jf_IZ`YR>9TbL]),kb#uAR$L`&Ka#9Y/N#B@;cePPK?`]`]5_jC;KJO&Mui_YF*ND
%h3Q$Ii=1/[ISC;E#ESZq?=qKZ')jM\NS>k69._H>:!UaTZ&MO8Q?%l977tOu!LX#S6KOmAOJ:m3(\\%SMk9+^T4RA_Rm+rLW^kb&
%gP@Ur\6m//(5r2-EElI6k%Q]HD5XIO-"ZTS6]1$R:aP6BnI.#YlU"JLGQHRQVYJ.Kpk!Qg.+EACqUt;>k70A;\;li82BK8CDMj-1
%mn*O==VJ1_E`$P`#6MgT+'H'.l\=sW1T$>-$&*X<YokVhS/"%tMhB8MERcV8(</bHH>mnkPA7o@\lkC=c3/Sd6i4%\%5f4#9fgb;
%*N#0eTe3hf5W;@h8-sgtpKA?@<Jafd\BfpN.[#s/@3O&7,?D9-UM.M;Le&'o)YRlXG^fa?A5,cj/f1<+X@qY3K@XK,DECo0@2882
%WJJe!'C_ulXIf>&=Z9ca6&'M^aK?%_5qSJC;7#)oZN*XOfm@7k'FPH`/i=&kYseSqZgQTWJ3AP<l&!;.cBZ:I\l$mc[Mc]K1F'5Y
%GDYJ_34U?G_te*iq\D(o#Rc$::Zfp)GY`Qp>:O'C*qj!A-QesPKa?B^PY@e=ObM6+9Kkkdi1SmDhTB6i@+f'%ckY[=g)(AE\ABiK
%^$!mROc1e#3W*PIKWjAr&s"3rd'-8_5QT%UG"D&sg"PI]NlMPW-l?UO8L->bLi9'iBU$)g"H:CM)&>N?&^[^bpC:_6IL)TSf'.]D
%\l^'9FUHs25l.7f@=t>AZEEVUMTW9P"=co-h4a:H45[P#54;Y=SWY$r3mSa_(fd_-@BQ=aM";J7CAAZ+6KBG3:ecrmSc3;QANa58
%];D`Ab[k:X&b;CbSi*-t,hri,%KTB$dSl7X"bj"Y:8a7F4Tkt&Z6fXHnqIe:S2V.22Xqa9U"=@@[StMWjLmB+4B+]&ptR(k6^J[%
%A#-k*A[Z4-4@ajk-I99'Gt.KR[@e71F&VB/k/Pu9:K$OhKc(22Ya#"2^fCq;Y=qtnSB.E08]GY84q@Jc)["psVK<A#(,?dsIn63^
%ZTf^7kgtS(=p?S&O9/A^4).0(RWO:"k!0=39pel\$ZU>5IIc,ZVPEGo!Fs0UaE4UE]24k(XLjoaJT"/.Ou]*:phKI?*Y^;Q_ScY_
%Cs2anAS,Hk,ai4f`,@a(4I3e*CfPM%Gb+/*,CA;@$9!eI"1Q+E$.G)#l(B]S.,)PS+X(I]\kJ:-fQQNhP]@@T?JO&3ikR<Hp?%ES
%P7/C)RZo0f]*Oe3-oTfOF6G?ThK4HsD)u].qeJmD/93Y*3$BS@YUPNP3k6pVB^dkEU=8Zd4Q"+U*nkf%rEuG4lI#=Yp)b6<H<6P;
%NYmpo)a1:-SNM#n)Ms\Y)hL?CePO7?i[d*Ed0Ap1&LV*d=8TQ/*mLa:m(RVNUq:Gr]V`9JCbf+rAWD:ahf]_]R9.FDJ8:cO5jt0>
%+l3UG0,u$pRa5W%5?3Im+Ng/srQGbq[S")pQ3IPu,5\]7%M_UJc&0,dPn1?iZK\g0D2.1?0lkjfQ^Z&P]o2(FEi>B7aLMZ&GFI\I
%q/.D&DOXUbT:#\#hT*/fQshQmnm3dV*Qd3FdUT_!)dFH,Q"jcl`uf*<B^<T<#gC&dOiXtm?<QKsY51+U@`qfkc54,'^T\UH.lW@Y
%s1%_,A.YK-6^X9Pmp>%1=LlajH-l>/-r,BZ\rm'$GK@6DKHl$9@Nh`u@f-_LQ=ogb^pG<f$s*c_7!mg8>Ar,.+mi7p%;FYSn9A%S
%,@h@kYVJlm=]B-gSTq%@_W:(KkF9-^B1?G4RY<C<]RYpU[OA+,g8G>!_\>TYfj5-RBt$#2JVVH[A]rbclo;IkOndleJW5.7)@I0U
%-.'o#E).98V0GL*&j/+k^bN4[d0U>IU>kaSH,A%$AtoV#)%/BQ3J<e*CCe2%RLksNKr5\O[HE0j87ZP#=IfLcAiUO)?/RN^X45@9
%Nkf?uY<\iM;&Hg^,]Abe<Bu:IB^=W[Tp.4+p+>p\*lEQekfj-&'LO0"Q"..D>n2pO$p4c_pk]QVrBYK*P.W`.r;b`?%^fH6BlCPA
%4Gh'XO1t\S)m(!iT2bp60>pP;B[FM@N_NJ.aMFta?N(V5r+U\Bs7^-)b\LS2LOifb!%G,5+h^5G\W)VCD=A_R^^%+m12TAC)m.k3
%OsWQ-h/%*M:1k@.UM7A4G<,obAR1--:o*INfTn7,Kn8fQnSJZ4NG8.a`0ZPKo<SU<3J>"/7=d-8<D"r>L_0l,6P)L"d9)TOkkJ%2
%(_@5bHdF$)o-Xaj5i3j6'>,8@/Q7-)pdu/;P7g37&eLZ>h,tZ8l3D5UK5dbhnNs<5eH4U4fp?u:K7p\NN>S<WQgfAb2qc^Tl**4e
%2iY]<DL%;j=QeFWD\(#jiJ+cEIL_`RBhbCaD-A?1Se"?4o1H+;p-Z]9F?SNhHI,Q+PDV%>f@bVME_-4?o<cDCKuaXa)N_2X8cq0a
%c&V#HJO;?AE#.TLhF'FrM.HAk1kj17[$r:kjr/e8ctR,1iFBtA<s)Gl</X`9Z76cf)l(MM:+^oq0F'3$Hoc?c&],\4J-ThhTZ8'8
%B?p]jY]2-7.)*1=;?Ji2BM_0W;-f`d3R@>59N,^&['ke5iAT*8R9'hU9kBM4V-a)*eZeO9-BmclR-_8TR)tHPas0:nATm/_B#!"g
%I#8n6<>\Ge7i.KNZHr*+o&6<gNDD1?#%;nVAAcHHNe=G:J(60Hc25>1/plJhS)ga\%1RL0>,3Z6cX,(C93DQ+Ub1;%?)J7u`0fJV
%!"2X<"4_A%-UPm:0+mPmCeN-)]%pCK1O&*g8?K-UYhHaBjHr@G1tW/PRWsoYm-Z@X'$\5FeUGklQg)g,e)ML\<a@'==m%9^G@,?n
%&mac;#HR0a5O2d$.I<t'XNinTg<FACg8>snq#)_G<b096FLEsRk66&[Mi'[dE5g.1EOkZ700!8-qj6*@(uPS<lhU.=>d+)(/'_3)
%n@\X`^OFl;MdO6[K&m!93+4PW95[i?nAl3bp8;3$q"7;*=:XhX3u.q2jH/I'YIJ+'^^En?rr*YAX9X"$0oM[=igTQ/T6JS$J/@"I
%>lV,?>(?Ha(Ti2e[$0(UJ(dW_`BWag2=WfrWo`\VE7XUSYIJ@2J`e&^*8h!e/V!ePe!;QS't5b"GenCChnS0^jW!d'o9MUj`I5qM
%nTb?lJ,Y<5Q`p;X:0der"ZJ&FRhm'T'[9s(j\iI5_3msLp(_dh#j4uEFBS//H'`DJPCCrZbFcQ/eog6Ck8h/Oi1XqQIsBo,-&fYj
%mTh;`00"4Pqr_7t<)R(Bnkr&.`Q_%-r=qi+EM]:Ool>R!S@u@p4R_]\Q(k/s^9mMpEqr28l_g;f[S8pPp;QK-Er5uqi?d)/#C,,$
%CS6OIh7nW+Gf9\WOG[+E^_kuU-SPaL`=7d`5BI&"%kkGEq>46`_<1g%\UuWP9+GA=nB`K*5J5ti`W33PL%5&,*5`WO-.agTGf;[j
%rr+5<0Rj%bK9ua'lQZ%`T61e<kMPYReutZb'Q^UQG89`4:HOJ#.5/2hq=@Z-`h_*#>fQR;928t,n;>tfQh:O&0n94\l^.c:m5u`%
%Hd[=9:A_[+)*`VmL!8`Q'dkaYpfH7l'JWp6,\)@k>fi:pSouI@pFj(@/LE[K:o9o`JkMNHJ&SDb%Y_"+[sSQ@r3=4^#_mhHDTGs'
%VDlQP[!f5g#c4p3lH,WJMOu#RI:5fI2>g3Zai$sXI,4O+cQUuB0Z^^L!&<iq,m);iYj?Bh;J$L8cr=/MkE*<EhZ:tZ^'HE"LpZRt
%s#$g;KK;oke(,pe1KgJaF)?)SD`$I[X[HHAN^.Y_1p_%^]akr?748e(dC-@JZQ[,]Q)68qrFdoMk[n)t,td[,;^i)R[!hp@PaO#E
%D-)6KoB5&VU19)U_E4<!C&&W2LLtT+?HknPAK;B:aqdtNoA`P0O60anbSP.;>7(mRS[/HZ3%4&t*dj(.JY:-r.?J$"cVCLKm1^VQ
%Z79f2#-+(I*Eu;?J1`7:4k^n;4GNro%h_!ed@8EP(#e9AU]eLY!S"4+AoRP"dKkjMo9qW6L'[qI,FMtHe=4+oS3aK:C^,ugqlTo^
%7R',Z:(AB^Jqp+Z@Z&j`*!Qo2'i6L4Xu,t#"E.KhT"@rtJ-a]t'L>EU>p!o_$\b*FM__?nK!B"=ia#R9h3EG*7YnMQfjB'W*"t<B
%d;_5LSo,u*PO.Rn_J"q5E)=fPltQTk%E/I_!i;mcltjRWW]5ZDEA?gC#,3\#-IF.A6ieLKlLh<!X0.#$7Zg1f,Ie'5`Z)`S5mM=t
%Vg=0X_YPqO&mf%Y+':9j<fLeQf2313gY]WoY[1)\[T&$2Ok@e8<\g5?<EG4uoW(2%O#3nVb,,hhqY=US*P7&q"&cV0Z)iaU-Qh&'
%FPu0J&N9MCWU4Ea%63*c!pbkY)h3lof3VAD$G15!gEJI@<+M(.&oBO)cmH0B#RNm432r.Kck=0)PHktKRMRir8YF%2K7cJIYrWI0
%6YA[:A6AG;e(mC,PccY(5g:q#CT`NYbO)Uq>UT,U!\RA<fYQcc0C95be1[Y.q:m@4!\!h_.WJ5/W8Vtf"UX`t(t$9BiB*aVjcD1O
%bc`4!S&dm-H3(F,2ViY9gZ#EGD(qU]m(<tunkAB1HFPm'h37S+i.=cK>"L>#@5&tbbtM7m%@BU3HH[7<68o8RWbOlED[O]s<M>uO
%Y6T[a5WE_s2"QpEcl0aHc&7u1.g&p8.e*Sa(=JsU5cI`:+a2"2E^+;fD[E"np^YBpDgjA3O?kj5K[A>c#<sD#a"KA5_>6a9oFFEN
%n$1:GKb7QGkl5QrdpeOG9k*1GjNnhd"0c*nQ[Q,d+F]!C.<Z*!s"`!FJ%cn7RLsp8AYc,HYoWP/pKtfiM(:$S.+X+1WC^=@,g^"'
%EYV9L/@g7V[%>TM.F^nOn.[OG<a&t/ct^Os8i'VV^'I^*0BO]FGs!R@/>DK@E\%>99PI=jL^u-JCXoc5L$l"s.]f#C<S-V\/-1\P
%[2JWQlBhe3V?eQ%Via/1'F/Z3h#3+NXcOjEHVrOR6L(%=pUZu'AS(u#.I'=>dLmi7To>0e^ksWQ.3_U\DM#)rAQ9?;'PHD.68plo
%BmlZ8'U]Dh=qhPs1Fa4BFe?J1KEVc/p?#gYi&rhK(l`9g(lnnPMRE/KJO^-kVD.]'?qqk^<X;Jkpqeh16leE5[OK2rrY0q`Td7<H
%CQ7OB&25>6ejFo9cd#uuhu\dE+sou]j'%H69`KF/l7k"cjnqfG;he<h"dksa)b'?'lcGF[MS3J;4u6&)KX#PKFZ3)QO-T3R,:%uS
%r>0NU72)mZ%?ZtpPZMMBG,mHe6/8MV)%K)N/Jd)D*J^/DP-Y4>&3P^EQH-#8$!;W;Ff("%`Gf:i*\;#-X@#LNJ5d8Aij&=b%&$oW
%-6<m#&a$uV`F<J.O)[!&E9Y;2<R>hg'U9Z33NkEq<Dc1r1K#*NQ4\KO86T;`!N\k24\PtcP1V![Op-M>GsUoN1_?qT&6g*Sog(iC
%Pc@W6\la2hSWel+eP%@jDqjDN1l=1i[:P^^m,/g"R?"3L]M8+I1OMh&=h^(5.gcIe9qeH"S?Y(l17f;TKhb&p_RgP2NaQqnm/R%q
%J$k"ci;`Yk?aW]0r?$hm`h6P)b"l$PE#U]=Fq:"fG!ufs8"?S-fqGuBN"&[@3@I]>&m3a"K"&'\MFl?hV^Z3g#VH6QbR-'aR@Rjj
%)"8LG#CdW8SmP0`g.B:Gd+!A+qc!Oo5Q:.Rk6h6"<3uV`6VtlPDUpp=(_02l:O^YcdH'5>L-2C?9pdgdKe.)Lo5Y:]^`]pZ/WC#H
%7L`4'Jmi/46$"e3IW%:,#73m+qlCN.'JG%;R,<OHY7[(VVKsqr^W4\;&gb>D)0qtF'lsA"B,"L-U.H-%iR6<B&1/VZomC?l(OSGX
%IV_n!]g@<e4^qspAu!?q2t6W9S'fNiM6Wd[)sW8OKLE@6Ktt1q*&t9b!eR_Tg)L5hb%k^Q@0ChCoc^Mr#n?kHc(C/7QPO#?pX?VM
%#Zec6;^7<SgVnm6Bn3uDV3#u<b3RQG@Z[t$a[)0\!(J(p_GZjdJ@^k)h9;+rTF5\HruePdMa0+r";f.[X*eNk!hd%W-q2R:R\P*L
%9j\;*l.:FY2h1i<s75VBs23amVa(-l^]4/pT;1eWs!bmC;mC*;jO6?jTDmg<s6`\_n^CkFmGIofkKeX,qq(l4+9!9As-$7Y%D)NH
%r6HI<e2YPg!lt!iH[h&Pkoq=-f>Uo.H)"Lq@A"@\"]9ab5qWY-@AUj'lFo?\`.aMO?p"Qufp5ZTJ^nA^3)MfCSA>)&j,c42jR#cT
%pm`*S4*G9i&V%r&"3&0o#).;r00U_`@UP?5plMW:QoZ"Y<=)T8@9AVPA(hgM+PiqE(5@`4\P+Yc[P%,YY2;@hALVK.I\Mc%kBhc%
%%.=@X(@fu$<ceAZ4Rk;$afh2[Zg?6m:u^#LhGO#fcu7G\G2S<Vi%7R@QJFOW2VCe7V9hsOb=TK9FklB]H%'fV:*"NRSp`#QR5=L,
%bu<k?XT@k&`+'=jd;:a>"&A:$&/?Tq,+o-+XVEFVHrYN%knrh$\g-,M<M2#cT:oCAdaO\'QfY!!Ie6YlHgl$.d=N$Q.o:d`iZQ,#
%'h\sV%@eE>VblrMcbU0kJ2$I2N]^h166e[9KM3b60`?1Il:F4+oIS^$c-"WD)hsg+_!+?frUA'Ff(flA>XRZZ7eTGa,DuIuRtblm
%@4u#p[27*8dTaYcK!R&_[=+2Dpsm6;GQeJHDF`d5<U%=C?YItJ/lZ&[*mF5nG@J]kn847G&[A`:cX$1W,/-?$$/!25efo[nC9BoM
%Tp@)fh8X$n_sEb1<o@$&GF+c7#g=Y-0<16AGgL/rI5&j*h$;T_(hh3n9ka)+NfiORKII&_e&o+Mq(X`%P^f@r8[C[A2s&6!.s$e:
%_PRTQ4>oPf1[NQudi.`#?-53Vp"G>hOCFH$Q4Eq&RX]<15`8G?YEMA4k8<XS&lL)TZ)hIhTk*1T;/A-+_>q%u<[*t@@_bK7YjM8!
%.VAe%o$.&^<1D%2J?lO<BjsEM>E^\cgk7=HV_tJhRnqg8oL!i^>ra3B12mORqM+M@WGA3UL7nm2=OdW'-opK*Xuo\33FqKT2%[dd
%lG+!]%@tA%L.FpJAHntd+Xn\\X2o4`V2?RG2_0Zm;uP:m*:9!V^4Sme4*t?k3FFRdoA,BgU`)gWV]'A%!gIYKn?a!i?#WX,.J-Ka
%p/Qa#)"uL`-7@PLn\d?I2kKmk>:Acg2APsu@Yek2bad+8\XVo?DT4i-378aYcfDGl?Y/!8Ob9\kZ7Ss$(`9O4qMD>:GB]K7h/E^)
%9l^Lj0^$n'4!WVlJmrpnKk"a@2PWkNXj"%+MFkj]:-6(Wkr1N_PgW=Oi]<?tE4"u.`Smk9^<<EDNrrg"1Xl(pnX>aGK`1&.#[,S"
%'S8/Q=$eo\EJXFPp@m+;[59Xl#0QnVZ!96F&gW$-C]2==Z>gY"BSk[IDQY(m)3:^a:V\D%OE8DF;BkVXZ`UZ!8ln85D=a2iG%Z[s
%U:6[j:fHeND.<J_Hj@:)gdm;7e;PlEM'=5*>&I='21_'m?14]fNLbX/51f6GP<Jg^F>Y+0hAH(n(s-8R!!bQsWTu'jm;ad-0jnZK
%"BAj:3fRWh?e3BT@@1NKT+7d5,N*2BVp<jKEu."BV[;3SoL!i^+X^\$&n7Bhn;2pFBE#q`=\*>$he$r0op9o/RFD^.W4aTMk]Bqn
%\ug<C2GAV]mq"PFLr6?L_9>q/AQgUR(H#q&K\]Gq>J"oLVbI%po\leuH]cW:mYXqtf.^"\XtXdISn;R]V*Mo75HsbUiC.4[P)*PF
%?DV6&Y1+pSYcS#=.k>\9=,6+^?#^c<UpHdXcF^W9k[rV6aK1aR:3R14(PEFm&TEsp<l'T*KR&@3Sju#o't6X\#2pV:)?r4K3#+c\
%<_MY/ApBNiC$RAV&n3@i"r0u];=T+0hq4=frgjJ9GDIN.bRRl#<RKG*^:Wqnd^2`Y"\@`I5akjmcOQeoT2^:/As&k2SA*^5s4+Eh
%&/297kOerWjkpV-V_l>(YRtfTo]uCBIcshfe&[YUd)7'aCkiS_aAG<sV\N2Z=3$jl7>>*/7>liXSI[%j)qI&RK^@!+&0]^?0iY0H
%AlsHRMq)Z',9U\uB(+P\^Tf_74n$^@.(nqdZmNshjb6h^Y`qn3BmI`EM1T';PVJ$-idGU&I)'>".tj$Qd!0"U(A4a9ak2tRUTghu
%ABBgEU;qOZ2XpYr5BIk48-ILC?$UbJm!XM/8/m*'=*d?(\k?QR`8FKXpu7S$mpf-'UP442L-7!%22cTHH6pcTR.q7%((.N'$FBs@
%90J[,#87AJD43AG8<T$MG!n)b``>/(FGMrm.#QrifF..OF)j0t6aQ8VLu8r89dpij?s'<oI%qQs@uc3oJ[#pk.GFT<.gu;nVE^G=
%WhdgZC-tYuPL8bQS:ed$2I*Llg`@%-!%/B\%?('<q/N<Z>`fk7:k0,n,VhCS>K@W$B"lC2fm\:R)>9lKOS/LMIPd>>!+LPP'],V;
%$f_LYArrc'dJfpSq#?Cs4^thU[VB=hm"IkH&-TpIm7!6'S3'F0+Z^5fmu1tS&uEk*I?RJ;:n_Y8k5'_p`*j.Wo$"=0m7kOEZ_AmU
%:P*.47N^K-.^7Wr7FiM4:'NHrAC94,g51a6jSIll/`Ch?<%FLpM!,5]rBR:M5VaDN_,NXf:,WsnPo^'$pm^)+PI+I>imAYOB>S0f
%W%#AefS\=hB(uU7h)-T?d#f8UE$dtK/'f86I4Bi*Hm,H2YnL#fR.3NqkJ9Q9/<MWdL`Bk]Tn\cRPqPG2186PjQo#7VCj:MTjWRTq
%k@Do_<^el>H',RRVCdc"EHUWPYR&5Z)c.an$`?nr5S92SlG5SIQpTASRU]LWc:RAi+gQ_@b_VqCSVNT>D+eaLS]P+GZ.&2dh[6(k
%c7QLl9GQtXj"="uYg9a-4#ck"4%'&d^,PdBrP9b"-jl'Z=]4]Unt'gVl>Gtjni0"g\Q`hP_dMo>NtJ[L)8#P*ME(Z=`U7gS.pO\N
%TO`)40bX$6g,,1$pM@"@YrnK>7h`uV\9j##'OiGCD^LP4k++3I>?06Q`+D^.agBC5)\H?5aG:.Gn-`.3q3)kGl9gArdnV`PQJjFe
%_g=>i+%mfk:bM+u]49n-c:HCr,S'VlTu56D6;H3N7gP(tf7fmb!0rlEW<gR6)m_!gJc:.S0:"jnA'u$,mg;mZ%212+7+n!rVY\+c
%!q8F&!+B!+oDfpgp=W#e.ZV.j)0-CgN4k$aCNai_lR`MrD@Qr1c.I]$;G)1!+l2Bp^cdRQ3&X,j%9\\IrVO/)=?>]B$BoesOFa+:
%8G'897-5+PMF?lH[CCs5=!A5co7T-51HU+4`?:gmFY86a\'M)ukAW_`2SmOtnR1)`bo7%+b;sW%f+02B]T/HS[-<=cB$g'_PYJI.
%@S=6R@GdKLb!@1d)-J*U_K_=GIg)6S0:&<;[nM^,5j`:]N^;\8"?>i.9VhtmrF'e'rqh0bo/&]1%K>PJroXfM?G+P;S3HmqkJ.#B
%ZgBu,6<rQKs5ea$55k@CS:CIg2SJ`6TPgscVT`5#^dYaj*"`O)n.@jh3KQX;kVQHe120\o4_p>s,0>L&%9<A8/>U!J+a%N6!ZFQ%
%3kU[SdWq1E#;sh34rnk=f*OLtolm`C)<mstb"4T)N/n[kaV9Rq9IIfpWfCqH`e61!Hq[n:IN_R^%7oUGjJYcWQ)XbjE?Dn+c$VE+
%$t;-<i_8^`fn6ZkaH?M%f.-dd8g2/5,eJ@c9QD06@m;q@Q894/%mX+jmNU2L:aV!!U7TN3bC(*Vi@Z"!b83F6@Ua"BIPg8TDhfU0
%<,hM6.VJQR&kc/0Lo,S;*!XGTJVUM4"I2fdKXCpEKeCj:E#e$*4<!m&kPZg7qh'omnPSUA['-d4W+1ug'_Wel<)q>,`R#YoW;ON8
%"smYLT=`s@W\%Xq)tNi./=TMJ498tEY/G408WKGVptVV@=]06^3mb5n)--<Y2l8gZWp)"m]o=+d?]XI,a?3l>_-2LWTW7"X9Pt1Y
%'*\nB/e<Qdgl30n,AnDU<=.leD^"k'h$m<H9+<"(D@W%MW(+W['"Ud_r83S2(C:KKZF0(d/c#g?X`N%$8%]#SliaSIB^Sm1?)MAD
%*9:]cT>h?aCm3I1p[-A$+$/^PZTQQ#a;#<g1Vl%hKR@Gg:1mDs'KHg$4X8(_pfR<<ScEcLmYC_u]fr:i\hf?ejtc1)$rCe+@j),9
%&^HbbB?8BOnh(#mJT=(f(.rl`LA]CI5@Q\rpQ1mbQ@;S8N@'1R2]"IemLi<34WHQ<#d"<>*1)]5id9@</jR@a#D7Kp0g]/M)3bUq
%3D=7X2'N-e'QFCm>JZSn$a@0W]R5OpT9q"\>clr3W;fj<-.DjL'!XLjQ^\%*SM('idY4(nT7U*IHJ"'^5/\h<j-UmIqS?g$[!2%#
%jLO3*H#n*IV#KZ7kZ9ko48J8B^qCA/H%Nu[3P-nc-Ti=>^T+&6&[5#DUMrN675Fu>^aGNtc*W@B@m2sS/POtc'3^2I#<3+N"[3dp
%>?c.)S`r3G&kN(f<^8gTTtEh#0&W8@?F4HB:*ZEg5gtGnW9fLD!=OrXrQo9Yk`^[u>)>^L%9E>fk+\'8Q;*s)=,:l,d`Ndj>VJ=#
%=Bp17$$'uDlF/\5r6K[L&r"15dBcAXYeRr`I%9G>ElA5t(5LiG!!VK>$3D[CD=b)Bm)6M%5BP=<qBQU6YcUNQ@++S7bEigNNhZ)4
%jo_YF@2k@&bEStZ^'M<LkXg9VUHuYk[@I!$I*YC$V4;jS"=$fM3k9$)bdO3)!W0s)!f6a_mFJpI1P0rB.fB99K7<0oJ,!0L7c?aU
%!b&"aI)MNFrP<9&FpXOMY.b6g,ITug[tkDNeDC.khqAa^_bS86UBF1a+F@tJ3I:9''2)0[[mVj!-mJm)+iVAuro+;:CJ#&#\d*k:
%m'M9;;&Zf<#^CNt#u?_=*Th`&LB._IcKZ$-Sr-_Y)bC%^dC]$ab\ul?SUa!)*Cj7dbK)JDK"i@_roBo7fO^YMR0c44m"O@h8qKDe
%E*F,'%,DEiZ*XF"36B94[OKBt%$hcVRis7>)?SW'4?A-i;\7A[0%oTInjfI(CKK58B?KieB3Bh<:iF.:4U+ARk]/Nn2'd-lN$=cP
%^b\N66K/*S#b;<`7fCtbs7"K*e6IOoG-N+7-)"P"/Y\JK83dU0""jm"f@lI(OB+X3ZHC^m6,0rZa)Xk?o;-/F0XNF-Q#9Mh#bfUk
%-RB.a#e.r9,QQNa[Z(l+)0jZLY$/9Q88dlcrRcDqnAE1^0.qaqnCP,t^.QaY_BeC-WAYqMFE@s*(#D>E)_[o0h%0@a9j,b[m+8d!
%0o6h]D\cjZl7aSoGV]o^&@,</e3oR[=&>:<K(jhsldMU@5Bb=:qB1p8/F70i3t)ckd<$[XlMq0LC/sBbiYaZE`TfKA(IkU2Ein,X
%qQ4%+2b`s-oT;LAM"@Z_L5V-`:l8h'/b<KY8^PWH$#Tr:P9"%@*OsN!oD*jbO.H"U="XdujViA#_nT?6p2^<&H4>3T+dO#6I&+R`
%Ku`sXc&TD_2!DD,AY2^(j`9W4V.X._jN8Zs8^h:n(OPkWrPQ9DF@.=^3QI&$^849*+C'V]`r+Ils)<l,0K0h_E>U>*c%\uZB4).C
%V,PHiHRs<DB^XlafKJ@M4W<rsRrSK6nN2,D0IkW/Kco!3IG,n:0`qnu:O<hlIc-9%d]7J!Y)coN7q7#7XFI`#FuJ@`MGiWB.a@.$
%9qm=I4+a-]4J8P%oJ-]])h*.uBb*]3bI[iJO1B_#r=74p;lPYGA$C.OEs-??GRjm;+,ObTBmF(Paf5\!$=NK2K7<0oJ+R1#9uU'K
%8B2@iEmC5-r5@5&#"p[&PI3,FDP5'Z-g)ICRB%Q;M>qW]ju<%q]L)44.@*;f$7%IG5&/Z4n-g0s8R&n_+9hVV\SAE^?)"l@<L*GY
%5BbmJqCJ<?[d%h@c.O0d0ito5)('#e/)Ze<+h]mZ4M:$Xk-g!_E'NWsG,<]7G5_sVEJ]*6Fic(a"1BTYJUA[_-F3@oclgW=g$;:)
%(Yq`s&b9,^NVTiCrkV)r*$<a?5suVIs0sFA0]pi?4InsC!$j^/`<7!r-uhmTQ"/Qn#D'*L>cn<aIVVks?2"*jF#gM03MQi&P[U)X
%[PGBeU$`ig-5#),M/hF%ihpos[,F+N/C1rU5'FZ$%e2k2h8c)XpB8r2Jee,!&_`q&'3c;-a=Mh!l8krbGQc#-apTL\)tM>YelmkL
%8@6k!?ndD2Lj0'F>s]u*>Rk&>`(X3X5"\Qr+;CO='e&)C#auj6ksk__UTg"\e$glKX%Yj`Bp$;3!;2)0G?88]$V=V]<<UVXZNP%b
%ooGFcYga7>4=cBm8qGC6ZU-gJi<'L:l_%D%G%>m?WC6PK5j/Mo5"'=h?ES&]5Ltbp,_^5dN6"1"?5rRL!^qKpJqSA3>p,1fnq(0s
%U"HToeGp3#Wlfl[^J2d3nT1"c<XC3A6NDaFcpn6SRl<e1;rnaWC7`gkCu1+2JKQ<dOU,?]a#U=)8`i2[R=72ON?3Fu-mL5_('ald
%U&l7^0n+K$4NT^[k1-=.,0YqA#_B`6nh<uWfs@\8kn<L^XELf$Usjj7NBH>=0_=.'5XH+_%5Cn<W/$9rAJSb\"3o[9M#F4D8+9Q\
%lc%#H8>VB*<s160SFmN6+8^c-ci*McVujKt0%O2@]rdoFWpnjUJ@O>`JiXd*&EjrtAjc)MVE##'[`6Q@[W7l?3l@V3&oJ=mEKq$q
%ee891)4a+B#?sq-!C+c)HETd`-]Gd45i[m)k8)slNf&5Y=m-ruqW%I:_>L2r@u^Oq)?5u0^,^JNp\T=oI99>od4R-2<4<OKOETe4
%Z?!V#+u:]m2<j5CBY)[$&dXlOq/BY6ZO,p<\gY?(4:(A._Kp@p"H$&Y3/>Z,@Y@I`3=n+08d&.*f!GO7K:js&>m4$4)L."PNn8tM
%%\2H/&T@-T8HO<B'_5mi&Y_II+0p]Y2A!ttJfmLT1AmeBFQ$>Z@:ietABW+H!4H4&lQ@$s&k/(<88Eh):=>,8+#`+*.(_L@rZKuH
%,B.W+I<-_Op<9ru^3E-$mp0/I$Y;Gd\:-*hbq-0!?;gr>M--g1Hq1!:S/"`Gj)"kqSa%FBeLL#_F)`NN\?a2X].0<o+,K"?#e04Z
%0`'C:dduu$=]Psck"<iGl?>L01W6>\7(@-0;tfkuULb$:1b4p:]5m`_4N,tBaRc"$h(]@,p#^7EGoDf(Vc3`mn+J_Cbuo%HO[Xps
%G#Q;I]SKRc='+83?-o,kjTa4'c!Q&\%$Lakp1+e-Tk<LkjoAs]\_?F1o"A(p'+ganh'-,l+NfTs@D5pHR9aC:##ou-25&@9[2$[r
%TGe_G6t([)*\.oCAu@]U_.:@B*4K>`Pg(25OnrYJjt2&$^03"%*d*NI+X*-4P%%0=Oo]V^5to:%6I"36ppD8ZU"^mErKR5bs*RF.
%ZFQEbk(K+tF]0EC?k/2G9-HaYQWr_m\d%:Tq2fAW#Ld8nmp8,U>Ue%&R63[DoIlqj?1\?&^P^^lLeVF>POBEr(89^0+5ES+!%d%"
%_D%#Ud2W437LbEDRhV9cAuj,KIQ?TSPqW7jEo4f@n7A,PW_YF\gZ>V!-]&@]!JHql^7[YIbZMifLS(d1#oUmA085R@O5S.UJE:sM
%K_jB//V0/3rCJlGmPK[%;2JkihD+W:>o+s@7EAC(Zc+I'WZ/0dmJ9Gs!^cElmMW&oefE)AJS$26V;SUP/e0@A`b<M`3gPi%,>1``
%Xq/L%.m<!qD!8!3TGcW-5@b%E$-3lE;8T\qPL`F(=2ro<\!2r6^qAX0?1o[\'M*[/d?.D(#1`,X;no@A+=;u4:]B7MVBfRfr4nT)
%(+1K0Lo#/B<V;2>S:JhdXtPJ6q_1QfiZHQd-":F+TYlK9,Zij2R5Q7h>L2%<6HIlT(cS)uVn3H?iar\?Biu8A+2m6XoNfq#_P#Up
%D7m6gJ7$8/iHGuIf_"*?Y0X'S+'SO'F<1=-$@LfGk53_1'jWT1\$#0<qofs*`BYb>m2ck#%jnbhY#C=V&p5uq8k0YkJC,q4gOp!W
%_"-4lp"&Oa9U8@C.t[*1hd7r6iS)gkL%ja`(CRl_]O%]8IeA;4i)d&u(\[JIj0,Xm1NpKYd<IRQ>W!"1nZnkW9@o.*]Q2sj^ssrj
%cBg1)4(#UCkk``HHX+J\UJ5p[#J<u((@sK.riYZ(bpjrQ=Y7d[0L2CFRk$0cckgm!<hnFank_I0-Cn#]$kdZEp39J\e3][QX9Ys'
%05adt+r4QVb^;8A.[*_>EHCN,]d3PnWdi!pZ+>_hDMu(.-r\;M'PN\EM9;g9j:ZV3d)OeOnT.^JTb+Y5QaAMd@FW9_RS6aaO1Ekh
%JHaAr1aq>1@ugEYZ\`Bri@*c58DaQA'=>BD/`9a?4Ou(EQkKP-dk,E^P`Qr+(92gB#r.Lc[9(,D/i<Wjc@o^E?s9?7ln6`3DVh1+
%lhS[WWgS><0S]Xgd!+N/PEbL7mcX&#lq6IMW"ar&Ha>OPfbmOhnP3nU.jN=WL8^!r1/mPOTRXKpQ"qSg87=P\ZY2"hTk#.$f,c,=
%>##<<,]i8CD4o=f,3gYc1i0nF2-!_Q"s9qH^"MgnUq0X*W:Yrrm;$C^K'2#s"R_3:Rji'MA%+tiPeKbWgDkAs&,&;BUP]WcGZHd#
%I[@f5('bnOL7au/kJ=kcS-\#h(X@]8qWb&io<iYu9D$BKn7u+Ojr`p.5`GcWG5r7iLMKdC\PNL;4c1iniCc6+.8D1n1dmc\iEMJe
%6#`9/Hq]2JQBq4/"-._iLlOM%q&rZ/7sn$h$RI_m543(P,%q,=Cb0c@:q+CTo/K!.7+!Q0Nln?:]IIE"J$bk[\#=.E_Fd$7%fVgX
%`n+UTqLittM\2b@(.I\,!8LKt-RoP]>euQ/%'8fc]a@TCKa!QGX(,5*rN!lfC.*8,A7T^(A7-*LCe\$;H;4`/8p9Wp06u.N$D$>;
%I,Ek7='b-%)VdV.PDj>kJhgs&RQRY`hq#/!ata6=BR,5\]ha^BE#A?4p-!=#6s,oHDQO%Um6R\?r-E5&DkfRC>uSF7!FaEd>\7-,
%LEI<a4M;75-\6^Vc^sE&70:53.UB]rKreP2-sAe?M;tD1h1RNYh3reJF$Ehis)<,RQ?&U)5<7dT3tSF6V*4UoifL[C>HB62GR0(*
%MW>i/++%4rr@bWc%u8t\RBFrWLEPTOhgHra=ic`D)cX>AfSRa)UHGgH2"l]fV3f)dK8Zbs4r$!AbpX\]:$(`a\@4+4Q&%7:2;AnZ
%m0H)?h4.r[/]t`I#THAA0imD_WDQ*2BUe(ArGpY8h1YCA2KQ'(lrVB/Ib317Li^[A>h`(tM$6Ng.lZG_?IPUt`9P(*@@3lIF*.ER
%BMi-rCsk2H)%$;eX?bmu0shL9WD/2",9S>P^!q=^SqkJkO.UdkXku7!@[Q^=KtQ6qb2C1lZM(Rtrr^CL%JlC;(nr=/rnaKcW;"-Z
%C+j,3pkXc@+UkLS(QWK[D=DCWd#u#!WKsInqG<f2\#*7Z9IkS7<35o?2Grce?+='u0VO8@p!3C@8#l9:BG;.7@,Gu:O0S\0N$'@,
%b*o(@f4rB/QDBimJbmAA;udBWo&V%>m-DP(r-$-2Jbm3Qek37W77Y>M0RHVFU%%3lR*Jl,k;PWQmmljo7POqYf)lkISIeGJdJL>H
%/hPAH6sDVOpmjc^Xp0Ot5@#M>p3r="NI:oB[Q.384pXou!P;PBp&:DC5a>6O%b!pYQG-C)UR,he^(plA*df=^J2ha!kKj.WgWdUt
%^5+(iSXY;#fKbFTRN:8LS3G?2hZ%nc[p0l^3].W1\j\,<!6;Y]4Whp(k.g#o9J%d0Y]Q7.!DoZIK><fT[*Xst\/mBX(k?Il_6i%u
%GSQWop1La,PDu+A@EjfrOS_&Xlt`[1ji0&gK!h+Nhu)t=ZVD+;?C6cA49u]eio[#5Sj.rl'E'gJ[)OF+(9&jVI.\tGV;e]6c0)-?
%>#p88TQiT`n'0)uH7s9f-"aA_c%&_E-*stBUl&k)@s[tt<j[qbgkX[>Y;C_halIo68`hbo1@Fbnj!2P>m`1#Jc]D"+,"sduPFo3)
%*7c]#l-;#7B`!1pAB(c4UYPg[8LBSgEI0hrd<JQ,$!]Je?cUmQEr'!\\WSKQAQA[":?C>FY_g?r8"_5:VTr#HA8*@QIlGUtoAEp!
%',?eQa')fshU0PLUiSrE3Gr!iF[-jf&6!tiR1Y:s-Zf7;Db.Yj[:HFa'?lkgrp$QUjor_ajF3DD*,F+U(hdsBAjFWpZ(Z6A8:1NI
%ac\lSI<_?rp0g^A*;B%ug.?nQk2G=&_.(u+'5Q%k54ZbF4*mgVTH"C.gTW<JB@]Ht>\!aY6%*C5dA+/Gp?%ql.5"U`X,O/E==O["
%"%&C0R\:m\dBadM%_pW:d&ED;NUO#3s)l'<X(l5N/#o.]%(fK&^ZTr0/tJ&UQua4mDMqGb>/3S`Y9s$[1?3[*#fKY:*hGL*A6Yt<
%\n'DfeiA@D4pF>VX<W=-+11-lhG#H]\g/dJWi`744#a3^8Kdh;nHK1V(#LT'/SEJq.V`&R5BH:grNhJd`#)LuYB-3NCo'D%Jq(<4
%_Id'e@?ZX"MSNp&=F21VrMZF<+DFLmAC)6lg""c<^e'"YE<th#@8;f1'LP84C(P&p`gOn2F?aMfDk#1o\.'o%$`,K$2rpd\&,35^
%r#Z:4>[9OWk]X$6pgDVH*pu8Q,tf8n\&J)6o,U-2WZqgCgBNoaObdaY*+\eW<.>Eu1D.(+.d(.8\HpqnNc,[,"N/@&RFL,Vj.p@l
%1:d8GUJ^X\Z7>H(<"$Y?<H$;<X3]JM2lZFA+R&)-`3"a(mXEYJ^Y"O!EK0Rr)'*lBT3j]K8&qamnJ1dlo"6&$O70;m\hoKFk#l@^
%aqB&SLgdiNED@h)I!`7E(<n=OnR0j"O)Etm6fahMYmWhHK#%(3U?cb+j[d?bEL;'?L't?n*L&Q8/pe*nSmC`@6[I.diJ/<J[7*J;
%RUrQhRkl5'%;*#mYs6XUT+fTO?.UrKE0mL^YGG"23p-?c9TPKh^Qh%^qE*HM5@!"mFFIr)ppF0]$NjYj/q33QL-7G6rgDr5oNR%h
%0K,95U0cl31H>AiqE[d39uhW;A]l7cAW<,opKr4`8+_$qn,DgCkCh,6c0G&tMbZGV7Ptg;*miT*A4oQJNfXe]>ru^.UEL@,;aU8*
%e0ach1Rl@^]1fg_=569Z=->^47F8"-F+%loJ%-hoi309jSM.1)iA+J9(3)^.f(Q`=B!`jrau!J,2_-I1kI5\H8mL,PSinTZnem.t
%dS+>hnb7S>=P=A/SG/Y%`3Xo*9)-<S8YPUJBlT*4'75>^j"\RFArlAE4K@h?2]P\iK[Yk3T%O0G:,tWU/:t=?h&ent=/Tf%]J`pi
%n#oI[nc&MoOb7$?pADner2\r2s7T7grg/-/ofrBQ5Q.KtptPi<+91b)Cr1/fY=+0:$-n*#qEP#+oP$VO0E9cKrp$\bq4E'2j\NXX
%<r1/Am=5/Z^\Lt2o$]i'o[gkWhf\egm//N^=oPIIqXs3'roH&9oJTM;s-6P\JYggG520<2k2b;A4=?GYfb[%-Z+139Kbu:]TM/Ab
%+$qt"OeXY>$OSs>V1*UIIhco?XH>i>Tpe:QemVZpg&_GN)5*m,&!'H3/?Bl<8ID+raSrF+1IM8.3RP`@k7!TL;8o3%88t<t)O3s+
%!C>k`6u;0HfE%dQ@MXDN\D03kQL-[\ZhO[L&)E1i(q^8T@?EIhj9@.T\r*^<W>\#RrIrLc;77():Zi%RQRRH6Yn7%%KCA+3jbX^+
%c8HA9=3aH;oj,eL+:e,'8eG]m\)lt&c<<K!5V,>n.X@\kTjdO[*\`'Q@?-`+-s'/>(IK'r_T.h[dZpf8<>#<6Gf$&1R4O=pE:=Vu
%/"9SCSQJKT9GDM!P"/JbG#8`1Igt#<#">4F:*&0uK=e4kLenkfKn5#;6XTW[&g/^Ae=,JG0Y/0]E!sLn-^MSil3PRnM`Rn(PGn_l
%4O,SjYJr6Q_@Qj0?VW&bTW?Gr^(i,BZi.Rg?6LF#gcT3FdPi<L'di=Yn.RJ9UiV);>\YLdUC_.clWk,]B*.2t88U[%o1i#!3`Pa%
%FUi#0+Q<;6`\`XGL_p[(5WE)?haE\m_CsGNV@.ZL0W/f^W,sspPqEtaSKfH/j\=mVaHa87.c5fdTe5g[)T7`eMsEIP.6P3r6@i.?
%0sGoe&'`d4U<X)1g(K(L+O4+i1lrZ'0N%`nhJH[?.S1ijQ62j<^h+jqCQms1WN6N"BJ6<eKs+.Abt9Op`Q@)')W?3CH%d=6IWLUN
%-VfSME@8TO-\Wa<p09A>FCrBb1Bp_[cTS"mFCK\5"lG,B%k72L_f]-OkKDAtc7dNpIfC&"@XseYp)N!GeY;M*FGg0+U0K8D("sr[
%>c$;to^nV!^Q0Sr/j\'Kb4<Bs(Mf@RPFk+_$;jc3T9K\S\;SFdDSjOKb'td?L,4sQ4jKF\@-N]X,K,hG:'KG"s,5'F1DA,h;c#nD
%6+&te.Y37^7hVDZI&^70(@J+"q4f#sekSNdQ)<!(i_(Hm:noPN>1Y7>nY(%1a#Lt:aNkel:K\M@&cW&*X]ZC<QVcg^*Ri/R07j,o
%md&b`NS3L`!\=[M>3Jjaoj8$F@/T-"\26l^K,mZ[$'b`%>/'<#bt?R:R#THP8GSYD<0q!Ja9^F!e&T)HJ+s)GCS&=o`raLj?icKQ
%6s2u.;#De^d0Q[rho+ri_Ge%8$+gWchGGLf`1tm732p#%]<WYdikYa]G)>[_IM*BYnKZ8SielnD89T.(1^sTt+MIDV:Jk8O=&gNX
%g:?6@\N002GN`DPG#9_r>^>qg"?uZYiQPQ&DikWGJP4?@6NHr5/4$QApbba0gfOn0QiaUT,N=8A-rIo=3bt9FZ8KCiG9?kK`R0rE
%Jq4:CeT/45km6X##!9rfY\gIS_!(X4X.*2DP2NEPaKC8n+92Z+*Z#I*Bu&J4Y^t]DqiCbZC;mKWo.\/ji&fp_--?]Q2@q64eh$b&
%k@9`TPF71lSA8SjZk<RS'`,Ia%+W5[U72nEPo-OqhuDWp`#E>?("aS%L)sB?MF,eqB/T8a&Z<Hd(u14M]1Jj;jr-997Wk\mQDoT?
%<a$c4Z:)[,c[Rdb*f&Z+)*jI;^SfS5YY7f(2?4hZE,c%$f/ES:Es"^bKk2YZ15sok0R\[rOZj:_^IJt4_))O)0.ira?JPW8]pJs*
%AVa)`#TQ5%M1pCZYBZI@X,k4d<JqA:$S$3TAbDS"Gn)lLZ_LqMI/fsu('PIQo`rA3DVSU#cuFpXnd$l[Fd"hYA\r\Pa4,D:P)G7r
%EKd";<amj(U-hYNN/Gh9IR!W,8$<I]JQ8cW+k.eZ&T"D7OU/t<3BTYECWIaI$Br8f`IjC%NN0CN-Fl]@1k%LI=LoRr:#H9""gh1T
%H3nZBiVIPunEkr#4-EDjQ[oDpM*-RqF,2SsV)U/<:5D*.;-!7_bl.;[j,8I5S>uq`qgJSgc&)Kk;fH=^PVQ@`U+QUl2-(AfTF_.F
%<5Jr"r2<7cBOR);\qLd>;3,[oliC&!UgQ-J&GGN>nDR"k0gQoc:/P-uJRPRL!HaSY!c>k:VR^=`.V;q,$rk*5;.jI.YUaZ4Ak!no
%8uT'ZR(s60>?jb4?mhRR,fBij\ZfHRAtqGAUbRXM_>YKQH:.mfYg9JjGiP_\';I/FOs$iAAniZ81fciNT>7p:geOtas.0iqn(sDe
%Kmr1'8lb@-3tRbeac`?J:nUq9qTSndRA,9QMBi2\J>5`ha0B6M+UItC>S4s;k\PJtJKOfa6DBZ[[i?:H,d2ogE<mg*>,[\P[6loo
%]ddkG7/\^)=P4-F[MmJ\WpRCGgs1ENQK,OUr/Y0&<1niY9d?%V]0oX^=Pb;>Yh#!hISJ/hZ/RX#K/.UY<7gS+RZjd]dTEbGKNQ,V
%oj@hcDT0AC0`7W`1(;&qG8hMQ.`0gh/AfD!.>$/^/e2%=[\sfCnldJn@^GR^.F&Bar9'GG8h9PTWLhbVMo.dSqR?1hP]i,JHh?,B
%$jq%a+5Sq@G:&;)0dVd>d`MX4pm7[)aTUhXOs`l*)QGZ@+\5.-JlaR5c"<K<6MBh2s3V3B4Jps\e.Tn:6i^9<]]U`8fX;#\5h_7)
%gJiR$''Kc?DUi%rMm/=VQ<X)VI#OgE!1Pr/O!aA$9>$V2$qjB;$k:B8]WM=J<o(bE$G9!bYC;YKfL3mi>-+rFbKCgH_R,>9MJmK2
%R+sWSIGTJRUX'Y@<G"K--.71K_C:)cO&15ecAbT(3MM@u9d[W.9ZpZlN-&Ba^$&h_.^2Gt1JcNlme\*?_W#Nb-FCrTHdHRULIG09
%Vn2klWY%4i<9\UKge<Z8h$nC=OUF)Bi&\@R)O.I"m.pYH5F>gb`^fF)PVglDFe>oC,ZEBXY\m;b68;Cb5cKIf4A$AjB_*!2attUD
%TkD.f6gU0FTE",m7'O*Mg=F(R6EF=ENZaZTjtpU>8<;Thi=Q*FXSd#sRPj@G*BRaG:]Vn3n;=Fn)J'E3V]L9dUK>P/0J\f*]TD:p
%=Nj8qR@<gfV$ne.\3d&DL<9X&ARU:n`[34'Sg(!<T<bU!0Q-$Jci7+)7J+bI]3/&u;!GUB&Mm+$=2AGjMPsiB*"mNh-h0b`hMQ``
%L$(n2#%E"<'k>28W:DjJOcI;(s7Hmd:*NF`8dI^5=]rGA"mO4[kD?I-*o\jT.["J/$[EM**504)g23910DsIrH]J",7RK>+^kXQt
%mmO;6dP%Q5C<9f]6,81jLXGg])B9MVV^bNtaAF-2@$)ITcKa,ZMb/VkC#%'LhgPM01KgGq:!UX$[U'Xng<.QQ-\kV_<EEFg64kCL
%=%p6T+t"?&6'\b*;id3/W;DOD'FbBOe03<$h=j.&$+24A5Xf@o;7btQ-Yf'dGE5RK`I[D1*%mQLrh&2aX@JH8]^D?+r.fP0?iq17
%&\1<*r?Sdf^r@3t+"S7`6*pqi`bikmkSE=<43n[B4]NbsQ$#e4\/7\:7Rh"0nh'#dVi7Ddl:#?6*]X-mAMD+`7+3ng&GV++dEMZ_
%rJ2k\++YU+T]d!>UmOu48=uEHBiDeYFXZ/k3_gb3.,Z<?%"q<Nr`c8)IHkG"OI3!pHh?_(J*'mlTiq,4QV4Fc0(q^F2j4d[llSY8
%@,CB\ciYpG>Zg(NZZ=V_)t,cT^=VKING4(7h>\!LE*LKaG^p"n7>DhjJNi5Ti([mCmrXhE3K=l<O1dV*7!Tt*iD,ON=L&r7kh@Gp
%!l\(sie@lspBL+CT;?[H\R>2+&.V(9V:J?<8\p3s'<u*d<*uX=FT%O.1o9BpX^5fKge*aTj8tmB%f##N5PO2M!QmH,SK5M+UlPgC
%b*B6;@lmR*QujAqBh>S%X>5nD\7Jr<693N6WhQ#?id+hG'R'cNo0)Uc&eFitm5ut66VXW+1<SB,^aObmp8+1n(I@K9VYgQN)jXE;
%X5"j5,WD,rXS8`XH38#uAJlk1\fl",'2q@D6Y!WoO+aen,_lfrhhL4SAE8K$Ml;"p[/fQq0.ph7e6f-i#Q2TibpB$Z`Bo(pY\jRh
%Yq)!'T`TPqS@"_9UdOFn#P9@`T)rJ-cjU%<Ws#dfmi-pqll6TUm1=2JRGj7-orD5ZN_gHp8ZBSe',1`uLVq;Td\Jtk5e_DKSMi\1
%aK))(2P^%L-Z;lrV3GVT>Y3He3ni`Z>,Z[8,*4hkjH4_T;i^9\To0QmXJ*.a5hj31cuuNmZ&LjGk)m_i6$fi[CfnTkMng>6m<G+t
%^5#I@%/22)5UrBW"6Q=Jf`Q8mDHRP`/.E'g')pl9!fbIepB9:t7Mgo4WW[Hgo:r=O?kOZDe"_hsQo*Bg4f^&HLhnq:GV$BN+93.c
%4-ki2*)NYt5\H!PM`*(P@Om1i8<c-il660uQEP3cMtGb:l1B?DJr)3k8\"n:K.b3$5ojokl8^%daF(a(#jN])EVc^!5(T-m-=I2/
%Kg+@c3IjOF;Pe*P$kP-J,XZQ7!FTbdF')&9i9i?nH:?`JZAYO>fu6u#:'44#aF]5s%+PI^f`8@`&!"Xme-Wq<Qpc2@ST*$GjDBQ<
%Qt!8d+p)qXM@SMWNPuNNBNEDb`]M((V9a;B0R$*W]m=89b2\).RVZ,g!M(JI]ULhHSN!jd.KLL>rhHj9_U&QpB]quH!>$VVdm8=R
%K&iWC65U/t$F,s4Ju-<+)(lY('Ri_KAp=n_pbFp[Qn7t=^2E*I0t<jE;>fP9F,D8fB4_lna%jl0f"7K?=fc[.0t2-#Ve6faG%Q3n
%Fe+n.r7mp3@m<rWeXqTuP0nO_IH$&$JUWi!!E?pJ\oW<g=sbY'C38a2!L;(k4BO=6mr!kD%lH)LRo_r,O&L4&Yr%'[]-%*CjrO2R
%GmRHU\01A;_L'p+18"ThG!mY!"V)I`oX#IN!3\bqqY63sZ+<$u79Z_G`GAZ1AfbT#k[^9K8>NlW5k@Nh(T>2]-k[#<1pkNj88R9o
%_-%TZ'K)RWF-.62DA6$)nrjgmJ_+!PdrG,c,c"P>Af`5-NE4r.LKNp*+ndflJh6E<EOn\#i8sqcrampQI1_L][V!HR@E%Ub@/rJg
%_N8W\h?EGcV+%]m.52B-K7b4L&%,hIH-9;_GV[g0:\H"5iijKVj[I(J.*_=YE2YZDa.(ji0KlDqG+2Rjmm"ZbT-i+Ui7"ZYVukmq
%d;ciHDn\(ACY2@M^:i4j3RYI9c6@3@g0h@[->P]c,htEVh'Cm_Vq/7oP/"F*rNnSj!2^!YZ1:2S7)Ibn4Qu;Z2apf.4&$q<.Va>n
%(?Zs[(%aKP/-,T,ET5b;rI+Zt]5NOJ&"e8GXT(KUVRUDjp0I2Zr9W/^.Jntrotrt!52Z[;:=u%gRR^Gen?c.=Q-USf_,p4+ClJ$@
%6s%88K8Q_cn1gu`oN;2b8H[OWfFg$f_N!DTaDuY%GLP-9gl069[6h@jEKQWRa!9U;h!B?0A8*7LGF3XVB9ER"8h?([-+07Bo,^Is
%3'2PMm-FG\]miM["&daXD%0GfW0S]S%6qtCaZ_2!)539[*DJ$FK`ENjV_J'#XMtKEBm(,@r(SZd7FAJu=)W!Vm]C]u5"s(\%o\2b
%.q2[i`NTDE\=&!+eXd<?#!])mHlOtBNCI8`mIaNnQ%qh`I5:1B=TK+sh;1<t.kS`UZRnr^ba!Tu5ab>Ta7cunU'qNQ@f6A/&GK=B
%PhaZ7Us)mX3s$J4`Je)7W4O'8L*dKJM\%S'V;l<WW@M+Iq6.=N/W7k-5h6`BX;nT@$<G$8k^0f<n753"hXrM-!:^F445IIIHd3Na
%e;9l-eY2a"o7;WJ=/9XZ(0%H*kngfA1ior?TSFnICYgj?@Dr?n2Xr<gg[UfpoA87cmqe]]:XbA=nq`g=.1.P]Wg3%HO"e?r#@.Gd
%ZOq^.'s.'RHm?6BR?\ZOek\5A3oXZ^jkfD'1U;.VRXdWjn\\E5/u3-V:NX/)/th%tLD(96MUL"1Vm3TqJrsWi:Ub.\;\ol;hYl@#
%;q)uPe#G>l""AKUES>A8bS$a=TLr&9m8>XZmE9D`QL/M+a&@g/:He9j<OGDGfs;r;DJl)Km<F*W0qa#rd4#<\R>?&<6lF^C-rHZL
%'0.c]W5lk_([6mQ^s9%K7cM*ER_dYHB?%<?N0Rl?m/SmuEe&4g_Mtob^#X9\n3d.OC0A(f!Aitm)TQj]B),2,5n#eIIs6]jT_N^C
%-c-MHk1fe5Nc3+#928q<ollSAdNSjfA`i-#Ca;_ME[qsZALKNP%g3YRZG2LLW8_K+ZCg%!Bc,!QMa5>-rUU@^C#/U%pC#o3cI4sP
%WJ_J&,EJdHn33P:Q;@W0Z`M,`ndVl(D3=2iF:6dU@ufr=6b4:'L;oFHD]Aqb`?b6:i>460XsF#.D@HIJW%2:bA_B?-Bt^c/q(u&0
%Y("!ud!8]_UI9'Bp\UQuk+grILn5P]65E/53f]b*>#t.G"[S]80C1H\qE>6m@Am)o(<WDT&'#a#=h>7)URbiQ12Ao-]78ZZ3)3GS
%L^Y^.jU7RuoAN0]-nY_iP(m#WG/d6M\,e-!9,9nh<SXIU!b1[?IF;f+AS?LugY6@KaE,M@"d?``2o'1YB>d3D2X7dmW+Unb3tP7=
%j+Pp>K&AW8'tsq%dBG;*K[aln\JXGb!:G;@(/3HTQn6l,AmC,4(2q>&?[3,5QTRFAC=aa]mDQ(\cm2QJ)!Ru<_\:`>^oJ\Yc^b*t
%>XJie,V,&lU1&F]Uk/tI">TCgC`R?DL?.Ho!0@bELl@#4CQpkRCUg(I\Fqa9*CKV\p)+^I[^Rlc>ip.cm".8[%3n5h)60]J;'E:`
%TI/]"O\K7(JLG$Y.A5.Q1cPJfj=t,(M84l#]AJ(jH^VSqV=Vc!lG["pMi32.UL<lX]2_t5:C>#'"5+>ahL[%mPU#*AJ1Kom"TB[Q
%CTpl-P&#n*p$Dalm)\&I_p5m_>DQl#3git[+biE#eT,=e/uclBJ-j*3'IE0H[o/j+fDMj5_Zcfh67$jDSoLGRR6e"/RAMnVBNCEd
%i\d*l(O4e>>giL<#T0=BATLE%YA\d1[-):"@hMCW"oRM*r:J%!B2jBqkSXrN*cDFd#C]mhGu$Ne9J166gF"s!;[9M.P$Gce&ltP<
%51!m+b_edGGOBoAO8o4&0:&gArej+qZEI_,]Qk]HUM%G<6'41s)fU,59%9=UrH+^T,iJqV0+$X&606j#DBX9Xo7))4QQB.!amhE/
%)O64S/"PG5r-IG=&-L9C<7g)Y0I*h_>JX3UDLn[8=q"S4"GLh8g2[1D0t+]Q`%R!uWQM'Q$:3.&>K!\jkhPR[qru9WroVBWN]6n%
%-^SLsg?f9#'/jki(QceFRDalsa"sR[A<<p#6F3)=q7G%kT/U1sH0dN3$/1+"&[5U.nR4k#(>KDXpYmZapM%[O50_ctLs2Ig5&7Cq
%KY)9soXV)t<*Xtt`OLgAp6&h:4Mic@o+g"aNW3%TAlVTq<k^GGD[5d]-WGem?L)@*dl0?]2SP;_la.b7dn/O6"fbAiHcc1LVYs8l
%6UZKG,0kgf>TlN>@CYcHYIGUgPFo)/p^AYR'lpF2Ps[B_-qWU\O)Mo"ad$'D#:1:N8OAYL3o8Pn64Enpb"+Q%!OE46Gl&jQ*ME*5
%s")oi\fpYUFBj>XBoDXr=jG7H64gldD`h]0%I3i,cVbHeR7Dd\R19Iu!P9L>baebsq$H5IrEu#tjT7Ruf5X^"3TaBoch2=/d?#(X
%']ZlcD?Cn41_4bS+2R*]OITbdkid0i:OPPJkh%\V#CrF]C.rraI:;W<9F5Z7P!\T^Y-:/X_VRGQ7>)RCSoaPBYG^\\n0r;<#j:RT
%T)9HL"Zm5`ZaMm"g_.GkL;[>dOpKo=qPqf8qQ.JRMe6C$a/=KQR(#T%H=gb,EKHO;md%pj5Pb,ZA*Tm7POJ@A.DS4Zg;86!Q<+h=
%R@1j[VrWPg6^+XKmn'!.g)!s+GRV/C0D+;,TDE61!PT`\\ha.M>8+5K*K&ScVnT865cp6EmdGmt3T7Y(k%&*cfr<@SLsHqIm*%Cr
%&^N'+kf<Qbq:&dGlkbi\nX0F'-,"UEGsY4JN@U/f8Fb@*ULW^olf%oEf<%AkX$CVKW2MNBfWu$`\/iAKT+K]hKNnRLf.K[];r[`m
%G*W(6GFpUAg#IETaA:4&j+Is^&q/H9V8c6C*&,=m0dJ2hpW`bfhDkt`q5Ufd#pSBS<eVUbU1K0S`Rl,,)m3S@'.]c@%j)hW07$t2
%PO0U58OJcPZGh$7q^6m?GoEagMi,L2'%Bi4$cH^q0]jlIYcU:"m.b:OTc*trad(SN.MnAmq=<$nJti#-s5XDiP3M9JpIkuL:-nNc
%TqGfF%#QmZ%7:W3<$.c<;m_AWaO5c`9DM+A9^dSBhmrd53aZk:XGZ?fRL#jiJdIcFhc14Ur.l4EpN^QjN%t)bluQVcn1\GtL#@sF
%^BaIT,mkN50>IFUq`jn'!X>]E0<!5U$Q7p`V>-fh`"asOqi3'c>XoK=YVUK)4=T!^//+[git.VJioVqiMGB;g!Bg5cpCN16neiL^
%[[a(\)9t5dK8qNr):A@RdbTaD3SfU*M;O?Q7.)\Q6o-3g0Zu:#NdQ3RT6&/TQu1]NqB641bnd_<*?pn,$]pZ2\@Je1+%a&#4B$b2
%'cR5Wq6Fjt7iZ(sXG<8S,=?M9hX-qOi'@RoOe?_<%qS_$$!<^^,*YLhhe4eYDVDmq#CO/8Ge\d+.[,OqGaJi[bb1a@h8db`m2tcr
%j9P$74NZ&5Munb%8Z';9O2Ld7N+kuK6/-oHY+BrrUO8RNQgjhoD*YGtUC<qQlZRXPT5D=A]TMfSo:LU_,N.;#n1[R+KJ8SP5jhUl
%S7U&H2,ad@FRAWQFg\PE.TTTl&fsWqB*_C^1P"ZVCtthWbMS+SdK:7Fh`P0-;%nL#d].=ZUpEId)%r]B*'c39EcgeZU8&,%_NFD(
%[[T@fJ+DW:`UknSr9_T\&t@B>Z(-6?']naLebEf/^bO.`">,0$QIVhiGj7_?Ls8LccJJBch#GLB\!A`E,'k,d[XS.HFcO,5e?(f!
%I[Z,$?i2k,>D(b4e\I5PCVX_9.4;^Vf3+LCLcQ/.G3AQ`gH,@1^SC5aqVO6K."<FX'H"'p])I$Ncq&EL5!GZ:d4p8C1D</]1hbU3
%MOQjT\Q-$X*cf2PnP*XS+)>mO(iLoYR2[RRAi^!4F=R4A"s:&"9**8aEpV3`U"Qsk#MUTDTc0rKR^D$n7Q"G2'4P1)s5oKbN'?U0
%j(+tKN#JT7.AV^"cK]3OHn$th9A3W,#6!b?Ug`#?g7!n8[Yb%L`'e[Si7-SE<p@Y:_?%>2J(Y.ulDW1u"MKC*BkJB:g6C?"hM$4<
%);HV21.:`BFVpbI(YD"\DhO[acqL;:m*[ciNtM0Li,R4*WK0$fX[MOp.lC`5YhX4e;Ggis?#TDdg]-eAS2aPH+R=V*eHpgd[3;a(
%'WKlJFl\Is'rHKa8jd3;Zt106W/4;keV;m0q514TSd,KiZnnlhY3A@]^r,&8pdL=uhd,7J[+)ZJ!2.(O<B->%ZODdBqkeRWCcD84
%KPLD7K3(5Llp&d"Cljo\P?F)0Hg1'BZ^f8HCZ<>/f6Q&OouK)_c/2FfM;DuiD$'k#e^Z9hk@"P<N8FFd2p92Ogu6NKffLssa+M)c
%qGB6h&Be32j1j8'hDNVF;Ma#%B%1Z7)m#OSMcU=MkJHK!Y?W%'2h_4^5i)MD,S6Ul08:cJI,BT?k&>9)i?BfWbXZd)^g'+cEo=K1
%BS5Gm;gm&hWN*ClW*,(g!.m;d,Tp!j>fTVhUW>)4L!k+1\5o`fG`0+J16V1r3%\37InQKt"Ub4/Z4OA)(#-0NGipht]Y+,*VFeTr
%+[mTJH/'t_&RQfSL+Je,!OkXs"]E=oLL3q2ckl9]rtU$>WgL>2HeRUrQTu2V103g)?p7rRN7?7L!np6Cea_kHfHhjrOeW@.6:(lQ
%$+-$BS)i/<#Wf[<b/7Z@CGml(/ZRd7CLMEmPbEi!;WhNSE*nqahXHB>BrDAKq(*@)os<4WZFAYa98d.uKDSUrMM^s:T=k9(W2IHJ
%SdJ4%+:%F#?;1qacVsA@UCJ:W8NND=rs[q]U?\4@UQM-aZf2I*[8tNM#)$fX%`sqq$gV27VQJo'4cZG;LQLX2!4tAa+J6,GKVWSU
%]fI$L&(-`iQa_L3KW?0!k'`-)%a^<G`11^%6-$"]2hr8Qd]O5qaXNOYh_]bjeOLj8G?S%kZ+`LNK:si0d.\.T&PACR6`*%i8.6kV
%B?;^8[!gTQ0?m;oj(XS'aU`K`Go_h>H:2.+kW)AAQP>d:lo\>@7.N/'M@&SdLFC6ZHHdUjGVP3TA&Bc0pGT#fZg!ioF5T9f/l9^!
%l4!hX27Xc7#9(l^:<$d8TV>7,fu0J%ERH8^g0u3C-Q>e^Sle(T]f9#9>>;aKaEO5W%<=O6mL,DgG#!.0M>?sT&^]YA-WKaKKuhEr
%g"Q*Pg0C1^Y/XNlkg)#c\1SGLQQm9a@2@4^PPp.U"2_8OR]m0FAanr-Xclm@K51Oq#T^+N&Ni&FT4&bU@cM8:'bWIa[X"5%C1\r[
%cNs(LpheA_nBrW_L\:sPY0oAs55][`,h-?C6E?+"kotRhc<qRF$`H$B^JTQ;_h+5-_3%NM;H,h5jb<@+qr7!Dg2i\n@",mQd,eQ^
%P5$YsJY^RC"*98:'$A^SA#658("h4u9.!$T<cq+o[.S5$8FQ\uE"YMt5C1NtT!L7U\@lnFHo6)bDmSZ#,G<6g)K^^&Q)uuLbl&Hc
%]3>k_a?I-P=c<&2gQA=X5IVg+a(Mh+G&V%l@L%s4972SggR.aZ:2EW=eNL/t;5X!(p4U;s;]?E333u&Idf7N<"Waj(gD$eT[8Bd-
%mEAVM%R.@)iMW=)Y41I-)]#=%R4[a=..6[73'g.bQO\Q6WOXDXYQ?fca-K6Es!Qu&\1gpB.7U""%uC]e?X"-n?lX1jS6U%8L&%$c
%.4hKX[=@)gebtn[U=HHAULg6rH@-aWatB6184b5H1+,nK7'(f)\&hap5d,VsRK0U]5@+bXdpr7Mic-'e")7@Dp2maC2>Z.M@>@b/
%I/Q0`7ptZ^pl7VhP:]hQ!!7cXc1d8`6k*a9f1k\kd][!i"Et`g=;+1I+Xq&*Iehf#Dji&E4[0f,mB6YHE<QV#D(,$l/p"UASi(Ag
%%k_Zr=RCA_H;uA&KX:^-Gc/O2McC@@nYks+k,UH&Nrl!s*C?+GJ3=N2Sr`??luq@04Wk>HeCEs;K>0J2&Kfd$:hFFRT,'kHe7hr8
%1:aOS7'j(=)MrE@1uNdUB?`"2LYA%seh[q!QfI5'mF=.!*;:@9m>4X.g$%DbI+;S$$I[1sF*0JE346.)nM-CMoIcOPo37`gU-kl8
%BX2*IcD43P3[P9/:njF(FJRP.6ZV;j6:/:5D!"dXb#cQW+<?E>B=nh):;l[Hn$!;D*,U_/]t74`oT71'Vukkl4"&_rJcmm83^T(g
%nI=p@KqVT[JN5QA(oV185RG$oO-cUM@5UOdUS3YBG4LmF[Qq]cmg'VtN:\8;ds(p='&("U&<P/0*l:Wep\A:9#n\S%Hf'>JV.2SJ
%Sp9&N[%*Rl*NYg3\V+Hs-Jmj^Ba_UC_R?mTY2[Nn'U'cN^$$5.j`+X/56WZgN0OJ(*%NMVq8KSf(lCD(H>GZ+Fn)k#aMC]1#LM!;
%GTZTmfINc='[45f[/)J@'t5fE"19YX_dGB(Zg&JM_V8W@Ze*lrhXT'_+]P0mFoF1YhGZ7fh24"O`f31S4Q7e4bN8^'bF.n1UTGqH
%WA$M8dM^?HJOPA*Cb^q_V]C<nfTJ+\j%#,1&IG3AL!_'8\<*`;45riNMkOu<M\&qC8,t4<Le4bTWD#XoE#"E`)RP%^l<OJIQoI(1
%JM\%DY249in4)O7@!\+(R[aTQBsJ.T_:VA_QSSp"6s_8$fk9PXEY;nB/m#5>)$g5!F;=kp8!C\6=<3@11(+Po%S]%'`B!=12.%q4
%k6g!"2Wd72%#1#\S0f032pZl#8qd+_I^$hZgGTMRC?J9Y&H$R:bR+Q$7tGHqg[q(u=eVUF[Wkgs9INV<-jO7orTT5b_.<&na1G@m
%bI;_C0KJL&>8$"4V274oe3^fdf=_s'*e`5f/]=X&mH+tL-G*b)!8f4=hjWbGOTY1B@Kgn.4;EWtmGX`/Bl;n'=M3rWi0e"HL`/V/
%"S`-/T/[u7(CePu`6CSpWbDf@"`]&4"&\\)]NR#-=UBcKCZRJYNtEG$W*c(rB]DOt\'WsjR(*h"Ec%6.Q.m;;,L34'oOu4&84\]_
%8\FWUNY@63:7H)&1+TO"#VKarO-e1V*2lN6+5/jPmm3uKR253-P+#?@3ENtb+[RWZ#&:,obQu80Q#1^;8FWVoQpjVfF')N7S@B*P
%ee`cH<'5TA&JH5.a#$a<G[htoRsklHR5>$Pa-lU\CXnh)iDT&1TR04'R>TNWFKaOK=OskpnP5lk3];kuq,unA\lb]/AT`.eMm!:W
%&:<hh(W=J]*Y2%OP>#AkEE9fc)E,:_";\u&iZ$8GrLR1nkA_lO7978`9q;-'TS[?"iLP4NdS/Z=8K3#13QD5>$qmV?MYdK9&#Ve.
%[d5\-[`&"K&?4e*=@QDfet'_Vq!KdO?f'YD`u7SM)-<IRZW9u;:29l&VMuuWRVd(@`iK"9_b^5rIkhV%K*VccO>opbR5Ek__$;kM
%>+ta<`Sd!ba!jdGB:.b\Arbc3GWb.$/Et<t;Z=[-\M<Ws#RZ!i)C,YNRBX>nA4)Og^?d%tAHqgR*UE9Elic1a.(u1;*A3H']"K\%
%LR1Tbc=_f;`%VX7]QO.sc;-/bkVU%5$Y9gQTSj`-?96DB9D)%QEqAXHD(MeUgZHDV6rBAPKn8739sU%r;OTX+12bT@.[1(9Hu:'<
%)6#.do(^%cA6=<#X"P4m/0\d]/b5mo;YVfY6hhd?1q7[FcWsQjct'iHI5]Y=oq`+f$?f911kXYgY>Vdtf!X3dq!Ob8>fRBooe5;W
%[+1!hcJEEa2?B#:<9lp(1]l*!%+nKb)Q^*`p^pcuN>F5Ib[bQ`7NPX[M<0gO4X>VL2Y;hI"V%LJATZ:9gBLoI_kXHE<toJMR0#oB
%rmtiDT_as;iTd<h+4]0dNtdT\B(2rB)9m-V.1&nba:BLd@8=bPgMA`gIuY+Q7%6,[fY^p5EYEVYT7,L-YP,ADH(lTq;7EZafFs5b
%Uq[Y&BmnDaaY?X<LGf]q=#f<0'$od24p1Bre)oJ]gHtbYX`APSnG$\_acQ3r)1?*]W,G"D%4I%G>9%2qc3Se,8tU,6bE]o[YKUsD
%%@6K@Zc0A2&87R_Bih>.*'$`7?imR6kc;PeilpmO)60(hc/$def9!U+4GL/jD061i>6B>c$D]B0g@8eN_KG[Nfg$?o]6fU`:Y@'/
%4Y4kZ1)NIuS^U'ikMnt\iR[N5fF^XTY>YRA0P>nghehQ)4'$Iunl'oNMV/(;,\IiS:&E#K`VP0"X])UXQBr;aeq_G\/-K6b&qg<#
%N:75_4U^(Cm1k%_ZhL9=7l0@"H'VFZL,^MWI,%`;r"L*d.i\jd<2g7bProC`g)^huOYd_(^J!>%%-7(Wa88+B-c>-=.NAHYNE8(-
%#o!A(dJ8V!GGAf?X1>TfF]>FLea/1nUCPcsUA89U"7Dn)$dB[_LGgHEfI?g5$V49F7TD2k1?c.bSYf/k`01bCgA$ebNBAt#9PW(.
%1qUCIj>qs96e#pe++K.JRfGRm1*B,F>u>R)P'A0qML"";hHj?%QDo:\2<\#t5R4F.fWE#M7LJg92MCl_kLOD?&8CF!=o@Ts-(9M6
%+--`lB*sQO0HH3>r_@+%QnIQkbE#AS^ojGLFmstd/mL&k[T7&PHK,)XZW8+C6n[j@).!us+[@'cjL6[eK&&lZU7].j+,4AIK6*Ih
%5e&o*RK]I$ea\qq3f8g(?CK-!m)AcB'1>]`-4HEm,)U[%k"WR>Rd;&bdY@d`Ju^dcnr+Q"[?JHcburcU[!:f%Cj'XY(;/@,.DlY(
%[t'*.`rTF.3Eq:`b@HtTQdjR'>Ctc`4\G42flRY`MC>pACfbIoeUgo8qWYF;*o*d)@l=Ws8[CN-1^FM+MARLVb$u9*ED%4:Mf]5H
%hH(YO0<Wp7X])]Zm08$%:,?sSBNmqF\!35(R==D?d#,&]!C+<,=_-!4"K+g4D@9;1lBb*.UIWTk'':#XN6`>n'[=dWnr]eg'FQ0H
%`lU.%GglB_@:!=@1`6S5%Rq3F&QI6mJPmjDWP`+6IWj5"1lUaFSgNCUipc919sK9BC<#>4Mk^aQP]mFeU2E.6&bt@qKQ3'GFUKXg
%*La!%+t4Y*FAA;,/[7gKJ(g.^6'H9?E+g6P1%^$@SfN!ImitI>iL!$)]!m"h?Bi,l-jp:$Mt,Xr6GodjN(^j%N^G[m'gnS+>;:Ae
%-XW+P:mjb=VnZo9l=O6a*1M0Pe1T)fkA.)%k2u4hRO,0&lA#Bp^q&729Mp>u+N(:2[r+>J%QH+u"6*d`>%]p7j;h8pHZlXeeR>sU
%m$],fXQd5_(,[`WKp0O`])H/CQa&\Dgigq)ab7a/8"2\G$++6Ml13(JU[+O)A$5Y.'B;,L'mt(+&20&:c>q(j?(h:]i9KoaZU,st
%JZ^orNd>/0/X%3NJ87]IjUNE.W`:q\3^;>?obpp(_b];\?ak=$9A>@X[u\J#T4iA6\5Q%Z9scnc6R-@=(S?FN%b=HFI&<(KZ"-'g
%BqaA@ZjEA4b?b#(VhTpWCG>&CY8j9C'd>!])pJ]t/mIhc&<t[&N"]<t%;8kbiEVhW::bcrkQhSVfa\T%*JcD5Wl]^;I(>(M_[k;Y
%)F*RO&!!="Wo/=>J-epYkNHB>fC8r/qqXg:JX&5b@k9ON5(ADp1ZHAF!2"=JU-W>9B%dK61(M&pWStY_&o;+uklO6[2AH7OfZq(]
%6@rY+%27kE(<qc$*SuYZTP!:6ihK\T7+o(A#.bF!F!!u=":q@TaI8=.D1L,tB*lH2#smEp9@>N0Achc=6UH(LZnflNlOSCnd^O.]
%FB"BDn_tgV5RhCmXai;EQ*@Bg/Dit5k0R9a(BCRS2ZLP&flka)U`OP]?I[_u/20%D[+D("N;1BVYV^8Cad+2%JfHnfY-Vie[4O%,
%d<Q$UUT;,>fldTOZJCbVZ:Gp;'kksso=31ih<>2#TQHr%An4Lt#Te`7jtaeE0RV8FZAsAWQp?l!M?7'LRjL2MS>9kjSM._4L01cV
%Kr.GXO_0f6=)18M33sRlV8TCXf:IX%P,L\r>dl`T4.:9aS7L."0?XX3<.29kqXTOP/r'1/D5&:#PKAJsQI1q$NhL?@%A+7QEfTnd
%i(rLR*?%dTr'YT5ER;/).Rh!e9%&5+QcWf:$oti(3')ou-?#gZ1/9P^45ma5X?l"('*MPY:"Yl"YDuMBJbZBkrKrXIlAu`@nfapl
%l&_ZA2?I_MYsac8FT/A)#9e<TDG=p?GH)E8"a5c]+=q(jbQ___QkMrs[iDUb;jQdjW_Z8,Y:b^ArpWSBQI2QM%?q6q"d).^qe.id
%VMo'm^-b328i@r.ODs`bM>PPu5nkq)6=>g@",K;+FQXZ5.@W7Wg&r3`0_FY.e"4oU=gOYo3E+Ucjn7WV%E^,Vj,7)gZT"sb1YOYl
%HEgPP]6@W3@?_?;GC1*Q\mD:6#n:AK_5BI,Yt5[F`31R[bU*L9&s?^nk"Vaf]&q*NkL;OUYV&>';8\(Ykiu$63#;al?B!:rQ.VAT
%DD;,X=.q!9S3;3\n3s=d&bccF#`I(HjG-ViW<R7Oa!3t$.=iQAM%h0Yo;5VQC1\dY/Rf[G-8PjCA)OkZK9.e)&BOb2k58CJLMmAP
%Gp6*+gLZdYTt#6NF,@>>EXD4=(:G_%cWJaLjS3%t[=B.4#VTlUl(tRYm;&4jil#U4dekOWFr"BKp$Yi=[&=`j/S1Yd_SIZ;3fVOa
%aeYq&Pq<J=OD&doF86f7ei!M94m=erh]/lboa7"Aotdn_BGJN(9e%pS;FdQA/ek\Skf/#RlN,SaiQ.VH(r85+2?EY.Wc-DkY:b"H
%-4@&MOE&&J$Er$NVWPY+*Af"o?];?$euo=p58)E.gL$]:+@3N?Y.8`_U2`+q?<ej-^;NWAh.fT!SPka*F`VWk0j(`^;2g'EEs'nH
%iD\+O08o2Y=!K4!bTU/KP687f%,$eA6G,Q"'k2e5l_:K`fK!nn7utfC;GKP$7_EQ*gW979rqC/pYKsg@<LE\`.bR6GGtVSNN]8#Z
%m./-j;*bdb<iJ,f(q&)J^`Ta#or>-"!=gd-9?D?G@Uu']8<)n:D+RR1ef[FLDcrA]BdV_cZ=M->AlNS0Qp]-/%R.K_53d^--0S:t
%]0UX^%3jA/6K91@*1LM>@/CM2YQ[Qi_Tg>D;eQ?7/7D,aphH(QXNAqLEe88MFW6r)EEAgJ7PQr1P/:7qAfF!QfpT4V*>8+d7\JD1
%1:\jX/rbnZ34ZJ!JBtl2+[fL%An;M2e^N>QHb6Ae*_[A>iO.6QWmULU>0:s=ZVcfpn_>BL(bL(2I$'p[Hb.>7ID3+TOU&h4P8r?C
%F:t>HH?[9ieiRYW/&Rp3b&/h4AXd=4F8#(QB]2'_:c2A:H<5X&AWmCO(sXV5aql/S[PQhsiZZ(i&.r`AK"X)(;mjlrVgSQHFR+(7
%Y5J&ohXmVhaO/t1!B*he5_hUGcL8+hMX?MWeLpse'WAPFi%ZtV/Gj?,F]22.f*TIlH`>;RC4"h)bt)0qd+_hah[:)9PG;I:9Y!N>
%F0k4&@-]`5lMt6&3e-$ci4MfV>nGY$Xh;4\>H2p(>o!+Vqrf:j3d=q8\#n9r:1@C@CbpGWcGdjTU02F1BWau)bRWP&9.h-"Z=pjI
%jtF:Add53&m&8SJD45uhbKWIaE;e7*!/(9b0YtDf@*mY.L%V_.)0Wc0d4/5<&'Rt7?Ysf!!TnVBW`kYp`i6L)kDW)?o\+udA!<cU
%"8'N-^!)AgF#iddR7t;19C/+BZ,sQ0CWX)'J,o,u/E&K:!IM,*>O2F@2dlZ3ESbcf`N,"&,r=WfJBM,-mRq^50ZnI5^3\uMB#-6D
%)L2WI(q&tZT)DZ\dPg$LCjA-W:ffL*GKmR^!Ks#8"rsbqctjP\T%6".Bsk(GW).Ndj-_R.\nK[2O$"tgB$(rPANM?p`&<7eq6ml$
%+0aFEnX(Q*)jjfprNWHGUs9:Pp-kINZINqeC!4iH_h(j^fFr4-(_QWo\Rq^1?^rQh!ZfP(oV$,&;VUB!''_Lp;<)&*M')hsWpsVI
%6hK[.7SoD$X"g$MUMX$_-Wf'%RP4E<g#%kuj=Z<;oZgX0p>m)T\,qmo5\KM5*Y8A5)Z8.jr;nCg#;BZuH&$Q:^EOULe^cG/"AJ.2
%0e2&7Ar!#39LFDK>4oC/Q&E`?n=?I+\;jr<`\6X#A-(J;=c5n[G<Om&ijDj?9!i5aCZB)#5u61H-R-I04n14Eqq1*%%!i`/81mn4
%p7*O+]%9gCM_IEePr0k]4HO7Qo0fj_3X$OX2EM,,%m,bunl@FjUVnK(GufWfeCL/[7N*edG"ESeeO2jRN58"ge#Om4p:@X$ep%QX
%r3(Q1H]_!*C4m_+p=%KG(PDKM.u_#e/r6LgX\EkE4I<:ijR`5u81UI8+HT,n(V4^ENM<J$l$0+`d-^P,?\6!i]Q=\&[$HB/)s%-u
%VDdV/Fs!V8)8'F+]?5V:(q=)Za0!X>W<Ib-pCW],G"b1[1_WVcVk@W=$5AG3MYZ+T]3n=u1lod`HXgl5P,kdn3SC2R+<V`k)#9C]
%?oJ;NRuqXREt7h[&%<)^C?CZsf\X!_;VK_Wd`YEf9h[GOL:N?R!>*P/o*3..0"IR+1o1T_djX&6@r*s`(<1%BlG*IU+D^O;O1#G[
%D\;1D=;@M=E89Vl'S]c&Rl-*1:3<#=)bf!VK$R0&pSE[Yr6VB"i!&qVO/@T67P+MgW(a+>=rjQc.A:M_eYL=?6,4uH!+en8!MZ!;
%(#)&)e@k[aD08bs,e&MJ7ctB<PiQ9m/&uud@7T(1LE8p[k1ntdcfEk>LW,=_m"8t%_m41:_N=p4R(O\__$l3i[Lp^>N$a!26rp;N
%9bA1mB(]^o(X+$YP5^>4;3%-#eX@Cm!cb]S82np)YULH]1<t\bhQ?,$NFXU%j#Yq\99Ju$V#_\34p"ANlYB/?N'Lgc/gS^FX]X>3
%oVB8+Y/VNpU48/,Kt8OaS+JM1:L2&\7g<t#$4Kt%NtGd%/Cd9h*c7=SLLi?>?DJ"qI&&3P[[K4=U*R/bZ@,;jYgj#VV2N-fX<Y?_
%":II%U1.s5ed&:hjde!c5!.J7mNX7Kb(+%\9Or,]S9K]N/'%`D0daSG;cnXs/^"iCL:$L-:cA:)I'a&"b@3)UF38<c7;;&Pmkq;D
%lta^!_Z!KB"ke-pErjY6?&Ioj3;,@[)Q_X*@Fq$*8"2l'JD("T$d=@,a_fl$3MP2nf23@jW.4QlSh7:,4C<In>pZib+AfjABjf;b
%f[eH9:nI_?HV,,Y?m;'XU<ljKo[ms[U+MW:gB`@oF%R$Q<gM.t/9MquGT(F5Ys\=Bpq-=eWSPY+>,nh[I[?QZ2*599G]am<aNH5F
%$je\r9NbpQjG3ql'Uuf?!]@-sl?V]g-DBfnBTY2ta<I[nBjO;qMp29_N>`/"P6B*s#B:]na[5m@rE,DQ!P#30^5,5EWLe0V!"9Km
%KrWEr^@s)K*%\HAE?!UIA#e[m!#SuDCNO!ERhEHu@hS01J0A"%;ij8reNVUCTRGloYC="beUaPB@+%6"kHX3KbA41;]HfPdBN&5i
%ol)*)gT(Eb!15(hVIo4UZQTBdEt(SgD:muse(Lg>])*bf!B53W??bC.eN&o)-l?]jn&qC$4IVU6Sp:(q./'%!-mL$s.o'^^H?At)
%4XSa/[=PQuneM;2NKTIY7LcGffAI##f<EL7#Z[Qk2RuLr'n#Gg(G"X#Af2\('B60@5*/(b)1MuPGbLkbfH:lN.k]H-q!!=Fh;VmN
%mZ9C+%fC/Bn0imSf:Tk*o(j"J>$QO]8'C3o+DH-")([@$3.[sGor%;dm,/;HQ5uL2eFNGlW*4:^#$9"6+%OoAne9YZ?@Dr]MsKik
%CHqgW$=TDg4H-OV#:E?V]`)o@/MDSnC!4[q?u9o^.C:Zg3.n\O#EL*I8\fKNF3EmqTPiT%j1&;la?>Qr-.1?_ln(:YK>(n%O5k.u
%q$@0V00b**AHsSZ\@DMP%[S3+5iVA2'3JLEIh.O^p(M[U?@N0AlOIee\c0LaW*EYY#+(5XmNQ`NLPN.F]`&=#(EK$_kIQ;$&\>XS
%"@ea0Ihnm(+.pC6U4ZB8?$:/kX%NrN1MC';E!EMh%N\.,o(!H]?!RChC6r"o_!U^h1WWjBd%8)A\qA&N]BnGYI[AZY5k+@@',Y%^
%IfdRs(?*;R]Y+(LP*[3E_t*X72eZO+5E=oL[gs^0H2SUS03OdjTR,;-$!]-e5Cr1or?'&QRQp^YF>"N;:Z-SFs"apf&)_GdYDL[L
%7euWO1H8`bE!GRM%aJI1fteQ500;.Gp[pUm*:`>)*le-SqM.q_rW\GDIf0]s7K.TN4HBC513aN3let'as39_V(]hhjc<u0NnDBsj
%D:1P*"(js[$ker4p_-b;nEQW4"-[O"*Zis`GSh%:lgJ55fmX,?Cj,`3EP]3b@:ZT(GShAn`r:b@_7]VaHn[3<K+Rb?+3"TXq@b8c
%5JZH$_Kji?Oi"d/$s&`9S3[N]\)MD?0J>YA(q+8#_jFk=If_LolQ=.VqZT*@*;0bb(d#t-+%Hk%nh^&L?N2^2Qrfor&>OkV-t84p
%@2uOjs#?1/*B]?.[V3qGBOZ.(##EGJ3.iX),<Ui4p(KQK.V8pHj,/-X4_-8UVc25WG&RLgbj3U5Mp]?iKJ>Q5*+R49+%I2I&aBME
%R(#;22"pU'@u^EeO/%]f_;fcM>lH_BQrcM23Tej&UQ0Wm$/@8<5CkrZjX7:Q]`&'1R+FQ_5K;e4&BMN^$jIRiS3\=iqD1*AG&RYB
%9W.[h(>7;(N(2t&-h,3irX:"(;1jWYagh<a.[_<I_'QF?1WX*MDuuMflVF4<ftduB1*T5d&Ba@t$qAnj4H<<O#:FK5'W!pE<+Z@_
%Yf_p]4cWS:jU^C:H2SW!o)CB1`]Xq2Q?^:d.0Z38#ZOPQ'^P<_-`#VDR]*RucPqUdM>HdW+ku;-D-fSPbST3,)*pY;j":)nd7f[h
%@&0mo722lpogEm*0"rU'%kBt]m?G)J@YIpmAWC4Fcqm(fAo>Md9>hK\8rh8!UMDj6"#meOAb0AW=??]@'Jq#L*/:S0^=<NfV1Ji^
%l.)$!T!dU6AXNGNLcJ8kSDTWp<[EjS3Zjhe,q1;]5ipZp3N'@r:.+@<.<[)e"n]paAt3bE6>Wt@_^]m%`E+"tLh<Iqp\bFUjK'-V
%e(Sr6UPuD=mkc408MOcrpN9"U<9*ief$E"7Kf95:5`)@CIb>OVCP?4I;%khdmFZZ(Cbg3C?mOjgQ<F"l+7VM`@k)cg+R\*t?VH)d
%oNE@-YXhmLP?sFKfE-'ncKCoq]ag1#]d<9'@&ZJ\;t[;M2TKhb/-#,,ckfR=%Z+:4Ss`B<+TR?$c:BhEjQ<A&X@;j2W/P3_H"['V
%_G`/G,%HL276!?5i<611#Vn,$W*J7#E*Pn(D\&aS%ICjU6Un3-82qf,/!s/$Xs2(+WmifPO^$3,<%1el*D:t##!5.%8fhoZpg/?Y
%Z[#aX,a!,(\n0&d7MnWEO0*--]UC7o+X>q4KK\OUQng[-,!IT;,gsY?=sZRicN^^Nq?qW_7*,!Mlj1gmVB9b"D)99E=nADVk7IC%
%L?lRcdXa0<Sj-M9-El8b>O[0=;AV]bE6Z`l6s7m7>'n2HO*PLm<\3WD*CTC?)F,`1]pdA>?LH>SKD<9"S:dF0kg':if.d4qO"gYY
%IS-A!HfAU9QJD@[Rq>0MEpe^Tq?00T?;5D`K5I).2l'lmDB>%:\3PFe*/KjcW`iYnE+sZY=QPVlp.p`,@XJ1L*N^*uif-@/AK3Z1
%1cnm8`CSM%!5eG=:r<p<T1T2i84hF+23;#X>R5q>?AkrJ;f-RglYX42.7G)+/!+FMAT!XT<IT'04#\I##Ymc?W.Y?ra+4pX<sa]q
%WU=teCq\3mOY>Uq/!U/7%of4d`N[k-&tZ.X1KhGR*\RKt*j"(,n[tkQ=hJ`_Ve\Yi:9c%::`5[I2>=hnP<Jc!Y&'9Vk+XGr`EGmS
%,JUX>WZ(t:DBXOS:!tuT1Gtho`Lq63(5h07kOg$h!H5hR*JH2qI)=kdEddY.VBb(pUCH:Ar"^l[fu=m-)ZuC7W[Pl>IB:upWf<?T
%SS4Y.r3QTjNLO/@/1CujN?JgQI>%eiAqf(Z7*0Q5cIIeW']G;cC:Q$K5_$u+)^[\LYY/Mga+GQ]Hg9OnY7?;ZK'cDrSRhp>O-f:&
%!L4fWZ;8Gorb-X)QUO<uYC8L01]_IABpf1dWUp4SAA$^H-)E.$\F7Ekok;qf$)Q&C)SVUJh7pn=CGh49KEWPM4J'q7UkZ1"es\Ls
%nsc+[UHn:$iA*8lMeWiRa,36[Tq'0hecJ"g8s1.lb(>=,P-L8@Np-I?>00U8<LXo]auBqW.u-m%Q\6Za`68C.MQi%[^!jb4,!b0a
%KUBL&;KZs[@G-EJGHI8i`ro91J=/=>r"h/A=?!-KI?hBRL'Job_59,<n_K;n=7\i4kr?9%?A(;;2K!&)pfn5Vg5&Fl/ft_<Q_1G6
%>1po\\gF&n-HtTg;`7bH\'*+\@WBK%-V&mkWTtf+4E+,U>:uqjBa0MOaQK150"+^28Re?THdeE)DT<NJWRMghqrRl.K2)o.UeNpC
%O4N1LVo9JZoVc&iN"VE#n-qQ@J^uFnEHndj.<O:&11jX''VbfCI;Emd!s5?RL]`;_'H=crN]0_qb@e5+#X`e.%h<U'Zo<'c)X4p`
%+%!<RBBCruGkc0g;$aWWNs-b$:#7P\D5Q!'66=^YIAB88.cR746ql,9p?2n^.eO5&TPXpX^W5fOF95,e<h%+\ddDXE`>f'LZ:?*Q
%9k&(6k9uV3P*JUm"+hY^i""g!$qT%a&.q[f!3hronaG&TG+O&[0imJUQMPE!7T.ufH:?Yd.P'(@WFOW1bkl:/!=Q$g8;6$pP<C/Z
%4O=X?%rdPe<5H2$,)ta(5<q8.&SF.Z:>A<Ir;(X9b$E`!;;gG4OA9YYl9<AMOtZ)q%_Z%B_c!):3K"UmhVG<;rnZQOl6%,tX!4[&
%Mn5[_=q,]p=efZV+^u%ga6_+#4@BIW_5P/l8<7<Jf55e&#o!WrLXj+3]lb?IeXIl-V5Tm:JRjq>r*Ts/3KJ+EUd:uZ.c%[69!9Si
%88MlSe:]"+4M2%N,nuj8^_hNoK99F#l@Ai%n-\ZmOWfBPj.nt^N/-/2Wer>@c&@dY8X!T]YMS5Zl6ti71o!4YWEs[n9+USIhuT^D
%]b-o:7nF+[>mbO3J"X9.GLbk6!IX+"WKsHnEeq`"nM^`oL(/m#P_(Z'eOhu&d,$@[WO5hfn\[O9%#JrbJFa.9;JL@k8A`45VCW[L
%0LB:C)H"Tpgc#Y4W40rrWJMBIi?F#gQSqEUNcM2D:D*%n"Ql(%71Z#U\ORP/eML85gL:\*/l"Du`>V&XE&AA\.GqRqfd&/hkQq@@
%aG/p3LD<Nnh-f7<b+jKfOA[m(dF3![^MCRuZO^L`4)qTL8mQ(T[FdDQ]^&E1`29N!EER,<OHM9HSRr!;h$)DmnKkQs.cGNT$,'Xp
%?s#(afa0T2aa$o@b7%]%`JhmD&'`Y:\AE/]\V+I,o69l16!mWWl`<`iFJ0Rt+Q#1L$MolX#'j"if5YD0*H?&2QPpI);B2W#e5E2'
%9Pi;\=,21k=95ULQplIZ[GZq3:Y?+.B)72"^g9gh%'3_2XOZ5a[nkZdr9Xg6JL-GN[2o&&cWUkWnRq4oQUTe8&?aFZS.3="n2")J
%Z0Wk)#SR>gcB9k!^h7HiP'*;!-;6;f3I??:qlE6&r7`*Y_J/Mc=VXUIT<KgOr&A1h(j>L"gOeXh'@qlBBoh!b"s,sG@2O=e3?*T8
%riDC$++M_a+A2-VV.#J>_mTc3,%mtdcJ$>+%713C=<(j43am)K=$'o7E-FNTGE=iCK]U$;nq?CM+!^:L5:62mYQ+S0'B1XM6@Cl&
%2.kOXI+(u<l1j_]Ul'(h+C0G8FdSah&<=7JBaOui&dY6b\4fsrJ&glWL1(<]LBOSJSUbkFk+tb,#S,"B1up':"]F$mEdN\5E(p&]
%+c#E$FB:t(M]:29g,>i-5rp:`rTm,sU`Gu[/B3\u-!sP=Q'-827B(OVSq;%,e]WBQOO$\+p09gD.3^dK!0OVnCK68OjpN22s36m;
%*8gD?pt5WE07NNIJ+^:S^\up%qt2UloDS!i5heO!Eur)#l2UDA5Q<COrQX7!qQI[5PJ@%=^Nb2*^Mj/Jmsb.,r:ln5rFboi^VkUA
%nG3[AJ<H/]Qrm#ll1ee;!lC7Ac7#*lAm^5IUCCZL\EXdcP;sH/HOlk>:7pu3[@d+)34t=^30hQ^[o"l97"L`,?mWoY^c%"&U%L+M
%Y'p^<i13W84m\IT!@KYu"uL-`DfD;'5&7H@LmU+e1Lh03<,kQfk&%"l+*PX_$e"V.(FY)!(>GS=gIMp>L'&sih/K/(eLW/prisd^
%O1C>2.&7'P2/C]W9)WN4V!`%<n&ABG5>b=tH/%T4LRn&jYS><3C"PRIF&&tOB]$/t_@'O(>IF@_hq=2D^?tRW_sSuNgrrsA@3Z/d
%g,CjL+`MdK!Kdu3naUMd:hnst'[to^qWqYNgsTsA\prHslB[<%'I:jO+b@br_Rs"n?='&"*Ts(dDRt5lR,`"G:BGg?2oh!H/?FCN
%,IbD0c:?I(09E)G=?:1HZu:;>qRG:Y$o[NB(/464!R4[^/8rcI3?En/h7IME:QZE9PWPF"IFqb](\c+)'ECodTkt+KFrhnqgLWh%
%aHc)H#GUldY>66a13rrsE6H_?CM5?)QdMi\PGd^/!Sl.<IJd!.+u4lWH/K3]5'PMn3XWMS\Z4T4YL*%m'S$Q"bt8::#8]IAfV"DW
%inY&,^XMGrLV5[>9W&Jlm[IRWND(V5:"jo'A89aiEpe9McL\KrViSI/_l?2mF568"(gt7*T!TnC%W+ZXQ_nNQD*YrrTh"SEqXedr
%JKb\Oi7D6=F;%n]6DpTO?U7O'.rNYY&>3QDIGg$%3dp_#nVoC:EV-Xnlol9,(1Z(M_'"r9f6:__'dZ;ufCS78e)q5<3^!D6Y5US4
%r<rPd^]!15QZ`0$muDnrn"]7l^E2h/fDkh7VQ^$cbON(Abe2p8LTrsQ?&+8Hi+,sq7a?Z>f0PuY?lYl#MD`o!-P.L8qcGH%PX)oC
%UK_o,h#M:A;\5'0(TdpZ:80oCCJDBq0S8+3Ta5$fatPc@J^8,IJkK]"YdZu7(f:QGS`4f^H#1mSM'p3=&mu\h,UVO$(:RGf:g^_c
%;R[Knj?i*@R]Lg?;qMu]"gkms#KosqafAS=n.<>1p@E[WO59MTC[Fp[a4A`\JrYU@OZ2<cc%NO.$.?"'>M3hUd!$_0NW38hA)qL1
%IqX!'EN_Y>4H?Ta\G[2-[`G6UC(SZ%UJ`Qj<)`8*BP\oEj)oFll*Ekh:(HgXFVC]efSP#bL+5X3ncnr>W81_<ILkje(ioo>h0/Ye
%@Ad.]Ck7E=E7i>r%%tQL*o__XD:3(^4aYL3pmed_2Rg@`Hedp"f_fX$Qo>PQMHRs,'Dj1]!e8BU2TuqC6"$Y%U#,M<lnL:(0H&P7
%s8(!J%bb"]@`D*YeA\;k\aA2r7r:XJqEc0Le*5>:D=joe%=1.i/Q#pV1*&R7'@n68M'?D-(fpC"aPh!>cQ;h7Lp!i%HR4[g\uH,C
%Gkd6>;M6Xj4Yb[Q&r'DnI(,Y1IFp]`-nP(1`dK:o6^[Q#AAnqFbq'F7`'hO1@^q*UppSXa%m-j,bd-a;)YP4IZW*UE#r'I48366H
%',+SUU/4=9_G.40+*WOH#om:b'T5nG7#1:3S>OLNJpV`Yg\]'jPYldLe*"%Bbqp0!1h>%$;lHXh:.B7:;mg!RPJN2OM2@&pEXtsm
%]hY1`m(rM31qM3DM:l<pnB>=F%K-.b<9JV.q*op9OukmOqV4q(*]&THO`6J:`16If9gWsJb^?lQXC=(i+g)Ekl1F58:,P8;UhKrn
%66]/Dh)1fN#'4d$X;jPS?tk<gqCFRr5'td*>RSb^_Tb_OcX+kjGRQrKg(/boLMO%YYK7/*CJ'h0qgA7=HYTlFQf#I/]+o&`1Qr31
%_%$Vkkt]'jQ6.("R__pPYLhrtqtY[l@-e6H+Ae9RY`AR6jT:5UjPXt^\&;%-`(<9lc5.8Us4*Wa\2mSK:/D8c[t]3ANpF-ABo#<-
%eHJ6d8f.fKmY;?7W%hT6NcJfu8G>:.-&;qm\74.sFTr+l;WBJ`iUb^15t$f4(a*%aRY8p\L?GqeGC?k#S$U\b&1Hg])5i0lCfgL(
%kQ'+j='B&VV^3V7'j`1BXc0**o79*aaF`dC\9n#bq6:Wp1<i7oes=JCbpu?(%B4s<du52ag6nI2i's`HgXq\l^$YId0!7G4-"r$+
%49X:^R#Dojr':TnW(7EJ)WpbWFWA%>EAd7r&eOp(D6M8,G"ZQJ0&k)605O8t2(pr7DM;dqe[?/^jL-@ZKu4g+L!FP5cQ;]ocZCpH
%\jeiZ1qajZ_,6[^ELHqiV0&203)XU@YLDZqg;KM;/j%Fr;9Mp/jh)0n\%@BL4ijuXo)d_5p"@5(WWi_HA#Id.^F.2`XXS3X6(;2h
%Xm#LQ-BXB[EoLE'cQ;c+*2rgNMQDs2+_J_mA@gdYjKsE_G7dTT(:,.>l1Oki2C?64Yo0sD*7ZUg*:u:TaNV2+d+4*\$.YS1T0;<c
%KF!LEBT7<-c:.:-V:k^$-/t.2)&/fL7E@.c)fIccnt>.o\b/e"`HEt_o\?5?3,!gR#S.93eqZWTbGs*=YLdCt]*@?-?8'<pAMGe<
%PCi&>d'iU^0eW>'6C8#U?Dl*jomlULg\%M38<L!I$DpY!;AS"BN*nfA!,UuJf=UGCaht81HlW@_)7HeUJN)&$Zi5Z$(>cab.ke1G
%Rt%WfB+MRD%&JU8_s(ZM1M@8:k+fJ">ADNciO_c%=c;gj:7j]5(+.sW%3LS@`1TRgYZ5HD5BjT&ft0J+&BY[j@H$dJ?CsCILeNm7
%AQYsR=An[t_XUX#KS5G#Sas(EM4$YgWaFV+qWq(_&QG7$P5=<Xgp0I9*NA,0VY4VB@cH4-a\jE]lJaI8qg@\%TC9A"<6ucLbh`0`
%MaYApLu/EW?b7L]?Ug/ah1CENK+BOM<r6T+\N2_-Kf>DfOJ5)=kX)#/3sJ@S]h#s`6_=/&,2re\o"JF&r)2iZ;]2kOicqE'MYD-u
%6X4!m_$s%j^M'ggPtA\j,Bk9[W7lZQ:Lo02[4C7sATb!V>D`-CbGFc<0B-CF_2$jo8[1k_]q]a!5Y9DJ=hb&Z2.\_Ch%-.@;kE<h
%mCfWO.aPLjTSdhk"LE&F*Qq!8cTuHfaqS9B^qFHG!osfn=t>`Z^!l-d=BU./45cY%9SBj:]b3$gMX1s3bX4[8?JJhED$Q%]>\>17
%2\4,,Vb\B+gqrUm6@+==3,3,[15t!%9KV,1Rc,iHjEe<e/^9W>VL-!?He;oB.QdMGFrg5O@k67+/?/<*;C-+^>_1S^&be>7nu1m:
%_Fnk/3+]s&lk:tXS+h(7%GIO3[&S8/hfek_5u4XN`'*pF2!W1+HYVn%2FK_A;9^4T)$@XtK>%hc8`g\tl1N09`kkf:MT[e8CA<#X
%h:1qsY5r:"g<&+UQja`]>g*P!Vp?`O))]4`hc>qkF3kKePgR!#LuEcUR?iVJ,FtZHkl4K0a;W8a]fpeq;qB3>aVU-rar\W=IRNa&
%>H&/rMLG0%99c)HB>cXGSPGe=C':o^3mAj9BBNF_BoThlG;pB_V:X]oZ`#Zgk1(_LG<10CW4V.[(u&XGVTc/"pBAYM\*Fr4a1a'l
%bs>,mQ#O's`P"I-4D981N@S1D;:/4s6h**G+3?Ym?6BI57sYLbB*7X\%*O"25'tr*ctbG]9>_es&=X'N3#=uD"q1o!2@[9Wl?g]*
%h<XaU_qm#2Z6kq#Y_V9BHpF#0hq4572:0:Z8TfdG[aSlMH6+9$e%enE-@2qdhnqlA"ZSqima`@jlm%YuLK5S1gKpL7lnp(9A5_1A
%\IKs!P,WS$DD+A:fMS+3bVD8j].9iKo_Ro_%m=*@4+#t^/XTN=9N\I':EqgU7nqY+dj`0EUZfBtT/u?%40MI%(lFaK!XDk,V6p^p
%7\i/%lK/l-CS5a&i*&a7l;K6_8oBA+FgeendiDding.aMJ2@^PgkW=K)%&e/)B%m1G,_WN#Ojic,;Y-jde7N/OqPO?gFX&SC@if+
%77FtLMme1e$K'l?BJ4M4`:;N&iW/]?13)OK9G&g7;a#469nU"GA:!p,2frN;bUau7aq%EU?"HO8+6YKd@Mg.b.J6Jk+K!?qVnhZ!
%,14=TPRg$i@RR"Cf&=5F!pSN/F"6/L3_C^=GC'5d\;!6A23?*Ao<^=OnE-,OnBfPR/j1a9HPo3WB':P>Z<Eph:8cDZF^55WUaB!?
%fd\7Nh84.=c!R.JG-f&,e5S*].^*@9hfS_];5;.J@_9f;p/U:]HE>*sLB:Lqb#D"UJ)<]?YhA?Re)dn@NJOF^qI3/m%6=VV3sFBX
%KY,7$htt3gEpC52YRZ6KgKpL8mT%YX!fC)JnJ8dLVT@,.-EVqOIjS#=^O*S6)9otGhfekg;>5&?m2G4n[U*qn>W?5eguMb8NoVIX
%`^JF"K^8+!qWr3?/J)IrHKQFN&:Y:`$nP)P=kO!lqW-;K].q`C=U&Y&!QK=EIJ0n-a&*lT.a2kig0Ra7\`dn>Q6Uin=)WH?YBZC.
%LN:l.ZU]G6h@\4SbYQ!%*6L#R0b1NZd/HqGd)2u^qL=?bn4f6F+7h[0Z7N-qnq)Df;J#oJD%u$b8?Re6?;F"4/9.fLo_Roomu_Ml
%$@a-2)t-FEpsh])1kg7/l=9/gkHAo98s8_?]^>@%_^=6roh(^[@rM>RAnnS+46sH%/cuJm>Jjf%W4#bH.JGlOqQT_X:Gd(L]bq4F
%ie,dC0NFP;D9p@U"@(,a,s7fN"ZLinHdK_<C_Rjqr'>"P(@Ag_Ugi;]<A+?=l)@A^l?;]HiEZ+OT?eR#NL,XlC2JfLPYn&>6>GLO
%C/ienJC*`2W-aJI!1['%He[km`sqF9Ouq/jj'B[a>PF@0Jp'hg$u3_`YjpaUA#5Tcm\\Ir%f6oWm$#)EhsCcg:\ioVdip^;<,!Qj
%,bJWX'r6a[Vd]#<`Z<7tDg#(B0`KG^dhGo]Tk,sC?,H7,C/[P8F"dh.n:Y<;2Abq5[mOU7XYg'rThZ*cO($jk.Xb!F`M5_&7o>ZW
%l_Idm/`E$L(G-n*k.Njs]aoe(pr3nC1Dm^8G"WGWdQBp*!LEYa0=Q\j?3Vog'[VB9jDZC`;'Y=(X_O^]R&DN$O@)aJ4gg`bMj_>0
%O[=^Y)g<)*>sAqrd"2b%gn-U5\r2S@)7!SaN0F+B#+,l]_Z;!;(kgu\.C=u;cV[J0'1W1%j0W0G_sd*2s"L+j'JIUApbn<iWSd/o
%c_(-3HbKf/!3C!+`EsG5'uT:=Gn.)6/G"RJf`\/`+=Cp($l]cE326F5-?sR)^c#>K==He'*s0M:J4"E,&HudFN"<1)mm6q<Wc6=.
%2%9^?aH89h\lXqR,t.D?PXD<BC*"dR2=ogN-,-Vpr`&G1nfptMBJQ016r8OrGXSkQe"`MnaS'j'&=:uB-a=*b:M/d(W&RmUSSX-8
%^rt!u8-h(&fUK@"n)JiZBDm2+fjT/nX0u16>PZA@[2:a\)1_X\@sF2QL@Z`$H.o#`$2&6j7$*lL`W7NI6u),(n5Z.6HT%RRWj'8Y
%WT$'+J0]MJ#:\e!?0W5FZ&oB?WhCp8@TKfpR*cNSaX!/=8qs,O!MLt?S^9H<eNK-TPYXKO6-7jl>pZb.cU2s#JK"Y+]MTp0WHl0H
%K:+"te"F3'@3n=K7,,\ffSQ!?E-LIII3OE$9]`O`ra`t]R'gPsCAj;\Xu4-+Qike9j#9r9L^_Eu<D)Ua3P!sTL%fol]sbm%q\H]I
%$j#eIqW"fR?"9!PX8R'"4)T]q.V#\OE@Ri`IAhqVpA3iYK<`<3<\#bAf[Jd"^ag\2BJ!Ah#hIN+!37h_NpJW=V#Sg+ZU[.^^^;\;
%QgSn;<+RTUD2+"rDTBp!p:GNWB=[cm'X>-<5'bY[)THYq3ZWr4E":B1C?s].1.QS*&DfZbhMd`!n$qcVa[;p:(QXZ+\^UrV=B8rM
%U3+tkhbukS%&g2iFd5IaenDkVG5C8sY:YDNGa#+;U@u5Xdj]#kI;G%=3Y*"8$mJgcBLt;][a-<3RP@+jT;FAOcXe%pX0>d:@[*](
%`Kgmcf+iCag3TP^^$YIFK:_'M!!G=fbHXbDG2#B7%'6:g-qh8C+V@so\]O>ths'gU_]JIPe4SNN4A]jk%5(S\E-ujiV9:WM-)iUP
%TiA6GaC;d1l][*`I9/-;=Fm=Y,WO&_*luLbqCE-To5/FC5_Sh#KT#!a]j@<nCo@`q<\fAt+CSJ`>E]@GNaWH-@]K?c@@&KN?:Al%
%o_Ro_:QF.(Ndkfn6fFa&i$5[)AWNp]/p#t$9;:!KI$U6cT026b)@YE3&siVE.I?;W\MsS,S'?%4Z@`:53=B.^9QRD`k7/CI,KFE4
%KtiRs^bu;q,<uS-U=4d2\Uq\a.B2lQRE^)l5'be/+60DZHG%3;?=T1&Kl,+E>jE+;QHZ+^Z_'@@me$>A6-kB6dJ",]&1_,K'\/?N
%%$Q@_]nHVi(!GUfY<@HKgJ4A%lCS*+ZALU[aab[b?,MHT\%t8CmR&kCO$eigY!iR<+gFN+A[WBC(,D7jFG'9=&HIY!S"OL:R_^Sf
%fp98c5Tq0QVuT.-a-%0CNmS:a:e!Q<0YmRa6"4&%,BA^@J4@29?rm"F$4O1^-bmjG7IB[0,:Bs)6$D02q@NZ0f"\Et%Pj(\9:f\^
%$%LsO%;\'T]`=P+Kj?jcg[F_om)d]PnIbeCfTT.9K"HgpM/h>=\eShF'X--o#:-UVMKN3WOoV*6^2Vig+,YmSEUSG@JS@GJ[qK+;
%.fjH7as]J=c#uODZZ"eKS!LhsU(VaLdq=^[8*`uBScV$bE3=#0f<*9MY%G":^&,&T^=hj<h=g[26).,H=FYr"_qRHUB^)WDQW?IW
%K?=ItHEMK(M2>.`kbcgANuFL@#WUOa7IF0B3#c(@gVhO^".ZMBal^Z[TH%7%A@HtNHdpF%*^#rL",&b8iV!?;K4`3[#>T.LkDb50
%&&%CFj?7F-IJUI/(g424b*tVIK%AQm%&mEb!d*6Oi2!1SN\V*"4.SQ^fNT:JAsNJhB!0W'?mQ$2\dhI!Fu?b\Tr,N3bjF.kT07(>
%7NG`h:X*D:/RKZQ1q"R:JagP2?8Ck!nm?e#8ep7Uq<UuQ@?<FiXhU:rd)Y[b>]K5$loQ+on)5-8;2R)\h+afn*q]\4de536i&8C(
%LP9<o[jUjb=HYgF.Q:IAD]:C-gKpL9mN-GM:KM@II@*MQ7SpIp%u;5]$(#Z+JMS08dG&!"4)XVkRp*"$L_aO%RA6f1gOWaG%Gb74
%%,tbjBt#[nUVH3hg#Ifk/\k_;WS1Pf5\oLRO>%uY32D(.Gi/eL,f]4tK\Kh*4mk?7LQ4<7TtMO5Fa+ItqZ.JPJEt$(,e4bK:4[>M
%H,Vk95(2(9"1qcd/dN/0#Fc%'M2(P(6e1j`p:cq$#LbbNLc<"2He_S$X1!rlE<3omg8;+qMH6h(!utE#*<JLr9ElpXr1H-B5'PMK
%E+GU(Q2D42'N/P!GElE(WQAYVdSF!>UpXS+aHCA=Fhb<NAo3gs<gm.tTrNdH2P9Esd'L_q(OG]7Mn)?25YZ]s"7d.Z5QNeEO97N.
%H?"!tACEk#lmZqE'rFQ+c,>?>@]$oOWeBBn"!K78"5N%RI1`Z[lMON$V2-G:2mrN!-Y5k>'@FAXMXt^,kSZWp`6C4OHHS)=1XN#o
%Id(?=C)406bs/%-)bc]WUiQ,tf`UJ!h!A1n]&f[$7q&eoV%I8m('I4KmqK\G`h2]KdWr*kSWBSRo/B$o$j]H+%N-u1jK<k)#&>4r
%VfMI)l@>Y8(mnPg[6&=])h?'L'h]aRb,4bf&KPMucq,n$?H>)2KcQh9HlM!L_&%>N*m_j\14[<4WJ\6=:\J0/ZN+4T3i:/>^^(?=
%#'%?\==?f_fTLZh5-&b?CGP[Pgb(_rfMa&XZNH**:&QiU;*MLkiTY0X!GA,N9&O*Y.cRKg(5hSqX=R:U$&co.e@Ap+jX0FiF;IU@
%*4$;dCpTs0H!`J3M3H3M@(RO\b/p3b7U5Oej+]Re(.jCb--W<FKCW48qA]:(V+c/477^7n*+;[%*jCW8=YEOj>O/M3E]q-b;9?RG
%@ZX`E.E:Lq[V#$-+epBdc\LND/0^h>kl>I5&8BGc]H@fk>3D=c?ub]&p_&">NElU#r'77E]);2`?.r$?JDsCPs$b-NYE%dX8@op6
%iE0ldp=)TVBBctO(^b;j(.G%':K<sO+Qdk"]]Oj!\T)U4'Q]AI\.=tGDEMm;nX>#S1:V&O"p'\4c<d$9<VE?Xp924k*@PP>HB_Z;
%U+\=q]ur$1K5;/H>b26,-5NFNM<[qlZ/lrkj>;c@L,^]1L4VHWR^<-oC!\_s)Pq-U=k9hijMZ'XG7Qt+oS!>EX4e"SHK[]@C!ApJ
%``DPt`ZVT^dGi:/PoLHXW<:XX1"aIp5*FRJ7iFlW5`oSRGe&=0J"o_*6UUl(r85J*W4!T)/BE;DC"\Z,juPb%M"_O3a_c6Eq9anJ
%E%WRsR[qO^JL/tN=MHse^OIt>R1@JVcjR<mD>JD)?]g<'-&fVBR7OqO"\1.f*%BcT%P#F'bg#eM(j(t]\HE!rIRrQ7Tr4c-fWPTi
%'ar@O@'?#N1gn6m#63&7*/jNJn%Oj8_,C_eh(j"(AJu<?89^*cH59>>D9`b.S(1SW+-!Hs1OskK^O`(ij=2jbYZa"7Uj#5;\-M_^
%[M7FT_kB@bFdd8-eLAsp<k;cWp6#g%Foucsm6^Yboborli8LdI.]tqs92A\/<q.rjU*4:\'85]DfNd"Wl2l$^=i3`jT%R(@E+64g
%TUVY%fsD5E$/FFKM\6dGllqj+<U6#W%GE9DKuGH^4O/eU5T[Ha?Q,bQ;Sm?5nr,kd3+[8?U]p/T'hdjJQQ0da2j5Mk#3la2RK+04
%0t?$F6n.*sJN1a'k,^,rVgZFL6@anlS#Fl#3D)j]:X.n=O@#!f5ok_X8=O=R9j%]a$I,Lo(5#o],AZ4XB"i<#[)K9\D02NW)X0+.
%QE=Ud+GsUZ8HsOd[SIiF0aS?4B[4i:2S;<%WSGGZQM/K"nCfgR.eMQ!%slj"h>Hcs:N(aLpi@As27Gf^"ldRpg]TXo'AFY5s5ZZ5
%H[Tc^Ue(<Lc-RJYDEHp?5J&(B5Q0Om&_EZ/'[aap[mg;kP8b`:G%,6_2#ZI(j)Omom1Is"G([_O5J9MFa(I;%IY/<g,d'A<;0(ch
%fdcG@hEO),AKp+og+JN<!*+_^NO)34(]\U5@,Bu>n6ea@'-3k$SDtk#h)8n5lq,MJVHJ+kpfMX@TYk*;$H>-,"6pM;$1S<*0X.B_
%N^Tbj+bRu"MmNGBBrH=je/F&np#/\e';XqTqP4jEQTM+`(!S<?!WMcBY:,rJ!`EMjV93f?4'm[2B-"jAl]_Q6-OiIm)1t-<P3KM0
%R2o?FO1)?$\M.+0K8jTpUm%VTbPo*_9N,Y+@tRJ^^91OSmrkb5\U!ksE$+:,;)eSf4BgLiDbT<5Snq<T[,=u$r=ZX<a+F9X+$+*E
%G!]V<=rfZ!qj#ET.I!FjS-=>Z-YM0Ah]5f**J;*):\J/W!ohiY@6=$io_R_Y?TXfV#=h[3GP0-Yr*9UaYWlo*P53scaEbk>Ca&2Z
%^>*:OQdteEJ&+^5N/8Xo!=p_?e_.)M'8ko$>QBHhYZUS<$b;jcYUrOK5N[?b;4#T=7R2'%dMRUpT,!<J/%XCuDU#i[IrjX/fCIuX
%8Du@:;4LLg^r@AR:gu4P>M)Wt_tY[A6rkC(QSh_N#Ah"(L=Zs&;po(o]P6[dX_nBD7q3!Yl_IAV=^0683V8%e.1UhX(sgs@An3`t
%8nN7_U_*MT90rJZ1'i6&n9QqA#I'12?AJuFYNBRn8Y"ZWkO$;uQC=#71s!do?_IYgfasTR#c36jW3&8q/2.7S:h;:![Z-`u[0AgG
%TCMhmMkM9k*%aQ?D&HJ"97e6[:5IaEjmAi@hdbBk(*,[PMp`_[a\$=tG6=!5@Gn`ja>TD>R:S99Wi(5e6qadle1G0c$3bXfHZsMl
%/Ph]&V#5a]NWL[oeIYq$F)nOu/72?sFF]/BW-tk'r8q=h^0eQe<D6KgX"@WiMBt\C=.sU^4kI,IkQgE3T#J>&d:nU2lZ@EbHh[@c
%UF>)pSNQ3u$60d1kZBB,H*ki\Uq-7sI;`9W,U\0e3F_Y`R*4#MqVbHm6k)Qh8s,$/"Mj^?@cc9S`t_dSg^?tdC8M,o_*!7uUl3:D
%-!t/Sa.#<Mc">h;7cG"Ja_u+tHS_/3P-;pT5=?',rU4ZSH2RUorpBPHs7NSqf=,+9s4)&er6LFY5PpMVr9I_gfAHMsDh%W6Dnc//
%YQ*RJn%\_qb?t8f4oagI*.Rh]f>%.35Q(6DIe0VDs6qsspQ'"(7H8taqm1eN+9'NO?i3-m-F1b~>
%AI9_PrivateDataEnd
