%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_green_apple_bw.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/11/2016
%%BoundingBox: 0 0 481 569
%%HiResBoundingBox: 0 0 480.2105 568.6246
%%CropBox: 0 0 480.2105 568.6246
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_green_apple_bw</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-11T23:27:32+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-11T23:27:32+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-11T23:27:32+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>216</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADYAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWJef8A8xLPyaNN&#xA;Fxp13qMuqzG3tYbJVdzKOPFOJKks/KigdcjKVMoxthXmr85PNkmjy2+g+UNc07WJyi2l1fWJ9FPj&#xA;XmSDyB+Co6bZAzPQMhAd7p4Pz6luo9OtfM2lzRzPH617FBGs8MTEhnWOSNUcAowIBLVHbH1d6+l0&#xA;vlH84LnnFP8AmPEtpLHFHBNb2qCRhcVVGb01T0+XRJA5qe4ONS71sdyF0L8rfPsi3P138yL6lVED&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:58823117C7E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:59823117C7E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:c6ea9b05-6599-c94b-ae9b-1279945141de</stRef:instanceID>
            <stRef:documentID>xmp.did:66FC90ED7B206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -568.625 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 568.625 li
480.21 568.625 li
480.21 0 li
cp
clp
[1 0 0 1 0 0 ]ct
271.274 567.044 mo
214.787 572.309 141.008 568.437 71.3198 491.116 cv
-2.06396 409.69 -.0947266 288.874 .0258789 283.77 cv
.00244141 283.158 -1.47412 194.386 85.7104 150.395 cv
127.565 129.276 163.723 118.225 202.946 114.571 cv
231.196 111.938 261.689 113.266 296.174 118.634 cv
370.794 130.251 421.653 160.577 451.645 211.358 cv
487.665 272.316 489.6 340.86 457.566 420.926 cv
422.586 508.343 362.623 557.228 279.33 566.226 cv
276.706 566.514 274.017 566.785 271.274 567.044 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.27451 .207843 .145098 rgb
f
5.4165 283.9 mo
5.4165 283.9 2.84473 196.592 87.9849 153.631 cv
154.154 120.245 213.087 108.144 296.268 121.09 cv
379.451 134.036 422.406 172.456 447.006 214.096 cv
470.628 254.077 492.586 318.883 452.56 418.92 cv
408.583 528.829 332.338 555.083 278.753 560.869 cv
225.169 566.663 148.117 568.27 75.3276 487.502 cv
2.53809 406.736 5.4165 283.9 5.4165 283.9 cv
cp
1 1 1 rgb
f
331.149 187.889 mo
331.149 187.889 327.676 191.195 317.256 192.56 cv
317.256 192.56 321.083 192.998 324.398 192.292 cv
327.713 191.585 325.224 192.617 325.224 192.617 cv
325.224 192.617 314.735 195.087 299.926 198.746 cv
285.041 202.423 278.429 205.131 262.451 206.621 cv
252.876 207.513 248.076 206.964 238.909 207.02 cv
229.762 207.075 216.403 206.83 207.264 203.705 cv
198.562 200.733 193.887 198.885 193.887 198.885 cv
201.237 198.801 li
189.239 198.128 li
189.239 198.128 196.288 196.875 202.746 197.864 cv
202.746 197.864 194.792 195.82 187.437 195.904 cv
187.437 195.904 202.11 193.151 217.13 198.513 cv
217.13 198.513 199.426 192.208 186.462 191.818 cv
186.462 191.818 196.143 188.93 212.009 194.808 cv
195.456 187.996 li
210.89 191.334 li
210.89 191.334 203.001 185.699 208.119 187.211 cv
213.235 188.725 205.24 184.096 210.157 185.629 cv
215.075 187.161 217.433 184.755 210.937 181.184 cv
204.441 177.609 196.789 174.54 196.789 174.54 cv
196.789 174.54 204.218 175.236 212.874 180.599 cv
196.296 171.401 li
196.296 171.401 206.725 174.405 209.474 176.142 cv
212.223 177.877 206.215 171.081 211.458 173.968 cv
216.704 176.862 213.43 171.6 216.982 173.454 cv
220.535 175.31 215.863 169.976 221.463 172.442 cv
227.063 174.902 223.73 169.038 229.12 171.327 cv
234.511 173.617 235.305 167.17 239.397 168.382 cv
243.483 169.59 244.347 161.747 244.361 159.76 cv
244.375 157.773 250.029 149.92 251.334 149.165 cv
256.995 145.848 260.83 146.484 260.83 146.484 cv
260.83 146.484 253.563 149.554 257.324 149.401 cv
261.09 149.248 263.482 147.232 264.118 149.757 cv
264.758 152.288 269.215 148.885 269.452 151.448 cv
269.694 154.017 275.099 150.129 276.024 153.626 cv
276.943 157.122 279.422 158.079 279.979 157.634 cv
280.532 157.187 280.364 153.222 280.364 153.222 cv
280.364 153.222 284.836 156.39 285.221 160.531 cv
285.932 157.48 li
285.932 157.48 287.066 158.961 287.075 161.153 cv
287.075 163.344 287.618 158.516 288.523 161.812 cv
289.429 165.11 291.049 161.176 291.235 163.149 cv
291.42 165.124 292.674 163.614 293.176 162.575 cv
293.672 161.534 294.082 159.504 294.082 159.504 cv
294.082 159.504 297.689 161.956 294.958 166.785 cv
292.224 171.614 286.61 179.699 286.61 179.699 cv
286.61 179.699 297.146 166.776 297.968 164.91 cv
298.786 163.042 296.863 170.189 287.938 181.166 cv
279.013 192.147 300.893 166.428 300.893 166.428 cv
300.893 166.428 301.692 168.546 300.458 170.254 cv
299.222 171.954 304.455 170.476 303.437 172.363 cv
302.417 174.247 303.623 176.517 304.733 175.622 cv
305.842 174.726 307.881 173.142 307.12 175.599 cv
306.354 178.06 307.594 178.547 309.279 177.391 cv
310.96 176.235 317.577 174.629 317.577 174.629 cv
317.577 174.629 300.976 180.153 289.099 193.596 cv
289.099 193.596 295.489 189.617 299.88 187.615 cv
291.179 194.594 li
291.179 194.594 305.082 185.745 325.772 183.613 cv
325.772 183.613 310.504 186.227 302.997 191.107 cv
302.997 191.107 330.633 182.364 331.149 187.889 cv
cp
.27451 .207843 .145098 rgb
f
411.063 182.823 mo
411.063 182.823 462.677 228.566 465.785 300.288 cv
468.918 372.742 437.952 433.268 423.594 458.25 cv
411.266 479.693 372.679 518.307 345.919 534.327 cv
345.919 534.327 442.218 465.075 457.141 348.467 cv
471.417 236.91 411.063 182.823 411.063 182.823 cv
cp
f
39.3882 204.327 mo
39.3882 204.327 3.8335 249.814 14.541 322.046 cv
25.2534 394.274 63.1616 502.167 164.852 542.833 cv
164.852 542.833 202.12 558.463 255.778 553.458 cv
255.778 553.458 186.193 559.243 128.127 516.013 cv
59.707 465.084 -11.0396 303.738 39.3882 204.327 cv
cp
f
gsave
32.7944 369.567 mo
71.9702 485.543 145.447 565.344 262.799 552.018 cv
262.799 552.018 140.567 529.981 101.678 403.077 cv
62.79 276.169 101.172 243.944 93.9614 226.309 cv
86.75 208.673 37.9946 206.445 37.9946 206.445 cv
37.9946 206.445 -.870605 269.901 32.7944 369.567 cv
cp
clp
37.9946 206.445 mo
37.9946 206.445 53.123 232.09 91.8672 233.654 cv
91.8672 233.654 47.3979 238.995 37.9946 206.445 cv
cp
f
32.562 216.501 mo
32.562 216.501 37.6978 250.246 100.215 246.415 cv
100.215 246.415 51.6743 246.554 32.562 216.501 cv
cp
f
29.2881 228.348 mo
29.2881 228.348 43.4087 256.082 90.6509 254.866 cv
90.6509 254.866 39.6987 263.19 29.2881 228.348 cv
cp
f
25.7593 237.434 mo
25.7593 237.434 39.8799 265.174 87.126 263.948 cv
87.126 263.948 36.1699 272.279 25.7593 237.434 cv
cp
f
23.4097 246.405 mo
23.4097 246.405 37.5298 274.144 84.7769 272.918 cv
84.7769 272.918 33.8198 281.249 23.4097 246.405 cv
cp
f
21.0649 255.386 mo
21.0649 255.386 35.1899 283.121 82.4321 281.9 cv
82.4321 281.9 31.4756 290.229 21.0649 255.386 cv
cp
f
18.6782 267.885 mo
18.6782 267.885 34.6699 294.701 87.5396 289.774 cv
87.5396 289.774 31.7583 301.819 18.6782 267.885 cv
cp
f
17.2671 279.522 mo
17.2671 279.522 35.083 305.163 87.4839 296.582 cv
87.4839 296.582 32.6733 312.471 17.2671 279.522 cv
cp
f
18.0659 291.223 mo
18.0659 291.223 37.4927 315.666 89.2339 303.747 cv
89.2339 303.747 35.5522 323.114 18.0659 291.223 cv
cp
f
18.1587 302.823 mo
18.1587 302.823 39.2437 325.854 90.0327 310.358 cv
90.0327 310.358 37.8276 333.422 18.1587 302.823 cv
cp
f
19.6626 313.4 mo
19.6626 313.4 41.7368 335.485 91.7974 317.792 cv
91.7974 317.792 40.6509 343.108 19.6626 313.4 cv
cp
f
21.8823 325.817 mo
21.8823 325.817 45.0337 346.772 94.1421 326.587 cv
94.1421 326.587 44.3286 354.437 21.8823 325.817 cv
cp
f
24.3662 336.198 mo
24.3662 336.198 48.4146 356.129 96.5981 333.825 cv
96.5981 333.825 48.0474 363.818 24.3662 336.198 cv
cp
f
26.2798 348.271 mo
26.2798 348.271 51.0195 367.329 98.377 343.326 cv
98.377 343.326 50.9214 375.022 26.2798 348.271 cv
cp
f
29.5806 358.417 mo
29.5806 358.417 55.1284 376.381 101.395 350.352 cv
101.395 350.352 55.3701 384.083 29.5806 358.417 cv
cp
f
32.7944 369.567 mo
32.7944 369.567 58.6948 387.016 104.432 360.057 cv
104.432 360.057 59.0845 394.7 32.7944 369.567 cv
cp
f
36.7363 379.485 mo
36.7363 379.485 63.3706 395.795 107.896 366.868 cv
107.896 366.868 64.1001 403.467 36.7363 379.485 cv
cp
f
40.8823 390.688 mo
40.8823 390.688 68.3071 405.622 111.304 374.475 cv
111.304 374.475 69.4209 413.247 40.8823 390.688 cv
cp
f
45.7397 400.19 mo
45.7397 400.19 73.7861 413.915 115.4 380.928 cv
115.4 380.928 75.2388 421.492 45.7397 400.19 cv
cp
f
48.1499 410.962 mo
48.1499 410.962 76.5581 423.944 117.271 389.863 cv
117.271 389.863 78.1968 431.467 48.1499 410.962 cv
cp
f
53.6611 420.099 mo
53.6611 420.099 82.5986 431.83 121.807 396.02 cv
121.807 396.02 84.5767 439.287 53.6611 420.099 cv
cp
f
57.418 429.229 mo
57.418 429.229 86.3555 440.966 125.569 405.167 cv
125.569 405.167 88.3149 448.416 57.418 429.229 cv
cp
f
63.3149 438.116 mo
63.3149 438.116 92.731 448.591 130.365 411.129 cv
130.365 411.129 95.0288 455.957 63.3149 438.116 cv
cp
f
68.3345 447.077 mo
68.3345 447.077 97.7915 457.442 135.283 419.849 cv
135.283 419.849 100.095 464.797 68.3345 447.077 cv
cp
f
74.6401 455.677 mo
74.6401 455.677 104.515 464.76 140.353 425.58 cv
140.353 425.58 107.153 472.004 74.6401 455.677 cv
cp
f
76.2285 463.459 mo
76.2285 463.459 105.69 473.823 143.176 436.231 cv
143.176 436.231 107.994 481.168 76.2285 463.459 cv
cp
f
82.5386 472.059 mo
82.5386 472.059 112.414 481.141 148.247 441.96 cv
148.247 441.96 115.047 488.384 82.5386 472.059 cv
cp
f
85.1431 481.123 mo
85.1431 481.123 114.87 490.698 151.339 452.121 cv
151.339 452.121 117.369 497.987 85.1431 481.123 cv
cp
f
91.6812 489.545 mo
91.6812 489.545 121.789 497.83 156.563 457.702 cv
156.563 457.702 124.612 505.008 91.6812 489.545 cv
cp
f
97.8569 498.015 mo
97.8569 498.015 128.178 505.5 161.875 464.482 cv
161.875 464.482 131.173 512.595 97.8569 498.015 cv
cp
f
104.961 505.965 mo
104.961 505.965 135.576 512.141 167.479 469.691 cv
167.479 469.691 138.89 519.096 104.961 505.965 cv
cp
f
115.455 512.809 mo
115.455 512.809 146.436 516.775 175.211 472.162 cv
175.211 472.162 150.221 523.48 115.455 512.809 cv
cp
f
123.428 519.895 mo
123.428 519.895 154.543 522.513 181.373 476.704 cv
181.373 476.704 158.634 529.062 123.428 519.895 cv
cp
f
135.143 527.111 mo
135.143 527.111 166.375 526.824 188.811 478.708 cv
188.811 478.708 171.042 532.953 135.143 527.111 cv
cp
f
144.007 533.045 mo
144.007 533.045 175.188 531.411 195.535 482.367 cv
195.535 482.367 180.133 537.335 144.007 533.045 cv
cp
f
152.426 540.641 mo
152.426 540.641 183.597 538.786 203.596 489.61 cv
203.596 489.61 188.57 544.672 152.426 540.641 cv
cp
f
161.574 546.122 mo
161.574 546.122 192.628 542.935 210.496 492.926 cv
210.496 492.926 197.866 548.601 161.574 546.122 cv
cp
f
171.534 550.559 mo
171.534 550.559 202.5 546.52 218.994 496.046 cv
218.994 496.046 207.868 552.037 171.534 550.559 cv
cp
f
181.048 555.388 mo
181.048 555.388 211.801 550.012 226.108 498.879 cv
226.108 498.879 217.423 555.305 181.048 555.388 cv
cp
f
190.149 561.304 mo
190.149 561.304 220.631 554.535 232.598 502.807 cv
232.598 502.807 226.474 559.559 190.149 561.304 cv
cp
f
200.048 565.27 mo
200.048 565.27 230.211 557.201 239.935 505 cv
239.935 505 236.276 561.974 200.048 565.27 cv
cp
f
204.984 571.065 mo
204.984 571.065 235.468 564.295 247.428 512.568 cv
247.428 512.568 241.309 569.32 204.984 571.065 cv
cp
f
214.889 575.022 mo
214.889 575.022 245.042 566.961 254.77 514.76 cv
254.77 514.76 251.111 571.735 214.889 575.022 cv
cp
f
grestore
gsave
403.582 175.167 mo
403.582 175.167 460.291 220.026 461.131 305.906 cv
461.971 391.785 419.532 474.539 351.357 528.643 cv
351.357 528.643 414.154 476.629 415.575 372.231 cv
416.991 267.838 366.983 235.084 368.133 204.735 cv
369.28 174.387 403.582 175.167 403.582 175.167 cv
cp
clp
413.29 185.41 mo
413.29 185.41 396.444 205.284 360.366 211.032 cv
360.366 211.032 400.828 209.648 413.29 185.41 cv
cp
f
355.647 220.23 mo
355.647 220.23 396.973 219.557 419.518 192.388 cv
419.518 192.388 406.061 223.096 355.647 220.23 cv
cp
f
361.981 228.394 mo
361.981 228.394 405.717 232.28 426.199 200.12 cv
426.199 200.12 405.527 225.928 361.981 228.394 cv
cp
f
367.377 235.051 mo
367.377 235.051 411.114 238.939 431.594 206.783 cv
431.594 206.783 410.921 232.585 367.377 235.051 cv
cp
f
372.49 242.937 mo
372.49 242.937 416.225 246.819 436.712 214.663 cv
436.712 214.663 416.036 240.467 372.49 242.937 cv
cp
f
377.564 250.417 mo
377.564 250.417 421.305 254.303 441.788 222.149 cv
441.788 222.149 421.11 247.947 377.564 250.417 cv
cp
f
381.456 258.013 mo
381.456 258.013 425.191 261.9 445.673 229.745 cv
445.673 229.745 425 255.548 381.456 258.013 cv
cp
f
385.305 265.215 mo
385.305 265.215 429.04 269.102 449.527 236.942 cv
449.527 236.942 428.85 262.75 385.305 265.215 cv
cp
f
389.164 272.417 mo
389.164 272.417 432.901 276.299 453.38 244.145 cv
453.38 244.145 432.708 269.947 389.164 272.417 cv
cp
f
392.265 280.083 mo
392.265 280.083 436.001 283.97 456.483 251.81 cv
456.483 251.81 435.811 277.618 392.265 280.083 cv
cp
f
394.258 288.655 mo
394.258 288.655 437.994 292.542 458.481 260.381 cv
458.481 260.381 437.804 286.189 394.258 288.655 cv
cp
f
396.566 296.397 mo
396.566 296.397 440.307 300.283 460.792 268.127 cv
460.792 268.127 440.114 293.93 396.566 296.397 cv
cp
f
398.598 305.362 mo
398.598 305.362 442.334 309.249 462.817 277.089 cv
462.817 277.089 442.144 302.896 398.598 305.362 cv
cp
f
400.591 313.934 mo
400.591 313.934 444.327 317.82 464.814 285.661 cv
464.814 285.661 444.137 311.468 400.591 313.934 cv
cp
f
402.904 321.674 mo
402.904 321.674 446.639 325.556 467.122 293.405 cv
467.122 293.405 446.45 319.204 402.904 321.674 cv
cp
f
405.286 330.209 mo
405.286 330.209 449.027 334.095 469.508 301.939 cv
469.508 301.939 448.832 327.743 405.286 330.209 cv
cp
f
407.282 338.781 mo
407.282 338.781 451.017 342.667 471.5 310.511 cv
471.5 310.511 450.827 336.315 407.282 338.781 cv
cp
f
409.588 346.522 mo
409.588 346.522 453.33 350.408 473.812 318.252 cv
473.812 318.252 453.139 344.056 409.588 346.522 cv
cp
f
408.624 353.964 mo
408.624 353.964 452.099 360.108 474.219 329.057 cv
474.219 329.057 452.239 353.751 408.624 353.964 cv
cp
f
410.17 362.625 mo
410.17 362.625 453.647 368.772 475.768 337.717 cv
475.768 337.717 453.782 362.416 410.17 362.625 cv
cp
f
412.073 370.476 mo
412.073 370.476 455.554 376.62 477.674 345.569 cv
477.674 345.569 455.684 370.262 412.073 370.476 cv
cp
f
410.106 377.186 mo
410.106 377.186 452.806 387.41 477.763 358.59 cv
477.763 358.59 453.539 381.095 410.106 377.186 cv
cp
f
410.819 385.948 mo
410.819 385.948 453.52 396.186 478.484 367.361 cv
478.484 367.361 454.254 389.872 410.819 385.948 cv
cp
f
411.975 393.949 mo
411.975 393.949 454.68 404.182 479.635 375.361 cv
479.635 375.361 455.416 397.868 411.975 393.949 cv
cp
f
408.034 401.36 mo
408.034 401.36 449.49 415.829 477.225 389.658 cv
477.225 389.658 450.864 409.615 408.034 401.36 cv
cp
f
407.872 410.144 mo
407.872 410.144 449.328 424.623 477.059 398.461 cv
477.059 398.461 450.688 418.419 407.872 410.144 cv
cp
f
408.219 418.225 mo
408.219 418.225 449.675 432.693 477.401 406.532 cv
477.401 406.532 451.041 426.489 408.219 418.225 cv
cp
f
402.983 425.663 mo
402.983 425.663 443.096 443.521 472.901 419.747 cv
472.901 419.747 444.971 437.448 402.983 425.663 cv
cp
f
402.081 434.402 mo
402.081 434.402 442.195 452.27 472.002 428.504 cv
472.002 428.504 444.068 446.197 402.081 434.402 cv
cp
f
401.766 442.481 mo
401.766 442.481 441.875 460.348 471.675 436.584 cv
471.675 436.584 443.75 454.274 401.766 442.481 cv
cp
f
395.887 448.284 mo
395.887 448.284 433.892 470.276 466.044 449.79 cv
466.044 449.79 436.405 464.434 395.887 448.284 cv
cp
f
394.077 456.885 mo
394.077 456.885 432.073 478.885 464.228 458.399 cv
464.228 458.399 434.581 473.044 394.077 456.885 cv
cp
f
392.903 464.88 mo
392.903 464.88 430.899 486.88 463.048 466.394 cv
463.048 466.394 433.415 481.039 392.903 464.88 cv
cp
f
387.608 471.13 mo
387.608 471.13 423.702 496.14 457.413 478.328 cv
457.413 478.328 426.681 490.512 387.608 471.13 cv
cp
f
385.105 479.553 mo
385.105 479.553 421.184 504.572 454.896 486.76 cv
454.896 486.76 424.16 498.954 385.105 479.553 cv
cp
f
383.281 487.419 mo
383.281 487.419 419.363 512.438 453.075 494.635 cv
453.075 494.635 422.345 506.829 383.281 487.419 cv
cp
f
375.238 492.491 mo
375.238 492.491 408.838 520.759 444.068 506.188 cv
444.068 506.188 412.334 515.447 375.238 492.491 cv
cp
f
371.959 500.643 mo
371.959 500.643 405.545 528.921 440.775 514.341 cv
440.775 514.341 409.028 523.61 371.959 500.643 cv
cp
f
369.411 508.315 mo
369.411 508.315 402.997 536.593 438.225 522.012 cv
438.225 522.012 406.493 531.281 369.411 508.315 cv
cp
f
grestore
234.107 177.906 mo
230.801 178.212 227.649 178.194 224.737 177.869 cv
215.154 176.792 li
211.792 176.783 208.773 176.522 206.126 176.007 cv
203.721 175.807 191.361 174.544 181.856 168.517 cv
168.52 160.058 li
171.311 159.797 li
171.037 159.592 170.776 159.379 170.516 159.166 cv
168.422 157.429 166.523 155.85 165.91 153.834 cv
163.306 152.066 160.547 149.79 158.053 146.912 cv
152.909 140.963 144.621 138.665 133.472 136.065 cv
127.389 134.653 123.368 132.336 119.811 130.298 cv
116.24 128.241 113.152 126.458 107.91 125.353 cv
93.9893 122.418 88.1431 112.843 87.9019 112.439 cv
87.1118 111.116 li
84.8091 109.5 82.3481 107.55 80.3145 105.405 cv
75.5874 100.427 li
72.6851 98.0308 69.7827 94.9849 67.5913 91.186 cv
66.5562 89.4087 li
63.3984 86.7983 60.0552 82.9868 58.4023 77.7949 cv
58.0913 76.8013 li
55.6069 75.2969 53.1372 73.2544 51.1631 70.4814 cv
47.644 65.5273 li
51.1816 63.605 li
49.8818 62.0542 48.6836 60.1743 47.8569 57.9307 cv
46.2783 53.645 li
48.7578 52.2241 li
47.5317 50.5293 46.3525 48.584 45.6191 46.6284 cv
44.1055 42.603 li
48.7622 39.5337 li
47.5229 37.2261 46.4321 34.3892 46.4272 31.5005 cv
46.4224 27.4839 li
48.354 26.9038 li
47.3882 24.1831 46.3901 20.7046 45.8325 16.7905 cv
44.9878 10.7632 li
51.0708 10.6431 li
58.2114 10.5034 62.9204 10.6616 66.0591 10.9307 cv
67.5356 5.51611 li
71.2554 5.16846 li
71.9937 5.09912 77.2036 4.71289 82.7427 6.84424 cv
83.7827 5.02393 li
86.3369 4.56885 li
86.3369 4.56885 86.6479 4.51367 87.2192 4.45801 cv
88.6812 4.32275 91.6533 4.23486 94.9917 5.17285 cv
95.4614 4.31836 li
98.563 4.22559 li
99.2173 4.20752 102.162 4.14209 105.858 4.43945 cv
104.803 2.73975 li
114.517 2.74951 li
115.85 2.74951 120.233 2.82764 124.998 3.67725 cv
124.027 0 li
132.807 2.10791 li
136.341 2.9624 141.198 4.29053 145.595 6.05518 cv
145.586 3.22314 li
152.951 6.0835 li
155.43 7.04346 158.639 8.38574 161.796 9.97412 cv
161.434 6.0835 li
170.944 12.6675 li
171.394 12.9741 173.205 14.2417 175.49 15.9868 cv
183.62 19.1499 li
184.335 19.4185 188.226 20.9976 192.387 23.7515 cv
192.703 20.7466 li
200.396 26.8804 li
201.599 27.8413 205.602 31.1382 209.205 35.3364 cv
209.493 34.6626 li
214.768 37.7974 li
215.103 37.9927 216.872 39.0923 219.063 41.3911 cv
219.365 40.7134 li
224.686 44.1675 li
224.942 44.3257 228.758 46.8521 232.013 51.5273 cv
232.756 50.3062 li
237.501 56.7744 li
238.096 57.5874 239.08 58.9526 240.208 60.6235 cv
240.464 59.5278 li
247.377 67.394 li
247.708 67.7656 252.863 73.6997 256.178 81.7095 cv
256.251 81.603 li
260.2 90.2954 li
260.311 90.5366 261.726 93.708 262.855 98.2173 cv
264.917 95.7231 li
265.834 109.185 li
265.877 109.746 266.606 120.9 265.176 130.312 cv
266.546 130.752 li
266.273 133.297 263.7 155.887 258.132 165.443 cv
254.39 171.86 250.29 175.324 245.924 175.733 cv
245.693 175.756 245.469 175.77 245.256 175.77 cv
243.334 176.336 239.136 177.433 234.107 177.906 cv
cp
f
162.131 143.387 mo
155.713 135.967 145.679 133.376 134.698 130.818 cv
123.711 128.259 120.791 122.562 109.02 120.078 cv
97.2534 117.593 92.5308 109.676 92.5308 109.676 cv
97.021 110.851 li
97.021 110.851 89.0859 106.816 84.229 101.699 cv
89.4663 102.405 li
89.4663 102.405 77.9414 98.3052 72.2539 88.4844 cv
75.875 88.9487 li
75.875 88.9487 66.3657 85.0571 63.5425 76.1655 cv
70.2476 75.5386 li
70.2476 75.5386 60.5981 74.4521 55.561 67.3569 cv
60.8589 64.478 li
60.8589 64.478 55.0405 61.8315 52.9136 56.064 cv
57.0698 53.6865 li
57.0698 53.6865 52.25 48.9692 50.6621 44.7344 cv
56.2896 41.0288 li
56.2896 41.0288 51.8228 35.8755 51.8179 31.4956 cv
55.6948 30.3403 li
55.6948 30.3403 52.3428 24.2852 51.1724 16.0386 cv
51.1724 16.0386 67.4614 15.7134 69.978 17.0688 cv
71.7568 10.5361 li
71.7568 10.5361 79.2461 9.83447 84.8188 14.0923 cv
87.2144 9.89014 li
87.2144 9.89014 92.6987 8.97998 97.374 12.1284 cv
98.73 9.61182 li
98.73 9.61182 111.434 9.22607 117.322 12.6587 cv
114.513 8.14502 li
114.513 8.14502 127.25 8.15381 132.78 12.0122 cv
131.549 7.35107 li
131.549 7.35107 148.238 11.3667 151.009 15.4858 cv
151 11.1069 li
151 11.1069 165.869 16.8833 168.242 21.0435 cv
167.875 17.0972 li
167.875 17.0972 178.513 24.4663 182.143 29.2993 cv
181.666 24.1733 li
181.666 24.1733 192.401 28.3433 196.612 35.1128 cv
197.035 31.0967 li
197.035 31.0967 208.211 39.9976 210.059 46.9907 cv
212.019 42.4312 li
212.019 42.4312 216.658 45.1802 220.118 52.4233 cv
221.751 48.686 li
221.751 48.686 229.803 53.9048 231.081 63.3354 cv
233.151 59.9644 li
233.151 59.9644 241.35 71.1367 242.192 75.8354 cv
243.334 70.9507 li
243.334 70.9507 254.01 83.0884 253.535 95.0728 cv
255.287 92.5239 li
255.287 92.5239 259.791 102.447 258.667 111.706 cv
260.458 109.546 li
260.458 109.546 261.537 125.372 258.792 134.379 cv
261.183 130.177 li
261.183 130.177 258.62 153.89 253.475 162.727 cv
248.331 171.563 244.629 170.319 244.629 170.319 cv
244.629 170.319 234.99 173.602 225.336 172.511 cv
229.097 170.175 li
229.097 170.175 216.184 172.566 206.856 170.652 cv
206.856 170.652 194.044 169.86 184.744 163.962 cv
191.449 163.334 li
191.449 163.334 179.998 160.03 173.962 155.019 cv
167.921 150.009 173.423 153.472 173.423 153.472 cv
177.83 153.863 li
177.83 153.863 168.822 151.118 162.131 143.387 cv
cp
1 1 1 rgb
f
246.351 169.571 mo
246.351 169.571 178.522 92.9092 64.3223 24.7583 cv
64.3223 24.7583 210.876 107.011 246.351 169.571 cv
cp
.27451 .207843 .145098 rgb
f
224.337 129.833 mo
224.337 129.833 220.354 80.6602 208.1 51.6577 cv
208.1 51.6577 218.212 73.6948 223.358 100.079 cv
228.503 126.458 227.305 132.837 224.337 129.833 cv
cp
f
175.643 94.0747 mo
175.643 94.0747 172.773 50.4736 160.519 21.4707 cv
160.519 21.4707 169.514 37.9419 174.659 64.3247 cv
179.803 90.7036 178.605 97.0835 175.643 94.0747 cv
cp
f
185.097 99.4663 mo
185.097 99.4663 182.227 55.8599 169.973 26.8569 cv
169.973 26.8569 178.967 43.3271 184.117 69.7065 cv
189.257 96.0903 188.064 102.47 185.097 99.4663 cv
cp
f
194.5 104.262 mo
194.5 104.262 191.63 60.6519 179.376 31.6499 cv
179.376 31.6499 188.371 48.124 193.515 74.5034 cv
198.66 100.886 197.467 107.266 194.5 104.262 cv
cp
f
204.933 113.735 mo
204.933 113.735 200.944 64.5615 188.691 35.5591 cv
188.691 35.5591 198.804 57.5962 203.949 83.98 cv
209.094 110.359 207.896 116.739 204.933 113.735 cv
cp
f
214.554 120.895 mo
214.554 120.895 210.566 71.7222 198.312 42.7192 cv
198.312 42.7192 208.425 64.7568 213.57 91.1401 cv
218.715 117.524 217.518 123.904 214.554 120.895 cv
cp
f
166.509 86.6216 mo
166.509 86.6216 163.928 45.7925 151.609 18.7173 cv
151.609 18.7173 160.696 34.0732 165.752 58.7573 cv
170.804 83.4321 169.528 89.4175 166.509 86.6216 cv
cp
f
157.348 79.4668 mo
157.348 79.4668 154.947 41.2427 143.288 15.9087 cv
143.288 15.9087 151.896 30.2793 156.666 53.3755 cv
161.434 76.4673 160.208 82.0767 157.348 79.4668 cv
cp
f
148.433 72.5942 mo
148.433 72.5942 146.292 37.4995 135.079 14.2876 cv
135.079 14.2876 143.376 27.4424 147.899 48.6353 cv
152.417 69.8179 151.2 74.9771 148.433 72.5942 cv
cp
f
140.818 68.5776 mo
140.818 68.5776 138.979 36.4321 127.705 15.2769 cv
127.705 15.2769 136.09 27.2427 140.516 46.6196 cv
144.936 65.9966 143.631 70.7417 140.818 68.5776 cv
cp
f
132.957 63.9946 mo
132.957 63.9946 131.298 35.1597 121.222 16.1772 cv
121.222 16.1772 128.721 26.9175 132.678 44.3022 cv
136.634 61.6831 135.473 65.9409 132.957 63.9946 cv
cp
f
125.007 57.0483 mo
125.007 57.0483 123.646 32.0347 114.309 15.6294 cv
114.309 15.6294 121.279 24.9028 124.876 39.9604 cv
128.475 55.0195 127.357 58.7202 125.007 57.0483 cv
cp
f
233.625 142.998 mo
233.625 142.998 233.996 105.354 214.479 52.8511 cv
214.479 52.8511 226.807 79.4624 231.953 105.841 cv
237.098 132.225 236.591 146.001 233.625 142.998 cv
cp
f
241.225 150.729 mo
241.225 150.729 242.567 113.108 224.397 60.1226 cv
224.397 60.1226 236.044 87.0356 240.51 113.54 cv
244.977 140.048 244.119 153.807 241.225 150.729 cv
cp
f
249.115 160.799 mo
249.115 160.799 251.86 123.258 235.672 69.6323 cv
235.672 69.6323 246.305 96.9624 249.784 123.616 cv
253.261 150.274 251.887 163.986 249.115 160.799 cv
cp
f
118.515 54.6714 mo
118.515 54.6714 117.155 29.6523 107.822 13.2476 cv
107.822 13.2476 114.787 22.5205 118.39 37.5786 cv
121.989 52.6372 120.87 56.3384 118.515 54.6714 cv
cp
f
111.272 49.7305 mo
111.272 49.7305 110.171 27.8413 101.284 13.5581 cv
101.284 13.5581 107.943 21.6147 111.3 34.7695 cv
114.652 47.9194 113.538 51.1743 111.272 49.7305 cv
cp
f
104.247 46.2622 mo
104.247 46.2622 103.378 27.5073 95.1782 15.3228 cv
95.1782 15.3228 101.339 22.1816 104.381 33.437 cv
107.413 44.688 106.35 47.4878 104.247 46.2622 cv
cp
f
96.8911 40.7456 mo
96.8911 40.7456 96.2222 25.4131 89.2202 15.481 cv
89.2202 15.481 94.4863 21.062 97.0581 30.2607 cv
99.6216 39.4458 98.6973 41.7349 96.8911 40.7456 cv
cp
f
90.9941 38.354 mo
90.9941 38.354 90.5439 25.3345 83.6948 16.9858 cv
83.6948 16.9858 88.8721 21.6567 91.3101 29.439 cv
93.7427 37.2119 92.7866 39.1675 90.9941 38.354 cv
cp
f
84.0474 34.2212 mo
84.0474 34.2212 83.5928 21.2017 76.7437 12.8618 cv
76.7437 12.8618 81.9209 17.5337 84.3589 25.311 cv
86.7915 33.0796 85.8398 35.0386 84.0474 34.2212 cv
cp
f
77.6675 30.9995 mo
77.6675 30.9995 77.3379 21.2944 72.1743 15.0767 cv
72.1743 15.0767 76.0796 18.5552 77.9092 24.3545 cv
79.7388 30.145 79.0142 31.603 77.6675 30.9995 cv
cp
f
gsave
235.975 167.147 mo
235.975 167.147 201.265 171.628 189.433 158.751 cv
177.603 145.876 153.021 131.101 131.846 125.91 cv
110.673 120.723 87.3862 101.402 70.2476 75.5386 cv
53.1138 49.6792 52.5239 38.1128 55.6582 31.6909 cv
58.7969 25.269 100.824 49.2153 140.209 78.9741 cv
179.594 108.729 222.847 137.333 235.975 167.147 cv
cp
clp
160.009 95.8716 mo
160.009 95.8716 117.09 104.132 85.9326 99.6187 cv
85.9326 99.6187 104.144 104.151 130.969 102.447 cv
157.793 100.751 163.663 97.98 160.009 95.8716 cv
cp
f
166.616 102.554 mo
166.616 102.554 123.697 110.81 92.5356 106.301 cv
92.5356 106.301 110.747 110.837 137.577 109.138 cv
164.401 107.438 170.266 104.662 166.616 102.554 cv
cp
f
175.294 109.091 mo
175.294 109.091 132.376 117.347 101.219 112.83 cv
101.219 112.83 119.435 117.366 146.26 115.667 cv
173.089 113.967 178.954 111.2 175.294 109.091 cv
cp
f
199.045 126.314 mo
199.045 126.314 150.466 134.899 119.305 130.386 cv
119.305 130.386 143.186 134.593 170.015 132.893 cv
196.835 131.194 202.705 128.422 199.045 126.314 cv
cp
f
184.275 115.253 mo
184.275 115.253 135.687 123.848 104.53 119.33 cv
104.53 119.33 128.411 123.533 155.235 121.833 cv
182.06 120.138 187.929 117.361 184.275 115.253 cv
cp
f
198.753 126.36 mo
198.753 126.36 150.173 134.951 119.012 130.437 cv
119.012 130.437 142.893 134.639 169.723 132.94 cv
196.547 131.241 202.412 128.468 198.753 126.36 cv
cp
f
191.667 120.839 mo
191.667 120.839 143.083 129.434 111.926 124.916 cv
111.926 124.916 135.807 129.127 162.632 127.424 cv
189.457 125.729 195.326 122.957 191.667 120.839 cv
cp
f
151.362 89.7749 mo
151.362 89.7749 111.211 97.604 81.9023 92.5425 cv
81.9023 92.5425 99.0649 97.4458 124.212 96.0903 cv
149.362 94.7437 154.832 91.9849 151.362 89.7749 cv
cp
f
142.712 83.4185 mo
142.712 83.4185 105.124 90.7642 77.6675 85.8979 cv
77.6675 85.8979 93.7476 90.5879 117.298 89.3521 cv
140.845 88.1216 145.958 85.522 142.712 83.4185 cv
cp
f
134.651 77.0059 mo
134.651 77.0059 100.16 83.813 74.8726 78.8403 cv
74.8726 78.8403 89.6938 83.5435 111.341 82.5542 cv
132.979 81.5659 137.669 79.0767 134.651 77.0059 cv
cp
f
125.476 70.2222 mo
125.476 70.2222 93.9106 76.5786 70.5913 71.0347 cv
70.5913 71.0347 84.2891 76.1143 104.158 75.4917 cv
124.023 74.8608 128.281 72.3999 125.476 70.2222 cv
cp
f
114.917 64.1626 mo
114.917 64.1626 86.5972 69.855 65.6782 64.9185 cv
65.6782 64.9185 77.9692 69.4556 95.7861 68.8794 cv
113.603 68.3042 117.434 66.103 114.917 64.1626 cv
cp
f
106.178 58.228 mo
106.178 58.228 81.6328 63.2427 63.3984 58.3677 cv
63.3984 58.3677 74.1294 62.7603 89.6196 62.4302 cv
105.091 62.105 108.388 60.0806 106.178 58.228 cv
cp
f
205.462 131.872 mo
205.462 131.872 169.152 141.763 113.417 136.162 cv
113.417 136.162 142.276 141.362 169.105 139.664 cv
195.93 137.959 209.126 133.985 205.462 131.872 cv
cp
f
210.7 137.36 mo
210.7 137.36 174.649 148.184 118.789 144.014 cv
118.789 144.014 147.773 148.467 174.547 146.08 cv
201.32 143.698 214.415 139.381 210.7 137.36 cv
cp
f
216.797 142.672 mo
216.797 142.672 181.168 154.829 125.192 152.74 cv
125.192 152.74 154.33 156.11 180.992 152.726 cv
207.664 149.35 220.577 144.548 216.797 142.672 cv
cp
f
102.236 52.5542 mo
102.236 52.5542 77.686 57.5688 59.4517 52.6929 cv
59.4517 52.6929 70.1826 57.0854 85.6636 56.7559 cv
101.149 56.4263 104.446 54.4019 102.236 52.5542 cv
cp
f
95.6187 46.7964 mo
95.6187 46.7964 74.1714 51.272 58.1006 46.2852 cv
58.1006 46.2852 67.5776 50.687 81.1548 50.6128 cv
94.7271 50.5249 97.5923 48.6211 95.6187 46.7964 cv
cp
f
85.9937 42.0596 mo
85.9937 42.0596 69.0308 45.7603 56.0942 40.5552 cv
56.0942 40.5552 63.7656 45.022 74.5752 45.3198 cv
85.3804 45.603 87.6138 43.8613 85.9937 42.0596 cv
cp
f
221.844 148.765 mo
221.844 148.765 186.211 160.921 130.24 158.836 cv
130.24 158.836 159.373 162.208 186.039 158.823 cv
212.707 155.447 225.619 150.64 221.844 148.765 cv
cp
f
228.042 154.458 mo
228.042 154.458 192.415 166.614 136.439 164.523 cv
136.439 164.523 165.571 167.895 192.239 164.514 cv
218.911 161.134 231.823 156.333 228.042 154.458 cv
cp
f
234.214 159.853 mo
234.214 159.853 198.585 172.009 142.61 169.92 cv
142.61 169.92 171.747 173.291 198.414 169.906 cv
225.081 166.53 237.995 161.729 234.214 159.853 cv
cp
f
79.6182 37.3423 mo
79.6182 37.3423 66.2036 40.3794 55.8159 35.3735 cv
55.8159 35.3735 62.0103 39.603 70.605 40.0913 cv
79.2046 40.5645 80.9365 39.0181 79.6182 37.3423 cv
cp
f
73.521 33.1724 mo
73.521 33.1724 63.4546 35.4517 55.6582 31.6909 cv
55.6582 31.6909 60.3105 34.8667 66.7554 35.2339 cv
73.2104 35.5869 74.5103 34.4263 73.521 33.1724 cv
cp
f
grestore
254.914 201.861 mo
251.98 202.135 248.934 202.061 245.856 201.653 cv
243.58 201.341 li
243.524 199.043 li
243.279 189.413 241.086 172.756 236.229 169.075 cv
230.017 164.356 230.096 160.132 230.7 158.028 cv
231.493 155.229 234.033 153.231 237.154 152.939 cv
241.461 152.54 250.43 151.704 255.379 157.819 cv
258.531 161.706 258.829 164.347 259.321 168.722 cv
259.576 170.955 259.892 173.732 260.659 177.665 cv
262.999 189.668 262.009 198.314 261.972 198.676 cv
261.768 200.39 li
260.121 200.923 li
259.916 200.988 258.044 201.569 254.914 201.861 cv
cp
f
246.217 198.979 mo
246.217 198.979 245.568 172.77 237.858 166.924 cv
230.151 161.079 233.262 156.012 237.405 155.627 cv
241.546 155.238 249.241 154.522 253.285 159.518 cv
257.333 164.514 255.722 166.456 258.012 178.18 cv
260.296 189.904 259.293 198.355 259.293 198.355 cv
259.293 198.355 254.08 200.037 246.217 198.979 cv
cp
1 1 1 rgb
f
254.353 162.407 mo
254.353 162.407 254.501 161.793 252.458 163.377 cv
250.411 164.961 251.414 162.885 247.955 164.199 cv
244.495 165.513 241.461 164.999 240.725 163.479 cv
239.986 161.956 239.699 160.991 236.522 161.088 cv
236.401 161.088 236.276 161.083 236.151 161.074 cv
232.969 160.786 228.55 156.026 234.735 154.689 cv
241.17 153.287 245.187 153.714 249.547 155.692 cv
253.912 157.676 256.019 161.06 254.353 162.407 cv
cp
.27451 .207843 .145098 rgb
f
240.483 158.724 mo
240.483 158.724 241.538 163.604 246.413 162.551 cv
251.284 161.501 250.962 162.323 250.962 162.323 cv
250.962 162.323 249.222 160.698 247.485 161.256 cv
245.745 161.817 241.923 161.376 240.483 158.724 cv
cp
1 1 1 rgb
f
255.737 185.754 mo
255.737 185.754 255.667 178.603 253.823 173.801 cv
251.98 168.996 251.693 168.029 250.522 166.15 cv
249.352 164.264 249.352 164.264 249.352 164.264 cv
252.458 163.377 li
252.458 163.377 252.208 164.989 252.983 166.91 cv
253.758 168.829 256.182 175.566 255.737 185.754 cv
cp
.27451 .207843 .145098 rgb
f
gsave
171.923 287.629 mo
171.923 287.629 173.418 270.262 157.079 266.066 cv
140.734 261.876 127.389 269.074 123.07 282.224 cv
118.757 295.375 116.76 313.892 137.874 318.099 cv
158.992 322.306 171.562 310.27 171.923 287.629 cv
cp
clp
171.594 263.739 mo
171.594 263.739 154.539 267.838 136.1 260.28 cv
136.1 260.28 153.011 271.683 171.594 263.739 cv
cp
1 1 1 rgb
f
173.451 269.869 mo
173.451 269.869 154.014 278.533 126.906 265.457 cv
126.906 265.457 150.411 283.385 173.451 269.869 cv
cp
.27451 .207843 .145098 rgb
f
175.076 278.76 mo
175.076 278.76 151.447 289.843 120.201 274.028 cv
120.201 274.028 145.935 284.602 175.076 278.76 cv
cp
f
179.228 285.874 mo
179.228 285.874 152.379 297.482 114.457 280.692 cv
114.457 280.692 145.155 302.818 179.228 285.874 cv
cp
f
177.333 294.065 mo
177.333 294.065 150.643 308.468 113.022 288.117 cv
113.022 288.117 143.817 313.846 177.333 294.065 cv
cp
f
175.503 301.462 mo
175.503 301.462 148.804 315.866 111.188 295.518 cv
111.188 295.518 141.988 321.238 175.503 301.462 cv
cp
f
174.863 308.961 mo
174.863 308.961 148.164 323.365 110.542 303.017 cv
110.542 303.017 141.342 328.737 174.863 308.961 cv
cp
f
173.418 316.39 mo
173.418 316.39 146.724 330.803 109.104 310.456 cv
109.104 310.456 139.903 336.174 173.418 316.39 cv
cp
1 1 1 rgb
f
166.083 327.692 mo
166.083 327.692 142.452 338.781 111.211 322.96 cv
111.211 322.96 136.945 333.534 166.083 327.692 cv
cp
f
grestore
204.186 204.884 mo
204.186 204.884 233.156 212.537 278.666 205.506 cv
278.666 205.506 238.946 219.158 204.186 204.884 cv
cp
f
gsave
203.039 221.322 mo
203.039 221.322 179.887 216.428 168.924 208.366 cv
157.957 200.306 146.584 208.217 147.429 212.267 cv
149.138 220.448 155.175 237.648 197.234 248.281 cv
239.293 258.91 273.326 254.861 278.229 246.024 cv
283.132 237.179 280.788 233.117 262.79 230.739 cv
244.801 228.352 217.005 225.459 203.039 221.322 cv
cp
clp
176.414 206.463 mo
176.414 206.463 158.272 212.267 153.206 245.63 cv
153.206 245.63 160.756 220.161 176.414 206.463 cv
cp
f
184.168 207.601 mo
184.168 207.601 166.606 216.057 158.978 250.825 cv
158.978 250.825 171.283 221.674 184.168 207.601 cv
cp
f
189.73 209.466 mo
189.73 209.466 170.935 222.145 167.276 251.327 cv
167.276 251.327 177.124 225.58 189.73 209.466 cv
cp
f
196.566 211.2 mo
196.566 211.2 176.07 222 174.092 254.75 cv
174.092 254.75 182.403 224.423 196.566 211.2 cv
cp
f
203.447 212.982 mo
203.447 212.982 182.947 223.783 180.974 256.533 cv
180.974 256.533 189.276 226.211 203.447 212.982 cv
cp
f
210.269 215.36 mo
210.269 215.36 189.778 226.156 187.808 258.906 cv
187.808 258.906 196.111 228.584 210.269 215.36 cv
cp
f
217.154 217.143 mo
217.154 217.143 196.654 227.939 194.69 260.688 cv
194.69 260.688 202.988 230.363 217.154 217.143 cv
cp
f
224.064 218.638 mo
224.064 218.638 203.563 229.43 201.594 262.174 cv
201.594 262.174 209.893 231.854 224.064 218.638 cv
cp
f
230.89 221.011 mo
230.89 221.011 210.408 231.801 208.425 264.556 cv
208.425 264.556 216.737 234.23 230.89 221.011 cv
cp
f
237.827 222.2 mo
237.827 222.2 217.331 233 215.358 265.75 cv
215.358 265.75 223.666 235.418 237.827 222.2 cv
cp
f
244.699 223.977 mo
244.699 223.977 224.212 234.778 222.235 267.528 cv
222.235 267.528 230.545 237.202 244.699 223.977 cv
cp
f
252.208 222.872 mo
252.208 222.872 230.89 233.999 228.861 267.82 cv
228.861 267.82 237.483 236.505 252.208 222.872 cv
cp
f
258.69 224.819 mo
258.69 224.819 238.2 235.615 236.22 268.364 cv
236.22 268.364 244.532 238.039 258.69 224.819 cv
cp
f
265.571 226.596 mo
265.571 226.596 245.079 237.397 243.102 270.142 cv
243.102 270.142 251.409 239.816 265.571 226.596 cv
cp
f
273.074 225.487 mo
273.074 225.487 251.757 236.626 249.723 270.434 cv
249.723 270.434 258.35 239.125 273.074 225.487 cv
cp
f
279.631 226.545 mo
279.631 226.545 259.14 237.341 257.152 270.096 cv
257.152 270.096 265.473 239.765 279.631 226.545 cv
cp
f
286.507 228.329 mo
286.507 228.329 266.017 239.125 264.043 271.87 cv
264.043 271.87 272.351 241.548 286.507 228.329 cv
cp
f
294.012 227.219 mo
294.012 227.219 272.704 238.344 270.665 272.167 cv
270.665 272.167 279.288 240.856 294.012 227.219 cv
cp
f
156.878 199.312 mo
156.878 199.312 135.706 208.701 131.517 241.241 cv
131.517 241.241 141.867 211.552 156.878 199.312 cv
cp
f
163.719 201.579 mo
163.719 201.579 142.544 210.958 138.357 243.498 cv
138.357 243.498 148.698 213.809 163.719 201.579 cv
cp
f
171.38 202.767 mo
171.38 202.767 149.362 212.44 145.043 246.038 cv
145.043 246.038 155.769 215.378 171.38 202.767 cv
cp
f
grestore
227.57 213.451 mo
227.57 213.451 255.342 216.831 290.375 205.209 cv
290.375 205.209 265.228 220.388 227.57 213.451 cv
cp
f
229.324 216.27 mo
229.324 216.27 259.855 223.575 293.129 209.133 cv
293.129 209.133 259.029 227.535 229.324 216.27 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_green_apple_bw.eps)
%%CreationDate: 3/11/2016 11:27 PM
%AI9_DataStream
%Gb",K=]ZQaZL3//[JE,/1H$@WA^,aB"@>")(_#&A`^2.?7[#^VmJV!Qqi*6Q9*5f)Z+"C<Zqd7L%7O;u6tTuR&c(A$>,>BI(WrXk
%Q+rXuVWSli0?6[5AXa!;.I5;E*^"[IfF."."-]>D\i`%<=dG%KN+CjkGYKJ9`s_BS\rpip_K'.q<lp'gqKeu?WR[=JlbBdf`-1j=
%rfU!'$B)mG?\u1"2KqpbUc+d=9VE;8.^`0_O`6Kg5I?IGjnEnDM^H6cqY=_`=)@$:?$\`ZDjKVUFoI;C`4tYoN<TDY?Sql3hTN<%
%@$VE0s"jC\00Ci9)msLW:apm@N1m4F=$F2;<jV?%RZ-C&J*,sUM0+!*D&+&l9qje.IV_,A@#Fcu:)-Rir0Btt1AN"Zs!,:HId9;l
%c_?9rD\)14#sYJDQ*B@3]=Vd)6cf>^8DBh&/,b(Qo)UtA@j&%2#@XT8bVhfE?=asCdRffl&C>p<IZ&s0rb+nXBX=hV:RJNL8HX&G
%GY-LEkhENiMK&5=D+Y'e$K5>bM-"+D+4g(=VeV4i_LH6/:&5e.9E/G(=U]*7bCt]-^XQj<Ha6r!LW/Hp:QR#;Z-/^(`;eC5%^NLk
%YX,'i.5nFW9*rB+Q+,#d<q^`>lhJOr2(ThK4trpq718G1K$$D.,8%G/He1Bh@kXT+nNPfik4PrQ]0q]A[DHXO]G(D/*PJNhnnfTD
%<5OuO1%7cLj*sAe57JiGgh;B&#\[-WX`([]U2AZAa&b4Bq=R>dMiWM\@#YH*9P:##3RrUrs2'8\.@O7r#!Y(n>G2i?APE$b+)g7Z
%rm>Vg8Ul+jX#-lHjcdiZJ'=b[Q/aR'Rr+\CE=U1fqW!6X-GLng'mdGk\;21QZ\@])+]Ih//fe#NKmK^U@HWj*cZ,gCW+C%'7q1ZV
%B:,H(3i=(,J(efV)I]/8G-UtQnkN=AXu5NXM1\EsfE+q]d!odR:W+aO9[$"1KDU(Ir]%HPY@id4_J(T+4Y,Uic/7^QXUe_-DOf&$
%dAqugRJ9k[mg8t4MkG.(C],CDr_r+r]l-TaGHaplKei2h"<X0-b#_28BFTgsZYUA;0f%341(O4-@S%*oTFH@];8*<oQ"n>D[%:gm
%K88,`2:g/)B$8k2K)a2dRlSr8QFP`sDT0rUdlL";3BK7]io3e+Bc?Q_r=:PQ`G%U84`1.f=JF\:DK!37ai6QC$TSKmD!gtY5:n8F
%r[nr/oZ'DS]3=1'fa*H-0$qC5Xd6X_-?iK=k%eCn8#XAT9gZ8\8,TFX)uE'RS223K:-@@1.>_JV%CsOqRsN<I.u':p,oK"@r[lJj
%.LL[G5iM2%Tg8HN$mbg%j;V_d&CKMb)k"%:E-g)kJP@t?>j,-hNT`'WL?!Hoa.8LL(^P;E*Z(-Ac(e7CHBp]LLSIqla1r%7(?.VB
%BfrZJX<!L);U1!6f0\=4\f.]ma+@-uZJR&eE`_dk%Wptu%b=u,b3^*10'(N$XNJf9:9K_mLkSgki3A-GUu;_PlSr)Z1UZ^RP=RQk
%N4q,t>fblK%7dQ:esjW<nf\ngPM'1EZT/<Ri>b'E(reBn?lluOA(_Q0_8D?[mCS[$<,+-GV*/p*<46.JeoK_BZ2J.Q[&`]bP%j#L
%5;e/c<U?q/%lO(P_T$)Vc,ggCjbBF9c"f9=:WZ.%/C.##M*PK]b"Wd01K/0H9f[Q4b+7%fUrsS3<XSMf0fK9U>RZdd6=VX&:M".]
%c"sqY/N:#tB"$L=Q6U2]eLe#fiZU&@p7-Q#m($6>9T;2*QHiZY&Jk,eZMDXMZd;]'rOLe+Vo+Dok:st3$Ta'(<s)j:p(kaLj'qU0
%8N"Ijo?1sV?8#j4CKG")fm7_PD4,Y6WgoU/_o@44p`F3d;Ai\&N]NCHUHT@sLH+!arpR+aoc9p7WBB92kUag;bAhgC?Y<Hp/R;9G
%G;5+r:lh)^aYNB;XBl?W43ahiCE!"MN-()+ZZ_MVL&8Ds4A+oX4uS<C#%"[)c!n,i?7FJFflEV=l@!5[p_iT6h"\Kb.>QMAYl2_/
%)B=Y`jb^63PO>Gi@UV"M^5>>oD_qA+"-*>>?,tU"'ZuE;GcljVRfd/-+4VsF2b^'rF6c-oYr.3&Y4I]aFA6Dmm>Q'Z)@+@7$B;Ai
%fSC2+Rjq/E6N]K46Xo4nZ>m,.i*_NTLDY?Xq,MZ_iF#D=%Tdpq\o=moc$aM+Ye4(OE+.l\&s1^A?N,)aE>jhplZh3gF5FpIU"a#C
%1rN!]V7%&0C#%#4\5=Yd=[&VOf>L;%R!@4c$lgVLEFtZG,bM-A)0_7i^SY[S]i$;^e\^f?0uB'^4c_%!5dRcNk,CnkW)^$4o7^cr
%ZAf'Kf?V#\.9SBEQl>QOc@1_>J)$F*=fGEId(:ob&i>/OaGc*Q4<(mAbj1!UYU1*O)=s;aSXB29&L4S:2+M0H2C-,Yfo]u/i)?-L
%4"H8^Y/9rNq4gkj(`u,-SC5:L=DVm7V.Uc:Ip/X\*+Yp8n4\+[Ju_dP3a$R[/GSb4^Yb&]*b.F3kEs:TjuUP1Ed?3CE^Riu`a4V>
%i;-Tb>Rl\h@56!Fo76MJ1+rK&0nQmda056&0h\!XTjG^o41J[/4'S7JO]0ENF>6+;;dnpt0DS33r+L9P3#lB+0oj3a%@h+O54P@*
%L'qX?7-tg0%,M\ZP:NO80o=$7DfP%rVm5b^//k#Q;]io(1HhX""u<YN4lmr$Ra+Ku=H&St<#hYkEL$1boYQ<[Ytg].2_J(8`P8^n
%A"Z2%W0+4$4Dcio>UVTed)j=B\0IcgL.2U%]+RX(Y)EmH(c(f\<[l!Jn2tMlGgo&<kD!K1c0#Io_F5GsW',6-=HtDu3%3m/bu/UJ
%<_aH/*J;Cd<j>I2ZSC`;EnOn3=/Nu&X$(Q08B"Co481<&pfg3sppP=++0/t8/Jh$aLi)+J+Lhl?fku?MOLnM\./kg>7#A5pe)J*/
%AYMk]J+coUU;Z;P22/"X\+mhR=H%.Wjl^L'7>ZZ@["t;&cUE\aa\58Yb3_1N[j`+>%Pe]iM\:qLc#QZn\L@K6[$g$M9UMq<,Q["M
%k+]e'lk;$eDc88\*+Yp8URpSAoOuehOc'j1`[:]7hkjYC364e:W?5]9Af>`*@dW87:=hK"Ek7b'`QI\=mDSWSVjO'8\5=Zo$,Nb/
%?^TP08oocWUCfT!VGVfub$I;P]Wor6l/r6i@uln[?E_PrN3?NBYIQI'Ft<AlN.%8e[2E>`I=,n,7SdX]g)kAZ(?1X"[@+H]j(eU'
%Xu950DC&ARl"W#Wp93OlSIqQj0uUOKD+S1f_>bETSuMeKlkj%.(jWGt'OqG]a(TXT\nL55Es^01iU="\>Km(1)KBoXGe,LE#q&4!
%V(DUPXOPFRYuAgFC14)^AP[q]o9QYTEXSAGQuTQI$G*^6$$05e$.GSt)[ZAu1AsoH?)Bh3DGa_aTpuWh$K\=lZ0`aQC7&k6@r5Pm
%fQ!TCC\feT9jd0c[!`gPfMj_V)5_!C$Tl'rRVMI*R"f*m]AAjc$BJ\&1d3cgr://02l?,+8I)h<nY;KD2<h#&=".-"F](qXRPCtQ
%T:45Ym>0D;.a?#U#hGdLRS#2oXVDaeV6CPE:Ss!g`,P%5a!%_Z1%mAYK>U^"5[??Oj23$p>Oq\A4M,Pd-Q@iAJsK\%f[D$FVFjJ;
%VN-SdZs`lU6?3tH&_Ei/WC[;_<Vju"^XF;)*H@"O=o<JABR(Bn]`OC#r-&qV*Pb/V!ER3\9V+"tq9EH`2hTX4NVVGRM`t`-ho_aA
%H=ntiC%,o_@_P4rX'*Yj(*_!>:/76tD@r;*EtTFeM0DDd%ZA<K?c*I)(/E0o1gi%n/uULd])9FtCq[>h[ib3&JZdB6N0U9foh(XR
%m;e^qeapf5m+N;f:U>422H8I+lQ.*G/kqcoR!Hbb*jU9Q^YG"LD+2)hT@Ul`]M.Ti\6LHF$`B9OMaF6W2O8,eI^rA"QEQ6=c!4m;
%f@eAj2KPF3+;I6UT)$^PXt5uiN+bcU5D<"AERfc)?/$!O*#IGA1!g5boNP"-@)pnS]4o[s2E/'`Yf<-$Or!q-9:t^Q,l:g*19+En
%*(d?fm7OB+D=]Z4>5eQ/I8&l,0bDe:HOY0lmjf'bEuNbl^T404?44UC.l55hbjdH0]_i]g0A=YpNYh):@K4NpnM50ubT&8la32]s
%13:*%L#]!h^b7E:OoCaNWHD`h$BT[Qn4^4pl.._\\<\d^jr'YCXO)H&*UTr]`'<'#@+(N=`5,m1Rn^h8Qn`A7nP=/^)nGrW9IbC!
%2d<f?7m2h514I759K:=Nj/`pCoF&]B-`4usNq%hFeB#V`e:HkQf)<?Y3)3trr>Kc=lb54A^,.GtrRZ-ug-<dC.t<QTlCDYM9JO+S
%c)U?TY34SF<W4sHaK1n[18q6oE`*DefS*LrO*P957\,QZR:e_'D6c9;P&\!(<d3NlpXmgi%b'.Hd0BAa:>,"k"t"2"DX1le1CNU$
%=_N_jo3aP3`fXnD'PHrtLa1:G*Zl#lD8\^!Y<kER;P5'i2IrmKaIItS'%0qca/75_bPW2%DBV0&g6Fbk@n_HM3V-`SU]N[M@naTY
%_nQA(N&Wf@r"p)"BkMmR8S-p<5K:p.0dV:-Iuf<7aMuB$]^>FG8M-EIA;b@VKfD*-o%qadBMC^g>3l,VTolt0^!gP<@ba8C(oul8
%C\5,uMpilIgaqj>VI%3XWcR[>O>;tRqSF4blX?Y+rb@2L>TAIodeIh@Q5ag]fm&U7iQ7N,M_,Do\"2pDW^]@bYWL/_C!L36A)&]c
%W5MO^.MFG+:26%lS<Lh-`eDO9DpYS(d&_04%3ZHV62_V.%D""/cU"m\gaplW:T%.\eoa36V,gC'TegHpEcWW%<]Ne4jQ0'[\lTjc
%-9^&*\4t(OZ&kA"HZ_:g-6e]$<^_tN.eWfXH'TAde?W4:@:=2n#r+2"VD+HHgtluONn<[Ae=5-3P@_qVUU$:F2kJJRZfYlNgru4V
%=`ZB7mUiT3(g?!;\)q;e@FJf6`TTiHL%\a[XCgVMbab/jF#.lTB$SZF\[b0#()V/`OI1-RcFHXr>qBMu-JbJcFGH,Rrj7uN,M$eF
%4VpJLT&Oo%\*%4WRqp)!_<?jSnD0>G2X;kJ)2I9RpQ_-=a6`%@0h*A!4j7[u%5Pr`N%U8;-b&Y!*>c&moAtWfW`6=86K@f</5K]f
%n[fXY9<H6oMsb%\5!1_#/1*R0Ef;ar]W""^\'DT'Qa15gbW'OeiJr`[ULsX,ZW4Kb+['Q;m?SSJZ0u+k)AWnaB$!V/rdUKXWh;!0
%gY!AJ8Z5CS0#'(mr*j$f[\(a_d\XQF:G>h<7+WsNH6[du9mg6Dl/akDKjBXJV0]IkP0J]#2m%FO9UR_Od_N5!/55b%Ki0^-"KF>"
%>hdIR@`/^l`mYbc7O+t<8AE-&6Ze8-Zhfn=0Ite5(C"-S8O/Y%D/#t)e)nY`r`nXWd&GFVDS$t^&'36leV#,u]nS#dqo[R\M]l:K
%BK,pn<m'C/&8]*:;i2nl.@TKh1S&2=+T)!D:UO)BlWj5:]N]f]m*2i>B?kB1d^;F%X;&ZhANj*6+bh7)O$dC>C9hihWae^=%b=%;
%$KkKMl,(9,m!ZAnEMNsIHedENp*@-`$]WtYiC^Fl)?j[Lpsr+uc@k4P1Z_1ENcB$*FQ"',Yfqd\,RK[&>b#bSpg5EgVpU,Z]52Fa
%Q(FK(L"!@M2[[N';T,YlcZJjL\Wp7/h<(<1\*G[AU!7prNJYZoa\,d*/k2=bWSl`I_U/>Tql07!34A`p*'P2KS;*4bnSI22]j2_A
%oeaWmJub-E#G&9EAeVYcaiA7\ZSu7T2pO39ofY'JcF5MDFEVPCETpp@gLB03ALrkO>K/WurtID[\95?)f20sDSr:GJ%N]e4@r6:b
%L,o8A"!ut^;r_-^4I,4(oa]GMnV.kaOu%f<-AVRJ>5NOWehVs5)#YP?[_n*kELbjU$Lac_`/)8a_B7dK+1k"'R@@`UjkS]lZB<m0
%A4\F_,]5]3]pt5<\B2t-rQK(pXN;W%ih.RlTU%1]:ZC0*0S)'1lWbO`;q%U1l]`7-c0:eJ;;<pJIJac5_C9E&@W?#=r3n%mQ=>+q
%.@)mq_)3l3HB?i;NMDJR^3(;+5BH>Xk\[0/9=&RVRmm:'/NbVL49+m7+)e4[ofIa&/QHTQUK)H-#j"dknlM6/"1?@$+[EAUhS'Rs
%D[Ck>VYri\=q"VfN5Q5*($4?2T9!,;fqX$Ch7ttN+@/5:[U\=3<hN-QIdh1&o^IKIH-1-rK/+H+i#`q#8:4*>Q7/Nkj)=khRXY*)
%ci-PhM=&6JDakrN-iIlm4%J2Q'6p%[N7I<#joETRJ`uS<gW^MO7O&VsG)q34B*X0#<.*G0>WfpoIJP*@beT2\Sbo]_'@[sYG0eUb
%!Jum;_/a`!iQj`3F7d5T2E7h"?>o#8B[X'>lGZn\r0N('7*:#7s'7[g'J\/<lQk=[:TsVH#!-&32+sb0VR$^UP6XTRUB_ngr7],I
%ks5QHmdoVB\K22tn\'EeRLsu0.e`MmBV9TqE&@<n>X,g@f':FGAIAse+,8Ka/SOG*^J=`*Q-%sAZV&2/mQ;KCq1g,ML+Z.&K#`R#
%0'4(D!D-dXB(j-^>K.uoU7K1l8JM4%U(!:E&!#X$701\j==5?=:61qWY0RfJ0&j2@N1CB/#G/J<]hp4Q!;jB*&m_MMTnG^ddQ*7^
%WW0oIfcQfqo2!8F]8gq1jKAl_mj[2UojT(gHe>jmfj<+4S07?D0?b1:i&rnqOeMP5+`*XL5hK,?1DI$dabp5>K]$G=7T,Y/58:5%
%\(<AXmJC\>O.PAl8OKJNfYtJJQ3$6[d!#?^&c5_3<!HcS>\T;"Yn`ieG%u`[iN>3GVY?pDd41MhMKb4:oplN!Ju%3j^ekFXff\M'
%,60(cT7OP>f1qN31tOHc?N7;OjpTF3@P=faMG<K8C/'rH1sJG3.mrT#Z^SrLM(HPb=A/#3_Ksj*FP)%*B@ClGY#*C*,BMLnc;Q/r
%5JMTclIAMeo!iM@&=igE0_COiX+b*&?hL1!V-%NnRbCH2RZ0pK03`@J[DIF1bL<=HK1%S$,u!TX;R>$$TkkAKL1G(Zj%?bG:UF>^
%G>1Cs'Wl-0]M*KuV:eD0eger0i3<GhnSBFDOCHA`H1YgkLt2uAh[\sb/JK&?NkO^_PkHUhbsms`)"NjU30nV3RL,29C/LDa(tV#X
%\sfap:n#`^jD"9jCHHXddotBJIRi)6^O!-LKOF#rCJA&L\RpQtg`C3RD'K^Dm354DKRYon)u2fFHX%s7)Sb$rXs`U"6<i.6Bet)S
%-?^oi(6u7kSsRF=EON@n<h%'S(IbdHDBqt\LG2d\<!c[ZJ:A6:Vt<H#<kL>"?*DbF0GZ=Y>_>kKDe6J>FPpf3&\=6cYZ?H>\))nO
%h2XG"j[LCZ-T;tRFSlo>mY3U+nnAdj_O!YV7hC7kIlBF`P3F<QA7qpaH"o.a//G"Gr'3%LWq=p%ZgU2HkaLA<!_YSb`BlRY1h]Z<
%nJ2[kApo3m>r.D`:2GV#@<'BB7C1Pa[E<c!QM4Jrh84S)/AB7b#iDaV/mAIBXn.)BW^(>V!?9TJdp6HFs*ar8(nZh=FtMTdi>=08
%HFA3`Xm`_0p+dCB=/k<!Hlqhk:Z#1kh1+lu%$_rA]VAP:^M=RCX+hY%\"M!)ooMHbBI5W\pP6tea'>3J(eW2<IbNArT)Pf2-](iR
%OnZr`bN#UEjGA/RL6j$o4Ka->W#jE]4F]Kg]/?=r>!3"A[38I(T%RR-k-0XLeq`6!NU4T!\]#a)IsYH]hCP9u&tLl2.=o[-2GZmY
%b08%NU-hThKo'9#>1,crlX61IRVD1qaY\:ELs`+BKNkU%F3@<]/]1rHZM=Q(IC>Zt_L%rcQFF:fXJqZ$`=f$1XZ3=!a?&`UaQNXT
%d6"l<&aimY)&IeEAGije9O<X^BUt[0BoCs+_V\da`5G7"U<3H/nE7]8iO#-Brh]\L3Aag>erj[n%H'UnrH3Bjc^-@Yr7_<K1^<%f
%&0)"u^e%_0hfnn&*BjYa2NttB,J21k\TE'_4-<;Ys%]A*,]l->*\P4\@?(c3^B9PuX4[eI^I@-ZXKE%EA)1Pcc;^kk99oE_aD:T^
%V08:I%(I>m"\MJKb$eQ5d[G%:^l(M:o;HCYpNlnJaIleK5&a)-:kR9QQF5/-3)<31anD:g!sXl;''=rYb1.ul!H=Zq)p*K4H[#;r
%W],uC\68bo<_jLC[CL`RNXK5,K4(i0bMd.Ng?7Bk\OsEKJ`f=OMC.Cm[aE8&0+Gk%aC-[e@,?<e5q=OBocDuG3UH3LZH"BW2[H;$
%!9e,bV4+Fn)c7]a!^%[aN$eZ[]f>(HPKlM<d4FGb1'\kc/XK[:M#kMK1?;]>PDdYu:[TSDLZ'u0?W&!;M6D!tLHE+T+"&\j'j/id
%eQV(1:qUV3?Q)>4<*3g:48fAk[(Tu:h]"!)G\#u]#7eu/NsgqFFqALuX:2-%&_VU.0-(iA/IhK1#(_]+/U`ehkhI:4>1bQ/O6eP+
%B]KKIqcTchT=2SmG8P,!_pe^7R%Q!BX"aa3*]Stp1T(Z)0^eK6.90J";ej@%%N%iCeL39.4.fJI?f$C>Uhr@_]Hk8h!t/nC5_d+Z
%EOCg#\Y5`!:7L9[XZgDigQI?A/7SE&!u8-0d>^aUrnpthIPP`L_uh3ue<T&eg"L`M''(c:[ipee\.eEM_n.&+9)Rh0e_3Tk4RhjG
%<%NSJe;*BK$,!K^8XQo6_j;W7XbY$&(".$aBe4]9i@!ujdHb3(5>[k7_rO\h$19=^7;cfaY?i=?EL%C"[`aqb&*/B1Od3r>5]8tJ
%br4l2)-(JIFjRkN1;FpOhS?SffTfFk=56f5`K74-DB$#srd(=V=ZXe$>8[")(W5pU%OGQ!fP2IJ]3(((7<L:#`_^*\m?.?M"IUrt
%'!]U<N2eb@IFJMVHSW2(X:Mc9A:3!;mrnB"U@Ff"SngF),EM.k[baPhpX3Zba,:a=SueA4\!6Us]73%l&T6'`'WT,+Figi;EcG?-
%)=NnrlH:m%JD5hlJEq)6F+d!dlYVCMVGPPKTV(F"DAnnFr)K'4Y)]uo'#)b_#IQm4S%/#tVeOqY!o\FA.hXC:YE\X454PhWOQm50
%i")[%HD;UCP.-'$oB8QRE^YK*5s$EnS3\[NCPT(9qcs6;IcH2CrWcr.oCm`YT[M/`CkDm9Y0[n,1Acs0k`("r<l7C]"QgcV//Ig/
%R<Z75E:#):kQpA]IVW>9kDFJ.[GKM&hTUUIf>0]j_`,Xb3]Lo@Nm$*BEKH^V6XdTl@UYq=,Pht0Y-#Q+?[FVqp)LG!"CWHZ@VVBL
%j`^--(]H\4Bb5X[!dLi2#7k"$rC45c-\`E>jG8!ge=F4<X\0jD#m8RV[5u[Zdrfoeg?SR.ASX_Q,%]clN"hW^O`>t0R"UdC#s(F%
%4K0_-3Xa,fHM.Cf3a5?q(5pGXr#XT.Q!+7?:a0,a+&i!X1!-55VA61.-A[=01&\^:mr_A&]@'APMtCb\S-Zr&kpla$-9]Thb)&Gf
%hW%DtO"M^A_lX6f[&/[L"V^"77"M*VfgIPFn,5^Z!NdUZ[RBcRc.j0:hCPSX#MktF^9#(>>=_q$U2nZdW)-8HbNC;C8m\3:FW@Ac
%X\^$Mc?>>h6"Q/>hdSbph%.E`%u'MVfJDu=8@9s]_e,jT9%q]L4-i#!hrpSYD4hXjZEl_nX-DfRs&H%hGFXSOBLhftnIdnf*Gmtk
%lYKhU06=dA36Ei["8]W_NB4;Qq\i,TMqaM;V6(5D6:X]i="X\+b4/CIL5Pj,g=<T1T$9A<nA7bjD>"CV[p/gq9rkf?WH;%F;Z/^M
%="&cBf=C?Bl/[P#hsEo->+^dPA5]sAjZ)#Ib5MldK0qBL4+pRfEar/jSt5L5KGnoE[(p+"b.-=%*"7cg7*oZS2p45@1,5&TiV=YK
%K/ATXd*F!%-A<te$h9G'#(=%q21;T^_5H]6q=fp\?gH0(;tQ''>VC6b8eS[dTOY%%d8B0?A/h7TXCnSsGZJKT%N4C#Nj/'HQ8je:
%c5K9X0BJ=R>c]lIoH,k\%("f!a!A@703FQI0TtR[:T2HT%"fs4CugI245OpL%p.AP>n,GacI![.]DZEK4k*"<lJ7K23)EhAN$g[/
%d328$'2's%AKtOcfs'C]0@&_QL0LqP<fp07jskMRq8:3q/q279lTjhWIP!<2Y"**(QcoYaDI#^fcICG<8B8G<3pXPeje6d+%#^p)
%_UXKrh:G`Y[@ZL/JK`!-'WseZWomn%4L*KuL?d2j%R\\06?:^loCA'_TuWOUe@6RS1Tj5Xl4PfLK$Kp^YJDNgZh*=%NfeGjk$bls
%Y!oR#<7O$MT>G'Bo%25UVrAdZo?m^5o0[]<eQG9Y6+&%jnf^8$SNs_Q(\a`k5.0>W7X@e:Dt2"N0-D'=BEguiRU1<6T-81lT[)oX
%@43'X-kFlDN1M[2'lV].,3(Gu_^Oc<o:)*0++3@uCTj[^9d3K%0c59Te?o<T4TGp6U0OPJ@RX.iCpSM\5_klT&=M^(B-"ai*%,p^
%kuLT%q!t&['dC%K[D0GdkrWTWh=KE[l%/eBkM_d'Q,@6qQEqYL?<[qa(=uT&02#qNVr^"D1NsVs*j$6aangG[rMpD%hU:]dQd</.
%(J@t>+)S44RQ3%-Tsjn)VJY3HN-b>5qK0Q`^Uj>+q.+VZTitg*^JRek1TS]'GA>O(f8[2e=7<Ru=6smU^$tB6/tG["3plao<rNb\
%cqA!m/:!jp2UXh)XkB<_(K.*P<^!k$h`.*TmbV_kde<XW[@bE.L\.#,M=LGPmqha3i5GN^m`X53_0Y[ieR.\`\+FN[jZN-OFfCr`
%c)2@!1c'2+o-a/J?E_Q`1=+Arh[[?-ibJ#Dd`L3GA,XXKCj)r%O,)ti\b0`\ji*u^R>?BrYCAe8?D3u4r^q+k2t*h"qEOGHp)!1_
%"c/5mI$6`-r1'8&D<.42F6dK4dIKopJb<u2mHqcOq:5..mka9<o?$S7YOA#6kAo6sr)B'@38$?V:RfAQXB-q-s05Pur]7epI.6.C
%@Vu*[1UXXjn.uX\]Xn%;bbEFnb9+I#VTQG>V>4cYb>5h"f4P95HWiY=;RP;W3IebR[\h9F?e7Nhb'B%7n'Ei\983&:=k[D-qq9ca
%6F^(gG"[G)Vl^3)l^KF!%Q>.)#7\#fRpXrtcb9"op\C'bq(GD+ptds$pNcQ8U%I,gEY$pq`BA>#Q*F<7f?PJMMjcmqjL5QhgV*"H
%e*P5pbanRU213E_+27=t4G5n.*8fSZq3Up?R2,\Lb2L>Z)8EninO$neT@>2bn4.!fq=BRLQ%!`L9M]d*Ch5X,oBgbYbne5Shp.Z(
%I>14n]l&DjXUTkBpM:A86CXT-GLk24]\MbUrk`hC]0CA9KCmLcoZ>Q@^G`CN8,(Wjj7i"oh$5%ZVfpYCG1.i9KjUmq^+Go(B@cEF
%#=l(mTABG.N?`ND_j^NY[?F2^4?Qe#r,eP`T9LCeB%BbLR'_UoIsBgV^=*"R^]1A,-FL2Qj@q!"3<)HK-X(:G![*%`2>M.h`J<e5
%60YrGB31E1)L#*bY8b_mj=W$%a%AahnZd6bRVJHid*=\@LM_Fa5<)Y-<aMS]bh#jQl!WVn8g[7hnml0XXV-#r]O0KQgUXlBAdJ4F
%33+u`SUaGt;SCq5R6#Y21>T%U=-nDIk"abY;oZtrBD)'!pD&7THUZ`P?4^`2*`aAdT=K=3)tR:U9UfAQ*.4b?Ze=6WK2>Y6FHmm[
%Eq^WYT:ToL^#e&H]p/7o*F@TXh,hQ+?'F/o\ZrY`*;&!Oi&lCn:7k)uD!0u<ffTenCKmFVqn^HC43"u3jIOZVfhdELBlEa/:Lc?T
%Gdk2Q8NWQpr:?7>csEi6)W?rCa_[anDp;SCq7sWjBtjGJ^gBf#rDA!Kp9Tl7XVK#$.]J',O8!@K2tO-XWZ)>2[jpugdJK*\4#qXU
%YC1c-k0@n9C"E)>IIcTe9CQ!-KI(M`q"Q>ukk'Qfh[Za3lKPX9i:fIaa7e1plMZ??]mJPPeDA$.UAqR0\AI%'/JmoEp41;$@qG%T
%Y$/oJ]JSe4=T.Er-eZdV+kb;[\kV4p\M<jFf3qnS>l#rVHEQ4t&qJqicN+!cr:4IuK_TcZT!N#eMdKBZ5@1PZ^BUYZX"1C)P;M@@
%#N>tm&(f%Oc(id;o>#8DPm;r>d?E!n/[t@K[]K(n55hkZ@V<C@m@BcmRE+4BVlYYtmVdW_f?KZJ>H@P`\afNmq90,*QX6$eF6bJ_
%c^qW'T[1!#nmhU/#/7UmDt:+"rg%kc^HRk5UG&_/fp^-N>$9'oc=2)q*IY).@)rZc`ij+Q9FJWnN-a6M83VY:G0dGI!rmQ3NFa.4
%E-<+r(;_MTKKd;@$I/XpgO6JXJ7m%f>Pg3=a5p<YJA1q]rj=W@Ie9&Zlho0d"u%5Sg8i?U)*h?Go',_WefsJPP.!Q\EbYD9!o:K=
%B7Kr>c+(+od:_MdXB0ah7YI,.HUXM\?L;*F[aq?`p&SX15;piCDi4V?5IIAQYBKpqZiNI3'mX%U)]66<_Q-BaIFjDW!.sWEY@iG>
%T:fjdT!biCi15>_HKiMZf'o)6ZqHeWZ7L.EnY-tmp"$$pZnHim#IdJN#eI]\?!I3=9tWS0Mim:GA<pFBm^Cc(O=L8RiW;72op:"Z
%dI=1-6Lr>4V=il'N*P\-?B5q7>?YZ2ZVH6qch5Q'48b:Y!>&]/nZU9p3oQ:P_1su2bj(tmJF%e"eL<_7<10QFkuQrep8=b2SL7!b
%25')%)Sk?\dV%"kX,$H+T<9!E+0BGAc@7tkg")j,3/uapc(.U8AH%\8*E[+5((Z%d5$`R66?L*#c,X2G6EeQR1[_AoGVg5<T/H@,
%Vr,/_[FU2_g/46k/#RSlpV5=?U"gDb94mp2k1R+DH>=4U<Yg0q.[U23o^:`mA>jsUDWDQCT!#U3C9b[`1tRa`e)?LM=)F4\'r]a/
%TY36e48\=3FBEaXRK_BJ0S"dbVK*kq>L*EoD0g'(noT6ICC5SXJKeCVq>@uE0/5!o<hTF^j!BHA&ugL86<s_7@T[hWaPY=u(5uTo
%em@ThGlQ],X%a[CYH`i:?E3]u\'FJNHTSOC?@>P_=`Y\4(EO[%]j(I+AF83*D[fa4_)8kh9@[aV0_IYSh^$[?5J:l[j^<=@namTm
%b-/Gg`N=dBcMKOgp2iu^7ba#0ATPqU5'Pg1X`NuPXlu@*@G?;rdl%__5n/%d0@(_nFO&aF_#9CjT,&=uX*9VW@"-dXgHG#V'fO:Y
%,L(%2VY5qKoCVnD0/L*3@RmQ7^Ct:%p>AM5lZI(UE=SqnkP*QR^><!:Ll[Q?')7b<KTk<qCZjIDA>njdfWBe3"M<Xig:;NQVu;Ad
%bo9=O;UN9\^$`2%h6kJL`n+a:(,,:XgQQuPNH,]Q;`tCY^<kKKrMO"M0=UV#mG71[8WQZD[i3cYV['2FDtcK3,`hqDps[[7>^:"-
%kKW$mA#l%L^9$dV[7d-PNp!7BO8@>tR20@G<bo+Lp\*&/i=#Y%ZLME"#7SCjj!7aam$N0u](Tm`DQXl>_Ya2#Y'p*94V]N_=`"&q
%_#BTMUr6Hk=BM]]IJkYejRIgrXQtrVTS7c]`780@F7f7Q)/uua=,t%^<tF355?p7=h_1'J%"9tBGOXl==3%A\o]t4p+.CW(l/p:2
%EuE[ma^)6l43#E;4_0\r5+>t.fkUC5#9Vt988sO0>-+6q([;0jh%,ENp5ITB^Xb&4)8dE?1%2_9,g<#nClqWeVT;,j9`GSRK$<7N
%]8b=0:M*r,o%BMAq/j=b/4:aCGF-PL(Ii`LeNFL>Mj6BMPN"8-Dqj5,B.<cK0[rbgCA6sr0tCrFV#+`S7HcPuc+!0?D];4(++,7$
%:[bCa>5LM8&n,E)l6@A:hL@eK&Ssc<SSfE3rESR;Cm]^%@2!"+n?#V;:u:/SFh_.Pb><,rg'BXOmi3F3`j-$0F7OQ#2fF(<flOtk
%@YKTOkQgt]f"KV!([iHC2bSiXCX.]rajdpM];MXAK6\:T0-@k)k,k2Dq-'Zt,6I#\e+DdhXXDI\p36l5lBV<si;3`in*anLmQLK4
%5+s9,/,JuVd]_gTc`tXAjoVVjS3An[ap@DfTA8<glgn,G`9LZWA,_=3dOFXh?e(pZn#IPu2]AeoDp^J8hJjK=R6;+gF-'YnqV.c,
%`o`VS.sd5AaCW-Sp<SqdV8B!OgSF-eUb_11YFbARY%sO`:S1eh<r)</d&7IN]XPH5SP)>9_s`Z4g$cBAp2mjLYu(74&t=!ee@q.B
%p9N1mnd+9)[[9c"/`!IkCtUucp#^u*n`BW%oa`].&VuHqeF%]-Q29)RmI]\I%^f/0AL(uD%rph7a%uQu6]qrE)qTM(q=SJK?/0JS
%$F8O0n+Z7G:\K9;edH]j4%/!":9+5>ZdOnrG],io4-a&.fKORqVKS7`hQ/?5<BJ`O%GT%\C2G\=JjZ`=]PmVTl'(&GduD[^j5Hg\
%%=ZkL*KVoCrDT_:[dsW[ekInO/W,&Vg'41bHEl-h.aO`t<^/&?c;PYe.50=`II\e7nu`HG/R1Z\qs%L"4n\2!ZbCaspZh`6F#+On
%4\t_mP'Z\?ou"UX2RAQaFFZ`+q;0rXV8MeEeZ[PafTk.Q1M$)?iVas(g-(@PX6>&hZ`LejDO9LXHS8_lhYd5_r2I).(3.TY3aDUO
%LdlhW>lAV^d-R.t\bit+:@@3[=-qeC4R^YPl!F\`h+W*"LMg;Yp/d,GgpId:_lbS9<.'!-IfC!3GA)3'aK(kDqUP=d4hYg)fiWNI
%s1s&VaA9S%8it@i?D;^hQc.SQB3([kbrK6Zp&ib%%\BOn%VfMb)CMAAUUXJ,p>b7ebag\n[<pdMl'"^kfnXGIP,"q9&KLY7=[.1?
%[?"0qh`t]@i4]rV.s(aNc[qj\o<\)4k79o-3s&JG\%*$Al`GH!1NT&]6PuJ'_(@jJ_j0[E,b"=A)mL,)ZC]9'p79q.+Xp&;J#7D5
%22eR+([%hLc`?e$%qVOWd80S9*=HT2(I#IWhqK)!BCX5.YRIkaB6Y,CqE:S`q?j46RB?$Lc7.5?(R'pWXOj53\%eK-IJC1=Wh`DP
%Y4rF-rYtm;3T`l31/=1Ek:Mk!#7p:A3jN&@YP71Z"46Vn)\"jR#N_2D?=_n)C&K_DEh@)AHM(;2=#>/q!_(EMC3o\i[E.=I8EH4g
%pA4CHNWgU]oPL_oXkm\`6O-"b6mfPo9sBYkV8\X`=prqW?cD`>a2V;f=T*6]cL7F5%T.\fEGV^=lI>:qPcjp-<Qp2RC"u([a%5St
%[MnCaSR;1`JN@_X_![@Er0`<Z\\%8gZ?5Na1)p5LX32F&Y?-'TCecXUPTE"6li*g:<g!5l"l$u12j1i4pri_,A,1(RIco*@Xl9#n
%60"PTds6=^T0Af;pA6[pVY0W"eWjV+EMnD;H+*[P%j90gYP#@D_%.;8o?Z`pK/TJ-lNC87k2&9#":OAZe&&ep's6dkUG>?YV_0\t
%\%(^O4P`R(0C'&MdMF]\Y89F)S*s#Cj`'HmM6Pi`h"g3t^IkS615C=@$bKPS1Z]][:HKg)Zes*tZEHe*X;K,.c*2AZ&QbR"T6@lp
%MD6pK^ru8k%/*71hp5h6:Pm`uRg8cJAF-U5bUW]E@@Lro:m$pHZCT]V=J`\kI8]M0%+FE0Y'KaijY%tL6</+\&K/]gEk#_RkO\+s
%pYS10hM_&.lXsSqG@?*Z?!V_gI8@V'ZZ<MiGJ<tnoX%<ciPt0R\+c\\HLKu*[I>\:9`O]EM;aY5C9Qh@G-U,pa4:%HO*B&k?<]hr
%pXZAC\8.<3Yl!*83,4c<[bJR+r[`K_\9D!iRU6Hjo3Y9Oa@ppN/$kD\BqfG6WYV(]fTYH3F_u3d5+I,2lJ50U1'0c4D;Esm=&tuo
%=7:WGCjSR:o(h(WP0,uA>q7Or#;8;jr`H&2Brn`@Ikp*PpZ#lJa1(1K1,p>[n[)D)33[Za3]GjP>H24(:7a'ZddFlB99kQ6lRb<P
%2<B$^@]A"B\'[)%#L[D&2e`^c4WkO7Y1`fTVR47j_0bXD]mRZllH_%K^3&#hk/9ml3$anl2<lW#j__ECOim!tp1WP1rM8p>\$GMf
%c!&7sfYi.J$c%KmD+d[9CA">2d]21/ku_`3eBXObLqB7-_FgaZR,6XF=V6*cc5p#8_Sgl6naf%Y,H);7^4/7l:V:?1;kNSEh"Nm;
%IVNK$Q2,afjI+&JjiU'<II+%P5CQl,b+%k^fjMS]`dUFh^iniP;>'n6)iL?ddl%$L>3mA__Y8c5e3U\F`;T?Uqr/JrcuW`GXdIod
%CsDMRnXJY#V=S?aDhV!]3lnE\&Y&eGK1]4i@D,l0>Kngu2iI!WQdc"&^&*+/1\YM+a5603?Dqrs6'hi4D=ND`CfG'-pgD!RZcT@G
%Itf`K.aO^SaI2TZ@.t%5d[$$ap<P:,A:OM^8<mQ;g!0G^qke<\^8>8p3AK4f7["pB?f'R`[HB/jI"+iBKGgmR'#A:rn_/MG)#E-"
%qSLiZ5JOgPmoulp,pt[@hq4M2kk*+QcriE.DrdM)U8d!6XPOKEDg]);S0#P1-J2Y@Vk<mY3]P;?!9O5DDs-##kLQK?M7[<8[VL>g
%E!C`O.PgF4\'`JM\m$%o1dXZaaqSUO;r(/D\jrGaH(RCGI0t$VXtRG0ES^e&]n[@?Is,)Sa45?R)5=+6:,EV6i<9NmYt4mL&e5t#
%*WPrUS7+TVCm@$$0NDo\]C+bYAid2]Qok0!16-%PXJTu*UYiP,Era'%>a*7\21GJhcTdlGV3"9h_Z0/.O/D$t#LE'Kjj=SKmY/Sr
%MFq4aW=3%4Lta"g`s@'@M<%[g5FTTgq]D)3WMH3r-Xh=]PGIY-M%ZpYi&Ld)iN\M%Cu8$UJRKlga0tN^8d<ED&uL`A?.[(lAl@;S
%-$&XhkP.X#="_0sWhet/gUOE)F\Gt:_m5H6ch$'%'2LW5jqDX>dd).ID`6R:!?l,1'_E'"1mOC94Sk*&gMYG_4F6(VahUmWJ(jXF
%6Gpa_^e,M/rF?,T:>0SN6^;(-9hPL+f1NXH#<_U@T'r*FH4\G.2Es*ZUeST;(eQ)kM^X.2#"^$nI<t%cZ39gD8p\X#n[^Ji'cbuH
%a&UPEBOR.iX/$I5prT?9oM#^7iu-7O1/7bN;RTA.UL.\H/@_E?oRg_e*l7-28XhW)h?.f@Oj1*^;h*?,P+WZ@2smDLg6bsh,<%<]
%aA1/_N/(+`HS-tL9?TSFjHp'4>"<-2#nSrp4j,1HZTNNqGXMl:8;26QjJnCt7ir*Q/QN*L=BeG[kW&!1\pDH*cGJ\t:^M;sP>6Z?
%M!at2S-2sB$*]Gs'Ek;nJf+E]B:6EToTQ$:]YJ^=JcphE]1a/Q@Z^`<9)=j-mA.MFQ=4JI:G864KiP:R(RA)1j0=NLnk/FJ<ml*b
%-Te!CnIq+J6PP?GCZooiP>*?<YWS"+_5(W)*SDndCH;V?J'k&^FGR0#oF*DB\(uSKa?)qG9U"K_->Dgsld9usCcNa<JEXhI0hfO"
%P6?$u7_+'PU^8[2[;ZZtU(JA&6Gt0rY]5n@]7%_>jRCUg.c1HdRIn("b37N7h]ptRs-`&td[3Tj^`bQeS9CN=72`IN`0IP_Zl'bc
%cVG0T_(ufO]n"\nJqqb_Q=7pGb6?GC@aeCpT%+BIG7i*bb!XFhYiMD7krESnID7Lupo*R9=XrbT^(*Wrak)@QdD'3agCZ&+/:kmb
%_XuJbn5;BD\!;kaoTCOmg)\L[ocYY+Eg\>4VMVj0TJ5)?+^#^t"VrL;#a2^;5sM]'>B;r2AjT*2.pl`V4c`EP^.$?fjb&GHNX_2W
%,YmFKVTJ/BSLq`l[UTpei(laP/e^:M[-;754`K:s1*C=qa,WM((%E+ga`mM7*D$u*nee:Q!\_JX\+(O2D*(Rc$mk]@5mNmb"9b'?
%npi:]";&++Z^kd.X,,Dr2(Q`aNN;Mn!Yqo1$mZILSYCNj*<VqCBd4&baKYeJJ)*iqI_ZX`i$j`M<5]H?5doNh%')7M2UN7#[9R1X
%N%2q'f5a$J;qg:t*YYuRNI@M,l8j"qGRo2R_4k$S:=kVRM5peHB`s$gAK2:.SU*EICl-0jiaps`RaTY_'Ct!]bYg/Ek_oF/bNB$;
%P*^8"hH#0kit.V:*@K2(j`SW]+.S?$$d3GE43)Al-S:`^$sF;E0k?V*U;nT:(P(p'6Vm"+Ep/EppMGFKJrkH/$UV_Q1Hg"JE*1.'
%Pe_n@N#(#eo_Yur!Ju%%b4[!h!od]XK@glnpq5boZ;G`Aq")GbZ&Q%7&;pb-:;hpWWp(D#&&ah<-I;40TcHr)Nk?D5@c>/#B))GV
%YW_suD5+j:arpq=('V"7^2@[o@d6bdZslLtf?SO^hu]NinA#&uL_/PTGSUi>\4Wt[Li_k19P53H0gs6DkS`o:a(38d]eU##:eOSU
%,ToF7`2+G>L6AbEdkVnPl-Ki4YV4eX`m9GWYfKfiO?HCS%XeGJN(JB`?t"k&&=_b@m6R#SbG5.N_o4#7%*c(8)tO2?H;)?rgmno_
%ku8^6#qGU=E\hJW7VBgedA/t,9EoJ___Wih#+AuOWkd9C5_$sf`m/sdGKg6&Xuu8\>JKMCL0b@!4`p>lD28/m.>Z'd"*Xi/1;G,J
%2e?6%)G4dHUdj'm<_P'6=3cDh-*"#o?l1k_T&F>d#-(@mS@Lh%#+[JH1G.#7BM]g%XLpe_o+W9*HIgM7M6(EADoq;J(or4b?3I2D
%FP]/`:SMkW)G*VW-cJkT8AqucX]3\X(Upr%nh&jjbcBq^c8k4S`3kCY!\6AH^-XW;RMF)oH;(&cFqT.W_^EXrJdEq3J/GXDfFtm)
%SNsE"N(>Q6O&.b#j2<qZk-jn*;M8>$VHG+e#:"P_'L??<Gh95e$kAX_F*.]m`\up]+Gp979M;=nPN80Lb1[ef"%,i0I-$i<&0Su;
%4_ZCN)DKTO4jfq/k@"tt'XCnjTg@,L"5&KY+4jPNPd6RYI[QI%/n"4#)1;EG_/.hO2+VufH;[WL8S&V>/<c>fa6R+u6:4k!f4Sq)
%KE79-#`l35!ad4DP!e7r8-SkMUu?%1EVWEm_FK!D?A!HkGq)!gfI`0df@TB<B'*u]X:8,"0]-O'MTABtDK*S1&KAh7\e#;\I#X(2
%989aC_d(o^j$clZ^NDpcGW7MM3cPk+[uT%j[H'u6]^c."&rR6Gk!`MiY<s;OlQi[L'Ngm(J.G3:8/!'kb]/">E!aM-cA&EY'JtuC
%?6l:>-3au-Kr"nn87G^q)Q-]PYur]iEXXe>:peiMP3_3TBkQt&a>=R=akA&U%1CI!&K#hZnpqriKFL",Z*"`P0%:8mm1Q$la^di_
%_HD[i/:juE4d%2pKYtA-_f*X=0=2d<Gl_\OfK5tl?JYNgPi`'p!49Op3Fn7q"Q`uVoi*J[aDg^C$7OI8R<$BKB3B5j,=sP3Tch][
%]-_HF5bnF0:8T-'.%cP%$";\/=s,"d6e#c2i^CX)bYZ:MBKa_Y8.qi=Yjf(eM[V\n,P*(Aeng_Z7V)@'8749M'bLcKU.#]#"bnO(
%=t2:9aP>^;h@K:ARUu[e0jBRhMlFN.,94SV?uq4$^J,'98MZkKn6AgBfF%dMbk%OC&ERB79V44sXAQ("K#BL><C=b1(e2AqC^jU<
%-"*W'4"MKe!h4<=<sCo#'AK+D4ZZSo'f[t5^<HIDR^.]Ed_]4N<faH<%ZDQ;D\#;@Brl>7Tg5h3g(3T+.+e.DT7>LMm6AS"\"R"m
%fcin?`J%O@1Z:6END:[V4[-%48L4,iXKXfA#$EG(]$Z+6JQBf#;uAF.46`0+,9K#dP*-SC&B.TaK-mhTXoqu"iEPe[UToUWLU'VS
%7m`1NL_#Y!mQgKR5s#NX-\_@&+[TQ.,7VqO(IB'iE8V%6&=R!<]nd=aB7Ko#pu``#3`iMuaJ8@+_K5Qd5NI($#^bIJ))TErB($>6
%Qi]dsOqAQET+O`D-_jod$3m#D/f[c;AfW=IjJCH$3@X--qsk>rn(KZ-@1UX<"V2g!&(,4P\d3+FNY`"EXWcXX/XYD19='WsC]ifa
%kWFB&dh'e,L2+")!tnmb+Fg!dS/$j\%5]LHOq09!2JZVbOq1Na8Oj1H"K2>qPh7!J?-Chr6SPiA9ZNL-)a6L#a0l5;7@4M-0BnFX
%.HkGPYfArChH<>X2HH*f$Z*JN8K0KQB!O"7,!/F(D"rW6>8.b1r.,'A,_@O68We[pfl,G=K2(?dh>JH#%L`WqoJMPn&2=<G=Xg=`
%-CZS@Q>Gq7!/DiiYPm4O?\+X=:-)j_8]o`?DR%00N1dUjj%2sd*D_N%>7jLDp`/1/5qPR*U"Ble-MgFt"DY4I*A=o,e:&Ze8BpZV
%U;dIR?SV:"[Dc[#1IH#a3XcffcKKso6oq2SO?E"EgupQ[&?lmH>i8orCp?VB\:>aO>Ej!0m0pZ:Fq9-559tjj7DRDN&dOR6IUE#N
%$MIW;=bhNEdBRZWCOmKCbe)*-:.qfVX#@=Xa"d?S_J0cDJ/PU'T?Ks<p'GOr$'(552rQHH4Y*be29mD)3b[2c4U4a#pf-=c,p)3d
%ZO#7*)C,-J*:6b(Od_,jef19/J"IU65\uY\Vi5Di#P8=cdsUG+4`)du%=$pda+d-`0/A:+I+$.NlsO=1c%R32b`+clSdp\P:-&f$
%(Oif.XL&(TmE:reY+[]%&9=WsISTSeZ'*;A02hqmF<`r%.#&bMoU&d(c^[@QG3F<5Z.[0EM=>r;s7qG>R!Y@uGW8V"N#4XEh2"J:
%8P<eiTN*d'Vd9#P3j_\=U=#,,YeW,e)-3Oacqk3P_oH[uXB#!i3c%N(-fYj_CEjVmC@(0qi$T5;iTOfn'O`<?N)8G('mIW(D&A_:
%qIC)(-3oCdiqI[FHRBg<F[/S>>C>9!:A2)OLh.1U`D0MF&[]Y<\0D'G%7Q1WKO,9(/Jar[QD-&jq\^?*(;qN4d(T^f%S5h0)2J`#
%bi9OP7EUYt+WeGb^i;(N%O[a@((R&G>33Xu?XisZGhCsC1[-Td*SXDqg%>gC,+,oQJJQO2T[0C-'B`JVW:nK(4pW&J&jCTTYOk#q
%U$hJ#!+1@4mPjHn7IeI'24SH,4'Ys25XdR6>7=u%g[M%c&kBE>'bSru7,J8bP8(2c],*"g6CB[[d,'];8V[=@qsIZ%Z]h%Q7b!*A
%Fr\1B*`O'Q(4qjAJ9<l4]oo[9#N?DmTtZnW1t9n%h.P;IMrKj9Mgm(9$Y(.B6R*%.3PO?BZ2uSHh*VHoF'+o&0'NX=dQt8l:\.WA
%&I0lsYXld'3lC+.X@'es_9F@i<"aC0?2/,]ieVF<PdDZjXAA2UDb=USrT$T#J2YI^5Fj>4*FK[d<B_VP2QP*9ZOU7TO,TD"HV*R$
%J!:@6:,?Ca&[t%j5_d6fhl7ccRTG$B=9i<>*CiGX`.@/,)CBeTHY+9&[VIAAS!:Sh.n'^Yd9L\UaeD&Fo1eaPb>uJoa/TZ+Q4lE+
%9b>,R8W$ohMZA$p8VaGTC%CdO*q2[X%6nZ^lPj=06C(8r!lGYl#rB]-%Q"5._O(B_6=B:8_!\HI-us`J*<J,REl4H8XgI"uE7iPF
%[chKa&>TXd#2@UCZ#Pd@a!LP3RS$3n`/JPcr<3IV##:oMUa+_g)i8%J8nfO&5\?r,A9T8#'RSXY2M47sW?F_PK2"0lWYkns$j:R-
%ouoHs>DY&0cU80-&Y:Le9O65uI9'V*JEImX2D('-@X4EVO`r#N$t<&!a+ppDemWnCR"f[A-kG,(S@=1("$8CXCe.#GJjh&<R@Y[1
%0S=B(h.*\2I^C)Tn6gbeBIESO=blC@AU@HoFmZ(#&o#PoP:(Oj<gph_;W1^bX=rR7[O?<^.LH*.8-c=)ZAIQ/@aj+R3CML]l**$b
%%6)!*_5u-B1isLR"W1o^Tq&njO,`@&.N_fIVN+]eR[5-ecsfm!?DEp/c^Y)G-GF?LQC8NF!*")#-Y45:>;N:pJ0SC*1+KgfCg7/a
%[7,sETLkW5'(TFPW.kslqTV$:8WZ%Vhe`[j`:TG>i'B_Z3s1HF9t2O%5Va)-3],)HEsXT',G5,OM<p3GV+_':B6r_\!]26)'4Zk%
%&Jp,H=kTDA#%6S7`Yh!a/9ZB'Rd)l(Q7&gKKo%CWi;4Kj#tPM9?Zkh=6P`+Y#V3jMahY-E:j;#r<lA41eguZG&q/H'F,?+kT+)7T
%T$Zo\^a=erU^HhD)+l@YH=e0%2D'_&RfIAO0*B[djB@SPG`egCf\hT+'d]?mnJ#UVCHa1eEEf>bg;)G(fJdj3*&]*i-69NA/om9<
%D^DZ6ah@=cro(S!W0*8-3Dg3>I5W.u_g%nRF/am>[JH'X9gd$5EJ+eq9KE;k$ZVY-n^kV,=2'3G,eSrFU5ZnMF;KUh/P1I%+uL*i
%G*F,$P\/OS/Y0nSfQukSFkEEjat_oI=*SSp5S?YM'HDA/nd2Q-Lie],Z8bj8!uI!b8FhZ*q,,9lb[*JuA<Ic>qhKK1*<rt8RM4`I
%#ol;f[CDl_*Hf"Cn-ZDP"/\9Z6ir&A=TH:sl8[MpMVMc<`^V4Cp9!5R6PdXAa=N@dQ`(`/OESp[0rStuYeaB]?e7OdSB?[[Y0TQl
%[+$Lq)?cXDX!g0<I#G>oHR9a;[;1+aD#<Io[h:0[-08=KM?;&%&B[DH.+dZ#/dF(mPG5GdeAFfuT)ki@-gD7a1YADJ46;:-&Oqr&
%hi'lU-(Ro9Kf0:a,dA1D.4.-(%.,]UW(g2@jJZ:)Pn)_XRe4V/Oe)a(cgNoDmO7i-25j:!^0IOl6u,FN2/V`>P6=COrH$?tD3nfW
%AHC+Z7HIK/0'nc18#2Ah_#c)f\>#&8:9qb`'?(Bi/dV9aOum8I?Ep:cl9[O413L9_k=3Z6g9S44kc%'?i`VG!i0]'Jg@VnN_!jAI
%/s'%5?P5fl,\!gMJC9O8S()Y,S/'S4r9oKg(#p#b/6Aan#.?0FWQ<JAmNuUgq&NO2EV^Em5m^OmZ?DAPm`5C^'[P^&m%&:;WO-L"
%EUG\6-4/!6fUg4(5R+5?31grHj%?^nd#rMS2G$PoF8_1PiGo9On#R`<)s"+\!K>*cF:Ve#JAl[ldf=Z#*YXZsL#X(2H:_9!<ofsE
%%E^\k*7*k.l_qWHeuNUI(L.)HMUIo8rLjsk)^(>C;U*&S4?GT@'""NuJM'CXSTD_'>?4^Z_V2/dQeI)(&X?K'(QWW45!kWAPX/!s
%%7G:#Oe0lJ=%K\*$sbf9C!ojGNRDN4co50kG-9,V\gZY1'?B[><7m>=6c2H0:hZZ(b6I4X,$@^>aBtBX`)(LaJ228@"4SoR)Q':*
%4%^tA!UW@U<<4jNQ!S5El.JsYMG.KYZKmp#e5/ZSAt81#.o"S;;+Y=DPsTIo+KFf$WC':i.:GI_l3+'66/nbW8;0OZXJ5t]OLd$h
%CM]1?*IVT(Os=g'^+5K/-<GV@S/!LG/Jr1`NiB@TKg^57*@]K4B$R3GRAN`Q;lIGF^g/B17Er9[orX,;L]^q[in.Gf_asKecigdZ
%B`07unT#it7rfI2n9]n#S9!G>5_(=G;Ur;o!soV!_amPsKW"?:2E\Kq:7&olc8o^E4n5t"C*OT&ZIn@[^m9s4/9-oQ@N:88<J^5i
%=V]u8!3&<W`BW3terbQ4Zc7`aQq>gg8brG+ZEbmEY4=u/3i<+%;%=Up5#-q0q7=!<C'BLsA1-)K<47!bee.AICJ)+/D'3'GC(i-h
%l/S?OaA:k;<%(U`%:,st#+dFe16<1u's0r)"5Z-*W57%;9l80ZXp1A/aCg8s!#5pDP"lJ6)OCa[^Qj>o6eT/tI4.c:._E>MlVruh
%aZ%N,,OCOBkA(_;-ESZ[Vl5.OdoND\FJA,9d]]Bd8OCI-6T;5@KQ<'#n#W;@92[hsY/UrI:S/WP>ND"_dYD'c(f:4.CmL\IF)?cc
%n5-RVfM<e.o=^?J(htZ^El>PL1;R*C8qS"+56EO0=%JlkR>J7<\rpB8PfsE8U(!3![<L'`U-E*fSmb6H"u^X89pF.FEfqU`4B<_H
%*FHG*FP7oLe;7[SLJ%$.hDp?C$#(E/m*LD<<<mIkEjdO2[?%n+#UoeErCg%_0%AIC#[BG@8MjX[@2/HVkG6s+7h)g<B*E]KQOF8O
%Y,is_c$HV[#\m_*$1>Lbq13.-n;LK)q1BA=,D\t^0?lOUY]$!.B[M5ul'u0;$_nr'2Cn-^#2-h"^l-&_8p_0%CN$$p?GMCLS?gJB
%!uGOrJ.gqsYp9$[^cF*3^#_iq<()=q'=s9g`ucY<"&Yf&]1`c\d:P`*1Nh!:ZodNCFQ?iI1VcBg*=aq6,n15"-GJR28rj$b)c<dL
%'WJOWL<@[;:UlMrleK1[NY_%%kCJ(]2F2pP#blrcLi(HqXO>3_=e9jGGh5&FG)0^tCN?0j\@eWK]P#Z$CBAq(]`p^[n<:%3Ek'+@
%!aE.S$K0?SC]W9LR%'jL:uFAdY\am3EdF&D6Kk!5#2n'a,\h*2_/5BQ,_bPhNK+Zjg71cpb(@^Na@ZY_:.Yk!g*lSg3a/b+S-1E`
%206bF2a<3O&RT"g.,<g"0Zqgu4f:_<eR#?UMl.QZ&n8KIR<@/^&?.YZ'@3Lt#T%@Q4rPBJ/1ApR\F'AX@N:&14ck"A+ktR<raX+a
%iC\+89R"a[+%c4&2ZU92XUi'pHY>iElYIsc`@BZT&DUEPV'@I8"L]=)Loth*kVMC8J\H,.fL>*^-8f!eM"ijS&^C%qfuif,1CC;Q
%70SA)qN2SNCbpjUh!q2i\)3^nec]+i.X(0<^0p9BY0ZK6PkHp<O]I,t)X2?3&rh,pVgG2QaGG:8NikG63A\S4IP<pKNZ;l*iBT%3
%-\DfZ,Y)Z@B*Rs;G!&;X(WkTt1S=D1MWU"(Bh8l;GLk0YIFBHt?:pBbJ3^5o<WtY)CgX)I..B36.;Em53T!;>8N0$\3br;ERSi[E
%hH>W9$J>N!r0g^OiT"m!hWCD9Oh7*a8QOFTZkjN61bC/P_@F$V^d+$h$qmL5Lc*sLlcA%^V,LXQ$8!4f?f3ha*BXDhS-UU!0*b4"
%%Z3_Q;cK+eS;Y_L(7>MVB,rSZ2bf!2$>%tT!p.%cAqX^E3aA+gR*tZ(;g,EH*9a0^=]$o*JX-QmdX!8][O;WO3d1M(1fH.h.or&N
%!KTR(.aYSVS<_Da?Uo):M1NOAa=Zc`>c\W^p@&aojr?D2L8;=M'4BSC5jKIcS2f_(Ya0ePeJgY#35\=\p7rb$TLQ4:B,1&43a/K^
%bM7rZ[*!!Y+DY30:D/L!P#5^]+GCo,/9Kfb[%uXqT"/*OlK]4_\fE*!oX`=nOUf?<;e36>M6/08c16!a1Ip&`#>m[=XW:qWkj<FM
%=L'M1a)GTf(N$UV"/IFj')$G2G)`$Y_2^F\X"mZ(\IIM/IN<i6?1."\T+t&&/Y2)q[ZAuifbqNSb,H+K:$HiFGigF="c2#Y\mSGu
%(!rXGpR1&[[@8%sg$;5cDUe@j4V$,XUsK+,qt?/DaR)J#<-6_i]'CQ4cTlJf;BY*Y]b6,YmKMC_$QXL)1!Sr.<8A%Nle\G`''V,Y
%/'O455fski.%2+,q(=$Y7BOS?I3M<Wmcu5<eg=$1,TI)2+>G"d2/#pCCIkLGW9M8!0PM(5$N&WH9B,nFP]-^l;D:V,)IcqK3a+:A
%gsZ]a+Y9cO+:0VS#khi9]+3.lpoX?02g/BV-%EYHO%nH@I7op13(WoZa!IW]61Z<Mk"43h;`e)_1.2Va&lr,dF\M<!ETE$(2U@4d
%BLmYbbu*e_84!qb!,]0`6;I>;CkBCSm.0*qnTR@Up995P%B/:(L8TQhX%efj76R^p.\&3qGjR5bNE-^5kYSMIbGQ1a,5!Nn9[EBB
%o[leD]4O:8`GV22-Use,5[\OmH$B[Qial!iLE7$YKm(7t&P\/>H`ZY1;'WZ*b@BV2nbOKjO?4pX9<^#AR\SSDH3>+s>_J^%:s"t$
%(_RSr_GG34R*i"fFoslZQ&#?MQEMD-\dbT)C5MM(hOG1njB'Djp:-4j)Pt!Wql%_j_(-T0k>OJW>p8U\O5X%LHI<2-oeAYD$8!PT
%<b`1ainca(L+#(_l=[c:W!Wa.7@4BK:ggg*2#<M[?W:^%K3J9<>LK?B"mmR)RXeTk>Gr<]\1p/e:GB3756Oc<^'."]QHMT+"Z.9;
%)/5Q90h^ga9f5HhjeqKn@$a(]a&O7.V^jADIb*@0eCnliMhRlKP[2GbJ:5X;4fR1oSk9D2O1EE#l`DJ/JnH]c*@;X,#sCU9,gh\n
%D-NVaN5U"sdKc@'W?Y3l'coMM`lF/)<@-=KliWD`5nMR6#<H%*ED&EndGrsj!dQ+E`14pG/iYk[2fRem5C,?:Vh83/K4FHK(/5?'
%Ad_<S42M5f1_/SZgoFAR4cKaD!0Op:>ls-WN<s.AM&1&&(Z?eGe`8HT%9o859<q.T1%XbqI0W6(GV-E_.mD9*VX(feLCXo8-X$j$
%178db-TE-^;@#2GLH:K`Ve$$_Md-A=Nn222@P[@QB_k%GbktSoiN]4!H(E'+.hZ=H&K[\^'Mj#@l<`!`%SM*RE_VY56S3_G#-&1n
%rbLIj$F%*a?0Hg&FEpau06/b02GJXX1]nC7+b$NAVbtk+R!]<>d)]W]9@l,L1KQR.H;sOQ*EOglS/E4u@a247n:>Rt7s&h`fEZu&
%bq8cP6tLD:H*@:/S#u">$ld&M\,`%G4=RiDgM!;&Hj#bK4P%(Bb]G,8(oe=Q0s_kLquiUi@"aaW5/uSfPW2&)P/:^P%rQ+;cB2<W
%I(MaS6?prhoOH'Uh$u:n-;+Xe7<bh$_>@fb3(#aKo#G-<Eq<Ms_olKS=eT2+BI9WRQdFG)HL.B0,<sbQCd6;&_nbEFXW3,*V;EpO
%#>6`L)!I@U8l2,)PiGoo4H%mqbE[-DlR=nu=]TNt,jq&=%VL*"8];G-(Bg6UV9nTF%!\?7]Wo\.V[E?f\;F^Q+7";DKr>NL6M-M]
%!'bW.m\l&-+A!nVHDEVXoFh8U2FJ/:DfJ+#IMtd7:'V&@c:d2UD<0Jm"*&r.3+sYe\=,()dI&\:=E77I^)ndbHm&2gMRJ&i[_h"d
%l>qkV!,1Uj;g\XO[M1lJjT6>HV*`rHc>o/X3'#fUZ\5,;20;G9=j!YTV"bGX!(3u=90Y;PE'PpXa^RQ_M,E@S=\c=ndkfmF/1T<,
%Npb$WBR.a+S%8R0Bgu7HG'$.TG>[B)j01PJFOCU>Ok-HIZRcTX8ZQF2:410JEMGTUU1Ze*G17i[\Tb,M1I\!/N&4Y&VP_&8fhL?u
%!tORBCepb0R\q)BJF0Y-NV47FklbhWQKH@=*;8'l$g(sRHD;HagCq#30'iUkgYnkILEd-)5p-W^C#VB]>-XQfCS\linAUOL8LG"D
%=F-RQCkt_jIe+s`,/03u@^pIW"@TlJU'6!'3`_:9"8Pgp,$Ql?no]43Wq&mH#e6f9W^"g;5q)RrqGI\)]q:=r,EWaZgjc#W"BY+B
%JRO'OB2S!jOp%tuZOBnSUJ&AJ3\&k4_If#M%,G&)O4cZJ1RL4/%-fq-EDaD)-_i1^_Sd7:,bGQml:D]l:LHY9YWsR[\FC@D!%umD
%odaKQndJ?R,W?=t)<ls'#),/s=-RHX]>[(*,g2XAC+aUI=u45;!ZU<lI\I]"=%!A+#"a:Z4C_k+R^/u9`B?a$Yp"FpV!j>f!3[8]
%_#W(1E6udeHMXr*21qk+YHN((*+#+W8mH)*Cf`H)V)'H#,BXDfX2MAoRVoW-Pm&pN<0f-JiSZd*IMQK2>1)ED7NT_/$(c_0FJP'j
%OVpdP9uZB#6H:cI0!nM)=(#,M*-V"4H#6R#MX1en3[RAE;ZbM72k_5=N,>7tScL_UZ4#d!_6&[kdO!K\(a:UN4]YHRc!$AESKI9<
%iS/Z8fBmVY)7]_OX%Q8Y=&PGI,9&.i[comT\3=Pq@G1Hc.*_i!Hrd&RTsLlE%O#ccJdpQ[f?cIO+?P0p;ZW,+DA<D+\+g&EF-P_N
%,#fN7a_];>C-ph?U/m[A9$Bnh+iunX=31W?fdPYdSfd:!bb,o;R*rIMBF>+NTiTL49c0!aBk`(!glCDUg8#-V[#VY<Kq7os/#_f/
%YeD@VE[Y#HN$O+38mdI1lXSj).-cs[dJRu:D/^lrcuBba:4"*pIMZ1qn[W9de.']I.fQCThq/iD*9CSEa;QHW;34P!L(<I$Tf*oK
%RDH8,Z<&e^fG$5'\]3.u%Sj@@ct\AFEQ`QNZRoB.i1@([0NbD]$\tfcPEcDu%\2b:.&F,t&:Y-=C1RUG>KJ+t>ODKSY+JSmKB*E2
%onXIeWHJU?5nYFEXcpZ[-I,"K6Lj/!aNCuNW)PI,r5F[KRH0f"Md9WpG+oh,DuU+`l1lYbdl=FR,&,HVf;T@Gd.DmiD/9N,.d>A(
%o\k[7M+;mnlN=<AEan$g"Xg=W[Q1k?'A.k2$e'AZNo+S3-B?KhM(U#MZ3acW:M,Z2Jo^f-k>7"mj2/$d5$)bIfoO/g_qaY9Z6bIG
%X2g'WN'B)$][ie]Xhu5Opm2Y\'Gj=7;(kD-%69:rf@Y^$g$8uR3EPr4#UHOABpq_"Y(:dR56c1LK';&B<%kMtLP]be]gqOe,K6,]
%,"XRU%qXNA&61]*s,mg)QO>+EFUSsXU*rNg'386;Y`[m"LOn'Dh%2!@j;W@g,%eE&q/R&ad+9tf#34GPHN>&L70?9@&m$]o@Uk*0
%KBs:_S9>6KJ&QUAM+t8Zl0Qf37)H<H=CSO-(K/3%fp[OtdtmkCim_Z@$WhnsPJS7hmR&0#p*K?`BV\c%@J=V^$fE9r*1!tqj$$DC
%c3[^*`l"X4E!\L-70LsYh[QQp8Z_!<ieAkQ'E)qkh%C7KYD0k\&QX+N]BA6=(pIt-QU`]",KADVFFlKHqOH,?dL=F\l5s-_m+007
%R>RO=J\dn*AFfkZ6P.PA=-<3l[e'Q/V4,)hJhu,YnC\qIYpGU[dBuf6P0),<4s5h%B:"Qm:[WE!R@0;HS&YujPlON)i"j&^XIeOe
%n$Y8L0IB[c`(g]N,S,m:=<o#1Ng3K`l9Zoh0n;G."?KW=k(PY=i@E8do%bFJ(hG*n#(lr#5cZ]&BBg*Rg`.gjmm'WLXJ(Tgo">e_
%3iA9^KJN5VG*Z5eLt%i!FGh2Airigq8fr!$]X:)J[e/,;Kk\Ir6Z$ih'4!+#deefCaqKKVNH0L,aM_qmlqWL;eX<o"Ej[PM60*c!
%>R\_g)(9qgU617<$;$n3.:;,Q/C:_G)$\^_on-ts8Fr5]Mj?AXg$/V"nnib.*MlgWZ8KT5")ENPT42XKUXK-:PbkX*6C+NMs.QXn
%g8]&&Hk@'V0!1X`l`^VX3/2N%l3#OlYstfbc4?.%2ekY\c%*up+bY5W290nOLtUjuY&fcU<R'B^_C:Lg?W+`dhPCm(Uh,WIkI<%U
%fPQ2al8rH"gd8%P8>F2XN(eW)_Dp@S]!_e=>!KsRKG"l?[b1n&@7=RRLh5j@H*)YH,)Rf2cLF#&lHUPj^7Lf=Q'TV*C=pDefTpNr
%?/H%>BX*;SbpAg[7.>%Q-#I03[]PNa;d[CQlFZ(Ahkoi2aXPMES?P5MO!SD7F3ZnaQR4$q3r21TW?\RK`!X$qMM-"I.,ZEJ_),Vs
%&P-qE?#UejI[.;7O#u[48Ci3EC"F2N7bVW8ZUN8&?SSIg^g7Wa*3Dj)IH+1W9k^29Yplq[CnVqL8!J!l/1:8d_DG`u%Wj3o!X@@d
%&9[2&\ZsRaSf%a5L2bQh<Z."g@^tgF65!-/[_l_rV="BAl\92kF935%o8u+rObBFsHcPPqaIh4Q333_a!]<lW3MIZ[&\(U=0dGN$
%`mP1!8BF]^#*>lfiJWNgHZC,SgTZbmEr@s&8]8/i%bddT)Wi)$MApA>s#FfspOp70fPM?qpHg\FAR&7V]0i#lm,CJnIWFNlUC9..
%2/U:[UoQ/QPNEWg^!,Uk,.#^[i`/LH;5(Lc_m$^74LtP*=_WVg9lGl+o9V#u*'e`.4pSbd%Ds(okkKSbOJo=iA9]>4eTKJFpn8oC
%/\<>hSO\WeMqctOc@eA?c!X<YiYrX\hKXU3]I8dq7p]ER@9nnF:]NH/!dg/Y$XqY+YbrR>,N`Nan"FE]8GMqR?FQm5o+N.L<%\:2
%rNcp'M8biIHfj("@;\]3,#;s[*f:X"qsF']3&:oM$"#X6\aZs]g4IlN1;,B$(hoeF"h[^N86SIu?O3X<n'lQk`B@Rkb+X5a>o`6b
%G'2PH7N2"98pWUD`F7RZcojmDI7u#E63l:]%dgI-J'p]5N"L4/mY5Go8Ae+4)j1M%7D6]H/X."*N&HSn[(0RgR(0i)W"Eo#<e:%O
%FZ34:?49j[+n,Re=s"B,Y(XY`dl+&%/j)_"n`mhpI6\].c>_8PqXh%D?db!,69?B=%3>#DFX4t9^Sc8Jqg=g1mqM@4j\/SMiGaGu
%:_JtSp!GdnOu*nBn2*Z)/ICY8K5&7pU]1QH:FaY-F>\1c6c07Iffm-tN>%JnSI.hulg>2X$<3)4Zn5Eh*"k"QhM*noh'eu<Mn1E(
%:XP`S&H7ZL^SOS!H@Qnges=%dK#8J]'sOJU)a7mNTt?(1NQRNV:Hm:qM_oELVi"ASHpcnc84%9;EggE)G:DPF3T&4NJV-c=8+U!B
%f0JLDoE/j(=Ec)q8%4Vd_P'-jNnjI^mM)LE_6A\ZlM/@'&\!`Rgo.t?/js<T]8,Sr?eAk/Og-@?DUr)q_fl0BiBmo:9o>abRV6/@
%M\gq#,rgC><B(IUEt)?g!,t\'5,GLko6sK0YD@i&ETKh7=B@uMe?F)XTe#1LD(KNS,#[21c$,jBI%`Z]7T1r-0f0a>ED)IcEn^+6
%%D%YHTeEB2pB<J):%$cZk%3uokAI)bh5DtkKeL5_Qu82'cR.([[,$SG4N0>kh[hI8/ONTr'Gk!j0,_&4b'H^2"AAHq7A6jlmJ(XB
%*\e=p'M1sGXjWMM5DTN8&EFa4hDO`ZK7h4m!=ImsfrAV`nKgG`6t%n/6GA/WZmik+neVm,#AgeU-p.?H?]JCh%8&o%L\AJB;>A[p
%diu"BBqE7t[Z;]MZk#tX`nE`u&Y59,FT<_)X)"=7g>eR5Hg&K19&`DbI3:pD-1^#Ai8HI#!mWfY$=n*j'jnEeq9G*?@^-<#e#1k4
%$"h7MYuifG0C\7\BuE!+<CNS@V1rhUc.5U[lb`=6dR"s3pSQ6kM=(SuFl1?l[/c#!943>DDj.jK;<)CrE8iC95hC`523(s'BHa67
%Dd3K[`!@U";K9TNj@^_B'jVJ\>F,!M8s]gtRt^<]jaKrsH\UK`OJ]T+b$I($9QGk$2n<s.AB/`H*@j9D=cu`V7*iLoBo1RgoE/k#
%gM@*\'U&oHX(p^3E-34?ZQYSNaE6U.&+"A5O^k"h.u<oPoX/J%<#VV-fkbT5/jnSJM>/,O<5.S0[rg*p?B@X9ZAR-;\FWC$#K!.2
%=POAtHDm"\@Rs3b.eKC\"te/qG[:BXm_GNXX<US8e0\?rclEb;150PP&0rKOZ]Ni3Q`HJL!&\5e\W*_pX6"?16V2?/a\Pc2o6aS?
%V*K^gc"W&h_')k[F1&=k+fHu83l?=]RWqMdh]fBog6`-#U6?<rbE2"T?@YM(Y[L,(9b(;Kj"e2HM+pAJlEDbdWE38nX4X^B7&*(/
%Q`!c\`!OV4Hqnb`0TQq$fH"flE6k-"W!h(#i#+,\nGLIhhhY<8;)KEP?S6=ijBC318F+>:.r:4`?-\%<<a-JXq5r3SWmtW'OF,8+
%,!WKF,`rhYe^Aj0SL\dH.iWe#)DTMc53'8Ti@s<?Z]a0,^+>_fbAJN,g=F5B\/JXAf=ljQ=r^<\'obKQ[.?P'Y+SJ#Xr[q:PEbUi
%?IY\Ml,/CB8n$gS1nk5P&L6[_p,!")HqDhEY,ntJ,Cm:`_,_8W5fr[gftJ3_%9f]lEqE26=BSpNj[M`MD7!LC_kSLN$aRq:U.W.\
%a_,`!,qNMpo`@![XPHq23]iY%lSEC2o%?:F-+9p[U8/D3h&'<SMHVoF6c9)g4uL&,NDmFX/5VIE`c\"b3#AD@9'7&W\gmKM4g*,s
%"_kn+$jjA4>nn2nqZ=l:I!HTrdrUKaD\Hn]S7ZX'MkQR%(fGL6Jr,"6*Ul+Is4K-p#1;ftBW/bt0daqHHs;IiUm;eX]?IX/+;uuS
%YR^"*MO$;47;d$cqrSMO<_",n\4?j7_AA/ZcJUFfDH)j5VcE\Q_OW*6%h%6:"*n825=S&Bqo$:tk-5-A"48f]%8uh.?bXMdSoXK_
%68!Y$MkoI%>]7E7FcP8*bWUtHK2.bP?0KYETekoJ^a.M9$dYgkL0B]@L(l`6hLdun#,cS=RMg.8H7lAb#LX0R;<AGi)Fu;^o9K%$
%ZVZLk9=eL9M'kJGJl.9@4*ddj7L[L+MC(QA.aAh:gUaX-5BDh*jli-G)rnti`Eb.T>Roil?K=E:Kk\I6N$HN/?&!`G1V,Hpf!,6"
%1k#0?W_R@`EaF+?otMm[<fqHq.ndD;=N=?Z.85tc%-OoJ8R9DJj+:(FIOkdA=@g^+'E(07.F+Io2;TE(iIo6T"d'"hcl9i[nl:>r
%F$ZaudlH')-jtRh#tn;P\r`HN\Q#k`T%qJ.Tg*-]R,<n9LM585I:5Z(FgYH9&kjP4B=KQJi$S+<HbM<E8)HB\CiR_`6;(S.,/*hX
%9:BOM&&aRAbil=*lTXhsa_+ZcNP[)pB1[P2Eru%TEA"N_0VY'5\r0m^7XMe1e&eMSR2>%37X%15mcs#Y;,0CW[3iE@ZYr9'UEkIZ
%e'Ps;^-9]eh*>O^Mr0.SM9YE33Lr;:5u]SUc"b5>fF-/aObVEL8h.32@`";:Y;p+o5I!t;7^/BZk&V`TV)&eGJnQ4J2[XW^.s)]]
%croBeMFSu`n*'[tXJ@M;fGk*]gHc7)A+tUi`/GZg?C(apE9E[Mp5CFZC3GL\(!kK[D"u"o:,_1]&382h.LeWS=8VgPh.KZ<T!<3,
%R!uZse;S9:7;fEW\LG7HJ.2=qH[m"h-\n6?-"HH>6mA+9ZODE2NI!5M37aj>/*S")OH.T)0rXfo9BL5:VkB!3@8CM-UeQLUANQPs
%6,ZnZ4JQNK4\]WO)pu<jTVaPNS13Q6-<aOWDEH[+$s$FN_krbG#VK>JB7X^]U.qVXJ1o`?>(+[9iG3-%C)Uu+[&"j;/B*;>a0_Dg
%@nB0G3Ao79GpX*@I(HlTP62n):M@&;>Z/;H@YYW^3+%<pj1HF#(D:ck)NH8>MC0lU75.V`;$$ETdVEe_;`mg+cB_jlO?3amrC=?M
%E<F<Dam!7V/qCi<:8["(<iMQY7iBp@hX6K/Y'c\0\@O@Pcm>"%K,bU@fl6P4`Wfai0'?XI-[k*`M9M#,VoRl`+j6%BS>FC41+kbI
%qA`)67qjLJUQN#;;1No=?!llXQ**)&Pq>a@Gp]Y/:n<P+cuiV:,c0bXi;aa;;$"$Wc#<T2F'$g7`skH*#60Ihpuij.^5iR[&25Ab
%gr&+[G/.UCF`?ib:VZY(HIhL2]*gCf[FZYTW,!YYl$_L)?'hDTEJ7FF+&e;jA7>"DO?&j=htps^at-dEY_43p3g+@u<gB<$5LPD!
%AOn<QgIU1)QH1q,D7HFJH\)A-5nuh2'0oCU$>g+#B='tZ1?b0U_1$&bKk,%D]0W5j&crBpFqn&J`*b,BgZE)%78O0IA@k0lX_oru
%V8/"9jhu8HLp<G8<%Ze/AH9:cT+!*tmJ"97Zg2;e^,poYB`r7\(Y]?Op6^76r9T)4"nSA!:&aKK2l@,aQ??F6O3sKX(>4mm:f7!2
%-9ue[5>F5W<sG[/FNB!,:G,*?e;?P(jN(NjZ7pF?#k[sMY0&2L%[.sI`t43s8s>(R97bKL0;SfYAZaWsTKTqk'\\aeGKG&L[qB&G
%P;U!`+\!D5+=m^9!0o;`-aN8e7F+)uFc/=Z^7B%KBZcU7*kt[6#uh$QcPd6(@B$sfAeSLd;T\$T#u+PV760F'[sPM]_$u/m75XHP
%65G`PIIMq'6l)cJ6n]b>5*]P:d`k.;W?W)rhPci.J^1;PB+W)KPG'*&N5AZIRYW3k_-#$X<U<US(k.XEU'3l``Z>P3T6:eEg^0J?
%F02Ta#Dt_g`YX+uk%`+3B3qHleL\7(JEu7Y`tgZ"<\8`X.nCBN!*2h*rFAT%8@]N^S"RH=:mGMi9FKit]m+>ms!ZQdj$Z1Lr)7kW
%En`:g4adEIW$#']/P0_G]6DfmmD5<?I1T3FoEjHV0&?K'd53F1V]nTl9G#T!6BSjU?h*1ugg*U*'q<bp]t6=&?#'ntiP<+OUkt';
%`%t(:!)b.rPTbQFLuak>$h_JYK2QR(bS%IL-JpNQ-nLYe!qRA-5U3+=(GnY>nc:]g.-C9s2*;`0],g53$6[/4>Hj_bCZk+@+@RjM
%WsbdA)Bu`C7:q4u5\YrMlJfI0K2MYmF+3c5Rc=4Wk0m/^Mnk8Ik1QDDlcI(Q!>&A;o.^fO_8.5Jp'c^3$9K8f3qo,M6b_.1>lh57
%GOZX4_6cppCF=9]AmbRP=3[E\8G0):25d_J8"C^qJF%HD"4au]3(>3n2M%SuV`#b*'S1Tfq?>Dpmb#J24CsY<:IcX)Nu83qrl.7q
%*D>()2.HT?kVri=?T,(Opc\6$j]!jL[(,CWEfAW[3^)j+K=oj\\6=]FZ&pH=AM6H.6n)#QXlHZm5qf)cLi&V]_1'V3OOb&Z_OU1u
%Ha+M6H5Nl:+\8,#93-ft%lmmi(@2V<84ng\NB2>.3`&l22C`5g8lMYfj[RQ;81#)."/9N`_&T^^.d;ioPA`rY=M01_TX3f'$*Xh^
%&$&d!N<j?i'A%t*Tp!rkW\p5QEGXJ=2n^;SDU8p@>5f:(b5`dn9*_>/9/`&c`j(DYT^s`*I2k^fKu5V5Gu`<\oS97Z"U1=nqba9B
%]A)QXP2"df@ka0)h18u%fF_UJ-&mt:(,W^tPAlZpIMDqse[h<%i9ckURh/:tN^%A`$q6b.K,pU=4.Z%a0VM\/neSD,J9<!.i%;bY
%'b)HmghKkN!!87L\I0e_R9Okm(l7S1.-O!]i%I<Qm@NT_Y]?#_.lJMQl,'&p[59pGKu-ml,'>m"Gd/h@mD/,t2cY*Zo+8l-=-rQk
%l$_d#Doj/N,<,+7q.\].J-4-=^(Cib.rDJO)u?44#%lJj6c!)q&0i4&#N6!d617J2#]74EJ4+B]b:]K()@;RXed#-!ZWtDIIGn$)
%hHS+TeW<X-Hd"W!Ns<:A<Eg-N5?LpW.)[Z&U3Kc:",\@W-.CI+;TiJ4el>#km*I2!aMQ>a'QF$%NUlSXW;"<&dou0',&T>jN=L?M
%fP*`r(?-YQK\KYmrH=k3;0SZb=:0)"DE=1*NI#NuJE&h&^4?OKd2=GjA=kIi9@\S3:u^W_Ec#5DU`+<(;c(kG=JpMjNH.&sFEZ/Y
%iK7uV:p8fH&gY?3:hZ%eW%nl'=r3)I\Y1HSG`=I`6$ki[oVf6W%!3lASUrLTo.a9AhJZ5;77J#2:$+ni>YO_+.?Mf,;"adcZf?dP
%!sN\K,u\aF@]>RT8fe7*DJ#,I`@jIVh&H$sN_+&e5iaM9](_uFNZ3>0e5%7)Q]2Q3pDaQZ\e%Pt@'H]3">Uo:LBL>`/rOf7)X8qa
%2sU%F]3JdTBO'.%TR+/)@7.K2"Fadl(dW:n>tZU=`-hn-]FnW/O#f4;*Wsn8a/VGuNJds-luaF"Qj"3iC[-nrAnijA5r)r9i"T(h
%[BI=^F*?&;j"LJn%P?8TB?>d-ceALZi[]F:fGS]8%i(AkbRV,beUA#uSK@Op,m(Yo:fk200[`8,Wu!FYf=0i6U'!s[SI5tL=o]pC
%fk2=a3]h4FB"3R1O_cWcN:f!=@mL0es4CC$Mfa`feJr<%&HEC%&Tp>%m'+<L>!fLsD3LP%A)VaRGMeR01aJ?ji>T\]ph2<Sm-aqF
%n>(N`DUd?Z"(Tc$2D=Q[Z*7)=.$c'A_"t,M>*lR$?)V1OSJBHD:nR*t6)R3^H)BX;`R=.j#HiCV*8HrKn3MdiYdnu,ecbGm;M5&`
%UsdcFO#]::kZ78S(Xj!q\($.51(c<5m1:.b!aV,WTV1>*?s4[5\0a/qUOf@')Kkb."+oNAfFSCQDg\jb!^-k$-4O7-!QL)hp/?sP
%OCN6re_Qnm731^*4bZCJD1K-+/HZhWo-QBL#/$8"GdCA'bl7i8hRYr_kJI^0nj\6eP7Y/EFEZ:j>bIDr>.H%#S]<',;O#_XM+q>(
%2@B,rjfp5"ZQ2s2^>\\Rjp(aS2O^j!;t:FeNjKtEY[ei?LZ(S6$Pq^2.$&@(n$5$:iGYf/d;,`J[HpDSg1V[>Ki2Q2ICp$$3(QO@
%qZ',ar>/Zq=Wii#j'9&fUpX[NJda[N#+Z\*h$eQ(e,&FO?cjHDhYm9@k0s/"q=F9qZeoY,T7=Vhq<RGDp?@dm+)X96:H.b!@C5X`
%l^pqUDpKO)H%10)I<bA_?Tc/[[LYKIp>X\rT0E&]cFS:u~>
%AI9_PrivateDataEnd
