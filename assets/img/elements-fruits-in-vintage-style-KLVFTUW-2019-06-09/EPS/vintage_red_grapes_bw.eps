%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_red_grapes_bw.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 897 501
%%HiResBoundingBox: 0 0 896.4336 500.0811
%%CropBox: 0 0 896.4336 500.0811
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_red_vinograd_bw</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T01:05:35+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T01:05:35+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T01:05:35+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>144</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAkAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYql2qeZP&#xA;LukFRquqWenlvsi6nihJ+XqMuAkBIBSG+/MrSHuFsfLUEnmnUXUOYtLeKSCJWJCtPdFhDEGoaVav&#xA;tg4u5PD3qR8zfmYoDt5JidD1SPVoTKBQn7Lwolf9njZ7lod6I0n8xtNudUh0fVrG80DV7ja2ttQj&#xA;CxzsOqwXEbPDIfblU+GIkpiyzJMXYql+s+YdC0S3+savqFvYQn7L3Eix8vZeRHI+wwE0kC0jT8z/&#xA;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&#xA;gBhQuxV2KuxV2Kv/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:78536961D5E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:79536961D5E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:5f4f7f8b-8041-9c41-b7d2-dc0881f9e982</stRef:instanceID>
            <stRef:documentID>xmp.did:83C4BA9779206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500.081 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500.081 li
896.434 500.081 li
896.434 0 li
cp
clp
[1 0 0 1 0 0 ]ct
33.4922 394.995 mo
38.3086 394.183 43.1602 390.64 47.2266 386.64 cv
50.0977 377.604 li
52.8164 369.05 58.7227 362.769 63.9023 358.644 cv
55.8555 353.073 li
66.3633 347.999 li
68.9297 346.757 71.4258 345.632 73.7539 344.628 cv
64.457 339.366 li
75.5625 331.55 li
73.8633 330.737 72.1523 329.847 70.4414 328.874 cv
64.7813 325.667 61.0977 322.749 60.9414 322.628 cv
53.832 316.972 li
61.2656 311.741 li
67.3242 307.476 74.2852 304.96 80.3906 303.479 cv
76.3594 299.991 li
88.2422 296.706 li
81.457 293.687 75.0508 290.249 70.6055 287.729 cv
68.5195 286.546 67.2891 285.808 67.2891 285.808 cv
55.5039 278.698 li
55.082 278.565 54.6836 278.429 54.3164 278.312 cv
54.3555 278.007 li
49.9336 275.339 li
51.2344 275.202 li
0 261.003 li
11.957 252.738 li
25.4531 243.41 39.8086 237.039 49.0742 233.46 cv
41.2852 224.828 li
50.6133 221.308 li
57.082 218.871 63.8438 218.031 69.918 217.984 cv
62.6484 210.667 li
72.5391 206.98 li
85.0898 202.3 98.7539 201.21 109.207 201.285 cv
108.352 200.132 107.863 199.417 107.801 199.328 cv
103.574 193.035 li
110.277 189.507 li
118.09 185.402 130.336 186.671 139.922 188.698 cv
139.922 188.695 139.762 182.296 139.762 182.296 cv
146.133 181.738 li
149.883 181.41 153.527 181.582 156.938 182.039 cv
155.813 178.527 155.484 175.941 155.449 175.671 cv
154.754 169.738 li
160.547 168.273 li
170.496 165.773 180.023 166.3 187.898 167.839 cv
187.875 167.781 184.652 158.566 184.652 158.566 cv
194.32 158.64 li
200.672 158.695 207.07 160.527 212.637 162.843 cv
211.637 153.445 213.703 145.453 213.855 144.886 cv
215.324 139.382 li
221.004 139.867 li
228.902 140.546 236.246 142.781 242.824 146.507 cv
243.23 146.734 243.621 146.964 244.008 147.195 cv
245.273 133.48 li
254.262 138.167 li
255.047 138.578 255.816 138.996 256.566 139.421 cv
264.48 143.906 270.379 149.144 274.613 153.82 cv
277.184 144.542 li
285.422 152.625 li
292.793 159.855 297.582 167.343 300.676 173.742 cv
304.738 165.691 li
311.391 172.558 li
330.398 192.179 358.5 248.531 359.684 250.914 cv
384.891 296.698 375.145 336.397 367.316 368.296 cv
365.109 377.3 363.023 385.804 361.887 393.698 cv
356.48 431.483 329.766 471.452 328.629 473.128 cv
323.883 480.179 li
313.898 469.612 li
312.59 474.394 311.066 478.05 310.758 478.776 cv
307.055 487.425 li
296.316 477.944 li
291.754 485.55 276.879 494.116 275.871 494.831 cv
274.246 482.233 li
273.879 482.89 273.871 483.358 273.871 483.37 cv
273.871 482.69 273.441 481.401 272.742 479.878 cv
270.855 480.534 268.594 480.933 265.926 480.909 cv
264.211 481.015 259.477 485.749 256.418 491.116 cv
251.297 500.081 li
245.066 491.851 li
230.262 472.233 230.723 455.456 232.355 447.108 cv
230.426 446.46 227.906 446.065 226.637 445.972 cv
218.227 445.335 li
220.629 437.253 li
220.957 436.132 221.203 434.776 221.332 433.593 cv
219.234 434.522 216.254 436.222 213.105 438.624 cv
206.785 443.437 196.758 442.819 194.809 442.644 cv
190.465 442.257 li
189.004 438.151 li
189 438.144 187.57 434.511 184.371 432.702 cv
182.363 431.565 179.965 431.347 177.051 432.05 cv
161.098 435.882 145.031 434.065 144.352 433.983 cv
131.789 432.515 li
134.566 429.21 li
125.555 430.409 116.684 430.511 116.176 430.519 cv
105.426 430.62 li
108.879 423.132 li
107.238 422.604 105.445 421.89 103.488 420.929 cv
102.387 420.386 li
92.2383 415.394 88.043 413.323 72.082 415.382 cv
51.6055 418.019 32.3008 408.167 31.4883 407.745 cv
13.4297 398.382 li
33.4922 394.995 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.27451 .207843 .145098 rgb
f
353.59 253.945 mo
353.59 253.945 324.996 196.382 306.504 177.285 cv
299.391 191.363 li
299.391 191.363 297.281 173.789 280.66 157.48 cv
277.355 169.402 li
277.355 169.402 270.41 154.265 251.113 144.203 cv
249.598 160.582 li
249.598 160.582 240.152 148.335 220.426 146.648 cv
220.426 146.648 215.016 166.851 226.5 178.527 cv
226.5 178.527 209.707 165.573 194.262 165.445 cv
194.262 165.445 196.898 172.972 204.559 180.753 cv
204.559 180.753 184.324 169.3 162.211 174.871 cv
162.211 174.871 163.84 188.73 174.281 194.64 cv
174.281 194.64 161.23 187.25 146.723 188.519 cv
146.723 188.519 146.836 192.89 151.23 198.823 cv
151.23 198.823 124.5 189.718 113.449 195.531 cv
113.449 195.531 118.125 202.488 125.504 209.25 cv
125.504 209.25 97.8555 204.8 74.9102 213.355 cv
88.6406 227.16 li
88.6406 227.16 69.457 221.472 53.0156 227.671 cv
60.957 236.48 li
60.957 236.48 37.0781 243.644 15.832 258.331 cv
63.5117 271.538 li
56.4414 271.851 li
56.4414 271.851 78.2383 279.019 83.6289 278.624 cv
70.8008 279.976 li
70.8008 279.976 94.5742 294.304 108.914 296.39 cv
108.914 296.39 99.6289 300.608 90.4258 303.155 cv
96.2109 308.159 li
96.2109 308.159 78.0703 308.229 65.1797 317.304 cv
65.1797 317.304 76.4727 326.284 90.0664 329.671 cv
77.168 338.745 li
89.5664 345.765 li
89.5664 345.765 79.9961 348.968 69.3242 354.128 cv
76.1289 358.843 li
76.1289 358.843 60.9961 365.788 56.582 379.663 cv
62.3438 378.62 li
62.3438 378.62 49.8711 399.132 34.6211 401.706 cv
34.6211 401.706 52.6133 411.03 71.207 408.632 cv
89.8008 406.233 95.0273 409.19 106.488 414.819 cv
117.957 420.448 119.887 415.515 119.887 415.515 cv
116.109 423.714 li
116.109 423.714 132.574 423.554 142.793 420.726 cv
153.012 417.894 145.145 427.229 145.145 427.229 cv
145.145 427.229 160.5 429.026 175.465 425.437 cv
190.43 421.843 195.41 435.87 195.41 435.87 cv
195.41 435.87 204.441 436.675 208.98 433.21 cv
213.527 429.753 222.902 423.854 226.449 426.726 cv
229.992 429.597 227.145 439.187 227.145 439.187 cv
227.145 439.187 241.195 440.249 239.543 446.21 cv
237.895 452.175 235.723 468.183 250.5 487.753 cv
250.5 487.753 258.262 474.042 265.98 474.112 cv
273.703 474.171 274.617 469.519 274.617 469.519 cv
274.617 469.519 282.754 481.015 280.168 485.585 cv
280.168 485.585 291.668 477.452 293.582 466.46 cv
304.504 476.093 li
304.504 476.093 309.848 463.612 308.977 454.495 cv
322.992 469.331 li
322.992 469.331 349.902 429.409 355.16 392.733 cv
360.41 356.062 384.605 310.288 353.59 253.945 cv
cp
1 1 1 rgb
f
335.809 273.179 mo
335.809 273.179 146.59 392.71 61.1133 396.022 cv
61.1133 396.022 104.855 400.968 161.766 371.999 cv
218.676 343.03 315.914 300.698 335.809 273.179 cv
cp
.27451 .207843 .145098 rgb
f
308.871 290.827 mo
308.871 290.827 229.594 275.921 170.121 269.827 cv
119.059 264.597 40.1914 254.886 40.1914 254.886 cv
40.1914 254.886 100.852 257.347 128.953 259.472 cv
157.055 261.597 289.371 272.077 308.871 290.827 cv
cp
f
67.3711 371.827 mo
67.3711 371.827 98.4961 380.827 119.496 378.952 cv
119.496 378.952 120.246 382.702 107.121 381.952 cv
97.3789 381.397 80.4961 378.952 67.3711 371.827 cv
cp
f
81.9961 363.577 mo
81.9961 363.577 99.6211 373.702 131.496 373.327 cv
131.496 373.327 135.621 374.077 137.871 372.202 cv
140.121 370.327 134.496 370.702 115.746 369.202 cv
101.16 368.038 81.9961 363.577 81.9961 363.577 cv
cp
f
122.871 391.327 mo
122.871 391.327 111.996 402.202 95.8711 406.327 cv
95.8711 406.327 110.871 406.702 130.746 389.452 cv
130.746 389.452 125.121 388.702 122.871 391.327 cv
cp
f
83.1211 351.202 mo
83.1211 351.202 119.871 361.702 159.996 360.577 cv
159.996 360.577 159.246 363.952 150.621 363.577 cv
141.996 363.202 116.871 365.077 83.1211 351.202 cv
cp
f
177.996 352.327 mo
177.996 352.327 135.996 356.452 95.1211 343.702 cv
95.1211 343.702 127.426 346.8 144.621 348.202 cv
162.996 349.702 179.871 349.327 177.996 352.327 cv
cp
f
199.746 343.327 mo
199.746 343.327 135.246 344.452 94.3711 331.702 cv
94.3711 331.702 126.676 334.8 143.871 336.202 cv
162.246 337.702 201.621 340.327 199.746 343.327 cv
cp
f
221.121 331.702 mo
221.121 331.702 123.246 329.827 82.3711 317.077 cv
82.3711 317.077 114.676 320.175 131.871 321.577 cv
150.246 323.077 222.996 328.702 221.121 331.702 cv
cp
f
240.996 320.077 mo
240.996 320.077 143.121 318.202 102.246 305.452 cv
102.246 305.452 134.551 308.55 151.746 309.952 cv
170.121 311.452 242.871 317.077 240.996 320.077 cv
cp
f
256.363 308.827 mo
256.363 308.827 146.496 303.202 99.2461 290.452 cv
99.2461 290.452 135.824 294.343 155.297 296.108 cv
176.109 297.991 258.492 305.062 256.363 308.827 cv
cp
f
282.246 295.702 mo
282.246 295.702 132.621 285.202 85.3711 272.452 cv
85.3711 272.452 121.949 276.343 141.422 278.108 cv
162.234 279.991 284.371 291.937 282.246 295.702 cv
cp
f
117.996 413.077 mo
117.996 413.077 138.246 398.452 148.746 382.702 cv
148.746 382.702 153.996 382.327 148.371 389.452 cv
142.746 396.577 126.996 408.577 117.996 413.077 cv
cp
f
135.469 415.378 mo
135.469 415.378 153.168 402.171 170.648 373.921 cv
170.648 373.921 174.09 372.999 171.059 379.581 cv
168.035 386.159 151.426 406.198 135.469 415.378 cv
cp
f
151.594 416.128 mo
151.594 416.128 177.246 391.702 191.871 360.952 cv
191.871 360.952 193.934 366.327 186.246 380.077 cv
182.715 386.401 167.551 406.948 151.594 416.128 cv
cp
f
165.246 421.327 mo
165.246 421.327 196.371 388.702 208.336 353.671 cv
208.336 353.671 210.363 358.71 204.02 373.128 cv
197.496 387.952 180.543 411.093 165.246 421.327 cv
cp
f
181.582 423.647 mo
181.582 423.647 215.785 380.3 226.371 344.827 cv
226.371 344.827 230.871 350.077 218.441 373.972 cv
210.965 388.343 196.473 412.823 181.582 423.647 cv
cp
f
314.121 273.577 mo
314.121 273.577 172.371 248.078 68.3203 242.425 cv
68.3203 242.425 117.637 242.707 137.121 244.328 cv
209.121 250.328 316.246 269.812 314.121 273.577 cv
cp
f
326.871 257.078 mo
326.871 257.078 186.621 236.828 92.1211 227.828 cv
92.1211 227.828 139.957 228.316 158.121 230.078 cv
177.539 231.96 328.855 253.312 326.871 257.078 cv
cp
f
326.121 242.078 mo
326.121 242.078 187.371 219.578 115.57 213.175 cv
115.57 213.175 142.371 212.078 188.121 217.328 cv
205.922 219.371 327.949 238.585 326.121 242.078 cv
cp
f
332.871 227.828 mo
332.871 227.828 202.371 205.328 142.57 200.425 cv
142.57 200.425 187.293 201.527 202.371 203.078 cv
218.484 204.734 334.523 224.515 332.871 227.828 cv
cp
f
341.871 213.578 mo
341.871 213.578 240.621 194.078 177.07 191.425 cv
177.07 191.425 206.508 190.617 219.621 191.078 cv
262.371 192.578 343.301 210.902 341.871 213.578 cv
cp
f
195.832 425.147 mo
195.832 425.147 230.871 381.577 243.621 337.327 cv
243.621 337.327 245.121 351.577 232.691 375.472 cv
225.215 389.843 210.723 414.323 195.832 425.147 cv
cp
f
215.332 421.397 mo
215.332 421.397 249.379 374.167 261.621 326.077 cv
261.621 326.077 263.16 341.593 251.133 367.53 cv
243.891 383.132 229.84 409.694 215.332 421.397 cv
cp
f
231.082 422.897 mo
231.082 422.897 265.129 375.667 277.371 327.577 cv
277.371 327.577 278.91 343.093 266.883 369.03 cv
259.641 384.632 245.59 411.194 231.082 422.897 cv
cp
f
244.57 430.194 mo
244.57 430.194 282.621 379.327 295.371 313.327 cv
295.371 313.327 292.402 350.39 280.371 376.327 cv
273.129 391.929 259.078 418.491 244.57 430.194 cv
cp
f
316.379 194.828 mo
316.379 194.828 264.621 179.078 213.621 175.328 cv
213.621 175.328 240.191 174.671 248.121 175.328 cv
284.121 178.328 317.379 193.097 316.379 194.828 cv
cp
f
250.875 444.116 mo
250.875 444.116 300.848 384.093 316.621 309.339 cv
316.621 309.339 322.113 317.429 314.52 339.413 cv
306.926 361.405 284.574 416.847 250.875 444.116 cv
cp
f
256.125 462.862 mo
256.125 462.862 321.621 389.077 336.621 289.327 cv
336.621 289.327 336.621 317.077 323.871 356.077 cv
316.641 378.19 289.824 435.597 256.125 462.862 cv
cp
f
271.125 465.862 mo
271.125 465.862 336.621 392.077 351.621 292.327 cv
351.621 292.327 351.621 320.077 338.871 359.077 cv
331.641 381.19 304.824 438.597 271.125 465.862 cv
cp
f
299.391 458.718 mo
299.391 458.718 361.223 381.835 371.355 281.476 cv
371.355 281.476 372.703 309.19 361.863 348.765 cv
355.715 371.202 331.723 429.843 299.391 458.718 cv
cp
f
472.448 173.695 mo
442.308 173.695 409.331 152.07 403.589 103.762 cv
403.233 101.938 393.604 48.0313 433.913 16.5938 cv
448.026 5.58594 463.44 0 479.714 0 cv
503.433 0 521.479 11.7227 528.409 18.6484 cv
568.351 58.5938 557.171 101.422 540.765 130.32 cv
525.339 157.48 499.8 173.695 472.448 173.695 cv
cp
f
410.347 102.961 mo
410.347 102.961 397.972 50.0859 435.472 20.8359 cv
472.972 -8.41406 516.097 10.3359 526.597 20.8359 cv
537.097 31.3359 567.812 68.9141 534.847 126.961 cv
500.347 187.711 419.347 178.711 410.347 102.961 cv
cp
1 1 1 rgb
f
483.097 7.71094 mo
483.097 7.71094 522.097 6.96094 537.847 39.2109 cv
553.597 71.4609 543.847 101.461 540.847 111.211 cv
540.847 111.211 549.847 66.2109 531.097 37.7109 cv
512.347 9.21094 483.097 7.71094 483.097 7.71094 cv
cp
.27451 .207843 .145098 rgb
f
446.253 25.1484 mo
446.253 25.1484 421.632 30.7461 413.804 67.4727 cv
405.952 104.203 434.921 160.387 489.671 162.82 cv
489.671 162.82 453.108 159.789 432.226 123.117 cv
411.343 86.4453 421.112 44.2891 446.253 25.1484 cv
cp
f
gsave
446.253 25.1484 mo
446.253 25.1484 419.675 36.6445 417.378 73.4375 cv
415.073 110.234 439.421 154.258 486.167 162.488 cv
486.167 162.488 444.925 135.105 446.034 93.9922 cv
447.167 52.8789 455.909 43.875 457.089 35.0898 cv
458.261 26.2969 452.253 19.1641 446.253 25.1484 cv
cp
clp
459.034 30.1641 mo
459.034 30.1641 431.745 24.2109 416.663 43.8125 cv
416.663 43.8125 434.831 30.1328 459.034 30.1641 cv
cp
f
464.593 39.4961 mo
464.593 39.4961 433.737 34.5273 412.597 53.6797 cv
411.19 56.4219 li
411.19 56.4219 433.925 39.6953 464.593 39.4961 cv
cp
f
459.038 48.457 mo
459.038 48.457 427.925 45.7266 408.526 66.418 cv
407.362 69.2578 li
407.362 69.2578 428.558 50.8828 459.038 48.457 cv
cp
f
455.499 59.0742 mo
455.499 59.0742 424.331 58.6953 406.839 80.8359 cv
405.929 83.7656 li
405.929 83.7656 425.417 63.8047 455.499 59.0742 cv
cp
f
453.276 69.2617 mo
453.276 69.2617 424.14 70.8438 409.28 93.1406 cv
408.624 95.9922 li
408.624 95.9922 425.479 75.668 453.276 69.2617 cv
cp
f
450.87 80.582 mo
450.87 80.582 423.065 85.2969 411.694 107.105 cv
411.433 109.766 li
411.433 109.766 424.979 89.5 450.87 80.582 cv
cp
f
452.616 90.3047 mo
452.616 90.3047 424.409 96.6719 414.081 121.195 cv
413.991 124.133 li
413.991 124.133 426.636 101.211 452.616 90.3047 cv
cp
f
454.378 100.266 mo
454.378 100.266 426.917 108.852 418.913 134.188 cv
419.065 137.125 li
419.065 137.125 429.554 113.227 454.378 100.266 cv
cp
f
456.901 108.773 mo
456.901 108.773 430.257 119.234 424.269 145.09 cv
424.675 148.027 li
424.675 148.027 433.222 123.422 456.901 108.773 cv
cp
f
462.202 117.543 mo
462.202 117.543 435.55 128.016 429.565 153.875 cv
429.964 156.805 li
429.964 156.805 438.519 132.195 462.202 117.543 cv
cp
f
469.37 124.828 mo
469.37 124.828 442.722 135.305 436.729 161.156 cv
437.124 164.094 li
437.124 164.094 445.679 139.477 469.37 124.828 cv
cp
f
480.026 127.867 mo
480.026 127.867 453.394 138.336 447.394 164.199 cv
447.8 167.133 li
447.8 167.133 456.347 142.523 480.026 127.867 cv
cp
f
489.507 132.797 mo
489.507 132.797 462.862 143.258 456.878 169.129 cv
457.284 172.066 li
457.284 172.066 465.823 147.445 489.507 132.797 cv
cp
f
499.386 139.484 mo
499.386 139.484 472.745 149.945 466.749 175.805 cv
467.147 178.746 li
467.147 178.746 475.702 154.125 499.386 139.484 cv
cp
f
grestore
556.843 253.816 mo
530.944 253.816 505.378 242.109 490.128 223.27 cv
476.495 206.422 471.823 185.469 476.62 162.664 cv
477.3 157.641 484.089 118.699 530.206 108.063 cv
536.776 106.547 543.413 105.777 549.94 105.777 cv
584.487 105.777 613.784 127.152 624.589 160.227 cv
631.28 180.742 628.409 203.797 616.878 221.914 cv
605.687 239.508 587.909 250.625 566.827 253.219 cv
563.569 253.617 560.206 253.816 556.843 253.816 cv
cp
f
482.347 164.207 mo
482.347 164.207 485.175 122.633 530.354 112.207 cv
569.354 103.207 608.354 124.457 620.354 161.207 cv
632.354 197.957 614.851 242.707 565.597 247.457 cv
522.722 251.59 470.347 220.457 482.347 164.207 cv
cp
1 1 1 rgb
f
506.347 131.957 mo
506.347 131.957 535.597 107.582 572.722 121.457 cv
609.847 135.332 616.222 166.832 617.347 173.957 cv
617.347 173.957 603.011 138.848 574.597 127.832 cv
552.347 119.207 532.972 119.207 506.347 131.957 cv
cp
.27451 .207843 .145098 rgb
f
487.972 175.457 mo
487.972 175.457 484.222 211.082 512.347 229.082 cv
540.472 247.082 586.597 248.957 609.097 212.207 cv
609.097 212.207 592.222 233.957 561.847 235.832 cv
531.472 237.707 513.097 225.707 502.972 213.707 cv
492.847 201.707 487.972 182.957 487.972 175.457 cv
cp
f
gsave
484.351 169.207 mo
484.351 169.207 490.854 221.207 527.354 233.707 cv
563.851 246.211 606.198 226.477 617.522 199.594 cv
617.522 199.594 552.354 211.211 539.354 186.211 cv
526.351 161.207 494.354 141.707 484.351 169.207 cv
cp
clp
501.964 159.008 mo
501.964 159.008 480.722 176.867 488.136 201.992 cv
488.136 201.992 487.519 178.34 501.964 159.008 cv
cp
f
513.097 160.785 mo
513.097 160.785 490.538 182.152 493.979 211.82 cv
495.437 214.766 li
495.437 214.766 494.979 185.438 513.097 160.785 cv
cp
f
517.28 171.191 mo
517.28 171.191 496.456 194.254 502.21 223.566 cv
503.897 226.387 li
503.897 226.387 501.151 197.188 517.28 171.191 cv
cp
f
524.073 181.102 mo
524.073 181.102 505.175 205.773 513.272 234.52 cv
515.183 237.195 li
515.183 237.195 510.089 208.316 524.073 181.102 cv
cp
f
531.261 189.664 mo
531.261 189.664 515.218 214.023 525.026 240.777 cv
527.03 243.207 li
527.03 243.207 520.058 216.164 531.261 189.664 cv
cp
f
539.308 199.148 mo
539.308 199.148 526.679 224.516 538.159 248.152 cv
540.229 250.129 li
540.229 250.129 531.343 225.781 539.308 199.148 cv
cp
f
548.487 204.215 mo
548.487 204.215 537.003 231.027 551.378 255.625 cv
553.776 257.668 li
553.776 257.668 542.136 232.273 548.487 204.215 cv
cp
f
557.874 209.445 mo
557.874 209.445 548.698 237.137 565.116 260.426 cv
567.683 262.254 li
567.683 262.254 553.925 237.941 557.874 209.445 cv
cp
f
566.495 213.098 mo
566.495 213.098 559.378 241.383 577.456 263.406 cv
580.151 265.047 li
580.151 265.047 564.647 241.805 566.495 213.098 cv
cp
f
576.999 214.715 mo
576.999 214.715 569.886 243.004 587.956 265.027 cv
590.651 266.664 li
590.651 266.664 575.147 243.422 576.999 214.715 cv
cp
f
587.362 213.836 mo
587.362 213.836 580.253 242.125 598.327 264.148 cv
601.022 265.789 li
601.022 265.789 585.519 242.543 587.362 213.836 cv
cp
f
596.265 207.332 mo
596.265 207.332 589.151 235.621 607.229 257.648 cv
609.925 259.281 li
609.925 259.281 594.417 236.039 596.265 207.332 cv
cp
f
606.042 203.031 mo
606.042 203.031 598.933 231.32 617.007 253.344 cv
619.702 254.984 li
619.702 254.984 604.198 231.734 606.042 203.031 cv
cp
f
617.522 199.594 mo
617.522 199.594 610.409 227.879 628.479 249.902 cv
631.175 251.539 li
631.175 251.539 615.671 228.297 617.522 199.594 cv
cp
f
grestore
614.347 189.707 mo
614.347 189.707 616.597 195.707 612.847 194.957 cv
609.097 194.207 612.847 184.457 614.347 189.707 cv
cp
f
836.456 472.023 mo
813.19 472.023 787.339 460.516 770.593 442.711 cv
756.737 427.969 750.151 410.156 751.562 391.199 cv
752.409 373.949 765.011 340.172 806.452 336.918 cv
808.894 336.727 811.304 336.633 813.659 336.633 cv
857.644 336.633 890.425 369.566 895.565 400.082 cv
900.601 429.918 883.651 464.664 846.558 471.18 cv
843.39 471.742 839.991 472.023 836.456 472.023 cv
cp
f
758.347 389.461 mo
758.347 389.461 760.597 343.711 807.847 339.961 cv
855.097 336.211 886.597 372.211 891.097 399.211 cv
895.597 426.211 880.597 458.461 846.847 464.461 cv
813.097 470.461 754.597 440.461 758.347 389.461 cv
cp
1 1 1 rgb
f
884.593 416.207 mo
884.593 416.207 884.593 427.457 880.093 423.707 cv
875.593 419.957 885.343 410.957 884.593 416.207 cv
cp
.27451 .207843 .145098 rgb
f
827.347 342.211 mo
827.347 342.211 886.222 354.961 889.597 404.461 cv
889.597 404.461 880.222 360.961 827.347 342.211 cv
cp
f
757.222 398.086 mo
757.222 398.086 759.261 429.145 794.722 449.086 cv
819.144 462.813 854.534 468.285 879.472 438.586 cv
879.472 438.586 866.722 454.336 834.179 453.375 cv
808.839 452.629 767.722 433.336 757.222 398.086 cv
cp
f
gsave
758.722 398.461 mo
758.722 398.461 767.011 438.547 809.733 452.906 cv
852.46 467.266 862.116 446.148 887.124 428.563 cv
887.124 428.563 853.808 445.945 832.94 429.977 cv
812.077 414.004 803.675 402.141 797.429 391.891 cv
791.183 381.648 762.323 374.594 758.722 398.461 cv
cp
clp
774.729 387.93 mo
774.729 387.93 756.487 408.848 767.675 432.531 cv
767.675 432.531 763.425 409.266 774.729 387.93 cv
cp
f
786.003 387.977 mo
786.003 387.977 766.987 412.555 774.964 441.344 cv
776.862 444.031 li
776.862 444.031 771.894 415.129 786.003 387.977 cv
cp
f
791.733 397.617 mo
791.733 397.617 774.706 423.609 784.901 451.68 cv
786.999 454.219 li
786.999 454.219 779.8 425.781 791.733 397.617 cv
cp
f
799.96 406.363 mo
799.96 406.363 785.101 433.645 797.522 460.809 cv
799.815 463.164 li
799.815 463.164 790.347 435.402 799.96 406.363 cv
cp
f
808.394 413.711 mo
808.394 413.711 796.284 440.254 810.081 465.18 cv
812.452 467.273 li
812.452 467.273 801.401 441.625 808.394 413.711 cv
cp
f
817.796 421.855 mo
817.796 421.855 809.218 448.867 824.206 470.445 cv
826.562 472.082 li
826.562 472.082 814.026 449.395 817.796 421.855 cv
cp
f
827.644 425.453 mo
827.644 425.453 820.425 453.707 838.417 475.797 cv
841.112 477.449 li
841.112 477.449 825.694 454.148 827.644 425.453 cv
cp
f
837.722 429.168 mo
837.722 429.168 832.933 457.938 852.729 478.422 cv
855.55 479.84 li
855.55 479.84 838.21 457.93 837.722 429.168 cv
cp
f
846.808 431.441 mo
846.808 431.441 844.128 460.504 865.374 479.477 cv
868.292 480.684 li
868.292 480.684 849.401 460.094 846.808 431.441 cv
cp
f
857.448 431.43 mo
857.448 431.43 854.757 460.48 876.011 479.465 cv
878.925 480.66 li
878.925 480.66 860.03 460.082 857.448 431.43 cv
cp
f
867.542 428.969 mo
867.542 428.969 864.87 458.016 886.116 477.004 cv
889.034 478.199 li
889.034 478.199 870.136 457.621 867.542 428.969 cv
cp
f
875.347 421.176 mo
875.347 421.176 872.667 450.219 893.909 469.199 cv
896.827 470.398 li
896.827 470.398 877.94 449.816 875.347 421.176 cv
cp
f
884.347 415.422 mo
884.347 415.422 881.675 444.461 902.909 463.445 cv
905.823 464.652 li
905.823 464.652 886.933 444.07 884.347 415.422 cv
cp
f
895.151 410.254 mo
895.151 410.254 892.468 439.305 913.722 458.281 cv
916.636 459.484 li
916.636 459.484 897.741 438.898 895.151 410.254 cv
cp
f
grestore
255.847 399.211 mo
238.12 399.211 212.347 387.961 198.155 365.023 cv
179.054 334.148 179.011 305.375 193.683 279.594 cv
204.636 260.352 222.417 249.754 243.761 249.754 cv
271.749 249.754 302.171 268.02 313.019 291.34 cv
329.847 327.527 327.159 379.836 294.761 393.355 cv
275.347 401.461 255.847 399.211 255.847 399.211 cv
cp
f
199.597 282.961 mo
191.261 297.609 182.347 322.711 204.097 361.711 cv
225.847 400.711 263.347 400.711 291.847 387.211 cv
320.347 373.711 321.847 326.461 306.847 294.211 cv
291.847 261.961 227.347 234.211 199.597 282.961 cv
cp
1 1 1 rgb
f
207.019 278.297 mo
207.019 278.297 187.261 302.359 199.511 341.156 cv
207.933 367.879 230.019 396.063 268.519 391.445 cv
268.519 391.445 248.452 394.223 225.362 371.266 cv
207.386 353.391 190.581 311.199 207.019 278.297 cv
cp
.27451 .207843 .145098 rgb
f
gsave
210.081 278.574 mo
210.081 278.574 186.487 314.52 207.847 354.211 cv
229.206 393.906 250.69 385.094 280.96 389.371 cv
280.96 389.371 244.769 379.27 240.46 353.348 cv
236.159 327.426 238.14 313.027 240.589 301.277 cv
243.038 289.531 229.026 263.625 210.081 278.574 cv
cp
clp
226.737 282.867 mo
226.737 282.867 199.128 285.652 191.089 310.582 cv
191.089 310.582 203.901 290.703 226.737 282.867 cv
cp
f
234.929 290.609 mo
234.929 290.609 204.249 295.539 190.378 321.996 cv
189.929 325.258 li
189.929 325.258 206.073 300.77 234.929 290.609 cv
cp
f
232.519 301.559 mo
232.519 301.559 202.323 308.879 190.565 336.336 cv
190.362 339.621 li
190.362 339.621 204.55 313.949 232.519 301.559 cv
cp
f
232.542 313.57 mo
232.542 313.57 203.042 323.313 193.534 351.629 cv
193.589 354.91 li
193.589 354.91 205.667 328.18 232.542 313.57 cv
cp
f
233.667 324.695 mo
233.667 324.695 206.687 335.785 199.706 363.398 cv
200.007 366.551 li
200.007 366.551 209.479 340.277 233.667 324.695 cv
cp
f
234.964 337.066 mo
234.964 337.066 210.229 350.91 206.409 376.902 cv
207.015 379.703 li
207.015 379.703 213.378 354.586 234.964 337.066 cv
cp
f
239.69 346.426 mo
239.69 346.426 215.101 362.105 213.12 390.523 cv
213.956 393.578 li
213.956 393.578 218.644 366.031 239.69 346.426 cv
cp
f
244.495 356.035 mo
244.495 356.035 221.331 373.75 221.776 402.227 cv
222.854 405.191 li
222.854 405.191 225.183 377.348 244.495 356.035 cv
cp
f
249.573 363.902 mo
249.573 363.902 227.753 383.273 230.269 411.648 cv
231.577 414.52 li
231.577 414.52 231.878 386.582 249.573 363.902 cv
cp
f
257.347 371.172 mo
257.347 371.172 235.519 390.52 238.046 418.902 cv
239.354 421.773 li
239.354 421.773 239.64 393.836 257.347 371.172 cv
cp
f
266.394 376.273 mo
266.394 376.273 244.585 395.641 247.097 424.023 cv
248.409 426.895 li
248.409 426.895 248.69 398.957 266.394 376.273 cv
cp
f
277.421 375.922 mo
277.421 375.922 255.601 395.289 258.12 423.66 cv
259.433 426.531 li
259.433 426.531 259.726 398.605 277.421 375.922 cv
cp
f
287.921 377.875 mo
287.921 377.875 266.112 397.246 268.628 425.617 cv
269.921 428.488 li
269.921 428.488 270.222 400.551 287.921 377.875 cv
cp
f
299.335 381.5 mo
299.335 381.5 277.515 400.855 280.042 429.238 cv
281.347 432.117 li
281.347 432.117 281.64 404.172 299.335 381.5 cv
cp
f
grestore
489.198 443.945 mo
484.253 443.945 479.065 443.516 473.78 442.68 cv
445.604 438.203 428.261 420.289 418.675 406.047 cv
403.901 384.102 397.292 355.117 402.222 333.918 cv
409.604 302.18 431.007 289.484 435.847 286.977 cv
442.187 281.859 455.339 276.176 472.886 276.176 cv
482.241 276.176 491.94 277.797 501.714 280.992 cv
545.894 295.438 561.878 339.813 558.112 377.383 cv
554.011 418.438 527.604 443.945 489.202 443.945 cv
489.198 443.945 489.198 443.945 489.198 443.945 cv
cp
f
439.597 292.711 mo
439.597 292.711 417.132 298.086 409.097 330.211 cv
399.097 370.211 423.417 427.797 474.847 435.961 cv
522.097 443.461 549.347 415.211 553.097 377.711 cv
556.847 340.211 538.597 300.211 499.597 287.461 cv
467.573 276.988 445.597 287.461 439.597 292.711 cv
cp
1 1 1 rgb
f
418.597 364.336 mo
418.597 364.336 421.597 404.461 453.097 421.336 cv
484.597 438.211 516.097 430.336 532.597 414.961 cv
532.597 414.961 512.722 427.711 487.597 425.836 cv
462.472 423.961 433.597 407.461 418.597 364.336 cv
cp
.27451 .207843 .145098 rgb
f
gsave
413.097 336.711 mo
413.097 336.711 413.597 395.211 451.597 415.211 cv
489.597 435.211 519.597 428.711 540.097 405.707 cv
540.097 405.707 562.097 380.711 532.597 384.707 cv
503.097 388.711 457.097 372.211 446.597 359.211 cv
436.097 346.211 418.589 317.211 413.097 336.711 cv
cp
clp
428.874 330.59 mo
428.874 330.59 405.456 345.473 409.456 371.359 cv
409.456 371.359 411.987 347.836 428.874 330.59 cv
cp
f
439.675 333.828 mo
439.675 333.828 414.472 352.012 413.948 381.883 cv
415.003 384.992 li
415.003 384.992 418.444 355.859 439.675 333.828 cv
cp
f
442.44 344.699 mo
442.44 344.699 418.737 364.797 420.554 394.609 cv
421.847 397.633 li
421.847 397.633 423.003 368.324 442.44 344.699 cv
cp
f
447.847 355.426 mo
447.847 355.426 425.854 377.371 430.065 406.938 cv
431.597 409.844 li
431.597 409.844 430.386 380.539 447.847 355.426 cv
cp
f
453.839 364.859 mo
453.839 364.859 434.71 386.875 440.874 414.695 cv
442.55 417.367 li
442.55 417.367 439.222 389.641 453.839 364.859 cv
cp
f
460.562 375.332 mo
460.562 375.332 444.671 398.805 452.921 423.75 cv
454.714 425.98 li
454.714 425.98 449.128 400.672 460.562 375.332 cv
cp
f
468.979 381.57 mo
468.979 381.57 454.046 406.621 465.026 432.906 cv
467.144 435.258 li
467.144 435.258 458.968 408.539 468.979 381.57 cv
cp
f
477.589 388 mo
477.589 388 464.839 414.227 478.011 439.484 cv
480.308 441.648 li
480.308 441.648 469.901 415.715 477.589 388 cv
cp
f
485.659 392.758 mo
485.659 392.758 474.847 419.859 489.839 444.086 cv
492.296 446.066 li
492.296 446.066 480.015 420.965 485.659 392.758 cv
cp
f
495.858 395.758 mo
495.858 395.758 485.05 422.852 500.042 447.086 cv
502.495 449.063 li
502.495 449.063 490.21 423.965 495.858 395.758 cv
cp
f
506.241 396.262 mo
506.241 396.262 495.437 423.359 510.437 447.59 cv
512.886 449.57 li
512.886 449.57 500.604 424.477 506.241 396.262 cv
cp
f
515.933 391 mo
515.933 391 505.128 418.094 520.116 442.316 cv
522.573 444.297 li
522.573 444.297 510.296 419.207 515.933 391 cv
cp
f
526.19 388.035 mo
526.19 388.035 515.394 415.129 530.382 439.359 cv
532.831 441.336 li
532.831 441.336 520.558 416.242 526.19 388.035 cv
cp
f
538.022 386.148 mo
538.022 386.148 527.218 413.242 542.214 437.465 cv
544.667 439.453 li
544.667 439.453 532.378 414.355 538.022 386.148 cv
cp
f
grestore
217.183 316.359 mo
206.933 316.359 196.206 314.117 185.288 309.707 cv
163.62 300.949 148.011 279.07 146.452 255.258 cv
145.026 233.648 155.394 214.992 174.878 204.063 cv
175.097 203.914 187.206 196.438 204.905 196.438 cv
211.042 196.438 217.175 197.344 223.144 199.117 cv
249.167 206.852 275.175 229.602 270.104 270.227 cv
266.546 298.68 246.272 316.359 217.183 316.359 cv
cp
f
178.597 207.211 mo
178.597 207.211 197.347 195.211 222.097 202.711 cv
246.847 210.211 269.347 231.961 264.847 268.711 cv
260.347 305.461 226.597 319.711 188.347 303.961 cv
151.28 288.695 136.597 231.211 178.597 207.211 cv
cp
1 1 1 rgb
f
299.526 150.262 mo
297.854 143.707 li
267.417 113.273 226.464 114.547 210.401 114.547 cv
205.784 114.547 202.565 114.816 201.062 114.973 cv
197.589 115.34 194.854 115.754 192.741 116.07 cv
190.315 116.438 188.565 116.699 187.034 116.699 cv
183.108 116.699 181.003 114.848 179.925 113.293 cv
178.019 110.539 178.444 107.559 179.104 105.352 cv
176.933 103.363 174.394 99.8711 175.706 93.9844 cv
177.495 85.9453 184.55 81.8672 196.69 81.8672 cv
207.628 81.8672 224.597 88.0898 247.597 94.3359 cv
302.362 109.199 317.511 135.359 318.151 136.602 cv
320.64 141.445 li
316.448 144.938 li
310.237 150.113 303.136 150.262 302.347 150.262 cv
299.526 150.262 li
cp
.27451 .207843 .145098 rgb
f
312.097 139.711 mo
312.097 139.711 297.847 111.961 245.347 97.7109 cv
192.847 83.4609 183.847 88.7109 182.347 95.4609 cv
180.847 102.211 188.347 99.9609 186.097 105.961 cv
183.847 111.961 186.097 109.711 200.347 108.211 cv
214.597 106.711 265.597 106.711 302.347 143.461 cv
302.347 143.461 307.597 143.461 312.097 139.711 cv
cp
1 1 1 rgb
f
341.171 473.816 mo
336.085 473.816 330.706 473.445 325.19 472.715 cv
306.487 470.25 289.503 459.262 278.589 442.578 cv
267.108 425.039 264.167 404.066 270.315 383.535 cv
270.925 381.461 286.019 331.902 330.729 317.66 cv
341.276 314.305 351.894 312.598 362.276 312.598 cv
390.495 312.598 412.585 325.32 421.175 337.141 cv
429.788 348.988 446.987 381.273 420.765 425.109 cv
401.159 457.879 375.12 473.816 341.171 473.816 cv
cp
.27451 .207843 .145098 rgb
f
276.097 384.211 mo
276.097 384.211 290.347 335.461 332.347 321.961 cv
374.347 308.461 406.351 326.367 415.597 339.211 cv
429.097 357.961 434.784 387.309 414.847 420.961 cv
390.847 461.461 359.347 470.461 325.597 465.961 cv
291.847 461.461 264.097 424.711 276.097 384.211 cv
cp
1 1 1 rgb
f
606.847 443.25 mo
584.237 443.25 563.683 432.531 544.022 410.488 cv
542.597 408.672 516.448 374.266 523.651 334.254 cv
530.417 296.672 557.175 273.32 593.499 273.32 cv
596.897 273.32 600.401 273.535 603.905 273.953 cv
639.179 278.188 676.519 307.734 679.636 356.02 cv
682.468 399.953 663.694 430.664 628.12 440.277 cv
620.827 442.246 613.675 443.25 606.847 443.25 cv
cp
.27451 .207843 .145098 rgb
f
549.097 405.961 mo
549.097 405.961 523.597 372.961 530.347 335.461 cv
537.097 297.961 565.597 276.211 603.097 280.711 cv
633.714 284.383 669.847 309.961 672.847 356.461 cv
675.847 402.961 654.097 426.211 626.347 433.711 cv
598.597 441.211 573.847 433.711 549.097 405.961 cv
cp
1 1 1 rgb
f
726.39 399.25 mo
691.683 399.25 661.401 384.891 647.37 361.777 cv
636.198 343.367 636.437 320.918 648.062 298.57 cv
648.999 296.871 669.604 260.457 716.171 248.613 cv
723.878 246.656 731.784 245.66 739.667 245.66 cv
777.151 245.66 816.226 269.438 818.394 314.887 cv
820.651 362.246 792.202 392.711 740.347 398.469 cv
735.714 398.984 731.011 399.25 726.39 399.25 cv
cp
.27451 .207843 .145098 rgb
f
653.347 299.211 mo
653.347 299.211 673.097 263.461 717.347 252.211 cv
761.597 240.961 811.597 267.961 813.847 315.211 cv
816.097 362.461 784.089 386.77 739.597 391.711 cv
678.847 398.461 624.097 355.461 653.347 299.211 cv
cp
1 1 1 rgb
f
171.847 232.336 mo
171.847 232.336 172.222 237.211 170.722 237.211 cv
169.222 237.211 169.597 230.836 171.847 232.336 cv
cp
.27451 .207843 .145098 rgb
f
301.972 453.961 mo
301.972 453.961 296.722 451.336 299.722 450.211 cv
302.722 449.086 303.847 453.211 301.972 453.961 cv
cp
f
183.347 97.7109 mo
183.347 97.7109 181.972 89.8359 191.354 90.2109 cv
197.862 90.4688 208.351 91.7109 208.351 91.7109 cv
208.351 91.7109 197.854 91.2109 198.854 94.2109 cv
199.847 97.2109 198.854 98.207 197.354 99.2109 cv
195.854 100.211 199.347 102.211 196.847 103.711 cv
194.354 105.211 188.851 106.711 188.851 106.711 cv
188.851 106.711 192.354 102.211 189.854 97.7109 cv
187.351 93.2109 182.347 96.707 183.347 97.7109 cv
cp
f
328.714 285.555 mo
320.487 285.555 312.229 284.352 304.183 281.984 cv
303.214 281.75 271.972 273.211 254.921 232.559 cv
247.401 214.641 246.878 191.109 255.19 170.445 cv
262.862 151.375 276.597 137.141 293.862 130.375 cv
303.882 126.449 314.026 124.457 324.019 124.457 cv
347.987 124.457 370.233 135.922 385.058 155.906 cv
405.534 183.5 413.335 242.547 378.425 268.66 cv
363.437 279.867 346.706 285.555 328.714 285.555 cv
cp
f
306.097 275.461 mo
306.097 275.461 277.597 269.836 259.597 230.836 cv
246.097 201.586 259.351 148.586 296.347 134.086 cv
331.245 120.406 364.222 134.836 381.472 158.086 cv
398.722 181.336 408.413 240.879 376.222 264.961 cv
348.479 285.711 318.854 279.211 306.097 275.461 cv
cp
1 1 1 rgb
f
325.972 241.711 mo
325.972 241.711 326.347 246.211 323.722 245.836 cv
321.097 245.461 322.972 239.836 325.972 241.711 cv
cp
.27451 .207843 .145098 rgb
f
276.854 155.211 mo
276.854 155.211 262.347 172.711 264.347 208.711 cv
266.354 244.711 300.847 276.211 348.347 270.211 cv
348.347 270.211 302.851 266.711 281.851 235.211 cv
260.851 203.711 272.354 166.711 276.854 155.211 cv
cp
f
gsave
275.722 154.336 mo
275.722 154.336 261.472 186.961 267.847 209.086 cv
274.222 231.211 286.597 267.211 346.972 269.836 cv
346.972 269.836 299.722 248.461 293.722 214.711 cv
287.722 180.961 295.972 147.961 295.972 147.961 cv
295.972 147.961 280.597 145.711 275.722 154.336 cv
cp
clp
290.827 150.207 mo
290.827 150.207 263.534 155.238 257.565 180.746 cv
257.565 180.746 268.722 159.875 290.827 150.207 cv
cp
f
299.628 157.25 mo
299.628 157.25 269.456 164.68 257.792 192.176 cv
257.597 195.465 li
257.597 195.465 271.69 169.734 299.628 157.25 cv
cp
f
298.12 168.367 mo
298.12 168.367 268.62 178.129 259.144 206.457 cv
259.214 209.742 li
259.214 209.742 271.257 183 298.12 168.367 cv
cp
f
299.128 180.336 mo
299.128 180.336 270.507 192.453 263.347 221.445 cv
263.687 224.719 li
263.687 224.719 273.526 197.094 299.128 180.336 cv
cp
f
301.151 191.34 mo
301.151 191.34 275.171 204.586 270.479 232.691 cv
271.022 235.793 li
271.022 235.793 278.315 208.836 301.151 191.34 cv
cp
f
303.46 203.555 mo
303.46 203.555 279.948 219.375 278.253 245.59 cv
279.081 248.336 li
279.081 248.336 283.374 222.777 303.46 203.555 cv
cp
f
308.94 212.496 mo
308.94 212.496 285.706 230.137 286.05 258.621 cv
287.128 261.586 li
287.128 261.586 289.558 233.754 308.94 212.496 cv
cp
f
314.511 221.684 mo
314.511 221.684 292.854 241.223 295.628 269.586 cv
296.956 272.441 li
296.956 272.441 297.003 244.508 314.511 221.684 cv
cp
f
320.206 229.113 mo
320.206 229.113 300.042 250.195 304.878 278.27 cv
306.413 281.031 li
306.413 281.031 304.417 253.16 320.206 229.113 cv
cp
f
328.538 235.711 mo
328.538 235.711 308.378 256.793 313.21 284.867 cv
314.745 287.625 li
314.745 287.625 312.745 259.758 328.538 235.711 cv
cp
f
337.987 240.07 mo
337.987 240.07 317.827 261.148 322.655 289.23 cv
324.19 291.984 li
324.19 291.984 322.198 264.117 337.987 240.07 cv
cp
f
348.933 238.813 mo
348.933 238.813 328.776 259.891 333.612 287.973 cv
335.147 290.727 li
335.147 290.727 333.151 262.859 348.933 238.813 cv
cp
f
359.565 239.906 mo
359.565 239.906 339.401 260.984 344.237 289.063 cv
345.776 291.82 li
345.776 291.82 343.772 263.949 359.565 239.906 cv
cp
f
371.241 242.586 mo
371.241 242.586 351.085 263.66 355.913 291.742 cv
357.448 294.5 li
357.448 294.5 355.448 266.625 371.241 242.586 cv
cp
f
grestore
355.222 140.461 mo
355.222 140.461 381.847 151.336 390.097 188.086 cv
398.347 224.836 385.222 251.086 372.847 261.586 cv
372.847 261.586 397.222 236.461 385.597 189.211 cv
375.464 148.039 355.222 140.461 355.222 140.461 cv
cp
1 1 1 rgb
f
258.847 177.961 mo
258.847 177.961 249.472 211.336 267.847 240.961 cv
286.222 270.586 311.347 272.836 327.097 275.086 cv
327.097 275.086 289.597 271.336 271.597 239.461 cv
253.597 207.586 258.847 177.961 258.847 177.961 cv
cp
f
203.851 102.711 mo
203.851 102.711 231.354 93.207 278.354 118.207 cv
278.354 118.207 256.847 110.211 246.347 107.211 cv
238.589 104.996 233.854 102.711 222.854 102.711 cv
211.847 102.711 203.851 102.711 203.851 102.711 cv
cp
.27451 .207843 .145098 rgb
f
484.351 197.211 mo
484.351 197.211 484.854 237.207 531.854 248.707 cv
578.851 260.211 628.351 229.707 631.351 194.707 cv
631.351 194.707 614.354 239.707 561.854 241.711 cv
516.354 243.445 501.854 234.711 484.351 197.211 cv
cp
f
614.218 315.734 mo
584.526 299.258 562.726 260.363 577.644 223.789 cv
578.101 222.449 592.28 183.09 635.78 173.012 cv
665.058 166.23 690.765 171.273 711.167 182.594 cv
721.995 188.602 730.351 194.527 739.081 205.801 cv
750.483 220.508 754.776 239.441 751.19 259.117 cv
747.229 280.84 734.011 300.945 716.706 311.57 cv
685.726 330.586 654.612 333.113 621.573 319.305 cv
619.093 318.266 616.62 317.066 614.218 315.734 cv
cp
f
583.948 226.359 mo
583.948 226.359 595.96 187.559 635.979 176.898 cv
672.886 167.066 712.862 176.957 737.354 208.559 cv
761.847 240.164 741.765 288.203 713.144 305.77 cv
684.519 323.344 655.526 326.125 624.202 313.027 cv
592.866 299.93 569.683 261.332 583.948 226.359 cv
cp
1 1 1 rgb
f
622.737 188.414 mo
622.737 188.414 659.487 166.492 704.71 187.016 cv
741.683 203.793 744.94 229.93 744.94 229.93 cv
744.94 229.93 712.034 162.488 622.737 188.414 cv
cp
.27451 .207843 .145098 rgb
f
585.901 248.605 mo
585.901 248.605 581.687 273.715 614.237 297.492 cv
646.792 321.277 712.644 320.082 736.456 270.969 cv
736.456 270.969 719.19 303.125 675.437 305.723 cv
631.679 308.313 594.612 280.313 585.901 248.605 cv
cp
f
gsave
585.901 248.605 mo
585.901 248.605 586.636 278.18 621.425 296.906 cv
656.214 315.641 708.46 313.18 734.769 274.027 cv
734.769 274.027 692.042 299.492 652.597 279.898 cv
613.159 260.297 607.854 248.203 599.784 243.156 cv
591.722 238.109 582.448 240.398 585.901 248.605 cv
cp
clp
595.776 239.152 mo
595.776 239.152 579.308 261.492 592.401 284.18 cv
592.401 284.18 586.261 261.328 595.776 239.152 cv
cp
f
607.003 238.266 mo
607.003 238.266 590.089 264.328 600.394 292.363 cv
602.499 294.895 li
602.499 294.895 595.175 266.488 607.003 238.266 cv
cp
f
613.519 247.406 mo
613.519 247.406 598.679 274.711 611.147 301.852 cv
613.448 304.203 li
613.448 304.203 603.929 276.457 613.519 247.406 cv
cp
f
622.44 255.445 mo
622.44 255.445 609.854 283.863 624.472 309.914 cv
626.956 312.066 li
626.956 312.066 615.226 285.184 622.44 255.445 cv
cp
f
631.444 262.09 mo
631.444 262.09 621.554 289.527 637.354 313.234 cv
639.878 315.121 li
639.878 315.121 626.761 290.473 631.444 262.09 cv
cp
f
641.479 269.414 mo
641.479 269.414 635.159 297.047 651.858 317.324 cv
654.331 318.762 li
654.331 318.762 639.987 297.188 641.479 269.414 cv
cp
f
651.597 272.195 mo
651.597 272.195 646.722 300.949 666.46 321.496 cv
669.272 322.918 li
669.272 322.918 651.999 300.957 651.597 272.195 cv
cp
f
661.948 275.082 mo
661.948 275.082 659.519 304.148 680.948 322.938 cv
683.862 324.113 li
683.862 324.113 664.792 303.703 661.948 275.082 cv
cp
f
671.19 276.609 mo
671.19 276.609 670.901 305.773 693.636 322.945 cv
696.636 323.906 li
696.636 323.906 676.116 304.949 671.19 276.609 cv
cp
f
681.776 275.715 mo
681.776 275.715 681.487 304.883 704.222 322.055 cv
707.229 323.016 li
707.229 323.016 686.706 304.055 681.776 275.715 cv
cp
f
691.651 272.422 mo
691.651 272.422 691.37 301.602 714.097 318.773 cv
717.104 319.734 li
717.104 319.734 696.581 300.773 691.651 272.422 cv
cp
f
698.776 264.023 mo
698.776 264.023 698.495 293.184 721.229 310.363 cv
724.233 311.316 li
724.233 311.316 703.706 292.359 698.776 264.023 cv
cp
f
707.276 257.551 mo
707.276 257.551 706.983 286.715 729.722 303.891 cv
732.737 304.848 li
732.737 304.848 712.198 285.891 707.276 257.551 cv
cp
f
717.628 251.516 mo
717.628 251.516 717.339 280.672 740.073 297.859 cv
743.077 298.82 li
743.077 298.82 722.546 279.852 717.628 251.516 cv
cp
f
grestore
354.038 155.656 mo
307.972 155.836 286.479 125.484 282.862 100.172 cv
280.823 80.1328 283.222 40.7109 326.409 26.0156 cv
336.46 22.5977 346.831 20.8828 357.237 20.8828 cv
392.288 20.8828 423.671 40.6992 431.862 68.0039 cv
437.519 86.8438 434.3 108.02 423.269 124.645 cv
415.308 136.633 399.706 151.586 370.573 154.723 cv
364.823 155.344 359.261 155.656 354.038 155.656 cv
cp
f
287.347 99.9609 mo
287.347 99.9609 274.972 49.7109 329.019 30.5391 cv
374.55 14.3867 419.94 38.1602 429.261 68.6563 cv
438.589 99.1484 421.534 145.707 370.972 150.586 cv
328.222 154.711 292.792 137.316 287.347 99.9609 cv
cp
1 1 1 rgb
f
311.851 76.2109 mo
311.851 76.2109 312.854 84.7109 308.851 82.2109 cv
304.847 79.7109 311.851 73.2109 311.851 76.2109 cv
cp
.27451 .207843 .145098 rgb
f
305.347 57.9609 mo
305.347 57.9609 316.87 34.3477 354.347 32.9609 cv
394.847 31.4609 411.097 51.9609 411.097 51.9609 cv
411.097 51.9609 352.597 15.2109 305.347 57.9609 cv
cp
f
297.097 108.961 mo
297.097 108.961 307.597 143.461 357.097 141.961 cv
406.597 140.461 420.097 101.461 419.347 83.4609 cv
419.347 83.4609 411.847 122.461 369.097 132.211 cv
326.347 141.961 303.847 120.961 297.097 108.961 cv
cp
f
gsave
297.097 108.961 mo
297.097 108.961 307.972 139.336 352.972 138.211 cv
397.972 137.086 418.972 103.711 420.097 76.3359 cv
420.097 76.3359 399.472 95.0859 377.722 99.9609 cv
355.972 104.836 332.347 108.211 320.722 99.9609 cv
309.097 91.7109 292.972 95.4609 297.097 108.961 cv
cp
clp
301.237 99.0586 mo
301.237 99.0586 295.636 123.313 314.487 137.324 cv
314.487 137.324 301.304 120.703 301.237 99.0586 cv
cp
f
310.167 94.3359 mo
310.167 94.3359 305.519 121.809 323.979 141.215 cv
326.612 142.547 li
326.612 142.547 310.472 121.773 310.167 94.3359 cv
cp
f
318.784 99.543 mo
318.784 99.543 316.284 127.297 336.206 145.199 cv
338.94 146.313 li
338.94 146.313 321.237 126.859 318.784 99.543 cv
cp
f
328.983 102.984 mo
328.983 102.984 328.737 130.852 350.03 147.09 cv
352.854 147.98 li
352.854 147.98 333.636 130.027 328.983 102.984 cv
cp
f
338.761 105.242 mo
338.761 105.242 340.394 131.348 361.831 145.238 cv
364.585 145.895 li
364.585 145.895 345.003 130.273 338.761 105.242 cv
cp
f
349.632 107.703 mo
349.632 107.703 354.261 132.695 375.214 143.441 cv
377.776 143.742 li
377.776 143.742 358.28 131.09 349.632 107.703 cv
cp
f
358.94 106.391 mo
358.94 106.391 365.167 131.797 388.722 141.68 cv
391.55 141.844 li
391.55 141.844 369.511 129.922 358.94 106.391 cv
cp
f
368.495 105.086 mo
368.495 105.086 376.839 129.871 401.159 137.711 cv
403.983 137.641 li
403.983 137.641 381.015 127.633 368.495 105.086 cv
cp
f
376.632 103.055 mo
376.632 103.055 386.784 127.156 411.601 133.203 cv
414.417 132.922 li
414.417 132.922 390.776 124.621 376.632 103.055 cv
cp
f
385.034 98.5508 mo
385.034 98.5508 395.183 122.66 420.003 128.703 cv
422.823 128.422 li
422.823 128.422 399.179 120.121 385.034 98.5508 cv
cp
f
391.995 92.332 mo
391.995 92.332 402.136 116.441 426.964 122.484 cv
429.776 122.207 li
429.776 122.207 406.14 113.906 391.995 92.332 cv
cp
f
394.854 82.8789 mo
394.854 82.8789 405.011 106.984 429.839 113.023 cv
432.647 112.746 li
432.647 112.746 409.011 104.441 394.854 82.8789 cv
cp
f
399.554 74.5234 mo
399.554 74.5234 409.702 98.6328 434.522 104.676 cv
437.339 104.395 li
437.339 104.395 413.698 96.0938 399.554 74.5234 cv
cp
f
405.929 65.875 mo
405.929 65.875 416.073 89.9766 440.897 96.0273 cv
443.71 95.7461 li
443.71 95.7461 420.073 87.4453 405.929 65.875 cv
cp
f
grestore
434.284 255.203 mo
403.253 255.203 377.128 232.305 367.14 216.914 cv
366.437 215.977 344.612 185.867 351.956 153.215 cv
358.351 124.813 383.706 96.0625 419.8 96.0625 cv
423.487 96.0625 427.245 96.3789 430.964 96.9961 cv
469.792 103.469 494.897 132.418 498.132 174.438 cv
501.155 213.793 487.487 238.852 456.323 251.043 cv
449.269 253.805 441.854 255.203 434.284 255.203 cv
cp
f
372.847 213.211 mo
372.847 213.211 349.604 182.711 356.354 152.711 cv
363.104 122.711 393.854 95.2109 429.854 101.211 cv
465.854 107.207 490.347 135.211 493.351 174.211 cv
496.351 213.211 480.347 234.336 453.847 244.711 cv
419.347 258.211 384.854 231.711 372.847 213.211 cv
cp
1 1 1 rgb
f
381.472 117.203 mo
381.472 117.203 358.604 127.898 358.729 165.449 cv
358.854 203.008 399.081 251.773 453.097 242.539 cv
453.097 242.539 416.729 247.328 388.538 215.926 cv
360.354 184.508 360.956 141.242 381.472 117.203 cv
cp
.27451 .207843 .145098 rgb
f
gsave
381.472 117.203 mo
381.472 117.203 357.933 134.078 363.487 170.523 cv
369.042 206.969 402.179 244.828 449.604 242.957 cv
449.604 242.957 403.491 224.945 395.862 184.531 cv
388.245 144.113 394.878 133.457 394.167 124.621 cv
393.448 115.781 386.065 110.086 381.472 117.203 cv
cp
clp
395.026 119.398 mo
395.026 119.398 367.093 119.367 356.511 141.719 cv
356.511 141.719 371.37 124.5 395.026 119.398 cv
cp
f
402.437 127.34 mo
402.437 127.34 371.222 129.027 354.636 152.227 cv
353.839 155.207 li
353.839 155.207 372.507 134.039 402.437 127.34 cv
cp
f
398.909 137.273 mo
398.909 137.273 367.925 141.199 353.354 165.539 cv
352.819 168.563 li
352.819 168.563 369.636 146.109 398.909 137.273 cv
cp
f
397.702 148.402 mo
397.702 148.402 367.163 154.641 354.761 179.984 cv
354.495 183.039 li
354.495 183.039 369.3 159.402 397.702 148.402 cv
cp
f
397.69 158.828 mo
397.69 158.828 369.554 166.551 359.753 191.492 cv
359.722 194.422 li
359.722 194.422 371.886 170.98 397.69 158.828 cv
cp
f
397.737 170.398 mo
397.737 170.398 371.569 180.906 365.077 204.629 cv
365.386 207.281 li
365.386 207.281 374.323 184.605 397.737 170.398 cv
cp
f
401.511 179.531 mo
401.511 179.531 375.296 191.734 370.397 217.891 cv
370.933 220.785 li
370.933 220.785 378.433 195.703 401.511 179.531 cv
cp
f
405.343 188.891 mo
405.343 188.891 380.331 203.109 377.874 229.563 cv
378.651 232.398 li
378.651 232.398 383.831 206.82 405.343 188.891 cv
cp
f
409.608 196.668 mo
409.608 196.668 385.792 212.547 385.421 239.086 cv
386.44 241.867 li
386.44 241.867 389.573 216.008 409.608 196.668 cv
cp
f
416.651 204.117 mo
416.651 204.117 392.827 220.008 392.464 246.543 cv
393.472 249.328 li
393.472 249.328 396.612 223.461 416.651 204.117 cv
cp
f
425.198 209.719 mo
425.198 209.719 401.382 225.605 401.007 252.141 cv
402.019 254.93 li
402.019 254.93 405.155 229.059 425.198 209.719 cv
cp
f
436.261 210.43 mo
436.261 210.43 412.456 226.309 412.073 252.852 cv
413.097 255.633 li
413.097 255.633 416.229 229.77 436.261 210.43 cv
cp
f
446.573 213.234 mo
446.573 213.234 422.757 229.105 422.386 255.656 cv
423.409 258.445 li
423.409 258.445 426.53 232.57 446.573 213.234 cv
cp
f
457.644 217.672 mo
457.644 217.672 433.823 233.547 433.448 260.09 cv
434.464 262.879 li
434.464 262.879 437.597 237.004 457.644 217.672 cv
cp
f
grestore
420.847 101.461 mo
420.847 101.461 488.347 102.211 492.097 183.211 cv
492.097 183.211 487.597 116.461 420.847 101.461 cv
cp
f
545.347 314.461 mo
545.347 314.461 529.597 335.086 537.097 364.711 cv
543.269 389.086 567.472 428.461 624.847 427.711 cv
624.847 427.711 587.651 423.027 559.597 392.461 cv
534.472 365.086 538.597 324.961 545.347 314.461 cv
cp
f
gsave
540.347 311.211 mo
540.347 311.211 524.339 357.211 553.347 391.711 cv
582.347 426.211 617.339 427.715 647.847 425.711 cv
647.847 425.711 594.854 402.707 585.347 378.211 cv
575.847 353.711 574.847 339.211 574.847 327.211 cv
574.847 315.211 555.854 292.711 540.347 311.211 cv
cp
clp
557.526 312.008 mo
557.526 312.008 531.073 320.375 528.284 346.418 cv
528.284 346.418 536.776 324.336 557.526 312.008 cv
cp
f
567.132 317.918 mo
567.132 317.918 538.104 329.012 529.925 357.742 cv
530.144 361.02 li
530.144 361.02 540.952 333.754 567.132 317.918 cv
cp
f
567.011 329.133 mo
567.011 329.133 538.937 342.461 533.03 371.734 cv
533.503 374.992 li
533.503 374.992 542.151 346.969 567.011 329.133 cv
cp
f
569.479 340.887 mo
569.479 340.887 542.589 356.441 539.054 386.102 cv
539.784 389.301 li
539.784 389.301 546.151 360.672 569.479 340.887 cv
cp
f
572.851 351.547 mo
572.851 351.547 548.698 367.906 547.503 396.375 cv
548.44 399.391 li
548.44 399.391 552.347 371.734 572.851 351.547 cv
cp
f
576.647 363.398 mo
576.647 363.398 555.261 381.992 556.819 408.219 cv
557.979 410.84 li
557.979 410.84 559.089 384.945 576.647 363.398 cv
cp
f
583.183 371.586 mo
583.183 371.586 562.308 391.961 566.167 420.188 cv
567.604 423 li
567.604 423 566.573 395.078 583.183 371.586 cv
cp
f
589.847 380.016 mo
589.847 380.016 570.784 402.086 577.022 429.875 cv
578.687 432.555 li
578.687 432.555 575.292 404.828 589.847 380.016 cv
cp
f
596.425 386.688 mo
596.425 386.688 579.011 410.094 587.269 437.359 cv
589.136 439.906 li
589.136 439.906 583.722 412.5 596.425 386.688 cv
cp
f
605.511 392.207 mo
605.511 392.207 588.097 415.617 596.358 442.883 cv
598.222 445.43 li
598.222 445.43 592.8 418.016 605.511 392.207 cv
cp
f
615.413 395.367 mo
615.413 395.367 598.011 418.773 606.272 446.043 cv
608.136 448.586 li
608.136 448.586 602.714 421.18 615.413 395.367 cv
cp
f
626.136 392.77 mo
626.136 392.77 608.729 416.18 616.983 443.441 cv
618.847 445.984 li
618.847 445.984 613.44 418.574 626.136 392.77 cv
cp
f
636.812 392.539 mo
636.812 392.539 619.409 415.949 627.667 443.219 cv
629.522 445.762 li
629.522 445.762 624.108 418.352 636.812 392.539 cv
cp
f
648.729 393.758 mo
648.729 393.758 631.323 417.168 639.581 444.43 cv
641.448 446.98 li
641.448 446.98 636.026 419.563 648.729 393.758 cv
cp
f
grestore
506.44 344.477 mo
494.519 344.477 484.862 341.328 478.854 338.688 cv
449.347 325.703 433.097 302.078 430.562 268.473 cv
430.519 267.898 427.022 212.395 475.89 191.215 cv
485.644 186.992 495.292 184.848 504.565 184.848 cv
534.854 184.848 553.737 206.867 562.3 219.992 cv
578.265 244.484 586.784 282.047 562.792 314.039 cv
543.925 339.195 521.733 344.477 506.44 344.477 cv
cp
f
437.347 267.961 mo
437.347 267.961 433.597 216.961 478.597 197.461 cv
519.362 179.793 547.597 204.961 558.847 222.211 cv
570.097 239.461 582.097 276.961 557.347 309.961 cv
532.597 342.961 500.097 342.961 481.347 334.711 cv
462.597 326.461 440.347 307.711 437.347 267.961 cv
cp
1 1 1 rgb
f
656.347 346.711 mo
656.347 346.711 673.597 379.711 728.347 384.211 cv
783.097 388.711 810.847 342.961 805.597 316.711 cv
805.597 316.711 798.847 366.961 742.597 375.961 cv
686.347 384.961 656.347 346.711 656.347 346.711 cv
cp
.27451 .207843 .145098 rgb
f
gsave
653.847 345.711 mo
653.847 345.711 684.839 384.707 733.347 381.211 cv
781.847 377.711 808.847 340.711 805.847 314.211 cv
802.847 287.711 787.347 301.207 770.847 315.211 cv
754.347 329.211 712.421 351.488 690.386 338.848 cv
668.347 326.211 631.843 317.711 653.847 345.711 cv
cp
clp
660.433 329.938 mo
660.433 329.938 650.253 355.754 668.733 374.328 cv
668.733 374.328 656.933 353.824 660.433 329.938 cv
cp
f
671.065 326.203 mo
671.065 326.203 661.397 355.734 678.554 380.188 cv
681.237 382.082 li
681.237 382.082 666.87 356.512 671.065 326.203 cv
cp
f
679.702 333.359 mo
679.702 333.359 672.366 363.563 691.378 386.594 cv
694.21 388.273 li
694.21 388.273 677.894 363.902 679.702 333.359 cv
cp
f
690.386 338.848 mo
690.386 338.848 685.519 369.531 706.327 390.965 cv
709.28 392.414 li
709.28 392.414 691.05 369.43 690.386 338.848 cv
cp
f
700.784 342.953 mo
700.784 342.953 698.276 372.016 719.628 390.871 cv
722.565 392.043 li
722.565 392.043 703.55 371.586 700.784 342.953 cv
cp
f
712.378 347.465 mo
712.378 347.465 713.347 375.789 734.698 391.102 cv
737.464 391.855 li
737.464 391.855 718.05 374.676 712.378 347.465 cv
cp
f
722.854 347.555 mo
722.854 347.555 725.526 376.594 749.878 391.383 cv
752.968 392.031 li
752.968 392.031 730.636 375.242 722.854 347.555 cv
cp
f
733.597 347.68 mo
733.597 347.68 738.729 376.391 764.245 389.055 cv
767.37 389.453 li
767.37 389.453 743.698 374.617 733.597 347.68 cv
cp
f
742.925 346.781 mo
742.925 346.781 750.132 375.051 776.519 385.813 cv
779.667 385.969 li
779.667 385.969 754.964 372.906 742.925 346.781 cv
cp
f
752.94 343.199 mo
752.94 343.199 760.144 371.469 786.53 382.234 cv
789.683 382.387 li
789.683 382.387 764.972 369.332 752.94 343.199 cv
cp
f
761.636 337.5 mo
761.636 337.5 768.847 365.758 795.229 376.527 cv
798.378 376.68 li
798.378 376.68 773.683 363.625 761.636 337.5 cv
cp
f
766.37 327.539 mo
766.37 327.539 773.581 355.805 799.956 366.57 cv
803.104 366.727 li
803.104 366.727 778.409 353.656 766.37 327.539 cv
cp
f
772.913 319.102 mo
772.913 319.102 780.132 347.367 806.511 358.133 cv
809.659 358.293 li
809.659 358.293 784.96 345.227 772.913 319.102 cv
cp
f
781.37 310.617 mo
781.37 310.617 788.581 338.879 814.96 349.641 cv
818.112 349.801 li
818.112 349.801 793.409 336.738 781.37 310.617 cv
cp
f
grestore
294.097 438.211 mo
294.097 438.211 313.351 462.961 355.351 454.711 cv
397.351 446.461 438.847 388.711 414.847 346.711 cv
414.847 346.711 428.347 390.211 390.097 425.461 cv
360.46 452.77 323.851 456.211 294.097 438.211 cv
cp
f
gsave
285.097 434.461 mo
285.097 434.461 319.597 465.961 362.347 447.961 cv
405.097 429.961 425.347 392.461 414.847 346.711 cv
414.847 346.711 398.347 328.711 388.597 345.211 cv
378.847 361.711 383.347 393.211 340.597 400.711 cv
297.847 408.211 266.347 410.461 285.097 434.461 cv
cp
clp
291.097 411.211 mo
291.097 411.211 291.097 438.961 315.097 449.461 cv
315.097 449.461 296.597 434.711 291.097 411.211 cv
cp
f
299.62 403.832 mo
299.62 403.832 301.456 434.852 326.382 451.313 cv
329.573 452.09 li
329.573 452.09 306.835 433.563 299.62 403.832 cv
cp
f
310.28 407.324 mo
310.28 407.324 314.534 438.109 340.667 452.57 cv
343.913 453.094 li
343.913 453.094 319.796 436.398 310.28 407.324 cv
cp
f
322.233 408.508 mo
322.233 408.508 328.96 438.848 356.171 451.152 cv
359.452 451.41 li
359.452 451.41 334.069 436.719 322.233 408.508 cv
cp
f
333.413 408.52 mo
333.413 408.52 341.733 436.469 368.522 446.184 cv
371.675 446.207 li
371.675 446.207 346.487 434.141 333.413 408.52 cv
cp
f
345.854 408.461 mo
345.854 408.461 357.144 434.453 382.62 440.875 cv
385.468 440.559 li
385.468 440.559 361.116 431.695 345.854 408.461 cv
cp
f
355.636 404.695 mo
355.636 404.695 368.769 430.738 396.847 435.566 cv
399.956 435.039 li
399.956 435.039 373.026 427.609 355.636 404.695 cv
cp
f
365.683 400.879 mo
365.683 400.879 380.972 425.711 409.362 428.137 cv
412.417 427.352 li
412.417 427.352 384.952 422.23 365.683 400.879 cv
cp
f
374.026 396.625 mo
374.026 396.625 391.097 420.273 419.589 420.613 cv
422.573 419.605 li
422.573 419.605 394.808 416.512 374.026 396.625 cv
cp
f
382.022 389.629 mo
382.022 389.629 399.097 413.277 427.585 413.617 cv
430.573 412.609 li
430.573 412.609 402.808 409.516 382.022 389.629 cv
cp
f
388.022 381.125 mo
388.022 381.125 405.097 404.773 433.585 405.117 cv
436.573 404.109 li
436.573 404.109 408.808 401.016 388.022 381.125 cv
cp
f
388.772 370.129 mo
388.772 370.129 405.847 393.777 434.335 394.117 cv
437.323 393.109 li
437.323 393.109 409.558 390.016 388.772 370.129 cv
cp
f
391.772 359.875 mo
391.772 359.875 408.847 383.523 437.335 383.863 cv
440.323 382.855 li
440.323 382.855 412.558 379.762 391.772 359.875 cv
cp
f
396.526 348.875 mo
396.526 348.875 413.597 372.523 442.089 372.867 cv
445.073 371.859 li
445.073 371.859 417.308 368.766 396.526 348.875 cv
cp
f
grestore
161.347 267.961 mo
161.347 267.961 171.472 294.211 201.472 301.711 cv
231.472 309.211 253.597 292.711 258.097 277.711 cv
258.097 277.711 241.972 301.711 214.972 299.086 cv
187.972 296.461 169.597 282.586 161.347 267.961 cv
cp
f
gsave
158.347 265.711 mo
158.347 265.711 175.597 301.711 214.972 299.086 cv
254.347 296.461 264.847 274.711 263.347 250.711 cv
263.347 250.711 254.37 271.055 223.983 274.008 cv
193.597 276.961 167.347 252.211 158.347 265.711 cv
cp
clp
163.604 261.391 mo
163.604 261.391 155.944 282.797 171.554 297.52 cv
171.554 297.52 161.358 281.039 163.604 261.391 cv
cp
f
172.21 258.055 mo
172.21 258.055 165.065 282.492 179.757 302.066 cv
182.003 303.543 li
182.003 303.543 169.573 282.977 172.21 258.055 cv
cp
f
179.472 263.688 mo
179.472 263.688 174.261 288.609 190.425 306.969 cv
192.788 308.277 li
192.788 308.277 178.792 288.742 179.472 263.688 cv
cp
f
188.358 267.906 mo
188.358 267.906 185.19 293.156 202.784 310.156 cv
205.237 311.27 li
205.237 311.27 189.706 292.93 188.358 267.906 cv
cp
f
196.983 270.992 mo
196.983 270.992 195.694 294.852 213.675 309.734 cv
216.104 310.625 li
216.104 310.625 200.003 294.367 196.983 270.992 cv
cp
f
206.604 274.383 mo
206.604 274.383 208.14 297.555 226.019 309.531 cv
228.296 310.074 li
228.296 310.074 211.956 296.516 206.604 274.383 cv
cp
f
215.183 274.18 mo
215.183 274.18 218.124 297.891 238.448 309.363 cv
240.999 309.82 li
240.999 309.82 222.272 296.652 215.183 274.18 cv
cp
f
223.983 274.008 mo
223.983 274.008 228.933 297.379 250.159 307.086 cv
252.729 307.328 li
252.729 307.328 232.96 295.797 223.983 274.008 cv
cp
f
231.601 273.023 mo
231.601 273.023 238.237 295.984 260.12 304.105 cv
262.706 304.152 li
262.706 304.152 242.136 294.102 231.601 273.023 cv
cp
f
239.71 269.828 mo
239.71 269.828 246.343 292.789 268.222 300.914 cv
270.812 300.961 li
270.812 300.961 250.237 290.914 239.71 269.828 cv
cp
f
246.667 264.938 mo
246.667 264.938 253.315 287.891 275.206 296.016 cv
277.776 296.063 li
277.776 296.063 257.218 286.012 246.667 264.938 cv
cp
f
250.284 256.656 mo
250.284 256.656 256.937 279.613 278.808 287.734 cv
281.394 287.781 li
281.394 287.781 260.831 277.73 250.284 256.656 cv
cp
f
255.425 249.57 mo
255.425 249.57 262.073 272.531 283.96 280.656 cv
286.538 280.703 li
286.538 280.703 265.972 270.656 255.425 249.57 cv
cp
f
grestore
682.304 461.883 mo
649.714 439.105 640.151 405.602 657.3 374.391 cv
659.526 369.688 679.128 332.258 733.948 342.891 cv
747.776 345.563 760.046 350.594 770.394 357.828 cv
790.112 371.605 801.085 392.07 800.511 413.98 cv
800.089 430.336 792.8 454.672 773.675 469.457 cv
759.624 480.336 739.769 481.68 720.097 477.211 cv
705.577 473.91 693.839 469.949 682.304 461.883 cv
cp
f
663.909 376.715 mo
663.909 376.715 680.167 337.75 734.241 348.094 cv
774.87 355.867 796.698 384.426 795.858 413.117 cv
795.015 441.813 770.214 483.172 721.972 472.336 cv
673.729 461.492 639.425 420.914 663.909 376.715 cv
cp
1 1 1 rgb
f
444.097 245.836 mo
444.097 245.836 438.097 272.461 451.222 297.211 cv
464.347 321.961 495.472 338.086 532.222 325.711 cv
532.222 325.711 504.097 330.211 481.972 317.836 cv
459.847 305.461 445.222 287.086 444.097 245.836 cv
cp
.27451 .207843 .145098 rgb
f
gsave
448.097 230.211 mo
448.097 230.211 432.343 270.211 461.347 304.711 cv
490.351 339.211 509.593 326.211 540.097 324.211 cv
540.097 324.211 502.604 321.707 493.097 297.211 cv
483.597 272.711 482.597 258.211 482.597 246.211 cv
482.597 234.211 463.604 211.711 448.097 230.211 cv
cp
clp
465.276 231.008 mo
465.276 231.008 438.823 239.375 436.034 265.418 cv
436.034 265.418 444.526 243.336 465.276 231.008 cv
cp
f
474.882 236.918 mo
474.882 236.918 445.854 248.012 437.675 276.742 cv
437.894 280.02 li
437.894 280.02 448.702 252.754 474.882 236.918 cv
cp
f
474.761 248.133 mo
474.761 248.133 446.687 261.461 440.78 290.738 cv
441.253 293.996 li
441.253 293.996 449.901 265.969 474.761 248.133 cv
cp
f
477.229 259.887 mo
477.229 259.887 450.339 275.441 446.804 305.098 cv
447.534 308.305 li
447.534 308.305 453.901 279.672 477.229 259.887 cv
cp
f
480.601 270.547 mo
480.601 270.547 456.448 286.906 455.253 315.375 cv
456.19 318.391 li
456.19 318.391 460.097 290.738 480.601 270.547 cv
cp
f
484.397 282.398 mo
484.397 282.398 463.011 300.992 464.569 327.219 cv
465.729 329.84 li
465.729 329.84 466.839 303.945 484.397 282.398 cv
cp
f
490.933 290.586 mo
490.933 290.586 470.058 310.957 473.917 339.188 cv
475.354 342 li
475.354 342 474.323 314.074 490.933 290.586 cv
cp
f
497.597 299.016 mo
497.597 299.016 478.534 321.086 484.772 348.875 cv
486.437 351.555 li
486.437 351.555 483.042 323.824 497.597 299.016 cv
cp
f
504.175 305.688 mo
504.175 305.688 486.761 329.094 495.019 356.363 cv
496.886 358.906 li
496.886 358.906 491.472 331.5 504.175 305.688 cv
cp
f
513.261 311.207 mo
513.261 311.207 495.847 334.617 504.108 361.883 cv
505.972 364.43 li
505.972 364.43 500.55 337.016 513.261 311.207 cv
cp
f
523.163 314.367 mo
523.163 314.367 505.761 337.773 514.022 365.047 cv
515.886 367.586 li
515.886 367.586 510.464 340.18 523.163 314.367 cv
cp
f
533.886 311.77 mo
533.886 311.77 516.479 335.18 524.733 362.441 cv
526.597 364.984 li
526.597 364.984 521.19 337.578 533.886 311.77 cv
cp
f
544.562 311.539 mo
544.562 311.539 527.159 334.949 535.417 362.219 cv
537.272 364.762 li
537.272 364.762 531.858 337.352 544.562 311.539 cv
cp
f
556.479 312.758 mo
556.479 312.758 539.073 336.164 547.331 363.43 cv
549.198 365.98 li
549.198 365.98 543.776 338.563 556.479 312.758 cv
cp
f
grestore
542.347 206.461 mo
542.347 206.461 594.097 257.461 552.847 312.961 cv
552.847 312.961 584.347 266.461 542.347 206.461 cv
cp
f
659.347 406.711 mo
659.347 406.711 661.386 437.77 696.847 457.711 cv
721.269 471.438 756.659 476.91 781.597 447.211 cv
781.597 447.211 768.847 462.961 736.304 462 cv
710.964 461.254 669.847 441.961 659.347 406.711 cv
cp
f
gsave
660.847 407.086 mo
660.847 407.086 669.136 447.172 711.858 461.531 cv
754.585 475.891 764.241 454.773 789.249 437.188 cv
789.249 437.188 755.933 454.57 735.065 438.602 cv
714.202 422.629 705.8 410.766 699.554 400.516 cv
693.308 390.273 664.448 383.219 660.847 407.086 cv
cp
clp
676.854 396.555 mo
676.854 396.555 658.612 417.473 669.8 441.156 cv
669.8 441.156 665.55 417.891 676.854 396.555 cv
cp
f
688.128 396.602 mo
688.128 396.602 669.112 421.18 677.089 449.969 cv
678.987 452.656 li
678.987 452.656 674.019 423.754 688.128 396.602 cv
cp
f
693.858 406.242 mo
693.858 406.242 676.831 432.234 687.026 460.305 cv
689.124 462.844 li
689.124 462.844 681.925 434.406 693.858 406.242 cv
cp
f
702.085 414.988 mo
702.085 414.988 687.226 442.27 699.647 469.434 cv
701.94 471.789 li
701.94 471.789 692.472 444.027 702.085 414.988 cv
cp
f
710.519 422.336 mo
710.519 422.336 698.409 448.879 712.206 473.805 cv
714.577 475.898 li
714.577 475.898 703.526 450.25 710.519 422.336 cv
cp
f
719.921 430.48 mo
719.921 430.48 711.343 457.492 726.331 479.07 cv
728.687 480.707 li
728.687 480.707 716.151 458.02 719.921 430.48 cv
cp
f
729.769 434.078 mo
729.769 434.078 722.55 462.332 740.542 484.422 cv
743.237 486.074 li
743.237 486.074 727.819 462.773 729.769 434.078 cv
cp
f
739.847 437.793 mo
739.847 437.793 735.058 466.563 754.854 487.047 cv
757.675 488.465 li
757.675 488.465 740.335 466.555 739.847 437.793 cv
cp
f
748.933 440.066 mo
748.933 440.066 746.253 469.129 767.499 488.102 cv
770.417 489.309 li
770.417 489.309 751.526 468.719 748.933 440.066 cv
cp
f
759.573 440.055 mo
759.573 440.055 756.882 469.105 778.136 488.09 cv
781.05 489.285 li
781.05 489.285 762.155 468.707 759.573 440.055 cv
cp
f
769.667 437.594 mo
769.667 437.594 766.995 466.641 788.241 485.629 cv
791.159 486.824 li
791.159 486.824 772.261 466.246 769.667 437.594 cv
cp
f
777.472 429.801 mo
777.472 429.801 774.792 458.844 796.034 477.824 cv
798.952 479.023 li
798.952 479.023 780.065 458.441 777.472 429.801 cv
cp
f
786.472 424.047 mo
786.472 424.047 783.8 453.086 805.034 472.07 cv
807.948 473.277 li
807.948 473.277 789.058 452.695 786.472 424.047 cv
cp
f
797.276 418.879 mo
797.276 418.879 794.593 447.93 815.847 466.906 cv
818.761 468.109 li
818.761 468.109 799.866 447.523 797.276 418.879 cv
cp
f
grestore
528.097 309.211 mo
528.097 309.211 522.847 316.711 522.097 312.211 cv
521.347 307.711 528.847 304.711 528.097 309.211 cv
cp
f
741.097 241.711 mo
741.097 241.711 741.097 250.711 738.097 249.211 cv
735.097 247.711 740.347 236.461 741.097 241.711 cv
cp
f
787.597 421.711 mo
787.597 421.711 788.347 427.711 785.347 426.211 cv
782.347 424.711 786.097 416.461 787.597 421.711 cv
cp
f
361.843 344.82 mo
335.944 344.82 310.378 333.113 295.128 314.273 cv
281.495 297.422 276.823 276.473 281.62 253.668 cv
282.3 248.641 289.089 209.703 335.206 199.063 cv
341.776 197.547 348.413 196.781 354.94 196.781 cv
389.487 196.781 418.784 218.156 429.589 251.23 cv
436.28 271.742 433.409 294.801 421.878 312.918 cv
410.687 330.512 392.909 341.629 371.827 344.219 cv
368.569 344.617 365.206 344.82 361.843 344.82 cv
cp
f
287.347 255.211 mo
287.347 255.211 290.175 213.633 335.354 203.211 cv
374.354 194.211 413.354 215.461 425.354 252.211 cv
437.354 288.961 419.851 333.711 370.597 338.461 cv
327.722 342.594 275.347 311.461 287.347 255.211 cv
cp
1 1 1 rgb
f
311.347 222.961 mo
311.347 222.961 340.597 198.586 377.722 212.461 cv
414.847 226.336 421.222 257.836 422.347 264.961 cv
422.347 264.961 408.011 229.852 379.597 218.836 cv
357.347 210.211 337.972 210.211 311.347 222.961 cv
cp
.27451 .207843 .145098 rgb
f
292.972 266.461 mo
292.972 266.461 289.222 302.086 317.347 320.086 cv
345.472 338.086 391.597 339.961 414.097 303.211 cv
414.097 303.211 397.222 324.961 366.847 326.836 cv
336.472 328.711 318.097 316.711 307.972 304.711 cv
297.847 292.711 292.972 273.961 292.972 266.461 cv
cp
f
gsave
289.351 260.211 mo
289.351 260.211 295.854 312.211 332.354 324.711 cv
368.851 337.211 411.198 317.477 422.522 290.594 cv
422.522 290.594 357.354 302.211 344.354 277.211 cv
331.351 252.211 299.354 232.711 289.351 260.211 cv
cp
clp
306.964 250.012 mo
306.964 250.012 285.722 267.867 293.136 292.992 cv
293.136 292.992 292.519 269.344 306.964 250.012 cv
cp
f
318.097 251.789 mo
318.097 251.789 295.538 273.152 298.979 302.82 cv
300.437 305.77 li
300.437 305.77 299.979 276.441 318.097 251.789 cv
cp
f
322.28 262.195 mo
322.28 262.195 301.456 285.258 307.21 314.566 cv
308.897 317.391 li
308.897 317.391 306.151 288.188 322.28 262.195 cv
cp
f
329.073 272.105 mo
329.073 272.105 310.175 296.773 318.272 325.523 cv
320.183 328.199 li
320.183 328.199 315.089 299.32 329.073 272.105 cv
cp
f
336.261 280.668 mo
336.261 280.668 320.218 305.023 330.026 331.781 cv
332.03 334.207 li
332.03 334.207 325.058 307.164 336.261 280.668 cv
cp
f
344.308 290.148 mo
344.308 290.148 331.679 315.52 343.159 339.152 cv
345.229 341.133 li
345.229 341.133 336.343 316.785 344.308 290.148 cv
cp
f
353.487 295.219 mo
353.487 295.219 342.003 322.031 356.378 346.625 cv
358.776 348.668 li
358.776 348.668 347.136 323.277 353.487 295.219 cv
cp
f
362.874 300.449 mo
362.874 300.449 353.698 328.137 370.116 351.43 cv
372.683 353.258 li
372.683 353.258 358.925 328.945 362.874 300.449 cv
cp
f
371.495 304.102 mo
371.495 304.102 364.378 332.387 382.456 354.406 cv
385.151 356.047 li
385.151 356.047 369.647 332.805 371.495 304.102 cv
cp
f
381.999 305.719 mo
381.999 305.719 374.886 334.008 392.956 356.027 cv
395.651 357.664 li
395.651 357.664 380.147 334.422 381.999 305.719 cv
cp
f
392.362 304.836 mo
392.362 304.836 385.253 333.125 403.327 355.152 cv
406.022 356.789 li
406.022 356.789 390.519 333.547 392.362 304.836 cv
cp
f
401.265 298.336 mo
401.265 298.336 394.151 326.625 412.229 348.648 cv
414.925 350.281 li
414.925 350.281 399.417 327.039 401.265 298.336 cv
cp
f
411.042 294.031 mo
411.042 294.031 403.933 322.32 422.007 344.344 cv
424.702 345.984 li
424.702 345.984 409.198 322.738 411.042 294.031 cv
cp
f
422.522 290.594 mo
422.522 290.594 415.409 318.879 433.479 340.906 cv
436.175 342.543 li
436.175 342.543 420.671 319.297 422.522 290.594 cv
cp
f
grestore
419.347 280.711 mo
419.347 280.711 421.597 286.711 417.847 285.961 cv
414.097 285.211 417.847 275.461 419.347 280.711 cv
cp
f
293.347 115.711 mo
293.347 115.711 284.347 81.9609 247.597 66.9609 cv
210.847 51.9609 186.847 69.2109 219.097 73.7109 cv
251.347 78.2109 270.847 30.9609 234.097 18.9609 cv
197.347 6.96094 174.097 18.9609 165.847 42.9609 cv
157.597 66.9609 192.847 67.7109 187.597 39.9609 cv
182.347 12.2109 131.347 24.9609 119.347 56.4609 cv
107.347 87.9609 132.097 93.9609 138.097 87.9609 cv
138.097 83.4609 li
138.097 83.4609 126.097 89.4609 123.097 75.2109 cv
120.097 60.9609 124.597 47.4609 140.347 36.2109 cv
156.097 24.9609 173.347 26.4609 182.347 36.2109 cv
189.19 43.625 182.347 57.2109 174.097 56.4609 cv
165.847 55.7109 168.097 17.4609 208.597 18.9609 cv
246.812 20.375 254.347 38.4609 249.847 51.2109 cv
245.347 63.9609 224.347 75.9609 216.097 69.9609 cv
207.847 63.9609 231.847 62.4609 255.097 77.4609 cv
278.347 92.4609 293.347 115.711 293.347 115.711 cv
cp
f
700.597 351.211 mo
700.597 351.211 728.347 341.461 759.847 358.711 cv
791.347 375.961 792.847 410.461 792.847 410.461 cv
792.847 410.461 789.097 377.461 751.597 360.211 cv
723.503 347.285 700.597 351.211 700.597 351.211 cv
cp
f
637.347 402.707 mo
637.347 402.707 633.343 407.711 631.347 404.711 cv
629.347 401.711 636.343 397.711 637.347 402.707 cv
cp
f
801.347 288.711 mo
801.347 288.711 806.347 294.707 800.347 295.711 cv
794.347 296.711 797.354 284.711 801.347 288.711 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_red_grapes_bw.eps)
%%CreationDate: 3/12/2016 1:05 AM
%AI9_DataStream
%Gb",KBj2OedcgWlcSPU;=\'Zcl$WSq?t2l$+:oY=4#(mt*5'5u1H?Q6hgT@']%[V$4<``rI*[5e+gP9LQ"jC"['5Xp[B#!ZoeKhM
%HTe(WVOu4@gIW6Jkp?hVG5qJM@GsZ>3,&#-9_u=jSWfA=dhbd-[.,dOg2,T<D_neK]+S(I7u^\9BK!>8j]\FiT%O%1X!S<sQgdX#
%nKB<ICO[YYj]qd'^.I_FkLi`naOV8p>V"bY2/4tol/T6Ip^.5@^IA$+2.(5;Jg:%S.-sslpEojuT$oo!JlW6p%^YH1U>t'OHnjpn
%NW-9Zkr?1(2-Z&FX&Q-K=i.>@4bkCJ$0jPM!="0ri'3.h@j2R#F7""+=-JGd_4Rj+":h],336U_PJ2'F,+\_.M?!([!0^U<Io^^i
%s&$8^^[Q.d@4!OskNF=HEu<]Kd1V`S59&Sa]k7C_=enJ1%Sq^L]prjA[(V3kBh:C[qn<U@e+#*E*VP7;_:=L?C&1(%[d,:u$b"r:
%PE)ESgm4W[I7JYt;*o5#$N=4)]EiP3THQ3UeS(M<rWaCC_eesPieQQ;3G?(-Q<Ibt;L:Ura[*$?P[tdCO=fX7QfE=brt[amF,eA9
%"f,BR[rG'l'4*ZAlZQi(pG5(_1rLYpoq6V7HUg_O9d?Y%(=9Lj\OfLOr.G8.3\FgZck='&79et:Z&P%/j'Xj2SAZ`93!/A-Cm6PF
%eTJDrpO'GI.RYQJ)@;K)Ma0j[Z2aFWs+qHmr2j!rPrR0NoBh0D,hU%f':a3C>1fuXE%@#E(=GJA<T&[Rm8Ej#rI]QO+kh&>#;r$d
%Y/(@>.LuC>+0YK!n,0->L*(UY[<?u%>-.\ua'u&F]*K$>\^hKLG>KkJQP-$Ps-_e@TQS"k,9)iW;LN9#O=*7C(U\:_=U>=l[tK73
%%!C:FjT1C[iPkO6%nsS`)PXuAg8.iC1=Qo1^JR.q1;o/qo."``X-LRkM@SXD&9o='raoUd#s7mN!.LHn_7+LIEp9llX'_._rPn<t
%HT9D)hl9?XXOd`POm&G,^IA'--%aFkY4Z"=k>1%N]jFIQ4Le8-;ACI(Jf#lPI'$::)^99BQ)eCNp<:O&WiR9V/m&93g7[#fl:k*X
%eRKO0[cCi5ZWs9.`*28-2:kCG&)l.dR>u;1mCK).[7/!ek9)eFP&YVeW6EaKrpf(*/f6]&</,2IhhcLNfDC4!f:_<jmn>0kC+Ip2
%3TR)t`8][>EYX%.KtV8d0&!E-7.1J)9Jma!mQUHI;Rt-[WmnpWXR-%eiK*b@Xe3+1nDg7OY`r6OJK[<eG'(::Q.r%ZcWdt[Eu"*D
%;ubq/9I^<t.tI-`pcniF8-+O]8qki]![+5pA-6lfPV0.C$IHkSirZ,JAjjjG)@fu6fUY]@"TUW1Nsj+[hKc,+^WN,5_ndi<'VN<<
%.r$T+1n!!22_Mm9WTJil\DXQF@Nuk?/-&[c-`p8sJ",e\J^^EDkR4CeDFa/8!G;grWnOTqk$,A8-(s7ga/7:JRQVXlMd/'Z2M*#f
%+B9-sh:7![^`e%6#HeXqgLV,u+?M%[S(lMq%pJRDM'&5t',n,5&'"NL2?g5@@6fG;h8m!=%>@N5\rM]k:29/c51jH(:I1o7#(MD'
%X%k_-PcD3L_bN1MZ1A>`O%jXB("hV,Xb&+-i<r`i-T/.`GNC.QKXiTlBu%qu\]JsTXLTi_CuiBt0>FZTRWE+Z$Cj*[P+=pP:*HJi
%pZ:POgt\6cqf6abDXP[K1onV)G]RUb9Y*H$c&t;h"O,BjF5Z;YK:AN]Eg80)rgFp7.G<%l<Zr.3PUNS0aXr<m+0Pi5DX@krs,1pp
%2GH'J<qC43h/&Bteb&7U9t&lZ[Oi.g?+".H)70V7_Cs?iU^FP^ME+WQUHPCSK8MNcpj;A?IRl:RQ!@WbRg$.onoS$mYH-FVQ4C%m
%Z`FcY'`B@_ZV8";CY".9@J_tZRR[+LONu6i2i>.nE0APH;-HKaZ$@#jE5?.pbIPW9XkIUQW[bX2qoRLKe'nERq7Bt6"sX-cI57W/
%a!tE^;8CSTLFR*d-mh&WZ"g4S`r?agpts_@N2'RUg=fU97BHF$AXj$,h%t7P<#RnUG9iht+j=eoIiY6qK/Ku\at[TC+P/$LXsu_1
%jT'.t,_:ONHEBMCf>_@=@&h"MNXl<t]Ar`G3'1Np-Q@fpU,X/I=Q>^]ZZB5T0"'nPjpW][&WE(VS8t,h-[:l3q^DA#c4)oB)OCJ6
%E[n13FeLOZqsdll1!fF$X*BV%3l]*nc4jZRnA(Hpc]``oK4`n156%$D)r%c(3Sasms!\pXc?^O1TnK8cAh?oC<4K!ca;%<a'sa)F
%a6RB`8kPBN$rc1mWpIbHbE(OmDq5j"/$*$S?j'2s)_r4>'/.@;6$W@*.p.uBb?T9dbYChoB.0:O9FYd=c9`/Fb)T.'K26J&m/1>j
%FBsi,a<-tiMt%./jHNu0<t]QfY<>korFsZN._n`9igK?="h1>6`'q%J(ArF+he.Sd(%u-`fN\HE;:p8:A^s>^+_(Q5=Q*Y,q^P[L
%#3D&A*9>Wo@(i1k$bhkBiU,juomSZ.D3HD+lhD)'4tq#=X&#S7WT7GHKqlPbn8tBPIhFnol5b?a#FPKinJGfWM&,FkYA+e=37FX;
%a&$15GKDgnJ811-Qu)SqEY!40$\'SPfYhjE6M+l9\6]3'=\hgB.]2GE9BEH_##]`*f#2FZ59>Ld/sWq?oG\Sp\aj+<T*jKV&%-Ee
%7;h.Wir[>'!2lJfE//e"%1EEh];B%^f>\&JJrVE@C)%J<Vf(OHUCiSL2]S8kThoKhDH%UMW9^sdWn+1"+Q`4^8p`g(:'XV#cJnu,
%>cIugKmP-A>WIiUW%*<4FWD8p$DqKacfF/j$&IQpf%GPSSjfecW[JJ6b3rNM//2]c!?WFK;jf&j$tQ*2m)ZPe0BSZNP8'X[ktDeV
%MHEfEMDE'[mO8IRM:\B+P`)7;bd==?.F1F[Y[jUV(M,MWI$SeM<.LD3>SJJe2:"^ZkG%l)g1Hq711@oBO9Cg$bXGAAlk?R;B.4Wc
%"dj#/W9:]>4dPb/jJ"'MfYhk0/ENV)!&H33J![&ie!O(/[$N"Vf/WMF\r5`#AU)ID@ets\9[?3+el@ZM"Z'/n0XZ+rTaEaAG9#h8
%7f>3.[=2)LZ-uV8k;O0r*iiZhXiejmY)OXWS@Mmo8\(_&YB.64QYWoTf6/(Z1,mha=:>`Q1FCZ7f%OB/rJ.6'gfU%;WA_69k#1S2
%.FmE*6K_i<hjuZh.%oL"c]tEn!-$4QUU-(EB-RQobh6[T7NF>WT6Z+QW:Y:14t>`ET&9)*_!tB0ck<cRhBaEH==NnueosaJ?R)N!
%DQRV,0A\HB:hHqVMls?K;c(.r:ZraPQI'LDD_2"i[fLurs),U_M&FJ%/l`9FYuJF8);>WVX9Z::7VVI'IE)NF]]dNQ'n'fIZ0]YQ
%^o"-qb:kI,5?RGedS-Ec_)33BfQC6O._JT(BRFQXpsm1U0;e9#aTe3=o-6^#RWP^Yf.-Gs'26lm[_fBE;oAPYT88JIdsR[;?sE'N
%<(_^HUXZlT">,m%R4;pD&D"Ho+gL>fehU'QiO3!a%N*F[_4V@*]Y4j#%N+i[L>fR.b75AjBi-BZV'TcRio5b8b^WAZ:?+XYLpT3#
%a[#HeIe30gks,3]it?e3oA<-5jn\`@/We3&J*6"0"69`Z!#sXHU.guIq9I<6Ih,L7HKI;Q%t2[JHu"oel(+IB:.&9%Ic``1^RCej
%cAtL(V.-^3nqtN<n;/ng'-E,,)3i=P^P2hg/mVekTYkLcX.UpBec!>:Hp(K84&LB#TVM5a6R?Df]2f)R];i_J4^X/mY>qfTg5R<O
%:o^#9fj.H.9q",18''g)Z@>N]bfK[iXPPif)aR<V!-9XB-rgYObM's1WE'L4)i^Mp;/>6m\"6196YH#;ffX@7&"U[i;D<den[#J>
%9=h$?)Nsu)WR>\?p)mnd[`G'#U,tjGS=g;j;N(h"qMmR0P:;X+Z&ai$f%cJuq`jt0_l&[aB-_$;X9X$t?B*W1WX!<\Q6S!]K%iJd
%F9)Q\"Mp*0DX%+1U3BA6G3A<T=K<YI(k".M]Z^I2o>&P!+n-\m/0&mH;&G2*bQBNi^rnk01(V%A"#'8]b>\UNaogW9dra#&%j6QW
%o=GcY+rm2RNZcSOTo"n@8b:$U1h;=>kO-aCMbX-("Tg$afRsS?P?r&lV-q<UfYkNNI=KH3(Lo5R>=Z6PXYK*T<06A_a)g?%=,ulE
%9[g0bkEVD]6TM.sPGurfZW)Ki7.:+>V];W)]R9oDSQB0e='lj^RJpj!0:cA0$FRY:qWXPbPY;G7VrkJZa):)<^0CEn<$Cl!m#s_@
%[:6BYZu?g"5s^WEVT,-,Gg*Len<tnNRUd7Qe(#Hmr&o4p59sG00DY\KKZduV)47e%RFT?`k8r@$H"a7i]eGsC<V4r]eX7<e.LPS3
%nH#=fRK=%MPmU,TJYM&SJ2(&S\I-h!d__#S1MHeuEJut3+[(h9Pr"J29S'*%O(1kZ!BcEQ9R[u!Rt3PR$4QMc`e8-]GoU<l`V;QU
%0oog<8K?d*j.Wl$8f<o#m[k45\U5o/IU+J'jS\Rm6h(`u5Gl'D-`p8sIp7/q_t1fqVkp]IV>lS4irVuP6qk!o3J:,?;1^:SH!EUK
%8VO`0(V+.>D$3)W5rGiT:j;RS(Mrn/c7KtG&.4Q$WU\V?J=1Pb5?!8jB!=>BN"kI&Op\D9Zt_';7;]ol;mB3#W,N)d)]'dk\j>r!
%61_ZR^Bl;'"8+l\2X#>gISSXWMfotW4e4mTRB(e2A6)L;UGFP6o(tCiV?3SDGrZP0m\L!%UaLM'Z]sgQ"O'!].i*5oLnfXE&37Mm
%WrIPsZIBe)QHbI(<[Quh5p>i0$;V>Bff`(qp6rZg]t#dT=h^CEQ-I"QnSl\,S""bGF)Psac-<r4hs8N9=HTrXc-=_TVTYT1W(8Ur
%rgX$hF*DNicHY1U\N;`okN;3fii50E%\4LLPO?lPZfKO`!Aera-I&AKX47QDNLYl0T65WY_31DLEX];GYf,u\a=tHggbn^%/q\"I
%=(3qPA>\Zbbj/d4e<LjqOj/pU\sia=isA2A_3!\YH.O^l\bu+iJt$NJ>e\_a\ZQVqCpneY<MJ!;hmhlFnaYS;O_9R@9FDeNOmo62
%Me4TQWCg<7F(UrGk>4UcmCO/9;mTK1)N^OIq)0JCNUf/i;^2@n?^@4(pAaGNklu95]["5P841@)lMb0rn0pTVG*:0#g!UnS-Q"=!
%U>*(jZ^&/q-,'l@[/5c$6)TgGe8.($\U:']Bq=&pFjd(""5QpA9^[D,8mCN_.dT0uD'fj7`s$;!;]&]3OB#,3IjpsV`;5MII*.[E
%'^Vk@"0VRIKog-)(KtBfc&L-L)<LD8WNkZ!h%'8tFR#Z*6BY_H0SOg;)&mr1\j`cFkO3`!)N4f,oZ>l:RN/)9DA193U>ZJ?&Ni2+
%7a]G6n4.k1I;\DrZ`iQ.DGnoB;X:=q.$ZQ[.Z'gk$*R?"m+RhC(iHAkdfG(]dB:@ZD1+HQcmO/^DG(u6JAE/5oUVNUf5dj5PUkST
%G"n``<'T9//'#2@r7s\bdZpR7%$Rh6<><V]3DP_mRHqfuGDH3N\oAW5aRdFV-e7GV4gK$Qp>`Wb@O`g9?GgEeCA?$6'5t3^PBF=j
%Jfe1/B3ps=>`ua_KAdNe1e`T3f+XVJ:VXZ]QJp3=T.4kXG+8c^RWpQl$XYgtA3EYlPb;5Q#D78<ZGjau(\sF54o>+0qMg\oVS5O>
%mu)%A"e<J5^0J7Li*/m&Z&I3pY*Le;m[rJ_'/PtZ2hI_]nPTd*mO5tJIp:U]W=dGU_1Rp@\>^s=5>S+94W6+NQ#':,+?;BZkBc?Y
%B^L4&BOjbq0ucF)D22?+$^KP=MWgju:cO.PJD[>\+$4e0=dimUebnr:MNM$cZD<u:'!k>F]5o_H2jrp:0?hjS9b&<_#Hn9&2KI>[
%;<9*X$)IBb$[mtGVG2cpa_)a2cgI<`b:W>4a1nl2Pk(+iQffF85NT\+MWO:uZ2@<H)"A36L")]sSaTMciF>F.An0<clWWre7\MRq
%X.h`t>aDD[?iKu`Fo<D3j7@2g7dC1M<B#J*?<(cj<U!j]/W6SXKd0sBd[?,G95]@NpGERZm:meja_>bl.T`Vs\4]l\"7pK_7%]bD
%T:N?0q<QEm;jf5.CR4N3;`/=A_;L@_qFC@c+ZcfKaU#[RX`YWECQ1YWTO57)5YWdCl2Apms3MB3iNM^sp/f+'*$d^rd1V-tiO<=p
%%K<he_]ql$JBAX;6\PXFF!JXLerFd1<aW)Zje,coJr7Aecj60R(^^hm<Z[6>qn`S*Z!FCGg83A;&9NAK7g+B)rC_sa!@#/sntpFg
%)ZJoJ%U7Eh6LQ7WE.#MPX=RYXPnT'oS&*BE:d$?DAt;V-"sitUkO0PN`jP;sniaW<anlCuF("6[M2U8T;Pd][`:'h(L/aCZHquQs
%"T74^[Z:B'qM+FR+0MI+0)hQ6Y$p)[LS<I_:Oh#_T6QtHKj]$pY]O`X""I2(TU91<B"5!)b*@T[.q$_a/eAfMnhl%bnLTl3EAcMB
%i"'2DI7LG^n^B3$ctkT'@-l&LU#l7Q&=o@Vr;"B1*r[f5/LR'11nD/fK6HT^0?i55+0'!.&*V&tT9Y=<)2J'<EO2@>osPaVU,03)
%]+S(IR9U-@ADqo12BXa55<Fg3BS]g4I=AodhLs1J`VFE]F%<RlAf*.j%lEVhc5.R&S*)`@7WW(<<=bYjLS7SNE&GncIni/,^oACB
%q`qo:/UncLXgpnOO^2$8!l0^l'q[l6SpLrqJS%Z/en]k,!RQ)c]-N8@8'4*SC#N;+'dX7r.rg<d:61qW7McEt2sOiQqb@@3,FnRQ
%ZW4&"JGB#D,eDjVTb3#?'_kLq;Z@3?3>nDDq/<HL[TL(Cr+cAtHO;$DZWtZ!NYpARgI["Wi?[!7K3W[%gd?/$Bb`i[6u;1tkpLo8
%)[b0CXDqRbKRi1M%QM)/3ts6BB>\F,dDOr'#LCu.Uupq<;"2sU&uV#5Se<,0J@Z/.h$Vh(XTbTAISai$2G0=R%nUFh]cTt-<C,W-
%c\:RCouSm<5hf#O3\!EG<rdU5%Mn+)nmWXS7*n>Yk$l%"o1oTWU"$4jNe:rGg_O=uE1k]%Y]UeJ!V<9r:LqX6Q9dBA,`Wd/1MA(D
%^0_ChR\>V=k6fWX%Kj_9>k>Ora-u[)X1M`A>`p(7C77CjTjC?K7S>T"CZS"gCMGMbC:@r7j'8o*1eRcU\qa#Iq2'F#%ZiM?Q$,11
%?B9mF]Asm4Md!8\848LtF:84!P#tF`=2F@/[9JL27]fr<gp[D'caAAC"bpbb=LhWa5u$>IB0QZj=!7jV`7SD8OV3(_fP]5J#t$ms
%Ctl=8"Z)ji\j@l&@f9Jt&QI(6YXAYF=XjFF6JN%koWf'^`,?T\iSEADLp(3"hiS+\KV=g-$]_g`*SX-'hm`t*Vnq8m`(m#Ub$C7S
%V:Nt+e&@un/@;%M?FFpA6/nhD&#mL5>I[n??0'/K6+pQAG#2^/]9Xk"9UIK"lEFC_!WRnn?G[MA=54(cN_^Q](ooS]^',Xr>WKC3
%5B*(&"LiOf2!Pq'D>'Z@-h^!3g+"D!F*"X^m=eMc'K!%M)BRc'!X5-i'&<;p'pD9u14`F;'1LNP]kk;cQC*%),64\3lgW;_d?`u5
%?FpA5i7r@P)C/LjVd6S3M*m(_>gJm_%Q?JS+5@"\+h3`22X)2=eE&i"7Ak/j$-FoA/V&&[QHtgna>U"bIo@KV%>tZ6H^To.n_[-i
%&]Ug3U)h]=6Pq+q[r^)h>k94MljZ@#F@+Ncr14S':1P1JOMutV$RZrscu//m)JqbcN('(!,cE)6N_Y=f,5QBl1CPPNdVFtN[e@CX
%OT\O4K"OTdGPA-?bCf;s%(]Khh62*0Wa>a)?7ubZ[fNkfBEku``fM>Mc<Ro]fM+uSk"qFUcT#/KTnpYY\!OL\]kXg<LsoU6"'99#
%9M(JK,g/T5RA,O)6nub6l(Q(5'UmcCBHH%\1oW./dC"0L/^p9=19R[gqedW[.&!Tc<=;-=%oh0YeNOU]Wki&)7d9_@`Df41<^d/c
%*e9+(cM^m*N\Tt"N\^#e1=#YN"f0*`K,prMUXJ$c):V&/#\ik%14LH\Q7f5Kc8g0DnZM\6]oft-M/20>qYet#Y@hJ6`UW<r*0$Kr
%Hk7ioUi.VTUYi^@D(MXD=aJN2[:b8A^6f4aYS2`/`QprL!D5;BERt)"bT.Q$Ir$81YSge959s)Z1096gZ-HqRN`9mA/%*7PPrB&l
%>2q@uGi>B\4=JUb>J&;5_JllU*H)-6T6f&2q4@bfKfeCsc%.9s:+\/@6Z8eSEF)\KPKbfUA3_Lr7=rC\:AIA]5%*3cC+EF8GOA5`
%:<iK$#b0LcZ=^DtC!H>:E`#.80kehVA2Um@U%LFU=2%^PdD>FI:1YI=@BS-2#.lqUHh9TKL^EOah9[XR#0e4B*Ui]G4k\j0o]q15
%a+2]-O'4\R)qLcE#QrSOcrO(r>osR8Bs:_?*URTjTQ$Q1\S<u18dsoA<$:?SE@J3g2L1HZS-9_%J&-L`,X*lQS/iZ!?:rui[m1*!
%e/Pf)WSHm.GBEsc.O^#-:;9Pt[<EeRHNTNQoo.3YY[ah];/0*OK4kAaEi2AKQ/,O@!kWttBjlC&cuQC,BMX3pSKDB2ZT(G',<'EB
%d'F#MIT:1]065_BFsH<qQoT[1_^`j?\q7d1*=%FGP*A6IS\)a(8nF,WPT&<&!I\CW>,>9,o1?jf.pK52=;torG3SJpMa_Q_"HL=&
%IZ7I,ge_"%6(<d;UH&UVOlc[#$UfG`TL%/^]2bo4GA_NV-c<OeH%:iHh:fW,CKrg1<j'e2>.Hu_prX>_GHC^#oiiir)oZ!'+S1as
%XIr7#%bY\qGX8B'R74C>/ks^V&MiF$o]ph&,`bdtYrHLk"rR2\jP\?<IFQBTI?ceX/`GbJRfaubD8BYmI-'NV3>hFj[B9^''09j9
%h$h)u9&i,@m44h1_grL2N,6OpUuK,RY#[.[jHXlaYW_#*>@m'`OPC?ikW^\C(]@f4_LTAn!p]/n<IGVT_,;,^Z4N%Bp(n>!_NZMm
%.YeD3Y\1o>KDdt$*U!+3?6Aq1@.qlB:J1>A#CAoMKZf2;I]h?rM=Ar"VC.8aG7Ra#<C>e0k4bM/DLquCP#At5Uq5Ph@>L[?A:.8a
%c'Mji!N-GS+KS)$loCAffo?3hX&?>ZJ:?Q\<3A)Wql@l=?*USN;nhhGdmg<W!)iVDmMbht5`@ha-[]$Lf3CprcG+6!Wpf3W:Qu0S
%XV(k2?4XKgj[;V_U'T+[F=(bTK.p'1_g;&)*=%&lq@<o1%u*R7n,J>tda+hMQA&(=WT/Y&n#NVP(FS.C#-BF)b[\SZ'(ECeC9UW\
%&Lfi%*U!t3C>eX-/`.,JhDPJibgUh#?m(Hf*8hO%?F;:"eQf(98C-t&YbPC41bdW,-R.*K?Q'bsQ[N;gOVW]PbbPV5D(dY^#BMuM
%#EVZ4`-]OVdr?6f#ULk#>dXP5:LV@CFptaK442WQO`"G,cr[nE0[/"^]]mLb+,%)loL9`4VcR9A,_1ge@)4+A*_l\GiPh!miifDU
%RV:i$OJ?mI`*U"0?D?o0\#;.skRAhY:&H_GW*OpKb%/E-qIBXu(^GfqDXqul"95I1'D4,.>,rtOPb]u@/qXDB`&iLG.XsreMb-t_
%0QB';'l]UTeSq1/O=8Lj81mcbnTR2PXT1$]KZtn@c$''n(VEho:^fB'N+Wpt_%qWfQDbOn"dPO5G4cb,GU7:5]OEFWDj9P)gt<1C
%33<Y\r'TEFgANS4GZP7O;BGWnVU]RX%?"7=9[_;5N1iB(:Me=j5#=e,'WfV=C)(.8^M8bo(gk3V4$#T+9C*M6g;GPsjBOOR-/JoY
%Z7]\g^[n^-%!ntXZQqatW)[Vq3O"8s@d9\21WWBn:LP*?lMFde,FLZ@"^pgtYnX`3"6&W(IsTRY7O"*W72n_2LsdkETdlZ2@S.n!
%.*^KQmRYgL'U_q7;7joWp2`HN`o*VZc5jc$L2-%1".jLY*(#Y\.mS(#T/&mjT$r6<%s#'eKmV?48/XkV@sEIDBId)f#l;(WSYU5J
%nUc'bfq=b.Xm,.7%-G,Ro'_&l4OV_B6hEML)(g!r<YDrsTU!c$a\"9V[_l^sG-9,IB;L]1^aY%W=H%0Rl:fTreWOfWao`<fgh\:q
%J+Oulb\#([8\0O=0Y9NqP5:7hN:&?RXXI7gji\*+Xh-$n)l&C1%+qJ&mo]R,5FRPBC<9A[1GG`4C/aDBTVFV'ET-sdEj[,2q6lOt
%4+-LN=WacXW<B[RA"ni_MOXFZqSnYiFSZ2<j5!3L1Mns(1O@/Z^s^JF0NEic7jB%TRrl)gk,Lf57N6N6)IHPc#chmFWWSmDbCN0@
%E=bU5)5Dtn#'0&YChRqLEYsmM#EZiLleNsdTgqNueOC4!g1W<TF=jBITl[m@#Z>]-S_$A?,I;11_fj';M-rED.V-(#6+L7tCFIXL
%l:e+"+fJ`f1;9pd,uV:R1`qqm=d0e2PVX#a`K$99LEd5oRX3l70=Q@[\H"uQ38upbqOjH*dCl2tG3puF[2tD7gBq-1$q&S"BIM<?
%+Wa*E,EAsOO$B#tooUu/O%;Z.2["c$_&.G`7aHYj&5g0m%RlLB.GLn0-a5p4r.rR>40srSeh.Sj'Qe+;@^5j=F@hqgWKZ__4jVE(
%l!C#d9FKGC_ag>b2p\'ZhT3B;H"fH'>YT,oFt6Y[QdpF9ZhIK9+)dKdalYtRm>E"J_>;a;h.HuDoC`(.Nt8Z;mC\qE0b1i"h6J)8
%=u5b5F1J#.gtMOlI'U/j;K$G1?Q!W5c.9o6]nYnHZB`.OnRd8ddgAjY92D2A1We_<bFZ9<$QibC2j7NLG<bN(1>fjBXcKM5WCh$B
%RG'`:>qJ9^*ji6kleu"CHhm1L9Tpo?0/*0^p<`Jjm^kEM5,V/bPOEC]2;W9MbLYfup<2$51Kdl+X=U`bMn=Ze9LJTtIKT<q;uC[u
%VTW3*pZofj<GVKSrMXpJjP-G'?Jkdf[JBaj)%Qk.DJjs;r*"`f*rX1H(&%'l=2"&5;^\UVWk=/^\O%74n\6_0kBHLjS&ObFl[31u
%[9u1%:;:-2[_0$Hphb19BKpe9mcB)%NI3p6NIR4ZGDc9!4LM>ojkN>iiOAL.f9_25H/\SZe].1CG&%'<d16@fBkubjPmPo!)t1LW
%V5j@3Q0"nK)f'?Qo@&lgXu2,LWfc2fQ`o$6E6*FhAb-pMc@$\BB;S^305[oS@$C89Vi.T+6+ZD(<>^H$q[6W_H^bPkG#iu0$YEuD
%4uj.F\_FNqbF@r-T@T![#@D0"B@R.cl'_/(!H-(.kKJ3M78uEC?S=F?JjA3.p,2flK7hBODY$a!hX\\k:?17C?YL5>!n1g!p\-68
%a7?S'VYFruD!)Q-hd5"3`hOCnN'3ilpY,2EB0.V5k5"+;1!nV&c&KU7f3`5N_\L(6LM9sf"23,9_^0\eQColp4iUfZ7;_b3FQT+?
%SI(b2/a&o#4eFd[Hsb/5f3\F.alOR.9KO&/htT\Ln)'uP\'mj8i^rCTerMKMQS;.fqJ^c+#lWs$544s,bO<m1qp]%4oDS$']Cao^
%gF-)<0!j<O-T^2Tff.MG0%?U%]osP'=/j+9-a0hDV8=b&Nl3f]!0TUJSp[mBr*A^qKCmCXEa'K\Xo#*HQ`YEaE*^PE@7"kOqo1cZ
%e-U*@iAMG^g\FrR\2:p:50moqcW_aD_</5OC^+S6ai\Y8k'udTY>4/u2cjl$PL&j$At/:Cd)8fSEdp#jr_b,Tfj([uI*4,X?R8Y)
%k35BGl/C5g?:cM6SG'30A/??<QaX)fj6N8trF@g\=5\]A2%hep3s?nZ/`<eS,67/Jde;eQ:=J%?^HG?&+-!VpI5lOMIb-=LrS=$p
%Pmb@a[eSIjX)44NFa?kd#%@,Ic_U;">k_GUFcH(KrSSHBH$0V@fX238aes9G>rjHRA2EpLA,4gG2_;-JJHg)TMqOY[mA?H)_fmAQ
%P5:)\.l;$Rm9BN\qKo8>8XHLHC8o[_pCC\k=3KP&opqB%CEr^iebt^n/m^\qcb;M643RM&6?FhkMN;+(Yhn(KMo;01mpAVB%Ptco
%Eb]3q/t]jJH2fI;@9oG#hCdlYSc'V+N__m)^$k(59p0CV?GL9L%^hYWB)6hY?HR0RlAIAos7,kU/rg^o/MYYTCDZB/`MYrG,0eU0
%.h_J`bIrQ4"t)PS]Pkt4Hd*bUn,*8LXgcKG;CC@.DMqm#e@2R)(Y_OFo'II=KDe;SrF>^eFj`I]U0jlUau!e2Cc1eLO*Jk-N4S^k
%oD.?geNGNk0'X6[hknUfpE&`FBlE=Lg\Y4Mf/)gUY5VB.0%QZ\.uW0._mX4*(GJS5Q(%68Bp=P1oHjIb3S?@Ji3,rPF#h,r[\\8V
%eE1Ms[9#0)`qd[O%X-O$cM5]o9G9$4NP/Xg"7\3-@HSJ3iUWUp?YiOT>g<q`.0MV!.tMC?;MH'UjW;)p35r<8)D.D4`otF*>]f_A
%oZqKh'0/e^3IS8c*=.bi&N6UQ/W^QI^"diG,2n2O)G[Wl[=(RIS\*EbJ,d>sFR=aOL-J"P7=u6rKW7e+4=.M3J'r#he@U,EZ.0qb
%B>_34(JTC56h7=Ls('hK7;s2kge&O<Gs?s4U6iUhU*#JiHh$cn_'KSS(jR#cNL^UWiO+ST6QA9)8F(kld'DLg`q.L;CkkqFBm7fo
%SKmPiJr[:@@r%]*`(U%@)6#eNZOnh[-kmn"Wq:q.!]9?/kT3DSKQTU,N@ZN\T/7hO667/,(jT=P?4rur<dF%VqU-Pc`ERkCd.6_A
%5'GY5:K"+Z?<+=9O+UC#",]QQJ,#umB[=m#m'hTXle-V\P,QqC1f%9TWt3%<a]rbT4a;=a?2Al][?JB)nVD<lbf6kk8%6)lEEcuL
%N8,HGeiGr8>&*2?Fm1p@KL^A^T-L2aiK%[`[ba/RoXD$X`ud+@?N!F85t[aSWT.aUE9lS#irY4pnlA3JS7\0oMtP\*q0[8V>IN,]
%le;<6:Z/1cX7,+N:=mq>MQn(@/bSbTAL;Z-o-,s#aFJTip*8>ulg1s%)"[1TQ3I&ekQ(MACotcj>L*<</bj.i[WZWf3J@i.!t&ji
%qr=k>0++9Y),S*3]I8"WdMrZ%FVTI;a1B/Urd#T10O?cmGTle>mD?7bS)1nRPD'sL.N3'a*"VVLV8r8gF66KVGmlJ[?)6@oI<q'*
%Zgae[VD:aQ[h#LuXpS&+1ZqanZhN;#7@6H_"-Ft>+B<jK^+8ZEV@MLt!jW%hAK$P/EgtCk."15;:I77t9p_Eo:ZNJ11m*.3]@>am
%Z[9@s!2$sX`:-8<r`X%'f'cu@rpkg:\oZ[*>C;g_a$SGFVG>9<bOG>h%m>F?r6X)BHd<Mrm-0]6n9&RW#n@doY9.RfID30#.m?1a
%,k*)d!%1VNUot;p_,33B=s9ZBUYkPuI;M*[(]=on]XD.FPVq6rQQ;[)PKn(6HqoEk\Cn&mSik*^<85Kc`e%RfR(cTBY'olrr;On3
%S"hR^*Zll8`DYG4(/f'WT=dOX>lJ^9h%XP*4jr-Op;N0&?Vcu3Rtj;)CMLt_?*iG]e1aTfRG"]3j6EbSIW5"NB%YJ%DgXnWE*Fjh
%gO$3A&*rHrBrdfUoTco1HQE"Ql"eH!GdSIhE,,>BQ;[(OmAt+]m_=.3IBp4hJ`o,s#ABr1"a+sXc(6TE]0]WEXj)d-eZH/:bE(5X
%Q;:,G%K5``mP.l#'C'hIRX*S2nkDqa0AYF<H,a,W:@8rnNK"AponZQk`GC9KZ5LV1#IADd--4*a/_5g6V.RiCnAFOhA*rC'O6s(n
%'qt`6ESoORAM2Zg"Jb*ZRC]KchECK:Z:c:">,bRFoE+LCdoW^\R6nl"OX.G]+5H\T>%[ZN"'/0t[<p5_*&-;agY#MP4o"_!&?'np
%[$E<lO*)<3Ue8'$9Z(qcId;F83WH\[$'p'dDsKpilXHg0Y!VCU)=0Ij!+bkOW.Q^H0%N4P3\;;6hk/!/(Fjh4&e-8`m%AgUWR&,U
%]4p[94'rLOcG<uC5hT(@g;u!`T2X=8rrtmMRE,#PR,<:q[JBafUWd&@oI4XlH_4!FH#e"p3^-h=a('=%pPYNTedIJI!Q,9,kuq]f
%e,C#f5`VfOaQh$6I`qI\+$Da.Sj.Jl+]AN.V9@`5Q-@FjV+!.b+t5e>`T=ro:kjILU\O?>Wm@a^W7BqjcLMXH(tWuA?hO$_f<'6-
%>HMl0IG!]*HVS?@H]/)ET-dW$IX?H<g\\@i.E2Wn0#_rD^))^nV8mKa^t)^]AMYE74R!)U7mD><VV1`Bqt,/1YBNdtfD1EDXtC[0
%f;38?]</i^gaMQke3<.?->bng@V<IB<a&9?A&%K+Yj%jX#>NPs#?P`u4EoZNDSP%WpUlDL`7[Z@hBt"VIiQ@$DuGK[NFF:f#oGkD
%7h=h]UsD4MJPfc7cI;-@(Rpi`^)\*4@O&WO\<eY9I&h+NmQ\(0^9,:Pp"<ZR+!K%g+RL3#noau*\>H/6f6:P<D5?K;ZWsSKF)e7c
%lF0VWDl)5BL"D`es(uW9A'fPOKi7qtj7+SN!ae0fC0-0d&8@[\'3\9*cd1#0@9LqN@\iS]WFPXs')t##F...JA$RK.1W;:I<73<T
%`-PcQaDRoi>\:IS/rs@%I&cY3r3biis":8uhm_I5mcCaDR9",a+I=2*hc`5P0"8K>j.&H(IAR%;mg8@td*g=,.]dIdFcNc<><\u:
%5BD$UTYC6lET9Er>:)ncSL0*dhZ/X`J$emOGhS/erlfZ@c6SGYX'=nn^L,#4GPJ@?kC0kN/WO^8^AX0<(H5V#IFte.O3;<?_:NT<
%h16<]aG[rZk/Gqa1UD+ah:Z%Z\F:7^o#$N1jm\\o9/LSTK0$XD8-[Ru^'I'O=o]N0F=gERD1FjL'e;">ghVB7[_%X7pM-c!i+jiA
%X>Q/hkgfu%HF\]a6gqA9`TLjO7af%;Mo!C%/Xp)"L[W!E1rI&Ab3V;r#f,lt*KJq;hgK<qj)/BDpBkQsJ:9t%nNIV&IRQc$]c?j(
%iA$JjA9#_t)]NEt/F@m^*U7>P]^b1:>FWt(&)p83XX!VAYSKU%em/%74F:l2V!QW5Dbt!.IAW]E[+)9^j0Z"Q\t@f^mc<ab9YHm"
%l@Z:\.JMmG$iBGP-rinT(N5]GYlDkXD2^n;WjKtBK4P^<lfk0k8hA^_rF0\_@t67NYI/nO:TGqhGb0<cV"II:aa\!VRB7:u+0tK1
%%1PIUWG2+E<gesiV9-"?o]=,[0a*%GqN<JC>7\j)&-np>SkQXig*f"Bf2mm"N=aZcXQ&0WP*R_elef;Or"u9L<;FMYKspe:DVp?q
%*W@3^c38HinGj)H[+')4^Qhq^r)&O[e9*iXG)*f*Bcc[&mlOmle%+)OmWcc*\h0!c095eKS_bbq*^'Snrjri38:@Rk"-DD%8_S-R
%Aq6S[EON3$pimZqpiU^U^LmeeO09VAeCeBIWF;67p9UmGEcrmLTQcH?E]X@I0E9[R^#OSe"ge-.q9b6+-&PHNlKR;tV%;e+]O!*O
%=Pjh$Y3_E:0<[AY0V.d#qu1U`jm=s1G`]Y.?$s3ZDHhTpBl4(>O"(/&nPXc"B0RkV?BTtjSe!kNB053\e1Y;MK#I,u2n9`4"P0r>
%@QS7F$f]m(bZa@kn;Nb`#GW8'FT2K&nWRd4lOo$PUjZD`:<!ch`e4Zj&e9GHc3uC)2@i\5.pK5:QVXV%dh%N,jP0FT;r29[5+7@(
%(Qj8tWWm2'\kmA&^&@NIF.[BcfY72]\;r8prN4='k1@hX=.As%F6Du;cq_dH*pmc\I!H)8WV^:11KJtc60Ng2"uTYeViJso=bfPn
%^#*QW]t^1bp!O!.Iupi-PHHYIi96q_HJYf6f^@h:p=%6^mG-T(Bn%`qc[J"0!B98bO6gI:08MBJ<M>eCi^q4uVXQU+*\BV4EpmWh
%)$*e/A_T?se2G]RY<Vrr)F['G$\eNC\rh>[PV00)Vn;C^^9>E1[*hhLO1W((HI:#eqpN3q%$&Bh4KVXc:+b1YpkESV8epecEGb@W
%G5pr=Wd8[<%-:a7OC*tSBuO327`W%-^omXi"rr(o!"nt&*W7H9m4<DVeif#>k?i.UhZr'iB,tDU`:UMpcrkLnRF4!#f40A2_H6U(
%k%WsLBe@*1o&3S0jfRn.G`PH&%<65u-f'N*\O"+)gAr6DSPL9?H@b7^QQHbP7`UtSg]q*sI+lZ4e\7f:]=.<Z+hQdd8ipD;?bHWr
%Zhg@ks)63;_b]0DYh@?O^3/r3;JW&9PBW>ZoYJsRafY!E=XJp;4,j+BCk76*A"`+B+*UaMGaE.1bZp-i5j@UWAa2,$I,b'KQ$`KE
%4Qo6'^,GZ0$,]W3i;(X;`VT8Vba6b5#;L6,#9rmaFAV)-1!DT2='LC/b[,SlXNM%!N&R@NA/AUL4kuO%O"7UT$9BBp:+.>ZkbHin
%(T0?<,UPUMreSS4MZQ>YAME5@:Z3,\UeRu<)4t'haaO'#P,^^\GEi'7pr,LqpmcVTYGaktP_5TXh:Of:EU9dAIsV4C"Bf.p!l52R
%nP[7)1"q+M0Z3'uSDRJ!n3ndAanF&IG7Kpei4e:fi2+ob:B&oS)!^L`qEt;McDQHsjV`BmYdP>bdnbEeSR1D^\B=hu(?OFrk14+B
%Lc]7d7X'=WiXFC$Wc>fAC8:;B3_L@/$6`o1aqW]p:N[F9l0O*]b56;7k]8I+p3^<#_g)XboH'=6pbVVk+5OBc`t3C`FJ>?\'!@kB
%-PkZj["OEuq\Ob]Z)Hn[M>\pc(oA4RIa=Rth9.(p'8u%'S(]lEAo)5Fd/.Z^Rfc`:NmB!!F,fYgqX]b+rI9841236Qs6/E3h/r/t
%fC9iuKg0C$)A4,k1rS.1L5%?3iWG:.Xngh8-VJTaq[#gJ23X?/)%#,?oV@Jm93/"E9,`QF@'btP9asp/HY*n&e$7.mHE]):Ea`G#
%`[7=H[ddj795;%t+2]eHjr'#(C,V6XBj&dkT3735_Z7E;F=[m5qI\0`//[3jbbSlb-FUHV(g%TLg.<*p:ZsuaYY<rO;'!nQ)P1hU
%ZNgJtY%[NlT&mQ9lmH)nL<1E@:R[U66(>#'4\qh21[2E\O)6qb=WU<"BNEQ'D/;WH*ANmu-S8-3B#@7;#QZm%dWl-'Y0j[s>Q^(a
%;4Ebk&<dStC>(iQ@(<GMSt!fZW>m!<<VK3iQ"@R`!aT3\2dpOCUc/"55DQ[dV)I<B=(M/!)plX@lUfngnT2m*"mHY"DUP`tSB:>c
%Rcu$%FUMm(KYMmRp>7cI-3G$`H2+oZ>Afl6j$X,G]=@7Bm3HO9NbWf1(`GoPJHdq2Q()oI5p.;rE"&>]G<EgY"%+eBJ/$b2?$/9F
%,0Z;ggLlAhIJCnR'"iT$GLQeVd")$Y#dUZCg-?IQ"kZ'OS'<P!7>0q.Ou47G!g;%qMjk,!7r0q;h%9@7AgT<I[PaQKf_,;'Rg/?^
%\Lp\j:BUWIolII=CLVJW4HJpJlA.*m'entT9SN`Sm(/K")41`=!b@;qFJL/'fIi7:EZ[.68^"MtqgarZfK;MW?rLl///P1[rPSY-
%3j;#W/efNqP0e#4#Km_(0"(cQ!QpeY>Xt\M^pf)$FF[XZ+B*0a%8Sa4OgH.LJnE1q.Q%@n)bHi-BEdr_%DdG-"r`:)BXRr2\q(7j
%UCj7e)ZZr_)*78LDV3`T(h+g"G/NjLeOc4$L*'VPEu;9p8^4^Rd0?=ugN8+=56p/_G]M^qQVm5(+<c<)Yn[InAVk"p0%>T7e28L-
%(Q/Nd\58E((@nln,#WfL5:7YM\[n58T=_u?+\H!mh(aa[6%HkMBc]3gS*qJ&C#!Orju^B*+Atr%l'j`Nl8q7Z[`rYW&2ZV/6rTjm
%TQJN"jWctiM*RO81uRYnc#d3CgB])(glbkCWsdP?JtTAV(U+dc_Xr+P?/S[T[uf$g\6Nj)2P>,)j>Pk.f0E:HV0KN3-;TB@Y&A?]
%CEfag+@L(2Omk4`.PNlW$CD?9ogH+kN55$hW;[(U^-oDF3<1s][06V:)^s7FE!$*(%KOWBPBauW^iC(]$U4md#'(&9dR!YD%Ve"?
%,;hi*NoAXMF.6_g1]t.R)AA4uBLs;B%lAp+(Mj<@RPbqhg*jXB>@#h]0ko$?VF5q>)GppC0iat;""=L:a293rmW)06@N,lTc>C#O
%RG7uba5]&k0g\P+J<G<8'HJKRA4dY]>:7;;FV",;i*^BpBt"[.hm<t#6s#\nD."&SRfa9i[V7qP&?aPN7Hr9)5nni)#-^2i`W3Q/
%lZ.RG5g_le,m4ht)kcX.?E8k&7(H"D#/STCnj%_m`)sNPSgQ&pcjmk^)A4U&`j&CSHQ^Rp!J$;oTV2DN`&EO#%9.d=&L]udG"ec4
%cd5fIJCIt,#Ftm`[b*hUA:VcYli;F1M&$Sg.[H+4C<12#J"H,8<e3/jo0-t$iWP5C:ZtTHV$62jLd[>_W;JpqkpXAq<+s,knk`;1
%r&K_4)5sr*O<q,fW7q;d`+ZM7=/.+h-CX&%M+4huL&bh!6O8O;iL=YR3FiXCD#g,j_$8?DEdT2Y;jn@@#Ybq&7'NP&#rJ'oe'Jsl
%:=E`0YSrBpU1>9pKQ0<+qFDtfJ1%E\Ci`ij:68DWl'PpU?n<*G%MonZ!OQ=&*J"tG_0.pq)<s/de6G7icN=9u\NU%FAub;B@";tC
%_khlu"0c3\R*mPJ5PQ3U4Q(o_7:tTm>SIBu/McL&!,0etX1->/jIl$Tc]Fd*RHL;8f6(g1RO9$\Z0I\hft]"PdUH:^2fSS'`Tf(b
%J\@+(ePP@r*k-^OAsn=bV]25Rc'FF*"%AYB&f`*P%7fJa'/_fn`+C9WQiPUS!&9[n*_@W&i)t+#JFjinO5(/]On>:VKKa,a`]MnT
%2B'-/CC'M<b\L$CQB;*e:]pg9XP(8N+N?^EEgoL@RL=in8SMqGKq8CpO`#o6`g?"G_O!h2\.Nhk0XIu$bq*6&%IFCm.7$Hi%rF?@
%+LN*:$WmcF2)1:JloFFrqm9pb*h<QI#;gh%,W)f1;1J]AZ71k"a<b=7M*Q.0k_7+]m:.(`GJl%G31%</BF?sC;!"of_ddCpfY[9&
%_8%B<"3hsu_:sd7F\fHoZ9ZH6W"'+^N><&1a<1i_%-1iVV1]5kZe+93-c<G!,^MR98.M26'DRJ;G3h]B9OESC$"Ch-acSp$Z-\KH
%\Tp-=ND)?IZV_LCf`ZYPL-.*1(VAh&@7,/"!>Jo`$<%R.efkt44p2cp0GqlN@E`4#JVd*iDi1t"^,1qe<Y]-Mc(6R^#rFB)krmL+
%'&dG!7]7Q1RJ^),_(hq6@ei8)VT.GR6S1#-#Tso'YiE<"5%lK%UnnG*$(a7%'laF?%>HCma$D5:\f`d"_R!Xja@"_;-Q`>V9;h0]
%8;4\.VT[L4<0#.baT`)0aoD$qGt\6J+*SfqMmijH(0?()J0-<q(>;?X;u(gQEa7q/"YO7&'ZJEe'F"LM"XFKgO<@W^AuhE6$BY-"
%;E[92Cg[;LPDM^XK"O1LE.)a=DFbN;;JQA[kS>jjR@7Rad$&(dDcf%6W/X(Nd/-!G6T;mM+>F%*>rMW(66MbPVmDXt=>'.ECkTfo
%$V58VnT5ZM`'0p8&Z-qEl"+V\f^FS-4;:f:K8pLlA>]Hq]EZtWoA4TAG]=]KBU"!_A4V?EH@hdMOIlZaMiWu2&g;)9Bt-@F+nYul
%PK#O(fg8F%>3I`'2[O4#,b2t^;)47'M'rqD4$ZLY"kn'A&udDXM7+r4*74@hqHFTcNm:]%N=ZP8];#$&5!JP!kHLPNc[F\]pp&Ke
%NY\X$"(NU*pc1<V%e9gH"k$ec32l=D8iTB"m*hU:NqV+bo]Rii4\s>,:bk&>U`j,b=q^K2C10J:"!c0(-P_1&B`Br#9f+PB7#8ah
%M;AZ64RgV<j:_>(i?/q@,?/0/95LTdZ(jbFCRT5?JJs@LbJ];]>^_AIIk]g%9ElT"UH)^uU3.\E#Gs@Tp\H:K6-JclW7O$Pj9\OT
%b5uh%+pZ"-/3#n4#u*uW'%Bu>0\RTo:OH9&N<(1@!GIBrBStU_,i(bp?u-$NJ2Ic:(588l<*6SiBSSLFkV76kg9)a53l4kd;0(Vo
%K"P-NrASILBEe^d?_8Nd0L!d2,D&^gY;mRK"$qH('/kJ;'o]DC80Bj#:sH=p%c3=9Uq*-W.i=6E\X"UDi3UcRCYZ?L&HWPa1>iBm
%NTCd02E/DP"io%-A>"bk4S4O@fH&Zae9W`"bEogH\AVb_1qTiIas+(.-DUk\cfPRBNL`4GZT+b(o-Xc>abKr&Lk/*o=Ihc,d,]4<
%o1$O<)iLRP>ALaL5/n>9X(edfF$eu^ZZ/=Z2qo&_'Pn_55brILl"ts#KhD4iF`aF[K!#u--)1V8'GD$9q\4DMK^2*"e+Ht3/.OED
%OZ$r7L\7Di>pU#s+JSW[_\-MKOHi0[*16T>?ioMAm&_4@8$VJLSW+QlD)P%12HeCWVa3U,1(U&b#mu?;$:*poK/2*m@<!mY11YO;
%2OW;6gXHB(+F=M4i?Xe(q#i/"9Gkf\bmU0@/F6XKW/`t!#XC,[W0>>sb:on'g<X5t!EE+/-45%H#j@'8o$KlKX5!l^P!euH05u]/
%$!KAA$&+>Bl!_K^,XYXcJ>Y<toPT>W6]i!r2L-CcV+4%AS3doHUtrl:PCAti8eC+.OlX(k6EK1DfqR/dDCJ[o2D:H1KH&m^F,1X?
%X//I3%pBQ-)H+re4/HHiH0#!M^ht(E2`-+r#irUrmSU4:#T/!Mm5&!U>_:*):H:*A,d\j+0B`Z@Z>?o"d*EN5CZ$Fi35:MkP:$Iu
%mG6GtIU[:GnK+_qSDRdKi=Ds>'_^p0:XK]Q();#\CK&UkW`BjVmVc1S&#tp1G#l#QYck'LKmf6R/*s?R@:<e[)iHbX>$:W<WNr(K
%SQ.6nm&Ol:dGq4+eeWGsB5_4jWl7DTqq,.U4B'YmU*9Bd>rY;\b6u'][_8V\5O45HV.>'Q:K7d]3qotsBH`76)"gn:_o0@(Q5FIX
%+'X[f:pn<];L7^bZ1SG>)>3?/PMm!%>@g24MKYD<r1@2*`,ob&)0P=ZS`(*Zp)3R([a7Pt.GAG\8l_uMP0p:Q)@?FNZ.*^m<EkI4
%P,bpESU\Ub_s`jB2H%/e2B-g?[G&\O:pSi[B4&iAISdH.aHYq%^#9LEp)A,Q2%+<\r77sAd1&&uZ'_P#,8tRh]2/5'BkE8'Z]Bl'
%!+84u>kkg`:O*A:Bu7.`1lI%gDt;("DhOjGTNG;-UX?oU802G-b-\\k_0J(["4:K`l%^@c]#$\q!3CB9q)]$JEqkhd[LYh5La\aC
%7UG6K'HbZ=.:S<-fc!G&+,qW6.Utu_91oEZLtEc1%s6p.fqO>P@.JXrg`T3DnaYD^7Oa:O^6lqAD'1>[l/9]?/ftU-3G@f<O??\W
%Q>,*1IZ(sFoXp0o%Iq1nX+iJPg+j:XR''l&%X#aB8C,@8d*B`,*1YKradVCM,6eLO1PS'BRUK:%!Y#XPe(GT"E>VmRW;RLNkb,:,
%WS>hk$^^0Ph<Z#"%2]uGY'?T\mP5iaKj>Sp%N\8to2-D:7jo[SGX*W;,6?+>`2L,7$)lWf%"Nj`jWP#=85TMQh*V"Dhthg0a?[n)
%24tTuDM0$Z@#Li^[!$,RBJITd+/7HZ6R6>cBr&S^4gQGFPds+dHP^WGO`!d?!G+W6i2),s'%"'(`:lXoCke#(^m?m0`Y*2FjXBqE
%<%u`F%%.`9Y[lfg]%jXK70slPd@M(RU_UcmT!=/b9rKY^U_lK9FMm<^V%&D%(j#nALKV'Qc\lH>*BH3\,ERF'BnDg3=3s[67EOY[
%^=XVDTH25+7C*RY=.\PON^:$W7uC\A&!nf-VD7&&A%?VZ:G*II<'[<R1@MOt\QhXk.$JG>jap):!um77(j*nk?"#]CggM=9Z!>`i
%<Y1f.MQU!MDPV*bUds9df*O0L8D<I;.(NSY3Wh@0'ab@&U`S!K<+^ioZ1Ss;+NJQWU?.9N"8&2hHGFJ*j]bE`=>J9UP'f<Qcu2d%
%\UKpkC:Q'=lo@DtOAdO&JE/.QVi34Zk+j3l*d+ch0`d6ZqU'eg;gD]PF:`h!igA+b-75>r+qiO%lE_nD>VmD])RL>9\;$e-=-q)f
%m$QLb8Ko1fE&>F/5E"W4/g[Cp:_%*E>bkY#[WFq>.\04j;'!k-F2S*$f:o)7YU'tBd;),YXs^%ZL,>:J0R9d!X"co/EWk!W.KQl"
%4=NrKa?2hM!.rX3U#e8m!aOF0]-t3p(O[[O9o,QQfYEAH!upBu&hIbF:jsa*2)95tLFl8?,TTE6)g,^J#JFR'eE+dm/An@G"\dLO
%l(m.%):PNt9JY]*/8CQO![n)m:YCoK=kR=QJ!N4rM@f)_QQ2uB>Z2.JK,ru>b`J]<?&SahM.S`@RGpWO#W!VDPPe?QEM7Ip6j7Wo
%.T2b,m+t1e1"`WU"[9NUTcV"2@mjU#@XFW?8hlItjNGN(!bZX`MBj)70$ohYRFIhPo3r-=dYu"10U>[OM2B.RS%Z4YM])jZVD5rb
%f]l:c`j48J#ID<UO>.fsGr2a*S,nDj\mTVcO)/u3EtYM(Oj_eRA?Z&Z6!3-&*0K+;GXBb"DE4/>X@H^GScoQ*(UIT#_*sBLY"-]b
%"eEobJY.L]n!Jfc3Ue4'(:i(]8#[U`7"-X5%r%82mg=-*Jsqo3/b907ZfZ3_r0LproR0u(&l3fi-0;``%52gFBO.uM_\(S#R%R2W
%kEP6U-8Rc%@s-kU3%SInVaPu10s[^pKAHn5k$2s!b&%J]@JGJM`gW=6bf`Dh-,gWMZ!bNelUos$NlZ0.Mr!C2@10bGM-DXg#"sn?
%GueBR<4ENXD419\LEr*[:CPC.EjYNK$8(p'8hS^1L-^JH>-8UC_:HT&iOZsJ0r?<iJKX!#=?Q'1o]OliAdl5Y-e#per_>JmW51%1
%hDR+AbpAY%ZRE@h:RAgu#,AFIlmk@/NZh8sLM>H*B8"I)j!WUAB$\N]O6q^0gX0aj!$m)69X/.W^'r<]#Lki"X5@PaTi'&XI>h0o
%Tj.nXL$&df1J4_Q\`-,n'ICm/CHq1N@YQ\^'g;3Y0r\&`"l_KsNbO9:O_@\!>j5SBh$Ooi:q).Geg8,'0E#_p!SS5@%'=qVMtE[?
%akL)b?IN?AO,%(#,MIbj28h\)VT<[Fdn"(QqL!ZZLQ%g"n]:,Eh(cjNc>c?EJr?=!E?a>_X&O0j.Jt;AE\&nYdc5!`7]cr$%imWh
%_0%c$7GrcbU!kCi<u9K.O?>oZ%2/j^glD'_0ru3@&t,:#cW:_@[rA$Hl"D9L"i+.im",#WUf]&q8tAmc[4o`9$R8L9.Us&bC')ZS
%ps=s0!Ans6HC&a*WmVL2#W,&4j<I.>Kuh%c2AS9\]H)R$Wf`7#U3Fu.=*ZL@Y4Zs,5=.3%1E]Yn)_M,)KWs4CW1dfG@*0O!X7=EV
%(J3YOX\DVj`6f>5>0s>;85@1K<P4MBP8uWYM[h,jF[H=NL%cHB?_eqZX0R$>j6\)C@Y[RI%JbBkZ$/XS2VRXdLl;>=6g)P[#;D4@
%$/0QuS3jV5_PD&TZ/`hP2JN_-Cl83"__<_*&8-T_4`T%BVa'5s,=h6C:X>3l(1bX!(ZT9cO@)!ho)p%^.'=R@#'/3E,7"F7FGAQf
%aK?S9CeKjE^<[p#>`)G,]9dW[+Nl#D4M\h`!m^Z8.@#H`V2NsQkf=X-,4ApnHr6/LE:=VH*GG9-3@TD0mbWQEjpLP]a]UTGSqmgg
%)MCjDUn7"\VI;`BjL>&:&p<*P'('r0I&C/@46NZFJ,\JDkf,%&d#EmsL/)WEkr9m7#\]A=!o4I+TO]1u9QugXf)uLh1g^]M'qMHe
%Qj.)Rq'p96P5;NL*ZPA(?+P'1a-?@ZY@2*dj-=9dbS_(4!?-?&QP8k:&+:cQHAd>URLI5H0>p8<Ll4mZR,uX8OGPDB@9Xcr6GLCW
%FIZH7&8A#&cB*VT7nNo<O@sYimpOPF3m)Dn$1V1=hMfr5?O0Gm4T#R$&]eq&1^XR"Hir_jd1,!;G]!`q03U'-BGp0LJ;<7*:tZBF
%gI2#j=o:Gf)t:ilX9Xi%lPubk&Iu28!Q/U=4!&IJa_bFU3']sSV4<(Rc'YTP(e4Npa&*9RYMD/^(!5Srq)L`t:+nQdI22%)(Cj^Q
%0+S0"-Z,JrM"&850@]K:TtE[3rO</A'iW,20AGul?F9C@).rN[1\(>%"+O.eaMRa+iWKM]-*6#)^P!Ca-gs%P^2$$OpYQ-8_u_GW
%oL@Ia!2A"!O9T<6BY#<K4Q<9A3kBUl(!fMU3)Q.lgX+*p,irES&3'J)2q._F0tT%R75NVO5a#QdZ>8q*InHl=TT"p*4(2LD:BXo6
%=.q@%=W+TI/t$9q'&X[QHQV<9;C(Pe\V''[3f?='o;Uf%"Tls_f4K.mjOMp)2rUkq(*$^^ik76BDhO^b5p[elhUF.$Yg`-JPV9*F
%4<6*q%;0l>e4HC&:15hFe%g2DJ)1R[@"VV&MnPSUanCc[s0*+@J)6&CN%feJLMOa@;3+I1d'1P/#<LBlYmg^HE#]]4\D:9PJhl=j
%YRh(aPe1\*ik_RYk#&uDjZNt+JNj:o5-gZ/=0hTl_bU':J\0n!"ZR*c7b'g-J5c`M0L_Z@Nth\!3@:.[..Km2)*"?6DVn<WU?f>q
%-sjKol#S'P*fhqe>;:X#k9%L("-QeV`W+a3$tpFS8`2>K%.l%^'\Z&6h].h:V88\?F\"W#+O/G)nd<f,(,OkL>Vu*L%!j^_$H^Xn
%G2'eh^ml8&#8B$6?D$:iU]5kp*,lF>*fs+cg,'0;N8C%9aABH;[KR^Jqr13d=XP!6Y9W^`mp*c'!UJ?[%:s%?nV(,OBI@N&m0YT/
%L5WlER\OrLW'tkB8jctm<sU"/]26's-9ia8&3(/36J)E&kUe%5S;t^GDN8X=[^tpYgguVD,fe!4"Z2OL,e9S$8-<qTEmic70=+Wc
%*"mEsZ9_`[_H\+_%0-JQq$AtIS7j;r+HK#P,XMfsQE<QU*^ZUSY#&el_b%Rk&e/N=4Wq4>EL.3FbI4?L@u1md6C+TGOY_p6:\Ri+
%?ub*d6QZ=EU`m;cJ>jE`-AfqH7\L//XtJfT0Sb9H.hKrh$WkG+Ch0<ZNpR41@YP'tA9CY^lBuH*35D:3O[fBVK5liR:`l,BD@KhF
%3i;.FRRkZrI3^r!GL]-,S6@eop=E0Y\\@,AN*)H")^[o@oh74O(*Hr$G"7)%Or=r8?AR6k=GoZPO*L^8\`1%F]I2ON#\0f+4h6EB
%G"p;*"Ya')L_p9m,D-.jmp*c'0g3En7tCjjVf2.;?.0Ue!S'$"dO1EK`ql9Y/<7sY8P&%$Lg=OA679M[`4-N,]'0UWLh(\DabGBL
%(8[j$BU"j`)e@usJ7Zb;I"R9fN_9Q^hACGcAqZ$7ZjiHX.rN9`!&"T_d1'(b*^(/&L;e8fDlu0W#1F`P0r]bijb0eO_l,G7,&td%
%E%F%C`.CIe,PVI+*omL_*R'rfCkE=GT0tU&8<[q=oM0P\^ed<BP*pQBAr5PRT/,)ARqqJS;as5!\)Fp7@Z"thl)4D5.=`j,luVA5
%-9S<(e2u>hK7inT%,qh;>$Mc\'g[@&lZQA=l#p7'93dFBSP2f^UX=gM@49oki>RL>nkd">f-4-to@\KS2q_Jh6fC4-dY-SI$k?9M
%1$O-*-?Cot@uSbL5+j783=XGaCeHgTNl/ZrBZXrIIN-D?IT,&S0Q/s>o=j_W+-):H]X]?12u\#6Zu6qX4sUh_*&X`!jbQV2@I-!r
%5V8JiTU.M<SXjOCe[*/G,d'oJZtFBp5j3_)E`<:iemrk2,WHGTH05rKJ^Z?lcF4V;YkG###+a?bb]Q+HE>-1JOUt"t0nP#d8uonB
%CR@e^"Sfss.%&XbZERN+/`I'`lU=Lj22Q(HL`dGUP&1p#_]os,I>"OL``-4&)[t&[NeVDLKJX2)3NP@-F"CTeL*#/8F>^@NA6]]k
%&B%5;>m6"P(.Wr>F$*/%N,m>J\/)$!0sQm+a4hn.dE!7p!h>2-S%]/.@a`"Ap<CME!43%``O<'rf9J^_YS/dL6D@@fDZlL`%SB>2
%o=[t"dKUSl5phK.?#ODA^21ge8Sk7U'Q'5K@T/a@5:71ur><M.CrSk7mV5tE,r-!dg9:u&H$6-$BZRgl9sH<<ccntT!^6t/Cj;)c
%k/<T-3;\CJDnu\WTSa?Fr+e:.!Ib>*\D1H.bJ+X(ZpLlf3D#D'>R:u$MgPg`Ij[oU4*4q'+NQ5e*]I#!9Yk2BnT(pKF!ZX0ZR.+k
%a0ZW"'5GHo]@<"-;hbcD15$OM</^ehik\>%_;n^&01^B1Lk'.VWlDqr/VFpdM?RL!+Mf!c2Xr$8PfrPQ&_P+:k,rqe+nslZFFpK+
%ga9"`i5L"64Hj3pY'@l4B$t,g@qIIA6kNK%cBb/(<"l"NP";7\j@gIuM<%Ou2CHsV#ek)3g&%FqnKm1TKH*1V+i>ZA:+"P81W3j9
%JU>G&$tG*ig^"KAGt,f;d@\s33gr?g8*2>MLh199T*WMj.c,Fl<CWt`IQt<P=tK/;Fa#tr`lb(c"O$*C,'mXSLCWc4j9P#%6[&Y=
%7,t%NhJOYE/?3I<,)]8BD]#rX7T9O#3Wq)SfHa%77icDtiIu9Q+fT?T7c]:=1C_qG\)*j((*9ccmRC]?6P;rY'QBsm,Al)/Hn@Ji
%@*kL$hIsH-J@aWK_nbeZf2iJjE#i4B,k0;'Qr/Bd;,jPQJ.ZbG^dG;e%P[DS0j=6/ilom#ajMn$3bTXDn/@NY%ZB^qKV74%_tO?D
%.oRH*9H<\I@22r'bqh&>e;tU%>.cBpFO;^<d6B6e5XgOGOqC]]aW2^Id(X$@bbC%s8os?eC`#-V*SVGT]So<$"oXR=4V8Fl24@Fe
%=mQp`_'-@Cka7Gl.='g[#j&WopC%O6X;$c8K0P6PpR>tI3$r$5)Z^pc*phqcH?!')Vjc\RMi:VtO/9Ci8<"s6P);`l@"@CD^KD=s
%iaXDM^a<X%p.dLS*!ZlbG6DmSINM_^U_\A[#V`nu@8MEU@<9qS$Ao+]"tNYtY#O:*]+>YcVZ89!iu(bMTh%(Q!TgK+L4Njh-3tl>
%E$uS..0Znp3h2/Fjd]I"+[8f1)&"VW%S?*'juL.PBJ*c@&[=LR'78c_UC>Z)[]><!c^duDK>hjnb>j<$h%nrd>*QtGYkW\2=TSgG
%'TC!U@QFY-^ph>2,qrX^Q<nY^fL"Ju9Z,kt<n^BsRM[121Xe$S9HVJ&FXk9AdlpcI7pR9pN%3^]U]L;FeiZb'D[_NKF@W!kGXmQT
%5t;XBRR!Rp`!hM/@eQ5TY$j'GnIQ$[3bYJuD"F&@U6S(p(jImaKV5QYA7)R&5f'-O`1_TACaNhWe(>;K5aatCYBqY/CN-Md$74\>
%+ac':)'!"`4oiguWR*NbC0IpuN#.'*1NRNV$j@Gu@p48uKEG=/+2disFk=uB=LFY6,NVH./?fR)S[G+EUKf&7A:+a;@8$[%feY1f
%0*5U-CYm(h(Vp0=O0E=-/2,pY^nbbG]*>+`AgUpT3ZA;`d"sNWKG;F"I&Ts_>ppU"Y6^$eSQ&\=):h77$jso4;lY;1h(:U]"T;e\
%^+i%O0Ff53L`H+<)"4.KkXYr<EqVn&S\6Yt&Am:H$lPXm]"2<pU3EKkTS[*gCrD4<FZog]9XO^S0A^N4-nOinR*+?n%:\>a8tBiA
%;,fn.!Z=skSdWg$W@A)h%:AB.bc[g1$>9Mjlr"j74D2W(,(FJa&b8(B#MIn.5`"Uo?#118$OmaS_OM[YU13-h4+;'Vp(/8f:bs-3
%"$g7"(f]l(ZX"sZKL"753?`46cd=1^jQG=KU7+372s[\R%rF3H+]7YaH1^mBKk9t#:ScIfU'qE&>nQFJF+b6d@H,OCf+tdWOoB$7
%N/hXP#gTbEbgHVMNQscKS'eQZl;9pdpR!Z0>-:E;!t8s=Jpc[Pgh"qIH")GLarS);'\Q03I#"<)=u)J]V'<Fo'Zj]e/P;02@SV#&
%UX/&gGc-/BbRd3*3u5`]A:gO)*BpLR_d*`/P!eM3>7[6PUPAa;!C*Mm"?ZVr:1/TZ_[<R)QgjQ!6k(`cP0sD;.Ok7(c%ZLV'&X\;
%RB_PZ(ltu'l%hThL%jaN*n:bTH=l0=#AZlK'BqQE.?c#sV^T8KM=[5_BjiWefI;Ab=p(4&e<R1;o:GT7H4pJn_%VqQi+58CQuiOu
%rc%*2&;+9k!W?qG`@pY:=02po&8^'6/o_U-POl>8hLP,NF,Or((`;rHo_9F&j4arr8-lY#D2V7#OnoF%"11#C<_!Nd*.X7>Uc]`6
%p<\-h2K7d@+NO9K4tmGV+CKi+e!)Kk[%fT)P,f6k'baZ/:^@1SSLp73Z-oN$5VRac\gf&l':3HkiOqGa-36jMiLs*t1:/rJBDK?5
%2T1r;==0ctTGp@"9)p2#-3fQK0!U/oAr\M;$(Z.K,%VY/jY/Coh^?s*71&/\c(nT469`+0!K)_H13F).d$5-IJ,r?F$qckKWW%h=
%-i.7>+bB/*Cr)YH1Vn+p/-Waj0@#s4<$8*0$9q?0+6cL-%,X>^`\00<;?p\=S]1:mpR">.0j*'n3C="0*h+Ah499>A8:4mspcOSW
%9;/:64gYijr$K.rib@D8(g6E@C=\)uK#Jp-k-NpTL;s3Le(3%/Z:JAT5;51@k:@%],*aOnTI$-URoCtoX>S7cWL2&ThCmbR`fj/P
%7GOOY`PnOI4u3Z()$A-\&R[obbS@>FJ5OPI(a;fjk*Nnuc,=M\IddG7idrqFi0s<+#c=:d\)0#"W?)Lpqi&>TR;?Q4bQ>+P3E_^P
%Y:0aoLm%L,/97H3*I=f]BR<(gq=5H0.CTMfg;t*W)2A5I!X>W^pQ=YQis'q/)B't*K4BQOZY<pPN_(&/n9HJ7?sq>52u0Va/']_?
%bUYKf"%k>o"g*f(%*6.OgU\pe5DnCI!4kppgH4$68=ARi>HSHq,96ice7ne"@Q'e(-d[O'!d_\XW!(q\Q'j[@Z&/+&;&>B'bea?<
%kAJ]JXFg;m2;D.(i'6MR\</[>/S)*u`YqPbQ6olE,JD4I'd&s?!1:.m.A)VBD8J(T!XB7'%+;FFbMmtl%>>#!IWZ[M`\8oUA:.Gu
%c'VU)aeDCt(k3i#$sEjG(-ON$o%qHV_]*/J=82@V%3koX1X't7f,RPVlSm9H=O?PX8"_Zqj]c@[K2@XV4[qug;'@?0B+<*n[XADs
%Mo1Y'm"nOV6":jccEQr2jb\:`I.Z2Uf,Xs';5k\pGR=G4Pmt<XEfIVu(53=Hnn(5tR=f<&[^*lk"JS$d%?q/eNT:!p!XB3^VRgP>
%FB^3t4I%`D!=\15RpRL`=;c\uB6&;0'kET/MpO"1KLj2K\n)4N>\QU#JPHG^IHJ+VBFIPZJEN!--6447)I9pnFpnc/",#X'O`7`[
%Oe^"F$p8ba$Q"[H#['35!O^fqG7>$/Q%WQl;NM"kAr:qDSI:Al=nnpA#pU]9$7$9A[R_X@X3R/ma]eHVXR1q(i/V]3LelW-G72Y9
%j=ZJOWGF>iS;rC0(R;gg&tU.[VDh%WkeUcd)9Xgd35qW%<5T>Y=nDuTN^[S0@V5u6aDDn"`(NC<)%90,M)."J9)bL#fY">2!iJsh
%5.uY`ME&%[bND5551,X4Gu9<HZWtD>BIhIfA)51H7\:H4@rWN:>S6F]:j*"jmJ&G+KMmcs2GpE,/"r'Q,SqC/(6/AS<9N-MPD:nY
%hRMp-it'9kP-JVqLh"!#)p)2,NWTi7.08gbIfGFpDMirsTi+:[Yah\K=AaJg2d@\R7CV%8DDQFgcgeo'(R7u9>s1PuF_"Q)_8D?Z
%X,/aTLj^>)MFXXtP%58]dYJ%FotoS[Q?%Hpd1=!D,q>A_.sRdDhnOal;4%3Qj/P$lpcBsHdu22h9!1-3Ou:B-p;'V1$2[iJ6lZBK
%Xuj/gTE+:":E3Y[_0R#bWd*8t\m?&Z3U"h@Zl5&_(7?NT$L>VIi`/g-?$FU)n))JSPejO"(caCn7`!:q]!>t*F,YPJ%4d6eWEYt"
%ZA:hX<6pRe6@.9i?K8q4F<"KS/Wmb7M\i1^).B2$n3gS"_G5),Y'.ZNEi<<O-f4Y5DD7BEZ#iL/%VnoT7U;?ZccH4IQlBJUO];].
%+U*9&om6PMXN,PWW%\Aqb&d)0NGaAVXXl8U!8??=O`]Q>,"(u8!;hFo$;MX[++1"lnGNS2E2OM"Z'$?(RaL5!/$*gV$X^oOWrNjS
%5j+7!@muaXW2:k2D,;="FNM5BW'g$l@=l1u%n?!ldj7hZPpBm/BOIB82*N'.2PKIM.V<LTqmiXajT)/!?&?NmJs8Ae7,Th'p!,Ge
%[NYt_ItVR3=@S2D(9bD]Q-?K/+;qjllBe=TE]orndbE=C;Ck+*EW_AYa@@ZeI'DAl>N/VghdjV`#7ON'lMi\n_fPZfP=o;2TtLk`
%%Mu0:PIlN[rB,?u$(D)?@[V_*4\FEGEdc<K0hE^9:G_W@%o@q_I(iD&8Fqe;*gOQ-),"$fBEK[UP7)Jr.)TjI?'\%$$9"956#U9.
%N\3oIkL9^i.ZuT9VA]f"!<Qr!qKt%rN!IRKoo"a?C,5emDh'(8#s`JCNg[U*og7jX6W>N^4st#[;mI5+(*3GIRqrp$Qj#?F\NsRN
%$@K19A@ejB.fuu#;FP.=k]pib$'9Ksq;Nm<U@&BU"-Pr:j2k+7^A>^`^3?`Rd+A>ZqIO5q2e''2QUc+&q-&MJ=5q=)Euf_,>8N]a
%Gd'QEN`_PbSDT@7ni292/?EE.[R2]X,l14m$lH3L1i3q7@*;,ni_'>@4q%ij0UE7fJCZ/MbjUq*%_&Mnq[.*t_?bO`-#ACCBVm:Y
%A?1mmkr7;B4DZ^5e8p&[6'm>1brHp5B\G1n:=qS*p`5A%].q<fl2Tgk\KXYkOXDnMaSp0>ae`XU3sGqb4sCIIk)LU'?R&^(U$Au/
%8ltF/S0XU4;ku5,8=Pm`K7W$uPA`%"dWDh7]omi.h).0Z->Ik$aJeLLh8)I!Q352q<;VE5)-@C,kro;$#oqjcWW`Nc0@%_=fs+60
%qt_R0qFl(ai*`Q5ces+s6bFU$NFVc*eUF65nJW`7&NAY8)F(;ClcTn0EX(+4.K@M.C!38mRoN>#amL&eI'([P`!\A#qOo)kc!jD!
%Dme5V><aQHp0b:cLJIBF\Mt>1\Cse_1^hUF"":2/ctBAj"_K7%A9<g#Z90R"C5:L&G__63Z#$9oE1^(PTM;6Zj/Za91PA]o3+%V_
%o,IW*RO?9^3M&nq_:(cS2FW[()</I6b1<H96\g5nVc)I\XSJNq%70kb7\*)1_96I8c]/@3nD%]iOr<K4K4t1SL'XYSq#qY%nG-15
%>LYCSflk:0QK6_/Po*7N`&B=tqTX`Of\Mj1FL_e:ZCpu/X=G3*'Mq;dRkOMFSi0RlUik%t-n\M3b8`f<?6l9BFDO/"Tflu?BI'R5
%h,/#.^:[W]b2a4n?II@E4Lu21&T/l^\NrLbfs]_/'`,5:8,0;,Q\aEVApAVqot3,-Zd+n?3j`ZX:X+_?!)sS4UoHG\RL7WdTss'@
%&=pBYK2e5,(=inY2<MD>Z7$@Ka(#).qOK9<e54GEq4`6C=sheARsLY/aU[("!0uS7$%[>JOt@3]K0es=H?OMaITYlBZ*5l>WKa)+
%5,l3R047aa!rh@B`;tDoX#RmJiUu)b)j4SB@98TG(=iZUbh_;'I_%XGPO:KHWZ^ft8X.<=P*FiM.SI@-lt>Q;d^P5*N*DsIDI#`2
%S5EQfWe01;/'\p?1W*'WI.kG,EOD)^+pj^U']k/,_m(1EXGE[m<ZPIjNH,ttOHAh-c'=CK95alm>'*><f0\25D:pe`&!hj7.@YSF
%7s&mj&t+2^cH<e%Wlc]?Nq-ZD:e-,;L#q\a)3loSYcS-V^[Yngkua:Z%jc'1U1Q2NJ*D7keVn,!5RlpE;"XTR<9N9-0mk^8h2U7l
%L\cT@VN7e0H?)Hf7oJ>D3?_AX*[e[rh]Z=Sni/Q.2)FO1)pqT[Vd\QNYX06l.cYKiBhdm_hRSA-"5@T@LL/)K0Nlq)-ClUN$,L)h
%`<0I[!R!-Cd6SssKa\i^KTO50*iJgT+YH,Kl!_8P$3^#s2A@.8H:N5HLPd%-Ye2$r:b]m<@L6^r@(`&KY-8A_rX*F_\e1Pr>j8CB
%8pTr8"YqPt@J`_Ve35h]9t?CDnVJf+Hk4L\AR.#9-W`\F6nM2.PbMZ2.uLbI`]7(Wc@g'ADZf5r\5%:FKj<Y%Et-B_"F9A`f6jCk
%W8a,#Vh]KKW3.RTF<\1n<&le2)eY$^&_D?7KFNh(^r@'0Y/DUgqfE*7='GIE2>i36#t'^QNQ5,aq5kGN&k4^8J-fPlUVn(^f>Zut
%7P(+!X$,ttF0T[Ih:gnR$[fgNY2o8DChV\$kC=0bTs0n7F9,qe#eu[k/uXBYrS_tfh,q\,/3QE<#RupR/L"P,M9D6g&O%r.e#!'#
%abF/i#-gAo3$A1q:(k7h@*=E<Oca<<9]W"d"c/Oa,OYtIi;nT&+a#A;=:CaHG4b<rM<0W<f3ORL9a!>h8f`K8n8086?Jbi6*.\2=
%QS7"GjEcYnL%5r^56_O&hPUo6h1rf;>:p#OM,ZhtU_oKUWU:ZA/3Uj!6$OSlMo#e+;?an2o@DhO8oE+j:n*ZJaK@'`Obasd%YQ/L
%7sZYDBXMKU]*8I.%`d9C42s3]#""!K4H]Gq2\P4P$&]0Qg^'NJ`-\bf[4X(^,OC$]U=qZAPMJ)UTF^h7U.9oZA]57_%,-tY:N`:W
%HH7*K:)"%fbZC,Tr46hW#T>H>82t#QGIijeB<Jk$#,Be7YYIth7TCR9R6Q["6?t:&7Ub,Iqb\iA7`rggU<`I$`=XXp`F4*%l.GVP
%>OPg@$dI2Vc.-)N^;?j[Yh?T.*b<I4`itjP8C[Hl%7<P*>eGih3TB:-kpkr#Ao_<C3lU5k?cSA!#SRpIXU]a#QL[i8DE)?1H7R_X
%MjD_<#1UZfC9=FrBaIG&*]+U#lp/^TUthgu3a5o+`o>]94m@PY2,o8>)4R5t^p@b%nOBT309.<+VkYJ+5X_"WT5V7?YF',:E#B7[
%?V.'b+Kbp0\$@C_%p;PQ9fGYR%:@>Q.&%Lmmir-QOZe:^(QWNqag41C<T-.6DOL>o*WNmcDs<Z08%./Z@/`N3ApFFI+d$$`K589<
%!;=9V@o.'%%91S0ArJMAhj`f!LnLcDT$6OS]8]9u$>Ou\Od&C+`-D>XBVarT:;Fg]d&75F>F6ghORJ\G5*GH=X64`3JN:$Yd8hC;
%fTEeT"ek7O,J.WjCqqT_K4/.ufWs;m^)X*W>-CgT8G_?\l98A_ag8#lht6L]"*ZgJ`5"Mt,.RG9@fj0oLIPkS^rOIVf-eEjW%i"2
%@)q*=D2rWm_(d1!r0]301GSP@`S(F:5)F;n8_cgbX2X.bmFiq?C7&>i\s8FL'L,'1*#nae#*9=s:p?f6hPrF,%t^Wt,:X1W;j0r2
%*(;s8/He`<)V;;k%YQ9G-Pd7a0WT&0WW\U)@N[T8^W&LaDRsi%FYi,%55J]bo&_TV!LcZ]iJ3olGEUAcr[:pP6Mc@cg[NP"rlc$L
%&l;[<V_.`ZJL'96CTOKMmnd8d+W<4U.70K"ki%LoncgE`9]jYkY:`2%34R+*r_TG7?2J.D6P^B^[iQ]2Lf6h+>kAf`<hdr-T$<M.
%"\1t>=s]OA<Z;iNR<nIi6$/3ilSrnP'$X2VOQ:bEKJ?2`TE*9UK.^Zih<eK#K/TCDq+7%2hJYQ@j;%(1T5HlH5<li-1U4"+Vdh#=
%q%];V9n6OH*gSqe[!IMWiV]T,1cao?,$c(*hg$eBJt2;(46(Q$1Y*g#HIu$)9bGlTp@[V1qOm0*)TuC\%cO7D`+[ocIAeAu`V]>^
%)L*n[kT,L]a"Q>0kh!FpidTqp1k'W7\Z'seo^N#*)Lqb%7qM`cn=_kXJ3?%'^W!>YRN`DK^tH:!2'HSdQHtm8.NDo7)DR&1SP-s:
%j\,6;3=$McJkY6)Vk?';@Rmcd+aH[%`@bW852"f5/V"[]auo4LYVEN$6+?E)P&3$,@h1t<T+#EW4rf+Z)I9/jKt*Z=0nDXUNKAA6
%Em"+=aM:An%eI/4MUBSdi-k2=OArHrFGXQ:5XU7mMApP+iA^m@8=_.DT9Uh&FI\!aR,`#j-,>5D_HTj^gMZ0SUpauYVr?;K'EG:9
%CIYWd+!iK"$q!drGb+?e&'r`=Z#WWHLZ]`Fl&kr6L)ZX8;+!-n;AjYgFt\8D'4U&/1@_ETa\"YXb0Uane^:.\<d!,)L)Js4^^6So
%gXl"Shffs'GWCMF=$o9m1)@Ii[!FB#`Tb^XTR[$!TMPSK9Xe['qr-V)qWra,k5:nr`=I?0:g*JjaKU+\<r"$Dq\uKdUnHCKWT&d^
%8\;!Dd(2mO@r]saab'B`Q>`0Uj=Y.E\$l--o4!6B\;322iWU#r9rft;lE$6D2ZX;@S*A!1;eo#ZY"K"e2`Z#08`J0RjCuqa<XU9W
%MrBiAo/3iW]XB&c,SBf[;DNmU_#VBgPKSLD:m@ZL*IR".P(tO-0Sb7MK<!$F>DA6YWUY6m_(6RQ%5d9ND75I@Dq,n,"iuntU6/Sg
%0!<[sK$\rgV_Ycg__`63a"Cf&Gkk[\ro%D1WTl?Z%K1KZQqZBulI]EGf,0j)0kJhqS29L4FLAH8r8+N`[k38,:5abe&":N7W1rtF
%#aA[[[9`orOBb?r#F>)NX`q[)YL@t_SA`'&4.p4VcX/N)eER"STL([*6c4d/ps?hU#)cbVVI:.PZ`V1V`eh..q;jVW+Z0<o_T[6G
%#&,@\K*8E;4dq5;cg@WD9B%hZ9EoYSlK7'OR?V(lE)^2JHC#$L(-@90S2S8/%X1En^T`ZJ;6fJD9_g95en%1cYT9DK+n4i=j2%.'
%V\([L%*W)T-#,7[T.]6R\?iu[TR(<XBY^pca9k[P8(LQEbn.#6(_83!V.@UP3dN:=*gBI=kg_da1;*@Glj'aVF&aOIP#]aa("ZT8
%I]]+"+)/,OkFU-??dWgP>$g>"gQF_CAP8Ur9;.HUVt_rm>V#?HV'QXS(AJ6oP&>Eg)3Lu9"k*SlZ=kt1kqfr%*Vsh:`7VtGaff"I
%H+R27NsEH!B1IVYJfbjDWr%3T<;<sF)405'rbQ<E=k!W:CFQ><dYQ+a3$@uR-?Q\9]lb9l`34/BXt=AQKgP#VPo!DF<o$J9c`2WA
%?2:lAO;>,#G7oAKLY:$A`6<6'Q^6tUOI#Yo@j3sPEmp2h'a2;S233XToF/gqRLe)abiJqUIVt_En&8(OX8PBG`Cl8-B9I3?bEdQ]
%DoI<`S@,@#G3p!I[BdiT8,W1=Y!rbr*7<!a/=C_U?]>s,:pfMOk?<>?]Un#l&jt^OTIU0ONe<<`M-D3/K>Y(mFIa(p@u_UcLlG;O
%?S$tIghXOEFG98^E8",S$liC`YG`t"N;"W`LqT$08cHG_*`"i6^`)_Ho%C%U2(JjWlGFH,@<+6g\OskL=NY6I094#)n&rZ[00<TG
%3-'A?aq>H-44ns\cYP0S^7i89?$3/QnT\T)Hu>Rph9HZ*ISEt3VEDo`<^8k_eE!Q\^<97a(_Z[$^f?<NUe_32,a"?m2.gh8?K<^P
%V.)<DJPq#/`DM'SS.E^+FpaqBi_CcMTk)cDb0-<iO>j->B^I80/6SnF]cb&WEETlckie;@l82:kfR/`=;uRL.6gnj:U!_!2=d#g-
%MV'3O"8eM'<72>W3IHM"P5&RFbfsdJ.7B+B:H)JV=i)U%<C]+39mV$'/_KDn$?o]B=:Y)enM3f4H'@"AA4#D2!O\BX0-=*!p7Xc`
%hW,p!MC82G_#>,6AOmH$03(0cCHOLY-;RkbI!]5qH/a$bQ;XNqNc;6qTrW6OaVS_(HaF/sl'/R1_R$;0aQ&&'H>RH8T\,S>Uf+"_
%Woq#=ki?j<.E^<c?CGY%`q?8?jQ&4#3LpWmgZFjsOF9]/Bsms<g8AlB!hCtTho"hLOm$#^MVr&KU<O'*kd87sK_mP!0g?rUd'cD>
%][KC;;)T;aXNK^LG+OsEnB\2bdV3rI4+.>,:rT=G*lGY1pW9hJkEZf8r3`S4Imk+QohK6"aP*Nu>4[iR4U<i1$7.2CWdE3RnhB;9
%hug*rd*1*JHi;KM$3Yd+f$CBG?p[h"VVfSUAC,1\TbY]i3[$ano*8GH\JQ>?\lV01j@m5;A@66D-CFA9CZr%;7@a\)(V4'Y6/(fR
%(JQ&!=-o&5m)9`^a!kla7**P6C_<j;aaNW<9X*c,a+M<)@ukabNr"?n8p@NVH6fV2'i864M9sY!==E-_OF*qtRIW5+du[-[O^9@t
%<G;\WbN+&RNBQXR4M-sC"UOt13-0X-F_CHmbjIe4Pi7qO84K%NqO5&ZA0$8B0@1a):,chm(+NP^YDk^1:9OBY?g(7IW"GBW39pZs
%ElaEJ`Hf"L?dBJn?s]_H4Vg?hRBef6l1K]C2+:'=/NqUo5`G8+=1VQ&DA4]b6jH&iST#>EoEmBF.%!W8Ai()%I%`GuU1#DrF_(h3
%9=U]Hk?XO&8=sVfc_![o;Lh-m()d<B``5l_G,n2*l4#7El)@NTNVs:i&G!9&)r"&l"'<aD%$Hts_84`h*cbn*E)C!+bMaMYON\`.
%[H=Be%J5bB*^`G-.mm[Fb+)8i.YU!&aC;Z6!q%u26NfC%'[aX3k[@8!m'j[tM?0V#]>qRT%X^f8keY<d(X;_OJ:@!T>bm7P9`oFa
%j/DA<foSFA)&-0+XPYl.md;nB9^/PD`#4_fb_9gkSOskoG=l$?J=(\l\Ui>>e8('_p.r?UZJi^;`&E[h]/r/lX&9VcrJRR0b\urH
%(8!'24%\q/L>DQkB's>AW<'KOc62C1>I\-a^mh4Xh3n'cg$&i@!5^BT='Wc`F2J#+j&C/)bRK-OlqZHOhhV#hZ9-D<($9bNB\,sg
%Dse*KL1Gc^@?LL&0TmT!82Sds4?M-e]cUi'`9r;mo,pdegR#fZPa;tH:b;(4Z1iG)&HUekqYurtb&\\SFO?h#GJ#*6/UPW!70]+,
%R<F\Z/)!9;mK]d-\,3AGpt_>;X"<I=TFrM%JgHcG`1Qph\Xc,);"PE](S[.G2dN'U-d)mY*[Y7m,idU6a)NtWdjpIMC4eG3807EZ
%cWtmT5d`u[h+ft^PrT3"3<%]:8uo,BU,kr`BSTX_8>odb?Tia'37b*67Ap)0J,u2jc]=R)X,`3Pjk_5pU,KT8!@'b`,Mc;EAVSbV
%(<m0r1k;5;kP=5$KQS`JF\Ts%GSSi4fB:c<S1UZ5"j/d%5b2a]fU=2&L4X'jBW(8YLZ+[4!)qORk/7/[BG&uNY$502]gg!dDV_$5
%c`i5`[ZVki$^=McH$cI98%A3U;qNCi4gCMBl!PLqpmN\':Xn%$kqgDI1)*0K!RdiLl)lEFa$6N[I'Q&j&t>Br2eJmtW\1X>3I?EY
%cU$20Zbo`Rq!b@6DOt\$`hj2.k@3@2MTNqk2M86LRW0k$Lcg<6/d'W!@1d.sZL&QHC.-B`*Z`%JH*4FKCT---KFX87a&(K9EOX@t
%8&n`!l.P<1//h9TLXde7luHm/%@,;fhG&J(eT,63CL*e1N-IT4S8H4f_SM671N;<pOjI?s$7XD-f;g^O`J\L]!DLGnM@W]\ORR/1
%s7D,"[N3E[*42X/hRQ#k\(G'Z-/#,?b>!RG(;;&36Tub*s-8l4m#JF.]9[XoVJHs7,;>gFh*%.R<jlFnfGEqm*2iC5ItdC1d>Rir
%o-]N92.pi+eQ5[L*HG0(F*(1-mN2nR.'ei/j2tu\<9iiXj+@T5AMIeQ*i.Nr]Ad+,oXdtX]_oBRl^R2:mApj[oBa,opAL,AZ1@iH
%T,To/LLu>?rP8=b^&P8"q3Bp(:gbQ@"S9261NZDPF=SJcOXN2MF%B#$Jf/CYM=<=f##8XqKE:5J<]p\M20qYL+oA'E+YXYH@c"Nm
%O:V6R>!t1/XpXQ.P(q]NP3^dfAsA_d>T4E]?o?1ii9,b5CD'a,=@g0Pk$)$Ejs@W6-tSkL7Ki"RG)H+,lFkB_C$^4ec*%tY,!pGs
%BW!$mN0eDSDhh]3G3@=Ya3;3sIs0W&_h/6E;R@TMI2=$2E%T*j6'^2>igTHrl7Q(sXBQjHaq`1#7,hu-?uNr50mX#PE7cf/`P*#D
%&8+&eZU$B5Xt<C]^0H3@k.%`A.=829.I(8G`Hi:>7DH\H6t,,J)>>M3c@<[uq*l_s/D]Xa;NB"\[-'_U66'+QCjb4%U'MegDr^*r
%D]i*]/pocS?[q^A2@%ItT(e[?>i>EC43cu>YdkN2e@P9+6r-H^Y_HN?]UTF[%IIPeCZUa!:n()s=.sD6%s;86=O6m-i>"47GbCob
%AKjOB55FWeF[S6Ul=!"3V0L*6R/lVM;kXt!>S?FP$SUd<@h0r"Y$g#U_C7l&Bn>0)64\7;Ni7IQ<mXu,,d.4<[2#90.4'NgeF'ms
%YVS4SB;<n!qVeTZLKh\O:B3&XZ_K+/C-au:oYkppQ7!1@%sARUmE!/p.lUD7!@ZjR_nZkQ#e`OE])BKHJ%0:Z;.o#>k4Z0le_I0f
%,81'<N?'#G7'2TM8C>416+)Up/dMrc^84iA8pqYp`=/Bh(#!-o`[KQW9iI*6;i];t$_8.CZWWQNs'j`f:k,200^&?&I0EufeNF1<
%2AlUqlN?AKfm_R=c0f%ge(2Fnb`cUa\irX.G.2j,d[;6g>@pOdc@d'LFkqqq2VkW`fg&s:E`Omhf`Gb[D3dBa>uQeF1Ul-<I'IZ4
%@3P^6X'l$6#!,"R#Ym:8e'S=>)"92&2TmDl&]K,ofU:e9FV#h&ah9V+W&sSb:nQ@iT-N[uo$U'E=p&`sOG/%E3ZemLQIdX+KiU*D
%mM[/BKD'rX0mf*Id&0\G5g.cFhVFN]S@+"WS"%^^ZKM<'(K=jS%nJH>FqZ>QYhEVSMP1DAgPj7!#8SI@\!OP[hO@Li0fAYXG1ejI
%82bLh5jHDPTH<DAODubC4YH5]PZ2+1jpJ8j3R$jRY,upB#-Wlkd%s7XhV\OBnI^=(B.T4,&Z]/;EJV;Bfe$fZM)):kH^(qZ(=l@[
%dal$WZb(;\ea%r1dYQ)5Z?1/i4WrkB?`&U!i!^@,R<[bZn!0R!p[!Jg39_N2="fQH[l\M)3e-&GrO"+KO])q@\Kok,p=fYk[<]"X
%8-:2U&GAXN*6]d_('?'n2_RF4Eh3tL#b%=TUh?c^&D#[bbVk/H>-<6>^=n=com\7)p,6M^&O'b)+KXsu!/PD?lX\+!SSlDj:'jJ!
%9q`"9'CF15lI`]6fJYel-[\;r:'.pe-Rs^I[hQbVdYEIM62t^!3GbqjDYS"IQ1B_Vl&j4FWrPaJ%;TG8L2!eSC0NI<-Ia^e6*9sn
%S$No=c++!Cr\tK;kW5jEs+o@m#5gr6RE@'U#F@VHL,^(BC;A`uTFLIL?jg(rm)]RhG22hk-I]%)O!r1jGfdm^3C<]Lm]1#VB<nPl
%(9gPEglb,hM(jGHj?4peFta1oIWd]0bl*G)KJM[3)%mhurpiAN/HEc%j(=LmDSI#L`2[]l+`r>bdcq-J>AHck`,qMu27P^!Q@^b(
%l6bOjP6I/<7`T$ue*TYY5MV)?o+F>;rWnm>fDg#a1QKijnERQ]q*(T>F'mZ$lJF/S=Bs%FSK@2oFC`=lkq(4Y([],.q[f<;3L09U
%_;f5WOdWI(SYc1bg[IGRkG\_(GW`d99ef)r@,O\M^-b!^I&H?XL[(XXSrr&:5?f;4>DLi,_>;Qe!+VW*U2N\QM43MFdn0WUE*.1/
%,@:n\i4nPJK@"dD@P`[PIJ;n+PK-K\V+ZP(dJEQ4`pD;E77/S!MGOkTEX+`678O[JD!))%'A4b8Gb;`)=1G,aQ]L+MY<ImekBZ_8
%-o"Q7h,nS'H<YUN\FHOrrIRFC*E`Y!Ca7eFVT/F?O_==>Ib.m32k@NolZ$HBk4H@6RI7Y)o9G_j7#QaJlZ+%=9_2@S+<Yd>gpC<u
%'&76+;fK<3)[F9X!L?ZX,PGDIO$id^b.Ip)A2#3ALYU&SX4bDWXteVSm@NFE)T^YF])n\bVSPu?RpJ^sV4(EUV6S(=qO4!O<m'Jp
%>;jhe!,\u&I<0fs^l=_2_(gsHLQn)BPGJ$]<rbJ)ID5c!1NC'TQpf:q;i`uGbrItZQf?&9mrd83Q630CC=S@k-qPc=,4#NAkK_Nb
%j3?,:WI"mm/d21/d0.e2E(KNeVQkX)S_9J>]^?.u_KbGkCknsSn?Hi>mhN>Oq$LZ1DICNMDCY]1-E6p>HICd07`b$=`aHGnl;:nX
%.PKHS_-OoW#^>$[fG>*RG+K)Jb8>tE'XtrPj&!B\T)pX?>fPVcKb7eRo,"u.,M0pVoEP)h(RuB5fJ`E$-L?cY4+-G;6PVFhl%o#K
%X&nX60penG=#gHN$Xc)Cq%.KSNlIop#@5Go*ir`<7f[a5Vf:j'=NZ>3@^:Qq6OM_-PEgXH/RE[r3\@4]\(p8-8b%ms=O`aS@rLd0
%EHi/5$fR.CZ\q(HrA,0'*P)633"Xflaq2SUTF/p:fhS0/KIEnU;Vs>)mbWW2.HOuq]k9T!kl[gM)4f$4i?&];)Wo1u9%/6n2T#X`
%EEI.jrrNo61`k8ghVFZpM@iK+_buclV)a&]iB(HiE'r<:-(u@O04T>PEKSdC-M2,X!HR*h<!*<SSU@0$`noL?\uW1tURc7I1*S_6
%PkEr@N5BjgPGXV:YO??[;@G<Ih5H^1IDdcI'/[@9m&dts?+Lk&B-kItfqu44A"t`lP@*I\DY,^B4\=@_Sg2!`RZ=(*pEsiXVYq_m
%"AU'L1HJ3JP\26l!kcIkN*"E3qibmM7aqY&NI_7pM'gEX$09DmDT]E`29?+>%medK&D@qi)^H:5YJI6idRBe06b$%DZNY+q'&!mO
%88fR1=X[gfJN1^["ZgS)Y>/p#egS.:*N90"NWG\i/E3(`+;1jN7%YPJE=<8jEeSHJP64Nd&E&q2l]aQ)f*d[%NP&;TV46<SOffIG
%%S-P.HI`sC.k\&2r)ON->[\nJb)W=FYqIsWo[ri6"6f*?LdXqIMd:<fD9o+E08Ep.kEk4eahMBL!fR`l^U16!Ok='X_B*ebYHs#?
%2oBa,)8%%ddeB@S;#JIkL6Tu4*uS&U^k[Z0<f.t:f\abS0Z4kBIHD`Zkr)O$HP,kgCQso,GFJ$lYBHu>#bg<+$q"u!4W=sXKVIB]
%@FbbWZl]H`TQ@J\nD(6IG2K-iRBM@6Etr[hX!NoCLoTlhoZr)7o-@]+RJH*o2B3'RDWmOiW^B"G89r>o@,U7d'HZdt81d3M73*e%
%\Ac(%FOqS<cR'CC-9g++<&[ZhPNf:2FR=>1,V`'&1C)F\qIBR1*QojsK2BB@BM,Z<d),u4qhg<+"1_`?01?f:jRj$Z!8\4`6_rS>
%_uFnL_brk2V[7IDBXeB#YKO@5+!0ChMPSm_RB4=[3?RMU>^uDY+a@p%hKn.RR-d.iW%`JZUq2s<9Cls1fF4WW?faNCeI%[e[caOP
%+UP9ZC:>!]IX9Vc*d-Y5F7?gESRe_+QX.HW*n+NB#=.`Mk9&u+=pW-VMJGn8iB<PM)1_+?bsP[O3fhE,<M=:KHTXB"Y0enEVg7n8
%)LU9(HE2?IfaPu'@<RmLJjb1QicnVJ"u:DL9CIlJWXur,&)T8<:kE/Z.d[DJ-<cN#`GBZWCMk1&JTG3_n$'+L1&9H(bcT(*qgtpf
%d6+m3YnhNE/FOL(fUXdY%km!Hd"28erA]5so3lCs)[%3Z-l`gK5oka;MkBcfR8.emcG_d,'W9M2((2hCb'/h.Pb=D!QWMU)2*#0]
%*Er0eSR"-b<7I"5#p!W'ElWI]i@V'jMS>$$,W@NSA-J9cO3NOr2iTtbT\.HCT3_kUo7<_S>d>UFPF:C-c5H<rK58^`OS10DF2h/I
%'$5[r@?T@gj!EiUC"=PHqJ/_72(4L!^Q<5rJNWR+2l]n[$g6^P8^WqE@Vnp^P0R>oaV*!?><(DK2C[q70G"AJ83.,aRsM#!1%r8p
%n=H=/Vh*Z``NPe<2DH9nRJd8UNV89OS_$MVQ4T1&Y(Sq*.Au?/-(MughKio&h;*X8$M->Y`PH`s`P*[fk:p5GD]%%k&uU<CC%KXT
%IRAkc:8HZm[eJB?hJ?c9]=-SPRq@<S[]ip1Lu;<S<"\toY'mTD&;2eYlFu&MC!aH8JgpUJc'h"9YFDEGh3WT/lYV1@0:!26UfYJC
%68S&E/]<\5q._>h_P7rp1#'\(*)N(HobD5)FJZT`m+pJ8Mm(lhb`c+IYlm";8QuC&&.Ws;batN0qOAfkJS`SD93aM6I0bXOf@YG^
%oD:7(*63*Gfg@,qNqP6TWK@>iX1)-T*qFk,WS7_!o%gJR*^r2*dl,LL-BF6'aAt;^BtH1a(JT'?a&/Qr[mHW_FH2s=]#LnH^>rIC
%l8SP+@cU,gP:aK/P?u"f7.:3U:p/B0.YOeM?i0I)*bF1>o(@,inb6[+fkd^EO)l^&LNKlT:@@gq;Nq\S.lq?;_=7-;I4+Ral6bMT
%(*Kq+qbs7R*&F$McQ95I7fE_[iNNYL?d"ABJ%f/4K/DB#I"]*,c&hj\GSD3`NFiQfVp.ql+l-mtFd'!TjccZA*r;89e]Vnk#eO2N
%lg@gr*q^"2.aM$f&.]pub`IcO&Nt>^,WoCG3ee]nNK0BF16*c/BL^fc)?X>=(Kcnk)C`\/d<4'l_fPT:_mH=M!n8t^blR$&@12bb
%FR`+ibF0Z070j-V!6lre&o$!S!\iA-FXOf\ct98O]>bme:<UZc3-0UCN+kZb5]N7ViZ^#5Ai3BXE0.F1T;e9<4U9EG]B[UY)/9]I
%c!e:/3/g,qCKh;[iWIU#o:8IH8rAGmfPQW5>r=eq3&0K(qS4G/V3,@s#h3L2H6U7h2%(fdmu+$cBC`41LY^'.3.B^J)-B<C@$qJo
%#aS,G=JMErgU'b2l3imnP9h_kT1l4GqUS^]btrV=lg6W(/)E/W#[fHL.=6B74$^=!CnoTYK;/-tq:6WFlq\,_7RQu9)b2F+6nFfr
%q/0Y<]\*_+!E:W#!#+7torpCJQj^qB]lAZ>i6J>91m!3mc[c^UgtC08<_<+C$7ql!@`d)!aaD-sjA*SW*[9QL>C+ec3=p6OTC3.W
%=mI\@@#XgrHU+pu5Q[<"l8X+BaTY5U4daG\+:63c#3--@?mYr>9[&O\ppRG_P[G1V?[0ruFjtIS2<8S-0JR@C3CJL;/ZA]2W!Qm0
%Z6?q#HWWZmkX',Ud\:gedW.+.+3Z<CgNn'^;"C>9)DR/I%*OmA9oehgR&:`HP<u;cO:u)8PN*#.T8gg,/hCQm[=N*tn*UYK\p>.e
%f-&T@@ZMr'6HkEPM\ESr$"QQ`!r'I`6@;TTDCsW\R*s5Pik)YUh4+4+c:)kW$d;MT2^It&Uu$o@#pW8fZ7g!E##(dmT<Y$lirj:D
%O^/_1G>5c_1Hjk#W3"h#Q^#t!>[C:uWAHGH6Zba&H#HI.#&.3uD`GNL1mRuP<_4Q)\l3;&g=1I2o=KidAM27E(H%TiQk=6,-$4>.
%ZF&&u;,/_[!EfSa94h;De^P`Wm]76sh%i1=fU>dH`)0:T<#s<qiui3qG5&j-M>GXR#"^a.]gAG3;)$$33#680>B0cWZ-F_N],EKf
%#BOSj-SQQ\?2A*ZWn!Nt7`oX)Z]:9Q4LT3>:jiI<7C;",BLtg.(c0l<--'!m(FF>)Q::)A<r2Z'+h;%m`eTEH1rrmWhRY&m3aXP5
%:g+6h_@t1+ZqqVk_ZTI@l41LtM!'=JYj1]9:n+]87esq#I#/Q'H4FdZ.ahl<)4.t=>dQ]S60hup0VWR%c1&-AS,`;qQ:$Tc0=V/D
%4e?nS9Znl@mLGPm%b!QJj`WWZ5Frll?pHn4Ul_t[d%Jefn0>hC*6^nWp,>:2:pS0rhF:%?dXB@1<mG!oq<3sl=iO1HA7*-`]5$N7
%LM'$a;lO2s=N5[a8r8a!pF45-Y-`+5BVMqc5CcQ0c1Cu-9nk3YYWPS5WIn<\G7V-H[t8Rms8IK8@#C.spC>aq^UhInaD]TB7]b)N
%E]rF.F3HV;;eWk?mJHgI"<,1"2g^8fjEFY+`#PGI:M0<\l4QMYR6KZ^:HOTuf>&On>W:($E7[t`23VYDdnk1N<Ar!J8/YqOcBAPE
%jc7[iXnJuu9idG>]Qa;UA3.Qo])1$5]Vg%tkqDQ++h*O2d=tT8,;Z6nK[I5^+)Nqo*>682.%2D?o#8lZTb8fC(o:01*MhM/g3V8<
%H@Y\X6>m:1blV`q;F8Y_;[X/H%NQ"XV*Vp>KSS%uQ)$u/ATc@gLusep8M_T4quU`^mi$O43OAJQC#I%V(SD;p(j9HMb9\%k'3VKP
%0T*"[8=/WR,tQ.(i.jPOn&hC*mU7%^pX7R/^<FZ,Im,r`X!]I*JGP1Y^k8Uq,Z#3@6>oZ&"6^."2d]ifK!,\G_l2$Q5cStH;D<<S
%4i+@<Y:'Fr"j9m@6-ua:2RCGU$Y^HVkt2pkBgGkCGsW1uR4?+J43-3`aagac)l"/'2>3,?\(,l=clJHZ(66`SRe^p=9dmpN)jrdU
%$Y?"jaYOg&gu.#Z'CMV\fj6*1Tf3*ShR)s;@5eFh5+eFkIO\h0h%tVXZ!]NefR2qa^l5:SmI&"50"_bhhG'q#pCc`HA9j_];i`>@
%F5"h/<</O./6W$m^'K]cNFS4qn0f#RWO\V2KfJYcmM[c4&'G2c.]ViP\-I5kI-;;DeMh>.@\djTL0i2ML+<*.Bo;D(?T?h<G3QW$
%!_ToT3]E=#Be.jO>]CVo&"iY"eZD+\hFq5,S$q2.)&h!sq^N&O*7^H:r/FDgLNt#t:"4ukO`>/]::)$T?H0Upc6,?M0(P2mRI-lR
%GB`1g@B&$`IL4=E[4!!r:g,;-kgE4[[,GgaWJ7V>AbWW`*1>h6:`cHSoM%tsmL#bJAaiNb<a0_nq\OmO>8Gqh*hH:6VV\=ZoCDfg
%.'uLAN*.RV4Le%UNYl%)kr4U8\MlM_^HetXPgmA$D.4oX:`,kDj$>06:dt$,hBY=D".>M#8dS$]!p9UIm@1Q@g6l<8/,T>laAg$B
%hR+u3#@IZF3B!6?aDTW+G-^8*Ye)NcLm;2G%N\b.8_1V8pVaCqf[R$\QN7>5rg%g4^.nt^_TY]X.V>FBTu(=0g8FDH5Tm&#)tF'#
%bYC7\UC@T;q*j&uD+dDgE&INH_f%^3'26:EH2!j^r=g1(puF]&Um'Wp=SCMpa=hf>6:-U-D]X2mqeCu,%,JL*6ahfjX/i_b%*>]Q
%"]A7JNqUq;[k=T@YMC6q[[ipVOSlQdjs<?9q:2[Ga+L`6h$%I)j]l>PLJS3p^L9/8&=aV#Em+ePDsd^L$nmKU-AP2F!WWmX.M--K
%\F/'s6<[fhQX3Q8Z#HV04Gr"Q.M4&BpHncJ[G\<'/$Y6,0VnB3Ss7@H#WerHKtZ/=ZbC5@@;e%DS6lita<l4h=*-5<%c^G=o\C]K
%E_5I*aLQ:BB-F)W>bMQ&QM8bq(nEO3XSmeM]!h:q+PZ%(nV,6g$)`o>;nsenT@H*rh75ff=%8!L<ADfZIf2?>T6]*--A[5Lmtj!J
%S@5V\4ke$C2E/Gg1cubS`Sl].&unbha`=Xo2.Z^0hKkWm2?PT7U9/ZS?D_dq(`CGk;`g!YEj!#4p4ui,ApEo6DoV32)JBGSdE?fs
%W&kb\Se34pC-Y'O)-k.uO+fhE#/)9nYK5\(Vsj'-eq;6^^_WNnMF%6gcHlB:dNci&`s<1K,KQD^Gs3>*)o"GVRFE@`PHa`e,[Uu`
%L0^%(2KqkYkf[4Xo(.)4L+YB7]@i5O,9P*SESVQ&6\V>1rNFlf'%(O=1Q%o21EI2`Nl&Y4-0O^MHIS@+m/%/AVYOsD3eaRL4u$We
%hGe%15X%4$HKbCq-W/D%eJ[YR'Sjcmkfb2MdC[ETh4*O9+L<+fZd(e^EmrM\8"e`*.ED_s^0>Lu/A-;X]f5hkK\0R?n*Wn/gHI0d
%-0?QFs"'dXD@hkEB0Yst2pJDt7lg=`r(T0^hO@/JDse)$+Okq27"=`hNG8u\Z_l<ihRME*H\7cQH39_#h*2iPP^7rh*]7l>D8!P;
%LZ<!UG1Q/=E`OjM)'D#K"sBo*Y+Ul!(2t&r;G*%M1X5H/!('btUKe^aCN"Z'+^j'Q>nOcHjE:f!G2p1QfCjndVk'D@-T&S\7)n^%
%2nRJ4LqDU>W?KO]mB<Cqf=6!uG.$-'o&7DsgO^g"ML,\:qt+_2G`7Ho`lWnBV'pIMI$@XfMap'L@,YFQTOdk<Dl:C0J$(?@4SKsE
%S(^_E>+9cqC;/sZ7aareZ[XQUe8"/j?2?EG\@*,>O4%j`)2AITamtDk<JQ`NGa6LF@de;3eKi8e!M74T:#Gm6_ZEOaqu2!41s_-K
%.6Mq?Kf*7u<O6I@%,?-k&9USF+$Tldm(%d1A"=T?TAaR!<d42TKilU-XbVVGN2Loo1W-siA5NeM3\OPn_L]$9:S\Gb0;Z?f3^I[#
%,[r0]"JdjI55#1pLSV[4ET""!LGQ9_=R17LF9BQSmt9ZCfboSeRQ[sE+jG]hHf9nX+_.`6W9-`m*\>hkAco"+Y+K(B34s%l@Gu$O
%F"[ZJXb9G58D;b(*#h;_;`;a/V&UEI3#V\E,Bs[ho&563j=/pH\s;6X++dXQ/DN)UYWH'\?hX*I!Q%;:K499F9k.Mt&oQ-aX]90R
%^QZ>;4cP1Y?]n_#$92<W3_W?2Y!]0?]Q,r*4j5lBA9sm:b\i#YCn[eH2Qm1ekHb,0\;$cZ0ah]a@E57r2tLRZa7=n<XfE>L+L47U
%ihiQ-?-.Fb0>(oK4l_H[[Xfu;l:.U",W3hKViL@4QE=IQl<*]<)2W^3*Se@#o,H1Dc(=:^GeQ;`K*2o-.ELW])Oq$+k2+ms)q?e@
%Kef`CQDXh^`*H'(+_#)qBauUh9`41YD*:L_PkcrGYgL7%;N!bEJ6`+?k.q2j+EsB7jd+B$#r6uS@@2mKQMF;hK,#'a_dRcH2>61h
%oL"JR!V`;M)\&a&L"kbK*t8iG8ZV4ooElo7bXgR^eC9iI(9a[k,!s&Qo]Da(c,k?C/.[V->S7oe!7"I2#C08PWT[ZibfKdnNE]Hf
%R410r%nYhPq1GZ1S$q20R9dH$4:!!#n1mA?,ptE&Cf9E#p_OCC'AkTC^n>_4/t6,c;lOs*m<850@rLbZmg!D6q0jfUo,N84G*lo]
%lkGOlA:'3L)forTbfhI9\LQ_L\%!ue?i"Oe2`8>N*jLO8U08a>F7QdE)T+\DaKi'8LS_>*@R-Rmr\^>o;%.ClBM1qb6:cAWX;/Tn
%DH9(M^k`M.TL>`K%cAt,nTf!CEcTFa,mZ*eIYY:o-Q0?DL(?n2A1aP.Y1$,J.*JEspn0]lhq%_/@DnqZChlpHcIoVu\_o'<-!3P,
%k.sZ>TE7A3(Z@cmTZE\i3c0odV2r08DbiIe4_#n2+ke;%9,hLG01io_`@j.nWmVk;WtdU;YCKChO@)>/90"!!"/.[;^CcMMf0&++
%_tgo0Ad^*5ZlL<?L9H:.:LR@4jF_Q!=?aKbn1c'$=QbCHlo6^;ih.%@Om]gVKHp,)_gQ]]^)pBZ/3c/!n8nTUd,G9o1q9ogrlFRm
%0Q_b\FFS]^`EiZ1DmiH9Da^%m7j3;V3$F9Ff#/=qR,VXXE+:Fq72aT#)KIgrSMUnd)Q%QN#eA+!7R?F@\Z!koegPB;N"WAlY9)X.
%Ep_='kHfgK@dec,2lhC?58j0>R[(tJc[lrIjlGAXe/,'>R"Prn`&KaTm[A?#5K1KVY'JPOoMcF.eCSu!F(Cnh#W:\98%;+Q]#K3&
%QIb/fUJJkJ)/DJUY!_c\C-S@f/6?5`X#t4X_+j2ME.^G_R&;.nV"5UKm0CompM)0OReFYl=!,Qm]VbY3;+$I,9>EV!QcAUE.6XJP
%MPeUWOpY;59`'C-"n5Pu`\Jg`JkumeP9^#)9j<[)o:kp\jgh1D[.Vdp:]r#To<Fq?2[<asLj</`?M*<kK-O$;=kst`m5YRaHIpfe
%aa$VXJa\OAC",\Zl2;b.OMtU'Y3ujI\ZCHtRer-^0UgrZA?0To7AG*7&=7A1\@2$+.cE8H#AEgWE4gts"'`*Za>$rdO7EUH3=;Z4
%r52B;=Z\n+6ht/K"j,rtY-Ec<Gtn)89M_F/[!GW!fWr\Om(5&(!Uh1H"<'0kq#N?lNAra"6MY%GcOAqTV#52\fL)cof9@A]qHJ.+
%fU).2<T@2i6c)Z+_-!4R0fj)h=Z.c0AlDb;jbM*G(e*O3l2.?[LV7t-q-bd*C+a?P5Cd*S?UNLp)kTKu.ce-XV_(9044<o$r#gPE
%m<kWGh6cgQ0/"e>n3E[IG6WDfr35:ef7jPMUTf_*7@Esfb5rFf>`*k@AJ<2scmuOl%?YtIrG^B@Rjm]#NO1`5h3[[7oe%&!Oph@T
%N&^MP>-U0>dg1JL]CH'FR,YCOQ7Fl;9j@)Sbu#`3bL\h?+#Za%Y[IY?7Il;SOU.'EZ6a3khL0Ej?ciluS\2I,V*eu*2f67?2q3Im
%:(qf)Y5GNkLPl3W9;Q:#%R-@\'?Uj?&I:uSg0FFS,]-bqTiXSVQ^bG?h&@?37%B%-MBh^90kr`7lk\@&R2'ZI-.H%i>B?nVR)PQc
%")..8*1mZ$FP#$S4#:=Ui:O>,V.jL4\Vs^^o^eP'm%G'Qaq#$fQ:3RM'qtO*9"jD39W\&mWV:SuGA0Q6_(D^Kn(X!>9S!UB3+o7#
%,?V[&)0"$"@o_"Ff'BMg%2D5Umi5>Uk$q=:>Y71cT+9]!eKb\<&_,2B>kou`KGr<hj"QW#1]5I5J\YY8mWM3S/P8cGp2cfq`g-&I
%NDVKA0/G1gOs(cM2e8%KkXJkToM9l9E7SoJ_Hod"3SPJei"f%t.2ec#[<@;f:3QZ9d4)7QP3XFl)<u:`,/,eZK*8"$p-QE%'.gY\
%_T2T?h9J%)SMS`O1m($(8EZ"@2"':4#pWRU\mkrm17e2AQ-&Z;+u,XER\a_,Srk$DQ=Wf%'Sj&%R`X7<NQ;di!5DnKhFeE8Mk%m]
%NaPu;KiY`qi#o)6DAk3be6=e>?J_77l<;q$5P]8T95RG\o7T7T=c%rm#+S?*GL%>a"J*>h[NtTj"GhYonKDj0dW2r?g5sM,&WcY,
%qTQ*Z4ZnABo@EUBS%<i^Eo4`&;PV=(-6(EqZ4+UeUA1!4(MakfK4>d=VaAhh9hQ*O/n.^b>C&7b)3Nb`D!LB[LPdl[2-q\1dqZ.q
%.bg[Y9Q6&8Kf8:-SUW#=,SI41[u))q?,m]2%?u7RC$\]@N]DD=KK<4ZNOrA/Gfc*gDYdD'oA%-8Aec$qNTO.A*0Si42CSq92-b8K
%;L=ej^,GY_1]*]br<:J!:_)!\5f%*N.7MbUA6I-24Z83*IHZpE@!D']9$!/DcdQ!Agl:O3]@8-M8#E6Qg3SRNWlMQ]d$nMJ$c"<,
%^)19`lOih/j4nfG00^!l5uWNA`gTq*^/=;ipm1aMc%IA42/*0(C$Hk)C@q>Z$dA+JQZl$jL`0SO6-ql4[0!&F!&ruC4jqHidt`I:
%OGY]/pguKprIS&6^2*%CDc5D_hk=YW%VC8/,&qko%@eT/Ges\]Ho3A?Q,fGj0*q[q4:AdR,j6juGd=LWJ)@Wr?CQ6HUoH4AH/Un*
%5pSf*Y!<!#;6nL:/1MWl<ii&,4(GSYAGAbVJ\<emM:qJO!Ias!al6RZH?3`Ak+m??J4OI'0pX]13;J`!U.Zi:%UtEPH,V$7MYYHd
%m:2IEZ]U`B$Qss$G)S@s]t6(7$&0CQpkr3XnUO0N*8QL%WX&TlF;Q<a4EjY8\B=L'7/(,F8A_!urHm#C]/tY0R.5^45&1b19,-HF
%-.PVihOS!)l<J'[OMO%0">H&RWAT?!*U:5l2"pA*^^s-/.A[4&M:GXl]ZAC;RAT>BS&3A3aA2<DQ/n@lDt#[+o5@ONJOW.BHuNrg
%]tO64L=A^mAKBj8$r)E$/e05;,.k7S8r6'f10m2*^Y6E(Dr.mtW,jT;.>k2!'P">i%^Do?MI1/b)<PrWQi.f-/%`&!Z'g^,V'UJC
%iq<R==N*(\*'Er-`57*<mM/m,i(LRE`N@0P9NTPZdo)EnjT)Jn0jO1%"2A$Tn,9O%kE=AHn$S6oATq8(4S:H8rFEu-)JHA]]ZH5)
%JV11;i3*'p]?'YU"bj*>J)VQ*N$KCa6rD2UND6*:$"r68EO;9,_mTtT8Wd$C'Mr7"HQ^L(Jh'7nAYVa6]\Ir5)Cb>upQ8`hg^51-
%9Yb*&@4'of&IA38OPooU=DFQj%k<ak'sWI;`-cX:9']h&94WrW'U:!)js<Yo,R^h&)aFK_(@HF;'7Pu&N&&WWA.2G<3@2kH'<WVq
%A^'2ZPWpgdfj2,5gg5VQ^SurQ9Rn+T0g@\R.8NP=eLq.N#kT[[<Wa(V`1Ls@f235=F*qqE5J;7EA&p[#4h&d(kb1C0+UL_IPJKh#
%Bk.^>@>#"+>l&`HFa61mp`E:m#^ooA1+"Waq27`HO8GVj\Ool9*TY]Dj:.H]k[gGh_,Wb%/ZHD(h6W\p5?pU/`CMeH4TZ-N%&H;s
%J>[3^OM85]aC(QM3&r@a&V?lsJUI<M6)lP,d[O+ZcI]4I=t;DS5R&>LgPIbJZt"*AS%q?E7<&%MYorjM_LI>KP-p7^!22BX7lkuM
%V_8Ja(]ujrcnRPTA2d7(DF]p+?&5<FZ2ONZ:430+^n#;'Qb(6^q45)-P/.(Q2'8"M'j6:ORDs5QS\c\m%h]$(fb[T41,R4($P>8U
%92&AV+o>FIn-J5\fjd/ahodC>H2["L/bSD\g-S2)G18X7K6rBTVL@>^#3+@7?WBu-ql@9J*Q.sBXkS8LTLS]oD@b$I.)?\Ig"g2=
%iH*;0jRT&VPEd`E?2OjTPBBR*oUJ^iJ^SlWO+RaIR;_##kOus:L;:K[s3Rokc51*2md=\tEnAr2/-A".T-pj>?UVqj;5JU;NR#b`
%]<a:$$UTs])_f3OEZq53]"fPs!tLf_:lih:Nio+q?!E@;B>4#ao;!MFi[f\]XFt\-[_Nml,QD7eNViq,9m:BM)3">dOIgtbSV1Tu
%9;;TFO`X4/2YJhm4Q#D`H2$4a(49RP\?D\:CN]qmO^_(f<"[%l2f'C`r:K)91l,acD3gq$n7JW'He6ofmZ]`3c_GQl4;g-_YUhS@
%V8>"SY[tU0W05\hQdLq@#iV<AJpl!4/oG$P7lMD;_W*1!a\-+SF5uj:CG0dBR,9jsp?^(f#RcUZ=A3[t&d1iTe29A,Af/hYkE&=s
%Vtk@7>^>A,Z%q$&^!u4f?n!)HLbNI&]9l"8E,Ej.;Cli&UD+1aToEN7pct8un3Q6#n_(Keg6M<3j-k"&l!\?)R&eO@>tHOpbTSi7
%XHeR+&ujA^iQm`HpQYkjadfk!V2(iIj96L6b\e1<IFlp-bkO:84o^gF0L`e#m:9SH(n\!&c6kPO0iRVh->#h#RTTf7._5XUOZ9SZ
%=Ae"RWH\*5ACL4f_R8=n3<5HQpH([bd%!tkM:93m!!j)Tjtrel`[0D8!m>-Gg=X$L"8HQU`[+C-*FLetp14'Qq0(E-KeM7_,AB''
%ZKlKcR"ioo0p'HgQoFo=X`sLDA?WnrS)Gu*Mh<HUPZ(P2,h_8LS*.&7I0""SWnSn.*cZ;h86]?#lMII8h3I;g=jek5VaijFWg(W2
%Ul,sqmO36f5`k8o$"WX*c]'-3j;?c2p>568DFfLE?!2:%p8(W<(WM_?4?gY;ao\iVSRa3OJCma&7<*+(oYe/6CXRlUK6b8`P@dF2
%Uf:*k\ir^\I3eQAOJIH^^]O"7\)tT1@=*gNlmA#UYN<*&8rAp$bVI.5k1tNm3<ppu[LrVCG]XJ0Ge5h=DOkS+mQ[+?F?d[39:r#O
%@1Vh(+>*M0F#m'uHe*DL*g/,"4-Usf5C>'h!/g^+;>oJ:'&g;X2rID#Nb^e\p!^g^bK\hZnHBuS&U0_Sk.F`(n4uBHLJojI)EuLQ
%*!XsDD>9_n2BB`J84jl^Lk/;Upa*KnC-HF#c@6<1&#)s9EhH]Gh4!+LpH5)2d5t(ek-B7'`">f+%hCg]rT;AhAeml"Sp3Pps$QF>
%rHTL4b^Ok_2ZoW^lLWMcphJS57>`0Fo&hs02Lij"T=5NdS0LP@T[!!dAPQ0+2hs$Qc):K'PuqcH)Rkn`nZn7m_JV5oTYr"#&hlf)
%FI+q:=igA^Z6X(4qL`n8Xm4k@bd+n!P)iQ#k&?YgS/YW)^3`oH71*Or0K5<l>-Z/G7g1BMGhb*m%Sh%n\]1`m(a7]-CR:@":fO4F
%jW_bs'\2]d3S_@Rh!(X]FW/B;T^H,j6Zph@;GfQf[WGfhs83u%rq@N6oD[YIm;N$bc[YcTa1qZ?^Wm4:r3(VGl];)5msk.?T7?e9
%+9(B*s7jdh++O(/hu8A$o>gkos47d2rVMZUpcnfXpE+n[a8c)3s,/E&U\KI+rpenFbCBB+^\g;(Z0#^~>
%AI9_PrivateDataEnd
