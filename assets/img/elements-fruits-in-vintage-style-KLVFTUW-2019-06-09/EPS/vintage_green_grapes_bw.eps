%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_green_grapes_bw.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/11/2016
%%BoundingBox: 0 0 726 463
%%HiResBoundingBox: 0 0 725.6192 462.8555
%%CropBox: 0 0 725.6192 462.8555
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_green_vinograd_bw</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-11T23:20:43+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-11T23:20:44+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-11T23:20:44+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>164</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXmn55+b20&#xA;7y03lzTWMmv+YFNvbwJuyW5/v5Wp0XgGWv09jleQ7UzgN7UP+cfvPWqeZPLNxp+sM0mpaMYUM715&#xA;yW08fKB3J+01EbfuKHrXHHKwuSNF6lljB2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KtSSRxo&#xA;XkYIiirMxoAPcnFUp1Hzf5W06W3hvdVtYJ7pkW2gaVDJIZSAnBASzBuQ3ApgJCaKb4UOxV2KuxV2&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:6EBBE47CC6E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:6FBBE47CC6E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:987e27dd-e019-0d4c-b3ac-4eaeae5216ea</stRef:instanceID>
            <stRef:documentID>xmp.did:86C4BA9779206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -462.855 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 462.855 li
725.619 462.855 li
725.619 0 li
cp
clp
[1 0 0 1 0 0 ]ct
643.702 41.5952 mo
643.558 50.8569 637.163 63.7749 634.722 68.3804 cv
634.679 69.5522 634.601 70.6772 634.483 71.7671 cv
634.53 71.7437 li
634.187 81.603 li
633.897 90.4897 631.905 97.2358 629.874 101.88 cv
631.249 102.818 632.171 103.626 632.335 103.767 cv
634.53 105.693 li
634.64 108.611 li
634.929 116.083 633.78 121.779 632.327 125.908 cv
636.116 127.908 639.124 130.267 639.476 130.556 cv
644.515 134.576 li
640.765 139.826 li
638.585 142.876 635.491 145.767 632.366 148.263 cv
635.171 149.427 637.628 150.576 639.405 151.451 cv
641.167 152.31 642.218 152.873 642.218 152.873 cv
650.21 157.166 li
647.683 159.74 li
653.144 161.333 657.878 162.892 658.218 163.005 cv
666.55 165.748 li
661.812 173.13 li
661.476 173.658 653.452 186.001 641.155 191.099 cv
639.796 191.658 639.444 192.103 639.444 192.107 cv
639.456 192.091 639.479 192.091 639.507 192.103 cv
639.702 192.197 640.046 192.9 640.374 193.33 cv
643.522 197.392 li
640.554 201.626 li
637.952 205.154 635.124 208.056 632.538 210.345 cv
635.499 212.119 li
630.718 218.201 li
625.233 225.173 617.796 229.947 612.054 232.873 cv
619.593 242.752 li
611.425 246.138 li
605.851 248.442 599.351 249.396 593.94 249.739 cv
596.202 254.681 li
587.429 256.138 li
584.593 256.606 581.632 256.595 578.772 256.306 cv
581.171 261.396 li
574.882 264.243 li
566.663 267.962 558.663 269.083 552.929 269.317 cv
553.444 275.251 li
545.694 274.903 li
541.179 274.692 537.21 273.95 533.874 273.013 cv
533.823 273.376 532.694 279.731 532.694 279.731 cv
526.796 279.532 li
520.437 279.321 514.202 277.743 508.296 274.853 cv
507.503 274.466 506.749 274.067 506.026 273.669 cv
505.335 275.626 504.69 276.978 504.53 277.31 cv
501.733 283.024 li
495.835 280.61 li
494.147 279.919 492.554 279.196 491.05 278.462 cv
486.491 276.231 482.8 273.876 479.952 271.79 cv
477.546 276.724 li
470.819 270.235 li
466.358 265.942 463.53 261.513 461.749 257.446 cv
459.702 259.868 li
455.452 249.478 li
450.296 236.908 455.616 225.544 462.999 209.826 cv
465.948 203.494 li
470.964 192.58 469.558 187.087 468.827 185.376 cv
467.39 184.732 464.663 183.724 459.296 182.404 cv
456.093 181.615 450.784 180.908 444.632 180.091 cv
430.296 178.177 412.452 175.802 400.421 169.908 cv
399.292 169.337 li
380.78 159.63 379.483 148.771 379.413 146.693 cv
378.952 133.572 li
389.937 140.767 li
390.663 141.24 391.351 141.634 392.03 141.97 cv
393.343 142.607 394.46 142.943 395.382 143.087 cv
396.062 134.974 401.726 130.212 405.296 128.642 cv
409.515 126.794 li
412.147 129.376 li
412.335 128.88 412.534 128.205 412.726 127.322 cv
414.991 116.685 419.706 105.841 419.913 105.384 cv
423.733 96.6108 li
425.308 98.064 li
426.944 90.1187 429.601 82.5757 430.042 81.3491 cv
435.593 65.896 li
437.554 70.064 li
439.163 67.4585 440.608 66.0874 440.944 65.7749 cv
441.124 65.6226 li
442.933 46.439 450.577 40.0132 452.327 38.7827 cv
457.812 34.9229 li
465.851 46.0093 li
474.315 33.1069 485.819 28.2007 486.413 27.9507 cv
496.792 23.6382 li
496.206 30.2593 li
503.702 25.6265 510.601 24.1187 511.085 24.0249 cv
523.796 21.3726 li
522.413 24.6304 li
528.124 22.4155 532.952 20.9229 533.952 20.6226 cv
541.437 18.353 li
542.64 26.0757 li
543.858 33.7979 544.304 44.978 544.483 52.5796 cv
554.101 50.6226 li
553.019 57.2979 li
560.167 52.0405 567.737 47.439 568.171 47.1772 cv
584.874 37.064 li
582.577 43.2358 li
587.89 41.9468 592.272 41.7866 593.202 41.7671 cv
602.96 41.5522 li
601.835 44.8374 li
606.437 44.1069 610.39 44.0562 611.749 44.0679 cv
614.78 44.0874 li
621.89 40.8882 634.062 35.3062 634.062 35.3062 cv
643.866 30.8179 li
643.702 41.5952 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.27451 .207843 .145098 rgb
f
473.71 180.384 mo
473.71 180.384 480.69 187.705 472.136 206.333 cv
463.577 224.966 457.179 235.752 461.741 246.896 cv
465.726 242.166 li
465.726 242.166 463.815 254.036 475.538 265.341 cv
477.737 260.856 li
477.737 260.856 484.511 268.622 498.421 274.317 cv
498.421 274.317 501.718 267.583 501.222 261.771 cv
501.222 261.771 511.155 272.204 527.03 272.739 cv
527.03 272.739 528.312 265.571 526.046 262.235 cv
526.046 262.235 533.476 267.54 545.999 268.103 cv
545.499 262.298 li
545.499 262.298 558.483 264.196 572.077 258.044 cv
566.612 246.462 li
566.612 246.462 577.835 250.837 586.319 249.431 cv
583.351 242.971 li
583.351 242.971 598.347 244.189 608.819 239.846 cv
601.366 230.072 li
601.366 230.072 616.53 225.251 625.37 213.994 cv
620.21 210.904 li
620.21 210.904 628.437 206.587 635.073 197.587 cv
635.073 197.587 628.077 189.15 638.546 184.814 cv
649.019 180.478 656.085 169.462 656.085 169.462 cv
656.085 169.462 642.179 164.88 634.562 163.38 cv
638.999 158.869 li
638.999 158.869 627.093 152.486 617.015 150.337 cv
617.015 150.337 629.921 143.294 635.226 135.869 cv
635.226 135.869 628.022 130.119 622.655 129.712 cv
622.655 129.712 628.417 123.63 627.843 108.873 cv
627.843 108.873 623.562 105.107 620.214 105.138 cv
620.214 105.138 626.866 97.2554 627.39 81.3726 cv
624.718 82.2905 li
624.718 82.2905 628.015 75.5601 627.944 66.6108 cv
627.944 66.6108 636.757 50.8843 636.897 41.4937 cv
636.897 41.4937 617.519 50.3765 613.288 52.1968 cv
609.054 54.0249 609.054 54.0249 609.054 54.0249 cv
611.706 50.8687 li
611.706 50.8687 596.726 50.7671 590.733 56.189 cv
593.351 48.564 li
593.351 48.564 577.022 48.9194 569.944 57.7046 cv
571.698 52.9976 li
571.698 52.9976 557.468 61.6147 550.358 68.1577 cv
543.249 74.6968 545.804 59.2476 545.804 59.2476 cv
537.78 60.8804 li
537.78 60.8804 537.812 39.1929 535.929 27.1304 cv
535.929 27.1304 516.968 32.8843 508.968 38.9858 cv
512.476 30.6851 li
512.476 30.6851 495.726 34.1729 487.796 48.1069 cv
489.03 34.2319 li
489.03 34.2319 473.655 40.6265 466.874 59.0171 cv
456.241 44.3491 li
456.241 44.3491 446.905 50.9116 447.569 76.8452 cv
445.507 70.8257 li
445.507 70.8257 439.511 76.2437 439.179 89.439 cv
436.44 83.646 li
436.44 83.646 430.327 100.693 430.843 109.853 cv
431.374 119.017 429.968 111.654 429.968 111.654 cv
426.14 108.107 li
426.14 108.107 421.53 118.658 419.382 128.736 cv
417.226 138.822 411.409 138.197 408.03 134.873 cv
408.03 134.873 400.233 138.291 402.554 148.333 cv
402.554 148.333 396.327 153.08 386.21 146.455 cv
386.21 146.455 386.507 154.951 402.456 163.318 cv
418.397 171.681 449.499 172.99 460.921 175.794 cv
472.351 178.603 473.71 180.384 473.71 180.384 cv
cp
1 1 1 rgb
f
474.101 173.896 mo
474.101 173.896 533.319 142.763 622.069 60.3999 cv
622.069 60.3999 599.937 87.4194 562.163 116.806 cv
524.401 146.189 485.491 172.24 479.702 174.97 cv
473.913 177.697 471.437 177.052 474.101 173.896 cv
cp
.27451 .207843 .145098 rgb
f
641.163 177.189 mo
641.163 177.189 549.562 186.904 474.101 173.896 cv
474.101 173.896 470.335 178.173 477.944 178.56 cv
482.866 178.81 567.46 192.107 641.163 177.189 cv
cp
f
529.507 34.564 mo
529.507 34.564 488.144 115.638 474.101 173.896 cv
474.101 173.896 471.456 179.283 472.069 172.345 cv
472.679 165.408 491.335 96.5991 529.507 34.564 cv
cp
f
gsave
420.022 142.064 mo
420.022 142.064 420.272 130.806 425.71 124.017 cv
430.858 124.947 li
430.858 124.947 429.55 116.259 437.304 109.998 cv
446.218 114.095 li
446.218 114.095 445.655 98.3999 454.655 87.1968 cv
458.687 91.396 li
458.687 91.396 466.272 68.7979 484.288 54.2944 cv
502.312 39.7944 500.616 44.0249 507.69 43.9351 cv
514.765 43.8452 531.155 32.7437 531.155 32.7437 cv
542.671 68.689 li
542.671 68.689 572.495 47.7515 594.522 54.1069 cv
616.546 60.4663 623.968 56.1929 623.968 56.1929 cv
623.968 56.1929 625.14 101.22 623.116 119.732 cv
621.085 138.244 619.804 162.033 626.327 168.626 cv
632.851 175.22 645.647 171.13 638.546 184.814 cv
631.444 198.494 585.015 257.61 553.202 265.931 cv
521.382 274.251 454.671 254.794 455.413 235.502 cv
456.155 216.212 496.038 179.447 471.104 175.712 cv
446.171 171.978 435.78 167.423 430.452 164.626 cv
425.124 161.833 420.022 142.064 420.022 142.064 cv
cp
clp
590.827 94.8647 mo
590.827 94.8647 608.468 93.2827 622.03 81.7827 cv
622.03 81.7827 618.069 89.0249 604.538 93.9702 cv
591.007 98.9155 588.569 97.8765 590.827 94.8647 cv
cp
f
578.284 108.302 mo
578.284 108.302 602.265 109.267 620.026 95.9194 cv
620.026 95.9194 612.64 105.916 595.835 109.748 cv
579.03 113.58 576.991 109.712 578.284 108.302 cv
cp
f
569.476 119.189 mo
569.476 119.189 592.272 126.447 616.741 109.279 cv
616.741 109.279 609.741 118.63 594.093 122.728 cv
578.444 126.826 567.663 122.908 569.476 119.189 cv
cp
f
616.921 123.431 mo
616.921 123.431 591.03 140.732 555.526 129.166 cv
555.526 129.166 554.069 133.056 564.397 135.419 cv
574.726 137.783 598.663 137.107 616.921 123.431 cv
cp
f
616.655 136.869 mo
616.655 136.869 586.628 160.314 546.468 141.189 cv
546.468 141.189 550.202 140.822 554.827 141.876 cv
559.444 142.931 585.069 150.595 616.655 136.869 cv
cp
f
612.796 149.001 mo
612.796 149.001 573.999 176.775 524.108 149.111 cv
524.108 149.111 536.187 151.619 546.526 154.826 cv
551.054 156.228 577.983 165.154 612.796 149.001 cv
cp
f
620.823 163.966 mo
620.823 163.966 571.628 187.181 515.226 163.017 cv
515.226 163.017 517.991 161.142 530.913 164.646 cv
550.491 169.958 568.206 177.642 620.823 163.966 cv
cp
f
584.687 89.814 mo
584.687 89.814 583.038 73.021 600.878 56.6499 cv
600.878 56.6499 591.179 66.1187 588.991 78.3882 cv
586.804 90.6616 584.687 89.814 584.687 89.814 cv
cp
f
581.905 56.0991 mo
581.905 56.0991 565.647 77.814 569.327 100.666 cv
569.327 100.666 572.022 100.552 572.257 93.6694 cv
572.483 86.7905 571.397 73.4077 581.905 56.0991 cv
cp
f
562.507 64.9351 mo
562.507 64.9351 551.022 83.8452 558.022 109.158 cv
558.022 109.158 554.288 109.525 553.179 100.513 cv
552.069 91.5093 553.046 77.6226 562.507 64.9351 cv
cp
f
544.562 76.4155 mo
544.562 76.4155 535.46 95.0171 545.624 118.74 cv
545.624 118.74 542.71 121.361 539.991 113.564 cv
537.269 105.771 537.749 87.6343 544.562 76.4155 cv
cp
f
532.933 62.3335 mo
532.933 62.3335 515.046 87.4507 532.265 127.736 cv
532.265 127.736 525.522 125.837 523.976 113.931 cv
522.429 102.025 519.202 79.8843 532.933 62.3335 cv
cp
f
517.726 67.1421 mo
517.726 67.1421 500.448 99.2085 515.608 139.998 cv
515.608 139.998 510.854 138.431 508.347 125.939 cv
505.839 113.447 502.796 93.1729 517.726 67.1421 cv
cp
f
507.69 43.9351 mo
507.69 43.9351 483.062 104.001 502.749 151.056 cv
502.749 151.056 499.155 149.751 496.562 140.283 cv
493.979 130.814 481.538 100.009 507.69 43.9351 cv
cp
f
503.069 167.626 mo
503.069 167.626 517.483 183.4 556.765 180.349 cv
556.765 180.349 514.108 188.951 503.069 167.626 cv
cp
f
629.167 191.408 mo
629.167 191.408 555.382 218.99 489.272 181.919 cv
489.272 181.919 497.632 182.603 512.202 187.509 cv
526.772 192.408 562.913 205.138 629.167 191.408 cv
cp
f
617.233 209.236 mo
617.233 209.236 548.425 231.029 489.147 194.064 cv
489.147 194.064 496.796 195.08 509.987 200.236 cv
523.187 205.396 555.878 218.72 617.233 209.236 cv
cp
f
603.851 222.982 mo
603.851 222.982 533.476 242.643 477.358 201.041 cv
477.358 201.041 484.905 202.673 497.64 208.865 cv
510.374 215.064 539.874 231.517 603.851 222.982 cv
cp
f
595.421 235.412 mo
595.421 235.412 528.179 254.403 474.71 214.791 cv
474.71 214.791 481.909 216.326 494.054 222.216 cv
506.194 228.103 534.319 243.752 595.421 235.412 cv
cp
f
564.601 250.04 mo
564.601 250.04 513.812 259.993 470.976 227.439 cv
470.976 227.439 478.179 228.974 490.323 234.869 cv
502.468 240.756 525.874 252.407 564.601 250.04 cv
cp
f
560.819 261.337 mo
560.819 261.337 510.015 271.294 467.187 238.74 cv
467.187 238.74 474.386 240.275 486.53 246.165 cv
498.679 252.056 522.085 263.704 560.819 261.337 cv
cp
f
490.159 51.9819 mo
490.159 51.9819 469.39 113.49 492.022 159.197 cv
492.022 159.197 488.354 158.119 485.171 148.837 cv
481.983 139.556 467.616 109.595 490.159 51.9819 cv
cp
f
475.718 46.0171 mo
475.718 46.0171 452.726 112.783 482.616 165.041 cv
482.616 165.041 478.874 164.271 474.944 155.275 cv
471.011 146.287 452.007 113.228 475.718 46.0171 cv
cp
f
461.452 49.6538 mo
461.452 49.6538 439.21 116.669 469.71 168.595 cv
469.71 168.595 465.952 167.861 461.917 158.916 cv
457.882 149.97 438.515 117.13 461.452 49.6538 cv
cp
f
447.444 48.1655 mo
447.444 48.1655 425.202 115.181 455.702 167.103 cv
455.702 167.103 451.937 166.373 447.905 157.431 cv
443.87 148.478 424.507 115.642 447.444 48.1655 cv
cp
f
434.378 49.4468 mo
434.378 49.4468 412.14 116.462 442.632 168.384 cv
442.632 168.384 438.874 167.658 434.843 158.708 cv
430.812 149.763 411.444 116.919 434.378 49.4468 cv
cp
f
grestore
203.815 146.262 mo
203.815 146.262 218.897 110.047 233.815 97.2617 cv
254.815 79.2617 274.671 81.4453 269.745 111.355 cv
261.319 115.262 li
261.319 115.262 270.312 98.7617 262.315 92.7617 cv
254.319 86.7617 229.812 101.762 203.815 146.262 cv
cp
f
63.874 433.219 mo
36.1787 435.73 13.292 425.332 4.14746 406.066 cv
-2.52441 392.066 -1.11035 375.434 8.12402 359.246 cv
16.9014 343.848 31.8545 330.551 50.2256 321.816 cv
61.374 316.52 73.374 313.156 84.9287 312.113 cv
112.624 309.598 135.515 319.996 144.659 339.258 cv
151.327 353.266 149.913 369.895 140.679 386.086 cv
131.905 401.484 116.956 414.773 98.5811 423.516 cv
87.4365 428.813 75.4287 432.168 63.874 433.219 cv
cp
f
138.19 342.941 mo
150.683 369.215 132.097 404.16 96.6865 420.996 cv
61.2803 437.836 22.4443 430.191 9.95996 403.918 cv
-2.54004 377.648 16.0381 342.695 51.4482 325.855 cv
86.8623 309.02 125.698 316.668 138.19 342.941 cv
cp
1 1 1 rgb
f
18.8115 404.512 mo
18.8115 404.512 36.8115 430.012 84.0615 415.762 cv
131.312 401.512 141.812 361.012 134.312 343.762 cv
134.312 343.762 133.362 387.773 93.0615 404.512 cv
44.3115 424.762 18.8115 404.512 18.8115 404.512 cv
cp
.27451 .207843 .145098 rgb
f
14.3115 392.766 mo
14.3115 392.766 10.3115 389.766 12.8115 387.762 cv
15.3115 385.762 14.3115 392.766 14.3115 392.766 cv
cp
f
8.31152 374.262 mo
8.31152 374.262 24.8115 322.266 78.8115 323.266 cv
78.8115 323.266 34.3115 326.266 8.31152 374.262 cv
cp
f
gsave
15.8115 402.762 mo
15.8115 402.762 39.8193 424.77 78.3115 413.262 cv
116.812 401.766 139.312 378.258 132.812 335.762 cv
132.812 335.762 126.312 323.266 123.812 330.766 cv
121.312 338.266 97.8076 373.266 71.8115 383.766 cv
45.8115 394.266 26.3193 392.262 22.8115 391.762 cv
19.3115 391.266 9.31152 395.766 15.8115 402.762 cv
cp
clp
122.733 328.609 mo
122.733 328.609 144.624 353.574 129.577 386.707 cv
129.577 386.707 136.694 364.699 122.733 328.609 cv
cp
f
118.011 337.918 mo
118.011 337.918 138.753 363.844 122.226 396.27 cv
122.226 396.27 130.335 374.602 118.011 337.918 cv
cp
f
112.257 346.965 mo
112.257 346.965 131.394 374.098 112.944 405.465 cv
112.944 405.465 122.347 384.324 112.257 346.965 cv
cp
f
107.147 355.566 mo
107.147 355.566 123.632 384.387 102.288 413.871 cv
102.288 413.871 113.651 393.715 107.147 355.566 cv
cp
f
100.456 361.598 mo
100.456 361.598 114.757 391.559 91.2959 419.379 cv
91.2959 419.379 104.116 400.121 100.456 361.598 cv
cp
f
92.6943 368.082 mo
92.6943 368.082 104.702 399.035 79.2217 425.016 cv
79.2217 425.016 93.46 406.77 92.6943 368.082 cv
cp
f
84.5186 372.066 mo
84.5186 372.066 94.6084 403.691 67.5967 428.074 cv
67.5967 428.074 82.9131 410.73 84.5186 372.066 cv
cp
f
75.2568 374.941 mo
75.2568 374.941 83.1592 407.191 54.5303 429.656 cv
54.5303 429.656 71.0146 413.41 75.2568 374.941 cv
cp
f
66.6865 377.527 mo
66.6865 377.527 72.7646 410.168 42.917 430.98 cv
42.917 430.98 60.2842 415.688 66.6865 377.527 cv
cp
f
58.4678 378.762 mo
58.4678 378.762 62.6006 411.703 31.5693 430.715 cv
31.5693 430.715 49.8115 416.484 58.4678 378.762 cv
cp
f
48.6631 381.215 mo
48.6631 381.215 51.167 414.324 19.2412 431.777 cv
19.2412 431.777 38.1592 418.457 48.6631 381.215 cv
cp
f
39.3428 381.84 mo
39.3428 381.84 41.8506 414.949 9.91699 432.402 cv
9.91699 432.402 28.835 419.082 39.3428 381.84 cv
cp
f
grestore
114.788 386.25 mo
101.616 345.422 115.995 304.105 146.858 294.141 cv
177.706 284.184 213.522 309.301 226.702 350.121 cv
239.89 390.949 225.515 432.27 194.647 442.23 cv
163.796 452.191 127.972 427.078 114.788 386.25 cv
cp
f
192.565 435.762 mo
165.233 444.574 133.304 421.477 121.269 384.164 cv
109.222 346.84 121.608 309.441 148.944 300.617 cv
176.272 291.797 211.433 314.359 223.479 351.684 cv
235.53 388.992 219.894 426.938 192.565 435.762 cv
cp
1 1 1 rgb
f
179.3 304.762 mo
179.3 304.762 234.589 327.152 225.046 398.496 cv
225.046 398.496 230.077 343.539 179.3 304.762 cv
cp
f
gsave
139.46 312.203 mo
139.46 312.203 114.218 338.91 135.194 386.465 cv
156.171 434.016 191.952 429.027 191.952 429.027 cv
191.952 429.027 182.159 422.004 178.21 404.441 cv
174.241 386.883 156.124 367.902 150.124 339.02 cv
144.124 310.133 149.698 305.285 149.698 305.285 cv
149.698 305.285 144.163 303.461 139.46 312.203 cv
cp
clp
150.991 317.555 mo
150.991 317.555 130.054 316.168 119.827 335.758 cv
119.827 335.758 131.886 322.664 150.991 317.555 cv
cp
.27451 .207843 .145098 rgb
f
157.269 323.156 mo
157.269 323.156 124.562 327.656 117.905 347.684 cv
117.905 347.684 129.983 332.223 157.269 323.156 cv
cp
f
154.339 332.207 mo
154.339 332.207 122.187 339.684 117.378 360.23 cv
117.378 360.23 127.999 343.723 154.339 332.207 cv
cp
f
157.901 339.988 mo
157.901 339.988 125.765 347.465 120.937 368.016 cv
120.937 368.016 131.562 351.512 157.901 339.988 cv
cp
f
159.71 348.863 mo
159.71 348.863 127.569 356.34 122.749 376.887 cv
122.749 376.887 133.374 360.379 159.71 348.863 cv
cp
f
162.483 357.426 mo
162.483 357.426 130.335 364.902 125.515 385.453 cv
125.515 385.453 136.14 368.941 162.483 357.426 cv
cp
f
165.241 365.988 mo
165.241 365.988 133.104 373.465 128.28 394.02 cv
128.28 394.02 138.905 377.508 165.241 365.988 cv
cp
f
169.761 373.465 mo
169.761 373.465 137.608 380.941 132.8 401.488 cv
132.8 401.488 143.421 384.984 169.761 373.465 cv
cp
f
173.476 381.727 mo
173.476 381.727 141.331 389.203 136.515 409.754 cv
136.515 409.754 147.14 393.238 173.476 381.727 cv
cp
f
177.358 388.871 mo
177.358 388.871 145.21 396.348 140.394 416.895 cv
140.394 416.895 151.022 400.395 177.358 388.871 cv
cp
f
183.472 394.781 mo
183.472 394.781 151.327 402.258 146.511 422.813 cv
146.511 422.813 157.128 406.301 183.472 394.781 cv
cp
f
186.554 402.715 mo
186.554 402.715 154.409 410.191 149.593 430.746 cv
149.593 430.746 160.21 414.238 186.554 402.715 cv
cp
f
189.335 409.711 mo
189.335 409.711 157.194 417.188 152.37 437.73 cv
152.37 437.73 162.991 421.223 189.335 409.711 cv
cp
f
grestore
142.64 312.195 mo
142.64 312.195 115.726 332.973 125.909 375.914 cv
136.093 418.855 169.011 432.938 183.562 432.445 cv
183.562 432.445 146.351 421.336 133.968 376.465 cv
121.585 331.598 142.64 312.195 142.64 312.195 cv
cp
.27451 .207843 .145098 rgb
f
90.2725 375.984 mo
85.5928 367.992 84.3545 353.633 84.0498 348.426 cv
83.4756 347.406 82.96 346.402 82.499 345.41 cv
82.4678 345.449 li
77.6396 336.848 li
73.2803 329.102 71.4834 322.301 70.8037 317.281 cv
69.1436 317.188 67.9287 316.98 67.7178 316.945 cv
64.8428 316.434 li
63.2373 314 li
59.1123 307.762 57.1396 302.297 56.2412 298.012 cv
51.96 298.27 48.167 297.813 47.7178 297.75 cv
41.3232 296.93 li
41.8037 290.496 li
42.085 286.758 43.2217 282.68 44.6006 278.93 cv
41.5928 279.387 38.8975 279.68 36.9287 279.855 cv
34.9756 280.035 33.7881 280.098 33.7881 280.098 cv
24.7295 280.574 li
25.5498 277.066 li
20.0537 278.539 15.2021 279.664 14.8506 279.746 cv
6.30762 281.723 li
6.52246 272.953 li
6.53809 272.328 6.9873 257.613 14.8506 246.871 cv
15.7256 245.691 15.7959 245.129 15.7959 245.125 cv
15.7881 245.145 15.7725 245.156 15.7334 245.16 cv
15.5225 245.18 14.8662 244.762 14.3584 244.566 cv
9.56543 242.723 li
9.90527 237.563 li
10.2959 233.199 11.2061 229.25 12.2334 225.949 cv
8.77246 225.973 li
9.70605 218.293 li
10.7725 209.484 14.6553 201.543 18.0459 196.063 cv
6.47168 191.531 li
11.6982 184.402 li
15.2607 179.535 20.3271 175.348 24.7725 172.242 cv
20.2764 169.195 li
27.0146 163.395 li
29.1943 161.527 31.7373 159.996 34.3271 158.762 cv
29.6318 155.656 li
33.5381 149.953 li
38.6279 142.516 44.8857 137.398 49.6631 134.227 cv
46.1475 129.418 li
52.9482 125.695 li
56.9209 123.527 60.6943 122.105 64.0342 121.176 cv
63.8896 120.84 61.5537 114.82 61.5537 114.82 cv
66.6943 111.93 li
72.249 108.801 78.3975 106.918 84.9443 106.324 cv
85.8193 106.246 86.6748 106.191 87.4951 106.16 cv
87.0732 104.129 86.9209 102.637 86.8857 102.273 cv
86.3115 95.9336 li
92.6006 94.9414 li
94.4053 94.6484 96.1436 94.4414 97.8076 94.2891 cv
102.866 93.8281 107.241 93.9258 110.757 94.2344 cv
110.257 88.7617 li
119.374 90.8164 li
125.413 92.1758 130.128 94.4961 133.761 97.0469 cv
134.253 93.9102 li
143.28 100.59 li
154.21 108.656 155.558 121.129 157.409 138.395 cv
158.179 145.34 li
159.554 157.27 163.608 161.234 165.12 162.324 cv
166.687 162.121 169.53 161.574 174.804 159.914 cv
177.96 158.926 182.862 156.773 188.546 154.281 cv
201.796 148.473 218.276 141.242 231.616 140.035 cv
232.878 139.938 li
253.737 138.629 260.487 147.234 261.624 148.973 cv
268.831 159.949 li
255.706 159.504 li
254.839 159.473 254.042 159.496 253.292 159.563 cv
251.839 159.695 250.714 159.988 249.847 160.348 cv
253.476 167.637 251.112 174.637 248.866 177.84 cv
246.226 181.609 li
242.632 180.766 li
242.733 181.289 242.909 181.969 243.202 182.824 cv
246.788 193.09 248.39 204.809 248.452 205.301 cv
249.733 214.785 li
247.64 214.359 li
250.362 222 252.003 229.832 252.265 231.105 cv
255.542 247.195 li
251.702 244.652 li
251.679 247.711 251.159 249.633 251.03 250.078 cv
250.96 250.297 li
259.366 267.637 256.171 277.098 255.312 279.055 cv
252.632 285.199 li
240.003 279.895 li
239.464 295.316 232.179 305.48 231.8 306.004 cv
225.167 315.078 li
222.233 309.113 li
218.229 316.969 213.108 321.84 212.749 322.168 cv
203.257 331.035 li
202.749 327.535 li
199.022 332.387 195.671 336.168 194.968 336.945 cv
189.753 342.77 li
184.71 336.793 li
179.663 330.824 173.476 321.504 169.386 315.094 cv
162.171 321.766 li
159.636 315.492 li
156.257 323.695 152.171 331.559 151.937 332.012 cv
142.905 349.328 li
141.663 342.859 li
137.796 346.715 134.136 349.129 133.351 349.629 cv
125.124 354.871 li
124.382 351.477 li
120.823 354.496 117.472 356.59 116.304 357.285 cv
113.698 358.844 li
109.288 365.27 101.78 376.359 101.78 376.359 cv
95.7256 385.285 li
90.2725 375.984 li
cp
f
163.538 169.121 mo
163.538 169.121 153.772 166.488 151.413 146.121 cv
149.062 125.75 148.929 113.215 139.245 106.059 cv
138.296 112.168 li
138.296 112.168 133.765 101.035 117.874 97.4531 cv
118.327 102.43 li
118.327 102.43 108.507 99.3047 93.6592 101.656 cv
93.6592 101.656 94.3389 109.125 97.7803 113.836 cv
97.7803 113.836 83.874 110.074 70.0225 117.863 cv
70.0225 117.863 72.6553 124.648 76.3154 126.324 cv
76.3154 126.324 67.2178 125.648 56.2178 131.668 cv
59.6553 136.371 li
59.6553 136.371 47.5771 141.488 39.1475 153.797 cv
49.8311 160.863 li
49.8311 160.863 37.9717 162.941 31.4521 168.555 cv
37.335 172.539 li
37.335 172.539 23.8857 179.277 17.1865 188.422 cv
28.6396 192.91 li
28.6396 192.91 18.1787 204.898 16.46 219.113 cv
22.4795 219.07 li
22.4795 219.07 17.6865 227.035 16.6865 238.172 cv
16.6865 238.172 27.0459 241.754 20.3467 250.895 cv
13.6436 260.035 13.3193 273.117 13.3193 273.117 cv
13.3193 273.117 27.585 269.816 34.874 267.145 cv
33.4248 273.301 li
33.4248 273.301 46.9131 272.578 56.6475 269.184 cv
56.6475 269.184 49.2686 281.906 48.5889 291.004 cv
48.5889 291.004 57.7295 292.18 62.5303 289.738 cv
62.5303 289.738 60.7568 297.934 68.9092 310.246 cv
68.9092 310.246 74.5225 311.246 77.3701 309.48 cv
77.3701 309.48 75.7764 319.668 83.5693 333.52 cv
85.3818 331.344 li
85.3818 331.344 86.0537 338.813 90.7646 346.422 cv
90.7646 346.422 91.3896 364.434 96.1436 372.539 cv
96.1436 372.539 108.097 354.891 110.769 351.137 cv
113.44 347.375 113.44 347.375 113.44 347.375 cv
112.808 351.449 li
112.808 351.449 125.671 343.758 127.976 336.02 cv
129.694 343.895 li
129.694 343.895 143.464 335.113 144.96 323.934 cv
145.901 328.867 li
145.901 328.867 153.593 314.113 156.272 304.832 cv
158.952 295.551 164.788 310.082 164.788 310.082 cv
170.804 304.52 li
170.804 304.52 182.03 323.078 189.905 332.406 cv
189.905 332.406 203.124 317.648 206.792 308.277 cv
208.104 317.199 li
208.104 317.199 220.608 305.52 220.151 289.496 cv
226.304 301.992 li
226.304 301.992 236.124 288.551 232.374 269.313 cv
249.077 276.328 li
249.077 276.328 253.647 265.875 239.624 244.051 cv
244.507 248.129 li
244.507 248.129 246.823 240.387 240.261 228.934 cv
245.604 232.465 li
245.604 232.465 241.983 214.719 236.78 207.16 cv
231.577 199.598 236.601 205.168 236.601 205.168 cv
241.714 206.207 li
241.714 206.207 240.179 194.797 236.78 185.066 cv
233.39 175.332 238.687 172.848 243.304 173.93 cv
243.304 173.93 248.187 166.965 240.991 159.582 cv
240.991 159.582 243.851 152.297 255.94 152.703 cv
255.94 152.703 251.276 145.598 233.3 146.723 cv
215.335 147.852 188.069 162.875 176.851 166.406 cv
165.624 169.938 163.538 169.121 163.538 169.121 cv
cp
1 1 1 rgb
f
166.573 174.867 mo
166.573 174.867 132.116 232.215 99.0029 348.684 cv
99.0029 348.684 103.901 314.102 120.929 269.379 cv
137.956 224.66 157.694 182.199 161.229 176.859 cv
164.765 171.52 167.206 170.793 166.573 174.867 cv
cp
.27451 .207843 .145098 rgb
f
22.0615 258.77 mo
22.0615 258.77 95.3193 202.918 166.573 174.867 cv
166.573 174.867 167.569 169.258 160.866 172.875 cv
156.53 175.219 77.3193 207.762 22.0615 258.77 cv
cp
f
191.534 322.719 mo
191.534 322.719 184.808 231.957 166.573 174.867 cv
166.573 174.867 166.034 168.891 169.108 175.145 cv
172.187 181.387 191.956 249.887 191.534 322.719 cv
cp
f
gsave
229.315 174.012 mo
229.315 174.012 234.94 183.762 233.815 192.387 cv
228.94 194.262 li
228.94 194.262 234.565 201.012 231.19 210.387 cv
221.44 211.512 li
221.44 211.512 230.065 224.637 228.19 238.887 cv
222.565 237.387 li
222.565 237.387 227.815 260.637 219.94 282.387 cv
212.065 304.137 211.315 299.637 205.315 303.387 cv
199.315 307.137 191.065 325.137 191.065 325.137 cv
162.565 300.387 li
162.565 300.387 147.94 333.762 125.815 339.762 cv
103.69 345.762 99.5654 353.262 99.5654 353.262 cv
99.5654 353.262 75.1904 315.387 67.3154 298.512 cv
59.4404 281.637 48.1904 260.637 39.1904 258.387 cv
30.1904 256.137 21.3779 266.273 20.3467 250.895 cv
19.3154 235.512 28.3154 160.887 51.1904 137.262 cv
74.0654 113.637 141.19 95.6367 150.565 112.512 cv
159.94 129.387 144.94 181.512 168.19 171.762 cv
191.44 162.012 202.69 160.512 208.69 160.137 cv
214.69 159.762 229.315 174.012 229.315 174.012 cv
cp
clp
107.815 303.012 mo
107.815 303.012 93.5654 313.512 87.9404 330.387 cv
87.9404 330.387 87.5654 322.137 96.5654 310.887 cv
105.565 299.637 108.19 299.262 107.815 303.012 cv
cp
f
111.565 285.012 mo
111.565 285.012 90.5654 296.637 82.3154 317.262 cv
82.3154 317.262 83.4404 304.887 95.8154 292.887 cv
108.19 280.887 111.94 283.137 111.565 285.012 cv
cp
f
113.44 271.137 mo
113.44 271.137 90.1904 276.762 78.1904 304.137 cv
78.1904 304.137 79.3154 292.512 90.5654 280.887 cv
101.815 269.262 113.065 267.012 113.44 271.137 cv
cp
f
70.6904 292.137 mo
70.6904 292.137 83.8389 263.91 120.19 255.367 cv
120.19 255.367 119.417 251.281 109.362 254.625 cv
99.3076 257.965 79.1982 270.965 70.6904 292.137 cv
cp
f
63.9404 280.512 mo
63.9404 280.512 77.4404 244.887 121.69 240.387 cv
121.69 240.387 118.69 242.637 114.19 244.137 cv
109.69 245.637 83.8154 252.387 63.9404 280.512 cv
cp
f
60.9404 268.137 mo
60.9404 268.137 79.6904 224.262 136.69 222.012 cv
136.69 222.012 125.065 226.137 114.565 228.762 cv
109.968 229.914 82.3154 236.262 60.9404 268.137 cv
cp
f
46.3154 259.512 mo
46.3154 259.512 76.3154 214.137 137.065 205.512 cv
137.065 205.512 135.679 208.551 122.815 212.262 cv
103.315 217.887 84.1904 220.512 46.3154 259.512 cv
cp
f
115.69 304.137 mo
115.69 304.137 125.815 317.637 119.065 340.887 cv
119.065 340.887 122.44 327.762 117.94 316.137 cv
113.44 304.512 115.69 304.137 115.69 304.137 cv
cp
f
135.565 331.512 mo
135.565 331.512 138.19 304.512 123.19 286.887 cv
123.19 286.887 120.94 288.387 124.315 294.387 cv
127.69 300.387 135.565 311.262 135.565 331.512 cv
cp
f
147.565 313.887 mo
147.565 313.887 147.565 291.762 128.44 273.762 cv
128.44 273.762 131.44 271.512 137.065 278.637 cv
142.69 285.762 149.065 298.137 147.565 313.887 cv
cp
f
156.94 294.762 mo
156.94 294.762 155.065 274.137 134.065 259.137 cv
134.065 259.137 135.19 255.387 141.565 260.637 cv
147.94 265.887 156.94 281.637 156.94 294.762 cv
cp
f
174.19 300.762 mo
174.19 300.762 176.44 270.012 140.815 244.512 cv
140.815 244.512 147.565 242.637 155.065 252.012 cv
162.565 261.387 176.815 278.637 174.19 300.762 cv
cp
f
184.69 288.762 mo
184.69 288.762 182.815 252.387 148.69 225.387 cv
148.69 225.387 153.565 224.262 162.19 233.637 cv
170.815 243.012 183.94 258.762 184.69 288.762 cv
cp
f
205.315 303.387 mo
205.315 303.387 195.19 239.262 153.94 209.262 cv
153.94 209.262 157.69 208.512 164.815 215.262 cv
171.94 222.012 198.565 241.887 205.315 303.387 cv
cp
f
145.062 195.262 mo
145.062 195.262 124.562 189.262 92.5615 212.262 cv
92.5615 212.262 124.562 182.766 145.062 195.262 cv
cp
f
24.9404 240.387 mo
24.9404 240.387 73.6904 178.512 149.44 175.887 cv
149.44 175.887 141.94 179.637 126.94 183.012 cv
111.94 186.387 74.4404 194.262 24.9404 240.387 cv
cp
f
25.8896 218.953 mo
25.8896 218.953 73.3857 164.613 143.241 165.441 cv
143.241 165.441 136.175 168.543 122.226 170.98 cv
108.265 173.422 73.4092 179.004 25.8896 218.953 cv
cp
f
30.1904 200.262 mo
30.1904 200.262 80.1357 146.93 149.698 153.355 cv
149.698 153.355 142.405 155.879 128.3 157.195 cv
114.194 158.508 80.4404 159.762 30.1904 200.262 cv
cp
f
30.9404 185.262 mo
30.9404 185.262 78.5615 134.125 144.823 140.23 cv
144.823 140.23 137.874 142.656 124.433 143.926 cv
110.999 145.195 78.8428 146.418 30.9404 185.262 cv
cp
f
49.6904 156.762 mo
49.6904 156.762 87.9404 121.887 141.448 127.48 cv
141.448 127.48 134.499 129.906 121.058 131.176 cv
107.624 132.445 81.5654 134.637 49.6904 156.762 cv
cp
f
47.0654 145.137 mo
47.0654 145.137 85.3154 110.262 138.823 115.855 cv
138.823 115.855 131.874 118.281 118.433 119.551 cv
104.999 120.82 78.9404 123.012 47.0654 145.137 cv
cp
f
216.124 287.41 mo
216.124 287.41 201.952 224.059 158.882 196.734 cv
158.882 196.734 162.577 195.75 170.112 202.035 cv
177.655 208.316 205.483 226.465 216.124 287.41 cv
cp
f
231.565 285.012 mo
231.565 285.012 216.565 216.012 163.882 186.863 cv
163.882 186.863 167.487 185.574 175.515 191.223 cv
183.542 196.863 216.94 215.262 231.565 285.012 cv
cp
f
241.866 274.5 mo
241.866 274.5 226.093 205.676 173.077 177.121 cv
173.077 177.121 176.671 175.797 184.761 181.348 cv
192.851 186.902 226.452 204.918 241.866 274.5 cv
cp
f
254.616 268.5 mo
254.616 268.5 238.843 199.676 185.827 171.121 cv
185.827 171.121 189.421 169.797 197.511 175.348 cv
205.601 180.902 239.202 198.918 254.616 268.5 cv
cp
f
265.116 260.625 mo
265.116 260.625 249.343 191.801 196.327 163.246 cv
196.327 163.246 199.921 161.922 208.011 167.473 cv
216.101 173.027 249.702 191.043 265.116 260.625 cv
cp
f
grestore
217.901 173.301 mo
205.866 175.496 227.511 193.676 225.312 191.262 cv
208.315 172.262 li
178.749 118.336 136.546 75.043 117.718 77.5039 cv
110.019 78.5117 102.788 83.5703 98.1709 78.8711 cv
93.6631 74.2773 94.5928 68.1328 95.5576 61.625 cv
95.7803 60.1953 96.0029 58.6602 96.2021 57.0195 cv
96.6943 52.8477 95.417 49.4102 94.0537 45.7773 cv
91.9951 40.2617 88.8779 31.9258 97.3975 24.4492 cv
104.718 18.0234 107.796 10.6289 107.827 10.5586 cv
112.155 0 li
119.397 8.79297 li
122.749 12.8711 127.257 22.8633 122.921 34.3789 cv
121.409 38.3828 121.718 43.2461 123.749 47.0742 cv
125.077 49.6016 127.022 51.3477 129.073 51.8398 cv
142.062 55 173.788 87.9805 191.687 109.789 cv
210.577 132.824 222.167 138.102 222.354 138.246 cv
223.366 139.035 li
224.015 140.145 li
225.354 142.406 231.874 154.172 229.179 163.426 cv
228.097 167.172 225.683 170.086 222.233 171.844 cv
220.866 172.535 219.413 173.027 217.901 173.301 cv
217.901 173.301 li
cp
f
218.159 143.602 mo
218.159 143.602 199.198 128.754 179.608 104.871 cv
160.022 80.9961 137.038 60.7773 127.46 58.4531 cv
117.894 56.125 112.444 42.8867 116.554 31.9727 cv
120.659 21.0664 114.14 13.1055 114.14 13.1055 cv
114.14 13.1055 110.651 21.8711 101.882 29.5625 cv
93.1201 37.2539 104.569 44.3203 102.952 57.8242 cv
101.343 71.332 97.5498 78.4727 117.354 75.5352 cv
142.812 71.7617 177.351 108.492 212.319 172.262 cv
212.319 172.262 209.839 170.527 219.14 165.781 cv
228.444 161.043 218.159 143.602 218.159 143.602 cv
cp
1 1 1 rgb
f
100.269 47.8984 mo
100.269 47.8984 102.054 52.1445 99.2842 59.2539 cv
96.5068 66.3711 94.9951 74.7773 109.433 73.168 cv
123.874 71.5547 132.858 73.4805 140.866 81.168 cv
140.866 81.168 130.179 69.9023 123.425 69.0977 cv
116.675 68.293 117.968 67.0352 113.366 66.8594 cv
108.757 66.6797 103.788 64.5273 106.878 61.9414 cv
109.972 59.3477 112.058 54.9023 107.437 49.6406 cv
101.671 43.0664 94.6709 36.7188 96.9521 29.6992 cv
96.9521 29.6992 93.6943 36.8945 100.269 47.8984 cv
cp
.27451 .207843 .145098 rgb
f
145.222 75.043 mo
145.222 75.043 170.569 94.3164 191.64 123.52 cv
191.64 123.52 184.444 120.258 179.3 111.539 cv
174.155 102.816 150.812 80.6367 145.222 75.043 cv
cp
f
111.374 11.5391 mo
111.374 11.5391 114.147 17.3164 110.604 28.1758 cv
107.062 39.0352 107.604 36.7266 107.604 36.7266 cv
107.604 36.7266 122.843 13.5234 119.397 8.79297 cv
111.374 11.5391 li
cp
f
427.339 163.465 mo
434.3 141.238 429.706 120.418 415.339 109.145 cv
404.905 100.922 390.858 98.8242 375.8 103.23 cv
361.479 107.414 347.815 117.074 337.335 130.441 cv
330.976 138.555 326.069 147.738 323.171 157.012 cv
316.202 179.25 320.792 200.066 335.163 211.34 cv
345.608 219.555 359.651 221.656 374.71 217.254 cv
389.022 213.07 402.683 203.414 413.171 190.043 cv
419.534 181.941 424.433 172.742 427.339 163.465 cv
cp
f
339.354 206.762 mo
358.952 222.156 391.21 213.754 411.421 187.996 cv
431.628 162.238 432.12 128.883 412.53 113.484 cv
392.937 98.0859 360.679 106.48 340.476 132.234 cv
320.257 157.996 319.761 191.363 339.354 206.762 cv
cp
1 1 1 rgb
f
411.472 120.867 mo
411.472 120.867 429.448 140.633 409.296 176.617 cv
389.155 212.594 353.71 213.273 340.726 203.738 cv
340.726 203.738 377.394 211.578 398.382 181.793 cv
423.772 145.758 411.472 120.867 411.472 120.867 cv
cp
.27451 .207843 .145098 rgb
f
402.519 114.871 mo
402.519 114.871 400.737 111.004 398.632 112.664 cv
396.53 114.328 402.519 114.871 402.519 114.871 cv
cp
f
388.222 106.328 mo
388.222 106.328 342.187 109.676 333.495 154.188 cv
333.495 154.188 343.831 118.254 388.222 106.328 cv
cp
f
gsave
410.546 118.059 mo
410.546 118.059 424.562 142.078 408.241 171.402 cv
391.913 200.738 368.46 214.598 334.351 200.941 cv
334.351 200.941 325.128 193.156 331.788 192.57 cv
338.452 191.992 371.628 179.563 384.917 160.285 cv
398.206 141.016 399.983 124.637 400.187 121.66 cv
400.39 118.676 405.89 111.355 410.546 118.059 cv
cp
clp
330.19 191.27 mo
330.19 191.27 347.042 214.121 377.183 208.262 cv
377.183 208.262 357.671 209.793 330.19 191.27 cv
cp
f
338.749 189.211 mo
338.749 189.211 356.601 211.313 386.405 204.105 cv
386.405 204.105 367.007 206.512 338.749 189.211 cv
cp
f
347.265 186.273 mo
347.265 186.273 366.401 207.281 395.671 198.285 cv
395.671 198.285 376.476 201.867 347.265 186.273 cv
cp
f
355.304 183.754 mo
355.304 183.754 376.304 202.93 404.522 191.199 cv
404.522 191.199 385.796 196.57 355.304 183.754 cv
cp
f
361.479 179.457 mo
361.479 179.457 383.815 197.059 411.022 183.262 cv
411.022 183.262 392.788 190.008 361.479 179.457 cv
cp
f
368.229 174.352 mo
368.229 174.352 391.784 190.277 417.823 174.449 cv
417.823 174.449 400.187 182.563 368.229 174.352 cv
cp
f
372.968 168.426 mo
372.968 168.426 397.433 182.898 422.413 165.52 cv
422.413 165.52 405.331 174.68 372.968 168.426 cv
cp
f
376.999 161.379 mo
376.999 161.379 402.351 174.191 426.026 155.105 cv
426.026 155.105 409.644 165.445 376.999 161.379 cv
cp
f
380.647 154.867 mo
380.647 154.867 406.655 166.246 429.171 145.84 cv
429.171 145.84 413.429 157.082 380.647 154.867 cv
cp
f
383.116 148.359 mo
383.116 148.359 409.718 158.203 430.948 136.473 cv
430.948 136.473 415.929 148.652 383.116 148.359 cv
cp
f
386.882 140.801 mo
386.882 140.801 413.897 149.34 434.007 126.563 cv
434.007 126.563 419.624 139.477 386.882 140.801 cv
cp
f
389.038 133.27 mo
389.038 133.27 416.062 141.82 436.163 119.035 cv
436.163 119.035 421.784 131.949 389.038 133.27 cv
cp
f
grestore
666.812 428.176 mo
658.175 428.953 649.327 428.504 640.507 426.82 cv
621.233 423.152 604.108 414 592.312 401.059 cv
580.015 387.574 574.874 371.59 577.835 356.047 cv
582.335 332.387 605.632 314.645 635.815 311.902 cv
644.452 311.121 653.304 311.574 662.124 313.254 cv
681.405 316.926 698.53 326.074 710.323 339.02 cv
722.616 352.504 727.761 368.484 724.804 384.023 cv
720.296 407.691 696.991 425.438 666.812 428.176 cv
cp
f
718.116 382.754 mo
712.851 410.426 677.956 430.781 641.065 423.754 cv
604.175 416.73 576.304 384.422 581.569 356.758 cv
586.831 329.09 623.671 310.215 660.569 317.234 cv
697.468 324.258 723.382 355.082 718.116 382.754 cv
cp
1 1 1 rgb
f
596.065 341.258 mo
596.065 341.258 608.569 318.262 649.569 320.762 cv
690.565 323.258 704.569 345.758 710.569 355.262 cv
710.569 355.262 695.065 332.762 654.565 327.258 cv
614.065 321.754 596.065 341.258 596.065 341.258 cv
cp
.27451 .207843 .145098 rgb
f
710.065 369.754 mo
710.065 369.754 710.065 374.754 708.565 373.254 cv
707.065 371.754 709.562 368.754 710.065 369.754 cv
cp
f
590.569 389.754 mo
590.569 389.754 607.569 420.258 647.569 424.758 cv
687.569 429.258 705.069 405.754 705.069 405.754 cv
705.069 405.754 682.069 429.258 641.065 419.254 cv
600.062 409.254 590.569 389.754 590.569 389.754 cv
cp
1 1 1 rgb
f
589.069 368.754 mo
589.069 368.754 592.569 403.758 638.569 413.254 cv
700.069 425.953 712.569 386.254 712.569 386.254 cv
712.569 386.254 698.038 416.941 643.569 407.754 cv
602.065 400.758 589.069 368.754 589.069 368.754 cv
cp
.27451 .207843 .145098 rgb
f
gsave
590.065 374.254 mo
590.065 374.254 600.565 404.754 643.569 410.754 cv
686.569 416.754 707.569 401.262 714.069 379.758 cv
714.069 379.758 695.562 399.258 653.065 390.258 cv
610.569 381.258 598.069 355.758 598.069 355.758 cv
598.069 355.758 589.062 363.258 590.065 374.254 cv
cp
clp
600.413 363.727 mo
600.413 363.727 589.55 381.684 602.241 399.773 cv
602.241 399.773 596.159 383.051 600.413 363.727 cv
cp
f
608.276 360.738 mo
608.276 360.738 597.233 391.848 611.944 406.973 cv
611.944 406.973 603.772 389.133 608.276 360.738 cv
cp
f
614.96 367.5 mo
614.96 367.5 606.819 399.48 622.843 413.203 cv
622.843 413.203 613.081 396.184 614.96 367.5 cv
cp
f
623.507 367.918 mo
623.507 367.918 615.366 399.895 631.397 413.625 cv
631.397 413.625 621.624 396.605 623.507 367.918 cv
cp
f
632.229 370.383 mo
632.229 370.383 624.077 402.371 640.108 416.09 cv
640.108 416.09 630.343 399.07 632.229 370.383 cv
cp
f
641.108 371.863 mo
641.108 371.863 632.956 403.852 648.987 417.574 cv
648.987 417.574 639.214 400.559 641.108 371.863 cv
cp
f
649.976 373.359 mo
649.976 373.359 641.827 405.332 657.866 419.063 cv
657.866 419.063 648.085 402.035 649.976 373.359 cv
cp
f
658.694 372.777 mo
658.694 372.777 650.546 404.766 666.577 418.488 cv
666.577 418.488 656.804 401.473 658.694 372.777 cv
cp
f
667.737 373.285 mo
667.737 373.285 659.593 405.258 675.624 418.992 cv
675.624 418.992 665.851 401.965 667.737 373.285 cv
cp
f
675.87 373.125 mo
675.87 373.125 667.726 405.098 683.757 418.828 cv
683.757 418.828 673.983 401.809 675.87 373.125 cv
cp
f
683.933 370.41 mo
683.933 370.41 675.78 402.398 691.819 416.129 cv
691.819 416.129 682.038 399.098 683.933 370.41 cv
cp
f
692.394 371.32 mo
692.394 371.32 684.249 403.309 700.28 417.035 cv
700.28 417.035 690.515 400.012 692.394 371.32 cv
cp
f
699.882 372.07 mo
699.882 372.07 691.733 404.051 707.757 417.777 cv
707.757 417.777 697.983 400.758 699.882 372.07 cv
cp
f
grestore
446.718 244.379 mo
431.296 238.93 420.101 227.879 416.03 214.051 cv
408.101 187.215 428.765 157.387 462.069 147.559 cv
477.022 143.141 492.663 143.328 506.116 148.082 cv
521.554 153.531 532.741 164.582 536.812 178.406 cv
540.733 191.68 537.929 205.973 528.897 218.66 cv
520.202 230.902 506.663 240.223 490.788 244.902 cv
475.819 249.32 460.171 249.133 446.718 244.379 cv
cp
f
530.64 178.914 mo
537.835 203.25 519.218 230.199 489.077 239.09 cv
458.921 247.988 428.671 235.465 421.483 211.121 cv
414.304 186.777 432.913 159.832 463.062 150.934 cv
493.21 142.039 523.456 154.566 530.64 178.914 cv
cp
1 1 1 rgb
f
435.687 168.715 mo
435.687 168.715 462.757 148.777 489.616 152.855 cv
516.472 156.938 529.21 176.207 530.983 188.293 cv
530.983 188.293 520.757 162.359 490.155 158.133 cv
459.546 153.906 435.687 168.715 435.687 168.715 cv
cp
.27451 .207843 .145098 rgb
f
521.499 179.973 mo
521.499 179.973 521.812 189.09 519.968 185.82 cv
518.132 182.555 518.265 175.762 521.499 179.973 cv
cp
f
417.187 214.988 mo
417.187 214.988 428.558 241.949 465.378 243.117 cv
502.198 244.281 527.815 219.98 529.757 200.172 cv
529.757 200.172 520.296 229.82 478.624 235.191 cv
436.952 240.559 419.585 218.758 417.187 214.988 cv
cp
f
gsave
417.187 214.988 mo
417.187 214.988 433.101 240.965 464.14 238.473 cv
495.179 235.973 518.733 230.484 530.741 197.551 cv
530.741 197.551 532.468 184.441 521.929 190.504 cv
511.405 196.566 500.886 204.074 472.655 208.168 cv
444.429 212.258 441.272 207.309 427.413 204.613 cv
413.554 201.918 413.429 211.48 417.187 214.988 cv
cp
clp
423.851 209.008 mo
423.851 209.008 418.175 229.203 435.237 243.258 cv
435.237 243.258 424.921 228.754 423.851 209.008 cv
cp
f
430.624 204.027 mo
430.624 204.027 428.288 236.945 446.507 247.609 cv
446.507 247.609 433.874 232.59 430.624 204.027 cv
cp
f
438.874 208.754 mo
438.874 208.754 439.569 241.754 458.671 250.703 cv
458.671 250.703 444.718 236.906 438.874 208.754 cv
cp
f
447.233 206.875 mo
447.233 206.875 447.921 239.871 467.022 248.824 cv
467.022 248.824 453.054 235.027 447.233 206.875 cv
cp
f
456.284 206.926 mo
456.284 206.926 456.968 239.926 476.077 248.879 cv
476.077 248.879 462.124 235.082 456.284 206.926 cv
cp
f
465.237 205.988 mo
465.237 205.988 465.917 238.988 485.038 247.945 cv
485.038 247.945 471.073 234.141 465.237 205.988 cv
cp
f
474.187 205.051 mo
474.187 205.051 474.87 238.047 493.976 247.004 cv
493.976 247.004 480.022 233.199 474.187 205.051 cv
cp
f
482.437 202.176 mo
482.437 202.176 483.12 235.176 502.233 244.125 cv
502.233 244.125 488.272 230.324 482.437 202.176 cv
cp
f
491.28 200.246 mo
491.28 200.246 491.96 233.246 511.077 242.195 cv
511.077 242.195 497.116 228.398 491.28 200.246 cv
cp
f
499.081 197.926 mo
499.081 197.926 499.765 230.914 518.886 239.867 cv
518.886 239.867 504.917 226.07 499.081 197.926 cv
cp
f
506.124 193.164 mo
506.124 193.164 506.812 226.156 525.913 235.113 cv
525.913 235.113 511.952 221.313 506.124 193.164 cv
cp
f
514.526 191.777 mo
514.526 191.777 515.21 224.777 534.319 233.727 cv
534.319 233.727 520.366 219.934 514.526 191.777 cv
cp
f
521.929 190.504 mo
521.929 190.504 522.616 223.5 541.733 232.457 cv
541.733 232.457 527.772 218.652 521.929 190.504 cv
cp
f
grestore
437.769 445.16 mo
419.288 446.84 405.827 440.906 394.812 430.266 cv
386.476 422.203 380.933 410.496 381.312 400.266 cv
380.812 394.957 381.819 363.258 413.624 344.984 cv
426.585 337.539 440.366 333.164 453.304 331.988 cv
475.62 329.965 494.511 337.738 503.815 352.781 cv
507.155 358.176 517.491 377.484 510.187 399.188 cv
504.499 416.066 489.851 429.152 466.644 438.074 cv
456.546 441.957 446.835 444.34 437.769 445.16 cv
cp
f
386.085 400.652 mo
386.085 400.652 381.624 368.457 417.366 348.137 cv
453.108 327.816 487.351 333.246 499.96 353.832 cv
510.062 370.336 515.815 415.512 466.69 434.637 cv
411.894 455.973 384.929 421.711 386.085 400.652 cv
cp
1 1 1 rgb
f
401.019 423.949 mo
401.019 423.949 420.085 442.746 459.546 429.938 cv
507.827 414.258 503.897 379.219 503.897 379.219 cv
503.897 379.219 499.972 407.238 463.288 421.313 cv
424.714 436.113 401.019 423.949 401.019 423.949 cv
cp
.27451 .207843 .145098 rgb
f
392.065 411.012 mo
392.065 411.012 386.815 405.012 392.065 404.262 cv
397.315 403.512 396.565 414.762 392.065 411.012 cv
cp
f
gsave
399.819 421.758 mo
399.819 421.758 416.815 436.758 452.815 426.762 cv
488.815 416.766 502.812 397.758 505.315 369.762 cv
507.819 341.762 493.319 333.766 485.319 347.762 cv
477.312 361.762 477.819 388.758 449.319 405.762 cv
420.819 422.766 399.819 421.758 399.819 421.758 cv
cp
clp
484.315 344.762 mo
484.315 344.762 510.819 364.758 502.812 400.266 cv
502.812 400.266 506.319 374.262 484.315 344.762 cv
cp
f
481.585 354.84 mo
481.585 354.84 507.155 376.012 497.558 411.117 cv
497.558 411.117 502.315 385.266 481.585 354.84 cv
cp
f
477.788 364.863 mo
477.788 364.863 502.034 387.539 490.339 422.004 cv
490.339 422.004 495.249 399.398 477.788 364.863 cv
cp
f
474.53 374.324 mo
474.53 374.324 496.522 399.199 481.616 432.398 cv
481.616 432.398 488.647 410.355 474.53 374.324 cv
cp
f
469.198 381.586 mo
469.198 381.586 489.288 408.023 471.968 440.027 cv
471.968 440.027 482.319 417.258 469.198 381.586 cv
cp
f
462.917 389.512 mo
462.917 389.512 480.964 417.379 461.296 447.996 cv
461.296 447.996 472.812 424.266 462.917 389.512 cv
cp
f
455.722 395.074 mo
455.722 395.074 472.03 423.996 450.53 453.352 cv
450.53 453.352 462.312 430.758 455.722 395.074 cv
cp
f
447.237 399.773 mo
447.237 399.773 461.53 429.75 438.054 457.559 cv
438.054 457.559 450.894 438.305 447.237 399.773 cv
cp
f
439.374 404.043 mo
439.374 404.043 451.952 434.77 426.952 461.215 cv
426.952 461.215 440.851 442.711 439.374 404.043 cv
cp
f
431.577 406.922 mo
431.577 406.922 442.312 438.34 415.788 463.262 cv
415.788 463.262 430.761 445.617 431.577 406.922 cv
cp
f
422.476 411.316 mo
422.476 411.316 431.651 443.227 403.929 466.805 cv
403.929 466.805 419.749 449.918 422.476 411.316 cv
cp
f
413.476 413.816 mo
413.476 413.816 422.651 445.73 394.929 469.309 cv
394.929 469.309 410.749 452.418 413.476 413.816 cv
cp
f
grestore
387.312 396.258 mo
387.312 396.258 388.315 355.262 433.315 343.762 cv
433.315 343.762 396.812 363.762 387.312 396.258 cv
cp
1 1 1 rgb
f
566.265 316.012 mo
563.202 316.246 560.042 316.328 556.878 316.254 cv
515.835 315.215 503.827 284.434 503.347 283.121 cv
497.464 265.738 497.187 229.559 537.577 215.582 cv
545.366 212.883 553.21 211.223 560.882 210.637 cv
595.292 207.992 619.222 226.617 625.069 246.379 cv
629.374 260.938 626.921 275.957 618.163 288.68 cv
607.362 304.348 588.444 314.313 566.265 316.012 cv
cp
.27451 .207843 .145098 rgb
f
509.655 279.668 mo
509.655 279.668 491.581 236.262 540.53 219.043 cv
581.769 204.535 614.769 223.848 621.374 246.238 cv
630.765 278.141 602.933 312.348 558.05 311.195 cv
520.147 310.223 509.655 279.668 509.655 279.668 cv
cp
1 1 1 rgb
f
524.101 232.996 mo
524.101 232.996 540.847 217.754 572.651 218.742 cv
600.554 219.605 618.608 239.277 619.761 254.238 cv
619.761 254.238 617.397 233.355 579.96 225.703 cv
542.507 218.043 524.101 232.996 524.101 232.996 cv
cp
.27451 .207843 .145098 rgb
f
517.015 277.918 mo
517.015 277.918 528.116 304.902 567.054 302.664 cv
605.991 300.426 616.421 269.535 616.421 269.535 cv
616.421 269.535 599.499 294.156 568.101 296.563 cv
536.687 298.977 517.015 277.918 517.015 277.918 cv
cp
f
608.413 253.68 mo
608.413 253.68 609.964 245.906 611.886 251.934 cv
613.804 257.965 606.897 258.441 608.413 253.68 cv
cp
f
gsave
511.093 272.039 mo
511.093 272.039 524.749 296.223 554.218 299.141 cv
583.687 302.051 612.448 282.949 619.245 261.543 cv
626.042 240.133 614.687 248.578 599.968 254.824 cv
585.249 261.07 574.632 269.418 549.636 269.074 cv
524.632 268.723 500.288 257.887 511.093 272.039 cv
cp
clp
517.292 268.367 mo
517.292 268.367 511.054 288.41 527.71 302.926 cv
527.71 302.926 517.808 288.141 517.292 268.367 cv
cp
f
524.194 263.578 mo
524.194 263.578 520.948 296.43 538.851 307.586 cv
538.851 307.586 526.644 292.227 524.194 263.578 cv
cp
f
532.315 268.539 mo
532.315 268.539 532.081 301.543 550.937 311.02 cv
550.937 311.02 537.366 296.836 532.315 268.539 cv
cp
f
540.718 266.891 mo
540.718 266.891 540.483 299.895 559.335 309.371 cv
559.335 309.371 545.757 295.191 540.718 266.891 cv
cp
f
549.765 267.199 mo
549.765 267.199 549.538 300.207 568.386 309.684 cv
568.386 309.684 554.819 295.5 549.765 267.199 cv
cp
f
558.733 266.508 mo
558.733 266.508 558.499 299.512 577.362 308.996 cv
577.362 308.996 563.796 294.816 558.733 266.508 cv
cp
f
567.71 265.82 mo
567.71 265.82 567.483 298.824 586.339 308.301 cv
586.339 308.301 572.769 294.121 567.71 265.82 cv
cp
f
576.03 263.176 mo
576.03 263.176 575.804 296.184 594.659 305.66 cv
594.659 305.66 581.089 291.48 576.03 263.176 cv
cp
f
584.929 261.488 mo
584.929 261.488 584.694 294.492 603.554 303.973 cv
603.554 303.973 589.983 289.793 584.929 261.488 cv
cp
f
592.788 259.383 mo
592.788 259.383 592.562 292.387 611.421 301.867 cv
611.421 301.867 597.847 287.684 592.788 259.383 cv
cp
f
599.968 254.824 mo
599.968 254.824 599.726 287.832 618.577 297.305 cv
618.577 297.305 605.019 283.129 599.968 254.824 cv
cp
f
608.413 253.68 mo
608.413 253.68 608.163 286.676 627.026 296.16 cv
627.026 296.16 613.456 281.977 608.413 253.68 cv
cp
f
615.847 252.605 mo
615.847 252.605 615.612 285.605 634.468 295.094 cv
634.468 295.094 620.897 280.902 615.847 252.605 cv
cp
f
grestore
524.718 298.73 mo
524.718 298.73 539.511 313.438 569.558 310.355 cv
599.604 307.27 612.397 286.945 612.397 286.945 cv
612.397 286.945 597.147 304.238 566.624 305.813 cv
536.101 307.387 524.718 298.73 524.718 298.73 cv
cp
1 1 1 rgb
f
206.788 183.047 mo
206.788 183.047 224.343 138.246 259.671 121.457 cv
303.116 100.82 324.12 82.707 319.663 59.4453 cv
314.499 32.4336 285.39 26.3242 266.741 44.3008 cv
248.085 62.2734 268.854 91.9258 293.632 81.1914 cv
293.632 81.1914 295.304 81.3281 300.319 73.6641 cv
305.323 66 297.522 66.6992 297.522 66.6992 cv
297.522 66.6992 294.312 77.582 284.022 79.3867 cv
269.679 81.8984 256.499 61.6719 275.37 45.6836 cv
289.851 33.4219 307.116 40.2383 313.405 57.918 cv
319.671 75.6055 301.304 98.3164 276.241 108.355 cv
251.179 118.398 217.905 142.234 206.788 183.047 cv
cp
.27451 .207843 .145098 rgb
f
275.718 444.961 mo
244.741 444.961 217.983 417.363 214.784 382.125 cv
213.147 364.145 217.687 346.637 227.558 332.84 cv
237.647 318.73 252.073 310.156 268.175 308.695 cv
269.788 308.551 271.386 308.48 272.979 308.48 cv
303.944 308.48 330.706 336.078 333.897 371.316 cv
337.304 408.82 313.358 441.762 280.522 444.746 cv
278.909 444.891 277.304 444.961 275.718 444.961 cv
cp
f
330.565 371.621 mo
333.636 405.445 311.722 435.082 281.628 437.813 cv
251.522 440.543 224.628 415.336 221.558 381.512 cv
218.487 347.684 240.405 318.047 270.515 315.316 cv
300.608 312.586 327.499 337.797 330.565 371.621 cv
cp
1 1 1 rgb
f
337.479 437.25 mo
328.687 438.047 321.062 437.531 311.593 433.926 cv
310.413 433.465 284.229 422.84 284.765 390.34 cv
285.054 372.141 290.319 338.719 322.265 319.27 cv
332.46 313.066 342.647 309.465 352.546 308.566 cv
369.858 306.996 385.362 313.613 397.382 327.699 cv
405.378 337.078 409.038 351.691 407.421 367.793 cv
405.366 388.266 395.726 407.086 381.636 418.137 cv
365.819 430.523 350.937 436.031 337.479 437.25 cv
cp
.27451 .207843 .145098 rgb
f
313.265 426.82 mo
313.265 426.82 290.358 417.855 290.815 389.695 cv
291.214 365.156 300.542 339.254 325.054 324.332 cv
351.214 308.406 375.155 312.262 391.456 331.363 cv
407.745 350.469 404.909 391.152 376.116 414.098 cv
359.812 427.098 334.585 434.93 313.265 426.82 cv
cp
1 1 1 rgb
f
238.503 157.754 mo
238.503 157.754 204.308 132.98 201.812 111.473 cv
199.312 89.9727 205.96 77.8477 202.858 65.3867 cv
199.765 52.9258 187.312 56.0195 184.515 63.4883 cv
181.714 70.9609 185.159 80.082 193.843 77.6055 cv
193.843 77.6055 184.304 84.4063 179.46 75.8086 cv
174.612 67.2188 178.976 61.5703 186.87 56.9922 cv
194.757 52.4102 202.132 52.832 205.405 63.6289 cv
208.679 74.418 198.624 96.6445 210.788 122.516 cv
222.952 148.387 238.503 157.754 238.503 157.754 cv
cp
.27451 .207843 .145098 rgb
f
442.335 386.625 mo
410.866 389.48 382.948 366.199 380.089 334.73 cv
377.233 303.262 400.515 275.34 431.979 272.484 cv
463.444 269.629 491.37 292.906 494.229 324.375 cv
497.085 355.848 473.804 383.766 442.335 386.625 cv
cp
f
487.452 324.988 mo
489.968 352.766 470.991 379.949 443.206 382.473 cv
415.437 384.988 389.39 361.895 386.866 334.113 cv
384.343 306.34 404.819 281.781 432.593 279.262 cv
460.374 276.738 484.929 297.215 487.452 324.988 cv
cp
1 1 1 rgb
f
155.851 161.785 mo
155.851 161.785 160.437 168.145 169.058 166.359 cv
177.683 164.574 185.366 163.375 185.366 163.375 cv
185.366 163.375 177.12 169.395 173.476 170.73 cv
169.831 172.063 169.854 177.832 170.101 180.574 cv
170.351 183.313 168.921 181.434 168.249 179.488 cv
167.569 177.539 164.421 176.066 162.476 179.508 cv
160.526 182.949 160.374 175.684 156.483 177.043 cv
152.585 178.398 152.585 178.398 152.585 178.398 cv
152.585 178.398 162.12 175.523 155.851 161.785 cv
cp
.27451 .207843 .145098 rgb
f
549.144 377.379 mo
511.761 368.215 487.526 335.574 495.12 304.621 cv
502.71 273.66 539.296 255.934 576.679 265.105 cv
614.062 274.27 638.296 306.91 630.706 337.867 cv
623.116 368.824 586.526 386.543 549.144 377.379 cv
cp
f
624.577 334.305 mo
617.604 362.73 584.558 379.066 550.765 370.77 cv
516.976 362.484 495.233 332.723 502.198 304.297 cv
509.171 275.867 542.218 259.539 576.015 267.824 cv
609.8 276.109 631.55 305.875 624.577 334.305 cv
cp
1 1 1 rgb
f
505.667 321.617 mo
505.667 321.617 522.952 362.414 565.53 365.133 cv
608.112 367.852 619.608 337.719 619.608 337.719 cv
619.608 337.719 596.476 364.875 562.351 359.199 cv
523.269 352.707 505.667 321.617 505.667 321.617 cv
cp
.27451 .207843 .145098 rgb
f
525.101 273.871 mo
525.101 273.871 550.526 264.664 578.022 272.18 cv
605.53 279.695 618.542 302.188 619.866 312.555 cv
619.866 312.555 603.858 270.789 525.101 273.871 cv
cp
f
gsave
502.663 315.496 mo
502.663 315.496 514.202 349.59 554.593 359.77 cv
594.976 369.949 608.921 349.359 619.483 335.543 cv
630.05 321.723 631.515 334.387 604.058 328.129 cv
576.601 321.863 535.812 320.535 525.147 311.586 cv
514.479 302.641 500.233 304.086 502.663 315.496 cv
cp
clp
516.354 310.598 mo
516.354 310.598 504.179 327.691 515.487 346.684 cv
515.487 346.684 510.679 329.539 516.354 310.598 cv
cp
f
524.413 308.199 mo
524.413 308.199 511.081 338.395 524.616 354.582 cv
524.616 354.582 517.804 336.18 524.413 308.199 cv
cp
f
530.581 315.441 mo
530.581 315.441 520.069 346.727 535.03 361.613 cv
535.03 361.613 526.55 343.906 530.581 315.441 cv
cp
f
539.077 316.496 mo
539.077 316.496 528.565 347.781 543.522 362.672 cv
543.522 362.672 535.054 344.961 539.077 316.496 cv
cp
f
547.573 319.609 mo
547.573 319.609 537.062 350.895 552.026 365.777 cv
552.026 365.777 543.562 348.074 547.573 319.609 cv
cp
f
556.319 321.754 mo
556.319 321.754 545.804 353.035 560.769 367.922 cv
560.769 367.922 552.296 350.219 556.319 321.754 cv
cp
f
565.062 323.898 mo
565.062 323.898 554.546 355.18 569.511 370.066 cv
569.511 370.066 561.038 352.363 565.062 323.898 cv
cp
f
573.796 323.977 mo
573.796 323.977 563.28 355.262 578.241 370.148 cv
578.241 370.148 569.769 352.445 573.796 323.977 cv
cp
f
582.776 325.152 mo
582.776 325.152 572.257 356.434 587.226 371.32 cv
587.226 371.32 578.745 353.617 582.776 325.152 cv
cp
f
590.897 325.598 mo
590.897 325.598 580.382 356.887 595.351 371.766 cv
595.351 371.766 586.878 354.066 590.897 325.598 cv
cp
f
599.136 323.504 mo
599.136 323.504 588.624 354.789 603.585 369.668 cv
603.585 369.668 595.116 351.965 599.136 323.504 cv
cp
f
607.515 325.039 mo
607.515 325.039 596.999 356.324 611.96 371.215 cv
611.96 371.215 603.483 353.512 607.515 325.039 cv
cp
f
614.909 326.348 mo
614.909 326.348 604.397 357.629 619.362 372.516 cv
619.362 372.516 610.89 354.813 614.909 326.348 cv
cp
f
grestore
528.46 446.332 mo
492.874 422.363 478.663 380.988 496.772 354.09 cv
514.882 327.199 558.569 324.82 594.147 348.785 cv
629.741 372.75 643.952 414.121 625.835 441.02 cv
607.726 467.91 564.046 470.297 528.46 446.332 cv
cp
f
620.202 437.215 mo
604.151 461.039 564.78 462.59 532.265 440.684 cv
499.733 418.781 486.374 381.715 502.413 357.895 cv
518.46 334.074 560.046 330.098 592.577 352.008 cv
625.101 373.902 636.241 413.395 620.202 437.215 cv
cp
1 1 1 rgb
f
528.851 342.395 mo
528.851 342.395 586.155 325.852 622.726 387.855 cv
622.726 387.855 592.733 341.527 528.851 342.395 cv
cp
f
gsave
502.124 372.855 mo
502.124 372.855 498.772 409.453 544.64 433.887 cv
590.507 458.332 615.562 432.305 615.562 432.305 cv
615.562 432.305 603.522 432.824 589.569 421.465 cv
575.604 410.098 549.632 406.363 527.069 387.355 cv
504.507 368.348 505.897 361.098 505.897 361.098 cv
505.897 361.098 500.413 363.082 502.124 372.855 cv
cp
clp
514.491 369.941 mo
514.491 369.941 497.163 381.785 501.226 403.512 cv
501.226 403.512 502.624 385.762 514.491 369.941 cv
cp
.27451 .207843 .145098 rgb
f
522.882 370.473 mo
522.882 370.473 499.948 394.215 507.077 414.082 cv
507.077 414.082 507.026 394.453 522.882 370.473 cv
cp
f
526.171 379.395 mo
526.171 379.395 505.507 405.137 514.413 424.266 cv
514.413 424.266 512.577 404.723 526.171 379.395 cv
cp
f
533.78 383.316 mo
533.78 383.316 513.124 409.055 522.026 428.191 cv
522.026 428.191 520.187 408.645 533.78 383.316 cv
cp
f
540.687 389.176 mo
540.687 389.176 520.03 414.914 528.937 434.043 cv
528.937 434.043 527.089 414.504 540.687 389.176 cv
cp
f
548.159 394.199 mo
548.159 394.199 527.491 419.941 536.397 439.074 cv
536.397 439.074 534.554 419.531 548.159 394.199 cv
cp
f
555.616 399.23 mo
555.616 399.23 534.96 424.965 543.866 444.098 cv
543.866 444.098 542.019 424.559 555.616 399.23 cv
cp
f
563.788 402.316 mo
563.788 402.316 543.124 428.059 552.03 447.188 cv
552.03 447.188 550.194 427.645 563.788 402.316 cv
cp
f
571.812 406.52 mo
571.812 406.52 551.155 432.254 560.062 451.387 cv
560.062 451.387 558.214 431.848 571.812 406.52 cv
cp
f
579.28 409.738 mo
579.28 409.738 558.616 435.48 567.522 454.613 cv
567.522 454.613 565.687 435.07 579.28 409.738 cv
cp
f
587.741 410.613 mo
587.741 410.613 567.077 436.348 575.983 455.484 cv
575.983 455.484 574.14 435.938 587.741 410.613 cv
cp
f
595.062 414.949 mo
595.062 414.949 574.405 440.684 583.315 459.82 cv
583.315 459.82 581.468 440.277 595.062 414.949 cv
cp
f
601.569 418.73 mo
601.569 418.73 580.905 444.465 589.812 463.594 cv
589.812 463.594 587.968 444.051 601.569 418.73 cv
cp
f
grestore
504.612 370.887 mo
504.612 370.887 496.28 403.852 530.815 431.332 cv
565.351 458.813 599.937 449.551 611.069 440.168 cv
611.069 440.168 574.948 454.418 537.491 426.785 cv
500.042 399.152 504.612 370.887 504.612 370.887 cv
cp
.27451 .207843 .145098 rgb
f
372.89 348.66 mo
340.046 351.641 310.437 322.215 306.882 283.055 cv
303.331 243.898 327.163 209.621 360.003 206.641 cv
392.843 203.66 422.444 233.09 426.003 272.246 cv
429.554 311.402 405.729 345.684 372.89 348.66 cv
cp
f
422.21 272.594 mo
425.429 308.07 403.737 339.031 373.761 341.754 cv
343.784 344.473 316.878 317.918 313.663 282.441 cv
310.437 246.961 332.132 216 362.108 213.281 cv
392.085 210.559 418.991 237.113 422.21 272.594 cv
cp
1 1 1 rgb
f
319.812 261.262 mo
319.812 261.262 313.062 337.762 379.062 336.262 cv
379.062 336.262 325.812 333.262 327.312 264.262 cv
327.312 264.262 322.062 259.012 319.812 261.262 cv
cp
.27451 .207843 .145098 rgb
f
gsave
325.062 235.762 mo
325.062 235.762 316.812 272.512 331.812 305.512 cv
346.812 338.512 373.812 334.762 385.062 334.762 cv
385.062 334.762 355.062 313.012 356.562 271.012 cv
358.062 229.012 329.562 231.262 325.062 235.762 cv
cp
clp
347.538 234.59 mo
347.538 234.59 326.554 234.805 317.858 255.121 cv
317.858 255.121 328.882 241.145 347.538 234.59 cv
cp
f
354.218 239.691 mo
354.218 239.691 321.964 246.68 316.835 267.152 cv
316.835 267.152 327.702 250.809 354.218 239.691 cv
cp
f
351.991 248.945 mo
351.991 248.945 320.515 258.848 317.276 279.707 cv
317.276 279.707 326.608 262.434 351.991 248.945 cv
cp
f
356.136 256.43 mo
356.136 256.43 324.655 266.34 321.425 287.199 cv
321.425 287.199 330.753 269.926 356.136 256.43 cv
cp
f
358.624 265.137 mo
358.624 265.137 327.144 275.043 323.909 295.902 cv
323.909 295.902 333.241 278.637 358.624 265.137 cv
cp
f
362.038 273.469 mo
362.038 273.469 330.554 283.375 327.312 304.23 cv
327.312 304.23 336.647 286.965 362.038 273.469 cv
cp
f
365.444 281.797 mo
365.444 281.797 333.964 291.703 330.729 312.559 cv
330.729 312.559 340.062 295.293 365.444 281.797 cv
cp
f
370.522 288.906 mo
370.522 288.906 339.038 298.813 335.796 319.668 cv
335.796 319.668 345.132 302.402 370.522 288.906 cv
cp
f
374.858 296.855 mo
374.858 296.855 343.366 306.762 340.14 327.621 cv
340.14 327.621 349.468 310.348 374.858 296.855 cv
cp
f
379.272 303.684 mo
379.272 303.684 347.788 313.594 344.554 334.453 cv
344.554 334.453 353.89 317.184 379.272 303.684 cv
cp
f
385.812 309.117 mo
385.812 309.117 354.331 319.027 351.101 339.879 cv
351.101 339.879 360.429 322.613 385.812 309.117 cv
cp
f
389.491 316.793 mo
389.491 316.793 358.015 326.699 354.78 347.559 cv
354.78 347.559 364.108 330.289 389.491 316.793 cv
cp
f
392.796 323.547 mo
392.796 323.547 361.319 333.449 358.081 354.309 cv
358.081 354.309 367.413 337.043 392.796 323.547 cv
cp
f
grestore
382.062 325.012 mo
382.062 325.012 392.562 323.512 387.312 321.262 cv
382.062 319.012 376.812 324.262 382.062 325.012 cv
cp
f
468.78 318.887 mo
430.925 313.695 403.257 286.672 407.101 258.645 cv
410.944 230.621 444.874 212.043 482.726 217.238 cv
520.593 222.426 548.257 249.453 544.413 277.48 cv
540.569 305.508 506.64 324.082 468.78 318.887 cv
cp
f
537.944 274.574 mo
534.46 300.02 503.909 316.844 469.71 312.148 cv
435.519 307.461 410.319 290.258 414.108 257.59 cv
417.069 232.074 448.151 215.32 482.347 220.012 cv
516.546 224.699 541.437 249.133 537.944 274.574 cv
cp
1 1 1 rgb
f
428.171 237.816 mo
428.171 237.816 439.335 222.695 475.476 224.113 cv
511.616 225.539 528.577 249.066 530.944 253.93 cv
530.944 253.93 514.491 234.012 479.749 229.754 cv
445.011 225.492 428.171 237.816 428.171 237.816 cv
cp
.27451 .207843 .145098 rgb
f
422.718 279.465 mo
422.718 279.465 435.218 302.371 475.046 306.324 cv
510.905 309.875 529.671 287.066 529.671 287.066 cv
529.671 287.066 507.569 304.727 470.413 299.629 cv
433.265 294.535 422.718 279.465 422.718 279.465 cv
cp
f
gsave
417.554 272.949 mo
417.554 272.949 427.233 296.23 468.097 301.832 cv
508.96 307.441 528.495 291.957 533.745 281.316 cv
538.991 270.68 539.698 265.48 515.851 268.266 cv
491.999 271.051 462.819 268.559 454.21 265.105 cv
445.597 261.656 414.694 255.145 417.554 272.949 cv
cp
clp
428.429 265.359 mo
428.429 265.359 418.104 283.625 431.323 301.336 cv
431.323 301.336 424.761 284.789 428.429 265.359 cv
cp
f
436.198 262.129 mo
436.198 262.129 426.077 293.551 441.226 308.246 cv
441.226 308.246 432.538 290.652 436.198 262.129 cv
cp
f
443.089 268.691 mo
443.089 268.691 435.882 300.902 452.312 314.156 cv
452.312 314.156 442.038 297.426 443.089 268.691 cv
cp
f
451.644 268.863 mo
451.644 268.863 444.444 301.07 460.874 314.32 cv
460.874 314.32 450.608 297.59 451.644 268.863 cv
cp
f
460.429 271.074 mo
460.429 271.074 453.218 303.281 469.647 316.531 cv
469.647 316.531 459.382 299.805 460.429 271.074 cv
cp
f
469.343 272.297 mo
469.343 272.297 462.144 304.504 478.573 317.754 cv
478.573 317.754 468.296 301.027 469.343 272.297 cv
cp
f
478.265 273.52 mo
478.265 273.52 471.05 305.723 487.479 318.98 cv
487.479 318.98 477.214 302.25 478.265 273.52 cv
cp
f
486.952 272.691 mo
486.952 272.691 479.749 304.902 496.179 318.152 cv
496.179 318.152 485.909 301.426 486.952 272.691 cv
cp
f
496.007 272.926 mo
496.007 272.926 488.804 305.133 505.233 318.383 cv
505.233 318.383 494.968 301.66 496.007 272.926 cv
cp
f
504.14 272.527 mo
504.14 272.527 496.929 304.734 513.358 317.984 cv
513.358 317.984 503.089 301.258 504.14 272.527 cv
cp
f
512.112 269.582 mo
512.112 269.582 504.905 301.793 521.335 315.043 cv
521.335 315.043 511.062 298.313 512.112 269.582 cv
cp
f
520.597 270.246 mo
520.597 270.246 513.397 302.457 529.819 315.707 cv
529.819 315.707 519.554 298.977 520.597 270.246 cv
cp
f
528.097 270.77 mo
528.097 270.77 520.897 302.98 537.327 316.227 cv
537.327 316.227 527.054 299.504 528.097 270.77 cv
cp
f
grestore
533.351 267.637 mo
533.351 267.637 534.425 270.813 532.198 270.504 cv
529.972 270.199 531.729 262.871 533.351 267.637 cv
cp
f
310.812 286.762 mo
310.812 286.762 314.312 312.262 325.812 321.762 cv
310.812 335.762 li
310.812 335.762 309.312 311.262 289.315 305.262 cv
289.315 305.262 305.312 295.762 310.812 286.762 cv
cp
f
302.065 411.012 mo
302.065 411.012 314.815 433.512 353.815 420.762 cv
392.815 408.012 396.565 371.262 398.065 366.012 cv
391.315 357.762 li
391.315 357.762 386.815 398.262 358.315 412.512 cv
322.315 430.512 302.065 411.012 302.065 411.012 cv
cp
f
245.769 409.16 mo
227.288 410.84 213.827 404.906 202.812 394.266 cv
194.476 386.203 188.933 374.496 189.312 364.266 cv
188.812 358.957 189.819 327.262 221.624 308.984 cv
234.585 301.539 248.366 297.164 261.304 295.988 cv
283.62 293.965 302.511 301.738 311.815 316.781 cv
315.155 322.176 325.491 341.484 318.187 363.188 cv
312.499 380.066 297.851 393.152 274.644 402.074 cv
264.546 405.957 254.835 408.34 245.769 409.16 cv
cp
f
194.085 364.652 mo
194.085 364.652 189.624 332.457 225.366 312.137 cv
261.108 291.816 295.351 297.246 307.96 317.832 cv
318.062 334.332 323.815 379.512 274.69 398.637 cv
219.894 419.973 192.929 385.711 194.085 364.652 cv
cp
1 1 1 rgb
f
209.019 387.949 mo
209.019 387.949 228.085 406.746 267.546 393.938 cv
315.827 378.258 311.897 343.223 311.897 343.223 cv
311.897 343.223 307.972 371.238 271.288 385.313 cv
232.714 400.113 209.019 387.949 209.019 387.949 cv
cp
.27451 .207843 .145098 rgb
f
200.065 375.012 mo
200.065 375.012 194.815 369.012 200.065 368.262 cv
205.315 367.512 204.565 378.762 200.065 375.012 cv
cp
f
gsave
207.819 385.758 mo
207.819 385.758 224.815 400.758 260.815 390.762 cv
296.815 380.766 310.812 361.762 313.315 333.762 cv
315.819 305.762 301.319 297.766 293.319 311.762 cv
285.312 325.762 285.819 352.762 257.319 369.762 cv
228.819 386.766 207.819 385.758 207.819 385.758 cv
cp
clp
292.315 308.762 mo
292.315 308.762 318.819 328.762 310.812 364.266 cv
310.812 364.266 314.319 338.262 292.315 308.762 cv
cp
f
289.585 318.84 mo
289.585 318.84 315.155 340.012 305.558 375.117 cv
305.558 375.117 310.315 349.262 289.585 318.84 cv
cp
f
285.788 328.863 mo
285.788 328.863 310.034 351.543 298.339 386.004 cv
298.339 386.004 303.249 363.398 285.788 328.863 cv
cp
f
282.53 338.324 mo
282.53 338.324 304.522 363.199 289.616 396.398 cv
289.616 396.398 296.647 374.355 282.53 338.324 cv
cp
f
277.198 345.59 mo
277.198 345.59 297.288 372.023 279.968 404.027 cv
279.968 404.027 290.319 381.258 277.198 345.59 cv
cp
f
270.917 353.512 mo
270.917 353.512 288.964 381.379 269.296 411.996 cv
269.296 411.996 280.812 388.266 270.917 353.512 cv
cp
f
263.722 359.078 mo
263.722 359.078 280.03 387.996 258.53 417.352 cv
258.53 417.352 270.312 394.758 263.722 359.078 cv
cp
f
255.237 363.773 mo
255.237 363.773 269.53 393.75 246.054 421.559 cv
246.054 421.559 258.894 402.305 255.237 363.773 cv
cp
f
247.374 368.043 mo
247.374 368.043 259.952 398.77 234.952 425.215 cv
234.952 425.215 248.851 406.711 247.374 368.043 cv
cp
f
239.577 370.922 mo
239.577 370.922 250.312 402.34 223.788 427.262 cv
223.788 427.262 238.761 409.617 239.577 370.922 cv
cp
f
230.476 375.316 mo
230.476 375.316 239.651 407.227 211.929 430.805 cv
211.929 430.805 227.749 413.918 230.476 375.316 cv
cp
f
221.476 377.816 mo
221.476 377.816 230.651 409.73 202.929 433.309 cv
202.929 433.309 218.749 416.418 221.476 377.816 cv
cp
f
grestore
195.312 360.262 mo
195.312 360.262 196.315 319.262 241.315 307.762 cv
241.315 307.762 204.812 327.758 195.312 360.262 cv
cp
f
255.64 318.566 mo
235.28 320.418 218.229 311.723 207.64 294.094 cv
207.155 293.152 186.429 249.574 225.706 215.176 cv
238.644 203.844 253.198 197.375 268.968 195.945 cv
286.901 194.32 302.937 199.809 310.866 205.969 cv
322.175 214.754 329.702 230.488 330.054 246.055 cv
330.343 258.586 326.335 277.215 305.655 294.832 cv
289.163 308.887 271.874 317.098 255.64 318.566 cv
cp
f
213.413 289.898 mo
213.413 289.898 194.218 249.84 229.952 217.691 cv
261.507 189.316 296.241 200.527 306.452 208.688 cv
322.694 221.668 336.085 258.637 301.202 289.16 cv
266.319 319.676 230.64 319.301 213.413 289.898 cv
cp
1 1 1 rgb
f
220.151 289.496 mo
220.151 289.496 215.815 283.512 219.565 284.262 cv
223.315 285.012 229.737 296.23 220.151 289.496 cv
cp
.27451 .207843 .145098 rgb
f
212.815 272.262 mo
212.815 272.262 202.315 228.012 250.315 208.512 cv
250.315 208.512 213.565 227.262 212.815 272.262 cv
cp
f
237.819 302.762 mo
237.819 302.762 302.312 313.262 327.312 237.762 cv
327.312 237.762 297.319 297.262 237.819 302.762 cv
cp
f
gsave
225.312 299.762 mo
225.312 299.762 263.319 308.262 288.819 287.762 cv
314.319 267.262 323.819 248.262 326.319 224.262 cv
306.819 193.762 li
306.819 193.762 300.819 259.266 268.812 279.262 cv
236.812 299.262 225.312 299.762 225.312 299.762 cv
cp
clp
310.155 223.121 mo
310.155 223.121 328.999 232.371 328.081 254.453 cv
328.081 254.453 324.163 237.09 310.155 223.121 cv
cp
f
301.937 224.844 mo
301.937 224.844 328.015 245.063 323.812 265.75 cv
323.812 265.75 321.062 246.316 301.937 224.844 cv
cp
f
299.944 234.156 mo
299.944 234.156 324.069 256.668 317.991 276.887 cv
317.991 276.887 317.022 257.277 299.944 234.156 cv
cp
f
292.976 239.121 mo
292.976 239.121 317.108 261.637 311.019 281.852 cv
311.019 281.852 310.062 262.246 292.976 239.121 cv
cp
f
286.976 245.895 mo
286.976 245.895 311.101 268.426 305.019 288.633 cv
305.019 288.633 304.054 269.031 286.976 245.895 cv
cp
f
280.304 251.941 mo
280.304 251.941 304.433 274.469 298.358 294.676 cv
298.358 294.676 297.382 275.066 280.304 251.941 cv
cp
f
273.636 257.984 mo
273.636 257.984 297.757 280.508 291.683 300.715 cv
291.683 300.715 290.702 281.117 273.636 257.984 cv
cp
f
265.991 262.211 mo
265.991 262.211 290.116 284.73 284.042 304.941 cv
284.042 304.941 283.069 285.332 265.991 262.211 cv
cp
f
258.655 267.508 mo
258.655 267.508 282.776 290.035 276.687 310.246 cv
276.687 310.246 275.733 290.629 258.655 267.508 cv
cp
f
251.718 271.762 mo
251.718 271.762 275.851 294.285 269.765 314.504 cv
269.765 314.504 268.788 294.895 251.718 271.762 cv
cp
f
243.476 273.844 mo
243.476 273.844 267.601 296.363 261.515 316.574 cv
261.515 316.574 260.554 296.973 243.476 273.844 cv
cp
f
236.839 279.18 mo
236.839 279.18 260.96 301.699 254.882 321.91 cv
254.882 321.91 253.921 302.313 236.839 279.18 cv
cp
f
230.952 283.848 mo
230.952 283.848 255.069 306.355 248.991 326.57 cv
248.991 326.57 248.022 306.973 230.952 283.848 cv
cp
f
grestore
gsave
227.065 250.512 mo
227.065 250.512 230.065 226.512 247.315 222.012 cv
264.565 217.512 261.565 240.012 244.315 252.012 cv
227.065 264.012 227.065 250.512 227.065 250.512 cv
cp
clp
222.069 254.012 mo
222.069 254.012 232.573 250.762 244.319 259.012 cv
244.319 259.012 234.312 246.766 222.069 254.012 cv
cp
1 1 1 rgb
f
222.319 248.512 mo
222.319 248.512 234.569 242.512 249.569 254.262 cv
249.569 254.262 237.569 238.262 222.319 248.512 cv
cp
f
254.069 249.512 mo
254.069 249.512 244.569 235.516 225.319 241.262 cv
225.319 241.262 238.573 238.262 254.069 249.512 cv
cp
f
258.069 242.512 mo
258.069 242.512 248.069 228.012 228.819 235.512 cv
228.819 235.512 245.562 232.012 258.069 242.512 cv
cp
f
261.069 235.762 mo
261.069 235.762 253.827 222.512 232.319 229.512 cv
232.319 229.512 248.065 225.262 261.069 235.762 cv
cp
f
262.319 227.262 mo
262.319 227.262 253.069 216.762 238.319 223.512 cv
238.319 223.512 250.573 220.762 262.319 227.262 cv
cp
f
grestore
494.319 361.777 mo
493.351 358.691 489.89 349.848 485.577 346.074 cv
486.069 346.512 li
496.187 319.164 li
497.921 329.449 li
498.718 334.199 502.007 344.609 506.562 344.609 cv
513.124 344.609 li
513.124 344.609 514.069 352.262 507.819 360.512 cv
501.565 368.766 496.382 368.344 496.382 368.344 cv
494.319 361.777 li
cp
f
496.315 337.762 mo
496.315 337.762 497.562 348.012 506.562 348.012 cv
506.562 348.012 510.319 348.766 505.069 356.512 cv
499.819 364.266 497.562 360.762 497.562 360.762 cv
497.562 360.762 496.819 352.012 490.819 346.762 cv
496.315 337.762 li
cp
f
399.069 355.012 mo
399.069 355.012 415.069 381.262 448.819 375.516 cv
482.569 369.762 483.569 327.262 481.069 317.512 cv
473.819 315.262 li
473.819 315.262 480.101 350.887 457.819 364.012 cv
425.569 383.016 399.069 355.012 399.069 355.012 cv
cp
f
407.374 270.465 mo
404.745 268.574 403.569 266.512 394.569 263.762 cv
385.569 261.012 380.065 262.012 380.065 262.012 cv
383.343 235.223 li
390.894 242.422 li
394.374 245.746 403.245 252.113 406.897 249.383 cv
412.151 245.449 li
412.151 245.449 416.39 249.414 416.319 259.762 cv
416.257 270.113 410.562 273.512 410.562 273.512 cv
407.374 270.465 li
cp
f
394.585 250.039 mo
394.585 250.039 401.722 257.5 408.929 252.109 cv
408.929 252.109 412.39 250.461 412.831 259.809 cv
413.276 269.16 409.362 267.707 409.362 267.707 cv
409.362 267.707 404.065 261.512 387.069 258.512 cv
394.585 250.039 li
cp
f
364.737 267.418 mo
326.675 270.871 293.468 248.973 290.718 218.602 cv
287.96 188.23 316.679 160.715 354.741 157.262 cv
392.796 153.809 426.003 175.707 428.757 206.078 cv
431.511 236.449 402.796 263.965 364.737 267.418 cv
cp
f
421.827 204.949 mo
424.335 232.59 399.694 259.141 365.319 262.262 cv
330.94 265.379 299.839 243.887 297.331 216.246 cv
294.823 188.605 320.663 163.672 355.038 160.551 cv
389.417 157.434 419.319 177.309 421.827 204.949 cv
cp
1 1 1 rgb
f
304.644 197.254 mo
304.644 197.254 307.55 173.902 347.437 165.258 cv
387.319 156.617 406.55 180.48 406.55 180.48 cv
406.55 180.48 386.042 164.77 350.37 170.016 cv
314.698 175.258 304.644 197.254 304.644 197.254 cv
cp
.27451 .207843 .145098 rgb
f
415.163 196.004 mo
415.163 196.004 416.163 201.371 414.991 199.859 cv
413.819 198.352 412.812 193.824 415.163 196.004 cv
cp
f
304.687 225.371 mo
304.687 225.371 315.683 252.488 352.479 254.168 cv
389.28 255.848 415.233 231.91 417.448 212.125 cv
417.448 212.125 407.577 241.637 365.839 246.426 cv
324.097 251.219 307.034 229.172 304.687 225.371 cv
cp
f
gsave
304.687 225.371 mo
304.687 225.371 320.241 251.566 351.308 249.504 cv
382.374 247.438 406.007 242.277 418.468 209.52 cv
418.468 209.52 420.378 196.434 409.761 202.348 cv
399.147 208.262 388.526 215.625 360.241 219.324 cv
331.96 223.02 328.874 218.027 315.054 215.137 cv
301.233 212.25 300.976 221.816 304.687 225.371 cv
cp
clp
311.437 219.48 mo
311.437 219.48 305.476 239.602 322.339 253.887 cv
322.339 253.887 312.226 239.246 311.437 219.48 cv
cp
f
318.272 214.598 mo
318.272 214.598 315.483 247.48 333.542 258.395 cv
333.542 258.395 321.12 243.207 318.272 214.598 cv
cp
f
326.464 219.441 mo
326.464 219.441 326.687 252.441 345.671 261.66 cv
345.671 261.66 331.905 247.668 326.464 219.441 cv
cp
f
334.843 217.676 mo
334.843 217.676 335.065 250.684 354.05 259.898 cv
354.05 259.898 340.28 245.906 334.843 217.676 cv
cp
f
343.897 217.855 mo
343.897 217.855 344.116 250.859 363.101 260.082 cv
363.101 260.082 349.339 246.09 343.897 217.855 cv
cp
f
352.854 217.043 mo
352.854 217.043 353.077 250.051 372.069 259.266 cv
372.069 259.266 358.304 245.273 352.854 217.043 cv
cp
f
361.819 216.23 mo
361.819 216.23 362.042 249.234 381.026 258.449 cv
381.026 258.449 367.265 244.457 361.819 216.23 cv
cp
f
370.104 213.469 mo
370.104 213.469 370.327 246.473 389.319 255.691 cv
389.319 255.691 375.554 241.699 370.104 213.469 cv
cp
f
378.983 211.66 mo
378.983 211.66 379.202 244.664 398.187 253.883 cv
398.187 253.883 384.425 239.891 378.983 211.66 cv
cp
f
386.812 209.445 mo
386.812 209.445 387.03 242.449 406.022 251.668 cv
406.022 251.668 392.253 237.676 386.812 209.445 cv
cp
f
393.917 204.785 mo
393.917 204.785 394.14 237.789 413.124 247.008 cv
413.124 247.008 399.358 233.016 393.917 204.785 cv
cp
f
402.343 203.52 mo
402.343 203.52 402.565 236.527 421.55 245.742 cv
421.55 245.742 407.78 231.75 402.343 203.52 cv
cp
f
409.761 202.348 mo
409.761 202.348 409.991 235.352 428.976 244.57 cv
428.976 244.57 415.21 230.578 409.761 202.348 cv
cp
f
grestore
324.351 251.199 mo
324.351 251.199 339.589 265.629 369.569 259.895 cv
399.554 254.16 407.296 239.906 407.296 239.906 cv
407.296 239.906 367.667 267.977 324.351 251.199 cv
cp
1 1 1 rgb
f
256.339 208.613 mo
253.292 208.203 250.187 207.629 247.104 206.887 cv
207.179 197.336 201.847 164.723 201.647 163.34 cv
199.515 145.113 206.769 109.672 249.19 104.41 cv
257.374 103.398 265.39 103.402 273.015 104.418 cv
307.222 109.004 326.745 132.203 328.358 152.75 cv
329.538 167.883 324.007 182.066 312.788 192.684 cv
298.972 205.762 278.39 211.566 256.339 208.613 cv
cp
.27451 .207843 .145098 rgb
f
208.538 161.281 mo
208.538 161.281 199.901 115.066 251.358 108.41 cv
294.706 102.801 322.972 128.566 324.772 151.84 cv
327.319 185.004 292.968 212.66 249.308 202.191 cv
212.44 193.344 208.538 161.281 208.538 161.281 cv
cp
1 1 1 rgb
f
232.386 118.637 mo
232.386 118.637 251.933 107.211 282.835 114.801 cv
309.944 121.457 323.511 144.461 321.519 159.328 cv
321.519 159.328 323.562 138.418 288.53 123.129 cv
253.503 107.844 232.386 118.637 232.386 118.637 cv
cp
.27451 .207843 .145098 rgb
f
216.101 161.105 mo
216.101 161.105 221.343 189.801 259.89 195.723 cv
298.452 201.641 315.069 173.598 315.069 173.598 cv
315.069 173.598 293.397 194.152 262.179 189.973 cv
230.956 185.793 216.101 161.105 216.101 161.105 cv
cp
f
310.538 156.418 mo
310.538 156.418 313.687 149.145 314.3 155.438 cv
314.921 161.73 308.065 160.762 310.538 156.418 cv
cp
f
gsave
211.526 154.117 mo
211.526 154.117 219.858 180.621 248.069 189.605 cv
276.284 198.582 308.397 185.887 319.503 166.363 cv
330.608 146.84 317.741 152.738 302.042 155.781 cv
286.343 158.824 274.226 164.785 249.847 159.238 cv
225.472 153.699 203.909 138.027 211.526 154.117 cv
cp
clp
218.351 151.82 mo
218.351 151.82 208.081 170.117 221.358 187.785 cv
221.358 187.785 214.737 171.262 218.351 151.82 cv
cp
f
226.104 148.57 mo
226.104 148.57 216.093 180.023 231.284 194.668 cv
231.284 194.668 222.542 177.102 226.104 148.57 cv
cp
f
233.019 155.113 mo
233.019 155.113 225.917 187.34 242.39 200.539 cv
242.39 200.539 232.069 183.844 233.019 155.113 cv
cp
f
241.577 155.25 mo
241.577 155.25 234.483 187.48 250.948 200.676 cv
250.948 200.676 240.624 183.98 241.577 155.25 cv
cp
f
250.366 157.434 mo
250.366 157.434 243.265 189.668 259.737 202.863 cv
259.737 202.863 249.413 186.168 250.366 157.434 cv
cp
f
259.288 158.629 mo
259.288 158.629 252.179 190.863 268.655 204.059 cv
268.655 204.059 258.335 187.363 259.288 158.629 cv
cp
f
268.21 159.82 mo
268.21 159.82 261.101 192.055 277.573 205.254 cv
277.573 205.254 267.257 188.555 268.21 159.82 cv
cp
f
276.897 158.969 mo
276.897 158.969 269.792 191.203 286.269 204.398 cv
286.269 204.398 275.952 187.707 276.897 158.969 cv
cp
f
285.944 159.172 mo
285.944 159.172 278.851 191.402 295.319 204.605 cv
295.319 204.605 285.003 187.902 285.944 159.172 cv
cp
f
294.077 158.746 mo
294.077 158.746 286.976 190.98 303.448 204.18 cv
303.448 204.18 293.124 187.48 294.077 158.746 cv
cp
f
302.042 155.781 mo
302.042 155.781 294.94 188.012 311.413 201.207 cv
311.413 201.207 301.093 184.512 302.042 155.781 cv
cp
f
310.538 156.418 mo
310.538 156.418 303.429 188.645 319.905 201.848 cv
319.905 201.848 309.585 185.152 310.538 156.418 cv
cp
f
318.03 156.918 mo
318.03 156.918 310.937 189.148 327.405 202.348 cv
327.405 202.348 317.089 185.648 318.03 156.918 cv
cp
f
grestore
219.304 183.059 mo
219.304 183.059 230.718 200.527 260.745 203.766 cv
290.772 207.004 307.515 189.789 307.515 189.789 cv
307.515 189.789 288.999 203.527 258.819 198.711 cv
228.636 193.902 219.304 183.059 219.304 183.059 cv
cp
1 1 1 rgb
f
304.315 405.012 mo
304.315 405.012 296.815 400.512 304.315 401.262 cv
311.815 402.012 309.565 411.762 304.315 405.012 cv
cp
.27451 .207843 .145098 rgb
f
443.065 303.762 mo
443.065 303.762 482.065 327.762 521.815 301.512 cv
521.815 301.512 488.815 318.762 443.065 303.762 cv
cp
1 1 1 rgb
f
318.565 300.762 mo
318.565 300.762 329.065 345.012 377.065 342.012 cv
377.065 342.012 340.315 343.512 318.565 300.762 cv
cp
f
gsave
303.565 410.262 mo
303.565 410.262 314.815 428.262 341.065 421.512 cv
377.253 412.207 391.062 392.508 393.565 364.512 cv
396.069 336.512 382.819 336.262 374.815 350.262 cv
366.812 364.262 366.069 383.508 337.569 400.512 cv
309.069 417.516 303.565 410.262 303.565 410.262 cv
cp
clp
372.565 339.512 mo
372.565 339.512 399.069 359.512 391.062 395.016 cv
391.062 395.016 394.569 369.012 372.565 339.512 cv
cp
.27451 .207843 .145098 rgb
f
369.835 349.59 mo
369.835 349.59 395.405 370.762 385.808 405.867 cv
385.808 405.867 390.565 380.016 369.835 349.59 cv
cp
f
366.038 359.613 mo
366.038 359.613 390.284 382.289 378.589 416.754 cv
378.589 416.754 383.499 394.148 366.038 359.613 cv
cp
f
362.78 369.074 mo
362.78 369.074 384.772 393.949 369.866 427.148 cv
369.866 427.148 376.897 405.105 362.78 369.074 cv
cp
f
357.448 376.336 mo
357.448 376.336 377.538 402.773 360.218 434.777 cv
360.218 434.777 370.569 412.008 357.448 376.336 cv
cp
f
351.167 384.262 mo
351.167 384.262 369.214 412.129 349.546 442.746 cv
349.546 442.746 361.062 419.016 351.167 384.262 cv
cp
f
343.972 389.824 mo
343.972 389.824 360.28 418.746 338.78 448.102 cv
338.78 448.102 350.562 425.508 343.972 389.824 cv
cp
f
335.487 394.523 mo
335.487 394.523 349.78 424.5 326.304 452.309 cv
326.304 452.309 339.144 433.055 335.487 394.523 cv
cp
f
327.624 398.793 mo
327.624 398.793 340.202 429.52 315.202 455.965 cv
315.202 455.965 329.101 437.461 327.624 398.793 cv
cp
f
319.827 401.672 mo
319.827 401.672 330.562 433.09 304.038 458.012 cv
304.038 458.012 319.011 440.367 319.827 401.672 cv
cp
f
310.726 406.066 mo
310.726 406.066 319.901 437.977 292.179 461.555 cv
292.179 461.555 307.999 444.668 310.726 406.066 cv
cp
f
301.726 408.566 mo
301.726 408.566 310.901 440.48 283.179 464.059 cv
283.179 464.059 298.999 447.168 301.726 408.566 cv
cp
f
grestore
gsave
459.94 235.672 mo
459.94 235.672 482.913 228.121 494.366 241.793 cv
505.808 255.469 484.179 262.375 465.96 251.906 cv
447.733 241.441 459.94 235.672 459.94 235.672 cv
cp
clp
454.64 232.652 mo
454.64 232.652 462.069 240.758 459.636 254.906 cv
459.636 254.906 466.429 240.621 454.64 232.652 cv
cp
f
459.726 230.527 mo
459.726 230.527 470.39 239.039 466.175 257.621 cv
466.175 257.621 475.507 239.934 459.726 230.527 cv
cp
f
472.386 259.664 mo
472.386 259.664 480.983 245.086 467.554 230.137 cv
467.554 230.137 475.929 240.84 472.386 259.664 cv
cp
f
480.429 260.281 mo
480.429 260.281 489.261 245.043 474.241 230.84 cv
474.241 230.84 484.577 244.484 480.429 260.281 cv
cp
f
487.812 260.105 mo
487.812 260.105 496.694 247.895 481.171 231.449 cv
481.171 231.449 491.741 243.863 487.812 260.105 cv
cp
f
496.03 257.605 mo
496.03 257.605 501.562 244.754 489.163 234.305 cv
489.163 234.305 496.89 244.207 496.03 257.605 cv
cp
f
grestore
gsave
549.804 231.465 mo
549.804 231.465 568.081 215.836 592.573 239.715 cv
605.335 252.164 574.343 257.891 555.999 247.633 cv
537.663 237.371 549.804 231.465 549.804 231.465 cv
cp
clp
544.468 228.504 mo
544.468 228.504 551.983 236.527 549.71 250.699 cv
549.71 250.699 556.343 236.34 544.468 228.504 cv
cp
f
549.53 226.32 mo
549.53 226.32 560.296 234.711 556.272 253.34 cv
556.272 253.34 565.421 235.551 549.53 226.32 cv
cp
f
562.515 255.313 mo
562.515 255.313 570.944 240.641 557.351 225.844 cv
557.351 225.844 565.851 236.449 562.515 255.313 cv
cp
f
570.569 255.844 mo
570.569 255.844 579.226 240.512 564.054 226.473 cv
564.054 226.473 574.538 240 570.569 255.844 cv
cp
f
577.948 255.582 mo
577.948 255.582 586.694 243.273 570.983 227 cv
570.983 227 581.694 239.301 577.948 255.582 cv
cp
f
586.132 252.992 mo
586.132 252.992 591.522 240.082 579.007 229.77 cv
579.007 229.77 586.843 239.582 586.132 252.992 cv
cp
f
grestore
gsave
346.155 180.887 mo
346.155 180.887 359.999 161.215 389.64 178.285 cv
405.093 187.18 376.483 200.41 356.163 195.016 cv
335.862 189.613 346.155 180.887 346.155 180.887 cv
cp
clp
340.257 179.34 mo
340.257 179.34 349.526 185.246 350.835 199.543 cv
350.835 199.543 353.702 183.988 340.257 179.34 cv
cp
f
344.624 175.969 mo
344.624 175.969 357.124 181.434 357.851 200.48 cv
357.851 200.48 362.304 180.98 344.624 175.969 cv
cp
f
364.386 200.84 mo
364.386 200.84 368.913 184.539 352.081 173.57 cv
352.081 173.57 362.937 181.738 364.386 200.84 cv
cp
f
372.319 199.359 mo
372.319 199.359 376.905 182.359 358.733 172.52 cv
358.733 172.52 372.237 183.027 372.319 199.359 cv
cp
f
379.405 197.277 mo
379.405 197.277 384.827 183.184 365.577 171.313 cv
365.577 171.313 378.991 180.574 379.405 197.277 cv
cp
f
386.694 192.742 mo
386.694 192.742 388.714 178.898 374.038 172.008 cv
374.038 172.008 384.054 179.574 386.694 192.742 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_green_grapes_bw.eps)
%%CreationDate: 3/11/2016 11:20 PM
%AI9_DataStream
%Gb",KBj2OeZLIa:SnJ%TZU4_jeU%BiYVAmD+:oY=4#(m\%c63!R@Ff^\%f>Mh8[HPc66\enXY#=5cCM/WDpK%%j#9ISQ`!t43c@V
%?;;s$oM`p(<6DQf-Y:00s8:onK9t]5Ygq>[mFZ;A^!hu`q"T]:<j%@QfkK2a/GqD-06X@(XhEJj(W09h]j@Zs>Ka#=?\MZu]5S+,
%.AT.^PtM"Y<45[QT#3LT:$3p3Y(ZUsZW_%?gpBA,ee*?.Xp&1K!;Nn-Dq9f2:+=tPn&*Rc(&m'a^N`9@bC8)]"5kl66AY>AAE1HV
%V[WE7mdjb0>&La;Km("5q`9dD1Rg!m\fWg;r!+&I`drX%i/ajBGZ*a)g'g]UgC&IHc_k`<L"&j">?^Za$POuca,kfG2s!O=qO]'f
%s534prtGBJVQ?$,oBbo-E"8'n\44Vq*JAoAhe1brjp4L__h52IW"dr/D6IXj7bUG5+:-mi4hp7LYWkefSmeKJ$hdpf?B@']f`&ZZ
%]<20UgSU)C>kt0g$/n<5r+e=c1+\[,VJLLSg"nC^#<#W!D"KCV_d95R2W*'-D:u\JB#&c!>q^mHh*qM-.g=_ipc?g;V8klqGoF,B
%Pj=SEDTQqAO(N[dWGWH"Kh.Z09X<+QCBsP,"KGs9Bu;^-Pj,c.g+^_nAH7an#HM;PWPGpR>NiW&NRd(L?oXCB`:IrsG(D\uRcW"=
%D-;MU*PH-P93m_Rb`pHR,#m!>m!jTcT0Nh[\(b=cYDG#qf!i79_'X'gj/a3-dX&Ta>CjiU5o.PU"t--C5F'!,J"aWn&=nR65n->&
%lL7*ML'.JO`uG#IJ$`GE^`Qo?l^c%-mA0aE+*3iJrA[L<(><D?\AMLL24p$ir\_Ze5jMJH68tbLji74S+npIdO6`'OWu;EaDi&p<
%1=SUr:]rmY43'S&+ro;sC$>Q'h^Q%P,X^tYni(>G29*/ZBq;(1lLdaPUi_\_7E>Sqni%4<8^r%4"RsIR*IPOsWK^2JKuR9+3,&3j
%IubqfinGa-_U3.Rh3$o&q!SOg2\A=lC"EPTh#"!_MZ,7U@ijF(PB%*lH\r;.GNJ/@#3lc!rNefmS$?Tieh[X1+E0UsLsZF7DU^;U
%9"bhkJ>f:E'-7pXNC6:;;Q(>!.JcCg2K>VM!cYbEgksgs_`C<'3THWLBk\j=<!NABs8<=%GhOPST0toAQJo:`gKSS]cI'tKEY68k
%U%rKBT2nj2Ioe-Xpu<"R?*eq6BnsKM(SP?9fdpCr;`lR39$OS04j;E>9gCT4,Q=bB$hk&.3+k@@:HdBd+b=(qFL`f!3n!3C'jYR.
%.eeImIk`dDMSe6W;##Bb."HK*!/\J5V=n$n7&8^N,BFWd:X@`$YgFK3Khe2gLmYG()RgA@m\Jhh5d70\\?O1n*b?g\ZbhhCNF'/[
%!%[ECQjhtGj,*.uo,);.=tq#1(Au_(eVFDO$UV8tI_4Af?H#!8kd791g4DmE\#8u1O>BC:<U3V.MXA8L,,F4ha!T6_L,0aMj$G9?
%2oD7.+Oq_mqGR?5+c"*R1igjFeYsgV&%Z7;Aoe^2C)G0i3IZ3,MJ:":*kq2TfbDqf7j/2mGI,Z!2\U""\*LQ&Cqnh@(;gr)q^%><
%=5i$]dqY(qC<ErbfO6ESk1Iuf)36@)-PIJdhZO*s?D@OG!_-p>AS0(Z":?q`DUOW7R<"L*b1SRLm\Etc?,#m,?>e#H\LB5p&s2Go
%)KQ44.Pk:HB$8G8\X>$.ZfPf-*+6*`h?%IF)%r-Nce5eLSkFa\eC\hMl"%\iYd/aZ.+S?dKru'Qc`M@>(LE=TX"f`>&FVeh%=l[V
%>9Ns,/"N^deJ)fD0++7NX'DT7YJtIcp#]f>1@`jo5<3G3m30+25LS2[1:C'nFf7,dI4,C38[P2>hd\n:4%*RWH-.Y9ZX>[uOY.%>
%F`t1KdN^W!<Kd+]V;GfVQAK6_X[ZFJl!-Yae&]9:UiWn(c'(IKgb0G+;-HciYuqbIn:JpO<!pnCHEG^Me<90!s!M<ocUa)S`nuc%
%/\DjNh+soti)mjS4UK\QdTmS_+tP(r=0Z9_gPl.X5iY(=f.hI7j][!]R4Db:pOTS&7s.JsL8e-uDI#dUZ%as]FoHB>Y3E$uSPbD=
%irFdF\U@KfgIVH[;oK%UBV=N[8F5-%C`KN%3*>4Y+bAKiIMJG;32js=i@6KU%hA<C\aSnlQ<24G\sRc$"QVG)Q[bQFS44au3Ze%]
%S@<KUk]YT@%<3\l;VOdg1iDK*r)P4X=["e+Y=Xt=1%DEQ"?9)bj%QFTP0[.\N'#/E?ZTpk]j@mQRpl)a"Q@GVT#Xe[A*L;Rk,Cm!
%\?"I;PffOBA?.ePf?V#\.9QsrQl>QOaaW#!s7gI-B"ckW_qK5>Pb8=>6Y:.Nin;t$?s^V4$J)$411OW(ZP+"%1(luUVWMPCh1d3-
%,Wdb5#CME8?tU;9Vs@f>K)F"F]GR8+OdsjXnVPoR`(SE%MZ0tRcQpS*Mr:#o!X2Z%ZG]mfdOb1`VSD#KA"I'mVWX<o5it,JHuaM_
%[;nXSK#V,K^u5&lTiMOOqdCd%-M)c\IkiYS1'rQAf>k)pP;,_">e/D#Q[&"NOmPJF.Rd+?!5g)g*DV<bds^d7eb>j(q/J7.oOAMl
%6$Ji4`]ipe2Lu6KH:7-;$4Qnd*ledf%:^$7c/4]>_jn``+,OZIi_Ot(n'1Kpq?4mpp@OT5KP<Ipj[ph%##]#kg;I">5OO45:D99S
%kr14o$C/@5^Cm1AB;f*L-9Q/#F'L+R$.(+I.Cd:/`eHqae[qD@nZIo`LBKC+UfjlJ3UkO8>^/(m1?V,:;^dpRmIE[YK;dOI>ZfPA
%[3R.8Mk+Tq86/Ir;R+O-6E="eKnT[(8rA<p&KahDJ6'/F\<'=UMT5Ba:]?*1(qje"rPrYU'Pc`E,%=dS>nGeG_JH]s"t8?.9GILB
%A>1@&O_JfBbVE$BaZk-Q1Js<7`1"PBP["(D?6Vitnac90je="dAm.UKPinbdct'"!(Zff[o@oLfOp%20cUCFDX(JmjZWr`E7,#k*
%;'sN<)3KGi4*+731%pG?[C7S$,mc?UU/B6W;>N-8M9&+W6t6m[l>KTR8eP[3jj`0uP\(hTC(fpq2,;a_pN!j'k9\:?RdJ&c'rRFj
%NVKVPN"^eI<PL5oH'G'22b,gnkaG!:FXq8+,k8lL9;S9<=;ZCdN:hKsAnHGX3df2Cn[2TCf+RH9N3CM$g?mp9)bk"6WG@"-Kt%]'
%N2t41[2E'C(N[!PZ?@b/g.YS;EOC9B=,TS%NlDXfT!Te8YQXuA>^<=NJ?ra-rF=p5N_tBSQlVsT1$YI#J'B3#]B-fFb&4'Flfa(A
%#EG_IJrt'djB_?9mj1T>N:i`>rmqRZodaerb_ilg%@(."]L=."SggVpU/GaF1fDJIIiBj3h[98is':1?Ui'%9GI^`]:Wg)GT<[c,
%_a[aAk7VW<XREYqRh^@>U7s<C#*sZTNS%2FI2Skmr!P$h9U]_g&"&)]FM$Cq[gJ004Z#>[8c6]Wq)>2@O%BSfAauOKoJPm2^0%Qs
%l7Gh,G<-&%[@`o:J*i'EF`*Y/P7an^rL->2:hZ0LB@X5WA5B([)^KCgSL5Sco.efO8:n`Z\Ni;;=Q@:BJQq^C.Qi&s:m6mV<C+eL
%*:.AO.oR`?Dc=WoCK`Fl3[$MCJV\*ilI7']c#3C&ikNqas1RA(IC&_;UsSZ`rd+eqZhWu?r]>do?j,+=<YFtf=j2(*oDLgSh9q\Z
%XaK>B(A"Y(\u0`fo:6*#eh#rF_S2JXHtOVN;YfCLPN3I@WAu>_0q*>g`36CCWW+goO\5HAX:629MHC$>!E,7K(n7XoPjJ)W4t"_+
%H\/L8)I9Pu^tPq;3E:K7N6SM"T_ii"-X]:fh6c&,$0BU2M1_4OCuuo<VteFeH/Fq,gWF4d$u7Ad:5(4[>,cmQ?b%T:.q*e$)4"=g
%bsLg?R+0?&2KPG6>\>kE=U_84MX\i>2KiY'q$Ec=L&[C<Sb?%o6M>5RmPuo2Etb2[<oCH?hS<7N0tV.?AMQ3Qn6h552^QN<c^(*j
%W?h@Fi\G7+_BMOSk3Yd@#As&jHWpCLZ[GO3!XTDOK"ZoNV>la9hDp.1j6m1cX4K\BqoR(P13:+P*&%<ra,@H1f^U.l)"PGc*%s+g
%bKTK3F1f^:0/LYl<&e266i7SG'^;5MOJ3uk])^M#K4h2I8@PbK`3jta1XF]1A;1$Kma9=;:&NHD![bV56kUId^">`9Jf1n('E8d@
%r@Q?&N(IT!mhX&IqP^;h5UOf:SdEH*E1Bp;RXX3TX2Hh4_D/STR2WV\Rjp*te%5S2$--b=[pOb_B@W>\eX+9EVZ3+M9D`@U;Z3eg
%IX5WF3E(Op;mT^(A(PdNhlZfrMNHM6p;ru1qT2;ZCu[-)_c">r1H"H>K#]uH$!rgl:6UXS<O01@LVLlYk')X4rf&hOIribMV_Kl>
%4*+UJbFVjM\'@<E;U0pB'UhF]NDZ2l6R%@Pqg3]].,.:C`*_V(U81'=2`>3J,flL0aV*$rNal"$s(-Y<)_N9sNS9XZo4(IFV)e-W
%9V__Po4(J.+2bhsIZ,O3bkr:k/nnsIN(IU@1I&n'O"hr0N.6nBeh/5jW4_Nkfh&MHC_nR>lK'9O^\lp/on\>Edp;;<G.Cnkb.Z86
%H"+O@E[B,0s.8*-67tidQs-E!".OV!#ci45E?Snh'@_^r0!rKC1]5o4CW.P+oqhZJ_QA(#\Rjee,(V+WC+Qe=aP:sIJ#`nch88G>
%\"l!EO\YDW9Y6laV5R2"GWKQiX%?%nFW2,DZarH/\j<[66,*`*,RWhOY\_\TEr6o!R`Cs+XS$Zr"`I]>P=00YU`2A$nfY^9`82t6
%Bp--!#uC:fK#4<2HPs:AfddXiZXg8,dpXFe$!g!\kc1]_s!#ceH^%\l$R[K#:,jC_k/S0*'9(Zb:;Gn4q_IhV[bPEHElk7rB$H=u
%[*5V^R5Hq0k%<3"baSFBem&8.o!VbDZh1KdZKDj",a^oF/cf!/F)GU8c-3_d3B&bWB'.n(P.Cf$>r!ZPh5#+0P=_)HR@-W*BdVYE
%]j<a:(6XLHgMY=`d%mSL*5h/h=Q9&iA=-bHDYil$/qn.C=(3opafV]r0rpAg='&ji7!<pEf?G#N(lpJa!f@u4b.E%+.2:*0;VY5i
%'T2#GYN80D_H-P8-&IslqMgF$&jAKA2>f!K51=P2njn"(H&?L1G;C[Zc.&/$^7I\,&_Crm#u&TEh,]='V"(ou@b`5XLN.'25k:6f
%-iNi?FdD4qF[]VL?Q(8bi](6C?sNIQI^X+.=@f5\p[k%bXFs!nla9d*E90`?4f7K*0?/]OJn1]YVg2/gL.O>+[sLH01hkB'=U>k@
%n=Oa/P:-JIoc2RA'8sBZ!]K'f%%X&Q<EOh0'#l)(IE/EQjiYLK[ZZ=F(OmeT`1+2'Wm%i\0q(>YGs$1`1qMGE#Q4`[F]((?9sE5G
%L&+"O)h&*(MhZE8mmau+?44U;-SqT4Eg3;d:,LFV7K]qLB6^GAU0Hft^ZO;91M(KjI6DXpPE9[JgLo%j;(;+9iWoi9iHZ%K4#\N+
%LT;oEo\a+O[&J"n<M(<Pe7A$c<J_q`38!9R^:,K+[8Lo2(<T^I?.12EPK1.E_JpnBIlC;tFQ&SiLIi;B8Hd413)5VjRE<DS2i%Ee
%Z>gdGaKrnk-WTF,4hP`[p>`VK0pNG-X5Pj?210<''5t@j-L:&F$[uXVSloKrEH1Pa!JX6DVI:s!\4RY0c_-o)QI4@5O%K,>mPkY'
%CZ=$c$i%:j,jT0%\HL_dg)bFg-C[`bmNNa^7F(o3Mgj\K6W7>:j7i@-`e)L]D8'8dPea_ppgP+62d@qES>UjoMbMp;gq%8LC(nq4
%d-$EOm,5@<c(,d8r%AJCN5nUdo(_fUWmfQ]9N/nL&mUNg.F^.6oKUaWLQes10/pr8s-U/6DAS=sm-[ht-d>VB-k%9s5,nFaVtZRh
%8\S+RmS+uH\P5JXp/4BF[ZfC&)4?JRbgc#mB%aF9LQI@F=+UsOKj*dfa\)sS8Fs=9ol3,PD(;nfNe.*l]lQ4e\'/)!s2;?Bb$1`@
%R9;NLm0T;Z=T4m+bMNH=2'5,1OP*UQd715P4bc@A%Q5?@WRl<%'ImV!,jj:SZs8Ohjj-0J2#cfZ!rcE$g"sbIeL_o.f<tH^2>Rc]
%AaV>S>(H5<'l\I$n.RPDQ`H*<(j.T348:J"ItRcK-t(4>r%%.=^0q0opqa9WL&\O^;n;CMB.N*&&'FH:a2&ikjgY?ii7L?\6O$'.
%)*K'jiGYpXV]X:Z=3=9TV`oSf;PcV:DgT!80Q.95UZ>ukh=r`1\3)K68$CQ_Tb=fg+euJmN4=+U@$lV)Dd.mQB/mU956Q]J>RfrQ
%k<0ZTeS^Os(7#Gmq!]A1cJCe`q8[@brg3#('2<edS_J`^HZlG3BC>=t&df1!rGhj=ose>EU&JDhGV?I221kn"Wu!itcua>_2NZ%5
%UF3VRM$\\!@E$S)j3n,0Ho9N.c4St2VhVaU=fu40%uuC%QNp$%%r8;BMaFbX1/bPGBDfY<>:kH(ebe[^03&GiXsC&IW>EmuOd1D%
%'&@\M+qQjhfC34Od2A%m(MIDFCqh-0&g/+]IZm1i^G!`+$3&j2fi"'^3K`N9,h_Fe'>jF1_X^-9[X`cRKA[?f@].bZ=!rOsrDjP:
%DA>tS6Q$6o0KH!/'B`tWFQ1S1%F=E&b,plB-@ih.J<RGljl5Z9j'XH!?nAiplH*@7W!pLhA>UP:nS:JD[W5),mF\R''!IG>M[[RX
%i!!.ug/W\e'!4R*f+K4^pM7g1T'Z_rbOA$j>-dm=$'Nr![c9jhpeS>)+,8Hg]a_Qm<d<'LBpMObqs"HSrf8BqXWW)7mR_`TG;Adt
%&9ecg7l>*!8t^.Z!&27h%*ZDJGYJgu>c]l6rcpRVPrmOG?J)8Z3o[&p#0La3Q&=?PTKdQ;WI+lj19?2Se8@'YL$_j`q!1#2<l>^k
%Kp&m"%=OhJL"?(]1Y-<jgR%dP.V4#0/AmPq.lGI`c%2[i=KaQn\7RWtR81Acg+0Pa@C,m(nFEfObokOb1]W_?\_=$)P:4%2JmA`.
%p2Rdm/>]p8`-V]>-.8i_3j4+n?gk@#Vp0Oc0t_EB<kQch;kTPAH*4&g%)$74qf^UQMbkN-@s\qtPjTn\STY*#)"EaS30nV3ROJDZ
%79!m=qR&%3h'b,MVDOrK0#?gACHHR`dq0F/^LPupIs#B[%`-6#f,D.:q.<(th!M+f[ZQB\GnHn`_S=j)NDd;m3%e:Tm9e[DQU1M0
%crQi`g*rPHWSMkFU(Tt7iJU>,\5:id)kBU%LE`MHNRUOA#`Fsg"+Wfbn8A=#'Y_q,`Tn`!o1>,OA*G0g[K/gaX$@ImLJH=FkghE(
%Acr"BXT?r=`kEkNg>s$=gk+tXp^reZL/"c2dk5!\07\Y7:^Ct:h2_"Ojee#Z4P/XVZ^L8].XEDu_[(cBr,qYqH`0U0$u]C%-(Na_
%\JD'rYc!h4$PJ6!5(r*9Vgt8-g'TLMb)!ISUUJn$qKZ/.pR)c0_L4YM]I^DjhlV40:dHG_U(2fUJZ(L-)`BWr4al@?5<qjYViI!Z
%bI8Z8p%#7%C);TTIeR6Ri8PO<bu.X^!.O4TRsM^@n+"@N;o"<8A/4fb<l);GgHg#k]$+9f$mS''g=Y4'0oGV64No4<oT=UNe]XQ^
%W#qpg<?NOTPM)<"2;lOXo/mI86$0YElb)"4L-p5M5CD<7csF$n,)"2Q6P>uE8gRn)blq;rERI#1Gca@b&d**VlGoC%PBn]RF)_Lk
%X*8h]Wa$cT-CG>M<>6X7@;8@U/Zp>I>Sj9JG9t_6^+;aG]Ou,MmH'XR=j>c01^g-8ZMHni,f4o,\E:!'OB=;5re_snhcEBK2'hL`
%$c0N3X@.R$_+-K!@b`X4P&^M;Y8MhU@+!u(_<Hj9h=BH3"iS>N(t%DoHh^6BX*e)$oZkR/`k*!*NFr#\563sBhd;`Ip!&H/fYK`3
%6t<,-7tS.1%%O\9%[r`]NB%`$>GZs&HhNiiF1LcCG+t3^rftV`60Q<%+"i$\1Im2X*s6&pC;tfAZq/])eCB[tX;@u;OXeUt[9aa]
%H*`a<2c%o?!LHPB;PK+#]?q(SBXEmB08>$R]c*0qY9DE4SVji+cm=B@D,>9uCLnW.SlX1dh+,eHF95Gf/</poCt9Omi'+-Je"o\*
%mL8I3l5W=(=bA&:V(975gn6:?ARlCj?uDfViFr>#cf)Qpoidh/cbheD'["<[]:TO=lA3b1LWqNm]E`UIXgAkPqKR4sgY\!4T2@;@
%':Kt0TSFT]7^5.W7r-`a:leL%R0^ItiJ99!3X[K/VcFe[*2lr4<f<I\6b87faMhnaMp/k-n#'*>iA&D\:`i?006@#G41ek^;]"R2
%=MXusB)SN1\SRX?l3++d=H9JR6(K3:mo]L76\QNQN6aSmA"e$MDH@4`BES-PVrduA4co]\E<4J87fUghE3X2S:P'?f*2Z.\4%@bq
%0F@mFGlmVe<c@u8CTn?97b[/VFT<cn-nC!@!eDL8LTu*`P[P#\]@'MJAX5rQ)V`R]I:921j`Yk2e#"p_[pWRi2Gc]P,ejQdMq1]B
%%"hFUR^#i&OeMoJ2TLM`CY4en,nHqW_"(9U.V-6+g\"&,cHT\oA5mc5#ACm%Q2Rb;k'?8*j9^-V+]$HF%XEZo4cj"sIS5qqo;#\3
%H?`"2<fnc:7dN#=]WcfUR!!hpQR"l'O3*Iu18sMQ,(>3^O4dCBhn_"V,<LBEaeR]+4A^j?g_(j8eJ^2'8IK^r's#*(o"f4iHM_NW
%2kcRM409'QW\"-1CgUTgclG[6^om+XP>s_Agsmp?OK>`o)n'\_<kG(X*THr.#(st8ma<bc,Riql.&#G!e<32H(s[i?.l6.%cbV.6
%9UKi8=QO3c(%po7p#5TcpPtm=iDq&pmlBaJY+CU?+*[GV2i_kR@&qXhB>hKjRHsJ("d]I0'P`d$*jbb<$Q%b[Ce;07#r@qG>*4a'
%ZHIL-(9&s^*!>U/8jHX*F87&^<3Y4jBWoUedLc9&?W#@h>lCiEkB=hY\k;b_0+XN5l8EVC_mjDCQib\,KV*4fBY@_&Pm>7BY!QkG
%FMfKKKroNd*@5WYCZ]r;>s>!=cp9T;C-'75SCS1n0(8N;r!)g9iV4LTN?n#nMP2fHVX/ng7U3JO6DOgC/,dFN=K>jl%g$e_f.7O)
%\226GVs`On4GX15L4;';]Q;%NZs)p%+`6@-giY<8`c)DAM@Rome`0i,>T"mO##Nri]i#p:mEcN/kh7KsosO,"YieQ8,7nJ8"fA`]
%<GmSaG30=NRte3B*e:S:*^"71p=k:)#oHtMO>ZJDW]Tr->E;1`&dG#47UrBdVs!P]]B]9tAW*9A>+%?0!sL"TA=N]1-7*[l"_S*Z
%T!VCFSV=INX)NV;\kl%:<[sYcqMoBMH8C9+:o_mZ5A!O\@us9mHk`YXVgsG?@/+r(^Zud4=1sf4<8c5O/JTHWKinrq*qZg9Y,08u
%rf3kA8Jb;ZEAToiehkp[j$:R;<MjG#+]Tu\GJ>i6!*0^<Rj7d3:@S_nhQ5h[#MgDZB9r@$$UIEYePEaVQ!:4_m2U%hV6A7Y@RmHN
%/2p%dZTVi=:`j<F8'D46qdFaI^)[-;GiZQ*<4d`?Ck>hidR_]C/U?Wrd5_Hc5S5<*ZTd9J=5aGb<H"JLc:';<dJIX``/\7rRh!V&
%)&KEu*:Ff+Z:i%7rm"rI)#!Yg@nD0[?*DejlG+b3Lmd<"`@s_@Gm_G[;*S0p\sCLF=b6`^4t1^#StYrQW^$Gr2:j%;3(9>!+HOqc
%8n$.j*k5+2]T?g`??EA.X\P##'V"dU6@5d&.r5\+`UrR0VD?ZT]Bo$Ge)L^K/=sZZLP%&9HJ<Kp2"I<5'aQa67Gop-Q&j>g+kM?'
%M+02?,j?V//&D\9PKJX)gteEMf#-uUGDZ5&a+piUFl*`4@j0GsS[stPXrurHC8sHi0gW7aC;tRn_22gdLiU9ZLMrQ>Y=IS'TfHna
%]n)CQ.WVB9:;_Q\)Am':B#g^\i?)0g4ttE"`"_@q01J6,W3hJJVOag#-/Hi3NG]6ZVg.Z4rpCntluk87j]8Qp/d^$nQLR4176&5b
%D.(JnSo!Jg+<)&Cn&JR:YIg&*Dc?O$'<Y5<bobIp^A)DdTE@(.rE<`D>`[+QIPMiD\oen8,XYef,9?Y:l)an7e4.lG0e/>)LF\C<
%4j[9\Z_"SRTcqB7$J1shZgVE64gEU!L?>>?*/13=KB/uflLL)`TuVhAe@6RS1Tj5Xjs=C>"eF\eYJDNgZh*HCa2kgpo;LJ"Y=5ZY
%<#$FaO("k_s(g\h1QrnAF_QC2q'"d;`G^lRW3RBk*s%T@#Ke't\0jEMWf:==ctaO%0>Ccb!TjHBbi";\l(nmp)%r8:MJ(P$6J:Qi
%H+:"boZ]'f]NoH4N6<'!U82RbY:bl#r7%c_YGf#Z&Xet?(k*=GCBJ,@!AoIcMY0`_MKGY1ZZ_qW&ioInRHO6T*P\TrVfp/Gek3o/
%q+n;-XgVm9f/GX:-O6YuM2F#NYb1AHr4K7[q"2s+iPXY*lf$,eG-1S7HFA3)]CRM%B6!@eHF],Th07bigi2^6YJ#;QCtjEQ]_1C6
%p0+e$o^Ws`[f8VGp-$<,jaQ8c(QJ<-/)Sd9f2`\,XgQ_qo*J*s[^(%RWI)<nB2;mKh-+$j_u99!dq?X)3rS9LDm$4j8!qZHjW?%#
%T3emG5JCas:J6V6C43.Jg"^M</Ne+CFn.QiraGLjjj>5FP<1L**=j.W^)*;an)&TnOuZW?^V>*GGe`@DCTHXoYA;=`FEJb9pn3hC
%HVlhTBkY3Nhn_FuSU<TmZB_i?LZO`d=aU+kqkSO=jSQi";/Q8:>CHM7O9Yi[>O10A^X_;@LHfjLV9M*T-3)$abl6&()?]N';!PhQ
%_2l-\i^V=@41BZN+0DVV*`rphZ>UMn0<D9?HC%tL4--#IIs(3rV-#:=j%ncjNK^J#Sm!"-$=:&ds8-j4gT+5\o&0>=V<5X]:1e;A
%iD2jLIVn2sR0D'L/+:6UAST1SeV0pU.o3hCQ`"E@HdXs[1<ngU=u]kid?)?&X4DW"3U]i/*EkpH\\.p;!1U'uT?]#?L=qHn>@ed<
%DEV*+hd!j=\?Ql1=>;>8q:WIUbZh9#>?H;\qRgVchtp%+5-$gHPb,FHn):^&Fq<E<2-d.og%0K58I4s:C!0=[mqq6Z'NQ=<mjrj$
%i\W:ei>[bC?!nT2q!P"R^FVLjYKBYALE!G-s8(`pG95$,BPmkTIkVY04kj'qF3dXSb!:_X='&!YhL)*SN$*lFG-[."#'sif73I!F
%JtV7tmU<<GVDdU42KqR4SI8ZJD>07kUR4'_rE..34F-mHUJQ2W5O0B*HQ2<8q!]oBZ_$!tSa;\mY5S:0Hj\>5m>hKB]V(nPd\i'L
%[I?@qJ&q!;F$C.qf#p;5-S$Rp#H.CjPK+$]nC`$3gFLgd'DhSjX04<@>E<.SF7Z6[]K1A@q$8)LZlA8=$d[]HIPOOA>edMOEmVOi
%3I'*BoHSQoEFUMm2rd9sNZMpW:=.9I<Y*s[<-iLuIU@Mp1\+o(/>@dIn#Q7(d)b7dKkrpIG'UiK(H9(=H8Cq9StEDOZqcEOI&UFh
%]uV2,;FEIE$]UG?q72^@l&;lnnB%38s)"#El!4n1ZPS;j\VH1?oeUg\Ht-S8SaXuWS:clF@Q+*&,p^tt3*k'iJD@j6p!^7,QFBb>
%\!QVKR>7.'@J=?pIF$hq?Yh8F*X@>+,rcEBYJW2bKC.(g0Ul]@0"^fHHk<s?2:h688+-Qjc\?/$0C8(TnnIRTkBAF,q4.&u>^5u%
%44[L!U'>iW:\#Gba32%e47A%#Ut*Z_M_o5;anNg8m#Q=hR]Y)rf/!YE+7@#`Y8<o6)B4V-2eN'JP4puCGB3B_55Y11lRm"E$1",-
%SNM5_!ke1^Ar.Jq5J5Jc*G0Qpot\_RSNd"&r;M'2fKMC@]R*Ikp%Ea"ffSt6nUFN(<f+G2jT83+m8/:DXCffA)Wgn^$T/`1oq1q!
%(ZNU>Z6dN%Q#YU4R!\]$YUauOr=oWbY3hb]JDkra#QO\<b%BrBpil8"P?"0rkKNr"=6oG/+S1"up#UK<\pSu<r*\i!<dj6QAbJ1j
%G5&2i)0m.-<7dSXjbLK[nUp]!j6H6,opW@6E]U+Y^V.fm&+A<25git?0@mV`n>Bp=Wu('#&KWSi=,V.cc_Ip]h(N0)DHCSm?aIfi
%fBGs)e_T+<hr8"8o&k=RF_o7lBURDI]]Uj-p<9:-N=G6[8tGM(*)%"HR)NBM\c_IZ3+;7mCD$?fU+]QG$\G]X0LZ7[#SNMZ0P-ad
%/8t:Ep&VV(ctM6LBT1-8Uk-6B/,^BG\$)]d5,XHBYQH'>]XsW^T)dr+XIZN,N>>rpQ8G%Bp!WOW$2!Z:JGoF"2WN4\k\9f:>d*SR
%KEs/0mts4R]Xkl+B[P<_"otnd(n505[tTC1T;!KSf%sc%2Gari735OY#'Sj\nESHF_"FEd+@5b*f2G/*:68eEVd6C/o?O"O]l[e[
%21-m3FpV)NQK?sXT(diC*_jnTI;)aIgc^'Vd+p;>g"L(EihcXa(mtCpAgILu2e""*Wq6P@"_c]W0DBF[TiJ"EUldO2%H<+q>]`H=
%7uY)4d9.+58Pnic^7*rQT6L_T&HX'Sor2"?I%33As14M'HP@NO*H5K-j[YE3Jb2(\b(&=J\=C>*3/qAV;=h1"Y]LuZRG@VliOsH5
%lfE%TCE(7aT+>)5`H2Nd]mI/t'A#Yg%a!KlCTZ4J+]*6X9CpJ4-f!OJs3_X.4nb7_DsdLu\R>B;ZhGpCqXr0N*2W"!R+\P%G1QB%
%231VFXfPN&mkbD_=tIEC.S$O4ht-NaIsl?]r\GCkmi*4b`IfO@GL9ZQR?f=LI$tEbDnPG:>bjWul3,qN&aeqC^D!sAigL&'Y@mn@
%Q$iO`e[E0m51oAX;Z4`2hNnWPL'eXYo$405`HXs^\W?mc58l0]//PDu7YJ@+aK]10@j-=`mohDo-/Eqtqsa$i\Yr4E?=c^Gm4MC_
%W*<nZOM.bJY*WL9YI!XAQsotRqf_Auj6YM*?e_A+,M2Dh/61J)+mOR>^/!iLIs?\8b+[dFM^M_jWP.r\=1/So47?JXfu#OU)XTk3
%Q-I-<qTO((8*Af![c3m--JJNtl'_kUTS>P=(Zu;q3+m/2dJZpqT,-07)L%6p?t%$'dl[!K'fO;$,@NJ`1Ad?E"o/#fV^h*th_Ea>
%h$M#i4a7s`HC`e8S-.oOo6]e9?g]HI`(*=d"MU`6iA>S+m.p>V(b3-FG'$QHd;J`F4ZB"il2Dj#H"4BaXVeQJYBha62k+11pl^Y,
%nabSO5/*B@W-.TSRLb"Mch+Vis2ep2.rN&C^>3&sl1)%T7R6?gI#rXNB)b#_jSBCB5:ft"qEr.^mi:d7>E*ad7;F8e?CG%>cV(V%
%o[GQh7%*kYB(PA[]tAdgS7YkXT!*N3"*!'U$._%FKC:Y&0=,gLCT,3rXZJ]CnG-98=F%RorSbQkR4`.)>2*.aCYjL41B2TJd0A0E
%#R8XbW<V?s0:tIt^N5.>>&11ZheHq^D\jHIT.TDr5oKqlLtlLQ]$JpsE[ga_q=qQu>!Liufm(MBUQaIh>-_XS\s\=!'$4cBl6KS>
%5NVBE*.nBT0j'A,PP&ssm#q6Sl1:M:C?+LRV'-Ls"(L<)]`Z,V+(G\CRb&;>ZE3scBG'=g5OPs9Y<T$"n)`$MDb@Q<2-A?R3-Q1_
%q<(4brT-0X:.t7AcdM/6?uOfY;eJ,gr\0S5HF`nu>=n94(j*M^\d2!IF1uq_J)**\p>@`WIsPbpBD1(b,f7hNl2r*ohL>N`&T"0M
%3o)cEnu:EFfb"2_9I@K0n?#VgTY/20`dY*RkH<[A[1R;(gGqG!NF`9=ccQ)SEP_F5Z0-_J^^:U#edl;?le^@\o61^dS(7)mXRlEY
%3qN(8mV-;%?i^^t(Csi"os3b\e;Pn3/7>&5a_cL`HAic`*d%Ki]t-E6I/i-`rVcZA]n[\N-a7.7MLU+1pM+SpN`;T&(EiD1oYEOa
%7W<S5jSo/3J6?_#X*^t.Ku`UQ>i+Fg23,!"f&#;&\"fq3@%0s\\F$Er*YPi$OC%5JgS6jMk3!P]1.EO0afi>Tj5aa]r93N+k^&/T
%I.$%<a+KK>l/sV51b2r!T>(g#p&;5jVRWpQWQRp/D>p('DTcrn=3;J?ohPqIUn]^B:B'R;CA[NGm.V`62LVrSY6D4Cqi''pkO+*A
%lYkA35JKT/')QA!q$\bGcTTqF[@]1];2-jSYel1jl2ek"#4+\q%dIi]I@C33E]$qOEk2U`Cui'PGB,).hs9Ui]D!>=DgNj1Ha['!
%6qF[D8:*Gk@O'MhH(m&Ub8[Y:<jI^p=t[%]cE/sjJduhb[>ajfoHnbpI"/Hl.;V5][%tO!k+`%*"hoE/eB`:Zj.c409Vb,)Y@"m!
%"'El.A#/\^WG;s;P2JI/EKK^B4jk^=E[Pd0.&<8H#eVhZjju:q:\3mfVgC)c5?42@i5p7VE0nf/+)C<U2@K?2>WW-"nE#"@f9Qrb
%dl"nf4<dkhJ8)g]HVF;?['Y1G'N`lcH:M+d;;&*)4S)ml7!\Cqe&o^E[k-I+)_H1%^BGPOnSmmoa[%:4pbVYE-^W[?/ZgV>q/IJ)
%gu2TFmbN8->s^Kt\c%p>'/s,!H.]G,O"*rN_Je?)Eeegc7:,D(E\G28>.MW4r5S%"r<MeA,!Z(N<d1,qrC$8N/r6k*:S^7XW&\73
%p&i\#%\D`V%[pc9)CO(f;;>u9rVkeBrm'i;k.P^#ge#2I*^I18aO/I^$k@^,YFdqd]#R@r2lJHUke:WY.t@T:O0W1Tk@_=AcQ7b4
%G6BOFDN!sJ[A%YBnoL:s6Sq'C+Lh--$Wk*:+jjHVg5&UnaEfs-mlSdZ6Vs(Tr5e6'X9I2MoCKB?B8q9.6`II<po3m2[ZEsonWWk:
%S\:/*Q<q<pQD"LV6bNcTDgCq^TTHaShl:N-SJk28Pb&u$?B6kurcT@ViT"gQSiN4N@N&AIfD\c[b^iZ'S1\_5=<LfY*o9J1A:(7^
%p?&@W&Gb^Q2B:n4>/i7gkMH>TI5a'A+.H#Cm:G=Um^uXl7F,O[HLZ!W6K(G:E\'>$p$#ImJNsWlbuVKbqdaD35h*coK_N!/XCH0o
%l"%1>i>VGjCqlK!ZB\&Bq^"<g7VOSSI_9Z:X?MO-pG/PfJ&kRr+iZA,@Bdenm+&T!\](,3-*9G'G9X8<j:+iTE2.[0r<ek9SS!>g
%hg9WO"8Vb5Di;j(Q':LNLLAs<E4[UJ!3KWJq"I7H2B8V4U1gVJDCk-:>(AL.[PY)CZY_[_YOBBYq=L>Z@@Cm'_mS#eIQjp-?QO(a
%l2uiTq<.UDNSll)R"]1T:I1=E,3qXuT$G$?s+hH7Rj[<EbH%B'l<a:]aqGR.VH[3p5+HM$r"lIn#1Ak/F0CndYH)ltek3IMYR4M$
%c,Z`2p9RBV-#r/3`NY\OFu'&:j"r)+M#DdK>BgHH@,4pFl%I=)N4AjHpE]H$'OrK45qg8S($pQ.^7W`TSH?(bG7I6?ak.o_QrX9j
%KPdBU6PG]Kea:T[iYq1.l/Psn1dn)X`Qm;7N5(UkMlNLuM9%qGe\\D9?7NMShgKqAHdC;NY+L+ph*i"Dmb6r1lW`fMld`UEh"gMR
%W2J_b%l`'?^:j]/e9ef8R#=1e_"9j^K,?ddAG.Lu@1Q!`Hrt1/J%1tprQ53,^R&dGiiY<K@/#k/E7Ck\gM[&JqU=6!j5+'Im!L7o
%c[J(7!&Nm0chqOl-q"sCWeaA`p*;c&,rWg3_hG"(hVB.t,6/urf=h,\I2,cT`r0gK?'"2iWDku^2@GRiZ]uhZnD_?`%lN"/G.-`:
%j">8a*I%)3^NRmVKB!O]:J8+7".M1n^>T8Z;oLh=nmptrG5pB'VKR@@MYLH&OPe838]=fg7aJU56*L7<JMmB#!*J%2:A:qYBnr+/
%GMYW0q1A4G+'X8CoruK]M(AQ'&7ehZBP!.Q2iX1LQ.@J_B_<MB\GW/4](kf<2WHH.icl!WL^fp/85Hg3p%8NGlF-dT<jnCKH2SB9
%Y,<@]--REthVJE=&Un%8*7fV4M>LiDa+O:Z:bQa7qf)6=GgFgY!WBdFmrgnp&8&86s)R5Zq>'_VIA?#O45'#sq6F)VI(MWJqdh_[
%>L3P^o8eF%msj%nqWOP`m6bY<7KV[iMl2tq>jJZlo6'$f;m;qX_"q57]b<l14N@0@b45&ue(iRGa*TO]MZtBs+(S4@W\LTalXt"0
%V;,ZorU>sg@$klIgrn$WcMG%0]:Tl)YpJW(TXtes.&2deC`FO53*eGq1\E+p-=3"Ze#f/iT)s&JO<n`]V-a2Gnj_U8O2Xf[q46@>
%pURIS*f;V]=*IDu/qA9;UMhZP4"p?`jU^g?!Lkbr\g%cVn;UKR3f$Z5Rthlq`;TW%o"D5`ZBh$=BOPCt+b8%NYR"n+TX@XEp(E++
%pTSX%Gdm5=IW0UhQ8HDN&q0W@Djc6a@N2$=^LuC#]AD>S*#3JV9\Ad(?bSLPFcYhCmrGh`p^k-8$t=pPYs;k)n&T-fMk9S7_A_M<
%3irh#QkOh]nC#L*&+JsL/:m>(m/9,ZD9&h'.X=*QV9G/?V!s@4plCPXY]9"(cTgP#24rU&;3#(^fcKeBah,f&C,n.qoXABO6"aLu
%is9tGMe[;UKLbf4,/)V'iNGKGkic(kduK.^8'a@KbJPDaf69q"IW4db8:41[Pa<Of"5d+sk9"Q]#^gndnuDF+Q#Z$h8CR4TZtTW:
%.PT>cA#N@,>*WMXd-OsjWGe\.drj([/;s)_%7b0<dO%3`D6B?d>Sq&n5K7:d^&ZE$g(,aR?'Xg9JFF5F,Ai0H=P.6FqiGF^\`(q0
%d-MXm95RN^r*ie_X`=D>gU*\egU;)5gI_\\:2@F1g3-.0_=Cuf!gqP\r3Qnt@[id/,$:BYm0*tWX#-o_c(B@*o<HP2qo\ZDc%dCO
%D%NeGTCs8R(8(Y3haM?U-gb-BOLc=\!#J-#C!0L5YaMpn)F;1`\G-Y1L6*h$#@d1-REL?"j'jLUj^r2tE%_cM_bM]b$ekNcJbN-;
%blXO?!S%9K>m8JB&>X_5E!<*]D(0A2n`:MAm%n,ZHu)if>eC8!lkf)[iVU7l"DXS\C3'Dg=EM5/]S)%.U^b;t%37R#g+3GYV?pq6
%%,X_`JaK=l!gKUaJ=Dhc_"O3<*WtU+D#f]2qPfO/(9Y9-UO'/r*ZP34hfF>QET7MS"sS'j/bmg)OEM(8%]*hD!-$[<\3(V\YtT&!
%ae6ne!hkn[O9o/&RUM?7^lukA,AfGc7UUdU21`2X1N.qt']meu!<>E9LtP%S[RJ@Ha;VDi5f&cRR^*,_,$:9URSE`</lr$XQ.dcO
%"..an!+T:u#72)8ZX[dfE:(hC5YA9^p"[J"YSEJDiLWf[i4phqqWi[W'Xe#SGsZ3l:g*k')0#K^>Yn./atRd/i<7T6iau;A=qNP]
%Rt5UI0ecT0\7l="(tqsC5X5b,`aMhg-@eff:HV.Mn-V/*-?#LX3j<JSI0Z_!7ttLjd)!V.D-*nr*$@<c<,FVR%&b>67WZD+!DU-S
%"j7@EDol.kJoh""%aArB/Am[^/3@\P_!n#MQ(<Gj!HuP$5Y*RJ[K6F!J]U7u&umI<!L=enJ-rr>.?Og7%a=#W#[Vm2ASK6D%/@&7
%0Wm0m+*c5r+?Dd35b3JFT@4T5QP&^qKk?7ZU/?Jg^rk"0-te&sZ!"m\J00>>^qTW_O*sf-*+3MPPAoBHd8?Bb;b7WO,(:Y7(^"Fp
%YaL1I;h.$Zc&U'0U@;9P1^<Ma#8^41#f=IhirY,L*"`h%f^U\)33";ML!:A=%rQ!"<:H*CaCYX//4;K.df;6=2^8<1^B6k8RLokE
%'Mfq?MW;jI<L/Q[a;<e)K]!0RAm.c@L.t'ZCr+8fX<HdZcQfE!",0l)[s>4,%)$5W\:MtS3%G+p[$_\,MW:OMQN`Vp+)6E74S]sT
%$jdrC'sA*U"@QhCW%bsI81Vb%g^?I++U4W6`FkHTBDk(=HEP:_ZnR.]O<b,9K%)'C%=AodR)_`X]_3Jjn<cQV9F"gg!<l&,"MB%%
%Cq%K3PYd\3d]1r6+Ztub!H8]g"CB$Z%?qXE+.,fRRh'@j?=j`MJZs#+=XG4=>]EQZ"A':=<,hU6=84eS<-h=B%j`gL-X]"]I1<t;
%0Shdo`!HNX8gHLM"]2'jcu)+]`K5,)iA%eEm/VVCI*o8/)pY>@dAZPu7pJ(T_Y&<p'GfMF*Gu)8`=@Ha-Fr(P\998%i$eHGc9OsQ
%GoYN`"Q%,X:<gLA]F>^9"d0t^/5[cc-mI,j2ObrpII6gWTIq^A,cV98A+3"?VKDnKLmAUjS_[:M$raJX"*jo@bGtY;L\2]&d(U]<
%""VP%+_hIhB+q0In`DT=UgMN:cq#noBG<9L+_4D*KHoHmOFG'k!O!-=(+KC86@>0aa/:dK%AjJI!oBajFZ9W!6+OY[^-sg6KJR8N
%=uA'/Ba[U<3,#(8ADCVL%Jg>ghtC`An8*EPScN\47)jK,Bn_fQqBF!NrnR'5AV4QH6R0Vgf:EI'od1$nc(^q!1MO?eBa,`:-Og3J
%:nIplG_To=NS$c*4t351e1PS?YX"C405RdaH5#QqW54onS1Lb'W/08k^)a2b86<Mm7YHJ)>ZoMA^ujTRJ6C&NS#Am%"%S2cLi$OF
%i8cR'W*Q\W5[5SGJ=Y^.Lk1MBg*I&B1ci43JTeu/"L%s"2@\1Jj?N:M*'%[GOAN,Jj+aH=Zuuo'4t(?d*`0E[8,#m&E\0IL/0aTQ
%>HH4e/KTp)0Jb^!TFJ-.W/r*oHDm5NW=(P[D6[JM#*:3(<1mCFm9k-Sk)I_7\dc'03c1NBAW$Zoe&.&b!T+HSLI-NfWJMsS0/Ha?
%"p0<ao"ZHmT&B@U:Y=fm=b(?3=@?CSVJ&i*MAVp9PQJS;?j1qp\^?[2"].H+73r3C1S&1VggSq@`O]r]V-b%8J4'o)PN:(/KG&V>
%_7-dgUHg0Y"rRre-X<N%cP14eq#O)b,QobU7"+%<XKIre,N%d(5PB)%e:/3H<jY3Km#0,?hq82P'He"G@+Zgl85(Jb-IsL.9up&\
%7>DQR'`#M@?eAOV=,JS4DKV(2*4FQiCGcR'-j1r,OVpGTdT<q-10Q8?>HTV;Ij"TJ$&lu8rW+P0C.=2?/2+P#1P]Yj"ND.sr.\8!
%D%XD8k':EkTM<>t/QkYk<$2X0!Go=,.5lmJ>N4%,ki_^hk(HGU->K>eU2LK_>X7Vs<Gn58,n%*shtCLhWbaRl/9\%?oq%''O_;ZF
%7hGZPDA>3m-JOt3*g->"WAS(s$r-n@/b)r-9<M(E#V]#Z1G@sVS%P4=rG:IU+Qu5:%=C&`=Fp!6V#h!D:l?k3M]f_C>tq\JX].a/
%,cr#3_jVLR(FWG5=9;Y6=MM?WAW*LLoR(,M("2#jqAi@rFl,Ua=+T0rZCEa2;W'48?AZZ-C&cDF:_9:HMH)>H%=IRn<\5bJUihlq
%mBF#'#G,b&$fM@TZ:%UWQt<!=b'G4KZh/<5[\mh_;?b0c+;KjhL^.4A8RZQoHF!%!&up0`/^fR)Ug\]W4([-I/D>iaq0QN&$39!9
%+S)^t8`XUi)E7fI.S)9r$.;hqeH)^l+U;(b]`?"T1t)`7Y]/T8^Tg$USeiLjXmH=KFs&$F_MW+4[aRPpLISKgEB,0S_<F7g$N`([
%*ih"R.\%;aY_m3!e.W(P5oROYjZo#E7KSZ&DNHTOMR_Gb+^JBJ=.;l"S)"O.p]3o$=POQl+YuQOq>mj$PI+(2$=VkFbkX\5%46@`
%YH4X`_i,<V:U);;6G--h@!bF*+G(F48#rt0;**dqZVfm/58J#!7YH=GV@k@jat[E^Nt`^9^M-Z,XL;-9?=GsQ/RN8a:g)7Q".)_&
%6^1YgZUe(a_+S):mV3)@GYj'Ail8LH-a4%+o7`jVN"4Ad@)=b#<r5GplAfV9K*+OqS/+?C>$_>c3kJ1^cZ(2c7[,]8>0m`fo_af+
%f2_1q'iumSPb:Z=kh@D/kM*(U6CT1rO^oImLo;\Oc&NJ!MfpeQNJIS2"`'D`IC->bFJ>9$Q?G!Wrm'5oL[(fg'PGPhK<>\6^6Ta9
%8+.WY4!k=\?S?sX*1B>NO9^jX!W<bAk6mJmq&$H@5fOG^/.BQf-L/.YAsE!1UQ:!HA]T0K<\T&9dF1Dfj*)[POng2T=*1dIK+>&?
%bmH#6M:l;^LI!);'3qIEdZ,KAE"d\;j$DUp8fWm?0hIY6Luua99:5<+/+*@'[#$nZ">Bl/*29T.p`Bf-4q8^C=\V<%<"p,ZItB8a
%&<kT7I?FE&]p#h?54"`YICI;j#b(m7OFSH_iT#H3+o<T@A3e^'NBf*hcXe"R%:X[_j`A?@\YC;n_JFua4LC1P/MS7tA\dXVRhD0A
%kjXbrOTEgQ_mh/3NQi)BF45e.iO&QXY/'DBjY%"`Eu@#(!$e]a(JT<9(=>tM%,!N!Z'm6FIm^gV[LWA2XYs"@,Q^=CX\I>r)%E(8
%^34B\=(2K_<G@dMHKQM1"E:.?5k\os,=:'e<hR59jG4Z:h-p>f(U.U>K8O:ZeS`mW(jt7u`'"Nfe@;IMU*E+^Z`)h]E5l:ngDAHB
%Eb+_cTdA#C3NtUQmgRRPIbh)_pHM1%#Xl*5d)Sr5.-ZDf@\nUnNf.<X;L)OpF4O*&iFCSW!GVr]>HL2<@Yq]&`J#.3JP@ER$QgY3
%:I6h8AW_0=4`0PuGCltF!s,7S6dI(-;4qbT3)3k/Eb)-[S`5V]\V,-N:;VRJ$f02]rb[]RPsM(I$LNb<K:Gfua3Z#jBEuKt1GL3H
%e0'I]&aN)[2`b-j&(1o^N-n57)+NIZ;A%?mH8uapd6P"`Y<j-<LE&<r7ADMe9ai3ngj5g-V?5FY7bX+nDEW*tlJNub#FX-9!Hk_^
%s8;I!415#73K.&_PGP"Ya(@&-dAfPXVc1n(?'0=sM\;gq(;=H?Ts^rS3!\J_rQpZm*_%mPJ]3a>f91f^H-/Mo'UGaCc"?%TVZTL#
%@;,g9N&2JaMC&S#D$lD=gWS/=^s(dg:o79Q$s#?qjlD>i\!cQEo#E@o4R]@(+XCkt@[dI8_l"<QBSt5I1PnY'3=&U6#:N@H96:f1
%r<jSsd<ZCDD>$@?foag8N_E<8N3;Lp"+rFXe5QK)%tO>/bTdkH'I=6r:m$#=L&;[$bS$aQ2Z'J!;!g4d5t4`keR6sm$o7@8W_H!A
%-JV3m0K:,Q`&i^\+;;TZ;$[K>>-'"Z1/@%S'][CZ/;FsEp,&JC9ST0UR$-Zn.jCRO5%&*LVD->P<$Do1Qj<J.>9J)OFL!.3]>SlD
%7bQHf)?qp(N&Cj.(!A!je7</*2;N9e*PGll<2!&3IWIoC_oqN]46,.i]4bl68JDmKF,G)N3/k)(B7Ko#pu``#VR5:7G<q3Dh5"]`
%k#,>9@HC9?!A)gS!rU@*,Sc7j1K@oZfk($-IXDirjE9!2N6#>[M(B<u,K^@0&X&>o[g/9&5e^"#+"0Sd@TX=De@jK9l2t`7qn1bu
%P-;^"p^AX:$:?@En^@6W$,BT)N"=]DO8Lo%cSc:YXeI?\?_a>_J4,-V_8)q0f(Y:oEbpUa.1QWN@f$W:lA!\U>>;D)Pge.o@bsff
%#YCQC@6YV_"fBSL($b*sj_3ZoA"4Mq!2T\@Ph;(P.u]#\/;cJ2Io>'aULF<j]'6mtU?$hWbR-1D1=A^OU?Pkpo-53EpY'RGhrR3%
%WgQ70;Eu:+ZJo"3#QA1#A-)8P'Ka4o,=7e)*$b&!+%78B^B&$a[5]\I!#TE?V[4N%7ikEk-(f8dib92/$6sS0;nUG``,3<+e%k%.
%H6I`%&HEZR6Y&^fM#N(aI8gOXJTTpC/"LV<4.H:=8;#bHN\8A9loJT`'WAmOQ?M&VGC];C0K7/;YRIZF&I"V;7)ur(JPK`AZ)u(r
%8%E,?-G!'g9g;H5Ncr4k(]]CYT'r[=?t?<8fclUl2'&rR1!HM;5hLHm7Mqo/$p"Be(Q+q[`kBAp>=>+cqQ>K[395cO",0e]5]kI'
%.k=L8D:V.UiYNs+:GFL9:FA2L3<9Qk8m\/"6PX:4"pQR1+,PFak/i.1iFpO\S/LiWiUZf1-odRU+([TB)oF)K'!m_IX<>,%d#&]p
%qY1'.EU(,?1t0>?(LJ0e^c>7+r;c2NZnW^N@TlBZk\LZ]F*&uFre>41VTo1/DHoH+a=S.2L0bV+'3q%u6h_gd1AWjQYG&-O"H]Yb
%X8SuCnm94+"I>'mplWb8`q1%5HZC/KKhY8;W?7q*7bZ>jH*SAdQ)G$C@VZmi+SLkiF$k6,B1A;Ug/Y.i44Lkj/HGH[d4c!;6(,Wa
%fHuA0AfZ-)G.Y&X'fZ5,2"\\-doa4ZTHBq"W'OM((m?O:T,0N,PT-T5L>2Cc.Ip^-r$RB$&mptB2^Y)g0]K5>kOqb(?E?GcFcP?g
%4H)D:r?0oQdWX\P!<[s6/Kp,,4e-JHBl"RP,VU!/V4a&#D/L"=(hCko/uoJP-H?7J3R-8FMs5/Gms)J\XO^f([^`-FR4A/#h)*ja
%L3HXF8.q*j`L@Na&O<3^e/V$2,$[Bg&mGkK?Y!W0@O_[L2Oc,Me^TG!jSU,9$(Qpu&^.$SO=P\Z2iG&#Hq5koN`@5'ahr.`3(>Tj
%,'i0=e*,+j\K!%IW%ddFkTBKWL*[?W$Z^\U\mpin'AS&$Kn\r@LGS<\0cUT_G9Ti(I$%)]V;9BEE&_XU-"b?@dc$^!EYsZu%3rFu
%gR%-[+Fnon[OgipPU4CY=R<PfI11/F9&#6)4nKZ!T>EM=aCg_XXlW]:\GaNU[)c6cffU`/XgF+FBjN^pLhrV/Y:+$Lo]8_2NC"S=
%"dYc#D;^--q*Ar%$S\jDM,F@.0@)<uR)1R=9W+Wg*;0G<U(Lek_Xf%bJIQ)lRuDQ'7Su3.)Y^t/*&3Ik)5*]/,iJsC1^\"8$ad5#
%=IYUO^HfsOUL]$8qX-@H";Ct3jr'HpOf3g',"<L$+BSJ9M@EdsJ_:r<-=2^g33Yp+)2@+mPlb2r8SLG.,:0/p!9o6#`fMBUC/?Z<
%3IImE@4]\6!R3rS;Q%f;->4+^,LO]KDkI8/[j9ilkCHR=9S35aUWB0_Aitts;&rkRP5D*n&HdQpBsdgef3'U\<?Xj%:L\2E3sPkC
%O!Od#Wg.c'9Bn=pO+7Qc\sF[3A$?6bW0U;X:lqY$SrUXi=\=Q[=r77h9qr0p65`%Y/uK4<g>.q\J-l=`E)W54(d3n,neaRt=O$>?
%SY)k?pPrLL"bOc\N*c//PBV\SV!P&"E%'E>"+V<3`_FW8<H>H$kEeOJR-0>(K[BE;9ug5mP<m_d1<qU;2<&89qog&%,P,&)-kZNt
%4B-DEE3'IrR1s[raV:QS@TKN(2bbS^JH8#qN!4d2nWQU!%/Q-B)Pm_YbR&%ngP\eaZ)pOd4^i"Db`QE9b,GnRV/XM%^be'@P&Mg0
%a:tDtT^,jAWm,uuG*R,TN09-W!?dB?)=qG+j>[6@i`u+]p=**]/aqp3($tNW5WN;3b,qe0%kq@Fj0P-Di0!*?,W01bT#[ig#IlI:
%i\Au)neFnE2BbL*ff@Oed7rZfU6$Y\gm?q'#Q"oM-rM+!JoU>]CLD70<;,")W#Jnd?c'4(<?VDbRN=L@.(AV@htC3klUVOtYaCr,
%cj/%E@f>`@5D%D?I-SW.T7=M5r>]b5_W'?qhftnsU>*[\97Qrm(Qco->X11pqZ8P:m#o-+9Zjh8Q\V^6F>=bh/-8cNHrkOR"?BN1
%JS/,s)5H4UAQKe9Ne68M+Wn6%q8>#Mkqh;9LOiuMi)uid/(fe0"rsZI;qIl9r4p\TY.!=JT%_[=TNd;c3keAR!n=$J+%`=q=E>&+
%q?EEb_0_MM^dUaHa_Ef6+Ou!oPtQCH5'7$b'l4M=#^q3G#9+\:0Y&sdeeAkP7h#fpU!;W!CB,!33/+gW>tabYPu%3jJ]XOZ3JZ97
%KXqhAfG-'qTu<eho`O-h@#k-NY6C[,i%Xij^19u)1M/^/!'Fq'\d_)h*rr9eb0i3PnH()mocV`uqiIHcA@%8ZH`kUU*(E>/""*2W
%*_,IHFT@N5o:EjlK+LFh,A[mN'B%I`?!@=BZ9eC+#`TdZ.caMJ3jAEaI<V4T/8u1,%l<Z.rBg=YA:"[<9TSe>Ta_\N1[t0\-$SBW
%K.uK,,eP_>[HV0fPD<67#420^0W'LPFGB/d8U6IkAK$2AfE"3EX)s9HVqXi[\`.>Fke8n-7;:4+S.mQ/CGYcq7_44&NclJCTK_e6
%Xf2J"&k8^+[=Oi5=p'ZGd%]9d53`rEK`l)bI.`#EFA1$GdOI2NM%dDOe`JPG_<DQ."mgdAlGK)WEen_S.I/!f"[fmiBp_G#;ccjJ
%&D[AC%i#35m;WcB\A9]p^IPqB\d:q*%PtmP9="^j2rdVDC^/\V`WYX_hrRJ'84c-2d4fe;%/i1+)YkB?4DmMJ:Uh#o_`=P.oeC88
%jKA,K)CV,toqE%K+#0r<!'^]0i%IrGA>4<&#rBbcRVcph7ONg2$lUoEa/H$\c.=nST$Ph$$[bY(d%\J_eOV5`=?kaTL)76(c_1*.
%'geALXoh.)pQf>P&`jAdQH0Ei5[S=W=t>Y:@PekW\;`DnNqOBZ4%"hWgYCr$bj/r?UgN'#2@u'cHBEceaG`TTUIGeOd>.p1h%^T*
%n_P<0(k$9ijFcTh-g].O,#iDHYE,G37%iIHEU5aBm52G*,,se.Z_HQ@g+5I_L;"BS`mRn*38F_g9'PZjGT@H.KCDE)UlnMTq\6=t
%]XVVf!l/J#hr7X)*_I6nI>gnS0(nQMFLYBd+iLu4M-7QJ0iGU(K6p26Q,!U@0a#(GmUP>o6fH/-Ht\\s\B'J[0Fg[W,lPMKDtfo%
%8&B*JSt/u3L)D8t#O;`n#ma:\)mcugm,`;#YnCFp2KVOB$*YqtD9/gtUeWU[EP;6>*<inU#.&f=og\>1'ed3RNZ&\ND+`mn"NGEM
%C6XKV3u0G-h(rZL%7#T<!U3_MH=il*5NjN"d5BiCah^H5/o*8a]l@<aCtmqW+`p,#+0Y-[QoI\SiI1>GJO[e$,?$qT"AfV@UY2F[
%oSkmEDEuK&XoZ"h%M^ZGf+RYoe3hI6KCoBmfJ&_]o9D/n['lrZ*GCh7AXK'$_#8nG!o%][h71IFA%32Uc`m3X;2K",m#3bEO0ta5
%EiKC_!!X;L_+e6JK\@%p@)//)TE`YD-$R[tc75^sb?@;KU69kM["P1&q76b6.OH4:ocuTGq*b'?MDi?rmBM/jO`:1ui$;ZH2i.*)
%]VEFX>I$@>GQk>(=p+L5]8lr.:l&A"Y5pOFB=O'rjZ2PpmN6NbeA-G_0<oj4-C%7oR)"Pm%!Z?CSBjB*26fl>D(s+$,d<,<YTi4F
%$&S?kR4SM1*=6p$GUiNOF?Qf)io>/<9DCF1knFLMB#i+4"[1ZG+qr%?AZ\fUB5/Wsaes!d1up'H5nO5e1c`XU7\MUEAjGJ2d6JXK
%Xp7Z`4$]H80@^bg`AC]*]8e7_5S7\h(kW%+=g4+"R!LnUj)O4C&0X&h`KC9mZY4tSg#R--9KYlfRWiii)6]T8W1J6Y2iJ-W@,)C=
%?1u_)[:RS=K(8@,Yn@X;Gnjl^.@ZQ%WDit`LeshL?!k3+CeH\;GI/k$2jUfm@]ks'"Bm5134?f;%&C00B%dU0oC/'B@e#%/G<P#'
%I>ACkkEdk?#/EdT,-J67a_jqP`Eo9pFa/J%\cTADXfLHX,g6l'b!jp::YK*i\Mg7bQuWW=FtAfL^;g@N8et&N>][fUV=6Up`raKC
%K(!9ojB_tj-sgRqc!BTW_<7'I&FaD-MIbd=o5JJjcYP11cjSqHj\WWIdKVF-g$nph+P_a!G-AOCCt$jl51_SGKC0ZT(mr4(9;'\-
%MJY*"id:!iN<D/;L6,&i/t&K**FQBtd$V^R"t%:lL7+E?BPZ+m6?#m[bJ_$(VCCf%a`h48FlooQ`f&6G%,hr?8A"TW)?KnUYW>4S
%S]WsdS'+iSa-AbqR\+(i7V/nQ_^2okcS7iKe%l]KJ2b2I1du@)nO-iJLX)XWl_Zq;47(l]V&B5aQD1Q;`Kbj8FKYl__-bWU_Ot"g
%ag[E(oIn9SJiaOq?2kj&8hn/D$Z.?:V)%,),AD.o0"bW0XtFg0HBD:EPAN_6-ARFTMo2;RB[BUUGYPp6q3&rlZ]`e(_3V;\S/mr]
%7^=kioh+<^Pnt=7%MrtIpShl$@F@C*NPg`F&0GeW'eT<_=IL4]#P$%mP.-/I9OR_L/34Vc=%ZELWV6P`^/7D:NN.i'3+3#'E$N+\
%VFu_bLZQ0N!VTe_fu3`(G#`$$^W9#6"d;)tIcNWX)t_.DQDcH1MA\FkUE!A$\o^6&V2ut[!E00AJ_'LJp0"[c*A?$=V)i#2Rt`tc
%Uh#i,<UISYNhgns0HHMT=BFOuWe,dN%KKQ_NK_uM@?K8.k`(43C#4cjOX:ZB6+V\<mM6rX8hjpDCbYb"&<Dto<4%E3E^f[2HK.gp
%`QKl]<Jb@E*K@@kQdF:U#Kd#5#[rA%`u.Q7;EdToq?O]BYfV"F0V!cYa;9aKDsDT^5/KB/AD3a/:l'emAh!8YG`F*`b_J'ge=]*G
%*,J3D,P]>iV-T`tRcEd>%a=b&:PUZK%'El,7#A3ma@To=b\b.o2[q^s'P#r=99m&rMS`R;&[Y7!43'E=m+9/q?cs.f\agkWQbKmZ
%q?O]RYT9^PM%4E!S'i];W;Hbp/_KpHV-D%Bi!,ob,.!K(0b'h>r]tHBCeo+5\fthB!k+ls8;1@oO3Au(8eb-Qd#2E[L>kc(^i1L@
%p&Tg&/D0FDOSVfMo+1R67eJabBjK>N<E11L4/rBpi+2o:.kl+.$&,`4ATd)Bdu&0*A;WYgmE`g.12KK1;p0PU,4J^!;u@f;W<G28
%$Q\abH+hLI`VG.@WIsl1!?Zd`kdoJNI"scDQBYh[KKcYap/]oDW1\l4FsMf9.;P#t3,CW@)je#+WV-jYgi`HUij)NBN:RdK%U`f6
%8!<738Za`<DP/;`0!8+B^A02J>q/Z@&O0S>+#a6]ka$HA=jgc$aPt8K<deAp(\`\e&UIIAVAD\00hb3'\Uhf/,cKB1YGJ9u/!S'a
%:25soDTJm?>=l"B$\FO.[`&"*EO@d5ojII&)>sS@)9m8G"P20;.R<]"k.[n^s$3'snRe3udgt.,Z<VC_\6+uP*/<+c3>:$lJ7>!-
%<0U$bPHoJ5oF[F4BC?kE$9eNAB")ZDbZ;m3i@G&,bLL$a]8Q"8H;ThY<iEo5fB%'&X6hkZa?`TDV'U*fC&T+<B(84J2'&6Ti4;h0
%P+"BdJam8k'4DQ.Zp%)Ig;MFc>aH>!2$?*M[%N<"*dd^^fo@UI/.P/+"H873@;9"?4)C&]jB.j!i+E%SCY;sW'q.k*8n_&Ed1/%6
%`G(dsAhG?b[uJb`KhZZ#5RJm+4]>e*6I4436kQ1<iFGM\LXb%t'Ouhf?YVA+fkYE$[DGt^n>.N0Q2Em&LhIQaX&>G9SQl`CB&4s.
%!+J52C?oIB86'AEPkfk]P:s'b]O2:T-=8T:37&eE\0NJ80Luq(N$kn)=B@)pA9;hu_IQ,8JDOpO,Z!Re4!rVH`?sU`Bir>\3Mr<3
%]Y2.pnbsZCqJBNH"Dd<*+/[.b?*PIUZ@"9ub$3$=;@mt^$aJBr(`J[@Z=PZ4[kK3:P=hS`%GOcE$PP3s"f.(a#)UJ6=b7I`UjA2k
%bKH/gTl3o/%nlkp?FV;!Fh*9XQ+ZY6@]4p[VrCEicM4,e%%>t8O9SF4;0^A4`H3r4$Q9[sM>0s]YY3I?Zj#>J%MWPn&I5P:H8r-T
%RhChHc?+pNm9jD1n,tgZHPrU;bS?Bq7rKNL94R]']cedI/TQTZ1<&X?WF-4nBLEl^%5_9IFbNf-WD:GdY]sI7(_b;)76g()(CuDt
%au!$bnKGm99IrqkB-*n1>a[H4%d%g>*p:bA`f'AUU'OPt1JH$ojkF5B""_kqD5*)#+^SBadIC`2k=@m1]JmmoS2.LJCcu+YTtiXr
%dDBD!,R0e#F$!"1`*+]9P;$/jAYLc5+*+\:YD?$*;+_r%aFrPGP_Sm4lbjQR;c:\&H'YTHL!;5i3=Neuq)TJ`h?=U^%s5o]4=m->
%0s$Z_h,kG],bV*Y)r6.S/P_8['#tgE]"jXi>T22`g#=.<"&<Z#3C2g<1L2I,Q);F@C&q=.7]9/6fFg'hkLtOOKm+N65I;IW^#!k<
%O,]$,g-SfF0:4R;'q(g1\LsI!\P;)hm![P"6UPV2@JODnU17J5^'0<1R>O^S^m]"bj$ctD.N29A;Q3es#I(oHQaso]!K'mMD51kK
%frWQc=:gfOVOW.i(,XpYln&:Wl"Xm!80K+W_LuY:I?(ZO'flUkFiO>7@8^&ISq7ESTs%c*,.cCJiNMkg3%WQon8eWk-PJZYTNdT>
%)5mnr;NdYR"PnTU1RcH;i9W9Mebc7R^rYZFU52YtiVq1DTJN../\*T/c&@6m8u6Xt8u[0OdUi/MQ1n"Dnnc6.-iG)B5H,JK9om"[
%oX7nE=dNkW,)]eE4S=%ZY+/jkl5t$9XrqKNU:P+mF"[;/-fiD[oE^#c#K#rd")oM?9fI.D:Mco78o8ULc+tV&Y01[0BbLkMC$(,K
%bSCpiUc^u!n9"=*$5d`e8DTU;,,g>4C^/D@;^7XJ8-20.]eq2=X=`ZW0_nSmK=i/;_0)6HFK\>Og2(YggdBdbf"WilCuF04mNaP#
%qsn5354UM1gF.9T>dfQ)q)RGdf@/B@_)A9uN.Fe6:GPt%f"@+MTT[TqH<b$K902YK7KFT/4NX>hI@YY?>,R(:!X<#rB4gL\2'3a%
%9Cp>j.ZP;8fPKIZ(n`Be]mNF_G7Au"OWKT,f*`mPEH'.b5S?fR=P?Te$^ukhNTu=#7=e%RP#a-Rbt9j^5>3Vq+Nbj$-#n6SWpt-R
%9!Yd;/eV$Ia8(n:!k+n-HD;mJRSfNZ[Y_.I1)7lA_dTl:7qOHt/1,J3m4Z[>Oo.>C'o<?aL/aK4?DDM<[6NR<q6:s?Ks"D1)2JP0
%UECdgXp!`V3Q`*)CZpaXB(rA=9D;/c!!C7S;\_l]QN.,7%Qe[kHR$ZFe(9h_/Mcr\3ia7EES,A@;.X]m7mLW^6mh3Ih*d6c#D^:V
%#pu9^Ss,gfF\Q_FW8/2fW!f.&l.[tY@nP]<$=q46)&2f&LOl\=Lg.O]Xu,Sk!D75FM3ap,F%$:XoHKSgT0&Q;8Ya_O(Cn(T74=n7
%@HTZ%Va+cWP-Uga,'61&c!:O`0Xbli6GT7p!.e130t#fd/mc1-._<8_c?&QJ#',W`qQYP%e!1NLZj#,APRbJd/248&2A0fZLjj%5
%Y2#4[?2`c>.As<m$BEUrZn.cmLLEJo\^-8S:/GhTEm)HfV7.ZG?ps,25YFEa'5-6-SX.r':r?mPC/6g*G-Zj9l8iU#O5WDf5lq,-
%Rn5te"'nM00;;'\M>T?E@!JK)@Q"AH*AU%!^(@\XW`#S9^m?,?W)=oGa?@k,P1"GX.b'`".],m7&q3Rui%PDh2KJI49?5[idZLlR
%7)cA9<r1U:4;ND@N`9Q@$$7U^-]/.mLI6s%dbOo+.1)P>D)G0n;R4Xi>r_o2P\JfJdZhgJHp%rS<uSl7<(mrMAUNsad1oh"F)rBf
%l*ou_Q0\7ppS(CAX]R;RFg<'Wk[<@_#TWf;!5=/<_%jCS\JROHUXkP8QdTm`IH+R%<Vf<M#+%$kjVNpAC>UDM>"PB\ha]n%k-<ru
%f21^Ui\7DSPmuS;-d</Ohur+K6%6rEEM:pa_r-n!-R!CZA3o'CCm,8AFD]YC0llN%-]($m1<B3@@7A`SCog2WKDK'*OIOMR$XnT6
%^19p?:f2bZYbI@49A>(9cQSOo';:un<'Hr21rBs!S<ACD9FBkcL;EW#pg@79\>FgpAgO?Wg#D#.Zk']9V1L+Km<9ueRfgt)!n"kd
%g*5:42"j2W!s!7YomJ0O'9;I:9um'*W)t!"S.+.HQ,D;JlOe(!Du1hdjgG:T@Hf72_<FRA6[XrZ&\nlfX@R9LZL0"D)6_a;):Afc
%N$9]D5!"*D\aLk+*8Y@13^\MS,JM:FA&n0E"F<.nr0LOZQ3QiR`%4l>PpIs@Hh'-8g9Ph(&'[',^*1P7/4W%8l[Hjc4bs-pQrJf@
%3Uu>m,%FSf`)VO!MBuMo/oYdpNm_"B0NX-<.O(LjP3c!e[u1=9jO:PK@7b3+)O`<<$gBDX-.4#Xa3q,t#Y2Wdq>Y.3=6CG%VLgFS
%J*#%on^GlN'`Iqj#^Vk7M5c:SUe`C>hP=Pmlg$'Zps)ULeb\L8(!.[ug.@:'B_t2t;V5/[FFEOl_d1c]Me80;J&(rF(j4dLU65^[
%-]Z\\P2g(D@s0d,@V>mj_?C1KoOUY]ac7']FVBi"0,[`*6$26sH:gWUG%&i:s5\:9mTcPaq3'?`#EGo;7pf*c?!TQ1V$C?R7C.t(
%2,g2a']2?aYs`uLEbU/i.&?JW$<!R#]Oi9d=F;-25dc[pe"hR&StpPWE>K91Zb'cP'^+BDbAuh)V678',omb>_]hi@agu^Ja[t?,
%N7.4^B[\)HF1S;&IR\86;/iXEbo.K/]=)2C^ZUrW;b$<C0:8&dr.B&)$n::S:pL^JF/HT@6u%!+7gmWZF!,!NEcEL`4Ta?N4G$`A
%f.oi*M/SZR^gcI[4se8DV9nl->U`HE[K<Y:Y(Y'oqUti.BNI:0']F"#BHKtoY'XLHJuq[WrjXS?_e,CPf--FZnX2!&YkGuO_/K;?
%"hfl9+p)+A@,Hek[&1/B`'m-!Yjo)qn<KEQOgok5DAI#[>TZQt]r1>!UTqt5<?r<K1AS,lg(nlk@P(KF/6q`f3^HhY_K8`8##rj!
%X_L5k@\Xm[M:sQ_Fe`()<*B]WZQa<a/nHRE=LaB$kR7DfW<+OgVUO%6"R0Y?Z&/XN8ZYTk]#s$%C]WEpVD(ei">!'g,FFXc7jFZ?
%R7AqT5FeKe4CboEV[J-76<bKAbTjXo*APmg,@JqW5>LR`YoktcF[[8$d$ZUPIu[Drg8q5In`N>\Q:S@Hl-Ic+`^Ab'T\.9\7Kfc'
%G@C0K$jsm`kS:!07iE+`'YAR_nR4f!p?h/b_k*i[HfVp3/X_PMeBk,oNPp1kUFR`PZ$Xgh.[XNZ`g4Kor->Z"BTMC9\%;\o<I+?"
%+_G$]Qg2fL4t@?^#oR9H7+Z#g-nI8pn]BAnZB:!a^j?Y""^Y/N!q8%#<iG@3a'i6/<Db`.g9?m)oM[kH;7o=k_\<14qi+qV#Xh7Z
%JZEF-@s<BAVhKXa;q!dRe[R+n3?W0Fe7S:j'h(B3Rru]0^2s,9G?tfgU6C1k,L$G>T-1LuV5r[/I[<l@LDZMW.u"(M[IGH!Hu?n9
%>Cl4S-U9T0MC?`t"]#=&`B957_TE-4OX"gF&.Rtpd5XK,QAQDZ_,M2DFu7Zna%_!;!jq1'i'sA"RLBc.bsdl:[NDFRgh8HE/@);N
%a7R0YdL&H"of<pEj3<C?LTR;1Lp2#J<nG]#\C!pCPF/tV%Vk7:90`fnR#iPrEnb1G>a+2!<)cSp=4l>-&,[^dL_qP9CM%h4.98lT
%/2"aMORB.!!.(lqQ:EH-4f6E*I.)XIO<IanQ[jt/NLlV`XDW"a1?@O3qIkZS6BI"a3:5F+e/UnsnM5s.`A[i3(qA7[R#:/m=(t,t
%[LXbq/uh:EmVZi`%::mlAa"!+\g?,YI-![VLIEon&b/<Leo9WC6GMl@;&bBQ`_T"\lXC(s5\Y1#>PH-&>^(=u!tZ\I!WtV'__@I,
%=0Q)PSikn?C>0G$hF3bbc.K#6#R*/^"4GSt.m-mI7QLOJkc!0\J+WPn/dhq$E2+HIjA>V;r;9r^(ZB:9#:4jO[jcfg9-qqr5m@?4
%V)rW:jLcCCCaGi#0!R^@==Fo1r'l2Wm?6jO1$+c7B/!d?mC3`Fg)?"QJF5$5Ys+iQ8pYB6pCdtchI^'eJgSsJ`9=>VU73A6WbI,q
%DLSsUSr-9eUsaKoUlr9W`;5&5i*uVP-aR7ug-"8M3+&"I:#1OfM[0O=MXrT#![=5='qgIkAIZ=!gpIMTUd#:g9#.:H@^84!m/EPa
%7nXUt`,UEc]u93c`0R.@[(=odEJDk@3PEMt5\o9Efn_pZBlK=Pm8*(,\$&aQkJM-MVI]lbK(Md^TXt%1@s?AOLokP++WMo4:8s&A
%H;O^LI\8O-rE;75CK`IY6"'1VXlc$HN"c#u:c1.Hm8"O01N[IkD:6N3.an=#Pa6-GWD0sTV?7ntrUMR%US=JHd=j>*6nR>+\e)@D
%0[=Q;8*T;"rM*[):NnA'Qs'o!7>VeMSHrlSe#KP1a#K1tiTrr^SE!"S.Rnf/eCF7MN?GFh[2B2MV+$JU9A165^^g!Z:\5ZJW!616
%fpSoe`JIoYdl0'G.Qb\SC-%MM(mU"&#>8#H!L5f>Btsrjpg,mS,WQd'g]8Dqe*q^qR"4CPeSu%2N3<`slH9c:?t>FmiV"R'\9h#9
%I"YH,:iB5SPr1;#8+C2uWRs`);/QSVOVoGp3r8E2iC>ec*P#YU5T5?`10rX+?@N/hFdcFl-NOoJGo$L>2K;t8+&1_G:4i6U79>7F
%%EeCA$o'Tsk_0$^ON]Z?lTi3]K/nmbGY2+6$HQ%@NIHt,)JLj&rB)_[]!S/"M3T8qgd"),J@QR1e[h&/8ubG,j/]*Q;@]PB)3TWO
%$!c>mTLcFF1g:HAaQi5HkJf6:1dsWb>8UE5!kTI%.%Y62(4C<Lg3*oG^.-#(/I\_#cOWTTY,..[?o8t]B$*0bqlH,b9:,`6h([Db
%$BB`q*oEt?WFQlE#?Vk69u+Rq0)1?)$^;6FjZ#anU@\T$%aE+1kc_uhAXVWEkW4Hj3%G:M5n:(8En=k68>Ft!Y2pMBCQhSfVVb:l
%]5h'on?niTocjcW<-i]\!Tn<@efc>R.k/WY[?'il!](1*i8ka")74Vg0")n.=UsmCO@J00Cr`rIQ]T%FPN:e']e:fPJtY8OiZ6o6
%VF4S"YJdWl@of&D6UBOe/%sAX_AieIGI40J>F`K"?-VRN8U=taXVlG;;)/.)><`+^;(+L+?ZKT:PF9`GG>8QX2r^`;PFk^l,]%o>
%du'hm-%>Vp86_j*](.CqPa9W]<*KV(d-kC930#dAl%)3FNV5Y[_^JG=0MR(pJS>D4T%)".00,r/qpFHRQl)j0&+D?O]Gg1r1ELXT
%h/[X`F4]MQfF,qaj:,B`[4+)1e!ATGCdX\sQQWk:PcnH!B,n=GD7S7o91:ii<?W9O_!C<6@OIm']Yq\:kt"PtXfKmZ0lUL,4''jK
%c<U#6'2Bs0j@WkQegruT9?O.!l>#s).\d2NeD;(0StbI!h"Xh[]qg>c!(dh[?$QDMHUV"u-j>R$:GOn*M9<$lK95<7iG3sUPT,[/
%kX#pKl/\?g/FO]%3P?4NhNJKthGpDXm[++Ns/Z$_?HJ<[^&7s-&&"Cm#k9#T&PH=F!sSn\$ZBWg#j$eW5^16!=P'L$Dgm`\bdq=d
%hNZYjCKJU")gN8G,>Od#4f2%IRFI0:Xm\_,NCr=.22'AS2[:&lToZ%b:=MgtV4)RP?s*e%Ve)NG#rm$he?SK46D/_r<j$^!8<+$g
%>cX!Qo^`VnSY%cDHk=d&)kTOb/rZ\Ok^P-alF0#.#up1hA_95mRW]`l`/B`?>u@RjD_Z(bfFn2C;N8s1[-(K@6*7'(DEERlTfK2%
%W&MQ^^-mg]fGi;6Pp@6h[\a7)*Hbjh;S']Z?_$m1`s@TMiO;bUF+kDuOCYSqAZ#cT;/f#dEQlY7F5V%X=HXKIf\?kTB4G+SjWNTW
%'fYcZNV*<_%"O\Qm'3K0WfQHc`/#?"cd(GL%rW)[CB<#e_^`ipLMnm*:W-;P<u8tBb?#N)fE[pMI2cS"e9H9*9T'6IR@rqeTfk%W
%^U[Z`Sq(%-X0&"[&A?N2>-'<r@naAZ->O&q4P@@[$kSM8Yufl)IAh5\$1M28#`bZk9p73Z$b2;"@47c4Y#%I$I$7g#HjFj#>>gh%
%N')G3k32Db-7:(q#XML"j!aHk`Y'Ijd<N]&+Sb5S)+?sf:J8?H2*!`LalEu?&$dTDY[bniFt=972?l6sD]\aF1ra4`_5MmuVmbm7
%Ai5*%=D[B?^':-_@Q8a+iQB3]jGRf>(<,1.-p@V>9ZI.K*L?Ln!G[G(6a'W'g<0E\6]YFBF9$k*U'spFYnbF:ld*no'*umAO5CBX
%SC5=H&@`r-@7*%.p4Zrg/=Soq@&@=]aFlgCbpJOl#]m&o#-n_'Y%TBNfXGDm^U/YhJ27IsK<T(&eF_5,XsmfaNmsrKOg@1M]MGTV
%,nt8+GGUj?[2pk@%l4JMF'>Co/0F>_:!e*cN;2a)s3qeu4Ck]b[\C[C`>[q<b_o`(Tk]unn*]Z:9bZ\a!Dj!hq4Z>;/`Eo3,\.1#
%/*n[h^V,(BbB0-hbof.(#JNBHodKc$'+cGkUP/fdq4<(;ki1.5;JId&00$8<2j]L%cD.&2o.Hh"mEkESc_XI2rDXP"PbrIAU&,L/
%bBg[[msoY'<$2JEeus4j$;NlM9>"WEl>#Vk\pcHL&A/Z5Sp'OZ%r3PtQ*<]+./U*.&r`e=N)C5%b$,<=n5gu$3jc_sHmm)tk=G'n
%EW+ifq4OLqph,InYl<?NofE;?\?<EA8\S\5Q7o6]mP6;<big/$&P:=_iKHsCXZD6B>2Y)9'3C"W!X;m?$*YEnVht,O@/Sq)-am.)
%b-l^kG#lXnW*l!kdA;)?E?MaZgFtcVl3?tPh?[qaZ@baNXj*SoJFB3>"sG'WN@L5>PcX[YUQ$l7D&)B%J(pjN.Ec<#A^I<ao:hSf
%l7'8liQ(+EQID.(=I<Ock2@$GU=9Pk%XNYW*9"]"A\K,K"UHlmH9Dqe7V19_R`s:spCDKG].0VTk2EQE(Q4@V.,iCW4;;@^@HB6a
%eGK<JXSDn5An6*j>g?a.,Yo"]H,9j$pd$2MeR":NNT?<1)+h_*n>?!$q_ZJY$`"pl[M4>?/le?!["6e`b]qO^aiP(I&tEi#DDCn'
%B.b[Mj-*m&o6#P,/^%Ngp%mnZ^WTQ/B6K+qTWB(<?P_'h+idbOqC'O<f!5:WWcT2$jlpYe!8YqiqNu`ad:jh9%213=]*)F2e9!d&
%04?o#:)nO3/@O97Ptq'^HaZ]K=gr_=<VYHGi#r'.B9k4GQJiQXE?UAlG:%9V?gJ`NAesjBprYk@[;]29kOWp.8JS`Rp#`JEU!R+L
%bYR/Df)dmhZ`7at5SYR7d?=]bhYGE*@Mil9H6(=aIQ&j(2/8n#q:`ISZi;4bq;IANQH;R#P5VH9CfT%_ioUS7Zjo4[\aGM:WFNh*
%s1s(`$Z8+J_*Q?p(RHG\W!I\TdWh^f!ofsVnR;h3qsRjY<hHN#[g=k-7BB696X(\^8!V(@$ef'-jFHNqaK7PDX^mDUn)9!-ceV=-
%75Rr@QeBngIX*P[qs'0Q)b2oK%Op4@N1^Df_.j0>9,0Xt$'rKAI!YOu>n0VhC]>s.#bc5VouZ6`QfXLXeC^LUR7K3BkhYG-V5B,9
%`*C,Qj\RsMfS!aUGJQbe;Wbrs:Vok:PS`[B0Wf6D0?+ealiFs;PF,fF0i"UD'j:!klnV/O)_LGGX74Z<cbePfXVXZ3#'C/A'O%%]
%E0WseHjlH4?G-go-!BGR/R^)rQg&kQ<$f6qoZ>3jcQ2bhp%)&,4I<WN?0]8MK+*XR6+/QWY9Qr_orrsESuBU6mlR:.&,IR:hY)6k
%r5f7u=]92rE$VG(9?A5cqRJ..T/0>#SmZ]_q;(@:&2pgp`iDCt7,@S"nakfMdc(\igpX3!.k$Pnj?49MY'IKVYO(k>bK$K<*"C'0
%-NE;YR*UAe[>iN0!0cCi3!E,jW.Zs?p]R!cQ6`]QS%Z7FF5L(ff[_BB)=X1=Xp07dn[>RsKtS&f&F#<c*%>E(UNsRV-AmXi\1mYk
%LV[hm5);=eO]-Q`lEd^gV!rX3H!%GC`!1)!/h\m'T%XQCn>X1GgV5]eDR5t6(JnOmo#<W]4Qr!-fDPu[]oq$MdG@BcdZ$9K+H,I^
%Wt)$iceHeaKc/Kg]c7F6ZUk&SC=Hm)-[7\c&9`,?4QX,IErrh=dHT-bOBGUf'0$E7SQ]ZF(8DGh`JCumr:eR77?Lt=5IsI@Be@it
%U)Q][Wid$me=58affC\g-X8Eg;7OO1,I8rEY\"AQWUR&="g200dLO)h(:D#<YKk(,s"qsaWLeg,c2Lke*d!htin6_"c!EDpP`h#R
%.0.om:lH]HO^1Ea#pFL_]kJ"*!mr0-\#:3CTFXT!H8-aUT8ISG_&"+&B_O+6AnNEeU.$P83Z]lSm/)LGcpe"*J:ClkK9ApPKC_L1
%CS"QbfeZmLS?n%HWY38LRJ"bU:1Nm\J%kP/<9)(#l[(4!BHRBZSCelGht$5:Epg5gh#lHLg'u]e8@RlI_]B+p7*Soh_A*kj7*HY@
%YaHi"SQPEJ6$GbY.`r$"rTgGd"2RQ0&kehY<m?5uH<sXC;C.@(7gm"<8J*+M"Z^jX$q?%Hj>MoVqi>YriZ1Ec@sc1CZoAUT<UN9l
%fDZK6f(XObl!==tE_aGbB<j7:79gG_MXBa(.;=99qY[Ei\j<;#*srdWRZlq=ROY;_`k3N$TQ?aRM4IF#jP4C_:3K%SORHFg-@m:D
%Gi^E('h7uPq1#j7iV>Q!7OO+He/GQ2g6=XTh`kH1#\AImLVEGi5(*(_QZT\ihMRKZ/1_</PrejmU-#[,p\]u1\=SDCO,qnJq;1aH
%ko04F^RF0Bq:3O[lKJ'2o@TrkY<TaYokRZhhsopl(=C*#E[kbA`/gt\:A1@@EU;fW"sIYe?h_9god,4XqW_.s\ak9j>0XW;<rX"Y
%Rn'sd<Wj_ZPE!E95DT+.dAV9h_XRmWrMm"Hh@1;=qh]arfm<R4`SL"sd,os<DfmoeC;7IqTqG['$X4q:8DEICeNN,O\:;P7FM*EF
%NN\X"7W!T_^W%kRW%HlnMbAKuq'`Or0WD[E8u+U'(k_I^kun,T#i7MpL=AZOSaTnClm.8h)pl^i0u'1a@WC7cEhBNln85$p#Xqro
%:t3Ce7\[7(+h77(dWD1"!c>SsQ]jHfOL2rj>mu%'e4W=66/t/EV#0V`@5_CCc*Ui7H^/t#_t[sg!UX&oOml2cgN"A.=kou.H2INM
%XAD`DC$Bf.(%[2,7u=b/-f;["e5'Xb)J%M!itQ[\']0l.LT=;@NZ3#(eCL?eh,_2]U4lH\0LG9JrllM[1jG+_:VhbQ5eIJ)8nM.7
%hB)?G=E%N0^XE*qNXTfT%4QJ<'85H&+a_]*6-H[KD%rbF7L<B0H?[kHi^b^1r1Z0_(T@9kqo]Y0`3YOZgGJ#N6SLE.)$':/r*KnZ
%GM!II[ARsjlpaja7^$)$X>?aLEY!s*l0;g_HC%6_U#h<bj^Q<C@tn#*h&_qWU#`71jtrRD>UsY_9>#K%mYhPn:dlB:0\;j%q0CJZ
%j$k^q[[pDTY$A^lNQjV&JrfW-\qIgU[)q.Tg'9$LQUBDi"hkiGm\msMU_b@bG`uA,]2f?Z.`.?[7Ia@c3ED9T7H0H"):eE=!^@*>
%GM),`gQB/^/GS@cBl[abqb>WM!nsG#amH%ri7)1jX(oZB`Ls\1h,X-R=gk(0Slbf8[9ae.[s1<LGfu>)q?`#.niZ'J6,-l+oS]_L
%JJ2bTQB<6Rg1qPIZhL;>%ERjMR%]\IYseXo@-Lo2h\DiF[eM?&-do"=Z\?2`AW-o`4Kq(6b#LcdY](!6*Y<`4W6P0,h>3'5F;B"%
%'&Xk8iOP%`@C9WU-RX&&P&u:9M@9MVYSH+&9!jsF*EQ<@%U;j`pA<KlVF>2XY=AgW6SjC_V'PmI0il91JRig6>VM.8U.PXFPh$:%
%-<YGE$]@V(4n@'[qt8c3dm(*s\S!sQEMX!*5>/ipX:P6X)s>Bj6T4Xodb6(B=VV`i5;r4k'pCE5E(Pir$4o^s/odYR4eEB(MBJ57
%p$AJ^pI,P]Mp(F($NaSG=mpO=&3f22q7sM/%8E^irJUac+tO/$GsM,kQaj6YP.GH&QFXTn-h,/>[i*quqn2YhL7gqD.E6L6deO>]
%mi&?)"MX=DPMHj:E\ZmEDAY:#Bm+=T;smdl/MP9aZ'+3X8?e]`E8(BjMg64jaWRBked`W(i#bb(#;UV/_Z.=T)*$enJ+l.?Y@RLj
%XR=I*/Um<3?3ccE<oP]S3t[CB_ZmY^Zh$HuVN@F\T>"L`j6DDkeg:&ZDS-&;@'FP)!m\=\(oN3'7;2t8A4@$%Z=,1m?4B[#dNKO;
%g`V.u6m*6WBh/X$IBAE@.'_-QL!l\B&c,WRWB/N;jk\coMq*hIM6PZ5ZWg[c)>eYEcX=cik#4JBSkTpJot2G@Q_W3;.$L*,E_.59
%d9Zs5a8Q<RD?ebTlk<CT;8?u,4U3iufG_"0,s>G4I;\hqG^lD-RYt1QQSBDT`H"pI89c?gC?iOp#<m6[r8l,_?-=R`gA^G-eXZM6
%&&XRe&=SE?eXIt[,=WO5L[e?<\@cP%E(mIl]"<l+6nG?P&+"dVQtb5?80b7a@Ks8CVKsI/`B@Vcb\dkjdab;BfE!YMJcpDM+U24#
%]3,Nd$RQNDW*k3r#T2$u75&'\7KA]M\*lH;blNG;U>IL4V.\cteDU[EGFS"K&#`D4=RJT&G1t_":89u\HU$lH(Rj?#%6bfNF.:LS
%";WLfJKeh:rug'PF<g%X^ZBG4)hSfN2<`:^KDQk>:N<"k;8Yt0]ei.%7UYA1]dW*pa:m[pF7hHFj#lPM;%LEKb,f)1L5D*.p<^u/
%W<"tf)B49Sj+)p\T`B?&P].]4hK\;UT_/eKMIE#FVWCJbG`$?Z=hDf;"Zc!Udo2>BVt8isTJo@MM@dVs=Nr39+_T11[9XHIb+q;R
%4<r*K$;mh[2Gd's1;>m[H?[lV/nl$\!E+bOQP>`pa[BY,PWi?:?UqPZe\Q"QRu9'=6f&e=BEa+B2#9#H9Z'J6H:dW<_44qrjU]t,
%R?gQT19h;S%p+D?*-JYcMS[h_[&`eO%/iZd5r(3!05U@Y+=k^DOT<g9N-KEbTQCHMLK9s][eS@mPr*m@!OtQ$eTCGWR(f$2SJRh(
%0?1Xbk&Zuh"%\I4(g\ZNG]HG5U!+02Wr-,j@5bL[3d84ilG)6!(3LhP72kPM=&>2qj!VnZD*m;`M7-4_cUe>`%*%n3H9P#\a_Nk0
%K-@'*0o[UA(4-ole(ZQ-s7pS^,tOn'X[B,SdR@'IGW(&>IB-ffl-d\9!Y%o\OaW]B+]6<_M;KSnBM:XLXo^4oD6q$B\_<f^c4^Zo
%$*k<gU>jR?af=,e@Vj!(V18er3^.elJ4uk[:uH<Ycr1B%At>EuPqQInCq5P"\5"gSQhh4`[oMg"D<(e-UsP$-%\lc-<Ko=W&@Wo1
%XjLX$[EINa4+8[cl_5e^`?Q:%PqSq@j0R2@J=-HCcX%Wq^.hm.V2B:`JKSaUba<%hHg2U],S^-C-WRT3YnKq8X]&o?m.Y&uX(Ns5
%Eb;-pfg6!>a1N\J"01_P/5'R`D'1mYBp[q:Mp&b5YQ'XJ(R-%#q?#cS_M@"Am_Bu![L)=@eL/)cXE/+9h4dO[TX.l4hqapo<A"bg
%]pl3GT7^tgM2kC]V4Ck-JT4AZ4U[P!.X.2"S@?(fLo+l?9V%V_EoG^R,GS#Z_cLW"A28gk5!J]31W@Wgr80a:H2Q*WDr<ZI_4q`G
%<98CHj[u5n7RAV3&$8i`?6^-sN;Y.`pL(g5N^\']TBE1;8o.V&hKV[.^aN'M/(5=D<Wj<rgB3,tk4.W]]?i4=q<)H%\]i225ePji
%KuK\5B?-?Wg!ZoMq&,Id8P\lioKtR)l*@):`gjnU>.nL\4#QZ<D14sW7TIUI1P'`uprm2IIf"<_==o?<hhTIAb0H1L6WMQE6]fa*
%k;;JQmbP1@]fltLiEZmOa?WrP'H3ST1p--\Rhcmrdd3O&3n+;g;I/=anSudN5bbV<mISjCS2gb)Q=!V:5&.1-IH(h(hFe1eFE4!7
%hCdJj&L:%^il.kBil7BuH%Fm.6N8+*Z4<c+RtK)q=tG+k3E4N])I8oI:?N<eA8[M`S]?*rFkcBAVhs57i)Pp?atND3aTu26q$%(>
%ogF0!:8,#,f\DEc>/+H=%u.QQ&#2=H].RU>Wa7._Pq<DOQr5C$0S&1AUnj8&#E;bZGnRk;_;eM)cK4mZlEe!erI*>,(Q36jnSjuN
%Nss$h-]2$m2BqNe[10.pCbVf23$Ph_K\%Ddo$aO5j5-EAqSIVuG*/-^W?kg%k@+r)kne3.,e)!Y:uk$Z96JtIX;D8%Z`itfc_=_r
%,^<XO3Z6P&1*<1fWd)OSk6ri\7WQW2;gTcSdKQXJEP+qsi*sp.6'$.QgV-JpcZ'd(JJY<W>?hQL"YkYVk>R(,3@tqh[j>mTF!Ym@
%paj#"E?=dUgtSDFQ5:U)V9E:;9)7@l3KBSWJ$rENST1iJf8*$YB&$t_^RRd,2t!<4?9K;#Q+NP]8M?Xgo?=b\!LPlWhBFNW=p'+p
%rbNRo$qs[7cF+Fdl?Q?'c3FfMHQ`&ZIq2?BL)MiOLC@1X8UM$--,_$0RE=V5Ya0/]/:T<C^NK't(OR`!C3Wj!FM"oF.ap@=:]W^!
%8;U#4%5es[%@Ja\jJk!nkI/b4U1,eHS;F1Y2/6\6Mc?mh:\[>WJSRQV6?L1EO$b7*.](gNXdtU`Ka89"%?a.Qp1H>J'bKX:Z,ut)
%=T&H[<(XR9g8SBe&kX4L$eff-FpWihLrcrX02G<*&>Qf`26po%iHjV]Q9?`=m(^qT&;E4*BrX=jWJEsoh'd2SU:[=S%5CFt'*Np9
%)Z\PmXEX/53J<](C4$6(U#GGbArsaVjohjGcTB4'>DV^nY%<0NVs0r,)-Hstn!T3'C#DTReM:Q-k6lTZ[!cd$Dg4'hqDO!Y/+!q'
%$(J(5MCf)Z.8R4I<I.@`3fIa26WZl&pAJF._sNPfpAU2^L\;n>1$)%6^Z+FAE0HaTG"+\WT,C7oP+7%>Cat/eI>ImR#po^E1srQl
%@/NlE[e+SX#.;;0=WPfa+K>NAW2Ph8k$ba(+LBV1\t@7CP`k[ET7g2WKXHl1$Y'PY7X^q!kA<856R\&Gk_i:+SI5upL@64N'<sC*
%ds\l#.M\.PU-;=*dfu0r3]f!MobU[SeW]2L."9[dhg+LoOhh?L(&#KSRCo@T_qfEMX"t&A8]NSmK\ka2F(*F1;s%@661LX8.PX=f
%$7=Pa9=p_@MX3m@g+9MX!I$0!%BTZ3)po:d.]#YM)J=K!R8R$b#OF`hN)fde'9FA0bp3SKXZ/T2ZWTQ5<?>La\k4*:X.@qBm<UW[
%T0T`qHqS?1o"YrDDVWUQ#b_K0NF#HtlIR5-(BqVLg.!HPQ$c`/j/^2SSk"4W=*f"o=maC!q((<M[I>a4^aCo!eM<m\'Z"]MNqX6m
%<P&6K?-;dm7_LhKD&UXGDC8a9.,AUlY(#`6:Ykho,EEB6&hI[5fi5>O=L15QqQ,Uam3hX(X4n$5XHsk%XDm]hSWCQi0%cn:6*&aV
%Iqkc2Yp1h)gV`GP;C<9UhAg_)OecgeP^i;FM.dGc&qrqH92*M_2:T8I6VcF@lIolloebmW;0TnY,rc_A1OSO@YI`GoY@9:R"_qih
%M]eiCr&p__h&>Q#7_LhK0is-)W7NtX)NRFfKbi`5Em$igf>8fWRFHc)Sh@!to:Yg^%9Wa4Z3G.=VUu+2o\+a)OsKU"P#M[.O8<TT
%-(k=)(UF7InRC";_k(-lDNb8giD\.D#-jd_.TJhjH%\3!X4aLpPY%^9g;T^D#AoGNWe_Zpb&D4Xr.R2QLnl]"a-8`*9!l.VQr/5L
%o^8AJ)9&(0(?GsuLap2.ShM?Z'h"=c5_kFQ4!(B;kdh])k,>K4cT'oBM[L;hAlLF%ANnP#M%$b,<5s;(n`G@!T<S!2f"pRp+6PNB
%=FFM--DVt!eRM.6.d.JtZ)qrI#/)nZ=26E^f"%/mcQo"154-DHL^]*t86[F9%NnGpZt\Cq!)qgEY3_BV;Eh64KOL#S>&,,.X,`o:
%]c!c0L1Qq=X<im6,oBf%EB^41]T`kT1W=ih7SJ,>[>5fbQu=nHY]!CkGu-<9>4<(t2oLT1Z!`2t.b!)SmuUM-l!2t[jBAACDuJYa
%W.QZ)96&I"OVfLlpfUoJ^gW<=5l6:IZ.2A6Sgf1C@GX3%IKlKrq%Ct-W6/5c(ADALERYWlLcjppN6"(2g`(:W32+gu[**H,J(3PN
%Jj!@"N"kM`KLq7^PJuH=<<FZV'-8+YiIAF'PG-J7_.tkEp\A+4[VrpX7f/>LFp-!Q-uj1"@``e<kY)f$Pfu",)o.s'OW43#8XVLZ
%q*Y#3pMoj5_`EK!UkV5V?r,4HAMFn&Of!S\'gafP<;%[`?4;`c?T_Fd+>@qFLtW6JR:+2-7;K92[RquJ./:Rt+#?"m>g[YX'jR"<
%)^"_k<_+6/&aJk;K24Q9r3];U]n_Y2!*ii>+:f/1lHj'<K6UqAr.6!kFfie.Km8FqUKeLr=MGK>OI&t>aV_XN0lutE"MLMa#a*?k
%1Yu,RCg<d,?Nm3:V>LA6hY<IV';DhD?,Jm^*kaQ/=T5\PmuL8-X^F,W$j_*_=cV/]4G\Ir#=\D,nREVUW+;_:NuN(YcVue$C#S`-
%9%<p.=r%K2dlXC^[dT(jgT)p!pl`L/o^kD6$u7b6\Ylq=d(En]_K#m"(:8cnQin:EYoZru1hB6VO6B?[p;m)0>Vhh>G>:PFF<?NW
%7Q"/1:Pt*0[2j'e@Js<R@q'\sm!AbD2j#Lglep7EBXqWR^B%(ZhjG5[Ip*EiHABhf1Zj\'r'I\*Wubk'i?YK%EuhZ?8G3G3rBeP&
%$40ES"3?!Is!MqPnR9X)0G%a%NsU+tdDB"N&*Qa/db*\6Z=<s,qP&<)LtM;P54t+U-3K&VY6a7n"q"aJo9hIu1+)Nlo'6<d$l9XN
%[>K9dh(5qLS!=O]B9ZjT\hlN$@)^fN;9HWhA.h:/"/qNb'[btT@*`](4aEOZVCFE;P-F?#l=8&$$kR]BDVFoXs3.]EY!op'U%.p?
%I8DF.Y(OAl^2?EU_%":#k:gJ/\-q!T_khYTKCY.d=VO<RF`aEU?hKH4im51,fC6Tf6u.JK2?A7j73ia!"Ll,oJ_FbED&.0CHAR'K
%"ActiHk6L4i!"VApPGqgqO%7&fbhtBe*$<*rPAQ4FQH3g'Eg-AaDDUml0DdZ<*Rc#?l7@CBDPrO(J5c&V?om`8a^,&CXDVX.NRL6
%1o>IVZ%h8&d&JeCIWUPmJ`fJ@Obd!4a_"^glUCmJ6YIt:_44T"aA1JAYWT;[oK?[ZjY."BOYu5U1X6]cG'fNjB/NMZ%9DE1`tKT%
%97gi&;rnBSkJlZ2(T)qkJ3i9a(KnX?$:kDJ02f#L8MI!mWg,al2b`d6PRUcR]G+Q#nkLbg4JL56;GL2H/ZCL9-AUbt[BUW=K4T+R
%^?aZ@%KV-ds25;@aVJ'\fUKd(Q&lLa-7to%#$#/ub->LclA$^\MHST;Rsf[[a043*c1CV"HTJTJ6g.HZ@k\@^b_)%QA\Kab??3#7
%G$_=P(`mV_C05CP9?%Jb"fn=HX.D.-Dhm2L_6N/rs6GK>!cTfHg2p0.l,_+!"doqAl]%!T"V45tqNb\1+a6J`rPce8:.$6q.U0[m
%(^ECeM,eA)6f7g$7#8?t-9eX()!>+%B-j&1dDaCkau9NN+VT.VHSkYohiJ7dG%n18,0T5VJ!i;7YZW;R",:Zl/#&i`56UFB<dOh2
%diAq2R*Z2(-Eg]28(_Y@$#2c,*RF$&?cek-B76]o,hfsE1FjCJ3_b;[4jG15TgrG?`D>_^Z\+RGV26P]e'Y^%'@ctj/&qbe<K"aR
%XW07OX<JdtCa6kD@eh>n:Vo,mZ,o,ZfTp7=@<a_O`/_U85+CN@@]!B%D)IsF<NeTVn"6_U])oM^2fjfd[=#k1BBG,ukdNJ:!(CO0
%fr^h6kHbr[9+TmOfH>dWB<o)5PViM@0pJ<>q%de8$_AiE71DAgR'A%b9FqpY^td('l5st@ZVV:c2I`o;dj\1NfPCQW`C3oM(^?P:
%=KpPtn=Ke/aX1kM39G+YSZ@C7,GWtQ50OqM_o'c*a4$kL;[=krI_S'PZ2;XS'EBbNcXF>9o!p6c2W>stc!&P'anR^("s9oM*XO4i
%c0#lD4bRTe3ETmDgM8b&P:ZJ"%lk;b=VaYs@un*Rdf'5e179='i6W5Aqq:JdB"2[g\-)Mn/pn:4Q8=9F+-Q_&>u^f]97I0+G\t`E
%;[EMt"4.#g5mb13%P#<9fU:f;LUp\D!QLhhK/UTdJj'o2V*VZEOOoa?o;#3.2C'"O#Yl)VT&R3O[N;"npjH=]EjKWJkak.i<dK43
%;HYSo_&IYq\;98/eWK;R9;bb/\'i.u[eguVTpR*7hH'<2F:LYEM[W/%O#QlDiLj"MpXpH\r4:Rmpd7SJR1(`SoDo6?OsS:pN7[o.
%"B"OtIZP7AY>N_uUm<#AfLlZRcH(Y]B.d.1CVNi!_PO;[N7IS%%b(S[Le7s1@(o]g"^s=W5%;oocFQ?eJI,'EDGid3F!4k;Z=Md^
%?q=%ilPudUBM#0en08h=QC$nn5u+R5S>PLkBV8PX=?\<0F[$dXOi=$*!]XTr%9,[%.#!ca^)Fu*p&LMZ,IXcibN$R?pHFmZ*%9e%
%*cN/'5;[;48amEF[FtkT[JULC'+Ydj7VpJ2ph%b)@ig3OKhs,cHuB%G[4]4rB6hWXi<C[d:ej7h71.coK[;=UIEEO6qH.'3]58_1
%LBGYGpX^k?%hb]1^p"c69SU6m<<KG5=d"`TpVieL7h)/@2'.Rd[C@p;<+\B_hTlJ)jK<a*e[XA'BW_*">=`Ct#JE4c*X'W"VskI8
%.Qss3L*rg-i9(99OVi8cG#.'_!nnB4f;hd;NZ4!Gb#SNg\%t)6"-]Y;Lt?H2di*Q6ZT5ufN^@[D)LW[uk,?[U2/Wc6[`qG<TO(aW
%G1&mbUKbh]dXrc8OZ:oP'.H.N%=!*<)*A@?)elO$.f<2-Te1%,icZI!DlS4-b.IO0>L[.]0I]aahB)9AC8?;p1?`e78P:k<QL#,.
%I'E>N??+*'E^A>=!F1S0GMI<=/M;iT"Vr#89<SA0*[Y?L?)_MFREZ:gO&'24Wb.kn]fYYnc.$DHk\VTtX'0Ab#QmCY_?o.O=,>%>
%*nGtnIkg6EEA,]V^`=_njNYNn+97?p+f]d;*L7aZ%9@HZ\Yn`DOK<LXlFh3;RBW>KrN2l5Y]["eLE[6*4JEJME;7S\!b8LVC(W,J
%/7'A7GRm0.(Feq7IU3BtH(StC5YMg,?V95a-n]9O?"E]K95?FY(PXJ%@8<"gDurADV&kq.GV%D)CY/gp>T`J+@#YRU-]:eMVlP8I
%kh(Z(l-o?%5@*KWa>43I-'WRu<Y9nhePHr$eI(j)bPFW77ACWb*@Mbr5V-ja9iU4]n>"MS"KpRV^LUQ6:$I]+=3LikaNA?b;,Kh"
%?s%0h'<>7OY?j*a]&o\"UjjQV[O$)e!7BlnEOtLL7?6!^>=B%Y<so+iU7^!\]gRVgPUR=gef<N(ANQ-8EL!+fe3pWsN'@aIPTJTR
%jo8n?fj$m6&^NX.d_"/k4[[D`-;*2r;Hd7;!J@A]%8+ICd@7-S#jL,e:InSqqAQEGnoN`4>SHJQii&fds)(*/bA\c!#1@)(Ma9-r
%$cKWrfnG-=nK?aHI9K;QKI).MnZ!0g*CnFg[Yj.bPe;M2,lQF;\Gmg[6f2W_jCT,.)pLVuY'AIWF^>i83U\R:40)J\2"Z(;kH+G[
%hB>niluZ(SNX>qVpBgpRnk-4A",EH_EKI=(.7RCg:[35PgV[?&VsWer]_$Hgr7jRVPMYVNdA_T;B^#45$QEu<.`1?lT*DtVgAMaa
%9aUh1oPfE(O')=m@s8s@-MOU9)&:lXZjRE^&#^GYBO6XDHe]hgJFG1`HD"(t[j]<'PtL[seAb1;p4S_<[@,DHVQK""W-?;<[W!,%
%6ThD;lP-):I]6EZ</TAK3Yb7h\Ib/1?aVo4H.9IdmRreGBEg3-hUAh>q6qXFO=%53N6YT!)2KjPbD&;d:h9OrW-?8k(/hP-d.)@i
%q0:@@<j@=L$tL)UoiB`$Ccm*qO8!A8S"n!NfbgL4A/cRiI>^p1$RNnVpQ3^:W,'<]S;DqF^+)hf\auc/a5*I\5rZJ88Ro?TkSO^&
%5t[G.T5>Re`3E!tiWtS2a!'o33H(&E;rtil`8Q[Z+^9$hrAC02TeshKhRi)2db)TA/adQroBr8EPbG=+9s$\!,2DM.b?7CK0=/&t
%)F6W5+\cAp&cU*dhApa0?G$#a0iEh`.)ma[/u@VofelCs"Mk;@6AHQs8f+8Z)u!]-Z2*^WU8ri[9QHM\.s"nR*L`jPW6pB*@9&3a
%m[C+i?*15+X?bbk`$oH0T(Lte)pcheCnN"3F0sLs0\X"H[fHbKY_48ML%_S`:V@&6=hF=6*:8AZN^P9pRd"u\&sb\@SN(,&iK^IK
%3\4>gqimD!8do60,boP1P*:+^E/g7C-@&9:6=WQ85r_!"..JMb4r$.kda:;c%G5J.]>fB%SIZM7\WHR*r=br8W[3mL.F^Z0'*>Ro
%Z>t*HIiY$t/u9G9P4`-S3NC5hK8hK9r01`Ycl!PiRHGi[Z3>[`hZ]^)92J-_J.RGB%@tig1=aAaH_Jd<Q(#d;h,pW2M\WK#4qfD4
%VAK=<Zr4"8'o7qdVM(m56fmflBqZ[Ob]re4r,CK$6Il'W-\Gf`[<FI>$,7AJmJUI0Th:TImr(bq&Db%F:3JBnPA`_\W9NiQ.2j[Q
%Q#+iJ!:PuSX@@p8$_pKp:u69n*=B"hCQ"tn:mX/po#I7._&5`MYlo.Q=!V=ck,&uf#m<Eo5_W+N"Of/ZUF[b8?U?8@k$;\-i+d=P
%K%=F\:=o."kL3FrHjfTPTVfB)`pX"^3Gh!Z1.QAi0cn+h(#_0/bOjeL$6d6Dk<Zkt'B@aG!V,aqZU<AV/A_D"q&p)BRjMmS*X6=D
%!44m_*e\nH(!LV%/)_H10lN+6`HhNr&jNE1]"C7bK#o6J3B%V/;hNDQRj*_fS'9(e6U$EQ?VU5sGp2/nqE`@=-CX*9qH04Q]tBHS
%KVCZ+.)^3H_jX0ZI\''C4mqRl[COp&O0ntA#`Bu/dE:!kJL&\'\_aWM`a#]</\Dqmm]_JK<O#_iORa/\42$TRn\(!a.&bLDj98]5
%F=;BSL^nPGo_,5!5jBfaAYq6R&\j:C@[3[%<t7RlQj$6]VkGsY?Lo]9bB_Uliss3W?8t8P'Xq4N,jl;iN(5g1k=5cB]@&#\-CX)J
%+0NVr2eqap?A;$9;cTDW3(re+(7\2pX)-ZiZ^<7$?b45Q1-3okN-]j+9u]8B@[VZpmObrV52U(\=(Q0WD#<WX?b%Y*3Q:g[C!aK0
%c81/?"k4r!#34L1["keidB+e+i7O!Gq7T^1SA:NqT#\K,lL(tok))"62s2<<"t.m[\H092gUDr>&rF$P*7/Ss6cXK%]Apo1B4=hd
%L`X?;p/&=B6ZI#FW9\.)b0&Y(O,d*:=(C)+p"rPN!;'0mZY;N].NG`QH.jN;SQUJ>%sd5GKY3'86CR.^%Uo<o?i"dh;bOfF4an5e
%Q7=#p]I96tl.7s$B#BG'):N-J[0FRZ\`Y)Ak7H[Fb8StqqX9-i?3q@hm%,a'9He6Zff$^#a^()#,7<c9nUC*m%EYDWN7hq/*#Mho
%@n(N\9$PbG;qTKg0DenmIt,CPrcGF1V\rr_JG-]l##S@hh0):E'LcGuL+"prqjoQC7sZjZp3@q7N)L5DG:<pe#PUM(jh=^4>Do*A
%oE4ZiJgm8QaibUjff4Aakq?57A4q\oUa_[LFjjnc<O2Le$1Ikt2*j@50otqb3.5f2ceWDERIp@rOOl(o*b0O.f&!K@8&AfC!MW^o
%3IPCIAfiY`f^&kaMGS`l<7VZQJR_)S[f]T9]A3b[EKR=U/ip@:RXD/:i$J%`<;F+]rE8g][94j*b=Xt!8cP6M3n6EPeGa+_@H9uD
%dfb89CmCHO!h%B>p+Ypi(DtF/5lc%sDtG^d3Xl)ln>[&k`OXWQkY9#Pia=D`]lu(=0AnG-#[;a3%9a:JCtCCm\j>(K4\a\4p`f15
%\jDm(^>K85Aan-F7SB'bc*8<6-%nth(s8<jShc\GWt1&)pFJtY?Z+V,7ReUjaU.BbY&Z_^^9r8P!C[/Ll7Al[p-;-#6[I;u6(`o6
%]HF=[Ih(!9p?O=Xl#StCfC$cZ-GNbqOC6=W_o6UQRoH_eQVk\<*7@6L3YM*`hHa0iL@Z%Vd#1bn64[FN9`_oT"+\7)2KKHFCVf>'
%j=UMDXFd!>K[FCtI%sY1>%H0+2<<RZUEqGt70r7kZG[i.Q)e*9%7V2[OG[VA[3Wb3H[h`R4^<sA/F'UXXlBS'PSEu!q_*Wi%rJY\
%^/mr:-OSU$0.foV2%2rZ=fP\..\DI.4m%#D_Fku-#lM#<'mG(slYWRZ2.7LBG&JPS!Y6"@U7=`e47:LJd>j6Fb8i>YepNa>,Ctie
%3>pShXuRh/(31YTcd.7#*&^K\]KMqu'NbG%!)*`uiC5h<A=2FrM]iX.?BEeHn.*CR?As2SgtCgF/BPm.3:i7;+a;iG7.rt%I>$MH
%1<Y#%ZMDt2GK5Z<6I+[sIdkX:#Fq#`bD;[q:'*+]4o4a-"^@6*F>jf=c_K>;G7=r_)^dWGT5+]b0EWM;GtO/Alm4n.!"+%K_u;Ho
%#JV;Om\lI_*\Sg&[_Ri#b(htu,+u"gc?=V>NuT"@3bJ>1$QkB"W40f1,&Q!S?(j!\if6tWjt\l<16h\&#S?,6K"?`.^hM<1j'H@"
%)>*VOG<Y%nPj]c<UTI2WOu8kn4,:Mf;L'>UhQWVPC&Z,.%3-F$@bam)2RX5m(!MOVb\bK)Ckk_?*t_Y$ikCoFYb`bWmjZ>X'@HWB
%mQC\;<d60R/!7C9fV'lQG:KrhH-i/+1dQF)Tgq?>&,`r^&SC>C`d<l?0B8b6%&$Ml8pZ`AcZ/2h@j1[73m&-nE&&kgb'c;ZUHO"W
%2GFEQ\-.5%*Sp![/_]3N[XM13;!eO@W,5l1U[9M]-s]96?;`(61pts"4:/PX`Ho6LSOEKGC!J#lJn:JWdf^WEaKSk$Y:h3'AV\tY
%'_V#+>1,O^nS]tH!*N7/Ij";rKB[N7>0G7/RP[`kBmq&Y=0'W<Ea3c*\9SF[#&++rFW*qhQH=E9M8A?=4PU9W0MS32TAo-:%cRR=
%K5!<>W/F\ta;JJT:B"&F&XLIr"OUXHbu#U:2Kh47-*U10[UHhq%2[)&_X'1J-G73iPNri2LD1\?CB5LKlurF`+Dm?HVE`-cr$8\9
%*n,iN^Vm(.c0qh'ps6&V#lQVrBAp?JFsugYmpF_bPL:2ZX>1`sZ=qc;"][r^iD*,pL!GJOZ*pTAjD>f/9,ub6BhJ`;[HNrl?/eRM
%eHXJ&Ur<DWVcY:)^ft%'%\O=M9G@A"l+,8Sro3SL;!APn)itQ]MQ!'2^sPH4Z8CLMHCROGCi2$^[[F&I/k,7(VMIP@Y<na(W4\(9
%+bOKJ30VnJ[&U@W0#_`!Bk/n,iP6qk`[T2;%Ar6,X>Ou\g*'AZZNYCmFWS9.D9(5U+5E;D5<nqe90Mj9ro)2TEFCQG2*K0Nq_X]&
%Rh1Ll*D?2HKT9YmfI+kt++PKN3r6@1[ODp'":gg%d1aX/KZ*(&F-A/]m09O0%=+=9Qh'Y/H1%qOrct*8V3%7s7*luH-Hq7Y2>*O"
%o'MHc2'kJ^_6j'b:*/!,9VousB0@OOF3AljUrH<@F,)r?)L2N&54)/h8Z"aZc.rJ-AAc>n@r74)1&JrFZ,4/"SLMp"eE:Q<.gFJ6
%X)-Fd=_SLj7L%>tSj>+kP//uAcKp!>>h3F>%CJ6j@R#nK[&E_^_)+7B(4a8mZ#PLJ!`Kc.W#^m)1_li_K5'1*)b`WRa+Cat;4ki+
%R_^hY_e.7LURgV]&pY??_kdR-VSj^\<O16@6X4o=Yu%(5HlDZN#1Hi8D$:p_I;&bl0URS?i'o!_#gGAGS)G7'SoLQjDA-97qCM'd
%%&TG]fa8Xr:tp5/C3?!^Rp]/(a1!,$oer2'm%2I)7kE9T;4ki+R_^iP4'P"g-IrCM%)t#rPVFS$#3pt8A*!];i,Y@B<-*)`7XZ3L
%9*Wk8%o^?SD&Q+>YnXkmh>Occs$7a'0ngaKbi,XJ:KX-8S]?+M!dVmqRV+M*1Vlei_),.Bim*n3Z.GY(`G%bt:(-DL3<7m0\)35A
%S<Nf,_)1lq+3)kdq/?+8o)(4pXO$BEED?n*FB\u)do4't'O0P[01LB47"<=WRA[[lKqf0]T6&d\\2i',MZ[`Y24FV9<SThm3UY@p
%pW!/GKB^-_NCb*HV_-)CkN?@=@r.qQ34_N3Z5kqPP0h#9Dm@$I7t&-=qG?`3?ndo.J+H7F)[Wjh%DpNF0MuWN\a$HqW):g0i$../
%FrZL`LK2#+4=+_&m`.C=Og;X:6hqP5N''OmAOD-/A/d8`eFsd7(AefT=+XVmblBA?`2>/$V5`r5+^[(%"=k"nl]Q32#QFFTCG[jd
%@6g;NmQ3`!KIr26;OstT6>h6-MdR'jD@ph`2QKrS[(Wn>9NhLq9qGCUKQE@Q<\a6&7fg(&F,8LVgom?`7"E]EcR?udl!e8_L*1Hq
%?<Xu6bk!_S3)lKUe*sYt=&'(**-j4Ti&(5L[!7G=$_SCG6">#D+AiDW'P5a1U;5.Y+`h%2iC%gT6cEl(UR>/^3Iu9C3a^i!XuJ[.
%lu(0N8Es'Ph6jCCb+JI/%_DH%f\k>+^g'>KT.-PAKXmQfm.2lE1,ql)Z)p,><7PW\rVbAXi7?qpZ5s`WPURIg&].l'cD14aL/]=d
%2=n`5Y9"/P$hi$$^--ka8U:<lH.6cc91X]10"i5hMu$#8Yd]D1[`;PmIs.DC!EtNi974-c&#FD/BVdt-MXn4@X'EK$dQ3h\)PO8h
%qi5^`P\4&Q1SLF`mN(K6qH;/3qZFeHJ=*i-I>IScOH:Y1$4-n];U`q"m1EG16)#LdXlQdXa8Bh,ORZ8WI9qqjrg2=e+@)340KgaH
%)ateTZ1EF5bgr'!ldjCJ,p]7met#=E3G_<k#Ztl`bF9kU,iI'R/=gnV&qQoS73JiZ`/eSkI.OC)T1$A2XSYoq6IaZi^As$2:C&YP
%P>:5YIGZBh+L?kI*L2p5-^L\dT1?RTll:')U^10p7Q^DYrOX=Ae`#g#lBl!Cl?aK=[Y@5tH.8>$L>\ad.PQu\6-Vb9V@?aOOG5$Z
%YXp30Rq=4KL@q4pV%1Rle@WU.h_LYUUI1eSb8+.+BM-cdV@#I'3:AGZUHfNL;M_&!cZL%VhA\>?-@3iRf]]ct6et8\N`[WM5*ER#
%&&aE>O@:_8]-t_CK'#2\c!`tB`VdPh\k4aoMg`H3#RFV"X!@k#9J563nuEF?AuWZ*?B'8TfP,YbQ\R[H9i*?[f?"4*2WbKL+_@Us
%Kha0Uo&Mb@H?7T\VB;P=a'QZPV:Ld_D7qp+CcRri`m1jJ&1E_XSZhXX2b/kO6GD7@.WsT,a5Yqsg9<-]U/GQ=-D'`Wk@!NU:?,s>
%P$ErlF4c/q&#I4F<C.S^2H_3'*`H-@0,[;s/S\HfSA3:Y5)ji'b^Usfl2Q.7pop9'%i"&6o%iV/'?7RjRsDT+'f]qWV9e8]c_Ii6
%PWmDo)k:Oul>2b_P[%pO0=04&(dLac<,r?21/g=X<0QnI'R-s_L\;m]N!0"D2;2AR-L.:BT_*NH@/=\dSO\ZL$=OtOTClV&!Hla2
%N'-8WPS5dm6b5Il%'r<D0l$VmT4qS<*e(:5^XjcMX.3OLN;@Cndo18ahKdWHHX$DD>f`CAM;ST_A)HVh157f]D4,\W-,+[HFoL6b
%s7;m)JH4*QB(#-PgesZ7ddm0SgO+=f]Y)^dnT3_-Uck5_H]H:m6/9G-3mMLO^Ge!?P,%72$@E]`>^lR,)W]dHij[,i.8?!-A==Uq
%<:&lMd1r_2/E+%'Q]QX_K"_*%.,Vq?J.qW\j)>1,6/"uMO$;E0B>Em;YWs;>fSNN6"<E/YUtXIV<;"5nZhhC#qouTRM=E;j?-3R-
%lmVJQg2?R\Ai!/CfP7$:>_7[Nna^.arKk]!r%7BK1nN22NWR1h0DTPq0W46q3juTIllXQN@@pEHfYF_.*<DKjYJZ@ha'WS(*ri(^
%]Yu]eJ3;t,#70e`')lirUoBXo+['jKQPo$KJTbn)$eBb4EeF@*_6C^!cp0aYTj-<S1gfM"Gt;+2Zd=m6pA_tMFOS%;`N/46Gg+X,
%BeWs8!*)VP$@B@cM:7[#XNIo#ISSm,Xla.+DG0P2S_(-ST_+P\E45rF5q6Gn>UQAWce[#nlX0G;*-LF!"S2Aj&W:BGJi-<TF++OU
%:dkb3_El(FG5mIYB.5#*\LcAeXEFSorseF,MWu<$*V#.:PR8]<5XRI9HfDBa>aG[4-9g#.D-Q#/`g#WU])")3e,%hfQY!X;^W93;
%AMs(Z,OZ#n'YR#_6*4Q8&'%"6.Aka5TM'.^_<HdAY/.;15uS[)D4*#Qr7L9hRk)u.eNV%.-N*X?##H@Yo0N;7@a:)H>[>2gm[U&5
%h'1nlXr,'T'Q'O?E%*(5dAtE9V1bF/?_'"E0YT,)A7)?pr7TF^ZKG2BAf[MhWaN.k2,:`rlFD'XDNl:j5^!iSr"*8"fc^7-?nj(5
%f2QST/s:;`%-`3N*:hmd;k9RUXQfQ7s*C\]8q"j,,a"C#*N)__a)qR!EXaPf0pBCR*idFD^3$b]L2e:p#5K5s;Y6VqekHrQ?uVuq
%4j\G58IoQ?Q,oG+r0l/=f\\QK]IR-/]S@aIC2)G#H)!$:CUP:8.%:ks0VWt+5@4(;dm'(m)Rh5dKO7_`gZ6$ndp&uOG^"!R3e[EV
%2i-6*hjQ,tYkn1!;;qXqj/]Wmer)M>E#;E3)4X+C+Xc][MWd_0WDQ.J88lIbEhB7k@PtU\btEM,X&&Y3Hu0Ub*IcLd/uL!V+.Tss
%]q!MjRX5P[kYJtajLJCd25.ZlR)XtlI>_`oe7N]HM&PE'5#<mL[e=1lTk"iq/pPCl5G+7[%(h]7S6QZbgG9'&&jXtnKer[>=b&5b
%i,G1;bLsKWbg@al6O0Y:h656!+mtC8+@WKnq20'<S#5u<:X*,TjXt<?FLQU1AZdh%:hFs^Ee4A83t5ig,h\/$6!UK.8^2`3j#6X&
%$Z\fol>-/5iEl`^E,,nI(F=3VUu?"On\3\d(+?l5>%[6NX@C7_et)A-e?/tICjMdJFt^B0/ch]c?=lmPC&ll=Yh$]g9\WMQfWl)&
%8q2-DT!@>U/:krJgOCF`\nj<F/W!-M-de@&r\%H6TBl.%P"J#(+7#^6S4<Hpc0aU5)!s$b=,H?TgF9l1nhri+QG:VKY\cAS2T>^H
%!$o>_G^H5,=+f?L2;AE:iT0TuAoD=Q2>V2Z<MlQmdqC)4^ACbc.20kbC)*=1I1eH&WQ,B#=tmdhV$jeh9`d_^S)llf7'jKN3cnT'
%Y8^]L?=_G@,Oal+e=4@qd;)linU+/Z/(*-LdPLM(KFlQe%5?FEm;jRtDu2Z^c!eKn:sS%1*O&:d/D18sAlJCHV2(hcJYNINc+UhS
%T4l/%T*N%iC?UJcjOU66J]/;unoZo*E5>8d"rPRi7OVQ&25p#/0CKYar\3Wn@<[QY:k8>&N26K_lcKo.<hA79]MH`c$_!d])@_si
%6#VaOV963cQ5"Z"r)h=G*bNCD03uE3RN;$FlrrPjU0"lXecPb'kfluf2%mje_@)gsnk;Mifa#)73]OemDL7bm-6:Upe`+Js2[9^Q
%]oG9f88\=M+.J4Mg7"76B&Soqf/:h\0S`3#8Yi+BFW0r8Y^s?RZKI!8"f+E=k\7?=_O8[*jiEnaD^]@b<_Kbi\.%+E#/*+`;qh!.
%O$iqo`$ke%(um9hYNNG)$2_jR%uPKX)#QcSH!f'NO_j!UG45hM)(,`S2K=naq2Mb7/X+Z>e&P?#`Q;].<EO_>WeId@CKtYRWXup!
%Z5AC-$h&3l!hbZp'u6r.dYD;_TC,!W!mHVJS5;]pPd#Sc/!&r%L*k0VfntWY)&rYr#I!C3@nla*MI/?@6SOBWb:8djD+sSE'*!et
%7cZLajP>M,TWjM\S#_pqlFo(eSAENb2Gd%(5dT9h=6bNr$ALGl$_@9U4N/jNSGp+,3mikQ69.:$FKS;Z;"q):1+:JIAZXY&0d+u&
%"X>u_DL<T.q%A&lQogiY;&#t0(<J6iA8e'@<^)<d"fBOqA!,9Oo6e`QM`fSgGr"4kKGp6N."kG\l-8ro=EX=B'HAfgS/AVL;SXVU
%D\H$?@P1&#!unB.Ka*Xbe3H%YY^qgP4:q_;)H/]VXoKs7"*E,>bX[7TEZ%!@G$tCJA>!&G$-r\6T.]B=L>GS0Gf./8G!alX/JRar
%`:d$r5eTTAPR);=2&3TPo,A6.Tcc/)%_LEY8a;2W-l6[4;.t$3"-O;A<RS9Ck8TY&fj&'OeCa!mYr$`.ZXAdiDU--[rd3gq!-4Z-
%GS_gb-X?J'XdNN=7_ZM%b:ShAcb#lqK'h0(`Y-N[(-]?Y)u7,U*H>J>7S_#qZ-Fq5n%TgEZR4*eJ4<nbW]ijto3@s"i!6hXZo6i7
%U/`->SMF(C^jBL,G(3`F_8!0g?rQ(0pqAf*#gmk0pn;=u0<hNPT;EZ),l9dMY%>Fq2ajsnqpj-,>)2hac%5k!*IZrCHHe'4;f.@m
%'Xt>;P@3X(Gge"h>-o-P4B^$%[NE=$/K>=J,[6S/Uttm"?q4P_)8mkYWZ.(i:"$hH'4#LVhA>qT=Y?)cU85JqVa.&3E%^$;(?[<I
%k]>IAYMG>QbA1Kp0iQLM?S"iH%A[V]5Zh+#akgYr;=Mt`)?oJ=;4]Y4(`s!2b4g@)Z%9ihOr``qKU;gIC^E2,Mg<cR!91O.LU'/@
%nOZL`>'VY@Sd2qjC8e^hBid(_k%jLLCM?_\,t4s;;NpLn\Vg:?=sog,2!B!DJ@q^[=M0J""GoYn]a@S>dU@N[67)^Bl9G>.*H5q9
%%B0?FW#'sVj.NkOh'FdsF9[FVZ\GYe8M!YH47X%iF/T`X#IA,Y.f/"IaLd)](Uq\#'G*k%WA;SOXfX?B_MjEJ/'-f_ReISW>WO&J
%Gk:<aGK5YWLJG:d*=NdgpK2Os7WJQIF;r`A`e7$hJoRah46-e>ER:2M#3su4;W'F-X@?0u%U8:F(A%JccT@N[6SN!,d)8ac%(Nec
%o^8rW9I))^F$!+sFVEjS[a%jK7[agLQamRg)INd=GGM`p)Y<Bq;3NKTBK+*W*^g_IX_!'8LgEBqKPr[(gU)RV`TB;Hh,0f.M)QNK
%(*?qmWS]J<<j9IWDGDUQBfEoS3CVXcN-Td"Q`2@p[:orPNrh*hG&!C_#OIuDPUrFgJ1sI+atiDq)UBT<10@]2,O,k_2aDUWpa_@B
%Fdc/\2L4G2h=T7hW;"=1[k"[KoRIqr$IEkm&(q)<U4Nc4Kt%DUQ\>#?.[/3P?m4_F&"piV>9bZ=4DX'#ZUAY1A$u]H=Ja37S>qDS
%`D[Z+QA[_p*OT3HLVK8:47G2F/V*cXTac9<Dq.3nEIP;Z+Q<pV5b8Sce_j=!10(p2^SIXZ'l"-Ii[Tu?oDn^3U%g%@L2-1#F.d;o
%_"!Ro*"ig+4?S[>+?LjR>`>lZJHiNjcoC@O_&C=cN<_'@laoX]:,1#bW8H%"al;hI4ig\e$?JtV1X9h5C4<Zd7&(e3-FsJ_Q\.e$
%C;**abP\2R*.VCh57GdW'2tC<V-k3KZ@q\&qXT/h)sa86Qi\:L8CHe$1P.fKVb-!q#n."F\W"norcUn_7]J?C5lS<6&44*^/2)'N
%k-ST_%`n;D6(ZMN=/3cfL3-)*PpiG3rec?Lh&<2MnE5IL/?;;1'5lX^+<\"3kW:Dc[.C6BfDX;Hd`*I=!6dqmM%etqF'@)Ye9M/9
%S/i-]80.Qrn/[Yp.-jsiXZhd@o^M[N6lPDMA-3$rgf3=[Y4>1$BLI37MC'#q@X.Ed=TPh\SE"A6B5t[9Ok'tW,IX3R%(28c5RLYe
%bn,JE*>+[]K/0.'I2Fk>JP:"?H-E0`^F#'I5[%YrWeY\Ng@ibuqZs(!",<V/&tBCRO%Flho*'aVNLoM.W6aIP;'HJ-&^,GD$(+&*
%4lA%#7adu\0'h(IYTK1(d^ObbpXE]l4-04hmM@1t^]<"/X.n]h'MG61DZ+gW+TT6`15J,.i9O'D\ZOQA!V0,PZ(=I6)Y\"[BkUgE
%*LC5Ke&QCa57*S<aaceD7cL2o\mXUfYpU2$[-,*.K5_b#=k#)sUsZZ^=UV@V;s8P_q)j?hMH7.9[YOJT^=gHH_c/fWG0j#p4q7?G
%M):_LBElKtUkUuHO$W!"E<b5_0!;_N@2G1SF>V_<@at5[Ctj6bB5t[7O[f@Ps2'Di((Woq]>g6UVI>M^Te+-"VW2PHAmL@ADqptX
%-bdMQVX]RY#5eB6:E<YH4Ro4A+s!K)=^??<q>?Ra,D.,]*Ru%9ibU%F^,p2K&iO2Rd")o7bWm4K>6kj,Jt)I:(En5*7*QhGiK<u7
%o8P+[jZSPP*@dpi(>b?a9b,>6-?hXEa]P`U9_V^sZ3AduoM[j]qYfU;eVdlf2J5^+HBHR"9g#@;SL+f&iAGV,g0o%QCHNiPiB0h^
%p1_mCUX$u@<8po6@?Y!A&2m8"4qMO?CFBRn%06d9S29MC:,[H%=/4UnpU!WrLYC90*XoZ>_tjYj9XMgh=A*d/%.@Q*i@d0dE.9b/
%h-obB+c@QGpZen:!?l&&_=8;>+l3:S&eZ#sW(gIA("!0jodi=4%=36N1`[9C@oN'n/bm*3FL!59mm+2oA%!5P!&&d/Oq4i7A)80t
%m43?Lp8.$bmRXQbo9dckaOhX4/u;69"ha2fgaNEtld@oNf4+<_bC2RDg5)5lTc*KBq$Wo#!du?)('5C$9VLhtcQR^W`Psh5l-n4i
%'g&lCN0F3:21j\L!J/cN&h$9RCcb[*fU$i_q_F#>>tr5;6(^=`03o<F&`<fiiG=Tl`o4_C]V0A=il_DF)G\;VRB"=h[+cPh4QtTu
%n&HoYhD?/akV8UiW7^a*Ste.]f-!Ugok+6h'EFT7cAPP<O*b%>[m"q_p?01b3fD0Oqc?EEK9Gc_I!t_]>Q0LV:Ef]3@aLU^/eIOi
%X8-MZXfLNnAFD<Ecp*.;U,t49aKT`S?a['!eYm]4%>fqm9uL7DFj%9fZA(JUF#8*\/MN7tB"@W@i[%X?P]dbQ)YMssmp<DeJZ-&j
%enNbg?B"^\X\+%C4C7-*3-,uN_WF4-^7)WX>`t$^!-8NU6kVqWOVo]hI.9dW8Rpb8N"#[sd:X53kbb_8J%04?<`*(\C.Ml16O0c$
%eUU3>b5fLX,9C$qB!Z.a>65'bJ^E;7q<Sslg-nm1+j_&(k]@>-J*>oB0E_&E[ukHsUc>4odDVH4g@M7e`sj+:+r9u6c.Uqii$E]L
%FF=3U4KqFll>0mkEURiU4/_\+pVtDsY0Y,?@H<?`WHsj1I#?:)PIO/Q0MOB8JKm![;4naM:B"tSgV[p8V^fs:=W&Q!SfZM"`=Zj?
%mTUuHDF))C$;g:=V]kMh3OTS%[o89,G*C)\h^?kL7$/5t]KEE*o%Z"P-)*R6H>hG#[9,YBrnII_J+l2*kOlUio=t9chu<'0O+7)*
%J(d-^a8c"JhuEK/rqO,*onOXhpoAo>rP/C#rPp"/pTOUS?hs5An,N'un,N1C^]32@qr<`%r;6Nl\,V4Zn43'\rp_*1q7lj*?i@nB
%#B(^gU&~>
%AI9_PrivateDataEnd
