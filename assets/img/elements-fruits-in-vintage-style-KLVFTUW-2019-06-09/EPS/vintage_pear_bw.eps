%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_pear_bw.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/11/2016
%%BoundingBox: 0 0 443 646
%%HiResBoundingBox: 0 0 442.6924 645.4776
%%CropBox: 0 0 442.6924 645.4776
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_grusha_bw</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-11T23:17:54+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-11T23:17:55+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-11T23:17:55+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>176</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAACwAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FWDa/+b3lm&#xA;xvG0nRxJ5i8wE8I9L04GQ8q0PqTAGNAv7W5I8MgZhkIFjuoXX5la3NGut6zY+U9JPP1rLSbqOTU+&#xA;S/svNIRGKU3MTVr+yew3Pky2CV6h+XPkMRG41DTbvWJ2Px6rqdzqTysKftOq2lt9o/79wcITxFLY&#xA;/I/5XSAyJ5XFzbRHlJcW15eSg06qfqcupxKPd5U+YwcI7l4imdlonl21ga88oeZNT8qmIikc8y3+&#xA;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&#xA;qhVACgUAGwAGWMHYq7FXYq7FX//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:D882B6B5C5E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:D982B6B5C5E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:f87ecb94-2f4c-de49-ac87-4adc864c3c2b</stRef:instanceID>
            <stRef:documentID>xmp.did:4332F49441206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -645.478 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 645.478 li
442.692 645.478 li
442.692 0 li
cp
clp
[1 0 0 1 0 0 ]ct
192.492 644.605 mo
142.945 649.609 107.82 632.547 77.2578 607.305 cv
20.7266 560.652 -.109375 505.621 8.60156 441.293 cv
17.4922 375.617 53.0625 334.402 70.1484 314.59 cv
72.0078 312.445 73.6484 310.535 75.0313 308.871 cv
75.2656 308.578 99.2891 279.105 118.766 230.063 cv
138.805 179.578 166.133 127.98 216.875 127.418 cv
220.078 126.383 231.703 122.93 244.883 122.93 cv
257.438 122.93 267.75 126.023 275.531 132.141 cv
283.172 133.641 313.25 143.496 338.93 207.023 cv
344.719 221.344 349.641 234.012 354.141 245.621 cv
371.273 289.766 382.594 318.934 414.141 365.668 cv
453.336 423.738 452.047 506.711 411.07 562.961 cv
363.852 627.777 314.961 640.926 289.344 642.379 cv
249.82 644.605 241.859 638.301 227.555 639.59 cv
218.719 640.387 199.391 644.605 192.492 644.605 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.27451 .207843 .145098 rgb
f
78.9219 312.082 mo
78.9219 312.082 103.414 282.395 123.453 231.922 cv
143.492 181.453 172.078 133.953 219.57 133.953 cv
219.57 133.953 253.344 119.848 273.383 136.922 cv
273.383 136.922 306.047 139.148 334.25 208.918 cv
362.461 278.684 369.875 309.117 409.953 368.496 cv
450.031 427.871 439.648 508.586 401.789 560.547 cv
363.938 612.508 317.555 632.172 282.664 632.91 cv
247.781 633.66 235.531 634.949 209.555 636.438 cv
183.57 637.914 128.656 638.652 81.8906 600.063 cv
35.1328 561.473 6.375 511.563 16.0156 440.305 cv
25.6719 369.047 64.8125 329.156 78.9219 312.082 cv
cp
1 1 1 rgb
f
237.398 135.434 mo
237.398 135.434 244.078 131.719 257.438 133.207 cv
270.797 134.695 268.195 141 268.195 141 cv
285.641 141 289.344 150.652 289.344 150.652 cv
286.383 150.277 281.18 150.652 281.18 150.652 cv
288.234 150.652 291.195 153.621 291.195 153.621 cv
283.031 151.02 275.984 152.133 269.68 152.508 cv
263.367 152.879 260.773 153.992 246.305 152.879 cv
231.828 151.766 231.078 150.281 231.078 150.281 cv
222.688 149.609 215.273 152.355 209.68 155.566 cv
202.906 159.453 198.797 164.012 198.797 164.012 cv
198.797 164.012 201.758 158.445 207.328 155.105 cv
207.328 155.105 205.102 152.879 196.195 155.105 cv
196.195 155.105 201.758 151.766 207.703 152.879 cv
205.477 151.766 li
205.477 151.766 206.586 150.652 208.438 151.395 cv
210.305 152.133 208.078 153.246 210.305 152.133 cv
212.531 151.02 209.555 147.68 209.555 147.68 cv
209.555 147.68 209.93 146.941 212.906 147.68 cv
215.867 148.426 214.383 146.199 217.719 146.941 cv
221.063 147.68 221.063 146.199 223.289 146.199 cv
225.516 146.199 226.625 144.34 226.625 144.34 cv
227.742 141 li
227.742 141 229.227 138.406 230.719 139.887 cv
232.195 141.375 231.453 141 232.57 139.148 cv
233.68 137.285 234.797 136.547 237.398 135.434 cv
cp
.27451 .207843 .145098 rgb
f
168.734 626.793 mo
86.3516 622.34 36.75 545.605 28.9531 484.363 cv
23.0859 438.234 37.6875 389.715 61.1094 357.359 cv
84.4922 325.074 114.688 293.871 139.039 229.695 cv
166.5 157.332 186.914 153.621 186.914 153.621 cv
186.914 153.621 162.609 175.414 147.211 220.789 cv
133.477 261.246 107.789 307.43 75.5859 351.234 cv
47.75 389.094 23.9375 460.594 51.0938 522.133 cv
73.3594 572.605 84.4922 582.25 117.891 604.527 cv
151.289 626.793 168.734 626.793 168.734 626.793 cv
cp
f
355.031 282.77 mo
355.031 282.77 366.164 317.281 391.766 357.359 cv
417.375 397.441 437.234 453.418 417.375 514.715 cv
387.688 606.379 309.008 620.113 280.438 621.227 cv
280.438 621.227 371.18 613.984 400.672 494.863 cv
410.773 454.098 407.086 400.742 387.266 361.828 cv
360.594 309.488 355.031 282.77 355.031 282.77 cv
cp
f
230.344 237.492 mo
230.344 237.492 230.328 240.832 228.477 239.719 cv
226.625 238.605 229.227 235.637 230.344 237.492 cv
cp
f
225.141 252.711 mo
225.141 252.711 225.148 255.68 223.289 254.938 cv
221.438 254.191 222.539 251.227 225.141 252.711 cv
cp
f
244.813 206.691 mo
244.813 206.691 244.813 208.18 243.703 208.547 cv
242.586 208.918 241.852 205.578 244.813 206.691 cv
cp
f
232.195 220.051 mo
232.195 220.051 235.172 220.801 231.078 221.539 cv
227 222.277 229.969 218.938 232.195 220.051 cv
cp
f
254.836 210.031 mo
254.836 210.031 256.688 212.258 254.086 212.258 cv
251.492 212.258 253.344 207.805 254.836 210.031 cv
cp
f
244.063 222.652 mo
244.063 222.652 246.289 225.992 244.063 225.992 cv
241.836 225.992 241.461 222.652 244.063 222.652 cv
cp
f
244.063 238.238 mo
244.063 238.238 243.703 240.832 242.211 239.719 cv
240.727 238.605 242.578 236.387 244.063 238.238 cv
cp
f
252.969 189.992 mo
252.969 189.992 254.461 191.844 252.609 192.219 cv
250.742 192.594 247.406 188.879 252.969 189.992 cv
cp
f
247.781 252.336 mo
247.781 252.336 250.742 254.938 246.289 253.824 cv
241.836 252.711 247.781 252.336 247.781 252.336 cv
cp
f
233.305 263.473 mo
233.305 263.473 235.172 266.07 232.195 266.07 cv
229.227 266.07 230.344 261.984 233.305 263.473 cv
cp
f
244.438 261.984 mo
244.438 261.984 247.781 264.957 244.813 264.957 cv
241.836 264.957 243.328 261.617 244.438 261.984 cv
cp
f
255.945 169.582 mo
255.945 169.582 256.688 172.18 254.836 172.18 cv
252.969 172.18 252.969 168.84 255.945 169.582 cv
cp
f
243.703 166.98 mo
243.703 166.98 244.438 169.207 242.211 168.84 cv
239.984 168.469 242.211 164.754 243.703 166.98 cv
cp
f
240.359 187.027 mo
240.359 187.027 241.461 189.254 239.609 189.621 cv
237.758 189.992 238.133 185.168 240.359 187.027 cv
cp
f
237.57 279.984 mo
237.57 279.984 240.914 282.77 236.461 283.324 cv
232.008 283.883 237.57 278.316 237.57 279.984 cv
cp
f
252.609 269.965 mo
252.609 269.965 254.836 273.863 252.609 273.863 cv
250.383 273.863 250.383 268.852 252.609 269.965 cv
cp
f
272.086 208.172 mo
272.086 208.172 275.422 212.07 270.969 212.07 cv
266.516 212.07 272.086 208.172 272.086 208.172 cv
cp
f
269.859 194.258 mo
269.859 194.258 271.531 198.711 268.742 198.711 cv
265.969 198.711 267.633 191.473 269.859 194.258 cv
cp
f
167.438 636.813 mo
167.438 636.813 194.531 637.188 208.625 631.246 cv
214.039 628.961 220.203 626.184 224.211 625.68 cv
230.633 624.859 234.211 627.438 240.359 629.02 cv
266.516 635.699 294.914 632.359 294.914 632.359 cv
294.914 632.359 210.477 644.969 167.438 636.813 cv
cp
f
231.078 150.281 mo
231.078 150.281 248.141 123.559 262.992 73.8281 cv
277.836 24.1016 274.125 15.9375 274.125 9.25391 cv
274.125 2.57422 277.836 1.83594 282.289 1.83594 cv
286.742 1.83594 287.484 2.57422 294.164 4.80078 cv
300.852 7.02734 301.594 12.2227 297.875 24.8438 cv
294.164 37.4648 290.461 47.1094 280.805 79.7695 cv
271.156 112.426 253.344 151.02 253.344 151.02 cv
253.344 151.02 240.734 153.992 231.078 150.281 cv
cp
f
237.023 147.68 mo
237.023 147.68 240.359 142.859 250.758 118.734 cv
261.141 94.6133 271.156 54.5273 274.5 40.4297 cv
277.836 26.3281 277.102 16.6758 278.211 13.7109 cv
279.328 10.7422 281.18 13.3438 280.813 16.3086 cv
280.438 19.2773 280.438 27.8086 279.328 31.1484 cv
278.211 34.4961 271.156 62.332 266.344 79.7695 cv
261.516 97.207 254.836 114.277 249.641 127.266 cv
244.438 140.262 237.023 147.68 237.023 147.68 cv
cp
1 1 1 rgb
f
gsave
163.664 631.246 mo
163.664 631.246 79.7344 593.031 52.8828 533.828 cv
31.1719 485.957 36.2344 434.426 50.6563 398 cv
61.2266 371.273 91.0078 333.926 114.117 290.004 cv
136.383 247.695 140.281 233.223 149.188 209.285 cv
158.094 185.352 179.25 159.188 179.25 159.188 cv
179.25 159.188 163.102 203.719 155.305 232.664 cv
147.516 261.609 128.516 322.25 99.6406 379.066 cv
64.5703 448.098 85.1719 561.098 163.664 631.246 cv
cp
clp
83.3203 585.965 mo
83.3203 585.965 113.742 598.586 157.531 594.133 cv
157.531 594.133 115.242 603.777 83.3203 585.965 cv
cp
.27451 .207843 .145098 rgb
f
70.6953 576.32 mo
70.6953 576.32 101.133 592.656 154.57 586.715 cv
154.57 586.715 109.664 598.961 70.6953 576.32 cv
cp
f
67.5078 570.438 mo
67.5078 570.438 105.008 584.066 145.977 579.238 cv
145.977 579.238 110.789 590.16 67.5078 570.438 cv
cp
f
96.6797 596.359 mo
96.6797 596.359 123.023 606.379 154.195 600.813 cv
154.195 600.813 122.281 610.457 96.6797 596.359 cv
cp
f
100.016 602.664 mo
100.016 602.664 126.359 612.684 157.531 607.117 cv
157.531 607.117 125.625 616.773 100.016 602.664 cv
cp
f
112.625 608.98 mo
112.625 608.98 133.367 618.027 157.906 613 cv
157.906 613 132.781 621.719 112.625 608.98 cv
cp
f
59.1875 562.961 mo
59.1875 562.961 95.9375 575.582 137.492 572.242 cv
137.492 572.242 103.734 581.512 59.1875 562.961 cv
cp
f
53.0391 554.477 mo
53.0391 554.477 90 568.527 131.563 565.188 cv
131.563 565.188 95.9375 575.207 53.0391 554.477 cv
cp
f
47.2266 545.629 mo
47.2266 545.629 83.9375 560.324 125.555 557.723 cv
125.555 557.723 89.75 567.109 47.2266 545.629 cv
cp
f
43.5234 537.836 mo
43.5234 537.836 80.2266 552.531 121.836 549.93 cv
121.836 549.93 86.0469 559.316 43.5234 537.836 cv
cp
f
37.5781 528.555 mo
37.5781 528.555 74.2969 543.262 115.906 540.648 cv
115.906 540.648 80.1094 550.035 37.5781 528.555 cv
cp
f
31.6484 519.648 mo
31.6484 519.648 68.3516 534.355 109.969 531.742 cv
109.969 531.742 74.1797 541.129 31.6484 519.648 cv
cp
f
27.1953 510.367 mo
27.1953 510.367 63.8984 525.074 105.516 522.461 cv
105.516 522.461 69.7266 531.848 27.1953 510.367 cv
cp
f
118.195 614.172 mo
118.195 614.172 138.938 623.219 163.477 618.191 cv
163.477 618.191 138.352 626.91 118.195 614.172 cv
cp
f
129.328 617.887 mo
129.328 617.887 150.07 626.934 174.609 621.906 cv
174.609 621.906 149.484 630.625 129.328 617.887 cv
cp
f
24.2188 501.461 mo
24.2188 501.461 60.9219 516.168 102.547 513.555 cv
102.547 513.555 66.75 522.941 24.2188 501.461 cv
cp
f
23.1094 493.105 mo
23.1094 493.105 59.8125 507.813 101.438 505.199 cv
101.438 505.199 65.6328 514.598 23.1094 493.105 cv
cp
f
20.8828 484.762 mo
20.8828 484.762 57.5859 499.469 99.2109 496.855 cv
99.2109 496.855 63.4063 506.242 20.8828 484.762 cv
cp
f
19.7656 476.406 mo
19.7656 476.406 56.4688 491.113 98.0938 488.5 cv
98.0938 488.5 62.2969 497.898 19.7656 476.406 cv
cp
f
19.2188 467.504 mo
19.2188 467.504 55.9219 482.207 97.5313 479.594 cv
97.5313 479.594 61.7422 488.992 19.2188 467.504 cv
cp
f
19.2188 459.711 mo
19.2188 459.711 55.9219 474.41 97.5313 471.805 cv
97.5313 471.805 61.7422 481.199 19.2188 459.711 cv
cp
f
19.2188 450.246 mo
19.2188 450.246 55.9219 464.949 97.5313 462.34 cv
97.5313 462.34 61.7422 471.727 19.2188 450.246 cv
cp
f
20.8828 441.34 mo
20.8828 441.34 57.5859 456.043 99.2109 453.434 cv
99.2109 453.434 63.4063 462.82 20.8828 441.34 cv
cp
f
23.6719 432.434 mo
23.6719 432.434 60.375 447.137 101.984 444.527 cv
101.984 444.527 66.1953 453.914 23.6719 432.434 cv
cp
f
27.0078 422.973 mo
27.0078 422.973 63.7109 437.672 105.328 435.066 cv
105.328 435.066 69.5391 444.453 27.0078 422.973 cv
cp
f
30.3516 414.059 mo
30.3516 414.059 67.0547 428.766 108.664 426.16 cv
108.664 426.16 72.875 435.547 30.3516 414.059 cv
cp
f
25.3359 400.465 mo
25.3359 400.465 61.0391 417.469 102.734 417.5 cv
102.734 417.5 66.4219 424.605 25.3359 400.465 cv
cp
f
28.4766 392.941 mo
28.4766 392.941 64.5313 409.172 106.219 408.316 cv
106.219 408.316 70.0547 416.191 28.4766 392.941 cv
cp
f
27.2656 380.609 mo
27.2656 380.609 62.5391 398.473 104.227 399.512 cv
104.227 399.512 67.7422 405.734 27.2656 380.609 cv
cp
f
31.8984 371.094 mo
31.8984 371.094 66.8906 389.516 108.547 391.219 cv
108.547 391.219 71.9766 396.855 31.8984 371.094 cv
cp
f
31.8984 361.629 mo
31.8984 361.629 66.8906 380.051 108.547 381.758 cv
108.547 381.758 71.9766 387.395 31.8984 361.629 cv
cp
f
38.3984 354.445 mo
38.3984 354.445 73.6719 372.305 115.359 373.348 cv
115.359 373.348 78.875 379.57 38.3984 354.445 cv
cp
f
43.0313 344.93 mo
43.0313 344.93 78.0234 363.348 119.68 365.059 cv
119.68 365.059 83.1094 370.695 43.0313 344.93 cv
cp
f
43.0313 335.469 mo
43.0313 335.469 78.0234 353.883 119.68 355.594 cv
119.68 355.594 83.1094 361.23 43.0313 335.469 cv
cp
f
45.2578 326.836 mo
45.2578 326.836 80.25 345.258 121.906 346.969 cv
121.906 346.969 85.3359 352.602 45.2578 326.836 cv
cp
f
45.2578 318.398 mo
45.2578 318.398 80.25 336.82 121.906 338.531 cv
121.906 338.531 85.3359 344.168 45.2578 318.398 cv
cp
f
53.6094 309.961 mo
53.6094 309.961 88.6016 328.379 130.266 330.09 cv
130.266 330.09 93.6875 335.727 53.6094 309.961 cv
cp
f
53.6094 301.523 mo
53.6094 301.523 88.6016 319.934 130.266 321.652 cv
130.266 321.652 93.6875 327.289 53.6094 301.523 cv
cp
f
60.8438 293.082 mo
60.8438 293.082 95.8359 311.504 137.492 313.207 cv
137.492 313.207 100.922 318.844 60.8438 293.082 cv
cp
f
60.8438 284.645 mo
60.8438 284.645 95.8359 303.066 137.492 304.77 cv
137.492 304.77 100.922 310.406 60.8438 284.645 cv
cp
f
64.7422 276.211 mo
64.7422 276.211 99.7344 294.629 141.398 296.332 cv
141.398 296.332 104.82 301.969 64.7422 276.211 cv
cp
f
64.7422 267.773 mo
64.7422 267.773 99.7344 286.184 141.398 287.895 cv
141.398 287.895 104.82 293.531 64.7422 267.773 cv
cp
f
70.8594 259.332 mo
70.8594 259.332 105.852 277.746 147.516 279.457 cv
147.516 279.457 110.938 285.094 70.8594 259.332 cv
cp
f
70.8594 250.895 mo
70.8594 250.895 105.852 269.309 147.516 271.02 cv
147.516 271.02 110.938 276.656 70.8594 250.895 cv
cp
f
76.9922 242.449 mo
76.9922 242.449 111.984 260.871 153.641 262.578 cv
153.641 262.578 117.07 268.215 76.9922 242.449 cv
cp
f
76.9922 234.012 mo
76.9922 234.012 111.984 252.434 153.641 254.141 cv
153.641 254.141 117.07 259.777 76.9922 234.012 cv
cp
f
81.9922 225.574 mo
81.9922 225.574 116.984 243.996 158.648 245.707 cv
158.648 245.707 122.07 251.34 81.9922 225.574 cv
cp
f
81.9922 217.137 mo
81.9922 217.137 116.984 235.555 158.648 237.266 cv
158.648 237.266 122.07 242.902 81.9922 217.137 cv
cp
f
86.4453 208.699 mo
86.4453 208.699 121.438 227.117 163.102 228.828 cv
163.102 228.828 126.523 234.465 86.4453 208.699 cv
cp
f
86.4453 200.258 mo
86.4453 200.258 121.438 218.68 163.102 220.383 cv
163.102 220.383 126.523 226.02 86.4453 200.258 cv
cp
f
91.4609 191.82 mo
91.4609 191.82 126.453 210.242 168.117 211.945 cv
168.117 211.945 131.539 217.582 91.4609 191.82 cv
cp
f
91.4609 183.383 mo
91.4609 183.383 126.453 201.805 168.117 203.508 cv
168.117 203.508 131.539 209.145 91.4609 183.383 cv
cp
f
97.0313 174.949 mo
97.0313 174.949 132.023 193.359 173.68 195.07 cv
173.68 195.07 137.109 200.707 97.0313 174.949 cv
cp
f
97.0313 166.508 mo
97.0313 166.508 132.023 184.922 173.68 186.633 cv
173.68 186.633 137.109 192.27 97.0313 166.508 cv
cp
f
102.031 158.07 mo
102.031 158.07 137.023 176.492 178.688 178.195 cv
178.688 178.195 142.109 183.832 102.031 158.07 cv
cp
f
102.031 149.625 mo
102.031 149.625 137.023 168.047 178.688 169.754 cv
178.688 169.754 142.109 175.391 102.031 149.625 cv
cp
f
108.164 141.188 mo
108.164 141.188 143.156 159.609 184.813 161.316 cv
184.813 161.316 148.242 166.953 108.164 141.188 cv
cp
f
grestore
gsave
229.594 634.211 mo
226.789 635.453 340.93 629.758 380.273 556.281 cv
409.766 501.168 415.898 414.516 395.109 372.207 cv
374.328 329.902 356.516 294.27 340.93 246.77 cv
325.344 199.273 309.008 162.16 291.195 156.223 cv
273.383 150.281 263.156 160.309 266.703 191.109 cv
271.156 229.707 294.195 260.855 314.953 308.379 cv
349.461 387.422 372.844 571.117 229.594 634.211 cv
cp
clp
413.094 490.105 mo
413.094 490.105 383.047 503.207 325.945 497.535 cv
325.945 497.535 378.383 510.684 413.094 490.105 cv
cp
.27451 .207843 .145098 rgb
f
414.945 482.207 mo
414.945 482.207 384.914 495.332 327.797 489.648 cv
327.797 489.648 380.25 502.785 414.945 482.207 cv
cp
f
416.203 473.234 mo
416.203 473.234 386.164 486.344 329.047 480.672 cv
329.047 480.672 381.492 493.809 416.203 473.234 cv
cp
f
412.945 499.023 mo
412.945 499.023 382.906 512.137 325.805 506.465 cv
325.805 506.465 378.258 519.602 412.945 499.023 cv
cp
f
410.633 509.172 mo
410.633 509.172 380.602 522.273 323.492 516.602 cv
323.492 516.602 375.938 529.75 410.633 509.172 cv
cp
f
408.852 518.723 mo
408.852 518.723 378.82 531.836 321.711 526.152 cv
321.711 526.152 374.156 539.301 408.852 518.723 cv
cp
f
404.25 527.301 mo
404.25 527.301 374.211 540.414 317.094 534.73 cv
317.094 534.73 369.547 547.879 404.25 527.301 cv
cp
f
401.375 537.461 mo
401.375 537.461 371.344 550.574 314.234 544.902 cv
314.234 544.902 366.68 558.039 401.375 537.461 cv
cp
f
395.117 546.719 mo
395.117 546.719 365.742 560.512 309.617 554.008 cv
309.617 554.008 361.219 568.457 395.117 546.719 cv
cp
f
390.586 556.879 mo
390.586 556.879 361.102 569.371 305.117 564.18 cv
305.117 564.18 356.508 576.438 390.586 556.879 cv
cp
f
384.336 566.125 mo
384.336 566.125 354.305 579.238 297.188 573.566 cv
297.188 573.566 349.641 586.703 384.336 566.125 cv
cp
f
367.93 584.734 mo
367.93 584.734 337.898 597.848 280.789 592.164 cv
280.789 592.164 333.234 605.313 367.93 584.734 cv
cp
f
378.078 575.336 mo
378.078 575.336 348.047 588.449 290.938 582.777 cv
290.938 582.777 343.383 595.914 378.078 575.336 cv
cp
f
360.516 592.879 mo
360.516 592.879 330.477 605.992 273.375 600.32 cv
273.375 600.32 325.813 613.457 360.516 592.879 cv
cp
f
346.32 599.91 mo
346.32 599.91 317.773 614.02 263.094 606.988 cv
263.094 606.988 313.414 622.211 346.32 599.91 cv
cp
f
331.781 609.133 mo
331.781 609.133 305.961 620.641 256.805 615.52 cv
256.805 615.52 301.953 627.215 331.781 609.133 cv
cp
f
416.625 463.84 mo
416.625 463.84 386.578 476.957 329.469 471.281 cv
329.469 471.281 381.914 484.422 416.625 463.84 cv
cp
f
417.867 454.863 mo
417.867 454.863 387.828 467.977 330.727 462.301 cv
330.727 462.301 383.164 475.441 417.867 454.863 cv
cp
f
416.625 444.914 mo
416.625 444.914 386.578 458.027 329.469 452.355 cv
329.469 452.355 381.914 465.492 416.625 444.914 cv
cp
f
417.867 435.938 mo
417.867 435.938 387.828 449.051 330.727 443.375 cv
330.727 443.375 383.164 456.516 417.867 435.938 cv
cp
f
419.398 427.758 mo
419.398 427.758 389.367 440.871 332.25 435.199 cv
332.25 435.199 384.703 448.336 419.398 427.758 cv
cp
f
420.656 419.578 mo
420.656 419.578 390.617 432.691 333.5 427.02 cv
333.5 427.02 385.945 440.164 420.656 419.578 cv
cp
f
419.539 411.398 mo
419.539 411.398 389.508 424.512 332.391 418.84 cv
332.391 418.84 384.828 431.977 419.539 411.398 cv
cp
f
420.656 403.227 mo
420.656 403.227 390.617 416.332 333.5 410.66 cv
333.5 410.66 385.945 423.805 420.656 403.227 cv
cp
f
418.43 395.047 mo
418.43 395.047 388.391 408.152 331.273 402.48 cv
331.273 402.48 383.719 415.625 418.43 395.047 cv
cp
f
416.203 386.867 mo
416.203 386.867 386.164 399.973 329.047 394.301 cv
329.047 394.301 381.492 407.445 416.203 386.867 cv
cp
f
410.633 378.688 mo
410.633 378.688 380.602 391.801 323.484 386.121 cv
323.484 386.121 375.922 399.27 410.633 378.688 cv
cp
f
408.406 370.508 mo
408.406 370.508 378.375 383.621 321.258 377.941 cv
321.258 377.941 373.695 391.086 408.406 370.508 cv
cp
f
405.055 362.328 mo
405.055 362.328 375.031 375.445 317.914 369.762 cv
317.914 369.762 370.359 382.906 405.055 362.328 cv
cp
f
403.945 354.152 mo
403.945 354.152 373.922 367.262 316.805 361.59 cv
316.805 361.59 369.242 374.73 403.945 354.152 cv
cp
f
400.602 345.973 mo
400.602 345.973 370.578 359.082 313.461 353.41 cv
313.461 353.41 365.906 366.551 400.602 345.973 cv
cp
f
395.602 337.793 mo
395.602 337.793 365.563 350.906 308.461 345.23 cv
308.461 345.23 360.898 358.371 395.602 337.793 cv
cp
f
392.813 329.613 mo
392.813 329.613 362.789 342.727 305.672 337.051 cv
305.672 337.051 358.109 350.191 392.813 329.613 cv
cp
f
390.031 321.652 mo
390.031 321.652 360 334.766 302.891 329.086 cv
302.891 329.086 355.336 342.23 390.031 321.652 cv
cp
f
387.242 313.473 mo
387.242 313.473 357.219 326.586 300.102 320.906 cv
300.102 320.906 352.547 334.051 387.242 313.473 cv
cp
f
382.242 304.953 mo
382.242 304.953 352.203 318.066 295.102 312.387 cv
295.102 312.387 347.539 325.531 382.242 304.953 cv
cp
f
379.453 296.773 mo
379.453 296.773 349.414 309.879 292.313 304.207 cv
292.313 304.207 344.75 317.352 379.453 296.773 cv
cp
f
376.672 287.695 mo
376.672 287.695 346.641 300.809 289.531 295.133 cv
289.531 295.133 341.977 308.273 376.672 287.695 cv
cp
f
373.883 279.516 mo
373.883 279.516 343.852 292.625 286.742 286.953 cv
286.742 286.953 339.188 300.094 373.883 279.516 cv
cp
f
373.336 270.996 mo
373.336 270.996 343.297 284.105 286.18 278.434 cv
286.18 278.434 338.633 291.574 373.336 270.996 cv
cp
f
370.547 262.813 mo
370.547 262.813 340.508 275.926 283.406 270.254 cv
283.406 270.254 335.844 283.395 370.547 262.813 cv
cp
f
371.109 254.293 mo
371.109 254.293 341.07 267.406 283.953 261.734 cv
283.953 261.734 336.406 274.875 371.109 254.293 cv
cp
f
368.32 246.113 mo
368.32 246.113 338.281 259.227 281.18 253.547 cv
281.18 253.547 333.617 266.695 368.32 246.113 cv
cp
f
367.766 238.707 mo
367.766 238.707 337.734 251.82 280.617 246.141 cv
280.617 246.141 333.07 259.289 367.766 238.707 cv
cp
f
364.977 230.527 mo
364.977 230.527 334.945 243.641 277.836 237.961 cv
277.836 237.961 330.281 251.105 364.977 230.527 cv
cp
f
366.094 222.563 mo
366.094 222.563 336.055 235.676 278.953 230 cv
278.953 230 331.391 243.141 366.094 222.563 cv
cp
f
363.313 214.383 mo
363.313 214.383 333.281 227.496 276.164 221.82 cv
276.164 221.82 328.617 234.961 363.313 214.383 cv
cp
f
364.977 206.422 mo
364.977 206.422 334.945 219.535 277.836 213.855 cv
277.836 213.855 330.281 227 364.977 206.422 cv
cp
f
362.203 198.242 mo
362.203 198.242 332.164 211.355 275.047 205.676 cv
275.047 205.676 327.5 218.82 362.203 198.242 cv
cp
f
361.641 189.723 mo
361.641 189.723 331.602 202.836 274.5 197.156 cv
274.5 197.156 326.938 210.301 361.641 189.723 cv
cp
f
358.859 181.543 mo
358.859 181.543 328.828 194.648 271.711 188.977 cv
271.711 188.977 324.164 202.121 358.859 181.543 cv
cp
f
358.297 174.691 mo
358.297 174.691 328.266 187.805 271.156 182.129 cv
271.156 182.129 323.602 195.27 358.297 174.691 cv
cp
f
355.523 166.512 mo
355.523 166.512 325.484 179.621 268.367 173.949 cv
268.367 173.949 320.82 187.09 355.523 166.512 cv
cp
f
353.844 159.105 mo
353.844 159.105 323.813 172.215 266.703 166.543 cv
266.703 166.543 319.148 179.684 353.844 159.105 cv
cp
f
351.07 150.922 mo
351.07 150.922 321.031 164.035 263.914 158.363 cv
263.914 158.363 316.367 171.504 351.07 150.922 cv
cp
f
grestore
182.836 629.758 mo
182.836 629.758 193.227 633.473 205.852 627.531 cv
218.461 621.602 231.82 617.148 243.703 625.305 cv
243.703 625.305 237.758 614.172 223.664 617.148 cv
209.555 620.113 203.609 629.758 182.836 629.758 cv
cp
.27451 .207843 .145098 rgb
f
253.344 284.906 mo
253.344 284.906 254.578 288.02 252.445 287.66 cv
250.297 287.309 251.625 283.59 253.344 284.906 cv
cp
f
254.117 300.969 mo
254.117 300.969 255.211 303.727 253.219 303.723 cv
251.211 303.715 251.156 300.551 254.117 300.969 cv
cp
f
255.453 250.934 mo
255.453 250.934 256.008 252.316 255.102 253.078 cv
254.203 253.828 252.289 251 255.453 250.934 cv
cp
f
248.648 268.008 mo
248.648 268.008 251.68 267.605 248.156 269.797 cv
244.641 271.992 246.164 267.793 248.648 268.008 cv
cp
f
266 250.355 mo
266 250.355 268.547 251.742 266.133 252.699 cv
263.719 253.652 263.797 248.832 266 250.355 cv
cp
f
260.648 266.051 mo
260.648 266.051 263.938 268.336 261.875 269.156 cv
259.805 269.977 258.219 267.012 260.648 266.051 cv
cp
f
266.375 280.547 mo
266.375 280.547 267 283.09 265.203 282.605 cv
263.414 282.117 264.313 279.371 266.375 280.547 cv
cp
f
256.898 232.406 mo
256.898 232.406 258.961 233.578 257.375 234.609 cv
255.781 235.648 251.305 233.422 256.898 232.406 cv
cp
f
275.023 292.285 mo
275.023 292.285 278.742 293.609 274.195 294.211 cv
269.648 294.816 275.023 292.285 275.023 292.285 cv
cp
f
265.672 307.965 mo
265.672 307.965 268.359 309.699 265.594 310.793 cv
262.836 311.891 262.367 307.676 265.672 307.965 cv
cp
f
275.484 302.484 mo
275.484 302.484 279.68 304.016 276.914 305.109 cv
274.156 306.207 274.313 302.551 275.484 302.484 cv
cp
f
252.141 212.332 mo
252.141 212.332 253.781 214.477 252.055 215.164 cv
250.336 215.844 249.102 212.738 252.141 212.332 cv
cp
f
239.789 214.43 mo
239.789 214.43 241.313 216.23 239.094 216.703 cv
236.891 217.18 237.594 212.906 239.789 214.43 cv
cp
f
244.078 234.301 mo
244.078 234.301 245.914 235.957 244.336 236.984 cv
242.75 238.008 241.32 233.391 244.078 234.301 cv
cp
f
275.727 321.746 mo
275.727 321.746 279.852 323.105 275.914 325.262 cv
271.977 327.418 275.109 320.191 275.727 321.746 cv
cp
f
286.008 306.898 mo
286.008 306.898 289.508 309.699 287.438 310.52 cv
285.375 311.332 283.523 306.68 286.008 306.898 cv
cp
f
257.398 240.516 mo
257.398 240.516 261.945 242.906 257.797 244.547 cv
253.664 246.188 257.398 240.516 257.398 240.516 cv
cp
f
237.898 294.184 mo
237.898 294.184 241.086 297.711 238.5 298.73 cv
235.906 299.762 234.805 292.414 237.898 294.184 cv
cp
f
273.383 148.055 mo
273.383 148.055 293.047 142.859 308.648 168.84 cv
324.234 194.82 333.516 220.426 339.445 240.832 cv
339.445 240.832 315.688 185.168 302.703 168.469 cv
289.711 151.766 264.852 150.281 264.852 150.281 cv
273.383 148.055 li
cp
f
223.289 136.547 mo
223.289 136.547 215.492 131.719 201.398 134.691 cv
201.398 134.691 213.633 129.492 217.344 130.238 cv
221.063 130.98 222.547 132.094 223.289 136.547 cv
cp
f
295.648 8.88281 mo
295.648 8.88281 292.313 6.65625 287.492 8.14063 cv
282.664 9.62891 282.289 9.99609 281.18 8.88281 cv
280.063 7.76953 276.727 8.88281 276.727 8.88281 cv
276.727 8.88281 275.984 5.54297 278.953 5.91406 cv
281.93 6.28906 281.555 7.76953 284.156 6.65625 cv
286.742 5.54297 293.422 5.54297 295.648 8.88281 cv
cp
1 1 1 rgb
f
412.922 425.648 mo
412.922 425.648 427.031 531.039 355.031 589.68 cv
355.031 589.68 437.422 539.957 412.922 425.648 cv
cp
f
34.1133 177.633 mo
33.8789 177.633 33.6445 177.633 33.4102 177.633 cv
31.1602 177.633 29.5664 177.5 29.5664 177.5 cv
22.6055 176.906 li
23.1445 175.629 li
22.707 175.641 22.2617 175.641 21.8164 175.641 cv
16.3242 175.641 12.1523 174.852 9.06641 173.215 cv
8.05859 172.688 7.61328 172.617 7.61328 172.617 cv
7.61328 172.617 li
8.47266 172.617 6.41797 172.285 4.93359 174.141 cv
4.68359 174.445 3.08203 176.918 3.08203 176.918 cv
-1.93359 160.777 .0820313 149.41 2.73828 142.84 cv
1.04297 145.191 li
1.95703 138.195 li
2.45703 133.098 5.22266 126.969 7.48828 122.684 cv
7.48828 119.766 li
7.48828 114.465 10.1133 110.262 12.5742 107.48 cv
13.0195 105.574 li
14.5039 99.7109 18.2461 95.6602 20.5039 93.6523 cv
21.793 87.875 25.2539 83.0625 28.0508 79.9453 cv
28.5117 78.5234 li
29.8555 74.3281 32.4727 70.2734 35.1992 66.8672 cv
38.832 59.6133 li
41.2461 54.7852 45.7383 50.0859 49.8477 46.4375 cv
54.043 40.4258 li
55.5586 38.2734 58.4492 36.1172 61.3555 34.3242 cv
64.3477 30.7852 li
67.5898 26.9375 73.9102 24.5703 78.5977 23.2617 cv
78.4414 22.7227 li
80.8086 20.6211 li
84.2227 17.5898 90.6523 15.4805 93.5586 14.6445 cv
97.0742 11.7617 102.23 9.84375 103.824 9.30078 cv
105.676 8.48047 107.684 7.99219 109.84 7.83984 cv
110.527 7.23047 li
113.988 4.20703 120.863 2.87891 123.887 2.42578 cv
128.105 .503906 132.207 .0898438 134.973 .0898438 cv
136.637 .0898438 137.973 .230469 138.832 .363281 cv
140.738 .125 142.73 0 144.762 0 cv
147.809 0 150.621 .277344 152.965 .628906 cv
157.418 .421875 li
157.887 .398438 158.34 .394531 158.801 .394531 cv
165.488 .394531 171.48 2.55469 174.105 3.66406 cv
177.043 3.71094 179.762 5.39844 181.496 6.76953 cv
187.09 7.26563 192.793 10.6133 195.16 12.1523 cv
200.949 13.2422 204.809 16.9688 206.668 19.2422 cv
213.668 21.4336 217.512 26.0117 220.652 29.7539 cv
222.699 32.1875 224.473 34.2891 226.793 35.5078 cv
235.941 40.3086 239.168 47.6211 239.504 48.4414 cv
239.707 48.9336 li
239.801 49.4609 li
240.551 53.5898 242.355 66.6055 236.801 73.3477 cv
236.496 77.5195 235.371 85.8945 231.301 91.0156 cv
231.066 94.1836 230.004 99.7578 225.629 103.074 cv
224.754 105.207 223.043 108.559 220.277 110.941 cv
219.418 113.508 217.699 117.422 214.605 119.59 cv
213.746 121.977 211.988 125.332 208.488 127.441 cv
207.629 129.629 206.566 131.895 202.871 134.098 cv
201.527 135.668 198.395 138.934 194.176 141.137 cv
193.051 142.723 191.027 144.91 187.98 145.777 cv
185.949 146.367 181.262 148.406 179.832 150.875 cv
174.996 159.223 164.691 163.371 163.543 163.824 cv
157.23 166.25 li
156.012 166.918 155.129 167.32 154.871 167.434 cv
139.277 172.84 li
142.512 169.789 li
142.496 169.793 142.488 169.801 142.473 169.805 cv
137.363 171.828 131.34 172.941 131.082 172.98 cv
130.941 172.582 li
127.629 173.613 124.254 174.281 123.34 174.457 cv
117.441 175.578 li
113.051 176.891 108.559 177.797 106.629 178.172 cv
97.5664 179.883 li
97.957 178.91 li
96.5586 179.027 95.2148 179.07 93.9961 179.07 cv
92.3164 179.07 91.2148 178.988 91.2148 178.988 cv
82.6133 178.324 li
82.6602 178.25 li
79.6133 178.605 77.0352 178.695 75.2539 178.695 cv
73.6133 178.695 72.668 178.617 72.668 178.617 cv
67.8867 178.242 li
66.7617 178.332 65.5898 178.371 64.3477 178.371 cv
62.1992 178.371 60.6992 178.238 60.6992 178.238 cv
56.2227 177.816 li
52.9648 178.203 50.4805 178.285 48.957 178.285 cv
47.9961 178.285 47.4961 178.25 47.4961 178.25 cv
44.6602 178.066 li
32.5742 179.332 li
34.1133 177.633 li
cp
.27451 .207843 .145098 rgb
f
175.465 148.344 mo
178.402 143.262 186.598 140.918 186.598 140.918 cv
189.199 140.18 190.676 137.211 190.676 137.211 cv
195.863 134.984 199.582 130.16 199.582 130.16 cv
205.145 127.195 202.184 125.332 205.895 123.105 cv
209.598 120.879 210.348 116.059 210.348 116.059 cv
214.051 115.313 215.918 107.895 215.918 107.895 cv
219.621 105.668 221.48 99.7266 221.48 99.7266 cv
226.676 97.125 226.301 88.9688 226.301 88.9688 cv
231.488 84.5156 231.863 71.1445 231.863 71.1445 cv
237.809 66.6914 234.832 50.3633 234.832 50.3633 cv
234.832 50.3633 232.238 44.0625 224.449 39.9805 cv
216.652 35.8945 214.801 26.2461 203.66 23.6484 cv
203.66 23.6484 199.957 17.7148 193.277 16.9688 cv
193.277 16.9688 185.48 11.3984 179.543 11.7734 cv
179.543 11.7734 175.84 8.07031 173.238 8.80859 cv
173.238 8.80859 165.816 5.09766 157.652 5.46875 cv
158.387 6.94922 li
158.387 6.94922 149.121 3.98438 138.723 5.46875 cv
138.723 5.46875 132.043 3.98047 125.363 7.32031 cv
125.363 7.32031 116.824 8.4375 113.855 11.0352 cv
117.574 14 li
117.574 14 111.254 11.3984 105.691 14 cv
105.691 14 99.0117 16.2266 96.043 19.1953 cv
96.043 19.1953 87.5039 21.4297 84.1602 24.3945 cv
84.9102 26.9883 li
84.9102 26.9883 72.293 29.2148 68.1992 34.043 cv
71.1758 34.7813 li
71.1758 34.7813 60.7852 39.6094 58.1836 43.3203 cv
61.5195 43.6875 li
61.5195 43.6875 47.8008 52.9688 43.3477 61.875 cv
47.4258 61.5078 li
47.4258 61.5078 36.293 70.7813 33.3242 80.0625 cv
35.1758 80.0625 li
35.1758 80.0625 26.2695 87.1055 25.1602 96.3867 cv
25.1602 96.3867 19.5898 100.219 17.8945 106.875 cv
17.832 107.086 17.7852 107.305 17.7383 107.52 cv
19.5898 107.895 li
19.5898 107.895 12.5352 112.711 12.5352 119.766 cv
14.7617 120.141 li
14.7617 120.141 7.70703 131.27 6.97266 138.691 cv
9.94922 139.438 li
9.94922 139.438 .667969 155.027 5.12109 170.238 cv
5.12109 170.238 5.12109 165.418 11.4258 168.758 cv
17.7383 172.098 31.0977 169.871 31.0977 169.871 cv
29.9883 172.465 li
29.9883 172.465 38.8789 173.211 43.707 170.984 cv
42.2305 173.578 li
48.1602 171.352 li
47.8008 173.211 li
47.8008 173.211 54.1055 173.578 64.1211 171.352 cv
61.1602 173.211 li
61.1602 173.211 69.3242 173.953 74.1445 171.727 cv
73.0273 173.578 li
73.0273 173.578 83.0508 174.324 93.8164 170.613 cv
91.5898 173.953 li
91.5898 173.953 101.613 174.691 106.441 171.352 cv
105.691 173.211 li
105.691 173.211 119.426 170.609 123.504 167.645 cv
122.387 169.5 li
122.387 169.5 130.184 168.012 133.52 166.16 cv
130.184 168.012 li
130.184 168.012 135.91 166.977 140.598 165.113 cv
141.512 164.75 142.395 164.355 143.176 163.934 cv
143.176 163.934 149.105 163.559 154.676 159.844 cv
152.824 162.82 li
152.824 162.82 159.504 159.844 162.84 155.391 cv
161.73 159.105 li
161.73 159.105 171.387 155.391 175.465 148.344 cv
cp
1 1 1 rgb
f
234.84 48.5156 mo
234.84 48.5156 207.746 52.2266 203.293 55.5703 cv
198.84 58.9102 189.582 58.957 177.316 64.1016 cv
154.309 73.7539 149.48 77.4609 141.691 81.5469 cv
133.895 85.6289 98.2695 104.93 76.3711 116.801 cv
54.4805 128.672 25.1602 150.293 7.06641 161.426 cv
7.06641 161.426 40.7461 136.836 56.332 127.559 cv
71.918 118.285 104.574 98.2461 119.426 91.5664 cv
134.27 84.8867 152.824 73.0078 152.824 73.0078 cv
152.824 73.0078 173.238 64.1016 183.254 60.3945 cv
193.277 56.6836 219.621 48.1406 224.074 47.0273 cv
228.527 45.9141 233.355 44.8008 234.84 48.5156 cv
cp
.27451 .207843 .145098 rgb
f
267.488 65.9492 mo
267.488 65.9492 254.598 46.6602 228.621 50.3672 cv
202.637 54.082 200.785 55.3828 200.785 55.3828 cv
200.785 55.3828 230.754 44.0625 242.621 45.5469 cv
254.504 47.0273 260.434 50 268.98 58.5234 cv
268.98 58.5234 270.465 60.0117 267.488 65.9492 cv
cp
f
228.527 53.3438 mo
228.527 53.3438 224.449 87.8516 206.637 115.313 cv
206.637 115.313 221.105 87.9453 225.926 53.707 cv
225.926 53.707 227.051 51.1133 228.527 53.3438 cv
cp
f
221.637 54.3984 mo
221.637 54.3984 214.262 101.133 194.027 129.469 cv
194.027 129.469 213.551 93.6094 219.035 54.7266 cv
219.035 54.7266 220.191 52.1484 221.637 54.3984 cv
cp
f
215.52 55.5117 mo
215.52 55.5117 203.762 112.219 183.527 140.551 cv
183.527 140.551 207.434 94.7227 212.902 55.8398 cv
212.902 55.8398 214.066 53.2617 215.52 55.5117 cv
cp
f
208.559 56.9063 mo
208.559 56.9063 201.902 100.746 176.566 141.945 cv
176.566 141.945 200.473 96.1133 205.941 57.2344 cv
205.941 57.2344 207.105 54.6563 208.559 56.9063 cv
cp
f
200.48 60.5273 mo
200.48 60.5273 192.16 108.539 164.598 151.965 cv
164.598 151.965 192.395 99.7344 197.879 60.8516 cv
197.879 60.8516 199.043 58.2734 200.48 60.5273 cv
cp
f
220.824 43.6875 mo
220.824 43.6875 196.613 13.9102 134.824 8.0625 cv
134.824 8.0625 166.543 12.5156 187.145 22.8164 cv
207.746 33.1133 214.145 39.793 216.371 42.3008 cv
218.598 44.8008 220.824 43.6875 220.824 43.6875 cv
cp
f
216.371 47.3086 mo
216.371 47.3086 187.426 14.1875 122.293 10.8477 cv
122.293 10.8477 156.809 14.4688 182.691 26.4336 cv
203.598 36.0938 209.691 43.4141 211.918 45.9141 cv
214.145 48.4219 216.371 47.3086 216.371 47.3086 cv
cp
f
209.691 49.5469 mo
209.691 49.5469 180.152 17.6797 113.668 14.4688 cv
113.668 14.4688 148.895 17.9414 175.309 29.4609 cv
196.652 38.7617 202.871 45.7969 205.145 48.2109 cv
207.418 50.6211 209.691 49.5469 209.691 49.5469 cv
cp
f
202.871 51.8164 mo
202.871 51.8164 172.215 21.207 103.23 18.1172 cv
103.23 18.1172 139.793 21.457 167.199 32.5195 cv
189.348 41.457 195.809 48.2109 198.16 50.5313 cv
200.52 52.8477 202.871 51.8164 202.871 51.8164 cv
cp
f
195.363 53.5039 mo
195.363 53.5039 164.051 24.8984 93.582 22.0156 cv
93.582 22.0156 130.918 25.1367 158.918 35.4727 cv
181.543 43.8242 188.129 50.1328 190.543 52.3008 cv
192.949 54.4648 195.363 53.5039 195.363 53.5039 cv
cp
f
193.801 61.6758 mo
193.801 61.6758 185.074 111.48 156.16 156.512 cv
156.16 156.512 185.332 102.336 191.059 62.0117 cv
191.059 62.0117 192.277 59.332 193.801 61.6758 cv
cp
f
186.762 64.6406 mo
186.762 64.6406 178.02 114.445 149.105 159.48 cv
149.105 159.48 178.277 105.305 184.02 64.9766 cv
184.02 64.9766 185.238 62.2969 186.762 64.6406 cv
cp
f
180.082 66.8672 mo
180.082 66.8672 171.34 116.672 142.426 161.707 cv
142.426 161.707 171.598 107.531 177.34 67.2031 cv
177.34 67.2031 178.559 64.5234 180.082 66.8672 cv
cp
f
172.285 69.8398 mo
172.285 69.8398 163.543 119.645 134.637 164.672 cv
134.637 164.672 163.801 110.496 169.543 70.1719 cv
169.543 70.1719 170.762 67.4961 172.285 69.8398 cv
cp
f
164.121 73.1563 mo
164.121 73.1563 155.566 121.805 127.215 165.785 cv
127.215 165.785 155.809 112.875 161.434 73.4844 cv
161.434 73.4844 162.629 70.8711 164.121 73.1563 cv
cp
f
156.324 77.5859 mo
156.324 77.5859 147.699 124.887 119.051 167.645 cv
119.051 167.645 147.949 116.203 153.605 77.9023 cv
153.605 77.9023 154.816 75.3594 156.324 77.5859 cv
cp
f
186.832 55.7422 mo
186.832 55.7422 155.785 27.3633 86.1523 26.4688 cv
86.1523 26.4688 123.09 29.375 150.785 38.9844 cv
173.168 46.7461 179.684 52.6172 182.074 54.6289 cv
184.441 56.6367 186.832 55.7422 186.832 55.7422 cv
cp
f
179.035 59.8242 mo
179.035 59.8242 150.223 32.1875 78.3633 30.5508 cv
78.3633 30.5508 115.285 33.457 142.988 43.0664 cv
165.363 50.8242 171.887 56.6953 174.277 58.7109 cv
176.645 60.7227 179.035 59.8242 179.035 59.8242 cv
cp
f
241.512 47.4023 mo
241.512 47.4023 260.809 48.8867 266.754 60.0234 cv
266.754 60.0234 258.207 51.1133 241.512 47.4023 cv
cp
1 1 1 rgb
f
171.98 62.4375 mo
171.98 62.4375 143.551 36.3359 72.6523 34.7891 cv
72.6523 34.7891 109.098 37.5352 136.426 46.6055 cv
158.496 53.9375 164.926 59.4844 167.293 61.3906 cv
169.629 63.2813 171.98 62.4375 171.98 62.4375 cv
cp
.27451 .207843 .145098 rgb
f
166.418 65.4219 mo
166.418 65.4219 137.668 41.0508 65.9727 39.6094 cv
65.9727 39.6094 102.832 42.1719 130.465 50.6445 cv
152.777 57.4883 159.293 62.6602 161.668 64.4414 cv
164.035 66.2109 166.418 65.4219 166.418 65.4219 cv
cp
f
158.902 67.6641 mo
158.902 67.6641 131.379 46.0781 62.7305 44.8008 cv
62.7305 44.8008 98.0117 47.0742 124.473 54.5742 cv
145.848 60.6406 152.074 65.2227 154.355 66.7969 cv
156.621 68.3672 158.902 67.6641 158.902 67.6641 cv
cp
f
152.777 70.7461 mo
152.777 70.7461 125.41 51.7734 57.1602 50.6484 cv
57.1602 50.6484 92.2383 52.6484 118.543 59.2383 cv
139.793 64.5703 145.988 68.5977 148.262 69.9844 cv
150.512 71.3633 152.777 70.7461 152.777 70.7461 cv
cp
f
149.082 81.1758 mo
149.082 81.1758 140.215 127.43 110.598 169.219 cv
110.598 169.219 140.457 118.945 146.27 81.4883 cv
146.27 81.4883 147.527 79.0039 149.082 81.1758 cv
cp
f
141.574 85.3242 mo
141.574 85.3242 132.598 129.992 102.535 170.332 cv
102.535 170.332 132.84 121.801 138.715 85.6172 cv
138.715 85.6172 139.988 83.2227 141.574 85.3242 cv
cp
f
133.496 90.0195 mo
133.496 90.0195 124.66 132.516 95.0117 170.891 cv
95.0117 170.891 124.895 124.723 130.684 90.293 cv
130.684 90.293 131.941 88.0156 133.496 90.0195 cv
cp
f
125.152 94.707 mo
125.152 94.707 116.645 134.742 88.0664 170.891 cv
88.0664 170.891 116.871 127.402 122.434 94.9648 cv
122.434 94.9648 123.645 92.8203 125.152 94.707 cv
cp
f
117.645 97.4531 mo
117.645 97.4531 108.84 135.77 79.1602 170.332 cv
79.1602 170.332 109.066 128.738 114.809 97.6992 cv
114.809 97.6992 116.059 95.6445 117.645 97.4531 cv
cp
f
110.121 101.59 mo
110.121 101.59 100.918 137.895 69.6914 170.613 cv
69.6914 170.613 101.145 131.238 107.145 101.824 cv
107.145 101.824 108.457 99.8672 110.121 101.59 cv
cp
f
101.496 106.266 mo
101.496 106.266 92.5664 139.688 62.1758 169.777 cv
62.1758 169.777 92.7773 133.555 98.5898 106.484 cv
98.5898 106.484 99.8789 104.684 101.496 106.266 cv
cp
f
93.418 110.402 mo
93.418 110.402 84.3867 141.656 53.543 169.777 cv
53.543 169.777 84.5977 135.926 90.4805 110.602 cv
90.4805 110.602 91.7773 108.914 93.418 110.402 cv
cp
f
85.0742 114.809 mo
85.0742 114.809 76.4883 143.461 47.1445 169.219 cv
47.1445 169.219 76.6836 138.199 82.2617 114.984 cv
82.2617 114.984 83.5039 113.445 85.0742 114.809 cv
cp
f
75.8164 119.41 mo
75.8164 119.41 67.582 145.496 39.3477 168.938 cv
39.3477 168.938 67.7539 140.715 73.1133 119.563 cv
73.1133 119.563 74.293 118.16 75.8164 119.41 cv
cp
f
66.1523 125.273 mo
66.1523 125.273 58.4727 147.852 32.1211 168.105 cv
32.1211 168.105 58.6367 143.703 63.6211 125.41 cv
63.6211 125.41 64.7305 124.191 66.1523 125.273 cv
cp
f
56.1211 130.781 mo
56.1211 130.781 49.1602 150.172 25.1602 167.551 cv
25.1602 167.551 49.3008 146.609 53.832 130.895 cv
53.832 130.895 54.8398 129.852 56.1211 130.781 cv
cp
f
45.832 137.098 mo
45.832 137.098 39.6914 152.145 18.4805 165.598 cv
18.4805 165.598 39.8164 149.379 43.793 137.18 cv
43.793 137.18 44.6836 136.371 45.832 137.098 cv
cp
f
147.207 74.3789 mo
147.207 74.3789 120.16 57.2305 52.707 56.2148 cv
52.707 56.2148 87.3711 58.0195 113.379 63.9805 cv
134.379 68.7969 140.504 72.4336 142.746 73.6875 cv
144.973 74.9375 147.207 74.3789 147.207 74.3789 cv
cp
f
141.645 78.293 mo
141.645 78.293 114.785 61.5078 51.043 62.3398 cv
51.043 62.3398 84.2773 63.9219 109.207 69.1602 cv
129.348 73.3906 135.152 76.7188 137.363 77.6836 cv
142.332 79.875 141.645 78.293 141.645 78.293 cv
cp
f
135.246 81.3984 mo
135.246 81.3984 109.215 66.793 43.2539 66.793 cv
43.2539 66.793 76.9883 68.2383 102.301 73.0391 cv
122.754 76.9102 128.66 79.957 130.895 80.8477 cv
135.949 82.8516 135.246 81.3984 135.246 81.3984 cv
cp
f
127.73 85.6172 mo
127.73 85.6172 103.09 71.2461 40.1836 72.082 cv
40.1836 72.082 72.3008 73.418 96.3867 77.8672 cv
115.848 81.457 121.465 84.2773 123.598 85.1016 cv
128.402 86.9531 127.73 85.6172 127.73 85.6172 cv
cp
f
120.223 88.7813 mo
120.223 88.7813 97.8008 76.8125 37.4023 78.1953 cv
37.4023 78.1953 67.7773 79.2422 90.5742 82.7188 cv
108.973 85.5313 114.277 87.7344 116.309 88.3789 cv
120.84 89.8242 120.223 88.7813 120.223 88.7813 cv
cp
f
112.98 92.7422 mo
112.98 92.7422 91.1211 82.3789 32.668 84.0469 cv
32.668 84.0469 62.1289 84.9023 84.2305 87.7617 cv
102.082 90.0703 107.223 91.8828 109.184 92.4102 cv
113.59 93.5977 112.98 92.7422 112.98 92.7422 cv
cp
f
105.395 97.3789 mo
105.395 97.3789 84.9961 86.5547 29.6133 89.3398 cv
29.6133 89.3398 54.5508 89.543 76.6523 92.3984 cv
94.4961 94.707 99.6445 96.5156 101.598 97.043 cv
106.02 98.2383 105.395 97.3789 105.395 97.3789 cv
cp
f
97.332 101.891 mo
97.332 101.891 80.8242 92.1211 27.9336 95.4219 cv
27.9336 95.4219 50.7773 95.5859 71.0039 97.8867 cv
87.3477 99.7383 92.0586 101.199 93.8555 101.621 cv
97.8945 102.582 97.332 101.891 97.332 101.891 cv
cp
f
87.5039 104.648 mo
87.5039 104.648 63.0117 97.9648 23.4805 101.422 cv
23.4805 101.422 45.0195 100.828 64.6758 102.699 cv
80.5664 104.203 83.5273 105.418 85.2773 105.762 cv
89.1992 106.543 87.5039 104.648 87.5039 104.648 cv
cp
f
82.793 109.336 mo
82.793 109.336 60.5039 102.422 21.5352 106.695 cv
21.5352 106.695 42.1367 106.207 60.9492 107.742 cv
76.1445 108.973 78.9805 109.965 80.6602 110.25 cv
84.418 110.891 82.793 109.336 82.793 109.336 cv
cp
f
75.5508 113.789 mo
75.5508 113.789 54.1055 107.426 19.3086 112.16 cv
19.3086 112.16 34.8945 110.66 53.7148 112.195 cv
68.918 113.426 71.7539 114.418 73.418 114.703 cv
77.1758 115.344 75.5508 113.789 75.5508 113.789 cv
cp
f
69.7383 117.688 mo
69.7383 117.688 49.9336 111.047 17.3633 117.172 cv
17.3633 117.172 32.9648 114.559 49.9805 116.094 cv
63.7383 117.324 66.3008 118.313 67.8164 118.594 cv
71.2148 119.238 69.7383 117.688 69.7383 117.688 cv
cp
f
34.418 144.277 mo
34.418 144.277 28.6133 156 8.45703 166.438 cv
8.45703 166.438 28.7305 153.844 32.4805 144.328 cv
32.4805 144.328 33.3242 143.703 34.418 144.277 cv
cp
f
61.3945 121.301 mo
61.3945 121.301 47.707 116.34 14.3086 122.18 cv
14.3086 122.18 24.043 120.793 38.2383 121.066 cv
46.8164 121.23 52.7695 120.961 59.457 122.215 cv
62.8555 122.855 61.3945 121.301 61.3945 121.301 cv
cp
f
54.7383 126.371 mo
54.7383 126.371 37.1211 121.348 10.957 127.637 cv
10.957 127.637 20.0117 125.637 33.207 126.035 cv
41.1758 126.27 46.7227 125.883 52.9336 127.684 cv
56.0977 128.602 54.7383 126.371 54.7383 126.371 cv
cp
f
46.1445 131.152 mo
46.1445 131.152 28.7773 126.078 8.17578 132.727 cv
8.17578 132.727 16.043 131.434 27.4805 130.73 cv
35.1758 130.254 39.0664 131.086 44.082 131.645 cv
47.7305 132.047 46.1445 131.152 46.1445 131.152 cv
cp
f
41.9961 135.469 mo
41.9961 135.469 26.4023 130.203 7.89453 137.109 cv
7.89453 137.109 14.9648 135.762 25.2305 135.031 cv
32.1523 134.539 35.6445 135.398 40.1445 135.984 cv
43.4258 136.406 41.9961 135.469 41.9961 135.469 cv
cp
f
35.9492 140.633 mo
35.9492 140.633 23.8789 136.648 9.57422 141.875 cv
9.57422 141.875 15.0352 140.855 22.9805 140.309 cv
28.3242 139.93 31.043 140.586 34.5117 141.023 cv
37.0508 141.34 35.9492 140.633 35.9492 140.633 cv
cp
f
30.4336 143.648 mo
30.4336 143.648 17.8086 142.09 4.80078 150.008 cv
4.80078 150.008 9.95703 147.945 17.6445 145.863 cv
22.8164 144.445 25.6055 144.563 29.0977 144.313 cv
31.6523 144.125 30.4336 143.648 30.4336 143.648 cv
cp
f
22.6523 147.512 mo
22.6523 147.512 11.5195 150.012 5.38672 157.531 cv
5.38672 157.531 11.2383 151.965 22.6523 147.512 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_pear_bw.eps)
%%CreationDate: 3/11/2016 11:18 PM
%AI9_DataStream
%Gb",KBj2OedcgWlcSPU;fgu1ApB=*>_2sb?5_/3b&7ZYun3XcAPOmc3mC,!QgNI'c1M1GZ^?<5n&6USb8Yt-?Wk*CmXjO,7.eT"5
%`a;@Vdgs]^l1mWbZ>;I0fp;O4Dti\5W9fdRI3#Y&&D5Jolh\&DT/]t,0RWfDaVq;oi5bX_Yu<1)gUk^"Z.s)r2l_jLCFQUhX&.-T
%/tB^1L!6H8[G(C3ZW8Xlcet;JQ@$,EWKoI^c!$g3nZi?Vg5#=j],#bt"5r(b^/Zge4/ML#Hs\LCe_p0;rSepI5PE:f2F%bYRL%<t
%o<gP39,WB]1\YIaHr=[dRtZ$^;?-J(]B6OaSoh_p?Jlo50Gk&o1C$-Vo&\muVqP`r1/T_"Zi)S16d01dcEX37?[4>f8cLO+5Q!/j
%cjf8)M^JH'W*B:/ppZNn1Cha;]:6i$/FMF6)$dS]raYYM((E)j5iN\'P\]I46G#qgCDhkhFYdVHL@@E5s&.Z]ItSLE.r3mJO>1$*
%bSgs&6Ki&Fc[`PHbK,F0HkK:Cq4^ddF"-^T>UYl,ZJi?+Hb],9fN8f!U]6K!p,^`Eo3K&XQMo!DKtJe:)l7RT[F"uDeH5/ZI%BK9
%V8klqGuAM^/N9[MgleL-TP&Q!WGNH#Q'!mTR:PKn>X)o7-W!MFa>sIXk(U$u9^"LaY5)C?0@c0Z4asNQomPVn>p.4ZB'#gd?W*!]
%LX2HT;FI@qPmR6##l8?KqnGu+T)]0G\(g#U=pEG:>^mcR"T.n=+(sE.Qe!*5>^\^PpXXlClYm-0N>)+Fq?Qs'6ZgTW%r+(OdsqrY
%FWC2Nhqmj@_;T:>"$\tf2EL#*p#F'\^Wkk4NMCN+\'R<mo3AGb=q<F;`rF9P-d]G1\PS:=6KS.(O<O@JeW(Qu8unfoN48#cdgUBG
%///,Gbg+UsEY6U]S2<W`m<:&IEgi\FEVZ*sSN:99m'KMD#E;2Q"">8O-]L5b.t9?0PN^:`'>TZm48=,q>-4;O$g4FQ@ab#X^[$_/
%q)6L)E:fU\BI*F%r9lB>D^p>kd]Ol^h#3G.UAp.nQj5S8\5EQDStUcMXaHmeNd=')s0Qa*c.I(neh[d5+Cd\LLsZF7DU^>^e])lN
%"*@0:-N$\RSu4VQeO$srbg6lHCuS.#"lOPegksg[@GO</S8lia\2]^cRKif%s8G%B3,On0O7hCu-2?*4f@t4/[*de,8eE@LU%rKF
%:Wo0:^M;:[r4!#Zf;os7g1=[*$d^W[C_h?o'Mg70;R9W+*`hFn(8.[W`;aTP_Yo'.kDX`u1QV9=877fj>qQK7NqE-i8XFas`][_p
%?OY2TU@;4k'`K!m$D7s,5iU*^WI:3:&a;7-aIJPH-`?>GfVjhj6Dm+a7*In7NnZ9/GLC5)+P>4k>Zg-s%Wg1le&%e=*5+rn"]j8i
%+W\Lb`Y7*tjq3t,ojW4A>4>T\=$mK^(51t4rH>#C]Sq'QctQ?A2#l!#DHH:H+_M8)Wns`B'\e>"<(OtiO%lE]%<jd87tjuhZW[:\
%!E)W:UO2iu$TU=U_i\`#>FfLIq4KdGA2]djC^u&B36*Zo$tC21Qj9hm=>g>ji*f0.p>%:,)pK(d&p532Q0gLkc!pK/gO:S^g1C&'
%agCo?T:/CN13V<0LGees6H3MnbfLR>jdMhbc"f9=O24B3/C.##M*PK]b"Wd01K/0H9fZiuarNDKTZ^Eo1b,Vq0fK9U>RHXb6=VX%
%:M".]c"sqY/N:#tB"$L=Q31q=XW(ZmV*e_?m5a>VflO-SR2UD^/=j3>7Cg!Z=su9-S6]Esd[sb2;SINUTg6UsAjO*,GVoIVCN"b$
%5H8lZP>kJ^2*Wa9>-1Dj^32M[PH?dAgQm\oY/^!OX5"c#$ic=.-C(j$d\oO01$V,?E(H`5Q2V^!=l1A@S'"Z97@aUWq24f.i6Tlq
%m?TB(q5]t(2^nVO>I$pb$Yu<"M`[KQk\D+4=,LsW<i:4J.$jUcKliR1eU;6L71-\81HX,RF1kFh[0uXa]@Hr'f^L]F,Im9qH)"][
%&q\LY;eg8&i`hugCGb:Y$9&\8'CMo'[*ig2s&,N[^Tm)A]8]Fr]q*F`Z#G,!m)r8^(;4-+Q(Aq=-'2:tR-?[33_!1mf%eJRN_/72
%Kk@00=t@)2>bFe+-V0q^Su!U81Ma:9Yg_N<Nt7![HH4]MG]r%R:,WTKH#^E7E5p.NDpDp>[F1q-R5[Z%?9rl4cO%X+1kMpjEPKYA
%)s;si/iQSK\<9dimA+A52fh3d'oH.Yc`$b!WPUA:hK>+cLC&0pRH?'Ak;$kn*TZgaH*jj5BN3TPjmrFL>Y!ZC32TRWZ^'?':IR1\
%>P2U%<9^2%>Ld`+G32L*a\%-%e<lS:p1)&=j4a.M7e?NlF4[6bJgShQRBa#RB4ElOH!Sl4X@^BB`k3X1-RSh'UpsQqR\R-4'7sW@
%m)ZORn0sBLSNVq(Y(uNri^]p9@=/DNE_7FnVda]\00Rc4qU6WOdi^FuJnN4>'O2Er&nfU+UYs03rdHY`H&DQfSn">nRB%>!alQN(
%M@CF2)LEnc#1lWYom40[?`o]Qkr`APT8X/m>`-_ZX5hh3adAo!^=#'_i]C7MjE9F/.Rd+7!5kYC3h-OM-`Za$l2/rrqK"X5oOf)#
%6$8]2`]ipe2MDNOH:7-;&e&(_O5l[-K:'Sfo=$RF0W-Yq7k,FHpf!g%HS[g_4p<]#4ZqgcAXLb_V-6S0JQ*Yb2K>/WO*fj.-`Kk/
%oG\SrL$G:a?Ra?Q1Xn$6;k>o83A-QO'^1e0,i%?b@m_JplJ5"+GW3Wt6OF]XghbKg*-ga,/j,S61?XC%;^dn\mE.j9K.-"G0!+>t
%H5`$*`D3Nk+=a8sWEA>'TiJ5EbCpZ!8rA=;&Sn8@5V)+\/u2CDU@CBFPJ87dL2U:?s05`CKmKS]MV&]I$\Fk0R-b+1!6#llM%\To
%8<bqm1+hpP=X;-8q.FVf,YFMa=Ap&oEe=bfV.+N[00aAQ/4pgkVFC,NGq;Pp9kI",;/XB.^Ib[YBonbX=HldtC)2^_MadGCUs1G+
%A\r8S+TWuM1DV8OA"S!CH]qo9dNC=t)YGWsV,+FhLffm@1cFm%r[,UYUd8Tr:AlSZBr3V^-IlF/iH1'#0;gmW?E+:7fhP4JEf0,7
%Lhh]RS.OJSr.V\`_`VM?3?5<!CDu<dNQh'Z`Z$ukR=;:n1%n]eld`;bbkTmlpmO/%CH%E[V:aB;?^pSnS&a,=Ra<fgf7'2>j$MNT
%Xu=b[AmF^fbgg=Jg5Y0.1L4k;ec(b;/Uepd3/7=t8R%>l9CPaGQ)EmKE-@2CIZ43X0hS\RZXYgR7U7kBT..X`>PY=)h5qHA*KKo;
%i-;O[(`>8$ga+WQ?E2Aq=PkRhJ'E#9EG81#=n7l`TlL7!\!Um<B*trRQl0tu1,>^7s(u<)s-DV^ptoZX+`i:q\h!GOq7'>;]Sp\D
%)4m0&m<kqYMtJ),C9s]h;j?pNFcL0CL*JTV8RI3d)?7O309`7Or<oL](u;>RV,lPPW^>`E'?$LQSc<.9s-Ro$)g6^qP.i:Ae/'(3
%o0s*ee"'6kZM%4<qQG8kG*SEVj(&;YC;6X/$P]%pp1^Ya:9u<H`=5_Tp!2!If\%*_)5P+-Z<3bP*:34SOMWSpFr?lW31,nh_e#1#
%>rXgm,$(R59&?A&Mc[8nrc:DH)D<;;8?5Z&$oE=q2nT*\rqkRbVs'W+s%WnQcgH99_.7`h41kM5^dmkufJ8akns%gun*J?oHEauS
%GJ6#Ad)YLu[k[-=hV"Ig2#+IjGJ6H2X4a'4m#&/L3Bll,W?O)Tk9MoS'CUhR<N]@AIh"uE=ueT[6\iW)AjK.B<::'%Zh;b0h1!Le
%!aWJe(b;<-ogTt'm<Y4"eb@&8m+N/b:T&IH2H8C)lgC?B/kqcoR!Hbb*jU9R^YFqI[Og:$:R^BcI2UP6noCR5Wgko30.Mrr\\6cL
%Q^/T86N,=oWL<'gjuT!Bc=X5c(fDdsiL0^^m)kJ/Uppj_r3'#aZnEp8fsNE3kIBa$97]jK$NE`_%?0s#Z^W:K+`h-4&(Xim;t=c)
%Cs*-W9!Z2T/u.!C\HpWaH*`+f6/0&oSsFlBC`cTc5RPG_@'AL+l2P:gG>=geq!/p,eLMd[I55lVbT&8la3/tKnKMidG.`VILAW\\
%a32]s13:+P*%s+gbKTK3'onXG!5HH/h=T#58G^D4(EiTan4^4pl,G$<\<8LZjr'YCW6kS"45*iCM17TQ^n`?I8;"gU-_!Yj0OpDb
%inrb0f2DTW9IbC9[nsWb7m2h514@+29K:=Nj"(kmoF&]B-DnlrNp28>eB#UuP_&(Vf):(n3)8L^q\A=:Q@3J5I;)qsqObmD[!u7-
%2?"S<l()PL9I[8Cc!KLm?-g'q=8Ckj+g^@uP<iK6j5X1NNP!OgQVnlmWDTQl'_<lPW$Y0.-5hT^A9A[uIuXENmguW"(N"];F38Bt
%0ed<'F&S!.cRcFBB;$oGm_.QnRRWm.;4OIM,)nkbCOA[?NfaC"5:`R06%RI&Crk7CO?"nj$V8_ea/75_a8?c!:*Dc[g6FVg@n_HM
%3V-`SU]N[M@naTY,Idc'N&3N<r"p)"BkMmR8S-p<5K:p.0dV:-s,Mfa/u4B']]o.CEO/JX(TMBlPr(51r8#`md)1q/Xn@.TdOnkg
%hW_=.Z/7jDRd/:M=7:,PQR5-p]i3[:9ta)O<P7q5O>=*jo"l@]>34"@q.HU10;_UFHhrd2\)N3RbJo0&$;]7&=DV]5\`mr17O8ta
%J_><d89,arS"dJf]9,RZBM>p\3c6ijBhf"X)]'j-]Krm:6*n3if7[*A"nb*I2X%^l56mbA;5Xb:4e5?a)jgLKQ!-?8L<_>5aRu+V
%)s&JB':1N6iEg4pR.Oc>j!FqVV*\c0lkOS&9Z0ptUkg!sp=0+,jB64.;p/e)#n)r<SWG&d@g[,fN150bJB.!<7I&-6\]M/=dS\]A
%RN'ReR9=SeCMmb/c)eID20Zab>RE(RVH\,Jn?D/_k>Gh9QpQ-P"]dF#DJ%2=bdj-%2`'W/k1nadGlnJdF@]*:8a"qUP:dS*1Qu_)
%9Y(ao7d6^O80c](\ilBHPFgcU$ob)g`:YEeQsb#*IJBs<@@QADR#FCQU[q+%nmhCTPo(a.h&PQ7RKOMgECO"qOlNIS91RN!nSC5'
%9o\a2Z-rWZPfcqWCB(<2nPW#pERA(7ikn^4cViaY/]VN<$#_:hd>da8VPUA^3]#(H3Kt+qIIp3@C:<E)3i"-_^YKI]-?U?KWF5hl
%.n`Y6nc/2;eI1ZB<+fPX,ba3WomSSIr)/kugFj=?l-`kN-Q"?WdIfuBeLk*1M6G)ZmJUL!fVJjSC3>ucKjm(0VKI)Y.?c)Q)OP]*
%Kdlr';X:-iJ^Q^%[EZW67\%8+4Gfb1,dJn$iEn&&+_#l?X?P_r`!Ws%>lu]a-Qp?s[RI4?[(.o[5?B9T3].i3:"P$s"dqENRZJ`G
%/#Yf5T8X5o'XC.n]CFKuUL(YIK$br%V.an6U7"b5dtre]Z7fj8Wg0:tkJFuCD=s=&2iGDA3P.jR2_4:E=ufS4o;U^T.4!kT)A5-<
%-6%``1<+Fp?r+//E->BV/f`*WhM98U8%NYY`m&pM:4R,fdbZQT/iC8<;*_"nhjOklR;ffVVEF+[0b"VV/f`=GQC2]^,[iHlM\Bt<
%rs*,q1jY6r`<I\il+%jA3'I.YX\_\;7EffI9NM^r)d21f-KepQ=gd1C-L[?K-5m[JY8(HT'PSJ_Jqog56iN;AQYm\$/cD)l&#tZ=
%E3^g^9g"37>6CUkVO1$'/#CjMcIug8M4:'sj/0oNl[S+Wc8.<M3ARb`[kSY?G&Hm2d_up/`Pa.I=<)=hN,bHg.8DX<j'q>WTVtRI
%(IOfVo!!a^9:J"#bkXJJ;)01K2,3W(WDoe!G*o.a2l([@3E)khEp+Umg;i5oF0j:7U]4iPG.:g;9!c-.iLR>2.;iQ"iV.'BO'TH>
%bY9uWp#=h-ZB:VEA6D-,A8XGr4eIki\B2t-q93YlXMH&jio$$YK4^h63_iUF@010B`jn:9VP[(Af#`+Yf;Egfa5`JRlf6mT((,?1
%<N@n`kO5"X=bu24KNMOo"BR.+F>(+7)M]:)OtMJWD([^e^1l)@@2)=DZRG3Vjc`;"rlacF]fH,Ihh:o3Y1_[P<7NQCPZROtT69uH
%;Ti=J:@?1^!'8R@S<Af9rr"RVVbXo><H=O45:ok")=FdZl[a%8O/:/hnn7je6LjF-T;@rmXjF'^];B=$cH:c(ZKNC\SYgL8ki!,X
%-B7_*\_(S]asHnL43H!i,*>(gqY`>to+M'!!H!<uSBU<CQ`ilUoK2uZLVL\*Q>h)EM%!56>\kf_0JGF`9]kk_U"N1/CTUdCQ\I'1
%?kd:-D@ET\(rRPX7^sH-_-!ctlD77PI2N7F+-24#E2W``_VkLB]']!aE]>!:k@4NsdM%;e9+ZDs>#g)hXjO(Zk2*Mg)].W4:8r?a
%alLI7"Q+%n<A&G+(B.1]_s?9o?_G(4Ra0MEqq\I*cDqQS]p.$.MR$P*(j;9t5CCL/nUKrQ1-PEMG>-K+5>9h@>SmFE9\0[:&(_+D
%+*1L,=Aoe_4WEY&MM)BDVO3/W/us.'eT/9-B%2!b&/X41%?"$h*1Lp;%6"RNO3fRJ:I.&9AIeuY[@;7mp@TR\bK'YAEd%KPqes)8
%pqO3B*'NQ:AEGcYg9k/`3-1G$.AB*kTHEoXeW(PJ*:!RCeV9[Hb@V<Yo8R4W<j&q'Kf5%7]u.mj!Jq-_fqeg=6VKjBq"\rY'09og
%oA:Hu7'g-q(u@=oW7]uhS@`-H*F9GKXlZ6[4`n[cL3gru1p-1q:An(A<]St/JUZ-=nZ4i0k8HX\\h6YZJk)(eQ:)]6HObITB(jF8
%2hXm47-!)n8JM2P;$P`LpC>Y(70VMaWD5pOSK9j9>b*;p?)2*@fQT(V*q:e)>4"dr!ncD<P3>fEJ4^[$:cO6p.J;RX2uCK[-N@q-
%DUq[&*WJ,#oK<AJ]N)'JD[m^F_=#CU^(k6$n!+:2!I,-7&LSuU9aKK3rQrcC6!t5BCM;?[6STa/3K=:*Y@S24.okDE![Occ5(<,d
%a3?ZZ5F`Y@<>$ZM@^X.pO.`I7>aJoCe7aK;Z!BP2mkcOB_f&*PR/W-n7]de^aVR<D:OP"j$4qCp!Cs9I/sJW[)?DPN56g7F8\?CL
%BJ.l*5QC;c>cMm\RD!XA;=0138e70@1<kc$bCKTA3R;MBJLo";E\k&V/@Wdh9[*:t4.E[V\AENbV!MOW0s26pB>%rZFl$g+p+')m
%l3,ao+\PisY@JB#Q)8#cg5L!qD.RaYFsF=pBXQ%.b5]Vt_reDEb^&.e0POO%SSAkQ*YA^%.5]dLNC't9M5iLV%0B1u<]+r!#K+=(
%BkL20NR%@X^(jc?6G&aJ6=4R5;g7i_Y+aDTB7F3)SSAiE`7SD8(FAogVpdg7&;GSn\ZY=+MIsj2\29IRZ$pNu#s'^r0h2D?=Xh2P
%l*VNmkXi+^M;P]\/%E6u'o-11h^]/ke@q?E!(U>>Y&,HDDdJYa#N`_SR>k+@>r\i`/+$]kVTYY27qfM25NrkWb*h)*\Y^!@D;k)$
%j/>f1/"_$cXY,L\ZQ#<BI0bb]auKH[7c7VRlj8'5cAE\ef(DUu#\3D!>\jM"0NWgsn.2&O>bTo^-o]K"TA)u2DD1]PU#)q_i8bYQ
%7lSdo\m'&](,`b<I1?s5LdH(@YBGjXR9nIc`hWIWEa,$(C/qCsHPcc[KjTUr^5'9ffC6d+=Mi1^<pJd?)tpXo[ifYrlU,pRFpbb4
%RI0Q6\N49ge>Ot18Cb#Yc`H=Gmec,2MaABPh/3o7<FiBelB&(SkhZ;U\[e!ol5Td%!%hWL=rS,5.boWN>2Jp=rM%ZmNt1k=/oGc"
%eH:9X'it'<=;g&940f4j?)q@<f'OU6Jqt:;QU)m1Ai=i,LQ!F*HA<AmOuh$P,JEI6O2b$4=9UJN5+16]mi7?M0[Gr'%n+,0>%a,l
%,<1p#%gUG8"PRY"ap;EsaH2'fTit1D9l\##:n1M23*sds7H+L+bJqq1rO@uHdp-,Zf,G;ta].QDb9Y(YV2@T-0h<n\UW%@dRd7gI
%pF^$Ge<e/<j7gbLf=JM(>ZPq?kKQ>mJul[_08]0>.'EBHD'[\;PJ8;ude?`[<=R&2m6Yd\!@uRT3V`s$=,d$Q?S_&!jYc)E;Cl"A
%1UrPahQ?]UY(E$#/o-pR]8+.#DH0HsL$gr=d!41%q0=cCg5pO>6i-c7gTPO-m)9J&!@JdIQ1u\.$-CQ=g/cY71i:I9&3+8[]X2=<
%Gs7QJ+2^j<1.T)7q'HC'GfX%VQSEPl!<+]<#-;DVLnmJ6?DO_6ARjP(ooE'hAo!CS@*"h6Cnl9=*=TH";E#o!EG7@X>Gt%2g@8V`
%pseWB>5U7.>.@M9hAWo"d&@IhY-q@DM=[NdQ>PmEP6%4>'e,K(FXf9gk6'X+Y.(a6CA7-AG%u/[1i@KbA?B[U>FS:NE`>=?0aQoB
%[U)-HT_:CU=0YV@e'7KW:/qth@A2N'#(&C?62GW.*+Ri^h,#W(QWnmN45TA.o5($rOOOS2NrdTpO2cIM0s!l\cjEU1;CA"@m.kVA
%R0K2cQD7A3%V-(!X&-!8Vo4+'6Q'pL(?Zl_n$;iDb_Pa$aBqac9:8$,p-7p1rp_[`@9nI"$uk'>**9/RL3ZQB:o2;LD=&Tkdb<Q?
%q"Ft"3U.KSG@8HXl_r77'aE%ip>o&o"Hf7rJ)RnfBPF5kBFq]+<U5jA72H2CdEIVJodC6$!.#[g]q73Os,.<Z`,;Ba%T<UO@Xtaf
%3):\OUuNR5:Rn^q8)pa/OA_LC&uEVAF$O*bWck3Zm<mK*'6suZ"`4>V`#e`F$nPRL'eg&NokVQ6jbAX"FP7]LR]SkK)G(uHZ[h-Z
%%ogW]HaasWkrUi9ooih?q*%(>V(V.B.l>RU4clT**C69kEua`bh7FfE9`13VkKW$VIGj'1WE;NZcl04E+RmP@*aoi[L3k13Z]E4i
%'p@)>,S`O1iQ(;`h="`Bm`<\G@IgAo"=FOrQ<RhZ[9<YZ-Y^D7]410Z5X$%XCpZtCH5!l([aQ^Y;72/Y*42oR%-S0HDd]A&G"!,n
%MRu?c=sg;OgP5)7^X]J:98E;V`ZTP3ln86G9#?+mk9ZAIeTuNic3JE!m)i!]lC#j?^kA]:J5m(l<4Z^ae-F`TgcKu9#?uW3^[&+J
%]6\LtJ)&^uAOj9$\8E*dm@:\Q[dniQ]WcUao0Q_5mkMG(^Mm&!%9l^jYEj5mIP'sHk]Id3f<tH1bVA$%:]fXfS)6?H*&6ak6[Mh4
%QNkftqMOjOjr8g$3OUI3eRcU!I<j2@e6W5YrX_#JP:7&+:\Y6'(?%?A9#CPYAOn+62gD'E\^djeUZB[-c!3uMb=<6Y3f*2l/U,R!
%e(S6Iqu*Z*^SLir*<1YrOT>Af0iX<Pap9OTi[S4m6tW1';IAdC[9@HdK#$0Z2+rWcmS#[sWOmB^%q6?$K>/=L]lV:SZs)p%A_P@\
%\EdNFNStjb'HN]eC.Iq`V)h/m,uE63UKSQ!m8+IYkh<0JoX1a6YieQ86P*kX"fA^C.CXq*47`^89nV)F(Vjg+*^"+-p=k:I#oHtU
%O;74$W&o2V>F.ah'F(56oCINNT!#uC(9-bTQ;-8n-tVDr'GQoCODtI]R#K,F%%JJgH.'k5H!7@`>(m>Hd=lmYX'4mQV!lC5BJ_MY
%%:okur%V8f*.^f+DsGOBC^*EI#DW7rnTS7@s(ZX2k>h;a;9tJhPJSjV"qQ$3NrU\Qrf3kA8Ja-9Yo]PJCRSrrE1gZ#;k_s-6DdrE
%ms\\I!N[OX2W*`-3lP##GcRD`+*9=VcRe\((4qj<BcKVC<Ebecr=!%XAM;HD@RmHNXIKeWB=l7ETJ=OYf?=JqqhOaiqb$\1e0FG$
%UtR-%i=OM5P%m-9[cEjkUN7d95ai>-=hiX+eDLW4fk?trc:.*.U\iM^JK9B'2BA*+1+lbD*:F5pZ6!ES^[nj1%!sAL=Ag6TDU]Vf
%3j=<!@d^170h>/:+2T^2e0f$5=&O=P8oVQra-Fa4)2N4?qU6NeF!X_@;m^*^H'BpY$Ic/!i^uf36E5=CdCmu8.RYUbCc7:\mHqco
%Ec^_M9_T$*-pt\]b7;iX4V"1*i[HEt3LMY*[QOitD]TV"!o[1n#[A^QnhE6jjD'dRd0Pn/P&=1-jE_tt:t_M0UTI+p*X87J*qE+@
%+261QI7#::Kj63Ol;A8*KV28EWTknN"PF![)=)ut%Qpe*aoS7W^0rq6Y/OO9F4SG/M3J5pEjaHC_Z-!+@$n'`*L$.$Ipi"u?t@M*
%;cp_?%"kKTD&96I-XCq#\m&5Th&<Lnn_UPGh'AGJ\f06oX4o@q#&7AaGbCfU*9,1X@*/)EB]R>Z)g;&6O0a,>mWL(m/`dX?\Opj!
%IotV'ib,qm#AUpKQ,q1Z)OXb,A2XF0],/^K6ebZe*N,6GepeG"6g;T-G*<i".uo:Hkc<uPchbc!/&aIT=.pM4mplkiYu`r?<mOqZ
%6dkBhE`d7dG=g60A'./R>`J+g=/.LN#FM;[kBQGGE650I]QocPAG<l%Cj2s2&Sr7`kp,r%>cfp`*.$hMoS:`Y=eI$)A/qcI.oHQ$
%)IJ^>!QpE)jUGMNj/u:G_\WaRRe+J<0:.*;YlI-939"`-o0JN_d0ic5\onq57N]d*FTnOYL8!VoC.i+0@Q]U4XuO/K49"/:DdI]X
%bpsEheVh9%_dHaf+KH$G!CTn'F>PLG2e?4dZOE_PM-lD@IWs<3bJmCkLR`7a9[&k'Gcd^ip>#ZDelL_k6$4hX18]EDZ^pu#k#X`/
%H*CQK\F@q\^U(GYg3d3g>rntBHF\<:@ICsXV3#QMp"mC7nEqj0^3fkO[I\3Kqi:uc=.>bT^U[dd%doaFF2ot<q&fEr"lo%9o!dt\
%eWkj[enXN9obaQ/?/E<G<4uVHf1oYbh-OB,b5:Li-VoZrD"b\:hd"p4:GAK7hn6GZIt$8"s7j1fHsU(!eJd2Egt$rOFT/7`VmDe8
%mXA:8;17p7VTBo!096`9]Bb6mrqj03rl?+]BA[&[CV8QQf@?.mc*+0@X__i<^MpB_3VU1.%+ERLD12`]/:[TjK>1GmXaXM9?9<#-
%TDG2)Xqgb]5@67VJ$,q:HglRk!h`c`hbLmCi33#Bo38&n>AK/5O1Vt$`B/2Hia\\3JSDtCF7[A1UAK+OrR<i4?HM$0n'A2N=nk1q
%])LXDk'FT0kiqu2G>=K_`PNMl<LM`(hEL&#:#g60DcZ:T?`JL#=^%l_HhLjP3WDSs\%R:k-R/&!Fnt-u%F]RFn%Z$flGX"9q'WA4
%+8`H1SlC+;EU29&22b]$r7R74LFhRp[bepEq%(XI#MUXY<Rr6.@$Aje:Z`E/b%k",\&LCTg:k&-^9r"E_o>%,@`GMIeedf#;h)LN
%D1:Spl-#64FQY06qm:e_:jVCi\qAc.`V\T,XlE;B>s!Ds/II'C05VZjf/p2-NsdK42fHrjDW3JorpYn:Te8$YEHHQNTmt9Nh-?)W
%<^(?4ir86O)rGotl]\^['`?@GJ,47s_9+u(Gp3?=Gd=V[qXN\emA>UT`nOX;eMPWgmA1$GCBT5LpLFe]PoXU\Dlr+3Bt<isehbAD
%m/8?p%e;jHo>co!rS/e8*o(&mNo%GYGOKs-QePYMgW^i/=+7=Or46tOe#YR%%M!bM5C96Q)i*SRq_dPHDJ(d*j29i%jbNSTq7(V:
%A97_EOU5guoXjS\PoA&'_>_d7X5)"oUK<r\LS\(b3bkem#TsG\ca.QQT=loUA<`[36"+p3TRAnGn?Um78$6KE@k462j(%\H)JU?h
%d*=[a&)6ka\p%V3?[7qr2ZHmeM%3S#YAE?P7NO/*Y;O18^&-?n\FIgDS&+1Wm'P<:F[Bp(9D*?&H1(0u8T_9oJ%ki/F7/g'2J9*2
%I't*QrO0S)FK^MPfaGumF8+!&Y+L#eB,gHsg!,=Zi>d5[&@:'I-m>:e_We)V#NY;8>X(7)B_fijGC)@MZh:#9+*M!jhffNYqt\7k
%_GQ]-/`Bk.eN-Bf4*Y&"#A3Qabcbl53_P'k]#OS0s5Y9>iRtFDlacVuT7#A)Rh'_DbF<eOZShdTq01&d(81qW'ot:4nufai/ag8!
%hNKg(]O.=7o8gYY5?ds30%JOQp%OI$_<K"P0ZL/=4i$m56K='5H%46AP1r&^I/omf]t`^SDk@C&I$d-InA59P)lLmm2r9%3Tf>*W
%nET=j]t&I[j<O6mn+e3koL&'&]je%Shu2?e_3\p+UUms%gb"Zs3).nrn^:NB4.A=8Cp#lZk@1OloA66/Hs&_C`)sK_*-F1%T)AKt
%8Y2M\OeCmkrWrR,hXBbAI%Od&C)mEV0&CU"bYIh(DZBUWFnmo=I:$9*Z(?Y%hqnN#fY5+4IdS3<p,`LSoIG&RSd$dSeRigc5&XU%
%TK`@^nn_sPmdD0gbaCuYhW=,$\*e,VBs4#Pf=+iOYG]C`kN3GQI'iOi>aS`FVV@\3?beKq=),a)Xs%.WV_@;,hYstV(4UbLT;rj\
%Z#,IjbH3=5qX.gAcT:uO^4BQjW&+E/&(>1lf<EkrBHWlN-gVma<J1<NJ$D[Q&=d$X8L'`M873@QP]90sr7r0m&$To=7Z4.;0mZnm
%!SogfrDScdYGT^>dmqU6JIm)BXX<]g!-oaR-d-H$,4*dAl=j:F[LYs&HaaX]pMXk;cVCEQp`j%IBQ-:kQE#:#Se,5U5A;r;p%&;/
%<g0e63db-KB_k@4ag60jPA(+&_.D\I.;`JUD2hUb08]!`59N8dYLaFWQVNWGOXCalfQeiY?$hU5?Ge.rBK_a2Z7L-ZnZ3\"FZhUG
%G0d8>3BDRZd*\/%D=,f.Gc<n[7P<Z@/8Gf@2&ft%V&pBfTQ.0Lgk1H<<h1"h7TPb>`!m#5I7CD0N4^b=/.(Vf./1BiI(2OnnJ35k
%"?uh:kAHj[;=<B@X8:uDKCT&q!QS5GIY>6m8C*Lec0qi#/T'?jPXVj3W!,cq=M,%<9`Al$_ju!!l]lCDWuK$aTD)Ks`H2Nt]mI<#
%'A#\85ENF.eloQ%6_NR;(*>_MST&f=i?+3/la"Qi40.flb_>A\S\<AF=0I(U`DKf#/Ec`lq46(7Dp9M+DQBfqZ[8-d1+egK(tHNh
%`UB:UhHqA^IeX'TebA5G`J&rbCYjZN(c*bg[A/q5q9d3?8ED$!l=D?%ejd$Q5D#GnFViX\^j\]S337!UN`g5b)rRInT.MrB^Y\i4
%LOc'""hMADq4AKW.4c95T`1YTP/;6:lC]KR77<.FlRiS@gKA('"P%>[L$Z^hHY9'2I=/Rp)K)o]d82dIn0!'^=^3WZaM1pM*l&0p
%O4N0jIX/<op>4CZWQN:>r.Lo(Rjpi):VBi_r72Cn&?Qoj*k6I#"hFI;s*]%e+Lgt1'p(Qu;l7qJP07YO?IGaCpILp/kA+)dj9sWF
%0MQ(!oRg?(aZi#%=,(eiFp6\D7JLYlrVZTe;&IS34)_^Nh7gg^=a;.6k':jZ\iL@oTDUO(Hd?l:eT\Jh0kV"<Q!qAOS0?/Ylgrf#
%p!Z-C/HNeFLPc5KAc^jAEe1X)fCNCKllJ7bTIcemn87R:H?(P46.<KO<2rq-go?]HQF+-0\[(`q<fc6YIf'!*cK7U0K?)HP(Y/Yb
%YD'TL^BB"*qrQPdh,TOXT5&9IeBXt=\[QMNhkNcGIe`EMQ=Xsh2uL#-dB9a&Suk1pm?F)';les31]+,KL1rJUDQYmeVsg.Pf,pU3
%%*QYsjmQj_XrGF?qGqG%Sb'6*CJJNe0GiTRDKY?aQZ'ERq:25=iP>8WXlS,<gK7QphL>90o?kGZ#?]R_0Rsp2FV%W$S"#0DDk/)T
%p?KfJ\,,BF\+B?\:?V@%+:Z417.)d9h<4'JZ'^$oI.U\mXe0KKD*6p_qBU9EQL5So?LC"67.T">43;[,V]:)CA!#V'#&CJ`]O#;P
%4E<Y;Ib?M`DZ!c.))?n)+?&ZB>9M/?0t'BIGu^[n94i,N/V;6&T6Au"=.d\Ln)]a7DbBh'/R2*t3-Q=cq.E0GrP]cm:5b*9:UBCA
%?uOeT-gjn.qu*fOeVi8(CXqdC$%qZt8JcqlGg88:K!-,KhsPmnn5!r(r`o=YVa]7;VEWqShVEO_(uZ7QTTbA1a.Fm<RLSfU04a(#
%#i@g3"j6l7qL$%^So[t_`SN"]I+pYB"H?t1H-c#uNT.V@8'[M1hZ>>+&?pU+o@nIi=.[+;TAQYK^9"m65A"tT+75Z\p($64n9BEN
%q,`(5bUbX3$4I<0-]dk'?a_&M#-pa)J6/r@-\3?ZgqUJ9H$JNOVu/8#fig8C]9%M&pMc-lSqmc9H?!uo$n*@5]mP3Os"n.b#K5n6
%CLd@+G8urn\6nESCYr1MhefjqeD%4P-b$b^p?!D/[!Rm?m/$+c/S"+io+`-1Md5i=^A`,"]Ms1Gp,2&[$b=O[V\bDWOR)2pcGMK^
%?Q3AO(t@mM,QCJXH)IR`Er"J-1\/.0]fB5uCb.D,S%p@V1UlgjIXPO<5C.kYIV<?B7n\&0+Br0EZ?l,dqtPR;c2.<M4TlsQ+3e"s
%5c+Ij#<TWq1T!(Q:du4$p]FP[T_jq+IE98kIH>`M2LiGCa]Gt-83rQ$r-%7(rcnHiA%cp[Xpamhm,[G-[i.hk7!jQn\'lasLTca\
%S%5)dNE<1(CZf]F>[Ud(>AZ!I*TYSJ3WEmZ:&[-MrcmIE\UD5*8])Xp#7$n0I/B.DSF/MV7I)9<X[UW%s+nGqYb#^N8EK(LcVC3t
%n1;%gORp@QdO,Rsa)>01UmZ!(]J&\hY33NjCp't5m(Kq+`8&LhO3_jg?#l!TXM-pO.Vu9KgG*Yt0Aj=R](D\DZ5T5l&':*)0FcZ^
%O(c:YQ?H'Qil_+)pF%Q<X06=1:]9H0:u;-J]_k@iQ47)?UP1?"[m20&m]X>h53TohJ*O`6jKj30`RUeD5L*`,48d]]GC-[1/lt".
%h#>N[M7ZdjH.]M.&#t[dbMU%7jXrXb'm[(5ahRW%C?67l2E+YXhS&Xn..Yj5[G&o)\"@?jh?ItCp6cVnATJ?KSoYEa\:_itj+A]2
%K>qm_FqhDh?b\h?[s@;iC@f`[G5f#!bU1\R#]fRu+^PY,gg!'mAk0m4ff,iapuoG'eSFdE`uc&6EmIMPc_'&EKAI2dm("^^s4l&_
%/oT$PPs1iAq?M&!O88@h2`)d@o9#$2YDMU9Et8A^\blJmV<:'`46Dt@f(cSXeWm&qGN+BUBh.Yol#CM_NRksZn*)oH,Ng\nHAa>l
%9ULQ\&ZFSFXb0"bFaJ2A^/9"<0_JoK@D[=RaSG_:2dmdlmH,=tj1.g[J^o5b>W0SA-rn:/dd)/tAF%)1>H*X!(\Pu.>]p+Shqi%a
%EB^>a%-uU/>9L':`^]Jse'5)13<,s=0/QMQo9bu<Ip/u&oqPDFk+B<ar%b]G+GRV5<W1I[A80,=W/!;FrhBt/NkM:.j-?L]2=@Mi
%rSjNU<iqsCn$2IoPSOqo7iOt<b(I3Q011'`6`sT@j.411]^.@nH]@E9IUVDP8L[JK*=[1Y]V0'-D\R,:?bt1$e_Jpcp0RB++?s6"
%D3HunHsF:5+0>>]?DJbkBEbSjIrAk3_f;+GMT54BNVT+Mo<<u,('jMZqARZ>X1L(YAi=@<Qq#F$@<JEXq(StEpPu\3q#SF?r,_h]
%7eiMWbl#r@k:gA0a>sp6-Za2JIR4G)c/Zs;V%qC#<NjZbl=1>AVH7'r5Fu]PK'06o?DK5lcFmJ1^M^cd[?f!/pM5<PhS]-<:Ogqd
%]d+*dXB=n&SXj#)FFFjd&B'#^^Fd(u-*Uf/+*YlP?:N^pP^a\M6JjL2je.t#V]"oT1;:N6\U"=q^>Cq!%4>YH/7ViiZk?[I%=PHG
%8Qg>0gL"':]fC@;n!\uEFJIL!I@(BXZaWe3oQl<%jAWb)k+%]/hYVM(hZs.eobZql?V7fT"M;@Yo%*f+J+[R<[_?tRr=&A+c,0F=
%e`F"'5U5sZc5Y?OcQY(AcY"ATO3_lo<VJis9.kTsD*@fA49+TB%Ffl?m6$6;WZZiJci1ahViGZ,rB'=@ngCSaHY&oB8&]iOo?dc0
%8WS=<Y&"l--oJ3VCeCr[iFsmK3Hjl;5?[Ytk:%5K+SiV:n!=qCW2cKIrO*Pg7$gNBik^dXGdP(`>r3(`J,K5L%XZZ2Mu8([jit90
%cK=l)SPtL*GX09t@X[4NU!8C3\3X]+GXmc907JH-IlE^p+.]bqTBdEdRoL]4(lR/4)YZDY[GO$LL7dl7MgO38IMGKPO?7^M+%49g
%Sur"E#39PA]%igcdbd9>bW7[d3Fh0qH-DCCla?FojWOT%o!l38nEJJ,/m-cCna9Hi)`kB1:V(B8eHUlq[fJP@=u!MXl36%VSp\D?
%Ye"4gHQ-Kaq9*g;6fSE?\;rRtgtUTi)jQD$+&CbpmofRQd/U`PDWf1R@5cl0Ip>&0k/6n5A#&6NFOsh`Hs#q)>Ar]H@./5J^BIp$
%p#Z@LlFWZI(-_sMCX*030h)50D[Rr'K7*!Ip[_DDfb:T_kJ6pt0tSg_UHHEjS)pEAZR>RPPtuU5jJE/+o,hL>mBSJ5\*KrmV8`@5
%Fo=[g)IQZcs1#BqpM):q^"N@sd"j8>QNu?q4JIEcWk37mYi/&fZ>8aOW(aiPOf)DD;a,utIN_A<2G2g)RAGn[pE'dRqQjD<S)<DC
%>'MIpaM5B1Cd\9'_%4:4Dsb3io9MSS3s'6@S"_tG_$T"DBqU(qotQ89_]Nk_^UJ=JCT=<Z2a!VfGWd.cl'l%1ZZORJ-pE%[6bU*]
%IQ)Y`n`=Y5nc:=VJF*O:oX!Fq#H,O!6MZ+,U\MIhfXa0kET]mFkfkbFSADj.%IVi;D)=FEG:J5I,%OADRDUuS\aH7@h7YL4Gs\Fj
%KSMRmqLq(toBp&S4\UFsH`VZ<]scs9Lo/Zs1c&1P%l7<t&cThl\Ce<>o_WQJLA<O0?)JOW>dKu#n)W;*5-pKA48d8[%\Y\^VJumT
%hs&o9#iQrX8YgZl+929;[uRHqR<<BEIoQ-h[!hkipB&\3i=?_46Xi&E9.E;4#1cemnrJfHKY`b%V5DXE!&=tQX:lFg`q90_lSu&<
%WF<.#A4,,FYSfJ]VNW`e0['_jJ8M!JFg490)0fT@E]dG]ht43<r`+Wt"4PEhV@u5$B4l(K,XV`.!^FJ]bTQ4RTauVjL_>5T"p',1
%q>l(`KE>-:5Z`O^E87PR)UL>M_Q;qYOK^-9e+W]uA`+Ar&b>*=B8EB1/]0EOScO0DD([@eFZ&QfCUuL$k@Y5[FKs*8!eA"4mUn*f
%YbPgN[h)@9hXY)./Am%(_.>Ah'/kUBKf7Ol.FQX1EsOqfeB6C:)do43!6>S^XPk*XNY,e&:n-3%gBo_%^]+L:>$8c7*,P>TSejXf
%bKdt^6PKAIiu#30MhurJ[N^1f^bT#0d+-YUZTdNRL(T'>@1a-&U.^lC=@U:e/=tXPAanV"ctm55PQ!>mXMpe:YZ\+295"BaTaA&m
%VU$LHjKK;#hnYin9E&m<q5o0JaN+G!i!MFb!(Lh>O9'b<HY.OMmLPDN't?4\OIdCn\5iTrl!&t0HqeBk#8Ro1AN?-ia0D9T.*=G"
%^s%Dl2f'<9kfqH-5_SpC%7Gjpm!E?q5g#kD>rN^1#G>lDp=[IILRCI6cC3u$G*YTS!Y`SI(;S*P6WnJ/*=I"A?lD*G351GZ>p'b*
%V(h5P6%oM5;_#-mZr/^cloLZ3&2qJ(A"n`O3i&uca%7"Vc+l8_6](S*0*pc,#9f0a:f<&+oj!O`f]Ak;gLKcZ?4[.L4<*XPQ$#G^
%,P2sMQEZS*7cV+jQr+g+LJ+ZNM[^V>fLUU5phZ[*!)HAnZNe'0cjY\eTJJ/qOW0l`4;Ja?6casJ`!V:oO;:OB69[\i.GTg%4sY"\
%_O_CJ14<8PdU=.Y53\AES'2Ip4of$L.#<\Mp$nC_h]`i6kTe#U"^K?KD$9E+ql/3dd'Ef^CIt#[(`ol9%Hl'T\NO%A4+q3*dW5=p
%j27s4R+Q#<MF-7ZS$m8LhrR:]Ari@N)-S.$J-q[TR(ER:/_nmc@a$7)HtEJ2&F?58i*W_T2Qe"(Ba;8ed>"c2NXh9jj5\45%#^HN
%3k2tO$t@/KP79j3,D#'99VDDfR))s[E6s_g")P1qYk9kW<_lYi`<6us59rc:M.t!1b^F(OYh6DMic4TuOoQp8rgW#l04KIG0J)%]
%:Hbp,&S9`R:aGEQbok1`i%Ga(G'?_iS!IX]Z"@[Ueb$(d_utPrs(-b7?/auQWt'RWggmR'!9&8e&!IEa)/KlEL92eC-YNV+M5fJk
%`;!`rJuhE#8Tgf3JS5+K<n"O2rF27t0VX@K9L-I'o6a_QV&B@$qSKpc<9S$P4Yr<DnG0k>R%>&;5dR5Q$ga0qO=+Ms(NgHbKP"<(
%GR-?dc#COu,_q4fJZL,7*ao4G1JhlBh,TN90VqWL_WoItW59?Mf.&Xf76/ERg/,[`U^(1^]b9R\,h.asHNtSAU&p;m%Oj%o]kBod
%Hb-nt?mtI'HVAjp+bkqm!qcV%,&m0(X.B`[T+-HC?q!Ya)4m^8r/j!:..UROaKeF/#X)d$S,O>9.B?(PNBd0*TltPfR+">?9F4W(
%KqZLQ!_Am!.a][.?m]^qYWZHGd&'bOO<>kW:r:\%o]`f;=HT&?=CXi?qM>>R!f.A>/!LDmf8%VhSt>'f$BG>0`(U];,nMmSH!pHH
%9DTibO_9cEiPUrn\c?*Qg)6ta+Q>Qbrm!h=P`dSR"':jEE!N1#R*OgB$=-$=O#2%7G)8N>/<'Z?O6N)sLKtRi)@/=p4V+qH:G!*U
%F<hZ2+B*!2E)qgld(si,Q5+A/?nD?_kR&GjfT*3kkUIr!G=uI_#aiEGUelrG7n:d$U)1?s*=&l+I+G^AVXR-&Th\?q%d(,8GJ_H;
%h3JKc=+iTWC,?#4C3!]J!aIZOT._r*Cf8Z.f2N-]QcLPNNeAAl"qdr8_HF>:0c6+Q4PJejD?!$-!UHC1%2d_)9X:rhY5f@"P#>n:
%b[H>haf:/?%nRZt6\KUgV!-2T[p\f!ZB4u1'-c!<N@5tVdU7Gk-U*E0Oq&hC+u5?io0?lk8POohF]d)nVA,[qXgE/6D"+hEPIdh6
%+:Xc1U^X/W*&7sh&<P9Q$K6_Y#]52()usLURMKDLR[,6L5=cZY3)mcKnZ$crW%-I28!T*T9sp.K5XC=K'2P[&-nTE%)r_R#!uZZj
%P]tAb$oljX%a@\a4FGY8XXS>2jO7C5c"q9DJS(4*0cI8Q-I-o\I$I,*2?tl)DoA6nTJ,&]1m<O-(6+:>0cNW]oea9i/V:R9,TX6(
%+!VW\oS?%:=uY1iA2TcgYEK<V0U%)3@_%4eO/aQHPBc*C/qjA*`&3qfclRka=cb5@.Kt0La-k.IP;fFU"uRu7PIs")//aQVc&I++
%FVN1maVr3kL7lU^1cHCaZ#ue$@_\;GIE8m[1eVZL70!DUU^Q\?#AU<e`Y$0_Fk(?AoX<K3=BA_.*Be/c9RST3,Sr"7"236i6NI#-
%>e')2f]'#i*s/5DO,oCKVJ4IHH5djW0)3Z;`t4P2d!uub'[t]36j&755QLlIR0\1R7@m4SPKb#)m4*7eD\g"f@Uda4+B3)]_s.=?
%h\dO/Ej'BteDX"<op6kGQPDD8,KQhK-@!E3SXl]/,$NfGdA>"(].+TV.2Ph\4L$J>4@;0]]%=b%Q5eODr5e03*e\$/?,\^1<-#Ss
%c(t*h(SdIYF)a%TO.L,:XqR?JeTT>/26iaa#uF,$.;9j:$C[C!.["#<f!RL4!L\Kn_Uen].[\Ag6?`G:Slec";5"e<Os\U"=KFpk
%9qj/^<Z@_C0F[-f+JpK6LR"\D0lP#P;,kf_)#F\l>_@R[ESjHYonK3[ip+L=_%Pj'b>%1=BK$:`.Z4'Sm4`Yk2IYWu\o<NH-^-Aa
%m//YW"tVcRLJTc,7:ZVg#[L_q88l;M.Uk0a2/71Ihs-h*_14-f/]1+j,8`[e'Mg'e-MXM?.5R6g-3=4T0sOPa4o5F`493&j]H=Y9
%U!OjlNS&!P>fB30/S+:Hg3>YcJ;ALQ`HecXiiPe>L[ffeqeonTmU>8<#L^-$o0LYHnt2$\+-dR\1O7,EAf.W>J<DB#2k,OCC]2WH
%MCjh%BG8LZo\"bbDQ&`I:-b9s2FZ$'=B"t2O?XqY8Tj]jQDLOIVa7Al(ghRh'LlZo&3qT=-$L7J^L(GJP9*6.:f?TmYeO")UX+Y1
%FD6O\AYIp$=r*;8n%%P;_hO^PTocJ^LkU5"5VZnc!kPIr.oDcb-_:m-RXsQ^BQV4JZshKQ%/>j=-/DT90,'OE]PAqL=DUP#%?_lC
%S#BE[a1/lP=10OtK5N/pc.PAA^fQW5Jl"u?0gmHb+6sLj,U,?`ct3UYY^DK`<74Q6D*iG.0q"aU"-X.8$ZBEDq9s)DEbG;JWeWRS
%["kZ2dk6m%hs^'sb:ZF?]8/rp-@;K*92Y$;dt+L^'@d3E]Wh2_q"S+JME"upLWuP!+&@h\g0-Cj/Tfk8/!q0ipjsHnnWC*d:n-.b
%15)FU?rAFjT!](A_6?78.VZAd/[kn"'Tc#/nUNc*o!'$Md-PG<Uh[7*C;[<@MF3S0TbVWqBTN4@\`nqqDR.egLQrnX?!H`S_]4ue
%;c6]gIl'e%+FPVjpKloZ.<Z)91k:5*bTuT;Y<Lfen*lK'`ue4J3d1Kmqi1dVPF]b_s2!R@kPo)eBn1];s0@0)T)r]<daGqE_`D,U
%cfOGZWtWV5BCE7;PBm*gh--a-)%h&YLbm"Ij.ir=089HEdQpSlN;1.*=>h]&!)gUY1AU:Tmt+Wg(4C&APmk6:a@IL&PA;u+L++[a
%=i-YGG.XF))iZ7d_jL_b9:udYYjd1:[-I^3GKBlGQ5$CpGfP@Tg]U@\((si`%Qc5p@qUmN,ULk`5o]scEk;O5%<6f>fI;r$=pA>R
%L7i[ql%/SkkiLm+_,*-Vd6ccL2Y]\o%-9=`lZ/&iBi1R*c@<Jfil`n"n(9W'Iu2]D2cSRuY\in*l0lC'7b:-J.=q"#^Cr;Cgjg@G
%XhDTS\1E#%?[4($SPV-m*s`O.M6ngYr?4<5^->@2Pbf3c/U1qBRQ`8Xc+l9F[^rKF9t#IY3jiA0mB\a4k;-[t&2Jk?./HG6o:^KK
%IQelEd_g;n:V$L5=)!_'ImGG.7"%0-8=Vf7,$lA97_HT3)O9JYNf0<0"C_MNotsmbd+V[+=R=Q2)I4ZN,W#]88jI9=5gj<DO*1]?
%i5cHR:F7ZWagf6.<=0l>HTit,'j)-Ah7c2*.KQC9"fH8F`Ue2&EYF'P6Pn'g+olJICf?p#mVP7Tn\mMY0WN>5!gAr,jOZ=YA[g_=
%%gMQ+BqtM!SeYZVk/+iR7kU+T=3IMMIo&iB_BYer#9j4GR,qp!,AfR6l<>b7#!Lu\g2J2I"MuuM/-'VQP"$HL&Ra7P`Ad?2q^<>"
%PC80>]?>eoSBENR#Q[?;gb/G",dERjlDWZr1W>lVmWCeEM<*'H"<^jh!%5@OMgnRbZSljr$c,XlL0QBT*Rln/:p<56Ku"M>G1eTc
%qOmOdi^j6V/Np?fZlbar6%V"M3S/siEcK`k%jH`J#>(\N)K'XkTZmJbgL\)eE5RS('sA\rXAKP8QI>t?#0"Mc#`="FL?KHo+P&dB
%aPjR-&.0C_!f#Yle4h*$(a0%`)=.t@==fah(P3gfbb/-j'Tk67W1c+:iO>KYZ.'qq0oQHB*/0dL%:]tG.T?s4YD#=DfVSue$n[JP
%8fDijE+?hXa9d!i=-JG'3L#7a:2/-A=Q94N"jj*iL%M_u:sA)6T;4afMml+'-=0HVdki'L,B66b%UtSlJSjIU#it*CERT;q.3X@N
%.(;T9UFI=G(D[i^(0D>*2=HFAYrT#j5!'Ed<ug/V*#iO(_M55Y1)`*0DZ1:R*B>jbEps.c#8Me.\6>:W,p\FK,[LT^+f-"W#2<52
%`#&^$C1[FD,DY"dK7VZ1neQi3&V0uk`o2iO%C7:<_QcFa7)@p#C*&+4E<p!iTHa]rPl'PBoL,uf)!jL?bL(0cL+7^jaL+%6Dl%RZ
%Y(UEh1?'KM)Y4l?Ah$1^!Y$CZg/k)0p[p)k"/VN]7>E9sL`sdL4<h\@YCFc3"57hgeSl>O(s#CnF9FFj<k<D>JJrb;d<ia'f*4*e
%'P`glK%cKG`AlA=`3])$%ENKjDZ?B]G8`3!*+A(lN?1PKqE`_Q`39R/^HKWb1W>kW)"efWT7g(7bq.8%]Q,"3JZ`%45p5S3E\t?\
%c7$Z=7;S\#7n9r[N&l!h"6IK%;.7Nd-nQXT)F+mr3+c+j=C@im7>@[;!@Ys=d:$A;5O-<)/k[HL#53`6qQGa8CcE\L>SRs/(F@;^
%nFcsD?3XUR-\RJX2Z88gI(=Y?i/UiuE`#Z3(TejlO@7_\@]!"$`3oc^#,CZ;$$YYVF;WZ-!A`?<_J1%4EFOhm;,_od0d7V1-j3L=
%iXfe]PM'mu^(T-9db7u)8G^@H]%EZ%S(<kS>DZ'p,\XD/P)fnbNHC2W7OO'Qpe]]!Tjldi_8uTX-N=!ALT\(F!K:)8-<U:;D^3sC
%2;*7]@Z6FZXUf,Mrj"*jL;E=jG\*/3Otc#pTUil?Y$`YJ';.uq)p/cBjHtf)FuWU4#@Q;M7h#dbN>c7_!b@%Ij-"0j:oIjb9tk'Z
%Wb(W23b*RpF"ZO5#4iCJO0Yr8@FS/<LFpp8AdAg3%/-+i_[\P]?R/Q$1c]`KU-9;V,Nja`Q3,rP03,l^,@>=O"#AZIl@msTOG+Ou
%?4\Q7&^2)"$C59N@Dn:\m)uFh$mG*5U2[IhhWop)3)S>YlhdJp1XMRFq^,[\-B3:V:t'bA&q)o>#Kk:3"$:IiQ1r-9.T<['e5=-N
%\1/a,U[o\]VKuG`JkQtN1#AW\%n:-Q;]71+PB.EqL**Y>g-=lq_2Y<L8sV*>.>hKf!t&oQJ"Y`7*k:_eNPfZ27iaJB/rL,F;i2W`
%!HG&'<K#,$aHK:.h:.&sEf/%U+adP9-<T`(f*=.JA9`8NckpiMG9AW56b_IE!?/XMFP#,/kfBIk<!4Gu?\(*Y6W;eo,I$8%$Z0*S
%,@DK8h:,cP/Pj/`aZp>PcM%iqI:0Z.hh:WPD+cug*,HSM$(fr\2@tNsNVc0c2;BT(-sco6^1[rnDHS<tcF2u"6L6%`,1::M'54X$
%OTJ8Q5skUEf*=3g$b2)(,HsITV+?.sfWKndoRIArTrd1d;+D+?TYg'b5qVpIptf$;>`M#+7k'J!?4qVE&nSR?'f8<SGj5#ss/=NS
%[sHW\"1KpQG8K$Xo8as&4\&cppQ%@M\:%T-&9-\I_]:/8",t':6sZ)@o(ZliEGdVb"E**p0:;T+]f*Cb;7<J%kV9RL\VlKa*Ct!<
%&)8!-jJWm$4en#WDFn/"_4q^paB-O\_+,p*a0>mY"!%q&q?3oj\i?H54gNFu7_M!q_3gD4eem'7-A1;Uidi>/:!.YjeF^W4Zni"u
%NZ.,sN^#Eu;&'@p4SqL:Q(72SkA[qjM%Qn"C9\G**o.r)n6L:UW7M9`A'bk^J8JF]muP9(O;l7.Kc4=7)e9'FNB)$P6hO:/&T9?.
%0/tF`$`#[L<rgb80r5WK=DLg?3/[d"K<7<24bI&_fIl'lpHfn#lk14O)oK^K?D)/^A-/Lk^*,uUF6KP/!%(mbRY$6E#)USZ6>-\K
%dgO4XLVA.MkpWce)X&>@d\tb&2a.mF`mFlI-ug4F'8%5WQU3@lK0.HJm(Q=e$o`L$3:IgC%[366mtb6UKZ(qlM1"pfCH,!BTR<%K
%Xtn&pj(f6M54jms>.ET9Z#=-%`tAgRKh03>"$&N$J`qq'3Ku6c71d.J$mZGo"812c(5jBq9J:M;4*HOSpmSq[F,U`Ci@sm]+YYd&
%emd$t1qC:RUP>nB==ZV">jLo)<)6buQpcIX3)N0;)Olb_L53&pkkJ\7YXn<I(cKA%e("P&:*mcF3MO_+T$Qql*7aGrdlkbkX,&$;
%eupM\<aH+V'TVGM`5C&nC(?444S:N>J#/YAS90M&PYF)/0nXanfF()r:6(maHO($[nBio4DmfGMll)WG.=>=%LM_HV:Pf6#l]*8<
%5:o%!3I#+/\X+qIX!)3\`d;Z"Qi98U*YWS]LPD#dPYh?%!Cbf]1Xt]l$,+BW0P;'*&F`,t*JMlpD0%N852r@(!"#E\)XK^qiWPq4
%ddqYe4&@m*+Jq+/!WXP4n(<!ga&(MF5;NOr-O`%NW#`S?&oYfela/DAcALI[,DhLL'^qjI9b^G1lTQ$)`(s2*#9>\Ol7#Z)/uNHi
%muj]0?7Gc7U.A<"fGMFp@!aro&5PAZLkJVq%CRE?X9)AI/U<T'=[jfk3)hPe:_Vta>+][jfpbP1Q'`8IPs\-D'#knCd.dTk&!N%a
%9R`O$E%lNf7']\$-/o:L%qf+$S41(Wk#b".P=NK<6]N'o>;#&dH5@lJ&L@EGi;.]FkY2i`Edf=mj3<CT<nUIRaFL.$6N(DS(hh.)
%7JV"PT;<ZCTC>j.42+nZlthDKR-3K5M^.PHcPR'tJo0bSE;u#p#2,0T%9+KaCMNtXa1M4$VBH;gaOHlm@J%,J<<EP(GC5ZfVLR)-
%K8gC!3%3>m-9ts#*be)@=?RPo&ipKWf9*"f-tOGir:AsFr]s$_[EEJ+kTtb]V2H(gE)'*L`gPW[kTtc$^Co%^X(^;t<49WW5tAW<
%P)=qP](MhJZuIAj(gh-$C:1k*+lF]ZgB_Ouq([8YqOF]5@FS/X[3\Zp\:P<$>O#?AY+Y=p\r&.C[XQXjZB?FW0cQ#ja8Sq+%(71T
%k:E"K!2J*NCjadPRQb><i@J!3k]$;^_sf4.g5lGjPl+&bMt@N@@]1k_4cr"mLabe%0FU_DLl$'FEB'gI+9f[gXiM6l3%+EAp]\%F
%roJef8$D7K)\.f.[j7,rF?PXQa&"lnfRV*c#AmA5\'W[:Sg^q45"aZlpC0/uW'g8<:u3:?^X#`3.T;V5o<27G3@ojn.\L(Db+c/e
%q2P6k]XFY+&T.-/TD2<2ncgJMe1/:?cVid2Fum#;K3m;1#P.f*B;p<gCR#!AYOnnPVUQf:4(5o:6Ysp"-]XOV>RC0P=+WsE\`Y-r
%>catKMXVr!aR2HTkMTT&rI^+KB`4aUO@6f?;+r730YWLAFA41_,`a9!,#m>"'A\ME&kGhsd\rpJCPbs,W?d@R(7V]TN;jQ&%i1X%
%2"@Q?:5XX]/VJe\fBCF*N-]?ANICuQZ$KFi6`J!Xf;jm4'".pT``=%LD&dSZ0^>UQ2TS&*ISCNl%(2cE(:/`lr[&<ulk@8A*3QJ=
%(o1dOHSbfs<4d(mlZ+?1F&,_@n&1_&j:J6M,EXnc@IYT<,)HFW59J]P,`I"S<dEnb<n(uOe&,j#Ci[h4NK74BRN8]U.K5U(9p28*
%@Ed-RjRSBKho7ad2T[81T-IJPaX!3W*dl-\6*6[PP[_6:4UQ=*(j+7CXtLs-SqLn/AGmccNoW!%6Xd2T8\^?.KnNo[Gq-iB4\TK!
%C#>SY#23(4+1!Z"4D],M_7P`D,6=:D.eXA46TrE\FNct`[NuGOd\*@i>#R)gRT,-^Duj,A^pMi1%E7Tg]7BF[`)04S<KA"b]RJ!K
%%68`AJkU]53@2-`hgTQkIUDo^dD)hl%QO1Q67a5oU$IRFT.oQ/_009jX!tXcK.WDj0X&Sf2OOd_a;YEVE"-q5J^7D"k4]BGH4Phm
%]i6_9%'b-SN-,[W;fen3kReS>'C8B=iL#2<l^p$!W6Om0DSImf:FF3#.pWYRf1D5^5EWlH(q+nb87`G[e2oKB8`PdK?q4!8pU`9`
%6ScXu/r'X/.R]O?bN,ITlph>HEeLEcp%;kAW1sRO<6;U$?cUgh<=rkl"7&qW-3hU#NNhWZkZ"a:>W%oHbN#+:rM,AiCeq3S.Gg-8
%s-gG6,Ye^>,ecnZjJb/9XV4&@H:lCG?'0sc^44L,6g_l+'G>Q>`.90GG*ob%@sW7>/duc")c%%JVG9P(H/JH'*Bhohda2jr3kg>P
%p]`)Ei,kTir))<8$s8_f@N<?1ogULof'XW%e50@YQPuHpF4nrhWZsM2"0'?"bDSLb`L"(8:g/:(b/N9TN*AsoF4<J0W[``>EZpp@
%&?C[aoMitR9EDt"bd4%N@i-73a>fkckL2Z\W51B6U+)_,rRPN:--6_T1.tqQa[ChsU3,C&[)H,b`,p`3J"V;<O[@k9O1!Ko_%IU]
%*Z(pmN\L/Y`IE;/J`utl"Hssh6856.6N=!ZG5cfFH!qm\PqEc/T#_XqT^(r5fu,R@5eTD?E%jjUCWYO0(j2W^a(%b'EeVJhV$rP>
%nX:"CWq[9fWAC(OV.8/<4@S=e0<UZTW3RTF6]QKO>nMX$Zq-E%?X$&V/Pg"A;`WMc8[YCcmT=OaW@1Rlh>.Aik%.WKN&L_^/\?k[
%Ull=-=,KQ_ZVtO]AOJXoO)[)Br_Z2!oLb7_jefY'#2<#@N(t9D)1k=)LB*`96[[c'WlbECMi&a[q?FXq[C9/k%G"\/\*N[(2AB6*
%jQG%g!HDbn3+FK@$*d!)T00LZ@ubls%@&si1H$+C-s;;)on'A;=BY94V#f:JAV,J6=[3S6OBiV"UL*Q?)laqr>37<H4^u6'U/6o9
%(M5_P$J"'2hL9LFHeG5\"c;o53o\-!YY5@Fo\&2,PKQ&5hFcngBLOXAY_Z&uI;C=02^TX)@L9K`O4BC_^#$`K5Z3K.o:/pE(O@s,
%nR6qh?&QZGh[hOd$VI6H2lhJ4'^k6*FOWseZn?H#R[R)_Yo8IE2)rJeh,R&N'6:K0Q=C&D8)uC/d\td+o^=cgmDmZD^Ni2@3lb)R
%dMJ`V7so?_BignCA">E)*ZqC089B?]hMICAn&P[68h!FKW;&!tn5SCfQ$8d^9rk:);9JMZitBC*E_8am3R+@WWp(-DoGWt#9do3=
%&1X]5_bo9"1mUg,QU;;"Uc\\o7GrN24O?-'^:orLKX8hVnl2!TA#k:8kQ:H;c[G7M`PLVHqdA6X%M0tK--<+)ol(`[?Y*9Ye=Wg]
%3j)FtTVatclaPn;q9V2aXq`6k-=N'7,N10Q"<Km8$kBVmY]5Ju>rc-&URa9@L\`Ko2aYT7*FBOn_js^p+`qS"rg?68MLMRY=6"<]
%5a4QHQKtMJ*13ju(E)&qY--HP6@lDc>?'BP$4=?'7ST7_`->)^Ma/&='KOHlD^^h(\!0%Sl_%,g@Wf;@9NZ<S)lhTu2Y!L2>ueP5
%J"feM@d0/@8.eksOTCW&*O\S:mlHS[B=OsjN2oPT?mPn=8,*REY$AT:(cD(df9(m1<L8j#/Bd/mU.-7j.NPr3^JZ!_'aYV5eFf't
%d*WGLrA0H0C]nccNp2<^c#m;ZV;TDj[/BXD#o,!WW7.cnnWbeVHlOP*fd`o)ToMnJ6mK^)m`i8EXi\,A#nu4C?:%$L),EI&YX8:@
%S#\\-a^De8k&('lrYkU+(6>K[`<ppaVWt+U#Z@Q$e\+6)`N,II4rZO'J1?K;W:HFT-SC#MGt,RJ67@*GY)B(MVCJ`"iIYV8MqW`Z
%RO09p'hnkA,ceJRcNF`H8Xa5?#JuVaoMha2eAZT9<Ar-a6t]boKhKo";1p:H;IPW:&ZAl,VK-3T-k3dfqr\hO,.7uQ2l,(4+bFD.
%`0K?*<>BZlT9)IX&gEVe#,2*5nXj<_ej)j?aCb+k1MT<WrE82C^8ea*.iJbH=90brX75u,;e7;[0G*-U"J.TuCn:8A)3hk^kaH,U
%a$[c`?3a*25<9j+Z!eL7MSSi6D*KN1lF,T+E\OIRk00FLDf)HMdY+#XN/Ff]5cg3J!hTl9p_7@D^+'gj`SbmG-UtC76"rt,47HPK
%Q5Ld+8N-R^R7;VY<Fo$TNi'"L;"IM$@SQ#\W"l-_<m]/)F,5>]FesT;&IT$_0[>/n\l,l:'I(`L[FG\*P$s>+rLa6G*P$&>(/D33
%!e_qYPoUZo4VNfs"6-2&f@)sNpRUQke]#^3D%R2$OS:6p.UuFKOGhmrl7s=7Q;VN+?d;lUp76$''^VU8Itk.5a%"%`^e@bR(0>(O
%id;P_NN6nkXObY4em1_7qiRo,$HC9`W_0aR/j=76C^He-2BUYarb^^_j"sP:`%"aJFUb?>C@P4=<E:5K4ZKf/><Q'%jCJds"CqR%
%g,pH`%g]3Pd[&Nffhrgid>^,O7ZqOG?fh7&T),$L=*:FX:6]NA?EK%s9/nCm$<M!$GuR3R`m@0ni#6F']IV>lIgI@^A/7(8:G@0-
%[utK^D(:^9Ato%%#WlBu@1sB1N_SOa]g\^K;c,$5#HL&:2,(ZbGMW,=Na^%qUueHHZjTQ]BE%lC9Au@>MbH!SdOm<br:_"r55tj\
%h-]-<gI'$M+=3^oTJOVmQ7;V89HVTFc4D+8GgW0*85Yd")?JamZ*KNHl:'UEDm'1h\LmPpUL)Y,r$jWA(StQBHr?qB'*?M[iT"W`
%I+VHGrS`6bN/N\M8&,'^B35[#g\&`LpZ%=<\)2&a1J=.H_nU$J&3;J^RV\D3+nULr](pNn/NUJpc<'Op;G(bOEeH*[*)lDui>%W&
%^:BMt=BFd&@crM].S>"\p!d8k2!(mgF<nci-d#WXW5h0edmK#JQ3>+&bTo%j[\Yoi\kt8%3S$iC]3?ObF4<ZETmPS]l"\9I*mWWY
%3Iii@011V`7T,0`RLLli7+V\7_C5oTYnjd1(dt/4R^Zi2p6t8YW]<=)fVjdG@X8)Jf0BI<W8P^.WIaGilFg[U"]K[AE5`Xo6_WGk
%P,ZR$Y^#GjS;T.Iqil8j!b;@r7K5Ds/m5V2]UC\9D/#<Jq`loZE3gcQ580pU>"ChgHR)QX?f"dk#%%_W_2J_CVm7pjV4&]#qfYcA
%c67j0#&%-k;^uY3#'.\"5a;H$f4h3icC59fP2;%>^luWlQ6ggtWKmP]-S,U:0dNI+oWuNI8#+M>'SMH[hgE`6n#Mf>kc!M8'UGQ3
%U1.Wn=^IH-_?_RP3lJfqK#j+QpWtHg+I%JMl,:FE+YLlh\S^SfN9*[1qRU3[A\6F^,bC2h[;CV](\2WsIV_f,D>D?LTni[/'*kMU
%^3ppM;7?X4/5?Dg><FqHYY,<SHj*,+&M)5S7U4&p6P\9fb&p:Za8U95Zl,`X8NP'Q6S5;g_6:Q%qZAD;-u[WjJ;4ImJqW:2?^H_O
%Hlm&I<MA/s>LJ"A!F$Kbb@(Wnp4Ou68sVl5_!nT5YlLk`8JFQA.N)7@O;s,C.ME=))t4G?oI76WH[8QMF'?X]l:c8!:"fG@'r4<E
%.FTE3TG*<:RIg;c$?7\<8]"XOacL7uj5h@@e!=qPcIKY-A-nOJjB;W[eqMs';5m9R;i"<l=I5Kg!u_ipP^'BkpE5XsdZLUPfLC<k
%.LsK?=P]h]^%#RMHA8\rS@:E+,`6G\=\4fU%8DEo5Na46[\Ogp2@7'jg`[*9'32!KKRgAA;+E0L7ka@N5UtL.Fki'%;&b?(RbNs!
%AWY8[Zn9P.8@DdH@:hEeGD"U3C#bk6h8Y07I,S24Y/#H7,o9WGj^`<)3_rd^Os^o:=EBVM*&VeDG2HicJVOOooSUV-=D]9_N]tIW
%ZG%M$cMnI\lGX#EAp!e`&`:?e>c(,nMQ_`-<6q4hNKS/fo+8tL&e9pC'TPl*>)h$K?("I9CiL:=R81g;.$GS&_koJ+<[cXa8?k[9
%c>3pu-aEG@:U.YW<#Vj;66Ii'i8[B$:.sHd&>,+Y8dniKBX$9mKIWXSb3[o-R7PoJX2ios2Uc6j[W;)hrdoa@+W/ucou!G*hgX9/
%0+N#6\bNH3osr5:]e1?khDku:+23*0I!LW_d1r$=D76qc/G)3#;9>G'fIA>c;UlVZ>I66I3s)GE7QG0:26?8g(7FFt(WE)XK2#E%
%H$k"Xjb/buEH2nh),i2QC!(_;='fE/i!.BE)>Zf5;tk']S5r2.#@DB.dj=O`:tA394@5=E#+]oMXc&X.9Fb#<$;,!"9A3L,=D.R:
%8Cuq/L<g1eO[I3fSj0]<ELIa'8(jH<KI-RcMMrf2%\tWf4Z8u20'a,l^_BHQ5IkfG?qVVs8NAQ)Srt1q2_UgZOiBg`6,f#86U,i1
%jkHl@+t`@A5@6Ws5\&2cL!'Lpi"1?0S&BAX6nU\fnI5DTnej2K@@O(r0![:!9_@0Gm98XmdR)Y3Q-;(1Gu^_FHHda/M:7leWaXuj
%V@M*U8Mk9W`\Rp=USi^DNN&J;nU?2HG^l\e>!sNW3#\eFg"+g;M/b):T`Gf21*afL\]>GmM+6g"r"k8K9*]m5b^KjD;q$k,>3ICX
%.rV@aoD<bHPqj#=@6o3GQfP(8l4'j#[)S@2(A_uL8Pi%V0@;_MAF;q)<+^?M,eMJQPZ?e+'tl3$U1cV@',WY5H<aOO/7L5F:3'c(
%;@8r$(SMeu7Ks9H2q2*4X0"U1=goQT$nVUe#[J4pgT"E#3]Ec]H<dV"99fu$BD_ti;7.S;mC$28Bd:,M2tjfIlDPhM*)[YTJL_A%
%k7<da).ZaBc\V_nG)tO43q?B'VLRkhY3tS2@NFoP$$2ke9XQ@SnRC#+^*63[]iZ^$e=5;+@c\gMqud]ai/SE(<F,)P:j#Il>qn.E
%DPMn4!&/XaY<RHR2MAAeE+<Sc[M-p^mBd?o/jkTLK8c-ZpSEBhMKU,#3@[d[W<YsQ`tHJ3=/\A;\sRa\nKg3Y?:A^8fW=jm\Z7AE
%X%>?1kKB&*a6\;p3N6fX/(Xc5\)@,"Tq`8MM)aHB0$2Zl$XZl<<<T@Vn$i(k&QL%:2P3DfGrN!o.8,%5d#X37:01']-:se9+sA92
%K.0]Q*5tSRA8L7:)KuX$"gHpl`+_K+')J,QjHmr8Z%6bWAWQu=BV@!$TP(5!/Ys"_Y0ncg$:8Pr?PIGHlEH4tk"s$!TZSQmS>.U=
%!j[ATg&eCK)!X[Bg1p_e'us2UXB)&(Qf?f-JP>QHD:&E+]H,**V,goYQkV\d4k(jQaAS"V/U>i7<2o4/aT5!e1)VBS,8P>D)EI\G
%:k=oVc)Q(-]/%q7W94!:%&GaYrLN6kRUT-mr&SN9phW79^IKeB/+9io<$7I&)!U+iaru];gL;/6P&^YY#V0Jp.B:@@L`BL?9nTPf
%!m=DYc(`0$l]Ta!h=ZAY:6QK_iri50#ahR+X&Q-enUpL!43I:eraBAiHTK&-Am#\g>gh\4J*6B#lrQ[D?=brPPfEj=;%d&*eSeR9
%6LCB(qIp)41lh,..?H?NU2tkrW"g/s$3jJ7SU<MM]Lf:6+'!'f)3k2dF7!,3='\?mLD'Aj1TIeR4k<,9*&)@LklTr%Us61bS'MEN
%JBf"O5rI*sG`!qr%GaCFY#Zk7B_hMp-05[PY6Q+^S(s$ti`Go7"r<^('Ut\7gZY[0(+JsK'Tj+(N[aZjZ$R\6Y6\*LRoqk*W>o>D
%S+=L'LsM%QI%,PH<TW1M7k?(HS5bluVm849muUNA;08^n$62U-B-+n;ceLog+Klq13.,;1$[Kd^"*QrIW4)%9?!=8V8pV*5_(jQk
%Ul\>QPY=^%nk0s@@Y)$5&ZX!Ijs_lZdKi`90>CYqFY!YAfMq^T`-'H5'_k3c)V#+8.<guR*k84TD3><#"sH]0i@?-$\lT!S8+9Ip
%9_@84lKba7<5f8!7+2ddV$g`sdU?_c8;@m$\ngVeihS5b@\kEH&O8T3'i$A]q'nk`n2M2P;fuN"AWYDjg+$%+[S,!V;3aa%/O%Vs
%Q8[2sdB\uDi/61LMJ'jV39,N'_b949,PWbS#t@*V_EINhM.VA@M/!p4rW`H8npMZa11F+l](@^(?Y3:C=eWdnP#RPapC,'&$nfqb
%4E_ps/3<0icLX;?]#pM93`@@5(5hrc0oInnAY2h<(2*\Aqa_*n3[a-;r>0/A%[0mZCeq/I@cu6U+a$P\(h2ZXU`/7SB56Oi3i>sg
%Z#aX`OZKC>&[?7h-':6d<>2?Q>"+Phj.E9-[!*sa73]4JlCuXA3e\/-Vc=V6Dh?Dnm:k*?m$h0u`6P>^8*ZV?4OOaSeOShn8qFp0
%WDuLSS>8R4&#n)MlC=Y@iX`"g8a;hA9]?RseOf#[VbgiLC6arC-Rk>U6Ya#l3i>q.Z0snT/\<Bg.@2l3>4n%>pFDWXS6j110p7bp
%)C;MS8Y&d0R^.2&<))*$,\</f-`ssOSWaa_r#nr!lltH!Z:/,r<BK<$oIHMT"OjBBe2^+r,^,8MrP[!<$7KnoZmmJH:/XE@3MohE
%WH3Y88k_CM.[o-qNKR<_`Qis?+Vfj!8gU=J8P1Fg_j"mbohA=X8Q_lh:&>%;3hqb)iee>L*ta^SW+lWSVJ@WkeY:e;g)_`]:&H&j
%\a$IdTqOsF>]jBf-lj)XB^t<oQlYf7Atd3l6YnH$HsoV`MY%_PR&H%*VfN0u6I_<2l%i944CS8uKMhjL)bQon;ZE%4\]JD.aEpR-
%o8]aHfV,>qUMJOM_7=ZsK?RL&**Esj^ohN'0LIS!r6,qIkUKH#"QLo>O=8D/p4D>j>E8*U>bs[M");7Z*HZigP+Iu%+VT-[;D#O&
%Ebon@CXl361?ab$MW+*laOq<-T9eZ`/+AoIn%60<VC,dq(e$eIL2Wt!\TtQ0Q)L23`qdIg1PE<,,kC5]=bS`\iDB:f;+ap[KAJl4
%n#ut-:sKT+d,liK-:3K_2)$51DCXo)?Y$jjl2B:"CoP&+8F<l,4_>7df@St\$?:ABaMG**HS2L"4XlFa`(mR5>[PL6PE!COlD\26
%U)+I%*Eu9+fq*29`)[$Y-r.U!@s49#gZI7)><hl$)D=cYBYg\gA!HmbY52./7/uld0%5gr<bJR(gP74Zapd8-ZA:^R0NZ*ZL9#n5
%U).r;@_A!dU6;2I,)qXB0HBcJX*<u_O8H2\]Ep.+:B*;jn<J=d"Zd_.0fiKZN$>Og"K>UKPXH>)+b^Qu6C2@*MZ\%B+rjCn2'>hd
%UDnRq>a$l7aH9Eq[!9=8.s[!h&/arcRG!Uu!tKp-n\*:ITdlA3?g?sM'[P53C1oJXr,>^t[_*]4d@r#ho#Zef2c4CQQk-(,'V`YM
%d4I%/?)lRS=&pTf8\p[n!Yp;rH1JWI6LK1GU;Tt2JdDF9H5A<kNS1tMi#'EuoKb<J7Hbr!eHWC(k@;&IjZ657=f<r8WNd:AB^%!\
%OjqER=69pGdWj0rPiq@e(8cX3&)]D^Ui:*Xrr')$'!;iVi(NE39`i"1r*`uB_"i4LAMp4jJ8Xu3HPkrH/q.J))'_O:#^r6tO)mrJ
%>StCNY?.s&$MOu$6[V7ZBI1u^EcqV7?^Hc>LL0#;#KG[OH)Lh,=V?KahB2Ft`o>.Xkc,).*EHgWVZ_TZ?ib%6Tqb9.0F<P2b*?qj
%-qXc-:fZ'E(^?uC)=oMtf2e#ErSTJ@>m";)0SC;-_A%Q7=;%9`nY$RNC.PMa$OO#!J3=>7A<kLN[J.SgDuM``.siHAh)4\eDbje-
%R\uZsHidbt8NStt_HK6i&9pe9/'J(VO$_u&r/*1L[JLUQ9!\$n'&#r+(q(o)CKZO8d""%qWHg"2(tKlK;COTJQ-a#tAHDkM>2dP6
%QDTu5k,\)BXGW&aZ<3,):B4^rjXLKGAi0.6q>7nSjffji46/)<,:gE5PeMsbZ6fs-V.p$bL'^AZF?*l`9PKZME^KNF5AK'DF'&k9
%\b+TAKl9Li]V-AY`6CM:-[DVm.Mu"QfMM*/q:lF%`[t@$;5ucZ/[96jOe\i21['YiR_%9^I2X28F+.PV1LmJWZ@&^acmY$Dn!T@%
%LM\aE*8_m]qe]LEOjpO/S(eIhW)6N*[UBA1(KH=2qb`k0(!f=r`Z[V2!g#`ce5L#hT+#e'Cem(6d4#ssY#l+^A[GIX^=c#9TCt7<
%AP5g4#sYF!9A6&4b6XT2$<.+A9k8Mm?%qO2P,ah<$_hj^W33_77;%:,`k&`HHTqM*7aVOL]@Z'WdTi/>L!Q3][T?>pB0TMMFXP1a
%0ip_,]VMK-(!U\s<Mb]82VEZ>"KIW)560<NB@Ik7WJmWr;63D!k=&p\T!g(Fi-ls"0bRW\J2mIAR%jDA'Anf;gsLFLdG;Obbq]-X
%IJ^a)<e[!&Te.L`"qJ[R+lTA=4"Q3a_,h8dNsmbR$=h"*#m8[3lgtTS`([,s+*=:!!Z4O#"".PJ0T*=n:hlgG8L[k84jW7m7rgf_
%>p^C&8rU:H<p)GNEE89`/MYEHYlD:,oH1brG?KEjqmr5l)N%K&FsUTu*H;mg&MKD$.Hug@Z1Zh(mMReEME,BWCe[&KF\Xf<_IM-^
%E$3Ru.dr/7G8$u7Z^Cal^U7k1OeW26G9m3@0>?&5+&sB_=#f[OX4>?8JO)1L^J@?h7!>%@#nD%DSXn'mWNOB67-*!A[+(6NlQhpf
%/#fPPd"Y$;#5^lDY^K;%U^4"h1Y@WL<7p;3jhU];L?(D%<7tAfj\i,8,e%5Jo\Fu2+KNVB.+VMT2=T?/gfq#ATR\=Pa-'Ur6(HAM
%#G$>ce1E1;#e>!a"KYVh?7!E92qrm5g)bEdh&&S!D!\?c<;A/J<q^lJH9,&rrW=l;2W7tH:A`kd`X_>hbLfGNkZ?_(Mt]=VjsgsZ
%.W'0,hp&gg1sIW-e>BV`j8G$5qdc'^^@J:670U4ZLTT>@[nGoU>C5Y3YgLZYm&lY"*Qu*+%&Qo-G2-1"8bF2*?5uLPbDFe2e!Psh
%fPcP^N2h1SIpig,?Q!)_Bb/2>)V5,-IUmac<?6N/s"k_1A"X=l"IqNCP>fc0$-,hkeL/Jk6,f7e30-5VARlX`V+]:F5G7'R=5^j,
%rNhPblr[L%LK/\m4ofrYR?4<f)``^jX]@A]N(R)a\MOmN`(4>ji0nrVk?3ZYhYm/oFtb7P`E(NCK&EY&OSa,WAdie`CI4N+Jn0@H
%:7lgPm\)n=pCs3[2cg0n:qbptW8#"Xm9Og*=@JaZoc=q[;<T/f&l^rO\hi=Cl=(WCiClCtW:cZ<e[%eJ:!@N=-N`*5Gd`OO+F.$^
%8Cn95TYIGk2hZYdMMPKXf+iU0mAF>(a#+M@nZA*]N2NAn\d^#MG6=H)@WR.J<9ap0K^"'mi+h>FTc*9ineEl>HXbE&ljM[R$;Sr+
%Da"hDnke[D@,Z-)^DlZQ(L`tC"UKhkof'/9]AgLpmNB"plj9jg:8El1EfYqTJEQTjKSJi+&iLqCN`3;[Su7VXGd`OW0+f\;B36$2
%,[j02L6ITCWH@$B\7]Z+E/[<6``:XqN,LG`'gu"99i`$$+5QqL%\?\$j-=;\(8I]V`n`&7"5dbN1X<lLT9QcP839de907hbn<GBb
%GrHQA<)AR=]\i\@rb[DOU#N=kNj#elMKC=M[2@_r;;cRZ(,S4tA-!.>/nipQ4UKV8'&C<*,R8n:THM2/J7lL(3].D;W[8rf@"F-3
%h>L(;]aWCn;i3\$aqE'_hW8`KFQ`EsRiP$A_(Xs3)>!(kch7o]<#Ho;>^3d.$_1W&)e+><'TL*DCgrh+h69)Ij-l+G2-DDeHg6EL
%o[*#MJ$sj_)NZom!YH4IofO%bD]<<mUr3S?5T[52AV6$Nob<scJ84`,ir<N33UrmHl@n%g>J(pEoU'_]ZX+n__2tcZC"NP8%T]CH
%op\i"mN9oKThQ^UdHFGB[?Uk07nHXGJ\5Ji\Yh.)W_A\X&a[WAC8+QM_Q"?T<LN@4IV0;ocgXI0$WEg^(lS_E6"K0;=O/U4-)fEc
%KPNAtC8;Huk]Z94jWA%-Ah?J4[>`Zjs/p-^WJX$#Sco!qgi`[/R+8LSp%AaqdJ.[HF0KOa`\`NdjY#>^:b]WGUZ'GQ*5G\>0VC;R
%FUH3\8.0(VSnh1_%s%nrC<_j9730QQfr@Xlp&nhbme5DA,CiV]m9GC>=V_Z*Z*Edl0ZFUb7P07aSR*#J4Zrut$EFK).@I:kfl+d5
%cWWc0ef1UA8aYPii+f,Z1f%2"A:?S*ou4XOp;rGIjCS(qBe0jFnZlI,I5pT'()I:"7(f7ADQ0nV*-1<jl,,*7Ot.CoYjD-PI[<>\
%d&FYCWT[\F_sE<IQ?Vrf=RfWmA1:Y0N]Gf%EL5rrYF5EMN7?m@)1]"TeQ&N/VU#gVa7EPGM(1a1lohZ1k=j?.YjM7D.VGhF+i?%m
%Ek%!Wb@/6HDS@(mSCAC4mG&Icfi4-F4"bF5b-qqona7!X+B&e+HF&RP\0\qt2+oZn_e&"R&QUt*g7:%Glu!iqU1kF24@lc^K@eE#
%q.@B))`)i2'#^Y[M-K24Y]H=K;lXE2N?$%S9R*[.jD>$f++'u@9;K.]B*7%sJ=819?8Cn`%SVX<&!7M_1\jQ#gmcZQO6j>ga]LeT
%@O4?/9XLfrEX^T-;0:O2WP7O_lr'cI:hA)#3@5jiQ'tjLckKnkU8?4>e]*4WC3Efk):L$uV':u[_RQ),:?@^RCrKE1-86VpHWKB"
%BUKa4^ZY72^mO_K[;L6e\$fiRTPJ:B/5IRsmb^DO7'?mg0DPl.a\Gs5:+_*"]c:Z_7,a(0k1_ULhBVED_YETgY3\`I(3O&)&mBG]
%o?;n*Jk6O0.W79sGmNE)q$=Ds-IebCh(15/>]PYe5n6.-(-aA#/>d,$5Tb_%f\Q=EX.!/lfSd"-_fMKff\$.SDkLbd'Z@ZtS&Ha_
%"ej]@n,*n-nN>Sgf?:i1ZX8nq(*Ymmf?[-5:oh!.((*>/Ui#.0^&;^FEM8I-B-S]KM_Y(Kih:2?aJ&oImT\ghXZ/c&Me(@)(6=eo
%NoRhbC+aeXrVfSgf=JH8dNkV0\[>o'Z?('tG)OorPhe*DY:6_XH3Rcr7J>b'ZT0ufTNp7^5GRP8L$I*cLOY[jZ_1SW\s3Oa\Q_*7
%]j's_D:qTt0ggQ-g[kf3NsAts@Z42@!KOc=Z+VlEA9/JM:)/UuSB;&_-WD7'mc*rUc!?Kp*:$4.'aeBp9*C2Q:,JI)q;Mo9[nhEW
%$ZL0WCXGSOm,o@(d:Uo:D7Z,-L2UJJJ^_o[pmtCA(D7N:7i=+g\rpN&U040&/IH:R;RI:!'D(?&s)*=4eu]oJ81G%gl7a"j5h:0%
%!7+`S*1:6Di6#ZnRPCmV#[KHZ0I4g,I7E<!8/;A<'[F:UD1T8([I[SqFc]f5JV/&%<3P`PkO+J,=ehU8Zo.MiO0;q!$FDH8hi+VO
%6STKBW5i0622BUa/'e$NGE9^:LmIV0\3GHs'UX0>#eqFaKseac?h^&Wl'-2XfVZr=UR7/OI5.`M6KhFNXdrBFk`cCZ;$g^n/IUJb
%JCWVIF'Z)3@#u1R<se9^RS4U8W*U`cPM#l:hTN\JQRU2S_#44oi<Q)j?2sqZ>*lndFs>0s^CtO#(IoT]H6NZdj4WFUgcZ=cr9-fB
%TS(;%cl[^_q=s[TkEfP*K.QZ80/$\ihS4I7"QSD=4T>!Pj6*m)J,Sp5mJWAYrqIF6n5&ij+$P)Pit(UmqZd3Do`b~>
%AI9_PrivateDataEnd
