%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_kiwi.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/11/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_kiwi</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-11T22:58:15+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-11T22:58:17+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-11T22:58:17+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6xnNu4dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS/UPMOg6czJf6j&#xA;bW0iLyaOWVFelKiik8jX2GSECeQQZAJTL+ZfkiMoP0okheoAiSWU7e0ascn4Mu5HGFn/ACszygQS&#xA;LicmtFUWtzVqdx+7weGfL5heJGL558pn0hJqUUDTCqrPWEjavx+oF4f7KmAQJ5bpMgOaZWusaReR&#xA;GW0vre4iWtZIpUdRSgO6kjuMBiRzWwiwQQCDUHcEZFLsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVQGo65p1hIkM0he6kFY7WJTJKw334LWg2+0aD3w11W2Paj5o1aK9DosVna&#xA;yRvEkV7LDGVfYi4cqXNKniqA796dkSj7/cg2kWledNbtpI0n1bS7m1gjjj9KW6hE8pAXk3NGIDdQ&#xA;Sa1IrTfayQH82XyLEHzCdXv5g3a6X9YsdIkvL0twEEMsU8a1BoWeFnOxp+z7VwCMbomkkmuTBtU8&#xA;06zevy1W8uz63BF06wDW0I9QsAjElWevBq8m2oQcJ4v4aA7zuorrZSmG9RWRtO0a3WR/TZJbljIz&#xA;CZyq/ZowJoW+30FcEofz5k8+XkkH+bEIg69r/FHie2hjKu4WK39T92G9OMgSs28j7KMj4WPuPz+f&#xA;y6rxT72zrPmwEhbyBmqIo4RZ29HmA/eKrFa8I/2nr1x4MX837Ty6fPuW596uvmrWeIjlstP1CJzx&#xA;T93JE0oX7bJxbjwX+dgBg8DH5x/R+3yTxz96jJrfl6fhJdaBLaB24Jd6fcAs5Br8ClY2cD/Wpk44&#xA;5D6Z/A/g0xMgecWXeXfMd/Akdto+rQazbwoEi0m6X6teKiD7KsaElRtUq2RnIjeUa8xyUV0Kb2f5&#xA;m6fJqn6Pv7OXTJAG5G6eNNwygULMoavL9klvam+TGOxcTamVGizCCeGeP1IXWSMkgOpqKqaHceBG&#xA;VkMl+BXYq7FXYq7FXYq7FXYq7FXYq7FVG+vILKynvLhuMFtG0sreCoCx/AYQLNKSxpvzL8uqxiMV&#xA;6LoIX+qfVJhLQexWn40yfh9bFe9q8aLX/KzvKyRRyXBurYSsFRZrWYE122opDb7bE4jETyr5pGWK&#xA;e6Vr2j6tG0mnXcdyENJFU0dSezoaMv0jIyiRzZiQPJH5FLsVSPWPN1lp0s9vHDJd3UEZklROKIgp&#xA;8POWQqoBO21ad8kI96CUqlj8xanao19L9XilHP0KFIjUHjxUBJ5QNju6KeoLZi59ZDH+N/1Bxcmq&#xA;jHzKjD5atwGE88jq5LPDCfqsRJ8Ug4Fv9mzZrMnaMzyofaft/Q4ktVM8tkz0rStAsHLpYwoT3SGI&#xA;sa9SWcNv9ByuGqkTc5SP2/ft9jQZk8yny63YhaG0k3FCA1tx/wCB+rUy8a2H80/7D/qmi2P6zpvl&#xA;vVJK/VI4ryMBvUjWOKZAagMskAiZem1FyEtZIbxsfKv0D7GQySG4SufRNSMTRfW4tQt2ADW+owrI&#xA;WC9B6sfA7V6srZbDtEdY1/VP6HKjrpfxC2K6l5Z+qx/uhJZXI2iindZbViIzCixXAVChCuePq9T2&#xA;75ssOphk5b/fzvl+py8eeMuR3Uk0tklMNxG9ldrxaKGTgwpHH6cbJxJDIh5Eb9d8E5EeY/bu5cQD&#xA;5FqTRaLxjIMQURhKkN6SipjDeMj7u3hkRn7/AMH9nRkcaEudOljDtKgkDUD1+GN+I5DmR9iCIfs/&#xA;tH8bI5QeX4/XIsDD8fjohvTl5819RpZl+ArRJ5UHfkdreAdqb5ZY+XyH/FSY1+PxyCGe1tXRZysY&#xA;SJqpcRkW8KN/kTUaeZqjqMsE5A1v95+XIMTEH8V+0oufWdUFuINXH6Y0krRnuFEN0q+MTvxeQjty&#xA;B+jrgjGJNj0z8tx8UGwO+LM/K2uy6RbQSWtx+kvLEzcef+77U7bN1YhR1Rt6bgnIGZvhntL7CkDa&#xA;48no0FxBcQpPbyLLDIA0cqEMrA9wRscSEr8CuxV2KuxV2KuxV2KuxV2KuxVJPNcUt9ZxaHb+kbjV&#xA;2eHjLKYqRRxtNMwAVy1Fj40p33OSjIR9R6NWefDFjeralbtqF7Yao/G3+symz1NFqYGFSpZR9pQn&#xA;2vFDy+JSwTFhj5GPPu7/AMff51euA7kJJJfWAEV8tIXjMgIpIrwIfiaMmof0tpYz+3EablcTEE7c&#xA;/wAffyPcV5ofUrOwvpmku4OU7t6DvBI0ciT0DqqSKRWOdPij57Btv2tpY5ygPSf7P1jqyiSOSb6d&#xA;r2t6PbQ7yeYtLdVaOUUF9EpNDzU09UfcwOxy2OWMjUvTL7HIx6jpJHaj53ivEt7HyyG1HU9QAFt6&#xA;IHw13YHnQK6ru3LZOr9g1vBW8tqcieUAWiLDQ7XSpPrF26ajrXLm0vxPbW71J/ciSrSSAn+9fcfs&#xA;hRtmm1Wvv0w+brM2oMtuipc3cSMJLmZVaVwoeRgCzt0ALHcnNYIyly3cekJx129lgXTYYzFOt4Ii&#xA;5NZJbNuBhDCgjkPFmUGoK06b8dhh0UTG5Hu+1sEB1XXqx6Fp2l3k7yvY6paRToJC00kU/BDKnI1d&#xA;lo/qCtSKP2AAs1Ok45egbg/j9XyUxs7IK1l1nUGv1Rhb/o+3uNTh4AObi3gkaKGPcGgleKSpG9AK&#xA;dclj0MaBP8QA9xP6tkiATqTy16TaIYnSxeTTLi98x6iy1k2MD8viBq1WcJy+FFHSgC5dPFGQo8on&#xA;0j5/grzSzRbwvY2cU3r/AFiS3WbnNHIvNTSrLIyqj7nqp3zWavAYyJqo3t/YwnGijz6UsZB4yRtV&#xA;WGzKexBzF3BYsf1XQ0it+Kwvd6YjczZISJrcj/dlo4IYU/33X/V/lO10uus1M79/f/W/X83Owaqt&#xA;pckigugrw200iySyxerBMhqk0YPHmuwoaj4lpUZl5cVbjl9zt4ZL2RWUNqGudPtrgMHUfGQ0g7Px&#xA;FFD03ZR4ZZHIYsTAFJ7uyuo5wx5vMfhjlQKZW23WBTVIIx3Y7/xyYTBHl9nx6yLTKJv8fZ3IJAkR&#xA;eVGA4mkskTBEU+El5KGd29ky477fj4RGw+LDl+P0orT5r+zuGv8ATELFxS6tyJfQuUruHkmK1Yfs&#xA;uF65EmJHDPl8LHwC8J5j8fNkuk+YpNIt01DRf3+i3Ege6sHBLw0b9/wAI4SrXdejbEDfcRJEuCfw&#xA;KSLHFF6da3dtd28dzayrNBKOUcqEMpB8CMJFIVcCuxV2KuxV2KuxV2KuxV2KpZMJG83aP6EdZ4ra&#xA;/l+sH0wkKBI0Lnma19R402B+1kc392fg4ms+lhOrDlcyT7AxgNMjL6iIpPIF4x/e25bdXX4oj02q&#xA;Foxnavx+w+XVxAr2dxDFbwDUITD5fWZZo5UZZRYStWssLryElpMGKuu3GpIA3yX1bX6/v9/mFP2o&#xA;O90iSwun06ZikJcaelwp5AwzD19PnRv2vSkPpqcPFe/X6v0SHxG6QUul1HU0MA0+JmvtTINtBEVr&#xA;Hes5t7uGh/Zkcc17cgWOwOWRxxPPlH7ucT+OmzIRHXkGfaToVv5Zs3tlKS65cqF1S9jFFReotbf+&#xA;WJO/8x3OarXawzPCPpaMuUzKBu/MGj2sczyXUf7ksrqHX7aipSpIXl7E5i49JllVRO7AQJTfRfKq&#xA;R2Voz6O9nqmlc/U09zEYtQtGieE19N5IGm9OXc1rz+18LVzc8XUkb9e4/fWzYZMfur3XtG8xaXon&#xA;l24+u6dd3P6Q0qKsfqj96qXUNx6v74ekglBpRjVuRPFgMnHCBhIyFECmYAIssu1CXVpfzC0ixFt6&#xA;nl21ge/VjFypLOHt1q/7O07AIewzHiI+GT/FyYCuHzYprbaxY+XNJuvJlu91byWt9YTymIsBZRXi&#xA;hC6vxZPhZtzuN9upGRARMiMmx2PxpmKs2jo9P85r5c80Jd27T6ndGOx0+waQXB9OCL1ZKkmgScOT&#xA;6Y2WvHIynjM41sBzRYsITRnv7vQbnzd52uBNHDGttZWKNGn1ikrmASmERqVZ5eC8QFdfiNVpkc2O&#xA;HGIwHL7O9ZAXQdppls/qelizliRbcyGaRPQHwkLUQtSQB2J41UA0NK0zS6rFLfJI7k8uf4pqkOqZ&#xA;5hMGHea9MOnsL+3olhJMslypHwwTn4RcCn2Vflwlp48qZutBqOMeHLnW3mO79Xyc7Sagg0VCGQSR&#xA;h6FTuGQ9VYGjKfcEUyUo0ad3E2LX5FK2WJJY2jkHJHBVl8Qeowg0bCCLSTUbT6tKsgp1pDKyiQpW&#xA;vGK2gUU5UH2j+PbLxz4hX498i0zjX4+4IBoXe44vGZbkbmNgt1cCvQuzn0IflTLhKh3D/Sj9ZYVv&#xA;5/M/qCrZ3w026eb1YjbS0W/t0kSRlI2WbjFHGqsn7VK1XBKHHHho30NfZuSgHhN/Nm3krVF0fVBp&#xA;bCun6pIWtpefwwz8SxjoduMtPhp327igxz447/VFM48J25F6Lih2KuxV2KuxV2KuxV2KuxVK7xLh&#xA;vNGhqkiJBci7tbgSVHJZIfUorAH4l9HmAdjxyOQA4zbi6seliGrWlxDfSwhXF1bM0jQwECZKn4ri&#xA;zY7SRvtzjNQfnsceBFeX2e6X6C4YKB025Fs5nElLF3IupbRDJauSfj9e1P7y2l/m4/D/ADeGTyRv&#xA;br58/geUgkpjNf2djpK2FwHv9BleNtEubcrK8EokDrbFmYBoSwrEa/Cfh7jBEGZvlkHO+vn+v5rG&#xA;JkduaP8AIelRWxv/ADfcRKLqWaa20lRuBI7MbmYVr9kkxL06Nt8eVazUcGMRH47v1/LuTqTw+gdO&#xA;aZsxJLGrE7nxJzROIo6drnmaPyxdWtnok19pc6XCWrlIJpYJXLbPCryiVUlO6OqsB/NnQYY7jiI6&#xA;cjzDcAL3KB0+x88+YtOjTSPMKWGqaJeObazldo2a0NPTF3bxpHwKmq8WhpT7IUdczJLFCR9Nxl+O&#xA;bMmIPLmiPNWn+VNS/My0s4dQl0bzZbhJUdYx9WnnEZkiIbqSC1GU05Dbr1hilOOImrgURJEfJlFg&#xA;fOc/n2Ke7thH5efTivp0SkNwGjLqXHxu3qKabceO69TlEuAY9j6rYGuHzRXl6Ka403XrNdKXTfq1&#xA;5e2djExJSWJ1Vlmof2ZWatMjkNEG72CJdGLad5R/MHWrTQpNXv2s4zPc3WtqJCl0yPIoit6whV/u&#xA;o+Lb7A9NsyJZscTLhHuZmURdMf0hPJUOv+YNEinvr3Vy831CS2jjJFwC0Q9FVNBLF6jcHkACDm9V&#xA;qTl0/EMYyNAMzdAoyfy/deTdFEt/qNpFdzn/AEbTnBlmYDZVaflCihK1d/T48iT3AOBqMQ1Er3od&#xA;36mB9RTCzu4bqBZIpY5dgHMLiRA1NwGGaOcDE0QR72kil1xbw3EElvMoeGVSkiHoVYUIwRkYkEcw&#xA;gF5xpSXNlqF3pdxJzNs7RoW+1SMLwbp0aJ0PXrXOizEThHIOv4+932kycQTbMVzFJ7mFD+8b0x05&#xA;OCq/8Efh/HJCJPJFhfIgeNlqV5AjkpoRUUqD44AaKlJbjTJK/VY4Q8RJKW4LJABX+8nf7UjH+X/b&#xA;zLjlHMn49fh3NJh0/HxRCaaYkSO5um4SHgIYVWGEEj7PFRXfpu2VnLZ2Hz3LIQ7y1a2v+jXOkyEk&#xA;Qj/R5D19J6mMgjujAj6BhlP1CY/B6/NRHYxeseXdT/Seh2V8T+8miUzCoPGUCkimndXBGZMhRaAd&#xA;kxyKXYq7FXYq7FXYq7FXYqlnmO2uptMMtmpe/spI7yzUGhMtu4kCA/8AFgUp9OSjXI8iwyR4okJD&#xA;5ks9Lufq13pLfWLC9QXVnbI3o3ELEfF9WkNArruGjJp1G1CDhC4kg7H7Pj+t1Ysc2O1mnleYK93c&#xA;xUWS+sKW2oxDstzbPxWSnyI8Fy3YCuQ7jvH4Hp+N2TVzqF9doI2uPr0cH92rQPazGfbikkbMAzAH&#xA;+RRUgjcbRMBHkKJ872czS4wLmej0C9gjsYbTR4W5Q6XAlvy/nkABlc+7PWuabV5OOZdXOVm0qu7e&#xA;9vLaVLezuJ44pEDSxI0ic0Ky8GWI+txIpyovQ7GuWabDIET2I7r+HuTEdVW2vtASG8l0HUtQ8ueY&#xA;oozLc6JNzuWlZBSotrzkZKqtAyFWpStOmbiMDsCAY/Kvk2Ueu4SL8uNNs/MHmC61i8sXVDztnu4n&#xA;W0Q3ckrSsYygWUzpz3f1QxB2FBmRqZyjER22+7zZzJAplXlfRPND65PP570u0uYNKX19I19vRMqG&#xA;MhuHJHMpVd2UutdqnfKMs4cNYyd+YYSIr0sp0ry9rusQWeq6tqb2TzW29npyG3bjKVkRZ5JGnLMl&#xA;P2AlCWG4OZEdPCO1X71oBMk8oXMRcQ69qKRy1MoZoJWL7DkjSxPwHHbioA7gA1qTggei7dyVW1te&#xA;+U1l055Hv9OkAGhNKVEpm4fFazShVXlJIOSO/WpBNRvRqcAPqHx/WiQvdinl6385Q2mq3z6LZ+Xb&#xA;i7YyPcqkb3kkpBMkcMcYkVucn2Gcn+bg9cGU4yQATKvkmVd9sV0nz/5t8szzaZqkMEGqaiIpLRLw&#xA;u0gLEq0kjIrzyMx2VJSCKfDXZcvnp4ZBceQ/HuZmAPJPIHu11K+t9QBk1RHDX1yHilR3I4rRogij&#xA;4FHwcFIG5Xffn9bGVgkiujRNF5gsGG63ZRf4608SzG3s74QtdOvGp9GQxGnKtDwuOv8ADN/2YRPE&#xA;YnofsO/6HP0cyAaZRD5cglit4QqpPOtnDzO/GW+LXHqU8I7ZQKe9euZIwAgDqeH/AGW/2B2Ryn7/&#xA;ALNvvS3UfLtpPbNNGGWMwNeCPdiqS3HoQRLSjcyPirXocrOOtx3X9tAMhO9j7vs3Y3Jo19pF5NbR&#xA;vVYHaOW0cggMjcWCMNh0+Xj1qI5JWSJD1DqygNrHJWubq3toTNcOIoxQFm8T0GUxiSaDYSBzYtd+&#xA;a/rEUkJiURsCFcNvyG6MPk1MvGEhhxhPtJvYtQhS6A4zxgxyD50J/VUZVIVsyG+7N/y7mH1TU7Wl&#xA;DBeFx03WaJHr/wAEWzMibhE+Tjy+ostxQ7FXYq7FXYq7FXYq7FUo1bzb5d0mf6vfXqJc0B+rIGll&#xA;oen7uMO/4ZLhNX0YymBzLArvzMo1e+SysLrUtEvgs6W/1dofQuyaPxaQR8Q9A5I6Nv13yrPLGQDx&#xA;xEh59HX55wJsEIDUtVl5pJdaRdz28ClvrUrJDdW4H++7mKQ+oPZgD4k5ViyYztGcbPTcg/AjZqjO&#xA;PQpz5St1ufMOkJKzzo9wb6WWUgymO3RrmMyMuzEenHGafqwZDXEf5o/t/S7DN6MFd7Kb1ZLqKdTI&#xA;0cs4b98hoys9fiHuCa5oYyqVnd04Qnl3WPIz3ZabUp/LOuW1YJbl76kUoU9kvnlLIxqQrpQdj3PQ&#xA;xhLhuMQYnpX/ABLfRrlYSrXpI9Y/MWxjla68w2RkSJmtwV09iUC7BWuF25AmRQgDVNRTbKgOHEeU&#xA;T9rMbR7mTi38ta7qn+Eb7VJZmtZRcRaLqiLNcxSRKSrW91yZJgqluSy+rUVB2ygGcB4gHxHL4j+x&#xA;huN2UaJaDX4VsvUnn8u6a/1eW4uTHI+oS27UKs4ryiVhR/hBZgVO3IGzDho8Z5n7EAVuzjpsMyVd&#xA;irGvPUtvP5VuRDN+/aSFLGaIoSl2ZU9A1Yhf7wrWpFRtXfAao3yZBAecrzzHY6F9a0g2xuICHu5r&#xA;l1hjWJVJdxzDL26Fh881WERMqlbXEC92Lz33lzUvLcWr63eX9yyIFu5dMe6eAM2xAa2AiI3FRWmX&#xA;8Moy4YgfGmVEGgkulyQtJKmnVbRo/htjKIlnVwfiVlgrHxApSvFvEd81GtjES68XXn+ndhMfNMcw&#xA;WDDvO0sEWuaJLLIsccK3EkhY0HFXgPE9ft04jN32QLEvfH/fOZo+r0K1uknktGFP30lhQHs0lg9l&#xA;/wAJPER92bWMrrz4f9zw/e55FX8fvv7kJbyxrbW8zn93x0d2J6CKF5IpdvASrkInYH+p9lg/azI3&#xA;P+cw7VC51O7LmrmaQsR0J5mvXNfk+o+9yocg8+86X4mvktR/d2wJah6sw3+4Cn05naONC+p/H7fg&#xA;4+c7sj0jy8kFpZ2dnpsWoeYLy3W4vWugrRW0cm6KQ6sI/hIHTk334zyGzvwwHd1YxArcWUvmivfL&#xA;+ogS231UXRCzW1eSI6sAxQ/ylTyX55RkqXW/Nux7B6H5AjY6lq837HC1ipX9tfVdjT/Vdd8sxfQP&#xA;ef0MMn1M1yTF2KuxV2KuxV2KoXVNTs9LsJr+9cx2tuvKVwrOQK06KCe+SjEk0EE0888xeb/MOqOY&#xA;tPjutG0yM0e5aJvrM3txUF4V9+vyyieqxw2iRKXvFD9bg5dYOUUltZNPglM1tGTPcVUTuweWQfyC&#xA;SR5I5a91Ein2zXZjkyfWeXyHnQAMffRHm4EzKXMuknjKswYQrGaO4DGFD4SwsRLbH/KQ07k4IwPv&#xA;v5n3S+mfx38kAfj8c1lxcXfpyKwZ5UiLNblwJvSp9u3npxnj7lXFfHDCEbHQXzra+6Uf4T5j4JAH&#xA;4/SOjKfJxaLzJGhYFjp18gI+EMwRCaA0/ZUmmZObfHP8d7t9ePQE31SMSWTq0vopVeZoW5KGFY+K&#xA;lWPP7NBua7b5qNOamKHEe51EeaJvPP8ArXlS0srfVdGsoLS8YpawKJraV0FFP+jwRXiJ9oCjMCf5&#xA;R23+PB4gu9xz6/bs3CHElupaF5v0LUW1HS7KDzFqF+zerps8n1iK25EMsnB1geNiPhBHFQK7dMuj&#xA;khMUfSB17/vZAg89maaZfalN5mtLbUPKiR3v1UPf69GqejE5i3hikZecn2gmzePUCuYsogQsS2vk&#xA;1kbc050e90/y5c3GlXMSadpMknr6bdbR21ZjWWBmACRuJasoNOQbapBzM0+XijV+pINhlmXqx3z1&#xA;ot1rOjpYxzrb2rSM99I5UR+kkErJ6gbZkE/pl16MBQ7E5KJplE0xPRbWyc6dYa5fQLassN3oWiST&#xA;qJehIaaJwJJJAT+yxjr0RaZhZ88jfCNupRKR6JP5t8oW+leeLfzPZaVLfW+oB11ONbhEiMrLwHKN&#xA;43b41Y04sBUb0G+DDm4sZgTVctljKxSaa9Zfl9Y2l9oKX8ei8wst7aQojq3JPgMkbpJVeC9FI+Ee&#xA;GQxzyn1UT0REy5sasS17eyXtxdte3NtS1S5jUQQSRKoaNljjSEOOL/thuJqAdq5q9fkN8O1c/P57&#xA;sZnomWa5ref+bnlv9bvFtwrixt4rQK+6maeQSuPojQfTnQdnxEMQJ/iJPwGzstHjPCT3phHd3Mal&#xA;Y5WVSONATSgYP/xIA/PKxIh25AVJdRvZQ6vMxWTkHUbAhnEhFBTbmOVOlcJySPVAiAhWZVUsxAVR&#xA;Uk9ABkGTz27ht73Wo4Ydobu5WIE7fDJIM2emNX5C3EzvTNdmu9J8n+YdYs2aO+vL51+sLsyRxzi3&#xA;QAjoFRdvCuQxwEpwB5cP62EjQPvSrzilxczaQk9WuJILJp+XX1GEvqk+9FFcoNC67z+hvx/qZr+X&#xA;sEgtdRumACXF1xiPcrDGsZ/4cNl0BUQGEvqLK8KHYq7FXYq7FXYqhNXsoL7S7uznRpYZ4XjeNKci&#xA;GUj4a0HLw98lE0bQRswHU4tct7DTNWS7kSbUYFa5t1IdPWT4WYLySPlJTkyVcq1VptmqzxxwyGNb&#xA;fjyP6Pe6OYAkQl8esSLHKt/BZXPrECeO7sZITIPD1LdLVduxKtg4gSKjy5cMht8LP3hFju+RRTx6&#xA;HJFGbiwv9KuIxS3v7R11GNVO/F0YQ3DR/wCSVbBGWORNSG/OMtv2A+YKgxPX4LF8qWmoxsmi6hb3&#xA;8HEyfV7dmW4tZqbSR278Z41O/JCtPxqz8XH6iL8+fFHul3+RCnijuR+1ZpF9HY6jouoO49CKaKO5&#xA;lJqBDdIbaVidvsrNyPyzN4blKPeD+t3mpjxYWa3lmrF7e4WpjcVG4IeNqggihBVlqCM0EZShKxsQ&#xA;6IGlC0j0c/WLzXdaurbSbGQolgt5dPJcOiB5P3Ydm9NQ9OMa1NDU8eu600p8AJ3MvIbftbhafR+S&#xA;fLyeY4vMEZuIrkQLJa6MjqkcCcOHIIgHpg7lgCfj3HxZd48uHh6d68ZqmLa15w8v+Z7Oz1bUVutO&#xA;03Sp0mtoA6lZ/iBV3hkRRz5x8IhyIY8+qq+ZEMMoExFEyHy/HVmIkbM3W78wan5ult5URfKSWp5w&#xA;yRK63HqICzSSNUDizFPT8AS23GuNwwjju/XbXQA8140nXJYvrHl3zROmlyJPLZxR/VbmL1GKmJRL&#xA;LFMzRcjJX49hxA2XLBq5R2kN08feEm8zHztJ5Zub/wAwX9NMsEeW70+xgVJ5jbSkKzvIXQxsqCRl&#xA;pRgafZ2y4akSPDEc2QkLoIvXZPJPmfyvB5puILi4hgUrDLaqy3sZkf0ZIgqmvIOaU3ofiXehzHxe&#xA;LjnwDmfkxjxA0hb3WfNQ1sX9pNYR+Tb+Llb6nKeCRy8P7u8jlkj/ALySq1RQ1aA9xhGOHDRvjHT9&#xA;SgCvNjsvHUNeh1CC0TTL7TS0E7W8kN1CHQq8TQCaJuCEPzAAA3UjeuY+p1ZxR4Rvff3fArKVCkTY&#xA;2LWrTkztL68hlKFY40QnrwSJEVQep96nvmpz5/ENkANUpWs1rVYNK0ye+m3WFfgQdXc7Ig92bbBg&#xA;wnJMRHVMY8RpgFrZ3PqW5kcNdK8l7fkqaPPOCOIfpRfp6Z0E5gRocjsPcHfYsdUB0Rkw1FmHABBT&#xA;9mRafTyiY5RHh/H9rebU0i1YGvKJSepdnlr9AESj6BhJh5/d+tAElR7e/lQpJPGsbghwkVTQ7dXZ&#xA;l+9ciJRHT7U0e9hev2sthfl4VKiF1lgYileNDUUp38MzdLMGW/XZpzR2ezeRvNvkm+0q+GtLNFpV&#xA;zdPd29yYzIscjqgmtpgiyhaFA6sRT4juO90IYwODIalHkR1DjyMieKHXmxjzLr9prmuXOsafE36N&#xA;hK2+kwH7UjBRGGX/AF2NB7k5jZoiUxGIr9A/G5cjEeGNl6H5d0ttL0S0sXYPNElZ3HRpXJeRh83Y&#xA;nLJGzswCY5FLsVdirsVdirsVdirGBpJjkvvLUbNFp1ws2r2shAZPU5KLi3ZN2kFTzUgErUjpSmJr&#xA;8fFETvcOr1uKjxBg10i25NUWGnXi1zZJ/wAFF6kZzX4zxef+lmftouHHf8AoWLUo4peRu7QmM1Ak&#xA;1eQqSPFfT3+Ry2WAkfTPfuwj9bIwvof9KizqGkX6AXSR3lyCDD9TSSVl7grMFHE+9RlIxZcRuBMB&#xA;/SIH2X+tiIyjy2962CyX6g+n3ZeSSjfWPWIaRhMWcMSGf+YiteoPXrmx8fiIyR/BDv8AR5I5MdMw&#xA;0DWpNTsuF23LVLILBfE9ZCBSO4H/ABlRan/LDZr9fhAlxx+mX4p1GowmEqRk9tbSRzK8KyCZSsy0&#xA;FZFpTia0rttvmHGZBFHk0Au0PWdb0/SY9O0fS47XWtUl/e3N06ufXkBpxjhMgZIYl+0zjZS3Emoz&#xA;cxywnICzIAfjn3/sbdiV3l/SvMMvmfW9AubmJ9FtkWW/vpPTmupbqSjLcSOa+m7KhVY+iR+B4k5m&#xA;SUeASH1d34/FspEUC16mneVPKVvoUgu77/ERnMs6KgnitJTQzyIy8BRH5cWXr8J8ckBLLMyFen9C&#xA;d5G+5kHly+udL82p5OitjFo2m6ai2c7Bucso9NnZm2Q1Ddh9oNlGSIlDjv1EsJCxav5TdLG11S01&#xA;vV7e/wDrV/I0Akl5cYroKsds6yE0kLVrENvioNsjm3IMRVD7uqy35BQtbfU9L8zX+kra248iLYq6&#xA;20ccMa2ztX1KqOLOslGY7EHsagjCSJQEr/eX812Ivqia6vYz3tj9Xsp9Ha2D6VYoFQXBCsZoFQIE&#xA;Bcb9W77U6A8MgDvxdSuxYVpX6P8AVnk0qyktNLuFjntRKI+Y5qax1R5OarQMpJ6Nx/ZzW64gyG9n&#xA;rzYzTEkAEk0A6nMBg8/1fV/03qCzxDnpVi5FjGelzdbj1P8AUTeh+be2b7Tafwo0frlz8h3e8u10&#xA;en4RxHn0VbW1jt0IXd3bnNJ0LuQAzmnc0wTmZF2cY0rZBk7FXYqlGr+X0vm9VJWSUbAOSyU3rsdx&#xA;lkMlMTG0Np/lyzhW7tYppCJBHHe0JCMKiQxhRsOi7/dmRLUz2J+H3NQwx3plflaze9802xVP9E0x&#xA;HllJU8PWdOEaqenJVct9Iw4I1EyPVGU2QO56Tk2DsVdirsVdirsVdirsVQOs6bJf2LRQTtaXkZEt&#xA;neJTnDMm6OtfuYd1JHfJRPfyYziJCix67sv0vaotvDcQea7dK6paQNGnMLRTcQwyAxSIzU+KPx3U&#xA;HbNVqtLwmxEGP47t3S5sJgeTFrlNahZkM14jDqGgt3YUPT4SP1Zhx8LqI/OQ+9pHD3D7UKw1OXZh&#xA;qlwT2BtrVPvUpIPvy0HGP9Sj/ppH9IZekfzftKEha3sL5XlW0slm/dSwidp7gkn4ZJGI6KevsTvt&#xA;mbhkZjh9UvPh4YjyHvc/RZuGXUg+WyZTpd291Hf2R431tUcCaLLGftRP7Ht4HfEUQYS+k/Z5u01G&#xA;AZI+bMdL1O21KyS7tyeLbPG2zo42ZHHZlOafNhOOXCXn5wMTRVp4ZJHhkinktp7d/UhnhKh1JVkN&#xA;OQYbo7DpjhzHGbCAaQ8F3d6Xp19psNuI7HUL6A3d6GaSQWLiGO4AQBmZ/wC9ZmJ6Gu5zZ6fUxNcR&#xA;9W/uvev0NgkCjr3WrTXtYt1udMYvNqlnHYSTw/3NlblZRKWcUV5pWdOH2gv2qUzJx5IgVGXQ/P8A&#xA;HVI26pnb+bLe78xaAIpA8ct1q1vNKCOKqszJb1NOkvFeHjthMKiR7v2/JHDsWFaR5GspP9zd3qpS&#xA;y8z30ccNxAxV4pQXkYGvwissJjHXZu1My5agj0gbxDaZ9O5muu+c4RdW0WmSJHq1tfTWMsFypKz2&#xA;0ccpfjQgsvOFfiXdWHgaNr5VGJJ3AA+F1+tqrZi8dpq8mh2uj3jwTWNtcLLBazKZzAkbkKkUp4Fl&#xA;9JitHQ0rsQBTMbJrwTKgdxz5fP49yDMWmUUUUMSRRIscUahY41AVVVRQAAbAAZrCSTZ5tbDfNuuL&#xA;evNpFrLwsYN9YvFOwX/lnQruWb9qny6mmbfQ6bhrIR6j9I/336nN0mn4vVLkGOjU3QSPGgjFtHde&#xA;hCeICJBwjCmlRu5qfl4ddgcd7d5j9tu0Euvv+xGXGsSxC44qGMS3BQHuYEU02PcnKo4Qa+H2thyV&#xA;fxbl1aTnIkQUsHeKPru/oCaP/ghXAMI6/jelM/x8FKTWAayg/wCjp6Vwad7aZChO38j/ABHJDD06&#xA;7j4hByfjyUjqE0NVkch4F9O4cfEfTrWG5A/aX+en8Ml4YPLry/TH9SOMj8fajrXWrWQencOtvOBW&#xA;jMAjr/PG52Zf8zlU8BG43H45s45B1V0UxiK1sYzPeXTH6tBX4pHPxFmJ6AdWY9BjCBnLfkFlIRD0&#xA;jyxop0fR4bWQh7tv3t7KvR53+2RWmw+yvsBmXIjpyccJrkUuxV2KuxV2KuxV2KuxV2KoPUdJtr4w&#xA;yM0kF3bEta3kDenNExFCUcdj3U1U9wcIPToxnASFFiPmiz8wxXS3V5ZjW4WUCXULdfTukp/vyEFh&#xA;J/zyC/6uYmbQxmCYExl3Xs6/NousWLyHQrtnVLi0Eh3eC6jcybDvG8kbfhmBw58f1Rn8CPv4S4VT&#xA;jzBVI7CdEIt0kWJ9itnFbWyEe5cs9PllcswJ9RF/0jKR+zZiZDr9tlZEXsSlvOI4bYAJGPVaUxUG&#xA;3quyqFU9Fqdjt06ZuPL4veZd9Vfu3dtotZfpkfihby+m07Umkjd4A/F5eNKhgOKyqGIXkPs/Fsfs&#xA;t1WmTHEJxoi/xy/HvHVv1WES36sht/Oj+ghnWJWB4mclkt5D4eoa+hJ/kSgf63fNfLQb7X7uo+H8&#xA;Q84/J1RxUU2g8y6Y3EXJaxd6cRcjghr04ygmJ6/5LnMWWkn09Xu/Vz+xrMCj54YLu34MxMbFXV43&#xA;KmqMHVldSCKMoNQcqhOUJWOaAaUm0jTCkqC3RBMsaSGMcCVh/u91oRw/Zp0yQ1EwQb5fp5rxFtdN&#xA;thVDya2owS0Y1gQyACQpGdhzCiv0+JqTqZmIF8vmvEVS2s4LeJY0BYIzuGcl35SEszFmqxJLGpJy&#xA;GTJKZJPMqTanqGq6Zp0Xq311HbJ1BkYKTT+UdT9GHFhnkNRBKiJPJh2tebbi/idbaU6VpG4k1CWq&#xA;zyr3EMZHJQR3py8Bm202gET6vXPu6D3lz8Ok/insGO3Mr3Filrp9m66Nw6wtHLK0jKaPIqsT8LEU&#xA;WviTU0pshUTZPr89nOokbD0oSa4spJHWWUW/rmQSLKDGVF0gD/bArwlUN8j88MYyA2F1X+x/WFJH&#xA;48/2qkdxG0gmd1cc/VljDBq809G5QUO/QOv8w6YDE1X474/qKQev481paKL4Hu41ZPSX1+amjxf7&#xA;zzjfcFTwkHb5YaJ6Hr9vMfpCOXX8dD+tbHfWyyKIZUMiF/TiSsoXmayQkIG5wud1I3XwwnGa3H6P&#xA;cfIhRIdPx+xGQ2d7MqC2tHgjiFYJbpvTaAnqsbCsjJ/kuuVSnEczfu6/ov3MxEnkPn0RulaNLNdC&#xA;Gxt31a7VwXeNVis4XP7TU/dqfHq2NSmP5sftKLEfM/Y9R8s+VbfRleeSQ3epTgetdOB8IoKxxUHw&#xA;x8qkD765KxVDYI8ynuRV2KuxV2KuxV2KuxV2KuxV2KuxV2KqF1YWF2vG7torhR0EqK4/4YHCCQtJ&#xA;a3kvymSSuk2sZNKmKJY+n+oFwmZPNiccT0cvkzyuK/7jo2BFCr8mFPkxIyLHwo9ySa9+XFrdQn6j&#xA;IVIJMdvIQiIKU4wuiFkH+SQykbU75K976/jmzpgF15X1vSbv01lNvLQhfVrFyTwVkJSQf5CSUHdR&#xA;hnIEeoWPn+PlfmwOMS2P2oqwi1+1cqqxRL+2G5RBqnf93atCp+bZiZfDl3/f/urYnQ2ndpq+q2iF&#xA;Y7W0YmlWXlEWPvRWzDnp4S5mX3tcuziequPM+tjrY2ze31iRfx9Fsh+Sx/zj8h+tiezT3tP5o1wg&#xA;cNOtQfe6kP6oBiNFj/nS/wBKP+KR/Jsu8IK+vvNNzGBe3sGk2rmn+j1SR6j7KyzEb+HBa5k4tNiB&#xA;9MTM+fL5BsjoYx3kW9O8nM73UttYtNdwRrJ616Jo5nd+VOHroGf7P8yiu1epGbwyIqRodw5fY5I4&#xA;Y/SGY+V/K0unLLc6lKl1fXCqGVYwI4l4gNGlakg038fDrWZIAqPJG/MoLXPyx8uag6zW0RsLgzLK&#xA;8lqRFVfh5LRRT9nkP8rLI5j13YmA6JV/yrXzBFABBrCSn4uUF3F6qH4vhHqDi/2etQf45XKOM9K9&#xA;zISkOqS3H5e+ZBL++0LT7uoJMlvKItx0/vFU75Kq5TkFvviEXa/lrrbqsn6N0q0JpVJXaZ1/4GLj&#xA;9zYD5zkVv+iEytvy78xCqPqNlaxfsm2tnZqU8HkCih+eQOPH/SPvLLjl5Jtb/lroJiK6nJPqkjCh&#xA;aaQogJFDxii9NB9NcnGQj9IAYkXzNsmsrK0sbWK0tIlgtoVCRRIKAAZEkncpAVsCuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KrZIopV4SIrr/ACsAR9xwqkmoeTNGul/cB7BqqT9VPpo3E1oY&#xA;6GPfuePL3w3fMWvuQsvkaFp+Ud/NHCV4tHwiYg1ryViux+YI9shwQ7k8Uu9q28iQpLK1xfzTxMw9&#xA;GMJFGVUChDMq1YnxHHHgh3LxS70enk/y+IjHJbGYN9oyySNv4gFqKf8AVAyQNckHfmj7LStMsS5s&#xA;7WK3aSnqPGgVmp05MNz9OJJK0isCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:3657EA97C3E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3757EA97C3E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:22795cbc-ba06-a24f-b0d7-132b438c74c3</stRef:instanceID>
            <stRef:documentID>xmp.did:F629A99815206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.878431 .745098 .545098 rgb
f
831.289 608.313 mo
830.77 608.215 830.805 607.68 831.293 606.773 cv
831.43 606.918 831.551 607.051 831.738 607.211 cv
831.914 607.359 832.043 607.625 832.148 607.949 cv
831.785 608.188 831.473 608.352 831.289 608.313 cv
cp
427.227 416.954 mo
426.84 417.551 426.375 417.961 425.988 418.372 cv
426.289 417.825 426.719 417.215 427.227 416.954 cv
cp
434.121 400.938 mo
434.434 401.184 434.566 401.481 434.727 401.77 cv
434.414 402.094 434.047 402.442 433.594 402.891 cv
432.41 404.075 432.863 405.071 432.992 406.333 cv
432.953 406.364 432.938 406.399 432.898 406.43 cv
432.656 406.633 432.465 406.825 432.285 407.016 cv
431.977 405.321 431.719 402.399 431.637 401.415 cv
432.273 400.723 433.168 400.168 434.121 400.938 cv
cp
856.145 489.477 mo
858.227 486.657 856.055 486.723 854.598 485.93 cv
853.16 485.161 853.773 483.016 854.168 480.278 cv
854.582 477.551 851.691 478.934 852.934 476.672 cv
854.168 474.375 851.48 475.403 852.934 471.735 cv
854.379 468.083 852.934 467.782 852.613 468.856 cv
852.313 469.918 850.551 468.231 850.766 466.86 cv
850.98 465.508 848.082 465.407 848.48 463.684 cv
848.902 461.922 846.426 463.063 848.371 459.434 cv
850.336 455.797 846.219 454.563 846.219 454.563 cv
846.219 454.563 844.648 449.04 844.441 446.465 cv
844.223 443.891 841.559 443.926 842.16 440.786 cv
842.781 437.676 838.137 436.407 835.871 433.211 cv
833.598 430.024 835.145 427.161 835.145 427.161 cv
833.066 427.516 li
834.504 425.333 831.934 422.719 831.934 422.719 cv
832.754 425.641 li
832.754 425.641 830.59 426.184 830.18 423.489 cv
829.762 420.817 828.004 423.067 827.797 420.985 cv
827.598 418.899 825.215 419.836 824.805 417.145 cv
824.383 414.454 821.715 415.469 822.113 412.758 cv
822.527 410.012 819.125 410.883 817.875 409.719 cv
816.641 408.555 817.871 405.778 821.191 410.032 cv
824.492 414.274 827.473 414.165 827.473 414.165 cv
821.801 411.836 822.109 408.309 819.621 405.489 cv
817.16 402.68 817.473 405.063 815.805 403.676 cv
814.164 402.29 814.371 403.879 812.813 399.848 cv
811.273 395.801 810.547 401.583 810.441 397.813 cv
810.32 394.071 807.129 388.157 807.129 388.157 cv
807.129 388.157 809.305 398.442 807.977 395.489 cv
806.691 392.719 805.984 393.723 806.082 391.45 cv
806.535 391.368 806.844 391.352 806.844 391.352 cv
806.563 391.305 806.348 391.348 806.09 391.333 cv
806.094 391.231 806.09 391.165 806.098 391.047 cv
806.199 389.563 805.66 389.27 804.984 388.801 cv
805.387 388.622 805.715 388.481 805.98 388.391 cv
805.703 388.481 805.359 388.606 804.934 388.762 cv
804.332 388.34 800.594 387.305 799.203 386.208 cv
794.828 382.77 791.391 377.458 785.141 373.395 cv
784.063 372.696 779.004 369.622 778.266 368.395 cv
774.164 361.567 772.668 360.536 772.668 360.536 cv
772.539 360.512 772.406 360.52 772.273 360.489 cv
771.785 360.375 771.348 360.114 770.883 359.934 cv
770.777 359.801 770.676 359.743 770.57 359.571 cv
769.434 357.723 768.41 359.633 767.371 356.606 cv
766.332 353.586 765.707 356.215 761.484 352.696 cv
757.262 349.176 759.41 344.68 759.41 344.68 cv
757.445 346.438 758.363 349.641 759.285 351.743 cv
758.551 351.282 757.703 350.86 756.777 350.477 cv
751.207 343.965 757.863 341.137 757.863 341.137 cv
752.188 342.258 754.371 348.606 754.371 348.606 cv
750.496 344.012 754.66 339.868 756.004 338.723 cv
754.961 339.594 752.113 342.086 751.781 343.516 cv
751.371 345.266 752.605 346.918 751.566 346.852 cv
750.551 346.79 750.438 346.489 749.711 343.395 cv
748.988 340.29 747.656 344.243 747.238 341.071 cv
746.832 337.883 745.688 344.426 745.688 344.426 cv
742.27 341.36 746.82 337.395 746.82 337.395 cv
745.582 337.715 743.434 340.731 742.59 341.274 cv
741.762 341.809 740.848 341.055 740.938 340.383 cv
741.043 339.7 736.199 339.79 737.746 338.899 cv
739.281 338.012 736.715 337.848 737.434 335.528 cv
738.152 333.208 739.285 333.575 741.766 333.434 cv
744.238 333.293 746.289 333.418 747.004 333.567 cv
747.738 333.711 741.973 331.575 738.668 332.243 cv
736.363 332.719 736.012 334.137 735.527 335.524 cv
735.348 334.895 734.973 334.059 734.262 332.848 cv
734.262 332.848 736.02 336.86 733.02 337.555 cv
732.332 337.454 731.566 337.184 730.828 336.848 cv
730.453 336.34 729.93 335.708 729.379 335.227 cv
730.977 335.266 732.473 334.336 732.473 334.336 cv
730.387 334.782 727.754 334.297 725.738 333.747 cv
726.105 333.461 726.488 333.258 726.871 333.149 cv
737.25 333.473 737.926 327.184 737.926 327.184 cv
737.926 327.184 734.84 332.911 727.719 331.282 cv
720.605 329.653 727.719 331.282 723.699 331.321 cv
722.895 331.333 721.98 331.301 721.066 331.247 cv
717.793 330.407 707.91 324.04 709.828 325.895 cv
706.309 325.571 705.277 323.141 700.793 321.915 cv
699.047 321.438 696.742 321.418 694.414 321.579 cv
693.293 320.868 692.066 319.372 691.449 317.708 cv
690.805 315.918 691.453 314.899 690.414 313.672 cv
689.379 312.45 686.316 310.368 686.316 310.368 cv
686.316 310.368 690.434 313.422 690.098 315.344 cv
689.773 317.258 691.145 319.141 691.145 319.141 cv
691.145 319.141 689.105 318.528 688.098 316.575 cv
687.094 314.622 686.453 315.395 685.633 314.688 cv
684.805 313.981 686.316 318.559 683.398 315.641 cv
680.492 312.731 680.363 310.266 680.363 310.266 cv
680.363 310.266 680.098 313.536 682.898 316.071 cv
682.898 316.071 680.203 316.731 678.582 314.829 cv
676.965 312.922 676.508 317.754 674.969 313.911 cv
673.449 310.051 671.922 306.333 673.676 313.262 cv
673.359 312.543 672.504 311.719 670.199 312.114 cv
666.402 312.758 670.363 311.032 666.254 310.786 cv
662.133 310.532 660.816 310.012 662.652 309.622 cv
664.496 309.235 667.184 308.821 667.184 308.821 cv
667.184 308.821 664.277 308.715 659.621 309.625 cv
659.621 309.625 659.84 310.137 658.305 309.34 cv
656.754 308.547 657.23 308.61 654.77 309.29 cv
652.316 309.973 652.246 308.868 648.617 308.434 cv
645 308 643.055 305.2 643.055 305.2 cv
643.055 305.2 643.16 306.293 644.254 307.36 cv
643.48 306.875 642.598 308.051 639.828 308.083 cv
635.09 308.125 635.98 308.293 632.016 307.458 cv
628.043 306.614 627.895 303.313 625.766 304.645 cv
623.645 305.977 622.988 305.614 620.246 304.43 cv
617.512 303.254 614.066 306.872 611.453 305.579 cv
608.832 304.293 604.969 306.399 604.574 304.629 cv
604.152 302.875 602.445 303.161 600.555 304.524 cv
598.676 305.883 594.555 305.637 592.121 305.598 cv
589.691 305.547 584.945 305.836 585.57 305.54 cv
586.195 305.25 584.34 303.317 580.898 304.368 cv
580.898 304.368 585.504 304.438 584.695 306.051 cv
583.895 307.661 581.98 306.946 578.578 306.79 cv
575.199 306.625 572.441 308.493 569.922 307.583 cv
567.426 306.672 566.332 306.661 564.473 307.297 cv
562.625 307.934 562.215 306.176 561.332 306.926 cv
560.441 307.676 560.438 307.918 561.145 305.68 cv
561.84 303.442 559.77 306.372 559.684 308.563 cv
559.684 308.563 556.527 308.426 555.633 309.184 cv
554.75 309.93 554.613 307.708 551.484 309.661 cv
548.367 311.614 546.43 311.379 547.434 310.758 cv
548.129 310.333 547.16 308.942 546.512 308.137 cv
547.02 308.829 547.52 309.918 545.883 310.211 cv
543.426 310.649 544.621 308.469 542.348 310.403 cv
540.078 312.329 542.5 312.379 540.078 312.329 cv
537.652 312.282 536.961 313.793 535.152 313.696 cv
533.332 313.606 529.906 314.168 529.906 314.168 cv
529.906 314.168 530.941 315.399 521.625 317.454 cv
521.625 317.454 518.656 316 517 317.641 cv
515.348 319.274 516.34 318.661 514.254 319.028 cv
512.184 319.387 512.563 321.391 510.871 321.188 cv
509.191 320.981 507.691 324.84 504.672 324.114 cv
501.664 323.379 501.508 324.465 503.559 324.586 cv
503.559 324.586 503.754 325.598 501.336 325.543 cv
498.902 325.504 499.438 327.153 497.496 327.165 cv
495.551 327.172 497.887 329.415 494.199 330.196 cv
490.512 330.977 491.301 335.227 490.43 333.168 cv
489.543 331.106 491.402 327.415 491.402 327.415 cv
491.402 327.415 488.602 330.254 488.93 333.961 cv
488.93 333.961 487.379 338.547 485.621 337.481 cv
483.836 336.415 483.66 340.305 482.73 339.219 cv
481.809 338.129 480.258 337.571 478.98 339.133 cv
477.684 340.696 474.512 341.043 474.512 341.043 cv
474.512 341.043 476.559 341.411 479.168 340.133 cv
481.785 338.852 480.816 341.555 478.395 341.504 cv
475.945 341.458 475.207 341.86 475.73 343.754 cv
476.254 345.649 473.191 343.571 473.109 345.274 cv
473.031 346.977 471.754 345.961 471.301 347.508 cv
470.871 349.047 468.91 349.782 468.348 351.188 cv
467.801 352.59 466.23 355.09 464.301 354.856 cv
462.801 354.672 460.91 355.684 460.125 356.149 cv
460.77 355.782 462.082 355.192 463.031 355.934 cv
464.332 356.938 463.746 356.497 461.535 356.727 cv
459.34 356.954 461.938 358.735 459.738 358.958 cv
457.543 359.184 458.551 361.137 456.504 360.77 cv
454.449 360.403 452.734 363.497 452.734 363.497 cv
452.734 363.497 454.695 360.434 456.324 362.094 cv
457.941 363.754 456.887 365.821 454.5 367.375 cv
452.129 368.922 452.797 370.231 451.559 370.813 cv
450.309 371.399 448.996 370.875 448.715 374.387 cv
448.449 377.895 446.012 377.856 445.582 379.383 cv
445.152 380.93 443.793 378.563 444.105 376.891 cv
444.105 376.891 442.859 377.715 444.164 381.293 cv
445.457 384.875 444.129 384.594 442.848 383.586 cv
441.551 382.575 441.949 384.571 440.844 382.243 cv
439.727 379.915 440.688 377.461 440.688 377.461 cv
440.688 377.461 438.723 380.766 440.332 385.481 cv
441.938 390.2 440.781 388.84 439.957 388.61 cv
439.105 388.395 438.969 391.313 438.121 391.333 cv
437.277 391.352 437.973 394.739 436.766 394.594 cv
435.594 394.454 436.512 395.18 436.262 397.825 cv
435.402 398.543 435.824 399.676 434.16 399.586 cv
433.098 399.532 432.223 400.352 431.613 401.176 cv
431.613 401.153 431.605 401.067 431.605 401.067 cv
431.609 401.188 li
431.027 401.985 430.699 402.774 430.699 402.774 cv
430.699 402.774 431.055 402.063 431.613 401.446 cv
431.703 407.758 li
431.238 408.493 431.168 409.098 430.934 409.575 cv
430.559 409.559 430.199 409.36 430.168 408.594 cv
430.137 406.997 429.848 410.758 429.164 409.692 cv
428.605 408.833 428.559 409.743 428.91 410.938 cv
428.293 411.34 427.84 412.059 427.91 414.141 cv
427.926 414.579 427.895 414.961 427.848 415.305 cv
426.777 415.708 426.051 417.661 425.742 418.672 cv
425.543 418.93 425.379 419.192 425.332 419.516 cv
425.078 421.114 423.449 418.922 423.582 417.211 cv
423.582 417.211 422.426 418.192 424.129 421.598 cv
424.621 422.59 424.84 423.258 424.887 423.723 cv
424.727 423.997 424.582 424.27 424.473 424.547 cv
424.113 424.583 423.594 424.368 423.07 424.047 cv
421.664 423.204 422.277 425.149 420.922 422.961 cv
419.543 420.766 420.23 418.204 420.23 418.204 cv
420.23 418.204 418.633 421.743 420.77 426.254 cv
422.902 430.766 421.602 429.547 420.746 429.43 cv
419.879 429.313 420.063 432.243 419.219 432.368 cv
418.371 432.493 419.453 435.786 418.238 435.793 cv
417.004 435.797 418.145 436.399 418.105 439.333 cv
418.047 442.262 417.465 442.629 415.988 444.469 cv
414.531 446.305 416.195 447.395 415.848 449.59 cv
415.504 451.801 413.801 442.891 413.801 442.891 cv
414.855 451.184 li
414.855 451.184 413.457 452.168 413.215 450.583 cv
413.004 448.997 413.129 452.782 412.328 451.809 cv
411.527 450.833 411.754 452.422 412.59 453.879 cv
413.422 455.348 414.063 457.54 412.215 457.426 cv
410.363 457.309 409.816 461.829 409.816 461.829 cv
409.816 461.829 410.586 458.649 412.082 459.137 cv
413.59 459.618 411.859 461.211 410.449 462.196 cv
409.051 463.172 412.938 462.672 410.746 464.758 cv
408.563 466.844 409.129 469.891 409.129 469.891 cv
409.129 469.891 409.375 466.231 410.746 466.594 cv
412.113 466.954 411.273 468.903 410.082 471.227 cv
408.891 473.559 411.039 474.649 410.145 475.868 cv
409.246 477.094 410.277 477.821 410.961 478.922 cv
411.641 480.02 411.703 484.411 410.59 486.125 cv
409.48 487.836 412.43 488.067 411.723 490.391 cv
411.035 492.715 411.719 493.809 412.211 495.887 cv
412.73 497.958 410.309 498.211 410.309 498.211 cv
410.309 498.211 411.441 498.821 412.066 498.938 cv
412.684 499.055 412.703 501.129 411.414 501.992 cv
410.129 502.852 412.25 503.695 411.098 504.676 cv
409.941 505.66 409.418 508.832 409.418 508.832 cv
409.418 508.832 410.301 505.539 411.613 507 cv
412.941 508.457 412.668 507.969 411.715 510.289 cv
410.77 512.617 413.484 512.852 412.707 514.195 cv
411.949 515.539 414.215 516.508 413.086 517.984 cv
411.965 519.453 413.48 522.008 413.48 522.008 cv
413.48 522.008 412.496 518.105 414.059 519.563 cv
415.621 521.02 417.344 524.68 416 526.633 cv
414.656 528.598 419.488 534.926 419.488 534.926 cv
414.656 528.598 li
414.656 528.598 415.703 531.398 418.512 534.93 cv
421.316 538.461 420.141 537.367 419.363 538.469 cv
418.578 539.57 421.637 541.266 420.477 542.25 cv
419.316 543.223 420.672 545.18 421.977 546.391 cv
423.281 547.609 422.098 550.18 423.816 552.004 cv
425.531 553.828 426.801 554.555 426.48 557.004 cv
426.141 559.438 429.316 561.016 431.078 563.574 cv
432.836 566.131 426.488 560.906 426.488 560.906 cv
431.859 566.135 li
431.859 566.135 433.621 568.689 431.324 567.232 cv
429.023 565.783 430.402 567.971 431.98 569.674 cv
434.883 572.838 429.074 568.342 432.207 571.264 cv
435.336 574.178 436.43 575.889 436.973 576.615 cv
430.73 571.271 li
430.73 571.271 433.59 575.533 436.965 578.443 cv
440.34 581.365 437.512 581.256 439.754 583.576 cv
441.992 585.879 444.242 588.426 445.23 590.258 cv
446.199 592.09 447.055 597.453 447.055 597.453 cv
447.055 597.453 447.559 595.859 446.898 593.426 cv
446.25 590.992 447.879 593.422 447.559 595.859 cv
447.238 598.313 448.633 595.5 448.441 598.066 cv
448.25 600.621 451.035 603.906 451.035 603.906 cv
451.035 603.906 449.063 600.016 449.637 599.391 cv
450.199 598.785 452.875 600.359 453.402 602.688 cv
453.93 604.992 453.984 603.379 453.984 603.379 cv
456.234 605.328 454.57 604.84 456.207 606.039 cv
457.836 607.266 458.746 608.723 457.754 608.402 cv
456.742 608.086 456.707 608.66 456.707 608.66 cv
456.707 608.66 458.367 609.133 459.527 610.672 cv
460.684 612.219 460.965 612.629 462.508 613.754 cv
464.047 614.887 464.477 616.359 466.48 618.219 cv
468.473 620.082 467.5 620.082 468.707 620.902 cv
469.887 621.703 469.449 622.359 470.551 622.93 cv
471.645 623.488 470.715 624.309 472.332 625.188 cv
473.941 626.078 473.734 626.652 473.734 626.652 cv
473.734 626.652 473.98 627.953 471.918 626.5 cv
469.867 625.051 466.332 623.258 466.332 623.258 cv
466.332 623.258 468.715 624.711 471.73 627.23 cv
474.75 629.746 476.176 630.313 478.293 630.301 cv
480.414 630.289 478.754 632.262 480.48 632.645 cv
482.238 633.051 480.973 634.773 481.941 634.602 cv
482.902 634.438 485.129 634.832 484.008 636.379 cv
482.898 637.941 483.98 639.563 483.98 639.563 cv
483.98 639.563 484.652 637.441 485.598 636.938 cv
486.547 636.465 488.043 638.148 488.043 638.148 cv
488.363 637.992 488.137 639.453 489.27 639.453 cv
490.418 639.438 489.457 641 490.594 640.832 cv
491.723 640.664 492.383 640.832 491.957 641.641 cv
491.523 642.461 492.73 643.598 492.73 643.598 cv
492.73 643.598 491.859 642.621 493.242 642.699 cv
494.645 642.773 495.902 644.555 496.199 645.453 cv
496.508 646.344 497.676 647.887 500.313 648.359 cv
502.957 648.84 500.742 649.828 502.902 650.469 cv
505.063 651.105 505.699 652.012 506.684 653.383 cv
507.68 654.77 504.895 653.395 504.895 653.395 cv
504.895 653.395 508.5 655.977 510.938 655.969 cv
513.383 655.969 511.77 657.359 514.059 657.504 cv
516.355 657.668 520.176 661.066 519.805 661.633 cv
519.426 662.203 517.367 660.59 517.367 660.59 cv
517.367 660.59 521.176 663.82 522.969 663.668 cv
524.754 663.492 523.84 664.805 525.059 664.551 cv
526.262 664.301 527.551 666.563 527.953 667.379 cv
528.316 668.188 530.281 668.359 529.855 669.164 cv
529.414 669.973 530.277 670.641 530.277 670.641 cv
530.277 670.641 531.055 669.984 532.039 670.141 cv
533.031 670.305 532.652 671.93 534.629 672.238 cv
536.613 672.563 535.375 673.703 535.375 673.703 cv
533.699 674.273 530.324 672.672 530.324 672.672 cv
535.262 675.586 536.273 674.844 536.273 674.844 cv
539.699 674.992 537.34 676.145 538.695 675.895 cv
540.074 675.629 542.074 677.504 541.16 678.328 cv
540.805 678.637 540.426 678.676 540.066 678.648 cv
540.973 678.906 542.223 679.184 542.895 678.887 cv
544.004 678.391 543.559 680.094 544.59 679.68 cv
545.621 679.277 546.191 677.969 546.141 679.75 cv
546.105 681.566 546.324 682.375 546.324 682.375 cv
546.324 682.375 546.738 680.176 548.227 680.328 cv
549.695 680.484 550.391 683.57 551.859 683.574 cv
553.332 683.57 552.066 685.273 553.668 684.945 cv
555.285 684.613 556.836 683.633 556.691 685.02 cv
556.543 686.398 553.691 686.5 553.691 686.5 cv
553.691 686.5 555.75 686.734 557.184 686.234 cv
558.613 685.75 560.145 686.711 561.215 687.855 cv
562.266 688.984 563.527 687.25 564.895 689.301 cv
566.25 691.332 566.055 689.613 566.371 690.676 cv
566.688 691.738 568.355 689.77 568.355 691 cv
568.363 692.219 568.746 693.027 568.746 693.027 cv
568.746 693.027 569.215 691.641 569.652 690.836 cv
570.074 690.016 570.402 691.066 570.402 691.066 cv
570.238 693.863 570.621 695.406 570.949 696.273 cv
570.215 694.246 570.699 691.777 571.82 691.645 cv
573.121 691.461 574.426 691.633 576.078 691.777 cv
577.719 691.934 578.211 693.32 579.309 693.879 cv
580.426 694.457 580.215 695.172 581.441 696.313 cv
582.66 697.449 582.215 699.484 582.215 699.484 cv
582.215 699.484 582.738 697.531 582.121 695.754 cv
581.52 693.953 582.762 695.43 582.762 695.43 cv
582.762 695.43 583.227 696.305 584.004 698.098 cv
584.773 699.883 585.867 700.441 585.867 700.441 cv
585.867 700.441 585.199 699.074 584.555 697.68 cv
583.879 696.305 585.199 695.246 585.199 695.246 cv
585.199 695.246 585.73 697.105 586.715 698.484 cv
587.707 699.879 587.637 701.18 587.637 701.18 cv
588.395 705.246 585.926 707.367 585.926 707.367 cv
585.926 707.367 588.246 705.57 588.613 703.617 cv
588.969 701.656 587.934 702.063 588.715 700.352 cv
589.496 698.637 588.52 699.867 587.551 697.434 cv
586.566 694.984 591.371 696.113 592.172 697 cv
592.957 697.887 593.168 698.547 594.555 702.301 cv
595.949 706.039 598.016 706.422 598.016 706.422 cv
598.016 706.422 596.262 704.465 595.234 702.598 cv
594.215 700.742 594.824 699.93 594.699 698.301 cv
594.598 696.672 596.582 696.988 597.504 697.398 cv
598.422 697.805 599.918 699.5 600.59 702.094 cv
601.254 704.703 598.906 707.398 598.906 707.398 cv
598.906 707.398 601.504 704.777 601.371 702.992 cv
601.25 701.199 601.391 700.707 603.211 699.965 cv
605.043 699.234 605.195 700.285 606.836 700.445 cv
608.484 700.602 609.73 702.227 609.73 702.227 cv
608.777 703.938 611.586 705.484 611.586 705.484 cv
611.586 705.484 610.348 704.195 612.191 702.387 cv
614.02 700.582 613.363 702.863 615.051 702.453 cv
616.727 702.035 618.734 703.902 618.734 703.902 cv
617.66 704.879 li
617.66 704.879 618.164 705.059 618.867 704.633 cv
619.566 704.23 620.129 704.137 621.809 704.789 cv
623.488 705.434 623.941 704.773 624.91 705.996 cv
625.895 707.219 626.285 705.742 626.824 706.547 cv
627.371 707.371 628.988 707.191 628.988 707.191 cv
628.988 707.191 627.621 706.23 627.988 705.664 cv
628.363 705.078 629.109 705.328 630.434 705.637 cv
631.762 705.969 630.781 707.188 630.781 707.188 cv
630.781 707.188 632.223 706.703 632.176 705.891 cv
632.098 705.063 635.559 706.605 635.559 706.605 cv
634.973 707.734 636.848 711.152 636.848 711.152 cv
636.848 711.152 635.902 707.988 637.441 706.68 cv
638.984 705.367 640.57 707.16 642.449 707.23 cv
644.332 707.297 648.199 707.531 646.371 708.43 cv
644.555 709.34 638.355 709.355 638.355 709.355 cv
638.355 709.355 651.832 709.539 653.656 708.82 cv
655.492 708.078 657.895 707.57 657.316 708.723 cv
656.754 709.855 652.859 710.199 653.422 710.281 cv
654.004 710.355 658.754 709.441 664.02 707.629 cv
669.281 705.832 665.547 707.379 670.074 706.719 cv
674.59 706.055 678.754 704.734 679.965 705.699 cv
680.336 706 680.23 706.191 679.934 706.328 cv
681.605 706.07 683.848 705.605 685.527 704.773 cv
688.527 703.297 687.586 705.184 689.422 704.438 cv
691.25 703.695 692.379 704.746 695.09 703.938 cv
697.809 703.102 699.926 704.156 699.926 704.156 cv
694.375 705.395 li
694.375 705.395 698.32 705.871 703.066 703.641 cv
707.816 701.426 704.227 704.496 710.832 702.641 cv
717.441 700.793 720.387 699.184 720.387 699.184 cv
720.387 699.184 716.441 701.672 715.707 702.133 cv
716.902 701.387 724.051 698.914 726.25 698.922 cv
728.449 698.91 732.41 695.961 735.555 695.461 cv
738.707 694.965 742.824 692.383 743.383 693.363 cv
743.926 694.328 745.102 691.77 747.27 691.27 cv
749.434 690.773 751.691 691.5 750.145 693.945 cv
748.598 696.395 746.262 694.449 746.262 694.449 cv
746.262 694.449 745.77 696.273 749.164 695.773 cv
752.551 695.273 752.887 690.992 754.543 690.258 cv
756.215 689.527 757.621 688.789 759.762 685.969 cv
761.898 683.156 764.504 683.75 764.504 683.75 cv
761.078 689.02 768.707 680.566 769.621 679.82 cv
770.566 679.09 772.387 678.957 771.441 681.289 cv
770.504 683.605 771.133 683.957 772.602 682.133 cv
774.066 680.289 775.082 678.949 777.934 677.727 cv
780.785 676.488 781.762 672.813 783.656 671.832 cv
785.551 670.848 784.258 669.875 786.348 668.152 cv
788.445 666.445 789.48 665.594 789.176 666.445 cv
788.852 667.289 788.785 667.902 789.723 669.234 cv
790.672 670.582 790.816 669.113 790.98 667.887 cv
791.145 666.676 791.48 664.469 794.063 662.754 cv
796.637 661.039 796.41 659.449 798.668 658.34 cv
800.91 657.242 800.621 654.668 801.715 656.371 cv
802.801 658.082 802.641 655.637 803.41 654.301 cv
804.168 652.949 805.637 651.109 806.66 649.766 cv
807.664 648.41 808.695 649.141 809.18 647.32 cv
809.668 645.473 810.977 644.863 811.664 644.133 cv
812.34 643.391 812.668 642.773 812.668 642.773 cv
814.609 644.359 811.598 645.508 811.598 645.508 cv
811.598 645.508 813.555 645.496 814.883 643.379 cv
816.215 641.262 816.02 636.207 818.207 634.57 cv
820.379 632.953 819.27 630.988 821.898 628.867 cv
821.992 628.789 822.027 628.715 822.113 628.637 cv
822.199 629.25 822.25 629.672 822.25 629.672 cv
822.25 629.672 822.473 628.934 822.699 628.004 cv
824.41 626.125 824.473 624.172 824.141 623.32 cv
823.75 622.344 827.133 616.957 828.055 618.43 cv
828.973 619.887 829.66 622.98 829.66 622.98 cv
829.66 622.98 830.508 618.574 829.801 617.609 cv
829.074 616.621 827.855 615.484 829.789 615.16 cv
831.719 614.824 828.855 613.379 831.172 611.25 cv
831.609 610.852 832.016 610.367 832.41 609.863 cv
832.473 611.887 832.133 614.262 832.133 614.262 cv
832.758 612.746 832.902 610.875 832.891 609.238 cv
834.32 607.23 835.313 605.051 835.313 605.051 cv
835.313 605.051 833.969 606.488 832.793 607.461 cv
832.723 606.656 832.641 605.988 832.59 605.629 cv
832.566 605.434 832.551 605.18 832.527 604.938 cv
832.586 604.863 832.617 604.809 832.68 604.734 cv
834.496 602.438 835.125 602.113 835.285 599.84 cv
835.316 599.406 835.277 599.008 835.207 598.633 cv
835.605 597.922 835.855 597.285 836.105 596.684 cv
836.531 596.297 836.77 595.859 836.914 595.406 cv
837.082 595.195 837.199 594.988 837.449 594.777 cv
839.309 593.203 840.547 591.266 840.941 589.828 cv
841.313 588.367 842.238 586.273 842.859 584.768 cv
843.48 583.24 844.645 583.689 844.637 581.854 cv
844.621 579.99 845.707 579.104 846.184 578.248 cv
846.637 577.377 846.793 576.725 846.793 576.725 cv
849.035 577.76 846.469 579.553 846.469 579.553 cv
846.469 579.553 848.293 569.721 849.957 567.643 cv
851.609 565.6 853.348 556.438 852.723 555.605 cv
852.113 554.777 854.266 547.316 856.016 546.539 cv
857.762 545.766 854.684 545.09 856.332 542.52 cv
857.977 539.953 856.531 539.668 855.703 539.711 cv
854.879 539.762 854.973 538.594 856.102 536.008 cv
857.238 533.398 857.77 532.949 857.332 530.766 cv
856.914 528.559 854.961 527.754 856.395 525.566 cv
857.836 523.395 856.395 525.566 856.41 523.117 cv
856.402 520.652 857.527 521.008 858.676 518.91 cv
859.801 516.809 857.523 515.094 858.969 513.41 cv
860.414 511.723 857.316 510.051 858.551 508.762 cv
859.77 507.453 860.199 507.18 858.121 502.609 cv
856.051 498.051 856.676 498.391 857.406 496.563 cv
858.121 494.711 854.617 496.286 855.23 493.657 cv
855.855 491.032 854.098 492.309 856.145 489.477 cv
cp
.27451 .207843 .145098 rgb
f
709.582 697.602 mo
708.629 697.254 707.344 697.02 705.699 697.367 cv
704.801 697.555 703.836 697.902 702.504 698.52 cv
701.066 698.102 698.871 697.75 696.293 698.293 cv
695.922 698.371 695.543 698.465 695.145 698.59 cv
695.121 698.594 695.098 698.598 695.074 698.605 cv
694.727 698.676 694.559 698.668 694.012 698.621 cv
693.227 698.559 692.039 698.461 690.629 698.758 cv
690.629 698.758 690.613 698.762 690.609 698.762 cv
689.777 698.57 688.723 698.5 687.484 698.762 cv
686.637 698.938 685.766 699.258 684.75 699.75 cv
684.512 699.867 684.07 700.055 683.328 700.266 cv
680.793 699.32 677.863 699.891 674.578 700.531 cv
673.445 700.75 672.223 700.992 670.965 701.176 cv
670.664 701.219 670.426 701.254 670.234 701.27 cv
669.297 701.063 668.359 701.07 667.332 701.285 cv
666.801 701.398 665.844 701.672 663.906 702.336 cv
663.059 702.629 662.238 702.887 661.48 703.117 cv
660.246 702.504 658.574 702.203 656.309 702.68 cv
655.48 702.855 654.535 703.145 653.652 703.477 cv
653.328 703.52 652.836 703.566 652.23 703.605 cv
650.113 701.832 646.801 701.719 644.363 701.637 cv
644.418 701.637 644.457 701.633 644.477 701.625 cv
644.57 701.609 644.434 701.547 644.297 701.492 cv
643.148 701.031 641.234 700.258 638.855 700.758 cv
638.637 700.805 638.422 700.859 638.207 700.922 cv
635.699 699.973 634.258 699.953 633.207 700.129 cv
631.797 699.797 630.512 699.543 629.023 699.855 cv
628.676 699.926 628.344 700.02 628.02 700.148 cv
627.188 699.801 626.379 699.652 625.672 699.574 cv
624.879 699.281 624.023 698.996 623.113 698.84 cv
621.91 697.98 620.063 696.965 617.863 696.809 cv
616.145 695.879 614.496 696.047 613.723 696.211 cv
613.555 696.246 613.383 696.293 613.215 696.344 cv
612.211 695.691 610.949 695.121 609.465 694.914 cv
608.504 694.473 606.781 693.789 604.418 694.281 cv
604.379 694.293 604.344 694.297 604.309 694.309 cv
603.449 693.414 602.504 692.715 601.52 692.277 cv
600.699 691.918 598.527 691.125 596.117 691.633 cv
596.059 691.645 596 691.656 595.941 691.668 cv
594.535 690.938 592.887 690.508 591.352 690.395 cv
589.926 685.652 li
585.199 689.434 li
584.879 689.352 584.57 689.301 584.281 689.277 cv
584.191 689.223 584.109 689.172 584.027 689.125 cv
582.973 688.086 581.254 686.48 578.328 686.203 cv
577.68 686.145 li
576.82 686.063 575.945 685.98 575.043 685.961 cv
574.219 685.395 573.277 685.043 572.27 684.941 cv
572.031 684.125 li
569.738 684.422 li
568.551 683.391 567.16 682.813 565.57 682.668 cv
564.699 681.992 563.777 681.469 562.84 681.105 cv
562.613 680.797 562.352 680.52 562.066 680.258 cv
561.234 679.516 559.473 678.371 556.793 678.789 cv
556.598 678.684 556.391 678.578 556.18 678.496 cv
555.414 677.398 554.082 675.707 551.844 675.016 cv
551.691 674.867 551.543 674.727 551.371 674.582 cv
549.262 672.82 li
546.977 673.258 li
545.996 672.121 544.645 671.152 543.086 670.645 cv
542.887 670.504 542.68 670.371 542.473 670.258 cv
541.926 669.188 540.844 667.816 538.754 667.086 cv
537.895 665.977 536.855 665.234 535.637 664.844 cv
535.078 664.254 534.477 663.844 533.98 663.551 cv
532.566 661.293 530.816 659.816 528.91 659.223 cv
528.098 658.656 527.168 658.297 526.141 658.137 cv
524.688 655.957 521.277 653.137 517.852 652.211 cv
516.816 651.246 515.316 650.48 513.172 650.379 cv
513.113 650.297 513.059 650.219 513.004 650.133 cv
512.027 648.766 510.746 646.984 507.996 645.746 cv
507.129 644.504 505.629 643.32 503.051 642.852 cv
503.004 642.836 502.969 642.828 502.941 642.828 cv
502.172 641.156 500.664 639.172 498.527 638.031 cv
498.477 637.945 498.422 637.863 498.363 637.781 cv
497.848 637.055 496.895 636.07 495.32 635.543 cv
495.184 635.414 495.051 635.297 494.906 635.184 cv
493.965 632.004 li
491.426 632.313 li
491.102 632.125 490.762 631.953 490.402 631.805 cv
489.594 630.738 488.52 630.004 487.363 629.547 cv
487.027 629.141 486.652 628.789 486.254 628.484 cv
485.141 626.039 482.902 624.957 480.82 624.742 cv
480.391 623.422 479.465 622.094 477.855 620.957 cv
477.387 620.016 476.742 619.242 475.926 618.617 cv
475.582 618.09 475.074 617.445 474.316 616.813 cv
473.871 616.066 473.215 615.215 472.074 614.148 cv
471.402 613.52 471.012 612.961 470.645 612.469 cv
469.945 611.523 469.066 610.344 467.59 609.254 cv
466.766 608.656 466.766 608.656 465.902 607.504 cv
465.727 607.266 465.543 607.039 465.359 606.828 cv
464.84 604.855 463.363 603.227 461.887 602.016 cv
461.41 601.145 460.766 600.402 459.996 599.684 cv
458.941 597.422 457.168 595.605 455.18 594.582 cv
455.102 594.426 455.012 594.273 454.922 594.117 cv
454.711 591.965 453.914 589.723 452.457 588.367 cv
452.168 588.098 li
452.094 587.949 452.027 587.805 451.953 587.668 cv
450.898 585.695 449.031 583.346 446.102 580.275 cv
445.816 578.041 444.652 576.182 442.395 574.225 cv
442.367 574.201 442.344 574.178 442.309 574.146 cv
443.23 573.287 li
442.617 572.436 441.691 571.154 440.02 569.389 cv
439.957 569.146 439.879 568.92 439.789 568.705 cv
440.09 567.146 439.75 565.498 438.754 563.785 cv
438.672 562.789 438.309 561.652 437.465 560.426 cv
436.531 559.066 435.438 558.004 434.566 557.148 cv
434.348 556.93 434.121 556.723 433.914 556.523 cv
433.98 552.516 431.742 550.277 430.352 548.887 cv
430.113 548.645 li
430.113 548.559 430.102 548.477 430.09 548.398 cv
430 547.102 429.813 544.777 428.035 542.793 cv
428.211 541.73 428.121 540.48 427.5 539.07 cv
427.535 538.938 427.563 538.805 427.582 538.684 cv
428.051 536.016 426.754 534.113 425.113 532.023 cv
425.723 531.563 li
424.84 530.402 423.895 528.879 423.41 527.891 cv
424.77 523.953 423.004 519.477 420.766 516.695 cv
420.707 516 420.543 515.246 420.219 514.438 cv
420.336 513.359 420.184 512.082 419.449 510.727 cv
420.219 508.555 420.027 506.699 418.801 504.836 cv
418.836 504.543 418.852 504.25 418.84 503.941 cv
419.746 502.277 420.09 500.297 419.715 498.422 cv
419.676 498.208 419.621 498 419.559 497.793 cv
419.746 496.758 419.707 495.668 419.438 494.586 cv
419.32 494.102 419.184 493.625 419.051 493.168 cv
418.957 492.852 418.852 492.575 418.816 492.266 cv
419.488 490.094 419.309 488.102 418.328 486.258 cv
419.199 482.938 419.008 478.77 417.684 476.313 cv
417.836 475.243 417.73 474.102 417.348 472.899 cv
418.324 470.883 419.348 468.262 418.551 465.618 cv
418.762 464.918 418.832 464.258 418.824 463.661 cv
419.574 462.551 420.117 461.192 420.051 459.602 cv
420.102 459.508 420.145 459.418 420.191 459.325 cv
420.805 457.961 420.906 456.575 420.723 455.266 cv
421.051 455.04 li
422.422 454.75 li
422.559 453.977 li
422.629 453.926 li
422.602 453.715 li
423.172 450.532 li
423.398 449.09 423.254 447.856 423.059 446.93 cv
424.461 445.129 425.414 443.305 425.492 439.516 cv
425.504 439.008 425.48 438.54 425.453 438.118 cv
425.855 437.278 426.141 436.239 426.23 434.942 cv
427.328 434.711 li
428.695 432.141 li
429.051 431.418 429.238 430.7 429.301 429.993 cv
430.16 429.903 li
431.445 426.747 li
432.395 425.137 li
432.25 423.208 li
432.215 422.911 432.168 422.61 432.105 422.301 cv
432.168 422.161 432.227 422.016 432.277 421.872 cv
432.758 421.372 433.242 420.821 433.711 420.098 cv
433.91 419.793 li
434.715 419.489 li
434.883 418.278 li
445.207 402.29 li
442.512 403.676 li
443.422 402.715 li
442.664 401.356 li
443.402 400.735 li
443.621 398.43 li
443.656 398.129 443.676 397.844 443.68 397.571 cv
444.188 396.774 444.594 395.758 444.824 394.465 cv
444.848 394.426 444.879 394.391 444.902 394.352 cv
446.336 394.055 li
447.73 391.735 li
448.129 391.028 448.359 390.309 448.461 389.586 cv
449.723 389.321 li
451.258 386.852 li
452.027 385.481 452.176 384.043 452.031 382.68 cv
452.094 382.563 452.16 382.45 452.227 382.329 cv
453.527 381.25 455.43 379.368 455.977 375.872 cv
458.176 374.715 459.008 372.911 459.371 372.122 cv
462.309 370.247 464.129 367.618 464.441 364.782 cv
464.473 364.516 464.488 364.25 464.492 363.989 cv
465.363 363.567 466.152 362.954 466.766 362.18 cv
470.047 361.489 li
470.594 359.333 li
472.664 358.032 474.184 355.942 475.078 353.961 cv
475.262 353.793 li
475.941 353.184 476.953 352.282 477.715 350.942 cv
478.07 350.692 478.379 350.422 478.652 350.141 cv
480.707 349.708 li
482.289 347.418 li
482.383 347.274 482.473 347.106 482.563 346.911 cv
483.863 346.54 485.004 345.879 485.902 345.032 cv
485.984 345.024 li
487.395 344.723 488.406 344.008 489.113 343.262 cv
489.16 343.254 489.203 343.247 489.246 343.239 cv
491.715 342.719 493.402 340.946 494.527 339.102 cv
495.746 338.649 497.113 337.668 497.98 335.586 cv
499.777 335.063 501.684 334.036 502.855 332.032 cv
503.328 331.782 503.723 331.508 504.043 331.25 cv
504.461 331.235 504.957 331.172 505.426 331.071 cv
506.547 330.836 507.488 330.415 508.262 329.868 cv
508.48 329.84 508.707 329.805 508.918 329.758 cv
511.387 329.239 513.07 327.786 514.129 326.821 cv
514.184 326.809 514.23 326.801 514.281 326.79 cv
516.141 326.399 517.348 325.364 518.074 324.543 cv
518.555 324.465 li
519.922 324.176 520.855 323.532 521.488 322.965 cv
522.5 323.461 li
524.57 323.059 li
527.699 322.368 530.141 321.25 532.027 319.915 cv
532.547 319.829 li
533.918 319.606 535.867 319.391 536.59 319.426 cv
537.324 319.465 538.07 319.407 538.801 319.254 cv
540.043 318.993 540.973 318.516 541.582 318.204 cv
542.629 318.083 543.254 318.098 544.035 317.934 cv
548.848 316.918 li
549.527 316.965 550.258 316.911 551.059 316.743 cv
552.469 316.446 554.012 315.821 555.574 314.915 cv
556.313 315.094 557.223 315.165 558.242 314.95 cv
559.645 314.653 li
560.078 314.313 li
560.414 314.293 560.832 314.282 561.168 314.297 cv
566.805 314.508 li
566.875 313.032 li
566.922 313.028 567.367 312.934 567.367 312.934 cv
567.367 312.934 568.152 312.688 568.203 312.68 cv
568.527 312.61 568.871 312.676 569.695 312.981 cv
572.195 313.879 574.488 313.579 576.195 313.219 cv
578.473 312.696 li
579.152 312.555 579.633 312.5 580.027 312.516 cv
580.754 312.551 581.391 312.614 581.957 312.668 cv
583.426 312.809 584.813 312.942 586.328 312.622 cv
587.379 312.403 588.34 311.985 589.164 311.395 cv
589.645 311.395 590.125 311.383 590.598 311.372 cv
591.691 311.344 592.871 311.313 593.734 311.333 cv
594.492 311.348 li
596.395 311.391 599.008 311.45 601.395 310.95 cv
602.305 310.758 603.125 310.504 603.871 310.172 cv
605.199 310.872 607.055 311.254 609.656 310.973 cv
610.125 310.922 610.832 310.844 611.094 310.875 cv
612.43 311.602 614.414 311.821 616.543 311.372 cv
617.543 311.165 618.578 310.786 619.613 310.387 cv
619.93 310.258 620.242 310.125 620.555 310.024 cv
621.996 310.504 623.422 310.602 624.789 310.313 cv
626.141 310.032 627.191 309.426 628.004 308.774 cv
629.047 309.454 630.336 310.055 631.953 310.403 cv
633.035 310.629 633.621 310.852 634.105 311.032 cv
635.848 311.68 637.27 312.106 641.012 312.071 cv
642.504 312.055 643.066 312.29 643.07 312.293 cv
643.48 311.754 li
645.027 312.829 647.09 313.825 649.668 314.125 cv
650.609 314.243 651.066 314.399 651.664 314.594 cv
652.824 314.981 654.578 315.567 657.191 315.02 cv
658.125 314.79 li
659.164 315.258 660.359 315.625 661.715 315.504 cv
663.199 316.094 664.895 316.309 666.375 316.426 cv
666.488 316.536 li
668.488 318.243 670.816 318.086 672.316 317.86 cv
674.652 321.618 678.031 321.278 679.113 321.051 cv
679.16 321.04 679.203 321.032 679.238 321.02 cv
680.887 321.77 682.637 321.997 684.207 321.903 cv
685.074 322.25 686.078 322.454 687.207 322.329 cv
688.594 323.559 690.008 324.196 690.777 324.485 cv
691.492 325.247 692.273 325.911 693.098 326.43 cv
694.672 327.426 li
696.523 327.301 li
698.262 327.18 699.402 327.219 700.137 327.297 cv
707.367 329.458 li
707.363 329.458 li
708.926 329.946 710.465 330.375 712.059 330.645 cv
715.43 333.895 li
715.844 334.321 716.23 334.668 716.613 334.958 cv
719.516 335.583 li
725.965 339.282 li
726.473 339.426 726.977 339.547 727.465 339.653 cv
727.586 339.778 727.773 339.993 727.992 340.29 cv
728.863 341.461 li
730.191 342.071 li
731.426 342.633 732.613 343.02 733.719 343.204 cv
739.613 345.793 li
740.355 346.36 741.195 346.766 742.09 346.989 cv
742.523 347.602 743.031 348.184 743.621 348.711 cv
751.219 355.528 li
751.766 352.426 li
752.129 352.5 752.512 352.551 752.926 352.579 cv
753.289 353.118 753.711 353.672 754.191 354.231 cv
755.074 355.266 li
756.332 355.782 li
756.953 356.04 757.512 356.313 758.004 356.622 cv
764.895 360.93 li
765.789 362.297 766.938 363.243 768.371 363.801 cv
769.082 364.715 li
770.551 365.286 li
770.777 365.391 771 365.493 771.246 365.598 cv
771.441 366.145 li
772.773 366.231 li
773.574 368.973 775.52 370.469 776.742 371.254 cv
777.848 373.438 779.891 374.875 782.254 375.157 cv
781.098 378.364 li
784.23 378.395 li
784.598 378.977 785.066 379.547 785.668 380.098 cv
785.199 380.571 li
789.398 382.473 li
791.414 383.551 li
791.543 383.442 li
791.645 383.489 li
791.902 384.852 792.527 386.153 793.48 387.243 cv
794.656 388.586 796.195 389.407 797.82 389.61 cv
802.133 392.594 li
802.098 396.688 li
803.738 396.801 li
803.871 396.973 804.02 397.145 804.176 397.317 cv
804.309 397.469 804.363 397.532 804.555 397.946 cv
805.191 399.356 806.02 400.258 806.879 400.833 cv
807.191 401.805 807.77 402.817 808.832 403.665 cv
810.66 405.102 li
811.363 406.321 812.207 407.239 813.5 407.934 cv
813.254 410.114 814.066 412.372 815.715 413.918 cv
816.602 414.747 817.566 415.239 818.441 415.551 cv
818.848 416.879 819.676 418.219 821.215 419.383 cv
821.898 421.649 823.305 422.977 824.387 423.731 cv
824.926 425.032 825.809 426.071 826.957 426.774 cv
827.172 427.254 827.418 427.684 827.668 428.067 cv
831.52 433.907 li
831.863 434.79 832.344 435.688 832.98 436.575 cv
833.629 437.481 834.594 438.86 836.059 439.68 cv
836.484 440.618 837.148 441.524 838.148 442.336 cv
838.332 445.149 839.773 446.891 840.598 447.809 cv
840.984 450.821 843.48 463.149 844.551 464.985 cv
844.734 466.407 845.418 468.016 847.168 469.477 cv
847.504 470.543 848.051 471.481 848.656 472.231 cv
848.434 473.54 848.504 474.778 848.891 475.961 cv
848.59 477.133 848.598 478.301 848.93 479.434 cv
849.18 480.27 849.555 480.942 849.973 481.485 cv
849.668 483.657 849.449 486.926 851.527 489.333 cv
851.176 490.368 851.023 491.563 851.332 492.907 cv
850.941 495.231 851.59 496.891 852.23 497.915 cv
852.41 498.196 852.598 498.45 852.797 498.684 cv
852.797 500.594 853.52 502.473 854.684 505.016 cv
854.906 505.512 855.078 505.914 855.215 506.234 cv
854.348 507.719 853.875 509.738 854.918 512.34 cv
854.297 514.172 854.543 515.871 854.801 516.957 cv
853.473 518.469 852.457 520.238 852.465 523.203 cv
852.461 523.547 852.473 523.871 852.504 524.191 cv
851.078 527.754 852.719 530.637 853.305 531.676 cv
853.449 532.004 li
853.387 532.148 852.629 533.809 852.629 533.809 cv
851.781 535.746 850.242 539.277 852.055 542.398 cv
851.898 543.098 851.832 543.852 851.902 544.66 cv
851.492 545.48 851.336 546.227 851.285 546.688 cv
851.27 546.848 851.258 547.004 851.25 547.16 cv
850.648 547.969 850.129 548.945 849.699 550.09 cv
848.488 553.277 848.332 555.902 849.23 557.926 cv
847.156 560.91 847.012 563.273 846.926 564.555 cv
846.922 564.574 846.926 564.586 846.926 564.594 cv
845.941 566.014 845.492 567.561 845.297 569.076 cv
844.617 568.76 li
843.004 575.463 li
842.309 576.42 841.184 577.979 840.809 580.299 cv
840.297 580.885 839.75 581.662 839.324 582.709 cv
838.984 583.529 li
838.488 584.705 837.953 585.992 837.543 587.23 cv
836.543 587.934 835.605 589.078 835.051 590.938 cv
834.633 591.359 834.359 591.73 834.207 591.934 cv
833.637 592.707 li
833.52 593.012 li
833.082 593.414 li
832.602 594.555 li
832.352 595.148 832.211 595.523 831.977 595.93 cv
830.98 597.715 li
831.137 598.559 li
828.824 602.719 li
828.559 603.051 li
828.563 603.184 li
828.02 604.156 li
826.996 606.055 826.715 607.863 827.168 609.543 cv
826.809 610.223 826.527 610.992 826.379 611.848 cv
825.691 612.602 825.348 613.359 825.18 613.82 cv
825.129 613.938 825.09 614.055 825.051 614.18 cv
823.488 615.422 822.309 617.18 821.492 618.695 cv
820.75 620.082 819.891 622.055 820.238 624.199 cv
819.535 624.973 li
817.289 627.004 816.586 629.113 816.191 630.285 cv
816.176 630.336 816.176 630.367 816.176 630.375 cv
814.754 631.566 813.879 633.078 813.289 634.613 cv
812.629 634.078 li
809.383 640.172 li
808.406 641 806.898 642.266 805.938 644.453 cv
805.273 644.887 804.516 645.523 803.824 646.461 cv
803.305 647.145 li
802.473 648.215 801.566 649.398 800.816 650.559 cv
798.793 651.289 797.816 652.891 797.41 653.566 cv
795.316 654.723 794.242 656.195 793.582 657.098 cv
793.176 657.656 793.051 657.828 792.637 658.105 cv
791.469 658.879 790.555 659.734 789.832 660.602 cv
789.645 660.637 li
787.973 660.988 786.914 661.852 784.59 663.734 cv
782.926 665.113 782.098 666.414 781.609 667.59 cv
780.203 668.633 779.281 669.977 778.512 671.094 cv
778.137 671.633 777.578 672.445 777.305 672.648 cv
776.277 673.082 775.395 673.555 774.633 674.051 cv
773.539 673.707 772.332 673.648 771.105 673.906 cv
769.945 674.152 768.824 674.672 767.863 675.41 cv
766.777 676.293 765.777 677.203 764.863 678.121 cv
764.453 678.152 764.008 678.215 763.539 678.313 cv
761.742 678.691 759.145 679.742 756.965 682.609 cv
755.574 684.438 755.012 684.684 753.988 685.129 cv
753.527 685.336 753.105 685.586 752.73 685.855 cv
751.277 685.449 749.645 685.41 747.941 685.766 cv
746.414 686.117 745.23 686.77 744.262 687.551 cv
743.84 687.57 743.41 687.625 742.953 687.719 cv
742.082 687.902 740.871 688.336 739.539 688.867 cv
738.52 689.273 737.355 689.73 736.559 689.898 cv
735.766 690.043 li
733.617 690.496 731.613 691.465 729.844 692.32 cv
729.129 692.664 728.09 693.168 727.59 693.324 cv
726.883 693.355 726.098 693.469 725.141 693.668 cv
723.73 693.961 721.781 694.516 719.902 695.141 cv
719.387 694.273 li
719.387 694.273 716.742 695.648 711.023 697.25 cv
710.543 697.387 710.129 697.492 709.777 697.566 cv
709.711 697.578 709.652 697.594 709.582 697.602 cv
cp
.682353 .490196 .2 rgb
f
540.066 678.648 mo
539.496 678.48 539.031 678.32 539.031 678.32 cv
539.031 678.32 539.504 678.598 540.066 678.648 cv
cp
.27451 .207843 .145098 rgb
f
540.066 678.648 mo
539.496 678.48 539.031 678.32 539.031 678.32 cv
539.031 678.32 539.504 678.598 540.066 678.648 cv
cp
f
571 696.406 mo
571.195 696.879 571.371 697.172 571.371 697.172 cv
571.223 696.93 571.105 696.672 571 696.406 cv
cp
f
571 696.406 mo
571.195 696.879 571.371 697.172 571.371 697.172 cv
571.223 696.93 571.105 696.672 571 696.406 cv
cp
f
679.934 706.328 mo
678.629 706.527 677.66 706.602 677.66 706.602 cv
677.66 706.602 679.293 706.621 679.934 706.328 cv
cp
f
679.934 706.328 mo
678.629 706.527 677.66 706.602 677.66 706.602 cv
677.66 706.602 679.293 706.621 679.934 706.328 cv
cp
f
715.707 702.133 mo
715.699 702.133 li
715.492 702.27 715.551 702.227 715.707 702.133 cv
cp
f
715.707 702.133 mo
715.699 702.133 li
715.492 702.27 715.551 702.227 715.707 702.133 cv
cp
f
570.949 696.273 mo
570.961 696.32 570.98 696.359 571 696.406 cv
570.984 696.363 570.965 696.324 570.949 696.273 cv
cp
f
570.949 696.273 mo
570.961 696.32 570.98 696.359 571 696.406 cv
570.984 696.363 570.965 696.324 570.949 696.273 cv
cp
f
756.648 567.322 mo
756.648 567.322 752.652 576.682 724.887 578.256 cv
713.121 578.924 722.094 577.135 702.184 579.615 cv
682.266 582.096 671.664 584.314 652.656 578.943 cv
652.656 578.943 667.332 583.084 689.414 579.334 cv
700.918 577.381 708.012 575.572 713.582 576.002 cv
729.832 577.252 743.004 575.299 756.648 567.322 cv
cp
f
787.746 605.926 mo
787.746 605.926 783.066 612.016 775.039 610.297 cv
767.016 608.57 773.672 603.773 767.148 605.141 cv
760.625 606.512 766.801 603.508 760.582 602.262 cv
754.359 601.012 753.676 597.754 753.676 597.754 cv
753.676 597.754 757.965 601.965 762.172 597.672 cv
766.379 593.379 765.355 588.484 762.266 589.988 cv
759.176 591.488 754.402 589.082 757.152 585.953 cv
759.906 582.818 761.324 577.42 757.719 576.471 cv
754.113 575.521 760.215 564.02 752.875 565.564 cv
745.531 567.104 744.207 564.828 750.352 557.578 cv
756.488 550.328 757.43 546.727 755.418 541.188 cv
753.406 535.648 749.293 532.258 755 531.059 cv
760.703 529.859 754.27 523.547 759.164 522.52 cv
764.059 521.492 756.977 516.164 762.855 515.781 cv
768.738 515.402 768.91 516.211 767.887 511.32 cv
766.855 506.426 766.855 506.426 766.855 506.426 cv
766.855 506.426 766.301 499.731 769.777 504.113 cv
773.25 508.492 771.117 490.204 778.363 496.344 cv
785.609 502.488 780.473 478.024 786.738 483.52 cv
793.004 489.016 790.309 480.211 793.438 482.965 cv
796.566 485.715 798.797 480.129 802.918 483.528 cv
807.039 486.922 800.648 484.86 807.039 486.922 cv
813.434 488.985 804.559 467.004 800.398 459.364 cv
800.398 459.364 809.789 467.606 814.848 483.575 cv
819.906 499.547 815.105 476.704 821.285 489.887 cv
827.461 503.07 820.941 488.262 827.461 503.07 cv
833.98 517.875 827.16 505.684 833.98 517.875 cv
840.793 530.07 836.883 531.746 838.004 528.957 cv
839.125 526.168 834.883 510.023 834.883 510.023 cv
834.883 510.023 842.133 512.148 841.953 531.527 cv
841.703 558.082 828.891 578.084 828.891 578.084 cv
828.891 578.084 837.328 547.145 828.816 525.777 cv
822.082 508.867 819.102 500.782 804.723 501.242 cv
790.348 501.707 777.824 521.148 776.957 533.258 cv
776.094 545.363 774.047 563.957 778.738 578.229 cv
787.578 605.109 803.504 595.805 799.465 600.91 cv
795.43 606.016 787.746 605.926 787.746 605.926 cv
cp
.439216 .270588 .054902 rgb
f
427.508 521.328 mo
427.508 521.328 440.57 555.684 448.406 570.057 cv
456.246 584.428 467.832 596.555 475.457 605.016 cv
488.746 619.781 506.645 632.785 528.215 647.598 cv
549.801 662.41 562.16 673.539 583.34 680.145 cv
604.516 686.754 623.988 687.961 635.84 691.332 cv
647.68 694.711 738.004 693.242 784.762 650.773 cv
784.762 650.773 744.262 677.977 696.258 683.098 cv
648.246 688.219 621.723 685.863 595.516 678.984 cv
569.32 672.109 555.637 659.547 545.098 653.363 cv
534.555 647.188 522.355 636.871 504.926 623.141 cv
485.516 607.852 442.641 562.922 427.508 521.328 cv
cp
.27451 .207843 .145098 rgb
f
819.66 524.719 mo
819.66 524.719 813.188 506.066 795.535 531.488 cv
777.887 556.906 797.695 586.383 805.938 585.078 cv
814.18 583.775 823.215 572.088 825.629 559.23 cv
828.043 546.375 824.789 530.883 819.66 524.719 cv
cp
.862745 .721569 .411765 rgb
f
gsave
464.457 374.079 mo
464.457 374.079 496.48 327.836 588.762 324.348 cv
681.051 320.86 776.73 355.766 819.457 452.805 cv
819.457 452.805 790.27 450.637 781.922 462.602 cv
773.578 474.575 778.176 481.274 759.227 460.981 cv
740.281 440.696 708.68 381.282 609.344 361.536 cv
514.043 342.59 464.457 374.079 464.457 374.079 cv
cp
clp
756.004 338.723 mo
756.234 338.528 756.41 338.383 756.41 338.383 cv
756.41 338.383 756.234 338.52 756.004 338.723 cv
cp
.27451 .207843 .145098 rgb
f
756.004 338.723 mo
756.234 338.528 756.41 338.383 756.41 338.383 cv
756.41 338.383 756.234 338.52 756.004 338.723 cv
cp
f
805.98 388.391 mo
806.285 388.286 806.496 388.215 806.496 388.215 cv
806.496 388.215 806.285 388.282 805.98 388.391 cv
cp
f
805.98 388.391 mo
806.285 388.286 806.496 388.215 806.496 388.215 cv
806.496 388.215 806.285 388.282 805.98 388.391 cv
cp
f
546.512 308.137 mo
546.262 307.79 546.012 307.536 546.012 307.536 cv
546.012 307.536 546.234 307.786 546.512 308.137 cv
cp
f
546.512 308.137 mo
546.262 307.79 546.012 307.536 546.012 307.536 cv
546.012 307.536 546.234 307.786 546.512 308.137 cv
cp
f
460.125 356.149 mo
459.891 356.286 459.73 356.391 459.73 356.391 cv
459.73 356.391 459.902 356.286 460.125 356.149 cv
cp
f
460.125 356.149 mo
459.891 356.286 459.73 356.391 459.73 356.391 cv
459.73 356.391 459.902 356.286 460.125 356.149 cv
cp
f
818.164 445.629 mo
818.164 445.629 786.301 433.868 756.391 471.454 cv
756.391 471.454 783.059 444.258 818.164 445.629 cv
cp
f
810.738 434.129 mo
810.738 434.129 780.152 422.36 740.371 469.477 cv
740.371 469.477 772.012 435.743 810.738 434.129 cv
cp
f
803.445 423.383 mo
803.445 423.383 771.156 413.036 731.613 461.34 cv
731.613 461.34 766.234 425.168 803.445 423.383 cv
cp
f
797.695 415.614 mo
797.695 415.614 764.688 412.157 719.965 454.375 cv
719.965 454.375 755.98 406.981 797.695 415.614 cv
cp
f
792.605 407.559 mo
792.605 407.559 759.754 402.895 713.516 443.442 cv
713.516 443.442 751.246 397.399 792.605 407.559 cv
cp
f
784.891 398.047 mo
784.891 398.047 752.035 393.379 705.789 433.93 cv
705.789 433.93 743.523 387.887 784.891 398.047 cv
cp
f
775.711 389.879 mo
775.711 389.879 742.809 385.719 697.16 426.997 cv
697.16 426.997 734.219 380.36 775.711 389.879 cv
cp
f
767.777 381.262 mo
767.777 381.262 734.867 377.11 689.223 418.379 cv
689.223 418.379 726.285 371.75 767.777 381.262 cv
cp
f
758.305 373.645 mo
758.305 373.645 725.355 369.954 680.27 411.879 cv
680.27 411.879 716.707 364.711 758.305 373.645 cv
cp
f
750.105 365.825 mo
750.105 365.825 717.148 362.227 672.16 404.282 cv
672.16 404.282 708.48 357.008 750.105 365.825 cv
cp
f
737.777 357.668 mo
737.777 357.668 704.699 355.454 661.527 399.372 cv
661.527 399.372 695.82 350.61 737.777 357.668 cv
cp
f
726.59 349.25 mo
726.59 349.25 693.445 348.461 652.199 394.192 cv
652.199 394.192 684.363 344 726.59 349.25 cv
cp
f
716.508 341.731 mo
716.508 341.731 683.355 341.489 642.871 387.899 cv
642.871 387.899 674.191 337.184 716.508 341.731 cv
cp
f
705.824 333.625 mo
705.824 333.625 672.699 335.012 634.539 383.352 cv
634.539 383.352 663.344 331.157 705.824 333.625 cv
cp
f
697.91 326.344 mo
697.91 326.344 664.777 327.735 626.625 376.071 cv
626.625 376.071 655.43 323.879 697.91 326.344 cv
cp
f
686.09 321.11 mo
686.09 321.11 653.02 323.571 616.453 373.118 cv
616.453 373.118 643.551 320.024 686.09 321.11 cv
cp
f
670.297 316.692 mo
670.297 316.692 637.543 321.833 605.125 374.184 cv
605.125 374.184 627.816 319.063 670.297 316.692 cv
cp
f
656.605 310.375 mo
656.605 310.375 624.309 317.875 595.766 372.438 cv
595.766 372.438 614.41 315.821 656.605 310.375 cv
cp
f
642.367 305.055 mo
642.367 305.055 610.668 314.766 585.961 371.172 cv
585.961 371.172 600.648 313.403 642.367 305.055 cv
cp
f
628.707 301.997 mo
628.707 301.997 597.637 313.563 576.301 371.329 cv
576.301 371.329 587.547 312.79 628.707 301.997 cv
cp
f
612.664 302.786 mo
612.664 302.786 582.574 316.696 565.715 375.926 cv
565.715 375.926 572.457 316.7 612.664 302.786 cv
cp
f
597.965 300.524 mo
597.965 300.524 568.891 316.458 556.129 376.7 cv
556.129 376.7 558.797 317.153 597.965 300.524 cv
cp
f
584.18 298.063 mo
584.18 298.063 556.355 316.098 548.074 377.122 cv
548.074 377.122 546.348 317.54 584.18 298.063 cv
cp
f
567.523 302.711 mo
567.523 302.711 541.684 323.489 539.648 385.032 cv
539.648 385.032 531.871 325.938 567.523 302.711 cv
cp
f
554.996 302.399 mo
554.996 302.399 530.082 324.274 530.723 385.852 cv
530.723 385.852 520.387 327.149 554.996 302.399 cv
cp
f
541.758 305.141 mo
541.758 305.141 518.223 328.485 522.59 389.911 cv
522.59 389.911 508.715 331.938 541.758 305.141 cv
cp
f
527.504 308.665 mo
527.504 308.665 505.715 333.649 514.516 394.602 cv
514.516 394.602 496.484 337.786 527.504 308.665 cv
cp
f
518.426 308.02 mo
518.426 308.02 496.641 333 505.438 393.95 cv
505.438 393.95 487.406 337.133 518.426 308.02 cv
cp
f
508.738 307.497 mo
508.738 307.497 486.953 332.481 495.75 393.43 cv
495.75 393.43 477.719 336.614 508.738 307.497 cv
cp
f
500.504 304.758 mo
500.504 304.758 478.715 329.739 487.512 390.688 cv
487.512 390.688 469.477 333.875 500.504 304.758 cv
cp
f
grestore
821.059 586.156 mo
821.059 586.156 809.336 599.262 796.652 597.668 cv
783.98 596.074 773.891 584.564 774.098 563.234 cv
774.305 541.906 779.324 511.047 791.602 504.637 cv
803.875 498.227 816.902 497.899 823.266 514.02 cv
823.266 514.02 818.285 502.445 804.863 506.965 cv
798.098 509.234 788.41 521.914 785.27 543.438 cv
782.121 564.961 783.125 583.904 797.902 591.445 cv
812.684 598.988 821.059 586.156 821.059 586.156 cv
cp
f
785.945 520.297 mo
785.945 520.297 787.801 508.84 793.68 508.457 cv
799.555 508.078 794.629 504.855 802.781 503.141 cv
810.934 501.43 820.453 506.234 823.973 514.867 cv
823.973 514.867 824.711 506.203 817.156 502.68 cv
809.609 499.157 805.492 495.758 797.031 500.09 cv
788.566 504.418 781.918 509.219 777.793 522.012 cv
773.668 534.801 768.293 553.813 770.902 570.295 cv
773.512 586.773 783.5 605.969 799.465 600.91 cv
799.465 600.91 802.863 596.789 796.641 595.543 cv
790.414 594.297 791.797 584.643 785.57 583.393 cv
779.344 582.146 780.551 571.674 778.367 565.318 cv
776.184 558.965 778.852 547.336 779.93 540.297 cv
781.004 533.258 781.957 529.648 785.945 520.297 cv
cp
.27451 .207843 .145098 rgb
f
803.926 550.16 mo
803.926 550.16 804.164 538.977 807.234 537.543 cv
815.453 533.707 815.77 541.719 814.738 553 cv
813.707 564.281 804.637 573.857 803.926 550.16 cv
cp
f
822.676 533.023 mo
822.676 533.023 830.008 547.664 820.766 572.596 cv
820.766 572.596 834.426 548.438 822.676 533.023 cv
cp
f
829.164 567.807 mo
829.164 567.807 824.203 584.021 813.578 589.957 cv
807.578 593.313 804.902 594.184 807.387 597.922 cv
809.879 601.66 802.273 610.07 802.273 610.07 cv
802.273 610.07 803.906 609.73 809.879 601.66 cv
815.844 593.594 808.848 596.762 815.844 593.594 cv
822.84 590.422 827.617 576.643 829.164 567.807 cv
cp
f
794.488 609.621 mo
794.488 609.621 791.211 626.484 780.996 634.59 cv
780.996 634.59 795.805 628.078 794.488 609.621 cv
cp
f
791.207 557.512 mo
791.207 557.512 787.777 541.195 798.602 527.859 cv
809.426 514.52 818.477 521.133 821.82 528.945 cv
821.82 528.945 819.043 511.652 809.426 514.52 cv
799.809 517.387 799.555 524.258 794.355 527.902 cv
789.16 531.547 785.336 541.723 787.469 560.004 cv
789.609 578.287 798.402 591.766 807.668 587.266 cv
807.668 587.266 792.309 587.082 791.207 557.512 cv
cp
f
750.449 491.141 mo
753.25 494.391 737.191 479.79 727.332 474.75 cv
719.723 470.86 719.168 469.493 709.414 465.583 cv
699.648 461.672 690.824 460.657 690.824 460.657 cv
690.824 460.657 726.816 463.75 750.449 491.141 cv
cp
f
737.98 486.52 mo
737.98 486.52 727.902 475.012 706.938 470.473 cv
706.938 470.473 732.133 480.938 737.98 486.52 cv
cp
f
667.055 572.518 mo
667.055 572.518 682.445 574.818 705 566.674 cv
705 566.674 682.957 577.271 667.055 572.518 cv
cp
f
gsave
425.004 512.641 mo
425.004 512.641 438.539 568.979 482.965 608.184 cv
527.383 647.395 554.363 666.426 580.137 677.617 cv
605.902 688.813 645 692.523 669.164 690.004 cv
693.328 687.484 755.871 673.074 781.18 653.711 cv
781.18 653.711 752.563 635.027 744.266 621.867 cv
735.973 608.707 742.313 622.699 713.445 629.191 cv
684.578 635.68 643.652 645.797 579.629 624.504 cv
491.746 595.273 442.238 546.063 425.004 512.641 cv
cp
clp
731.469 625.832 mo
731.469 625.832 743.695 660.766 776.285 662.832 cv
776.285 662.832 739.965 668.324 731.469 625.832 cv
cp
f
717.504 625.047 mo
717.504 625.047 722.406 665.156 757.523 667.938 cv
757.523 667.938 730.738 660.879 717.504 625.047 cv
cp
f
706.652 626.57 mo
706.652 626.57 706.316 666.832 743.512 673.773 cv
743.512 673.773 715.629 663.746 706.652 626.57 cv
cp
f
696.449 629.371 mo
696.449 629.371 692.664 669.453 729.125 679.559 cv
729.125 679.559 702.211 667.18 696.449 629.371 cv
cp
f
685.059 630.043 mo
685.059 630.043 679.551 669.922 715.543 681.586 cv
715.543 681.586 689.18 668.063 685.059 630.043 cv
cp
f
675.23 632.148 mo
675.23 632.148 668.051 671.758 703.512 684.926 cv
703.512 684.926 677.746 670.305 675.23 632.148 cv
cp
f
665.586 630.617 mo
665.586 630.617 654.414 669.293 688.355 686.008 cv
688.355 686.008 664.215 668.836 665.586 630.617 cv
cp
f
655.559 631.289 mo
655.559 631.289 642.77 669.457 675.973 687.582 cv
675.973 687.582 652.578 669.414 655.559 631.289 cv
cp
f
646.121 631.113 mo
646.121 631.113 629.945 667.973 661.371 689.02 cv
661.371 689.02 639.711 668.816 646.121 631.113 cv
cp
f
636.09 630.453 mo
636.09 630.453 618.371 666.602 648.895 688.949 cv
648.895 688.949 628.098 667.852 636.09 630.453 cv
cp
f
626.602 629.313 mo
626.602 629.313 607.191 664.582 636.613 688.352 cv
636.613 688.352 616.848 666.293 626.602 629.313 cv
cp
f
616.664 627.766 mo
616.664 627.766 595.789 662.184 624.199 687.164 cv
624.199 687.164 605.371 664.297 616.664 627.766 cv
cp
f
607.508 624.43 mo
607.508 624.43 584.691 657.59 611.605 684.168 cv
611.605 684.168 594.125 660.25 607.508 624.43 cv
cp
f
597.777 621.895 mo
597.777 621.895 573.59 654.066 599.371 681.754 cv
599.371 681.754 582.902 657.125 597.777 621.895 cv
cp
f
588.746 619.004 mo
588.746 619.004 563.125 650.055 587.625 678.871 cv
587.625 678.871 572.293 653.527 588.746 619.004 cv
cp
f
579.27 615.633 mo
579.27 615.633 552.379 645.574 575.648 675.402 cv
575.648 675.402 561.391 649.434 579.27 615.633 cv
cp
f
572.559 609.555 mo
572.559 609.555 543.281 637.188 564.02 668.824 cv
564.02 668.824 551.953 641.773 572.559 609.555 cv
cp
f
563.578 605.039 mo
563.578 605.039 533.172 631.41 552.563 663.898 cv
552.563 663.898 541.637 636.359 563.578 605.039 cv
cp
f
555.082 598.34 mo
555.082 598.34 523.324 623.086 540.98 656.543 cv
540.98 656.543 531.527 628.469 555.082 598.34 cv
cp
f
546.566 593 mo
546.566 593 513.809 616.383 530.047 650.551 cv
530.047 650.551 521.762 622.109 546.566 593 cv
cp
f
536.82 588.656 mo
536.82 588.656 503.395 611.09 518.637 645.715 cv
518.637 645.715 511.191 617.043 536.82 588.656 cv
cp
f
528.707 582.729 mo
528.707 582.729 494.379 603.734 508.152 638.961 cv
508.152 638.961 501.902 610.012 528.707 582.729 cv
cp
f
518.891 577.572 mo
518.891 577.572 484.09 597.813 497.07 633.344 cv
497.07 633.344 491.488 604.25 518.891 577.572 cv
cp
f
511.176 571.135 mo
511.176 571.135 475.559 589.887 487.051 625.934 cv
487.051 625.934 482.68 596.637 511.176 571.135 cv
cp
f
502.457 564.762 mo
502.457 564.762 466.598 583.057 477.598 619.246 cv
477.598 619.246 473.621 589.891 502.457 564.762 cv
cp
f
495.102 557.91 mo
495.102 557.91 458.516 574.682 468.004 611.297 cv
468.004 611.297 465.242 581.807 495.102 557.91 cv
cp
f
486.91 552.285 mo
486.91 552.285 450.074 568.518 459.008 605.273 cv
459.008 605.273 456.699 575.744 486.91 552.285 cv
cp
f
479.957 545.031 mo
479.957 545.031 442.473 559.695 449.871 596.793 cv
449.871 596.793 448.789 567.197 479.957 545.031 cv
cp
f
471.152 539.742 mo
471.152 539.742 433.555 554.125 440.648 591.281 cv
440.648 591.281 439.809 561.672 471.152 539.742 cv
cp
f
464.566 532.148 mo
464.566 532.148 426.402 544.934 431.953 582.357 cv
431.953 582.357 432.34 552.742 464.566 532.148 cv
cp
f
456.371 524.855 mo
456.371 524.855 417.918 536.773 422.602 574.311 cv
422.602 574.311 423.676 544.707 456.371 524.855 cv
cp
f
450.285 516.848 mo
450.285 516.848 411.379 527.141 414.496 564.84 cv
414.496 564.84 416.801 535.313 450.285 516.848 cv
cp
f
743.973 630.359 mo
743.973 630.359 763.523 661.789 795.777 656.691 cv
795.777 656.691 761.531 669.98 743.973 630.359 cv
cp
f
grestore
gsave
725.723 520.387 mo
725.723 520.387 722.074 536.48 697.316 537.207 cv
672.566 537.934 646.527 532.543 646.254 503.863 cv
645.98 475.184 672.539 470.883 689.754 476.848 cv
706.977 482.813 734.238 487.946 725.723 520.387 cv
cp
clp
727.316 482.375 mo
727.316 482.375 711.758 508.629 724.965 544.176 cv
724.965 544.176 703.551 509.078 727.316 482.375 cv
cp
1 1 1 rgb
f
715.379 477.215 mo
715.379 477.215 688.641 514.121 717.305 550.254 cv
717.305 550.254 696.816 522.625 715.379 477.215 cv
cp
f
703.824 473.895 mo
703.824 473.895 677.09 510.801 705.75 546.93 cv
705.75 546.93 685.258 519.301 703.824 473.895 cv
cp
f
692.781 473.02 mo
692.781 473.02 666.051 509.926 694.711 546.059 cv
694.711 546.059 674.219 518.43 692.781 473.02 cv
cp
f
681.613 471.536 mo
681.613 471.536 654.879 508.438 683.539 544.57 cv
683.539 544.57 663.051 516.941 681.613 471.536 cv
cp
f
671.059 469.918 mo
671.059 469.918 644.32 506.824 672.98 542.953 cv
672.98 542.953 652.496 515.328 671.059 469.918 cv
cp
f
660.504 468.301 mo
660.504 468.301 633.762 505.211 662.426 541.34 cv
662.426 541.34 641.938 513.711 660.504 468.301 cv
cp
f
grestore
791.914 543.082 mo
791.914 543.082 787.176 586.578 807.328 585.27 cv
820.555 584.408 821.492 562.863 821.492 562.863 cv
821.492 562.863 815.371 576.283 806.168 575.025 cv
793.629 573.307 791.066 557.309 791.914 543.082 cv
cp
1 1 1 rgb
f
504.48 342.68 mo
504.48 342.68 542.383 319.399 617.188 322.852 cv
691.992 326.301 686.805 335.055 706.988 342.95 cv
727.16 350.848 784.574 380.942 816.277 440.704 cv
816.277 440.704 795.191 388.93 756.574 363.192 cv
717.965 337.454 701.23 330.747 681.691 325.911 cv
662.156 321.071 578.379 302.258 504.48 342.68 cv
cp
.862745 .721569 .411765 rgb
f
473.539 367.047 mo
473.539 367.047 490.48 348.5 503.188 342.836 cv
515.898 337.168 523.422 332.161 530.164 331.172 cv
536.902 330.188 552.613 325.176 561.473 324.598 cv
570.348 324.024 574.004 321.969 589.086 321.801 cv
604.168 321.633 615.129 319.329 638.242 324.329 cv
661.363 329.325 679.18 328.583 687.691 334.075 cv
696.199 339.567 704.422 337.84 712.234 343.911 cv
720.043 349.981 737.469 353.176 745.543 360.473 cv
753.605 367.778 774.578 383.93 779.652 390.575 cv
784.723 397.219 818.395 429.125 833.027 481.305 cv
833.027 481.305 818.27 448 803.441 427.985 cv
788.617 407.969 772.395 389.102 764.672 383.442 cv
756.938 377.786 743.441 366.059 735.453 363.024 cv
727.457 359.989 724.688 354.575 715.691 352.61 cv
706.699 350.641 701.145 343.668 689.543 340.961 cv
677.949 338.258 669.613 333.59 628.578 328.926 cv
587.559 324.262 507.129 330.442 473.539 367.047 cv
cp
.27451 .207843 .145098 rgb
f
792.016 494.645 mo
792.016 494.645 765.141 495.583 766.078 553.395 cv
766.078 553.395 767.641 508.082 792.016 494.645 cv
cp
f
781.078 493.395 mo
781.078 493.395 764.828 506.52 762.641 536.207 cv
762.641 536.207 758.266 501.52 781.078 493.395 cv
cp
f
317.362 425.472 mo
326.053 435.601 354.522 473.874 356.307 541.163 cv
356.311 541.491 li
352.975 578.647 li
350.424 580.12 li
348.393 581.292 296.733 608.917 235.659 572.526 cv
234.217 571.812 195.522 549.788 174.764 525.581 cv
172.245 522.636 170.092 519.718 168.381 516.905 cv
163.514 508.913 li
166.854 508.694 li
166.069 507.819 165.264 506.897 164.444 505.948 cv
156.483 496.663 151.713 488.745 150.268 482.413 cv
148.631 475.229 li
144.803 468.565 142.647 459.729 142.729 455.03 cv
141.569 445.562 li
144.276 447.526 li
142.686 442.71 141.413 437.522 141.045 432.554 cv
140.565 425.983 li
144.475 426.28 li
143.592 422.202 142.616 416.644 141.932 409.71 cv
141.374 404.019 li
145.409 403.663 li
144.956 401.604 144.616 399.3 144.624 396.956 cv
144.616 390.835 li
150.667 391.3 li
150.709 385.218 151.217 376.104 153.553 369.558 cv
155.397 364.39 li
160.624 366.065 li
160.663 366.081 162.428 366.644 165.237 367.448 cv
165.045 367.163 li
174.917 366.616 li
175.709 366.569 179.733 366.394 184.667 367.007 cv
183.26 364.386 li
194.209 365.835 li
194.667 365.901 201.909 366.89 209.616 369.565 cv
208.702 365.866 li
217.506 367.659 li
219.018 367.968 231.542 370.671 238.432 376.987 cv
240.096 377.347 242.663 377.991 245.604 379.05 cv
244.143 374.753 li
257.713 383.331 li
258.202 383.64 267.834 389.753 276.678 397.112 cv
273.897 391.96 li
274.135 392.136 284.038 399.136 289.795 405.218 cv
289.959 403.05 li
298.456 410.401 li
298.647 410.562 302.241 413.683 306.366 418.073 cv
306.905 414.897 li
314.67 422.522 li
314.67 422.522 315.67 423.499 317.362 425.472 cv
cp
f
237.217 569.542 mo
237.217 569.542 189.366 540.46 173.221 513.956 cv
179.459 513.55 li
179.459 513.55 158.78 494.233 155.795 481.151 cv
161.698 485.151 li
161.698 485.151 146.913 464.069 147.045 456.546 cv
157.959 464.476 li
157.959 464.476 147.788 446.851 146.702 432.14 cv
151.991 432.546 li
151.991 432.546 149.069 424.343 147.577 409.155 cv
152.932 408.683 li
152.932 408.683 150.292 402.718 150.292 396.96 cv
156.459 397.429 li
156.459 397.429 155.502 380.952 158.897 371.468 cv
158.897 371.468 167.975 374.378 178.006 376.479 cv
175.233 372.276 li
175.233 372.276 188.584 371.53 196.178 376.538 cv
193.467 371.46 li
193.467 371.46 209.26 373.558 218.077 379.995 cv
216.374 373.214 li
216.374 373.214 230.342 376.062 235.631 382.229 cv
235.631 382.229 247.909 384.058 255.772 391.312 cv
254.682 388.12 li
254.682 388.12 269.061 397.202 278.549 406.354 cv
275.499 399.913 li
275.499 399.913 286.413 407.843 294.35 419.976 cv
294.756 414.69 li
294.756 414.69 304.315 422.96 309.874 431.362 cv
310.682 426.55 li
310.682 426.55 351.932 460.89 350.639 541.312 cv
347.596 575.21 li
347.596 575.21 296.135 604.651 237.217 569.542 cv
cp
.670588 .74902 .321569 rgb
f
319.014 560.601 mo
319.014 560.601 230.12 431.007 163.807 382.479 cv
163.807 382.479 219.002 437.249 245.995 472.562 cv
272.975 507.874 305.659 544.065 319.014 560.601 cv
cp
.27451 .207843 .145098 rgb
f
259.838 468.226 mo
259.838 468.226 258.405 420.464 224.397 378.409 cv
224.397 378.409 240.272 391.155 252.545 421.792 cv
264.819 452.429 262.616 466.667 259.838 468.226 cv
cp
f
273.131 483.483 mo
273.131 483.483 281.827 440.562 241.737 388.468 cv
241.737 388.468 262.85 408.78 271.139 434.581 cv
279.444 460.386 278.834 480.104 273.131 483.483 cv
cp
f
284.889 499.847 mo
284.889 499.847 298.768 457.413 264.057 402.323 cv
264.057 402.323 283.17 424.187 288.596 450.659 cv
294.018 477.132 291.092 496.866 284.889 499.847 cv
cp
f
296.288 513.132 mo
296.288 513.132 313.459 472.679 284.709 418.499 cv
284.709 418.499 300.772 440.667 304.327 467.433 cv
307.885 494.206 301.67 513.019 296.288 513.132 cv
cp
f
307.44 529.495 mo
307.44 529.495 311.721 527.659 314.94 518.456 cv
320.006 503.979 322.807 474.983 304.979 434.456 cv
304.979 434.456 313.561 462.698 314.186 484.769 cv
314.811 506.995 312.049 518.874 307.44 529.495 cv
cp
f
316.292 544.144 mo
316.292 544.144 341.229 504.308 316.749 440.015 cv
316.749 440.015 331.202 466.573 330.967 499.991 cv
330.725 533.405 318.209 543.315 316.292 544.144 cv
cp
f
329.069 553.765 mo
329.069 553.765 345.096 535.491 339.706 496.073 cv
339.706 496.073 348.42 525.573 339.334 543.097 cv
336.87 547.835 334.663 551.597 329.069 553.765 cv
cp
f
245.737 449.854 mo
245.737 449.854 238.78 413.421 213.116 381.089 cv
213.116 381.089 226.577 393.429 237.088 415.288 cv
247.596 437.144 248.311 448.062 245.737 449.854 cv
cp
f
230.721 437.624 mo
230.721 437.624 221.877 405.511 197.655 375.409 cv
197.655 375.409 211.241 388.784 221.866 408.577 cv
232.491 428.362 232.733 436.28 230.721 437.624 cv
cp
f
213.225 420.104 mo
213.225 420.104 201.831 392.413 184.608 374.249 cv
184.608 374.249 194.76 381.979 202.17 393.772 cv
210.069 406.343 214.901 415.073 213.225 420.104 cv
cp
f
195.225 403.429 mo
195.225 403.429 187.866 386.687 172.139 372.183 cv
172.139 372.183 177.452 372.628 186.241 384.792 cv
192.85 393.94 195.932 399.937 195.225 403.429 cv
cp
f
241.334 484.093 mo
241.334 484.093 194.354 475.394 157.975 435.366 cv
157.975 435.366 168.155 452.991 196.557 469.796 cv
224.963 486.604 239.37 486.604 241.334 484.093 cv
cp
f
254.389 499.562 mo
254.389 499.562 200.061 496.87 154.694 449.3 cv
154.694 449.3 174.967 476.784 206.362 490.132 cv
231.307 500.733 250.174 504.679 254.389 499.562 cv
cp
f
268.756 513.679 mo
268.756 513.679 219.717 520.327 157.377 469.226 cv
157.377 469.226 186.874 497.866 219.588 509.827 cv
244.959 519.108 264.874 519.351 268.756 513.679 cv
cp
f
280.155 526.964 mo
280.155 526.964 234.198 539.616 170.358 493.499 cv
170.358 493.499 201.67 521.499 237.417 529.444 cv
263.772 535.304 279.221 532.261 280.155 526.964 cv
cp
f
294.627 540.479 mo
294.627 540.479 292.186 544.612 282.573 546.21 cv
258.874 550.147 221.186 540.71 183.858 516.917 cv
183.858 516.917 225.702 538.089 249.35 541.44 cv
271.358 544.565 283.428 543.417 294.627 540.479 cv
cp
f
307.752 551.46 mo
307.752 551.46 261.213 568.722 201.139 537.077 cv
201.139 537.077 228.506 556.022 261.874 559.229 cv
295.139 562.429 306.647 553.237 307.752 551.46 cv
cp
f
315.077 565.769 mo
315.077 565.769 287.518 581.163 234.17 563.104 cv
234.17 563.104 267.928 582.315 302.967 574.28 cv
308.17 573.081 312.077 570.964 315.077 565.769 cv
cp
f
225.331 467.351 mo
225.331 467.351 184.452 451.362 156.413 421.062 cv
156.413 421.062 173.573 442.991 194.999 455.495 cv
215.944 467.722 223.163 469.62 225.331 467.351 cv
cp
f
215.538 450.647 mo
215.538 450.647 185.147 437.007 159.092 408.472 cv
159.092 408.472 170.241 423.937 188.182 437.464 cv
206.112 450.983 213.901 452.433 215.538 450.647 cv
cp
f
200.889 430.679 mo
200.889 430.679 175.256 415.194 159.94 395.405 cv
159.94 395.405 166.022 406.616 176.553 415.737 cv
187.772 425.46 195.663 431.573 200.889 430.679 cv
cp
f
187.155 410.347 mo
187.155 410.347 171.737 400.522 159.795 382.761 cv
159.795 382.761 159.428 388.081 170.108 398.624 cv
178.143 406.554 183.6 410.515 187.155 410.347 cv
cp
f
158.897 371.468 mo
158.897 371.468 152.686 389.366 156.459 397.429 cv
147.608 394.956 li
147.608 394.956 147.479 403.64 150.788 407.827 cv
154.104 412.015 152.932 408.683 152.932 408.683 cv
147.577 409.155 li
147.577 409.155 145.084 419.714 150.42 430.229 cv
144.526 430.323 li
144.526 430.323 144.913 450.261 156.565 462.397 cv
147.045 456.546 li
147.045 456.546 149.999 474.495 160.272 482.878 cv
170.545 491.261 161.698 485.151 161.698 485.151 cv
153.635 478.147 li
153.635 478.147 158.311 497.022 177.569 512.288 cv
177.569 512.288 166.448 500.472 161.971 489.741 cv
170.358 493.499 li
170.358 493.499 158.358 475.159 151.631 464.534 cv
162.663 466.808 li
162.663 466.808 150.917 448.772 148.909 435.159 cv
156.307 433.78 li
156.307 433.78 150.858 424.655 149.811 413.077 cv
158.709 414.062 li
150.592 399.679 li
159.491 400.667 li
159.491 400.667 156.045 391.995 158.897 371.468 cv
cp
.882353 .988235 .584314 rgb
f
261.346 484.714 mo
261.346 484.714 226.733 433.187 167.143 381.925 cv
167.143 381.925 232.108 425.479 261.346 484.714 cv
cp
f
257.397 524.429 mo
270.069 528.62 314.213 546.69 350.487 603.394 cv
350.663 603.671 li
366.995 637.214 li
365.569 639.792 li
364.432 641.843 334.459 692.179 263.366 692.554 cv
261.764 692.687 217.256 693.804 186.983 683.796 cv
183.299 682.577 179.952 681.187 177.034 679.663 cv
168.741 675.335 li
171.487 673.421 li
170.358 673.077 169.194 672.706 168.002 672.312 cv
156.389 668.472 148.217 664.155 143.709 659.479 cv
138.596 654.175 li
131.877 650.444 125.467 643.991 123.116 639.925 cv
117.233 632.413 li
120.565 632.698 li
116.717 629.397 112.948 625.608 110.069 621.546 cv
106.256 616.167 li
109.764 614.405 li
106.897 611.37 103.194 607.108 99.0298 601.526 cv
95.6157 596.94 li
98.8813 594.554 li
97.4282 593.022 95.9517 591.222 94.7446 589.214 cv
91.5806 583.976 li
96.9985 581.249 li
93.897 576.019 89.6274 567.952 88.2446 561.14 cv
87.1548 555.765 li
92.4946 554.499 li
92.5376 554.495 94.3423 554.058 97.1626 553.296 cv
96.854 553.155 li
105.018 547.589 li
105.678 547.14 109.03 544.913 113.573 542.894 cv
111.014 541.37 li
121.139 536.96 li
121.565 536.772 128.276 533.886 136.264 532.194 cv
133.561 529.503 li
142.034 526.487 li
143.483 525.972 155.604 521.823 164.768 523.675 cv
166.374 523.12 168.909 522.343 171.971 521.733 cv
168.506 518.812 li
184.553 519.147 li
185.135 519.159 196.538 519.417 207.913 521.151 cv
202.866 518.179 li
203.163 518.206 215.256 519.089 223.327 521.319 cv
222.35 519.382 li
233.428 521.288 li
233.67 521.331 238.358 522.144 244.159 523.772 cv
242.975 520.776 li
253.569 523.292 li
253.569 523.292 254.928 523.616 257.397 524.429 cv
cp
.27451 .207843 .145098 rgb
f
263.163 689.194 mo
263.163 689.194 207.167 688.999 179.655 674.64 cv
184.788 671.069 li
184.788 671.069 157.104 665.206 147.792 655.546 cv
154.913 655.925 li
154.913 655.925 131.366 645.503 127.592 638.991 cv
141.034 640.147 li
141.034 640.147 123.221 630.308 114.694 618.272 cv
119.432 615.89 li
119.432 615.89 112.698 610.37 103.577 598.14 cv
107.92 594.964 li
107.92 594.964 102.577 591.222 99.6001 586.292 cv
105.124 583.507 li
105.124 583.507 95.7993 569.894 93.8032 560.015 cv
93.8032 560.015 103.084 557.819 112.764 554.437 cv
108.209 552.272 li
108.209 552.272 119.26 544.737 128.354 545.108 cv
123.405 542.155 li
123.405 542.155 138.014 535.796 148.889 536.761 cv
143.936 531.831 li
143.936 531.831 157.362 527.054 165.077 529.604 cv
165.077 529.604 176.53 524.835 187.01 526.983 cv
184.432 524.815 li
184.432 524.815 201.436 525.167 214.288 528.101 cv
208.35 524.163 li
208.35 524.163 221.792 525.319 234.85 531.608 cv
232.467 526.87 li
232.467 526.87 244.924 529.019 254.026 533.343 cv
252.233 528.8 li
252.233 528.8 305.292 536.905 345.709 606.448 cv
360.608 637.046 li
360.608 637.046 331.749 688.831 263.163 689.194 cv
cp
.501961 .717647 .0705882 rgb
f
328.592 639.3 mo
328.592 639.3 185.545 574.222 103.702 566.909 cv
103.702 566.909 179.249 585.308 220.592 601.608 cv
261.936 617.917 308.616 632.034 328.592 639.3 cv
cp
.27451 .207843 .145098 rgb
f
230.213 590.749 mo
230.213 590.749 204.327 550.589 153.483 532.136 cv
153.483 532.136 173.655 534.851 199.991 554.753 cv
226.323 574.651 231.792 587.976 230.213 590.749 cv
cp
f
249.483 596.948 mo
249.483 596.948 234.756 555.706 173.522 531.8 cv
173.522 531.8 202.1 538.288 222.518 556.101 cv
242.952 573.913 252.616 591.108 249.483 596.948 cv
cp
f
267.999 604.886 mo
267.999 604.886 257.967 561.39 199.795 532.136 cv
199.795 532.136 227.456 540.987 245.772 560.854 cv
264.081 580.726 271.772 599.132 267.999 604.886 cv
cp
f
284.616 610.382 mo
284.616 610.382 278.432 566.87 225.834 535.319 cv
225.834 535.319 251.034 546.011 267.905 567.097 cv
284.772 588.187 289.17 607.503 284.616 610.382 cv
cp
f
302.616 618.636 mo
302.616 618.636 305.334 614.851 303.338 605.308 cv
300.202 590.296 287.624 564.019 251.436 538.519 cv
251.436 538.519 273.366 558.269 285.295 576.851 cv
297.311 595.558 301.077 607.159 302.616 618.636 cv
cp
f
317.764 626.608 mo
317.764 626.608 318.549 579.616 264.377 537.202 cv
264.377 537.202 290.471 552.483 307.53 581.222 cv
324.577 609.96 318.979 624.913 317.764 626.608 cv
cp
f
333.67 628.249 mo
333.67 628.249 337.963 604.323 312.987 573.354 cv
312.987 573.354 335.686 594.112 336.952 613.815 cv
337.288 619.144 337.342 623.507 333.67 628.249 cv
cp
f
208.651 582.3 mo
208.651 582.3 183.881 554.69 145.202 540.257 cv
145.202 540.257 163.104 543.87 183.393 557.163 cv
203.678 570.456 209.928 579.433 208.651 582.3 cv
cp
f
189.475 579.581 mo
189.475 579.581 165.319 556.644 129.03 543.378 cv
129.03 543.378 147.573 547.819 166.893 559.28 cv
186.209 570.733 190.506 577.386 189.475 579.581 cv
cp
f
165.448 573.608 mo
165.448 573.608 141.389 555.784 117.26 549.12 cv
117.26 549.12 129.944 550.499 142.381 556.769 cv
155.639 563.456 164.288 568.44 165.448 573.608 cv
cp
f
141.42 568.628 mo
141.42 568.628 126.475 558.093 105.514 553.792 cv
105.514 553.792 110.292 551.429 124.1 557.308 cv
134.487 561.726 140.225 565.272 141.42 568.628 cv
cp
f
222.569 613.89 mo
222.569 613.89 177.842 630.698 126.018 615.21 cv
126.018 615.21 143.831 625.05 176.834 624.772 cv
209.842 624.495 222.178 617.054 222.569 613.89 cv
cp
f
241.725 620.397 mo
241.725 620.397 193.819 646.147 130.397 628.835 cv
130.397 628.835 161.956 641.905 195.733 637.124 cv
222.569 633.323 240.764 626.956 241.725 620.397 cv
cp
f
261.327 625.062 mo
261.327 625.062 222.764 656.085 142.987 644.519 cv
142.987 644.519 183.038 653.812 217.229 647.159 cv
243.749 642.003 260.928 631.929 261.327 625.062 cv
cp
f
277.948 630.558 mo
277.948 630.558 245.12 665.124 166.639 658.597 cv
166.639 658.597 207.913 666.409 242.624 654.753 cv
268.221 646.159 279.881 635.577 277.948 630.558 cv
cp
f
297.319 634.659 mo
297.319 634.659 297.362 639.456 289.956 645.788 cv
271.694 661.401 234.545 672.78 190.292 671.683 cv
190.292 671.683 237.061 668.198 259.042 658.862 cv
279.499 650.171 289.241 642.96 297.319 634.659 cv
cp
f
314.225 637.288 mo
314.225 637.288 283.288 676.101 215.506 680.019 cv
215.506 680.019 248.717 682.112 278.952 667.624 cv
309.092 653.187 314.198 639.378 314.225 637.288 cv
cp
f
327.885 645.753 mo
327.885 645.753 312.241 673.167 257.225 685.257 cv
257.225 685.257 296.057 684.272 321.913 659.292 cv
325.749 655.581 328.006 651.749 327.885 645.753 cv
cp
f
200.213 607.819 mo
200.213 607.819 156.952 615.237 117.295 603.769 cv
117.295 603.769 143.311 613.687 168.116 613.331 cv
192.366 612.983 199.53 610.882 200.213 607.819 cv
cp
f
183.198 598.569 mo
183.198 598.569 150.131 602.585 113.084 591.604 cv
113.084 591.604 130.62 599.089 152.963 601.409 cv
175.303 603.726 182.717 600.944 183.198 598.569 cv
cp
f
160.346 589.038 mo
160.346 589.038 130.397 589.015 107.061 579.976 cv
107.061 579.976 118.065 586.437 131.788 588.812 cv
146.413 591.343 156.331 592.499 160.346 589.038 cv
cp
f
138.084 578.718 mo
138.084 578.718 119.803 578.269 100.409 569.222 cv
100.409 569.222 102.842 573.972 117.428 577.483 cv
128.405 580.124 135.124 580.698 138.084 578.718 cv
cp
f
93.8032 560.015 mo
93.8032 560.015 97.7329 578.55 105.124 583.507 cv
96.2681 585.964 li
96.2681 585.964 100.643 593.464 105.643 595.339 cv
110.643 597.214 107.92 594.964 107.92 594.964 cv
103.577 598.14 li
103.577 598.14 106.893 608.464 116.893 614.714 cv
111.893 617.839 li
111.893 617.839 122.518 634.714 138.768 639.089 cv
127.592 638.991 li
127.592 638.991 139.393 652.839 152.518 654.714 cv
165.643 656.589 154.913 655.925 154.913 655.925 cv
144.393 654.089 li
144.393 654.089 158.143 667.839 182.518 670.964 cv
182.518 670.964 166.893 666.589 157.518 659.714 cv
166.639 658.597 li
166.639 658.597 146.893 649.089 135.643 643.464 cv
146.268 639.714 li
146.268 639.714 126.893 630.339 118.143 619.714 cv
123.768 614.714 li
123.768 614.714 114.393 609.714 107.518 600.339 cv
115.643 596.589 li
101.268 588.464 li
109.393 584.714 li
109.393 584.714 101.959 579.069 93.8032 560.015 cv
cp
.882353 .988235 .584314 rgb
f
240.018 604.089 mo
240.018 604.089 183.768 577.839 106.268 564.714 cv
106.268 564.714 184.393 568.464 240.018 604.089 cv
cp
f
413.56 732.316 mo
412.641 732.088 411.287 731.418 410.316 730.154 cv
410.006 730.249 409.68 730.297 409.354 730.297 cv
407.97 730.297 li
407.458 729.785 li
407.213 729.832 406.964 729.858 406.715 729.858 cv
406.148 729.858 405.654 729.738 405.237 729.566 cv
403.424 730.941 401.361 731.5 397.769 731.715 cv
394.306 731.925 384.883 731.233 384.857 731.237 cv
390.946 729.128 li
390.894 729.128 390.847 729.132 390.799 729.132 cv
389.858 729.132 389.214 728.844 388.909 728.707 cv
388.849 728.681 388.634 728.625 387.955 728.625 cv
386.43 728.625 385.287 728.41 384.268 728.208 cv
383.787 728.118 383.357 728.011 382.893 728.011 cv
381.802 728.131 381.205 728.174 380.672 728.174 cv
379.77 728.174 379.043 728.058 377.771 727.817 cv
377.17 727.735 li
376.633 727.735 376.203 727.938 376.199 727.941 cv
373.904 729.033 li
372.048 726.722 li
371.906 726.717 371.773 726.709 371.648 726.7 cv
371.64 726.722 li
369.616 726.747 li
368.976 726.747 368.417 726.563 367.884 726.283 cv
372.138 731.925 li
371.339 731.826 362.767 727.989 360.369 725.811 cv
359.922 725.771 359.527 725.647 359.183 725.476 cv
358.625 725.896 li
356.872 724.436 354.349 722.605 353.545 722.309 cv
352.802 722.038 350.856 721.548 346.185 721.286 cv
343.912 721.161 342.786 720.289 342.013 719.408 cv
341.905 719.399 341.755 719.391 341.557 719.391 cv
340.165 719.417 li
335.774 719.417 331.348 718.325 331.163 718.278 cv
331.271 717.221 li
330.446 717.07 329.582 716.731 329.036 715.949 cv
327.687 715.627 326.295 714.991 325.728 713.668 cv
322.049 713.556 li
322.015 711.962 li
320.21 711.777 318.26 711.21 316.949 709.246 cv
316.515 708.847 315.862 708.816 315.376 708.799 cv
314.169 708.739 li
311.746 708.567 310.225 707.08 309.318 706.195 cv
309.185 706.066 309.06 705.934 308.931 705.817 cv
307.41 705.757 305.077 705.379 303.629 703.764 cv
303.276 703.368 303.001 702.926 302.813 702.453 cv
301.519 702.113 299.946 701.426 299.414 699.673 cv
299.263 699.651 299.108 699.621 298.941 699.596 cv
294.266 698.848 284.108 695.312 283.794 695.144 cv
291.512 695.999 li
290.235 695.079 289.337 693.932 289.127 692.488 cv
288.981 692.205 288.19 691.736 287.374 691.453 cv
286.476 693.305 li
284.555 692.707 282.291 691.225 281.582 688.9 cv
280.851 688.6 279.966 688.114 279.343 687.207 cv
278.084 686.949 276.387 686.215 275.527 683.817 cv
275.514 683.77 275.497 683.727 275.48 683.68 cv
278.638 689.987 li
279.562 691.942 271.613 682.142 271.303 680.203 cv
270.315 679.521 269.89 678.652 269.727 677.875 cv
266.508 673.457 li
265.279 672.676 263.926 671.756 262.813 669.62 cv
259.839 669.178 258.963 667.391 258.718 665.921 cv
258.55 665.108 256.892 663.051 256.148 662.612 cv
255.122 662.453 252.659 661.98 251.856 659.398 cv
250.833 658.84 249.548 657.929 248.844 656.029 cv
248.178 656.691 li
247.855 656.438 245.397 654.4 244.852 650.95 cv
244.366 650.744 243.937 650.422 243.593 650.005 cv
243.004 649.292 li
242.716 649.464 li
240.967 646.89 240.284 644.501 240.697 642.636 cv
237.973 641.635 236.598 639.963 236.916 638.013 cv
236.954 637.793 li
236.851 637.643 li
237.087 636.122 li
228.107 624.675 li
235.197 631.104 li
235.171 630.932 235.089 629.81 235.089 629.81 cv
234.995 628.232 234.995 628.232 233.977 627.034 cv
233.405 626.355 232.979 626.063 232.597 625.805 cv
232.043 625.423 230.883 624.637 230.741 623.017 cv
230.646 622.066 li
229.74 620.941 229.314 619.875 229.392 618.883 cv
229.383 618.87 229.375 618.857 229.37 618.849 cv
228.842 617.882 228.541 617.001 228.477 616.219 cv
228.463 616.215 228.451 616.206 228.438 616.201 cv
222.809 613.821 218.306 601.48 218.138 600.956 cv
223.655 607.53 li
222.542 606.1 222.542 604.768 222.603 604.222 cv
223.11 599.65 li
221.722 597.433 222.065 595.719 222.71 594.188 cv
222.216 592.977 221.846 591.671 222.087 589.591 cv
222.134 589.179 222.147 588.835 222.139 588.56 cv
221.232 595.8 li
220.944 594.971 216.78 584.993 218.847 582.316 cv
218.723 581.693 218.68 580.916 218.929 580.03 cv
218.718 579.708 218.542 579.321 218.435 578.866 cv
218.383 578.664 218.353 578.458 218.336 578.247 cv
217.262 578.234 li
217.262 578.234 217.283 577.817 217.403 577.225 cv
217.842 574.698 218.675 572.803 219.887 571.596 cv
219.775 571.57 219.599 570.457 219.131 569.521 cv
218.495 568.252 218.465 566.971 218.439 565.944 cv
218.435 565.583 218.417 565.037 218.366 564.861 cv
217.61 563.676 217.592 562.571 217.721 561.789 cv
217.262 561.024 216.862 559.813 217.498 558.343 cv
217.163 557.875 216.931 557.359 216.806 556.792 cv
216.725 556.409 216.703 556.035 216.72 555.679 cv
215.667 554.785 li
216.205 553.904 216.677 552.59 216.608 552.139 cv
216.312 550.363 216.72 548.718 217.751 547.498 cv
218.065 547.133 218.422 546.814 218.821 546.548 cv
218.766 545.887 218.843 545.178 219.169 544.464 cv
219.38 544.013 219.668 543.613 220.024 543.27 cv
219.917 542.965 219.771 542.607 219.612 542.272 cv
216.235 539.256 216.123 527.926 216.076 527.393 cv
219.346 533.335 li
219.466 532.961 219.621 532.579 219.818 532.184 cv
219.853 532.119 219.878 532.059 219.9 532.008 cv
219.152 530.938 218.985 529.953 219.079 529.133 cv
212.638 528.884 li
212.651 528.875 220.368 520.616 222.74 518.752 cv
222.903 518.502 222.865 517.492 222.843 516.955 cv
222.8 515.757 222.749 514.197 223.595 512.86 cv
223.385 511.804 223.273 510.352 224.167 508.71 cv
224.309 508.447 224.438 508.232 224.545 508.053 cv
224.48 507.335 li
224.252 504.125 226.491 502.097 227.918 501.143 cv
230.346 495.54 232.417 488.63 232.919 488.987 cv
233.173 488.644 233.422 488.321 233.667 488.042 cv
233.71 487.956 233.783 487.617 233.839 487.363 cv
234.015 486.529 234.273 485.331 235.137 484.016 cv
235.021 483.474 234.956 482.869 234.956 482.189 cv
234.956 481.12 234.956 477.901 238.145 477.33 cv
237.904 474.279 li
238.802 474.24 li
239.146 474.257 li
239.146 474.257 239.764 474.283 240.1 474.318 cv
240.117 474.228 240.125 474.133 240.143 474.034 cv
240.46 471.684 241.255 470.146 242.661 469.191 cv
242.901 468.521 243.253 467.847 243.657 467.21 cv
242.497 465.294 241.595 463.116 241.367 462.548 cv
241.973 458.299 li
246.214 458.957 li
246.373 459.089 246.76 459.425 247.288 460.056 cv
248.173 458.316 249.376 457.16 251.568 455.815 cv
252.015 455.536 252.513 454.479 252.999 453.448 cv
253.613 452.142 254.382 450.509 255.654 449.039 cv
256.08 448.549 256.488 448.111 256.866 447.711 cv
253.433 451.884 li
254.786 448.498 258.456 441.636 260.303 441.339 cv
260.522 441.042 260.763 440.72 261.017 440.385 cv
261.751 439.401 262.551 438.34 263.165 437.592 cv
263.638 437.017 li
264.6 435.856 266.848 433.136 266.934 431.951 cv
267.123 429.291 273.435 423.808 273.435 423.808 cv
274.152 422.897 275.067 422.012 276.288 421.44 cv
276.391 421.269 276.752 420.151 276.967 419.485 cv
277.542 417.681 278.325 415.231 280.546 413.917 cv
280.524 413.8 280.503 413.676 280.481 413.551 cv
280.357 412.726 280.185 411.592 280.361 410.277 cv
280.705 407.686 282.381 406.315 285.337 406.195 cv
286.222 406.161 286.755 406.139 287.468 405.542 cv
288.805 404.433 289.643 403.926 290.343 403.505 cv
291.142 403.024 291.542 402.783 293.016 400.875 cv
293.205 400.63 293.398 400.39 293.591 400.162 cv
297.355 395.9 li
298 395.9 299.461 395.767 300.668 394.563 cv
301.975 393.253 302.98 392.6 303.642 392.166 cv
304.248 391.771 304.248 391.771 304.475 391.242 cv
304.819 390.43 li
305.567 388.617 306.035 387.852 307.964 387.022 cv
308.076 386.966 li
310.345 382.704 314.049 381.501 314.049 381.501 cv
314.758 380.843 315.596 380.285 316.605 380.122 cv
316.635 380.083 316.653 380.048 316.678 380.014 cv
315.832 378.979 315.308 377.174 318.969 373.964 cv
320.7 372.447 321.719 375.962 321.719 375.962 cv
321.908 375.748 322.006 375.507 322.041 375.309 cv
321.882 375.159 321.774 375.047 321.731 375 cv
325.99 370.462 li
325.985 370.462 325.985 370.458 325.985 370.458 cv
325.994 370.458 326.458 370.742 327.386 370.905 cv
327.391 370.888 327.945 369.07 327.945 369.07 cv
320.344 371.214 li
321.25 370.939 330.918 364.085 332.779 364.085 cv
334.76 364.085 335.971 365.057 336.689 365.632 cv
337.063 365.933 337.26 366.083 337.548 366.2 cv
338.047 366.402 338.678 366.518 339.263 366.518 cv
339.766 366.518 340.066 366.436 340.144 366.402 cv
340.904 366.019 343.508 363.896 344.032 363.213 cv
344.269 362.517 344.969 361.881 346.026 361.512 cv
338.223 364.339 li
338.971 363.892 346.98 355.861 350.181 354.796 cv
353.816 353.58 356.416 353.563 358.315 353.55 cv
358.977 353.545 359.579 353.554 360.15 353.464 cv
360.799 353.365 361.237 353.335 361.572 353.313 cv
361.649 353.257 362.101 352.888 363.024 352.183 cv
363.678 351.681 364.258 351.315 364.803 351.062 cv
365.379 349.554 366.44 347.616 368.842 346.744 cv
372.203 347.792 li
369.109 346.67 li
372.065 347.671 li
369.152 346.537 li
369.152 346.537 373.41 347.65 373.423 347.65 cv
373.423 347.65 372.594 341.884 380.676 345.605 cv
381.737 345.27 382.369 345.188 382.868 345.128 cv
382.868 345.128 382.876 345.128 382.88 345.128 cv
382.928 345.128 383.181 344.964 383.856 344.384 cv
385.127 343.297 386.387 342.73 387.706 342.653 cv
389.192 341.007 391.71 339.744 393.24 339.078 cv
403.536 334.601 li
403.179 335.103 li
403.351 335.052 403.522 335 403.694 334.961 cv
405.379 334.541 406.999 334.244 408.545 333.956 cv
411.837 333.354 414.441 332.877 416.25 331.425 cv
418.089 329.96 419.047 326.179 419.228 324.58 cv
419.228 324.58 423.018 317.563 425.114 323.527 cv
425.763 325.384 427.078 327.528 426.949 331.679 cv
427.847 331.15 429.205 330.742 431.053 330.188 cv
435.479 328.86 439.964 316.687 439.973 316.214 cv
441.735 323.124 li
441.791 323.257 441.988 323.811 442.113 324.662 cv
445.168 323.085 448.868 322.458 449.624 322.458 cv
457.844 323.549 li
453.156 327.704 li
451.11 328.392 li
451.635 328.727 li
452.64 328.701 li
453.56 328.701 454.269 329.07 454.793 329.509 cv
454.986 329.479 455.399 329.461 455.412 329.461 cv
455.639 328.353 456.035 326.935 456.684 325.117 cv
456.894 324.494 457.062 324.125 457.062 324.125 cv
459.911 325.311 li
460.052 325.169 460.198 325.027 460.353 324.89 cv
461.573 326.002 li
462.819 326.518 li
462.647 326.982 li
464.934 329.07 li
464.929 329.079 464.925 329.087 464.92 329.096 cv
468.53 329.599 li
468.56 330.046 468.878 332.517 471.572 333.105 cv
472.251 333.251 472.831 333.324 473.304 333.324 cv
473.824 333.324 474.073 333.243 474.447 333.118 cv
474.778 333.006 475.199 332.869 475.714 332.804 cv
470.683 329.049 li
471.967 329.358 484.712 331.928 487.307 335.095 cv
488.523 335.267 490.19 335.511 491.596 337.608 cv
491.565 337.535 491.708 337.522 491.879 337.522 cv
491.965 337.522 492.541 337.544 492.773 337.565 cv
491.114 333.978 li
495.403 333.264 li
495.712 333.264 li
496.597 333.264 499.266 333.621 500.138 337.746 cv
500.447 337.681 500.77 337.63 501.113 337.604 cv
500.954 337.484 500.808 337.376 500.688 337.286 cv
491.763 329.964 li
494.212 330.978 509.41 334.854 511.507 337.501 cv
512.298 335.791 513.836 334.472 515.83 333.857 cv
518.808 334.549 li
519.194 338.764 li
518.988 339.043 518.747 339.563 518.743 339.765 cv
519.289 339.881 519.817 340.187 520.272 340.453 cv
521.708 341.295 522.718 341.97 524.621 344.221 cv
525.025 344.694 525.223 344.784 525.231 344.784 cv
525.837 344.857 526.426 344.964 526.993 345.171 cv
528.402 343.693 li
528.931 344.066 532.948 346.967 535.467 350.25 cv
536.987 350.25 538.169 351.173 539.033 351.973 cv
539.601 352.497 539.991 352.858 540.288 353.099 cv
540.322 353.099 540.365 353.099 540.408 353.099 cv
540.683 353.099 540.958 353.116 541.246 353.15 cv
541.774 352.811 542.526 352.488 543.558 352.488 cv
544.413 352.488 545.332 352.708 546.553 353.193 cv
548.03 353.786 549.156 354.62 550.153 355.35 cv
551.657 356.455 552.646 357.185 554.669 357.185 cv
555.026 357.185 566.528 359.346 566.933 359.299 cv
556.942 360.326 li
564.938 362.986 li
565.889 363.304 567.113 363.931 568.148 364.889 cv
571.887 361.688 li
571.887 364.335 li
573.937 364.563 575.118 366.513 576.364 369.753 cv
577.421 370.316 578.414 371.137 579.222 372.933 cv
579.247 372.933 li
581.692 372.933 583.433 374.299 584.142 376.774 cv
584.159 376.787 li
583.046 373.195 li
591.176 380.062 li
592.353 381.063 598.244 386.313 598.244 391.839 cv
598.244 392.011 598.244 392.162 598.253 392.291 cv
598.889 392.651 599.383 393.146 599.739 393.773 cv
599.911 393.794 600.087 393.824 600.272 393.859 cv
600.878 392.535 li
603.211 393.274 607.311 395.814 607.848 400.665 cv
607.882 400.953 607.921 401.159 607.946 401.296 cv
608.797 401.816 609.69 402.637 610.026 404.214 cv
610.679 404.48 611.194 404.867 611.603 405.323 cv
610.013 397.339 li
611.47 398.985 619.437 411.587 618.843 416.292 cv
618.809 416.55 618.783 416.765 618.766 416.946 cv
618.993 417.238 619.208 417.578 619.406 418.003 cv
619.44 418.003 619.479 418.003 619.509 418.003 cv
621.155 418.003 622.925 419.09 623.2 421.513 cv
623.243 421.909 623.265 422.244 623.273 422.544 cv
623.304 422.768 623.75 423.271 625.521 424.723 cv
629.134 427.701 630.423 429.304 630.032 432.144 cv
631.244 433.072 632.722 434.567 632.383 437.025 cv
632.464 437.12 632.55 437.206 632.632 437.3 cv
633.401 438.168 634.682 439.621 634.682 442.027 cv
634.682 443.397 634.433 444.338 634.265 444.957 cv
634.191 445.013 li
635.051 445.928 li
636.026 446.985 635.949 448.021 635.815 449.576 cv
635.863 449.598 635.953 449.654 636.048 449.714 cv
636.667 450.13 637.599 450.758 638.411 451.841 cv
639.915 453.852 640.151 455.248 640.268 456.98 cv
639.344 444.549 li
639.507 445.047 643.847 461.603 643.614 465.281 cv
644.285 465.732 645.157 466.455 645.415 467.769 cv
645.445 467.933 645.467 468.096 645.479 468.259 cv
646.438 468.805 650.219 479.714 652.183 483.044 cv
645.892 477.021 li
647.739 478.511 649.141 481.412 648.625 485.288 cv
648.5 486.224 648.681 486.637 649.028 487.462 cv
649.497 488.553 650.133 490.048 649.764 492.266 cv
649.703 492.867 650.718 494.668 651.259 495.635 cv
652.066 497.087 652.913 498.586 653.192 500.129 cv
653.712 502.99 652.711 505.315 651.628 506.557 cv
652.526 508.611 651.964 510.063 651.68 510.776 cv
651.723 512.062 li
651.852 513.475 651.993 515.104 652.247 516.229 cv
652.308 516.328 652.526 516.672 652.771 517.098 cv
654.073 519.314 655.848 530.946 654.473 535.75 cv
651.508 527.96 li
651.504 528.678 651.431 529.507 651.216 530.474 cv
650.804 532.334 651.448 533.305 651.968 534.083 cv
652.922 535.518 655.848 542.621 654.018 554.08 cv
650.034 545.074 li
649.974 544.906 649.914 544.734 649.85 544.563 cv
649.819 544.666 649.785 544.77 649.755 544.877 cv
649.69 545.16 649.828 546.148 649.914 546.806 cv
650.163 548.61 650.503 551.081 649.506 553.5 cv
648.62 555.648 648.702 556.736 648.856 558.901 cv
649.059 561.768 648.238 573.56 648.058 574.711 cv
645.535 568.526 li
645.87 569.718 648.272 578.045 648.973 578.836 cv
643.571 576.524 li
643.297 576.412 642.837 576.185 642.287 575.746 cv
642.081 577.117 641.698 578.188 641.269 579.253 cv
641.281 579.214 641.308 579.192 641.32 579.192 cv
641.419 579.192 641.53 579.652 641.616 580 cv
642.072 581.874 642.841 585.015 640.692 587.872 cv
640.241 588.482 638.974 590.171 637.023 590.588 cv
637.083 591.563 635.309 599.672 635.223 600.836 cv
632.804 593.785 li
632.267 594.937 631.656 596.113 630.917 597.128 cv
630.238 598.052 629.624 599.749 629.069 601.253 cv
628.301 603.35 627.574 605.33 626.312 606.598 cv
625.293 607.634 622.187 613.658 621.8 614.977 cv
620.914 614.779 li
620.261 616.12 619.428 617.701 618.392 619.519 cv
616.669 622.531 615.518 623.64 614.224 624.207 cv
614.121 624.426 613.979 624.761 613.79 625.264 cv
611.65 630.905 608.191 633.707 607.8 634.008 cv
606.949 633.234 li
606.344 633.965 605.764 634.45 605.316 634.828 cv
604.792 635.275 604.706 635.361 604.625 635.555 cv
603.98 637.016 603.091 637.682 602.296 638.017 cv
602.262 638.103 602.223 638.206 602.18 638.326 cv
601.591 639.977 600.543 641.85 599.061 643.891 cv
598.57 644.845 597.724 645.76 597.041 646.413 cv
596.207 645.609 li
595.666 646.318 595 647.294 594.458 648.084 cv
593.741 649.142 592.954 650.289 592.112 651.41 cv
591.051 652.828 590.376 653.503 589.745 653.915 cv
589.534 654.285 589.233 654.882 588.743 655.861 cv
586.943 659.458 583.54 665.268 582.101 666.354 cv
581.267 666.978 li
579.935 667.008 li
578.062 669.139 575.127 672.13 571.156 675.958 cv
570.091 674.871 li
574.723 678.751 li
573.761 678.407 566.254 678.348 565.519 677.947 cv
565.253 678.287 li
565.18 678.459 559.959 688.918 559.959 688.918 cv
559.542 683.259 li
558.79 683.667 558.038 683.735 557.612 683.735 cv
557.273 683.723 li
556.839 684.049 556.307 684.401 555.555 684.72 cv
555.331 684.818 555.168 684.896 555.056 684.956 cv
554.438 686.727 553.222 687.443 552.843 687.629 cv
548.125 689.962 li
548.379 692.54 li
548.211 692.587 547.317 692.814 546.247 692.814 cv
544.688 692.814 543.515 692.347 542.677 691.654 cv
542.02 692.157 541.396 692.424 540.94 692.587 cv
540.945 692.592 li
542.079 693.722 542.608 695.432 542.84 696.982 cv
547.695 697.426 li
540.36 702.324 li
539.97 702.586 538.853 703.2 537.039 703.2 cv
535.587 703.2 534.044 702.801 532.45 702.019 cv
532.57 702.19 532.695 702.38 532.824 702.595 cv
532.957 702.818 533.077 703.055 533.185 703.286 cv
535.445 704.228 li
533.671 704.756 li
534.147 706.818 530.336 711.244 530.263 711.747 cv
527.625 708.567 li
527.625 708.494 527.642 707.674 527.045 706.72 cv
527.027 706.724 li
526.778 706.801 526.241 706.926 525.472 706.926 cv
524.351 706.926 523.16 706.655 522.026 706.135 cv
520.208 707.094 li
519.104 706.853 518.274 706.604 517.78 706.453 cv
517.386 706.595 516.745 706.621 516.324 706.621 cv
515.766 706.604 li
515.177 706.767 li
514.67 707.18 514.219 707.545 513.832 707.893 cv
514.077 708.129 514.378 708.344 514.665 708.43 cv
513.707 712.945 li
514.996 716.065 li
514.996 716.065 507.808 712.954 507.704 712.902 cv
507.188 713.16 506.673 713.242 506.222 713.242 cv
505.899 713.242 li
505.629 713.294 505.346 713.324 505.058 713.324 cv
504.68 713.324 504.284 713.281 503.82 713.19 cv
503.167 713.865 502.157 714.651 500.584 714.651 cv
499.953 714.626 li
499.498 714.626 499.24 714.716 499.184 714.746 cv
498.419 716.435 496.571 717.938 496.21 718.223 cv
495.213 717.131 li
494.272 718.051 493.25 718.214 492.661 718.214 cv
491.553 718.214 li
491.437 718.128 li
491.059 718.23 490.633 718.295 490.152 718.295 cv
489.353 718.295 488.639 718.123 488.003 717.973 cv
487.746 717.913 487.488 717.831 487.251 717.818 cv
487.251 717.818 li
487.522 717.818 487.952 717.707 488.33 717.397 cv
488.897 716.946 489.035 716.271 488.987 716.014 cv
484.643 720.418 li
484.583 720.379 484.489 720.314 484.368 720.216 cv
484.059 720.354 483.732 720.443 483.389 720.486 cv
482.873 720.994 482.211 721.479 481.395 721.952 cv
480.437 722.695 479.418 722.914 479.104 722.966 cv
478.559 721.148 li
478.378 721.406 li
476.35 721.72 li
474.765 723.34 464.208 725.531 461.857 726.081 cv
468.99 723.164 li
468.99 723.164 467.658 723.336 467.636 723.336 cv
466.467 723.336 465.483 723.048 464.719 722.536 cv
464.474 722.584 464.199 722.613 463.915 722.613 cv
463.271 722.613 li
462.351 722.3 li
462.076 722.18 461.728 722.072 461.432 722.004 cv
460.649 722.64 459.833 722.79 459.296 722.807 cv
457.414 724.264 454.273 724.724 451.815 724.844 cv
451.721 723.546 li
450.616 723.628 449.611 723.907 449.327 724.109 cv
448.334 724.969 447.303 725.402 446.212 725.402 cv
445.808 725.402 li
443.273 727.418 439.372 728.032 438.563 728.14 cv
438.241 726.73 li
437.897 726.661 437.623 726.618 437.42 726.618 cv
437.296 726.618 437.004 726.618 436.278 727.001 cv
435.47 727.431 434.705 727.641 433.958 727.641 cv
433.498 727.641 433.089 727.563 432.741 727.443 cv
431.285 728.277 429.862 728.677 428.466 728.677 cv
427.293 728.677 426.154 728.389 425.248 727.869 cv
425.188 727.848 424.874 727.753 424.59 727.753 cv
425.308 727.207 425.145 729.738 424.732 728.487 cv
424.414 727.508 424.59 729.257 423.701 729.175 cv
423.125 729.313 li
422.309 729.313 421.393 729.149 420.568 728.754 cv
419.417 729.008 li
418.974 729.008 418.583 728.922 418.244 728.801 cv
418.016 728.853 417.788 728.883 417.552 728.896 cv
419.765 733.863 li
413.56 732.316 li
cp
.27451 .207843 .145098 rgb
f
369.393 723.104 mo
372.254 722.992 370.768 723.791 372.718 723.559 cv
374.669 723.327 376.268 723.791 375.348 724.246 cv
374.433 724.702 374.781 725.166 374.781 725.166 cv
374.781 725.166 376.268 724.362 378.098 724.706 cv
379.933 725.05 380.393 725.166 382.223 724.934 cv
384.058 724.702 385.317 725.51 387.955 725.51 cv
390.593 725.51 389.906 726.197 391.281 725.965 cv
392.656 725.733 392.768 726.541 393.911 726.197 cv
395.058 725.854 394.942 727.112 396.661 726.652 cv
398.379 726.193 398.611 726.769 398.611 726.769 cv
398.611 726.769 399.643 727.572 397.236 727.916 cv
394.83 728.26 391.161 729.402 391.161 729.402 cv
391.161 729.402 393.799 728.831 397.58 728.604 cv
401.361 728.376 402.736 727.8 404.223 726.309 cv
405.714 724.818 405.83 727.456 407.317 726.541 cv
408.808 725.626 409.036 727.8 409.611 726.996 cv
410.187 726.193 412.018 724.934 412.25 726.885 cv
412.481 728.836 414.312 729.291 414.312 729.291 cv
414.312 729.291 413.393 727.229 413.736 726.197 cv
414.08 725.166 416.254 725.394 416.254 725.394 cv
416.37 725.05 417.174 726.309 417.973 725.51 cv
418.776 724.711 419.125 726.541 419.812 725.621 cv
420.5 724.702 421.067 724.362 421.299 725.277 cv
421.531 726.193 423.129 726.197 423.129 726.197 cv
423.129 726.197 421.875 726.081 422.906 725.166 cv
423.937 724.251 426 724.706 426.799 725.166 cv
427.598 725.626 429.437 725.965 431.611 724.479 cv
433.786 722.992 432.875 725.277 434.817 724.246 cv
436.763 723.215 437.799 723.447 439.406 723.791 cv
441.013 724.135 438.143 725.05 438.143 725.05 cv
438.143 725.05 442.379 724.479 444.098 722.76 cv
445.817 721.041 445.593 723.215 447.312 721.729 cv
449.031 720.242 453.955 720.121 454.067 720.809 cv
454.183 721.496 451.661 721.729 451.661 721.729 cv
451.661 721.729 456.473 721.496 457.625 720.121 cv
458.776 718.746 459 720.354 459.687 719.322 cv
460.375 718.291 462.781 719.09 463.58 719.434 cv
464.379 719.777 465.875 718.519 466.098 719.434 cv
466.326 720.35 467.361 720.237 467.361 720.237 cv
467.361 720.237 467.473 719.206 468.281 718.635 cv
469.088 718.063 469.879 719.55 471.486 718.402 cv
473.093 717.256 472.973 718.979 472.973 718.979 cv
472.169 720.586 468.736 721.729 468.736 721.729 cv
474.125 720.47 474.348 719.206 474.348 719.206 cv
476.87 716.916 475.955 719.434 476.754 718.291 cv
477.558 717.148 480.192 717.144 480.08 718.402 cv
479.968 719.662 478.589 719.894 478.589 719.894 cv
478.589 719.894 481.223 718.746 481.683 717.604 cv
482.138 716.461 482.942 718.059 483.401 717.027 cv
483.857 715.996 483.401 714.621 484.549 715.996 cv
485.7 717.371 486.379 717.831 486.379 717.831 cv
486.379 717.831 485.236 715.885 486.379 714.965 cv
487.526 714.046 490.049 715.885 491.08 714.854 cv
492.111 713.822 492.339 715.996 493.254 714.621 cv
494.174 713.246 494.629 711.416 495.433 712.559 cv
496.232 713.702 494.286 715.769 494.286 715.769 cv
494.286 715.769 495.893 714.51 496.58 713.135 cv
497.268 711.76 498.986 711.416 500.473 711.527 cv
501.964 711.64 501.736 709.465 504.026 710.041 cv
506.313 710.617 505.058 709.465 505.973 710.041 cv
506.893 710.617 506.776 707.979 507.58 708.894 cv
508.388 709.809 509.183 710.152 509.183 710.152 cv
509.183 710.152 508.611 708.777 508.379 707.862 cv
508.151 706.947 509.066 707.519 509.066 707.519 cv
511.933 711.184 513.768 711.416 513.768 711.416 cv
511.481 710.729 509.643 707.979 510.441 706.947 cv
511.245 705.916 512.276 705.112 513.535 704.081 cv
514.799 703.05 516.058 703.737 517.205 703.394 cv
518.356 703.05 518.691 703.737 520.299 703.737 cv
521.905 703.737 522.933 705.572 522.933 705.572 cv
522.933 705.572 522.018 703.737 520.41 702.822 cv
518.808 701.907 520.643 702.135 520.643 702.135 cv
520.643 702.135 521.558 702.479 523.276 703.277 cv
524.995 704.077 526.143 703.737 526.143 703.737 cv
526.143 703.737 524.768 703.166 523.393 702.59 cv
522.018 702.015 522.245 700.3 522.245 700.3 cv
522.245 700.3 523.848 701.331 525.455 701.675 cv
527.062 702.019 527.861 703.05 527.861 703.05 cv
531.075 705.572 530.723 708.894 530.723 708.894 cv
530.723 708.894 531.183 705.916 530.151 704.197 cv
529.12 702.479 528.66 703.51 528.089 701.675 cv
527.513 699.84 527.629 701.447 525.339 700.3 cv
523.044 699.152 527.174 696.635 528.316 696.746 cv
529.464 696.858 530.035 697.206 533.473 699.041 cv
536.91 700.876 538.629 699.729 538.629 699.729 cv
538.629 699.729 536.111 699.496 534.16 698.809 cv
532.214 698.121 532.098 697.09 530.955 695.947 cv
529.812 694.805 531.41 693.652 532.33 693.309 cv
533.249 692.965 535.424 693.197 537.598 694.684 cv
539.776 696.171 539.893 699.84 539.893 699.84 cv
539.893 699.84 540.004 696.059 538.745 694.8 cv
537.481 693.541 537.254 693.081 538.058 691.246 cv
538.856 689.412 539.66 690.104 540.924 689.072 cv
542.187 688.041 544.129 688.385 544.129 688.385 cv
544.589 690.336 547.566 689.532 547.566 689.532 cv
547.566 689.532 545.848 689.416 545.964 686.782 cv
546.075 684.144 547.111 686.322 548.026 684.836 cv
548.938 683.345 551.58 683.345 551.58 683.345 cv
551.464 684.836 li
551.464 684.836 551.924 684.604 552.151 683.805 cv
552.375 683.001 552.723 682.541 554.33 681.854 cv
555.937 681.166 555.816 680.367 557.308 680.595 cv
558.794 680.822 558.111 679.447 559.026 679.68 cv
559.938 679.907 560.973 678.648 560.973 678.648 cv
560.973 678.648 559.37 678.876 559.254 678.188 cv
559.143 677.501 559.83 677.157 560.973 676.47 cv
562.12 675.782 562.236 677.385 562.236 677.385 cv
562.236 677.385 562.924 676.01 562.348 675.438 cv
561.776 674.862 565.214 673.604 565.214 673.604 cv
565.558 674.867 569.111 676.121 569.111 676.121 cv
569.111 676.121 566.361 674.402 566.589 672.34 cv
566.813 670.277 569.111 670.51 570.486 669.246 cv
571.861 667.983 574.723 665.465 574.035 667.416 cv
573.348 669.367 568.995 673.715 568.995 673.715 cv
568.995 673.715 578.62 664.434 579.424 662.604 cv
580.231 660.773 581.598 658.706 581.941 659.965 cv
582.285 661.225 579.768 664.206 580.223 663.862 cv
580.683 663.519 583.433 659.51 585.955 654.465 cv
588.481 649.421 586.87 653.206 589.62 649.541 cv
592.37 645.876 594.433 641.979 595.924 641.862 cv
597.419 641.746 594.893 644.152 594.893 644.152 cv
594.893 644.152 598.098 640.487 599.245 637.277 cv
600.388 634.068 600.964 636.135 601.768 634.3 cv
602.575 632.465 604.058 632.465 605.433 629.947 cv
606.808 627.43 608.981 626.737 608.981 626.737 cv
605.888 631.55 li
605.888 631.55 608.981 629.144 610.872 624.159 cv
612.763 619.175 612.247 623.987 615.685 617.972 cv
619.122 611.956 620.153 608.69 620.153 608.69 cv
620.153 608.69 618.435 615.565 618.778 614.19 cv
619.122 612.815 622.56 605.94 624.106 604.394 cv
625.653 602.847 626.513 597.862 628.403 595.284 cv
630.294 592.706 631.497 587.894 632.528 588.237 cv
633.56 588.581 633.903 593.565 633.903 593.565 cv
634.247 588.925 632.7 585.831 633.903 583.94 cv
635.106 582.05 637.169 581.019 637.685 583.94 cv
638.2 586.862 635.278 587.034 635.278 587.034 cv
635.278 587.034 636.138 588.753 638.2 586.003 cv
640.263 583.253 637.685 579.815 638.372 578.097 cv
639.06 576.378 639.575 574.831 639.231 571.222 cv
638.888 567.611 641.122 566.236 641.122 566.236 cv
642.153 572.597 644.731 573.628 644.731 573.628 cv
640.778 569.159 641.981 560.908 642.153 559.705 cv
642.325 558.502 643.528 557.127 644.388 559.533 cv
645.247 561.939 644.903 568.299 644.903 568.299 cv
644.903 568.299 645.935 561.768 645.763 559.361 cv
645.591 556.955 645.419 555.236 646.622 552.314 cv
647.825 549.393 646.106 545.955 646.794 543.893 cv
647.481 541.83 645.935 542.002 646.278 539.252 cv
646.622 536.502 646.794 535.127 647.138 535.986 cv
647.481 536.846 647.825 537.361 649.372 537.705 cv
650.919 538.049 652.981 544.064 652.981 544.064 cv
652.638 540.627 650.06 536.846 649.372 535.814 cv
648.685 534.783 647.481 532.893 648.169 529.799 cv
648.856 526.705 647.653 525.674 648.513 523.268 cv
649.372 520.861 647.481 519.143 649.372 519.658 cv
651.263 520.174 652.122 527.393 652.122 527.393 cv
653.497 522.58 649.544 518.455 649.2 516.908 cv
648.856 515.361 648.685 512.955 648.513 511.236 cv
648.341 509.518 649.544 509.346 648.685 507.627 cv
647.825 505.908 648.341 504.533 648.341 503.502 cv
648.341 502.471 648.169 501.783 648.169 501.783 cv
650.575 501.611 649.205 504.585 649.205 504.585 cv
649.205 504.585 650.58 503.21 650.124 500.688 cv
649.669 498.165 646.223 494.5 646.687 491.75 cv
647.151 489 645.08 488.313 645.535 484.875 cv
645.995 481.438 644.393 479.607 643.473 479.147 cv
642.558 478.688 641.41 472.272 643.018 472.732 cv
644.624 473.188 647.143 475.022 647.143 475.022 cv
647.143 475.022 644.848 471.125 643.705 470.897 cv
642.562 470.666 640.955 470.669 642.098 469.063 cv
643.245 467.46 640.268 468.375 640.499 465.169 cv
640.731 461.96 639.348 457.607 639.348 457.607 cv
639.348 457.607 639.348 462.419 638.66 462.875 cv
637.973 463.335 637.518 462.188 637.285 459.21 cv
637.058 456.228 637.285 455.544 635.91 453.71 cv
634.535 451.875 632.473 452.111 632.705 449.361 cv
632.937 446.611 632.705 449.361 631.562 447.071 cv
630.419 444.781 631.562 444.549 631.562 442.027 cv
631.562 439.504 628.812 439.049 629.268 436.759 cv
629.723 434.468 626.285 434.464 626.749 432.634 cv
627.214 430.803 627.437 430.339 623.535 427.134 cv
619.638 423.928 620.33 423.924 620.098 421.861 cv
619.87 419.799 617.58 423.009 616.893 420.259 cv
616.205 417.509 615.285 419.571 615.749 415.902 cv
616.214 412.232 610.937 406.277 610.937 406.277 cv
610.937 406.277 614.374 413.384 612.768 413.384 cv
611.16 413.384 610.705 411.089 609.785 408.339 cv
608.87 405.589 607.035 408.339 607.035 405.589 cv
607.035 402.839 605.205 405.134 604.749 401.009 cv
604.294 396.884 599.937 395.509 599.937 395.509 cv
599.937 395.509 602.91 397.339 603.143 398.486 cv
603.374 399.634 601.08 398.946 600.624 397.571 cv
600.169 396.196 597.643 397.571 597.187 395.736 cv
596.731 393.902 595.124 396.196 595.124 391.839 cv
595.124 387.482 589.16 382.446 589.16 382.446 cv
590.999 388.402 li
590.999 388.402 587.098 384.049 585.723 381.759 cv
584.348 379.468 582.062 380.839 581.143 377.634 cv
580.223 374.428 577.705 377.634 576.562 374.652 cv
575.419 371.669 574.268 373.049 573.58 371.214 cv
572.893 369.379 571.749 366.861 571.285 367.549 cv
570.825 368.236 573.58 371.214 573.124 372.361 cv
572.669 373.509 575.643 375.571 572.205 373.736 cv
568.768 371.902 568.768 368.464 568.768 368.464 cv
567.16 369.839 li
567.393 367.089 563.955 365.946 563.955 365.946 cv
566.018 368.236 li
566.018 368.236 564.41 369.839 562.808 367.549 cv
561.2 365.259 560.745 368.236 559.598 366.402 cv
558.455 364.567 556.848 366.634 555.245 364.339 cv
553.638 362.044 551.808 364.339 550.893 361.589 cv
549.981 358.839 547.455 361.361 545.848 360.902 cv
544.245 360.442 544.018 357.236 548.83 359.527 cv
553.643 361.817 556.16 360.214 556.16 360.214 cv
550.205 360.902 548.83 357.464 545.393 356.089 cv
541.955 354.714 543.33 356.777 541.268 356.321 cv
539.205 355.866 540.12 357.236 536.91 354.259 cv
533.705 351.281 535.768 357.009 533.933 353.571 cv
532.094 350.134 526.598 346.236 526.598 346.236 cv
526.598 346.236 533.245 354.714 530.723 352.652 cv
528.205 350.589 528.205 352.196 527.058 349.446 cv
525.906 346.696 524.768 349.214 522.245 346.236 cv
519.719 343.259 519.268 343.714 516.745 341.884 cv
514.219 340.053 516.745 336.839 516.745 336.839 cv
513.763 337.754 513.08 340.964 515.598 343.259 cv
518.12 345.553 516.518 345.089 516.285 346.696 cv
516.058 348.303 513.768 347.384 513.535 345.777 cv
513.308 344.169 510.33 344.402 510.33 344.402 cv
511.937 338.669 502.535 334.777 502.535 334.777 cv
502.535 334.777 506.893 337.986 508.723 340.049 cv
510.558 342.111 508.955 344.634 506.893 344.634 cv
504.83 344.634 502.768 345.089 502.535 341.884 cv
502.308 338.678 497.495 343.486 497.268 339.821 cv
497.044 336.156 495.661 336.384 495.661 336.384 cv
495.661 336.384 497.268 339.821 496.58 340.964 cv
495.893 342.107 494.745 342.339 493.83 341.196 cv
492.919 340.053 490.393 341.424 489.018 339.361 cv
487.643 337.299 486.955 339.589 484.893 337.071 cv
482.83 334.553 476.183 332.946 476.183 332.946 cv
484.433 337.986 li
484.433 337.986 483.745 339.134 481.911 337.986 cv
480.08 336.839 480.08 339.134 477.786 336.839 cv
475.495 334.544 476.183 337.299 470.911 336.152 cv
465.643 335.004 465.411 329.736 465.411 329.736 cv
464.036 333.861 470.455 337.759 470.455 337.759 cv
456.481 335.241 462.433 327.214 462.433 327.214 cv
458.076 331.107 462.893 335.924 462.893 335.924 cv
456.481 333.174 459.911 325.384 459.911 325.384 cv
459.911 325.384 457.848 330.652 458.308 332.486 cv
458.763 334.321 460.598 335.236 459.683 335.696 cv
458.763 336.156 458.536 335.924 456.473 333.402 cv
454.411 330.879 455.098 335.236 453.268 332.486 cv
451.437 329.736 453.495 336.384 453.495 336.384 cv
449.138 335.241 451.205 329.277 451.205 329.277 cv
450.294 330.192 449.83 334.089 449.37 335.009 cv
448.906 335.928 447.768 335.696 447.536 335.009 cv
447.308 334.321 443.183 336.839 444.098 335.236 cv
445.018 333.634 442.723 334.777 442.268 332.259 cv
441.812 329.741 442.955 329.509 445.018 328.134 cv
447.08 326.759 448.911 325.839 449.598 325.611 cv
450.286 325.384 444.33 326.299 441.808 328.589 cv
439.281 330.879 441.12 332.946 440.661 335.236 cv
440.205 337.527 432.643 336.839 434.481 336.384 cv
436.316 335.928 437.455 333.634 437.455 333.634 cv
434.481 336.384 428.286 337.071 428.286 337.071 cv
441.808 332.031 438.826 324.236 438.826 324.236 cv
438.826 324.236 438.826 331.111 431.951 333.174 cv
425.076 335.236 431.951 333.174 428.513 335.236 cv
425.076 337.299 418.888 340.049 422.326 335.924 cv
425.763 331.799 422.326 324.924 422.326 324.924 cv
422.326 324.924 421.638 331.111 418.201 333.861 cv
414.763 336.611 409.951 336.611 404.451 337.986 cv
398.951 339.361 390.701 347.611 390.701 347.611 cv
390.701 347.611 390.873 345.377 392.419 344.002 cv
393.966 342.627 394.482 341.939 394.482 341.939 cv
394.482 341.939 390.529 343.658 389.669 345.205 cv
388.81 346.752 388.294 344.689 385.888 346.752 cv
383.482 348.814 383.998 347.783 381.419 348.643 cv
378.841 349.502 377.638 350.361 377.81 348.814 cv
377.982 347.268 378.841 346.236 374.201 345.377 cv
374.201 345.377 379.529 347.096 375.919 350.877 cv
375.919 350.877 372.482 350.361 371.623 351.393 cv
370.763 352.424 369.904 355.518 369.56 353.627 cv
369.216 351.736 370.248 350.533 370.935 349.846 cv
371.623 349.158 372.138 347.439 372.138 347.439 cv
372.138 347.439 371.794 348.986 369.904 349.674 cv
368.013 350.361 367.669 352.424 367.154 353.799 cv
366.638 355.174 367.841 352.424 364.919 354.658 cv
361.998 356.893 362.857 356.205 360.623 356.549 cv
358.388 356.893 355.81 356.205 351.169 357.752 cv
346.529 359.299 345.669 359.814 345.669 359.814 cv
345.669 359.814 353.404 357.408 355.466 357.408 cv
355.466 357.408 356.498 358.268 354.435 359.127 cv
352.373 359.986 352.373 359.127 351.513 361.018 cv
350.654 362.908 350.31 360.846 349.279 362.908 cv
348.248 364.971 347.044 363.939 346.701 364.799 cv
346.357 365.658 342.576 368.752 341.373 369.268 cv
340.169 369.783 338.107 369.783 336.388 369.096 cv
334.669 368.408 334.326 367.205 332.779 367.205 cv
331.232 367.205 327.794 368.236 327.794 368.236 cv
327.794 368.236 332.607 367.033 333.81 368.58 cv
335.013 370.127 337.248 370.299 337.248 370.299 cv
337.248 370.299 335.529 371.502 333.466 370.986 cv
331.404 370.471 331.576 371.502 330.544 371.674 cv
329.513 371.846 333.81 373.736 329.857 374.08 cv
325.904 374.424 324.013 372.877 324.013 372.877 cv
324.013 372.877 326.248 375.283 329.857 374.768 cv
329.857 374.768 328.654 377.346 326.248 377.346 cv
323.841 377.346 327.107 380.955 323.326 379.58 cv
319.544 378.205 318.169 375.283 319.373 373.908 cv
319.373 373.908 315.419 377.174 322.81 380.611 cv
322.81 380.611 320.919 378.721 319.029 382.158 cv
317.138 385.596 318.341 381.299 315.591 384.393 cv
312.841 387.486 311.638 388.174 312.498 386.455 cv
313.357 384.736 314.732 382.33 314.732 382.33 cv
314.732 382.33 312.841 384.564 310.607 388.861 cv
310.607 388.861 311.123 389.033 309.576 389.721 cv
308.029 390.408 308.373 390.064 307.341 392.471 cv
306.31 394.877 305.451 394.189 302.873 396.768 cv
300.294 399.346 297.029 399.002 297.029 399.002 cv
297.029 399.002 298.232 400.033 300.294 399.346 cv
300.294 399.346 298.404 399.002 295.482 402.783 cv
292.56 406.564 292.56 405.361 289.466 407.939 cv
286.373 410.518 283.794 408.111 283.451 410.689 cv
283.107 413.268 284.826 415.158 282.248 416.533 cv
279.669 417.908 280.185 423.064 277.607 424.268 cv
275.029 425.471 274.169 429.939 272.623 429.08 cv
271.076 428.221 270.216 429.768 270.044 432.174 cv
269.873 434.58 267.123 437.674 265.576 439.564 cv
264.029 441.455 261.279 445.408 261.451 444.721 cv
261.623 444.033 259.044 444.205 257.669 447.643 cv
257.669 447.643 260.591 444.033 261.279 445.752 cv
261.966 447.471 260.248 448.502 258.013 451.08 cv
255.779 453.658 255.435 457.096 253.201 458.471 cv
250.966 459.846 250.279 460.705 249.591 462.596 cv
248.904 464.486 247.357 463.627 247.357 464.83 cv
247.357 466.033 247.529 466.205 246.326 464.143 cv
245.123 462.08 244.263 461.393 244.263 461.393 cv
244.263 461.393 245.982 465.689 247.529 467.236 cv
247.529 467.236 245.466 469.643 245.466 470.846 cv
245.466 472.049 243.748 470.674 243.232 474.455 cv
242.716 478.236 241.341 479.611 241.513 478.408 cv
241.685 477.205 238.248 477.377 238.248 477.377 cv
238.248 477.377 241.341 477.033 240.138 479.268 cv
238.935 481.502 238.076 479.096 238.076 482.189 cv
238.076 485.283 239.623 483.393 238.076 485.283 cv
236.529 487.174 237.216 488.721 236.013 490.096 cv
234.81 491.471 233.091 494.564 233.091 494.564 cv
233.091 494.564 233.091 492.33 229.826 490.783 cv
229.826 490.783 234.638 494.564 230.341 503.33 cv
230.341 503.33 227.419 504.705 227.591 507.111 cv
227.763 509.518 227.935 508.314 226.904 510.205 cv
225.873 512.096 227.591 513.127 226.388 514.33 cv
225.185 515.533 227.076 519.314 224.669 521.205 cv
222.263 523.096 217.794 526.361 217.794 526.361 cv
217.794 526.361 222.951 523.955 224.326 522.408 cv
224.326 522.408 225.185 522.924 223.638 524.814 cv
222.091 526.705 223.638 527.393 222.435 528.939 cv
221.232 530.486 224.326 530.143 222.607 533.58 cv
220.888 537.018 224.498 539.252 222.435 538.564 cv
220.373 537.877 218.826 533.924 218.826 533.924 cv
218.826 533.924 219.169 538.049 222.091 540.283 cv
222.091 540.283 224.498 544.58 222.607 545.268 cv
220.716 545.955 223.466 548.705 222.091 548.705 cv
220.716 548.705 219.341 549.564 219.685 551.627 cv
220.029 553.689 218.31 556.439 218.31 556.439 cv
218.31 556.439 219.857 555.064 220.544 552.143 cv
221.232 549.221 222.607 551.799 221.06 553.689 cv
219.513 555.58 219.341 556.439 221.06 557.299 cv
222.779 558.158 219.341 559.189 220.544 560.393 cv
221.748 561.596 220.201 561.939 221.06 563.314 cv
221.919 564.689 221.232 566.752 221.919 568.127 cv
222.607 569.503 223.466 572.425 222.091 573.8 cv
220.716 575.175 220.373 578.44 220.373 578.44 cv
220.373 578.44 220.544 575.862 222.091 575.519 cv
223.638 575.175 222.951 575.347 221.748 577.237 cv
220.544 579.128 223.466 578.269 222.263 580.159 cv
221.06 582.05 223.123 582.565 221.576 583.94 cv
220.029 585.315 221.232 588.753 221.232 588.753 cv
221.232 588.753 220.201 585.144 222.435 584.972 cv
224.669 584.8 225.529 587.034 225.185 589.956 cv
224.841 592.878 226.216 593.222 225.873 594.597 cv
225.529 595.972 224.326 596.659 226.732 599.237 cv
229.138 601.815 227.591 603.706 228.451 605.081 cv
229.31 606.456 226.732 605.94 225.701 604.565 cv
225.701 604.565 225.529 606.112 228.966 607.487 cv
232.404 608.862 231.373 609.722 229.826 610.065 cv
228.279 610.409 229.998 611.44 227.591 610.753 cv
225.185 610.065 223.982 607.659 223.982 607.659 cv
223.982 607.659 225.185 611.44 229.654 613.331 cv
234.123 615.222 232.404 615.222 231.716 615.737 cv
231.029 616.253 233.091 618.315 232.576 619.003 cv
232.06 619.69 234.982 621.409 234.123 622.269 cv
233.263 623.128 234.466 622.784 236.357 625.019 cv
238.248 627.253 238.076 627.94 238.248 630.347 cv
238.419 632.753 240.31 632.409 241.513 634.3 cv
242.716 636.19 235.669 630.69 235.669 630.69 cv
241.857 636.19 li
241.857 636.19 241.513 637.909 240.31 636.878 cv
239.107 635.847 241.685 638.597 240.482 638.425 cv
239.279 638.253 240.482 639.284 242.029 639.8 cv
243.576 640.315 245.466 641.519 244.091 642.722 cv
242.716 643.925 245.294 647.706 245.294 647.706 cv
245.294 647.706 243.748 644.784 245.123 644.097 cv
246.498 643.409 246.326 645.815 245.982 647.534 cv
245.638 649.253 248.044 646.159 247.873 649.253 cv
247.701 652.347 250.107 654.237 250.107 654.237 cv
250.107 654.237 247.873 651.315 249.076 650.628 cv
250.279 649.94 250.966 652.003 251.654 654.581 cv
252.341 657.159 254.576 656.472 254.748 658.019 cv
254.919 659.565 256.123 659.394 257.326 659.737 cv
258.529 660.081 261.451 663.347 261.794 665.409 cv
262.138 667.472 264.373 665.581 265.404 667.815 cv
266.435 670.05 267.638 670.394 269.357 671.597 cv
271.076 672.8 269.529 674.69 269.529 674.69 cv
269.529 674.69 270.732 674.347 271.248 674.003 cv
271.763 673.659 273.138 675.206 272.794 676.753 cv
272.451 678.3 274.513 677.44 274.341 678.987 cv
274.169 680.534 275.888 683.284 275.888 683.284 cv
275.888 683.284 274.341 680.19 276.232 680.362 cv
278.123 680.534 277.607 680.362 278.466 682.769 cv
279.326 685.175 281.388 683.456 281.732 685.003 cv
282.076 686.55 284.31 685.69 284.482 687.581 cv
284.654 689.472 287.404 690.331 287.404 690.331 cv
287.404 690.331 284.138 688.097 286.201 688.097 cv
288.263 688.097 291.873 689.644 292.216 692.05 cv
292.56 694.456 300.123 695.831 300.123 695.831 cv
292.56 694.456 li
292.56 694.456 295.138 695.831 299.435 696.519 cv
303.732 697.206 302.185 697.206 302.357 698.581 cv
302.529 699.956 305.794 699.097 305.623 700.644 cv
305.451 702.19 307.685 702.706 309.404 702.706 cv
311.123 702.706 311.982 705.456 314.388 705.628 cv
316.794 705.8 318.169 705.456 319.544 707.519 cv
320.919 709.581 324.185 708.55 327.107 709.237 cv
330.029 709.925 322.123 710.44 322.123 710.44 cv
329.341 710.612 li
329.341 710.612 332.263 711.3 329.685 711.815 cv
327.107 712.331 329.518 713.006 331.748 713.19 cv
335.873 713.534 328.826 714.222 332.951 714.222 cv
337.076 714.222 338.966 714.737 339.826 714.909 cv
331.919 715.253 li
331.919 715.253 336.732 716.456 341.029 716.284 cv
345.326 716.112 343.263 718.003 346.357 718.175 cv
349.451 718.347 352.716 718.69 354.607 719.378 cv
356.498 720.065 360.623 723.503 360.623 723.503 cv
360.623 723.503 359.935 721.956 357.873 720.581 cv
355.81 719.206 358.56 719.894 359.935 721.956 cv
361.31 724.019 360.451 720.925 361.998 722.987 cv
363.544 725.05 367.669 725.565 367.669 725.565 cv
367.669 725.565 363.716 724.019 363.716 723.159 cv
363.716 722.3 366.638 721.612 368.529 722.987 cv
370.419 724.362 369.393 723.104 369.393 723.104 cv
cp
.823529 .666667 .380392 rgb
f
292.388 408.799 mo
292.388 408.799 247.013 456.924 229.826 507.111 cv
212.638 557.299 227.076 607.487 241.513 634.3 cv
255.951 661.112 284.138 690.675 323.326 707.862 cv
362.513 725.05 399.638 728.487 441.576 722.3 cv
483.513 716.112 527.513 702.362 563.263 672.8 cv
599.013 643.237 654.013 582.05 646.45 497.486 cv
292.388 408.799 li
cp
.682353 .490196 .2 rgb
f
248.844 488.089 mo
248.844 488.089 254.919 442.839 296.058 405.134 cv
329.058 374.884 342.803 373.736 361.138 362.736 cv
379.473 351.736 417.053 341.656 440.888 340.736 cv
464.723 339.817 485.808 340.968 498.638 348.299 cv
511.469 355.629 516.973 351.281 548.138 366.861 cv
579.304 382.442 616.893 415.218 631.558 448.218 cv
646.219 481.218 654.469 524.303 635.219 566.469 cv
615.969 608.635 604.969 615.965 586.638 639.8 cv
568.308 663.635 555.473 670.965 540.808 681.05 cv
526.138 691.135 512.388 691.131 493.138 700.3 cv
473.888 709.47 458.995 706.947 400.326 705.112 cv
341.656 703.277 315.759 687.465 303.844 673.715 cv
291.933 659.965 248.384 615.965 241.969 584.8 cv
235.558 553.634 228.683 545.839 248.844 488.089 cv
cp
.27451 .207843 .145098 rgb
f
443.067 702.358 mo
432.411 702.358 419.657 702.023 399.832 701.4 cv
343.156 699.63 318.169 684.144 307.187 671.464 cv
303.607 667.386 li
289.939 651.831 253.626 610.513 248.075 583.541 cv
247.043 578.514 245.939 574.002 244.895 569.739 cv
239.592 548.086 236.086 533.782 252.444 486.938 cv
252.586 486.525 li
252.672 486.1 li
252.754 485.708 261.274 445.473 300.273 409.731 cv
326.2 385.961 337.394 379.683 350.353 372.413 cv
353.631 370.578 356.987 368.692 360.678 366.479 cv
377.32 356.498 418.845 345.377 442.963 344.449 cv
446.564 344.312 450.066 344.234 453.452 344.234 cv
472.771 344.234 486.538 346.735 495.544 351.882 cv
501.706 355.402 507.086 356.695 513.316 358.19 cv
521.454 360.146 531.582 362.578 549.019 371.296 cv
579.961 386.765 612.273 420.181 625.855 450.75 cv
638.308 478.769 649.055 521.141 629.547 563.877 cv
615.187 595.336 605.746 606.671 593.801 621.022 cv
590.011 625.573 586.097 630.278 581.696 635.997 cv
565.914 656.515 554.785 664.043 541.907 672.757 cv
537.271 675.911 li
529.734 681.093 522.313 683.379 513.716 686.03 cv
506.909 688.127 499.197 690.508 490.457 694.667 cv
477.94 700.631 467.31 702.358 443.067 702.358 cv
cp
.635294 .780392 .196078 rgb
f
269.701 625.362 mo
269.701 625.362 253.888 605.425 249.076 589.612 cv
244.263 573.8 236.013 552.486 242.888 522.236 cv
249.763 491.986 253.201 480.299 259.388 465.861 cv
265.576 451.424 296.513 392.299 375.576 359.299 cv
375.576 359.299 317.211 389.343 284.826 435.611 cv
265.576 463.111 246.326 503.674 244.951 545.611 cv
243.576 587.55 269.701 625.362 269.701 625.362 cv
cp
.894118 1 .6 rgb
f
423.933 351.968 mo
423.933 351.968 454.638 340.509 485.808 352.884 cv
485.808 352.884 455.094 346.009 423.933 351.968 cv
cp
1 1 1 rgb
f
421.183 361.134 mo
421.183 361.134 452.812 349.218 489.018 361.134 cv
489.018 361.134 458.763 355.634 421.183 361.134 cv
cp
f
449.349 665.276 mo
446.057 662.715 443.479 659.252 441.318 650.934 cv
441.176 651.569 440.996 652.278 440.764 653.073 cv
439.152 658.552 437.648 660.575 436.673 661.306 cv
433.639 663.583 li
432.101 660.115 li
431.371 658.482 429.265 653.855 428.234 652.051 cv
427.332 650.474 426.438 646.005 425.72 640.917 cv
425.565 641.901 425.381 642.954 425.157 644.109 cv
423.799 651.256 421.471 657.938 421.376 658.221 cv
420.122 661.787 li
416.912 659.785 li
416.095 659.273 413.547 657.155 412.245 650.194 cv
409.951 657.327 405.211 662.122 404.988 662.358 cv
401.825 665.517 li
400.063 661.409 li
399.926 661.1 396.776 653.614 397.49 644.961 cv
397.537 644.44 397.619 643.813 397.722 643.096 cv
395.114 647.81 391.41 652.024 388.359 652.024 cv
386.563 652.024 385.084 650.839 384.586 649.013 cv
384.255 647.801 384.062 645.858 384.599 641.678 cv
377.153 652.574 374.042 652.57 372.709 652.57 cv
371.696 652.57 368.413 652.175 368.142 647.04 cv
368.013 644.664 368.499 641.192 369.388 637.313 cv
364.55 644.518 359.346 645.665 356.523 645.665 cv
355.595 645.665 354.977 645.536 354.753 645.48 cv
352.458 644.909 li
352.458 642.546 li
352.458 642.374 352.471 638.258 353.163 633.746 cv
353.593 630.979 354.276 626.527 356.364 621.375 cv
350.637 626.519 342.606 633.643 339.959 635.628 cv
338.979 636.367 338.042 636.521 337.432 636.521 cv
336.186 636.521 335.018 635.898 334.244 634.82 cv
332.259 632.065 332.603 625.264 333.273 623.244 cv
333.312 623.146 336.659 613.344 346.387 604.012 cv
347.934 602.529 349.923 600.247 352.127 597.523 cv
347.813 601.541 343.68 605.06 340.878 607.011 cv
334.872 611.188 331.391 612.167 328.323 613.035 cv
327.309 613.327 326.312 613.602 325.221 614.023 cv
320.563 615.811 316.923 616.188 316.773 616.206 cv
310.693 616.816 li
313.894 611.612 li
315.888 608.373 319.287 602.512 319.936 600.569 cv
320.262 599.594 320.907 598.34 321.852 596.904 cv
318.286 598.322 315.226 598.589 313.456 598.589 cv
312.601 598.589 312.111 598.524 312.111 598.524 cv
308.33 598.039 li
309.631 594.459 li
309.649 594.416 311.08 590.588 311.857 587.387 cv
308.446 589.333 305.979 590.734 304.656 591.297 cv
303.444 591.834 li
301.021 592.917 297.36 594.55 293.617 595.173 cv
293.174 595.246 292.775 595.28 292.418 595.28 cv
290.321 595.28 289.239 594.172 288.783 593.514 cv
287.356 591.451 288.285 588.985 289.024 586.996 cv
289.208 586.502 289.411 586.042 289.471 585.686 cv
289.943 582.841 293.832 576.684 298.602 573.898 cv
300.075 573.039 301.644 571.991 303.41 570.81 cv
304.617 570.006 305.945 569.121 307.406 568.179 cv
304.286 569.379 302.443 569.809 300.497 569.809 cv
299.349 569.809 298.228 569.641 296.715 569.396 cv
295.014 569.125 292.689 568.746 288.946 568.526 cv
276.459 567.792 275.742 567.074 274.973 566.31 cv
273.323 564.655 li
274.513 562.636 li
274.668 562.373 278.436 556.062 284.972 553.371 cv
286.179 552.873 287.043 552.37 287.876 551.894 cv
290.519 550.381 292.882 549.264 298.296 548.542 cv
297.867 548.529 297.476 548.521 297.127 548.521 cv
293.102 548.521 290.614 547.266 288.418 546.157 cv
287.258 545.572 286.256 545.062 285.053 544.761 cv
282.965 544.245 280.619 544.133 279.021 544.133 cv
278.024 544.133 277.375 544.176 277.328 544.181 cv
272.348 544.524 li
274.346 539.948 li
274.466 539.678 277.349 533.279 285.625 530.916 cv
290.493 529.523 294.167 528.771 299.65 528.771 cv
300.196 528.771 300.767 528.776 301.356 528.793 cv
294.128 527.831 290.467 527.165 290.252 527.131 cv
283.064 525.824 li
289.067 521.665 li
289.17 521.596 289.483 521.386 289.96 521.115 cv
287.662 520.363 286.265 519.096 284.847 517.604 cv
284.332 517.059 283.807 516.487 283.051 515.959 cv
279.042 513.152 278.037 510.209 277.877 509.643 cv
276.975 506.488 li
280.189 505.844 li
280.292 505.826 282.75 505.346 286.759 505.346 cv
289.075 505.346 291.46 505.5 293.849 505.813 cv
297.059 506.23 300.058 506.828 303.479 507.691 cv
302.894 507.33 302.288 506.943 301.596 506.506 cv
300.037 505.525 298.017 504.25 294.919 502.41 cv
291.417 500.335 287.52 497.482 288.521 493.852 cv
289.273 491.093 292.367 490.113 294.794 490.113 cv
296.01 490.113 298.502 490.585 303.904 491.651 cv
307.066 492.274 310.663 492.983 312.098 493.129 cv
316.008 493.521 322.956 495.814 333.96 500.344 cv
336.904 501.556 339.869 502.969 342.791 504.392 cv
341.398 503.656 339.972 502.896 338.558 502.145 cv
333.436 499.42 328.323 496.691 325.173 495.205 cv
318.599 492.09 316.279 490.542 311.411 486.018 cv
305.833 480.836 306.069 475.491 306.117 474.898 cv
306.366 471.636 li
309.602 472.139 li
310.036 472.208 320.49 473.849 325.586 475.207 cv
331.305 476.732 341.562 481.996 346.241 485.343 cv
348.531 486.976 350.83 488.553 353.305 489.876 cv
353.305 489.876 356.132 486.439 358.367 486.916 cv
356.932 486.362 355.02 485.528 352.927 484.622 cv
348.591 482.74 342.674 480.166 340.053 479.792 cv
335.185 479.1 327.176 476.023 323.467 472.724 cv
320.262 469.875 315.57 463.52 315.372 463.249 cv
311.595 458.131 li
317.95 458.432 li
317.95 458.432 325.057 458.776 328.443 459.115 cv
330.807 459.347 337.879 460.215 345.665 462.673 cv
341.458 460.701 338.451 459.253 337.57 458.767 cv
336.272 458.045 334.734 457.276 333.097 456.456 cv
329.664 454.741 325.775 452.799 322.625 450.595 cv
316.734 446.465 314.186 440.97 316.434 437.223 cv
319.102 432.771 327.825 432.642 328.813 432.642 cv
331.099 432.642 336.582 434.21 341.304 436.308 cv
340.225 434.339 339.568 432.513 339.568 431.22 cv
339.568 430.167 340.066 426.734 346.486 426.734 cv
348.329 426.734 350.611 427.026 352.953 427.735 cv
350.263 424.628 348.14 422.003 346.976 418.806 cv
345.579 414.96 344.879 411.501 344.853 411.36 cv
344.166 407.927 li
344.166 407.927 347.719 407.742 347.749 407.742 cv
350.069 407.742 356.124 408.137 361.138 412.481 cv
362.26 413.457 363.437 414.634 364.631 415.923 cv
363.987 413.697 363.471 411.721 363.471 409.766 cv
363.446 408.885 li
363.385 406.947 363.313 404.94 364.674 403.535 cv
365.564 402.616 li
367.261 402.444 li
369.083 402.444 370.544 403.759 371.726 405.052 cv
375.399 409.061 382.515 417.526 385.287 421.324 cv
386.167 422.536 li
389.33 426.876 393.081 432.049 396.39 436.767 cv
393.128 430.726 390.254 425.561 388.913 423.327 cv
388.239 422.214 387.474 421.032 386.683 419.825 cv
383.632 415.137 380.479 410.298 380.818 406.182 cv
381.007 403.952 380.844 402.027 380.689 400.167 cv
380.582 398.877 380.474 397.653 380.474 396.428 cv
380.474 393.304 382.541 391.878 384.458 391.878 cv
387.349 391.878 390.155 395.049 391.99 397.705 cv
392.321 398.186 392.656 398.667 392.991 399.161 cv
392.501 395.93 392.479 391.628 392.479 391.091 cv
392.479 386.623 li
396.63 388.281 li
396.918 388.393 402.959 390.868 406.475 396.901 cv
406.131 391.259 405.761 383.104 406.311 381.462 cv
407.003 379.396 li
409.414 379.25 li
412.808 379.25 418.575 385.656 421.84 391.642 cv
425.037 397.502 426.627 402.362 427.671 407.759 cv
427.675 407.746 432.02 395.956 432.02 395.956 cv
435.341 400.695 li
435.444 400.845 437.936 404.442 440.704 412.064 cv
440.716 412.107 440.733 412.146 440.747 412.185 cv
440.802 411.3 440.833 410.393 440.833 409.431 cv
440.833 404.18 442.817 394.55 442.908 394.146 cv
444.889 384.547 li
448.653 393.592 li
448.764 393.846 450.638 398.4 452.705 406.667 cv
452.313 401.417 452.296 397.708 452.95 395.294 cv
454.08 391.177 458.321 385.544 458.806 384.917 cv
461.415 381.492 li
463.748 385.119 li
463.876 385.321 466.815 389.957 468.315 398.336 cv
468.676 395.896 469.011 393.459 469.192 391.182 cv
469.965 381.492 479.788 374.845 480.205 374.566 cv
483.655 372.267 li
484.79 376.25 li
484.845 376.452 486.199 381.2 486.551 384.418 cv
486.624 385.016 li
486.869 387.138 487.178 389.79 486.865 394.349 cv
486.929 394.241 486.994 394.142 487.063 394.043 cv
491.063 388.217 499.347 383.344 499.695 383.142 cv
504.766 380.186 li
504.237 386.03 li
504.211 386.343 503.515 393.807 501.409 399.763 cv
500.885 401.262 500.378 402.556 499.889 403.789 cv
499.648 404.412 499.416 405.013 499.184 405.606 cv
499.841 404.829 500.602 404.034 501.517 403.2 cv
506.329 398.787 513.913 398.736 514.231 398.736 cv
518.188 398.736 li
517.145 402.556 li
517.145 402.556 516.144 406.242 513.793 414.277 cv
512.289 419.451 510.527 423.026 508.306 426.884 cv
511.886 422.128 516.328 416.684 519.121 414.656 cv
522.929 411.888 531.161 407.596 531.509 407.416 cv
537.422 404.339 li
535.849 410.814 li
535.483 412.284 532.223 425.32 528.214 430.064 cv
526.796 431.731 525.794 433.532 524.733 435.435 cv
524.071 436.617 523.371 437.872 522.528 439.161 cv
522.757 438.924 522.979 438.679 523.203 438.435 cv
525.665 435.796 528.2 433.063 532.803 431.852 cv
538.689 430.305 545.062 426.824 545.117 426.79 cv
552.276 422.863 li
549.414 430.502 li
549.294 430.812 548.194 433.652 545.065 438.168 cv
544.185 439.44 543.54 441.03 542.788 442.869 cv
541.392 446.324 539.651 450.595 535.424 454.582 cv
535.591 454.47 535.759 454.363 535.922 454.255 cv
539.227 452.099 543.781 451.003 549.457 451.003 cv
555.185 451.003 560.066 452.128 560.269 452.171 cv
565.579 453.409 li
561.729 457.259 li
561.479 457.5 557.483 461.487 553.015 465.397 cv
553.148 465.393 553.294 465.393 553.428 465.393 cv
553.883 465.393 554.347 465.41 554.819 465.44 cv
563.452 466.106 571.87 467.112 571.956 467.125 cv
574.388 467.417 li
574.606 469.853 li
574.663 470.468 574.903 475.959 566.254 478.984 cv
565.184 479.358 564.879 479.573 563.852 480.291 cv
562.683 481.107 560.917 482.335 557.032 484.454 cv
555.34 485.378 li
553.81 486.22 552.869 486.731 552.139 487.083 cv
555.499 486.379 558.962 486.16 561.66 485.988 cv
562.661 485.923 563.551 485.868 564.281 485.794 cv
564.681 485.756 565.055 485.734 565.416 485.734 cv
568.007 485.734 570.108 486.727 571.183 488.467 cv
571.62 489.176 571.861 489.967 571.899 490.783 cv
572.132 490.796 572.386 490.8 572.673 490.8 cv
573.425 490.788 li
579.703 490.448 li
576.051 495.562 li
575.831 495.875 573.747 498.65 568.449 500.92 cv
566.456 501.774 565.339 502.316 564.294 502.818 cv
562.89 503.506 561.608 504.125 558.708 505.285 cv
558.111 505.525 557.05 505.818 555.636 506.148 cv
556.065 506.132 556.491 506.123 556.921 506.123 cv
560.011 506.123 562.675 506.725 565.54 508.074 cv
571.285 510.776 576.27 513.763 576.484 513.888 cv
581.207 516.724 li
576.282 519.189 li
576.257 519.203 573.683 520.487 571.427 521.776 cv
568.612 523.384 566.185 523.787 556.774 525.047 cv
558.901 525.76 561.093 526.486 563.112 526.843 cv
564.78 527.131 li
569.403 527.917 571.947 528.355 574.155 531.887 cv
575.183 533.533 577.198 534.285 577.215 534.289 cv
585.323 536.992 li
577.327 539.991 li
577.327 539.991 574.568 541.026 571.126 542.058 cv
569.378 542.582 567.452 542.814 564.883 542.814 cv
563.864 542.814 562.773 542.784 561.549 542.715 cv
570.379 546.904 573.004 554.527 573.129 554.88 cv
574.452 558.863 li
559.589 558.863 li
560.341 559.422 561.184 559.95 562.219 560.439 cv
569.163 563.731 573.202 569.159 573.36 569.387 cv
576.669 573.895 li
571.083 574.195 li
571.083 574.195 570.014 574.256 568.226 574.256 cv
565.536 574.256 561.377 574.127 556.844 573.508 cv
553.831 573.096 550.415 572.274 546.354 570.96 cv
549.685 574.238 552.035 577.925 551.679 579.764 cv
551.202 582.205 li
548.121 582.243 li
548.078 582.27 548.03 582.295 547.983 582.325 cv
547.063 582.841 545.805 583.541 544.245 583.541 cv
542.771 583.541 541.16 582.789 538.938 581.754 cv
537.25 580.972 535.351 580.082 533.979 579.815 cv
533.808 579.777 533.628 579.734 533.43 579.687 cv
537.529 583.206 540.854 589.359 541.594 590.799 cv
544.671 596.732 li
538.183 595.121 li
538.152 595.117 535.655 594.502 532.604 594.197 cv
532.046 594.142 531.041 594.013 529.777 593.807 cv
529.838 593.862 529.897 593.914 529.945 593.957 cv
532.27 596.088 534.246 597.635 536.008 599.022 cv
537.284 600.02 538.448 600.943 539.565 601.919 cv
542.612 604.578 545.762 611.922 546.372 613.365 cv
547.278 615.54 li
545.393 616.949 li
545.087 617.177 543.975 617.916 542.281 617.916 cv
541.01 617.916 539.764 617.512 538.569 616.713 cv
538.251 616.498 538.251 616.498 537.567 616.387 cv
536.429 616.188 534.564 615.871 530.585 614.208 cv
533.129 619.338 534.151 624.653 534.216 624.98 cv
534.887 628.56 li
531.238 628.56 li
530.8 628.56 527.217 628.478 522.335 625.93 cv
524.621 631.559 525.515 637.424 525.558 637.768 cv
526.314 642.89 li
526.314 642.89 517.157 639.37 514.507 638.373 cv
511.628 637.295 506.42 633.961 503.163 629.797 cv
504.911 635.095 505.801 639.332 505.853 639.598 cv
506.995 645.111 li
501.762 643.019 li
501.762 643.019 496.717 640.999 494.363 639.989 cv
493.465 639.606 492.42 638.833 491.316 637.807 cv
491.505 639.057 491.579 640.281 491.579 641.545 cv
491.579 658.113 li
487.196 655.922 li
487.08 655.861 484.17 654.396 481.58 652.18 cv
481.111 651.784 li
480.011 650.852 478.447 649.528 476.797 647.758 cv
476.746 648.535 476.655 649.36 476.548 650.259 cv
475.564 658.156 474.876 660.464 474.748 660.842 cv
473.308 665.16 li
469.888 662.165 li
469.776 662.063 467.035 659.664 464.594 656.876 cv
463.803 655.961 462.175 654.108 460.555 651.496 cv
460.581 651.969 460.581 652.39 460.555 652.751 cv
460.306 656.515 458.957 657.976 457.487 658.926 cv
456.808 662.686 453.289 665.13 452.876 665.405 cv
451.067 666.612 li
449.349 665.276 li
cp
.27451 .207843 .145098 rgb
f
465.54 457.457 mo
465.54 457.457 466.438 434.481 466.209 429.441 cv
465.875 422.102 466.872 408.765 465.54 400.093 cv
464.208 391.422 461.208 386.756 461.208 386.756 cv
461.208 386.756 456.873 392.423 455.867 396.089 cv
454.87 399.758 455.867 408.765 456.873 418.772 cv
457.874 428.775 455.867 458.123 455.867 458.123 cv
455.867 458.123 454.535 431.443 451.867 417.101 cv
449.203 402.762 445.86 394.757 445.86 394.757 cv
445.86 394.757 443.866 404.429 443.866 409.431 cv
443.866 414.432 442.865 418.102 444.197 424.104 cv
445.529 430.107 449.203 458.454 449.203 458.454 cv
449.203 458.454 443.531 437.111 442.534 433.441 cv
441.533 429.776 440.527 420.439 437.859 413.1 cv
435.195 405.765 432.857 402.427 432.857 402.427 cv
432.857 402.427 432.857 402.427 430.52 408.765 cv
428.191 415.103 430.855 424.771 433.858 438.447 cv
436.862 452.12 437.859 458.789 437.859 458.789 cv
437.859 458.789 426.52 420.77 425.522 413.435 cv
424.521 406.096 423.185 400.429 419.185 393.089 cv
415.18 385.755 409.517 381.415 409.182 382.42 cv
408.846 383.421 409.182 393.755 409.848 401.761 cv
410.514 409.766 421.853 432.109 426.52 447.114 cv
431.19 462.123 427.194 458.454 427.194 458.454 cv
427.194 458.454 416.512 428.775 414.183 421.771 cv
411.846 414.767 407.514 407.097 404.85 400.429 cv
402.178 393.755 395.509 391.091 395.509 391.091 cv
395.509 391.091 395.509 396.759 396.175 399.758 cv
396.841 402.762 400.841 413.435 403.51 418.772 cv
406.182 424.104 418.184 459.124 418.184 459.124 cv
418.184 459.124 405.847 430.773 400.841 419.769 cv
395.84 408.765 392.505 403.759 389.502 399.427 cv
386.502 395.092 383.503 393.425 383.503 396.428 cv
383.503 399.427 384.169 402.427 383.838 406.431 cv
383.503 410.432 388.505 416.77 391.504 421.771 cv
394.508 426.773 404.85 445.782 410.514 457.457 cv
416.181 469.127 412.185 466.794 412.185 466.794 cv
412.185 466.794 404.511 455.785 401.507 450.118 cv
398.508 444.45 385.501 426.773 382.837 423.103 cv
380.169 419.434 373.165 411.098 369.496 407.097 cv
365.826 403.093 366.492 407.428 366.492 409.766 cv
366.492 412.099 367.493 414.767 368.499 418.433 cv
369.496 422.102 378.167 429.441 383.503 435.779 cv
388.836 442.117 405.512 467.46 405.512 467.46 cv
405.512 467.46 375.502 433.777 373.165 431.108 cv
370.828 428.44 364.159 419.103 359.157 414.767 cv
354.156 410.432 347.818 410.763 347.818 410.763 cv
347.818 410.763 348.484 414.101 349.816 417.767 cv
351.152 421.436 354.156 424.439 358.156 429.106 cv
362.157 433.777 388.84 461.457 388.84 461.457 cv
388.84 461.457 363.497 437.893 357.713 433.441 cv
351.93 428.999 342.597 428.999 342.597 431.22 cv
342.597 433.441 346.598 440.11 351.492 443.226 cv
356.386 446.341 358.161 449.005 362.165 451.23 cv
366.166 453.452 384.397 469.015 384.397 469.015 cv
384.397 469.015 348.823 445.894 346.155 442.783 cv
343.491 439.667 331.924 435.667 328.813 435.667 cv
325.702 435.667 320.361 436.557 319.029 438.778 cv
317.697 441 319.918 445.004 324.361 448.12 cv
328.809 451.226 335.035 453.899 339.035 456.121 cv
343.036 458.342 394.624 481.91 394.624 481.91 cv
394.624 481.91 395.84 486.804 380.835 480.797 cv
365.826 474.794 360.154 471.795 350.821 467.795 cv
341.48 463.791 331.477 462.454 328.143 462.123 cv
324.808 461.788 317.804 461.457 317.804 461.457 cv
317.804 461.457 322.471 467.795 325.474 470.463 cv
328.478 473.127 335.813 476.131 340.483 476.797 cv
345.149 477.463 356.485 483.135 360.494 484.467 cv
364.49 485.803 390.172 494.805 390.172 494.805 cv
390.172 494.805 384.835 493.585 373.831 490.585 cv
362.827 487.582 360.047 491.252 360.047 491.252 cv
360.047 491.252 367.493 497.139 360.825 495.807 cv
354.156 494.475 349.15 491.136 344.483 487.801 cv
339.813 484.467 329.81 479.465 324.808 478.129 cv
319.802 476.797 309.133 475.13 309.133 475.13 cv
309.133 475.13 308.802 479.465 313.469 483.801 cv
318.139 488.136 320.133 489.468 326.475 492.472 cv
332.809 495.471 347.152 503.477 353.49 506.476 cv
359.823 509.479 377.832 518.15 366.827 516.818 cv
355.823 515.481 344.148 507.812 332.809 503.141 cv
321.474 498.475 315.136 496.473 311.797 496.142 cv
308.463 495.807 296.792 493.138 294.794 493.138 cv
292.792 493.138 287.459 494.475 296.458 499.811 cv
305.463 505.144 305.463 505.81 311.135 508.146 cv
316.807 510.48 326.806 513.814 336.147 516.152 cv
345.48 518.485 361.16 522.816 358.491 523.822 cv
355.823 524.818 337.479 521.149 322.471 516.482 cv
307.466 511.813 301.128 509.814 293.458 508.813 cv
285.788 507.812 280.787 508.813 280.787 508.813 cv
280.787 508.813 281.453 511.146 284.787 513.479 cv
288.122 515.816 288.122 518.816 295.46 518.816 cv
302.799 518.816 304.462 523.156 299.796 522.154 cv
295.125 521.149 290.786 524.152 290.786 524.152 cv
290.786 524.152 298.125 525.489 312.798 527.156 cv
327.472 528.819 330.807 531.156 338.146 531.492 cv
345.48 531.822 351.152 534.826 346.486 534.826 cv
341.815 534.826 323.137 533.825 310.465 532.488 cv
297.79 531.156 293.458 531.822 286.454 533.825 cv
279.455 535.823 277.117 541.16 277.117 541.16 cv
277.117 541.16 281.788 540.829 285.788 541.83 cv
289.789 542.827 291.791 545.5 297.127 545.5 cv
302.464 545.5 317.804 547.162 322.806 546.166 cv
327.807 545.16 366.492 541.495 366.492 541.495 cv
366.492 541.495 325.474 550.166 308.132 550.832 cv
290.786 551.502 291.791 553.836 286.119 556.169 cv
280.456 558.502 277.117 564.174 277.117 564.174 cv
277.117 564.174 277.783 564.84 289.123 565.506 cv
300.462 566.172 299.13 568.174 306.8 565.171 cv
314.47 562.172 320.133 561.506 335.142 556.835 cv
350.151 552.164 375.167 544.829 375.167 544.829 cv
375.167 544.829 323.472 562.507 316.137 566.507 cv
308.802 570.509 304.131 574.178 300.127 576.512 cv
296.126 578.849 292.792 584.182 292.457 586.184 cv
292.126 588.186 289.123 592.853 293.123 592.187 cv
297.127 591.521 301.128 589.522 303.461 588.517 cv
305.794 587.516 313.469 582.85 321.474 578.514 cv
329.475 574.178 360.825 555.503 360.825 555.503 cv
360.825 555.503 343.151 569.843 333.144 574.849 cv
323.137 579.846 315.802 582.85 315.136 586.519 cv
314.47 590.188 312.467 595.521 312.467 595.521 cv
312.467 595.521 318.139 596.191 324.473 592.187 cv
330.807 588.186 339.813 580.852 347.152 576.512 cv
354.491 572.176 366.827 560.504 366.827 560.504 cv
366.827 560.504 348.819 578.849 339.151 584.852 cv
329.475 590.854 323.811 598.524 322.806 601.523 cv
321.805 604.527 316.472 613.198 316.472 613.198 cv
316.472 613.198 319.802 612.863 324.142 611.195 cv
328.478 609.528 331.477 609.859 339.151 604.527 cv
346.817 599.19 363.158 583.185 367.493 576.512 cv
371.825 569.843 379.834 565.171 377.497 568.174 cv
375.167 571.179 356.485 598.524 348.484 606.194 cv
340.483 613.864 336.813 622.2 336.147 624.202 cv
335.481 626.2 335.481 635.207 338.146 633.204 cv
340.814 631.206 349.816 623.201 356.485 617.198 cv
363.158 611.195 386.167 574.509 386.167 574.509 cv
386.167 574.509 372.83 602.859 365.495 611.866 cv
358.156 620.868 356.82 629.87 356.154 634.21 cv
355.488 638.541 355.488 642.546 355.488 642.546 cv
355.488 642.546 362.157 644.213 368.164 633.539 cv
374.162 622.87 372.83 622.2 378.498 612.532 cv
384.169 602.859 401.847 569.508 401.847 569.508 cv
401.847 569.508 384.835 608.862 380.169 616.863 cv
375.502 624.868 370.828 640.543 371.163 646.877 cv
371.494 653.215 377.166 647.212 382.167 639.877 cv
387.173 632.543 389.502 616.863 392.836 611.195 cv
396.175 605.528 402.844 589.854 402.844 589.854 cv
402.844 589.854 393.171 616.863 391.173 624.868 cv
389.171 632.873 386.502 644.544 387.504 648.213 cv
388.505 651.883 396.506 641.88 397.846 634.541 cv
399.178 627.206 410.514 601.858 410.514 601.858 cv
410.514 601.858 401.172 637.209 400.51 645.214 cv
399.84 653.215 402.844 660.219 402.844 660.219 cv
402.844 660.219 408.846 654.216 410.183 645.88 cv
411.515 637.544 415.515 610.529 415.515 610.529 cv
415.515 610.529 413.848 638.876 414.849 647.212 cv
415.85 655.548 418.519 657.22 418.519 657.22 cv
418.519 657.22 420.852 650.547 422.184 643.547 cv
423.516 636.543 423.516 633.539 423.516 626.54 cv
423.516 619.536 425.188 584.852 425.188 584.852 cv
425.188 584.852 426.859 615.531 427.194 624.533 cv
427.525 633.539 429.523 648.213 430.855 650.547 cv
432.191 652.884 434.86 658.887 434.86 658.887 cv
434.86 658.887 436.192 657.886 437.859 652.218 cv
439.53 646.546 438.194 646.546 438.525 637.875 cv
438.864 629.204 438.194 619.536 438.194 615.531 cv
438.194 611.531 438.525 602.524 438.525 602.524 cv
438.525 602.524 440.862 633.875 443.196 645.545 cv
445.529 657.22 448.197 660.554 451.201 662.887 cv
451.201 662.887 454.204 660.885 454.535 658.221 cv
454.87 655.548 457.204 657.551 457.539 652.549 cv
457.874 647.547 451.201 623.201 451.201 619.201 cv
451.201 615.2 448.868 601.523 448.868 601.523 cv
448.868 601.523 458.205 634.876 459.537 641.214 cv
460.873 647.547 464.542 652.218 466.872 654.887 cv
469.209 657.551 471.881 659.888 471.881 659.888 cv
471.881 659.888 472.543 657.886 473.544 649.881 cv
474.545 641.88 473.213 639.877 470.876 634.876 cv
468.543 629.87 468.878 624.533 465.875 622.2 cv
462.871 619.867 460.873 606.529 460.873 606.529 cv
460.873 606.529 470.541 627.206 472.878 635.207 cv
475.208 643.212 481.214 647.883 483.552 649.881 cv
485.889 651.883 488.553 653.215 488.553 653.215 cv
488.553 653.215 488.553 645.545 488.553 641.545 cv
488.553 637.544 487.883 633.875 483.217 627.537 cv
478.55 621.203 473.544 611.195 473.544 611.195 cv
473.544 611.195 483.552 620.868 485.889 625.539 cv
488.218 630.205 493.224 636.208 495.557 637.209 cv
497.891 638.21 502.892 640.208 502.892 640.208 cv
502.892 640.208 500.894 630.54 496.889 622.2 cv
492.885 613.864 480.217 598.524 480.217 598.524 cv
480.217 598.524 501.891 622.2 504.555 626.54 cv
507.228 630.871 512.899 634.541 515.567 635.542 cv
518.231 636.543 522.571 638.21 522.571 638.21 cv
522.571 638.21 520.9 626.871 516.233 621.203 cv
511.559 615.531 503.894 609.193 500.559 604.862 cv
497.22 600.526 477.88 578.849 477.88 578.849 cv
477.88 578.849 516.569 618.87 521.901 622.2 cv
527.238 625.539 531.238 625.539 531.238 625.539 cv
531.238 625.539 529.236 614.865 523.903 609.859 cv
518.563 604.862 516.569 602.189 510.562 596.521 cv
504.555 590.854 502.562 588.186 502.562 588.186 cv
502.562 588.186 524.234 608.196 531.238 611.195 cv
538.242 614.199 538.242 612.863 540.245 614.199 cv
542.247 615.531 543.579 614.53 543.579 614.53 cv
543.579 614.53 540.245 606.529 537.581 604.196 cv
534.908 601.858 531.909 599.856 527.904 596.191 cv
523.903 592.521 495.557 574.509 495.557 574.509 cv
495.557 574.509 513.565 584.517 516.899 586.85 cv
520.234 589.188 529.571 590.854 532.905 591.186 cv
536.24 591.521 538.913 592.187 538.913 592.187 cv
538.913 592.187 533.902 582.519 529.236 580.512 cv
524.569 578.514 522.232 573.512 515.567 570.509 cv
508.895 567.508 486.551 552.834 486.551 552.834 cv
486.551 552.834 515.237 567.173 518.897 569.508 cv
522.571 571.845 531.238 576.181 534.577 576.847 cv
537.911 577.513 542.578 580.512 544.245 580.512 cv
545.917 580.512 547.579 578.514 548.581 579.18 cv
549.582 579.846 544.576 571.179 537.245 568.174 cv
529.906 565.171 526.237 562.507 518.897 558.837 cv
511.559 555.168 509.896 554.502 509.896 554.502 cv
509.896 554.502 516.233 555.168 528.239 560.504 cv
540.245 565.837 549.917 569.508 557.252 570.509 cv
564.591 571.51 570.925 571.179 570.925 571.179 cv
570.925 571.179 567.259 566.172 560.921 563.173 cv
554.583 560.174 554.253 555.834 546.578 554.502 cv
538.913 553.17 515.898 543.493 515.898 543.493 cv
515.898 543.493 550.248 555.834 558.584 555.834 cv
566.929 555.834 570.254 555.834 570.254 555.834 cv
570.254 555.834 567.59 547.833 557.918 544.498 cv
548.245 541.16 547.249 540.494 534.237 537.83 cv
521.235 535.157 503.894 529.489 503.894 529.489 cv
503.894 529.489 546.578 538.496 554.583 539.162 cv
562.589 539.828 566.929 540.163 570.254 539.162 cv
573.593 538.16 576.261 537.159 576.261 537.159 cv
576.261 537.159 573.258 536.158 571.595 533.49 cv
569.923 530.826 568.261 530.826 562.589 529.82 cv
556.921 528.819 550.914 525.489 546.247 525.82 cv
541.577 526.155 513.896 522.816 513.896 522.816 cv
513.896 522.816 545.581 523.486 555.585 522.154 cv
565.588 520.818 567.59 520.483 569.923 519.151 cv
572.261 517.814 574.929 516.482 574.929 516.482 cv
574.929 516.482 569.923 513.479 564.256 510.815 cv
558.584 508.146 555.249 509.479 549.582 509.479 cv
543.91 509.479 541.577 508.482 536.906 509.814 cv
532.239 511.146 508.895 511.146 508.895 511.146 cv
508.895 511.146 552.585 504.478 557.587 502.475 cv
562.589 500.473 562.589 500.142 567.259 498.14 cv
571.926 496.142 573.593 493.809 573.593 493.809 cv
573.593 493.809 567.59 494.139 568.591 492.137 cv
569.593 490.139 567.925 488.467 564.591 488.802 cv
561.257 489.138 554.914 489.138 549.917 490.805 cv
544.915 492.472 513.565 501.143 513.565 501.143 cv
513.565 501.143 538.242 488.136 544.915 486.134 cv
551.58 484.132 548.245 485.803 555.585 481.798 cv
562.919 477.798 562.288 477.171 565.257 476.131 cv
571.926 473.798 571.595 470.128 571.595 470.128 cv
571.595 470.128 563.25 469.127 554.583 468.461 cv
545.917 467.795 539.574 474.794 535.243 478.129 cv
530.907 481.468 526.898 483.801 523.573 486.134 cv
520.234 488.467 499.223 498.14 499.223 498.14 cv
499.223 498.14 505.561 487.47 512.899 485.468 cv
520.234 483.466 527.904 476.462 531.909 473.798 cv
535.909 471.125 540.575 470.128 546.578 465.792 cv
552.585 461.457 559.589 455.119 559.589 455.119 cv
559.589 455.119 545.246 451.785 537.581 456.791 cv
529.906 461.788 524.569 466.794 520.569 469.458 cv
516.569 472.13 496.889 482.464 496.889 482.464 cv
496.889 482.464 516.899 464.792 521.901 461.457 cv
526.898 458.123 526.567 458.454 532.905 452.786 cv
539.243 447.114 539.574 440.781 542.578 436.445 cv
545.581 432.109 546.578 429.441 546.578 429.441 cv
546.578 429.441 539.909 433.106 533.571 434.778 cv
527.238 436.445 525.566 441.777 519.903 445.447 cv
514.231 449.117 494.225 474.128 494.225 474.128 cv
494.225 474.128 511.894 446.448 516.569 441.777 cv
521.235 437.111 522.232 432.44 525.901 428.109 cv
529.571 423.773 532.905 410.097 532.905 410.097 cv
532.905 410.097 524.569 414.432 520.9 417.101 cv
517.23 419.769 509.229 430.442 505.896 435.444 cv
502.562 440.445 485.55 465.458 485.55 465.458 cv
485.55 465.458 496.219 441.447 500.894 433.441 cv
505.561 425.437 508.563 421.436 510.897 413.435 cv
513.23 405.43 514.231 401.761 514.231 401.761 cv
514.231 401.761 507.559 401.761 503.558 405.43 cv
499.558 409.1 498.892 411.768 496.889 416.77 cv
494.887 421.771 490.887 433.106 489.55 436.776 cv
488.218 440.445 476.879 464.125 476.879 464.125 cv
476.879 464.125 492.219 423.103 493.555 415.103 cv
494.887 407.097 496.554 404.429 498.557 398.761 cv
500.559 393.089 501.229 385.755 501.229 385.755 cv
501.229 385.755 493.224 390.425 489.55 395.758 cv
485.889 401.095 480.217 437.446 478.211 442.783 cv
476.213 448.12 472.212 462.123 472.212 462.123 cv
472.212 462.123 481.214 412.43 482.886 402.096 cv
484.549 391.757 483.883 387.753 483.552 384.753 cv
483.217 381.75 481.88 377.083 481.88 377.083 cv
481.88 377.083 472.878 383.086 472.212 391.422 cv
471.546 399.758 468.878 410.097 470.21 415.769 cv
471.546 421.436 469.209 432.775 468.878 439.779 cv
468.543 446.783 466.209 465.792 465.54 457.457 cv
cp
.882353 .988235 .584314 rgb
f
448.794 454.29 mo
448.794 454.29 450.857 465.29 447.763 465.978 cv
444.669 466.665 440.544 459.103 442.263 454.978 cv
443.982 450.853 446.388 449.478 448.794 454.29 cv
cp
.27451 .207843 .145098 rgb
f
291.357 663.862 mo
291.357 663.862 303.732 699.612 373.169 705.456 cv
373.169 705.456 308.201 710.269 291.357 663.862 cv
cp
f
289.982 674.519 mo
289.982 674.519 302.013 702.362 360.794 709.237 cv
360.794 709.237 303.044 710.956 289.982 674.519 cv
cp
f
301.098 657.22 mo
301.098 657.22 319.888 694.345 384.058 695.72 cv
384.058 695.72 337.308 693.425 301.098 657.22 cv
cp
f
372.34 445.997 mo
372.34 445.997 380.04 455.721 373.041 456.155 cv
366.049 456.589 356.029 448.631 359.063 444.184 cv
362.096 439.745 369.066 442.078 372.34 445.997 cv
cp
f
361.847 448.382 mo
361.847 448.382 358.891 446.362 360.537 446.122 cv
362.187 445.885 364.511 449.207 361.847 448.382 cv
cp
1 1 1 rgb
f
382.906 462.08 mo
382.906 462.08 385.201 454.634 393.219 460.134 cv
399.191 464.233 403.991 470.674 399.866 473.424 cv
395.741 476.174 382.906 469.643 382.906 462.08 cv
cp
.27451 .207843 .145098 rgb
f
386.808 466.777 mo
386.808 466.777 383.375 464.486 384.973 463.111 cv
386.576 461.736 389.098 467.692 386.808 466.777 cv
cp
1 1 1 rgb
f
389.609 483.161 mo
389.609 483.161 398.848 492.008 389.927 491.995 cv
381.007 491.978 374.231 488.149 376.108 483.345 cv
377.982 478.546 384.646 478.121 389.609 483.161 cv
cp
.27451 .207843 .145098 rgb
f
381.295 488.326 mo
381.295 488.326 376.865 486.938 378.085 484.462 cv
379.301 481.983 383.594 488.88 381.295 488.326 cv
cp
1 1 1 rgb
f
393.678 435.268 mo
393.678 435.268 404.678 446.611 399.522 450.393 cv
394.366 454.174 386.116 443.174 387.834 437.33 cv
389.553 431.486 393.678 435.268 393.678 435.268 cv
cp
.27451 .207843 .145098 rgb
f
391.62 442.714 mo
391.62 442.714 388.183 439.277 390.701 439.049 cv
393.219 438.821 393.683 443.629 391.62 442.714 cv
cp
1 1 1 rgb
f
322.354 509.935 mo
322.354 509.935 318.401 503.966 326.656 503.57 cv
334.91 503.176 338.949 507.258 337.192 511.516 cv
335.438 515.773 324.331 512.916 322.354 509.935 cv
cp
.27451 .207843 .145098 rgb
f
328.723 509.453 mo
328.723 509.453 324.104 510.459 323.536 508.375 cv
322.965 506.291 330.347 508.031 328.723 509.453 cv
cp
1 1 1 rgb
f
423.933 448.214 mo
423.933 448.214 428.981 460.589 424.393 461.964 cv
419.808 463.339 415.219 456.464 415.683 451.424 cv
416.143 446.384 421.638 442.714 423.933 448.214 cv
cp
.27451 .207843 .145098 rgb
f
420.036 457.384 mo
420.036 457.384 417.75 453.718 419.58 453.946 cv
421.411 454.174 421.87 457.384 420.036 457.384 cv
cp
1 1 1 rgb
f
427.138 419.799 mo
427.138 419.799 429.433 431.259 425.763 433.549 cv
422.094 435.839 416.138 424.379 419.808 417.964 cv
423.473 411.549 427.138 419.799 427.138 419.799 cv
cp
.27451 .207843 .145098 rgb
f
420.951 425.986 mo
420.951 425.986 419.116 421.629 420.951 421.402 cv
422.786 421.174 423.241 427.134 420.951 425.986 cv
cp
1 1 1 rgb
f
467.03 420.125 mo
467.03 420.125 468.315 433.544 462.05 432.178 cv
455.786 430.808 455.201 422.704 457.973 418.617 cv
460.744 414.531 466.665 415.352 467.03 420.125 cv
cp
.27451 .207843 .145098 rgb
f
458.028 425.9 mo
458.028 425.9 457.861 420.237 459.429 420.577 cv
460.993 420.92 459.923 427.958 458.028 425.9 cv
cp
1 1 1 rgb
f
469.076 460.366 mo
469.076 460.366 464.951 448.446 471.826 444.781 cv
478.701 441.116 478.701 448.446 476.87 454.406 cv
475.036 460.366 470.451 465.406 469.076 460.366 cv
cp
.27451 .207843 .145098 rgb
f
469.763 453.946 mo
469.763 453.946 469.08 447.991 470.911 448.218 cv
472.745 448.446 471.366 457.152 469.763 453.946 cv
cp
1 1 1 rgb
f
483.659 453.731 mo
483.659 453.731 486.547 438.877 492.279 440.742 cv
498.011 442.603 495.403 450.07 490.831 455.364 cv
486.246 460.654 482.237 456.752 483.659 453.731 cv
cp
.27451 .207843 .145098 rgb
f
488.046 448.175 mo
488.046 448.175 487.655 443.466 489.615 444.252 cv
491.579 445.035 488.768 449.452 488.046 448.175 cv
cp
1 1 1 rgb
f
342.945 497.345 mo
342.945 497.345 334.588 491.682 340.874 490.306 cv
347.152 488.94 354.731 491.961 355.02 496.176 cv
355.312 500.391 348.51 500.004 342.945 497.345 cv
cp
.27451 .207843 .145098 rgb
f
345.515 496.344 mo
345.515 496.344 340.784 494.874 342.279 493.478 cv
343.779 492.081 347.882 497.082 345.515 496.344 cv
cp
1 1 1 rgb
f
337.045 527.853 mo
337.045 527.853 333.608 528.673 328.611 528.273 cv
322.883 527.818 316.025 526.322 322.307 521.622 cv
328.589 516.926 331.791 518.313 335.615 521.008 cv
339.426 523.697 340.969 526.658 337.045 527.853 cv
cp
.27451 .207843 .145098 rgb
f
328.847 525.523 mo
328.847 525.523 324.271 527.023 323.356 524.732 cv
322.44 522.434 331.649 523.486 328.847 525.523 cv
cp
1 1 1 rgb
f
315.217 540.734 mo
315.217 540.734 315.479 534.766 324.121 535.814 cv
332.762 536.858 334.038 541.633 327.79 543.644 cv
321.542 545.658 313.297 545.121 315.217 540.734 cv
cp
.27451 .207843 .145098 rgb
f
324.37 541.383 mo
324.37 541.383 317.783 544.279 317.323 542.376 cv
316.859 540.473 324.873 539.136 324.37 541.383 cv
cp
1 1 1 rgb
f
336.818 566.12 mo
336.818 566.12 334.252 573.005 325.925 573.585 cv
317.598 574.165 319.742 567.147 325.328 564.535 cv
330.914 561.922 338.193 563.186 336.818 566.12 cv
cp
.27451 .207843 .145098 rgb
f
327.868 567.225 mo
327.868 567.225 332.474 563.117 333.466 565.338 cv
334.476 567.56 328.074 569.684 327.868 567.225 cv
cp
1 1 1 rgb
f
357.258 581.681 mo
357.258 581.681 352.858 592.874 347.333 592.973 cv
341.819 593.071 341.411 585.238 348.57 581.113 cv
355.729 576.988 359.269 579.06 357.258 581.681 cv
cp
.27451 .207843 .145098 rgb
f
348.763 585.26 mo
348.763 585.26 352.325 579.983 353.833 581.457 cv
355.35 582.936 348.565 588.233 348.763 585.26 cv
cp
1 1 1 rgb
f
375.399 585.857 mo
375.399 585.857 374.815 593.742 370.23 595.13 cv
365.65 596.509 363.033 594.593 366.552 588.994 cv
370.063 583.395 376.439 581.109 375.399 585.857 cv
cp
.27451 .207843 .145098 rgb
f
369.152 589.531 mo
369.152 589.531 371.79 584.903 372.606 586.343 cv
373.415 587.777 368.971 592.049 369.152 589.531 cv
cp
1 1 1 rgb
f
448.541 601.364 mo
448.541 601.364 449.873 612.717 445.619 612.678 cv
441.365 612.644 438.761 604.789 441.133 599.973 cv
443.514 595.155 448.408 597.867 448.541 601.364 cv
cp
.27451 .207843 .145098 rgb
f
443.153 604.905 mo
443.153 604.905 444.717 596.754 446.255 600.152 cv
447.776 603.556 443.793 607.582 443.153 604.905 cv
cp
1 1 1 rgb
f
402.844 615.965 mo
402.844 615.965 404.678 627.421 398.719 628.796 cv
392.763 630.171 389.558 623.756 393.683 616.881 cv
397.808 610.006 401.928 609.09 402.844 615.965 cv
cp
.27451 .207843 .145098 rgb
f
400.781 622.608 mo
400.781 622.608 399.638 627.652 397.344 625.818 cv
395.053 623.983 400.781 616.188 400.781 622.608 cv
cp
1 1 1 rgb
f
468.341 582.102 mo
468.341 582.102 481.163 590.532 475.951 595.572 cv
470.739 600.608 466.442 597.235 464.319 589.617 cv
462.188 581.994 461.638 578.707 468.341 582.102 cv
cp
.27451 .207843 .145098 rgb
f
471.031 589.32 mo
471.031 589.32 473.119 593.153 470.751 593.522 cv
468.388 593.893 467.813 585.784 471.031 589.32 cv
cp
1 1 1 rgb
f
514.55 439.93 mo
514.55 439.93 508.628 453.632 504.181 450.861 cv
499.734 448.094 504.409 438.031 508.749 436.957 cv
513.089 435.882 515.641 437.317 514.55 439.93 cv
cp
.27451 .207843 .145098 rgb
f
509.509 440.316 mo
509.509 440.316 508.241 444.068 506.729 443.372 cv
505.208 442.675 509.729 437.339 509.509 440.316 cv
cp
1 1 1 rgb
f
503.652 467.296 mo
503.652 467.296 507.854 455.695 514.21 456.688 cv
520.565 457.685 520.514 463.662 514.12 468.642 cv
507.718 473.617 502.204 473.613 503.652 467.296 cv
cp
.27451 .207843 .145098 rgb
f
514.128 460.361 mo
514.128 460.361 511.288 464.031 509.995 463 cv
508.706 461.973 514.18 456.919 514.128 460.361 cv
cp
1 1 1 rgb
f
529.575 486.942 mo
529.575 486.942 532.841 478.339 542.638 478.236 cv
552.435 478.133 547.008 485.305 537.581 489.542 cv
528.145 493.773 528.858 488.021 529.575 486.942 cv
cp
.27451 .207843 .145098 rgb
f
540.632 482.615 mo
540.632 482.615 537.263 485.631 535.419 484.6 cv
533.571 483.569 541.62 479.375 540.632 482.615 cv
cp
1 1 1 rgb
f
546.286 500.438 mo
546.286 500.438 534.731 496.799 548.959 492.618 cv
558.67 489.769 562.167 490.547 561.119 495.565 cv
560.079 500.584 552.517 500.688 546.286 500.438 cv
cp
.27451 .207843 .145098 rgb
f
558.364 493.211 mo
558.364 493.211 556.964 495.957 553.883 495.11 cv
550.823 494.264 557.677 491.496 558.364 493.211 cv
cp
1 1 1 rgb
f
524.05 520.75 mo
524.05 520.75 512.887 516.844 522.886 514.287 cv
532.88 511.73 537.237 514.395 537.022 517.325 cv
536.794 520.256 535.063 522.906 524.05 520.75 cv
cp
.27451 .207843 .145098 rgb
f
533.288 516.389 mo
533.288 516.389 528.764 518.894 527.655 517.549 cv
526.546 516.199 532.953 513.617 533.288 516.389 cv
cp
1 1 1 rgb
f
528.987 532.966 mo
528.987 532.966 522.671 528.995 529.962 528.127 cv
537.254 527.251 544.765 530.065 543.171 534.087 cv
541.581 538.109 528.987 532.966 528.987 532.966 cv
cp
.27451 .207843 .145098 rgb
f
539.347 531.063 mo
539.347 531.063 538.552 533.073 536.008 531.908 cv
533.469 530.74 535.776 529.387 539.347 531.063 cv
cp
1 1 1 rgb
f
516.113 552.903 mo
516.113 552.903 510.558 547.674 513.265 546.87 cv
518.765 545.237 533.469 547.214 529.446 554.88 cv
526.873 559.787 516.113 552.903 516.113 552.903 cv
cp
.27451 .207843 .145098 rgb
f
526.46 551.541 mo
526.46 551.541 528.114 553.127 524.991 552.482 cv
521.862 551.838 519.594 550.814 520.621 549.951 cv
521.644 549.088 524.802 549.96 526.46 551.541 cv
cp
1 1 1 rgb
f
485.808 566.924 mo
485.808 566.924 476.638 559.134 486.036 558.944 cv
493.439 558.799 499.566 565.506 499.502 569.73 cv
499.442 573.959 489.524 571.304 485.808 566.924 cv
cp
.27451 .207843 .145098 rgb
f
495.256 566.154 mo
495.256 566.154 498.101 568.608 495.36 568.944 cv
492.623 569.275 487.608 565.398 490.255 564.616 cv
492.902 563.834 495.256 566.154 495.256 566.154 cv
cp
1 1 1 rgb
f
499.038 584.912 mo
499.038 584.912 508.606 591.379 505.629 595.345 cv
502.651 599.307 496.189 596.483 494.131 590.648 cv
492.077 584.813 493.224 581.856 499.038 584.912 cv
cp
.27451 .207843 .145098 rgb
f
499.897 590.434 mo
499.897 590.434 504.813 594.043 501.925 594.82 cv
499.038 595.594 495.871 587.963 499.897 590.434 cv
cp
1 1 1 rgb
f
464.225 623.072 mo
464.225 623.072 470.648 634.919 464.891 638.158 cv
459.137 641.398 456.009 615.807 464.225 623.072 cv
cp
.27451 .207843 .145098 rgb
f
461.513 629.715 mo
461.513 629.715 460.895 624.972 462.858 625.758 cv
464.817 626.54 464.882 633.286 461.513 629.715 cv
cp
1 1 1 rgb
f
411.571 593.639 mo
411.571 593.639 410.44 606.766 405.327 605.992 cv
400.218 605.215 401.512 597.755 405.379 592.977 cv
409.25 588.199 413.135 589.759 411.571 593.639 cv
cp
.27451 .207843 .145098 rgb
f
403.763 600.84 mo
403.763 600.84 404.627 595.864 406.668 597.257 cv
408.7 598.645 404.64 604.316 403.763 600.84 cv
cp
1 1 1 rgb
f
384.26 596.96 mo
384.26 596.96 383.1 608.609 377.38 607.346 cv
371.666 606.087 372.598 602.404 376.577 597.123 cv
380.547 591.843 385.471 591.58 384.26 596.96 cv
cp
.27451 .207843 .145098 rgb
f
380.891 596.994 mo
380.891 596.994 378.674 602.211 377.187 599.887 cv
375.692 597.558 381.437 593.6 380.891 596.994 cv
cp
1 1 1 rgb
f
372.052 565.927 mo
372.052 565.927 368.877 575.772 362.401 574.462 cv
355.917 573.151 359.935 567.817 364.545 564.573 cv
369.152 561.329 373.212 562.881 372.052 565.927 cv
cp
.27451 .207843 .145098 rgb
f
362.432 570.917 mo
362.432 570.917 363.733 567.293 365.977 568.539 cv
368.215 569.782 361.852 573.869 362.432 570.917 cv
cp
1 1 1 rgb
f
373.058 500.924 mo
373.058 500.924 383.938 505.393 380.844 509.174 cv
377.75 512.955 363.433 507.455 363.433 502.643 cv
363.433 497.83 366.87 498.174 373.058 500.924 cv
cp
.27451 .207843 .145098 rgb
f
374.893 505.728 mo
374.893 505.728 377.187 508.246 373.518 507.103 cv
369.848 505.96 370.08 503.434 374.893 505.728 cv
cp
1 1 1 rgb
f
527.058 447.759 mo
527.058 447.759 527.973 439.509 533.933 438.593 cv
539.888 437.674 542.183 442.714 535.763 447.299 cv
529.344 451.884 526.598 450.509 527.058 447.759 cv
cp
.27451 .207843 .145098 rgb
f
537.194 441.743 mo
537.194 441.743 535.991 445.868 534.444 444.837 cv
532.897 443.806 536.679 439.509 537.194 441.743 cv
cp
1 1 1 rgb
f
443.411 434.696 mo
443.411 434.696 446.367 443.123 441.58 444.321 cv
437.919 445.236 434.928 434.017 437.455 431.486 cv
438.83 430.111 440.201 429.656 443.411 434.696 cv
cp
.27451 .207843 .145098 rgb
f
439.969 434.009 mo
439.969 434.009 441.576 439.049 439.513 438.361 cv
437.451 437.674 438.821 430.803 439.969 434.009 cv
cp
1 1 1 rgb
f
423.039 607.363 mo
423.039 607.363 426.928 621.586 420.908 622.703 cv
414.888 623.82 414.222 616.962 416.074 611.449 cv
417.943 605.94 422.743 602.224 423.039 607.363 cv
cp
.27451 .207843 .145098 rgb
f
419.705 619.695 mo
419.705 619.695 420.151 613.714 421.548 614.896 cv
422.94 616.077 421.9 622.6 419.705 619.695 cv
cp
1 1 1 rgb
f
515.202 605.485 mo
515.202 605.485 520.342 609.684 517.433 612.91 cv
514.515 616.142 508.405 610.912 508.59 605.67 cv
508.783 600.424 515.202 605.485 515.202 605.485 cv
cp
.27451 .207843 .145098 rgb
f
511.825 605.799 mo
511.825 605.799 514.627 608.429 512.603 609.043 cv
510.583 609.657 507.795 603.337 511.825 605.799 cv
cp
1 1 1 rgb
f
396.91 509.552 mo
396.91 509.552 397.374 507.038 399.325 506.2 cv
401.292 505.367 397.662 502.286 400.824 502.479 cv
403.995 502.668 404.09 501.083 404.468 500.154 cv
404.842 499.223 403.351 497.542 405.306 496.709 cv
407.27 495.871 404.885 493.186 407.218 491.424 cv
409.547 489.653 410.14 485.236 408.962 483.573 cv
407.79 481.919 406.002 479.899 407.888 480.333 cv
409.774 480.763 411.438 484.677 413.178 482.241 cv
414.914 479.8 416.456 480.531 420.538 481.412 cv
424.616 482.292 420.551 470.605 420.551 470.605 cv
420.551 470.605 421.247 469.694 423.211 473.948 cv
425.183 478.198 427.306 479.917 428.406 477.437 cv
429.506 474.962 428.114 471.697 431.431 474.76 cv
434.739 477.815 434.898 475.285 438.357 475.809 cv
441.829 476.337 441.967 479.212 443.797 475.19 cv
445.632 471.164 447.437 472.865 448.554 475.474 cv
449.671 478.082 448.928 474.541 450.969 477.527 cv
453.01 480.509 455.24 480.647 456.593 479.139 cv
457.959 477.63 459.322 476.123 461.423 478.159 cv
463.528 480.191 464.16 474.829 467.202 477.235 cv
470.231 479.642 473.772 468.41 473.772 468.41 cv
473.772 468.41 474.253 470.983 473.033 475.362 cv
471.813 479.736 480.381 474.851 479.513 478.61 cv
478.653 482.375 479.169 484.312 480.222 482.787 cv
481.262 481.261 482.289 480.054 482.289 480.054 cv
481.726 484.145 481.455 488.583 483.771 487.135 cv
486.079 485.683 491.243 489.808 488.235 492.171 cv
485.228 494.534 497.027 493.976 493.594 498.217 cv
490.156 502.462 498.041 503.57 496.679 505.079 cv
495.313 506.587 495.437 509.771 497.654 509.908 cv
499.88 510.042 503.468 513.75 498.617 515.048 cv
493.766 516.346 501.685 522.228 495.91 523.151 cv
490.126 524.071 495.871 528.871 494.586 529.115 cv
493.306 529.352 498.836 532.549 498.836 532.549 cv
498.836 532.549 495.291 533.288 492.794 532.502 cv
490.302 531.711 497.594 537.241 493.482 536.992 cv
489.361 536.747 490.676 541.275 488.18 540.485 cv
485.688 539.699 486.895 540.726 484.003 541.189 cv
481.124 541.649 483.217 543.682 483.217 543.682 cv
478.189 542.745 474.967 543.51 478.039 545.28 cv
481.111 547.055 485.631 551.142 485.631 551.142 cv
485.631 551.142 479.749 548.559 475.354 547.661 cv
470.954 546.763 473.42 553.264 472.139 553.505 cv
470.854 553.745 473.42 558.67 470.176 559.744 cv
466.927 560.822 467.705 563.731 466.7 564.621 cv
465.694 565.519 462.819 565.66 465.445 569.637 cv
468.066 573.606 468.247 575.846 468.247 575.846 cv
468.247 575.846 467.138 573.232 463.507 570.152 cv
460.68 567.758 461.234 570.973 462.308 574.213 cv
463.378 577.457 458.308 572.064 459.094 574.655 cv
459.897 577.25 455.171 571.239 456.808 575.789 cv
458.437 580.34 456.873 579.923 454.78 577.891 cv
452.679 575.858 450.938 572.894 451.643 577.07 cv
452.344 581.242 452.344 581.242 452.344 581.242 cv
452.344 581.242 446.934 570.745 446.93 576.15 cv
446.921 581.552 442.989 574.041 443.81 580.408 cv
444.674 587.138 444.51 589.986 443.406 587.064 cv
442.319 584.134 438.542 567.693 438.134 574.346 cv
437.734 580.997 437.524 584.478 437.524 584.478 cv
437.524 584.478 433.45 567.706 433.128 573.091 cv
432.806 578.475 430.167 569.413 428.973 573.474 cv
427.77 577.534 427.121 567.319 425.789 573.603 cv
424.457 579.876 425.737 585.045 424.457 579.876 cv
423.181 574.715 421.011 568.544 418.819 573.177 cv
416.628 577.817 414.811 576.434 414.346 573.547 cv
413.887 570.659 411.717 564.483 409.323 567.203 cv
406.93 569.92 403.248 567.792 403.381 565.57 cv
403.51 563.361 404.021 560.208 400.794 560.969 cv
397.571 561.729 395.139 559.988 395.191 559.039 cv
395.251 558.09 389.798 553.625 388.789 554.523 cv
387.783 555.417 385.244 555.258 386.666 552.805 cv
388.084 550.347 386.339 547.695 384.754 547.601 cv
383.177 547.506 381.63 546.78 383.4 543.708 cv
385.175 540.636 378.472 541.182 380.917 537.512 cv
383.357 533.851 380.47 534.311 376.388 533.426 cv
372.314 532.545 374.626 531.097 379.078 531.049 cv
383.529 530.998 372.366 526.508 380.629 526.374 cv
388.909 526.236 375.688 518.765 384.831 519.95 cv
393.983 521.137 386.15 513.99 390.898 514.274 cv
395.646 514.563 392.131 509.582 396.91 509.552 cv
cp
.27451 .207843 .145098 rgb
f
442.981 574.557 mo
441.743 570.921 440.69 569.658 438.585 569.658 cv
437.945 569.658 437.077 569.816 436.346 570.521 cv
435.414 569.035 434.559 568.906 433.455 568.906 cv
433.055 568.906 432.166 568.992 431.392 569.628 cv
430.924 569.408 430.404 569.275 429.807 569.275 cv
429.604 569.275 429.342 569.293 429.033 569.357 cv
428.475 568.794 427.718 568.385 426.67 568.385 cv
425.252 568.385 424.358 569.121 423.774 570.036 cv
422.858 568.996 421.767 568.424 420.431 568.424 cv
419.399 568.424 418.016 568.812 416.826 570.439 cv
415.983 567.56 414.145 563.409 410.54 563.409 cv
409.611 563.409 408.245 563.71 406.981 565.141 cv
406.38 565.23 li
406.659 563.418 406.831 560.947 405.198 559.193 cv
404.575 558.527 403.462 557.732 401.684 557.732 cv
401.181 557.732 400.639 557.802 400.081 557.931 cv
399.784 558.004 399.492 558.038 399.213 558.038 cv
398.714 558.038 398.336 557.931 398.096 557.827 cv
397.795 557.002 397.232 556.314 396.716 555.761 cv
396.678 555.722 393.309 552.216 390.275 551.434 cv
390.383 550.127 390.121 548.825 389.485 547.648 cv
388.754 546.295 387.624 545.276 386.348 544.795 cv
387.079 543.227 387.435 540.695 383.998 538.466 cv
384.664 537.288 385.36 535.544 384.595 533.773 cv
384.234 532.944 383.68 532.364 383.026 531.947 cv
383.04 531.908 383.057 531.87 383.069 531.836 cv
383.443 530.839 383.332 529.971 382.988 529.231 cv
384.152 528.943 385.42 528.316 386.142 526.972 cv
386.851 525.64 386.679 524.329 386.236 523.194 cv
386.382 523.199 386.516 523.203 386.649 523.203 cv
387.482 523.203 390.018 523.203 391.599 521.295 cv
392.694 519.977 392.768 518.485 392.639 517.286 cv
395.921 516.663 396.656 513.811 396.914 512.801 cv
396.927 512.766 396.931 512.731 396.944 512.701 cv
399.127 512.685 li
399.978 510.115 li
400.072 509.681 400.386 509.14 400.558 509.066 cv
401.378 508.719 402.977 507.743 403.033 505.448 cv
406.174 504.8 406.99 502.389 407.291 501.517 cv
407.695 500.494 407.678 499.622 407.575 498.969 cv
409.439 497.538 409.293 495.205 409.246 494.358 cv
409.233 494.126 409.208 493.77 409.233 493.653 cv
411.386 492.119 412.662 488.992 412.688 486.087 cv
413.56 485.932 414.725 485.438 415.721 484.05 cv
416.022 483.917 416.34 483.865 416.684 483.865 cv
417.238 483.865 417.84 484.003 418.501 484.153 cv
420.203 484.531 li
420.951 484.579 li
422.369 484.579 423.645 483.925 424.457 482.778 cv
424.771 482.34 425.002 481.824 425.162 481.249 cv
425.785 481.549 426.434 481.7 427.1 481.7 cv
427.95 481.7 430.056 481.408 431.25 478.705 cv
431.276 478.662 431.293 478.619 431.311 478.572 cv
432.166 479.066 433.149 479.418 434.267 479.418 cv
435.118 479.418 435.801 479.22 436.355 479.057 cv
436.776 478.933 437.047 478.855 437.412 478.855 cv
438.521 478.988 438.916 479.225 439.423 479.525 cv
440.059 479.899 440.931 480.415 442.104 480.415 cv
444.192 480.415 445.387 478.876 446.104 477.575 cv
446.547 478.391 447.308 479.341 448.597 479.573 cv
450.75 482.559 453.048 483.199 454.617 483.199 cv
456.241 483.199 457.771 482.499 458.914 481.223 cv
459.081 481.038 459.292 480.81 459.481 480.608 cv
460.671 481.562 461.668 481.747 462.36 481.747 cv
464.113 481.747 465.239 480.677 465.935 479.994 cv
466.407 480.441 467.241 480.69 468.092 480.69 cv
469.222 480.69 470.296 480.265 471.314 479.414 cv
472.157 480.093 473.287 480.437 474.679 480.437 cv
475.108 480.437 475.568 480.406 476.049 480.359 cv
475.688 483.595 476.54 484.669 476.909 485.125 cv
477.841 486.297 li
478.903 486.379 li
479.083 487.612 479.47 488.506 480.071 489.202 cv
480.823 490.062 481.854 490.534 482.98 490.534 cv
483.681 490.534 484.377 490.349 485.06 489.984 cv
485.245 490.048 485.468 490.177 485.662 490.319 cv
484.489 491.612 484.57 492.957 484.678 493.533 cv
485.129 495.927 487.397 496.623 489.4 497.237 cv
489.653 497.314 489.989 497.418 490.328 497.529 cv
489.559 498.978 489.529 500.206 489.67 501.07 cv
490.023 503.253 491.656 504.615 492.966 505.504 cv
492.537 506.943 492.563 508.521 493.117 509.879 cv
493.692 511.283 494.767 512.293 496.107 512.753 cv
495.184 513.32 494.659 514.029 494.358 514.609 cv
493.31 516.65 494.066 518.674 494.621 520.152 cv
494.629 520.178 494.642 520.204 494.646 520.226 cv
492.563 520.767 491.286 521.721 490.616 523.121 cv
489.559 525.334 490.547 527.491 491.308 528.85 cv
491.278 529.004 491.269 529.158 491.265 529.305 cv
490.436 529.305 li
489.447 531.17 li
488.798 532.553 489.25 533.734 489.903 534.715 cv
488.768 535.406 488.072 536.386 487.651 537.146 cv
487.38 537.104 487.11 537.082 486.843 537.082 cv
485.614 537.082 484.807 537.585 484.428 537.825 cv
484.265 537.924 484.132 538.01 483.509 538.113 cv
481.537 538.427 480.518 539.338 479.977 540.172 cv
479.775 540.163 479.573 540.163 479.375 540.163 cv
476.234 540.163 474.378 541.173 473.841 543.171 cv
473.742 543.527 473.678 543.996 473.742 544.516 cv
472.444 544.713 471.572 545.336 471.048 545.873 cv
469.389 547.554 469.419 549.969 469.445 551.566 cv
469.445 551.605 469.445 551.648 469.445 551.688 cv
468.788 552.576 468.539 553.908 468.71 555.675 cv
468.745 556.01 468.796 556.556 468.792 556.93 cv
465.368 558.253 464.663 561.041 464.311 562.403 cv
464.306 562.425 464.302 562.446 464.293 562.464 cv
463.279 563.005 461.87 563.925 461.397 565.785 cv
461.363 565.927 461.329 566.064 461.311 566.202 cv
460.413 566.202 li
459.085 567.688 li
458.501 568.501 458.248 569.478 458.333 570.81 cv
457.685 570.81 li
457.517 571.003 li
457.259 570.942 456.989 570.908 456.713 570.908 cv
455.089 570.908 li
453.972 572.322 li
453.925 572.391 453.882 572.455 453.843 572.523 cv
453.242 572.103 452.576 571.841 451.759 571.841 cv
450.311 571.841 li
449.89 572.296 li
448.833 571.484 448.09 571.484 447.522 571.484 cv
447.192 571.484 444.652 571.583 443.978 574.557 cv
442.981 574.557 li
cp
.964706 1 .807843 rgb
f
350.508 529.283 mo
350.508 529.283 349.42 522.945 357.056 524.303 cv
362.75 525.317 368.46 528.484 366.552 531.947 cv
364.645 535.406 353.253 534.925 350.508 529.283 cv
cp
.27451 .207843 .145098 rgb
f
354.955 531.453 mo
354.955 531.453 351.707 530.92 352.334 529.344 cv
352.961 527.775 356.901 531.35 354.955 531.453 cv
cp
1 1 1 rgb
f
489.026 615.673 mo
489.026 615.673 485.064 620.743 480.935 614.178 cv
477.858 609.288 476.359 602.933 480.205 602.009 cv
484.046 601.094 491.355 609.851 489.026 615.673 cv
cp
.27451 .207843 .145098 rgb
f
487.638 610.925 mo
487.638 610.925 489.426 613.692 487.84 614.281 cv
486.259 614.874 486.259 609.555 487.638 610.925 cv
cp
1 1 1 rgb
f
353.202 617.22 mo
353.202 617.22 346.98 615.578 351.389 609.193 cv
354.676 604.441 359.922 600.561 362.286 603.732 cv
364.64 606.903 359.475 617.069 353.202 617.22 cv
cp
.27451 .207843 .145098 rgb
f
357.026 614.074 mo
357.026 614.074 355.187 616.808 354.018 615.583 cv
352.85 614.362 357.739 612.266 357.026 614.074 cv
cp
1 1 1 rgb
f
297.398 561.252 mo
297.398 561.252 293.673 556.014 301.141 553.926 cv
306.714 552.366 313.228 552.748 313.013 556.693 cv
312.798 560.638 302.327 565.145 297.398 561.252 cv
cp
.27451 .207843 .145098 rgb
f
302.353 561.277 mo
302.353 561.277 299.19 562.206 299.074 560.518 cv
298.962 558.824 304.059 560.346 302.353 561.277 cv
cp
1 1 1 rgb
f
542.926 563.903 mo
542.926 563.903 537.37 558.674 540.077 557.87 cv
545.577 556.237 560.281 558.214 556.259 565.88 cv
553.686 570.788 542.926 563.903 542.926 563.903 cv
cp
.27451 .207843 .145098 rgb
f
553.272 562.541 mo
553.272 562.541 554.927 564.127 551.804 563.482 cv
548.675 562.838 546.406 561.814 547.434 560.951 cv
548.456 560.088 551.614 560.96 553.272 562.541 cv
cp
1 1 1 rgb
f
556.538 529.356 mo
556.538 529.356 563.134 528.647 563.388 532.996 cv
563.633 537.336 555.619 538.01 552.022 534.19 cv
548.426 530.366 556.538 529.356 556.538 529.356 cv
cp
.27451 .207843 .145098 rgb
f
554.39 531.981 mo
554.39 531.981 558.223 531.836 557.243 533.709 cv
556.259 535.578 549.801 533.116 554.39 531.981 cv
cp
1 1 1 rgb
f
339.795 544.211 mo
339.795 544.211 352.179 544.834 347.891 550.381 cv
343.611 555.928 331.03 558.219 329.685 553.006 cv
328.336 547.803 334.691 544.099 339.795 544.211 cv
cp
.27451 .207843 .145098 rgb
f
334.674 553.677 mo
334.674 553.677 331.202 554.57 332.108 553.174 cv
333.015 551.777 337.05 552.22 334.674 553.677 cv
cp
1 1 1 rgb
f
451.776 642.099 mo
451.776 642.099 444.996 645.944 442.929 636.444 cv
441.391 629.367 442.328 621.388 447.217 622.213 cv
452.103 623.047 456.958 636.599 451.776 642.099 cv
cp
.27451 .207843 .145098 rgb
f
452.15 636.006 mo
452.15 636.006 453.079 640.027 450.973 639.934 cv
448.868 639.83 451.115 633.768 452.15 636.006 cv
cp
1 1 1 rgb
f
523.642 582.188 mo
523.642 582.188 522.185 588.225 515.164 584.4 cv
509.938 581.552 505.539 576.77 508.8 574.324 cv
512.07 571.884 523.16 576.211 523.642 582.188 cv
cp
.27451 .207843 .145098 rgb
f
520.093 578.729 mo
520.093 578.729 523.101 580.314 521.854 581.509 cv
520.6 582.699 518.129 578.148 520.093 578.729 cv
cp
1 1 1 rgb
f
499.27 485.335 mo
499.27 485.335 506.737 476.458 511.675 480.063 cv
516.612 483.667 513.862 490.289 505.96 491.668 cv
498.063 493.048 494.672 490.53 499.27 485.335 cv
cp
.27451 .207843 .145098 rgb
f
505.642 482.55 mo
505.642 482.55 510.21 480.114 510.325 483.049 cv
510.433 485.984 500.791 486.753 505.642 482.55 cv
cp
1 1 1 rgb
f
350.761 458.814 mo
350.761 458.814 339.353 456.713 340.053 450.638 cv
340.745 444.57 347.861 443.685 352.961 449.873 cv
358.066 456.052 357.55 460.246 350.761 458.814 cv
cp
.27451 .207843 .145098 rgb
f
345.192 454.655 mo
345.192 454.655 340.818 451.892 343.311 450.337 cv
345.811 448.79 351.243 456.795 345.192 454.655 cv
cp
1 1 1 rgb
f
328.138 667.987 mo
328.138 667.987 347.388 686.894 391.044 689.987 cv
391.044 689.987 358.044 683.8 328.138 667.987 cv
cp
.27451 .207843 .145098 rgb
f
396.334 428.655 mo
396.334 428.655 387.998 420.585 391.942 415.915 cv
395.878 411.244 402.302 414.449 403.119 422.429 cv
403.948 430.399 401.198 433.601 396.334 428.655 cv
cp
f
393.997 422.106 mo
393.997 422.106 391.891 417.38 394.826 417.466 cv
397.76 417.569 397.855 427.237 393.997 422.106 cv
cp
1 1 1 rgb
f
471.482 424.947 mo
471.482 424.947 468.762 413.667 474.597 411.837 cv
480.419 409.998 484.132 416.142 480.548 423.318 cv
476.978 430.498 472.943 431.727 471.482 424.947 cv
cp
.27451 .207843 .145098 rgb
f
473.016 418.166 mo
473.016 418.166 473.772 413.048 476.196 414.69 cv
478.627 416.344 473.523 424.564 473.016 418.166 cv
cp
1 1 1 rgb
f
396.287 576.365 mo
396.287 576.365 395.526 587.945 389.407 587.954 cv
383.297 587.976 381.591 581.002 387.147 575.218 cv
392.699 569.426 396.918 569.46 396.287 576.365 cv
cp
.27451 .207843 .145098 rgb
f
392.806 582.381 mo
392.806 582.381 390.555 587.043 388.737 584.753 cv
386.907 582.445 394.224 576.125 392.806 582.381 cv
cp
1 1 1 rgb
f
358.375 480.974 mo
358.375 480.974 346.83 479.818 347.032 473.703 cv
347.216 467.597 354.242 466.128 359.832 471.873 cv
365.435 477.618 365.259 481.837 358.375 480.974 cv
cp
.27451 .207843 .145098 rgb
f
352.48 477.291 mo
352.48 477.291 347.899 474.88 350.246 473.14 cv
352.618 471.392 358.689 478.919 352.48 477.291 cv
cp
1 1 1 rgb
f
494.741 427.464 mo
494.741 427.464 495.557 415.154 501.934 414.346 cv
508.319 413.534 509.926 419.292 505.165 425.853 cv
500.396 432.41 495.093 433.931 494.741 427.464 cv
cp
.27451 .207843 .145098 rgb
f
502.875 417.896 mo
502.875 417.896 501.16 422.205 499.639 421.578 cv
498.11 420.946 501.973 414.574 502.875 417.896 cv
cp
1 1 1 rgb
f
464.951 550.424 mo
464.951 550.424 462.544 536.33 476.982 535.986 cv
476.982 535.986 467.013 540.455 464.951 550.424 cv
cp
.27451 .207843 .145098 rgb
f
479.732 531.174 mo
479.732 531.174 459.794 529.799 458.076 554.205 cv
458.076 554.205 451.888 527.049 479.732 531.174 cv
cp
f
510.837 540.58 mo
510.837 540.58 500.327 533.283 509.14 531.9 cv
517.952 530.525 525.24 533.245 524.14 538.281 cv
523.044 543.316 516.526 544.777 510.837 540.58 cv
cp
f
518.245 534.178 mo
518.245 534.178 522.829 534.848 522.018 537.486 cv
521.201 540.129 515.882 533.988 518.245 534.178 cv
cp
1 1 1 rgb
f
360.524 548.435 mo
360.524 548.435 370.591 547.631 365.908 552.882 cv
361.211 558.137 355.402 560.126 353.55 556.5 cv
351.702 552.877 354.951 548.723 360.524 548.435 cv
cp
.27451 .207843 .145098 rgb
f
359.209 556.053 mo
359.209 556.053 356.068 557.939 355.247 555.92 cv
354.422 553.9 360.739 554.987 359.209 556.053 cv
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_kiwi.eps)
%%CreationDate: 3/11/2016 10:58 PM
%AI9_DataStream
%Gb",KlW]NTp[J'*Y&""A3a4)ikCZqE,%XoG>%UJH_QAt,`1`Tj&&5mX?)N*lUBk)&!?@]&.9N["?@/7:g3_YfQ`[ZrV/l5S>Pi%^
%A\*W4Ip)'?5QA6;mmVLLC?cr(C;oml<,HJ2C;m.)>cUk>NTO,Rm:W,]H<iL]?OEcbW)BVnS]Xt?`A8p+fl.Jnj[tc@29lT3Pa=96
%BHL.2G>0Ih(#W_UDcDX[Ft)."nkj,]*.DhS0E*,Cfo9/ekU!TN@ZP](B9Slh8f@86maFpQ;Jro]KiY`brVR4(1E.Ao\f90-qu]n&
%ot[1[pbA%lNXP5HMgLZQ@)9n7_\?-+TA$:iUe.CFBZQu6LA^"KAe5'oT1'Fnha+mP#sVWC46:ECgY4`)_dWbp83&=#Ce4[!;?I2m
%UJBegmR?=38td!I>$?YhUtq7QL*?KDohD-tqXCffL6]470S$S*_mJBu/1^AASnC=CNb,"R:Ps6B+o5&rra&41L^KuW+UalU[!'Xm
%K7u/lUa*c2jG0:L-#1)nQ<UYDR>m<[jE7R=<>:BAaB&_Yb/nq'^BJ,Nco?kc5e"-n)jb(a'u[5eBqK;ZIRZksN\n%AO/dQ7pXE3t
%$"ZYYBr5ajJFuOHNb-,0=@Oe4SB_cD?=I>CrE'q<V&Jm_J%0=L5bD8?nk$C'UcRc_5&ZZY*MW5/<5="2@+%@#^JOkVI>/VQ[A'[i
%("53KHekY-QLXW#[^ocsXjt^:0lWoCb6$X(@8Bj;-h;'9$iL90[-KI[!Z\qR6%O%k/,o.$2uHm!\6WgdO3\cQG($-3>l4,R\P/uG
%'W&5GX]*m/;74o$QkC6c9lUbqDO,c#@(K1;59*M]ma(L">,C":O"3mjim0Ycm555>(e8?,kZ_#>D*'+qcDTKA\J=@.[>iYmW,>U\
%`/Ss31ppDc<T6a\K)?;n*f-0+9M?ZcEj#]*a2tH2X\c!]:E"r`Bt;lsrZ8hp%:)h3VchYuNMobhI>*03nR!l"0%-cml>cPoE>+[3
%9L_+R:rhZInFdQ5SBf@1cKhDaUioNAFT`q$5(T]^Ih9/`(F3[HT^1,M;5I;h/3jUm5_Jrf7U9eF<=78C,=Oi8FVAEA/c`Am^o[mn
%WRa38cC*aPMi.[_VJ5O\]C2AEb0r[spc/8C>(UZ7?>mOY8OoCojWY&76K@6ZT9`Dss.!/jnDb^o?))esDFM?e(B?2=BG<)Y'Mlo;
%;Br1SL6[(t!CMir`4oJ?EP:;N3TJu6eDji5&f>3sb)\lc/N>tu5cGOE)$??,ah=+l+oJ)iKR_!#"ON2d#4ZoJe2l+sLu;#$?r!Kf
%a_=CX1^\5-_l8b:Og'fLO6r=C4"7]Y"73lGf-iEoLRCd5ZuB[g*aZCQ0e,Rpd-L4tn\eJ?E<K<7[29@E$SF;U2WDm"18&B![oI;\
%YMpRZiA:iOX[*uMmD9pri2jbiWj^6_MQO`+X[+7qa!T6_L-'W^7tkQ>Da`L;5cQk#q?$Z+#)CrKnDG3^ZX(t@%gl0tfj*'?ZX9=0
%F8T]i&CX2B\c9m7APl83*]-F7^)Mc,XeE!J*Ro(+fl!qJ-q;P9p=#+;=,jsfVH#!lf9E=;Z,?!L=C^5AA3;clSCH1D^Sr$FGn'2W
%@k^eZb;3(7,).d-jX+gu1K/0H9fZiuarNDJTZ^EneB6%(0fK9US-I)1TeWJ(;jl<Z1L"a/bKXk6R4UA(j^9p'ed\kGoEI&7p7-2f
%loD2a9T;1?Q;0@7&QO!M$`2S7Z_K$&rOLT2je<i.MJL]s$^0`6eH![l]`I^(W7&CP;GFFIr4LBo2Tpehp?L%"[be*p//(fb[H$:Z
%eEX@I,LY5?1:E@+3`I#m5,9t=*GqbIce/!g(=Cc6md^_M//ZW5V!A)3T3cBDF@j`L'cl2)i(^XjR<TLuX@L73p/U`BNVlEoS>4bT
%*#FL[DR#j)BjKq4ZR@ZM"cM':'H1bpC9pp=lE&Ru,%DRaTg-?cJ*OFVFKGReMG1"cZ%uJ.2!/K">nsNn-mm_NZ"WAR`r@lMn\;?p
%(u)H=[C*!sMHKY%h:S!p\g_sC<%:$imRTTI6^[+!s8%PSl)_F`V]:o?!=Fg,lh!;Sko??j'dqAT5gOOCm*(pb1"\NsYfA[,%DCfg
%Wc<3A_49jH>iirh)M9h`mX'!bb:DZi?-KrI!qI8PbC<8H:88DK*KU)?p=hPCoQAYCM/Xf>;VTT3)E2_#IVUTK;*Mb;?_\?r1%DD&
%NA4,:j30>m5sAA0B&#[9s-ZM!CUI=lgPDU(BcKY"oJi^G)':NDBqC3h`a/7,Ti>pqOKChhYFTr;6F&Gf0K&!hc?fCtrpeb8c!$lk
%MJq*\-p\M[L<S<&`3Z_<^q>-F's'tIbD^^@bXtS,cHnORR@:7_GS>[:F]N$V2Y[tV_9O[Q:Y3R1NVLmM]GRiG85AEgGV(g4n^:?+
%d@V3=WABoU&Nj"k5f$Ho/4gVZ)[/I_nFrEWbr+'^HFCB(@'6i\-^Rn?.lLoh_q<?r(gK-S<3&l-2l]874V-3,,3'SK7cX"3qW#1m
%AB`IK=)QSD(Cqi0H!R@EV8tYM5]mu8LJqXGFHZX!/q#Rg4q8VfIFPM=']MM:p5'Tn)D7QE&[c+n@.8C13)2ciO%E#'J((r`3K4Q!
%B[PJNms5H3c1L@KNPXEBn<@G-0V.6EV4ncW<#MGhEL$/lHJtS3X^*8uiu1O`nos&j`c,;r[0dAfh8YiB)Nq-US<D0M4,c&*@;)Ur
%2''ZJ2SLnZaOoNBm9F;A'ABt9d>5l6)a'QUWDmc#J*7_;*Ro(gW`lIg%&m?FT==\cj`Cq]JNU)D<Q`jjTQ.02=JuogKrW.s3iM'W
%P_LZV>Vjq*)]HZQAa@>XX(>/,QHuspD;f^3i$LS1FouQ2if/g`$#W!RMU%)QMu-s!M)%[%fc(rgU@TS['S`@;i.QG\N,IY:k=ph&
%d2C08Ln6&V7FBImVBcr=Ao.(.'T8\AR#-kmdGe04=Hlr>b.f-;B!E`tB'Tj25e3;f-sDRXi^N6/MFGo1bd;'5ZWNGbRe9(eU1hs,
%`:*Pl'T8\AQtb7H^[dV$)ImNhf('`kCRf0#h2g`57<m'X@eq.DR%B$,Xh>Qa%rTnoKpdq<*5-<4pkp.udjVtKjBFi0hUlOfl/suh
%N'14]HG*BlApiu,I*J/N[2[6>1tHfhf4KEtk4,kP#!cecg)kAJ:;dV%C,9^D`mt(+>]$@>h+4\,e(&&8m6A_COs`SO@lWA;ZmjCi
%Jl0jZVs48$[Z.H)NVqHfd[5X>2O\KX/t2U^,iRE/rtAD@.tsUN^\E!1G[=Z0;Q`LE,u=N#<p4)rG=q[<,<E#6q52!pnWpEhjT[p*
%@d5Mj'YN:3VT`Vp8=;+.D5?+)AbZ]60#J4!)\gn0Y*PgBEqS]S[U!EGNs`"Zf&@upa#16WUG#R<kY&7Bcb9f/fMk$11.]U`&&.fo
%Br]Rq?lG'Qm<V]O'cq'8)P<H@I_F_<(W6$gU]]GWo-7!+Re0lmXI[sY9i+Qng)=\mVe5[1qaBd32pKCb#hILO9dLT(1s2rLo;JLl
%-<%km1u*Ci3[Al,`jZ@u`c+p/:tHQNnVoiP/U;Ni34m1<:A,O-3je5lK/5)gAZDQe9mUgLRMO+s:.S.?6,YWpF_ZMZAiK[#kJ,Jq
%rqhVGkaS.C:'rT!c@<#7amAqLG5g6OO5L>KALqWfPhDJnm*,4uN9Z.hq;01\+1!c\g8'(AB4ns-i7FEgq$sX4AnSia,LTKcppdGi
%7:^0,M=u`PhA,Q:W`3__%j"9<HudpBKZ,.LJuUQ(MZq+4lfjSgY%B_G0'ilcQ-e_uXU<X&<G,B=.PWin<^ZUq2ib_/dTs4tFA9;&
%C#WO_+e*bur[n+i6h9!;G[!@G6rA(Ee>[,l>V24:C<Jia[7\qPDFC>_>,+p-nk<f\3h*\*B!/J.lRXb=%7PO(59%5?A-NsM+bfr]
%ceGS&&jganMo$GMh0BpVM(8!hdi4[i*OD4^=!huu'0"KE@oIDas(ogfT1ZE(+YKO%4Xu'UC>>n`HI+QgZDZek0\aV^/tapQ+kUS?
%>:p_[k`q@gY5_E*D=q'7lkGjJ?=o4aRH*DDi-5hm$Th\5$Uao[RH%l@GaUQuAr`4Gj(7@tR0pu-V2ntmRSN]l%]"?mr2u(HMSV+!
%*i'bLd)<>>8Me]F1dm&skO-aC*h2r6*se8+a!PoJ0^4WmkWG4eHYh^!ikE/RrPb.'p==D\I&2mM)?lpc`:6M\c@k6E-)ToCNjG(>
%-:9cX$^7QPM`9l(VJBB0s#K$tNT]]\T[VT[9=*6:`^Qd)RFddK:CF#QhnM5Fc89PgNRt(?\+7SBkPW%uq;W/4Zg6tA6!^nYj(?fX
%<G4cHbq1_/lEj#9c]UaU=[JS<0jH$*]>j?df_>:ZdFs)t"rLs=h+V<ddT5M--Hhu`BK+4'>;Y/_K.0biSrHU;km]sLT`$[\6(!\+
%0o3Tf-*<h*_&M-:Cn8D47X>)L1#gh"gAdN^itjp'4cS0\2tLNQJYbBu@n`["4S*&V^)nT0!IbHJ1!KP4'/"!3IZ-j0j"ip>b`=J)
%IZ4;eL"7_e79&,cqs:gi.(0JJ2moqdbV,;%3$3/5A%HHhgFB[i=1NOd/5O4=.p')1rHD\2CN)=1`)PLS>Hk%jZpp<K*nR'D[)T^3
%7tkQ>Da`L;;73?t:g_![f@Ytq34<WcK@'*u9o[,h1ROZWp2AGJ6T=LWSf@5[O-/#70%6ibW"cWG(Ji)2g:>L(+gc6KAG0ofm+n>f
%]0X2G:c\sKJ+2-ahrXXdCH%:-'q"=OF:-m7f2&d'l:EpVB$Z,-^)_Qq*2P]93>3J%V)*cr&,%br;QuM=?tR5]$)b[/*$o\@Oi+6&
%qYu=59<CKpg$C\,@<.AA1a5/]n2.tk\]5#d]l%/PhTV:T/6bl1b%B5[G]q9SR[[H$1M^l?c-<?#heUJNBTY70R[]"d9p\#@nKPd`
%g2e1-R[J4QF)GU8c-3_d3B&bWjqc2\@*n-I@a[t3pEl;M>(`62FH^=bmFQ*LP=@i.XP\,H:.(5:io_.r:1B(;pE7?V&*I#4^>Gck
%c/+_QN(n>fhj'SBO*TtqM(oXrc!aqnk(/K]328!saDk8;V5$YVGda,O:p"%PQ<QS?Zoj&ef$B56QWimu7<b3BLSom!BoZh0[S\(P
%D^otYNUq&Q;V"O4)/&X_H4b/af/%uW=fRtVOIe<.G!h3-m6$>+_ZKHd92>?Ws8,d]#'EA?ZS2$9:rtFt/246sBr>h&/Jb^8kq;</
%*gMiN>-6Lp's>d!f4CCW/2=<TB`oqDgPt5[1"'@7DKJU@1hkCRZo'2-nA"O>>O)DA`Z3Sc'8uY)&(lj(@;(XUXJ-&Ldl`CVi/Urg
%b*@euD!E#C0)X"T&9$8:WA;rb`b>?V-[Fq*BQQ1=&,I)QlD//]MI<W]$=,8>[de(Q(=h14J*OFVFKGReMTh<Za\dq-3mgVK)VgH\
%fu$aj'\t_br\\btc]l+Go_$G]9gZEgDOm@h>#1P^'h?W4KP*=kG%OJB(p80>VJ?V67%4Nr=5e7\_49k7\12HnCCJLu\aRcLE35@/
%gP,3`B%JjH8H&.^R;eZ&a5>.+-XA^sN+(.gUQ/`M$-,UM-8W1liTBWZ:c;(D#C2VOE)Msmhnoi"B0C]Z0;amVAoIH<f,Hn41<&!B
%IZsG:janTLGgG_bU2b2Do)_mhnP$i"n8L0paIce2@`[KTdRP<AW">k8B2(LXGRgR>IA3=1QqPdXV:Y\>g17OHS,LFK9p)css.\C1
%pX%F)On&<r)e0c2ekNk`\u9%A9`/B<Mnf%pN,e:b.=Pge`l6M76W'=t/quQ6jC*DMmFg9o@F"nhK9GblWB/.nVc')"hI`3+hOnjS
%Ei)[ZjNpH)p>IuGjNEN;qEH<DKj06US^j8<n"c5s3/+%,^XmTmG%$H"S)i>Sim(N/OdeaLBg61)DE=1KT97g:aiqEnbUbj,i".Y`
%n4N1VUJPeKlXWn\5aoH-Y)hnJBiC^JneoO;dlXJfEm)]"nS]rdKtLtHQ'm=^ljfP>=T4m'bMUg%CF2?YQe='P_t@an:52.j(I<gp
%C=R1"Kq>PP'R2Ms.9D_Jr;"C&qTre?r[lT4mG_'p9d#[%e_8n\qM*KTQ`6-0ndT]3km2ISO!t#+0sRX"[FE=Z1q.X3-s'?+P*c![
%31S$@Zd?>:DQ?Sr]7)K*f!:!A\_,G3UNRFG04`Isb#Ulk(G>1_R$1]h-S![cV5Qes187H:+qj.XcThF`;D7"X2h:jtE`0)>T0=3n
%d\$$`%fQ\4QEY\2M%ie>>b\6c@%_A4R+10`6DN(P=P6;G/Ie))r^3=s\jp.BN$-O>:(:9K]`0D2C=Q4ogq%5'h1^=j6/Y@r1iZV`
%BAU()]$da@s%=5DcSfV^5PSRC=^\G2h8$6^R+Se-40FG?)LgTeMWqW?(o0>0E5M8SaLk&/EIVX:?mOE/Xcf-"f8S:17+JD;l)'Zp
%N>W@n=oTj![]qL`UWT4\K2\\l^mT3.)7Q2Wlg&S,g\2[0=g;\N6%HTcH*u[Ac"YKo+EDEK2"3HY10lQ'Z0<-q*gTO41H%C+dk`n1
%D5GrR9c5pp_;(I"+mg1[kTTQk9k<;Z1NVn#K:Xg]+W7XGA'd"94_)jjA^Fh8g*SRg>HqY0F_0LQkk$"Bg9Oul+WgUnEGTfSbh2TI
%>n>&[r>E5=Z0N:>^+R$@5]J^/ZXL)%Re:A*q(jdG?TG+uc(F7L1Bp!!K+;K%HH)Uj%/S]S[,j>WMOb_q?o[d5#T_A&E+7;QN$lqr
%nut5:SFPYX:S.+;C\))k[p2*76p951Qmne7"(O;WqF"a5j9qA1kS]!oN^8H?N'Yc,oSc(CQU)Q#H8C@->N3dj^?dkoiK;\2E4k"c
%1XA&POIY!oETS-OSoNoYEb:6(l@8sum(rb*9I_lFTG>CDMR4%+>R*%S)5j'Gl<u]\2<31B:-IXef+*W!'0coR:m#o$ZV21q2&uN^
%S689M)_Qh6chR-k:LBGaIfakg?"n^^1@!]dH+hX7e4c)n<[RcR;F;p+HQetZ;kQ>3Vt(OMqOgd^pd+`Bd\[@AiffW<RHkEcW<eg\
%UNDKQDH!]>98U9FK.geR(Fi:_(%KYZO)QZ8MLgNuWgUMI&5&0;rL*Pi!u3Xs%=/'Co0\t4&-'Q3m/Gti5IQL>?aeFS\C'VJ%c)e1
%]2n7gQl0JV];VUC5OSM55H7_fWrJEu++"$7<=@7>>clXBO/f<eT`ntIn*mR`+>Mj,Y1qe586c>enak9IWrY5p>5`A>o8?e_l3?mo
%_nJ(^miB^0Y;Qo@'H56XJ_/KS)1NLu*),.WB(soVT.82R#@I$,]Lo;N(6u8(8YIb1_uPk@eIltKE0:C?"e+,(>&S(2)?W^.s%9"&
%I8]o*&od;9D^rp)rfPdWcroV<'>jF1_U8sC[XblO61?kZ@_:<nSPK7_qlM-Te1@7*L,'J:Tg#=P)uF5knCun$G(4D\<c/uY4TY1<
%"e<5..2Qn4)`M%)XN@$3;!BdsJU%g*"$\/d@quNf?rdEu^n_C\ckt3gj\kEEoS22>'$TSXg1aMM3Rn`B1$W9X:AM6!*8+2k"e*DB
%FPPSbPYVKJr^EBg>\IT2#i^mBhH:UWSWfa9J8h!6I[ip164)/B?dP3[jNcO0M2t&_jq?<Or6su1<,S>+G+rTNdMB#c>Z#+N1fLXm
%#.14M4dE2N=[pr?OkO\@c)?n"R!P+mVX5h8:bS&toc*d`cO8"(MgMO.YI-"B'e3e&")R$S1hEM03A!Kd5fHp'd2?_3,F)uPC8maj
%ZP>@?s,/L1S(S'Gog0ZgdO_$"/"NaM*?me66DJ[&.l9kt,,U.->R=)dRaonj(!QSZ]9PEkeCsTp\7M&t67YYKTk>.<]-I+#S71`e
%UZQ8Q"R9H*Xcemr.C.KAeY*?Q$@/di]2oIuAO=.@.^Kb4/UZfk?>*a3<>]>Y"LAojmD)=i)Gs3+Y2rd%e]:ds#6StL<H08W`!l!O
%#M&0E7O%iOO!qCPrR4B@QccGI;7TSBrTl)H<-iftD&0-!mD;GZg9/t9.WNuO5-NIr$C.0\hQA]I-o,\r80,a?YZN@+TsJG'r<&TR
%JJ)_$pmltY'kn4f/H1H_/Jo\=<M7R#I@I4:iRWHGNB2B(Rm!_)99^i(>NHRcgk%k7K:#9?UIMR2dAcPTTV+XdK'WHD&q%gndRH:n
%GkG3O,N#Y'e4dT3)ITN5lepK@:m^CGhRI$ZY]D>VC6WJLRU4o(80#MCYWm'\"^LEDB(R=J%%'+VCQf61@p+9&M!,WB]2@ZYT`sK4
%X;)*XA?norkcG31f[/<MZ'"@h:&_k^FtYbU3pkUO*KO&lmolF]UX7f`D!Y`'gs1K#L$i;/Yj.eg.g<S194hVACDMl0d.TLncsaqG
%dZ4OUeGAn,J6E*=@PrdmUpfpUNaDGS>O<gJX9':8-(0/nY7=bXR-.%_TgophRV1aY&T#UrL],tE!:;Y4&b`F`TLp,8Ti09+;d?Oe
%E(gTp3NhJ27H/=AbM(?5osg;[dTfZO=)/hJOt'OiQc[^uROSXV76e3@&hU70dp*Q`\T9(G,[;+[O5Db&b]\'NUo\2#kD_g-N3'`i
%/W&ub/$?G4-5(*k_50\s>UlSFWZbO2:'>)$R>K,.]shs$`Y_L$ar(04F2l0U-8!=Wgl<6.0)lSb5YN.f0hi.iq+FSkHr;P<\&fXb
%U)*(f7f'J=kn+0YrI#:H;Tjm8md*,!)NdX>m]2"Okb`3t=1csu_P%N#AidR;ZcbJ'b=0IU&uF+*cW%%J69"_'o#6auF/7.W'-6<n
%S&nFtRO#`oF`efGlgE?cROX<hH*,T2kD`BNei67qn$jL>EtQm2&rfe$`O-.Cr6__FKN52iJ+fQO7OhH.IA[d@>+k#tek/`t4?5W!
%2rd_u5"M?(7&<1?`C?udVr,PF<k;8p?CdZYc1Y!s2S3%#c#fddS*PcK<(7YNYKtI82**1Zp=UOg=KAmoS@K_>`C+uRBO,5&(D*(6
%"],;q"S;&<L0A:KC0ooU8[O!4kt=K30-iA;qXbg_C@u%Q&4X"`$kPn-XX=0''HF?T6"bc5BNL+?R0-k4Wn#`Nd0FM26S=rX\]ER<
%oPQ^t+!#q1"nf-bqJ0tmIr"qbLT)BH'r-?flAaM;\T6(O^OQHe<)em[SR+jl[Wa"r]tQgn0U(nt74^9Vb,t8%5MAA-7V_Q,fff-a
%C_mX7/bBSHlRnpOqBTb%`I:uIZXZrt$A3X)R)_J\VmXPE3X0q,1t#\8W<:d,oWhAnCBt>7m)S+B;asbDmRhmVQ!#S6C19@'i5/C"
%b,rt3V_,A*Da@XT2Gc]P+MW8I(9O8c(^>W^)Mu8>JYE4:2FiHjZeq!j,S-hV_"*Q`.V.AfX]f!P\^@OO$ps.K!9KQY'*#Vk3,;ja
%\H[5Tk8MF`Snk!Cp&$<0>H60la0f[>btCt)*-jkl^hSM;McppM=iWIK5nZ",0c@8`HD-pDnKS`sb`5kn*=TUng%dEp*d-r0SjJt/
%Q5FnlAtR(7>-QbaGlG$&+7*Cd>,Qe^$/IGmDFS#5AasQNFbONpG9D/541\p'$uo'_=0#:EZHBaqfLtlr>8:`6&DrO=d(<UP(VGEa
%cj.$d6FgC$lM%%0T*lkn1Z8gUD\`@#9_fZ1j^:Om@s5;,Is[6]PC(!Xe]7GjS%[S,P>V*HB?r8lE%8(pBXT\U?J<J+o&>?>/#sJd
%Z1=Kjqf`E4U=ZUpja&5q>juOJ/rkiBj5"IO^'o#jGWdGUa1@hb+(FNq[15QN<N_Yad#TZaL/KR(qn("5>_u?[$"$\QY>IK5%:"0C
%Bc?`C5kI0I&O%b_q_.%Pk?h:"Wb:es2jB5hXYMt1hXoFD<C>NR7<(S>SMO-dm5O&^GC-"8lujEEothg/q!UEc$.o3F(eQHNZI:B^
%ilYOS6tT57V+U*+[2QID+>A"YcEme:/#,%H65NGV?K+5RJ#U0&4'.Z?fm;8/BJK7EY(OGFL2DH<[!14f5H5LAQ%!bV#DI$H.cnD$
%%b2,IY0Cuo?b=1/2+Lgi0OQ55?tpW$jgP2,BDqnDW?6KUl>SZ'KDSBbDQ?Sc!Q3CMZJlmQFm&1,l]Oe?p&XBX?LR4Bl.Wf'Nr%UN
%g>^R#V+g6HJc_,;1/<B)P7fmGJj"e]9U_rq:SV[)=nmP0\kl+<<%@9j</tdQ=sJaP:o_m\+#BbI&]gbQ5!H&DVgsH*@edRWjglr@
%=_jr#'e!7dVBY)scjFrK.m:_lJ`SAJUSam8KbQ?`=&=T29sn_<;)(\.kqo2tWYDtu:CJb(R0:Ch'E)OTG`!NuW92/+h5Q?;QM+\m
%5tal$N]S722cK,/);aOK?_M`k[T'M/Xq*:#]?"Hbf$EoJR1Dj_rTNHn3Vlslk+.0)]7Mp\lF!RdZ(@ANo$f?SB29HpVF5IUk8UgM
%fYW-i)J=nTOZ;al/uf`?d;NgLAm$A=U3Vm]?,KN_5o@E+Hu,#a^!kG4;?^FZWjRjJY^niEk,A!KT;&D/_D"g9pXZLMV=JGe@"Xf,
%b8mpems)IpT?CY#f-6J*79`eGO4"b8U$b&;S1+bNct^%:\CYIrKude^NS77'[9<8B2>SE6FKZ711/qK4m-m]sirEgFT#(V#]d_uf
%bHogpj?`H>HFQg(!gh;64pK&_>d(%d)F6$?Umi($3*srB.dP],B5)Zq&,g_."nM,15('K003-Ek/ED,N;cf.''a1Y@VQ-b_&7k+.
%Aula4*-bME.0kfP.)TkK/J_ufjt%jllpV#L,$1582#Lj\JRLGMG"gWY?bjBP^dspsR]nE1(t><IV,aTR*'JCJd&lWaDY7/1,^(A\
%[hhb^:lTS-g$P0Ul*[X(4O?q;2KA">YiKP#2"FX0)g(k(H-GFDcu#n)>KS=n3D2q$Ih6L<o$^o@#AOnM>%D5MO3F]KACd[Ep;LJ*
%<,H!'FI\8bZhC_%*Cr-/TTdl9^QO4gHMXYQk-KB^pII#!K^7!DF_PL]h6GSbL=V'h*&L3uCQO1Qc&5Mp6][\*e@6RS1Tj5XeqMEA
%3cn,+?\;!XBB@D(Ca8gDT*MKYFY/44U8iI]*CQ/bmI,UqcI1Tlk(O-,jbHP'.sYc,od\,ijT@PT-TgE!SD<-ooY!E'X4Yt-7\S]1
%o#k#:0G\&("@mK-0,3V]86kLX1:hYUOGun#m]S,XQWb4ShQAe+`l/N#U82SUDdKN[s/n;a4eq-sM9*7fK)V7U\ork19-*:b7)`=k
%Aju!\Cnl<B_?Y(D7qB?k*Hh:cG*L])VctsBnDum[QBg0qfj3@b#i$DumNm1*l(7K_li*gXQ2N'@Q4"cM?J>._(:1'$kNAa9-e2ES
%o=#Lt*itV7l/l:?h2?FEcI2!ik>,GHc^$KhHLQ6gd4Y:kFmF0hcZG[=L=+4nbFL1$G?:-GU`Z_A/C^/ibu`J+BP)C4o2\4e]kh7U
%?G,*!?#cUp[ITNZ`EYJ&i8dd?S#$4#d*LhB/bpK\[rU@iB:Y*A$^pV?Ai$cugH(mTlJ61;F3`V?m'k,iI:ssOCqMmq=kd4H4SI[I
%rUa0'D_:qel;j*n9:o9ecLRT/Q^[11q:rj#G(/k)knok_q9"0jo.5+`H/HqK<\#8XNjGXc[8[+#fek!]n)oSjk4dDkB+O^H,3X,i
%mE<V<)LT-r4h";B\<U>.^>7'#0&ERJ-U&5:D.k9o2E+uJ0=l)bekVdRjd"%Qqu2!:c,/*.e[5YNnnV,"dF7hCn!l!HMhNtb<1[G]
%hE9ns:#g60Dj9^>>q1>L=ise54aXEcR/a4Xg"a:@*=)(QFnt-u%F'.@mm"!fWl55+o1r[G5PEG'H;aJ8a3A*UdjT+$o4L^.>\,Ya
%ZM>PRc@6E$qmK@*.^(uf^`o8OT?Jl>7+mI4IEl=^fY"])[]sjcIsiJ^nU7Lo`[C6#;h(qCAU``hl-kf<FQYI1qm:Y[L@iuBF9e/o
%PIL"oXl<;Cc(7)j(55$2QSo<Eo:=LDa+]fUq-3G4)q^+)5CB/.#R-YONc&bpoO\#9IRQH&m'"05r3_7OY?[Q>?u5lIIk^#W5$_O"
%EmILP84EDO<gHD9hL)$IN-c!+D.R#'$t*XR`a/Apl%1qiA-]@`LLBPPD!mC^3u9cH3Sm9p>;<INq_k'.If/L.HD0idDUpmqpGUg@
%pYfCiCG!/h45MQ=?iBtLkldHs3X:"e4J<k1d`;#JF8gU=q2j:PkJ$=*Y*HbIO-bpRn"&OkNZXZCLJP\]r_BHDBe\3<If:h'[JB#d
%552;RMJ#H(2/`L@JQ=r4G5g1l_KR'L;_KQ#0(62cBD,Z?g6W%g@<*#;TbcZUj-H][(O"0V)SQrpripS6`;7(9/8+&D>.'1s<kb`t
%F$Lt2(?Vs2nB8fDlCQelii9t*np,E4CstN*BTc<eEq=S=n>/]uZSGlprgKH@I[/1q.siA?LNgM7E)4&X`,"gp;1@q^rScJ0[r\uA
%^R<AkkS<g-6&h8VmWo0GFVT)Oq0a+8SVLu.Vs@',\bL%ij+"H00<W4dMotq"b&9LO?X,PtHS%m8(;3n(Ahn_:9Cor8SqafBk.t3(
%rXrrIn+hNa%%Cnc19BZalc\A<g<Mq<Xt8aWmRM'll1;+RRTa?;0WsDTIQclj=`8<G4n5,Nq;V>S[@2I?[JhTOX]7F.<iYV(RD%&[
%GG1$uo5Os,onD*=.t<&rs-21s5(*FM52X\4o:)Yp3ZmLE+2%*9^U7!PM<jUp]MKRg>'T^ccd&_c4SaO*rbLrC3Si#o]2rflj5&&J
%m!Yl:h^XO7`8*Ip!Lr<re6X%DfsA583PY.?S4g*_O#rC0a_:e/P$m+CER\<eHh)U",C(p>M?H)onkYp2dI&<6i9U=37e7JlGO^]_
%2;=BlRGG&"fAtO;o6#3;`EF0V^:ji$Y^&HKIV^*<G2%@=k>su>Sd(;JeOFQC4tg&ZUHUkDH+(+]ollElk00SRmkXV8>Be\][+EOb
%CR_C"l)F4D\bX1"Ng?9)$Zg+0@bB.)$#$2g8mqRc7D?9$-0_J>]4nst?_;:We\W6AZ<UUGAMNYcMn'kon7-ke;-!r?^ZM2W\:[r&
%HIJjLS&#<@lWB.Ys"l@59ISPaD<b%^i!f8]R\>l7R'Blpp5@OL#[=1[3mCJA(M?<^qI6Mt26Lk!2%pe(6Hb0M"*rIc9u<e<njHMS
%QJ]]GYY.n52m[O5q2b`j=0'C<%^?ie<^J[]KlFaeQ.&!3Wk)j($&u"WQ"l5HIbph5X1_$pFRZSTVs.,b-+DV,Q"^=(_,]Q9-#Fdq
%Aj!4+^%@gJq>gp!npEUZiR/361\.=tC.-qD26Rh)CcmJKAC<)hPbr#k]8gO[h-#Z*B%"E?.Ns"Z*ti[.ah!f3Bnpp>+"&;^A'6FD
%?/1In#a6b:TXY!PHi<3s:Gaoo1m(bDU9n7^O9QNidH_Ah02&sEKQU0GGJ(_=\4*$7$#h$:IJiD@[nc]HZhOH!28Au1g&jFpfLj;I
%0N//>H*Wk<qYFSKJ*TrM`>T4<:`@./?-m5)B<1oRhOUa5^DsDZ(XKhQBA&Tt1#1@Re`KV)(Ra/.EsJhTDMs:]RQFZ"pl'@4m>ZmN
%FbF(f4_EJPIK*\->WZfkI*B9Mof\ca;YDfelr8%1X1M^W8#Y3D<mT%YB'.4B=F+IV%TaF\k%bc_I=1qN-SSNWf@PogH]PMiK!gt"
%/^<Y08M5=rrh?0.OTP3]*HpR7['RN!Xb:h`e1ACa70>NNjD2f;[U#okK*0(.CQDikr0>*YT`PD/]_c[_j$gk++U)UKj$gk+;<hO_
%W/EVp2QXMAj=b-d$RVgJ)_Y_BhVC7,[HYTP/8;VbWTmH*isZI(\!=r*iih.<XS2]uG^,I$]DCbhp?fQ>/Q.jrC\U&i.VYmoofr+U
%V/mU5r'G&Yd."imP9n:L?hj(?RsUR*GHZP`@@K$3G'\1oc,!?TeFOa#qqub.igkH@gAm],Qj8ti)K"T-TA>E5T=nMrpI>fZ/[V,$
%D]a\lr3Gpk]ACd_Cm^Im_JGfVFt9Wb;#KCd=kn;2AZ`\Y'oG#`pF(Xh3cbKb#HWu!GLfOh]!VZ(5!2din2Up[:*URrT"U^#6Y6/I
%M)WQig'qDpB@`8NSKD=02jR)!'a'ffAX=_1Ab.G<J#21/r;;o-O7))\X)6X`f"LQ8@/=':qtO+J(H5]5heoWLoJeg[,@,..grm?Y
%Zhke<EqR?L2d</iG2Mf8g.0o;Aj'FFhV<u,(ReCZo0VcX\nPh)VTesQUN-.U=aId]N*9=ASh5F\")uLE%bETOQ#G3Z0=">7CR>Lu
%R^]lZiR=,e\GU(rraF.KSh=[.>$G?9D;9U9,6-lcJci)i*t4fr;AI.#:-O1&nCB%KeQuNAqGLVTIli.0l#_B`%+6j-7c^0!eX'M]
%0,AU^)iq]?V-Tsf>O,'&2;ZG\[HVO<bKJZgO[q[*5s*cfpaQ)Yj$Z[^)hYP#4'jErb9"29(-h1'0A!tB?)UZ=)j%#mm4An3C)bp#
%e@_dmb*!Xt6Aludn6iknH$*M\GV,Q#H;htOcGKfSJoeE;S:>/3em@-?iNu_!oeao'"891j5B3$aYP090WYaENZ^(0C$'jpZ8Jcqi
%\BQu$K$Wb<?g`>om[r9<rLWsC(Q5NHR/2=<H["qpA:tmMK21!Y*e,_bCGs,G5EUdU,(/tb'e"S3Fa^`'ShmC]@]r;f?abt)6"=%e
%hK/U6]f9s.Q#Ys'\%i@F"4e!YIJ_=Tb-Q<dEuX<(:KdGjLNM\GU[=8hcJCZ%*ma:<s6OCEbYf[b^p&?7ni4,KC%DpO+?P5X]R".u
%=8.?\qfd8ULNi/.jGmZkZBaA96LNsj_`:V?3a@3bMj&L#5T/PJjl<tbV`e4+5cjB1fB46$a%:Q3lW$0nIT_)K\(-A*hLoH(\`L4W
%o/fLimTt4ElaI,.N/^WZ=/:jYjH<mEos`uAV=K8JY<gcEaQ.CI0-9d)>Sitn&'ZYTY'p/I+4g<ZrgVp<ech<"kf^k"o"-Ke3E[u<
%0@W1S^a<>CZg6a<5<j'LH@U7t@V0\<QL6Rq[_+e8p#_\:iVD2s[J/!"&;Zj)1i@^CQ2:@fXRtfPK\@hS)/5JsIEZ[rk9iFD+UoC`
%Q01<PIt+_dX),?f"^)W3bFMkJj5$oH[IW^s0$q)6Q)Qt'W:_>[=rX9NX]htN^-7!^B""#V?`bqnlUeKhqR//gg/nd<aIuZkro__!
%gi<,^nbU;)FoT=CL>Nm[p-9GhEfd8kDEYj.lR&$%Mk[D)Fh/+>HFAqYQ)@D?],-`cB:8G+N$%JL5'`MWIbR76c!3X4qr1A"/bAc`
%^UAHooA]0OF!D>^50NRfaZTF.qL3@XOC-,;'&<T&I-:4gdXH;D)Uo^]jN?i:%+orgBYAq^[SM%db5,Ih/M#-tYKuC(qTiNA]_VPH
%q&iuq)n>$V'4(NSJO[B0?[[F:f1o<Ee9floV0>OiX%RBFSL$+:phS3fSZf3<d7q8l^LtX+c(9PMlrnuGQ,ffMQ`k/8,:>Jr0=KTF
%(LNWUgqlp;IHBGDHgcJ/&&)]&\":0tM<=2B&8,Vt8V(&'kCDeWpHXMgH^m1SCOeQ]*1nUei^WP2fB;o![pH0pmX/a1NbaVr&%W39
%Nh/AO_k@V:[GtnCB,`;s"uQT,h7'J3jmRZn<]2N'lnnJ7l+IApNmM:^D=RSFAmFeFIVtpfNs=fTa=TU:U6RBF8@7PA2I_&-A3ZN0
%(q>ReI8H6$J'2Yr=W=I4B4n7q:[<4fRo3rjn>Z%>0p+qHiM6/>S[4o-(LOjEQ=9K#L9RVW?h2cS:EajB^KFhq\lEEi1&\>sHp,RG
%]<Ch1%L:aV>3:(tMIp8i?NjN]0aC=9EO,4_h?MZEGQ3u[QL1Dq=duHM5jYs=>-ORlWYr^#Q@B:<p!m.t*]2[-lAPL_KtL5L7F,IY
%H@E)%U#SY>Em-anq=/$*Jj9`mc;skn]4>WsJZ+>O'E4abZAtKP`T*4Q4P$=3iq84b7^c3oJ%]7Q-R^Pib)b,7N0OW>rEcMrpkMP>
%&E0%s*B`[C1-;ng<c2@3HV#Y_BC34`?1N`=\\DI`m<o13k>ihB*pgPLW.B>GZ*R$ao^_PJrVL!YJ+G]N;@fnf2=U)-1bC[Fdmqef
%hHuo4H8#kNpgp]PhUC)\+(*iXVXs%Y9g^^Vlhd_5Q2JOqJpsu5h5`IWmcEnQDq;h0,[fc,2Eup:7Z"2[8+gE\mDB%5@,=!uhcX+p
%>utIr%kE](@$k83ec0ToSdCuI>Bl7DR%J`9pjUJ8GMZSbQL:B_W-9:0Rst54SCC3kd*ISH2sY9mJtr066:)7\rV3hj!gLKhZ$b>e
%)Aa92m8<:kU-sCK9U(09NpgSi$d/6^5/2CF`4k!_.h*h8O"=e0$+(=O!tFX%TVS[%cKm0b_V1MBWcg6e1qI"0h`f6eMs8up.XDne
%%-1>EauX13P5"t3kP'Q-D!f3ql)2sH1r4(5Y.V0WjBfN'\K.;(?S$qX>/"s*I<GAW44$Os\+>?^n@]*$s5OuQiT#5rVrI,gZ/icW
%e`Oa[[r\`Zg-GU\ZLqPZ<<WD>J+WIFgJr@MmG:umOumZsgFE[!^WPE^muQ&99R?=o^QL5W;9$6uAlFRM#u>>oc*;\HrlM0i4%I*m
%d$)dkrbe^DJuX.qm[(nQ7s(_0.delkKh'nNb+cH@r56Pc<EP_k[c@BtPW)s0gA.qEgSYn)nUQRr`Tk=36]7(3E.a<OnVS;N?JL=d
%IlE^n*h>,t51`fr([ITe@No]bX5<TDf7%GO*$3l;(AG8nq,Jh[5I:+0hs3sCGddHc'*`s#hrX"=RJsc.195:L1WIS,HGYe:o9Fa.
%ZBoo;IU$,\3-^_5":H/Nhu,<jL3@F8-XAV,C4SeG>6c0!>KgosH@b7^-O2UE<`bpMh?I*pI9J8if=mr8qfr(o^&31Y/$FHuE;C&h
%cf.5$r3+thX\[i-fkfgN]!Co)_q&jF^$%V$Z`bH7/GmtW\+=.7?Z]em"^U&/rW,jgh2gl[#Jj!_fs_b2,Z+KGE0Ant2'7,$?PT.q
%!=O2`XKNAF]>;"C7sKKhI'e"h,knisE$mqhECFF;K+'fUWXepng?E?d0t1"_gV9Bc(tRHVmc<P;AHQ2,m>hX_`"[<=d(Pf:PgMsC
%f8oXVh%#q@CAK/)'/)u=kuQ)oO!2&@aHEuk;R_-fBta$/gHqe6m+-@ZleH+\2oT.7Qa`!7:'Xe\LL6?+[U/<F9-<"2_.]RUk`.oI
%_Dbd>kTE@nmif(-=45F`/`$6('t*+WL\'i8k<mmMo*_dhp6t<dV_=^CGPCEI_ftF=mY3+dBLtSK?D((Yr?\do>&7V#s6jYLriS>k
%/k:u4F!PSbc7`Op_0:rTN-Fg"d:=!J:DkE!6H06[1O)DRe,AK%2\s,)h?.K&a2OQ:[_`Dto'Tq`4a[=kcU>3*\o#Ku%o(01BVqkq
%+/U`e,5brH>QepcrV=Lh;5&5h0:(X0XN`66)J0ni?<L%[D<+SfWNH:bZc4/QGSe-DJ\=4b%#L4Jn\a8:P>#8YK^@c@ZlIi-0fc3P
%k=J>P.Z'ng\429G'OC]W]f`,,Ae:Xm,3R=!r+/g@=RsGBoL5Gos7s]I+p0(7BQm(eCJD*CC/43U5IPQFC/8Y-nc)*rqPfL'b/L^S
%gA!nTYR-MQ+++StHK34Y%Shq&_K$8abJ;fO9UeDo\a=]>dW&3O@7'@I(#nQ^3(R8>k98JQgCEk1:^u%H).r\0%fg\!DWhbX8K/^m
%TLd&h[-8GDK*+2W;?ZT>gHh3n%KXYi9eSb.R.`,TP1!0@J;#R*m5TZXLh>?K9e:+Kd#LbQX`S72fLH>G#T\dqF.JVdp+.1%Q?E<3
%#AI%bXmXUk<Y$NUQ+$VkW]+`M*La^sKkah+b7&3AGpZ8oikZ$qBe+%i(,f\BBd5=21sE"9"H4e9L+DOeKeQAaU"VD4?Ds@%PBNU=
%5]m.,a't,LdQ.A!7Upel*6\SO#&ji(JRBnd_fPn&908FY0PY8oKskn$fc(ECbYt@3D;3'E2&ljWb*(1,=tK'NBa76P:chG+EroSR
%m&t'[g&fK<BR+!N>oSU\LS2MY,'>#r)*"b,A&<<j*lADYqd_-rEC4D;bpIu>^r-h10Wu7c_UqQ:_^[fR9o/0<&#(4m*g?q`&8YRu
%VAH*s+1N&Z$G$$L'BXk=6<T)[%asJdJRQhYk:M3mclNc$Op)MOn#*8f(7&`d^:FXd[Z@Eh[qpk!khG@;,e=/Hl%dnEhb1R.819oX
%$atRu&i`PeO^WHb1_&[LXrkRZZlaT;iu+^<>QDr\"!C.P,ZGRm'3c":&h!D,L)ggB[#5$R!FU7Z)EJm@K]rR8`i61NVtj4/k.sM"
%[UD[p9_JLGhLY*8E=7#H:LKQ)&.!dn>FN#&J4pWCbVjlO-j55.:E:/SG2P@bc=dL\e8YPD8P9s7%9_I.PBd-dik[NP?$AV'^omR#
%-ZeAD7!J\>?rQY@5n/B2>;6ECq1'%paIob[0/Q#`\nA"nBna'l^*;%QLQ**B8#7LsjW.sEC5,*:ad,RE?ZJgmm@1J$9Liqh5W(-`
%"Q1@e-oc4D!K6*/Z9_1uGV69t-jfK1>S1,I6_k7p:LIc<0]%\a!@%tOj064J#p@_lLK96&Bu"[=glj)7*?^E@8M\/i:#-$u_Q@Q.
%.Vp5g)t/lii<`RD%G;*hKDG\*@%NMon;3MLYQ3a<G%s`D]>--=m+KIk&-b9("Qk5*5#A1!cO#+h+q]>+U[\MBo-=d!W]4lueWLNE
%=qb1>Qp`*LVJ6NF9DAdCbn+O3`4;]jL-^,R#mg+$j,P%dC%Ch6b:`-3UjWAu?u`\1mjj&_^Kogr#kF'S(8\BVi25t["?%k!Y[GGI
%M'F/La=WLNJ[TAfWcUVn[Xfun>..r[XUmIpZiL4h[$W"=5g@(T#Rj@A,9jRO'PcWFGAoF@!8/g=J.rD@)k\ZGWs/A3q>m.kOB3#A
%1P,Mp6s)VZ?7]r_S^P7+-RS>/LNoBo>hMK4DVAM;QkOCNKEB=S"\`/+@F-0%_&+@8#9`PK[X@"N!E#I0MOo>P+Xqqm*2/CFJkMUG
%#0NCT)AS$MpMo:,bhE_<5]VHk\bI\l>i-)T#<*^3%MHnB201>%-'j=5R"u)GD%EVcnpFjWVIS(qF(nF9(?N/be\F9KWVDDWZV+k,
%lQMF5A/V>M$gUB)#4uM0A#*`F`3(ra]$/h;";QS9FrnU`9a<)$[V+?"RcGHR[Wj8f\Y*rk'Y/cC4p^jRD8I3FU7IB'++SY,</.K+
%EcDbX>AOSRV+i1ddXa4bS(=oF2i5p*]j^R^PQ7R?.r`kBP4N'6J?866*[f,[`0@t%@0V(QF_m5?eMDJrGj68JGX=lB%$ui%M27.H
%]GRe#M@9-Ke;9oY8G1(*Y$m)j*%9_+.;"POnQaL3&8!+"/5#):4ooJ^!20GH^(_sS[Ode7&2,39*cEQ.%tfE/'T2[jJ1b70ffU9=
%'<Hi@4chZ6@tFkV$]*k+9;FRaRC"?j%Q]4qqOrTGm=d/oi:.FiBbiq)N0dCI<qHu=1!p'ub/Q]HU4!%WZ4;R'P(;^:RA)>XfHe:M
%_8Ze+"(ULcPsAG";Zn$[]<7#1Nm13'N"Lh_a,D'I1;PkH'N'f:C)*#BOlU51!A&m,`J(MU*"fg&i\DM"5t+(O'=CroU>d4M?)a!1
%O[iS:/VY^/!lADXh*SfDf*I9:;rT51@;ZE%',%CC,%H[:.2Rao`PjFYQ`6gCoGA7p&@ZN^_KCD;&Tr'M4iIFa-1hcR;a[BehO":a
%747/i_]7+5#-dT!5W+Dj6.:l6LMc;&;?BPE'Jr1`\L+G2Z&#IFfnt?Rp+A%W(!--&C'g7!/5^+I%oPL4ZU>f=WMh'_f%=[BG*ZnO
%R,o^"-JT1s&'<gB!uMu9#kNJF;d;.+0Ac$A+X\>.L[+&RTSecf\RJlKW8tS'Elcn\*.uM->W/gl\0]=^Br$HlBf.JQ4#):?7g'[0
%e-HG4=%Gj[[&"-$IKN,37\f4k,]PcbOr&-='uc;QP(e]k6S/3AFidHR%E'?i[ac$+?nepmiIKF*`G7`RJEgD@PM'MMVUCP;`q#F#
%!PFj%:7"Y1M$=TP4VS:O6N*22S*u6Z$9GLsGLSUV]2T^!8cpFQ_'H5c#4',=b/^J+Ta/.C\)O0:m]p@-p&SD%B+_s*1!L82^p4)2
%)q+rW$?UBR@1EQ,C>0/JYB-8.80Tjse/6#TK8kSWa@r=B!u&sX.N>TWYrbWY^n`,P;),(cA/-;[1`gl^^PNiHKFF^uC$CRaEpFmL
%kQfP!E&Bn"ajknq;4aJ(&*sKE"Y@]#+7(LV,'Jj'E#]NckCK95+bKqk]FqmgENM.*-*Gd"$9\fU[7T_B)QKRR%t94=.m-]-n96`e
%`(dfJMN^]]1I-qXWtpnj9,h>Y@P;E8+@oTY%Mq)$JRGM'H`X[(/-JkMc/SE0TSaKp?n3QH&rsJB+BWmLkQgTJaP\'-e>!u!n,o?h
%`tdS;'02./#,4,H^)`CIn1sR:6/Bm"RK]?KhJS,sW[nkYPtcg;Ys+h'BZOa3_+kVJ/=$ONm7!0>*\#Oe3_CQ9;45RR^`5]'/mt_d
%n[FU,)>f%WXNG:P)%_Vr%UocV5tj<D9@m!V%5.&sjY%nZRjkWh+A,+t6k4;]W3Y@_baJiP&!kp7[L`"'.gKHjMpMJ?IAhOL#n<gY
%4)""XdH+fa[^8TK6$:A4XU=cedLKE4_N(?36N&:p+q5:])A@sc$dN6;(!?SO%g8fLYZPTn*GHc-WG58:fUIfC-pRrl7d_\N/J8/d
%(+-%#dVk%$](^g!IRljaaauipL:pF5'%<0f1YPZ1Wmi+e"N1?HE8XZ7419bB-EVpM1eaY.;!^q,Nik+bhk4tY9Js187;`+Oor)_l
%RB/[4e*=*:$3PQ0#D0c2BQB27.gg=\`&/J'oR\urgtQKT]<(E3F/SlVs37TsZOr"M/h@;H5-fG`:*'Xu/!WC=nTMl7aF"n3/\WHS
%2BYV+8*Q&-YGU-[PbAk=ibq?UOXgh+ZMoQsd8M;P)u@LA4F+JH>-Nj<%@Cs1a;t+pL`6\,DrU=R0[VSc#=E4]&[r[h&_ZS@4ATW-
%"=l/1L$CanbJe>T6*tGf?g+[-2As(WGh/h'X*>)ULW-)QWR5=8qa$Tm9FId'P(PEDFbl-8+,_A1opIeYW1n`mRNN"Iaida,A+?YZ
%^,!dcM4S;;SJHS1W&V!rp:F7C'X?_gAp"eRg`a*4HnJ,s*g_UeAkCVMX91cTai2\EZl<Cu`"eF[SI<L;^JHr8$-";'eju51Q8[bT
%5UJ]32\eE,`F/-V3oq)@Z:,!aQkqPRFGeKB\=V.EEJhiJ%t[p*?rTs!SYQEU-7:@)cA`+H7k3.aeufH@p0f)m<=TQB%l$1R'Em9n
%#+]muEXjdaI&Xo6@mq^1\>umEGWq7[8`Cnn@XOhLo"Z8!hWH6WFrDZq<GZT8cle[^K.K=YCme`dDoHjPC4SF40H=:/#HD#]T>`dp
%E&#>`D?)=)9.:/Be;B/OrCjI=6p56)326Iai0TP(XR.O[)#0hYe&`._2.1K/`/Y6g-4rADj#Y'+.],1Y&d>%!`9oO([$tmaj69Xd
%6qFm+%2#siVWpFj0bbgd)(6:(l9chc%%;1O,+XXJ`JfdG?juD^a&>B7)hFtHPSm,o!:;Eo[ggea;BD*:PP?*4`2*knJ6]7!"=b`2
%^]I@L%58Lkgqfcg(ISCQ6F\-n$8N)#i6*h%+i@c[a"UoRm*5_k9if:gQ,3a(FBf#(>L(2!7SZ+@2#rQ[i!UL$id=cs0\!sIP(6i;
%"$cpC+I)pBWh#3Z**QeOo9C@bB4,Pe!8(<>,m5I=,1M-;;tORoPli]fp6(*-7pAmH:jWA],Z4YTU2,H^19lfF:UV^@Th$n;*(c[V
%0`a%I/hG-hC7#$oi;b()QK`BN,^Th5`cW25!l$*^5;pbThZB1G2B$lFb`J_4V$50nSgs:j"'bR)Ok6;5*+6RZ=^(uolH9JLJFQm$
%edg@\8nrm=$WtnUZ6MYA#I+jKPif5$$GaC8V/FAd%:G3b:@r)U)Umnu:JhFE=*^Oe=<og7WhNV[&*];Q[u&T2+nnQmALL95''b\*
%JeDK_2;BQ\a`M>)[4[&f7lFc,$\;hTJG#,j;3Yt@5"%UdZ8dBfC)a]i4<_-Q^6-\kXuui=0dM3\TdB?_a&UP+'27TtoO'^6kMl"i
%`Y3)nG9AF+!4W4p=U6?Z`JM&c5^bX<7(50YJj*Xi8kTCY*=C"fNB=;#!!&r4QZcO&"3aSY3t<@b'9!It5T5_?L.`IXd\>#=]sQki
%bX"BT^o?tcq/ID*&@f).nNl!fZPZQPQN.*3$-C.BeZkTr@2tRI7abdiMPZG"'<8Q;*KstY#Z&*0j?^1as+29/qpuE'&"qSTDi;(G
%@%L9Sd+rD/=[s@+[KnpEiD(W6DgU:2"$mZ=%oGK-#JCtM-_okI@*\rJ87[f6Ue.N%cYSB]4fVE($p"RO*a)*$YYDR3\OUc0DUM*>
%[B*gT&0tnj!&]uGaU2/FJVjWla#k.mYoSFQ^DJ1q:b#=^%.E--TVH5<N8:N?Ec>`%f/`]]9Z9Sn=DjTOX&T/+`DL3OU';0!3Edu'
%__TfA0ZF4AB!fJsc_rD.5Z!ZHnjD,N>WUDWj3]jVBsPop,?uI30N/I]\<j':%+Aje%`(IQ2&9im5i-lmn<="nFARo2,1ii+Yj79F
%jX^HD-]pJ%\_).75ROrVjCX1+.d*O$7fYM'V5%6+X^OP\;]IpJF_T;lgS([.F$mj(HR'8>nj+V1/-[,d6jGo.`1g.bdp1O,^'8`@
%9e^RCU[&M*"(@cVAIY&80(,_q>sfep#ZZN_-maF9A:U/"rTP.8!3DD$h0,'J2,)RI#Suoa1(6&a!9P^&fJ!q2M6;%_1,mi3"#*A:
%rIFU8#%X`Q.F:u6Ic8ki^oX-s=g6('MKq3YW"Q#Eb^*3\"p^_"P_*<DAr'M+""j!Z1p0*\f)Qf]TT[R3BFqlo9Ko7?,FGP:eJ=dg
%(s;h&(^HO]=qdWR7a4SV&?._\6lRWD$,Ph6,a^#D2;#1N0WresY-Ob<T$Z,"7LkrAGF,"^)hP%3'B2>FTYuY2:9h]#Y-Jcf3^fmS
%"Ck#W<MBb%PLANX`i'c9pAqj/86TC@:roE:r4&uSDI%-a*@DtsS02(,PR`A'0LqK=a'jCS)crrT#UZU6?j;D9"_-6hbS<&uRe\4R
%\[]h'$),3I/Q[Z$Tg$C-'k+Pi+E_'b:q!+F9gC0k^m#(hC1P_"fb1NFqB=R<gpEo0moVfMFqg:])G-JIp1#QC%ti"mkHNH]$c[Yk
%ZFl4=08.``oU6J,Neh(3*@cl.<&=eMU_4R_W"l;;'%'-k#Eslo49]0SI3FtD%NU5%i"uGEo7hQ/')Oub_+Ou9Cr"aHY\J?Gi!=&9
%WOOBl5K9u8In$%Lkup&`<$Q6e1CuJHcC?([V(Q1u*SCKYAE"mJdd,CtMV.u^:pp?>-g_1Jb.C/l$CF#)6Wc8S)DW';FVIG]&fh94
%R\Z\M;aS%q/6i6Qfail[+,^:^i!D>.(eRg]Y)[<99`6dM't!2X8teKemqC&c42SoEjS[-8:^H^J;j@h5)'I.8lbmnafno,7ni(N-
%%.p<N9@m3&O/ZB-#0/34C"]L'It6V&V3Q7b*%W8XS8#$c4(t.+N<<lCE2i`1HFk?,=MQ8s!o5;9)\P\N(nHcQo7p_r4Fn+l,]DCO
%F(#U^CX4=g_:Y/#;$,NQ;["^]*""Ji;cssubi,+0Wn7FG"]9eV;>$-P)'(XgnU4>)4eXfh4J#MWFl$SW(`-7d*XJX16gU5nAf/6T
%:8J%Y"acJ;16j.sMFE&%*n%+>N2Wo=JMM(G%.#4(%P&jN6o>;RZi,RU%daX"[68+#S!I_VLapE')/gEi'9l-!M?i-9To`lQe3A&F
%n9Uc&MUrmO%"5s&4ZZH<bsII]'F1,]Yt5R`6"2[Y_7"r0aF&N2nmd:V^$HH:B&IA_M^Tuj:rF1TLTB)beF#Y()"1rZ'\C)cm">RR
%)N(en*mWo#Bo)YF,1CttM[<(/>"q,G'(TM6!r!"jmUdF[N;LOpk(aPK#]H47FK!Z!YhoTW5H@4X-#6[\6A5lk.+,mf-nLPrGsl4]
%7H'1f)b?OLFZ`TY%1lGu3=O7K%6"/ZA^d=DM$W?2>*?C6_i,s2SQI*FFU5C@m,Kc.K-PHI+bKuN.\1M#OQ^YP?j8[6e;b\M,+"ON
%iTK!Els&]DBc@R&[8CsVO\MdOP:T#j?'18m;f(HKO>T#*fuTs:7)r4O6TQF,m!'qY3g6?UO3XM@(0foViTrCaGUt]`&m=Rl$HOVb
%DA&%-#a0hXGWp.Md:'Fd=gF1jh!(KL4GGt!F>D+r0d,L9OOLPG\AtN\3@p.'<sQP]@dsO<,WQ1a\J:9aLE+SK`48<S`?2tj8U9Rq
%[n,Z6BY'=]La%mWOJKt*6_8WNDTMWHSfBLQ=B5Xmpd"5iZ!r9(!Hh>p()$2V01[j[X<4FXOCa(38]Rag!=;1FU%hXYZB0Au*?aJq
%G\0IKdm4R+BkSm";Lr"3q)ZT&5ufr_pd5OI==f6-D&)D.Lu^39%n+33KMa@"fOf2[Pq8E"c,^2W6+E`O#d$0s>hip/!\g8F%8)V&
%R4(pgELRdS`2&F%]L+S:71HN>_+GL;e0NG$&_=bX!MQ41`(R6GRNYn<SZq?fZ#>nd`PCMZpXCC>ktI3Zb![Io-)dt%nn^a&2Qe4X
%f-YETWo*PuV>?nSR?R`2+#@V,@O)c=(*4cs,t#Y*;DJ$jnq8,?`ejGcKuZKFa[7@0A9/?*C,U'GGG<"VC5GZ)Rn%4e"jKbf0sMj^
%2$HJ#4Y<$A-qhT=R.#'t<oCum-Q0`=4L5p[;]FCV?]$5+-eAP1)q:/[_=lDs5S&lBX;*lH/uchRQN8s#p</-+59+iHOB]bG(hW>Y
%1f94N*Ap/A]"#8':BFWL6)$_%\cHCta.\2V"cGAI8ff-.O,nYhk&F$YUfL-W,&ol%8O""ZU:AA](8W$LZ2ndIK8BG@ZIA>o4XCRs
%ioc'Om88<lCcD\H/rJG4,Zb$/-)fB$=n*_9faCQR3.kZ/7fFR65rD*.inCW5WFGsS9+9MO9X+V(1l6X^2BQu?fN",d0PV6t7(\-N
%V!,$pY`iHNF<jZ$adL%k#1[Cn)P`h5]Oc`B;LAp6*9olk1Kb(u%VLP*UUZAZ1eq"9i/jcq_RLbQBp?4YkI:L]<L,e_+fjauXb<df
%rt*dA.1cLQfe:C+FkR$c+E?tjaQ[LM?lj*&au<(M&V+0<.LF+r3l&'COTUIG#(ZnsF7Fd?B/9NT2'g-Ac+C.IJW(.9$0/Sc6FPMI
%N*[22\JY6?;EVaY+)]\si,4./d,Lf/P64ebm&>Dl<tC+/!jp6?U0O=#>lj$Um3-V4_O=)IT.H]<[$6t6:_]Z>GG%cXgqG'jKoOR.
%&6!+&%Yki/"3aj^Oh_1d,-C`nbZLd0'Ud0X34<RTe0(d@Vbd?n)LQ9fk=6j'WL+e]e@tV/$cSbm'W)O70I)-?bp#h)92?b&)3;gn
%="5I,Lt!Y]&-7_VWE+bXk5aO^/J?)@3l3ZZ0T$3:`C&L\SuY7(dMJm_#\+0onX*"6Sqo.%RQ4])B0;nk`Ts1K2YbeNiIcJD'i'P#
%0Ve_WXi,eci6N(e%`*886O0D(/-R/\Ybi3YV6Zscm5$s5jF/D_0.LEBE^YB^VG;M1KdNaW4XBp\ADK&+lULZ7AqGqtd6^ZlQPc_h
%E`ZZ^>0'\I*-8%c]-Q894E+aU0!l<m\Ir7o+K2A8"Knpf36(_IB0mI#5C@M>W*SQ^C;k`ob0ml+JeT[@(EbBu9SB<G%Vfj^V1q0h
%=TL(^@aUZ_P+Zd53ogPI99%G#pBr^c=Sca9`l;]I+hT-HH7=AM-%2:K3E>Tq)YXp<5kaddT&Q@b;(4\jMdntCVC8E=ef\c+KW8p*
%(hhnRb[D6E_Bm8d^bG*e#A_t,0bp'l<]5:+a,1=9APOAl#uuKo`c^5=,VV;k;,-5qZifDp2ab$3#c:9&!gDmUi:rlp)C*J5Cq8^s
%j2(Vg;QH^5jJ&c;a#4(<`b@j)?Y+t$X&*$5F&).+J@WfgLAkX'&K[u4'$lU;#<I/SYT-A>^>enNnmHqQHHOW0#V[c@'BI\O>rt=M
%35/_E('29_54Lac-P!=:fFmq8@,[2l-_6f7[Q$%d!#9c\Y"'ApLkJW"=0B3"bCi]+6iE*C+?"<RbX\sp.SL2%1YGoIUM$(++^P0<
%<!8NSM,fOC)*Y(H6qoXJ+fgLMOO1;p.PEaFm#K&]8O[#d=3\(Jip3imneY/C'DEiKL5B(C?;^?7nVZ>[Z?Hqb^u4.L8ohFb@^*?E
%nI8ft<Ws.W-D);/=ok(L^'^TV$q7dAP_pj8:kWV@BuA2?[.4tms!/r4M$4U)SCg^-aIsQg<0.@%A03%qj)fA.%_GKH;gbJ)8G&#^
%Qn"g<n_!?H.`mG.il^%HYdg;rodB9C=_c,Ab%sI.921p]<e5Dq$-bi)XJY5\LtI8dZKT:L"Yq1j.L!Y%3f+WC:b<;$-SX65+ZpXb
%JZ7W1d8MS/_<`#;jQ^@U-%Td0M)XIi($+a1R0(k!?,D;$^9pC;^;be&OJ4o`0;CKqKX%P323NVGWdmYRbbhMf-cko)R&G0K81V&'
%cl(+>8%92A:,"^Fk,?Efm4/Ntj5U0(AK)D^)e'ZFai6hY>5YFY4/LX3CoZl`3Ws6Yk`Ko]>XGC31h&n4_HTS=)00F"!Q%N(FhroD
%?qF''cj=MKS[,?X@;.p%2D@+G\X=<W#^'O0lm+5b@15AL/0_N%$o,,'%_Y[Jg(96q@)B/W3B3j<o],=ULdfA)7P&utO[05(.LIHt
%<V_FdO,\C>(f#I?Ar(aN?pl)7<)FBs::]ls&r,C?3#fNH5]^NZ%sM@M+cN%VQ3+T)D:#[:=,iEC&!$n9:l_U;ic6E)_!1rZJ=XP6
%+A^jn#hf*uK8]t4&@3o45%X,?7pR5r!c\k%ctT&][)MQX!4LAb.=i3M2g?\l#cd@q%!8DO$A=i;,a4e>ESi+`iDNb=-k)$?>VO)!
%5*-=qi?m21(1BMQ)poIPlclguI#EjXA^]ZI3ohWi_?[uLR-0$RW/H[lNc$lWQ2#[j5B5+27\02"A-Y077HmXVMN2ISn^4nF/1c`-
%2&-Kao9el@_iT*V"L0o&Vs'%`![RCK^lBVQ^u\=d1S=Uk$C0b@:k_IFMV%XeJIhMqMSQ;[@:S@$jra][18nc`,GdXCLd!g_!d-jQ
%'ZW"i8n;EC`/ABO'd+`W'dt=LUtqbM0Q<G$ULMG0/2Uk>A#o3B]\YnkO[.$r:oWDCXK^_Z%SnER%WKru#oZBjqk:D_gY5ei'GZbi
%0oZ$01mOc_#(;H?j`?m;'mC,<lGR3L.b?jZ&P&$'oItnBoHd*Fg+PcLB!P?q1(Xn!SV!T<&dTH9Qnf)*EJ<O,(.(I#-phR:4<[Ch
%Tf>,IHZIIDWsH)8#!5.#P_]co*241J(J4sa$-Q]qPi!<4@T8B<1=UVYXe_KcLhd_Djq(0QStt<?Tcc;3NnKc8hE((e.gE4d,bh5N
%<)cs$nI-_SGu'?[a1s5iTL#g;#t3Amm7?Rh0o#isAcFr3$@)dW4f8>4l?'NS4rluh(E0ki847_s_OnmWWK;jpV@m_Gli7s[oNDJm
%5/_!JA!1G5aDr^+P_/?pip\Gfm6OYk=AV4LFotU7*A_9n'60(-!XC7sB`o&KBa-<lF'6e-=$tYk#aSk!9:aqe8GT]d,r*l]n8^]^
%&W(lj5]am\W\!8O@N+4P5=\u&Lds"cMn>^R+I,Oj*h!b<U*6PTAE31bm3:>T['dHS+&ecMFpeInL=.<)]6ka"/EF&?2,6A*FkF+l
%6a!GgV/k(.+UljeeXKreDnqZS[9VK#IGM9lT`Z>ca8O^)S&h-U7;4Y[kT+f'2]figbf/Skk'KDUo-9kL/s>OEC^"3d&e/*H>gK=f
%e;Gn"LObb@&FcS"\^\Yp$:L/H<I=m7QI"ti5;PJ_U)C2c'.`FDVI<%UZ6e@*>#Ll(RMCU1SJ`nQM?G+b&]SPe^6#'ieE"2@BuS($
%($9Ebm?1k;)Eh75glT?BXq[/HDB>EgNN2lHY+36N=Ou0u'*Ka#+40amneMg=H80\.PZj6^=g#^(_DI%*la[XU686jF\@>FB&1k:0
%h&oRkKIV<h?=NH[:iT9;ZsYZJB-1CK!:k$cM_Rg]-41Fd38HPkK"tD'#Q.?WXs+hWQ@"W',<=\\GTa39+ZRHMTnTu0l=L3cPg*Y.
%L0::7&hV68bPa(ud3^cgQQ$!ONM=<X\D\P7H]!bYZ\[:WkAmiOGpn\Z.NU(%jM_pa/b(\r40H/qBZT7j9]3d:bQ5EP[UU/T?S2RJ
%o7_OH>pH^VE4EiO;89CF[:C%;9->n@EM&K-"s6)9K]E3F<GJ5a/7LmKDHV2dMM^/M]rq"%K%e$a?NItj*c+$l0Z;j6O$oWI/XV*f
%*1"]B'2b<OOqWYN3/-RY:oP]1$hY>D@%_-_fWLIfAa5?lW"Tk3$j1c\__ac&jsV<tK1$DlL[?<9DQBNN<!u5!_ae='>33s#Bmbh.
%*1:IIg%!6?[]C&VB@`%qfpEJ%5R&!,X7VPbq`I_)YiCL`jQS$I/m4WGl?Q%2j7ln%Z.]Yjj))S%Ho`/d8+b6I04NbY%5.=^Nd+fo
%_+@A-(_>-Mdo*\VX@b!]#K#QW8fbRmo1//K80%NT>=lu*?q>r"51Chn0ZIm*N034VapKpnN)=RWOl/S<;n`-AH&g<D9j7Jt5nk9h
%<:=@$nX5lGhUB?.[6!_)im#s]7<l*g:#3h*Qbe?0/U7a1?N:aD'br!jPu-_T6d/C=PtVdA8SQRgacdGfT/=8qVS#LcBdV#I.;"R/
%-KE_KQ&ub_nmiW'`Z(!*@Bs\UlaHql&tf>khnHAt-'ZdR.]4lj6CY&.C)h=S"Q*i:22L&#-9pQ<O6Np1g$rY)Jj>>[cqDVb`2t.]
%-Y`?J.CfctVHiA/7rQE,FP9+mD&G=%I68LGJP^>H'!aqhVrFD-O9mJcHEC#2%K!ZWPXCfXRFtW]c"X.Y7]9,L:dpc:]>VY796YE,
%Ji>D(ot46P>Fs.\8F@]r=H'$3ij-Edgk(R.M?K6bQhEb^7(4$sLhXeF+\/9OD*nJ`!TCB!aee)3)-)Ou(P2@W(_9X!/@JtsX7!J<
%ZO\/WA#klH0@ZbU1)NMM7FL4Um!lhjEOL18("j]##e\t]XOT4<0/u-5kOP[++n%$Ei:>A]6SM:@1(--Z^pb[OW!Q8JfM]Q;/6+3<
%B;a\BQf<UpVou"^'jDKHc-_H2(_:6Jl(0C1+BYU^7p"OMAQ2k?!EZttMT#ZXE0RR5HI1*!Go6d-d7_6O]Jr@CWH=?H`n5,q%Z!]S
%UX!(uLjhHqB%I^1,cZl"6d^\R'iO1=MM6"h'n(^Bk*c!(WPRFmK[Fqfp^'uQ&LFOWa\T-uis=ZI>Xl*]=?Shm6(eQq:p25i9\]kt
%ifDBOpOC?'W_?aoFtHe[`2-aZmibC&r4\L?"O!)uIJ(T"50>>`1U*9UdegJc1dOGi8$EtPi4HCm)rU=t6E\%-^ZTfbNB#_2Pj9*@
%.bc>4E&mU,Y'>*ZAKQg!a$.V5=WjS%5K$4b$4%k$KK<\6b#q=Ino.5f>[5@+nAMYdXNle5$b7I^V!!qYornb=fDr3=8k^WlIV<`g
%Gh);2SgVIbiou\__)`)=q[sR[$7NdPkW"YoGnCb[q$9-<A#b8';(2TYCse`oEblagb_LL#=cQ*A-'tS#:eHq_oj2ctfm@Cj7hB+G
%c]J1HV<,KAF?5]oJQ[B?/cgR/=:6F"P$u"+69,]\F3!Q.Kfq0f_:D>@4*'F`1;S>Q?"GH.AD<.88"reuZXcO96IbsY"L4-k"2;u]
%%aa!.S7MQk.\Un\'M8[X8r@!j:e4>Whib.S@bbA`*8a/Ya0&\OA%._?X&HD;*IZQ](\^na-`V]-gt6_,OQ)=$TH(cn8kY^VE,hLM
%'SNc=$:-.jc&GfL(L8"hn_!uJEB,hj-p9bM\",LS`";YV_'GK'PY_T7Njg$&9<MjIk&=;(%L+MkSnb<!WtYo"bXdW3;9e>&E_2-K
%.`qj%'Lp5!Nmjar2P+_doc+4or%Y^kQn\jR6I4`udeOFa__?L?<m=L1"30PNoW0bgAqgql$`]g]7u`(P*1qkbg-M9o?>QNF7=iC;
%0>#r#i2;Z3mR[[EHkhou;/J#OR)umrd=e<d)=m>^.sH4S=@h(EHP.Pc8Y`,5X'cYPng&E15)IV+Jf(N/62ZrT^iWSXU'(r-=O-[j
%f[/U]`[fe+8ZqjTW&QeU0S7YKLS7gRU7XS9#uERX@8H=Yg28;#gY``>0(#UA:f#Bt#UY\Bp]:T_Wg*%("3!Em\"@D?L^R!'kpVjQ
%6^u&Q<@N%H:tOrL=o@c=]S2RR_2WMl^9:l-U4IA>4W`'DX=7.!1"*d(h"3oZ(lJX;,6^QE/eQBR;F`[PYY+&4'U@!L`g+$*.%ZFB
%AhL7I,t=L52l,FI8<'f7aip`J*JuS0MgHoV%thptIZ,;Z\3bLS/sOqTB4GTjc*_:l-97;%@B*6#%/L!m]t8iQ8OhT*BR'("jkc/o
%?5u<L^Mu]GYAi>!Ubn*I0IYjK8uk&,(c0-,Tb>34&Ke;QPDQd_*9D0($ngtJ5S6@H?AHMQXPm5i%&)Yg=Z2/%YG?A[OZ@dtd"CTr
%R;B1^9X356hl4!jLjLkg85>o2AM>:bhE;[R"BpJ0HCDZNJs7lORf\a<LCcTc&s=<Vd=f6F"D'[[>W)0LKd_sYkB$&fDYY"noUhb@
%VXlOVk`:T+TB_Op4Hsf2VGKXn5e&/[6TK:qOejO,5!KJ9]9'II;\<H/H^ke1jN0D']r0+<ik(:s[ca\4Z"d!'J9^m69eI[[$a+Ta
%`cmp=p_FSccPYqBJgXX+"+E=$F^?]#U!J\d\_4F&gE!<[NL/5_QP'MY@us)2J_Zq\QTH5QrjLli+deeD>4J0MpmNW-=n1UW2(:,>
%,_;e(&asG'l=Ac794sS1?i-+`,INt-M_V<'64;)X-kP9;W*[;+R)E6`EX'k/=^@:hJ2O=UOYD-O0,>a&WLK2_B1NCMPX%`58dsB&
%j?3cKUa'UMNaUSTW8E!M$UM_G<7BhH$!!oGFbb*h*2Al2QcAtsal_!_5Q?96LT.h>W=Smuq%qR$=*a6GF!'4"UqB4l%^/Dk6pHWn
%MMN`!+W1lW+!DYePTMq0Od$qK,nZCa+Xn"g+!E3JQ6.D-OgM<WRY]\G9hltT_l"lV$:[T`KGA0u-kbUa8W)^:h)%QRgac56rLfX[
%#a%VL<^[[]OKOD^O-6`'.Mt?\&JcH;Borfh05V:EO-7#/\iW7D+t>fLnfk)AK_.]4?8mEI,&=)1,30?!(eK"d1e%gtkX7m<_9f0?
%V#6=rN2Z@Sl&;G9YR-;fp]r=.T_o'eNNi%'BoT@0DIOj-*BpkC'd"a4&QLMWH6]M!PQXKUIeXUI=Bmr0OWY1*k(q0@P3@]OcqJRM
%\=1O"#^;MT7o[;Q$'/V-_l#V[+Ujq6#g89np4t3F9RK7<\uC_rH2-Gj<.'r&7oI1M$';Ch81BY!Jl.[Rd0N35K1$H5O9g\40M3f?
%WaM'%8C@URF@_'I6:)qI5>"NnWB`*cOrt:-('uK..5;J.5VFu-U$<spU5k4r*f2?`,s`/E0M73J/3cai,UblTRNs@I6D>_T5>%q$
%X?\jMP-h*Q/kKg/9:.!GH7>$`H%_tb<.9M-8Q9"PEK]8FV+qY6S`E@u3`>f"WaM%o8lELp.?q&gOch+i"f%kjU'buU.1*:d.O@L6
%:8UG#USLh_$:[UcKGE^H<$FH\Ue65$Hs.ht@&1_5=MY9BQ)OI+ad')^OjYag"f!>FU@P(T=FplL9<s3cN0Iq2.MsJZ&lkTmC5Hn"
%8[a9eN0J2d.i9Sk&sXP&jUr:M-0Z%B0LFJ>/?bUhM3*Kg]nF?p9"lPc%%i!*.MsH4'3-_Y$7;c\kTii(HDEAk<.S@"-:66V`It`^
%ad<?PP]TSu_$C@8Yl#muRAg$38XZLYh6]lM%S'4:6ktZDRY`L2,rlW>TUDC.:j!F.&[H#+-GgcL8J>)X8t%*.5W_gV+`!riP+E,T
%XGIi7+^L:RG5-_b<5Bt3S#CoNOu?bE;:7@"q%45u;>Cf%2c9D0P;cq?OjZ0c"[aYVU=-V%S-2tJM3IRIa>?XkHMBm'<.'p0:0>@%
%adf=%nEHIA\8FV\Bkups:/l\,UeY$CG$67[ek>?T*?.&IPOrYCjA&[%Pk7^M_'fV]Uk7Q(4Ac9W,^H*kFON?$jGSkd"Kn*V8KmCF
%HP5,Wl(6skTbBUeq%6Lg8bq>/5%+ViUj\Es6RR>WntW"0U'a@]r^7J0TDhE>&"N]Xb3PpT,32Ua5Y2,HVLaoY_^C&1$:[SjKb`eu
%K-FRVFAT7O_^C,#Sdh5'8pWRH;CJPQPdF98KAdJ2;$A2?L8+7Mae>N8bNY_a#L*BKJie@;.&p[>,Z1SN6`5d8$?QqM$*mU3.-]FS
%aeH"kOjZZq"hG#8Uc"^-;)GQjP"&$XL//a7I2tLkP`X_*WM?9fiKHc'qno=mOsSIJ+=4.(V3$jtLJK*?>@cAC;DPX@M58YH*L'/g
%L,<^%.;<DXFAamk_^C[H'kjG.P/6E0PnJX&<*C`5+*rd?H6[@J4jZhS-/-]7l(pd7&"?s!<0Z??9[Ni08M[,am@i!&M7,WrU+%jb
%FAknjFa#k!PaK(/l)(E*UElA(ej`1j-.`%a8Z0ML]UX.;k!:Zj'R<hN8Nip*1d`X_U'c"k:D'mM!\10pfG%<5erWJ%`.P"PL5JfM
%'2aU%F6HS&<*hL$'d8X"N_5hW_^D7C%VV]7,$`s"<9!Tn4tW&prJ+0B7265tRYlu_P+7C>D+7&l-)X4Y$*"^1^_Bd`=?9$RAG5ZD
%<)F0\:/jZ;I&!L;U'a@]<[AIhSZYT-lQrVVADNJMKWLTKMJu'W>D3e#Q+2\Y%\L=)MX)Rl&nJ]J<J3J,!\:9YPS@.4&2?Ka.k3bU
%)CqgQ2j"guCSe>28<m&8=]#>IUpHfd\d>JM=Z</liJs)NMCKGhXVFhi8n'<N5W?(c"[_H#[up`liR;"."e#b#UbTOs=+mZEjGK$h
%8TPWe\IG%l8h(ZAeWj)fI'P9&@$Gb7<5J&1YGesCat(<Y96s%JUSPSt37-Ut?W$>j;I?DreUbiGUa;T(=+iV^!\B01*]=0;'d#IC
%QBWF?%2P5Z9nYsV\uDn^2Hr*XQ66^1%SKeUF@%OY@$HmX<5BtSYp^N>KX=i\?8jU)+R>lD,%TNj=;',eQQD'HFVA<-eH3Du=mBmU
%<g##5=YEJb+_rFI,$`r'=b<`A/5)([:R<A/7>=U*-!*Ni8sr*a?%u.D7E'DuAeD=di[dD;-$>MQ0Qck:\H4TmqCK4.UmjVBOS)Lb
%`AJ0k7#OZuO@DkqB'CVi&nJ[T>'+CN2jkF)O-!+pb3LD(P1sf>;ej\j\k0:8H'G[>E[u)'`*--V.&jVQ!o;p@Juk;F9.hb*T4!S[
%9^8M-,%TLT>CrrCArDan'5biK:VB_3KKMl4/\73.6Fn`tYEs3d0'6oGg`kNNP&;SL&J(.MM^nN%m(M/6,ti8)p>3U\LO)OB&AV>V
%Hh^<]iZ.3664q'?(kN2_85M1=)u?oq!a)5sHc<R`ml\"%TA10D"VG.K_.M(M_RE$g?d-c\X`['W$Op@'hST5X`4'&Zcc^7shCAY4
%CuC0R(E0e+_St9%Q/U`A%tqH+Io_Hmjn5&Zf?<LOEa69N8O4t9HWH:;[pKd0H?m1NbD#gH$$3A&e'_JSYMUMKp%%r"nm!iOf*&[0
%rtUAC2"7;3QS1KRe+N9X9rKT15:b:Wnp4$3$hn"jlf.jZ"M8pY(!/'eE*fmZ%:#%_ir)r3]@an&l)pB)CZ8X4s+5XMbNh"d0A_1I
%_X$=VRYVdJIoaSTjn1]g]QitQ;I2#[Qc-OUq^"8+Qe..I?8&KX8p^<Mk=!!i?E_Isnc%"S?G-/<Bs3lTmh#5>H+bWp`Et\[nE&EN
%974FcIYZ"r9@.pUPkfWNr=5O)Qe1Ds^7o,8`P1-CH+C+li3_F/hp#lW0A_1EoZR!$Qi1@q=+n?@^]isUhL@ul$Op@(s'c(3"Me>M
%01g]ap?+iZGj2Oi?n\]Z$\@9b92].NY8>0nfY@YN0].@`&FANOU*Q*fE*<tBjn5?!Qof7n(sG-&0+Go*Y)%_(JP5QAm_O1"0Y`7h
%&n*Gs(Ic3n^_N9AQe+I\^HP&7kN-j`oJ_9o-^Z3sZUoW/Z$)N%-e6,omaM#@Y37jK+Q`mRCP]NPo."4P1HDW`jrU$m')SA4k:_XL
%\WZ-_]U8.P0/3)e+8RX(Nqp&&>'8$uT@P%SrF_D9iqRRuHgHO%oDe+9oZ,D7QN-'Ehn`Z5q='ff9t[A\5*:6Xpua"Y&DPV;4==HV
%*)G>ZO8S77rY`;*a(:n6n\>+rkG.G3dm*audVOO=Z;TJ>Us"S/#Ug&[S\%)V!30Xac(WQ)k'8b]j9on`j4(\c8<I75eo"\X\LfHo
%Jg4kloC`kabq6%;8!M3Vp2"JF%890u2CW/`Y.Me-3bpfm`0hD^eZ:8NT!W&.m(3@W']'T]0ohGN%_5^Ya=Q0.BZXOp$rS3:'>Yq=
%CrI`m87_#>5"%0;m_844)Y(G9OB@q*qDLnFHelC>P].!S(ts)Q%iZ4c7G?RGl&>tt#@[OnP$.oOXF'b!@mqnJm-J7c(CW#`oV?El
%7eC6+Smh&t2_Z<dRQIQ3,8iJ"?kGj1r[C(WfR/?BE0Hs'e1EbV(<,p#oO<lnGq.d6P6j=$+5'>BOVj.D"Ho(5Eu[g6kiU-`6^S<0
%k^f4u:!@6u>PK8;C=mU;fi.._&R"d=.&1Tj)si]p2L:6FhP)E`GqO.Q3m[OI:Bm9(5hn>nWnWF4n]]2L?n0YlJaa7KWO@Uc1U/o-
%?Rfb!UVdl)@s&hh(`5OGW]BeG1WCXih`V#n'C"f<2)G0,)VQ[XF2CCbS\JKL6_O\0FNk2re!9u*?9)C82fuZaG'm"V<UXk`VA2B@
%aK;r9O=&4']NJ:'C(F6%=e;YNB^6`*qnCDa,;bn`IGm1U:dLjgF:F5pg4)t=F5,a=0N]L#_)5_gPmI/)<3N\0!-nYKB+QS[YnGJ@
%'VgP<ad`C!1jn_3>L]EC!E]lqFLF0`*\[512qMZtSMVTKop$XQgRFTahR6F@bc/4p&t7ig-dWg!ctoMOed)]d6u3YdC)DIsbY9"\
%m[.7DT%n:?9ZEH8,^hRHA)4jPo]?nj(O9@.9d.^^k.7tO17"fl;e0@A`MGg_3UMG%]69fg>IJoMjmB%L9duTB@(uaq=aW'!9UM13
%Eg(N<[qrsAme'Tk`6_\S.BpA.l067[!n$DO,+*8PB>5;Cht@hAB4feA40m,fad7;^JnZ]pJLmAQN],34ih]R)cJ-&s;5e*CA8btW
%YXQm&0jjBd.k?h@bUJb4GSWG!HF=ca\EaUha5>ma7C"ZNj8kGJ'q9`jBn<R01X%I1$=Gf/rdP*4-#,87nlXe!k)HVO1*J8bRJAa4
%DRmaNq@_MN785&R..@4Y%5FeGe%D?naba`"f=49RJ.tMo.VMS8Q4B<eIBhkeOe7'6b=C"SL>bgV2:qsT^.5bj9ZYW3*''6oQ_+L2
%+\#ToOi2k5SP2Hb;ab$s\3',L>QD]4l7ES?LY:kNTTp67^o[eF1`=]77X%^:d;77A?D8,AKcd+-l8]Jja^o%p4.&cN`cJFUD6@W@
%.MkM8#S\GOmt..^U])Z1L4*i[I?/gr->`d4dtj/8j9"/b&M.!87k%\`6)&8CX1fiY"tBPO&X=.+:<RQa"L4#ln3k7?M!M(.!kNKS
%_FYe,8n6qNAZ$%6j+r-+Et5Vjg0F.M6;Xp]eJ="tCi$=nY>Hp=o.%9'"59uKl`VX^680!.W1+S5"uU"EPZLf7^uQ%q?,5u8\M3R9
%IBK<PY-.:fmOaUEfi?]\=!]DC[<^A)llL*P1Q:]e8u#;!R*#5ooQdV9[$BrCZI'(g/)QZkM0+*%K`HmP<@%i`WNZ`(+=aF6)t>2d
%=5I6bHO-^,X%Q)i"cW<k=^E!EigN$d?3<Ail=.8,F9'DW-l>rbfepi7YZU5bPrpjiMNrk7?9lYQKYm@dBF#)rhOR0,b`I>%@S9`7
%@i7s,[<Pk_)r]VHT[`'r.(NjD9+GP<'];#cLV6lt"nHFR((^J(gs$EG(+Bl1X;9CX!sU\E)S7.\\pZRM:]`IV<`q;j1MWY9'TTW,
%G+H#2o$oO\0j'c<J^R_E&R1<i=j:g0?OnGdeQQb0@7R_BeI99(dF)#hc(s)qVdL9qijR!Q@CoN8CZ>elDI8)8d#-=cgZ!a;,'WH%
%,fB1"$ta00Ib[])LDR#f)-FLN02O7!fljF.cZV066n]f`bMFftOd*Id(8;*IQPPqJ-D+X0?DESmGVYWC#OWYA+SToNJ[XNB-S+1N
%[F+n`51?$r":IVVhG?Vf-.#_WX><NJ%F&W481!DuDJMVb5(AJ'&B.lb>0c94cj%oDk-jRFT"5*sFF.BAO"HN\3;]c?/g)@FGpi'`
%=46JYiA!qMOD]FUYpkko?>g^/(:F#YO&["M(L^$FNb<S/#mn5V;Lp<.pQP=mpq+7rAbok85o>/#)7%WT[=a4a-XN5V&KB]S_\?L<
%CaU1T/C/KMRdBF'p;:l":egGh#Ff":6q*>nn#J"-/@;FqGs_Q9"@ph%V2,rHUPO`"Dm@+YHu/-o'70A&7SFKJ]XJ!n+gM5IXr,IB
%AOEr9#is2De7B/-Ml^@DkQ>LAr9M@Ldj"RAOKc_jZ\C4[a0@7Y7`I()MU!B]l+m\5FUqAqDj\VoGfNm7e3K9Y'T;'ZI@p4%^l@B:
%:NhP]RZnp0UJ[$p=1t"%=5Y&Fi+1W2JK_88+KI9'3;n[/W>]tGRpHJDaJ+[IlADjnCk<Cl5a5LY3K`lo_8aP92PUcjAY?ZAH^S."
%pt8]6T8T:;RE?H&#&,HAY6-qOkRL-7>-bkQh1Al=`s_DG1@[#H5HFsW^\^Vl_f*c2B0VVsPVC(=R&f9hr$l/dA)!ZDct`fK5aR(Y
%bi1@/Gqr#cBcB7]NAh9S/M]-&Y3-Z.W<"f.+U=4/?H=1T)PgeV'4lQ9M3Dfqh^qIt\OMab)f0&$[4KtIVVe,iq0J,[N%G=Q7*EK\
%amQEn7R^(,bh]kD3tkZ*at+?gjQL=PpI-c+*)louC7Lq47?:bE5U;6_ES3)P+lDDk?*eIS+FtH+FM@k&L.IMsLd)ZNZG1ru-rdg!
%GC%jZRq7R\?s.gI86CloGfBAFLo7Wt6crL@&4k0m_LSFtUt[,E#BTFomi/TiaN219/NDWpen_I'Prljaal"<PN1SBXe\DcWLR<mg
%;(d#>7q"9@$_7]7o?4*+qD?'rr6Uq[]fha7RKM^oM>S0C<&>b,)nq9Sdhi%i-ZKOF1(J5^QWCdF@O;4.QdI5XnJX&!r*(I0N8X$a
%-K4VPQf,FX5h)0qZLAc8a8V]Z]:f_JKf>143@)M>5!t?A(n_;?-G"U5Q;:k`2.Zp>$gG$^5T6f!M>PM/"G]C8?[3#e'<70d,F3p"
%N7:J5m-AOJ9"e6<o.:_IABffM8L'<B,^eA6(Vs@nn+196&9O:-]0,)d7XRc$::o`Z6N'(<)PW&QROUBk;lT=uY$IK7+HS4%q%VPI
%"H1K<RlU)&.K_9sYC<#P]XdfGgT3P<9Mca-:YSp:Y(?p@R1P,KfQjAIoa)'5P.phe5d/s"RJ95c;Sh$Rq?uiIBX7gHC^Lk!6s%N9
%?/JAT1`&aR%#S@F6-j5m[Ef+%mA[;DX^V9>Ee5c=UjRFNj%kG6&nltaR]]kSBJKTcpQ['6cF6m&*EqS3FA'*j@`B7L8#59kmRrre
%miH;B:;D0;E`okE24Y!>Ok/1-17;T9NF6*:B2VFLjDBFFr.$XU^&t/@9_#m:-NbqISgPjW;UbjY3&AP@K)>TjW=Ha&,q4Vf>dZ)N
%6aW3h4@W.`MnZ(,-\'$3ZbQ=sX*+YY$9W+Cb)<#7"PpC:Z\L[8C3&\:3NqX<P60`!qoP9TULc&tEo!iS)eRWLK<E5"9Ya']csK-T
%-i<[6<Z$]Q`#>VDd#IP/c0gI/7O4JVmFF8VgMW_q@];5K5(L/bCOCg&;K/qZApSp9a"`,8JoW`c-M+,SDlj(tP&n`^Z*dQq)9/90
%q:#g!qs;SKe.t$26:"!$2>,^+K4?Nj!6eMAnkNt(OfW-[Dt\KSZ1UhukM#788h3.7<H+An4%cLR>k)67#`P2^\_`9K:V5`6BbMbk
%GNn;3jA9f^-Mc!%HX/X(gh\)DcD!ZigJ'b=8FeY+<_X(J":`a-b0p=R1J#GM'ealR**Tg2'[a&:XS'E;r3O'lmgt,N[Cj^]OJMkD
%c8P-W<Wd`-MSe<`=0k4MM<]Jsqs51YqjY\.pXuPu&-gj,(JCb0q+#+AL"TJAfYB0WQ<Ag!gJYE5Qguum66b!YD-@m76;2EoGK7kJ
%plLt*G=-7]O%jKKQWfKI&`\%M61L$P@T8KAWkqcaB)P*Lp/hf%.kX!"XbtA/cP2j7+q)hF"%tIm)q'nFc!&gljbT0C7(Oic:YV%K
%]K*tg'8<>O>mf9e";&tgFk0L6c!""+'^E(m,"!hP27UD_J>A]NS0'>iT"6ejGbj,bWh`r`D<>(oQ3Ysr-.73P9qHO'N@Ft*[rb^^
%RrF'QMDDYN\,2#T]O5c&_(kMLY$eIJG!SFf3:uC1GXeQB`Wqe>=NM^%JJatifrB]^^,Y1]JR+e%1ll(/p+nX06)XJ(JhN?Uo704O
%6b%Y5,Q]^V/O[rX?cmOb/.:G1p#>j#P<RhsiZ;):TKF>V<9BQu!!5j9>4k%38bZN6[UW;?K^9JXN2W'8[eBE,+mCko4:q'YJ_bLH
%H+2W\@qoUK5o=!H&3Zrq@4lRJON5h?65Wsr,?Xj8<Y3<SA$.e`ZFqXm>g#"WUBmb#XFpC@R#C$F=TY8SAW@;Bj4l8NKitYkO)ThM
%jKEJJeGl[MKbO<*QP'XBT)D'kO,0Z6PDR]B,BA_#W>.%$J6`b4'6FXm?<]<;S-6/aWiW9]kDX[egCbTf7%L:u$p1rl3,C2BBKoFC
%'HC#+%P+e.6aW%Der3(FNZu'K*5!.<)dn/s'Cl><PiG0I0Ui27pGZm;1l@7S8I];fL)0rVAn,-Kje]ihi'ciHatlTHQA0"IYj#?a
%E(Z\C#Epa8>WEaGGBd+EA(@DMMKf\\Q)6H70G7,u6eH1O:H$\r&t*<FEh#EPm;WgESsf(lc^DL=1dsVm!f@,e[<nIZU1roZ2H3CD
%<1'LmGZZCf#a_/]=WYh^Su&PWL/tKeTSVor0hZ<%;t#q\"/l=0"jo6>D8rR2[*+lG1A%K"Y5G_g/qD4ZF&$F\K5W0Mebn-H9He%;
%L^l3CR[25Z$Sj^Vi;W&KpEjOA7kMJc8nm[I(M"sl,Lg)]@e-m;V0K(2d']"hKNr>E4,_%$r(J?Bj3--gLXd8D^/5u$C_@t%X)tY%
%XHJ/fXq6oYZdbP($Un_:fcuC[mCq(:b[iAaK8Y#3o@E'Y]>\U*,g,Y:65I\_#DX^Egm+8hQ0)ZaMad'd(g#iL,Y]=M'ABnAF#*B$
%=>4'j7rB6,bKUDH:Hr/<@+H"A,s4<&W_00]>VRAYZSj.+7&JQR7EU>,gPbZ9=9;K[>oI4J^A15`#Y;7eeN26,>@n4P&M,:W,&i:*
%1'-R[=Vn'^T^9.Oo^*uC??s*mWt&TlYY)mIM8hq1X\6ngMRk8V"[ZH@-NiE2B8SU:&48_*:*1Zoob89<rZD_IThOA:<W6CA86U'"
%KaS$La@.sRcg>L59DkK2LnW)1`3<r.[NGb9&#jB--l,/PLNUC#4fK<VoManO^:-&Q;4q)8Qk<OUIL'+]_WB!#]r)>sD'j7S9g\5W
%5mmuU0('F[EuM`P=\'f8#YM*$22`>eZ%pFu-C.YV]n_o8<l\VYIm&/o:oVFr,=QOSN]26%,h8c*+ib4Q[uMiP=&u.<j4B["(j\+e
%bKsTCUS@$b2MG=GbOOUKKd&Y@.lm"u#kQ*$E[se-/5n[N.NK_'bT88&:0oRU%I5Wd*P8#9a,k@\<]s_I24;/i)OH)O.-*I8p@8kk
%BmS5Bh432FJ*,QE+IF_L(4Dc#:'<Q6Fo.,-+auO4j5JI1q]Q<,dH%huF]Kd,Skh#WqSk`=c?KH"1SuHLAW"g270o8Rkt&Sf(-M8C
%<Qe)D]d(2tma5FQ'CQKKTqb;&0M>,ok]dYreS7_VN&L.%5kDgir&ITL_HGdQE/m:GCjm?,,ip?`ME)M=]68EUb'fVT=:MCsSP&rd
%q7`e7bj3;^S4Viiq-Ke>II^tF,9>'mif#RmTZpgs$fd+nG(GTR0Ruh!m!DkZd)./a?]7+-%;BLHj,kdK:i?oGoLW6EhG*jkXTKN4
%`P*epWmci.X_;526T4DY?*!tN`a%9#,9prg-N\_hgHn?$J`icPY!>q%(CrDU2Mi!Tj2"3P5OKPWmF8N><:,@Tk0r.rkpbptPLgkD
%HrPrR\EhL5pYR&0H`"X'X98,bQlYkYW?Bcp4U*9+P80H%]AiTJ')69oT:+5N\s5.NMg+=ur6hsO2Dd:Xcd<!]dT35&[MKq#G4u="
%^<J*5;Vr7R)I+5l]\+u*\1n;)`,)jMEO`s7F2Yg5lf^]u0Ts<KCkG(64_@ApLTirVBr9,oDN>E4g/M*?KfAu(#_F09[I%NA7^<QO
%n`24E>F9"]>^Y&_A9U,<(f0j(HB7k\HJEoV]P-id_Ukpfa>k2n/62P5[/$'nT,ejfDb'@k)[9k_MQ;_iMhFf"*ibC)VVPNlWnS=_
%A[_jl^LS$sd**'$bdW4(<WIfKFZu`j[UtW\BF>,\g;;<Jjd@)7`("ph$#D6Uc90>!9F=,_TAZSF$#CfL(MU<U%emBE_.2W7Jlg3M
%'q]?O&:CO9aH;&!#;8Jsi.]P?4TU];4\)QhH*9$20uH$'+Co>Y]M4eupf8s^CtK^mCK:Fi9=u<]PI&FSb<98&W8?LkLTTms2@&&P
%;].>k"YPhHIB68e\/i\3M*)<7)m6b-#M0DF.iZU98rf5<8c^^5Q)LUZm<4$%AaQ.5?W!emOb^Nu"_",I[M3Um/Q,"ahk&G.@NL`*
%*ufc#+gh@J'FgZN"<`Ft[EUcH!im*R-APo.?Wl,nS1i*Hi_`A#6QXHp5,dr/gl_\6)q5p8/8QAnY[pVj>_D.1!B;]<YULARJl7=Y
%5aLTB0.oHG]p=aNSuGN1V2"lMfLf6jY#i9_JQFLNWiYAl>+WQ:j;dchDQ>ma#p%JZbVd$E#ek*pQ8n5u419Dt#H=9s\3L3Z\O'ag
%Q<Z*rlXYWMnX)m?8p'FCm%k+W-M1nk:\oRAL,=F;MJ82A`0f#m^IN3Q`14gkUH)bV?<Kpk9*+@04%`,Yl?]$NSa"&CU'`F*Q.8Za
%3]pZPg.2K/9nJ*BGLGc/+K#]1!+G4`-%gQjbH8]>4ncl&nPBsr/o+`/1[@V!5!'R+/JE(ZkaJ;OC5Gu0jV7*=q)fGC28%ieDe5eb
%T#oCEPs&=U<fV9EbsS'O:-tq^a>V;'Xeoi/0[IE&#GbcSIGXP5-t2)M!Z:QW:7u&KM&GJ;S>M+LA3bMK<?TQ[[$q%n3u=G3ed'gg
%Zd!sZUa=0l(3?_M]Fu5e\XdgBK'(\cs.*r='^Co3XeaP,4fC]Jga]@T0eB'A$\H&;7>)kS%gH7h%]8!5$]66'jRCf*e@Ed_C;As]
%KP;HG4b!0^8Dkpb$(E7)-P]7:W:truQqVa=p4H1;1ruJhT?99YqT^)[jOn+`J'*mjbRSTT#Z$0iI"KTloKcct/93jG=?tSj-cQ5a
%=/S*KJlI+8.2Zr!o>J$*@I(c%!T2Hm4[Q@jIdHKF#A0<6!54l@j1"M8e1B\DaXL-.#R%$egOhpj<D/TFCY@>eAXPOt5tbi.Pn%P/
%5<:8oUa+:]+BUq,?>pZp$h@#$b?#]^\K0)=?RM3Beur@1EF%(Z)dVN>1-(3&FDGR]k)uGoTi$eJ>6E*PGA'/kOF"`3'l@"lMNhsI
%*Z2Z.Dc'-B/>/Q#8FEpn;\2(O%M&Ij,:)3L3"8@KXgCXe46a@VVH/O`k3Z[3n7YE]cn(_Ci%+FGJ?3j@:D#gLpq0"&K+31=7Z!@9
%qXNC@p_t*;.q.'U$,HelW<ralp>+,`9q3n+Zs3AB'[\5Wh;/Sa-mm*abrr9OW;NV=kSf#GaMY1oiiB)RTkIN_][WA-/93P%/K1_a
%qoU,@6qBJhJ\"g,ll#^XA;CU_?j>o\][N`["p4Y/8^*,=?:d!u5`c`.H>1XXOqWMCqP"qP`51i;q4p]h\\7cU@eH6!.HET`hANc/
%h'-,Y-_oUs;ZO&4G%i26;'l_[7%C-`f2BlO`b\Kg6W]A0,5pT=''82;KHC7Bdqj=Pi"pXNK$>rc99,m3U.d$RLo[@Sn\WN"))iZn
%S/F+DH]XTN36.mhg@X].;aQK;+^1bA^Of1-fAq(;5jl#3eBbkb5[GH%QlEoGYIY>ed.f,E:C[au`6B'&*K+qokaMV*PQskdZc0Z?
%H49e1.b?r:V0^+dT^:J[c8#^@gs*^F?FgHaRP@REWC6rfF*ocDr6F`,1kpqGcl;tiD!F^0?;5?B9AnTp0mftiQ=R[/m-&0bDO]t0
%fW$F"L]P:lqZh<fKQd*_^8tNe7CPOsiHA9YeZQ#+qJVaA2;br\`<*uTm]:T6#de!T3pr<h!;28\n7uVid>r>Qf?$ohO@.U)FH^8O
%^_[AmN?8rM!"^:\<6?Q2\G`j/NSa_3?rQ/)AYHY@E&eIi)V0hRg"Y1M.%u9M;"&'>-Ec*UNXU+Nm2nZEZ*l!E]&9q>;IMu\<0:&3
%@Us;X!?rk>Nu`(U;5d>9L&B2loS(&bD(^ab(>rX7inmsV$i1Rqj!ss@H];`>!#7.sm4'_g5S4#F(-1UP"g(7;oJfRuHn0i""?O"q
%*1"k@LeMK^g&\#i+Ok>PCBnr'!0^.:JXQteHu-c#(+[NL:0*s#mCgN6j%t7/ph-)pks0<H+pdW#;.j@O?J;c<,a5fo5Hq5$#JO&o
%Js%8"_hbV1)$TZDHXB\4A'mp9/i];h@JdF"c.'%55DLUrrUJ/7j3P/[ObPXI(cSd87nl&fCJ_FF63necbV!kep/j%AE%\rGRL.AN
%WGZK-23'^5o]%>qi`$B%c/ju%)+8NeTgM'R?Rj68/u!&Kk%1t4];o,QD"?geQ&rOF:$Ii0.!^Z8bo@_3WtKVo;*W/12$QQi&CGY7
%/,.,pEHVb'6Zm`HFAo30%QJ:%QB,b\g0@K=g7mo"=Z*?,,ar*SrZ63,nMmSDPIk+JK;D.-H=dcFk*UOp$oG;#N^]:WL"dZ`^6sh(
%RUnY,?onRMe3CV\$+YsSfnrGI(=A\5d.+.A\QN9TEGE<;g`n]dRgC('9+-4B)=!2$33r\DfL0<JCKo#iZkRdipnBatR:p%U]M%Hj
%9&G!6&LtbC#r=6b$%'AuW2?I9ZU%S_50h`2`>nfQU1si_;hDF-E\p#Xe82PG>(``!1VL46gGSM?[+Ch!:DQV90Zu*d2;dUF&2eDa
%IU2;c`4E8$P$&l%na0B&4uGVDHNCqr#o!"EU'7m,/%`?n?jk8.;]Y,j>G8TQRMd*Mf_/X190aIcQ)qSJD\Y_jnMR)?N])snh::2;
%bQNcP;X!RB"G0V;]t6IaiWuEQ_/@+4.H3m?;BYh[WVWrr9<MJNG.eT3lG4'1JuKf[&LIcg-U1)51g<g$B+f"bdt.^2&&Eu4;H?bU
%O;,o@V!#SDWD8k[M!>\s1a$BHb0HIe(V,U"1!3u4i6c?upH7$oh*n,l)UnU(]uNqNY!+h'&4[-8kbaUGiPo>Li"l694Z52p<Qq+4
%@'n@Nd,Ms,rWqCD<`/9APSB7[Df3^aIrY,2jha#5YIUdK""UDtGhO>mb55YkAXq@?,h_NN$jYN$LEK'HI<X-1&-:lu6JFN&+1H/R
%S#02'[jSgC3)[<+(#<76@H[iO0P4/(JQH=1>BSuj`j<k0\I*K$f##*CYEI]R<"=l+9>q@A0Z1it1l'6Am\M]qfHB_=5T1d1Di%74
%pNFFfQss0&1Y2<Qf@3??ajg;EKgOK0<AScD9T=W-Q_;tN3q<mn[WKk;6maA?BK)%I#dThJ8\jJb-CK2oBbW(kVn<_VS94:Tk&H&i
%fgD=NDZ`G,qJ>CC1dTY;;\5%"LuL[Md+qZRl(@(cQKGU@OH_H1;%9NJ=#m2lI/0GAPT1DDC<b-`9`(2Sl"O%p^/Q:i[U4QL@ZbET
%#etn4Ceg\SAR_H3l*;(^*\]D:STA#2OY$]DntJP)>#\ZIf!7,?>=_NN["u&g@q1q#HYF>cia[eW@OPs$b$<WB7<a:WZIXPj(6KJg
%Ttg08/\!M[AXClShF88,*Eb^]0f$MsLc0#Yais-9D`;7i*9o\2,brE9s4^>aq`(>"q<;f5jm>E-;qeF:R^.Jp[&.Zt/?pWmgFc<l
%qYp*IVH/mB9lJ2OY7R50JS-E,.F`R1jHOk\V)dY^=,9VRE-Ri:PS/o;a\I-Y'tVkULce=Tb58A=T!EntUo/%e$LMO5I@_cLAHQ#4
%:YEMenl'=sStnR["kD')W,1B!"fb"%:QqGTZ1^!`lHAKN,1Mt2Mc?W.Y8>;Wft\=`<&S]L&G>/X+se]X\3PqoqleA@^:[bs7cjRb
%W)7j?'lm83E1S-Djn1GrlHAK^MGuG%O<g*@GXRb<5?o@(FT\P@;L/9WZ;`[MO=lfJ\3QG(q_(dCo)8liWN\U_:$!HL&?#*u/(CP7
%i!O`Z)n8/*MYf%=W3V!G'WShE4GbP*In6?W5<L,fjWCX%WNq(*A?'J($CrXb\4!:<#-Le&Z@NCZWjr'9XX`eS5cfk?02\dUJLff]
%Cu>Z6.N5fbYf[0Q:opsR.jV1B1qH)]ap'I0Xn)HA<3'in&_SZ6n;(u4IlL04MYf&(Y-NU/UoS=i!pqK+^HfGhq_(gMZ@NDEX1\H>
%r@/br6GSH_/lAjYJL`"ICu>@(/+:5>`6&:e:pHaG$Y6?Or<aPq)n8/Sb538WZJ'brPa1uMTk-Xp=,:")rtT9L2XlNmeLdDkB;P%S
%"bKcui&!kQJ,K^G.iYubdq\Eqo0f]si!NI7)gFd%HM<3`V/''5T?\"V;Od25AZI+%:Qr6`f?_pSZ@PNaXo-'Ol;fi_T"L<tS>'rp
%SYld!I=FFTiJIibPIU2O.l=DHi&m.fgE)lYEqTCoa^"cG:Xckc"6Ttrh7u$C=5J=YeCBV0T%;F$S0iFPj.E5mob9G_mck#%e%;o:
%7g-$n_]t%?s5BR1eUP*,H&Y&D&\[`GO/QC`LXTe;?<,>#]m@LZ:\a2Zc;VH'catQQok&ACqoV-.+ask*iK!cbC=N"=Y?%(*Vgf0O
%l#-i8_gIaOf(Yd`JbB!)Bjeh?]-Dp8hfhj"lTa0g_>4^^7gEfGr14JN:A[1#CcLh>P/>3JGI4UR_`]_jr8BIi//u)c%dO>Ee&/JB
%7g-*p_]t%@ro"2U//rh%'?c$f,GNgMJY&]qI=$Q/6PdlBYL(6L1iT$?QGJD.Pd(^ZS0s;=I-*P./7VY?Lh$C=Hg4`4i<jk3j)Xnd
%Z2VXd!a.F#KgO?Fb<$>>g)n_`q@BK\A9n1i.To8Un&])\s#j.*lNm-.6<T)ZcVqtICk&$UQ47)lQ$)BQ1pJV#^HaBoqlc+)Z@VW>
%Z:nS1+dcgC="%[O^cP=Ib6B$8bjl9GLh<'E]VCp<`q#^;Q@HD22]K<[42P/"iB65'ZcqT(B:7pH:HRl)qg%1(2XlNKet@TcjKet@
%>bRcIlJao,/K8q&5ta>]!tnelcdL22p.%NXnV;%^BPi6ZN7K\QVs%drZ?)=neek+PPdG8b&Lf=3E.sUD^oRp^[(QDG2(]cW6;D;Q
%ghD(<_XT5ie/HVV:Jkn`i-CJh652*"eFNSh7(#F>Su8SGaRh;l/apG>=3LKE&Cq'2pFKl-n%V1mb6G,ree5'4Kt,]In^H!qKY(S7
%Y;KYcT"^M?\3OHf3eHr;[VXkYM(S1F5\!Ia'd?l6Ln(?JFcjg0R4\GXL!H"W2cg9%ft_l*>F-G&,dlai(MIZ2rtT!I1iS<*p>ts#
%OPB=:O6CHVLFWM:0<]kVicb:Z>E[a-f8DJpB](&]XoE@3lBVlA,.kf9*n&m8%p'$Tft\?F>;ku,oG2q$8:/NES0u&4m>n2anV9cu
%[qst0r@Jq48:^"jgf*/%%p);@ft[b0>i,L:#a^$c5_X"NBeirKs,[_WJ%.h$b6B"aikk\V'\@go7>o?9*t[J\rdYoRp+,46Cu>@X
%0(+3[ONTjNTZFP>1eB=gImfLD5<L.4`?-.!jn]L3A@]/+e)gE:k6Z4_^_P#IUOgI]\c0JeD(b4:Li`NMe'tq@rsF$()n8/*bPNq(
%ki2Ss'Y=4[=V>#sI"b%V%9t()AHQ#4FO@l=10radJPMR+T-r.-m11XgrJ/jt]"J%EXY0(W6EJ?7/l:lnr_)=`Cu@Fh/oNsMYfke)
%;!bcEo-Cqai&o8eDa-t'Mu,/(mIKrYA@oMS$Jhj(3)@'-#-Lej\q.2`]>"4pm4N=l5eJ$Xi&(,0#LIbeh0=N5qHa-[3<EN2j#dLK
%)`UR/lhf#Wn@F1W7(f+JkG`]9.6L8Cl]q6-*A8AA6HI=SY#+\80=iOmjW>Pko(!;mLj?[`SttNAmX7mVlT^o:kI"Z:R\6#A?_HTl
%^Z\mb?JFp_HMrU\U0cOq;>'brkK/&'^a$Esqh4]s]lZR_;>0hspS>LmLHF3rs5BQZQ[^tjh<WhAPP;A6/+gMmi&lQD)n85nb6C_*
%q!tBULrPd2\3f9B;qu(:?f$9dba/c$U@[KOq%9;Rs)=.Lf4XpNUqVjYgsc*\Y&U&cQQ_\'e@rTq!kBuQ^I%B.iN'9f^Q+6.;uH1s
%=%Ien^_N;F2K4B6QdNu,<538-!nhM1?Vf,K3jsF-n<XShT_rrbr&j3s)n863lV,-?ia8T5c;Xa4HK@!Z0,$HLk^V:$"TmVKf4u)9
%\Gm0J0H57%"&/S,,%*6HKaRV:obn]%n%V0or:9\##_Df,k9tn,kljuCQe-#[^b;m@_LHt>.rb@W2h1S"s8,SOQ&$IU?[hhli3N-M
%:FJ(lV;iZ2NHXY].!e!^H2[qqLV5&4hr@:P>a"fl*T-adrqWJL#s9_f+Id]F(RWAS@`#cE_BmhP\;k!jrP=hhJM.8smXnR?nHZ?F
%5CNn9iT\DP`Qp]g&,<<nS,W)=r9O5(h#s9B=8X8#fb-jHWET&1W8is>K^\F9?^_e%Vr2IIc)4\Z*l%]:00f$^I/>n/4o%@Wps^Pe
%odg!1s%7h+:%K\J+k(n63V_rL2LMMdJNt1Ke3CGH;TdH<'`!0P5B:ajr!`M@ZVTO\SpHF3IZJtGhZJDJ/dCaH)QI.\<AJ'P5MN9d
%*a.9@:r5f.MAJE0KD1B)r$+'L*^,,BpCH4IS:6F3IZ8h5?NYs"5uq<6*rI>.9h2Qu<1lsEZ<M;srbeM&<KbRF*lb<6qK,"-mXP#P
%DZ,Wf1]D@U8`S[Vchc8^qUb34?/Kf%PWis^cThAr,%3(/p./0VhR/LJk-,+194Gt)mu'aIn^0L&h5MqD3$9r3[`s__P+X(T_m[4`
%dbF66O:Vf#5-h-E&t!#4?1![?0mVPD[4I/+9hFWGf5sr862l-V=*H*4M;N$fFmS4u)>sWJVSnQ41;:U0J5@[N_O-k_^gk]PTZ^(s
%i820Y,McE^T%Wa+Dc1*=K>&PI9'$nLI3>W@1>1,?_1ps"iu^A^eJMEBlG-D(h<3`o+eYY"T%A0V@@*piJM9ElRbrOX73ZNY<TXcB
%T/95abr=@f.&oiTlhG?NU%/54.E,P]d=D-@7M5Gog\,tAQCTX>gu$O]:nD)!"YNaKNdKWe4C$\YXmAjeS`+Q[R4oYAB@?kL1$,:c
%)imI@\/L_)[.VsIK?>VfLTd_39EJFL%a9OKgLJ<B)FE`=FA`NL!b)#S;)/"^ZbTNK9$fE&J:cE*6&rPd"/G,]6`2L>l2mIW"F&dI
%6^n)NJ7BR;`8lpqb^EI(4!Va;%G`aL,(jcT5G$)>HSpUF_+Qgn"SR\2!-c*(H$-B4mZ+i,nJW%US`ujqFE88m2QACjQrKb/afdKe
%ru9ii.9Z_L*&HI=ncO+_Ljp2VY;pr>"IYjn#@.C;6XGG06BgLZiZgYrEM6_j%4S`/YeE*N>XL>ur%!ZK[iG%W@pe<Wb\0RG@P7.7
%D!$p&<esV=9<0BHC6ooJ$bCe[q,HbN_"Qq.Q=;]*R'cY,'UtiVTL*)Y?`hdKA/8n[oK\3_Lp%?Zo%BOX1_cH@1t<,T,"nY?AsB5:
%Q`8FOJ>=a9AN!QHHQYMcMDP&Ya=>1i&[TRA#1k'oE1'/4A/AH\122J\Dh/'>iJ2I",7p2l5Hn<,M/uE9rcHIeESjHWD7jS,lJ0f;
%XD/k1lM`j$Sk;7eOfDf?])_is4-7oB2F`n-m/ukjW^=F%9N[p5'4796nOBRST0QV1[D9)I$b*&?!G(%tE*r\,#9ntp)+qQcj;MdL
%`J'NZ8;@R*:`tM--5/^0]'bKA`!mML-)b3'Tl^@'WD\oRQ[Q,hHe3q012\5AP_HuU1uPWtfG?hd^0Bg8bhn=M(W>Pa$[(QX<TMsq
%dK*rQ!c<o#\D.lpFYiIfhdpIhLpi[!R;@\dGc-b[/7oe7?BI*`]M]0g&=gkiAp21V*;tVtb[:tda]s__%hl6XLt3VG?s>>?&R"_n
%X>cH4iO!kdKlh*'a+[PU9QdhNM#=n7F+M'_Ml*Wn*OoK?Gps[?*Pe\9c);?:APqj3>+@\kbPj=bnr'?9[8msHV+q!H5PXi24:FGr
%8,.jP*>7N%YIGioi4N"*V#.K9#qpbY0ejs5]PGAk]AT4Srq#Q7hp#j?KlDPM0$;B'2(-A!N&,@/8(DlT`IO9GXpQ,XiiID&4m/ud
%@"$%'1"PQibOY4Ma_<JimC_2j"thkf0<Z0tQ^?<^cASB[:Ur-5QC`;.?=#:r0Lf3;F^bc&5O6>Yf:R+pN6?^rQ/T^.3A^$=ZgJ6/
%pB?>,U\h\s@iXKBVoDKJH+1dIfB4-C*s2ek%_5k7"8t8o-RFRC)Fn<!eL9]+O[<$j#iA9Y?Ys!bYfpU8qhe%-h*]W.PCeVDS!_&t
%>:;SZDWQK?VIkg7K4!TA8-0YXN@es08oQ5;_=)u-0#NHIVeM3loVg8T3A_OP#0C'/UA?3/*ce28icg#_",&)>JUG@4>3fC'8\,oW
%+O/lbI7[KAhQ:(%9m>OS`1WZ$P>!\$PhW-%a[/(pZpqDU/bF@Q$b*k@Q\Jj%J;G&Oc7(#L!S::EGh.,2SE.ET/[ZIZA`+>)l"=:J
%Ieso)m/'[^h^p5$gWLXGC9/)s(dnsfd#XhG;Ut6E#M^3NST]]5VI<7]gK,^6[raGl+0:X;qiUYKckAT>.F6;92%'Dp4Vl`lF6H^O
%O!X@a%H(be'GU&^UU(Ugd)-#H>XLjA=<QHehM]b/?[U^+/rm;d(KZL@@'P'[JBIG<&Fl=.\TdQN*`L*Eco3fbE1:JC`itS/3ssIq
%O@Wi'Lj`UV`#L!gV'IZC`!-CS:^?u..5dV=[+F[g/-Og2rV$1gIV@O45QCAfrR4"/,cYR88[J,"f:$d0%0s)2QtStq:Ok9Y,^c*n
%,K(Ei*@8uK'SD9>"#Gk*1O(&Ad"XlA\_iG!!pjCp.#iI^cs2D`*nqmk%O)=YZ5_:hdsht.?MP@UK'-`qgZ844'lYuC`<Xh/6q'0f
%JrqN:,<YBhU7RaTI%]DAe)En_:e;'8/u7lRpZ@K)r;ZQVGK8;(EP'N2-q!LgJ,HhT-B\OH42*oi*+l1$j=Ep*IrXsZlBTl0n(FZO
%'ii.@(5>'/?g:#&2f4$BO\pjgO5N5bpCR'8s2E%RYlKTpIZ8hG?\@[Z\T*ebOgrk*H!SSU.>^cU2MniiL(iSh*aC20r3"Qlq)oc`
%"TRuX@m%9r00dNb^W=0h0*68A';*Mp24\)j2QPf\-Es2\;@4APej%*LRd+rKbhoo+A)[$?*l<DOmP3_\V]Op&?f^+m(ElM/G\Br:
%#Mp[$fQD2cm7"@P[W%ap-L`+)WQEq5QejUr"4sWpO$HF1B-4u,5P5kCr>P\_^;`+)26ao"Y9"Q?7+_ZL>'U?lo+^_A2UgiQM@65q
%?N]J%D7pj`I.salrU#5Zai?j)ZVNu04sqKrb'NCIB!r`F_3p4(1NDTP)q2neHi;Yh1.6;Eqc;VAG&)5M^=s50,UFL;Dg!(F)DR[X
%q16B4."e?E8;"!;!3<K<;Flke^(4CqYM7+^1dBmb'rN4A+GCJX1$j[lhW-76l)+koanUd-)C^[!m2A_43"rbX5<WcRSR1Km*3\Kd
%HC^C=65D<K01L^g)1iiiJpnL`I3Bq(VGD>\Z*8-!XQ^66IBV8[2-1YIol:+B=X8_'7;B\dB!%Krgk*,'9SQ9Q*^itr:DaH#.6@b2
%9rfAkm9YGCQ_h_W+X).`(/Q@N(p]TYWCI_dPI'"T%i/Z.i>g=XC\>AY,7cT&ml%JrIHfK0A+kiX@W<K?DCLN2@0S0UK!3%>@C<V+
%"GkHh55ddJ+5H6E6:$5L&llWj241>c-;cgE_`QESEhClt<0rfm]i[)_6(@?9\^Z&.hpLU=U_q6,%0I?6"N)P]Q[>;9rtP.+eT:pV
%?:nF03g]tTgpQur[uXD=TC6r+hf?1C)S<]M+Z0E]9YKa-`/J6."ck0d[Bg'?0>ah29Fk<TYM3PK>k$pgSX1$jh8JU)R^X/="ZXFl
%RnbrQ)3_NZ+_&EX(KiDFm&$`o^1m8r%J&-q^LN@U6qP5rP(-Q:OhNTi\cifDhTScS<GkItF^Kg^5]DN=rN=QB3fWq/GJ%_(2@3tP
%96%#H0ZO`U1>_5l!jBbGJ]DtYQlXlr%Y02f76Ba^X7(1XN7"8)7'I.oU6`B/5_?5p7qY2e+\Vg!.tXQ3Ze9WWl^JH!&,E+.NIGiM
%8VbM5fS>c)p6qNJ1M#TfkjKq+Qa03JPt`eqbhaq0o;L2`]"MUeIsumClJIi3>`ihL]3R`1#YC:.4l#>_!%<=NJD'2BQQXBsRDfD*
%^=28ViH%3?B9Zh,4NI",luQLWhF*#neTo_B)F,4IH%:u]LP'%"\34Nt]jCH%[dSIi=AZDL,L[-6*ql%-\X(E9FpnN-;ppf]3g&e%
%!Y&R;8@e%PU[RjOn5PHiddt/tTbodAfY[CqHt;K&5YS;I93Wc"gd3"sF;c3F-l7&^B^XW&Vp@m]n)*Z4do*09?'-1O)FCN+l7:0V
%iB1[O+)iiba-aR.g$(V*.73pD7c3NS5?rd&Ns0d+(,Z-F"k0*WDSZZSh4U<ArYh$3.D()rFU_:g-@dNC+11l>[g1FJSj2a__[5gB
%@n9i)f^%7#B;?r=6l_Og-_/e+2Ztip96uV7HL1Muhs'dWq0PRg<!n$f+\Us:e`4@H@_2dXQoF`?94iljY<g=6D'!YoB'I3O)Z@oe
%K/76A*g[Bl$d5<iY&g5fBf6?Io]ieB9HiW59CRM'AlW0Y#)P286)3oAqUc:l_f`gh(#UDNM=!,/EqG[7lq)$RP#^%M#A>pCQ.TrP
%enUAViHK_-kW?IAk0%bsJ%jMp38Y;cVYgLB]rgt%2/<V:Bb-W+XY,E]@2$7950'/]>CEF(pr2\]mc(?P9F.(/@f\Pg`/7=5A#A[u
%Ugu_%<jdSla_6t'(0'mLD16Gj[h24SPPj<-SW"krK6]o$4>q9T\2pWt6#[mk>7'iDq^+P=ceJ;V<D&D?F'f$WPES-;)sS+>cm1'@
%f56s[PbM=O<ULh)csHa-2f[l-s5r4nVn^-!rR67!fTPiVXC"J;[nm%AnZVuYYl0na5aZrqTDt8Fdsq;[puDBBlr+843u)GQ*(6N&
%&XmVMp&kTS[E=t@.O2eLm)[/o*<69]<!t;^KF7oR-%:j_i?eW&fkg1TB+jd90+r*b1((>u=WQO:X,`cY*&CTVED)<&PQ1qdJq.Ju
%J\b<g0cY!,iqTr2g1RX<!i.?T9;'iQ<T@T7&`&4ASOlb8=Vdu`Dn=B.aPE=&.9/BmUNjE#TE6+P.-Ca2DX@dXRWO"bCps2.6doEN
%aiOc0m`ut]#(;nF0*dKC,RT(8<[b\;a8lk$N993cb(%qilji>TCLkdA&/p7a"QPtOA=Nf%>8CW'n<FF9MnfP<C?^>:CeX"di.1u@
%>$[gSG"^co`=n8)l.1FBg%>$F$Te.71IfNU=@.+%8+p;T9RqUbb8-^P>]0UscRnE]+dC(E.m+JV\r"".Ka^EjO`J6/$<Iael4I%M
%3(u7TlU0M9745+&3?1,40W?VcZ'Fi.C0EQS*Z*kXF^&g*%GV`:jl:qN]QDJbXb]eZX+\j#S)ANuN@Hbf!&j9tVR.($5h(+M$8d/>
%Xeq=[G6r:K#*;h^UR%qN'2c&/d._.OO."(U<D<qQ;c34#8d%\nWWXk\o`Y&Zj0ZF%5rlNYp_?Y,^!&FNH[Ql*Der:IF?e>@R[AWk
%SL"kumOg;]lTH_d>"H5tP_I5P_j8o05T,C`Il$7AeYKigNR0N`Kt(k$ef#fk?nPj@lg_%<m\f2cG29qm*W5]!!,;hjfJOIXnKen8
%MXl[_mZeLT>51t[Z?]G93Q\F1,1:2Lmp2t9Rft6dQ(8Wm<IKhH)C$;=9S:H=4j&B`p^J<-HG)b<#)a-TX76X.a/BILiB$;(5_KAd
%6ij\Ei+GT?@g8ELI<b,Y3JNscg_Ut*_<itM`4h.)a_dkhRd+%[0$nriE8;=[92uKf=<^<6H`2#DABfhe_9;`&EQ(YkC'(?Rkrp8!
%OciV\k`H+gb%'[i<oj?qNN8dp5;%Ar<IN?]LCU>nm\K^%.>j9^r+bT+/dXqBjVF\6p83.:V.Aq$Seb.NAi>?@EN4N,MTIOg7G_-&
%_7Hb<RkftuLMA`B#nL3u?/6tZA$H[(G'Y.%[E>5l9Vmg+jO@@pB9]-a^e50sW(V_T"P#[G;ImOt;@Pinh!SW@e;5HN8Bqf)]$N"5
%@R9b&$I'8`Fu.6U-(*b&_tt8M_`mXp5Bu!N!":Y9:A*+Dp$pH;U1MFeJlJ9A5gWh1kmQK`]5&ROU0#\C12AK`5V:`RA<R5^B(@#Z
%^ebc5<Bi;!1r(D.jV?4h8l[!k6fkU<3sVVD$JKJpNSZnG#:H7>N$G,!l8bE]brlOF3DqSW$^"N'L?c,W-%T(R8&[Bt*8`[MYs$+;
%gG2g^^i0iadORiP(s'`t-I+t\.Ir2,qC4KS+B6LYIX9N#LN[oBYs>]c4qm!ci/dJK%^L=W$;=(;-C9`^JUZ%7q!-d5BT4QF7<R<]
%!YLB$6@^h%*4#!/q-"5*Fn!q&ZV7HiKD)9?rNW8^GWqDuUd8#WM'=l3q6^DOIVs/J*@[4iJ8,5<69I=iUjS9W@tD#0fi[B*d>;Zn
%#-.2>U4F&4Fe?`$n5M@q4$c#\'Qo!AO29QA`Aq%eD5'qb8`UN.m+$!mYqXF!F$Z4f+-Yk:<>SE]V)Hrr9C)kZ:p.1:s,pagQ'^%2
%OJXSr'BFS2B04t3."oe96;Ja8`W8mbM(A7AArKBuX]X(phr[#,B.LO<mn%Nn+T-ulBoV_)c69AiG3c\;i*(O.,tgHo]lq&CcY(4`
%qc;V=G"QKKNW^\p9+SX@PkP'pB$9'Oe!4,CnOHVi0hmHH-W-:%R2@-P*]3_"YIE6Ko>r$fPY.#Ko85ac(kg4f'Tl8L9MuK=-)!Sc
%0IJ"gL/21oa*j`O%2"[j4J.-hMGf!IW'4X8(S5%21ed!MqU$Q?V=Xk;\?lK_A&bfS;CIsj[J?;?r`a.'V!j-#,:d4lPE:#'S7%#9
%&b/`jq6i.IP',]:h,s@2Go@XsT[e8`I>k,uoFN03FK6S@eZ=3G9Yhd]/XUP%Ur)N,l3UQ%Z[3/fBo7%$aO^ZV^=Vsdk<?P]n&Wi,
%OBZGMY56*DE#nX0\G[2V$UI$)%HBBfln5f0_9E4%^=R-c3n#NRQgZ!C.u$dgK<,V"aC$G=@HeH*W\#.aAE$EL7To:.`G1Bn>(--"
%jtS=!@ucij.Po-.jUrc)_2(:@&pj-`*0s]glZU$(jW@B&H"#Y!>(*U3AO!%o48o#^ji"Qm_2%#[KR!@@2sWDtCY%T5S^SYD[aZ9&
%^]SA8gpd+I6QBb%mHIMlJZ#l("/AfsGq]\`jX+oU9\pL<jj5BccWC"(nXUk-q4Q:4qRr5*)gsahIeWEB./AYQ`h;NK:A%h8E=YWP
%eWsq.WT9A<"$Lks=csYNeDe*$E6O@=*@\N:Ym1'8S$AlAnlfH.b,qDc3KAtO?VTJJebB]fm<a"kkJ#@<\m:AlH[C(MIf&9:?h&%'
%>TaT6o/0pUO>nM920/A2&f;mE.p8m'/JsZ=RsarJ%Yli'4a$#N/+GHPbqrE^<8=V5=WR)r0!/a4V'$aY)0QrLW73Kd(2QY<XhNEU
%"t8*P47(e85MfZoUi&6d#S^0'fWQlq%BstHGcY$%>QC:%rtu(FM0Imleb:,[Dqj6.Hj?%8]]%3\E(mKt@\Pl!2<J;W*>"93P9`G$
%%FHlo86^JnpT;0ami?ckVdD[,o;&OY`-/tp5T!P%K&%'#Upi*B2oOjK?2u1iH?q_Rb4")4pDN,Mp[<A$H]-\4B&jV'U6^?>mZ:/I
%p\DoTT>mj^]?CC7IIY)MWknFUH[Ng&4>?3kNIr$?Z.*7u09Lbis-eWeL\]td!V$H3iI3aD%6?.\a,]mVC@p>[B_B!Q(PWGmVn*92
%/nQg##d!aA:nFTq#BE`KrWl:6qWc9eOMgV&dJ%rMZ-GR^%(U`ZkskZ;`Cqo6bAKO[P"T'p2I-q^eB]F,qH!o!,/,^8b_%h2I>GeQ
%r!qnQhckpe+B(T&0&0)ZkEBFq9ZrG;k:6VpRTZU$FB>I__b>`5pT;0amgecadk?2L<g!bX#+bN'X_C9<d6)Z\R-^+JRjZCc"?J#A
%kgT\rp\o$)mln[p)E],+&E7(*hFikA'rqi93$DNr*e3<!9Qu3Hht3mAdS'TVZL?"J4_jZ!qi06Bhk#mOI.Qn4lk4DOmt+3s0fGT4
%)4kD]R&P$T\k^9P^REhLngWK7c'=]`qc;U&N8oHZ]S">M\g#jn3)FgG&"RA&3Z1\GoJ?G=jrh'lPGZUC:5IP=]]ZHBG<:5C+J')f
%gqA%MFG^CM$F^A%QcO[De^U\t(/bB*?Oijub0$;1bJK5-IA?6p`D!g,m9l)_ad_:Z&.VY=:7Pabf*,^t0IBcQAe,aj?RjZS$kH4G
%4_XN%INL(E)/#"1*4ItQ@)4+5LlVR6%"`>b;(tnPd%ge_fMF^EF4/&7*"OT^c$c)M5/]0ak0n*0-`3#@5`O_iX4JfaMMWWk:(qab
%bYFA(fDZPP;a[^^1A=YHn+M*go__ki04up3^fs[IIZKB5<`Vn@/3qUGUu%"bYDg.Qqj.Y7ZF]3bX7%@DC>PT_$r;C4s7:0F0DBD4
%QRL!5,:J^3fWugXmq!=h7$UCFRu(mcAV.]3(!UOjABd;m\)`0O8u[DOG>Ojo\.n"XBjZSGd%"N-**X*Z/n3[/od-Xg3b+Z_KA1".
%%,#q;(ZU_EFNsiTO_CO]c.tbdQirSX7t12hs*9e;b'nj,m&F-=C3%ou1`\iW!07aWR,Q7p/)">3E&P2@GMK\(_&7#Rj/Bp%>X$hq
%PlDbTZ5ZfJ*+jJ6HXDhi$5*uf>2-._Ic'>opDU8@jnsZ<gS3i8LL6#\KReq!h.Gdg2b0ZCKr'hc2O@"l2u1:Hp1XLUgRh@2f^(i_
%PIk^E/kd[6Ulc$O"\KORqaa2FhR30q>onn-,+BH)1(s_(&P/tN9HZB]GE9=/V'\esh]h?1d-:j[];OQi@F:$lVGSfp,$&)g`?C)W
%aPcXCFaB,(KXWp/6ch(_T[f)m@ROc-JfO/;>.I213.?CqY8A'P[Lr#GYsKMP';ijM%g*"W[JIeF6bccBE49Y4:DEm1:fHjid,h11
%OCpaT!l;YUPLr9KXFus%9`po_SR3Wo:!K61_[%;gDH_NJi6]bM#"q]1iab\MC16?jQ9M(f9&RXMFI8:5QmnP)d-MAYFl3',Kbe"S
%ecg$JZj%7Lbma"o6X<ga/,#+$9per+rDmjVH6Ime=`fW8`e%&2!Ejibmf@]C(^@an@\bYH7gYh!JcbB=,ReZ)-X]c9TM7-/&p4F?
%=7Xgqk(ub!OkrF@&@mC?45s5U.=hB?<KbE#&ShFt&$rd/%Zg$s@<O;#C9m:X:m44O2GXh*V-/Q`Ce,u-,)JPbre!0+_4UT[Hj,WA
%'*1@#^bd_"K;.Or)Ccm\n^/L/!a]9R":q\$q*i6FaTMb(9p78nJXl7nZE9(mX.6pa-tt$.j0]D`@+G<miiS9cEb!LORXfVnAmZr<
%\sS_]AJRYm;lQo,[5*I&;.I1PL'?u^R6`s\=e1B2VZR:r"4c+7\9EE"&r6Ro+86Je+9aP)nr$d5!CIp<9+\5H8na9[#.EGn%/t"X
%GL;Mg,IA.0`\.g3N$Y_X#E`;/[m>7D)m$uIR>d"XW-#oLhPd]rX,=`I+jfB2pZ&=7&>6$PJYJ9Vo^m\N9cg>\FKHqUfV@5d[4p>H
%GaD9<IZr/^.<B<-8sqK,*5'V!Kb>11&h%fRmO5qA8VgA0;;lmPVEV?$,oEu\9;iaLW4s#MPW%]8k+n*D1[HAW9dWVQqBbL+F6CBC
%e6lr<9uA@p,Tgd"]T_H][m9]l&N/Zug#CjWX:f03TOsV,09qRhZ,il$#iCem.m3Cd'-[9R!cj(%Rsg_G=6g0)LaPZ-@\RK.hOb6p
%#qFXh0i3TQ-OUJu8oST;VJBiiWF$Ca\XWU@\jUt!)UDm1-XM&F"gr(K*Nka!18#F>*W9lI#+`\ZS4.#s5kMO&b,J5eN@;\'2R0d/
%L7A>16'6>k/Je7bep03<USYPnb?*Q.q)+Q=el.%sGK5pIh;?i9s8Ggonaf!Fq*4gBJ,?]5r4E"$^]0pUU'Y(LqMuVio'%"0(ro/@
%[ndaYci<<,^\\t'5<f+dKBn$c:]Kq[5Q(J0pZ]HgoJ`uRDqSHXMuVO-J+Il6T=3A3lJjPTlkVNElsG2I\bK)5gp*[sF/2Ym#:iPm
%1`dLIXV)lhM!:_r<lG5^%a.N^K6<n9\\"UVle0Uo)<PJqEQB!Df-Zl/p1bK";NK:`b[=.RnGpOUk*1/3!iAL4@d"Na#*jV.!mPW(
%^%;C&q[oL`IVaW"5UU7_"!P^44O.PokM8s?8"UF!YCt,9l]@d$e-^s,i,T79eZlmUc0+5D^9qGc4k@9?K4uB?W#Zgi;<8tH:oK_t
%O#KOGG)O4RUZm=J`LM+,)n'5s$gXZV"irq;jM2])"R6cJ6Q6ZX%1Mt\U-WX&Q)f4I@&S+l;sloe#<6NJD((_Ia`XKj`B9Y>5_KVs
%W5IfX(fM9MpJ%:@3;FT?)*^<J!<o[$;4F:1r<rF*R94^Gm0K1T5Q6\<-P]:)4"0.?B("=BiD8r9ac$:&;XF)6j4!#]*J99--&4-N
%A_ZpiMr`jl1<%!2YeiTk@iXrNrR0OoB[C`mR"!N"T?\R1m+A6.l\TmcE_553d!/TDBZ,W4W4<u7R#.]I3R7H4gP#/SW%l`mqP+;9
%Bq&3@N8humf_n_kOo`S<[Tj*b.I\D<a)74FVsY@'WO9s.LDgG>h\[`ZYt>*3%#'Pj\;Y`MrdI9EX3gMD&E5[.n@'l-'0_QKXe@jF
%UN29Q@8k/G=QY?V6SmlJ@Ddqgr"iqX64Dd=8$2i@E=>lBN9\^po2oo=aQ1kK@qCm5F,^DT:uL?W5^?oa(L2O7`#h>h5jsD1>fS)[
%`s)mc)2mI;*Kukm:4VA;&AuK!S[ULRXH!]^B:>9%-9sT\C(B!W08#UIpVQ$H++u6I)D-Di:@L-e--1QU"3"kC@1;Vpa#(tAa&)P)
%pEQF9*q>[/d0gFPI)R[Kc*%W?B/]@k*1mth+NCZM$j+LPE=X"'J-^;PNmY@Jh[MmbO^B7NH*#ig'1E'n%LKMsQo6%UXrcp`Qc=6b
%,=M<RCuK>nNgi'7!=FHLG?;ljco#8qZoZS*KtdBArsUN_*GP8bOs*e$gBM@QcM?^EbpEH/W,u(6>?3lp3d_"R34No%J77$'"j(d9
%7E5an`I4Kj]2Y\U4<CYo_f6_*V7&+KM`6fbU,77U%4f9*,u5"="L1;8>aH>HEl>HCmB-E`RopMuP\P]:MbArh`tm7b$7';Jk;Rqq
%GRu#thPjE`jup^&*b^WT?>45E(u4,!46Fr?]4!`;qcAEC?l$:Be#N)+o+duTdkS!G?fmDS?j<QsL)e&?[<O;brjKU9lq6UalN<1A
%FH*8\GF7(#NmJ2Y"B<WZ+kV/.#fIhliI3W=@rrFOp;[2$/KCO4FRCp)<8K!hq;s\q4_8#7Ws'Jo2OiC(>+"$@"eht[Wt2U2?j_&V
%MPVCHjL'I_%Br'CSN`pY;2o`AQ;-\[mr*N5S4gn1.)*HJW,6b>A`rajVe_haMGWKVC[CVu35sYBWUS/_88-ilC6kpE2)]554kura
%XP*G%:_F13E<_#G(MPiMCPj@*d#u.)h"IVI#40[K+3UJ3?K?pIf,Uh4kbi[$a%:R2FaqHC_Mo:sp<iNHHU/bt]>'OcQbFN3'u[`J
%XK[Dla#]20CAetR(hqYG.g5U-=$e-MAEu2$e)YF)Hs>(qatMri!SpV<"^^1uQZiP5U1,k5[`Pjc!uUJFT^^o"3'-A,;+$0i[4Nnp
%:3/@jEs:I,?MN0G-7;Rn"8`btdY8a%"s6QI+sPh8#k2]^,TCn%/1CJU?3S*T'uDfmS!Pf_C9`1@@bUb`bRIU*REEhRmqt-fLT?J>
%^>AFZ5?rUHqm5T!/q(52i=A_f6+H^K.YL#K]ajQ[+0@qIjk7%tXZTdHfZLPd&R0Of,4Q2iX\$1tdAk,L4Lm*7eNUT#nS:<lRlDU`
%?(Gs)KCoPGmHG>m(I)0"3+edgV/Yt2lP-LM\5M8rc`U9Xp>Kb?5<QVciSoVCf("N.f.:2'E7MfISmJmFnUm*b*IMnpqCV)fmp<Sk
%"R4QgO9Fh+0gUW.W<g^$hAMBBf(>,NggS-0+:Q.B[rus:1cR@4P\/t[LOu9IMD]L$`7ijEBEf]5Tq-$h<l"=N(r1bVrFU0Bqql.D
%C.8ep!,0&h5BI'!"$LX'3u0)l48<Eqa;eijWTkq(NcN>lY(=X<a=2+gmPrMe6:;k@XNGZ!@@Z1T2uk='Suh?Ao[/_I9SoP^$tA<i
%S2SD5"k*ZWo,;8.%ba@BX.`$*%UZ+^q<%>j#qr@eJBLZ.X>7/Z%m:Xs'!Z'.8IOl+4O?r"S'cfmSU1%8b;!1l#8Q7B2hi.kT["\\
%'MiONJZ:j`:rQ5<eXj-B[GLfbJR%et$NrEmrPm\J78Z'fj:8Xl7rH+K7N5V&Os54pUuB]"W)N.Jp9Ca,kG_7f>%MOMoMO6SL0Kce
%Qb*6&;,0:i.fb0"BbgC70eYJ&):ZrBh&R8?N>+cb>2O`OPZ:ke"K,m)I5gDL._m[R=H@e#_'>J_$cd#PM3M-X)loPJ;SD__]#,aT
%>>JNc8-Po"41HFmF1cAN])_#H(-U$30`&gk_#tGV4n&C0QWqGP$Ck)dmj'@/_okT"AT7F-P7_m:UisBal3YlDXc.Ibo?f3")>-RU
%%)C4$;r\6IVE]0;#T@Up%Krs$qktDCF&Y@p8WMP5+kmUU+BW[4'>iC6N(B9:Io&iI<[V%/O:g9"b-2>WrHE\dkbl]^6K-E$X7=\>
%nLbu>);AV+j/+A+;8D=pEs@!J/CPZ$NG5]q=m#6<r7DkPdj/mg"-R&C5r;5\F)Kh.l(aUF]m<E1.c#[@D13L.^c($e&;7-jU5oVG
%6/i582Ss(@T?OCjae0_=L:Nh$nnGdm$Up,,+7ZQE->SkEofdHKViQ:ANk4;3+S<^0#.mk'Nqr&Ee#m-$Y<`bLgZO^Q?l0DY+VYn[
%l#qdN:n2#eVrP7:)<2m?-b6(\.?KKT]<3aWY"p/<d%jgG->)4+bGRN>j^T&a77=QF0rVeYWKU5`%WB0"f;Spd'eY+ZKhC,(nb"&b
%j7fn!!>242q=n&s[r#kVE7R/:dg&)pno"G\l/AVO@e[o87i)MVD^=3#Zq/fa4'=q<[5&)Kc*?lm#TTDMIpGh*Ype<>'!3qO2h#+H
%$m(%)EA$aM5(345:0MhN_]5FIqg@EYCKJ6pq26/H@UrYH.=RM9ijmnEWC$G@j]4B."_WWS('(/fPjg1u2g$ZuNQ6^AmCl@<m_2&o
%/,UbUXW$/f:9F/qnmmOV`U(Q:%'s)D,8[.MMCS%aer7m1MN.cc*#)-5'Y3C`_`[YmNod8sQ]/8Dgo1*6IC(L48dt7,,,LAa_K#M=
%3eRRDe!]"pn4Y>P<h&N]+@`\5cBuoJ7??3h?jY2u;oNLkgnKC*JD6_hKkD:Y0%;^f8e3uUdB5$#oa$k=?rp414EKt!%/e%i,c:1#
%4[0,`e'r6FZMipF,)3?Km9;YrA,95+`Pom8'KWq-@%!"PQ5NObaD-u3O85qK+$ID25hoWba-3r,/Xc#PIA8R-_bfbF%tV\o8rn%p
%589")!.j(2ja3m\hue:dI2Z-/Wo)jBWYcn9?FfkR@ppj#,G54+4!!mThR4Qa4M'RW`&+UKWJR1UJ!M27p`HF&>oo:0\IQaN<*Uu?
%41hfo[)ujD\TVkDm,[lH^'@a?g`EY<H]nU5g/KYg36iauf2NIchJlR$IG:M-pY;fYLnl3V_*Wp&Yg<o5=d]$94ONAJ001>uJ/G7L
%'^A<OHZ*&f,4!Y?XltEsU4qBmNot[V*J!Iu8BHKZIIsm3kpp$V*'q+8Boh/bEGrGkJdNbRp^"*A7%b+@kB%jY,dodJA+4F>0st6.
%#iS_$0QIRE<%#*?)M!Eil(_"%\3kJ117>U`ZiSWYNsu4tQQPGt*O(2(2P;fMX#ug9U6F!<Kl7#Y4p=R[L+Y%nb6DjmU#4:<(XAKj
%3]Qgmq*4/n7mAkOo\*-X?kqE:j7Nlr"$T\r*h12q6@4!fP])1AI$S[h4%(ke"a=TQf!"c[(%"6fI@'+DU]\K+3oW<dcq!u;W+V2J
%"pW`d<ja"=\;fc;`%'<Q/KbgubOh,j&5P!JPQEnpOgCsL^Ejp\1a[qh)B2]PYl%p&BUbaf7luBd4m:A854pl-Zf'R(6:=-nG92rM
%<=C)sqMolJr/8tj*G`k$Lr"LKkSImUS&@QN3P^^(9jaI4pT\D49)V2-J#@KF"/S=dPgXC#S&9T)gF8]ad1n9ZPTBY-g\`CfVOmpd
%$%6LH!3s6r+rK"u1&fai";o`FrMIdI>Q3#^V\)e-8&qH'0nQs#Jg\cb4mk8^`;h--?-H=7,,&.uHa=h.RC-.(*;ZNZ$\.J+^St"M
%$o-a^^l(P2,iBW!%U]gq#R;f2@Nq21&R3&H52O_L5L(R8^GS*6e4DMOX'<>^#M2bnMOIMa"-ER@5S9CQ<o\-5GULr++;>S.$R*V'
%bMZNj&4`SQE4d)$&T3/)V+<4Kk0_%B+$,QV4*/&u;*h08k;AFBMU#8iA'og'L,a$j/c&sNJ&NP-_R=r9-Obe55Y<-h;==(ce*d"N
%q)]j`hko3Oc:I,WT:1s=C#@6/s5Br&aWGnNB"Hgq\]I&u4$.`XU\X.=4?#X`Qhrf.'`Ct:Pe$3pk:,<<URCCcq:&Y\.fS,SlL*KQ
%fD*1[Ah8H%d@<'$iON*,*5_ZeFXp84gq\Qtc!<8K5C<3]#P6R'H"mQ`B(GbE-h&_`4E'j-3#EZ+^$M9/LuW_t/(3+@,m+Xp+AcMg
%C.)%,r=Qj\2]oNCC%[7a7us8DIsCfM#g@Pe8Ug#Mq8S-b&7q\V?iiU]Q>,`>'j^3TMnB4F!B^l9]B+Zh/OFKVpgPpQ!qdT;,ZVWg
%TJt,K,89'/rApN@!@Y`6Pdu+&)-Gc)Es=K^iQGcl'?UG,(*U&PSQ'tH\o@jt0sMMPIXEcuB#(MC0EBWc@dn''VHdUV10G<C$l*6G
%/;sT,H]j9V\;@`rikoA&:2kIa!P;5:=fF>'pj[JZ[GtXaU;Rg$ERYQbD.P)+5/25Q9G,V.!lI.[RthH,%:uPGKQmpZLhqnd%L+>L
%[e!D0%g,qL6TVlK's1YRT^Vu7RU%L?Gr&AWEckYQE@us@GDr=<#NR?g'J"9QaNdO1n`+U!YuMiOpfa/N&o9G;jFV"+;JAT=;Vae+
%V(,N=Og0*dO;.sL>@]$NkfM)45DIC9^+3Z"`DHMM`X%)Q'Fp1rIISG:22Vt\9L`,e0,k2tr`"SV<@7;cYi/Fs<,mBJj+88.)1p0k
%K+9kD9S\6sjrRAU17hlh644]#Uh4*2Tcu4dMP7Ck@d(iFjtt=WTIRA'j;Fo'W?tgQQ=k3L;Y-/OaGeK>;LmE2@on]MUb[T<jA3a/
%0MN88+NL-EOo+.gW'&naZ8+mW/&!APJQOha"Acqq-YGhu:u(*9U65h*Xo%rI<>Z*U<-JHn_p$O/RYREK/\V[^UQk:@A]7<'?]C>L
%Tls\&U[$1-EHhj.Q7+>8;1heH:37bs0&EWD]Fk5u%7KffY6*JlOU=f._#tU$hPVkK:a2\=K!h#F_MDqN(1&`G]P5ep<Eq5JN<$W6
%[KpM+Cfj5<Fu:KOBdUQTWrlWK<h1,Vg$Op,8`i!AF`L_$TS*n'<[c6`$q7.H.'R2@M?#Z*jeX,aU_*S]28rt8]O&_Y^u&+.93.XE
%^VqLgPndM[TeV_X,mZYFV]<,N;3O80Z,[>2hr`&m#^.V:NJti]+KEttU=@]`9QQV?M#p_U0L>+L2qU3_b!+)^_Q7nC6<3W_ctuGp
%\Fckt,0G7C@tilSVm%.j`><$'l@+fmm4o/::64G[e*L!'$Q:r#:KS`B]oa"Bfb!V-PCP1pS:jTO*KLOe>'pt`/ig)"ID[UR_)&eO
%m=\05+"t@nAG4OULkddLne9u`@qu%WTUBBcV^@:hBTRd[]3G5f:JN`f1\mg?,&d!"$,k=SqUstFM]=S3-nP&?IU)'*0LQDp2u1.C
%I;-eP`+&iK8`\*>9/HJUaB54tC]R.s9M5htWj-JA"ic[W?`sJd5qiqQBuMq9NMkY,c,)[[Qm:!MO5RkZdXkqZcQ*VU5C2e_oLXR*
%jV"IkIk-7Q/cZE.`e,ha8mE,=/Li>V=LA_letibUK9(W9n414t,+M)&a6X$H_nq*H6pWUhi!@9n[X7,L7CnKck*6`<#$CffQ8$ae
%'m9a>Oe&2e,*LNEShY&K[jAb(.Zi=a.KW@D,X!"CeV4&B]iGm)4H?,S\\)JD8Z!3sFa5:],H<^hSSHVg4:'_q[jtS8Z&"E#?%B2>
%=Ejfa/5a7b/mtBBqQ=Ce$(@P\;<St&Mf9:TA%K#"C]Qg(PqbXD;p`+5XW]SE0'UL[B)>Wm)G]TN!i^aTC+^m294sl8(0+6fo7KBR
%N?0HF$kX>0s%"u6P`N1HhCf6)*oObVrVH0fma34HaSh=G&0_%6(*])F4LGk`U3+-ei=A^;7h"E?>*/6/VjAZ6r,>Nm+.cc(E:Li"
%M19bjC#ZO](8p1'cS&(1jk0fp(I))tr*#[qV#7sqQRRC/B,<%Hc3I"-#M*sS(#r^u/ls+:pBqc"_fJHd07C3@0duVZZK7b#rPHOr
%P\6=8QDQcJ]N>^8m.,jg+"gsr_p_92DanWYG6PTIDX*94k<L`J$]G*^OXk&)=/gVn>g+ce4i#\`O@QC<H.T<@pO^lc(9PlkHP@[7
%Kd?Fr6lEcI1`u<T[T0HBoM([$4+m=aD\\@+LR_1[<?752^cG=H4=N%amIO:u=a7^`ZpR[K>1IXic^pWjP$*;V0\DP6JBYJ`TJ\ra
%MnfAk6(^@;U%(s*'S[ICM8smU5Sd,Yg:M="bZ6OE!J2Pl;_'eY@&,9gJ]S1\]tA>tE3rIr!e`-TQ`,1`3(>%/mecYE;]e(gH(+2'
%\.o3*:klrAp+HnO)S/h$#U]<IR3M\(\*g&9W^]=;mm'G)md2C(3a<AP33G"k$$R,skXn_YYeoG79CG##e?6N<PT1tfSlOFVPH-]?
%;<'OK"Q0l*PT_#mo27/I0\d%VMA#L(IVYh`UI@H!=V&@s6qs>t?)A3!K7P(a1#2NfK*OBo8F['Zr&DIDIhgC\N0pYuX>CW]R9m4o
%La?hj6]d@5G,M&ErK:(1/eiXXpu[<]9.WhY8MCOHGU8/U25[\&C'>"2Ag.;C'n]\gJ^LXG@%k_<m[r^<h\h;;(!K)7V`E6=Lor3\
%aT7^GkU&dKI*[?a":(T/5tHL:hPGuPP3hqB>\:H,#gjS$%hoFo$\<&\GgN4HIc_BRJL!q`l44=VU6R_hR<BlkD%=s<[TgF.@c*0l
%819u=WJS$=iK#=0lDkkhlSKITP4E.-6ke93FEAUHl(]&Em'Drs_0E`(D8&DcH$9uTPLZ6-^^TTVkSoD>2um\3/.HVDEFJ5]cM?`B
%S3s?&Wn`Gbbmn)8<)6';I@i^uWDTJ+S(_XV[3;0R;%[;OdkWjY^;YPjC;9r:'&h^e%i-AfHL1#'HR/5jVhlD/ml%Y2Lk6=2@G^lV
%IIq$EZr0J;3$0lS8J\/?#BkEFfU5P*8S:u?=0\)@/0eFDHL6[pYK<Hh<L_"dZ2q,Q*uiU=*uL)";Rs\nT0E+N_9f#W-k=ZRa5Bmk
%OC#+0$sFV1f>kN]'cP5m_N@PsS.kt?-!%K@O&%qMfm18.1aEL;0S&eZ4$@8lZ7=G`;WV9lqkd.24gEsr.<U>u#;]<j5b(:)6VeL7
%i_:g7K#><hD]ClBj^TTCnp_hXY8n;7a]5s*1']I;Oe0D8PMe](:HY75kgG6uZH:(:"/2/8!3V+bE*eT/$tF4kh(gR;b2_Wo*mPpN
%l&Z"uR1KX!ZhU3uc)AZAc[ta8G6QK:hfbqmle?iK52;8p5+V11XW!KF_$u2tE:dV:C=aB>foMN"5j^A:!Ymt_%l/4NB<M%76L2_V
%lECXT=mfMK]RW@.DKB+[?'db/OX7\T\%jC4,sLs-75c:]l/&cqCE5`%lFre;Ps(j*q]oMnAhlN\nZ.9\c8l<&@J%nI6T)ogb2;W/
%rI[:^o^J`%W'OKbJc&0.)%4<lf_[.Da#&s'd76[*K`cct_s>[[qaf&_IhFt;/9s3s'?Wd?(1iqfkTa<X`<1bqgTGKBEh"KU@H"rG
%1&s1g+DslHa#SOgc$'+P+7@2;?@3%[_0]"06OEcCqfjS9\tmNuPXDW?56<?s]"L-ER-`@g]TCLu'+sCS-B_+d/DO:=PT5AcWS[C6
%URsTZQ<mo?,?`lMNXq5@@sFZO<*qo2(eu*/lq(X$@LVX,:_&K[oX8d1LkL+LfZd"10r+;`<&grOq]:0q-Q@&g&^7$PCYp-$h,Q=S
%DKtrNptp*pi:Kn0PtZNkClL]L%.alsh52FfN2+OlRm,Tb*1IR:o_3e1E)3o1obuksl_ui5@2qLj$FMA!Jg94.Ga$9"aChi`I#B70
%JZM'+N*?`I.OGLTl[3PiDFTZ>!<A$c4841"E(>'b2NIQtffZ=eSkc=?\XQYOpsb5QX9!btj9<(0po+jPPB30$;UD(Ur=<8)@1FR?
%Aiti8`TbjH*e!Z:,Aj+BG>(Df?iAusWA>SUJdW$AUOm*^C,;l6!0%P#"s0Bj+DE!R(pT"+AKHuH+NZ@XGIcgDQKNMMViQ8k+&LGV
%+@YqG:P)?`c,6=CnosP$:LASaSg_'E#'lDN7kH6PIm>$\P`9?#gORI'"ThF5@5]h0;6oQ7cE)MZ>gnbQ=VKT=rirhHj+\Bs,Ups1
%N_&U+MU5i$2>4\Mc%`j\@Vg:NCfJE&qNqen.lPVJ_l`?Fqp==c:kRB#b[%q]Ke3+9[Aja7D3<=7amikNrE'aE7V.>s\D2P7YC:>,
%qfV'Brm?qd/_%0VQLtNkh<Nd7BjRto#9bA<<,M`i<cp@'7i61A!-&j`&>)[IM"MhOWX[V3;p>&\38I&l+'<"uX`<V\,4f&5j_oVZ
%r4sl4"p$CA!["==^L=3V.e_8[iZFb_<P8+S]OF(ufpTf!mB^lWC#SsB`BQIH^\F"RAf,U)cd"7Or+MBN@JoISA(e`*1X210pN+Ro
%#LCXQf4I-(hgFtmN&+c$F*#VChp4?t`+S8(;tTf?O!"#I\]9UMbs%/]8+VdkGVfMNa)c<`g#U1r'bhTa5Q+;$U2+:P?=.eY'<\uR
%X@GB9_fT@k]5RB$9(;W-M(<iEpC0H6Xp:$F_d?=54<q"k6WrIE5JIi_aPS5FOhXCkj8T?e%Jdi9["(]i-l-hqTl%Xl?cjG6a4WJ0
%Z_J$-]EP%",lAXo&]ufn*!il[X^IqH>IJ5r[N4d?I:M<n=L?29]$-d`hCF4XW()PaF-q+"Jlr_%^qdEB9KNDu2^&-9H"6`g]:3o`
%IW[(V-(3`/%nSd"ZVgd?HSJ-b'0dub2C7e3%HSG:`NMi\YqCL@+Yd2a]`H1!iq)#3'?$+"J7b6P;4')2XiB`ja0P7>!hXg^LB[h%
%T5>WjIq+aXDr!<`S7*(aC>%7;!T_ncIs!2l2i44S$95*_+X#^I6"!f=)icLZO#29]W\S9u3!"/cPpDt[l/j>?a0uk*D/aiEk_Qp!
%j^9-X7_]=kE41eCO;N[,\hibH=C[]K-F%B7QX^3,E-n)0(]YK.rSo-/DFM]So8SaE%^?9&;SBcN,<AkA;jG4MS4?A^+XiF0L1!I^
%60?t(@=_Zk.i\q*VCc`O5I>NRQ&WXkZIKPhJoY;o(S7b>fVqAh#*RHrUlZI^&CK#N5fU.EJ-p9F?OEN`]>b*!QE3;9]!C#'D7!H!
%6K[=\Ai!>t[Cn<D#,s)@G("d(0#m<3;+0qe5<p\b9mGC1"!#5&ZNQqJ#MDMS6uB0Q[6oWiR/.:hbZ5`%ZB58>5pS<<e8=;'g.5%+
%)e,JGOY'eH%k6hEeZFL6&8ENtCI*EF0nBClVd1>,dN`7H=b0]--jdn5<N6"i*FVENJM,Bt]0fj:k;S%fRSS`A#+6a3s4QPNG;Jr3
%N"MqP6nE/oYb8jB=p&=i2c`XRF?&8SNa&DTO)+qo5XhRXcXE;\hh3rT0&-0f2#6YrkKV.oEnNIFTpaPiYq8Mj'\eX*bUX`;GZZ,G
%fG!nce0n:*\.BkC`$GP8.eb<FH^U:/Y,arQTIB]D"/_'A#G)1<=W.."HH>C*1WDHn$O%i!Z#U5.4[lnQU?^RW/Mni(Nr^9;iKZE5
%dphecPu1MM-@]Tt6alF:5g$PJ7R9IYrY3Ikg#bufHY%_N0`"T"+H2?'UO;NobaRs6g&n&ToAS)##m;)7N[F6,Q9[&D'7mUPFX@l7
%@\6D#2!C.k>pBcP5=:b=XND"q'J=S2<48#G"f1ThFA:V?>PG@oVp4A:F3WA>aXY^d#%b9j80n@SC#3\b/2b\jYfC]#\oc]:_B+',
%oZ7-%)(F<@pQ5A8G3R/GHt&Yo:X2L5,5TEn@G@!;%#*8</kRLTRsM^NL@;@CN=[;d\p?Ia'hI)nmH2L,"#o@@5UZf46k7!XUaaTs
%b/RjsS,4fWd3AF0oUV]CD'qZ@"[P,Q&<KS/ft9<a<(]^%ClM(HU=@"6`FboI1Q_Hp[<qh(i(!kL79tVrUq7`X[e2O=!P#"jbA(&o
%?a7tY\i)H^WZ7M]gt]]M0(,1jFeh:Xcfp<>,%NY9&l+CU4"-('-kp=_U"ok\b1Z9SmS+_&T"[Z$"mO<!.AeJD1l!HUPrUA<dkj#f
%h$QCIX*"f:*V.]12hE`nHqkqdAYCr&r,gs?L"Wh%.3A=gko??!^NTJi/ZJ&a\R$_Zm3(P\nVRA7:98+48u,7pc%gegjXj'N<'GB#
%kD8_1G%hgREs8em6tN;e#YoJf7V$T&Li4E9%G:'Q_pRA^*9)!UdOM[sb&M;#L\^^&VNm0Me@;?-bDKL,CcsKf#14o",P)Y6$>q@L
%)ub[7PQ)hU8dcg#7<CQrPZjMM("":4l?OsLBiTjBYkEH72/1+LQ?93%*a@8e\V_SVfsh@ifWt)`@7sQd)t86l?FZR"W!_>=@h@dV
%eBo$]:-60uXYNi+S=/Us]5u/<dS#1.SbI$3M0>Y%/klMt!;uCiV(r%K;^p?jg[U@m[Q1D?Un(c;<[Lp[K%TW-ST\sA'UQ\s:d&)m
%]gTaTYi1rS9Rn05hUrT`^^>_l.6uoSf+9WO1eo<hI:eQ:lp@$=+#3;>!+9gAUqXMK8l$6THT-Q,diGg(E8<bU[uR3f*Xh66a!?fc
%HAPi^;QrPH3E.Sn3XiFSl%4/K44dmJ;fJ=n.TKa)Jg6`ZkmoubrbV!&35DXX;grZ&JD`OW+U6LCA]geE"!2^AknF1>b6^hFSF.tF
%a6TIlND+?bcG9;@,&?RlM45$0I+$%$/^c^Qk]Y;['Q4E$l0THBn/+e4OCkf9F<=/#8qlY7:9%&Hg)jbOj?p=-jE#hEh*lC=bi/[1
%+1A>aThLrN`P207F>te*%V/6VS]GiI7k&H;Yj#,>W.!9C(JAi?8>0u0'9Zk-fW\@>41E6C\!I](0imi4iK3PQ.(b)m&UM>WFu.+:
%,m&'QXk.XNj:+s!go:K=ZLh?b]@FK*f8<7=95eWGK<\,Z"0aKt(Tea=pJg#B3"!S_ZE)14[IK@J,TF#*)ZY!%==S@5!bn*$>n8F[
%*hjf^k0=+T*@3%pp(\,@%2)Wu#gM=pA:GenWMF@A"ks2s;S,`ujE]:[C#<4CO5J&*9m8AR*`;E8^`\"cmJUF"(rR2Al#@B?1PSD,
%1m0#@$CEMqjN.oZ(;XKbm7QtFmHlSJ/"o[1g66`Y@C1(;/j]QEiMLH$"d+g?<p:FH@/M.f469fWQXSOH9l,P"rf-0oCAgldV\Ck;
%)*5R*_`Wg_Xn4A^'6uZUoRssT;U$#DLF=^i-eIg2UtGJuZ1mk/.;.u*"eVIr?To[.!f#Ple&("bPR=+m`SO!F]4i*]hrM8r"S+53
%6fQ?b!?7I(?T7;!QJKUW1o/>hP8j\=3MGH;.UtlcRqnH/V1gRc+u9;+e33,uoh],udLp3FDdIfonHIuj<%Eaaki`5\m6pUg)aC\*
%EH_sbA?U_IM%s%ZXB6khgc223H/2rF*5agq]4+(K?rN.#4*]MtQ8c]u8_Tut##cf)&McBZfBct'0rMuKl01P+;Pb-*3]t6uaT1(/
%WN8i0Jahj]N4/_dhlff/lYT\%-"Q4LXY4CU"M$4t#<X<p=TAL>_3:5/"`+T;XQ_)=ClkKi;IZ4*2nb!QLdBZ?+llY;aVPIr0`b/!
%B>eJ%c!YA`n3):B[.Rms)-f0*<X3+EG7;cR,ZC,"I#(KC(MWT^^d)O>bT,8Dl29OG^bLWnP"p^=8a.53*K,=&f2%a(AgG"*pHV;%
%O"@4Rg56RW:dZbtE"$QSeM*]GLh`^7p@U=s>bu_I97'o)G8?K@'5+m1D9gKO`B32_F40[%rbQZB('`IQ3b(aXHGa:WG>4%_UC=.N
%dkOAj9KA420["f.A5-.NW"?e^[WBA1S@[Udjf*t&Y];L>V\TFkP)WZVgTJ_MWg.sg2g'!^,JjZ]*EF/?MO59:#NfLWDg-0)['fju
%_;u*G>>]L;6CO%^M+T#s3.^[5'f]a.F8Y_aDkG&0@,#gt,*oId2agrpc5-o&q*"X^>REcAW`Q=mEEKQGSe"%OM\I<!PI#IV^FN9S
%9b(9%!7cPipc.>pNV@,!ag'X?;O<QFp#U]F.tMLqKjGIA8JiD5MOK4B-J=`3UI6gD=U[S&>K==CoQCq?Tb@XR+>n&ZhEkX\m#e_W
%\ec4M)i7`"&/=D,&"MGp,ke-aoMkJ3=:4bHl7,d?WBRTbQTi"1F0M#JWJeEs*Ja0rIQbn'^SV6[Zb]3g5Sj0*Z8BFblf%@JIZkql
%7.*K)@glo\A4BZsAetTm]LOZKQo%Ft'KC,&5A6f'h*:b;G0IVe9=p4LFP>QN=(p7[m+ZG+P/Fq2@!Num<s1>k>aN/,Q5?,jW6MuC
%RX/edWrqk$\=91shL-fsPr]BT$!>m6l5d8)0lM7lAoa8_8`B0Zac^f!>/^25MUHUY75T*JG_O3nN7d_;Y8Seh"M/;ZSgDU7RLD13
%-LTOEK;t06!>cW[CcJ<T0eDHW-hVY]01CjA8&V3j!9:%Xq&4s&<<[_J\"#P_TF,<Slq>;Yi*fi04JF1J#TWg]N!I;L>iB(RcCPU*
%b"V[%'aUNV"M)$>(!H7M;3(nlNcGiS-KTpf1hiL*V^A$r@+tp33=u<1&PKD"%*IU#Ht2O"77<m1bpm(EV$koW`A=?0-NS!(rV>uF
%<8%&68;(@Z.HUc7?EQ%*qeXfZ]bS_Bjj"YLe-c84['eua15YZR76f1]AgEb`&^*7P$,>POQ.A#F]PeB'C.1PY+udOK=V7i##c\gI
%`n;cm_/q,4O4(R5k@`4e1WlmbOUdYPn<UD)b).:4WOTi7@N5EhqT?!s"Q.3ef!0&!DF*]#s.R];Au(i-Bp>??XGKP)]6"bR:R)p[
%F!Y"ZEdQl0XXV76fMm(/q-uKd-5Jnh_lKYX34ZaO[Qln*.H8`lPe$q"b\bad4iit-fpCDU+.K9%B\STaVI(F<)/N4c\ToKKR%ucZ
%33<VHc9s[L_2h;MXkSnj,)LTs7C1WB\->5E83$pRI$SC!Z)`0pU$+*6B=l$EYVC&B>GHh"FDX7&S"Ctb'Pf!mfGe2G7)lAiL>K;=
%!Z^)8#+qAOcF!,[oYlCW@g0;Gcg8m_S%:9?=tTB.D+gBe8/`UlW8!58IZ_*SlNZsnUuKIZ17a,uP:pet"P\>-6;[p'O!Lu+\%KM$
%@o5\tlNV4:'IPGl;,fuC]Hc;.`As+7pEl0"^,,Bjb2+9J.#$`MT)in_2O93aB#=M9(h[n*RHA#60!/D)"KK?b9R'D-ni5SK$hrfE
%g?-^JH?t@COP55[J(SdpMMWM0GM,NCW)b@<RjI48H?LUO2DO`Z$\)3`O<1I]&8*MfTmui/RC'm%+&W\75%.O@X\L<59nQ+D:M'G>
%iN#Hi:R&pLN[Zg8lkY6IZ`.>5[UGM\)8D?2,e@P59FrH,)hhWMliGmg8npWrpinS5S4FU'VO$LHEaFkdk^(Et="tPa1:&[?b:Mh@
%Bhdn8mnoq*$ttg'9cq>o2_c.++8]aA%s<=3Ld4s,liOXkmBCI!!=m6&BjTdJo"WMo9EsN2Iqq-sUd)e_;r*V%8Is$b>-]p0aES+'
%"f-lcNMJ1eL_MkmW9218oJj/:p-Nk-r!l1j)'VoFUIIc4>A_n"X(i"@#j3!P!tlj#E0E=iIG"=[aM'CLY:m$?]2%inG>?fm_8@_N
%iAinEb;uaLlc/%E($F"S6c@[cJmG>cg3B(7h*\)+R]Fkf@)L>f/7^s'Dbk?qh/'ZNlIc.1;Rj*T!isFT'0"e&Y6_>9$*^.Q%Kfk%
%ZoUlTYR1D6_,X36+(gsp3K"+`rhF^]5o8%LdKW3*%H_Gpk^mL&8$"TS-"R]G"*k4ak-N<+qR?XOc9beWT*NX`_kBW&+S?"E]eTDi
%BJAu(;+d"J)3(ARAs70d,X]W76sG=P@%NoeaY\&Y<2P3*G(LcsCe=Nrm43oXU7B?Q[<p#(%OOi6G?9$@VSd+$2BAro?3cuN:fG`b
%1CKC%C#d,3(ceS^YUBWAg[VM&T"t*c>X#+>3*e/)[;\HA7rgng9W-bRgU&'JMSRLZ#O+#Xnq/L_'G%9a"dgHI6WG^nXbb:Z!(+`*
%VWlMJaYT.P;\tc_"([Z3kYf%GM*,)RF9&N$>9K9jkp<L*2/#9ibB^h,rM(=7P`8>d*jss:S=T09O3N_e!oq-r$`jbH0eG_V&oAl(
%RX-g);jb-`D)?>0&$&Akn&i)B^2i@C28F$b7kXRR96L5FE"Z5.&G)*;.0U-pLDc4K6:HVrEJG!PhBtYe,^0Sgfc<Ii>oY?Uq(h*n
%V$NA`7j.oS/Qa1oT:PG;`Pm+0+Nms@.Y\.B2F#s?SBbR"a[dE&j!urhk:TNjie*%$gYf;0Xu%7r4!)47cmmNLc!p]"P#Tm%XTg9g
%JIgOX+:f1G]d14`5703G6!2F:n+=$Ii:-c/p?oMTjN+d&hE_*..1+d,$I1RZ%T:P%cCK$Q`*fWoc:G9mr;6$W0Y5<-l;LOlh+AGA
%h1O"Nd;7K>b^E;dLbTcr(gmOHp(.fC6QD@3Ia0W/=[=57=63QhX_c&:5pULs:4dPGBtZ6E5U)o..\IZF.3`sPY?qSuCe5iDJBHe2
%SBa]Q<b7\omqh-0<MM$r2(UY2)bsA$lf[j5fo"_(d<InVTobN::4Ia6lqM^6.j)eH>_^t.]V^U3kt_Z_)/DkT*NiC_&_h`Ril0pn
%pETM:8aJ./^RhF(o]mln=brdf)e<ou-Z4d9s1YHR][5XR,p,0'=0=;B9Rab9Ve`V_K)Y:0CBJnqX@X-S"kreFFP00(0/P;3V&^k>
%)0AD%?:MQch7P">`H8'UliYb$+WlpLfYJcC%b0DD+oiFg*%K'A`RJZLe,a>WrDof9:$nW-TXtu"LI00%e-D!OF9V4paV_VOkS)]J
%2#sP&[-XOUaV/u\F3XW$em*7QBU/^qa_qEeTOgpU.CpcEIquWSZUStq[';o-R-_4b4R+cr$TJR+?OCJ)H4!-"R@I-%IUMbk-%ktX
%M']XHmcn)JeM2iQ=";\/*^NoQ1/3<e5"%8F.YCiu"_ZSN..2jlQ2hRH,6i`]8tDc5)uC1Z6B2j$k+7lM&*N`/l8EKVK/![O.\2=o
%X\;N#ds3>WJN0LpprXq<7dP*MA[M=,3%2RsMpGPK:e;<s=du+NqLJ$uWukp3>=JmmcQ(cR(D]ii'O=.I(K`n4UU_ZkK96Xoe>U't
%1B8h(^3-0>93(N?c'OTilYtNk%o3#qFe8aIAJm8Aii[\o7n=>lfYM9RZ4UMq.JkF655b3@S<gXaR5bHeM:6laTrqB"^Jb!>pN(&s
%GtG)YTcSPO8t3FP3p!'F$Zg>'>E`*CCU`+'rE0aoYRS.blRl>o3rB/WDdXHfmj]:KX9$d@?`*\'n#+e:fTmeh91Q>3[)8V3QWJ2Q
%(lP*?9(<7`V4oUE`s"%&7(;CR3E?u2A7Fm4>I:1&SQ3]W!toln.9-s;0cDc>ZOK0V$Uu2_$_19-o?$Va>XbEC\Y(s/(;n_N5f)5V
%f<_n],a^JanX1i($Hm[3]<'Wf@OUfZhjW_K<F06=7d9/Y)dd'F3:1&;2Dpc-.f'Y?0*)VRqoc]2i^egINcIsnad?;dI_;39Bgc/b
%nSqSLh*DEXQruoFM99q4O0\5'gkHC`HVt9jI6@+W%)\9?'VUbB$G_N?LVHYt^*T%n\<u6#^;6sUKXiQCK1>;>_[2D;dA7)I89-I>
%o"`?;<IC+#Bp[G6R2Kunb:c38!MCjQUb#s6H1A.H'P>P:2/n3fOH@'<>MM9&=&K3f33HO<<`u=:l_09Od];`PO*c5$W4JGdG)WCS
%N0.oMO4.:]O)J).g,YLp)_H9#&JRp,Ygu:YQ0H>?m@\TFX4i#H-c(4sYNX!qO!!B[@!k8(/_skq96it=58RX3&D^`%M>-@s29X%0
%5oXHV#ph?18p%Ha7`2;!!S)&uV9AKjB!OUA<s:@F$U(1f)rl8:ri:Y^Kq6k;TG4B\D(trV-sB(QaE9o.!u[\1$nf>0k5iPpca"-e
%A*K\6O+\6-/a7UAm1h8nAhrn""U0b8?>cSk6HEf=;5,V<?\.KO7,-B6_]SuS$=,h2#eG1tc,1A$HE7tZ@b@A$3RM4G1GgC,C[9a(
%]qi]8Lg@/m2@9a2](JM^=VcRc7%*8ViJ8bW#ari))hm9@Ru.R=3Sk)o!-`*er#X,]K(Euhn=l65N^3fAEBhAGXH$G<2:De(T?"VR
%>/g"2E5(+b)6fODI4:Yq8>rW[cj"gq=PdR:f#&@*BdcAcjOp.fZ&c'//'Flfa0P%W!u<]K<Q2ON6_SsL1I^H#^A-?M5-l,j*_3J0
%7JQ/[E(/r>'VVDbeBcC"qiZtq*6dp6.k!k13>sV%V/,g-qgPObqk\0Q9pWpOBDfW',?19tr2[GEdN&@FTsVTFdTO[*IX%D-$kkQb
%8NcR`cfe&sf`?=AceF)pg3PjfH-+\K!E8MJYn,?<$n!-4'AQ0%>G2ZBC%+,=&?_bI@L<5Ok9-ljFp[O9%P9#Ojbn)8$OM@e,[FRU
%'W!5e\+Fl/Y#>k)]$[jTrg?&Iguf!`@"SrG(+1i@l02cofIg4XOD*RcX<!hF;9$$HpXiYpW![WAXpum5=]/@Q$ls:k^g<bUMZ>^f
%4rBDk=][G%aCCsM;&o=@o_?$?f@9uB`/q8u],0VldQZ%]o`4[COGcu]q80h6GO4ES9s-GYB=6]m9^ZA+]mCqHQ&KLG42'^8iK*0a
%L5jrW'M,sJ=;aLJc+Ql(H6-@?qq?S`Y00h5[)4XG-F'WsNlndD,0iOp)Y(dqrB:n4bt!"CY;24-NT)\)'mEGpPW=2R.sgAj$94"L
%U/C:,9aB=@^F`fC2['1r'NYO3r^]oA@i`FZU+sos"C4ASN+G4@qCOQHgWYHPm[*e.5d>,b4PaZP2A7J&=!YQ79Y0`P*uF2J6um_/
%[ne+HbAtl$m?;l_fS(YG1Jd5"Cl%k27Gsl]=K77SUF:>COMd@NFt^mYcu[sI8$QqDm(+P8TI@:<`adu]#7uVK2'QATFCu^]0c@[f
%^rWZndMo"1W-sQ2rN9fg1ui)i;-:A(OWQgo!Qu2R0.A(m.+?TlHroP^=0R7pbVc&34mNH14+f]1`[2@"[IuY8>i4P"b>)SUIm>31
%V\ZEO]K4N/:6cY?i2rog*QbS!gRpbF/7PS3>[oVFggh@:):KT#]#0jg.)F0lNYS32,11,\PPC)0ol(aJVL@V3K4DIe*m<PqEtD5&
%3\oFJld0X)/IRYVdj;KG2!9o%kJN)keSA_&\+gd-^,DIL`FF24T'(7ONu'V6"57r=o_Pr]A6do&)&qP<pIs6oWiHrF^"H6FNO['>
%^cEat#k1:;JTtF%q.V944e;^UO"C2_P7hr4jA$kiY557n,&L>J1lA4C"oq1@-&SHp$pq:f)=mNV_QTH,]1E=u5^=tu#jN%=3?\XZ
%-VaEfA:=fmg5=o+oOLTZV<ooK?Bjs7]"b-``UHja[$iH./=X,(=EtR.WOZaTg_06^JJ4f*33%Q:h$K,0pL2=%jnfYQJoK01.-:<p
%22I/=aFLHhTl%=+bi`o:4%,ABQ\frO4D37op<=Y9/>4WB.nEMU/n++3FbL@8N4,WH]ps-;dKbM,^k<Ui?"j3,/mOCK7dN2XVM-A\
%G$4h3R3eS01j:"p;e2+]D^q:sY3n'UOZ0%lk\aa!2mjB<@GDmt0%%#XQB?g'T7KG!%BX8HW\3Xs0#R?XoO_nR-KRLC[q'DIk6Y]T
%49lU:,\/)a6:X[bI#SF&7He6d_2/&/.!T_;8$BB7R>JQedT\,uWVHl_X4MT30pa]u2p@`hiSqM;RfhaB*-$6U;5PQRAR](N`+B_0
%)rrQqA=B'g)[:8?CRQH/@2P:Z,9D[qF?f$[j9-\C:O*CI/F.\:Y7"q;.(?Jm5;!;ia/Z70<@4WD7?0DLIPQ]1(0Oa#<($'RnMB2e
%R#&i>'Gqp.N-ZDofOV+@VB?_.p09)&)/+.Ic_715;[u0489G+k]t,lDL3PN5HQ!RUKRLYDp-=o`gB?qW.5"^^\4Jcubbraj;1[Uk
%dDN7Cn:qYlOJ-P=E*^[F4b:>12[d*8IQMFnc+oX?0?`U=]'Xe(8l6u<3UuM+j]f:^<4;#6=6Ga0;qUBlLb\^loA,djb1cn?nrEEE
%Tm@8i',sSC\&t4*]_k@Vij;GrPArjMjh]ip'dYY;Pj.+WZAS"d@r#bJ`MR!R8n4-!(k=,SSWaNmIO;UJRAc16_Xc7]iWHFk:_C#P
%q%_SM9p/^3PNi8P"5VdaCLeZ+"(r/WbB+91IO6<`lcq\g4)bTfnUe5c,qu*+A:h(r-rmNjf\4_`Vb!Mm$=DDDeOCG)1OK5,AA'.0
%Jk8H^'$LX>efoT2rE\bD3.ku;#9<fq&7@as/FP!BQ(+"\RqT&I3C%OWgPl5'0iP/M4;YmV.+?W.Q<.X#U?t5daXFkTJoSWAFD0CT
%8&9R08T2c[5R*&lYY6gG#TX+;!AZ[gQW=YJC!=[NbR5o%.S`;u8nYZ4^`4L!l7.%F]L2(1E@_-=XZI9\"mhJ+!=E=(!F>Z[&d8E#
%N[eB)6We1dR[hf2c)ec;"3=m:K"pNeXt&rROO]ECdK)IE0X9B>"X^Z9'>,=6/u8m@S(QO73h*-`*+o_Q+5@WhL!RO`n[BZ.0)ShJ
%BY:ti/VFIV6Gi&M7/2AP&%GZTgRkBlD))\WL[Pg5B->nfrDbrpg(cVu@(rD(Glfr,`JQ9C.0'qH'Z'b(P7fhZOFQJbe^c6*G'.Zb
%kKjEcjNNnV^u`tbZ7ZtPelJ4d7NahP]A9h@+X.aYr/=m'/)Em*!Q*9:L7TVL#m+XG$_@XL$9m8u3gZQ[Yc2$K*T;A@!;T!mQ-%33
%9J.KWM.&%n_WPCu8PLp:Q74an(t@g)IV[KDe3&et?/J'rf*V"sa]4O8D&T3TRXG>bF%0<.6M&34\6@V#S6"\[-LJfu=l^O.Zi!X#
%7Z*;F<0A*o0[,?j;UM;%$E!://7Kgo_^P7hLl.d89KhIE4r]XNZA;7tk"sm7(.$t`esirrE_-$L45.Vq//E*@V#QX"#q"!`/o*ic
%1YP`fH>@*1F]Kg>Npu8sfg$L3H0?pr`f(+h/Z(j3UAf>Z0d2Yg:,oq0kf,pX2%Qr6r\:!m"F`-pcf26^4c^$0S@M0bC?!%n3in]]
%j(-(V;e2qCgO,r',K1$WlYAN(8$oEI,AFmOC>%>uH$,//YajFnL1[T8fM5$_5V%m2EA_R-DS%8F2B*5O!)meh8D23SI0YTDl`9k*
%-VC@.W26k#9Y[3W&U.V\at!;/Nl_"8#25F_!K4%;+NnYO`?g;"fZfuZj(g)^1FaSL!K9Vs.ssCBd4!6='QK(h8OgU,YT)i'h27,,
%WVR\n<E5he7;8`[[%9p"gr^>GXb+JS<%UC_Jcl0bhjO8*`MeGHM<<&""rpPgE5o^!^#Rm<NSYmZ#!O,egbES1!U\j9IqC:^304g#
%f?I%Ops\K''9A1bAI\'<P:4o?bo+OuQ[ZGHHM6^?;VZcDL+bc"B#_Dj02d?&A[OrZ,*VXrPap:IRP=i,*'#Q#A!g)NQG%boL47(&
%;Ua4@8I+tNB[L!m,:bf==c?(12_NZ^Ae$%X+Zst!@HE!LW[1k]pSIcfpQ?BjR.2q:VHnM7$'!>!r?@,K\Cb%j.$b;F99`T(.-!M/
%1,Bcl$T1=BRCl;hWn"1+I&0[b7Dke<*ucDU8a3,d0lc]fd7('_+,/&Od_*%nR33]sM$5FgI1/a6)Z;-#jJAf?c##gN;T^*(g4l.l
%heOrA9jAZ'd>/eKU8>5::_r,0Lorhu(H<CUP7kUAdY1k%)CNBS]Hk;9(F>g>;iYfh\$A993:f+eJ%/V-:D@_2cp_GC\R*B/Q,#NT
%_PBnj*Md=RLChd5f`r[!bKPaNWhf8t2BdQaW9>3`IqPE"k[QHagt]gmaLdnYFF>@06Wk`B!R#'TY5VQ$_o:+Lh5,.(2GNbD.kI,g
%$59"ChYKkrSf7GL[j&SL&4Y'LAYkO8+<J>pS37EoeVqi8nsY<0J`TS9I*8%&-k_o+AL'o6R1eRP^,Tobml\o&^JjJ^oWF'>#/AWu
%?*!VlW[nl`m1KEe+$\gM6Q[Rb$r-uPQt]olXZ.&3dDJIJ)N[f;7!(c2-V]qupPu(*DtYS0d<&qN#/t,2!?/?2iqME4<,jj/*lU85
%IKWWS=!odRV,R6C_gIocoFnuR*aG?YdTd_Q\MU#p.1<@3*4KdDGcS'4"&'R-<^ob>EXV^lO&_[cQ-?ICjt7Q0FCNT1&R,BUfQ9'W
%3#UirPcVc=(!rCUWSNI(E!]:_-k>l`+VbcM7r[adR+Z7+ecnb.h<[TCh_,GeP2%6&1Z&Y6AQ";4X373K/-gh6Cf5her[7e_b=4PA
%P[k7S4X>V"Rif),M@gn9_J32=+t$kTlu72+C9-3]g0nnBdp7`V\jui3[_@ANB.,"t,2YH5&V0@b*EOT=$;cV\!m1%)cq6JW9);,L
%36JrSqG$J<<@g7Xfq4PSEfGUBH!Ii%+#7"_#_"3F^mDpa/@,cG[QU;,Vm/sO$&_5OMmCWm!1&bS=>Vs,]p4$@nJIO<e`/&bb'7>O
%BCK*jK&,`^J1mYOE%)a`9Z#tmTd!p%/F=k7j!@IILT6,TVK^/`!pKW*hZq[Vn17WS4$33?dXb.#(rg2\YSd$kDe1"c3=tB#Xla=<
%LrG2BM=Oh/AX83X\K$_Md=V)t`Ss0L;W9)WF#XP\*D8EH/rRd3!CuZ^rh1T<[u24g_fZU)cj_T;28/EH"5'Rc/$9sT,$P)8LZ8Yl
%md*V8l2t]!&FZur8NGNi]o0j.AQik/U^k$'>7Wnh_>sC0G[<i%"_>$S2>"SS)f`G(ZcpHn;M#14E\/>*?:;Ltp.FVIe^g:K$Ec1@
%\k+6hZIXV?Rg2QmaX7&g[O!iJ5;L^fT^mX*J>Dc=:<\8_KEL-A*"N9U70Z7G,_7^C3rXmq7J-D*<!TG<rQfsc),p/m3(n4kps7#0
%CXjBe_-eK9"3pL*:2]ogZUr3Iajjd=*ekm(Gi?q7*q-:.[ie#W%blTSGo55.9m1A$p!ab6G[.(mcMa;.e-BV(?odaT9"?_mN%R3*
%1aG9DFH:@l9BDYh`D8;PbpLhG)37L\oN$<sX\3TFGhu`Ga.\$qFQQh.(L[)<H^XYUO<Bk`=40sKa2'mf>\nm80_>9ccql=529Z%5
%Dq*85h?&!-;'djUM'[*8<c;;M!&8>n2:?9l'KF-OeW3Mp6/:ub.6/BkX8uN&$?gq"TQKWXE;jf5<Y`>R)^O[2nF=W8J*:^s9?h@Q
%"f/@.=H-rUcDrY$RS/>7S"ucKfgdt[\V$4!;>1ooMg?A*X'sHV(.S#FG!!%\-5V5c@?dJKp%42Y/==nA_f!UM]`7]:oc2:55+TdF
%G4/qZr"L[=1Qc7Z"p%4dSf]A`dUXF0\h]3mrb7L<YV38p`.[$P"C0MNd,8urYV4r9E#3k<.#Y9t0`E&klBc[8?sY>k]:K;mG8ISZ
%a\!(Z6fR=c]Y]UpF*C=?QM9I;1gA,M^!loa>2ZgBI9kiC:`B,:.8[:oPK<`F4jJ$6I->bq6.^M1RYHbJO(cs^gc+[JX?QLQ)7FWn
%JGX$Er*6^3EYcL+[9J;sj5b,/lncn\$s;Z%D$`$P@M1Pp["Zm_9U$WG2@Pg`Fp&Fc#L*r'['s<X;G9%.#&T_q)7u0R[aR"5rb?<2
%+&5BaV*=7rhFps`T%',Flq3(IHUhe4ObXWpJ+uiBlSIm-2g$S]Yt-<Kb!RuL/C1>]8+[%J&1&$,l0fcf,;s4U<%Jp[0k$@lSKCTH
%1i"D?FFr)N[.d,kdP%No<DW"_lIbq=r[!"jRf\)ePG!0F@YXAm<F:MI$T(RE_o2*Vhe0kn/)LIA2`XXQ^om6cjo#c*2K=W5Nol@W
%2O#Nj&Gu?ag-osBoO'dF%_lPYO"3h]qdjTS91geNHkgdZJD!CJSk:\OBG.aI=&JIU::lY,qi%hk)_.19:ec(UHZ43lHoPj/cu]8R
%R-]Ml7<tf!-4Te4lp+E$;Qr)KDIMm\pAr6)\HgH:%]m`4n)*c\=*u0$k[#DuiFjsfUAn>4B_1l;WV&XS-?>CiNcp4Ua^r>Q*O-PJ
%IQZU21r!G@'Q/DQ+N31[g:K1R>E1o;]L0,ZB)'TZ@ruV!&NBb.0-PSBL9F;;Mt#"'djl/j&Y#e`kukFj\ot:BN,uOk.ef7-VoP9E
%s)MR[<UG.mg4At@<Gbq_E?^87n>b3L?[ckt>'I7C9%P5pS,;78*P/#8N$UB>@I7UgD'BEMat1;JI4%1Hp&:L(G(09IV!#8klqupS
%E\s])&8h3Z@i3ehP&@HDe3;qo'nDQ6^+D%E.I)GUc%[Qn\,N2+SXDVB_b:7[69J_YKQMjuR+e>=8?\j=.&+B2J\OUXi$^#F>(XF\
%Qj5b4Niu,FP4^Yg>+8-D2S\&5\#5_CA7(shO1_(P@7@9!--pO]59-Q^@AMq7i2;gAR0ZH)1hAi0Q%UagE`F3gYfrO4a2]cROgbNS
%M[?ak^o=<uZJifJbL@Yk;:<?E9p`_YaW:o`I+5N3#J@t$=)B2ZqGK"Of7tIJnDi3<V95o3$)$^a.`7mn/]chBf\CR-"1kS?+$mt;
%Ue0iuOLk7,&D#!EX5F2e]:&<=TiD_d:E+qqa2q@&5Jo5[n?s+YX_NlV"%FTW.-5:p5J/k,<e_CVk<EkkXAgW/KUVs%[QASEIJe*f
%]J\`XTmk:2r=rL7T+3bWP!C%dF::-Fr)PcAQ`GG&=/X`lQeEip-92#&nl<S`5a96<0("gJBee*Q?_n`-`^P"Si<#?M][c?N<sY:,
%;eL?6']06a$^!qKD_j!s,B>H:W9WKN-X&P(H>*1Z60c^Z[3i(`SO%$^@QD_uCiYW<q&aL'Z]NA(@'7Dn;-!FYpj2DRd8;"R-jB;6
%\5U(]>ZCbh:c@T-)G7sh>KCWn81mc@r4Ra)2NiF/#(n)o0$s<&!k=l"0SDWRf,J-4eF^k12H_-'WRD'j1aa$KB.$P?B1^*K)&#S9
%9!U4;0-O=&U@m22!+'\,:d/O\&9(5K'FCJe-(mQpd[A&@C#$$>9@CD.UteiR8L!do\3AmaZF[AXg^1Ts9L^0&5)e4BSimr1?"PJ7
%hS'6iQZ4*.@8W<P#<U7>0aJL8Z#7X:7C;(%IoeTIY%/]N!)QASUjt[.P@kDG#uEKe4$k2Kn_%3_S/"<=M`qdek]oRjn:lsd2E1t@
%29*F4VV#3i[@)c91'0hiMl]@[[)2"/We$sIRu!MI5(8>_64sO<^%P9&6iqkuaWflIU8jrd@RbCh%lH?U5)_j47Qbh85_oT/LZg@#
%RueTI#5AZ-EcH1o$T%uACq(-TD$Y3AD++Lpr"e)]/2>W`K_<SMc(9./[I%f5];uQr%:.&VVPB@_6=!_KD:k+:R7\<H)ZnR>p8,*H
%AaUj(OgU%Q'tj`(GM]:('tj`.G%:!$&;PgD)Ku$3=1(-rd-t<2#W?Oa*nT8HC[/D0:p6l\Q@2ObkJ1ZbI])C9_Bsi3/?<O9FC:Mq
%@m#4b4.ot=6L[oeZUO(P'+D&?*c462:$WGn!#*PafPc;<`W6#oE_qOfWiE1:GA5IUUoN607TAKXTR:i5#&NEbQ87Z(KV=$eMp/BZ
%>?;d[88b-S$JaaNQ5QK]KMrAhh$Zu'DQ(!![poU7YeE:0Z#lm/@E+orIF(nIDap@ZaOgK.@8im7Y*eKe-oh$?`V`V;lQR%eCf=U'
%.*RouK^;nYf`Xs<IrJ30B!E^u?LX:l;G_/UO2q2?S;A5s&-'3nHmfICgCc8d?sZZbcFC[88-dQ&1U^?FZ4(X'1TnKCm)H64kRSq)
%`qd)a/;@3=(fknXJVCNa9,!1'LGcW3:>:S'UeRs6546<4P)Xo.2XU)H5ZMD\"(<e)M$fYZ\H.Vj])Zj;,rsf:HYYPcN&Y_LEGq1,
%Obc`mE:i,BP`?"agrn\dLD\/tI@1PJrFm*88?i%j+#B:!]+JtcS%_[D7/ll*Ilu4E]\t*sgJiCd`$)+5T:3(`1CSUail3_U8eH;K
%SiEN+6rcc_bDa@>fIS5nRkg_*k$VIa,j#-U`3sPX'SK1K'?s3i_YGP/$I5ZD?f!gHDe/\Jl+Ru\3(3ZJAV,P=&b,++a$B2bG6:<R
%B0bdB-6dj;VXu%($=ss6304R)@c#36T=u'^Z;r5qa/#3"8"Od6IL=RLj,-/Q:H"Hs5YC6,4P@L!p$M+/;BtIqCfN"]>![_$Wk:RA
%S(;V[&P+[;*_ph6V3&`--rKO\@%#%&bMtCq&#T`l/jXs4co5+M9+CQ;+m!Jo>Wb-oN-UFh%?0LC4\1"(#37#K'3W2h3UfdFb"bu$
%e9fQ4_B_sh1"R(+cL-kW*>?h@cCt"[/VqB!p$#.#bpL$=O^5hBW^58JpH%I<;j3!oC)FrDJ!6`YdbN(45[llW7?\P:JZ`(K(KQOF
%XK9#@h;QLj!>&IVV[BiMhq"[2-rU]$!k#ueJSj,+S608b'PdaIEn+aOTe"0eH%"_T9SrRe<Fqg'j?`^Go<#tC=Ih$;/l_KaT\"`H
%-c`4##f)^8Qljkb&YAS44K`l!14s/frO@9ufZ]V:FYt4#rlb4&SrAo,M%835l6Uats%KWDRj2N]7s8Sa?[iquq5q6.5GmVb)PYr:
%IO*f?Z5jP<5rqh8-:%5lT`*PSqk2S=-CT9V2##e>rV6%Qo`FShbcm#&PusNY[L[L-lZp#CK7TF%O5!)sF_Zni&cZlS'7A'SF7"j(
%7$jI,^)MdQLO3S33lOW[I:t__br'd"O@uZ8LDYeq$0Jrk/TcTo9-s:36H3&:^XhmB2c$4aRgn0;.t6aZcFFV&Y-+7(cbo^P!42D_
%)j'R)<NqKS:qhB!i(ss4IO2+]noYQ&7.Lh,^%#Rd]#m&]m+:-Lb@?fmd0,F=7fAZdSbG?n4_@C7CqQc]&p?uUb8+"l2!7c4hUB%3
%klJ4[#lXkeA_+S$RI,27QkBZ5p".&>E<Os>C6N"0&il/$E+'[mK>&FDZB7S2d'L29]"$s?,A`,S,Fp)2A#;_3Tjlr3"0V"g?.%EC
%=Ymu#>CunkA[u`JKZ_(prGRhs417ON'eTD<f*i2:r-cRHK..;gceX@ZQQd1YIE-t,):'coSAT]TE0KgLW$W7ISk9]:@]pY/&BW1G
%T5K(2aG<AA50Od<GD/Vum#o1fK:`#6c[X`.$_?-<GIotJ0GWSW6H56rVV]SUV)2X\FJlrd,3fZF_4)Y,G:f1L`lO56W^TfRim&Xc
%</YD`Fj#V=U6JMRYeWpOQ=C2h:GG#':%EfCXRbh[dX(L]Ocj*:Ib6hGaO2GboW+u0:EIY"k\#&n8.-4u&sFY2R1BSM!c)%lENQK9
%h_)*70d7:sd;LSb.m*8&V!VS?ZCW,R)2G9]i^O#37buIY"cQ>3q`YDCI6:8C#\O?8r1RZ`6XCLo.I$YaaZJXM4=MQ]<h2EtW#*in
%4Dt#1jHtn/U\iLhkU-\$/5BMX0`:/@mcNb,LH^,)#I'iOVZTrVR?nD-Rm%k.TH"=^#qj'k..O^Zn8L4Y9NR5gNoO?o/\_>u]P)O#
%F%%d.[0Ji5DHuT@>[C]YHU":j6^d9)nZ-m?m_l`.3sc^,je1Y*;GA(L0%SK/Xsn<TZgD9s;]7l"795e3g\&18^[r(]6KTT3<73)&
%W:+sMp<Pf/Wdfk_"=0hsWR>oB/\5YoRl!QNKp4OrNiVGdB/DEb_2KXNlX:b;*Ji2rf>fi<U'I^0-q,n'Ra*&,k]2ut&h\`&5":Jp
%!B0RN7WK+(T@6FFIMU%<19=W-Ri6AYn.0OK+-?o*CTM'b65l6CfY**M5=XF7>_V5G'8^s5jatoUK6fp)a;<CdI[R*0Rq$8,-'3q_
%n\_kt9:\G2B.m"rK[aD*F,Ub@=&'W^.+5uncJ1PHNj7CD,mCd)++K)X.B!dOcAg^>.qK"anT-fW!#O5a+@Ju<d;SUYp^DZ6N;7IY
%@:R=6.ECG(TeD1Uj'ODk/""Sg[]qubYCpAf0h[%D8b$8=WSUI(>rQ(@&i<I76skYk<2=MY0t0H?%uaHBq[\]9c+KMe#eeU8m=NAL
%S7/,@KrU^k35oX^gNsUZ`pVU[&=8Z(d+lt`>'ENrGF-NhDZ[\@r<P:"GLj$'1k!I5G_GMS]CB;+Ehe`3_kF(fH5)h7qKA7siYJ]:
%(@9&mBN1Gjm4kD0dnFZP,N_TTi8Lfk#:_0+=)aJ-lT6c.RV!Hl(c93m(X&P79@fnM73mg([dpVcAtW=TNt1s^G=K5@=7\Ba&Ms$a
%#H:L&%[qZ46[;Ld"KnC1KXZ<C<H'UiOE=U?f(Eio2nt-BF'lX;!k:(F\\T[F481ZcT5+,+&c6MW$]l0d(98,L7qqJ"c#4G]DXi\M
%f->`m2,mD''oG\ea/V^>9;0RhO(?p:?mL70foJMTOSj'!<D)?nSiMI,jC%edH>AADY-$Vn:2T`=^Ps8uH4F_TeGW#ei;n4h\h8\Z
%\,/ORpYC1(.FR6fG>kq1Z2khjAI_0lEl;Z@\#)e"OWU1(X_B#j+=93fH\qpcaRN;U)T$OKBGu%#r?o5_HBsZm+a,et+5QoMfMU1W
%$#C!<O4PnW9Yd,99Cu7Bn'Bn)G;]#$R#`5ZO)N1_2sS!HlWk:N"`+fi\<j=rkN'(+>JDWi2RZ#<Z1EJ$Ti'D\/elhn90Vfp.s2.3
%;W&gVBfZY=>nlE_4E[Q7"MG4U!fO$NDhN>:2T<A&I*E?WMSk^.&+>pBC)k=q3"JPE[$8gI(\QckUc_8U]JiPt\qe4Z#^(_Y)O9)\
%*bNO/N:i*?G%`h/0?5D]<;gpqV3b>daG7)"36WRD1IaMn*F"IZWTU7fI;A0Jr,M(1a"U_3$dQ0D.=u^/E3fSk[&3WJ?G-`.qjqh0
%UsF+[Am'g,pT"t6;o5WWNTcr8`nk>DrL]>#QAgbL9&Fe0IWP-G^9q2&mYa3KSuG\!R?l#-3YfCDlXXf^?bg0N$(rq.W?j<7d0S,S
%$$[GL.XS&L*oG-Go@#kap0UX02L[0I_,K^7mR.%l<kkiQ?M;fgj$0&-=a:=1OcoS;MB2]]Oh([%]akG)PWHpJ%,mb<*c9f3J2_(D
%,Ta^dKX,<ZME-\2F!itf!GDc[HJSM(oUU=jMp>hceP!Bl`u_*@*jt>@^"5dtj0)ec0JYh8KW`Ra&V_Gt\(KYBG'.JgA;j;T":H6M
%?@qFhU6dFMIJjM*l2>A/fBjtP7T\biL.9p!bV+48BC%]sZ`d\m9XVl+#&YZfjgo<\Og^h'0FW7(mW45Y+-"[(,^70mHH9ROH>ZrJ
%'I@0@JZbhul$*aJHPq-]I5jrq8E0%Up9Lg](^s0D5JD\7/:W"_`P5kEp7eC8+(IAgF3>D;Rs"JbDQ\+OLK6LVD9E4LX4VOf$N"=5
%2G0F_O$.W4I.+7<&!u.+9`sKik4fh^"7^VP),n8EHW=T6m4Aj-<F3*1RhEW!j0fIg@a_XrM&fudr`3%&Z78`8lPTJ;3a5SV8]pZf
%na]=eDark,"6m6gR(A3W]:,&M9bG#6FGef;14KP("q4d9=@lC8#j0)V>7O;mE>0`$;YaU-GR38!]+,=j_mV>Aa]XkIZ4-mc8N*d>
%nPD)ljXg;lPCcL[UBHf0D+0&1S.C)[E(_GH2lAK+BtIHP1Q;tkKTLf^D2d;hZpS"J?8Dk,`T_>k@gV-ZGVIq?lJE+"C.9"NEBFoU
%Ygc?_n$tES1WN#BRZs%EY##V&:T><Gg_B898VPAi8_W2GBB`/fi_"[B]'=)E7,Cgcga9Z'8'(Pd`mhU6A64oPG:;gU0A:9[`ERsY
%EZA"#%Gp[Y?5\fCd\ORc'D17g[XeN@Zt?MF-["mXO.T!S6pt/u3$]/IN+WS3?-pQ+OD^-2h=YVTr^;pZiblsO-':&Yr(nMI&K$Bo
%QK&;n4s^McC=Z^P'>YJdE'KA.jU]Mcm&iLK84]!WW"bkQBJ-SX@3p/[Th`_DD[b9`>8]N0FliPMrS_H`%_-+X"lde,M:c3,V0J4G
%b/d>0`d:bj4mSDmD'?I,G`%uDV!c,A%41k'<&%T.GO.jKGniL45[Z85d`V>4j$Pts,S;NXl2oIFO#uL3"plKbRZ*Lc-HAoheURX;
%KZc(/`R;"k0*=;24Tt2A6Z9W[HAldI`%<&a2$OAY4+0/YTbF-\)"sFoYflZ`$H[t%.O'IF*_=m+M)TN8.SDCc'TSbmKK(W'[-0sg
%'@>)G3CL:)a,&OgFs1t"jrFFjbO>(.!^1B;gM!Ra*TWSF8GH`go(=gF.A[S=[C#b#H,[_D1M4PTq!a?MSekWiS[KSXZ!l#4b[m=1
%rlDnrPTN:[[:)Sld*OqgPh6Ut&O?2][=FI@9t//KVQ(rNO^$?JPCt-P)S-P+cYSSS5'/mA.4I_Hc'W]V6dpoA$H_bM5#R:`m8=20
%^XRORB\J]<AFEh'V+e$"]_0VgVkMA(<KYY0m1T8m3gGfcU@/5r:"p4"7k/:8J(1D:?,BDA7k\_K#;W<F1!d*0_$<qLiktA_0gY;&
%K:biQ_1n-<mFR\3Jd],WJ^TGW_6:)=d"%q*)*p-^&IQiWfDSO4YUVKjo2_a?_IXojG,T6AQ`0_DbRi!Dch90P9Aq.9X:qpYoBbDL
%c_kh$>Y)KZS'H#,flJ"/_<d:tcp:#-+--O9D%MY`q2>7AoV\a9L&(sH<09=p?kkUUe]bH.&91[1hTH<t@>^AZ![(dZ$)@0G$&OV"
%U&rRJP&@O!#T1_>7@?1>ok<.Fn`#7TE2<lHi6L;u6!-_`"\HM0U7GkJb*8mKKu7TS9$S*iiT0d94p^;AIYMB'mWqbAYaZ5BC*odV
%?AkV\m>"hUFNbj!^N_2c7AW#Q1r_9UN/T2bc"?l7I""qt-MG9l1gn&*>Pjc".%7M2X`N#$K[BBJ'G[tq3cGs6j5HpJocsSq@p75I
%',bBLH,N^;-S:5S9sF:NR7:E.:oFP<D]13d/uCIY%6`oZ+U.B.pqs;qT`+Knl2#?q5_?]!_n9NW"fGu@K9(9r]8o=fOD#"Bk^to%
%*8qeooOu4p2W>X%Bo[ATO4PU)L2]B/.rj+j=7RiecbX0O:@ph"#^'Wr3-&LJn8*'Q63r7rTmKWM%T#r.`?k?dVPcncKGcbL1XGml
%gg(?RB8mJ^?()k#d:EMYk(]M5WpV,4f]_UBs!7ne5$c_)(sJrRZ$TW^IJ0LP*ki$n(p=i<+G2L:CPdHG-ZX%h"9'2jKl#N*/5+hc
%$'iri:rAB*;IZ/<..2-a>H4Sn=GJ<j53MAfc+BSYT4n"n&a)8_TK<R6*L_4!>aMDRflWLUU$_`p:IfDpdf\i53>?Wr,(EWhO,%/)
%4B3DYUQ!hY;B4,`kG<^(B2:u0>=acs`^2/o.UC*Ro8l+U.iq!@$HkrGlr^aq^JpiSq[I2kTakX=J<.$O*jRrIJuK>*V2)'_mIa=V
%C`==Ua>3HPe'Q(,3"Xlc!b2XHS&,7/UE^!SUrMKl,pm1;4\\#.\ak0P4&Ua>+DoVUTHnh&^Kl^RB:8.0Z3oB94DTr("7I=-[_iD>
%jb`cU<U"C0<R^t[>Pt3[M#5f+;4oQSk?fk,HRUD=;4i='Te?l)lU02BdgWcdl;4!=qaf#H7n<\OS(?+<S2r5CkFj<<`4b14YGb3m
%Uk"3&RP6?*bkE2,3FSFM=OnBNAo4gAm*QL<7QA?k;'kT-^`_OL]Ib]TFiaRX[SP&Hor['d3*(A51;aq@hdYXrGCNr6PVt5liUL1g
%7^Z8a4(<o>V9MSrL%_>#BcbAA..fD+1HJ+rVHg88]Ke:dE"1PoahBFU"3j..HlPq8R^GRh?XL_H362N(?g9Q`/,?cq?ZP=8T+m92
%Ghh`6=:IBCji#[MI!bdqFaImdQ#u$t_q%U!5<*he=7W&kqFUq$s#P\"ZX%WtC!.sa'>4!.Z0Umc/TG]bVRr%BO<csc2A`<ddN3$A
%Y'`uo]$H(8NKCkKD^Ng]-g:R"8ED""rr,q[au,W7+lD.f[h3FJ"Lm8L0'AdjoC,D8#^-0EjLgQ.-AIomJ9LR_]/`c+pc.XLQ793J
%opW>4>H5qrJg\a1h1m4qC8+?`aCeM(gM_F.C.c3tjm@IU3RsPPAb.Q8J`jb$6?Jld=L2"O6KU97S<&jWC[@)+[!j#F39cs4F8mPl
%H)U#b/qG&h]H+0i-01deqAp2<jQLqLL&F38^cJA5XHBF)E3[l[L4YJ%H^H'W=4R)BSKc'SMG\DW7]#f3NQ:)%(r@rRk+t;7klNp0
%Z`\tUU=1)6p4Lb8TA<5M'?&jRrR-q\b[T\hTIScno\DGbFFX1pM"'Gm]\gkg8#oYT7-N`>?`IFN?1Q<<["sOM0O?SYOc/C2^:s2>
%QFrGZQM9$_"%']A83]%h0V'%Dn.[PL+>UJ]ZrU>2`C-`FK+0Ci^55P*m&$hKM#J2(hr'j.6mkQl3,_I_;P']Qjg6]7BelKgk'l*o
%Y\5NBGT35*o?=c1oqfnZ*g\Sd^UQ&*?o33c,!<!ILNWTX)gWCr8gF#<gIX!Nbp,-e)DodPlG$RD0@&.'\Mp0p.;P<;]EIlY.l2$L
%&*U)rqBI&blMR6\\UXBo:YhV:Vf#KFj\5674<=9<3sV_Pesp^F)%fppqYEoq_b`7(%eX.?q:\b!p^?RN]f'u6k9/O5QRb,e4o0.+
%A/V`8F>pNfT5T^_$3i;`+Rb&25.3"#hRHeT'S:6e\n(+"c`i#^g2MnuT"41+c.9MScGm`/g4L*MHG<_8DqN`5\8?S]7cr7!0C'[W
%SRJr[nGK,Z1RsWu>iCh1Vn7Dd<AM&=gjg?^^D*)n.!%%3m\:hI-qKccg7a&Db`P'6`*>>kgrkg(WlJc=`71cWG/njRLJagalAgEE
%7=W:mgk1l.mW@5M69F;8f+9Ot/U"Ud29'sTqdbD5gZNl)0uhj/eT`W=Xi3gLIdgmqPO0$nYP95\-HBjB7iY8c4^!0N_2f-VZm%`b
%#)A+?%44\s-X>Ig)Fof?U&9"+ZB:pV@+M8RnC)+#fQl!-P17!SZS^re47Ye#@300=PGRZ2RSTI>%5=*TR>mjcRuq3TDjiC*DJuq,
%nZ'`XhB:6CL2T%&4aGJarat^Q(6,U+0N7U!F[`#ti8rHJV%R6#Zc8Sn/.jagf%Ag:Eo/BXelXorLe0Kp9W5kNFMD)2j-6(b/:KLZ
%qC#j?bSfTr<L(-FlDA&)AS'V,n=t&bIbYsjFIK\`?fYNWlG\SR-WPGT:aVcNNS5X$nq&jDAUWT'gonP,`.-IsGUW/E3RZH/<,9pN
%30)7ke7/-ge]uL5'O;;\eC*OGECU0b.4#:&c">+slsF*@P?mm%O(d=LVW@[rgf3^T<'?pO<ieZf.DMn)dBpu=jQYWC8#S%H[uYkq
%M8XE]X2rgs8'*%(:.HjoosUEM@%\!2'V!)ikP-1PP]<20G,=:K#.u*9jt(MKTotVnTApuQ12_jSII/om6Rl,JL)iY>Ah>M0Q+1@A
%eJbhQD@.fC,0,-]ZP_JM-@7.\DqeiL4FBltWaV,jNCHSVA_g[<`)2%S\YEffRB+Yp>60""2,lFA=N4UMTCMN(AakW<<\S=B]pF,.
%mV'.Q?ZH]u"7kEs9#3d?_M[;qV5`4LpH>glk*Te41uN7a+i+.NLe3$jOuQ#keBBK0p!gid&<EebrJdGZEN[1P17rrUJc==Q"4<fJ
%&nc_d7J[VR3EAhq5^nN#3"?UhUL"TM^O![m`;".($s%LHh1"T<l^P9BTm4M7%cduO?T'?j[[kH.NPd+@N?A.\K_N5PZ2]=Po,m;-
%s7(U:p)j>/5QC9@kJ&1[`uj03`olr3OQ666Vs*YRpK<)q<doZF+4%\jP)gEl7?c%6]Kqe.kMMuUk6mk-b@foal1/!O=i,PeI[2bh
%XS`iJ5+d=W2P8=16(F#!hkA?Yo?WQ^Zg+mhq5jK>JNiD66_VgB]M>2^a5<W=k6mk-dWafNW:X6eAMSZtrApK5*e0)ET.bGA;BO4L
%9rcO^cdM*bo'=6jI/G""ID"KPEd^u;Q<p2Kh]URloC#NBoD*T$pA';QC%b^*=e^=FIYVY[06iq%T9Z%FgLoV\$27TuFio+rrXS0V
%?goW64t8ck][+ah;"*uZmu[#0"jbWc]CL"Gr2ff+"[?>_((!34n-0=dT7</_T9Z%Fib.@3aS<OKI#j;[cbDcen)n&UjQ?oB-09@4
%k@jZsq)Mo5<.:.%hfW9RkP#?jVW[.6mh#-_"n,:[irr5BoX"+p2#V=GF%#tE`cG,XXSaVP^FMN;fDjt0rd2M2<dp@?T9Z#pm7699
%C&;33.H5fbiZ7<5J&^g8rU.&El21Dc0,+,e]:PhfGMVFQr)rh9)Lm7ilU:_g_&HAQI/[8(IoLlccC]$(K@$7:^I.83eil[jcaqHN
%qQoaV`;Zk8%^eN.n1;+7.fUs2^]3dC_*9Hb9_$H,h]VaXoC('(o**GQrO_W!<<',u1>+m`J"#f_Q(K<!BB<bTs&o/#dXP;HQM04$
%?RPin$f7TVkO[#_s0M:&o`(lfQ2gnln;[X%>O]30!+55M$illK7gOXk5:ZoQb0PqGS<_uq"5jRD&Hq#"Ss9FdjZaC^i#ePU"[M1Y
%KE:k"B;GW2q,q]f05pjenc3pN>64hM_-7NQI)3-5!Nc3Z9E8GhN_f^_n>oRh.mGO"JBDfP"n:.#&Ie0<4XV,_jut:6i,<sJ2Sd*$
%Wc.q[Io\VGQ(J^#E95^5"8IIl"9eXS=!\"Eq!0+*O2([GMu[2R[#b8<^EFo=f"N@Ui"s$Y-bpP2,:L>[GZI^mQ/</gGl6D7A-Mm_
%Q\>SaQcJ!M(ARIts1PpmkMfG2!`A]q"U7*MY=K)slX(5ALgB@YR/q6:Y6tg/"]%`"\F*:)"4=?>jTbL3<s8ig.!n:$^^'F/U'%Lo
%ZL!+6ISk@*<n5CA"+:(gnGsSkYKIIG"n)^.cjkLlJq21^,=5d2rcK([^Yj5X!l!S%.=ugD.5:m)ISu2VFl*cVn87W:8HQWa%8d0j
%s/[c&YK5#r'<q&ndKI;1^Fi8Hn%n>\"FU,=JHFF$'8Zd:>FlQY@-)TC$Gnt!Z;:Rm@IH`%n-*`d(%D#Xj9kh^Y6u,mH24OP!A"2<
%BS$3QS8<cTV1013i#ePU0!OsAFn#N[gg?C$i!\BR0OU"&*=2hgDdF57Lei7f`dj?3&Mda8hiT[5f^<l:K5X!3PV`+.o5=mQI#BE7
%1Qhs@r0F8^?gs)W!FG8]Yedf@Im_q?Q/<04q"F;RGlte=*J"<B_K-=phZBnNN6&iE)a`dBAIeLtGD$J$C[Xe7n-/9:*>hZISD:q$
%IeK+[#BsS199KP"n\$Q$?mO^sZ3Q+e4st`nb'tad@'&I2iWlR_Nr/oDVsam6&H2L-"G0Lpc\WbI55QcH"QQh\'12Kbk5S`pJX)iB
%6O9(SbAmkq?L[[m&Ia5?>nV]AGZ#6lJGnYA&bt@0KG!upmmn\m"n.6l35=EpGm($O]I]0&06gbH+U6n:OT[#']H`WU:O#AX_<EW!
%8L:V3ZXO4q3`!jDnBK8d-89#p*Q`sf0DPF=$%B^3Z3egQH;6H9.;>tY-TJg03Um5bF$:h@i.T(I";E%OoI1(MVPLpYU;4h,O\oLY
%m2JA!I/XR("fLuV-)TV5k3(e>=SWCl"_UoO/ucVj4=dGib0S0ZY\EP3/+<`281X05mt`LP"n0M_i;'8S(AMCc8h@4;P9LC9qhE;r
%T79@EJ_fgUe:RSfA[)D&s,Pk9?LX9=!akGuj8phr/%WO=:Wb<"mSgt1DXkou$[DY&nHHYb8biP@I9(lLQ(O=L@-)T#)"<-dA/P)n
%B8%2Tgh3H#puZe=)#/],j;@ZDB*B0er7ZWRahZ'FMDCjq>I"Zb_&L6"I/Z]OL9p=>iXE!fPWT'6^*D!T(VD'A^_aX.dXW.H-.BXG
%]HbqA(VD!CJ/>jEf"`*7,M0^I]Hc(E(Ha/"i#d;KZiSLf-/63O]Hc3^(VD!K^usSeDr;"pQ#CX'k6)c0q)Jb:a3$&k3:I+?a>iYm
%:C9+lmW289W;M[CK:dX!c@IWn8'lf?GZN7DQ(Je6n=-&6F[5&dKcOFoF_M)pi!jZ25QA=-"(1Q!^k4.%-h6]Y[(d/tn=*dOH/K(e
%&UN@ChN3'Qo1t3+T^L9L%t*oRJe)b<l]Mcc?LYEm+8l%XZ4HAYkCaou8,*8P#QNNDiX_WVYKK0*'4)K*n-`QfJFEfV/ctQ&48qPN
%_Ng`,Jmd\aU`dDLg><^!E8SA^#OseHs$@:6Q(O7nn.tN)."kss\h&Lno@J[>pk!^c+oHrD`??9diNM;cBJR4F&A__#7j?sOq"uY)
%LbG%nH^P//6a$kdn-/8O7C[PK(Q5NnpUXU_c/$tT,Q*/F,pVhZM8'aan5\D-Z4[)RF2AN*o/kA4I_k@0&T$ksne$qrp(mcCrjCo7
%,Zsj_&IDes?^HoE/c.OO$!2RN9#;'kf>T$1Jp69$pk!\m-2<(9,UMZnGt1hc06fufipM$f948--ITBXhDgktsJhM@=?@jhT<a`e0
%T9GXMj`a*>lu7AYAqDYmGD%=<JnLo,>kpCb$!)LFDW:(\s%C1b5HjEPk\8EN"qodTS_sn4&Y@nghN=D>7rDWGTAU+6Oe9,gd9[HY
%^^Ha"T_S6PhhY*VqtW0]./9*PKIFS5HrGoS06g!GinMe/,=fR74=`sRb&9jLn-/9:;LH)b1X]XP;R#_u_A'*LN\n_aT5TTcn-..\
%;n2C>!Yo&ls*]`]Da48V8B&'1s7O]fUu20ls7p%%msh$kZmu'iJ,TO@d;t?!hr)8K.F$b3&Y-+FOA>,)I\-#1Yg/BVR;b@_gOK,c
%<Xf[h"L1]_bl6).A.cF'gK,>Pi).`Yj`&_&GO4I3hUgt@X-EpjgGW8T[+p\SA!n<JK,$#%f+4m7AA@dq\81IT8AX+Y_b%1i$BG;0
%n&Jr"h7+r>R6,K#Qe2Y^<')171g;6m=?oWsJY,rWH1CC^/g68*,B"RrT6:.Jr_/C6cNhQ]s)Z(GGNV$ijgaF<6cJ`hc<u(tq;uWN
%e+T=5qt$NVf@SQ`P"#pa\G./s?V,3nj2AoOrJ^q!k:4M=A0)%p`FiPP8ihHH9eOcP\+;9Ns*m9skP4Forf^F)Zf4pmNL9;:]IWW:
%5To`1c<kW?6mDB'-)@'2"ZI%Pf"B!C67Hc=;bqtP6/9aFB*(_seZeS5kddH'-SlKK7+C7OI,9o/]d09GLU&0C`%n3Z#tKiYG6TIn
%V<rCAol?ZoR[+OWBk!I>,pLpN3NUA8'-K)]ZMB`;X]5;E)h:;'VBBto&^P)-*[f`!.B#8%.PQgPY#&roMpsli""'<W:\GcV4cVAe
%54(ci4ZMG+2J_C5_a3J7i4*V_I0SRTr)b/U71@72OXhJCc^P_lDX1V.a*K7L"8$i\ECd?nXRdr[MK]\>#3)M>f->P:gY@b1-FfqJ
%2jV48X>t.U=DHZn`PDZabm]&JE]0FIA?/6OSSP1;1?c8-.3b*FRH<:JgqD4.gGR9s9+Y,Z#h67\:9u*AP!Vh(O/qT!>;D8nMRXbR
%dmNGhX7I;[S@;VUZ)1B8gm<!R'!>?QUskJ^"pkU!<\X(pPe=G_)3X3#A<i_::"PDNXr8LTi"uo/2Sa_iJ:nl&8J_%8@Pc'q@Ui#7
%j=umjIf"$Q5D<&Cj\4i<oRm!o0[".B#."kK.:(e>+Jo8UJZ#k9"Cer4SPJ@5:XKrY8s$apiIK^Bm/g*&qA]c,jg,7700%([_iBW^
%&k!)ND?12eT@+<og31I"Y2HebDRn4SK>P<^F,'[5E?ElQk<uGaG_f!*8[jV+9CS"h6U4W\ZT727eo3VHc`LG8+#,KZ&e?HNM#+H"
%@4NXQ6i_6X!eR#GZhPFPhilHh29V2.DJ3K,6]?S!=>\'RG%8&6X=#r]G\]_dGEAU,@HJIW[`lHnr_bDpHtZ7O&_Fl[.@Q.?<RVXU
%,sa`<c5FZ%3qt^U\s6u"TG5gAc#`&_AOb6>%sBD>8MQ(Mn5]rEc(dB#>_u8WD]H)$l<]M5N+&Us1%e'.SNrVN,mhH!c^PBB=KlS]
%JQ4K2)EuNSo7Z?KLIdPQ%\/H!$/TqGa(FTra4[8g;n:KcJ@3u#U>-GF(/s0($rT.2n3`1N!*L47J6#q,'jp@H!5p=Z'o:M1LnXp[
%*47ks<Q(SjYgdYH]4$Rp8k(0>nV:%-C1a@9"TGk,qCo4r5F@5NJ-,?t7#FBgT%4QuN%1uV\7nYg$QIERZZQ\g%!"MWp@!5EQ2oI=
%Lhd3ImgfoJq5]5;(7[@/NZb0>?3fe<:.\rpO8rNulT?^]'`^*oG$ArZ!Rhn-L?*J[3A<<I<^AugH!Z"mc5jkFVP4_4$l\]Q?!HP8
%GMV_;Ao.MCmYjBC[6O8Krlu!j:Y?iaBY+.KhPK6Jn_-1o(sqS1[:9MmgoLC/5OR,%_s@3m\"E-Vf\_.l[qC3fq;/:!3Vq%8rU&cp
%4864VDslH=I_N:<PH*f:rS*:8YO:=ZmWrLV2s8ZU]D/k-n*T/mIf>h-r7fOVpN#kB]XXG\qt]B'rl%YkDLSm4.b$n>*V\l@1Vl;R
%4CksPGC.:)MPr%gYAmptrAng\J<h#f[H"<<fC0\IO&uCM0=95_E`M,2&_B#SL1BR4@_Pk<Q,('_p[&.g:FgfOD1sL7e:#6JKC!C#
%C#I"m`27$4L<PI"440)n-%]\WR5Nc4gQg+3lV?9Hs3g^ccBHlmEkl>j4^A/ueZM%/>O7tCS1VUM?TS3_'mfn-OE`TE4%qd3hAI`U
%i16S$GJ#_6hgYQaiHkF0(C'4,Y45R\p157>Hc59q9)S_(o5I:r1GY$U%H@>rea3oO_81(NN[T]m&!sd_Pi,b60(ERmrT)J&eRNb/
%pbh"Ld-kPp5`kAi5,jI+->Mi/2BN3P;IZ0kj%K&dms>4,^2_k@^Cd=sEj5_?dbSP?-<nG&-In:2KRdVn=3lq?OepF=oAR$h6gtW5
%oQ0Xj4\N't5XK]:Z-8'fkKg7]]K^tLWA05<7(SYA"VgEJ>480uM+[]GFK^hfEAgV-?=6V"aFGt`q*RC5&P8W#<WMQ(R#@.JJ,Cle
%$Q&&'RtG870[Q7WesXbAo1V/?*B!LP#7Kp?FF[m.Z2Wj+id@He"5I:]M]+e$l%T6rfNV>elPu%iRUmP#JfU$/KkH[OOTD[458#@&
%H*"QCXeH,#BF*aaAJhbT"Dih>B)O\aZ..<LYYEUhE.=`qf,1CZ/j:&1!K:0I4>LAS]Km+<;n\DIM#j?;EsCmLJfTGC2.ci>Ejt!9
%4#bS6qrb>5/U%ij0X[a2XWWi4)EqsO,4qF\6nt\P`OI^p@h@U#R/4aO>*&r8e5VY6I,\q?>A:V=ciO5kiQS3n/;]1h2,o?cAa]HF
%MJ5b"rUB.U0_@1H3W/'!>P`K8hj2)[CG_eC9:P6J`a=M_]Ra"a#s.D;3@<?%I$D;,n63)U_A8HC[2M9T70%NYh=>MYdbNg1M\d+Q
%fQ25b#FGefe;r3TEt$2L<>-?`b6Z+-XF$Aj8$FW#I&IB<Od*QE4bfNM_b#grO(5C?Yh)OA^3XFt;,]:<K^LA+2'C-K"ZDk,JSJ:Q
%)'I31*0`=p]PsGBI@!U?MW?W^IW'S7=Q9T\O1Z[]?p)U2=$(V@rA<r:9s&M"s2UJcU$KfBMfl!gd7=a/TCtS%erb:;[BFN53>T*C
%&V:3?[@,F09VGq:]%DEA8s:lnNqn#]1.c"QGU41QUj":cqt_=E\.Jhp%-.h%M:U*/8<c_9/359BQ(Wsfpf4hAQ(2`'HCE%>Z)/t2
%";j:bO.a^V%,jMij*pj[<TMj=9ofhh,RNCi6]am&<C$!;5bM_mIE*`g'"((@]Q#A4eAi;`pkY7V[Kc0+cjZAlMlQ>,PBRH(Y1R50
%#da6+!5_1Ao,,lXc&36Bf,Z+]ZXZ:m3=d'pk:(*.i]1,r/W_0`r8U=Q)p'%R`N4#jX^jG]a]=LN+<-BT\gTO_9fqf)a^;$Ma^&**
%-n9"9Uap),(W;chE]nhq01''4rYd8jl+7Na<Mon:UfTA*q4+M`DV1%$MUCBd!9^=9l(a]%1oPLh&0\5OnJq$noc>(F1o/HskX9sS
%_2j>B`b&8aW#h*T"&u<WL6P$#&,L""!Y>SJjZ]5S23mkfX,c.P;U4oG&0T!L-:0BNYtVVHbf$8@<e\OIob:5WIJeRN0S3_:Y"G;g
%^E+f:U'qAg8^^UBViOGB$;\h?k]n:\\B]%Hk/,*rgJdWSIf@i2\P-:.HM?5t@`&E[*/!`Ah1uFaQDZ%@"#uQ(bT[_.LCQ`*q.NCm
%32Vo3cb8%LZk:'g]/?mSo5b6c#Mm[.0PXIi<0Imp+(/Wf?IEka^S]\%AU5>Y^f2AT,-.CcETEWSGo@JW-LY1N7=kW)O3_7E,/,HN
%X"j#t>6$Xb#,`K0c:W<s/SM7n3nUB1S,k]Qn3b'(d@t;BhG$#Tm/?EfS6AYO]PtBEeB2U2Q5!T7%Dm_XL</V%"G@9(S22.AF*mA]
%9@*JZSKYsA#4,D0*dYK=BJ;fL)I^1V9^"k/H?9kQK/3OB?0LPAIf*H)8QG#V+\&cglqB(TO0Y$nd4C53N>g+#Q0qXDhuHI[QBemF
%>W4qLQp5X[c`Q?!YSq7G#)SM-O?poHT(eMEZ?i)GH?ddkc//QB[Saq'?r=;:n@mGio=R&Uh\c$=F<>^+B#DHrAU&+qQZ48/)&pQ=
%O6&MN#@t?s[rbpuS*n^?ki1'fp8[?X(%PohJ^>cDN%$7@Go>1X*ae]23k+1X_WOUL!m+DF8Nh0!8C".Bl#*_j8Lb%ld]%/\r\=/g
%(AA$5&_$/Ifs4ke:UV\+.p<V[<qX6LKUs=8R,l_)"AZLhWC[sX1:K""(ne[KYfJCO9V^4.i#o[hT1^sU1_\>qMFX]J6t@C4m'IM5
%6%.IoU.gb\`]Ck7*RYg:;6Ec\,<tlaIYoLC#[]?((>T_3TN(%6+r)<H>qA5iMJ6to`EF*!#_i>DlGa%gDI*EMQZB#8=V\kA,RtbY
%qjG,#kYpS4*+cC#,jnB.e]Hm_OeSq!D(%hPYWsBA:CjJS10$DSj>EcHMoq^@_kPVaG;[6$pbX7Z,QW&%B!f*'!:mM60+M2J8kB?*
%;Wk2<el8/>c2a,Q;Q/$eX,]jNG>G'l3>"Q-65,\a8V)Z-#n"bH_S'nTJu6Nd>^_H!Z.(Oc#s6d2`//%-C6,7IH/=E@P<]SoGP9DC
%`oJW)%%36M1u>-Y_p!U/8UU7R[72rKVBn;S`7`#0$Y+]%&]K%W.&L6,f"l$Tb=nH/p)%e/7Tl6K5"VoW\=.T+1`oAZQM?0eA#09j
%'mQ=tQ`&6YAmg"@5ke^C;kE9A2M&^A,M%K`4p;Y^),D?VHP2q%mAr&c:p0st]a6I7_.+C(S7ssaUiW5a5T29EF3P0eWIfXPl3215
%Zjk"g&puI+`aD06Z1)_n/)YV2F<SRD2GCDAbW1Wr2oAFUl%e6p4j%9bW;ms^.Lck;=,T6G`aK;r#V7Mu^qt)\Ro:qc-ajG5:$f3N
%KCBs.ia^`=*G.T7Z*rf:N9AKd2-;7u\T1f3Mq=W3Y*i/hGEs`L1=5<EdX)P4Utaq?r0rG7A'`Sg-i%@?5HpYd\5hh`_eF.-[uI<4
%:hVHKCH+B$G(t7o^>GGl72&=/_4q]m:XDk`R\t4Z]d0"gFGC0>d.(sTK\L&:adK?tpr4g!4ml:N-G.gU(V*En!^9%a.<WhXT0EsC
%1U2$;kW4d]H("4.A`>M+h!boO,ImBfKpQq!Ti4Ph]66/*X"bH;.,2nXPThfMc0Qu'V?EL=$u'h!%-q>"Q#h``68sTE<!YW'LT!Ye
%9OoFEb\+QIYOEBpn0J)7Qi20piChVYTNXVZm=2[@'Q?nf3K,ZX<`>4IO:s4h"&*!O1;!tI9Q@<[3meJa\j!.7BGS.u%YI4]-GTHW
%>?YuQ+`DjMk<YsNN[+7eSNP-X+6N"5_oC6@=-EUH]R)SC$sR(;EK<-kQdJ[I12Q-b<[PAB(cUR)q;J!6JAGc*lGIg2nGU5_/s2,u
%4mQlp&=WAqYspI]k+$*j`EaNHqG7LOV)Cl@PG1Vm%H5u\cB,_!l%(V#e$>au>Z`l39CYK$-lQ(Ug06ocDZ+:G7GsgM66U+1Y)S.o
%B;3KcpK*Db(G=8_YtkVMETod>@@dpcO66eVLDmd0%7S&@5[g],mhjTQ!'?==W)cPG?eBYr`m[R2Q(2>EHSV+WhGDUF/3C2$I+PtY
%Q5a-%pR7a$RaOqm^L8`J5tcU@;7:L]M%E)79^GeUi0MISk:=lLIm0/aF`t_l^5=Z,F%gk[KOY,J%Tq6&aW4rtMMr^gWko\\(Bl+@
%egP]1ShmgU/GIl-j,agsd_us3UMpU?&kt`N0:,Q'nl\U&$:-KHHJA#IFL8Ahe\tHBi:?H5$j[^bFhCpA#@j*!!H`\K>iS'8<\ld`
%d5u$6\V8"-o]aqRqn?f#4h1!X=I[uXkGH"GM3-^BL.FU7L/^!=S*7iP(sf)XSk_tqGUW>F@^SL;Ba,]T*;"'p#:]bW)'kJK)9cg=
%nT^R1*4@Z"k)Un12S4jtP7fF(jX22fVEAZQ8in?[5.g2n3*.Qk%0ja+I>9-#5Ym\aCTYWq.:RFb1=_1pBRHpQl,epTS+?a-H`P1.
%'4u5kJhS'<R0gcH/*IH1F@_I^gsTTs%pr/lU-&t>VFa694I\1Z<rA0X(/ZjMV"<;`X9llO(8Z%2Y_+Ak;fo/#>0;J7iZ3b\`#Pp+
%s5\IpQoD:2&g<PiT9JokkSf!kQ>Qr9rnR0u(IPK&0]kml@$BGg:QokDkXn!K23SPk*'=]SELXJr@?RP@L!Fg`>'*\+Ijc4nWe-Wl
%b<<.)>,h]:7\F64hQNSt(Gm.f`dg*nKt!h(=cn#74<DI)69Q/Z(!Wkc?=dSOAU<&hhL!dAb/*>d"`dVZ!PE(HTgAK:@N:[9o-5!T
%&IhDroPpFPpQB*aQtk`q@9LhC4P+&dcXr','T;R%9cD#fO#OJ%Z?>R;qe6iKK8+03!fb:&TXH;fg49ioiWTQ6MbT$2[DJdWK<'a`
%&6e5HCoGDF]c"eg&<-m\Co'3*BWusM;@4oY5<`"@@*+B6Pn!i,LchIX9qbJ?2Zf)^qkCs==h5SS0sQ??aA/^1.fBR3o1Fu#_6@Kn
%"<-%jnD#aZ=RNriW/(j3#0Ha%@UH9]0;uDJI@8@tOLM#s"\#_$^i(hA*7$)o'G#,7.'B0;9,!-l3$L#\$i4m0Qj_+";#ER,Kd6@.
%iEKf\,g-NH/sNd/U>#S<3Ut[LqRjam'3Dmpb=_Ip%dpQ,#$5);JX4'.iG:O`d6(KV(&G+7qJs^93J'`0Q"YLR\QNkPj2bhfJ?B"J
%+BN5>**kl#C"$Z/MrU!VlH3i#[@9Gc\Eo70[HWq8\06_9fV;h%cd,$8P[7j^dWkoSTk`Oe+ZfFq8;T^X63<p&WA<ha`LL\]<#FZ_
%Q;cTV$.*W:/eZB$AA[hoH4XlO"V^$%'[oXri\%,YZo1f<W_$Msj?=js5r(>t^%+4E*cchlJpc'e`MMXuCW'=O\i+hbT%?[i"pb8%
%<c0Lc4)3!1*N'39h:_)!>2mSB0PDuT?*FGQK3;aO4hs57/i:4"'8*RNI0.`iIXVi?9c.aU`b=f<qPeA#;fGU(p6B"=jh)i3ofUk$
%!o0'<Q"88oG'!?A);-1F*A:]dP/Kj9@^0a74aGT'+^>At<jRPfFI#i$_,dSW#\++WS"?BSn5:f[En;8F'Cu`'&dl;07[U1g#nX]s
%6rE!!5E:++Vh"[86;4RLdknrL=kPRkp!=KqHI2s>a&Pgff%JI6:%^H2n]K![:]:t`eWOi)P*.%6r.:r$*FgklH`8GfVqM$B\4`cZ
%=Rtp0=rcJMKH1cZ#3E7q26-nI0D07oBi0%Zf*FEiF:Z1*-g4(W&)'#pj#01O]_-#F`bn7t_49mnbRR'@WtKOq?a!p`du&@5d71)0
%d1d,Ufh^1P1N;#JC6]OTB#6&YIAGEKXlX4s@QioHE3m?]Xl:M@0)g+;;T]I$3'B<S)pbCFNLc67$,iAs-#1tr,btmq-9@q+.6hMA
%_3t?JkI\'&LtZM9G<EgI#G4DT-3M;","h+LQMRp_+%3"PW]dk+fm@fIAZl_\8f5b6b9:p<k^I!bSa*>b:V3TRM?+OBX0Zq(eWYmW
%i?Bok_N.'-Et5N9S&:'3g?7"ml9iCEfP#X*:%F:XULeOD?gt:("eDJF!o3G6iJm&/-/lM0MC)UP]nZZ4JOq&Bn[Z?<U2cbT<5Q0L
%^kEn"@SR1(F?m[-L6[>OPp<[pSN<8`W=7*Wb'A#:od02UMY#OGjl4iTS$G![!0aAp=N.HW.=ZdnFtC).R`gV;BBj_f5^jq"3HlYB
%8LE>H"RAVC4m4id7Y%:rU"Q]Xa^1PMc(\J@\Ho<cpY6quNhn<\;fZq4Am$e)ZDpP2Q5ZjTP7-6?/?]]=K(Y<2B[rgu+E<4+&Lc[I
%11KOQ^\b%a[tB9c@`c=CM+^+$+p='hQ]%O1%HV*GNm(?jO25jq@bKciDT?1bH`nuFPnRfWfo$:)'.Q_`OJYCm`,[TCa+:VKTKeYq
%/pW_1q!mt01EW[7<:6p3kQB!F0iV;6>f.V.1uL9aZ;i(E-L(24GW<n5Y"./YDER%:e>Q&Nm"\6U&111a*EQt<8jqr9Ts]bspJJRr
%*1Hgh0#&[gl=hX?&[k'iBs2QID79roeT(f0k\B\X/cc(IGdcTTNXZ=PEqEEg6$Vi<)8KM-1>""j7t(,Z.YZ[a9+JGM+49i'Z8\3>
%0s5C3/h$>PC,lF26"$.-gM]NB<5*#d"^%!P\P/>0bV(/ppuCNVo(>F4'Tu`ar:nhQ\'lC<CiEQ83(K#F!tXDBE5WFP`]e"'ONM7R
%8GAe7ME[Q6n!j>WF+Edm3iUB?WY&?Q*/j!I#?Lq6<H@IofXt=[iO&3(fUd0$ZYmom'0PHHF]l1S'l3P5&:=[.3^PeUlOKAo9TKuu
%[f+cn!tFCt:($3F3*sl4s%o=S5n5:C'dGJt,(>fjn'bK8K;V]EHJgVe2B\uiW;Zl;KKp=4:SOa[M3q`'>fYbO>7kkTRJJ!%8I$n8
%>)Z0jRN0dmmZVN<T_Aci6<#X=Rp?`i:$!/,e@[/j8<MJ6]np'[5N+Jr=ke)IW46nmBKacZ:r`G6Od:BrX%3\\gp!hgBDc;?-kDkW
%=F@m2%OWkU-B4`!#_lrN3o]E59d@M]_Et<0qJq[\nAKDM'A.iI%F<oKh)pP1R3o>u`NB#hFP[h#L=`4.&>7LD%X#oFV;8+/`U`4<
%7L+:Qje3i%8FfB;g"HU0bG^.AS7Y/k#ZF57MfY.X!foRLX.q(iLW_jVB8StMhn?B_fPlI.kaYgg4[lWGW7]Y$n.WTVd:rkNU,?:O
%;_#3[aC6gNpFc;jfe5udnkBdVAH_;1m-kJl)`R@4eU_6MZ+,U'iB?lGF=`H0ZhLNgiG6B2PXK5:PR$`oo:q2iqD`N+-Qmd[>U@U^
%fkfd?Pe>/uoUB+rLoW"W1dlXHPO$A5,YF,/R"X0aGgYN3)o9X!U/34:<!e)`?[0/@;PeAX\tMYl!Dl1^b/-khI4YY,LO>HXesuIN
%YB_1H/E6eDqh(PQM<FiT*@2+Q&lj<3_'hIPnShDZ/Ki:PK.k7LE6@JtU`89C/_3K+oFfHYH0g_YPjOiQij6W$gf=%cVH2sGYprX>
%r&"#*Yti6-_K;(Y7j-)am(i`Jl<XVMIQE#ML_'R.jch\+FGrD^"tQmQ8SJF"kHqa"^pm-Y$;#7heVj2Qn7u4%.Cr7e&nVN%BhhbS
%Mm7n&nM+Vi(Rg0(e`&&Ifcc%h-t<H>PImP?n_qu\%G@PbbRWMZn$MeRmW-L&Q`\DHfNUf"-g;jdOr^*e<)o?0\`OfB(\4\1\AX(r
%K>"Y0'EK^e(5MW:jmgQ3_\_K-Yj6D1"KF1t]eZ,&nH$KN06].!HZ>=92Td5!UdDYJ+nNVa<rs][\6aal01B]lqsHg90B(GL,lI/^
%c26.%lZ!^sbDX=tW8UTg#"!*F&a.KtLC`VTHNoL>AOk.U,\oTkTOj86kF$f^L3_u+%d^5IU*>1US&\'2CY5tB(iKH9DY)nSPL5(i
%7j,T/8[a#s&CT*I3[LSOaq"d7d*9,;KXtp4Z8FX"&V.(6AV<G@6K[noTUf[eHZnYL,7"0iOm@lDH/<<GNZ?^O;JjNUF'^@l'3F%&
%T"mpV>?np^`LYg>]:"9kD@qMT1)Z\qrLBTpcN.;3,WUlBmhO$'Hp:$uVC)&%=.DLGBA=ksPU=\$OrF8lV^4SV0P(F5dsZ*8Q][Qe
%i>`$W^cGspZg))Z9hCa4n3sJ;,`./++g`;#Ri5/LLh?'jSk-UnFuU@q`FjB*`C"E(D"CL&P+DSSI+VB0MZlA.+sK#51<j'7bSR1g
%0REEJmMl>7C%Ci3%]GJ.A`1TJ1kThq<AB_DEiagELcR>S;MmAP^LIt>S=RjI)"$OIOn\7N9AWbt'rm`hBG*Nq4qVl$kZ`0^'BJ&2
%0Y%bb;mHN/Cus=-&jOV-/rPM.>=h<*m0MGZ]E$0X7/dkuX?V:AW:-NEH\,t<O!L"BF*SeG2\sI4D':_6(<FC">ti!`;2[:f8I).X
%J[_:W,AJ=X*r?;&gX44pC<Sob"p&MhhP$KZ/"=sAhiFfTLnWKB^4@*WM02h!4,T:36APcP#n\%G6hs+MjREABGjF'DG_[LoJ7tb>
%oMNnF^%G4;6eR3:)JiWY]'h=Z$RYOK,DbjjWomS`>_uJa-Cd4jMk%Dj1=2==nl?uVGgmG?E'bnM"(Zn?C>_0>0X=s'VLiH`n;JGB
%6'd+F#ku.G7qS8r"I,-*a!_tNRq'O$4$V6]Kdq]"!OE?R1"[8NlRK-T7mrdUi\"uM^/1;5<&<=U76iW@J5(m,L^H.&MT,0@N^dF!
%HPt7+BbB2C#NNhpO!!qF?Z[;DgDdb]!X[E>ZscDUN(8"L_7"DD%IX<OVs/eW`Yk*K*%UH&p4;84d(\)>Mo<3;K8b:N,l_khh8/?%
%>-MP]!243E@n';:0)gc#lP4DpJ&c_&gQf6q3<"HI@BqrIo7q<f7.,j^kb*tJBGH&a\\:-6ghK7!<'""IiLL)^B46!j^P"uNkSN2'
%/nU">[3>@KoXeV$7;eZ'dE0s#V,Fdd"dj&?Ld*i5:Idt;rF;KlE91Bueu&C<hQ38<Z,i6TkUb]j/Nl4UFYk@na<,/+FTdUV6.Zsu
%.F]]iGdr2d4dn>SIZmARcRrJ!-Bc%Z\g..]hcb#rj%Tpo/\+)`AWD(d5$"4KJ2Tj0),J1P9u2RhTe0PpZ'#M(?8_AEM1SsE>?q\l
%<I4'm]2>[M^7Cg=4&a\<U2)jmUU.R0p6/(>1rn]1U/+GO<WEM>RhfW_QLr'3"9dA,A"YH@C(pbKnq<DLd8>BEk*<.+8!tr\@eAY#
%!Kl4R\Pg!j%qI":Xf7!8Mq`9qStk6(ke&4gmEW(rX7612+rJE;jfV!`IV/;UdRFHtdHbh2^k5'KC6a=(6bc7Og'(nnmU9fi%"L<P
%:gT;K'9I]tS:+n!bE!f=`ljY:\*ODGU$?T73&:2>m1'9bJ@nlF!(!Y<@fciZZTD(kpD/*o!a6s:9/FSON!f<n^qL&oVKrmlITf%3
%.F:5Ei5REK%ZO+A5:f3S;["A7KUf>,&[8@A$j]NOE9FU`N+Y7+&^qPkG2.FHrIK#Zd#IgDg]\C^grQ=!s89o)E=qhtp`pnZf66b"
%fTI6ff8<)">N+_3%D;:o53-]"_EDY^>)j?@CTR[E9Q':`-5^i)JHIkHl&*(Nc9VN6:H*_P#-dhe!P.F!]V(#k'K@)15>B`pX*#do
%&6j>IElG']8^N"M&D-f]liHHr(&P,E4%Smc04<WkMF.=C_U#EH,Q'(<)We:8i_sjI.>3`1@O.]$'1?6;.KkSJ7dd$7)3FAa*k^7W
%Nq;bX1GP#0k$Zmg(M8]HMBmItF#4_)B,'jIL)1HSJV/:k3'<9oW6mlrVcA^N[X_Z]L^:*9afAn0/k=4_Z*ApQLdZpk4)I)>kns!q
%eFMO_Q@W/38A,?o$s9@k.nAD0ADM\`L#WD,bAUrul?[go;[AX[(%>?YhIuX%gk6?2g:UU<(]iqlD4:R=$;'4C0JDj(%Po75$PjBL
%$f)+KWgU':N,J"tLuN+N+Yf2/K4)?&?(%FJqNORnYo&;U%/X]iRmPd[_&/3ic"jV,Qb0to%;JnuOnZCXQ3+p$QrH5+RKWV]8O!d=
%Ok-nU4qk[93on'o#\KXgcf%Q`&V'`jmJ=_"*_^6W`uuu"_]\7j,gQ)IkVpK@i$51<&]1FU0B\G#C;<`3qW2*TMp>h])tIto)olfT
%Iol>o\\AmVX[K[kAb94[#D@?L;,f?'$gQgpi@tK,RJ"gcmrY82,OVc1N,JA8;sRo8)YIG29aQ*&N3X1#b]W:rZ>0[#ICPPoeK/h2
%&$KAG(5RsHB=e;5`"J:7C`b.=&g1Gt(/ar_NQ7Im>h=A7-rkt((=liJ@@WN?!4Z*Add[[I]U<?,/=LI"-jW$e-je(=7N+ABFA1^&
%L-XL$&1Ot+CVPun"`\fb7a-WPh3h<>%M)IHXrIEe9-IpIlg`Ibm<RU$Z(b4Hf&l/UXonfcK?`j#;)c"=B/@u9EXJ`U*$o>5#Z?/I
%^FG.:L[",pgMh"d.jU<1VdK.Q\t^1R9=J#d0GO/6CAtMFT_ga0EVj_cV1@@<"a#5)dZ"I7;7VJ+'4=Lk[H:pnGH.`=7ahG(U[L4&
%]Xe/0A-sVP#3eM?U5>3YLT!I-r(HQ<fkY-4V&BJt^k[iUomiIdr(XDQ8^f,<;q!oJ_-s6BIX5@h\JkcM;n.0hG?uZ`+DiY+3&n4<
%iiMD*+9\4dhWX[9L0Zpj/>97Xq5"F;_(f=c$4brNK?RqQFiDrg/'=dp:p.k?EK)YgeLRnG"me5FT%Sgs"JgZ/8U_:Uii;mX@'AeB
%*9\T&i[;Q?.h$I62!nbr5N8fL18prJmMM,P1:ND`0msZg>K`.S71aF2,V]t6MfbqcEJrMqH1-tj3uE%6RokYhdQ/`p`ptlRdEI`:
%*MIb@U'Xj/?7XD3i;tIc'kB\/#`%2-[YU0L>"U6,2dlDo3,r:S/V'N=!!Y-"dB5KWn+puVT6HKARj;IL=Bm[RasI)U4\aR?Gao0j
%m.dV.Z:UE6E6U&K;)o@VHSRH`57Vs3Go>p[I(kr8J..lUKlN':KHf#Yl9!+9l12_8-4F+`HtN`faiRa8XPLHf(n)*\l!h$S)--`m
%(np4t_T++,_W\SAHl4k4\jZTVS?4?r>b5Q4K/jZr>T(t%<M1$CF*a8*6E^H6%]RppUYG-WAMs0CI/_DUNsS-MWMr:,=8g+<8I0\B
%&3EYp?#p/!1&*'9@QLDYp#q4nfAFaqFpq]@WfV.`l'&CjrN<.C@&[Gu$5&GtPQiSJd)iplC+_@kWEu,cAN"NINM`E02aJfOe+#AE
%"(3VS=WS[ir/seY$jlGBKGI.c`u1gD/6H<_n\!"On&E+lR3VbkLg2B&7Cq0jA$@a*YHg,5R<*AO$HE6?*oOT8a#/F765YS'+pE,2
%E*h\Wctbu7##Xs9i-rG':IC\-.B`1;SJ0>L>=j3'86@:K)CY)7723&cJmZ:Kk8<U#[6.$B'JPNI87^!I9u.B\M0Tpj`YB3+m&7Vc
%ZKo;mVm\"!22cWTA1Ju"\.K+^feIq]MV'uH97PX=;beArCQ+3^Mf[#R#m`CADDS=g;^1V4J3Cp-H'6p<P,8#.f((mHm/pD9HL09n
%]8@WP/A'nN`R%0m,3<q96*=sP!B>m]Lt.t)$97mpbSS4,1.g@0'(C&,+FZ^.9'=c*L*,<.+T+D!,pei.lq^5:8-BI$l[uNVMSKf#
%=q=(?:'u,`M',Eqe\SAT^gsmEAY8]QS3REuU6NJn`#s++2*8K^Vss+^Y/@6$E]46%6C;cNcmQlp'esT_L_oU0bq,*=r^i5jGO'Io
%$In&%<Ih$c4En'uJdZK$s2;<*A$HM\fW[l%])q$.T!)@<PMErP"QC`'OVjhR\JAiPV)G"2^<@72l_-#pkZeT$6L-$FK5Vb)6k!1(
%_PTPHHITUnAD?mRXZOs@S&0=[<L@>Tn$<C>8i,Yl+Oe.ZO'_[*\&RWIRjPbG'$@f^q1/n22G.Ccar+FDG&LmW5!R,*\IQ5.`HZJ\
%Z9Ye/HFe!^MI#YLUt?Wa4MD]Jo_I/:0MHa;T^ub&2EfHVm[]6JL_o;`1<P@@#16QT7`-Ha;RA75Ae/+5\YU2`lBI02'SePPoPh4s
%Q,8InESJo!UIIki8N5Y\FUB:I9So90Lq7a2!"B0BL=p^-psRIgeS=MXPAGJfh0T]MhV_6%?M.a9OEV<%Of!02=5>qpHo9,eB%O'M
%^9&iRRPPT]SN/.(]aB@qNBI-s=I]&X"]ab7]BV$7+sa^irg5r-:?'<"EJ@k6\;s&+\YL2dT0r)+&O+k'`Hs;BP]3d#mYLG)APneU
%/^f7X+LQSJYe`pK1uX#F)!G?p"4$.!eA^AKK,ani<X,^ID54LrTpPo?XLF+>l1NZaV8Wcs(.ir/MsiD9>^g_V_69@l"oR]<#@0]M
%34re_EC]5$@YJ%_p?eYLY2*$:kPW6BR>tnf\:n^!7%IFLT6G4L-D7q!r/SFr8T4]"Tm:HILft)1Z@^ca1(sAjc7.23rkdVh&udjn
%LM)uC>Yk84]D/QV1(nQOfm9,-*tDf5,[A/;K7Jfp"Q6M`h>=9uX6S_LP=UD1Y@_Fk0^@"1M*=CV5nfmp&O7#q%[I#_UqYU!&o0rL
%`@N(^r0]mMEqlLKM_T?a%Dd]8oN7+"YMP:hDOtB]Q9.=Q?Qr%dEbM9q-G3:(UIT-3agl^:TW=P/3Fl%X94tU=0Jap)fT/t+?IelX
%CgHNT_sQFF86U_Ea&KDS2b=>1,]Pdd==3UD4[J_gVSIsL.Y@+5AE]M3(A(f#bejRe;DI<Z$/t,O_\puE>f$^$&dOC&3OYKQaK+o=
%L)br+H/41Y@s_l.kn:Q<_hbNld<s7lm25@\c7oC4eKVM&l?`ARYfc/+K\DRHlPgS:bX'2cl304PaNfZY'S5A'6['h1Zh"ftolbjf
%,V$UmZV?,.B_I\#,%7NZ6#_==7GBV>1Xr;h$QDUk=KeX+^:TZ@PN)*\T$_c6%g>h,_Yo8'-Zkjl5?kVk[T-b;'^]f^n/aAUN1+OL
%jK+52P]5[#TV2AIoDXu8C/6Vl=Y<gq`N]@BlaY8Fpu@FpH0[;P#/^1MgeVbfKaM(?3Q!kDY=@oco2`lLM<MTVEK08oN4;(>-C8*`
%gJa(n2O@mZ?^SIShDG9qR_jXC-BWRZHpjPc(SF5]iSA^6pE&YZgL1s+3dQf/1Fq+POb7B2R\:t%[s?Lr!U,+7U5"JUp<gk/cVgrV
%L#eYCgceREP+VYqkgN6[`k&:s$SulF`HjSg0<5bNPiu0R_9&qU3qDC.LCG6D]BHtG6Kr!Ki'lG%loRIs4k8K_f*rUXYU79,IDH[B
%7RsE#Fj@d8eO0r_)a0[4(!#Ta.%@[\Etr&OqM[u-[GDJD2K1Os,q;;)Sj#h:cb,kH:r^nb2XR^%L=tsXaJ*F-$#Rh!3b$<D!$sFX
%2\#*baoE[Y2-oAgS$W7g6,NS3T0Mjl`+UdsOYZlL<ZqJ0e?<PE-\=%I=laBX$_&[X8QWO2pF3\@rR:9@q919&js,W=g1-Kq)*`#S
%E\]mqRg4fo#`FK-8`X_3T:gkmI#UO26$3%LC^iDQNsN`%8%N0@f6@JOf-/MnU?)V-65C@c1X[:*)@g[r8?8N/Et41I?eNIh-cMAA
%QY?O'&>$6Y)$3Z]f"L*tPr>_tPN)[YmBU(gr+Cih9XLi)s5,!N+C>+5h0Y,D]_`B1NPaaJ`9bAGlcEi@+a%`Cc@,X+f;P^h2>rjR
%gqk;Pm$qOE]@qbH^adPUBo$J^oL#&8^I6dXJ0jJLdQeSMh_fcq?s9^*hZOm@]cm)'Kd1kmB64gsrA<6a^m_JofmX79_=BG_6QTjt
%h$slPCA0r?)Sm@3/,"G*1W^n.OD-L!O:$iOZ3\ssq=<cAD3,Ph>ogQ4!4?T9^]8g3[ps/H,("k9J!]=jR6'TKq=;_>!eRPiqnig3
%D4\T@64^l07p>Ls40#e9M8iVSQ*MS,HJ\Wbbpe0-Wi=50[1.-md=uj`0[MDES2AWJRDEFr?O)CK:OehZ_4?/pF)0l$q\D=Q4*uBh
%8C5[Ec!hO)%h$!!h$/rIB3hY7Ug&l/g--,2Q7Q@fDDd1sjK4VrR[3+B[QVFl+3l0B&:aT:pcB*OgMRY#g??"a*YkOE*$U?No7\@V
%kdVW?^,h;M>K+-%HS6WRPCge)5]9YZ9<jar0>/iI,82a)g?6AJ6]7+Jp7X4(mPfC,3ElDC4,?]\lkXKA-,e!;[7_erH@mdNa'T3+
%q'gn0Uadd2\CgPr-Gc^QDQ$tR0Rg!D6@`rtVOpB6+!0)s?81l=R8UHs\echY81.i(^b$ueZ$7S3&K:o/]d\RVKLn=.]l=0jR#Br3
%ahPWaL_tH#^+0,-\hr4&1O;1C36I5T.09&7BP)ndZli+V"dR46'X-N'^E&*:pX0ZNl0]^fFH9nB#k]bU<eeq&V!KK='kZc&-?\j&
%,>):,(;2pp*rg2B]u5I;#tan\bgrYH(Y1(oS\JF[h##0&:_GFCA?.bk7YGEMq_$_jaa5lJ'q5$%=4qIRN9LphbZ@\g6k>!"U>"f@
%5-gMs5`%*W*XBJ]HOg)t[@1CR'R14!roFU.42pE7MJUPYieWfd%+rZe`!@(ID;'ra-/UnW'T6sIOW%6ikSu%q81)qB7?%)pA*6:J
%=P1F/X7.rJqU6>GRe78dBBqDq!u>n2pS(3l<(qC^YIT!t=kJaIS+jT%O+0P]U\:JhE8OH].+;qUma/@]iluM`,$rTtI\"]u/dk>P
%:_qE#mmsaDqr-nX@31".D/i9h&[eer(h;co.jjUbT>?56',rct0q%&2CKDP1.5/PsCI_qRmP*L2P;in;U<s9j"EI3^6<BS!DNeJ8
%33uGfh68\ZZXuqn#5l%OHP[[bp2k<b`M\ooacN[m<R_SbZX#hr]b#9C3)X]_A9$bT(,<>F`;D1Xg"9MVGC[KCN"I@3L&UcuU3t[W
%@Nf-sq/,/SpC8TPXg6q'D!ngKW[S=!e2ta3Bu3P.H,)lU(+G)K;IU"0e91%]J1#dK_:r$uIbYCQCEd_h3fQ14Vlk#oZgpk'Whm4r
%.:(AjTFYsp.(6j#7.*1+;M=):h0a@B^8^MZBoWdg&W$417H.2b1-2Y"82^*]h2&k)l@9O_cF=pHNOt?i8BHDDB(U.o+[Y_jDEM4O
%_oo^+d,b>"\I@m:gF@3*1)'Yu?`TTBg.L.c_nO`I+8h//#jsABF=O<r3RXI#7SESMd^Vu"Sb/oVhurY:VGh#Sgo"E[A'HcE=0Oq(
%V<*-\&"Y;>j?=Uc&-(`unn>m/-LRd0A;4lfj_^RcDL;>L13l<e"dbeB,qu^cF2F)T_*bXKr,C@.FH-JMEKHCH+kA"6(cA/C!HT?[
%pnc<KflL_)?.Tp1`,1p,cGN%6Tidt-%?k'AZE\1=VS=CZ`bn%PMI#Y-LK$,;",PmOaWk74b/"k6jC]JC/#Z$1A?Dn4%`ni)%:.be
%'-),gJTm=W.IoIhS"!\mgILmd4MU=qjAh$Mec.Bg?73`2pLL<8?ZuB6Ws/h/24frboZM+rrp!K7aJ(jY*g`4.pV[EJ%o42XcB6[=
%i0k_?aAS-*Vb4p=-`YOL@$:(<Rft'RLSl`[E?BCSh7]/+B+pV6Z%M_9]kLWNHd3]F>#[!po&2bSRrkK#+fs7Z7^\ElQ]iFY>?PR"
%@<uKk\SBp]20&WqikDSGP2'g@hVeF\2[t3ZSl[5'Uf)5EGMYSm+<el*0UrQ3+[$<F]>ORDkkS>'p,W"Dn*43U&0't*VfmKe<792u
%cc8d[dlmM0.,R^@jGPAh^PL)+Qcg@"hhVpSOUP1l<2n>u?Bbpj@.]^:I9%gQr11B-C1ciEE+M\5(RA;h26@IPHN"gh@WYDH`,nN[
%S%%ZB<MCGU'"O]!!DC,Y]Gcs<B6MDHbCRdkW-k-fY81i!-FHFp)iODVEUu8%<giBCPV5#"OaDSL$FlL3>d8SP5J?j^:,Rm^K&Xnb
%[MPiok[7.OiSBj;86B5<Kk'e'Me`1^Q@&PaP[sdP-n3h^\Y#23'-&8Ej4M9!A0-,MSBTk4V'l.L`sBgIpb5.)#9P6@^HD9$RPIZX
%Pc3rL*MY+Ui"KX4r;JBUR0OfY/E>)5P\"1d-u#(c4%<H:TkB2)35HKt14F_1]Z_<S6!n6M*[EH2=pHM#4SB2?R6>VU`]Obq:1WM'
%-`G8%Z\)e#*da!om"`*?d#?kSU,;HEB1U9#:2gH?R6>MDf^'2rLt^'SF-PJ(4$,`HB$Zti390b2.*ark)3QdOE/*N!/iZ=B`h>o%
%c91e'fbqOh9R"LmLC)9hoDOndG5+AO1QO[kHhMmD:OHb-S=r.<%Si+X4dZc-TDcnB&YOF9#mrM<Iu4Ag':bd_o+'%WU"ommW6d2!
%XKRh]?d<&'d%P_tG8$_(0aB/T4SC0Pg-'mL/Xk".L)A1,4\C^r/:<O!m2>*n4dq-I,tPe@EpoYlirj!cdeq=Ld\LmP@A5U)I"j,q
%7ls)(B'5bZ9Ci:!#h/\qc;:Coj7eb7k6Xo2VKi8VLsm=JB;j:N'^d>E^O1r`d&5P%-OA4H#DXbX4SU=]RKoIY;=i2\&?.\(N`)j%
%n51qu^R[0&lB_V9%RRRig&!5KI,5O4CAe&bXkEm?(pTM7haO[@Lq/ROm<<l8?L8<p#f2rMI6Y]>]lB-Ec$+2mB$JU^6aZ"BH%KeU
%\aLs"RN6jADLEB1gdAU6/%_Eom<.f&d^?j6qe=Yg([i_XZa5]jYItZ27)&A!]UsZOEm3>^?scBK2_!C<kY@5D*A&A.@E39[&/"g$
%g\>qA[KF3QAF.L,q^*?\E`7)s+e/FLL6BfgdKrg[;creCZM=W9LtNbl-`G_4J\0%Wc:K%OB=#41'"%I'geZ=@BRGW3I@5c#8^lfh
%S0;WoF+0(JICYQV8_1W"W89hlp=F7:@@O`P5@rRQRq&72*dj3\bo8`1gicHiDX',up*b3U"cJ$*D4gS?Jc"Ir&b79&gP*=N,]4ZN
%ON.7hLMn;Uj5@gSDB=0aRJZ*LDpZ$ZrpUAMDB=1Wdf&]kD]j1Pr8AT.h)tH8Z(&Km6gaRRNfgqnn54N+`s_7Q>m0VW5C<RPqr7iB
%jt;hk`s[:=>r6Jki$d!B#9Tafj4H.uDuT_Yh&FBU-@GFC].)XMXV7LKrr+&-Rs01;pru1P:qq"%_rP_WI$FX/o&+F6JFh0K;S[R_
%UEjg9ftB4]r;7BDr8S;XWSfo%;)1+,H]/H[6glCUj6+H2iAgB^.@d;!6OWW=3(=>>eW*PFq&DoHiB6l`4ktI25=(h.ngHqs[s!u]
%Ne:-T`,UCH6ua8qPUas_4$scr7i\@`o,ShtN-iY':Dr?%*@6^:i1mZ!^]"%diuDh>WT3?PUZ?FOfbsWGqr%s7SAXduKq,nB5pH'!
%EBfH\`U*DC,.XVc6WEUmTB3PGamnu?FE/FMPYdBmn#)CsDEC<;kG=3cb4u%XLuj*:"4VA*JJ7*bNi]#JEaJ)T_46R*L16/V*%%*N
%i+"TbhV&jA3FDS"W]<03.,!C>cQTk[+70KqS/lm>ErN?hDii8tBm8%Ofa2;IkPV3<;U9Wl#Kc-^#PoJ5F*@@V!rD$&E0GnApN&P*
%SL6B_6g%Z884:3$-uVu1q0l)#dJ_AYVk_"SB/^+\]\3riqF-ck(Fbn\G_VN5)4o\1VDI'j8kjeXk&2WFo@Zmcdk<oL>6K)`L1:qj
%bL#SsP5=98o-R2f#9P.io>]'Pe_/tqaQf*"f1iifYBGl/I_"LQMmCWg4A&e$n9g2'IMku<79oS;3_!DigpGl_YOabLd+A*0+!n-I
%h/\Uorc0@]FqVEri5]Nt:2_-tZL]Nj:t^,G'4gg[]]2^I]/,%o#jj9`ljcY"':$U/mC_.M>5Ml[q(?,<e%c3fmC_(KE]Xdq6Z71o
%q$=gmKo0@SG92,rao03)^RaM9;<YNJkl1+-T7?mQjhi2>o^gsh7`J2NGC\H<T+A/G?a+TGht8n&btdTm"N8g&LQ3ODE;j^n+j8#V
%hQs2*ZDmS]kirU$Mbr9/:+u21`X5P3GKG5\-oj01=L0:srg0;LqHXba&U*5W]LN75l@`kI]jM5e?dFZ"f2'/J:\9%f$o^Wu[9&HV
%(qnLrNQ1WS5#D`=Gg'(-`[X]ni6O56.Go9n5l_6-REq)S2HIZJB1H2(+(LW04/,f7&;+%srSm-Octkga2U^cp]n,<nRg!_IJr6pG
%/0Al-/R-hVhHFCM"m8LfNOR3ulN'..hq`<M:&Q'_)]P!OF-UE0r\7iOC,aX'j%s%m*qMtJ4$iQ9XC&gpT%0S[$JZ%#k41EPaUQ0&
%KnW[FVN*%_!X%BH>4%_6#Pib87Em>=N2W_P4A;Y&ip2,FeP,bnD/W5o8qX)lHqm\<D]BY5`fV(TIU:j,L;_+Srq0(%r8U$@p$!QJ
%rS,X_rpoB1Iuh$&r"6?Rq9o/TI/)=nrf:FcqX\&Xr8GtOrmT?F5<o1W^]!1_*;hH3rZ)LI&,75o.JiMMs5MdAS]4ppq%R\[/G2]m
%'WQt*\%d;kFkObPlV!UCCs>qc\K#]+MX%Kl\BgbK+5XTWA"W0e7H:#$Qro/<MNAoO\Il`VlLX"j4*r6R>2^26M+G"%$)<3Z30*H%
%jQ&<cLbLe5^`ll:Z3QPJ5ige>Ve*$VIFY#;&C;4P2<TP5_VFgDWc-d@j+LNX8)9tslCm?6-b5=:"%tI8^X3o_,3q:b#X-\WO037C
%11rj>ZhX>NKIod2Y,a'9?0RnBl:m9,=rL8#.Dp3D+uh"ob[>CKCaT)$*/AU(9Z_JM.0$-^$il_V6_gBRkSY<A;.%,+8[6HVe[B?D
%'RJ%pO['*Hfm@RQhRSb$q:9tCocq7^06=1AjpO]71IMV@hd'SPh'-fSOcN294a&M:\^/:thSU4WNm]38h#.%9>R070aZUc/,eVk(
%Kc^),mkAM=8)$(+AH4*^EFYLmf,?ToM6:7=o)l*gZ`JD(h/hHRV7([sM!l#4M/!*5["2,jO)*%,buo>N)7<m>?tK8meNNm-S"K7V
%dp&-^_2R28lhG:7(rGdPhK4mqZ!O>9.1^r_^:4D1D#nG(\$uP=*0fd7@=N^%GPdV;F?JabWr5j_##X?qp>*lc4>njl&CI*>$!(tX
%eiZ&ZTe,OEEXV@u.QmhAJNBLY2*b>5[peksB#7L!;\^X5&No4lh!)*]V36YB\\?BolWKf0_0Tk(c80"T9%G.,D-i;(M,+OY0qpZ'
%0[\IA12dY=ER1DbL,E>D0W\AE";RL5%YEj"\BJG)mI?qUL#>fbBGWCnpaON:)(LE:TXdVE#,HaR]f5K4)>',.&>b*3GUPImb77W&
%eSY:J:^)lUROTN@O<\3IY&_hbX_dgmX*O##IrhSY&NP+/=m+j5/T]OL%P&FX/aCk]Pg?d;Koo3R>!)G+Jtg[hf:dK)e#P"4fCr!M
%X#^DgrNu?n:bc"cJ3#sC)?;J(4Tj7m-8!a@dg1)M`G_cq=aS+eeNR6Pd2=%rnX_jB<^en@m&R:2F]6%8l_:TF<g%c3/%/")De6l"
%5F55AS!So)F;+@H3U=qr3SoWNLfg'T!;Y32hX.Ghc$q4bJmV2/IC?Fe=k41'J0Poc)5j^S/[D#%+P3<uk(p37-#@`Ooj@8t^&e,%
%Sum<>[N*jWo:B#aRtM&&%TH%T%&I')]Y;^];ptg)`/.V5"o"g](1+m`<1H]K)P>!UGq7YYZeR^qTrb[[(TSikbnY2-2Q&a_4WTq>
%lhSC2<>FB#dUSp;4U)B;-qX]G34oC8^dAna4K%_"FfDNY1M?X)G!6C1Yj:'Ie9u4]rd!8]Xbm1M-f/0>lA?Ngp1r4/OfTTL-X>Qm
%Dbn#rIQFgqg%9>JX!ZL\?We;]P]NRhcPKBi5j,.<q;V2p>0Nj']Q'clqntG:k%NG85Lr212^`_XdOg>CUtdmZb2g-Z'G#lsaV^;;
%*#L)GM3V_<L@]B20Z/dF`(DP'%E4$+D4<2OXAUo@_5)@-'tWQ(2K.^ag/:_c<J^[<d\>8+5'9S$,)VL:`=j+t[:T"RmV@W>!gq>;
%Cd?ZY*;9mD7,/G#l*kPJHZc1*52A:'jE%PcQ+`9bqW"oWCa)]c@4mK5W$m$l>@[BT#^=d+WH)L9Up^HlOfC=lDAQm1k*IX46/Wun
%5B&FqEbeOJiU3+YFP\1q`b<Zp]t2Noqp2eRcM:-rNen%S-Ji_E]oZO+Jn.[P%YSr0BcB`#''E+:dgWg.f9_f7O9uU5gTmH(:p;m]
%o?^!SLI!`j<f)J:b_/ZACX<d^SdhVJP/!J@H<XL'RVb3s[dR4$YJhA)7^=0"Wj?0(bd8Yh@8]^*g_I!')(6aSF6A4>\i,*>V2%<.
%6dh.04at`T3E&?""Ch0R]P&oZ-'@:J?`Q(U\9a:GdIhS;qOY/B0E"j>-Z@/'&oC)f:@&$Nn"+_Y]!ea&]+XZY\b5-W?!#S!HKY^]
%Y*fmQ\A4]LFe-Q:gH,g*DV,5E`6-US,6GZh6u7B,&G/,LU)9%:!0AXT0Gj/SZ<@j;S5W]C&e(0qXHBcU5n3TSOD(VUl-G:09H\>#
%KV2p/JdR??r5>dWoB%NQI:YDrC65J7IY\1`O1L(I.n_Sj/>\cF]LrKC0(]^b@F$Jj;^C-tE_M_2U65XESRV%n?g+a*pE$Y@PBN]D
%a#t(6Kh,[Ji[leh3(N-%Su%/7`P'@[SMVgR-2<^;P30#krT7!IBbEt2X=^`uAVZKo,=16>.J=tkin4YM=1A"uSh6$3T>U!EYj(<K
%iA#Y>F<$DBU=QP*5hT6&T!SL$2iu`<*B,@,7;'ucK;g0i@dnVF3!ESpl*4%Y%c`:gGK+b5@\D]Q^Ja.HlG[*0]<r[,P]CsoPJToH
%8#1Z/;mT:GL1U$_`-A17h?!1sCOH_QH=j0tcLbgR/6\K&h&q';hS-_K><N@u;Ecto:jnNO)0cKB=e]\h.0:rU#uj)<<^\jM9jo-C
%h8jf:`XdUU:b=FY(F4oI]XlI"+7:/(c!66d=[T6qL+:<HTqV_`C80M".$acd23#4Rd6Z&nl`f<S22)rJ38"n*S_N7TCZQgpcoZs]
%HV`N*4,kFb,#,_f>@@4P"G?4/5&YW3!`&?dK(K=?)iB?oE(bVcBXsZaB,]94Qr-UOc.&cuYn^9>MW?072ak;"`A_CFRJ$*Tq!lpX
%*rBdBY^sjYB6&K>`4<#4-5HA,>`1Q%R/-__`3dE+'I@D\hcJq^>`U@$rtKiDm#Y'JZ4a!)Z<8VjXpSEl!^dI:<U*5Ub&hE7R(7Te
%RpYVdPcj0T?I.uqWVXOjBOH5+rd=soLF=Gu]JgLP%)EdHa&h/?/3.O<+2Z/O&iOC^?WtSDNU&_#g"p/a4:?B69EW+^(H"s:8#Bb@
%pXQ5FKs-J^"f`/H:U'V+/7Gn'0$/Bk7Ng$"6]%apK/guR!pcNM:(]C'QKM_D<L7g0meTD&4$T'pZq+;D0>M7M2VNcU(.2f3<\P'2
%BgL"s(@QhDr^9#D&"n(/iiH@hSC\]]HG:0l#5F7Ua,&q[&h;sb^`''=&%?W(Y"E4U`up+S7c=`F4i*VQB?\MD%LSLR1_P]L^Qru0
%Ju@b.<WK9;A7Q#FK;oN;A`(#B)nCb>JaR^Do7jo&8\X'dH51e(QV],aA?1TTk^ofnf-CUp-2Nqc1)_mCmS^nKR/p\tQg,!tX"-@*
%i>t0t7)'9c)`#TBBKBbU>%Vpfd)4F%;-=ks!#&#dhk=.UMF"V(&RecZUlVPF0O1KU'EjM&Yob+8,9g2s)ng?/9t-Ao@)*d^/A8dD
%S%HOpqm_.20FK=b&*0u7R!-k9FN%VpGA];SA`^MmnT.(Tnn',V<98>BN43r/LLP.23C3iFeV,(AE:5JuQq5Ge9^c]a)lWWFWA5:9
%)0fc,\nj],=`SaF-ACG1AsA#Lb.GX4g_:O7I4SEN,3,S'YaO,-9/j&3;\7EK>]ngKN7QNrhWie$Xgt%Uo(n[JmBBKqF`krfTZnDX
%7EOH*:gS[f4)456nHeGi"(=PMWo.>u./P`9WI9$W8rnD3G8N8LX]/6A;V`+2:<DIU"42Z_)#ttEPXWT0Xb=OWN2?rGfm3>N>1%]Q
%FH/7c0sM:`f?Fs=`VNYoHCHgF9VqNKo-Fj&-!]?kNN!m4WqAbhQI,,%`#@npX70@&[XZKOg+SF,,KTn@R(.+!A\[YG+qujgb@3gp
%A$>%heZoL$Y:fIoB7#DB6_oV/842G^Fj4tFW!$(-mN2Xqd0\.-fJFSY`(#$<,reUN..bOnB.@=BTnL`h`\G@WBDCc?#m!as@38r)
%$$9G0jK111SU9E2fE+6;BrgPdI2i0U5Wiu(CA'))(RsU0<G![eCj'`t&d[k?U!NUp>lr1fo_kfu4nRFaA#@)+#G"#)^jpX?2:HP]
%JWn@<+ebhf3PM=0RQo_22/uTAa<SnrRJG4R/OmaGJQoOKB5+uled,pr>Ytcl7HMH)Ut<)$ZSGVYEb^m@R+c"U5aj9rAb)]Y<]c&S
%)KU'&Ru\<b.UgP&;>86dkqi(6;InPU"o8!e%t1t^(c/u)FUQD,-*"\qM[^\^,\Jk$H)3J1>Y;Ko1BpAZ<AfKBa<Gld1k26b$]+kS
%YZ48NE6NiK.g:^:";1A(Q@?M%=)Z:9:@+;K?X[^%-p8p3brTNjqAdc"3*^]RBGrV[Q<g.&oWTh%kPVhNP=BVWeJ:K<Y-2q_+o8'k
%H]S,'PG00u5"m8;?:dn*$tcH-j+aWO:LW![UR*RP"$d8ufUr&!!i=/55LtOAMBQ$iVf3F7E.FgGaG\[EFDH]>;Y-kZ"N@E\!N9M#
%6*-9[2@C@4\488p$5oY9HdQ9[Q9tk_EH_Bc.b-KB3$:L!"t]Zn.]?BVPDg&mAatRc.f;;TGGKRq<n=<U]JZq-WCu(M?<*QZ6?+XN
%!:0@@S<O^X_oj?kE)E!\OOH-b4=a1B1)=mMdOZIm#6VC\qkdsES11[>SgT/l`^tNujG,GQ2O]uG=*Jq*8tTO>4dE\ueCH%Z,W0C%
%)bhYd0karT=Z'%I$-.gZNg\A*>pDUJi2?W691T[0)j>^loK&4<b>t.b,4Bes.Fg01eNMa`ikDN6hI1Yg&JtY85QJINo/s%)0]SpE
%";&p2e0E.pp&Bqel'nad;?Ao&>`*)#hbnY-X=:Zdc*4e/V<sh@jQjJF3l\ca-ETu77:4s8N<*)&2FER)")O>,TDZ*qB@]WB-"KZN
%CLYC?i3N4CHNMF#bd<^)KrQG%;+=0Sqnmc+SVKD^HXr@B1V/_0*k=et1`9#I11G::Z<la\;HHMamU9$-0LG`'JbY\Bn9NPD]"ZUp
%C0I$r>#,l]+AK9mKoa;2.N9sBlNuZGU8]F_<i*h5X?`G6?Fk8N,;[&N@>`d*iZ.`olTFmohVlF@e46MKWQFd0'SR7r$[fLJVbAse
%G[j`%pr*s`bM^5kc!'Up4I]GF#iFqCo=c+-OKr\0pk@dt6@(I;UL#3ub578PnJaE5ZZ#$8F?Kfj#E`?c/?j2"\u:ErQW,NAS%q8@
%oXoT(*]6XZ-$MnZe]%>bBG`M)'#8EkkHWA,*]2SN_*2d$XZJ>+<!9K,bH<F%[Uc`/[UV3VEdr`U^`%W`#B)LW$Dk6nW\qku()'[G
%]$W'J3F9U<aS%&*K=H"f_n]hc-3(qihTiOT:\l&d2MhpI/#I'/=J'Z/bg,9V[]!gS9'AQiFt(fnF&\*s_Q><t);nk'>*Q%_O*lAL
%a$/:*J6>,Bb-hmQ:`Ep%842G?l#raUSV+cc$)_5j'S&AWOhXPQ6m4ii1PR\tbaoG!1ti8-_tNcf-"*NbhW8[?DC9Ca6N"a]nC;sD
%qAb(?0'C#$89K"$bb0t5*X33r$*UY3dBsMnZAZLWjN-#2PU080^P)X2<cu^M8F?77O+"D0(cB:T*fRgB[tM;H=TjJQjB:f<OD>5[
%,rqb9TZpcM&P/rZ22Wf8$s)[o>F/O1P@&moL<23Mo#DBX..)2!f=1S1_?tg3NU.3;pM@qJ4s@^SO/XFqQ$[4:]3D=-n-ZFPYS=8J
%3(Q#l@ZqhjY:fEAL]jRcP=2Zjer'FZc"?Im?C4=]ZI<"9O-H)K4V5N`\lBQ;<`sLjdt8BNFUXiSq3*)c?jUAF&r>=R<heZO9Z,Ho
%=22Jshg/#@n,^V*PW2)RPoQjIF@aD>`>.aMf@>1"<'B(ObE=6*=d728c>_ZIouYaLh@2P5=W1;q/&P-bTFb)1cm%[Y>M!.YF$:<,
%R8H]CTp3[#QE[p#?ogF9fRu`^13.Wj/7?6uo+pR<[iq^^-+HA&lQDUZKm.s?^Q%f8;P<+1RpXHR_q6M)&lJr)Slps@$7r!m6^\/r
%_bYJ+'lNSA);e_,l2Bhl-0S*[S4`CBb2,%ukY#<&lMIQ_MaJV]qPnI+@O.L+;O$B$iP13"MWE'P1"LH:Wl`qUA\RAnAjMeq.Y7Ga
%RL"X@3QZVrUGj!S2RiQri[f&I]=_\:UgI$XpaE!lH`k%K8#ca%FKeh;CYbu?o534*baQKbc:mqQ:n[L$PofgEmub/`dRiPY,9?-W
%JJ`!f$q'8^("TCo;6F@fX1t`E_mSk5`!EE-`3tEk26%Qm8=BT-,r4*)ph[4/U%6$(2g$@-<oM\[.WrFd7\"VC&.fCl+PXCXC?U0R
%B0/G?l88mIrllK(`BreE<\H^f[^KuN]Y)IJFO.EZg#W3ZLmAMBY_.D:Xs)k[W/"\Ub_!.W7<"o9.S&1j9t6\;,=h*#ZM-5Y/InDC
%%nXm;.MBft:-_b/MBVj>f0R%.,XHJ74"c(c'S_b>gY`8L;9Um6JBQg:ePU(%N$]ocA/eE+_V>!TR0T(&Z$"q[TCg?iSNH'l4AM9=
%FK+&HCn:pZbH?O#-T`aoP(U#c"$0VoG142*^fbAW/U8W=THZgj<<-0"ZIA4g"i*.k[+=Mkn[U3SC*j[!#.gX8LWMq8,Yu"eFbkCR
%R*8V\7d<TUfVk$p8j&r8'S+DjmP61+gZC?;gm^08<oC%lDoA?7T+@YLq:>uQ\^J.nKUig+Ga@GZae;2LO?RmdK]r)tXfp\"#MKCh
%;RD$HP1GBEXAS,*[kc#^d]tDtWS"p.BZT$X'hP0OdPi?[!MEs?'gPcF=_UDL3<Kh!D$\DB!8ApLp>jjM>W3!<9Wld%->i5d2Hkcg
%a3V4@GpEH9YL!l;,l1E5E5l`YUJrVVekMS5de1j:Y!04DQ.GQ4=XB5^!M<:ZqjJ^4!L(t:[Ob=R,Y?c'm_@;#_m[E0#F0_AGRNsQ
%Vq`Q@;$EK44+@bS`=f37$6Kl:kNmO@j@e.aZKo48],M9[ZWOLnb2kcce?e,T:JOJc`#$UbliZ029+2r]dt_`Z8O^n3f\jcbm;D%o
%]9CdR089pSM]XeA)oc@%-',2h?h6=7*OB0hAK,V^gNTd*T,*M2RHEg&<iL\\ZJGu&R(W2-U0l]>;;8X\Gr$k<@L!i0![(R()=:KI
%3d5R<-f("_6uGOm2C='QfaP"+5:9+8/Q<IJKEhK0PC;t'6I6\CfIh/T\SB>VqqMK0_p#XqUnK+i/S&l^+^uKk"``m\DeW&_TW1ho
%X"N!*`LW*I=M8?QXU*nA&XO7oC-9$^=B)"\ku1&&&<nSL`j3*k=G5nA8#<>m6s4Hppn$00iN(ne"bC.5c*Toa+XiLa5;j:k`X49Y
%-A79Y-[`=+=RXr6(1(!fg[-fhf\*oP4(^SkN*mBp70k'a(5N8L7r`OpTR.u>>19>E$R&F2f;P5Q\&NHA'W?*JWRHXVP:g;^9sr%[
%D8Y[YBV/h;)<tnXZJpdR\mN?_./V;%]B9SFi8nabm8_aiFr]E?0Cei>9Vmn[_gNfFJW5%4&/%'CGdFKN4D^=>*4E(s"\+J,MpKCm
%jB"#*9'&"BpnU&F]eD$PE@AMSGb"I[KP2pA38d+2T<_WN6FU8:6Q$^SlUlfn+*q@u/!H9,_c<jEJ;DF+@OGI*WRiO1K?HePj3WHN
%U0P4$%j:oH[E51)B"gtpE]Z)Ao&kqjD`cG;o>J)KR`Qp&:\PWl&H^!A:J.3^5t+[D$4i"E2Yq]a:5A<B[-hP29UsUak^V6rEa?4t
%@JOi\MZtk&XVu:XUi;@a[l+Vrd0#:I$Emtr8K*giS&Q?UQFQ3EF0V15(X.r_B+E*[0#_G36r`bIV)1f<0KUiWXH\:oAl/('#*r'r
%aBb(r@@?b1J<dgfHs0%]4(EiA>!ouJ&RqY\("/tjoVs$)5MdT\cQJ9YOdVPP26\>F)iVqbN^]1qL)5i<A"'48r=TARW=^>%:oV2B
%5I9S:']"V<(Y`0?)jO(EFka)p%*c8nW&m0-d&-%GX8P)\CpWON8<@4a"_F*gh..[1^QVSLoTC$<FTDW&8K%q$?.[CaAn\RQ28\]*
%8g3alVPIh;+oOOl9ViZk)7j1B='q,Rk4X,arGXfIEr)]gKQ"fQ"&sOuVNOi5KcL3pQVfUX6mn2bM9]1G-3[`\ks#EgM[Y44<S4&f
%VB<)S!q<DZ/[^KZ&&JoaYKlGc?E?t$"`tUl0TPA%`0]$?*jFCW3dK#hJXU\b(Qe%Ll_C&AGZsf^B2s':"&RB:iO"$D\+okuNlgBc
%hlu5;W`5*h->H,LT,X\]-q)ca\a@Dc1A)E#QT<m_I?*Q[PT4T'\<U=s*bYq]D%aj(J=`8D-`9m>VG*;9[Z"EG-tqF$%"MQX(0$a.
%KA)gC>.G&G\u$0lhZ?'!"(P@`AP*69j1ak,S\q*QoBt!a`1KJGmO<^o>.t\e,F2jDiq`*`B?+`l13@r.D-u+q<g^SbVY&SjNT/Co
%OFU!3#q(lOr,LV"R<["&GIjJ=Q3W_mTGR2d>/T?&Lf^qmcUHo6p?!ela>6dHS*Z-6s$*#lF@pCFFHF5cY;'[1]tb]+Y28ZQA.jEn
%s5r%\:iqU.QAl_-7U<FXBF`L&!7'g8M\`&f,XA2Z:Zo2.MG[c2C<PM)X_-6SgGo76jhXP@^)h,Ld$D,FWK*K+9IF\7fSU\&EBcoq
%6&R/#^!fL*I&,3S/H.+[g;8LR]tRWG2@2UNd/rb:Q3O#kg#AjU=]DYT)G]tYU_&X^ChZOo%p!N_WcABhhC].SO;Llin1%L]PBPH+
%m5UQh@_sq'87`rkLM+p(*TE]4;b1WH&+K+#*p_Ls+ksnCQ%]=k(bb=C>1Pk4:F(\S!-('8L)J+^Y]?FB,dr$H'FVd&%V'ls%q$>'
%nLZRl@M0XNL&Jr^f1=/Q'LKBm6)+lD+cDAWk]Pc8g7GssUg!B56W&;C4G#I7Z&+7[^.de_?b/9\0T0k`as.PMRjm&2UEc)qZKS_f
%XL,@cf8#YL]>!'aVe<&$'PpP,\E:bmXQf7GFLomm[`Eh0MZ2.i5&!((D,8F`j`p>UElBt$F<Tlm@2\;mU-'&r4uoUW.4;o+.Sf85
%:EShP*dXg0#sGa\\Z0$TMs!GRAaZ1#^A>VkNr"u46G]RU='o]iPIl:'oJ"d_/Z_[/=!e,bDi5$2e#)1$:bkjK+.B>,0bf']>;`m,
%\i*A^g>aB^Kd>jUDPfmtc5F9,:FK>YWfTnVP'623nu@;<:So$)R[?=&N(@GD6!"_n+d[^77GF$t`""%F%RoN+3&L7b;\I?;D5iLs
%:Zq#PXhMBCqZ'rgO"cc7OejBerjb`fLIf7m^-$LlpJ/0m8o.-')tAr7ekfh(9;_-E?\WXW2Kr>u?m,4W[bK'C._VUKS7IuO*1OR?
%#h[C;*pS209[C7*0Vi/P>CCLtm4UjhQq:[5e\t0.ie)AX@mpk1/n9RW-a1K.49Pq9CY2Kp3i$8F(Q*b.]2c0B$UK1sIWKsKX+%_h
%AV4":i;h=$=qheKpZ^j;F=NUV<@.d*][>FiL?G&]edF-3Z88-NF)Tr$JuR:%ni![o$&,=(R:T$uBbZ'fP+;/Y"\V:$[CM:`%(3K>
%.9P<8lmk+u&:(uJg:&3C-km!ga<Je/*_VLr(0#h;T7*]/-,CY&1-heC7ITc3E1tj[%11.h#;aWe&P,odQ<_K&:(P0l5YFXNQ&m!H
%%c`b&?FIL*VbMrt7DaLJ;6is-/,8Lo1Z.`B+nC"/dV-Li>dPZrb4.dbh&>Q!F%7ud)flVKBgE=0Hs<><a;V=bA$ZM2T,`s:RG'-L
%V6hYU.;-.JVfN];BOumk4No<?78YQk#_fdJ/aKYV@*p'5b\jXZ]3M_&\RGEsWFh98<u4=(Haf$lXd7;7SE<f;cElQ,@Snb*YVe7S
%q<CH'R6i;OQL[-gQ6*KDH'?K7KGXk5cN8V&f4VkC<HP=0kSNWM#MirRV%;[oO9*lMJf<3ZQB`N`;1k<Ua]5_ukmk)"@YCZC+\,!t
%2C:Mr`VJR@MV:k+[##J%"Rd`kWd2`TRhU690j'&HJEF_35b^uDO%_]-g(po=5-1a/VWDqt+"K(Jh&?^1AeeajhjbKZd:4o<oTT$7
%[3_<YVC%;$<Ul%UhHK=Z,qglQc\I?m,JTdLdIU@AGVDul??#"\`:.fp(-i4R;dLHt_nd8C);Q7sRMM7][f*a6PXrdE[Npo^mq)r?
%UD_t7pC;bu*04]$98u>a,!AuiNRk&kYq-JiKAL1tg*82'l<7(CF,S6dC*IM7.?cM:T,bMgOmQ>l.bttYmS!)D,r(kk'\4+fD3=<)
%2<>X0@M`CP:H9X;#Ecr`b?AsdO)6`Jl@K[<-.Jg.acap.T9gjQ^&kb8ak7R:fWr\"c3oK"FbF5CAkZlUXZ\U+3T.BBan('@(pg.F
%p;e_Jr=Wmhc2n..rPhe%L8-*GRV/+uW5'gL!iIC$p(fjHbgCCa9Xjj6='"0lm+&VA!*s:pFRN=<'VLSROIuTe,&CYrV"M8E13QXc
%^HAZR*(Qko\?j^Rh5CSc7EeQQ()"M:P$d3p[+_ZWHpGZQLl4`Dc`Y>soB3=cPI1Q:/8K:/+g(:*R7g@XQ$&\QPQ>W0U2Y*c^DQk]
%'WbM<bq[Lj#b3%_Cr(r[\A9S"fU3YZ`o4@KF+'Ut[82/#R\`H#-,k?,.NHn>;F^:]1"135En8U_afc2VZJj;U"9SWdc.X$AIT>fY
%Lcj?$HGjt@PudV_":k4b&Nr:dl0;c^@IAoF+tFN85c'>`NYgeWr&Ha<AS%XFh1f!g_4ZfIf/i0bb4*Fga_4TVV!aOPc\K@cG&Pi1
%\aLkm8?T.S<rci62G\sW1/YsAn;S@+4Wl)Jbpj];YPump#P,ffja@?*RVs>R/R<_%$R.\0]ur`V1UP5kV`p?3;Q3\29uKYY+<d^t
%9klM?<l9`p5&<M2\3kPFl9b#'p9ICW0?Od>3->*o&hDUH<dl]+Q,l!>c;!`)W:[7@&4a9QZ!P:PH&C<6%5AR8Zj>TS\=S/0qTrjD
%N#s(VIck/HnrKN`FcSRKh[PYUnpu&o4c<Vd^(nIt'.YsJaJag05_O[GW(so<%h@W#*P2d<:\N:s\1R<i6l=DI481+rTZ9Y8TZ1jZ
%R%3j*Lq[g_p:72T@+g"C%>+V<6G,"D_UPO*$i$`6J*D)D[f_Lo7',0&/816+`)o?nH9f]U3RhS"+DSki?7OV,.9d9OQL_^nGLgBm
%Wb)NeEKdtYNJnW3*5c3_kMQfFKB+qC0!M5U`Fgi'CGnHM^(,e@P;<*@D\8c\Vpm'%]8ie]UH'G4>L)Z+[PG=G$EHch@u[R$2]?H"
%3K%_sE\)QRc*RpBJZ6r93qZBpLQEp$DYm+`H)EZ12o,cqUnmb"6tm3THfS=PEC:hP'i^KND63)sAuju9RtMYMdOk=V0sdn&(sUt8
%QI`HjHV1fTR^]4#+C2)O2MBd^/8nDlf8re5%'Y?T.=U,3P;k^,,58:c9S7A@50Y-)"R2#e'AsX*/iJc&:;rBN%ooJ=]@aNUkGGr^
%YHpG8\46<,.K.4LC(/0/1"[_$7T,m6rQqjk'l5,iSr9Lj5=il]AV'^kilBi%lH;Mk_K-&lR-KU*/HeS)G@@H;@Y4C9WP#j]5Ch:i
%dS&tQHeh_K</fM-<N?:Uo&A"R2Hm%u=H(!#-)ErtNk7T"5a?2Z(6jI+4Ujfa/Zp\DEE+'&Z/f)a'M4mu)g>3Qc4M))eST$N*DpQf
%?gl1X.0-arBiHnp,H3MaZo(gP:_M,_fXJFFR`eO$j[G[68MAfuoMMiE>$#pYC/m_B>_8^H=*&tKa"89uOJ9p\8u=b=KHWsH&@BPb
%$?]m%%,4H9T\c=o?DWD?8j`8bA#Nbf>g9-4Ao`.A5W-EcP#R,&O[E\a<"eQi"$/8EDqS0#/HE4KF&iT1Gn0'S=l\RAU&\R&`n]h_
%`")@Ofej#<TkMW=jW"\F5hk:8%V(P*:Q;T9k3r&3[lV&oRh[f!%[Bm-*Zi^+D;?56!NV<$G6X<Vk"`unD,FYJoCm-o;$RI6S+akL
%S?(r",KNoI^Y1RJ6Tc><$/+W5Rk=mPqm^In=UR2]L7[t:g7+o=JEA\Y9blh1D5*#p9s`Yl@m0OLIr<STLt)k[![4hOWW?5&qQ)sT
%dPJEcFuO_'dE6f&/pO0?VuSlVAh4NXKp-rN(3o,&[N9?3g9cdm]e(lI?)=BrC<g;@Kl^["A^`:"Fm\Sn.ln+*i86$3Z2I(Q%_k5.
%VW/!.'^Bpp1Sm.(i(UBc-TG&-j6t;.m!+*q,s2,*9[O=t3*!EI$-j7QE.Sb"49#/[igp*gGPR965?#AX$-ne)jpB<JnT]XAANZRB
%6m7W+5?#_b#u23+nG>$'4T>=R6'!BQ;pt7DmP!kq"D>l'5/I2O4[6g^V*1F.9QAB+\A,]>EH$DYNs#2OM2s#D;rmPZG^l.-e'V0h
%cgB>\5#-W@MLD'^mk=E\%Cj%.a5<L<q0?tl^Zahogg0X6npI2$a5<L;rUKXV(]X:%1Z^h*88f4CrJ0\OTL5`+Mh(a$R51F&_YX^l
%4MdF`+N*J#`B^$Qrc4Yj(AARIq=FJVK)GG$U*02AGF&L/lP"t<rr,T*&19G;*97E$PR%$]'*U`#r^;U)5<i'lj9a+r$$h+YKgM<f
%<2ks,3)_C#$19G_ncWkG%/G[f8r!8]M4u/BJ#[>+':^Hjo(QchLHND0ih:;Kmd_NNJ"hJWhqqd-`!K0R&UAsaAON-J6m7]-5>t2H
%%GY;aj9a+r';H*,/gt$9K6p4J]R^_b7?=2/ZD):(]!07?S1-&0$19Dunc\]R(]EIQ>@@*AF+9%/-TG%8o]1LOR?8jV;eY4ucBK6\
%B]!*3FOY8Z\^;e7^Ym0HS1-J<$19B+o(ONSNXl$U00Je.-VBHtrJBO/6f75#iuV.6/jSt<pQm#uo='U=rkijrdXSdA&BPTu<JoiZ
%hC;"7+7:aOq?6O/,e^+e.S4Zep/Y%RIlL;kjR5kY-Jtmbo"KSPrU6$_J,%L=J,=Nj,s>(J:!COdB&\t=:#'?Ye[26<QY):fkYYs;
%*cM@abe@0VM]XPtJA_,nASkun8QaknP6O%E<qa^jHZLIXTD2n!319t[9nnE]AT9][kZ`Mr2P4lS=]Xl=cNrCYSV)se'kn,fIP:3.
%o<^+G2P%XA[8E;@Q5D;UarF2[;B?pRFFtMhH":W<FeORSgO&^J5du=T_q99Dc2MM^Q-IQf+/LN5ZMH:j&_la2N1D=`CZP5l"p5'O
%h1hq:c7!P:X(Z5U2+tqPBrs"p%GMk!_;(k;aWXsIk?!!G)m(EO1LBS[*p).7Mt^'=7oYtY$R1V02se8BM=>U;B%KlI8"Kk6dQGiM
%,WXJ4;I<boU!NEB3m!YqG[32.^*QEC6^2*0/"537]W@"GkLRle7st6R+(Sk^(KHp7gZ8)cTT$FmA4tBq9LtE-AW^QeH>9J=kDF,S
%N7X3Jl5H4TlC`V!okf/c@o8,Phsm+#_jT'8'_SBh8[qgC/Q9H8)d`/&@_C"S>5CG3:um;EQcUu-8bG%l0;oG)I@Z-Wg>g4IL]4$d
%!T<C[Wae(&!'RqT5/.Ri-#`i7QiE?$"&!F-h>:[##K$]LAlu'VGMtm8P*Y*8[fj<f>B4O?@1GcGQRu'_f3tL$cE?X,`WSJlJ@(n&
%,2um-`[&''cJ9MIkA?n/_aI7tg@o>b-'hWIn5)bC15o;BA4&hd.LI6J.=:)I%t1t^nE8"6gY*&%[V,j8TuljOU#3Q,(njd1gS1fk
%IW9E81%1F&2Mu@4Csd"Ab8:W5[V.N@)cS*"iqCqt]t5p9-8J0-;*3Ja98GKH.+QBVX[:c?.bX4+)/\2?+j&Wr)%Cn!>&L$4,\Js6
%65GWNB4j&ISMe<8m#2.V-`'(Qk_D*7o#Bnis6P`bGA_Cc.c,m4F=SNhKRuLd#:n<9[ZE4RB&\^ZPpGailh27njmmn^6k8nISY'bt
%bDl5NY8TuLBL[@7VS5+&OOTb8i<_^SN["m).\NEWX,#<^fOj8W!oG2=HsnFcV&P_lJ,X\]=+8<M]9WU*K2'[8FeKb4f!dfs3s7U/
%@:C:Nf%gUuX7W-F$75JP>d$:Q;BTe_%,6T>,p3lelMT]IjC.2rPk,Fb\cGpD<Ng[XKLPs+AL5-J9+Ksli%-6I-[:kp$hD;chY?m.
%`[dlaS#Wc0W'N'dLVjI=S_>Vr$Z0c0Dd2k5?$Ko\cFW5-A#O7G3tJOY%,'LKdR,,E*HkH8=]2FEE>i33B9QGW8jr/M"$egg:dt,>
%\sj)1F<AGpQj,Cf5^"bi^HmdM7B1K0O/?eo^JGlfBOTel?ml+_lrR=3Vp1$@Y1NDnA*6^$1u;![f^$hi=`-Y1rNe6F_@:N-TQDkU
%"t<Q]_'p<<R4eS,B@[^?E_.F[EFESao2<[G'74kuLHaL?31CUJR0;2G_Hm"@1E+thST;9F4&gYJJq5.o\"?<u+cAl2<0ceuUp5hM
%Z(!#iRBY[Om)_HBbRZ5oAnR;O]ju\o[p=abjc+_sCFRFbf76fNYRoLLB)qEq&$'m/SKK0#:oG]IBSi(M'?9GnS^^NLkot'Ti'if%
%b;M&#lUh\9\G("%bf0cN_HfWp9aZjGU:N+;RDXegTPtB0%R5UdE&Q[i9$s>$\sOI8?$bdTXDG&*mo%>u]Z5:`.N,;:fa5bd@D<12
%q!o38g7s/9k;q`j4>U:F(2-gqG]m$r?f4X45KN/#lc>tG],Nb8$"Y+[*8_s=+V53CHH3Vgf9^dLUV01g#!X9>$JS!s17oTP5`2*b
%i^CN)3=!VV69J:eRMF9OnPgOpHAP/edujgcZI$!'ZDOr;<W@$KWg;i0Pm4'hZ2E+?m+j5nqA]2)ora"3jYH;q9MbgeCn\sObO9oR
%'2ofIN__M,7:^$b*s+X\0_#PQA'H<V%OCiLQ"(mV.n'@/AKL_^O1+SoC7l!s%->p#UK^P`hjehO$8;J9C$#4:>UN$JCYP>JJ]2Pt
%oa?-*T>-`6;PBaI2IUA1-alcN`G@u><nZO;?q),m<&0>S]HEKcq8u6BBSJhiJSV_Emib#kQ\C6qDFmjRC[_d9l,nRZRE[K&K]$Z^
%-37E0k1<rc6qc^lSdN-(`]8iK6gB)5gWG!'#%Tn;N2`'`>t%(h)d*sARh!F$U?7_cG-kuVm!1Mq]t2R#+7:.M_YFrq,S.Psk-!%H
%c>@mt?K##GWe7NCaN)?qM_YGZ!'('#Q%Vlc^";IE6neXY6&@FNQhhI1reS$FnR!jVd<cY_QJQ.Taj05L]X;RO<m!EA.r[n`NWH!n
%d\XRJ`RY)Y#6QV>(B>uiFOV+bO0hTV/DUW"[t&+a5eS2dY!GL%ELFj2ffLa@UNs[#CqVecc-c_nlnmHti=s6QiBu"I,SrZn(]t1I
%\^4#g$HNk3_4<eu\Z1S[n!:c+pFYP90tY[M;T]04PS,7klA=ZR9n'c_)lfuVS18-d#?(=,5kC>`IK3Znm[u&@aAfAWO\JYPBV^)C
%NE"Ith7oY%Q0d1<hdS=u=4_`aZb8j?[0[\h8<Q*@W.8`1K_*U2!+;smW=YYkgTt>F`gqHda9)ZN)I(`l^^3&'DI)c7n5\8"D&5JP
%X:Iq2@u[EjBO_rUgDYZghRLn8G:g7OF$F`Kg^__Jh&11n&LqTaC^,t9=Q-86gnr%!1u7I7HO6dAblDs3QBpM$^'-lTgs=SRH0f%S
%a!M84kjk:_>$SIO%i.F@PlQDTjd(5t)FNj+'EN!S;',F:$dn!='4=u_riEXKjQfNEP(h1VIH>RgSNWoQKB&VIgZ[VE8Y/R2Sk1[I
%]"Z?l=o>h?VGfR'RVc+0,NNNOs13kX;r9UC@u(PP%L/?>$)+U1\B1['ah\<i-o]e<[`h3D^V%o\+76m!2cAm-A>[nkL'hL*,#$W\
%$''B\f@s+b>$&eMUdljJ[Q)-??(Y+O[ihC(.0H]Aj*Gj$Yn&5tM;1T(o>5Omm0hgr(M>mF-Duqq(9#hth.(j#Ymh_U6gWCM0ih;@
%V8#ju3+":/\WQ?4D5`U-5Zr9X9<\IDf-i[b6tE4XT.^7Z4?7aFG@a.p;3G[^"fUDa"':qtEs/[aoN!4G/Db\&JH7[R.P-_@2N\F'
%Cq`lf&n[Vi[29p5s'hu'Kal^#M<uZ1+27Os]YIiZl*4%Y%a/c`iKl;)?#A-8Dbgsd<SGDD=r$.#99A%?)`AP!k@JY\gn"^@B-`nR
%%rk)?+fVV7b^VX(!Sgd8+eNIn!Pd^36Ss5enCBbZW-6G?R28#onq-*E?jbiW<NU"%7&>J9OM#hf/ANq(;HjL[qc36fiQ#3#kB#9*
%DLV!.VS@,ELHaGRJ@YUPpOAcas3lJ#5Q'9^s7?+0J,SVu5Q5X\I/L04roL'Xn]QuCrSKj<o)%>CjmPE_q<>eX5Q?Zus7Cg'T0E27
%Q_49VO2(Yadtb^<YJ:$C[,=IO%mGI?\,Z#kIfI%[#>hkK8c~>
%AI9_PrivateDataEnd
