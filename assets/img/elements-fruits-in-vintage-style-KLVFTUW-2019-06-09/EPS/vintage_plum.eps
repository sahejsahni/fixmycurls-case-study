%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_plum.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_sliva</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T01:02:04+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T01:02:05+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T01:02:05+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6xnNu4dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYhd+cbm51ay07TDFCt1dGFJ5qs0&#xA;qQEmcooICrxQhWJPIkbDrlwx7EliSy/KWTsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVaZlRSzEKqirMdgAO5xV876jY3UmtyXKzoLG9uLmHTrlRRg&#xA;kcpkidKD9ugCtuafRmfGY5dRzcMTBkQ+iQQwDKag7gjoRmA5jsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqSeY/N2k6EoW4Yy3brzjtI6cyvTmxYhUSu&#xA;3Jj8qnJxgSwnkEebzXWPNd/rZnlvZCmmRKz/AFEErCeAqVagRpjUbhytP5Msqthz/H4/S4OXNKWw&#xA;2SDWry7ey+rSn9/bhbhHXYxTISWp4L9pQPEdNjk8UQDYa8Yo2HqH5YebIdY0WO0kYC7tV4hK9UWg&#xA;oP8AUqB/q8e9chmx8JdlCVhmmUM0Dq+u6Po9v9Y1O7jtYjspc/ExHZVFWY+wGSjAy5IJAYZefnFp&#xA;qvx0/TLi6HZ5WS3U+68izU+jMyGgyFjx+SFT84L8kcvL/wAPit4pP3GJf15b/Jc/x/avEe5MLP8A&#xA;N7Q2IGoWV3YfzSFBNGP9lGS3/C5TPQZI9F4+8Mu0rWtJ1aD19Nu4rqIfaMbAlT4MvVT88xJRI5sg&#xA;QUbkUuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVbLLFFG0krrHGgq7sQFAHck4VYrqP&#xA;5neV7Vmjtnk1KVdqWic0r/xlYpH9zHMnHo8k+QY8fcly/mH5jvATpvlxmjoSJZZmI2FTXhGyin+t&#xA;mXHsuXUgMTNbeedPPNlwFzotqHmJSKP1yGLbivGhPFaGv68hm0McceIyYSzCIssF1KSS4vZZJZvX&#xA;uZDzvb1iOLv0+HsqL9hRWg6bmqHFB/YPx+PvcEzMjZVmhQLbWgX4ZnElxyIDGO3owU1HIcpCijlx&#xA;H+SuQvmfxv8Aj9rXfVBwkXGqs8wDrJVGrX4gw4g8TvWlAa/Z+z1By0CgG2A5BM/M+hXvkLzHHq2m&#xA;8/0JdSVQpuYX3+DfbYE8a9Vqp75ZCQyRo83NI4T5M4u/zO0m38r/AKUqrXzrS2tASRLIQaMvQ+nt&#xA;Vidx0O+URwEypsM9reM6jrN5qF699f3Pr3sh+KViPhHUKnXivhT6c2+OMYCg1WhxcxE19QE9qmnX&#xA;/Pf+mWcY7/x+PxS2rRSkLzDfI+HX+h+4+2TEvx+Px9iQVZL2cH7RoO1a/wCf+fiMmMhTxImzu2ju&#xA;Fu4JHsrtfsXcB9Nx33pswPcGv3b4JQhkHqCdi9N8pfmS0skWneYOEU8hC2+or8MMpPRZF/3W5/4E&#xA;+2ajVaGWPcbxZCVc3oGa9m7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWKeafzAsNHkays0F9&#xA;qo+1CppHFXvM+9P9Ub5lafSTynbkxMu5i0WgeZfNBjvteuXFlISbeDiViJHQRQA7+HN6/Tm7w6TH&#xA;j8y1ykPeyRNI8r6EiP6cXKAkG4uGEnKRRU7eEfgoFTQZk2S18Uil2pfmFYQI31cPKiCrPXgCK8mq&#xA;SPtVFagfa/yVFTw0LLIY+9iV9rt1NayXl7+71C93jgr/AHVtT4FPSlRudx7kKNud1GQ5cl/whwpn&#xA;il5BLNPieWZCQftD00FQahdjtxNePhRqf77TrXM0Px+Px1KJH8fj8e9GSTBHupRT01paRVpwog5S&#xA;Ci0XiWk4uP5QWB+HIAch8WIHJB6ZcQRzGa5b04xPbF5JNjx9dPU5/wCqjVb/ACi2Wkbivxt+Pg2x&#xA;+oMp85/mLBrcVzoejW8dxZSApcahcKShof8AdKbbg7hj93fL9JopSN8nOMuLYMT0y0jtI4La5VLu&#xA;xiuFuZIGDKXoOJTlybiGU0PEA5tYaIRlxWohtT2LTtN/KLzBope28tNb3pUxpGsznjIaLUsX+IKW&#xA;Xcoa8gAGc8csMSD0aCJxPNiGs/lfp9uXudOSNhGCzet6Xo8K8SCXotK/D6g2r19NtsBxQl0pkCDz&#xA;Y1deVNAln+rSSP5X1Tbg8xkk01yd05l+Vxahv5nMi+65jzwmO45MSCNxuGP61omueXL5bHXLU2zu&#xA;OUMuzwyxn7LxyLVHTfqp6bZCM62KYzBU45K0YE+PX+nv/Zuwy8H8fj8fMNloy3nRkMcgDRNswNKb&#xA;7fL/AD75dCQqjy/H4/WzBej/AJf+cXgki0LU5C0T0TTbpzUg9oHJ/wCEJ+Xhmn1+i4DxR+lI22ej&#xA;5q2bsVdirsVdirsVdirsVdirsVdirsVdirsVYR52823iC50zRpPSktwv6Q1HtCX+xBHsazON/wDJ&#xA;G/y2Gi0fiGz9LAy3oMb8m2Hl2DlqGsTKLeJ6JBzBkdzQmRkIZn6+G+dBw8IqIYzvkEdrX5g3M0gj&#xA;0pDbwxqUinkoZd6kkU+FepwiHeiOLvYnNPPO/OaRpH6cmJJp175NtpEXmiXVneaemqoLeOeJr/6v&#xA;KQsjwRn4Cyn7KOwJ36hT2zV9pZ6hwx5lxNRl9NBKbyZ57lnP95yqSa1G467E1rSgpsabF6KmpiKH&#xA;4/H47ueMBQTGyMdtbSTOAEjRmfatQlSwoC3LfqK8VP2izZXLc1+Px+BQYHcoa4WRNOhhlH+kMoeX&#xA;kAP3kn7whqdRV61/l9QdskPqvp+Px8mQ5/j8fgJXfwn9ERtuDdSqoZuvpqGYk+7t8Z+jMjCLnTZD&#xA;eSto0Qjhah5LUAU9s3mnjQc6ATDMhmmWha1Npd36i/FbyUE8VKhgKjoaeJHUVUla0Y4JC2Mo29N0&#xA;3UINRt0ukfmTRkIJJVwpH2hwbmFU/F8DUB4mGFeTUkU45Ffj8fjvKW67pVpcWjRuFaNVDcjw4Ksn&#xA;RgP3SIrHcMDHy7Cb7RIKYn8fj8e5idvqaaLbv5e80Wrar5NleptiT9Z05m39a1LqkkfiYyoB3oNz&#xA;XHy4QBY5Inj6hi3nHydd+U7u3kiuBqPl3Ul9fSNXjBEcsZH2W/lcftL1HXMcHh9zGE0rifoQfp6H&#xA;fbahHhTb5VAGZMT+Px+PgG8JjbussZifoRUU6+IO1KexoPbMiNSFFmN3r/kHzNJq2nNa3jctSsqL&#xA;K52MsZ2SX5mlG9/mM5vWac4p10TE9GU5iMnYq7FXYq7FXYq7FXYq7FXYq7FXYqk/mrWLnTdNAsU9&#xA;XVb6VLPTIevK4mNE28F+0fll2DFxyAYzlQeZeYhBZzjRbWT1odPZ1ubmtTc3jH/SZye/J/hX/JA8&#xA;TnU4YCMaDDGNrSfLWxvFWQXF9p/kiGKSeBL/AM4zqstpp8i84dPRhVZrlP2piDySP9n7TdhmJmz7&#xA;8IceczLYcmNW15d3kN5rWo3Et5qt9MRJdTEliI6U4kV/a6BdloKCoUHSaiRM67nEyfVXRDwRMzqQ&#xA;OTlhSle5KgDiSfEbGvVVP23yBP4/H4+wIJTW+iC2EdpX4ryaOCShUIqqeTq7Lt8KqQVX4V6ddzTE&#xA;+q+4fj8c2ETvfchdRk9W5dXB4fFyWgrxUkuCB8yn+s79hk4Ch+Px/YEx5JXr1wfr8FlTmbaPlMnb&#xA;15N26+C8VzL0ceZ72/AOqI0kj0GAXiQ24zd4OTmQRh8a79q9MuZuBJ8PmPHviqc+Xdfl0u4AclrR&#xA;z+9QKGIrSrKGoCdgeLfCSF5BuIGCUbYzjb0aKUTKrwtzLMJInQysS0o+0pH74vL2IInlG9Yospcf&#xA;8fj8UkusaVHc24iVRIpDemRx9MBftmNYlZCAR8RgUIP252yQLOJ/H4/Hkx3yvfabCLnyJ5lkD+VN&#xA;akpZXXJX/R9+393NG4LKEZjRqNx+jlXEzYuH+qfsa8sK9QYLq+i6l5c8wXnl/U143VlIUqBs4IBV&#xA;1rSodeJWvt2rleOVGimErVIJaCoICjcsTtU+57nxIJPgBmXGX4/H9rcCzTybqUkEzSR1M1or3aRg&#xA;GrwqoN3EARU1hT1R/lRqO+Va7D4mPzCyNUXriOjoroQyMAVYbgg7gjOZbW8VdirsVdirsVdirsVd&#xA;irsVdirsVYjqGoA+aNS1Qkej5S04tbA9BqWoUjhNO/BGDDwzcdm4tr72jJuQHmaJLNKscatJLIwV&#xA;VUFmZmNAABuSTm8bkdrugaloV6tjqSCK7MaSvCGDFBIKhWptyp2wRkDyYxkJCwoR6xBoMA1Hismq&#xA;yVXSYnAKRuNjdSKa1EZ/uxSjP/qkGjUZaFDmWGSXRiUr3Ekk1xcStPPKzSTyyGrO7fEWctUkn/K/&#xA;4E5iAUPx+PxyYAUyWKJU0ixMfxAQr6YHL4nfdyKUO7sRtv8ASw46Um5G+9wSfUXWkSxuxU1l6Ow2&#xA;oCeBRGXoNuLMu7fYj2GMjf4/H43Kk/j8fjvRVwSNQtxQVtYHdUPGnKRhEqFBVUXir1A3C1J3yA+k&#xA;+ZYjkhleCEyXs5Jhi4Oof7UjAEwRD/KZQGb3JydE+kcz+CyonYMPD3D6nMZWHru7+oR05Vqae2bX&#xA;HHhPD3OZEVsn2ltIAyP1pUHxH+ZzY4b6t8EeaUqe2Xs1N3Pw8alqjcDYgnxociShero32SDkgUsh&#xA;8r66lpKbW8b/AENwwUnkwQvs44ruVcAclXjzoqlglcjKLCcbZ1LxuImMtJFdQ5QtGyFY/h5u5Ahd&#xA;Yz8PN19BD8MUbtlTR+Px+L72J+btBW7hmSUl5kQc1AaqA9DI0tXRdqgzPGf5YgMlQkKLZE9Ek81s&#xA;/mnyFba5L8fmTym0em6y56zWMpP1S4ata0b4D41qe2a7JEj3hx64ZUw+1l5ojCpJ6da1O5Hw71+W&#xA;570GZEJX+Px+PJyAU/8ALOpnTtUtb5FDC2mSVkUDiwVgWQ0HH4hsRyOZENxX4/HxZ1Yp7P5eVbaC&#xA;60oNzXSbmS0heteVuKSWrb+NvJHnM6rHwzIXFK4ppmO2OxV2KuxV2KuxV2KuxV2KuxV2KvL767r5&#xA;N1S76S635gn33+KCxj4xj6PWGdNoYVAe5ojvNMfydvPKmn+YJ9R165S3ktoq2HqglPUY0ZqgH4lX&#xA;p88ysoJGyM4kRQY7+YHmSDWvNGqayhP1WR/3JIofSiURoadqqtaYR6Y7s8ceGNMA5PPK1xIKO52P&#xA;cL2UeFPHMG+I2WHPdEw2pf4QKjcUp277eH+fXcWxhf4/H4+yQDI7NWbRbFiKFYFQGh6LVa1AJq3T&#xA;bcA0HxMM52e0yPP8fj9TrZfUW7ZG5iqheO9RtuRw24dP5Ph/1E6M2CR/H4/HU9yD+Px+PNu4St1d&#xA;VBoDHCVoB8CIDxCrsOTSlRQ9OWIOwUcggLiSO5vPTUh4bQkuw3Vrl92I/wBRaKM2/ZmDnM/BzNLj&#xA;6ljN+oh1KR2WqrLyYezjl/XLMoqZ97ZLYppZzqkoCAxiu6HoR7ZlY5UWyJTb5ZlNi0mpoQadPvwK&#xA;6ld/2gPuPX54q2GBp036EYbVmXlLzA8pSyuJuBjUPFcFwr0iWikSMGVGSPZZGr6aA8F5nK5R6tU4&#xA;9WTywL6KIg9CNHAhRFdZBI4qBGoEkiSOKfCoa4cbyPGpGQavx+PxTDrZItL82ql2rRaH5jjl0fUi&#xA;xBUJc/Ars3KRQ8ExRz+8Zl6E1rlWoj1+CcosX3POIrW5srq7026UC5s5nt5o+vxIxVl6io5Kdth/&#xA;NlOE9Px+PwUwOyZWTfGCdwdlbr9xNB/wC0zLxn8fj9DbF7J5auueqrXrfaNpt0T4vB6tk7H3Itlz&#xA;S9pxqbHFzIZPmsbnYq7FXYq7FXYq7FXYq7FXYq7FXjd3KP8ABnl+ACgWXUJD03Lyotf+SYzrNN9I&#xA;9zTj5lJsyG1TmhE3FHAMYPJ1PQ06A/TvkZRv3IItRk0+JmDJ8PiP6ZA4h0QYqyRJEnED4T9onbam&#xA;TEQAmlfRHn9ebTpGHCOMPZivH4A7lxXsQZBv2X3pnPdoYPDlfQuu1OPhNphGgicECnZSPgNSoFaC&#xA;pUlae6LRV+JswSb/AB+P2ndoQd7cy2sFIf8AeqaSQW9BxAZmJ9Wm/wAMcbLTf7Ry/BhOWYAbMcOI&#xA;0hYII4YljjFFUU+fuc6mMREUHaAUkurRJLcTKv2miDr7tEf+aCcws8bJ933fsapiyo6fK8sQBCNx&#xA;+HiNn275DFIkIibT+3flEKmpGxrsfpzPgdm4LytTUbN05e2SpK2SMupVviQ/aXufpqMBFqQ1GAiB&#xA;UpRQEUH4Rt7AUwDbkhXhmlgmSaFzHLEweORTQqymoIPiDkkvRfLWpLqNkGVKzJWBlCs3EPVvTRQQ&#xA;zBviPpq/KU8nmcIKZVIU48xR/H4/GyA8+6Ml3ossoq8kao3q1Dn0m+BTyVKcKsOHH04tqRq/2sjV&#xA;gjvWHc838y3JvNf/AEo3XVrWG7nJ7zhRHdE123uYpDvt88wcf1Mce2zVkSZfE/tmpr47mhb/AIKn&#xA;yzNx8/x+Pub4vUvJzs+s6QTU8fLzKx/7e10FB+gbZqu1ObGH1lneahudirsVdirsVdirsVdirsVd&#xA;irsVeNa8RCh0wmkmn318gQ9RFLIssR+lXzqdDK8YLXEblK4ojIHowBReYU/abcCijqTv92+ZM8gi&#xA;LJZEoO2nlkZ/U4ABmVVR1k2UKa80LKft9sx8Gp8SRCIytEH9WZTJoVJJI/1TXtiq14iXWRGMU0Zr&#xA;FKmzKaU/HuMqzYY5BUmM4CQoo2y1N3u4YNQCoZG4Jdx1Ckk1oy/sMxJ3r1PsM0Gr0EsQsbxdfm05&#xA;gLHJCzFpL+dmIIt6WkQHQLCKNT5vXNl2ZiAx8XWTk6WNRvvQl7eiKkabytsBmbkyVsObfKVJRLcG&#xA;BknDHlA4KnuzE0b8BmHKVb9zUTSN1/T0tZLXXLVA2l6ryICiixXC0M0VB9n7QdR/KwHUHK5AQlfQ&#xA;sORXWl1xKihUN2Y1FPZv65mY503RKZqQRUd8yWx2KuoMVdiqZ+XtYbS9QWY/3Eo9K5HAOTGxBNFY&#xA;qGIIB4k8T0aqkjBIWxlGw9E1G2S70a49X9480TvCtTKRJJGzBgWDF3ZPiaUryZdx6UVGakc2gGj+&#xA;Px+OpeGahOGvIYCf3tsZVXrtE5Ey/wDDySHb8OuYkxWQpIqRR+nKKE1+zsF8K+2w/D6TmZiDdF6r&#xA;5BiaW/u7g7x2lnZWML9qmM3co+hrkDNH2nO50xx8yWa5rW12KuxV2KuxV2KuxV2KuxV2Ksb1nzUF&#xA;tWXTVka5V5EmPpNWMRclcryXgzc1oBv8jlgh3oeR+adcuLnVGuHp6moRIbe8hAozRgx/vI/j+P4Q&#xA;pKtTYEDNnpss4R4YtRkR8UNpVis13C+vNLJYFh9YtLZhG5T/AFyGqV6itfnmfHSGW8zuvASN07uL&#xA;Dytp1rJFo1xcXTzvWs8KwrEhoSNpJSzsVX2AHvl+PCImwEwiQgMvbHYq7FVO4WF4mjlICuKb/wAM&#xA;jMAiigpXHqE3osvLkQztJN3dmYsSPnXMTHPhjwjkGqJoUEKGfi05VmMah3AFaICBU+AqR9OVGVbl&#xA;BKnYWjXUoubhT6AakcYFTI5OyKO9TkYRv1y+kIiL3PJ6Fa+XZNFtU0XzUBFoHmKn7+Mc/wBH3wLG&#xA;FvcoG3p9pS6jK8WojluPyWcD+PuYTrOkax5Z1ebRdUjCzQmqOKmOWNt0kib9pHG6nJwmY7FjCavZ&#xA;XlCF3of91t1/2NczMeRujJMwQRUdMyWx2KuxV2Ksk0LzMlvYvY3u8KI4gJBYUJ5+m4B3TmOXCgDt&#xA;x5nitMjKLXKG9h51e/FrctB9lVqf9iPcf5+HXMHJ/eljL6k1ikFtZNK4NFFQu4qewAovU+2ZQlwx&#xA;stgNB7b5L0mfTNAgju1C39yzXV6BtSac82X/AGAov0Zy2bJxyJTAUE8ypk7FXYq7FXYq7FXYq7FX&#xA;Yq7FUq1Ly7Z3khnjd7S6Jq00J2banxo1UbbuRX3yQkqWr+XXlpNOmtFhZppUCi8kPOVGUDiydFSl&#xA;BsoAPfLI55CQI6MeEPKNe0/WdD1B7W6QPx+L4QSGToJI/FT946Z0OHVcceKPxHcxJIS+LWY3IASt&#xA;e4Iy0agFRNVGq25YrxbbvtTpXxyXjhPGFo1aNq8EJA7kgf1weODyRxqL6nO6VjAWqOw7nY0HX78i&#xA;cxI2RxoaaUCQvM9AUUKzH78qlLeyxJRkGjXa28dzfH9GWEwLQzToTNMP+Xa3FHl9m2TxYZVx9A18&#xA;fQKotJL6SHTbO1kEDsGi09D6lzcONvVuHFAAB0GyIPfkWTGMBxZD8GQh1L1XyX+X0WlPHqOp8JtT&#xA;UfuIk3itgR0T+Z/Fvu99XqtWcmw2i3iPeynVdKsdV0+awvoxLbTrxdeh8QQexB3BzEjIg2EkW881&#xA;PRraa1h8n+cphAIqp5T83MPhTuLS7P8Avs+/2eo2zcYswyjf6nFyQINvPda0TX/LWrvpGuxG2uE3&#xA;jZgHilToskb9GVvEfr2y+EyDRTCdrrW8oBU1TuQagfR1GZcMjcJJgrKyhlNQe+ZANs28VdirTMqq&#xA;WY0UCpJ7AYkqx2zcT3U1wzBEdyeTGlAOm9V6D3zXYzxSJaI7m3pPkLyZLqd1b6vfRGPSbZhJZQMK&#xA;G4kG6yEH/da9R/MfbMPX6wH0R5NgF+56vmobHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUBrOh6brFr&#xA;9Wv4vUUbxyD4XRv5kYbg/r75ZjySgbiaKCLeX+Y/yj1GKRp9P/02PqGjKxXI/wBZTSN/mCD7Zs8e&#xA;uhL6xR7wwMGGvpBspfRvPWjuDsVmP1d6V7RyR1bb/KzLiBLeMgWsxPerRaVp/Mu0t1wI+wkUBof9&#xA;czb/APAjJeDkRwyRQtvL8Qq9rfTEdGe7gtUqQOVVSCdqddg4+eHwp9dl4Joixv2M3paBp1vBcDYP&#xA;YwSXt18/rFwbgxn/ACowmQkMcd5SUYx1Nsg0n8tfMWpXDXmqSGwEx5TzSv8AWb6SvdmJZVr4lj8s&#xA;xcnaEY7Yx8W2Me7Z6LoPlnRtCgMenwcXenrXDnnNIR3dzufl08M1eTLKZslmBSaZWl2KobUtMsNT&#xA;spLK/gW4tZRR436fMHqCOxGSjIg2EEWwbVtM1PR9NOk6xYt5r8loSbdCSNR0/wDyoJAOXEfSPEAZ&#xA;s8OrjMVNx54uoYRceSre7H1vydq8esW3awnZbXUYv8kxuQkpH/FbEn+UZmASG43DASI5pFPLf6bc&#xA;tbX9vLZXSfbguI2ic/NXAocnHPTZHIrJrKUFRyr3AI2/z65eNQz4136ULdAFAoXauwHz8Pf7qnD4&#xA;1p40TY6P5h80t9V0a1Y2pNJr6SscIAIBHM/OpAq3tmHqtaKpiSZbB6L5U/J7RNJZLrVGGp3i0IRl&#xA;pbo1OyGvOni33DNRk1BOw2ZRxAc3oGYzY7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVk9vBc&#xA;RmOeNJYz1R1DL9xwgqlEvkryjKzM+j2gZvtFYUQn/gQMmMsh1LHhDcPkvyjCwZNHs+Q6M0KMdv8A&#xA;WBxOWR6leEJtDBDBGI4Y1ijHREAUD6BkCWS/ArsVdirsVdirsVY7rfkDyvrEhnntfQuz1u7YmGSv&#xA;iePwsf8AWBy7HnnDkWJgCkF3+VmoPbG0tfMlytjQgWtxGJlodiDxaIb/ACzJHaEuoBYHElUX5HSE&#xA;1l1aJB4R2gJI+bSbfdidd3RC+Gn+j/lD5VsZFluhJqMinkFuCohB/wCMSBVP+yrlM9VOXkyGMM1j&#xA;jjijWONQkaAKiKAFAGwAA6Zjs12BXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:37A121C7D4E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:38A121C7D4E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:44155481-5f24-2f43-88f9-cc9e8e07e8ed</stRef:instanceID>
            <stRef:documentID>xmp.did:4432F49441206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.878431 .745098 .545098 rgb
f
343.055 661.176 mo
311.922 661.176 281.547 653.02 252.75 636.953 cv
186.297 599.863 188.523 517.313 188.648 513.813 cv
188.641 510.785 189.258 434.688 242.805 385.734 cv
284.383 347.719 334.547 326.777 384.07 326.777 cv
403.711 326.777 419.805 330.375 436.375 337 cv
437.055 337.223 458.125 345.25 471.398 359.477 cv
482.109 362.09 527.742 375.773 537.727 421.41 cv
543.75 448.961 557.336 543.844 478.969 607.949 cv
436.422 642.766 389.414 661.176 343.055 661.176 cv
cp
.27451 .207843 .145098 rgb
f
193.75 514 mo
193.75 514 193.75 437.5 246.25 389.5 cv
308.32 332.734 384.25 320.5 436.75 341.5 cv
436.75 341.5 459.25 349 468.25 364 cv
468.25 364 522.25 374.5 532.75 422.5 cv
543.25 470.5 541.75 550 475.75 604 cv
406.992 660.25 324.883 673.516 252.742 633.25 cv
188.242 597.25 193.75 514 193.75 514 cv
cp
.505882 .317647 .494118 rgb
f
265.75 543.25 mo
265.75 543.25 265.375 548.875 267.25 558.25 cv
269.125 567.625 267.25 571.375 262 571.75 cv
252.273 572.449 246.625 561.625 250.375 553.375 cv
254.125 545.125 265.75 543.25 265.75 543.25 cv
cp
.27451 .207843 .145098 rgb
f
242.5 550.375 mo
242.5 550.375 237.625 574 254.875 578.875 cv
272.125 583.75 270.25 564.625 270.25 564.625 cv
270.25 564.625 272.875 582.25 259 583 cv
245.125 583.75 235.75 568.75 242.5 550.375 cv
cp
1 1 1 rgb
f
258.742 550 mo
258.742 550 254.875 553.75 234.625 563.125 cv
214.375 572.5 202.375 576.625 195.625 575.5 cv
188.875 574.375 186.625 577 186.625 577 cv
186.625 577 201.25 585.25 203.125 595.75 cv
203.125 595.75 209.125 599.125 214 591.625 cv
218.875 584.125 240.625 574.375 248.875 570.25 cv
257.125 566.125 260.742 565.5 260.742 565.5 cv
260.742 565.5 268.75 558.25 258.742 550 cv
cp
.27451 .207843 .145098 rgb
f
175.75 584.5 mo
175.75 584.5 175.375 579.25 177.25 578.125 cv
179.125 577 179.875 575.125 181.375 575.125 cv
182.875 575.125 181.75 572.125 184.375 572.125 cv
187 572.125 193 572.875 199.375 582.25 cv
205.75 591.625 205 598 202.75 599.5 cv
200.5 601 193.75 601.75 190 604 cv
186.25 606.25 185.5 606.25 181.375 605.5 cv
177.25 604.75 176.5 599.875 170.125 599.125 cv
163.75 598.375 159.25 589.375 159.625 585.25 cv
160 581.125 159.25 584.875 163.75 587.5 cv
168.25 590.125 173.875 586.75 175.75 584.5 cv
cp
f
184.219 603.238 mo
183.422 603.238 182.508 603.082 181.195 602.848 cv
179.969 602.625 178.336 600.027 177.25 599.004 cv
175.609 597.461 174.352 597.332 170.391 596.875 cv
166.477 596.426 163.258 591.785 162.188 588.227 cv
162.531 588.48 162.906 588.727 163.328 588.965 cv
164.617 589.703 166.047 590.074 167.594 590.074 cv
171.695 590.074 175.547 588.715 177 587.004 cv
180.75 589.504 li
178 583.75 li
177.75 580 179.414 578.98 179.953 578.438 cv
180.234 578.156 180.766 577.621 180.906 577.621 cv
182.742 577.621 183.227 575.98 183.398 575.359 cv
183.461 575.18 183.539 574.875 183.609 574.793 cv
189.438 574.82 193.922 579.586 196.688 583.582 cv
201.625 590.707 201.273 594.918 201.047 596.043 cv
200.883 596.871 200.578 597.328 200.344 597.48 cv
199.586 597.984 197.688 598.477 195.859 598.957 cv
193.305 599.629 190.406 600.391 188.273 601.645 cv
186.133 602.91 185.297 603.238 184.219 603.238 cv
cp
.741176 .580392 .403922 rgb
f
181.492 581.746 mo
181.492 581.746 190.117 591.496 189.742 602.746 cv
192.492 601.996 li
192.492 601.996 192.492 588.996 181.492 581.746 cv
cp
.27451 .207843 .145098 rgb
f
185.242 580.5 mo
185.242 580.5 194.5 588.258 196.75 601.254 cv
199 600.504 li
199 600.504 196.75 588 185.242 580.5 cv
cp
f
201.492 576.25 mo
201.492 576.25 211.5 575.5 216.25 586.254 cv
216.25 586.254 213.75 577.254 207.75 575.5 cv
201.75 573.75 201.492 576.25 201.492 576.25 cv
cp
.741176 .580392 .403922 rgb
f
267.25 521.125 mo
267.25 521.125 328.75 382 470.125 365.125 cv
470.125 365.125 414.867 360.121 348.492 411.496 cv
282.117 462.871 267.25 521.125 267.25 521.125 cv
cp
.27451 .207843 .145098 rgb
f
225.625 602.125 mo
225.625 602.125 254.5 638.875 314.875 646 cv
375.25 653.125 445.258 628.113 489.25 578.125 cv
547 512.5 523.75 409.75 523.75 409.75 cv
523.75 409.75 527.875 516.25 484.375 563.875 cv
440.875 611.5 372.656 635.605 331.375 636.25 cv
259.75 637.375 225.625 602.125 225.625 602.125 cv
cp
f
301.492 464.25 mo
301.492 464.25 329.5 467.746 341.992 493.254 cv
341.992 493.254 327.742 468.938 298.75 467.09 cv
301.492 464.25 li
cp
f
305.5 459.246 mo
305.5 459.246 335.242 463 346.75 490 cv
346.75 490 331.992 463.75 301.992 461.754 cv
305.5 459.246 li
cp
f
311.242 453.996 mo
311.242 453.996 339 457.5 350.5 484.5 cv
350.5 484.5 335.742 458.25 305.742 456.25 cv
311.242 453.996 li
cp
f
314.242 448.246 mo
314.242 448.246 343.75 452.5 355.242 479.5 cv
355.242 479.5 340.492 453.25 310.492 451.254 cv
314.242 448.246 li
cp
f
319.242 443.746 mo
319.242 443.746 347.008 447.25 358.5 474.25 cv
358.5 474.25 343.75 448 313.75 446.004 cv
319.242 443.746 li
cp
f
323.992 438.996 mo
323.992 438.996 351.75 442.5 363.25 469.5 cv
363.25 469.5 348.492 443.25 318.492 441.25 cv
323.992 438.996 li
cp
f
328 433.746 mo
328 433.746 355.75 437.25 367.242 464.25 cv
367.242 464.25 352.492 438 322.492 436 cv
328 433.746 li
cp
f
332.5 428.496 mo
332.5 428.496 360.25 432 371.742 459 cv
371.742 459 356.992 432.75 326.992 430.75 cv
332.5 428.496 li
cp
f
337.336 423.496 mo
337.336 423.496 365.547 427.09 377.242 454.75 cv
377.242 454.75 362.242 427.855 331.75 425.805 cv
337.336 423.496 li
cp
f
343.148 418.746 mo
343.148 418.746 370.445 422.309 381.742 449.746 cv
381.742 449.746 367.242 423.07 337.75 421.035 cv
343.148 418.746 li
cp
f
348.719 414.492 mo
348.719 414.492 376.313 418.113 387.742 445.996 cv
387.742 445.996 373.078 418.887 343.242 416.824 cv
348.719 414.492 li
cp
f
353.648 409.746 mo
353.648 409.746 380.945 413.336 392.242 441 cv
392.242 441 377.742 414.105 348.25 412.059 cv
353.648 409.746 li
cp
f
296.945 468.75 mo
296.945 468.75 324.461 472.035 336.742 495.996 cv
336.742 495.996 322.727 473.148 294.234 471.422 cv
296.945 468.75 li
cp
f
292.875 473.25 mo
292.875 473.25 319.75 476.297 331.75 498.496 cv
331.75 498.496 318.063 477.328 290.242 475.727 cv
292.875 473.25 li
cp
f
290.055 478 mo
290.055 478 316.102 480.961 327.742 502.5 cv
327.742 502.5 314.477 481.957 287.484 480.402 cv
290.055 478 li
cp
f
286.984 483 mo
286.984 483 312.391 485.84 323.742 506.5 cv
323.742 506.5 310.797 486.789 284.484 485.301 cv
286.984 483 li
cp
f
284.367 487.254 mo
284.367 487.254 308.648 490 319.492 510 cv
319.492 510 307.125 490.922 281.992 489.48 cv
284.367 487.254 li
cp
f
275.828 500.754 mo
275.828 500.754 297.023 502.957 306.492 519 cv
306.492 519 294.742 503.5 274.75 502.75 cv
275.828 500.754 li
cp
f
280.797 491.5 mo
280.797 491.5 304.266 494.066 314.742 512.754 cv
314.742 512.754 302.789 494.93 278.484 493.582 cv
280.797 491.5 li
cp
f
278.617 496 mo
278.617 496 300.305 498.297 309.984 515.004 cv
309.984 515.004 298.945 499.066 276.484 497.859 cv
278.617 496 li
cp
f
360.32 405.578 mo
360.32 405.578 387.438 410.289 397.586 438.391 cv
397.586 438.391 384.211 410.922 354.82 407.672 cv
360.32 405.578 li
cp
f
365.25 401.324 mo
365.25 401.324 392.016 406.125 401.992 435 cv
401.992 435 388.828 406.781 359.813 403.488 cv
365.25 401.324 li
cp
f
371.883 397.324 mo
371.883 397.324 398.063 402.273 407.742 432.496 cv
407.742 432.496 394.945 402.973 366.563 399.602 cv
371.883 397.324 li
cp
f
377.789 393.32 mo
377.789 393.32 403.539 398.402 412.992 429.75 cv
412.992 429.75 400.75 398.496 373.242 395.496 cv
377.789 393.32 li
cp
f
384.188 389.602 mo
384.188 389.602 409.656 395.922 417.586 427.691 cv
417.586 427.691 406.867 395.875 379.539 391.551 cv
384.188 389.602 li
cp
f
391.141 386.57 mo
391.141 386.57 416.063 394.781 421.594 427.055 cv
421.594 427.055 413.273 394.527 386.359 388.172 cv
391.141 386.57 li
cp
f
397.445 383.418 mo
397.445 383.418 421.898 392.918 425.742 425.438 cv
425.742 425.438 419.133 392.52 392.578 384.762 cv
397.445 383.418 li
cp
f
403.336 380.145 mo
403.336 380.145 427.172 389.508 430.75 421.996 cv
430.75 421.996 424.477 389.125 398.578 381.508 cv
403.336 380.145 li
cp
f
409.523 377.371 mo
409.523 377.371 432.953 386.723 436.242 419.746 cv
436.242 419.746 430.305 386.359 404.828 378.797 cv
409.523 377.371 li
cp
f
416.016 374.871 mo
416.016 374.871 439.375 384.297 442.492 417.996 cv
442.492 417.996 436.727 383.941 411.305 376.348 cv
416.016 374.871 li
cp
f
423.648 372.742 mo
423.648 372.742 446.195 382.961 447.742 417.75 cv
447.742 417.75 443.602 382.535 418.945 374.168 cv
423.648 372.742 li
cp
f
430.398 370.383 mo
430.398 370.383 452.828 380.859 453.977 415.656 cv
453.977 415.656 450.234 380.402 425.688 371.746 cv
430.398 370.383 li
cp
f
437.672 368.324 mo
437.672 368.324 458.836 378.449 459.492 412.996 cv
459.492 412.996 456.391 378.027 433.188 369.742 cv
437.672 368.324 li
cp
f
446.148 366.996 mo
446.148 366.996 465.727 376.691 465.742 410.992 cv
465.742 410.992 463.445 376.313 441.93 368.484 cv
446.148 366.996 li
cp
f
454.875 365.676 mo
454.875 365.676 472.852 375.059 472 409.996 cv
472 409.996 470.734 374.723 450.914 367.301 cv
454.875 365.676 li
cp
f
345.492 502.5 mo
345.492 502.5 344.742 504.504 342.742 504.25 cv
340.75 504 340.75 501.75 343 501 cv
345.25 500.25 346.492 499.746 345.492 502.5 cv
cp
f
354.25 545.5 mo
354.25 545.5 354.25 548.5 352.375 547.75 cv
350.5 547 352.75 543.25 354.25 545.5 cv
cp
f
331.375 534.625 mo
331.375 534.625 332.875 538 329.875 536.875 cv
326.875 535.75 328.75 533.875 331.375 534.625 cv
cp
f
355.492 492.75 mo
355.492 492.75 354.984 495.996 352.992 495 cv
350.992 494.004 353.742 490.746 355.492 492.75 cv
cp
f
357.742 505.254 mo
357.742 505.254 356.242 507.75 354.25 506.5 cv
352.242 505.254 358 502.504 357.742 505.254 cv
cp
f
356.742 532.75 mo
356.742 532.75 356.242 535.75 354.492 535 cv
352.75 534.25 353.484 529.5 356.742 532.75 cv
cp
f
361 484.996 mo
361 484.996 363.742 488.25 361 488.25 cv
358.242 488.25 358.75 482.242 361 484.996 cv
cp
f
gsave
269.875 388 mo
269.875 388 290.125 362.5 339.25 346.75 cv
388.375 331 422.875 337 425.875 346.375 cv
428.875 355.75 407.875 346.375 353.125 364.75 cv
313.633 378.004 289.945 390.762 279.25 396.625 cv
263.5 405.25 253.375 405.625 269.875 388 cv
cp
clp
257.125 400.75 mo
257.125 400.75 279.625 392.5 301.188 407.125 cv
301.188 407.125 286.188 396.813 257.125 400.75 cv
cp
1 1 1 rgb
f
257.688 397 mo
257.688 397 280.188 388.75 301.75 403.375 cv
301.75 403.375 286.75 393.063 257.688 397 cv
cp
f
258.813 393.25 mo
258.813 393.25 281.313 385 302.875 399.625 cv
302.875 399.625 287.875 389.313 258.813 393.25 cv
cp
f
253.75 404.5 mo
253.75 404.5 276.25 396.25 297.813 410.875 cv
297.813 410.875 282.813 400.563 253.75 404.5 cv
cp
f
261.438 389.688 mo
261.438 389.688 283.938 381.438 305.5 396.063 cv
305.5 396.063 290.5 385.75 261.438 389.688 cv
cp
f
264.625 385.938 mo
264.625 385.938 289.938 380.313 315.813 395.125 cv
315.813 395.125 294.438 378.25 264.625 385.938 cv
cp
f
266.688 382.188 mo
266.688 382.188 292 376.563 317.875 391.375 cv
317.875 391.375 296.5 374.5 266.688 382.188 cv
cp
f
269.875 378.625 mo
269.875 378.625 295.188 373 321.063 387.813 cv
321.063 387.813 299.688 370.938 269.875 378.625 cv
cp
f
274.563 375.047 mo
274.563 375.047 299.969 368.945 325.938 385 cv
325.938 385 304.477 366.715 274.563 375.047 cv
cp
f
279.438 371.566 mo
279.438 371.566 304.75 364.375 330.625 382.75 cv
330.625 382.75 309.25 362.203 279.438 371.566 cv
cp
f
283.563 367.949 mo
283.563 367.949 309.25 359.875 336.438 380.125 cv
336.438 380.125 313.586 358.07 283.563 367.949 cv
cp
f
288.438 363.988 mo
288.438 363.988 314.406 356.859 340.828 378.086 cv
340.828 378.086 318.813 355.211 288.438 363.988 cv
cp
f
294.625 360.625 mo
294.625 360.625 319.828 353.137 346.563 376.375 cv
346.563 376.375 324.438 351.813 294.625 360.625 cv
cp
f
299.109 357.684 mo
299.109 357.684 325.008 349.371 352.375 374.875 cv
352.375 374.875 329.734 347.898 299.109 357.684 cv
cp
f
304.305 354.227 mo
304.305 354.227 330.344 346.359 357.258 372.332 cv
357.258 372.332 335.086 344.969 304.305 354.227 cv
cp
f
310.727 350.285 mo
310.727 350.285 337.117 343.727 362.711 371.016 cv
362.711 371.016 341.93 342.578 310.727 350.285 cv
cp
f
317.688 346.363 mo
317.688 346.363 344.391 341.23 368.484 369.848 cv
368.484 369.848 349.258 340.34 317.688 346.363 cv
cp
f
324.484 343.105 mo
324.484 343.105 351.414 339.316 374.039 369.105 cv
374.039 369.105 356.313 338.672 324.484 343.105 cv
cp
f
330.039 340.445 mo
330.039 340.445 356.969 336.68 379.57 366.48 cv
379.57 366.48 361.875 336.035 330.039 340.445 cv
cp
f
336.984 337.539 mo
336.984 337.539 364.078 335.121 385.164 366.023 cv
385.164 366.023 369 334.727 336.984 337.539 cv
cp
f
342.445 335.547 mo
342.445 335.547 369.531 333.105 390.648 363.977 cv
390.648 363.977 374.461 332.699 342.445 335.547 cv
cp
f
349.523 332.98 mo
349.523 332.98 376.703 331.891 396.25 363.789 cv
396.25 363.789 381.648 331.746 349.523 332.98 cv
cp
f
355.734 331.688 mo
355.734 331.688 382.922 330.695 402.352 362.66 cv
402.352 362.66 387.859 330.555 355.734 331.688 cv
cp
f
362.953 329.5 mo
362.953 329.5 390.141 329.871 407.945 362.77 cv
407.945 362.77 395.086 329.992 362.953 329.5 cv
cp
f
369.344 328.16 mo
369.344 328.16 396.516 329.332 413.344 362.734 cv
413.344 362.734 401.453 329.582 369.344 328.16 cv
cp
f
376.711 326.555 mo
376.711 326.555 403.781 329.078 418.914 363.293 cv
418.914 363.293 408.703 329.594 376.711 326.555 cv
cp
f
382.703 323.449 mo
382.703 323.449 409.68 326.969 423.539 361.711 cv
423.539 361.711 414.563 327.648 382.703 323.449 cv
cp
f
390.18 322.488 mo
390.18 322.488 416.93 327.352 429.039 362.746 cv
429.039 362.746 421.797 328.293 390.18 322.488 cv
cp
f
394.875 321.656 mo
394.875 321.656 421.703 326.184 434.25 361.422 cv
434.25 361.422 426.563 327.051 394.875 321.656 cv
cp
f
402.391 320.977 mo
402.391 320.977 428.93 326.84 439.711 362.664 cv
439.711 362.664 433.758 327.965 402.391 320.977 cv
cp
f
grestore
gsave
222.742 601 mo
222.742 601 256.242 634.504 307.242 640 cv
358.242 645.508 433.242 623.508 462.25 597.504 cv
491.242 571.5 515.742 524.004 515.742 524.004 cv
500.742 475.5 li
500.742 475.5 476.594 541.105 428.742 573 cv
395.742 595 347.742 616.5 289.75 613 cv
231.742 609.504 222.25 595.5 222.742 601 cv
cp
clp
340.75 598 mo
340.75 598 353.125 623.125 339.25 641.5 cv
339.25 641.5 349 626.125 340.75 598 cv
cp
f
344.5 642.25 mo
344.5 642.25 356.125 618.25 343.375 589.75 cv
343.375 589.75 359.875 617.875 344.5 642.25 cv
cp
f
350.5 640.75 mo
350.5 640.75 362.125 616.75 349.375 588.25 cv
349.375 588.25 365.875 616.375 350.5 640.75 cv
cp
f
352.375 580.75 mo
352.375 580.75 370.75 607.75 358.375 639.25 cv
358.375 639.25 366.625 608.875 352.375 580.75 cv
cp
f
336.25 598.75 mo
336.25 598.75 348.625 623.875 334.75 642.25 cv
334.75 642.25 344.5 626.875 336.25 598.75 cv
cp
f
332.578 600.695 mo
332.578 600.695 343.984 626.277 329.406 644.113 cv
329.406 644.113 339.742 629.121 332.578 600.695 cv
cp
f
327.492 599.254 mo
327.492 599.254 339.867 624.379 325.992 642.754 cv
325.992 642.754 335.742 627.379 327.492 599.254 cv
cp
f
323.836 601.199 mo
323.836 601.199 335.227 626.781 320.648 644.617 cv
320.648 644.617 330.984 629.625 323.836 601.199 cv
cp
f
318.234 600.258 mo
318.234 600.258 330.609 625.383 316.734 643.762 cv
316.734 643.762 326.484 628.383 318.234 600.258 cv
cp
f
314.578 602.203 mo
314.578 602.203 325.984 627.785 311.406 645.613 cv
311.406 645.613 321.742 630.625 314.578 602.203 cv
cp
f
309.492 600.504 mo
309.492 600.504 321.867 625.629 307.992 644.008 cv
307.992 644.008 317.742 628.629 309.492 600.504 cv
cp
f
305.836 602.449 mo
305.836 602.449 317.227 628.031 302.648 645.859 cv
302.648 645.859 312.984 630.871 305.836 602.449 cv
cp
f
300.234 600.504 mo
300.234 600.504 312.609 625.629 298.734 644.008 cv
298.734 644.008 308.484 628.629 300.234 600.504 cv
cp
f
296.578 602.449 mo
296.578 602.449 307.984 628.031 293.406 645.859 cv
293.406 645.859 303.742 630.871 296.578 602.449 cv
cp
f
290.992 600.504 mo
290.992 600.504 303.367 625.629 289.492 644.008 cv
289.492 644.008 299.242 628.629 290.992 600.504 cv
cp
f
287.336 602.449 mo
287.336 602.449 298.727 628.031 284.156 645.859 cv
284.156 645.859 294.492 630.871 287.336 602.449 cv
cp
f
281.742 600.75 mo
281.742 600.75 294.117 625.875 280.242 644.254 cv
280.242 644.254 289.992 628.875 281.742 600.75 cv
cp
f
278.078 602.695 mo
278.078 602.695 289.477 628.277 274.898 646.105 cv
274.898 646.105 285.234 631.117 278.078 602.695 cv
cp
f
272.742 599.754 mo
272.742 599.754 285.117 624.879 271.242 643.258 cv
271.242 643.258 280.992 627.879 272.742 599.754 cv
cp
f
269.078 601.699 mo
269.078 601.699 280.477 627.281 265.898 645.109 cv
265.898 645.109 276.234 630.121 269.078 601.699 cv
cp
f
263.992 599.754 mo
263.992 599.754 276.367 624.879 262.492 643.258 cv
262.492 643.258 272.242 627.879 263.992 599.754 cv
cp
f
260.336 601.699 mo
260.336 601.699 271.727 627.281 257.148 645.109 cv
257.148 645.109 267.484 630.121 260.336 601.699 cv
cp
f
255.234 600.25 mo
255.234 600.25 267.609 625.375 253.734 643.75 cv
253.734 643.75 263.484 628.375 255.234 600.25 cv
cp
f
251.578 602.195 mo
251.578 602.195 262.969 627.777 248.406 645.613 cv
248.406 645.613 258.742 630.621 251.578 602.195 cv
cp
f
247.328 599.695 mo
247.328 599.695 258.727 625.277 244.148 643.105 cv
244.148 643.105 254.484 628.117 247.328 599.695 cv
cp
f
242.242 598.246 mo
242.242 598.246 254.617 623.371 240.742 641.746 cv
240.742 641.746 250.492 626.371 242.242 598.246 cv
cp
f
238.57 600.191 mo
238.57 600.191 249.977 625.773 235.398 643.609 cv
235.398 643.609 245.734 628.617 238.57 600.191 cv
cp
f
234.07 597.191 mo
234.07 597.191 245.477 622.773 230.898 640.609 cv
230.898 640.609 241.234 625.617 234.07 597.191 cv
cp
f
228.984 595.746 mo
228.984 595.746 241.359 620.871 227.484 639.25 cv
227.484 639.25 237.234 623.871 228.984 595.746 cv
cp
f
225.328 597.691 mo
225.328 597.691 236.719 623.273 222.141 641.102 cv
222.141 641.102 232.477 626.113 225.328 597.691 cv
cp
f
358 578.875 mo
358 578.875 376.375 605.875 364 637.375 cv
364 637.375 372.25 607 358 578.875 cv
cp
f
363.625 576.625 mo
363.625 576.625 382 603.625 369.625 635.125 cv
369.625 635.125 377.875 604.75 363.625 576.625 cv
cp
f
367.242 569.5 mo
367.242 569.5 388 601.375 375.625 632.875 cv
375.625 632.875 384.492 603.75 367.242 569.5 cv
cp
f
372.492 568 mo
372.492 568 393.25 599.875 380.875 631.375 cv
380.875 631.375 389.742 602.25 372.492 568 cv
cp
f
376.57 565.699 mo
376.57 565.699 398.25 596.953 386.805 628.805 cv
386.805 628.805 394.82 599.426 376.57 565.699 cv
cp
f
381.07 564.199 mo
381.07 564.199 402.75 595.453 391.305 627.305 cv
391.305 627.305 399.32 597.926 381.07 564.199 cv
cp
f
386.063 562.199 mo
386.063 562.199 407.742 593.453 396.305 625.305 cv
396.305 625.305 404.32 595.926 386.063 562.199 cv
cp
f
390.578 559.949 mo
390.578 559.949 412.258 591.203 400.805 623.055 cv
400.805 623.055 408.82 593.676 390.578 559.949 cv
cp
f
395.578 557.945 mo
395.578 557.945 417.258 589.199 405.813 621.051 cv
405.813 621.051 413.828 591.672 395.578 557.945 cv
cp
f
399.836 555.695 mo
399.836 555.695 421.516 586.949 410.063 618.801 cv
410.063 618.801 418.078 589.422 399.836 555.695 cv
cp
f
404.336 553.195 mo
404.336 553.195 426.016 584.449 414.563 616.301 cv
414.563 616.301 422.578 586.922 404.336 553.195 cv
cp
f
408.836 551.945 mo
408.836 551.945 430.516 583.199 419.063 615.051 cv
419.063 615.051 427.078 585.672 408.836 551.945 cv
cp
f
413.086 549.199 mo
413.086 549.199 434.766 580.453 423.32 612.305 cv
423.32 612.305 431.336 582.926 413.086 549.199 cv
cp
f
417.586 546.949 mo
417.586 546.949 439.266 578.203 427.82 610.055 cv
427.82 610.055 435.836 580.676 417.586 546.949 cv
cp
f
422.086 544.949 mo
422.086 544.949 443.766 576.203 432.32 608.055 cv
432.32 608.055 440.336 578.676 422.086 544.949 cv
cp
f
426.344 541.453 mo
426.344 541.453 448.023 572.707 436.57 604.559 cv
436.57 604.559 444.586 575.18 426.344 541.453 cv
cp
f
430.094 538.453 mo
430.094 538.453 451.773 569.707 440.32 601.559 cv
440.32 601.559 448.336 572.18 430.094 538.453 cv
cp
f
434.594 535.957 mo
434.594 535.957 456.273 567.211 444.82 599.063 cv
444.82 599.063 452.836 569.684 434.594 535.957 cv
cp
f
439.336 533.453 mo
439.336 533.453 461.016 564.707 449.57 596.559 cv
449.57 596.559 457.586 567.18 439.336 533.453 cv
cp
f
443.578 530.957 mo
443.578 530.957 465.258 562.211 453.813 594.063 cv
453.813 594.063 461.828 564.684 443.578 530.957 cv
cp
f
447.836 528.461 mo
447.836 528.461 469.516 559.715 458.063 591.566 cv
458.063 591.566 466.078 562.188 447.836 528.461 cv
cp
f
451.828 526.211 mo
451.828 526.211 473.508 557.465 462.063 589.316 cv
462.063 589.316 470.078 559.938 451.828 526.211 cv
cp
f
456.836 523.961 mo
456.836 523.961 478.516 555.215 467.063 587.066 cv
467.063 587.066 475.078 557.688 456.836 523.961 cv
cp
f
461.578 520.457 mo
461.578 520.457 483.258 551.711 471.813 583.563 cv
471.813 583.563 479.828 554.184 461.578 520.457 cv
cp
f
465.836 517.957 mo
465.836 517.957 487.516 549.211 476.063 581.063 cv
476.063 581.063 484.078 551.684 465.836 517.957 cv
cp
f
470.578 515.453 mo
470.578 515.453 492.258 546.707 480.813 578.559 cv
480.813 578.559 488.828 549.18 470.578 515.453 cv
cp
f
475.586 512.207 mo
475.586 512.207 497.266 543.461 485.813 575.313 cv
485.813 575.313 493.828 545.934 475.586 512.207 cv
cp
f
479.836 507.961 mo
479.836 507.961 501.516 539.215 490.07 571.066 cv
490.07 571.066 498.086 541.688 479.836 507.961 cv
cp
f
grestore
219.492 571.75 mo
219.492 571.75 233.242 566.496 239.242 563.25 cv
245.242 560.004 253.492 554.754 255.25 554.004 cv
256.992 553.254 260.5 556.008 259.242 559.254 cv
259.242 559.254 258.492 556.246 256.75 556.5 cv
254.992 556.75 253.992 556.5 252.742 558.25 cv
251.5 560.004 245.742 560.5 243.742 562 cv
241.75 563.5 224.25 571 219.492 571.75 cv
cp
.741176 .580392 .403922 rgb
f
263.992 546.25 mo
263.992 546.25 262.492 549 264.25 555.75 cv
265.992 562.5 267.25 570.504 260.992 570.504 cv
260.992 570.504 266.742 570.504 263.742 559 cv
261.867 551.805 261.742 548.25 263.992 546.25 cv
cp
f
335.195 520.266 mo
335.195 520.266 333.32 521.301 331.969 519.813 cv
330.609 518.32 332.078 516.609 334.266 517.5 cv
336.469 518.395 337.75 518.824 335.195 520.266 cv
cp
.27451 .207843 .145098 rgb
f
313.867 558.621 mo
313.867 558.621 311.922 560.895 310.984 559.113 cv
310.047 557.32 314.195 555.938 313.867 558.621 cv
cp
f
303.578 535.477 mo
303.578 535.477 302.508 539.02 300.961 536.215 cv
299.414 533.406 302.063 533.203 303.578 535.477 cv
cp
f
349.141 519.367 mo
349.141 519.367 346.641 521.508 345.773 519.449 cv
344.898 517.395 349.102 516.715 349.141 519.367 cv
cp
f
342.719 530.332 mo
342.719 530.332 339.953 531.25 339.25 529 cv
338.531 526.746 344.688 528.398 342.719 530.332 cv
cp
f
324.063 550.559 mo
324.063 550.559 321.727 552.508 320.883 550.805 cv
320.055 549.098 323.711 545.977 324.063 550.559 cv
cp
f
358.359 517.055 mo
358.359 517.055 358.328 521.32 356.242 519.527 cv
354.156 517.738 358.43 513.504 358.359 517.055 cv
cp
f
290.242 468.504 mo
290.242 468.504 347.742 385.996 437.242 365.5 cv
437.242 365.5 346.75 374.004 290.242 468.504 cv
cp
1 1 1 rgb
f
259.75 460.75 mo
256.75 472 256.75 499.75 239.5 493 cv
224.414 487.102 262.75 449.5 259.75 460.75 cv
cp
f
200.5 557.5 mo
200.5 557.5 181 458.5 244 395.5 cv
244 395.5 196 445 200.5 557.5 cv
cp
f
290.742 638.008 mo
290.742 638.008 393.75 658 462.063 589.316 cv
462.063 589.316 407.742 660.004 290.742 638.008 cv
cp
f
.510144 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
348.727 445.449 mo
348.727 445.449 350.227 448.824 347.602 448.449 cv
344.977 448.074 346.852 442.824 348.727 445.449 cv
cp
1 .360784 .752941 rgb
@
476.977 265.074 mo
476.977 265.074 468.727 254.574 471.727 246.324 cv
474.727 238.074 480.727 236.574 487.477 232.824 cv
494.227 229.074 497.977 226.824 496.477 232.824 cv
494.977 238.824 491.227 238.824 489.727 247.074 cv
488.227 255.324 483.727 262.824 476.977 265.074 cv
cp
.27451 .207843 .145098 rgb
f
478.102 259.328 mo
476.563 256.906 473.82 252.941 475.602 247.66 cv
477.453 242.199 478.781 240.91 482.984 238.625 cv
483.984 238.086 485.016 237.523 486.07 236.891 cv
486.586 236.586 li
488.602 235.375 490.672 234.125 491.719 233.828 cv
491.703 234.102 491.648 234.535 491.492 235.188 cv
491.016 237.277 490.203 238.426 489.289 239.75 cv
488.039 241.555 486.609 243.602 485.859 248.066 cv
484.672 255.09 482.328 257.246 478.102 259.328 cv
cp
.741176 .580392 .403922 rgb
f
538.477 349.824 mo
538.477 349.824 550.477 343.074 558.727 329.574 cv
566.977 316.074 596.977 296.574 636.727 297.324 cv
692.234 298.375 737.227 322.074 780.727 379.074 cv
824.227 436.074 839.227 502.074 825.727 553.824 cv
812.227 605.574 791.227 621.324 762.727 635.574 cv
731.188 651.344 728.227 653.574 714.727 661.074 cv
701.227 668.574 638.227 688.836 575.227 643.074 cv
507.734 594.063 488.227 543.332 479.977 509.574 cv
462.336 437.418 479.227 391.074 499.477 372.324 cv
519.773 353.527 538.477 349.824 538.477 349.824 cv
cp
.27451 .207843 .145098 rgb
f
661.945 665.254 mo
632.344 665.254 604.508 655.938 579.219 637.574 cv
512.789 589.32 492.305 540.953 486.586 507.957 cv
475.719 445.328 489.117 394.039 507.727 376.82 cv
526.391 359.527 539.625 356.535 539.797 356.5 cv
540.867 356.289 li
541.805 355.754 li
542.367 355.445 555.453 347.961 564.523 333.121 cv
571.672 321.418 598.859 304.105 634.5 304.105 cv
636.594 304.129 li
692.273 305.176 738.875 331.293 779.063 383.949 cv
818.234 435.277 833.211 498.145 819.141 552.109 cv
805.898 602.875 785.305 619.527 759.727 632.324 cv
734.625 644.867 727.273 646.18 718.813 650.973 cv
716.563 652.238 714.219 653.57 711.422 655.129 cv
706.344 657.945 687.586 665.254 661.945 665.254 cv
cp
.505882 .317647 .494118 rgb
f
534.477 357.324 mo
534.477 357.324 495.727 315.324 476.227 279.324 cv
476.227 279.324 470.977 264.324 472.477 257.574 cv
472.477 257.574 476.227 262.074 482.227 254.574 cv
488.227 247.074 485.977 242.574 491.227 240.324 cv
491.227 240.324 490.477 247.824 494.977 250.824 cv
499.477 253.824 500.227 252.324 498.727 264.324 cv
497.227 276.324 497.227 272.574 503.977 286.824 cv
510.727 301.074 527.977 325.074 554.977 349.074 cv
554.977 349.074 557.984 352.367 554.977 354.699 cv
546.727 361.074 539.227 359.07 534.477 357.324 cv
cp
.27451 .207843 .145098 rgb
f
538.477 349.824 mo
538.477 349.824 582.727 336.824 618.727 353.574 cv
667.406 376.227 722.977 436.074 749.977 518.574 cv
776.977 601.074 735.727 649.824 735.727 649.824 cv
735.727 649.824 778.719 612.57 757.719 524.82 cv
736.719 437.07 689.227 397.824 658.477 371.574 cv
627.727 345.324 581.977 331.824 538.477 349.824 cv
cp
f
493.227 391.824 mo
493.227 391.824 471.219 431.828 485.227 489.324 cv
499.227 546.824 532.719 600.836 589.719 638.336 cv
646.719 675.84 701.727 656.828 701.727 656.828 cv
701.727 656.828 637.227 666.336 583.227 617.832 cv
518.516 559.715 473.227 475.824 493.227 391.824 cv
cp
f
689.727 665.82 mo
689.727 665.82 709.719 662.82 735.219 639.816 cv
743.297 632.535 755.227 613.074 756.727 600.699 cv
757.359 595.473 756.352 625.449 763.477 626.574 cv
770.602 627.699 789.352 618.324 789.352 618.324 cv
789.352 618.324 773.602 632.574 756.727 639.699 cv
739.852 646.824 736.852 650.199 730.852 652.824 cv
724.852 655.449 689.727 665.82 689.727 665.82 cv
cp
f
575.719 340.824 mo
575.719 340.824 577.719 324.824 591.727 315.324 cv
591.727 315.324 579.727 328.074 578.602 340.824 cv
575.719 340.824 li
cp
f
581.891 341.43 mo
581.891 341.43 582.961 323.781 601.5 311.223 cv
601.5 311.223 586.016 324.277 583.953 342.008 cv
581.891 341.43 li
cp
f
586.719 340.824 mo
587.469 341.078 590.719 319.328 612.219 308.828 cv
612.219 308.828 593.227 320.07 589.719 341.324 cv
586.719 340.824 li
cp
f
592.477 341.574 mo
593.227 341.828 596.469 320.078 617.977 309.578 cv
617.977 309.578 598.977 320.82 595.477 342.074 cv
592.477 341.574 li
cp
f
598.477 341.828 mo
599.227 342.078 602.469 320.328 623.977 309.828 cv
623.977 309.828 604.977 321.074 601.477 342.324 cv
598.477 341.828 li
cp
f
603.969 343.074 mo
604.719 343.328 607.969 321.578 629.469 311.078 cv
629.469 311.078 610.477 322.32 606.969 343.574 cv
603.969 343.074 li
cp
f
610.219 343.578 mo
610.969 343.832 614.211 322.082 635.719 311.582 cv
635.719 311.582 616.719 322.824 613.219 344.078 cv
610.219 343.578 li
cp
f
569.469 341.828 mo
569.469 341.828 571.219 328.832 580.477 320.828 cv
580.477 320.828 573.469 328.82 571.969 341.324 cv
569.469 341.828 li
cp
f
616.219 344.078 mo
616.969 344.328 620.211 322.578 641.719 312.078 cv
641.719 312.078 622.719 323.324 619.219 344.574 cv
616.219 344.078 li
cp
f
621.969 344.828 mo
622.719 345.078 625.969 323.328 647.469 312.828 cv
647.469 312.828 628.477 324.074 624.969 345.324 cv
621.969 344.828 li
cp
f
626.977 346.574 mo
627.727 346.824 630.969 325.074 652.477 314.574 cv
652.477 314.574 633.477 325.82 629.977 347.07 cv
626.977 346.574 li
cp
f
633.969 348.828 mo
633.969 348.828 639.219 325.074 659.227 316.074 cv
659.227 316.074 642.469 326.078 636.727 350.078 cv
633.969 348.828 li
cp
f
640.719 351.324 mo
640.719 351.324 648.969 324.578 666.219 317.078 cv
666.219 317.078 650.227 327.324 643.719 352.074 cv
640.719 351.324 li
cp
f
647.227 352.555 mo
647.227 352.555 656.047 325.234 674.469 317.574 cv
674.469 317.574 656.672 328.801 649.719 354.078 cv
647.227 352.555 li
cp
f
563.977 343.082 mo
563.977 343.082 565.555 331.473 573.969 324.324 cv
573.969 324.324 567.609 331.461 566.234 342.629 cv
563.977 343.082 li
cp
f
558.969 343.578 mo
558.969 343.578 560.32 333.52 567.469 327.324 cv
567.469 327.324 562.063 333.512 560.906 343.188 cv
558.969 343.578 li
cp
f
652.977 355.555 mo
652.977 355.555 661.477 326.078 682.719 318.078 cv
682.719 318.078 663.219 328.074 655.477 357.078 cv
652.977 355.555 li
cp
f
658.227 358.305 mo
658.227 358.305 666.727 328.824 687.969 320.828 cv
687.969 320.828 668.469 330.824 660.727 359.828 cv
658.227 358.305 li
cp
f
663.242 361.105 mo
663.242 361.105 673.125 331 694.477 323.277 cv
694.477 323.277 673.836 333.758 665.719 362.656 cv
663.242 361.105 li
cp
f
668.273 363.648 mo
668.273 363.648 679.102 332.863 700.992 325.438 cv
700.992 325.438 679.758 335.723 670.742 365.313 cv
668.273 363.648 li
cp
f
673.273 366.395 mo
673.273 366.395 684.102 335.609 705.992 328.188 cv
705.992 328.188 684.758 338.469 675.75 368.059 cv
673.273 366.395 li
cp
f
678.773 370.145 mo
678.773 370.145 689.367 339.285 710.719 331.824 cv
710.719 331.824 690 342.148 681.172 371.809 cv
678.773 370.145 li
cp
f
684.023 373.668 mo
684.023 373.668 694.672 343.379 716.227 336.078 cv
716.227 336.078 695.32 346.191 686.445 375.309 cv
684.023 373.668 li
cp
f
689.273 376.918 mo
689.273 376.918 699.922 346.633 721.477 339.332 cv
721.477 339.332 700.57 349.445 691.695 378.559 cv
689.273 376.918 li
cp
f
693.688 381.367 mo
693.688 381.367 704.906 351.285 726.586 344.387 cv
726.586 344.387 705.5 354.109 696.094 383.055 cv
693.688 381.367 li
cp
f
698.563 385.871 mo
698.563 385.871 710.109 355.906 731.859 349.238 cv
731.859 349.238 710.672 358.738 700.953 387.582 cv
698.563 385.871 li
cp
f
703.18 390.758 mo
703.18 390.758 714.727 360.801 736.477 354.133 cv
736.477 354.133 715.289 363.629 705.563 392.469 cv
703.18 390.758 li
cp
f
711.5 399.309 mo
711.5 399.309 724.898 370.121 747.008 364.82 cv
747.008 364.82 725.273 372.977 713.789 401.164 cv
711.5 399.309 li
cp
f
706.898 395.688 mo
706.898 395.688 719.625 365.254 741.969 359.078 cv
741.969 359.078 720.094 368.184 709.25 397.527 cv
706.898 395.688 li
cp
f
715.406 404.691 mo
715.406 404.691 728.977 375.594 751.133 370.438 cv
751.133 370.438 729.336 378.453 717.664 406.566 cv
715.406 404.691 li
cp
f
719.531 410.477 mo
719.531 410.477 733.406 381.52 755.609 376.586 cv
755.609 376.586 733.734 384.379 721.781 412.375 cv
719.531 410.477 li
cp
f
723.336 415.926 mo
723.336 415.926 737.398 387.063 759.633 382.273 cv
759.633 382.273 737.719 389.926 725.563 417.84 cv
723.336 415.926 li
cp
f
728.039 421.977 mo
728.039 421.977 741.898 393.02 764.109 388.086 cv
764.109 388.086 742.242 395.879 730.273 423.875 cv
728.039 421.977 li
cp
f
731.836 427.426 mo
731.836 427.426 745.898 398.563 768.141 393.777 cv
768.141 393.777 746.211 401.43 734.07 429.344 cv
731.836 427.426 li
cp
f
735.664 433.145 mo
735.664 433.145 750.352 404.598 772.695 400.305 cv
772.695 400.305 750.609 407.465 737.844 435.109 cv
735.664 433.145 li
cp
f
739.805 439.203 mo
739.805 439.203 753.852 412.473 776.227 408.324 cv
776.227 408.324 754.922 413.633 741.984 441.184 cv
739.805 439.203 li
cp
f
742.711 444.992 mo
742.711 444.992 759.711 418.297 782.227 415.074 cv
782.227 415.074 759.727 421.074 744.797 447.055 cv
742.711 444.992 li
cp
f
746.258 450.672 mo
746.258 450.672 763.742 424.375 786.352 421.824 cv
786.352 421.824 764.602 425.574 748.289 452.793 cv
746.258 450.672 li
cp
f
749.609 455.969 mo
749.609 455.969 768.141 431.863 790.852 430.449 cv
790.852 430.449 767.977 434.949 751.531 458.199 cv
749.609 455.969 li
cp
f
751.969 463.367 mo
751.969 463.367 771.398 438.789 794.133 437.805 cv
794.133 437.805 769.883 442.305 753.852 465.629 cv
751.969 463.367 li
cp
f
754.336 470.441 mo
754.336 470.441 774.047 447.273 796.789 446.551 cv
796.789 446.551 774.023 451 756.172 472.73 cv
754.336 470.441 li
cp
f
754.273 480.898 mo
754.273 480.898 775.906 455.281 798.609 453.91 cv
798.609 453.91 772.789 460.668 756.195 483.121 cv
754.273 480.898 li
cp
f
756.898 489.148 mo
756.898 489.148 778.531 463.531 801.234 462.16 cv
801.234 462.16 775.414 468.918 758.82 491.371 cv
756.898 489.148 li
cp
f
758.773 497.773 mo
758.773 497.773 780.406 472.156 803.109 470.785 cv
803.109 470.785 777.289 477.543 760.695 499.996 cv
758.773 497.773 li
cp
f
760.273 506.398 mo
760.273 506.398 781.906 480.781 804.609 479.41 cv
804.609 479.41 778.789 486.168 762.195 508.621 cv
760.273 506.398 li
cp
f
761.773 515.398 mo
761.773 515.398 783.406 489.781 806.109 488.41 cv
806.109 488.41 780.289 495.168 763.695 517.621 cv
761.773 515.398 li
cp
f
762.523 533.773 mo
762.523 533.773 784.156 508.156 806.859 506.785 cv
806.859 506.785 781.039 513.543 764.445 535.996 cv
762.523 533.773 li
cp
f
762.148 524.773 mo
762.148 524.773 783.781 499.156 806.484 497.785 cv
806.484 497.785 780.664 504.543 764.07 526.996 cv
762.148 524.773 li
cp
f
761.797 552.805 mo
761.797 552.805 782.648 526.551 805.297 524.492 cv
805.297 524.492 779.695 532.023 763.781 554.969 cv
761.797 552.805 li
cp
f
762.898 542.773 mo
762.898 542.773 784.531 517.156 807.234 515.785 cv
807.234 515.785 781.414 522.543 764.82 544.996 cv
762.898 542.773 li
cp
f
762.5 569.504 mo
762.5 569.504 781.273 545.277 800.227 543.324 cv
800.227 543.324 778.523 550.328 764.023 571.484 cv
762.5 569.504 li
cp
f
762.141 560.465 mo
762.141 560.465 782.469 535.824 803.602 534.324 cv
803.602 534.324 779.531 540.992 763.898 562.566 cv
762.141 560.465 li
cp
f
762.102 577.824 mo
762.102 577.824 779.516 554.746 796.852 552.699 cv
796.852 552.699 776.953 559.543 763.477 579.676 cv
762.102 577.824 li
cp
f
762.102 584.574 mo
762.102 584.574 779.516 561.496 796.852 559.449 cv
796.852 559.449 776.953 566.293 763.477 586.426 cv
762.102 584.574 li
cp
f
760.977 593.199 mo
760.977 593.199 778.391 570.121 795.727 568.074 cv
795.727 568.074 775.828 574.918 762.352 595.051 cv
760.977 593.199 li
cp
f
759.195 600.848 mo
759.195 600.848 777.727 578.02 794.586 576.547 cv
794.586 576.547 774.891 582.805 760.383 602.773 cv
759.195 600.848 li
cp
f
760.008 608.363 mo
760.008 608.363 776.563 586.965 792.57 585.25 cv
792.57 585.25 774.078 591.43 761.227 610.109 cv
760.008 608.363 li
cp
f
753.992 625.227 mo
753.992 625.227 769.32 606.168 783.211 604.879 cv
783.211 604.879 766.969 610.156 754.953 626.832 cv
753.992 625.227 li
cp
f
757.414 616.211 mo
757.414 616.211 773.656 596.598 788.797 595.496 cv
788.797 595.496 771.188 600.723 758.508 617.887 cv
757.414 616.211 li
cp
f
748.438 634.719 mo
748.438 634.719 763.625 615.535 777.5 614.137 cv
777.5 614.137 761.305 619.543 749.422 636.313 cv
748.438 634.719 li
cp
f
748.805 640.953 mo
748.805 640.953 761.695 623.395 774.352 621.699 cv
774.352 621.699 759.781 627.039 749.789 642.336 cv
748.805 640.953 li
cp
f
620.977 473.199 mo
620.977 473.199 620.977 476.949 619.477 476.199 cv
617.977 475.449 618.727 470.949 620.977 473.199 cv
cp
f
612.727 469.824 mo
612.727 469.824 611.977 472.449 610.102 470.574 cv
608.227 468.699 610.102 464.949 612.727 469.824 cv
cp
f
622.852 519.324 mo
622.852 519.324 621.727 524.199 619.102 522.324 cv
616.477 520.449 620.602 516.324 622.852 519.324 cv
cp
f
631.477 499.074 mo
631.477 499.074 631.852 499.824 628.477 500.949 cv
625.102 502.074 629.977 505.074 626.602 504.699 cv
623.227 504.324 620.977 503.199 619.477 505.824 cv
617.977 508.449 617.227 505.824 618.727 503.574 cv
620.227 501.324 623.227 500.574 623.977 501.699 cv
624.727 502.824 622.852 499.449 626.602 499.074 cv
630.352 498.699 631.477 495.699 631.477 499.074 cv
cp
f
647.977 497.949 mo
647.977 497.949 648.352 500.199 646.477 499.824 cv
644.602 499.449 645.352 495.324 647.977 497.949 cv
cp
f
589.477 467.574 mo
589.477 467.574 590.227 470.574 587.602 470.574 cv
584.977 470.574 586.102 465.324 589.477 467.574 cv
cp
f
599.602 464.574 mo
599.602 464.574 601.102 467.199 598.852 467.574 cv
596.602 467.949 594.727 464.199 599.602 464.574 cv
cp
f
590.602 455.199 mo
590.602 455.199 590.602 457.449 589.102 457.824 cv
587.602 458.199 586.477 454.449 590.602 455.199 cv
cp
f
609.727 512.949 mo
609.727 512.949 607.102 517.074 605.602 515.574 cv
604.102 514.074 608.227 510.324 609.727 512.949 cv
cp
f
641.977 505.449 mo
641.977 505.449 638.602 509.199 637.477 506.949 cv
636.352 504.699 642.352 503.199 641.977 505.449 cv
cp
f
643.477 490.074 mo
643.477 490.074 645.352 493.449 642.352 493.074 cv
639.352 492.699 641.602 487.824 643.477 490.074 cv
cp
f
595.719 484.074 mo
595.719 484.074 596.727 486.578 594.219 486.578 cv
591.727 486.578 593.727 482.078 595.719 484.074 cv
cp
f
623.719 482.324 mo
623.719 482.324 624.969 485.828 621.727 485.078 cv
618.469 484.328 621.219 478.574 623.719 482.324 cv
cp
f
633.469 484.574 mo
633.469 484.574 634.227 487.082 631.719 487.328 cv
629.227 487.574 630.711 482.324 633.469 484.574 cv
cp
f
657.727 496.824 mo
657.727 496.824 660.219 499.82 656.469 499.574 cv
652.719 499.328 656.227 494.574 657.727 496.824 cv
cp
f
611.719 489.449 mo
611.719 489.449 611.469 492.203 608.469 491.199 cv
605.469 490.199 610.969 486.945 611.719 489.449 cv
cp
f
630.219 511.574 mo
630.219 511.574 629.469 511.328 627.727 511.824 cv
625.969 512.324 624.219 510.32 626.719 509.324 cv
629.227 508.328 631.227 510.074 630.219 511.574 cv
cp
f
654.727 516.824 mo
654.727 516.824 654.469 518.328 650.977 518.828 cv
647.469 519.324 650.719 517.082 651.727 515.828 cv
652.719 514.574 654.219 514.32 654.727 516.824 cv
cp
f
639.352 515.949 mo
639.352 515.949 640.344 520.457 637.344 519.203 cv
634.344 517.949 637.852 512.949 639.352 515.949 cv
cp
f
578.227 461.949 mo
578.227 461.949 577.852 464.949 575.227 464.574 cv
572.602 464.199 573.727 461.949 575.227 460.824 cv
576.727 459.699 578.227 459.699 578.227 461.949 cv
cp
f
646.477 530.949 mo
646.477 530.949 646.102 533.949 644.227 533.199 cv
642.352 532.449 643.102 529.449 644.977 529.074 cv
646.852 528.699 646.477 530.949 646.477 530.949 cv
cp
f
581.602 477.324 mo
581.602 477.324 582.352 481.074 579.352 480.324 cv
576.352 479.574 580.102 474.324 581.602 477.324 cv
cp
f
561.352 463.824 mo
561.352 463.824 560.227 467.199 558.727 466.449 cv
557.227 465.699 560.602 461.949 561.352 463.824 cv
cp
f
634.477 526.449 mo
634.477 526.449 634.102 530.199 631.477 528.699 cv
628.852 527.199 631.102 523.824 633.352 523.449 cv
635.602 523.074 634.477 526.449 634.477 526.449 cv
cp
f
562.719 343.32 mo
562.719 343.32 627.547 336.57 679.477 383.574 cv
734.977 433.824 760.719 499.824 762.727 565.824 cv
764.727 631.824 728.227 649.82 728.227 649.82 cv
728.227 649.82 741.891 654.508 754.477 629.199 cv
759.219 619.645 767.516 593.82 769.477 579.324 cv
775.109 537.465 766.219 475.82 740.719 434.324 cv
715.219 392.828 658.719 321.32 562.719 343.32 cv
cp
f
495.219 264.324 mo
495.219 264.324 495.055 277.621 505.477 294.824 cv
515.469 311.324 528.234 327.324 539.727 337.328 cv
551.227 347.328 553.719 350.828 549.219 353.828 cv
544.719 356.828 539.227 354.824 539.227 354.824 cv
539.227 354.824 549.727 354.074 545.727 348.324 cv
543.266 344.797 540.055 342.289 532.719 334.074 cv
515.977 315.324 506.719 299.328 498.727 285.324 cv
490.719 271.32 495.219 264.324 495.219 264.324 cv
cp
.741176 .580392 .403922 rgb
f
491.727 251.828 mo
491.727 251.828 490.719 261.324 477.727 267.828 cv
477.727 267.828 485.719 267.324 490.227 260.328 cv
494.727 253.328 491.727 251.828 491.727 251.828 cv
cp
f
gsave
663.727 664.82 mo
663.727 664.82 585.398 648.617 537.563 574.223 cv
489.727 499.824 487.477 457.074 488.977 422.574 cv
490.477 388.074 494.227 376.32 517.477 367.074 cv
524.328 364.344 510.547 372.137 512.227 418.824 cv
514.477 481.824 552.477 554.574 617.727 597.324 cv
668.539 630.617 730.227 638.316 745.227 626.316 cv
745.227 626.316 739.227 678.57 663.727 664.82 cv
cp
clp
720.219 637.332 mo
720.219 637.332 709.227 657.336 685.227 660.836 cv
682.227 659.832 li
682.227 659.832 701.727 657.836 720.219 637.332 cv
cp
.27451 .207843 .145098 rgb
f
671.602 658.824 mo
671.602 658.824 697.102 655.824 715.477 630.699 cv
715.477 630.699 703.102 658.449 671.602 658.824 cv
cp
f
659.227 657.324 mo
659.227 657.324 683.977 655.074 700.852 637.074 cv
700.852 637.074 687.727 658.074 659.227 657.324 cv
cp
f
647.742 654.602 mo
647.742 654.602 672.711 654.613 691.477 638.574 cv
691.477 638.574 675.984 658.48 647.742 654.602 cv
cp
f
636.727 651.699 mo
636.727 651.699 657.352 653.574 680.602 640.449 cv
680.602 640.449 662.602 657.324 636.727 651.699 cv
cp
f
629.516 650.785 mo
629.516 650.785 650.227 651.496 672.992 636.875 cv
672.992 636.875 651.141 655.164 629.516 650.785 cv
cp
f
620.695 647.27 mo
620.695 647.27 641.328 649.176 664.906 635.891 cv
664.906 635.891 642.031 652.891 620.695 647.27 cv
cp
f
617.109 644.598 mo
617.109 644.598 636.586 647.668 657.688 634.203 cv
657.688 634.203 637.711 644.27 615.945 643.215 cv
617.109 644.598 li
cp
f
610.195 640.754 mo
610.195 640.754 628.719 643.117 650.906 632.324 cv
650.906 632.324 628.578 642.125 603.961 637.867 cv
610.195 640.754 li
cp
f
600.805 636.195 mo
600.805 636.195 623.391 639.227 644.859 628.68 cv
644.859 628.68 615.57 638.664 595.523 633.148 cv
600.805 636.195 li
cp
f
595.344 630.426 mo
595.344 630.426 613.313 636.402 638.344 625.25 cv
638.344 625.25 611.07 635.09 590.109 627.695 cv
595.344 630.426 li
cp
f
590.398 626.711 mo
590.398 626.711 608.602 631.797 634.109 620.48 cv
634.109 620.48 606.336 630.617 585.117 624.285 cv
590.398 626.711 li
cp
f
583.719 621.488 mo
583.719 621.488 602.18 627.723 628.359 616.75 cv
628.359 616.75 599.891 626.363 578.367 618.672 cv
583.719 621.488 li
cp
f
701.602 660.324 mo
701.602 660.324 721.102 653.574 728.227 638.574 cv
728.227 638.574 723.477 655.328 701.602 660.324 cv
cp
f
578.273 617.09 mo
578.273 617.09 596.797 623.598 622.406 611.969 cv
622.406 611.969 594.477 622.18 572.859 614.125 cv
578.273 617.09 li
cp
f
572.961 611.973 mo
572.961 611.973 591.359 618.828 617.18 607.672 cv
617.18 607.672 589.078 617.363 567.609 608.91 cv
572.961 611.973 li
cp
f
567.711 606.977 mo
567.711 606.977 586.109 613.832 611.93 602.676 cv
611.93 602.676 583.828 612.367 562.359 603.91 cv
567.711 606.977 li
cp
f
562.711 601.977 mo
562.711 601.977 581.109 608.832 606.922 597.676 cv
606.922 597.676 578.82 607.367 557.352 598.914 cv
562.711 601.977 li
cp
f
558.313 596.727 mo
558.313 596.727 576.195 603.605 601.18 592.691 cv
601.18 592.691 573.969 602.141 553.102 593.664 cv
558.313 596.727 li
cp
f
554.063 591.73 mo
554.063 591.73 571.953 598.609 596.93 587.691 cv
596.93 587.691 569.719 597.145 548.859 588.664 cv
554.063 591.73 li
cp
f
550.063 587.23 mo
550.063 587.23 567.945 594.109 592.93 583.191 cv
592.93 583.191 565.719 592.645 544.852 584.164 cv
550.063 587.23 li
cp
f
545.563 582.977 mo
545.563 582.977 563.445 589.855 588.43 578.938 cv
588.43 578.938 561.219 588.391 540.352 579.91 cv
545.563 582.977 li
cp
f
541.555 578.477 mo
541.555 578.477 559.453 585.355 584.422 574.438 cv
584.422 574.438 557.211 583.891 536.352 575.41 cv
541.555 578.477 li
cp
f
537.563 574.223 mo
537.563 574.223 555.445 581.102 580.43 570.184 cv
580.43 570.184 553.219 579.637 532.344 571.156 cv
537.563 574.223 li
cp
f
533.813 569.973 mo
533.813 569.973 551.695 576.852 576.68 565.938 cv
576.68 565.938 549.469 575.387 528.594 566.91 cv
533.813 569.973 li
cp
f
527.813 565.977 mo
527.813 565.977 545.695 572.855 570.68 561.941 cv
570.68 561.941 543.469 571.391 522.594 562.914 cv
527.813 565.977 li
cp
f
523.555 561.477 mo
523.555 561.477 541.453 568.355 566.422 557.441 cv
566.422 557.441 539.211 566.891 518.352 558.414 cv
523.555 561.477 li
cp
f
520.313 556.727 mo
520.313 556.727 538.195 563.605 563.18 552.688 cv
563.18 552.688 535.969 562.141 515.094 553.66 cv
520.313 556.727 li
cp
f
519.219 552.168 mo
519.219 552.168 535.594 557.902 558.711 548.105 cv
558.711 548.105 533.555 556.66 514.477 549.578 cv
519.219 552.168 li
cp
f
515.227 547.668 mo
515.227 547.668 531.586 553.402 554.719 543.605 cv
554.719 543.605 529.555 552.16 510.469 545.078 cv
515.227 547.668 li
cp
f
510.969 542.664 mo
510.969 542.664 527.344 548.398 550.461 538.602 cv
550.461 538.602 525.305 547.156 506.227 540.074 cv
510.969 542.664 li
cp
f
507.727 537.664 mo
507.727 537.664 524.086 543.402 547.219 533.605 cv
547.219 533.605 522.055 542.16 502.969 535.074 cv
507.727 537.664 li
cp
f
504.727 532.918 mo
504.727 532.918 521.086 538.656 544.219 528.859 cv
544.219 528.859 519.055 537.414 499.969 530.328 cv
504.727 532.918 li
cp
f
501.469 527.668 mo
501.469 527.668 517.836 533.406 540.961 523.609 cv
540.961 523.609 515.797 532.164 496.719 525.078 cv
501.469 527.668 li
cp
f
501.219 522.418 mo
501.219 522.418 517.578 528.156 540.711 518.359 cv
540.711 518.359 515.555 526.914 496.461 519.828 cv
501.219 522.418 li
cp
f
500.469 517.168 mo
500.469 517.168 516.828 522.906 539.961 513.109 cv
539.961 513.109 514.805 521.664 495.711 514.578 cv
500.469 517.168 li
cp
f
498.969 512.418 mo
498.969 512.418 515.328 518.152 538.461 508.355 cv
538.461 508.355 513.305 516.91 494.211 509.828 cv
498.969 512.418 li
cp
f
496.219 507.918 mo
496.219 507.918 512.586 513.652 535.711 503.855 cv
535.711 503.855 510.547 512.41 491.469 505.328 cv
496.219 507.918 li
cp
f
495.469 502.668 mo
495.469 502.668 511.836 508.402 534.961 498.605 cv
534.961 498.605 509.797 507.16 490.719 500.078 cv
495.469 502.668 li
cp
f
493.719 498.414 mo
493.719 498.414 510.078 504.148 533.211 494.352 cv
533.211 494.352 508.055 502.906 488.961 495.824 cv
493.719 498.414 li
cp
f
491.719 494.043 mo
491.719 494.043 508.086 499.777 531.211 489.98 cv
531.211 489.98 506.047 498.535 486.969 491.453 cv
491.719 494.043 li
cp
f
489.023 488.621 mo
489.023 488.621 505.195 494.863 528.617 485.793 cv
528.617 485.793 503.203 493.563 484.344 485.887 cv
489.023 488.621 li
cp
f
489.219 484.539 mo
489.219 484.539 505.578 490.273 528.711 480.477 cv
528.711 480.477 503.555 489.031 484.461 481.949 cv
489.219 484.539 li
cp
f
485.953 479.375 mo
485.953 479.375 502.156 485.535 525.523 476.336 cv
525.523 476.336 502.977 483.828 483.727 477.332 cv
485.953 479.375 li
cp
f
483.383 473.887 mo
483.383 473.887 499.391 480.543 523.039 472.082 cv
523.039 472.082 499.477 478.832 482.469 471.578 cv
483.383 473.887 li
cp
f
482.977 469.328 mo
482.977 469.328 499.227 475.082 520.273 467.141 cv
520.273 467.141 499.477 472.082 482.977 467.328 cv
482.977 469.328 li
cp
f
481.477 464.328 mo
481.477 464.328 497.727 470.082 518.773 462.145 cv
518.773 462.145 497.977 467.082 481.477 462.332 cv
481.477 464.328 li
cp
f
481.477 459.781 mo
481.477 459.781 497.297 465.406 517.781 457.668 cv
517.781 457.668 497.531 462.477 481.477 457.832 cv
481.477 459.781 li
cp
f
481.969 455.281 mo
481.969 455.281 497.789 460.906 518.281 453.168 cv
518.281 453.168 498.031 457.977 481.969 453.332 cv
481.969 455.281 li
cp
f
481.719 450.781 mo
481.719 450.781 497.539 456.406 518.039 448.668 cv
518.039 448.668 497.789 453.477 481.719 448.832 cv
481.719 450.781 li
cp
f
481.227 446.281 mo
481.227 446.281 497.047 451.906 517.531 444.168 cv
517.531 444.168 497.281 448.977 481.227 444.332 cv
481.227 446.281 li
cp
f
481.227 441.285 mo
481.227 441.285 497.047 446.91 517.531 439.168 cv
517.531 439.168 497.281 443.98 481.227 439.332 cv
481.227 441.285 li
cp
f
482.227 431.785 mo
482.227 431.785 498.047 437.41 518.539 429.672 cv
518.539 429.672 498.289 434.48 482.227 429.836 cv
482.227 431.785 li
cp
f
481.977 436.539 mo
481.977 436.539 497.797 442.164 518.281 434.422 cv
518.281 434.422 498.031 439.234 481.977 434.586 cv
481.977 436.539 li
cp
f
483.234 426.789 mo
483.234 426.789 499.055 432.414 519.539 424.672 cv
519.539 424.672 499.289 429.484 483.234 424.836 cv
483.234 426.789 li
cp
f
485.352 422.16 mo
485.352 422.16 500.117 427.984 519.031 420.543 cv
519.031 420.543 500.297 425.066 485.32 420.215 cv
485.352 422.16 li
cp
f
486.148 412.695 mo
486.148 412.695 500.914 418.527 519.844 411.078 cv
519.844 411.078 501.102 415.602 486.125 410.75 cv
486.148 412.695 li
cp
f
485.984 417.438 mo
485.984 417.438 500.75 423.262 519.664 415.82 cv
519.664 415.82 500.93 420.344 485.953 415.492 cv
485.984 417.438 li
cp
f
487.016 407.727 mo
487.016 407.727 501.781 413.551 520.695 406.109 cv
520.695 406.109 501.961 410.633 486.984 405.781 cv
487.016 407.727 li
cp
f
487.602 402.285 mo
487.602 402.285 502.367 408.109 521.281 400.668 cv
521.281 400.668 502.547 405.191 487.57 400.34 cv
487.602 402.285 li
cp
f
488.398 392.82 mo
488.398 392.82 503.164 398.652 522.094 391.203 cv
522.094 391.203 503.352 395.727 488.375 390.875 cv
488.398 392.82 li
cp
f
488.234 397.563 mo
488.234 397.563 503 403.387 521.914 395.945 cv
521.914 395.945 503.18 400.469 488.203 395.617 cv
488.234 397.563 li
cp
f
489.266 387.852 mo
489.266 387.852 504.031 393.676 522.945 386.234 cv
522.945 386.234 504.211 390.758 489.234 385.906 cv
489.266 387.852 li
cp
f
491.727 383.535 mo
491.727 383.535 506.492 389.359 525.406 381.918 cv
525.406 381.918 506.672 386.441 491.695 381.59 cv
491.727 383.535 li
cp
f
492.523 374.07 mo
492.523 374.07 507.289 379.902 526.219 372.453 cv
526.219 372.453 507.477 376.977 492.5 372.125 cv
492.523 374.07 li
cp
f
492.359 378.813 mo
492.359 378.813 507.125 384.637 526.039 377.195 cv
526.039 377.195 507.305 381.719 492.328 376.867 cv
492.359 378.813 li
cp
f
493.391 369.102 mo
493.391 369.102 508.156 374.926 527.07 367.484 cv
527.07 367.484 508.336 372.008 493.359 367.156 cv
493.391 369.102 li
cp
f
grestore
763.719 553.328 mo
763.719 553.328 743.227 399.828 615.727 349.328 cv
615.727 349.328 742.227 371.324 763.719 553.328 cv
cp
1 1 1 rgb
f
607.109 463.859 mo
607.109 463.859 604.836 466.832 604.102 465.324 cv
603.359 463.82 606.703 460.703 607.109 463.859 cv
cp
.27451 .207843 .145098 rgb
f
586.883 449.746 mo
586.883 449.746 584.695 451.375 584.344 448.742 cv
583.992 446.113 587.766 444.277 586.883 449.746 cv
cp
f
610.484 478.73 mo
610.484 478.73 606.633 481.914 605.695 478.832 cv
604.742 475.742 610.531 474.98 610.484 478.73 cv
cp
f
597.727 493.52 mo
597.727 493.52 596.656 495.531 595.391 494.094 cv
594.141 492.652 597.242 489.836 597.727 493.52 cv
cp
f
569.813 433.809 mo
569.813 433.809 568.57 436.645 566.492 435.043 cv
564.406 433.449 568.5 429.969 569.813 433.809 cv
cp
f
579.664 437.594 mo
579.664 437.594 579.258 440.586 577.242 439.516 cv
575.227 438.441 576.023 434.328 579.664 437.594 cv
cp
f
578.234 424.672 mo
578.234 424.672 576.867 426.461 575.445 425.844 cv
574.031 425.23 575.414 421.566 578.234 424.672 cv
cp
f
558.242 482.137 mo
558.242 482.137 553.648 483.805 553.383 481.707 cv
553.102 479.605 558.656 479.141 558.242 482.137 cv
cp
f
588.398 495.816 mo
588.398 495.816 583.438 496.738 583.922 494.266 cv
584.398 491.797 590.07 494.258 588.398 495.816 cv
cp
f
583.203 486.406 mo
583.203 486.406 582.633 490.223 580.484 488.102 cv
578.328 485.973 583.086 483.477 583.203 486.406 cv
cp
f
564.727 450.707 mo
564.727 450.707 564 453.301 562.008 451.777 cv
560.023 450.254 564.352 447.898 564.727 450.707 cv
cp
f
587.484 462.109 mo
587.484 462.109 586.344 465.652 584.227 463.074 cv
582.102 460.504 587.773 457.609 587.484 462.109 cv
cp
f
594.359 474.078 mo
594.359 474.078 593.438 476.527 591.305 475.199 cv
589.172 473.867 593.555 470.617 594.359 474.078 cv
cp
f
606.148 498.559 mo
606.148 498.559 606.313 502.461 603.477 499.977 cv
600.656 497.504 606.328 495.863 606.148 498.559 cv
cp
f
568.195 466.285 mo
568.195 466.285 566.328 468.324 564.563 465.699 cv
562.789 463.082 569.133 463.848 568.195 466.285 cv
cp
f
575.352 493.52 mo
575.352 493.52 574.906 492.871 573.219 492.195 cv
571.523 491.527 571.359 488.867 573.945 489.605 cv
576.539 490.332 577.063 492.941 575.352 493.52 cv
cp
f
591.594 512.598 mo
591.594 512.598 590.484 513.641 587.398 511.906 cv
584.32 510.172 588.258 510.367 589.813 509.984 cv
591.375 509.598 592.719 510.313 591.594 512.598 cv
cp
f
602.133 508.719 mo
602.133 508.719 600.188 512.902 598.57 510.078 cv
596.953 507.262 602.773 505.422 602.133 508.719 cv
cp
f
564.305 422.492 mo
564.305 422.492 562.18 424.648 560.328 422.75 cv
558.469 420.859 560.727 419.758 562.602 419.773 cv
564.477 419.797 565.672 420.711 564.305 422.492 cv
cp
f
615.359 513.664 mo
615.359 513.664 613.227 515.816 612.195 514.074 cv
611.164 512.34 613.594 510.418 615.305 511.262 cv
617.023 512.105 615.359 513.664 615.359 513.664 cv
cp
f
557.625 436.75 mo
557.625 436.75 555.938 440.184 554.016 437.762 cv
552.094 435.336 558.258 433.457 557.625 436.75 cv
cp
f
549.773 413.711 mo
549.773 413.711 546.828 415.707 546.094 414.195 cv
545.367 412.691 550.32 411.77 549.773 413.711 cv
cp
f
579.164 504.391 mo
579.164 504.391 576.586 507.137 575.414 504.348 cv
574.242 501.559 578.086 500.254 580.102 501.324 cv
582.117 502.398 579.164 504.391 579.164 504.391 cv
cp
f
gsave
748.219 576.324 mo
748.219 576.324 754.477 503.574 688.477 419.574 cv
640.133 358.051 590.227 350.828 579.727 352.328 cv
569.227 353.828 568.219 366.324 583.219 382.824 cv
598.219 399.324 626.977 429.273 666.219 478.328 cv
710.227 533.324 744.727 609.324 748.219 576.324 cv
cp
clp
615.594 360.887 mo
615.594 360.887 592.641 363.5 578.344 389.02 cv
578.344 389.02 590.203 371.516 615.594 360.887 cv
cp
1 1 1 rgb
f
620.469 365.387 mo
620.469 365.387 597.516 368 583.219 393.52 cv
583.219 393.52 595.078 376.016 620.469 365.387 cv
cp
f
581.977 403.824 mo
581.977 403.824 600.352 374.199 629.977 365.574 cv
629.977 365.574 605.977 376.074 581.977 403.824 cv
cp
f
583.102 413.199 mo
583.102 413.199 606.727 377.199 640.477 368.574 cv
640.477 368.574 615.352 376.824 583.102 413.199 cv
cp
f
587.602 418.449 mo
587.602 418.449 611.227 382.449 644.977 373.824 cv
644.977 373.824 619.852 382.074 587.602 418.449 cv
cp
f
591.727 424.074 mo
591.727 424.074 615.352 388.074 649.102 379.449 cv
649.102 379.449 623.977 387.699 591.727 424.074 cv
cp
f
596.977 428.574 mo
596.977 428.574 620.602 392.574 654.352 383.949 cv
654.352 383.949 629.227 392.199 596.977 428.574 cv
cp
f
601.852 433.824 mo
601.852 433.824 625.477 397.824 659.227 389.199 cv
659.227 389.199 634.102 397.449 601.852 433.824 cv
cp
f
607.477 439.074 mo
607.477 439.074 631.102 403.074 664.852 394.449 cv
664.852 394.449 639.727 402.699 607.477 439.074 cv
cp
f
612.727 444.699 mo
612.727 444.699 636.352 408.699 670.102 400.074 cv
670.102 400.074 644.977 408.324 612.727 444.699 cv
cp
f
618.352 449.949 mo
618.352 449.949 641.977 413.949 675.727 405.324 cv
675.727 405.324 650.602 413.574 618.352 449.949 cv
cp
f
622.852 456.324 mo
622.852 456.324 646.477 420.324 680.227 411.699 cv
680.227 411.699 655.102 419.949 622.852 456.324 cv
cp
f
628.477 461.574 mo
628.477 461.574 652.102 425.574 685.852 416.949 cv
685.852 416.949 660.727 425.199 628.477 461.574 cv
cp
f
632.602 468.699 mo
632.602 468.699 656.227 432.699 689.977 424.074 cv
689.977 424.074 664.852 432.324 632.602 468.699 cv
cp
f
638.227 473.949 mo
638.227 473.949 661.852 437.949 695.602 429.324 cv
695.602 429.324 670.477 437.574 638.227 473.949 cv
cp
f
641.602 481.824 mo
641.602 481.824 665.227 445.824 698.977 437.199 cv
698.977 437.199 673.852 445.449 641.602 481.824 cv
cp
f
647.227 487.074 mo
647.227 487.074 670.852 451.074 704.602 442.449 cv
704.602 442.449 679.477 450.699 647.227 487.074 cv
cp
f
651.352 494.199 mo
651.352 494.199 674.977 458.199 708.727 449.574 cv
708.727 449.574 683.602 457.824 651.352 494.199 cv
cp
f
656.977 499.449 mo
656.977 499.449 680.602 463.449 714.352 454.824 cv
714.352 454.824 689.227 463.074 656.977 499.449 cv
cp
f
661.102 507.324 mo
661.102 507.324 684.727 471.324 718.477 462.699 cv
718.477 462.699 693.352 470.949 661.102 507.324 cv
cp
f
666.727 512.574 mo
666.727 512.574 690.352 476.574 724.102 467.949 cv
724.102 467.949 698.977 476.199 666.727 512.574 cv
cp
f
670.852 519.699 mo
670.852 519.699 694.477 483.699 728.227 475.074 cv
728.227 475.074 703.102 483.324 670.852 519.699 cv
cp
f
676.477 524.949 mo
676.477 524.949 700.102 488.949 733.852 480.324 cv
733.852 480.324 708.727 488.574 676.477 524.949 cv
cp
f
679.852 533.199 mo
679.852 533.199 703.477 497.199 737.227 488.574 cv
737.227 488.574 712.102 496.824 679.852 533.199 cv
cp
f
685.477 538.449 mo
685.477 538.449 709.102 502.449 742.852 493.824 cv
742.852 493.824 717.727 502.074 685.477 538.449 cv
cp
f
689.602 545.574 mo
689.602 545.574 713.227 509.574 746.977 500.949 cv
746.977 500.949 721.852 509.199 689.602 545.574 cv
cp
f
695.227 550.824 mo
695.227 550.824 718.852 514.824 752.602 506.199 cv
752.602 506.199 727.477 514.449 695.227 550.824 cv
cp
f
697.102 558.324 mo
697.102 558.324 720.727 522.324 754.477 513.699 cv
754.477 513.699 729.352 521.949 697.102 558.324 cv
cp
f
702.727 563.574 mo
702.727 563.574 726.352 527.574 760.102 518.949 cv
760.102 518.949 734.977 527.199 702.727 563.574 cv
cp
f
706.852 570.699 mo
706.852 570.699 730.477 534.699 764.227 526.074 cv
764.227 526.074 739.102 534.324 706.852 570.699 cv
cp
f
709.852 577.074 mo
709.852 577.074 733.477 541.074 767.227 532.449 cv
767.227 532.449 742.102 540.699 709.852 577.074 cv
cp
f
709.391 590.902 mo
709.391 590.902 729.563 552.859 762.352 541.129 cv
762.352 541.129 738.102 551.688 709.391 590.902 cv
cp
f
715.477 595.609 mo
715.477 595.609 735.641 557.563 768.445 545.832 cv
768.445 545.832 744.195 556.387 715.477 595.609 cv
cp
f
720.242 602.316 mo
720.242 602.316 740.414 564.273 773.211 552.543 cv
773.211 552.543 748.969 563.094 720.242 602.316 cv
cp
f
726.336 607.023 mo
726.336 607.023 746.508 568.977 779.305 557.246 cv
779.305 557.246 755.063 567.801 726.336 607.023 cv
cp
f
611.844 356.387 mo
611.844 356.387 588.891 359 574.594 384.52 cv
574.594 384.52 586.453 367.016 611.844 356.387 cv
cp
f
606.594 351.887 mo
606.594 351.887 583.641 354.5 569.344 380.02 cv
569.344 380.02 581.203 362.516 606.594 351.887 cv
cp
f
600.969 347.762 mo
600.969 347.762 578.016 350.375 563.719 375.895 cv
563.719 375.895 575.578 358.391 600.969 347.762 cv
cp
f
593.844 344.762 mo
593.844 344.762 572.672 347.195 559.477 370.824 cv
559.477 370.824 570.422 354.617 593.844 344.762 cv
cp
f
grestore
569.227 361.074 mo
554.227 356.207 557.203 351.324 571.477 351.324 cv
601.477 351.324 589.445 367.637 569.227 361.074 cv
cp
1 1 1 rgb
f
499.477 532.824 mo
499.477 532.824 551.977 641.574 651.727 659.574 cv
651.727 659.574 554.227 660.324 499.477 532.824 cv
cp
f
792.727 405.324 mo
792.727 405.324 845.977 478.074 813.727 572.574 cv
813.727 572.574 839.227 495.324 792.727 405.324 cv
cp
f
405.164 572.113 mo
402.867 567.543 395.188 554.875 387.313 551.199 cv
375.727 545.785 366.547 538.949 366.164 538.66 cv
365.813 538.398 li
365.508 538.074 li
360.758 533.031 356.82 525.887 354.727 520.824 cv
355.438 522.605 li
349.945 514.098 li
344.422 505.574 344.727 496.145 346.078 489.477 cv
343.945 482.551 343.828 476.066 344.461 470.758 cv
340.438 473.27 li
341.656 462.742 li
342.609 454.449 344.703 446.359 346.859 439.648 cv
349.203 427.141 li
350.375 420.934 353.273 414.332 356.023 409.07 cv
354.781 409.32 li
357.641 400.93 li
363.406 384.031 370.953 372.695 376.906 365.68 cv
374.461 365.68 li
380.039 357.664 li
387.664 346.695 397.766 336.734 404.516 330.617 cv
403.266 329.188 li
411.82 316.75 425.391 305.387 425.961 304.906 cv
446.469 294.078 li
444.539 292.855 li
472.719 281.328 474.375 271.109 474.383 271.012 cv
474.383 268.387 li
476.508 267.172 li
478.508 265.75 483.82 258.324 485.727 258.324 cv
491.211 258.324 488.727 264.184 488.727 273.324 cv
488.727 274.027 490.531 285.637 491.227 287.328 cv
493.484 292.914 498.078 298.074 498.078 314.828 cv
498.078 338.012 496.578 357.043 496.555 357.23 cv
496.453 360.508 496.156 364.391 495.773 368.445 cv
493.789 388.82 489.188 413.02 488.984 414.039 cv
486.68 414.074 li
482.555 436.094 463.008 471.93 462.219 473.328 cv
462.805 466.504 li
456.305 480.547 445.672 504.004 445.227 504.828 cv
445.109 496.637 li
439.93 508.902 431.531 524.359 431.227 524.828 cv
432.688 518.277 li
430.523 522.566 427.406 528.195 423.031 535.07 cv
413.539 549.969 411.633 578.691 412.227 585.828 cv
405.164 572.113 li
cp
.27451 .207843 .145098 rgb
f
479.469 271.328 mo
479.469 271.328 479.469 284.078 446.469 297.578 cv
429.219 308.828 li
429.219 308.828 415.719 320.078 407.469 332.078 cv
414.969 328.328 li
414.969 328.328 394.344 338.703 384.219 360.578 cv
389.469 360.578 li
389.469 360.578 372.969 371.828 362.469 402.578 cv
374.227 393.324 li
374.227 393.324 356.469 416.078 354.219 428.078 cv
357.969 425.078 li
357.969 425.078 348.969 443.828 346.719 463.328 cv
352.719 459.578 li
352.719 459.578 345.969 473.078 351.219 488.828 cv
353.469 482.828 li
353.469 482.828 345.969 498.578 354.219 511.328 cv
357.727 491.324 li
357.727 491.324 357.219 521.828 369.219 534.578 cv
369.219 534.578 378.219 541.328 389.469 546.578 cv
400.719 551.828 409.719 569.828 409.719 569.828 cv
409.719 569.828 408.219 548.828 418.719 532.328 cv
429.219 515.828 432.219 506.828 432.219 506.828 cv
429.219 515.828 li
429.219 515.828 438.219 502.328 443.469 486.578 cv
442.719 494.828 li
442.719 494.828 456.219 470.078 462.219 455.078 cv
460.719 464.828 li
460.719 464.828 481.719 427.328 482.469 406.328 cv
483.969 413.078 li
483.969 413.078 488.719 388.328 490.688 367.953 cv
491.07 364.012 491.352 360.23 491.469 356.828 cv
491.469 356.828 494.844 342.078 494.844 318.828 cv
494.844 295.578 485.469 284.078 485.469 278.828 cv
485.469 273.578 484.719 267.578 479.469 271.328 cv
cp
.517647 .631373 .294118 rgb
f
475.719 284.828 mo
475.719 284.828 470.469 305.078 459.969 332.828 cv
449.469 360.578 441.219 391.328 426.969 448.328 cv
412.719 505.328 407.469 550.328 407.469 550.328 cv
407.469 550.328 411.727 479.949 432.727 406.449 cv
453.727 332.949 471.219 290.828 471.219 290.828 cv
471.219 290.828 475.719 281.828 475.719 284.828 cv
cp
.27451 .207843 .145098 rgb
f
478.219 287.699 mo
478.219 287.699 492.219 295.824 493.477 313.824 cv
493.477 313.824 487.969 298.949 478.219 287.699 cv
cp
f
476.227 293.703 mo
476.227 293.703 489.219 300.324 491.469 319.832 cv
491.469 319.832 485.977 304.953 476.227 293.703 cv
cp
f
474.219 299.574 mo
474.219 299.574 487.719 306.324 493.719 338.574 cv
493.719 338.574 489.477 320.82 474.219 299.574 cv
cp
f
472.227 307.074 mo
472.227 307.074 486.219 312.324 491.727 346.074 cv
491.727 346.074 487.477 328.32 472.227 307.074 cv
cp
f
470.727 316.32 mo
470.727 316.32 484.227 322.824 490.227 355.32 cv
490.227 355.32 485.977 337.566 470.727 316.32 cv
cp
f
467.977 323.07 mo
467.977 323.07 482.227 329.328 487.477 362.07 cv
487.477 362.07 483.234 344.316 467.977 323.07 cv
cp
f
464.727 330.32 mo
464.727 330.32 483.727 342.828 488.719 384.324 cv
488.719 384.324 479.977 351.566 464.727 330.32 cv
cp
f
461.602 338.82 mo
461.602 338.82 482.227 353.328 485.844 396.453 cv
485.844 396.453 476.859 360.066 461.602 338.82 cv
cp
f
457.852 346.949 mo
457.852 346.949 478.719 362.328 482.094 404.574 cv
482.094 404.574 473.109 368.195 457.852 346.949 cv
cp
f
468.219 294.828 mo
468.219 294.828 446.727 294.828 417.727 322.824 cv
417.727 322.824 444.727 301.824 468.219 294.828 cv
cp
f
476.727 249.828 mo
476.727 249.828 478.992 256.305 485.859 248.066 cv
485.859 248.066 488.719 249.828 486.727 252.324 cv
484.719 254.828 477.727 257.328 476.727 249.828 cv
cp
f
454.344 355.941 mo
454.344 355.941 475.219 371.328 478.594 413.574 cv
478.594 413.574 469.602 377.188 454.344 355.941 cv
cp
f
461.953 303.5 mo
461.953 303.5 440.484 304.648 413 334.145 cv
413 334.145 438.852 311.738 461.953 303.5 cv
cp
f
460.719 309.828 mo
460.719 309.828 430.227 317.828 395.227 356.828 cv
395.227 356.828 430.719 325.328 460.719 309.828 cv
cp
f
451.344 364.566 mo
451.344 364.566 472.219 379.953 475.594 422.199 cv
475.594 422.199 466.602 385.813 451.344 364.566 cv
cp
f
456.594 319.953 mo
456.594 319.953 418.719 333.078 376.344 384.453 cv
376.344 384.453 423.219 336.078 456.594 319.953 cv
cp
f
454.719 328.953 mo
454.719 328.953 413.469 345.828 371.844 396.828 cv
371.844 396.828 415.344 352.953 454.719 328.953 cv
cp
f
449.094 340.578 mo
449.094 340.578 404.984 359.574 360.969 418.203 cv
360.969 418.203 407.109 367.871 449.094 340.578 cv
cp
f
447.594 349.953 mo
447.594 349.953 400.594 373.531 356.469 433.953 cv
356.469 433.953 405.383 377.992 447.594 349.953 cv
cp
f
448.719 373.941 mo
448.719 373.941 469.719 392.453 473.094 434.703 cv
473.094 434.703 463.977 395.188 448.719 373.941 cv
cp
f
444.969 382.566 mo
444.969 382.566 465.969 401.078 469.344 443.328 cv
469.344 443.328 460.227 403.813 444.969 382.566 cv
cp
f
441.969 392.691 mo
441.969 392.691 461.68 410.633 464.844 451.578 cv
464.844 451.578 456.289 413.281 441.969 392.691 cv
cp
f
440.469 405.816 mo
440.469 405.816 457.922 421.129 460.719 456.078 cv
460.719 456.078 453.148 423.395 440.469 405.816 cv
cp
f
443.367 361.039 mo
443.367 361.039 396.844 385.563 353.961 446.867 cv
353.961 446.867 401.727 389.926 443.367 361.039 cv
cp
f
439.992 373.414 mo
439.992 373.414 393.469 397.938 350.586 459.242 cv
350.586 459.242 398.352 402.301 439.992 373.414 cv
cp
f
439.242 383.914 mo
439.242 383.914 394.828 407.234 353.844 465.453 cv
353.844 465.453 399.492 411.367 439.242 383.914 cv
cp
f
433.617 397.789 mo
433.617 397.789 392.625 419.727 354.969 474.828 cv
354.969 474.828 396.961 423.676 433.617 397.789 cv
cp
f
438.594 414.441 mo
438.594 414.441 453.781 428.84 456.219 461.703 cv
456.219 461.703 449.625 430.965 438.594 414.441 cv
cp
f
435.594 422.691 mo
435.594 422.691 450.781 437.09 453.219 469.953 cv
453.219 469.953 446.625 439.215 435.594 422.691 cv
cp
f
432.219 432.816 mo
432.219 432.816 447.406 447.215 449.844 480.078 cv
449.844 480.078 443.25 449.34 432.219 432.816 cv
cp
f
429.219 444.066 mo
429.219 444.066 442.789 456.863 444.969 486.078 cv
444.969 486.078 439.078 458.762 429.219 444.066 cv
cp
f
428.469 411.453 mo
428.469 411.453 388.945 432.863 352.719 486.828 cv
352.719 486.828 393.141 436.75 428.469 411.453 cv
cp
f
425.844 426.078 mo
425.844 426.078 388.664 446.211 354.594 496.953 cv
354.594 496.953 392.609 449.867 425.844 426.078 cv
cp
f
423.594 439.203 mo
423.594 439.203 390.609 456.652 360.219 500.328 cv
360.219 500.328 394.078 459.77 423.594 439.203 cv
cp
f
428.094 454.578 mo
428.094 454.578 438.43 465.887 440.094 491.703 cv
440.094 491.703 435.609 467.559 428.094 454.578 cv
cp
f
424.344 462.453 mo
424.344 462.453 434.68 473.762 436.344 499.578 cv
436.344 499.578 431.859 475.434 424.344 462.453 cv
cp
f
422.469 473.328 mo
422.469 473.328 431.188 483.031 432.594 505.203 cv
432.594 505.203 428.813 484.473 422.469 473.328 cv
cp
f
419.469 452.703 mo
419.469 452.703 388.992 468.953 360.969 509.703 cv
360.969 509.703 392.211 471.863 419.469 452.703 cv
cp
f
415.719 465.453 mo
415.719 465.453 388.484 480.336 363.594 517.953 cv
363.594 517.953 391.391 483.055 415.719 465.453 cv
cp
f
414.219 476.328 mo
414.219 476.328 389.883 489.887 367.719 524.328 cv
367.719 524.328 392.484 492.395 414.219 476.328 cv
cp
f
420.219 484.203 mo
420.219 484.203 427.648 492.535 428.844 511.578 cv
428.844 511.578 425.625 493.773 420.219 484.203 cv
cp
f
417.969 494.703 mo
417.969 494.703 424.109 501.898 425.094 518.328 cv
425.094 518.328 422.438 502.965 417.969 494.703 cv
cp
f
415.719 505.953 mo
415.719 505.953 420.891 511.543 421.719 524.328 cv
421.719 524.328 419.484 512.375 415.719 505.953 cv
cp
f
411.594 488.328 mo
411.594 488.328 391.219 500.453 372.969 531.828 cv
372.969 531.828 393.453 502.801 411.594 488.328 cv
cp
f
410.469 500.703 mo
410.469 500.703 393.422 511.016 378.219 537.828 cv
378.219 537.828 395.305 513.031 410.469 500.703 cv
cp
f
410.094 511.203 mo
410.094 511.203 396.703 519.758 384.969 542.328 cv
384.969 542.328 398.227 521.492 410.094 511.203 cv
cp
f
407.656 522.969 mo
407.656 522.969 398.211 529.695 390.594 545.703 cv
390.594 545.703 399.406 530.75 407.656 522.969 cv
cp
f
414.594 520.578 mo
414.594 520.578 417.5 523.66 417.969 530.703 cv
417.969 530.703 416.719 524.117 414.594 520.578 cv
cp
f
408.031 532.719 mo
408.031 532.719 401.578 537.688 396.594 549.828 cv
396.594 549.828 402.43 538.52 408.031 532.719 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_plum.eps)
%%CreationDate: 3/12/2016 1:02 AM
%AI9_DataStream
%Gb",KCKhHDe+!6[YA=/*4JP03o)VYo";F9j_"0%1A:R3A0F)d75<Q^ZX]+sfOs-5A/d\"[T6lpKoQ4/7=4aFPX7+hHBlrX*CAhhB
%n]sPIF:Em&AZ:1Xq8]$fc`0'(.ndchUYIkhlL!tNUE$[FX,U;XfilJ!r[?<<02"h)VNgrheS:)YF"=Xrq#nD\Cq0B.eQT?:BV(OD
%3A5<t6[PFhIa`nPTEG*rSo<-%[8&%%L@:n[`[SQ=d2RS-IdBPk2F%SDRL%<de!214$TWk=RJF3'*E?>2AuT'Qe3Dj2VM,J?#MkBb
%9)J`OK7;aN)0hQ"7Ydg8Xj,5Ri`>P]qgK$eR*BK=iKG%*jhX2/rF<o5r6#N@"81!QM>nYVli.@m[W6Q:iGl<8M`?I1%6Plu\FA48
%&'V`gnAu(>M)="G:=![OG!pCc)2=8tF(Q8Dn=QjjW]A96:V1OIH.rf2R!V'A)c"\a69jpa#)qqO7R$J*PF*#Xo4mpl6LIuUW^KRL
%n3XIp>Q#X;XD&e!)29:fFum%0q5.J8bPW)56CsC-NCm/Kc_uKh=p\h%8LOAD[+HldO.nQ%D55[u.9X^qHB_L%e'6=%#[,WB6+5(5
%qHi26Ja*G)L<p3I9F/h_Kq8t(RdVQb;K[iRj4C;<htM,b[Xf[4Ran0JI6iGHmltYi.l!Oi<\E<[&bu/En\7p!:S7i\g[1rBk[7Tk
%X"WM)@,bM\ii$Ycb%frNacB*Tc3ge%*EGJ.E?oJ_+7p&SkaVr'oO.]!"$W[7Z/\(KGfB-'rU!bn?9W3a3bKE)_oA<ubS2OdK.+37
%C*1?FNp;n\rL?"1T/llRSo.TTe\cd6H?Od/Qb,IW%iVijlVr(qI%pYdda_[1<!GI*>6j&[1+^omGnC"`gSqWV/7!*;q4%&Z3b-t3
%[#T3SNCHVE.1P@'7NU3I^DWM,FQ9_/i8s`W^07PeW^k=^fl=Eiepkhh4jXAiAf2AM?8IIcU7^r46i:jLL+^rVV*Wo88e9>L`H[>o
%'6REZK/Cp%_MK`!3'BVR+h)f'3lB"jE]qf*$iHZ._%K<.#!H7mT1?</=^hI)P7e<!Y1,SW['XSEHE!=-(V4OJ9\UkTG!492T#KNs
%q]In_P&Yr"W6@(-I_#@L.2Y'^<.GMPhmipcp&=(8/'r/*GHk=@<E3f5)"MDr2tP@0XU[#I@IBT7K2+K0d5qRB$dE:_[nZ\.>,sKT
%3jl24%lXJgr=].\rdjYE05$5*pN$jhTh>ra>trU;[>qWiEC#e7l',Dfcp&A9ECJiY$n2$pFXVc/PQ?WUX-NBu#"59CGU%8L<KE0p
%)6csIY6pg)R1TaDBK0mb[+rd)c%'2'l`7n.Yd%Q6SK4'jc/Ikd.iGS.7W[6**]KM>mPGHi0<(;5iO%OHL/LB_IO,9M)nYKP]6ob-
%8>+G+G3Js;iS:Te=,!/%*34DKFK=1LSS(8=g%`]h>2F4RUNKCJ7I/4^HO!Y1MiR4>IoXSKnf!Nn1MV&I=nI>]Qr2L@"LC)ok2?q;
%g)D@q&hjinr09q_>/A+<"RE[&C,_S!-7*PU<EuuekVUK1;tg/Fkd69;n'YqCEF1TRqF0DJ)\;8Wf*aU"/TN3p/=55s"^,0L!I+lF
%C2S%Vb)HQ3;cdklOI<\#j6=]H;ciCk=TVgAp8Uu,9qAg$E98p[li]@j).G'o?Z,/P9msRO0/rRcVS4$X1N-P$D_;tAj6k5Rf?'Z.
%KZqC0F5Z;a7-@EapUF1:r&rlIb%*`Gg6H,h?DU?89Q!/%q:/XKjORW>rI7Z0>bn>GfP5k=lEjaF;LRY9m)Idtc8I7acWuOJ_cG8.
%0FPY:A)f&k.Tsuhaq`Vt=`DGk%9<D<o!Q2#4>r>&]S8<PB(M;PJAC'_(],di>4Y6995IGYNONL;HP+giMoo7pMth'#j]@1YN`N''
%==QhQj\e!3lY:l[*^p:G?nsgO;KK6CDm`72/@3n,ad(gtA4LV+T<h!M)@=7TP6l@kk4(-$"r`JJW5?f4`L+[qk,iH`n\5KGr9qdF
%N9s*BhVQHlMO=9h@-l$6h%[J0,)r10[j@-h6C?Ifs#NUo#&CC)0#tInJ5W`-5!Ft[=Z4VR8eP[=5Yn\ifSMKB37qAQYceOl%!K\5
%7<j"7@#d/U(I`>TE,_s`qHff=nliFq#;`QGJfMUOq9LM18T]PSM7AVPhQClc?Ui;8#UqcrekUC^EBWLF[mDgoo!tiH9r<#kYn*C:
%^gYFhB;R[`o!o$qX%r6]cQ(Y@D)>uXbp`EqL@*(JT#Xg0@_&f1(9,Af331me<N;T@Co\I\Xe0lE;R/(90JW!,QMJ%$q=35+bsq<k
%(i.`70S7<k%@N*YYnpp%6$W@*,?Wu`b>`_GbtO)pb/gfn1,2F3r]2=@AsncQ=l9s`"Znja5?S6O1ZXTli5,0sL?+"/N6`d3`a4"(
%1%Zh^HY,QU;A@H1(FZdAPpIlRZY%$\D>O/&=QUL`@rdl\#%U2+k2Rtm7`l1N&i=beC^dHfQg47B[N!bkEjc6Us!Lm%?Qm>LmHF?<
%Ir`N^VH@]+iU&^O_8sgJfgMj1dh6bh@I%kV4Iu89T3U9GB%NZm&Z.e!GRUV2=:=i-=1&o430U+PYFr\hmuh[<l-ph!1#DIQb;md<
%/GtWea2WSYB8GD<cDo3@b]Q]W3R!kfF',QpZ=P0/Y0`WI8Gad0E7%O[<@7+9$C+NVn'[7*keJ*OQ^Sdn)n3I0PhZ]2<3d4niDs$7
%7L%>ROi?g->TF:lFR3GBELLIT;mWOAUD]1U2]S;bV,D/3ca,T!ERUu*Wns[e6)e,WS9>*Ij`DZ2BREfneZ/;@Pi5k=\Pt*>V5Y?Z
%MORoe;Ai0UjIE3c?P*pgVldT0Q$O4BHM'*.Zd&G$#d-O'[VOe'Pcn(68oP4p;6nEeUkCCuR4.)0T=rgD-s8$/9jfHn284#_PFrkA
%rHXrS;6h<#.B7$tF&=\p1)#h/E]o`aFim.pK$;m1U1BEedp/,O0$:r'D5OilA*3(c8O0hX\L<jKqq.t'l]d<j"dqreW2I0SI?sP.
%jJ$2EZ*@[/f-qL^$SmpOl7[4FAeK0"1<nndX6V7uEjCVdA]jM2cG\cYVjO!2poR@t,m;i"IUQYp^IT)Wp+JGQ22V1q>1WPl&riHH
%8jC(q0_Ub=f$UMA9]atVEm:)r[;.5C1<f&`Y"e$3ooj0,9mAENfD_.oO:^#;W_KV'WDra*9=:b(FtKQEe5i&2[K!%%9C<)Q?bua8
%\</$=$%@#(H(m1sVorcGA`QXR;$IY,QdKmmFn*\*jq=9Ql9A-_]2nd5J'"SjYGUT:O`N>>>r(qo18S;(g.nUECIY4]$YpYSMmlq/
%.bCnLMj\.&-D5[CR55X2,A4UWD^,Me>D0cM^PhS*GE)1)X7]),=KPqXNGTINSjfK!1"520g0PM/e"SK/<:m#0L1O_H,;rCf?\V]$
%s1sRGj(95.$a/G'L0_"+?%iNO/fL@L,lVWDr"miWYK-pZB)>(9q.nbeICX?DenBVK]%+oAXo62>rfMEC7QG13Q%ECDc.>?UJPri.
%5!Ft[=ls7hUd9a>hFSIu41W43#$GoT-l8fi#Q*e*a:OY"\HpM6*6drmiM'&i/f^BQ;(E<V-*L7d`=Y8#s.#7B`/TQbH$*SZJYjgn
%VYe,l^]/Z&-2OM9^Z32Se,A/30U_A/:A95Ca:[2.[Z&1a11e&[45KN,4]l"=4l:%#dDp@T[k[<5hW^X#,fI*fHbMlFX6H5EFGmM(
%4Zr(A\OC%<ek'J4`]b+,,HB94Ih,&F<]rK]6\G1i<^Fu\<::&nk3HSi]A8Ft$$<QrA#t>R<uZ;O[d.'s<SnTok1=4LI6,V?n=d-_
%>'KRsH>20a_)+J:NKF*Co&Z=qDp.E_nYd<oogLR4U;^l\;E\bGSlZl=W4giB.Z99uWIEfte228*%@p3\B@G41!iZT_n2,T;ji3H$
%ACq>?rNCP$BjYs*ACn2eQ<2%L?3YMG)Z7_p%8=.Bi\4*39('\G0!$SJ9e!CJZRIDP,2)saKT')I;&Q`Bo6M_5K=,uq,;&qIgO;TU
%!Z;O_L)hGmdf7Ekc^[84p<OUYX!8c)IkhJG9EQrs^rq3Nn029V%_P=HL>jl8^rnS(1(Cli"#&-=b;A]D&V6;&J@NNCmIX0V8:&DU
%/jOU!iL/m8d^:S^0iBQ:)B##tXO."&3SJ2PM1<-&^pk2MaF_=>(RrKD0On:&inop5^ZG<M.l,f4gSO1h1$V>0OP)FMVoj"Z*2f'h
%-=8c..l!$=Em1[[-:TXpV[?*BHM@G"jZ&+om3D,b[//4XqU/BKl$oT,ddD+SdeN^FYMP[8acrLqeFZ`>Q.n=6mo99dWfZIbp@7(D
%`o1>VC?$j%UIrNP1GS$6L<D\0)/bY77cTHF7Cp&<LOZISc#42tr>0m4T35aWdhs"3RCTJeAPYIrCZhD9S*lj+*1B<g?(j=&L-uf2
%p<V84@6-j^,lXrI1*m)r].67gc@X8[PV"%Q2nUnup-0>5\E":NPA"6Idl>>MGad)@``O.pdl>ABa"`0]&BDkD__dB.k*gH3`u%l4
%5)j&GitrFBa8#+JB^J]pN6:JST,fg_j`[WsW_q$(o?6##V2+L<MU#Do[]Afd7H'dicP,(#<GS!4rHGZ`.cdn"LoGSn[pW+[1LZPb
%HrW]Tq$_CS%SEj:]bu7e7.kR9K=[uZ<T-umjP7&A5pAZACLTE7/BD(?Z%&k_%:-m:4P-AgO-.b-]1fi!`M@1+\U$;Q2GUT['P_ek
%QqZfM:$W!XlN[;7Up:i9s1u!,^FSf[f4c:JC-_+,$jp=Ql6i"Dl>_#iVWC*mhho*JJ^Q)p3FeZKPm)k]:\HQH;mKIOA>[ITM4hag
%CaI#SaSnUurVo6IV=lULCq?/k2a5t&))=E'E&YVC^=rt(]WPV=hUIl204-=NQVG0(X'%#QDf4jb9te*:2`LElI]k\s_2>nnhV9qN
%CpNuL$l''qd%AL3e^U.Z\oUeoDX,MAh79LH2`#AY",AKJ''&E.\_"s"bCn*hV&M@[mTlSb3GOkcW:fKEcXj>V-b(/6osn2apD%3U
%@rs>Mnbk(mD-C"M4;Q&HXt)6/O4dT9iX2+?q?X:J.?JO,_<;dSEdTD+_Ek;'5$?,"UW-H9>]'LCa:p(>[=?]37&d$=<UjA7bD.H7
%Sn5iQ;O5]k1>YF%U2(S$bfX'eF64rjc_65PX-YIB->'9\CI!4$jP)P3DDL+e3&)U"qot;a^AS!pc?+ZL-F^>-&(49GS9dE0.f;&/
%gU:<=A[8/E>)tC=_P4)jHE1>_n0Yk%f<k:1X26JVZ;RaP4=lbmXHV5k4JPXi2f2sV)$j1;?hLdiBa78>]W,Zm&TPnrCp'WhFG<+_
%;%7tcgkSG-]jgT4==$hKR;Em^mWS_!Z>!7Eb1)ll6MG,Wb<mYsU:]i:d(c5Pa41f#$p0%ieGmXUiKlj>-tq633G[->OV!I9R2SNS
%@h_XSU8^jD*0=H/_\6l$?+U[ILj,mqNP0'"oeb;q9"J/B+.l#j8srJ>7*)#-:U74WM)F-L>Z<GT$O;$[?%nK#g2u:]NqYY@PW7*F
%K6,Skp\H/FeuJ-);Y<AcCD%@mpAM+mEh"W"h^t)5>rcN5@GI,X(<&%/NoQp/VL!7+h;SC,DOeWNo(96(EA`&kO"?fkq=q'g9I*,%
%C\US(%A.E]`S5O<aa1YgJfe1/B3L\dW[.CS$+e;VVI:ZZ\=#/6T<uB*PMt0BT3:6JC,cMMC[B$Y;u!p]+R<`nV$*>eH9#Z@NOP:b
%hF0W2Mk9nG#Q:fG%8D50N8GH+\.WnlY4LW#q$b!VfGD_u^Z9,I=1S/T\B)UrbH2`":`Fa1L,!n:@=,bkD!o4IkPsI0ajmo#=Y>2q
%899*a`ACGt+i=?&WBi\t6bgQTmgl2UHF8$PnW.[ZiHFH.bNqtlFOJ<CfS(K%he!<^G.#%nBsQTpQZjcSN*I_WbPO:EGMUs=l'0Gq
%Ra'(B0?dJ"1c^4o*'=kHf.>HVLKSLm(djn0G+juEbd<523dD7spXu+$EO]QuqY3"HKi6b7[G'-Jq:QKB9sOUZ.@.^TJe9Y%\l768
%NW$827:1d;cWkk)s/JrRL0gg;c+H/GM2nV/jI8C6G]i`/hh:p1ctr/[WTk6Qb):T+mlLD6DODs'.3/-j5\E94<H9/FpCBhXFm>7e
%-E!9^j&3:Vj!O(Y&'Vq:-uJ+p5ML%AasWs6Q=[Fg;QF!h)QMIMM$AH?d?!!^;]=!Ta9\G1UV.>+)pLuSTsrfR8<_+_HN3$O5E+B=
%q!/k]q`F!%?KOG"2KG'IiS>!XKE"uVHfU#'E7mpZ/'Tb%2KDLZiHD3R:.8rp(=ap&821qblCf.!.g#t^aQ"<o#(/*?X,VG%;f,lp
%62/Ed`"4oW^I1'J+K!m/O=P7[:1sY#nr@G\SdU$mD@fo.r*`^9CPD85:[d3P2_aT[)WQ=Lh"q^^4?Ee9]c<gKU1jU,<Z6s$DWXYD
%>!%f1>F!?RkGrBN&q%%Z:K6a)/GrCOTU-k&F21RMEBP&g;fOt#\98nE#Qp=5^?>8Vb.Qh=^4UI\:k,tZ8oXRC2R*jOlOY=d0GW2<
%EW*6'3gbfjWOSOWl]K/oNW4c3>$9H#Li:0SlPcQV$?0'<C!S\ST,LMEoi,2rP.2""id*)WVrE"*EW$8$58CNV"f9FPp(KPAF_^<i
%8NFCe4[#jbEgBFMS3$+qs0+s_0$8Ma`mR]LM](I+Tk/PlBH(%UQA[YRBpl+?dN>V*k2$nDYmX6:(JqAq0!$J.^/hE_!pd`Ko\63G
%e8@d8g@bR,i_'R)o)m#[>^UWZakAI::I.&5Ba6\4[@<Bjr:rO=jo,4@SD>jtr+!>Is'(>rd=[If;m6S!G0O&PcJ7J.2^V4N?gdnQ
%4_W?LX8eOA/EqG+d0KeqYu0qZ7eLr0e-7hAZi<ib5\@m*?!DgJ+L*Seo(q?O2JB2dg&A*k/npQ.[_qP"&)>ICZTiN?hV(1I2-Yu+
%pG/Es^)3:XUnMLFs."=3JI+>a`u!I[)Wd/rBVg!+6oCMS$Nq!?oa1[]r5:b*"eOD,g91dO%#?7"?RA_L3`-+L(uO#m7Z&ZB_e!!h
%=_@NQ).@W\Y]-1>/7@6&@!KVrghF/8VdgkKIOg=/Zq>"bTald!R%71UNHMQhr1N8g%F=]Nb,rRra+1oP5a&TkeaiAFj/-UB2n9Te
%C'.9RH75?bpb=*.3tk4RO2s*Wj+<GV!N!Q3Q/NN6&J3B2E_niXZ<R](:oL8OJXhU1?&70"UCEO.Aou\^C0$CMB7^aMr?%#Y&OFj-
%P@%BF:cTRt"=UaaJE&J$QRZBL>ll_=0*?9r+u,6S4I9a+T7;/)<N;V=geQ@6e2e5-dN'&\9J`T!0OQJTc>r5.@*>Ji207NsW"l^]
%$!4<KD;(SE$>62mnpY_/ppAO3l!7f$ZUVR9?)^k)/&4V76R8_&<V,e.O[nM&XVp/&fZ4dgm7(uke7qLulMmU8D@7Clm]:L7R'`lk
%SQ^D/5@tOE;JNWN)Pq$l(Z/'BeHq=.;)NPq#<0EFC$1MFNR$58[T/uFW?((10JZkOlcGCN;`)D>?Uh/-N<4ZuR&_K0i_R!Dm5"`N
%a@Difg?sZ.k"L:uF.&;,f>_;rB;Hs+i<2!<'qh.qmEeUhRZV32f5dtNil5"3Jt[$OlF<f<0gbu%S!mX38BfsRO)fTp5OI60V:mOB
%<,:%XO*K*Le,CZ#=fNQd8k2`r]5a^Y`)Tb2[+72beTR[n:9E'cOa;*oGGl<d\Q1iq@+"*5#Cnsh0@X1qA&PrBBbFq"T1A!$TEo%m
%W(c0c@EoRuNUs)oL=+aV$?piR01tn\2$YY@U`-gqk0iXqM3[(?;t_YZcorqq[=?m:\R^#3,G.*?GZ*0rn'l*0P&I$!5S`,cmsPFX
%M6?9+$a>;L>H?>M>T;h48%'O]M!.3N??]"$ft#Ak4K8jaSa*UOqkI>]pGiiAb'c4K4Y*o@hp"X$<'qh`U'BkZJ8Ph37a6p%=52g5
%4nO)@BEbbU#I_WLOa"345;0Efj+Y1&`/Q^OHGK"(Yj*QiPlk1%,uiOaU4RA^Zb:Sj@UUf^#-jhh>MJ!TdYkKsm:I2-C.UXKmBVN)
%)@(O!'e%0#FEVT71Ka2j4HH3XLjIg`:9%q3YUE<8%j&1d][psg#[qdFQ\9"N<m0,h8\rtSS5dZW?AhuTica)J`kb.CY`VTL>Z([U
%)mN)Y<U1pRj;_Gp'8;f_OBL#PMlS6_=%-fj>UVG./Z[9SDcp8HFA'fQY3+kBS#&^l7=D.A&`l/P?1V-eaK1(BImk9Pn#J":)R=Kd
%6?)5kPj!%U^4_[aj*'*I`pH9n)1Rs'BM$>(`bKb1qG1&m2/sIIT)@9\?\qt:UO&nd9Em?,[![&JbTAd><o/p]J+pD;)];k"3.&Gu
%`^U^"pJjg@FRur+2D,H.#Ufh9R1Creg#\gO'Ve$_M+[3o8$:JIV40SJfDB-r*>sBW!g!H49EL>G,\fd1l;04d%9@sS[:]EF;&Kdf
%Z]]5`O7Io(QUY^s`&')_7eMseDaPJ8%g&A,S^kkI#&jr/.b@l,8ICI2@-23B-'^KO:/CF4SSBpQ&XXb>AQY^JZZ.l'm_a?4?`A1o
%:26P)k<S'>V[_5"f=J)pZmH#X'G5t*DWU33;$jAN_6(k>HCOVr#;rNLW"2PgIPKL(Y]X1P1E]9qn'kr_Q.D^2TBo<2qr]Nfk7j^L
%6J#]Io['=P<c/=]d2GCRC/O5+;h7(R%U%7gZN*!Hp$tB,5cmZO\dh=@BJrg4QVWfCAEHU82kPF5*J"+mo<FJUCM*=sf(NJFF6D*X
%=@!1)c,O2"f'A^t1]gT*WbQH"Xc^'c%OAbI:ruSXjL>:2Q<FODp1\4PDdZdee4``mWU^jk$`K@L`eObLMbUTB$!).nO;6%"(ep(>
%0F4?5+n5AKU\V[W@8C`0f'>#2!!`]VCSe?G$:>^A'(I4rUH1G[Q%>IJ,*b,F0qSR%_GmqDm<IdbQCB@.YUrrrBH[$4mrVsb)leL"
%0W\P9OVg#V<FF29T[[ce,&+-(^rukBIlPdtlYbNrS7QWom']]E2<Xo<'plM9rFr6VdcuBG6gGT[%#pI4B5$-*q*jSX;EJY82X1A\
%058C(PR4H8ZOI6pCA0-_3&]Qe$(?9/L:iVTVFR'8&Lp!\8+$9U6[D*0rX@7Gh((HbM6l%O-a2&=0K<bS%bm7EIghQoEQ^iKG[NA%
%RqFgb#b7n0r&JFsJIEA*UhF.P4*K]sVlI?uXVR%#f'UBKp"sN9Pc$lh?Xo2S0/f/?#pWkDgTq7Pm92Y7'PE&p0K*Jc*4JTX&`CN*
%:I.qi(K@tW][R2`He^Zmed$PMgqIR/GDCJOWdQYT1NFUCm>5\G>4$opQSs_L;7s-BZa3P8)t+*JJ%'M@]n@i6T%0Q%:L$PJ3-ms3
%]6.u)$k!Jg.@bpuDAUq!Yn$2:/C7^&l]hMKUV<HaBo7nbl^Z(^q!''bX1mA)<_m(S<.:0UNRKm!,>\(@D\h=%Q"nJ@f0r6,68s.^
%@ao-o3Df9]Y[ssAg?']=#joTXU6[lsi^>l@e8Mg3__8.jOMLm(Ca<<d7fnr4T/$TYS[`Fd%[!0ZY1+9"i2oK9F\nGe8@)"2j32&O
%SXN3IE%eJi2u'G)gH-4!6e$G2MJ+d>P+dMZ4GI?r;m^c(3Ba=-WjP-=/qq3O)n"tHBSRL^<7b`)@'!YAKfMY0*.flN/dSkEfXMs7
%g0$UiC`4SU])Z//b2>Q2fkm)@'bGU-5ZY1#T^CN/[P!P]+Ul.nB4h=a4C*kh,rXWcO\P<$-t?`T(^ucOY]1.(R%3C!*3:;GB@=s$
%I2pdYXjT54kYaRQ;6+j-ds'kW1n$GsL2s++^+<5%#G@9<l[#m$T*#kKNoAkIriW<^+,s%`X9P:TlF@0H.?&jdE2Q3N[]`ltmq?AP
%F=me#lON2Fdp0M9*L3C)Q$,Me\QXj)qgiGb5Y5@"hU-7ab/XeW7_M>IkdWDi=iQ(C"=l(U3/dm<[W7r8$(g>&?XS.*Q;kCt4WEP/
%G-T"mA!#lWKb%kkGL=7]C@l`4Sp(fNm/l-`#\l(c[@N^.H1#<]c;YlVF!:eRf:.au=MfPHRO<r7OkB'br\Rhga.T8'Me/0DMcR%"
%)^/&/UC?'DD]:",G>atXp#4(`]b-_9)e^H3%N=M_%-?h)$q"$C\oflnag4iq"^X?n`bs*fI(RXqrj8,V==)):QB`4_]"f`<9'9/G
%8b,3FEP'U=BipWE;^aRD#Gq-+kss5C]G8mY6^Z"mDf9^41Wb\F\?UDi"HLnjA$kLR)n>L4TG7_kl=H&4)3'^9q&uM!R`-IAF%NrG
%iI^HNlq(c@7ZOAneU&.Gl?_)II=HL;U&2Dlh$Y)PFm;:/\U^A0S#L-O,o##NRi/9'1JU'5C<cjX*55i9^8f^d7X*G)ql-(j-??6=
%cGP.U4:'/3_N2h9K0QSe4tuQiO<L^^08;blWjU$XVN\-m/^:EFHFF+&;mLNiIlE?7j/,;[g?K0lAV&Q93Ze'p%#[+>&k$cR.i\:.
%aG+QGpZ$(Mf%eQ(\#!Q.)6&iWo7s_J&jPi]##LN.7q+8a1cD]:fk^ZPFt]:e]!b+=*N,6H<e$A!6i"_=[Zd/5.uAqC)QW.tBDlN%
%Q=:J\;0^+G>?M&0lmU'(lCm;n,jd30LUB$e8WncL1G2R81pL\P`a`$[0PR$%ajq\-a\c[,*+^#@4YRD9*GZpTmG]V/j?>u>>3#(F
%MpBJZkfb(LV8XUAE$`hh.]?BmUO3>DFqQ3A-ufcedJ(qJW+$QNc-fb[iKoHd^g)D`)&u5:p3_ta8FutJbcVt@ZI+Hu?sCJ2)e#[k
%)i[6T0?1mhBuL"qhYmb`H?3VSRNjSMeVh9%`F+Z6OOXT_!%'0S3a*5sS[+7O8Ic-f,e(jB^H:cVH/g$V77"C`/eQ9V\5H==HXV,@
%@j>rN@(KF<o[4cCak#9DZV0a.h-2GDT6kJ5h3q\RDE^3H?9"tBGeSW:DW]ej[?PUcp>.o9o56-2^No\NV=S5+o<3KoQ^aPO^V4<n
%%.9LCF3?7@`G`_j3TKi(ig9Rqje]MoeoL)1oalj\?JN3@<3;b$=,rlchHXB-U>=AbUW;J*5(E%"Dlh4+#8kf@Y2<CO5<`p#^O9F.
%50hIh:)f\)_T$KjGkSCdX0Z,SDSKEO<kJ)9L++/^cOWp#]BtB/rnH%sr[R9:k20K-C9l[4kN/P(p!:ehXo.F"EUHS7IHG8*&;D?S
%Xa^NKXEaO9S\J',Y.\1%>WH]**r@&(/rG%i>:c85hj9\$gj@'^!RRt!01T@fnCQLb`Jr$[NKs=tg[2lGr2i!^n\.ue^bF`VRG%.7
%fmQ#iHL0uO/f!g,G@su`c$c-g?G6)FI5U:PGl7:2XlIB@\TEFQ<G0nn2ii5tds,!cS(68#(TLi6=&s'[T%ofRcMl?CD!p0YNX4EI
%?@73<__Bs,gX"&sHMQF^m%]o*&,jtl*`[Xg@I)8m1s6j#m)ajY].=bj\)%2Jr-OS+c8I-[e^]F$Qt5gMURCqgBVjj0T/$lu2X`3#
%DCjUi[l,&6=<FTRn]AE9fO&KCR9b,Cq6XNMh"j_C5-EcDPTG/^DW.sMo%nYqlU\%r.jt))H"#(/Ptf0oI-YA6@;4uoqMj0h9cV0j
%(LO*WC')9i#<+R]qD%klI7aEAHFNU"gTSo)IHB=e&(Ur(n9\[=n`.#;X8(c>O`^6`dF)LcgT)taRi5c"Dem<l_a(8fk8K$"0aQpc
%UE+.c3V:P/Yu9@)EYkM%'?C"6I4H--MVi$(LC[a>?RqE0h-TU]hRj?-n%=-KfNMS6/fsF]^Ft*:]Pn"kX>h<qp6hQq]unC'I<5,L
%MY"Qd[9ie)DL](jc$QsFG^AOdIJ*)\#rI&-eb=8;NHi6Hp\X35_Udk%([K';Po!+77;H32a9(b8r9N#`DbJt*V8ln=>$g!"h^n+W
%Dg2&?lQL.t&o'2Y2fGXtG$tPkX^\E:[?$S78(Q:g-UhPDY@X3u@-R"*H4bD__;+BL,Q,tO?erXp:9L#oAtLHkXU`_bYt:,Dq<$/C
%rc=:uAngsTna$%qiJW*"=PEXch7ro"M';,\LtC;dU\1%eBD5Jg]q(@pg!0G@bce5\4u>g_m&j?M;3t^6S_aP2DV\Y_3aQUtMrclZ
%"ok@jY'1qqT@MeAFairHgAK_lQo6PT8b?I,L+2K&XNZ:#GoRT$2F!_-_+RK9m@Jdr%q5"0=bcV!H.gM-mHsTDgU5#nUAN?,IJi^f
%<`=oR"2)d3lYAr@?h*9fhNI6IS'Ts:dAY$>?dBdpHtueY=).E;NPaQBqqKK<McnlPg"K]kQ*l'bhZ$R-3BY"\T7+Gcilu?^Ms.f\
%4M:F4"*bd*//$Rk^43"*3fNRfo:EY0I.ZVcb58B]"6]GbiQ[p6X1R3D_Tq#9>4AXP^I6L%edFH2gn=2m=B[_Q3NK;94Z-jbUAj2u
%K2Rj`TN`&'gGBC$CGV$c^PasFcWarDRC7SJ!(OSK%>(diM]8ccOPf/(mY]\sI4FT4ID.1L_nt$eV.ZiSB_(gJaFhaL/*=mtIUT^l
%kJV;<1!2=tEk:$W0APY<9.n_L+-rL7Xk*HA_kS+@i6.UAIJ:bK2.Z)SoBGQ&1B-t!GlH3?A4-Y1:X$A;eL14Hj7j!!->lG:n`L8%
%`DubtIX8Vqen][1Ld+rcXQ$Q$m]E]M^[A`*`>raoj4P>/=e`q2ZO"H^!*?DTX10Aq"paM_@p+Ha=F[SH9b<h3Jk71l+@olW_N]%0
%Yl*m$0DFth,4u]^6[eT)8HIX/.fIlqmAaUekOd.G2BYDZ`71UV"<\A`I^JlR'4I4uWeXaBR6G/4mb(4#hk-9pSs`Emn4-$Q\8sui
%8C^Fs7tatAPBt\F5>;/f3?=U0_l&3>VS@5>4DOUdjpb8m(U;#7]Rc&$2-r#PUsb0-+@GnPlOfmb.nEOu;2d@jhFaPYc]Zg8HmD,G
%_3E$Hd+ua+DK&YLd*13,UJg,socZ]C;q<h6O(7=Kp.1-/b*#oW+DtsL_Q6?_PSBd>7jn%=VBMrQ+fT+nBkc"WOOIue1hPf_d;)<A
%-UG<'"m5b8qMV6O&L$Z6?QZms_?Ye.[kI%4bP._on,j0&V#CW-FjQ^MS*OEgITT^enK<m-%8dLt"YbEFm$ZkTo"/+EN`N2fp6XCR
%-f=BuDG/V!DL;7iG:.*_be><G#JIN_O,#tP*mNSl_D^BH`r3Y]V:Xgi)7PphhO=gQO#oEFM_ACa?V.!!Z6'g)lG]meh(R"T1i@*P
%Ve5ZWZfG:@]J=7!9ClNB)ng/3hRrjp*7_N2CZW+?LF_5O24nh>c'<pV@e='q=_r,@!VO)=`j??Dm&seIiS>e3$h.NN!=io2NC,VY
%qDrli^h<7uLG*lN.Ni,45_1NUIf'rD-%kAI#1P:e0,ZkgAI`HESO_bnZ0q1E^RW4`9MinkT?04.\T8s,e,/;YADtP(MS$HCNX,C7
%b2[gA=7O7eG7R0QJ$AKiq9st]f69Efa](a/iMVbel)G<h5PAFEM]:RO;G9)m4HOeC"ble/s(uUoYH[]^"gC-@;s)IEP)F\t-L#$d
%H_B!,e!6AGoSIqt(aaD:qE^+LMGI%97'OsC04FXN%"HO0T:Xk$#fG=ak>c`@RhtiR9D:j,4>#pNQ=o1JU[Mf?kK0$tr8pHsmd/e_
%#j?Ej$jdDG+&?dV*rg@m!?g7V="Ni$%g_>q$ETc1S-;Doqp<^uAHDaa0.SF$UDr_2c1AqAjg8XX<'B^@UqN&dV7")/\efkpbNB,>
%f%91->b9N;n2+PPR_/Of;rF!$T<Goa?3]feiUiCcgA,]cnG:]'>BJ!;Mg+&p+`l\HiLb3%[Z/P<I-kW`.r+bdXd3VGka+Fh%&5h(
%IC\#nIcDulI.r:`=>ZU#IROK\eMmt=2\M["SZP"YEB5V)3VTCnUMCo7I49i-0BVqc4m.1+>$u8cD/Qn0oD,`c#P[C$&7+b?!Lg(=
%6!`lZYOCA`EK%E]b=`(IlHAX&ce_qeT&$N#2@R>4]-h-3?`<#<I.;LR_,oU&I_N@tp6_?7Q/'no[Uj9#KtF,n.:tAP-/3F0EpthZ
%5_@/r]Z%nLC:.(7./Ye!BubJ4p3j?Hb7)dK7),pDJ213LfES,57?*`eR)'7(#hJHofPVL3Hn['5Q]GIcWY?t]iLFAnR@E-[5;A%r
%cYg".RW$u+SEGD'8))l`EYkIRG9\9]ZgEMu[JZ$kSaP(N(4fn=bZA_7cYNDbmX,**O)?Lu?hlIP<S4S=5*3V;m5mRlE!(70dFuFS
%O4A-kL?/(VEq)SPD]YSQjhH.f[bIq1\Z*>SY=356[LW#I@Tc+PF*N2:4DXjpE+Zu=+:@!0C`ganp9!GQ-ZADg2bpEG<nt1Qo7bd,
%[Z:bWHaDp\4MC@YZbLNi<glS^L)%q-LW,6KRh*jIfqB`8X-\"Y^^p/,hVMPq^NK9<nIS7";@@Bg'q`h-T-9CGQ3(T'*8NUUc3S>@
%*o>a::)VR_[CXgjRsj38-M8D)f@g/GQfY]cgMK+G-;=$Y%BmIU^4Qj]mcEWDhVGePCj^Q?,^j?k96&dSh[U/5WqTi7"C#fIY[77s
%lp2P1?1$EM(hW;Zj3q@f>.o@B^FCmSoe]g1^>(rH\D+m$UW)NP>iVRc@a[+A]C,OYVl/nepTWI4/St9.kuJ16bKFBRDk;4BT<>n3
%IJ]gq6"KGZH/fR*eDGIXVO,%FbXUj>a9..Ri>i01J!)PtH!%!u4R^\opLd.<g85f.a>/lbDVZ]^mXB#S<c?i<J\RbX6N-FD,E7h!
%DNOV$)We<pjl&S5YdL_/@X2tT/8:CXCeHS-c2"Sr&ph+HJ$-F6*en#DY'l8_GC)k!IV[fp"'a^,LI1$GlN%X#Rq8rA76gg0_$@39
%Ca<-EnKZ@Tj-&o-YdRX&_]?$1pPXg1>H"?#C'_JuDQU)X4s-o1/g'IC]D]h+."i+,$L(7l&&'X1h:j?[0,<4JE'Q&5]",KC/im/G
%cC4VEb"NZWI(fhB?bf=ha'!CnqldVuV5L_fVmDH_VpA2sI/g_O6-ki+;KJso+o^*/,N%oA^HLB<,W^GA4ms*V4-fX'Kid/,&sbWW
%CX9W'?=/u")ng.((WaR$3<ai`2$N_h&!*J=?PU*r-V9G5>Fjc[0<J8pmU1H[l2L'3Dh'&sHs\niHL1>]c0Ljlc;$Qd!OZUdJC&B*
%J.9!^Y^!\0"FncX4A@BGNRm9r:[bCBGd6&:oqbqVCc(`4HlIYY4h?]D6grW.&"hME1/e)\=q!TLDqXbd^]".9eZdhmj5SP.G9X7Q
%6B<A#jgQ=9]&1L"R>o?NF?ojmC%8nS/U]oTU,*bcLjGQ3IP>h-E1;dS^fYpZXfuB>f\h`R3E][7I!.$N.$\oXIoRO:#\g[.5'i:I
%3,8\Arl&Xe).q#Fe;?NiZ>T'+.]Jp'S+X1p>DJp8oCl2IFg'`l^0HG=pon%;'Fnb.(^?r=,.OS4))/(LUP5&@2X&`*]/MJsfe2]Z
%\[cASkd\=RL?6'L0,W9(p"-u_?]DJaLSe9\IWkEj24eTVU$"-h4oMTiU[:Q_Em-^nrpb8c5bNiqYLNL3gZ3(iL8]kh'E3UoMN46]
%q89&+`\eX7Gkp^?Yu7WnII6Rr':b@bjTfQ+`mVPrI4nlPr1["<7C]78$TEEk_G4UI?(B[G?;UpV8OnEhV/L%7]5-MthIl>"DD]ts
%Jt6Pf(<H5_4.G;+0-6_A]aN]q2_R(O;QPJ:+MZP!1uUF<!(18dh:h5H]ih#eQh`r7*l!C$pu41?]q/"=)MZY7^KY$EXkunmke4[s
%?G$8X/Uq,U[2+3;"Z-%coeDC/-&PI9lI!iAq]F1;H1eCfCLKeN?.E\<^\6"VJa(^NrV&ftL#?[GN>q-RlSHlMhl`Dd:0WY(_VJ/+
%HKT`tkf;RVah/l*rM1EUMp>'@3&iulBF#6c+((A+JJ$Ng((WK(ZW@\s*Y]\C^<h5N`&S[rphkhu@#XQWY:gsuZgW)2.`9rl,L;`*
%JR62di1Y?1(b&*2$bLK'0K2K4l<V:=O04a02tm]rI/YI]MI$gWJUXUh/'^__ik9d3q/,%S=ad`)r2F]M?*KgA9<[_9`>:1nDX)Z5
%hTsPD>;+f<>@.7*"tW[PorMTHI4p6"s*+T[q!bAh;fgi=M<*+^jjsD)2iB>\gVEcs<mK-hX%EHGroih<GNp$RgV(#kW-IBL2j`Yf
%IoX2&h]JqNS+PY9qU0[mQr;*W/Z+bW&t.;`T4@cdm%\.lAs&5g!0Y[/rbeR;KVnV!m4\'N7!,,#.ISijV$Ga*[<Zi^l2-P1lS(9b
%PrSc`9jW6.kcB:4gc<@_NdKhLc.D.P*1DiIKH#"^(!jt[_teL1qep'Ron0$*Q?->;I^)X>.jjgF])$g_G3tV+d."pn&94m8nQXtZ
%GD3^hra&:4n7;@L-6Rg7Xt._QPlCLhFOll-.Mtg^c4Y\-U=[Q$V7kl@lGN2@gkQ[rKj\d#qn$'$ChV@646[sSWsKEfD[gNaQ#^=!
%`A?:n4o0\nYe"4gI1p]koP(T&Y42s,gkT\&m]<UGNU#5apW%2;p<8"WC&c_1Zh<RP#b0*3^Fnl#rI0*uYu^Sd].5Q'hllnLNRtMt
%YkNmW?\9s"Er@%up$IfUo,iRZ($D,NT4!68Qarm.?Es1=qu3>^j:QX`1Z3[5RG@u1?68&(c/QRVaeRkYlA&RMG1.Ioq[YaOoV+P9
%f;ls8Q20E/D=q1q).6RMs15U%o3s#]\_6sAf1;!r.t[2'),WgEeQk8h>B=:/ferCl1a\eo.+55L.3Cna^Q9g[)jTjdbedQJlaODk
%rQ1&dorg0D/R0!>'qaAC1h$GbkPJU%2n#=FGRNut)uqnE]%E%YE$@64)]0\eqsQ_-n5hBjmk*>kS1/6q%JOMe?I";0qI\nu/a]ss
%b)`/\=)[Muh%&>DIC^F?]gGR6@!dV_rVW#!hJp)c;#]A43<--C\#r7jgc6$+54cr&B<^f$KA6'")bkM'?-49e#T4"L(@[91TtBM[
%G:TalT$h:,j^:jC[_eV_o'YF1HWU@0cbs[KFP;cD4uDAu6o/K;r%Nmb.`-[oS;Rn:&,uK:k+G[;_2@?!(i-HQ\V>fM47/>t2]K`k
%6E]VVVQ@$5?bFd/3Y:"n]HNDTC4-%?6;fdA=$jq$3Eco!q2BM_l['99J\"7sG?cB29,(\2A$kQp/\FB&Xq<[JdIiPpq-hAUX7(gY
%G515BRu&($M5&g-,*#'%_ot[,rI8WnhondH%fM9!X)HeE[qY_Gi)rHY]Q"VRWDkfp>6`Lon(#WK@FOGR=VF!E)m85abeO_ZJ`U!%
%m(gP#11lnuD#/\hoB>-ha306hiPID&b5:\c^k6Oo>o>g1@.RET%7:6$!;3"/0*q-OANTB4Yju+N+5o$%$0[eD2t7c8NfOV[+,>-b
%F967cJ%:#iZOG1)gST[74'"O!!-HC@S\4'p*dnOjaP27L9hbW5$;;D$E#<]?o^0;&=bn`<1OR)84N#K4_p8.VdFC'16T(#Cjuj\H
%[(X*]!5fI3[u0(r4qeR#!)7j.2`#OX]^HOXEJR;^Ds$Eu0F"TeV?_MW,_7-/1%Z*IL';g*4tIc`r\?(@cLO)B#&eqhb6N%l0])l9
%A\]90.#)O"JNZ^)bKnqOM_j8mAR,gtJPSV*/RTW'!3-Vb^4;$W1CYE,6k5A,bWD\3->,Ps;-%CbFbjVZ6ML!oG[a>W=VNNG=+@`)
%TdoW9X_s&@H7t+V=5j:LD'iBC&O4EVR!gJ\;t&h)XsS7[4%G#_K"PsJCjJ9$"3iO-o#&+6)9j#B$?KD7L>2cp&dY[kJ(Ph9#SUV9
%Dp-DcaL9&!pc]3[AB+n/'iG.SA<9)b!3og9(SN3]"Y1q,OH+M*DdZTJA5i72Afs@MdqWp%Pt/'Yj^?KRd,;m/,gHphK/\;Z&a!]n
%kMB_6omSRei[5Pj&"<D)"lZdR1q^.ZP`"*=3ur=RT;Els@2LTbm+5)RW&s3k-L#*"ADhr=E$X@:jcRg6bWO'-S-FAV"?EAL+hnD9
%Nmq5kZ2te8^1ZshMqJ=a@JM0n6)(m!ltQ;bM?VFfCWP`1MEc5o2#&<RdCS7Jk3Kc(RRArS`mU%>"51Y'>$d6#VB/%FckqG,Dom5N
%YpVXf(ce("o0XGdQ_pBfcpRZG>rZ^t(UcSFRsChe&s/@rK3t3WJ0GPZ6bY\ul33'@%#P_aN^1i;W%KDZc42Zd/G7c[5J5?CKQH^h
%8.b(.4&ic=aC[1FN,NC8joImuKJ@.3e(BE7-Gtr@23CZCAdS`<NF]WK";I2],\-_3L*fkdb6M;sN+slo0bf18))I?s0)V*SH\coA
%Es'9MB$`pPE[jk<7KtMT?S)=X'@uaiE^165,r!KCG[SeKaX9ba/#AZ&*dNj7YkU:Efd*s#(QIm;TmXWa9B7f1-UY"#K76tI!5?[6
%C5dXn#Rk3_"faf5SK"hs+hNY=E[*5Vo3FQaiulj1,_QPUa/D)WbKJNH]5Me4#^tcja938gk$o,+#TE480>W)7'oI(O:@T^;??N0C
%V-me=!lN+/H+pD*d2$DZS5G<K&\MSEDKD^kkgB+nd.G+2CKS#\Kukk1p%ik$^K.?lJniYCdg6/L#Ju5j0X-i,U`L0S\KE$i);r\[
%#DP](1^'BMX&!CNC4"0kV%+gjRr'k4q9VXd;tDok5_onN=]U'."s`@e(Mu?\#)qf8*^9blnatKX=jjVRRBW>1I8?HG5$E/$I^6/6
%-,o!N>JV#*_]nTh=N/=`NE.o#FoaC:$KK2`<]A[-%H]T61P"gI3_2Qc\!UIR9gFNUH_AIb_*XoL49YVIGfH*Qdh+;J9n=5LR*b&J
%CD#6eR>>GXG@1]cT]$1f2lXDSl\\D>&0b7ZBWrA5K#M+kERk,<Ic`+[M4M!?9JX\oC#2^FTG[oL"VVl/r(IBmSgh2pJhPO$B!\+_
%Oc0draFBjqj<U!*,6C)cgd36GShX`JT]S*9O+_<,&Z@FX$Xd[!D$$#pcXMXb58:@r!tY1['6X?[1'8+`+p;jG//3K-H._$T.;&c!
%5>q(\*P9%OCM^I7G9YH\l[3.[A7FG\B=>^J?noP2d]c-pJ<W8\2G>C'#:iARKH]%+7/[G:*.A+3VL/i;7$ioLQL1/p+US7rk2jXJ
%,)_Sf6'5rpY,b!nBj7lf%J7S0gbM)A`Bg-W=A?3U;^Djcp]VOfhuC?RTs&rPcJ[m#,\a30?]d4q_66BKU;0RI)k+BfM*kQlaW,Wt
%;c6,?pj'D;*W1fU;%3;bZA1XD"mH-Hs1J9'O+0S"O^%bl1.^3kT9hl4^0d!i8T4>^H+GDk*-0ZYp9T9",b>)[n[\iPi'P0uitJ%J
%oXQCgnt@?m+RTFlX`Ze(,qhFR%AoX$U^=B<)(IRsb[;2HoEok;);!djRkhV^8m9%nZDUCH>[PP7^X!6U/f*e)>DEYa0':)2KO:=<
%eTQn&Di/7G=o8hW;Y%iL.p#QX3T@+5Ng1Mq8qRBk%u#iY%>@DD(^AU,^r8@Wij8YO+`]*k?l81d:`Le)ZlSOcUA#=G5)+#noO.e.
%SHk+(AH]mF7":-qj*I@8Y=PCZ6$Wg1OndbB8e`rrCqrQ4`/Xmtr7A`,3'QW6LPMRMM+Y:PLBC@m6%D7IMROu2BFZZD$_Kb,Q:)<P
%MTbpj.&f2>@A![9b!3<t*SC`>#quL<1_'hdQ(l\--tjQ-_/Pud:Y?KD0S4uQ5j*3iTbmMHC;"a<#])!MEnH01.9)F"OpEDbaQHTY
%(GCt;#M]c=`8KT@Sn%\c_Xcl(UXXNt!eWk1%VgESF+Gq&!U#`I:]6[cG@bPdD"6>@p^+qi'lZ<aX!,mii9m:O&qW5\LefGI't=Hr
%8Nu^UJ0]A3fEF?<:M^b\9^,^klDQYER6Xd>69%/iX"h)*OPV]+jW"l?B)EntFAmq@K89;_([I7b"uQhC+&Y0u'VgE!?&b!'-:(pH
%WZO-gD!1&RX'mSa9oEX2#Yi\9IZ&.t7C):tA%gZ'KlR#9d%L&UY6UpfY9^-NX$c]q2LNbY0s7[U7_s=g@)Y?!*d%(U#.#nU)$g@H
%UZ`SSP:*(ko8X7?BuhTdAAq>2'l*+&=UuqX<:In#N[Y/j4I1[+6YeMMEcJQR"*o^-@n4WQU(@#Jj:\#]&#;GjXtXi/&d5M.TJ?dp
%kg&=m$845M>>/Pq)R4jVQiQ>3ZpNIko*#ETF9<WJ4FJUe"L%rrBCNoPhi<9WGd!;p?l9sf>"jLk2j=@MHol8>fh+t5e$aPF:&kCT
%N6tYMP<FOI0OQV[$t*`oBS"G2dfRG2*c2=?Re!V55Q_5H"t\4Dh@D@AkR\/J@@=i,A:,KT=WWC:odmiuFtcJ=&2AaKSf5dC&clhU
%hB)nJ%*2$5_9*u5$(_<:fq5/OV*X#F0_M(qL`,boUA?Z^1VmRU)=)6Hfq^N>dn;e.`)*8&_^>;,as_RT6hZV8#8nGEW*pl>!!I0,
%`eqnI6XRqQ&=DNm6b@jg$ns,Xh@-/Th9_K/P--Oh^]A?:F'DuU[b.F3-a8Un>(VRF$uG6\5pM)j<&#k\)s=R1Y=8_'&VP_f36=JY
%aIrRT7P[Xl"DN**:cr2rK\Hp#fb]P.1cW,X;\1_E;gs<(*o,=70C:lM">r*i6ifde_N8mlfi%$*EN0*>KsV9(:lt3)s#?G_'JoK3
%g#=C:7J=(aqU\hbWhK;7-qb0T4EL+fD0p*=aXD_4Zj$MmJ2[8O`Pj),(bAKO2qUD[:Dl]5*cP3af8kl.YU<%*/R4;J&)'cIUJ>Sr
%1l>i.@'k^iomKVsNe5pQKEB88P`u3._AgbXgN%7kV2W`_!0@s>VdPUO8,bC17Il-=J+@2C,QqlU"';3-d&Y.%T_%fl(l\)4Ssak+
%*T3,!ad_Tt<XRr/kB*WLFig<;nW:%#7Kg#A-t<RO:r38&=RB;1QCTC=#Ij4SP1cP2giK]E"(lB1.oZ.!qZaTI,fg4`U`#&9BJd(e
%$RPHKnBc1sK4\<`!I9ALB`7]an%DZ($@4QhHutrDfVPA'b5sD,0mFO86?FU_C%Ghu7A@`e=F2!%j^L'$HoiY38\_PR2dr8s=SE>J
%fr+nS;f%\]22I!G9#r%f_8AnG2]-,6J2LkiZ5-t5jb=\ZTc[Z+LCaO*L*I<lAZVTX"JHcpJ5'^_FFXrWYcT5Ve=7\@ilXld810.&
%fa)]<P,$8de>(OCnMujBlm.qgVnd'So\/aUC`#41k;Z3j!]n%tM'cWg#->2RIHE(6_rh:N"ug,@J=`Dk_8q9L^8$u(V:;4&+>X2t
%"BsH/=Km3@%DrA@Ghau/0"<mn6oHdU%:b?U$n,;dAV_^%$/1-BDRK"g@2h*jY[O1+BaPUFHHsu0\o_1DNkAOBRUR+/+^EBRa"TP/
%KZ,rtk]i$=RP="=79bo_D3^,p3$PP#Qshfk"eEBD/fPg9*i)M(MPk636HMLr7U_Q&3nhshXMine]km5o5Z_j]ESOJH"M;ss/Yhq0
%Yq?t79A0?Bj`:ifY]2f!f)S9I9\n'PI0rUTB*YmY9TL,Rj:G_3QaI>j%GmtdAD]pFEH+>&(]bH-:^N[naJKI+!q*O:$Ee@1*fMq[
%M2i?#DC6!SY3b(C;pe/Rj^L5d"[,!$4kNSQ4;7)Z&^^($ENr4,E3pL5H)q$"=;8oB6\]l9MUVJ+Vn&Do%G6n((GQ.ce;A,41n:HS
%G.Hf^UXdRpbR4E2No5SXdDd[='<VaI)4hVpBO2Sa?I)Xb)#5XXR7lW2'+QXtS+H9g/pjH@]8Qg:[S#9a0fdOUV-uCNET8kK[,X.J
%6cWi*_nA$$<<cACGM8]W/,%ZmL\Z?s6kN\EeW-6)*$ZhS[9VRCJS/$CR3.2#f`aap8cK&An84@27WIO?6V-:)q%=DYAi:&<-LM)7
%XC<GM?KFQ^I/8]AJPVQIkA$-u6!2g5QN1Tq!eO\uW_l_L4I!5";[K0Qf5XJ[V6kNV%^]a89cc>.NKY&<cP+d2[qC\eX%D78fF,J?
%0"["I&H"#**b2+?Yb+HP*Yk@T'h*J)cpPhS%4;_iE':V:(0ZZU,#oV3E%Tm85/kSrc^D"0J+%\g:VH92.-j_F$"6eA">:frOcZKf
%QFp^4>4eJcB/QE=c5pZb3.gL23ggV?k;HolapjSdU0>(4.mXJq["ZuZDn0eime`W+34YB*;Z<oQpQi`YoY)&1Y\fZMD/7u;!d2p7
%jR#"rJWgCFq1UOdab@Um@t*X_F;]OO.jC>hl`*?aN6$?^$_ujW\HCGUWHI8G["V63(D%$[nLrg3;g:<eA65+)d/ut(:*:$R*<5g>
%OJT+'NqhO,Iibp^6uuA,.1?rX+;!P90\sNAA//`JBMV(07.D.h!rI;-%;L:WWMVc\R%qeA1\KUd09H:s6/W=PQ'W"u2*fr\mQQ`:
%!]F#IL6rOp%o)=q9s%jB$,D+\4&#&V%!qcuA#S3LQ)KU<+Z39l-#VF.4?JMN^+nkQPJj`V%*!^p!Ba:)7-'r.C+]RW;("$7AHq2n
%1)r:'W._Mk7Yc\R-2Mr:j#Ag)d+$DKm)Y+54qpltQk_3KM"c<P2CL^mP1\RAUE7QVP@Y)<GZe3dAM>tC;b_iU`%t2/7la\6er_"?
%Z+ada<T4*dKt59U[S5e4S!&ZJ6\O/'%FpbXDg,q5jk$g&JR6p,F@#_8A0Atp,0SN$<2XrImg/V"B2k^LW.t^;IDN&(!2KspqBAk*
%$#Dt+?,pIX6_js)cqom!8oJGa9Om&lCcO4mRd@mGPY1U*-\[us:nDY```,E:>*"!25kSQ\"/a!*%OV?E-akuIB\C=A-lHl:qa#H=
%%42KUV=f-u/>-L"Y%_OW6]ot(TeJB(O:2O@VAjcm)5UhoQE?RB2Kp!'-VtG]\'%DL3E2pD^l#Kn:En__.pL)lCTnb]D)q-?(!N@,
%T3[A!B@?XhA>kX&`E`_dP]A&&-C!":<j'XhXuO&Sp0rcRg@mOn+2JFC.'#,"e"L0][VpED_8cEsp9,Hpl8u;+0[#/.##)D53402S
%[/&c//4;6TfrEXV(>pLLYl26FK,[d@kPHL>XgKS*(!j*6?UW[R1r?ne$oYNbK'ob?!\&\qNi\[o*.iC]qKj4i\*Lp?AV]#<HZ)GW
%g4`O`$4a[l*pRb!>QOrLa$gSXC8uIL`@:isa]Z##]afZ6UUIn+*H'V.^]:cIe.]tC(\L'C^:;W\_.u6E$d(g)o3q'NZ:spLEF5W]
%_$1c<!di[::D6P&dP`seob*IDa,\=?$=!umRg_2DJf&<7Ghh077F9rN:lnu08=;K-]kg>11&sF,l"U3PZ`W2kVfqRGBT`oFC(SQh
%><$@r*Y41_#"F8DH6!L,Dd"CP*]Q4/$DUL.Z:^=Rn0^=.=:A,sX!N(Q[L1]Q0blHMT\]O[5)2F@)nloQ598b!r#Jf[!/.di"0dA+
%l']haX/'-];sh\3Z0b@53SNQ,h#U6,jCu:;70@q(+FC%#`No]naiWZC5st%D:]b/=ZF;2FRuIZq<KJ?QlGkhcdIq]C'OoDX^!,ik
%7sLg[X%M/t6u"Ie*XD*=#Wg:^HVDl9QD;eHkVnp3W?lGeVtE%aM%EcHH_?Fe>Lt*ma];W6IR%Z`@$,8N%"_+\%p+E;:^:`Xpc>ao
%^XHV!4-!_QRE_!\g>ami!Q*k&ZJNRm8[i4/&teg#oHl/%5b]:Bq\%U'n7>Uqof<cr+!f,;<YmO$!9j#t]\9P'RfkNM\V>eQC3>t9
%?cUDVcG2[T_+@5aF;WZ5"X5>#(!oJL:doBokRXu"g87j!Zb^eR&.)PNr7d'5.87I98KZr0ECuQb;#h7c3s2bS@nR4%4Xlt$#qd[L
%gQInVqd@:c.a=%K(MjSB&_M1R.';*pE-i's%R3>WMuLGsO#IjAVZiCUBpR*Y[`]Fk]!Hmb#O;^N;&:*:9JY+Z+B(BrJ"VXE(`I.`
%<geP6nQ7pT-_aq%O:r(g+m>^,8e!m[0:>.&fJ6+h.3:,g!(Fe:$pi9kR=\9*OD07ol=XcYMHUH"7`@af#Ge;V$m@'7QRsV^LJ&(M
%8Ol-8;cFS[CN(aE1+ba;>n%0=;6t().Qq*QTISXB^ebb(bT*^Aa%QkC;--mf<n'*Ecq;<kS7me]O5@Ye!L,<\Kl&UMY:^phZiCjB
%PV%PW9sY&//fXZZ5Sh)T)Tne_=bBkp^`P"q71>=pcm"RWL:"1)k+L9:pdY^-&c??o/HRA:BT!dA%;lW-J#)S">',/n/prdA`'oZl
%#.]K(5?aFI\@b&Q,p6b,F^a=3_60KiNtUk)nC%GF"B!a3(H'JLoGRr187=/_F/Of-(o3,,05R.=r&#1F;$(.2nG5L["B)ZN(cKVY
%"rdXBBS!BLqett2I;Vl-5`FXF)A8gb=bC2$O;]Q!7\%pD(rN8>6Y"V*;fHOij<KB!/t@sO0GsnZ0i1>>qD*fJL7pG%YY6X$^2OrU
%PVHQ8D6nu@L4DKld-SUe8I_7'S6<aBfJmpPD&?.qL!\=IkR4*s86NiDfJmXhD$]p3L!hTDPI-F?Jhf\iNLFGfWsqF0UqdnR9j24i
%+NbU-_oA+^CW#'P.DXM!+n.RrfGX8/f84HNU=/W,;9DZ:>.TN'(eU2"PoPSbZ6[33nF\T44(Bq33b[:5RBOpLHC!X4=kjg)c\87=
%5I:K7EaNhnIEAXf_@)*l&dPCB7ZA%-4]TH,_e*Gs?n\OqO0<b:j9_A9;*"=m%;^pY"HjH<8=_Bfe7=Y-7RS.!SSNUp;<jnR\mMYH
%8bmTlZe(9pZB@mPPi\8LB/*!f!83=o1L0iAdDNLUJ^"?T>[O-"F]HG_P^p^4e5F@b*u(L1H;#lh?/"+slJ7`4:n9k-g0K$6,sPP!
%M2Y@t4]h<Z'.8tal/#F[Yo3<))cFl!d\Mui)FiMqVi#2eZ6;@oW<&eS7;0W;Z5oo'MaWoYOsAYZ^)fOQiS/AE.FF4E>n/toR2n'S
%<':OOI>ZqZ>dGB6K;`96mH?etVmbg36,'%?O8`I@BB02e4[P$^jf=)/CJgo[A$$P0DFZQc4NfQ-XN38XguLJ%<JlD:U.EbI?59"r
%ZNjC;%9Bs3da9b&Q;2&?)+?_XC5Lt;FJ<O6kE9AL81O:];`_U.11;UY/h8!c1o\D>/oHBg'\@$9e*]CY77!u8^?MrKG]Hb@mH[c7
%$1/_#GR:"BoIbj0-$ACT`ee.P//k_EajL7:P=:nfl"-(#:e0;`Z)LZQ7<+M9'uEf--uK[33gZ'W`D*4Ig=NALPMte`pZ!8slpPiW
%W@A,kQKBMA52;,D!ed:IQC:i[J$526-R1A90qA<3R%5(>WnnuePbaKT,hP]9WNTBgR#,.1T)"aK3![#.VNW+U$$M3jACq33P1i\0
%]j<IbE5O+ui?uj<n)5WnpeF%<q-g3r(/pF(Y?+/j^t2R4'6Ks/ki!njaM<!4FO>qgXMQ#>p%NdcF:)LC-;O"7:q/V.;MhHZ#DP/%
%gdH->gl`$[OecPaO,?8K>#rt[eoO6-?VuXP*,[FW$">Z-FD@D.`TEO\]g+%`VY#2f'_:p".pOC39Ek^q9VpoG;I89!C*Iq,.MM1`
%OY#=qY?+.?:Y0^(@Y[S%@4-q-()O3KHM!(i824Cn_UEU)L"B4K]kf`T;T,Pi:0>HTl_0N?CDqBDag^o"dramD<R](:CElCuih@JT
%@:"K5:FFIiOt]2"^0WI^:9L'ch<Oh=5A:U0C-+Vf#1O(fG1%/aG!5dQqVZW]]eTZ&hCu+PH4A!@lOD$Zoc!sP4aK!hLd(dN?8d5I
%+d6BDW[Q&i!_2>&;0'NnoXoJV3T3"*,)MiRn+G,fen=N36sVbT7Vk!?P>+W]6pM%D-4W#q/JPKAHs8PslW)1_Ki8C/PStBZ<K-C"
%][]8h@Ts%TJZqL1-X62Wj!kO+%EESUn+F!NABVqZjS1+\G-u_h2;EqPDda8r;fTJ=BXmqc]kk4/(8fk1U#m/AU#I#u>:"%=M?So]
%2gnof017uK2sfj/bq@Z7MI33I$&s[j>4ur`WG+WF#K\cpY_SI2n\G<,"LY(P>"YubD4eC;]0n%?qHeR:!kZ:?C^o]/0YTO2+\A=p
%#Kg0CCjiueI**cY'1;GqDPdcRp`pbuP#UG&nt3T9klF`p/$sG>0:*'tI_JEWnbi/19V>+g;!M-UFJSd-FgYO[r4gV0'uqU3U8irm
%nKGB7X!TO6mHR8en&_<C=K>JVlBVj;rH%pMX;"#WS'<fr*\^QiX6J=I.TE"fk<N(aWkKWY`$87T1"D-bnYH-Z:gX4^W9`#$WRSam
%Jf*]J[Y_!Y1]uRkk@F`IQ$TBV6NUqLaP-,?fU`<%M8;Zo'\JEM]<BgZ#!:=7]cA=]b(ms.iaVPo^9^S>LmP&%A-A>i4>)>Lf'?n"
%mHO^':/PN*I0DNpg7dnH/9W(*(c:1,"9R>b<=M"#hhqr1^0WH-lo0<XqL.JO5J/r]IlS*K;TaBnS`@Z.&J^4uo';+9_%fR96^T?r
%gCZ82!aRJ&8;%7qHG/*j,c6n/]\""=/KdErG#_rc[84h??OaH?igGIn<2f9Oos2CD1gP\9s.O*BYW]sTAuM]r,kqm$!C^iqX5:Qs
%0,\T%&=;L&NJ*D1#W5tJJ>IGa63'[Ag&ujk87@bl>Ab2i+dLLAAV9BNgB:bC+f''96gf"LQ&rkggB)Pc&5oqD^EJ=_Uf)NPA?^V@
%'j]StfN<#o^pY!1G\nIR%6?'FgJL-^@OPXYpNkM#Hg4K6ga7%e:/!3QWVc8M7L?/fV-F)+d8_2k'GWr:IIfm"Vj@fLApNn^T4]LD
%G3.QpC;<Y-L8K*TKK@Je<]lVpl(p`&Oi8\pPF*f]a>#$4.Z(7Cq7fJPfGN*!)lTVL"-/54H=sq'e'"V3W/0P\$#3t4DO,d^q81Vk
%Q*k;X$#7(unR:r/Tlse@QOL93.oh-d01BVO(&UQ@91Y&i7Ch@$9p"'bQ-k,B1R#DRe&qsL=4<'r_D).GTam?f!Ij1lHX'``/K/Ua
%4Af$VNU87'qKondY['sQgnbDnf^ONsBL3BUjl?^:p]PD3&l]0RbkR'T88cf3lXb_9BtAPZDo5rfRbF-hmn*a."h)D3IMls'K5J_i
%bUL531>&0*^4hplX#N2f=%YK9njLqIkaOgXc.RQE#j\uM4f>L4b6D-#AZX"PJbBhX_4$JIk\E*_1Xe2-JZeL"_HVQYmIZQmp9eZL
%3!m\CC53*G7$6Ot^Kka21_Z$J'fT`?M'ZMYVj@k#X2HTUaUa*TTs"kQ?r4D$.W@8p%]?EBe=h&PYe%P=V!dR@Z@UTP#?HhM[E,c;
%R6`N]`bQ10pp$.$^mSMe=Jf5;V*M0%ra()dPF"DmGX2P"pjncR2c@(GmesYA4Pu(@JOE]IWba-Tm+\4_k39+HUMkC_6WKH]$bgVA
%oTl+@9gQgZ0C&2[obcb`aZW-8(B\d/`X^jG,9o1&Y#%UhIl3&,O`0O2Q]L0/J#HSNI?XG_S%K/60%qnXh2s=[*1[jWLO;\'0)';-
%AWQ+kDOX;U>>jA'6HFJ0>ZSI9)B(QK[7]n;Ks&NF':Et4h8Go-QjL;Y?$t%BW,g6I[B$6uE@j.UHS<drN[Z+LX1Se(WEbi'T;h.3
%eWIrpi"MI$rd#spCb$PDf.-/TE+4ds85U=is3LEBd@O@:NpNcn*k>5\;u1pVH,NV'K!+I8Ydj'K!>qd$Fm10EFGZje?-:KV)n7S.
%K(W6p?n;hFQhpugit9F+@":ir_W3j<cK?l]P.$@JdKhs6V(^5E;EA(gj#l\P4-lUmkpX%^8&ZeN8%NMAN7^UCpc&H?>c@N\;3H]>
%jVqJE^,?RK';`=`\WFuV4dF3IT8Q^"XN`^$ooF4J\2_'=EF<`o7aB0J<&JK!M5NTZ\"ffM8V=>KGk29Q:,iZ/V8J$u[#n6Z)<oRh
%;&eKX:>j4tQ)H'sC<A^#.W6#[7p02M\pb>llf=^tUMBhg"uP;ehu@74?n!El5Efn7PoM-;1,pb!&6&Vi:.qC`hCPnlg)$paCZ)&Q
%FIrrsZU)S@"[,aQ\nkWu7,ba3"0(U9WZI)A'<"nNf4(T;&!arsWr+%,_4h;inT1`"&'m@Dq6b.:bJiR;Q]9Hq4Z%0SO)64AY]N``
%3f$Rt#:_aE?G^l-cE^DTYZ+KUPR_i=K3V8aa#QhrgbhU6_s.Jl2eG^<IS,JV*dsi:0R-(t03Y":(SeUFgg':R9"Q$Ob?4%-9tJWg
%1"h(r\1.O>j+UV4*2PpP=$"Z&VZ_6b;2X'SjQ,V-*jjdO$=[eJ^Us*OZFHAS0TUnsGCQ`$fe!)XRe-.A?mRk6f'*e=06>:BCZYIJ
%B)re;+!]t._p*fus-UWkf:2GkGjF>cQ^_nOMReGrbl0i8Yn)g1F#/LZe(BH,n>;\[&dC.'cgROCJO_8AR;kII68OATiF?4\iq`Jg
%7HQ<om0s_@--]&ZCVff:/?D7A'-4>A]fakHJ`BB,IXK]mn>4"8CW]r)FPin;9mutchakOXXioHEb5M8dq9fZ[a>F0Vj%4!%$hGqU
%`_^5?=V`&`<qiDDP\*:D4bXBg+na&[TB!mZ4H_'?nj*c-5-ZY"E2KX5$W+Rma@>no?1>B]oh=2k<*dMiE/.\K\+IqqjF0a#<*7Su
%<_[Eg(F`lefXR8rKe81*^<Xq($]^,EF4a'TKX/DVO@V4jCs^-q(>eH"='![jjJLj-LHc)Hhj;68QKtU=-l@f%qcP&OpgRd^!d)X'
%aerlD,?<a$+WFd>/!jXGSk:1m]gBFl9g'N$?)>k1WLQ6oJY-ifr<6.L]0ae)hfiJ-Eud66Hki9-p"Aj]objbsA<ou0`+OI2(SAgO
%(SSEs'F+s*icTPe6dM0034L8?RZcVpf=fVo72B8$W#1<9hcZmUko;;78:Cb*o@,YUJQumucV+g;PU0?V8>7r6WuI2hUtXdq-&udK
%-`m$`B09akat`PJ=*TH\p][h:msg14W.QqPTbfr>48AV)EK>52Zhu'+s#^N`#J\,C^]-?.\sc\M!kALC;Ms,;L48Ko/EKN2\Yo`S
%-+6pbd*8UBG"lKlDAm7eCkuufF3,u=eQ$=..C4k>=?>(E"rl0`6'6',5ecl(Bl.EbL)03CD(3_?G\V1:brU"o6M7m+\_=adZt?U[
%9Uap.<4Ytg7T,\3Z;1a$@30aW8NZhi^6`"`FG>bB0XIiGI?$7+E0mGs5.?.]GXPZ&U(&YQd\!#+<1GXiI4Rub#$kl$[\D"QLU,qT
%lUm$Fo>,TW-'9D34'J\2QF]O$rc77800`EX2Zg,D6cB=5[71`<n)<p7l8$9jh3g*#qN6Rg0akiLqOZ^\GC%?.3SGn@5?n:j1>79r
%7miSc^^;oN'`C\D:-pRm@)k3C:jj_J[FUE#RQDueTHYdLdnh&=6h.$fC?hp*1s=!`_k=>8Cd:S7i>Es23$dnDU:jiT*N^jXSg96D
%d_T)GgKtCSEDmAgqkh1]IGp8tBVML>HCu0If[1p(4\e;j<P$o>:`&.PiX'POA!:tJp]:i!#!]QW*`7=OneJ0LUC!8IE$`Sc2_=8e
%)BL9V':]mki7j92P:a$61.Ncr&^$*Dir6n-<bZk*'Z?(&+O6hs!mFE(^?D48\(0:RB]jtk#JrRPFjrP!UYnQ\W,$B9aX.61@&n'#
%@?JsNCsYo^B5f@9#u.$2qVXdj,mQ"5kE>82S9<8S8d$CT!h,QuSCNo%mjq/@i*nCC<oU,=(kme08kJm5oMgDVHID$VPHYVD,QSP+
%1K.:S_FPB(N<P,1d0N_F)gnWnkn=GtJ$#ML-l8s6I.9k1$9IsYF[[(kYH08Xi2>0BI[n!\kXF5%U)1SM_Q\Zb?=PftBr_YLr5(LI
%c[Tf.@0aQQf&6F4>&F'50<I2"i0RJLd[nV_li&f3:02^_&i\asojYQl!prM<nM3#Fn=4V@0/0a`mHUR7Epar@Rt&O$CgVr5/FB^S
%M5IO&YP`aQS7NtG*nM&E^kurJ(dZiNppg_Vkg0BcLc,+aC9a#6a72Isb#^QV3eX6s/?<'"To,tA`m4cakYg5h#YQeY.ZLt7>o4uJ
%fM^Z@ds&/bXaioo.CSPI?^20i5`*Yt9c[;Jn:R+UQXSTo,[4JmNZg8V;E07q,8])6J\$:OX0OG\YqE+-lK?.[58Mq8,+0:$-g:^4
%Vo!*#/@Y7[-JXfCD.jZlU"hhGC+F'_86D&%1f+Eh0M]S;'h^CQIK^ca7"Kh_C=uP^!mer-+daB1D_6[,X3nssU^ANWFTkcHQ3rqE
%;cA3HanT"'od#ubfb^nFD<a!7Vb.,qJ3@1A!oh+baYaoM2o`8uG\VF,e%EX]TI\#bkCV!pB7tl3:D[/SlTI6J6<C7$MPH@aXo'd)
%Yk=en><TlE+J/(l)>'i2q$L'%hP-<I+83QiAtVT)mI5LoOsQlcTQhMPXmKk5!dBM^6r#HLMg#Xo\MFu15^Q%QE`^XMQ]\4]L00AT
%0X?mo"q9c$G3$2kPV5m=%V4cJ<sa%-e4ple9MJ4^-WPglDZ=6j[8g.$8W3dKGW8^*@g`Z]E"@8tObMnb'66nSSf.B-*+4KNk30hm
%rY.\7Di?eN?633V0jaOeY9)/%@TVFQeJc@4I].l"VNO'U$MN[icdN-"M=:gF[LQsk;U26S5&AMQ.5,![FF?0d!$VD]q4s#QID7EF
%608IDXd#8qID&dH2U]Cq5OgXN4Retcqi"oSUF6I!Y(Z$D;?7=^0U8Md$ADnsBL*=?f\eP`"n=W?0:lac>49sP4<aY'-n:"<(/c@:
%::pCH72/VS7_kkj(c8A*."7gT$a`5.A]8,dEA`p3!pAeJB[D@L)cK(t>k6^.q]RYtZBPPfW+O]hcns;"1JseoQ%JoIK,.Cf*rl>$
%MOr#8H$[qnqGq/#'Gsq;6U2$H6<)<9^^Xi6#rGT$eU1^=]JI4=8?lLg#=*ip7@VNr"/-VsN^#dkbr+4OdN?8<;Lh?B7P%;OMS_/,
%p\;JRpU2-_AJEG=7p!%]KaD@PB2e+Y'GUb;&]A2c\KslU>L0RRGY6N?k[F5bYr$U9?Ed5eZ0KB[r*q"n,897-RQc10i[d_9a:jI3
%l]0"1`=pi6J-*tN'/4)$-2L(e:\_u\4JhktdD@0u'C9UN*lb3pbjJTUh,@ToWhf]g6.8\9f8bPQdLaiMTWS#`S$M8*$4MKTYbQ#=
%KBB-/L/t6C'%?20*<683*A7OO5rDkF566KS*%D^uI64_#YSD`LHfU_O_;5'B.52_n[[f[1<V/XU_c8h[Bb!s^?`@tWs%G9oR@"[b
%i*Q@-`-m8P0Q_7Rfg0XRBJ!*fKr@:mQ09m?033ZhA&79M@6uElc/U,%HN.B!X_Z=Bd`E2oijf]g5T?,N.pURYJJ&>mWap'IM2$9?
%!dV0$d-X"m*D6Fl#$mBj#ola$$dh@%R&!3h.2K.N:fo3s5tqFa(c0q!Tts(rE^2a(0Jt/ZV4BCi0dWDl3AK+hHDq-]K$KsY&<Vj:
%h1X+?@%tBO1`1e8/<eE[0c466;NiCH`#:-LIrQfg87&6`H>tBX,LNlJ0Em2DlhmA?=#K.rS4mUl6`;#'WdS93&FcNL)_WB&`R>/%
%X*.)YdBm>:h</[+kcqI`FAu,+K4VLd#E4K"rK68Y@Vp@/?duLBVRfL^>ae8j;+q?e]9W*8I%;=TZLuZN)iBXr!%kOPK798J?ulf&
%Tn=)]"<CK"h_JGrNZ###CoYi:<J>GMQ"rW=i5GpJdY>>TA-01=KQkJK)OXEU?'/tundS;F8sS:/0STdi),BEN"-N;Q:@X"@@+%!Z
%ARc?D^*78VRnHB#q@FO(dMg:V;=N#^0pu,dKW^J](]_N9+OI*c$Fo,Y&<0EA=I5%AW$^B<'?1@sm7XreZ41&>/K?o@h1e5]81k4a
%<'AeXTu\%U?6%4"I7%9u0&RhNRstL12%1Tg8ipGK(UKL*dN?Q="JuuOq"c6uT#JDk\5rmTjit:V6eY'uEH/\-)aT^BJZ@%Tg#No]
%VUNsi\"ktb)=D4^/d!0Wnk9@gRG(Z[MEMq>8#aPC2RosS8t;f?2&%"UGI#hsTpu1h,n2kP_Uph/(`J9;K0^3J6s\Ze@;K1?pE429
%e+1B/MJk"4l#rX^fO^gfEbGQR8LsI57<HC3aW9.Qi^=p''$!b%3\=Dd"CIHRL8/IpNAlimdWOG<_[qC(4`?R1nJ'>PbsA?6_5M+<
%9lH(pNqPg[,8Ok##9iC8\I_OA;Ikk:`R8JLBd4(XPRt<D7[OlkU=pI6:c4^j]0iYQ9AL&2.6kH]Kla)U^LbO?BTcSA64eJ9<I>Mh
%Ct^A7fg"-9WNeV0aY(eV%Tm.LpdcFgJE:4?fY&/YV2VZY1!D5kjZ8a*EWLmY.ZK*QqZ6HVk;D8t@h$Dsna,UDcd8hRjK8V`GDEHn
%3?O1?&`8"+4%MIoVRWqpdSu/,4EBK27]<-dJ3b>s6Y&Xc?pi=]XjA(sh,l/M$mV^*SfHNj(+/eNX:;#8M8V=4gW*tt:5iW!iG+8b
%.qZ>"86tQQoW^#qEcC7u]mPaelPLRBA"tXb[*TrUMa\&8lPD<7T%['P-!3f%^RTU`?j%NLXj5B#]BmYUNBpmV\3mGN9ad11?f"+8
%:HX:3i(HWl$=Kk8/C]n#'F$ng!'TjZ5W=MW::dH7R5W\oFF;\Z1>e>53t7FZJ8VM>.8ALTP1u#/ft8i0GBRs:5eG7+N_s6+=faWJ
%kHnf7cm>$+h-/N?6d^IGXj"8ME!@VpMCTL_0fnTs#7UN'#-$ID`c\@-/NVL6(51DAF<h74E37bf9,VO_3bTEmUS-Yh?"=/jd)RD/
%6:[UBUqIJfOUO@kIt#88Te'D3cJ\#A7TE"[3qY4W+C8U76OcHgAGHK81iE'qhkP=N)M+#JMk7@BfmaJ@`I:o7_c>H#T!,VcV/QoY
%>L>'fI&!/(%lOh:gV?ISZD6G0S&GAs1%kjVga:-#__X_t=]c`-p[.Kg">'n`12Xh]q,3k7\aXD_%XFlZ2A@0j=H4N$>t:kOZs$^G
%i8?J6NadFYN<$FVX@WiF8j+_C9'.I>&8uF./eY&BGbM1W7F*q\0`en"'TqN=9$s%>RUJlpER^'p,eY0j5RNj&S.s;:=:.>DBO_?,
%/B^aZbW8NACH.eD[P>q;.+8s<!<Q>4'.C:jVk$,iRjoEdeVUE5ERb@T]F6^&3.%2pUC=a"<b'T;etllOi[9I(ig6kU$t\p38eKd3
%*%<""Z/j2$^rBI(b5r3iof5HJoW2KjWPe?"Yq?t7cVPpZ6J:++CeVf^H:J6e<h*c1(71V^5]I\`i?h;u,(fBWCs?\m@pM,R]$OL9
%,dC31JY@;aCbX1GDU=*efO,kJ`We)4Ao):T)a<BqA(*BfV.4#?Y<b\%':bp1fE-11Vg09Ai&hb!Bio=R.]R`Ndi<Mq_fHH\ej%`(
%^kSmuLFW+,c&F\f=P?\`_fpMAgW.q`Ce@U^T>j>mY2C=98Si^mqAl*G<V%n]7I<dA74'siq4^q=6^4p(W)aA]=M/N<`E(\>+KHo`
%,OLLrS9phkfMKHiN2u;Ho+Ah"/<]=CZ^Ml=`uE]CE`A`GjSLQ1PM-:aFA!rN8dgc$R@'M9Z$sa1a\a?FFfq4l'B/!:6sl3Da[]"2
%`JKJ/f7Kdg15O>Rn=V%cSYqG=>Lj3o*TN9$oWo6u8TbS?o$^.]E,$.(T1\#SWYra6FGdILQcTA\P)VgerIb%YF;RKjMDL+q7S1F;
%\W?n2BUo*V/0AMi@;=p(YO:.KF@iY%hAc;US<jGp$q+XGohcK7Y\E,*2@L!`1p'5W1Y&cW:Po)Fc@&hGG#dTseZlCh7NbH=jVL"%
%`bic1XC\=AP4NRt$s@H=8-VlcH8"U9djE\3?P'RVJ;Wu*RhRIW9,hk>V75.al$M<qJZN4p&F`rUe;28ICVaCnk475$<h>jB>W].F
%c-a(Tl$Tua?tk:WR5enmn$3undMuQ1Z:]fhqo(-?n%#6RR/^kQT[8nH^j6_4VKhet=8QiZrWB.KYP5mt<2X'>^Z%H(a?(o$$`=0[
%q,8;RiA?_<9:Z/]Qao(JQJH=;d!aaKe6&_0B(4F=U-?;g*Mn5(=[N<CV98#k%CShr<7m>N$S`@L<IKDK`<M>6l+*BXlGCrFUjR=k
%^?qXY0f$FkbtY>;YrBZhR']7aZdGRPe9kt?JX@8.(gd0Lm1ktN,M4SpGG#L=r3hQumD;%fVrmtmqGDC:'PAtYGS2#:?oSim!R":,
%$N)1qihN'f:'lV-\iU9pNKp'AF6*V]aSApOH2"?rEM.Q@@_I"&c0A3@'8bc8l9MNE#\T.,dF9"s]P,LF'm6VA9;hpB(k'(6p?[ML
%X4eiR=Y#6ONHBj03^.^DBhdhBHq*SQb(3QI;LatY+2[VbcZVn$HdD2YUbgM'W#+?@d+NC/N!sD[jF\Z:7]uEMGog9T.ok4ITb#c.
%mK`&K+bOVt06JXGd-om_BFj@5'"7K9[nh,?5XrE%#^BD)/dZqc&bhV2bY"qdW,q[QSp?"%7P0;oCpmqFHIl9Uc(%*N#kDU;rL.lj
%s%?/re_ueLjUjRYp]?.D1=_sP61:!SYg+R'P@m1$UnB-:Y_5L<*0e0`1f4I;b[u8VFM=tZVWm)El_hXf1q8*8W%=+U9m7L':8'?a
%jlY7m3O00D^'^*/9e-Ou9p^]?"Y1""EC_[XY_90)GGV1Yqc0"#\Of-0dbl$,O-n6gF<<%Q$VTn\8HStkrMtoNBpJU4P0aF?n8R?g
%FP5udU63@.K9^<9fSF+1F,3TCms8$EF=VjT8R`bSrZXdgf[f'B_`t@RP5/ooAus;\?b1[kf==lYI$]N^OAKL4cp;G2>h<:iiuQ@Z
%YM:Ktgsug>AbL-gMSY[I&%a+4aW)(GAKT46oq*occd"t-L+NQXGAF8+Ue<i1T!1js+&5T))7Hq,Yo>(f&Y?+`hfJ@.B-/nCHY17N
%/rB1N2:B%<50-.`8X3(I:mQt#AS?=#F#)XcHL_qg0lA9,LcP9t*fh/6UF4.iniXN1XMjZ2jIf-"NN[YPNuW>aGER3hS=tYE2GZYn
%89R8lI1C*6-Hf/O);YKK7mcPQipHrC$PdCI.@oG)DfDZ/QDdqT(%-Hp(6Z%e-nLE\.\QMd<V1'n7#PP(Qbp%idUnit;<shKc-lr!
%O%Af]gsoP<P*DM,1\>i^*"#bLCO\]O_'EFSi#)'o3F\F(l6(3%j1m3^FeX]S5e3ZK$h:l8=>2;)5BGI_-AV>$7lcerE^q+l=sE+1
%Nt9J@A<S3o*j6oh:_UE%0GuCcYYd`07jT;@=G+=O5fEu\qoM,hH(q%:Y;87khnu_Y=+[i2_`9T]XrKRD;'iE__WuTX$,Y9CQgHh7
%(Son!7jH5ZK&*O"c:W_LE")S?e[[Q2eMf^bTd76k'.dI6)*<!8$r(btVs2rJr/(s(=)7R@"_<V`Cb;Q-U,:U#;MXR]p9KD[VGWDo
%>G59&ds0V/oueheK]TNo!&V%(:RTFYn]m=GcWK/J%"feP86T)Y8gA&6KMe'TXq,FY23ElQg+nhI/X6IU*!^P:ceG2Sp1g?WZ:98/
%`5uA2@l^<(5c^Z"CP10L5-XE>KAZV5Y@?.70-I0D%rZCA"Z9AfnQ"p6>Glr'n5qMk+I3plWO-K+Q;*_][o!rk-V@;I-%q/.kkPnU
%k0['d=Rb[MO##L5N^hYN<kJZ^X.!-km($j<cn1%a#/sW:jle.(C/eZ\%!B*o+rD1C,gpAfhe`R!o`Ep2b%(S]Dp5(f]p4kUld&^"
%Q!+V]c]o6a*L95:XR1)AhRehe1[4ud8[U=U'82nV5_ko/JtJ^@;`j4a8Z`3?4kEM:l3m+^3m0!+;`l#&)/ou(+=;WC+ifM3?BX&o
%'!R3dNku^HdR%(l'.PbV"Q$phe:lQu/Ta2M%AsbnUkZgn,_c1t\0g>8R^A>PJru`l%r-Wc*1F=;:GYGQ"HaM1KX0/2<`I$8aQ5"b
%Lqe69[/"=(IK@(`EE:74FcDBNK=EA7d#R^j<M1]u?9O*!6AUeGdN6r^#)"jKZ$!jnp:n??VL846hs0?SqZ"-W(=H=W_9N^qfd#o&
%(RR<<Y7GTRgaN:iCaoh0"Zau0pAcm;\/'4-3O0$/n>sDT]$`@&'U5RSS;21Pfa_2JOPj?8UlC0X<D@S2p#V"GJc[_gkT%a<'$.B*
%PfbgEhk1UV-IM%_oeU;KX`'!J+Ib6heXq[3HPl7I%\Gu:$]FH#qg_pYq&d?Lk1]-NG&ZMT0S>RJs)GiK<I3MVl4nJ9J7(4a1_8kj
%3iIiLfFT!!$NHQLS_cVf*0*:iMgG'62o*T!?oq//#6_3Hc]q2HkVe&t3LtP_m^Bf/aK'6dUV$V?R_h*i;Igu77Q\I=HuuBt$8K"j
%?^E^qOh$B'/#s6R4AgGVj:5A4"T<ANk"1`)YtL"(H.FWmXhK7K21'bHq>$OmeikU%,rgX]kgj01!*uQ8(&"nJaNW/_KS0B9%WAK/
%3us.JNoI$D-BAP7+S[JEc@\s\ACe?C@N-o-32!pa@VbUCr(Q[HY++HQ'MTSSd1<d?S]PXUKlP#OB9`q+BXONMKdf3aRO>?72(ur,
%>.geCC\<<t?O(ZN4HR>GBP&@n8=E#s?@9s;V+e^X%m*\D5[5aCpH#0iXk#kAq/AGP6*P?hO#pJd^oHJ]VEMY&$m`XI?Y^RqhM^.L
%%MpB>N4M1<mG#Z(L+FSP`L(X\GG%#dekcMr;a?L]?ghQSUeEf3q=uFC??FDS<8u-4H5&ENNS*BRW`hMR9ut"*dVE-iT^Q\7Bsg9Y
%CkNVLDhtUk_EQ=9l4D#!kF%Vc)&/\'Cno9C:d`M:K(aLn5@;nTl`YJdfu5F3Y)>XlX/"A2;a3fZHme2(?-5.@+p10m\lC#Pb6Ue"
%?OR38__"cu3Ed5smF_-CRknJ*K0a<*"fPD?q2XO>)dsh&;_MpkHj(;5M:J:FLtUsZU7P*B?MA4,"2#gFR0UEX':1^6C,A:b*$\YQ
%TbpkBs1R9IqFHtEZ4anrAK^NI5Nb)UV=G%<!E#07eMJ>P;SQ4VqKmhJhWenG<#M4%3p+kqSEL/<G2;.076pun`AS]i$2=A81tT.E
%,O8Mq#QC,#oDJ8ff#Q6cIRWfu67C]:-riD`mcMQ_Zg'\t9TFD:nXZ6Z,@0r@!9=VaH=7HbNNeJA_DseeOstGM>a""Sb2b*mBA*pj
%-l]CLVB.J89dZq&>U_rs$T.ccbYSmj,O9&TBHte7Q,uj73`_CZru$5e3eB,8J2V`q7#C9S+Nm6Lpj+UZ@:^3S@rgXc(\]$reP"85
%'sKSVY`hu@BW8%HF!=7kG-=+HLP.bBYdqL)$[Z'H&ib0EO9I==Spr0)F"QTWS9q#Gb"'gU!R4GqbV4$8)+Zg73GPl,HWlmQ3,^md
%OYggrCeoR/ORbeQdgSgb[&MQP]>ID(^_J;a@qi7UHWZb8RDd^pZ4Tm2Bd6)P.9aY_)Qi>08>o:l.P90tB,1RqX;e-(k9dD@HWlnT
%+;`a#<b82Pr%'bT`'`Y?'Mf1--r[!qgj%.#9/K[+>EY8;2Ogq+[FsA,VG61)%$V]&`g`%6>kOhsidGVg45'NnKH?IbncANX)duNX
%6U#L`Pip_&OV0#JYZ`rYqj]_VcOshn@?a\U=L)Zd[h0j03R9D.G$tnsF-&lh/7I@>1E>+jXIDt8G)`\5(FUZ=@1h=,!C<1rcC8+l
%e(U=Zb3'&rk*k8CDU+2`di-esB#?kQ"cq,TF0b-`1Pn\hb0jl8p9Z^a#?lt^k6WnFiMa051URmoV^2*PRd=RHr8d*fmE86N<18pQ
%^"s-D=<!L?3FTVUcW:X*VMJ#9DhT,$F3_dA#[UU@rk6Kh*FIZ.V0lPD.\!N;Fb+1I]$J<:aiK#dc#:+4N;FJqIB`'R:[6pSRd.ib
%KiCFrb:`*p>nZ:U=G_'-^\D"*mBn^0/)Stc>r*L_)Y+&="6u@RC@(U%Lp+FpLUB]qgOmQ/`IeA&&*M;1dCTi^HS[J`=[Y8,ks2^^
%J-`Xsp9Za%h.W@`=d&+3b/c9hpFa\fkjB)&6?$M#bf9uG-C%`MU`3H4l]O!9HWW)7K>JX>^hS!PDfBo@%P.b/r,;M\A9Lb0CM&e'
%]Is!5>tI#KM\?kMPa&&.Ya7pB6j^I"qNm)_!F:(qN<#oebBd>.DECaeaDkoB6b9'3p6(r*4t`V4=r5kEc(QOrAZ(S^V:mfnbF>S'
%FjUcg8d\e_;F.oFB]#Y=PKJ!8DA&<h-ap=#JfJ\EQio4!3:/'YBjDXs>o7LY$^\*uICLp-f[k'4d`$j5hSBL^4R4hS"CH(Y4fqAR
%fH/Umjtb67PU/,^JMh%Vb%Y>Pcbh[&'iVR^m@Z*#ANd.'o1P:>pFlNR]f8]aFZei#;;bESBJsE+2W`V#Mb1#*oe)B1A/"[D2GDL4
%CsVCg!7F6R/MqJ^,=MZkM5gp_[N+q"$_j,nZ7ZVPC.goT#@DC\4fjS:,RnrC4(*Xh;h<REs"[ZP>ZI"48p2jQhajWGVjBsA]G'HC
%*3k[#lpYH/Z9F-P?"<^+R#hnU16l%P.O_')N%G>hCD]`2G$Hn<iri<(lI*g2HZ_$grD)"o6W5!;;XPFI!<C*?b+?D"ME!=;NVH-6
%=0)j0$d@'X)Ym6tk'8Yoi'u3dWa*!]r,`K=V0X!ABJq#?S<_'AIo7Cg].)["C57B,^V6Ba&j%^)57B]IqA;=Hmj*<<`rq4edm6r+
%1%mAg86&?L"YlK(#?a6e_qU\&Z$<I1C&"RM,FgI"W/l$<P25[D]!+$UXAKe2_+Q5ElB2GYUR0tD?'cTnm^fJXH^J31UgHi]iX%G<
%jY60Y+a5`+9X9lkpS4+L$WV]`e,dDt)C9=JSZ(^onY6)pJK,F,/%KpS,]^%\;r\F$<]Zp_U+U,d]c!/\U7TuUcS)(Y^@5nWN7uBn
%+e#-9dtMd]Xi3Rk>sMebhi,`?;:"RfCE2T0d)AfP1,pnV9so^qknpP'heQKDBRMZhmmR,#\iB9O4'el@nkka>DKTZ*g;HGs%eZBk
%VfcG!U1>#j>m>DuHi3Lrk4>`'7V;<na'KD,"]pG\p;BY=4(5n@l6kC,N#5b(%\qYWe%&M/Etd`mns:>`<kX<$U&P.Lp.j8hg73[n
%lYbA8\?o4GM4GO>[i/^>2DpL(fYh>@4L%&V>3"7O_B.7iTA3BI<i!@=?Mp+,r2C=?2^0hr,hY/!1N.6)pEN8b07nabNI#W_A4G4B
%XJ\Rd+m^tq?/hR%1se<IlguZj!I0aB_$!Pl(U8eDmf`%_OfJd!LKb+tUo.4l5Y\pmBO0b@;G%+p=ZV>Ub(5k^/EC_"c8Li]#m?6!
%(6:f[X?09Tld@MA^bP`Gh\ldJbosgL623X[/tmbDAR(52ia=]=lS^4n?gi\3Wm-$Y>jV+Emsb<(2_>#$4I)O%=4t"JO@Y.l]8sem
%8qN(YjJDFt^>GG70_A)_K9soYJU2D:(dPB+N&u@YSZJ^oIK4IOoh]9DM;+>&/e/qD@#<(_i8)jaq53__D&H4Zm]^3LWo[tjA-(SE
%H<qDkTFnPVl%&*j`Tm+ZL?lq8g0ZuUTE]*!#U;6p2CRJjis8&_Drj*`a@%IOG&Y24p\ik7Y3Ch4\h&IhN@I=e"'WZY,]ar=&$/cd
%J9SS\f6^s+?`h=:E%/29NN9=0*Ll*n2ZkTpC4OJDs!_2_?u\:\`,+:B,;#%(p5IP3bBeEkk5dbd.@`T3)?HS$Q"%R1,>$$S;2ATr
%(i`=gr6hS]h/lns2aPc*EZ,J1iL!Ef`+YsbgM[rRQQgSZ;^`>,%4=BIFU/HZMF;?WdDMSYO1VKkPrZZE0+>"IlZ'FE9Ko2U&;Z+\
%JF96RMV*dV.bH#:f@4!3DP%/4A+#$KlK^/?Y5Y?gn+>^#npc/`(T^^$.F7k*S\%"4q01H*rl=]u041N8l-%ua\+JeVhd1g1cegbn
%]#X[eSNk+"Co]$3k-M3/_mH/18sJ6;BW.E5C"8Ats65C=`N`7$R&(s1bJm!pMhDU'e$H]BTX!!e%'p[-K/;"bm5:*H;&hJ[5CQEf
%e7pF>5pIX5*!"3H@8C(TC4SYuA;,f:X1:;t8kj(+i/C%Il!8^NAX"%```FSF"L.Z=Jf[r]M-/$.'GCjgOn)d@QSp'HU;/X`hEfbQ
%&]#A4^VE\`/Xh@Pm.M^jfrDT+5u3QanpMj_4%.6&QVAgr5\_Hr)4&Cld?1a&OSlCuR^"3b'%8K]:lXq,T%6?1na.MI($hM['#0,>
%\*ZQjC;U'('H.WdeHT1uq7FN\afk(a%NiS8j_6k=Df!\!"CD#2P:fCdVqkE95BQLr@N!PrZ4O<)Yq#B8kg?=5Cn)G9O6\QQkCTKD
%d[=Oq'`g%^(W:R]`)2W4dN\\lY<oM$@!gEg^bB$L4%W66,.*V!X1a,[`=l%:?1g!ns!tuB@R&)#.B5YK8BApe@U`PU7q2&c-Kt!E
%(q1Xt,tmLmMf5l?Y+oE#-#1nGf8uJ"2&<)khm^u7mO;&(j?,NpWbJ\1H<_7UA@)0aJQCdBYs^mc@S'LRD*Q:jO+_NZZg8sWR#H<6
%S-X&rL1oU"l1$?a+E$2fT0C/]P>3srV,Q7(AF(gV0d"LI5Y;LK8sAu(UK.oL]hQN,"4H_)-$V<]-<J*iY*_J#:^l>uSH7&13OIS/
%R>1HQ8%jW;,`H:>d4X\Ro<H)[3W^J70sKn/d0_V94/QMnlCgto&r"YQC6Jj6QcZK/_1KF-daMf$U/*O))(*QCcg#)+9$G;/^R1*8
%T]CT?(*#Ljjp`0Qj'\i"2j,4h-j*\U!.**'f%?BH"37/O:pU0-LkSPE?>L\U(#i[A+>JHO?M[FDj%!Xuq-,1J#?Rj0>8>M]KBcU2
%XkRU:fV&G,c":J3QqeM5K3B[7-Z&MJ#P_>K"K/5-/@@!eg0+V*2^#PX5/,Z)'"qjbU\\5U'j]pecXoe/:@J(Q43:5D,=2sWC7>Oh
%0GD(?&DuhIN/9"d3O@e@r1eJO13u?a(2A_j(_CH2R9"8&q=mk\g2cl_&04rXW5DMn3a=D4\T:/"_D)\n?8U#*J@+T0.KVo8.7,tV
%IYBT&pI.YK"jNLA>FEZU9rsYbI)W<qh!'7i&b^$RrrTI8*9j\XM=NPE)ra@)opr;?nbpH/7O3*Ak2Y(5lK+a$O-+W=N^#c9\qO\?
%:hRYE!F\B^ZLP5VCL6r2ju;qS3&Sb+"F5aeYd"H20S8fMC*rBFoZP]aF8'HudirdrFW&/q>\/kp<Jq_H/oqK_+e?'hLYlGCa=f&d
%i$K`D[%[d!>:E@o@BlcTpp`L$C]$$r`Aa3ZVNc(Q=b!8ORp37mZ.ObCGj26>-Tha955eHqg^3flDO6dH5$Eku)]<\r&&9FKRUr\F
%H&*E-48#ej7o+=R"D-hJ)kR-.>Bn[__RNNT"0jdM34O+rfkD:ON'OpODF:TE49I\GU$%6GX[$T9'3PT'!cDNOZ%Da\&PD&%"Xpal
%JBW=);JQ[6N;Rm:^pAIk&RFiG:,pu19\&4)M:eJfN<q^!Clp_#guThf=Lf6rUq8Dj;>YlsHM<hV]Yg>p]X*>=V6D2ib<21#WTU8b
%7MK+IArp:/'IIuKi(7>*<_2rc'&e%/^4$?.FA;2,8USlmLSNq$?@hq3%Pr7/Mr4HWd(h'8?<>>B2DB=?p"nW5^"2NR+8d!11M(`S
%N:\5^5="ZH:N?JN'*h>0I/p&6?)t0E$)Kjr6uIY\]Msfg(t^5;h9H:7Pq0Ii!blLiQ1DFlN;OHVfU#J'mr;0H74^i7am(R*\Pp8F
%<QJC+eieOmLJDLAHkh1-b:kTJ.mWXjM=)4VH`NC?(2o4h`rI\+0E"6-73>^o2rK^j(Bfr2[JC41FqQ103+!027N1R8)]UY>SI:`!
%:oO5jJ,6iYas-moHcP%%"$VQ^g'S$6eaP^.8L`uPEGYAM+`FVge/G"&:4gqiK&Lm)e':dJ\>BjPN:0rH]KpI/MD2eM5_Cc*]i't0
%Y,T@;*B\]B<ZuCd2jA93"nI=A"FQTTk)eWue]P:ca@!8@8pNN&c\TZU>YF,e(0j+D6:\9XA[hENX_;Jbo$2sDS0QN'U!+H'_3gbR
%d9u)n8o5`TDllnY!M#2d`ilKN9aL&fBtC)oIQ_['0(en?<QGOZr?EN"dsGFn#r7@$foE<93Z3Gu\RkJ8.?B;+q$?;iP<c[?`B',q
%U\:qkL_[#0cb?f*X[6>?Z>uu(I-=g7A<&V^0q<#9Yf7RU.'OG'X\p3a\eJ$-#8bpIY`?N.H6X_$j2s3)kE!8k(%N9*SECj4a:bLj
%gka)tPR4Ga2j(fgG_#Kg.1[PXl?D1]9es&21Xbfp<]Kj[lYfKB:__`n$@/!U>&Ck%hd#ZLbpNP^Z`G4$pfWGdH%q<(djjH2L7l-/
%T>5<<OUNT*P7p1?Ne_>58bTBt8pM(5Bp"6*3'Uid*9WdO&K`QFlN;dV?)s&GJ5\L5Y[7N7Fcd=4r%*bn-eL)m6C_?Z7=2)"2ZY",
%9AiNL%Yk@0Fo_gP4%\@'&u[Y=AauG[X[:ki$pg;4FYXU5I8iJ?<a^GM`lZ*l500ua5Tk-s.cldAVW<R%QH2XO9g;nJ7LKd4#?_<.
%i7>WMlLKtBT[$d:Sd-uk3];CP8d@.H%c?k_nGJe[H`NB$eG`s\od<kY(iV1S#i*"@Uje'kGB.F!aS`2@b2^]/_YG<i%0.;/*u\jo
%=u[U7g:FqSoAQRs+O;Jidkl:2M[t]_o*Fod?4m@TV9k?gl<\F)I&n=@l`ScfnX_$eD<I<O&!=B[L4rt'7!qX9^5^[NG[fgcm/d,/
%3QaXR.*0Bih%L/h'16[VICRma4%^56XWcaU;"sD<3FS'lW$]jl5U*u<!<<h_4>_',kgR3l2!4Gq5jNQ6g."BoZ)FSI_7J7iqYn0k
%ft@Gf9H_hBJpPo2UYUAd`?:L8X!Gb'D$u+/cdVSU#1Vt\ol<&*PYKr;6Ou-hp')U^,fgGO4!OaqX32l<2M,i?73,M"g!&B\OU<KA
%4@OeoVTHk?%<`o*OJi97*1OkEb&U"MO4[#(e4clme3r-"RF%BB\MsAldmhVIqhDsmYdt9]"VEjJ0N#sAENG@#D]m'/V3GBj&a";>
%525Q+2bBLT6[FbX93+UfE34XS4TOD]Y)q/-UN2XGIWW'>]>qqBB:8+<)/&C+?+B^i=&$#mIZ'_nK&UXs5tB2:]FPetC9Ts6mom[r
%3KNpk!g.\m8o#K.W&'&T5Z$,^mj,fj@S+4HQ+<rVUou71Uq?:GrHfBNZ2n05NK14]<lJ7ELht4^bSY:\dDcBI!t>an;59!`,V"&H
%_jE9i[e-!2<k.Ir:VW0e?ZqN$I[f5Y^\>ctTJZ\5p/oJ:]&Q"8aJbbd>E$*Sg;ETB^e!9_V@""364549D?4rup"G3A5?";'&jNhF
%KP?ro=R3:^dADW]MHXiAAVG&b_bYuO(#A=Z/u?lV5UE!m/\Y.<<\&<;Fb]iW0r:]aEk?HD,NV:q5k6MnnNm(G2q4t5(141m:hX3!
%WNGtJosao(4;80F@r53i@TL3d=`1>j2Z*k\JRS5g3WPc81qe^i5'B6&fQ7foCU9c;6Z+dp.CYF&=cNL_4J<\!qDZN[GCJW`>=Y+*
%ADC0ea%,3#D,n5^Q9eFhmE6Ppn7>RL#Dp9-WQRWrEELbkcrJh'"X*<ll?XVaNSL(9p.DB;6#$tYg$lHccI0&nVhZ,]R?be677oq2
%g1CA.TPt!Ig46VWNM5Hc*6CJeol14RNa1_:77P@ge]9lX#i'b-hoYP-NaX"[4I3&gl'=3l7\$d:kVT]fK9(qiV:`s`V2cL_;;aEh
%9o_n05bNt;P-daCh^$nqT,fN]4?SqCp#pSj[DZm()E%Jl'-W,U05;cGbF5sd?Ou\RiN#t/_a.jdB3B/kr&GkB-7#3Z@urB:%a@t]
%8&f=D*%:PO#AA^g3%_bq^n.VujRfs^iGKN1_!.f#ke#qDBpO;N78!!:V7^IrAZGIc:^u\GlaL3ilC9uX=SUara$%o=RcR#D0X#tO
%ro,XP`a>D%&>SkY$>m2up5r"H,b/SLJs0l/1Z<4E-,%^V!I7\;/\^Ak<_GldK9Sk_bX]K%1LOA%-C9Xc?8&r2YOd(L3$<Qa<W("2
%S<L&j_-0Q`E=djLX+-G1ftN05^tGPQO^M.OiWi4#QL+FpMI,O##l(Xcll=]A#o#2K3sCr"hqk!@hquq]*+1#'Y09skP`<ltp3Q\6
%oOn@IZfF6#/U+]VVh^m_.`Vep/*h2X^`sBecOoY_%[)Q@LR8$2r<a[['(6_MbrapaXTr[G%(]R&qEYL!U8UK2emWOqUG17_=!,GL
%%+P,`D4r%bpi+e8jT%Sh6k:kkg8E&:(N!U.[3DSR:G&46Je?9DY#EMp8cW%n/`7,A-ktNn!hM1;=VFMB//$TuJek2WKqkm`Ur^f=
%HW6&4:t51r(81mdUu,pL8]hAl@(hNo*Jg`Kf9[a&CTHtu1ARU&i8OHe%jao?7'&>OR]-P5T:Lg4B*O^jX_,575moJQ&"l;qqZUS3
%?0QmV4%$(GX#bH#$C`&?<*>hOW_e_+I^WFY.tN>ZIr1RLK\=*W)UI'Q_MZ1C1*T?81SQRo(uEZkbgVd'F&4VNg>j-6EbS,X_[TV%
%Q,a_n2B'GLMDt[1_8QOj#>sI1[6r^A/?n/h`tGRrgNh:sZWYV7*$g6Y7!]oI-ToZVch;5#/qWU+r8$i@RI0J1+$S<WjlP5K;#]tK
%9i,32gBOiGI"!<)QZ'?"q89*h6[ecJ4-VsWH:-2Kn$YX[_l#F^D<5Y>e5ecF0kr4_>N=I=51gi\UO@L]5C@@$e?Ac&/Q/IbV`.1q
%q6SgdS@0MWPkQj.*<5YC.50RrQh#o-Dj^+dm?T2Nq"1G_0AgW9qM3C7SFZ5X[<63dTA;We]_m8cIB%17bm+%#ms_u/i@k5r2a@?4
%k:`/j\^25nC<t@5+/@QS\A$P0\D!@52[a`0',t0AiM7pW7]>93jSn[IHk=l9k&<'!X<IYAmb57[nO>#Q1Hk*oPT3t!nC0%ECL,[c
%na(M.UJi(3AujkuE8Btij`NZ9rjdOEcK'S=g@jNF#`rCYr&PEdcXR-b2;M[:$(0EEXjpMI\TVN^8,uT7XVUtnph@8YWE^Gg"hZt[
%2Mr`tgkC*M'N_5'@]WZ.m&PE''ZY/Zi""5-\^p$Ze;NGF.ch7I@'8._?E7AFd=Zaq-WmY1]]aM*`&DsGX-CZsi,Oo&>Z\-/TQ^n'
%b%NF$lFZL6#JXP\pJrH@!BN%27W=Ii0:+alQBre.[o["*3eE;5#EI7RjmQBL]Y_'2UOHH'[1ad.mEh,IE8@lJ_Z[."hC@V1lUpbm
%qQA_M?^BJ,gQ)MeQY(;oX&QME#>3`TKfhZ?ZW!Qhba$TKj1:aDS690]0Pd&J*TSO+#BD31hCA3Y_G"qW/]dVH@jO8&Ds,KJ],(A8
%*10oVX'rPc__oCbHT2:a!-^8caOl80,QMmh&3:4M>L;I7Y@.r/^!<]G/Je#&iT\+$$5&t(X1AuqR!\@?(H=FuD`WCK3a*A\2DN^E
%J8$0a^""gmgf5r_5T^A52p2Egfb+YE,V]g=fU`14/6+&qj1Vko;)%oo215X]0Fb*Gj%u?&<lP.b(V)`QY'K\AEV&/Z\[VE$\$%+-
%gA1P^<tK##/Z.k6"WOi[C#Uk!Jcl609K8Z@Y/5omHue?ggfrltAqYPV_^[<\75s'rH=PaDL)o>_0g[s9cYT^IrL"#5-HC#AB[7FF
%JO.G:SDrbpb$!Tk7JBh)mWJW.Yb\^o"-`:2>!0t0iE?Zl_R.XBSl>Lqqr_Ak\p(8?h<g6]XDsCoAu\!Xr(7t_f<#5F9L=bilncam
%SpRM6GFOduF.fd$K'Q6spcX3ZA1(^Q=)!h3d(iFe!C($upg'q&9825`gr%i_]UdBbHf67(:iN&Lp>Q*oM4o0-H>Af:J1I2,9_eab
%^k3haV/1ju0+l:=2ADkqo%!*/;I8??FQ%H-na0F!h6Z2%osUC,;-;^0cq+_k?)s36HMO;463*f_W&]8l$TPmj]#?Pd:n0D[UnrcO
%QOL%`Y18T1h%0e$cVHVWU^W%IB]S,K>#sOMdc&;V&pe_+hVp8>ofl4f?\gp5ZH)B:ID4H:e#^MOX4mfoI*(0jLp;?p5u8#^"Ck3b
%)i;b[@RYXE:Nu\X_@67A`'.4Z=i9o)TId7"^:%VHl#cKqdiDogY0j.o^!*`r=@k0U>?a":OC_"_F`]-jRu1G!at",*jJooM)T><0
%UT(J@MJN(!\E7nYg'*:*@0;jSKS`?VSUB$;`R3utmL3tIV$#sSr1V\4+l[L%>WG5o$a_O]fk8slKJ^9CXhpRU#dkgVSNqj]]i:MJ
%9A2CggEPL>;]T7mX-?+fJDhb/3o_JRD4**+6'W8a^A3^dmNeS.E[\@S+.dEVY()>L!R!hkNUh7R`9TJSEP2dXZrT,LDe]?"_qs\-
%h'R,mbWGT,Zqf6eJPJT*;1f0Mgr1>4q\R71=hX]<X&!r/*!N/C47@9C?emXmM+`jnIl54,NQ_\\V9s>X]2gp<$!qlM2'qEg?jR*\
%Wm0jnJ4M*m90dCT%Kn&u24C\R[n:q((M:KeC*T=\Ocd.#ldh1BY)uh0XJG;%TUf=7"T@Vg<QN@&KISq?N(_G+SC?luAN-(`Bnk=,
%,Z,18ZJAo,p#0W#fGW",F;oa<%Y^gK@0"e:ih@Z;[sV%#-/MgR]%[XJ*Tn>H$1BjlV;Nk-$=`=s3NR5J*RHK_fQhhE:G99n\>$K7
%8.(5!jf.^\6t0d$f7Z8JlA+.=$/HQ^S7H.ae_h@sjDIV9@[Y;'B%rGXPlF"CVD*VS)8<RPGr9j<f-O)jr%&@R<2n0/I5<94h&Xna
%E(fWQUpNh8QlP8(b[H^C]+^sFl<&CSaE`r5e2E^,]=7Y/e0U19S7/1[-Ncf/8/<G;m>0S)0K._(p/[gSp7g:La.-Z%C=/cB]SmJZ
%C;YoJ9Fi(5.c+BX\D+=!NPn,U]1rHeZG'EeO79o/ib?:/-@tD!Y7."p2pDuhg\d_n7m#nc0YZY#T(M6!&JPIk[[tLuLm;XZj2%!b
%=BrEZhDL.$PQpaF3[(p'?L!3F;IX7+kHj[d75drde!TPV/X?jV\,,;IMBTIts7Q'O2ug>cmVdUSrV&PSo$a61k&7C-hu1S;rp\Bd
%q9olSr?$Oce$n64iQja$rq,<-T7<0XIeo\gT>(6^:I"gRJ,f%75CNA!5Q(%)njIrF++3h=hu8C\oBeL:#I)m!V>~>
%AI9_PrivateDataEnd
