%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_peach.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_peach</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T01:19:13+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T01:19:14+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T01:19:14+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6xnNu4dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqEutY0izJF3fW9uR1EsqJT/giMkIk9&#xA;EWEvfzv5PRuJ1qyJ9p42H3gkZLwpdyOMd66Pzp5QkBK61Yin81xEv/EmGPhy7ivEO9d/jDyl/wBX&#xA;uw/6Sof+asHhy7iniHejbXV9KuzS0vYLgnoIpUf/AIiT44DEhbCKyKXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqluq+YNO011gkLT3sg5Q2MA5zOPHjsFX/ACmIX3w1&#xA;tZ2CYxMjQFliWt+ebi2ultdQvY9EMkZlSGJPrFxwFaVlkX0FLcSAOLb98ESZC4Di/Hdzcg4IwNZJ&#xA;cPkP18mH3f5h+X5fqhljvdQMprei7nkZIxXosQZYmJ9lAp92W/lsxvcDuph+YwCqiT32u0DzfbT+&#xA;YPRt9Ms7bR4TcOZoYQjGGGNnDGq1rShNKdcrzaUiFmRM9uvVuwasHJQjEQ36dAmEP5taY1zGptnS&#xA;1djGD1YfGKMyryIAjPQVqdsqPZsq57tw7UjfLZu1/Mq/1Waa30nSDcULfvpX4RRx1orS7Ebj4juP&#xA;DfriezxCjKVOPm7ajEckO1xr88ZW81Zli+00diFtYlDmisJePqMvh0LfscstEMY5R+e/7PxvTqcv&#xA;a2aWwNfjy/X70FJpeicgJrT15OXGs0lw8nMb8eHqrUkdV+3/AJGWicuh+79X7PNwTmyS5y/H4+Hm&#xA;rQ6doMYr9VEPF6FhPcBFbw5xuCh8FkUEYDkn3/d+Pkx8Wff+Px3JzaSXlqF+paxfaeCQFSaRL23/&#xA;ANj6tdv9Vsh4p6gH7Cyjq8g808svNvmCy4vqUUer2LD/AHq01CJ08DJAzHkD/kHbwxEoy/onzcrF&#xA;r4k1LZlWl6zpeq2/1jT7lLiPo3A/Ep8HU/Ep9iMZRI5ueCDyRmRS7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYqxDXvODyXL6Zo0lGR/Ru9TCGVIpD/umFFB9San+xXv4ZKVRFnn3fjo2Y&#xA;sRmfLv8A1ebHdR1JtLgaPTDHbTTGtzd6sl1G8r9KtccApJ7fGKewzGjHxDc9/wCrX3fsdhKQxRqF&#xA;R/rWPt/axG2tb221y01jUrVJ51lWRUWd5RMBuGgeRmDunXiJGrsOI65mykDAwiaHu5e/+xwYxkJi&#xA;chZ9/P3f2/Bk2vv5aa3l1kwpeaReRtFfQqOLx3UakwvsOUbtvG3TfjmJhGS+C6kOXu6+/v8Am5uc&#xA;46M6uB5+/p7u75PPrjW2tbq9hhYTBmvIDMuyvFOixKy/RHXNpHDxAE/0fs3dTLNwkgb/AFD57K2m&#xA;a7FbagTptqklxcBrS0eZRyiQp6ULKBVRIzHlId6/ScjPCZR9R2G5/T8O5RqRjJkB+wV9/eztoNL0&#xA;y0XS4bm0gtoDGCZpol+sTtQtPMCwLJH1CftNt0AzCuUjxEG/uHcHQ3KR4iDf3eSjIY7l/wDRb23m&#xA;IduAW6iLsSwQMzI20kgPJ3AqkfwIKnCNuYPy/H7TuUjbmPs/H9vNYNI1FFBkhdI2AQFFUVBBYIBU&#xA;xqlNyCfTUfa9R+h8SP4/H7e6gnjH4/H7fcG4xHCVkFOXDkjgsB6Y7qxMcrxj+dpIovAYnf8AH4H3&#xA;lB3/AB+P0lWikmjAdKW6zfYZaQc/9RkEMjn5JL88iQPx+D+hBH4/H7EZBeukwQvI7ggmMhZJiRTs&#xA;/wBWn/4TIGO34/aGJj+PxYVLi50w3K3sEz6bq6UCXqxENTr6c61b1FNOjfRhgZx25x7v1M8OSeM7&#xA;cmUaB5vjvbhdO1JEs9VYExKrc4bgCtXgf6N0b4hlvCCLHJ3OHURyDZkeQb3Yq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FWMeZ9Tnubw6BY3P1NVga81zVB/x52KfaZT/v2T7KZdih1LE7mmBxa1&#xA;Ja3MV/Z28Wm6UEMek213G/1c27U+P61EX4zyEVf1FynLjE7HM9a5/I8x7nPxZDCjyHS+Ve8cj72U&#xA;6b5ilvykb6fzSUhWlgubW4hAPUn94jkU8EzAyYBHr8wR+h2GPOZ7cPyMSPv/AEJZr/kgiKa40DhB&#xA;I/xXGluA1pcexjPwo3gRT6OuXYdXuBPfz6hpz6PYnHt5dC89S3vZJpYUkazju4zHNZy8pjRGI4sf&#xA;BGHwFzyXp883JqIxF1xcJ58vx506yOKUjV8PEOXP8eVt6ToHlq2jlutf1DaBiBp9uG9R6EgcjTbl&#xA;TYeG9Rl51E5gcA59XVagZIyMYjl1Q2s+aYLlIrTS9Pi02xglWaMRiszOgIVnc9aV6ZZjwEbyNlhj&#xA;wkbyNlklr5+uZoYDeR8kiorXFrVQV5JIyyRA8lP7viStRQnbMU6YA7fb+txzpwDt9qYQSadfRgqY&#xA;L63XiHkZUlCqDGCzKwLJ8KSPuPAdcgRKPeCwII8lOLT0haMWhlspJGQMLaRoh+8+rLQxnlEfjmkq&#xA;OHb2wmd89/f8f1BJlfPf8FetxqZKuUh1CRwk3qFVguA7xxMHoa28rosqhSwFD0GCo+77uvxCKHu/&#xA;B+KtDdW9zI6I7R3T8jJazCQXBSvwl1qJLlnr9lXESj2G4MSPd9n7PvQQR7vx8vvVWCCMRlR6YbgE&#xA;bgyh/wCWnFrcP4pDDI3vg/H46/MhH4/HX5kImNriMpEXMBIqsRkeORh/kxK0jH/kQvyyBo/j8fex&#xA;Nfj8fpRLJaXMJtGZklBDhxIEkilQ/DInqJEea9elPowAmJsIjKUTxBl3lnWZtQtngvQq6lacVuQn&#xA;2JFYfBNH/kSUPyII7Zca5jk77BmGSNhOci3OxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoXVdRt&#xA;tM0251C5NILWNpX9worQe56DJRFmkE0808yC7tdGsdDnWR9d81Fdc8yi3CmdLUf7y2qK5FeC78P1&#xA;5mZCIR/Hw/X8QjFHiNfdz8/1fA96WWFPrD/ULiNpWJ9Q2E62M7EdfWsboGHl/q0zAny9Q+Y4h8JD&#xA;d2EOfpP+lPCfjGWybtJYac0c+sKbZhv6lzFpokPy9FmY+PwrlFSntDf3cf6XIuMN57e/g/Qi4/zF&#xA;0KRgIluJwxovo28rfTUgVr7ZA6GY50Pi3y1uL+G5e4F5rqurX48w3k1nbOYpJZPRR4nVwrtyK8ev&#xA;XembEaSEsYEj9rpZ6iYyExH2Ln0y6eMXTwzwlwS1zOvoo1d6F5+EZ+VflhjID0iq7uf3bplAn1G/&#xA;edvv2UIfLN5qHFraFVgr8V7xdYiP8gU5SnxCJ+GWnOIczv3fjk1DTmfIbd/45/BkOi+R7i5K/Ui1&#xA;rbxhud+45eoT/kqSr1NNlJVRX4ix2xc2qA+rc934/B9zkQ7NGUV07/x+PO0uudPeC6aOQfVtUtQO&#xA;DQEg05f3sbj7aH8K0OGOQjcbxPf9zptTp8mCfDMbJlb6+IpDDrFFRXKwalbJ0KEnlJCvSnMsvHYM&#xA;ehxEeIXHn3H9bicF/T8k0mAighvIWWeyJUpJCwdeKmMsikd6QxxAdeuRG5o8/wAfrJYDc11/H7S5&#xA;DDciC3uQk8Z9NSj/ABKrB4YWePf4fjEpDKQaLibFkfjmf1LuNx+Of7FKzluo7WKeORnUhI3jZ+Ey&#xA;Ri1W7dYrht0WjnY/Ft9sYZAXX451y/HuTIC6/HOuX49y+2u7bhJGAFZSDPbSr6dC1AS0JYLQs3wv&#xA;I0rMegOMon8fr/sQYn8fj9SPtry5D+jGWUod4kDqVA/yIArL/s7dcrlEc/x9v62BiPx+39aKS9az&#xA;nj1WGUm4sVP1hWkDvNaVDSoy8UeoX4022Ye5w4zRrofvbtNlOOfkXo6OjoroQyMAVYbgg7gjC71v&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkeu2I1vXPL/lhhyt9Su/rGoKdwbSxHryK3s7BFzK0s&#xA;Lk1ZZUHmfmDV11zzXr2v3KxtZ3V41tZtdowtjFb0WNVuI6vbyBQCG6GuDPMk7c+e3Pfy6hyMEAAb&#xA;5ct+W3n0K6S3uJ7YGX679TIIZ5I7XVUodgsM4BelD1PTMUSAO3Dfxj8w50ccp7eqvcJ/I80Touma&#xA;TbRqkdpGqhgxlaBkmoabc5CT9AyGXJI9ft2dxo9DjxiwN/OJH3sjsZ/X1H1XBJJoiDoB7+wGYkxU&#xA;XLyRqFBNZrazul/0iZoYlJXmJZYlJBoQfSIr9OV47uhXxcDJC+hPu/tCIsvImgvP66fUDMdxM/Ka&#xA;T6DwkbMoQnLbjHzP3AOFKUIG/DN+4feSndx5ZgW1PqgvG3+7rlPQgFO6o9ZZT4UX78kdJwi7PvPp&#xA;H/FH5MRrOI1Q9w9R/wCJHzSu8tvq8xiowAAI5ji2/fjuV9q9swskOE05uKfELYj5t8vi+43CfupY&#xA;t4rmMfGjHY1HdW75fp83Dsdx3M8+kx6nHwT59CwRop0lEUsYhuLer3EQqQ4/35F4qafR3zNNDzB5&#xA;fqLwur0k9PMwmPco2El7ZSxnS7j0ZJlQz2zCsElZOB5xn/JYdN8sMwQeIWB8+TTIg/UE0g1vSr4R&#xA;wXMa6TfsAyVY/Vpg6UojneIlDxHL7IJ748BG49Q+0frYGBG49Q+1H8JIHkt7z4U5c2dacWR0kR3F&#xA;CRT0JmIodhGO+Ru9x+PwR9rHnuPx+D96jJEXHKVGF5CJJImjbhIsz2/RXAO3r2sqdKGo2wg/L9v6&#xA;iEg/L9v6iFeBpPWFnPwkAf07SdUCxSuVDhVSRZYo5CjKeKoOXXl2APKx+P0/jkxPeE4sbiZaIBI0&#xA;ewY8C0QHSlY7j0+3hlMh+PwGqQ/H4DK/JUxOifVuXNbGaW1jevKsSNWHf2iZRl0je/e77TT4oAlP&#xA;si3uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVJrS5Nv5i8162Gp/h/wAuskYpsJbppJeX3WyjM/TD&#xA;0EtGQ+sPIfKtvdrpUUmnlpJOJNy9hIjTjkxPG5s5zwlG/wALLTbMTUyHF6vt5fCQ5Ow00TwAx+PD&#xA;z+MTzTZrUCIu1jbiQkB5Dpd1aSnfuVDxk/I5Rxb8z/pwf2ufpoer6R/pJD7kwtYwkKgKF9lBH/Et&#xA;8qkbL0GONBExzSR8uDceQ4tTwyBFszEHmm+jX80l3BB6zQqAeUgkkjYmtTRo69vEYcZ4CTdfjycP&#xA;U4gIk1fwB+9nml6hJ9VQfXi0Yr/eak/Y+PAPTM0Zj/O/6WV+h0GfCOL6d/LGP10i0eKRibZxJN0J&#xA;sI5Z5vpurj7HzGEEH6dz/QBJ/wBNLk0kEfVsP6ZAH+kjzY9q0XxEoiqsZpIsZ9Xizf78m6O59tvx&#xA;zW6iPd0+Pzl1Ls9PLv6/D5R6Bj+pXLQbOvO3mUqadVNMqhG/e7HFDi5cwxTU9JS/twTyiljJ+r3S&#xA;VDRvTsf1jvmZDJwny7mWt0ePUQ4JfDyYvcW1zbXjR3KCK5XhLORujxMQRLF/kkrQjsdsv2rbcdPf&#xA;3F881mkngmYS+CElgilhKSg/YD9KkERSOaA07KgycZEHb8bj9rQCQdvxyROl6peWCtbtA+oafExV&#xA;7dWrJA/T9w+9VqAwVhTYd65KVS3J4T39/vRICW90fv8Aen1tPpt0qyabdiZkoDEVKzpTiRWJtyVd&#xA;FZfFlpWrnIESH1D9X4/HRrII5j8fj8bLWghYrHcRBoV2ZBUgpx4DiRuaJw4Ebn00/nXGz0/H4/Se&#xA;5b7vx+P0nubtJrg8WuoImvI/766oXZwvw892Ee3IcmK0oQ/RtmQHTl+Px9iyA6cvx+PsZ95Jckas&#xA;hBFLxXANdvUtYGI3CnZq9QMA+kfjqXZ6E/uwyXA5jsVdirsVdirsVdirsVdirsVdirsVdirsVYrq&#xA;b+j5b/NKZac2ttPiPjxaMr937w5ssH918R97iz/vPgfuebabFpz2OnrNeW6ziCIrBqsb2sigqDWC&#xA;8i9NihP2Ou2YGQyBNA1f8O/ziXaYxExjZF1/Ft8pDoyW35QQrJJcQyogqEGqyzg1FKr6kNe/jmHL&#xA;c8j/AKQD9LscAN1xD/Tn9SvcNC0zGBSsWwQHrQAD3yMbrd38AQN1PCyTfQZI4ZGmRibmh4RqeLUH&#xA;gxFN8qmSCO5xdUDIV0ZnoVyRbRrzdZAPiBaz5eNA0ioT92ZeLKCdv95+l0mqx+o93+f+i04nuQ0Q&#xA;Fw4dCK0vb5DH/wAiLb7XyzIlOx6v9lMV/pYuFCFH0/7GBv8A00kh1tpnjikLE26njEeAgh37QxbE&#xA;jxb781+psgHp7qHwH6XY6UAEj+L38R/zj+hh2rTTLJJBJ8UbUeI+H+e+V4wObucERQIdp59TTrqE&#xA;Alh8QA3JqP8Am3Gf1Arl2mChr/QF1jS40D/V9Ssmb6tORXiT1RweqMOoyccvBLfeJdZ2noo5xR+B&#xA;YFeW08F1JZ3EJtb1FJmhPxKVegMkZ/bVuPFfCu+ZgO1g3H8bF4jPp54ZcMlFpKS+ow2c8HQdArl3&#xA;A6j7FKn5nxwgbV+On3tNbN/U4Lj0mAaK4DkRTW6n1V4RvKAKEH9ihY7CvsclCZB8vP4ByNLDjycJ&#xA;5UWSxad5oi8j6R5pnls76z1Kf6rSRZIriN2lZFLvGCrpyBqact++ZU9PHmNknSAk1sv1dtX8vyWj&#xA;arp6KJXPozWkpnFUUlkaNlVuJQkE16dO2Y/hCQNFry6MxHNm3kL0J9LudSgPKG/uZGgbfeKAC2jO&#xA;++4hrvvvkZAgAH8dXO0kOHGL5slyLkuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjF7btNpf5n2Xe&#xA;TSrK+jGwJWBJuZ3PQeiM2el3xkOJl2mC858tNy0i2EUepopjUN9TkhvYCR8JZoJeZjJ7rxzW5/rN&#xA;8PxsH5h2+n+gVx/CpD5HkyawiIq/oXzj9oSWtpbKR/lFliP3HMOZ84/ORc/CTE2OL5RCZrpZaG0U&#xA;gEUZpaEdWApQ98pOTcu1Ge7KlfaaILKN1A5r/fGu5Jp0+WGE7LZjy8Ui3oXD6w9SOXH4RT798c3J&#xA;dTdJtot3LDblkCMS7VMqRy717c1bImZidq+QP3uJqcYkd/sJH3JuvmDUYx+59GE92ighRvnVUB+7&#xA;LBq5jlQ90Yj9DhnR4zzs++Uj+lLr95r4ObmV5JHG8jEs1RuNz4ZSckibJsuTiiMf0igxd4JTCZyS&#xA;3FzG9etcyAd6dmJC6RWiAi8cE8SEIKnrWoyGXk1aj6U3iikW4nkY1V+IQeAUf1OUE7BxZSFAMc86&#xA;2FneCBZryKyljHOG4+rSzTqQeqPG6UHipBrmVpZEXtY99B1mvwwyCpED4En72GTafdq4S0il1eGh&#xA;WSaC0uITT3WRSjVpvxYVzM26nhPmQXn8vZh/yZMv80qdvdLKk8lnK7ehZzST+gASS0VWLO20YFCS&#xA;ftHkVG+SjAj6hzkKv3/jy2tl2bhIE59wr8Hp+no9CnkWP/nHXyuGr+81KIrQEn4buTag+WbHIPSP&#xA;6x+4ogd5f1R94SK78yXeveZ/rcFhcSS6YskWkaUYnWQySij3FwxASNdqCrZhzx+nh6HmXH1Ilk9I&#xA;Gz0jy/pY0rRbPTxx5W8QEhXZTIfikIHgXJOVSNm3PiKFJhkUuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxVLbSCI+foLOclbXzLpN7pEhA2DoBOlf+efq0zP0Ru4uNqNqLxDRFgtbd7PULex+tWE0sEour&#xA;a4Dqysag3EAYHc0owqMo1AlxbcW/cR9xc3Tyjw78O3eD94ZbpItS49C1sOYoyyQWt1d0Ps7LGF+f&#xA;LMDLfUy+JAdhiroI/ASLI9QF4sNvcqx5xD46gBqvQdBUe3XMSFWQ7rT0RR6qOp6rbnSHlkPBuQX0&#xA;9yxao2VRuSTsBhhAiSmsR4pfSFNfJXmq4to7mO+h0+4c/FZvH6oWNh+24O7+IX4e2/XNTP2iwRmY&#xA;8BnEdbqz7u77XXZddmkbjUR3Vf4KHvn8y+U5rQalLFqel3PKMzxolsYZQCygl34kMAepH9cvR9oY&#xA;dWJcIMJx3r6rHwHRoGryCY46IPw+8pppWvWmoyPCqSQXCKJPRl4VaNthIhjaRGWvg23fLzDawbH6&#xA;e7enMhlEjXI/juTLINqX2yQutxZTKP3bFj7hjUHLZE7EORMkVIINBxvjdQsDCJQrN/r9T8ssPKi2&#xA;n6eE86TzMZwkm19rkNGIpNRQU3WwjgYHf9ozIxB+RzIw114fjf6HHzk9OL/Nr9LGrzT72eCR5dO1&#xA;K8hVCS2p3yQxDbq0UDGvy45lxmAdpRH9WN/e4nhSkfplL+tKh9iQarcwW+gXkP1mMmOMRLZ6ajLb&#xA;K0j/ABGeb9o+xI3/AGdsyscSZg18Zc/gGvVzEcRiJD+rD6R7z+Pc9R8yWhtfJP5YeXqcZpZbS6uI&#xA;j2CR+vIDT/KJzN1Bqh/RJ+bp8O4J8wPlf7GU5rXIdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;iqS+bDc21hBrNope80O5i1KFFNC6wH99HX/LhLrl+nnwzDDJGwwj8wrJtJ/MeW902WY6V5qhTVLC&#xA;SC6FqjvIvKSrOrRtVqtQ9mHyN+sgDvt8r5p0WQg0L37jXJDx3J5qL67VSxH7u41VpWJ8Bb2qoJPk&#xA;TmsMf5o+UP0nk7US/nH5z/QObMdL4GxjCpwQV4j0TbjrWoib4lHz3zAyfV+2/tdji+n9lfYgfL+m&#xA;jUPN1zNOqm20fiyoPsm6mBKnfr6cfxfNh4ZrO3NWcWnEI88nP+qP1n7nH1efjmID6Yff+wM8zi2h&#xA;IvPek3WqeT9VgtGQXMUDXEaOnPn6FJGRPByqngR+1T55v/ZqMDq48RrY15nu+V+/l1cbVkiGzx3y&#xA;reyPJCBOLaStbO4X4uMj7EUPRX6NG3XbjvnZ6wHGTIC+8eX7Okh8WeklxUCa7j5/t6g/B6VoeqS3&#xA;9vItzGIr21f0rmNTVSaBldK78HU1Ffcdsw5AUJR+k/inaYpk2D9Q5oi/eGCGSYqDI49MeJr2xgCT&#xA;Tk4wZEBT0+wWO14TCrSEM6noKbjDOdnZlly3LZHZW0Me16/00ajHZStetePFyjt7KVo2ZampCq6V&#xA;Ip1zKwwlw2OGvMOJnnHi4TxX5H9qR3mnwPG0o8vXdzQj9/q158CkmgJVpZqiv+TmTGZ5cYH9UfsD&#xA;QMQJ+gn+tL9pS2Sym8w6zoHlGC8tpo7y8QXFrpifuIY0p6jmT9tgnJjSgFOnTM7R4rmZUffLm6/t&#xA;DPcQLj7o8g9S8yXS61+bvCLez8sWRjUr9lZ7n4eP/ABslqJ2ZHzr5ftceEeGMR8fn+yk6zEZuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVxAYFWFQdiD0IxVg2u+Xm1fybeeWFUPrXlFzqGgFxzM&#xA;2mStUx0avP0m/dkHbZfHNh4nFAS7ufu/ZzaIQ9fD38vf+3kxLy/fiayS4t1vCKcZ0tLa0sIEcD4l&#xA;a4IQ0H+S30Zrs0KNHh+JlI/J2uCdxscXwEYj5sx8uXUc0Mnp+mVryrC0k61Ox5XTgCVtt6dMwM8a&#xA;P4H2dHY6eQI2/X9vVNvIEQOiz3v7eo3lzct3+EyGOP8A5JRrnIe0GTi1PD0hGMfss/aS4OM3Z7yW&#xA;S5o2xVtpzb3Ec6gM0TBwD0JBrmRpNQcOWOQCzCQO/kwyQ4okd7wPzvpdv5f8/wCp21pxjtndL62J&#xA;HpMq3iib0gR+7KxluIDbH2z1bJMZ8UZgGpxBr3i/f15h1unPAa226/j9LI7aK21KOK69WSK5CBJm&#xA;tpZIWIG5R+BU9d9+mcycuTATEfT5gF6OMI5QJHn5GlcDWrSsVo6Xtsx5hL+SR3jYfyvR2dT4MdvH&#xA;L8eugR6wRL+iBv8AjyXwskD6Dt/SJ2+KOg8zenEF1G0miuhsVt45LiJv8pHRdh7PxOXAwlvGQrzI&#xA;B/Hutj4khtKJvyBI/HvY95u85alLHbafoEVxDd3cqwvNLC8ZUuQqInMbsxPavtmdpMGMkmRiQO42&#xA;4Ot1chGoAjzIpmq/ln5Z+rMkn1ma7eQTHUnnf63zVeAIlFNuJ6UpnEH2i1RnxAxAquGvT8vwWvwI&#xA;897773Y1rv5XahbSfX9NmbXeB5Np2quZGNN/3clVWvsw+nN1ofaeMvRmHh/0ofpHP5MDiMTf1+Ul&#xA;35Y6laabd+YvO+vmC0vdFtxYabpQURPE7qWJWAksNgQP5qtnaYJRhi4oHi4uR52T1ddkJy5PVtEc&#xA;+lAMl8i6bd2+lSajqAI1TWJWvrsHqvqf3ce+/wACU6965iTrkOQbbJJJ6sjytXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FUq1u1v0kttY0kBtX0tmeCJjRLiJxSa1k/yZU29moe2XYcnCd+TC&#xA;cbHm8y80afpdlfp5r0e3hm0DVG5Ti7tzO1lPyo/OEMtHV/hf/K36FcZDfw7P9GjVjuvycmMhXi0N&#xA;/qsXR76803tdVuLaP61dzOo9Mm3Fy8dvy+GqiCzhLE1p1kNRmBLGDsB8t/nI/odjHKRuT89vlEfp&#xA;T/yJqAt3/QchflFa2ckXM1+JrSLmB2UMQWVa1JEh6ZxnbGHi/fDrOYP+nlXy5E8qMRzcTBKvT5D7&#xA;vx9rMs0DkuxVIfPHkbTvN2nrIrx2nmOzVEsryUsIZYUJPoTgBxT4jxbjt8s7nsHt7H4XgZzw8O0Z&#xA;eXce6uhddqNPIS4ob94eQ63pvmXybqS6VqBRLmdEltGtHM0c0bMVUQkCpIdSvFvkKA/F0mTRwy1K&#xA;NTieo3Hz/V9u1DDrDEH+E/j8fq6oalrvmnTbuJtbtLrTZWjPpW9zFJAzRk/aUSKtSrdD379q1y7I&#xA;jEUB+P1Ng7SlI2Sn+ieWvzQ1VzLa6Lcwx+lHI896fqcJqG3RpqB+XJW+Gvvhl2XARuREYjqe7b3M&#xA;f5Tle25/tejeXPIek6JDb3WoAal5po7XOoNK8sELSsSY7ZG+AcVIXlSvWmc32521ixwOm09bipTH&#xA;3CufmfenDinklx5CfIJ9nEue7FXlt15Ng8wWj61fTyzapqMHrWUjlfTt1ZjJAqKo6BeNa12rnp+C&#xA;X5URxQFRjV+ZrdqxaSOaBkfqP2M18o60+s+XrO/lXhcspjuk6UmiYpJt4clJGZ840XXApvkEuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoTVNY0vSrf6zqN1Haw9A0hoWPgo6sfYZIRJ5IJA5sbm/N&#xA;Hy0gBhjvbkMaL6VtIAT4AyemMPB3kfNpOpgOqEk/NW3Clk0e7IFPtvboaE0rT1Dg9P8AO+9h+cgx&#xA;jVfNNmdVN/p+m3a2V8Ka1p06w+lNUcfVjUSN+8psdvi+eGYjKNcXqHI7tuDXwhLvieYQsEFppluZ&#xA;tPdp/L+oApBdW4gjlR5DT0LueQB0Ra7Gte2QJMzUtpx6G/nEOyjEQFx3xy6ivlIo+HUprebTtQt3&#xA;UTzWdrKZiaorRxCFxVatx5WrvKf99xlR9s5oJ6cSE8chsJzFe+XEPj6wI/0p3/C43FRB8h+Ps+Qe&#xA;r6VqcGpWUdzECvIL6kTU5IxUNwalRyHLfOK1GnOKZif7fNz4S4haLyhk7FURDf3cMRjilKLv0pUV&#xA;60bqK96HM/B2pqcWM4oTlGB7v18x8GqWCEpcRFlY1w0iIkyR3Cxv6kXrxpNwf+dPUDcW9xl2l7b1&#xA;eCJjCZo99H5XdMZ6bHI2Q6W5uJv72V5N6/ExO5+eYObVZcv1ylL3klsjCMeQpSyhm7FUr8z6gbDQ&#xA;b2dN7gxPHaR93ndSsSD3LEZndm6Y5tRCHTiF+7q15ZcMSUPeWMWnPFp0R/dafBBaIfaCFY/+Nc77&#xA;Vm8hcrQCsMfx1Sz8tVLeWfrX7N7dXVxGP8l5mA+/jXNnkFEDuAdJdknvJZTlauxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxVi3n6TW7aztb/S7yS09CQx3PphGBSUcVZldXBo4UdO+SEqB2to1EpRjY6PK&#xA;7+9nkna5vppLm5Ao1xK/qMB3A2CxL7AA+xwWZfq/HN1kpynzKHErupcMWWg+IdKN0ANRRfao/wAr&#xA;jjQH4/H45WxpazEdd+/LoQQeO9QAKH4eg4nYhftYQPx+PwfPkn8fj8fqd9Vdl5LG7LT4kANQCDuB&#xA;safCR4g7Hryx4/x+Px18l4vx+Px9y6zvbjSpZZLSeICYEXNjOytFOKGqvHWu/iAOvbcLI+sUQfeO&#xA;nx/H68zS6yeI7bx6jp+Px7zW0v7W70maVLOSOHSZvVns2qzjT7p0eYIerKJo2Wv8khrmt1GCQz7H&#xA;fLHY/wBOIIF/5pv3wc/xYSFjkD9h/b97KPLOsXlpeU5c7hmWK4UmnOZpAjVr2N1c3Lt3pGM0Ov0s&#xA;Jw/o8x5Cr/3EcYHnNvxzIP4/HMn5PRNP1O01C3Se3aqOqyAGleMg5ITSv2l+L5Zy2fBLFIxl0/Rz&#xA;+3ZzIyBGyKylk7FXYq7FXYqoXV7BbBebfG7xxog+0Wlbiu3h1PyBy3HilPl3E/LdBlTFdOuJfMvn&#xA;jTVf/jkaRE+r3TD7BRZiLQV/mZoUlHsWzu/Z/QRwxlkPMbfKPq/3Rj8HW6mZmREdf08v1ofzvq1y&#xA;LGZbcctT1eX6rZoOvq3BILewRSTXM/TQ8TLZ5cy7jUzGHDQ51QZRpGmw6Zpdpp8P91aRJCp6V4KB&#xA;U+565nSNm3SAUEXkUuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVSu7WC7tpbW4QSQTIY5EPdWFD0w&#xA;gqRbx7zJ5en0nUWtmJLEF7e4FB6sQPU9AJF6NTbvsGyBFf1XT58Xhn+ikc0MbfFLGjt05so5eB+I&#xA;gt3p4/TTlKMj0P4/H4rlUD3fj8fjyakas/2R8I3qSBQUO9D7b/M/5NST+Px+PtTf4/H4+1cLe3pV&#xA;4VcmgQOq8tqA1JGx+HjXxLdlwcR6H8fj9HejiPf+Px+jvXJIUHBCQSKfuxxJqKbDxPMkD3QdjSJF&#xA;8/x+P1qR+Px+Oatp+qSafqMV8kS3ESBo7q2O6TwTALLCQeqspCrXwTxORyYuONXUuYPcRyP/ABXk&#xA;ZN+nycEt+RTW5sW06e3jsZmuNK1ZWbQNQO7OZjJAsDd/Xge/kZx7BqZjajGJR8Wqr6x3cPDKXwIx&#xA;xA8j3F2cJb18vx8WQWmsKrmSGT0YJJOQZTQKk8piRlI/aj0+wYinTlnPZdLYoiyB9sRZ+By5B8nL&#xA;E/x+P6IZZpnmRpIkN2FUkL6xO3pO0BupQafsxRsi18Tvmlz6GieH4efq4B8ZEE+5vjk7/wAdU1TU&#xA;7Nl5M/pkbOr/AAlSIxKQ3hxRqnMI6eYPK/7a+9s4gqyXlrGrs8qKEBL1I24rzNfkprkRikeQ5/2f&#xA;emwoXGr2FuJecm8KyNIACaLCodz9HJR8zTJw005VQ519uw+4oMwEn1bzU8ImS1QeshlWPlQhmT04&#xA;VGx2rc3Cp/sWzP03ZwlRkdtv0y/3ESfiGqeWuX4/BYvrWtmOZpllaWVWvRYftSSTWqDTrZFpUuzz&#xA;yzOAPc9s3Oj0RnUQOfBxe6R8SXyiIR+xonkrf3/Zt+tlWkacPK3lhrO6ZE1e+WObWZQV4wxQxhIb&#xA;bkP2YYlAO/ie+dLqJCEfDh8fibPxJ3bdBg4peLLkOX6/glXleyfWdV/xNcoVs4VaHQ4mFCUbaS5I&#xA;PeTov+T88vx4/Djw9Tz/AFNWpz+LO/4Ry/WzHFodirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;qD1XSLDVbU217H6kdeSMCVdGHRkYUKn5YQWMoiQovPNc8g6zaM72a/pC0UVVkKrcADs0ZorUHdPo&#xA;XsY+GOn4/H4Lr8miI+li7wKkpgKlZl3MLq0cu3QlH4uo8P6/EIkSHP8AH6Px8HDlGUeYpabW5LDj&#xA;GW2AoF+EDpsDt7f5kYOMd6OINfUZowWZaFq1ZjQb/wCt8+/jv+1yfEB/H4/Hwp4wfx+Px8FsVi9z&#xA;Oba3D3lx+1b2ytM++3xkfCvU/ab9bE2REjuBXv2/H48m2EJS5Bmvlzyt5isdOu4tSsI7zQ7thJca&#xA;A0i/WOY2+s28y/BDcIPs0ajbgkZZGgbvfke4ju/UenmLB2GPDIRolA3flDVFspZvL0knmDRI6xzp&#xA;GhTVLJWg+q+jdWgAf4IWcBkX4qlumQy6CMzx4/q5158XH9sq8tmUcxG0vx0XWOs2moySUlWtw5iu&#xA;EJoUF/fO86Mp3rHZ2aqfnnNZ9JPDsR9PL/knjAj88ky5sZiX47z+oJlaak1wkJmPp/W1h9bkdwNS&#xA;le/ukb/VtIFUeGYeTBwk1vw8Vf8AJMDHA/GciWYlf479z9jodWNx6ElwxRLj0WmB6gXRfU7pG9lt&#xA;YI4/kcZabhsR/huv82sUD/p5Skonf47/AFH7EMdXREt5NQmWFXazFwWYAK85fVbtdz+0oijp9HfL&#xA;fyxJIxi/rr/NrDD5eqSOPv8AL/iipWsrQnT5bxJJL+X6nNBpUaM93cSK017Pwh+0oNzMtXei/BXw&#xA;reMEs0pQxCx6xxfwgemEd+voidhv6vex4qony/X96d6bZWXleKLWvME8S6nbKU0+z5iWKx5kliWA&#xA;/f3LFmJKigJPEZu8cBjuOP1ZJcz+OQHQfPdsx6exxZDwwH2/j7ei6HStU8zzevqsclnofLmLKWou&#xA;Lsg15TjrHHX9j7R70y/FiGPc7z+79q6jVHIOGO0Pv/YzFEREVEUKigBVAoAB0AGScZvFXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqh77TdP1CH0b62iuov99zIrj7mBwgkclItLZPJPlF6&#xA;10i1WtPsRqnT/U4+GS8SXewOOPc6DyV5SgIKaRasw6NJEsrf8FJyOPiS70iAHRNbWzs7OIQ2kEdv&#xA;CNxHEiov3KAMiSSypVwKl2o6DZ3s6XaPLZalEKQ6lZuYLlB4eov2l/yWqvtk4zIYyiCk2sWvmyRw&#xA;+paXpHnCNQQtxdRCx1PjSgUXEPFNhtXauZH5ixR+0WP0H7S0nBXJjNzeaSgdbjyb5g04iok+qXEl&#xA;4grEbZiskyv/ALp+AGvTpmJPTxPKGI/5xj/Fxcql/Fv72QMu8/K/JKry80K7qtnY+YWlct+6kAi5&#xA;8olgK8oo5zQxIEPwdPpzGOkzXtHDAf50zzMuvB/EbbBKPUy+79a/T9P1prgnT9BvLSc7m4ENLg0F&#xA;P97tQaqbD9iJckdBxCskuMd3KP8ApIc/84lsjKI7/h+s/qZbpGgebI4nW2Sz8vrcD/SrgFr/AFCU&#xA;139WZ+IavuzAeGZHBECr2HQekMhko3EAeZ3P6k70vyjpNhcC8f1L/UR0vrxvVkWvaMUCRj/UUYbo&#xA;UNgwkTI3I2U6yKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:5BB02597D6E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:5CB02597D6E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b3e69a8b-d37f-724a-bf7b-cd90ba0cd034</stRef:instanceID>
            <stRef:documentID>xmp.did:80C4BA9779206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.878431 .745098 .545098 rgb
f
210.873 664.072 mo
216.838 666.17 228.654 660.807 232.326 658.35 cv
233.994 657.229 234.943 656.721 235.732 656.291 cv
236.549 655.846 236.959 655.631 238.568 654.283 cv
241.893 651.506 245.385 650.662 247.518 650.428 cv
251.889 648.104 255.768 647.963 258.232 648.252 cv
261.857 646.658 265.193 646.482 267.721 646.982 cv
271.049 646.139 275.467 645.838 277.709 645.74 cv
280.6 644.869 284.654 644.451 286.529 644.299 cv
289.912 643.205 293.576 643.584 295.803 644.006 cv
299.139 642.979 301.709 643.119 303.553 643.65 cv
307.869 642.818 312.826 643.939 315.768 644.838 cv
318.568 644.174 321.287 644.486 323.197 644.924 cv
326.537 643.607 329.748 643.713 331.646 643.959 cv
334.846 643.268 338.74 643.49 341.256 643.752 cv
344.521 642.252 348.123 642.369 350.506 642.721 cv
353.982 641.236 358.014 641.49 360.631 641.92 cv
363.318 640.83 365.693 640.764 367.189 640.9 cv
370.693 640.307 374.959 640.752 377.385 641.1 cv
380.357 640.053 383.244 640.014 385.068 640.15 cv
388.436 638.9 391.1 638.99 393.053 639.486 cv
395.83 638.744 398.498 639.189 400.424 639.799 cv
401.834 639.354 403.26 639.17 404.502 639.135 cv
405.357 638.943 409.002 638.162 412.17 638.287 cv
412.74 638.311 413.404 638.35 414.135 638.412 cv
416.76 638.627 420.342 638.9 424.518 637.725 cv
427.037 637.021 429.568 636.564 431.783 636.268 cv
434.08 635.346 li
438.182 633.686 443.521 633.213 447.533 633.135 cv
450.107 632.451 li
454.764 631.189 458.701 630.928 461.619 631.006 cv
464.693 628.783 469.842 629.424 472.631 630.646 cv
473.924 631.221 474.67 631.447 474.881 631.51 cv
476.912 632.061 li
478.166 633.834 li
487.588 647.873 484.752 663.994 484.623 664.678 cv
482.787 674.639 li
481.658 673.596 li
480.99 675.658 480.373 677.15 480.229 677.486 cv
476.693 685.893 li
476.385 685.525 li
476.17 685.967 471.053 695.814 471.053 695.814 cv
470.326 694.529 li
468.717 696.998 466.295 699.342 464.783 700.682 cv
463.424 703.51 461.818 705.705 459.99 707.229 cv
459.279 707.838 458.584 708.291 457.939 708.627 cv
456.592 710.525 455.186 712.1 453.732 713.314 cv
452.303 714.51 450.967 715.26 449.787 715.729 cv
448.928 717.002 447.955 718.104 446.865 719.021 cv
445.186 720.424 443.49 721.186 442.049 721.584 cv
440.951 723.088 439.869 724.283 438.744 725.229 cv
437.014 726.67 435.256 727.432 433.611 727.678 cv
432.857 728.525 432.076 729.283 431.295 729.932 cv
429.006 731.857 426.928 732.67 425.248 732.963 cv
416.17 739.893 408.592 742.107 403.967 743.479 cv
402.959 743.768 401.709 744.143 401.338 744.326 cv
399.381 745.564 396.389 746.58 392.596 747.869 cv
389.713 748.85 386.443 749.971 383.842 751.17 cv
378.861 753.479 375.111 753.17 372.627 752.326 cv
370.389 752.908 367.865 753.271 366.299 753.463 cv
363.154 754.479 360.248 754.447 358.377 754.275 cv
355.311 755.408 352.943 755.514 351.158 755.158 cv
349.186 755.83 347.607 756.041 346.4 756.041 cv
343.213 756.787 340.33 756.002 338.389 755.135 cv
335.217 755.619 332.678 755.131 330.979 754.561 cv
328.029 754.971 325.826 754.729 324.182 754.205 cv
320.291 755.029 317.479 754.471 315.51 753.506 cv
311.057 754.607 307.939 753.775 305.924 752.631 cv
303.076 752.6 300.838 751.701 299.209 750.568 cv
295.939 750.471 293.361 749.193 291.717 748.08 cv
288.74 747.752 286.217 746.709 284.748 745.971 cv
280.682 745.455 278.178 743.717 276.697 742.029 cv
274.213 741.447 272.385 740.643 271.201 740.006 cv
266.736 739.4 263.623 737.549 262.045 736.408 cv
258.697 735.143 256.334 733.189 254.912 731.701 cv
251.865 730.811 249.885 729.123 248.67 727.412 cv
243.607 725.166 240.639 722.111 239.197 720.275 cv
235.279 717.943 232.936 714.615 231.865 712.783 cv
231.842 712.771 li
229.072 710.08 228.271 708.275 227.736 706.666 cv
227.592 706.549 227.396 706.412 227.178 706.244 cv
223.311 703.479 220.869 699.732 219.811 697.873 cv
217.037 695.271 215.748 692.666 215.15 690.693 cv
211.354 687.154 209.971 682.795 209.701 679.682 cv
208.834 678.135 208.236 676.76 207.932 675.529 cv
206.045 672.588 205.615 669.182 205.541 668.42 cv
203.365 661.873 li
210.873 664.072 li
cp
.27451 .207843 .145098 rgb
f
473.404 636.857 mo
473.404 636.857 472.381 636.615 470.271 635.689 cv
468.158 634.775 465.35 634.971 464.713 635.502 cv
464.076 636.029 465.463 637.037 465.463 637.037 cv
465.463 637.037 459.865 635.521 451.307 637.842 cv
452.686 638.85 li
452.686 638.85 442.049 638.057 435.803 640.584 cv
438.373 641.396 li
438.373 641.396 431.912 641.416 425.592 643.213 cv
419.279 645.002 414.225 644.111 411.443 644.018 cv
408.662 643.92 405.061 644.783 405.061 644.783 cv
406.658 645.064 li
406.658 645.064 402.463 644.248 399.959 646.088 cv
399.959 646.088 395.783 643.666 392.361 645.717 cv
392.361 645.717 390.186 643.764 385.139 646.111 cv
385.139 646.111 380.994 645.264 377.314 647.143 cv
377.314 647.143 370.381 645.869 366.553 646.854 cv
366.553 646.854 363.756 646.166 360.498 648.084 cv
360.498 648.084 353.615 646.377 350.525 648.963 cv
350.525 648.963 344.725 647.357 341.412 649.924 cv
341.412 649.924 334.24 648.857 330.834 650.092 cv
330.834 650.092 326.432 648.936 322.584 651.346 cv
322.584 651.346 318.229 649.537 314.568 651.189 cv
314.568 651.189 306.139 648.143 301.896 650.076 cv
301.896 650.076 299.967 648.26 294.838 650.334 cv
294.838 650.334 289.779 648.904 286.357 650.361 cv
286.357 650.361 280.045 650.791 277.307 651.873 cv
277.307 651.873 269.248 652.154 266.279 653.439 cv
266.279 653.439 262.799 651.697 257.467 654.752 cv
257.467 654.752 253.096 653.158 247.514 656.627 cv
247.514 656.627 243.896 656.42 240.459 659.303 cv
237.006 662.197 237.311 661.334 233.678 663.768 cv
230.057 666.197 217.998 671.861 209.15 668.76 cv
209.15 668.76 209.498 672.311 211.295 674.236 cv
211.295 674.236 210.99 675.307 213.303 679.025 cv
213.303 679.025 212.795 684.709 218.287 688.607 cv
218.287 688.607 218.217 691.9 222.322 695.338 cv
222.322 695.338 224.455 699.818 228.486 702.705 cv
232.529 705.592 229.545 705.666 233.811 709.775 cv
238.072 713.896 234.322 710.158 234.322 710.158 cv
234.322 710.158 236.342 714.732 241.096 717.018 cv
241.096 717.018 243.674 721.537 250.826 724.033 cv
250.826 724.033 251.326 727.057 256.119 727.693 cv
256.119 727.693 258.342 731.088 262.963 732.479 cv
262.963 732.479 265.896 735.264 271.26 735.635 cv
271.26 735.635 273.533 737.369 278.311 738.01 cv
278.311 738.01 279.229 741.287 284.713 741.549 cv
284.713 741.549 288.158 743.713 292.131 743.627 cv
292.131 743.627 295.154 746.752 299.631 745.834 cv
299.631 745.834 301.248 748.721 306.045 747.932 cv
306.045 747.932 308.092 751.08 315.041 748.283 cv
315.041 748.283 316.639 751.396 323.314 749.236 cv
323.314 749.236 324.721 750.896 330.205 749.736 cv
330.205 749.736 333.135 751.525 337.869 750.186 cv
337.869 750.186 341.076 752.568 344.479 751.326 cv
344.479 751.326 346.096 751.791 349.873 750.041 cv
349.873 750.041 351.154 751.799 356.432 749.396 cv
356.432 749.396 359.982 750.26 363.85 748.846 cv
363.85 748.846 369.744 748.15 371.92 747.135 cv
371.92 747.135 374.455 749.654 380.42 746.889 cv
386.385 744.111 394.6 742.084 397.498 740.252 cv
400.42 738.42 410.021 738.049 422.459 728.033 cv
422.459 728.033 425.561 729.076 430.564 722.248 cv
430.564 722.248 433.178 724.912 438.186 716.869 cv
438.186 716.869 442.646 717.377 445.611 711.252 cv
445.611 711.252 449.201 711.682 453.814 704.381 cv
453.814 704.381 456.908 704.205 459.811 697.541 cv
459.811 697.541 464.67 693.451 465.92 690.592 cv
467.162 687.736 469.787 684.111 469.553 683.1 cv
469.307 682.084 470.545 684.283 470.545 684.283 cv
470.545 684.283 474.115 677.455 473.947 674.35 cv
474.85 675.416 li
474.85 675.416 477.904 668.209 478.045 662.83 cv
478.959 663.678 li
478.959 663.678 481.67 649.209 473.404 636.857 cv
cp
.415686 .596078 .164706 rgb
f
474.885 638.303 mo
474.885 638.303 445.717 666.26 390.979 678.166 cv
336.232 690.068 273.225 700.811 214.225 670.971 cv
214.225 670.971 251.623 697.881 312.818 692.701 cv
374.01 687.529 438.229 679.826 474.885 638.303 cv
cp
.27451 .207843 .145098 rgb
f
385.799 686.959 mo
385.799 686.959 378.592 718.893 334.014 745.334 cv
334.014 745.334 373.24 722.158 384.334 686.158 cv
384.334 686.158 386.186 685.01 385.799 686.959 cv
cp
f
376.869 688.365 mo
376.869 688.365 369.662 720.303 325.076 746.744 cv
325.076 746.744 364.311 723.576 375.412 687.576 cv
375.412 687.576 377.268 686.424 376.869 688.365 cv
cp
f
367.131 691.189 mo
367.131 691.189 360.439 721.635 318.111 746.639 cv
318.111 746.639 355.354 724.725 365.736 690.424 cv
365.736 690.424 367.506 689.326 367.131 691.189 cv
cp
f
358.506 691.502 mo
358.506 691.502 351.787 721.436 310.029 746.182 cv
310.029 746.182 346.771 724.494 357.135 690.756 cv
357.135 690.756 358.873 689.674 358.506 691.502 cv
cp
f
349.889 691.799 mo
349.889 691.799 343.701 720.752 303.627 744.322 cv
303.627 744.322 338.896 723.674 348.557 691.068 cv
348.557 691.068 350.232 690.041 349.889 691.799 cv
cp
f
341.42 692.752 mo
341.42 692.752 335.572 720.354 297.443 742.736 cv
297.443 742.736 331.006 723.119 340.139 692.057 cv
340.139 692.057 341.736 691.072 341.42 692.752 cv
cp
f
332.385 693.541 mo
332.385 693.541 325.67 717.486 291.154 740.51 cv
291.154 740.51 320.6 720.717 330.393 693.494 cv
330.393 693.494 332.76 692.088 332.385 693.541 cv
cp
f
394.846 686.65 mo
394.846 686.65 387.639 718.576 343.053 745.033 cv
343.053 745.033 382.287 721.857 393.373 685.865 cv
393.373 685.865 395.244 684.701 394.846 686.65 cv
cp
f
402.287 684.385 mo
402.287 684.385 396.436 716.588 352.998 744.893 cv
352.998 744.893 391.217 720.088 400.787 683.65 cv
400.787 683.65 402.592 682.42 402.287 684.385 cv
cp
f
410.545 683.127 mo
410.545 683.127 404.678 715.342 361.256 743.643 cv
361.256 743.643 399.475 718.83 409.045 682.396 cv
409.045 682.396 410.842 681.17 410.545 683.127 cv
cp
f
418.709 681.756 mo
418.709 681.756 414.381 715.365 370.635 742.779 cv
370.635 742.779 409.131 718.764 417.092 680.904 cv
417.092 680.904 418.916 679.705 418.709 681.756 cv
cp
f
426.826 678.396 mo
426.826 678.396 424.123 713.361 380.201 739.736 cv
380.201 739.736 418.881 716.631 425.123 677.42 cv
425.123 677.42 426.943 676.256 426.826 678.396 cv
cp
f
433.35 675.252 mo
433.35 675.252 432.186 710.299 389.475 738.58 cv
389.475 738.58 427.092 713.795 431.596 674.354 cv
431.596 674.354 433.357 673.104 433.35 675.252 cv
cp
f
439.545 672.17 mo
439.545 672.17 441.615 709.412 398.795 735.518 cv
398.795 735.518 436.514 712.654 437.596 671.053 cv
437.596 671.053 439.365 669.893 439.545 672.17 cv
cp
f
446.717 667.912 mo
446.717 667.912 449.783 702.916 410.326 732.74 cv
410.326 732.74 445.096 706.584 444.861 667.08 cv
444.861 667.08 446.49 665.768 446.717 667.912 cv
cp
f
408.1 671.088 mo
408.1 671.088 400.6 656.346 381.838 649.412 cv
381.838 649.412 398.537 657.264 405.482 670.857 cv
405.482 670.857 406.436 672.486 408.1 671.088 cv
cp
f
401.361 672.697 mo
401.361 672.697 393.857 657.955 375.092 651.021 cv
375.092 651.021 391.795 658.869 398.736 672.471 cv
398.736 672.471 399.697 674.088 401.361 672.697 cv
cp
f
394.42 674.064 mo
394.42 674.064 384.838 657.822 366.088 650.885 cv
366.088 650.885 384.857 660.236 391.799 673.83 cv
391.799 673.83 392.756 675.463 394.42 674.064 cv
cp
f
414.018 669.369 mo
414.018 669.369 406.74 655.408 389.186 648.518 cv
389.186 648.518 404.854 656.221 411.58 669.096 cv
411.58 669.096 412.514 670.631 414.018 669.369 cv
cp
f
454.139 663.283 mo
454.139 663.283 456.768 700.291 423.506 725.682 cv
423.506 725.682 453.369 702.014 452.232 662.408 cv
452.232 662.408 453.85 661.139 454.139 663.283 cv
cp
f
462.576 657.424 mo
462.576 657.424 464.771 692.365 439.377 713.232 cv
439.377 713.232 461.811 696.158 460.67 656.549 cv
460.67 656.549 462.287 655.279 462.576 657.424 cv
cp
f
471.326 650.498 mo
471.326 650.498 473.525 685.428 448.139 706.303 cv
448.139 706.303 470.561 689.221 469.424 649.619 cv
469.424 649.619 471.041 648.346 471.326 650.498 cv
cp
f
323.666 694.693 mo
323.666 694.693 317.529 717.252 285.205 738.709 cv
285.205 738.709 312.779 720.275 321.803 694.631 cv
321.803 694.631 324.018 693.318 323.666 694.693 cv
cp
f
316.061 694.291 mo
316.061 694.291 309.135 714.514 278.85 735.447 cv
278.85 735.447 304.686 717.482 314.389 694.361 cv
314.389 694.361 316.459 693.064 316.061 694.291 cv
cp
f
307.998 695.275 mo
307.998 695.275 300.545 715.537 271.588 735.064 cv
271.588 735.064 296.596 717.439 306.404 695.393 cv
306.404 695.393 308.412 694.107 307.998 695.275 cv
cp
f
420.592 666.693 mo
420.592 666.693 414.627 653.768 397.518 648.814 cv
397.518 648.814 412.615 654.764 418.146 666.67 cv
418.146 666.67 418.936 668.08 420.592 666.693 cv
cp
f
388.107 675.713 mo
388.107 675.713 376.143 656.615 357.627 651.908 cv
357.627 651.908 378.537 661.893 385.494 675.482 cv
385.494 675.482 386.455 677.111 388.107 675.713 cv
cp
f
381.205 676.639 mo
381.205 676.639 369.248 657.541 350.732 652.83 cv
350.732 652.83 371.643 662.818 378.584 676.412 cv
378.584 676.412 379.541 678.033 381.205 676.639 cv
cp
f
374.9 678.287 mo
374.9 678.287 362.936 659.197 344.42 654.482 cv
344.42 654.482 365.334 664.459 372.275 678.061 cv
372.275 678.061 373.236 679.686 374.9 678.287 cv
cp
f
426.889 663.893 mo
426.889 663.893 421.096 651.975 405.615 646.885 cv
405.615 646.885 419.338 652.799 424.693 663.799 cv
424.693 663.799 425.443 665.111 426.889 663.893 cv
cp
f
432.982 661.158 mo
432.982 661.158 428.326 650.076 413.139 646.666 cv
413.139 646.666 426.459 651.061 430.779 661.275 cv
430.779 661.275 431.408 662.479 432.982 661.158 cv
cp
f
367.166 678.705 mo
367.166 678.705 352.42 658.705 333.904 653.99 cv
333.904 653.99 357.584 664.881 364.541 678.475 cv
364.541 678.475 365.498 680.107 367.166 678.705 cv
cp
f
360.85 680.357 mo
360.85 680.357 346.225 659.037 325.287 654.334 cv
325.287 654.334 351.287 666.529 358.232 680.123 cv
358.232 680.123 359.193 681.752 360.85 680.357 cv
cp
f
353.713 681.486 mo
353.713 681.486 340.115 660.928 314.451 654.92 cv
314.451 654.92 338.248 662.08 351.416 681.6 cv
351.416 681.6 351.568 683.279 353.713 681.486 cv
cp
f
346.006 683.057 mo
346.006 683.057 332.373 659.9 303.186 653.463 cv
303.186 653.463 330.088 661.236 343.33 683.217 cv
343.33 683.217 343.33 685.131 346.006 683.057 cv
cp
f
338.549 683.275 mo
338.549 683.275 323.525 659.779 292.701 654.557 cv
292.701 654.557 321.162 661.295 335.74 683.568 cv
335.74 683.568 335.795 685.576 338.549 683.275 cv
cp
f
328.943 685.553 mo
328.943 685.553 314.631 661.623 283.975 655.482 cv
283.975 655.482 312.217 663.072 326.139 685.775 cv
326.139 685.775 326.127 687.779 328.943 685.553 cv
cp
f
438.764 658.482 mo
438.764 658.482 434.619 648.635 421.139 645.6 cv
421.139 645.6 432.955 649.518 436.799 658.596 cv
436.799 658.596 437.35 659.662 438.764 658.482 cv
cp
f
444.498 655.549 mo
444.498 655.549 441.299 646.346 427.92 644.744 cv
427.92 644.744 439.529 647.369 442.498 655.85 cv
442.498 655.85 442.959 656.842 444.498 655.549 cv
cp
f
450.287 653.127 mo
450.287 653.127 447.131 644.865 435.451 642.908 cv
435.451 642.908 445.635 645.705 448.564 653.314 cv
448.564 653.314 448.998 654.205 450.287 653.127 cv
cp
f
454.842 648.904 mo
454.842 648.904 452.154 641.221 440.994 639.869 cv
440.994 639.869 450.686 642.072 453.178 649.158 cv
453.178 649.158 453.545 649.986 454.842 648.904 cv
cp
f
319.693 686.24 mo
319.693 686.24 307.271 663.67 268.764 653.979 cv
268.764 653.979 299.842 661.818 315.771 684.971 cv
315.771 684.971 317.033 688.541 319.693 686.24 cv
cp
f
460.811 646.33 mo
460.811 646.33 458.959 639.893 449.178 639.49 cv
449.178 639.49 457.592 640.729 459.322 646.654 cv
459.322 646.654 459.592 647.35 460.811 646.33 cv
cp
f
311.561 687.283 mo
311.561 687.283 297.732 664.424 258.885 656.193 cv
258.885 656.193 291.967 665.104 308.748 687.635 cv
308.748 687.635 308.994 689.682 311.561 687.283 cv
cp
f
301.193 687.26 mo
301.193 687.26 286.025 665.666 247.053 658.021 cv
247.053 658.021 281.271 665.361 298.381 687.65 cv
298.381 687.65 298.67 689.686 301.193 687.26 cv
cp
f
300.506 695.498 mo
300.506 695.498 294.732 713.924 266.967 731.955 cv
266.967 731.955 289.092 717.658 298.904 695.607 cv
298.904 695.607 300.904 694.338 300.506 695.498 cv
cp
f
290.021 686.451 mo
290.021 686.451 268.975 662.615 240.85 661.666 cv
240.85 661.666 267.533 663.951 287.342 687.029 cv
287.342 687.029 287.803 688.986 290.021 686.451 cv
cp
f
293.029 696.205 mo
293.029 696.205 288.475 711.486 262.928 728.033 cv
262.928 728.033 282.205 715.025 291.693 696.377 cv
291.693 696.377 293.436 695.217 293.029 696.205 cv
cp
f
286.412 695.451 mo
286.412 695.451 279.756 711.295 256.646 724.963 cv
256.646 724.963 275.268 712.764 285.17 695.639 cv
285.17 695.639 286.857 694.541 286.412 695.451 cv
cp
f
279.92 694.291 mo
279.92 694.291 273.037 709.166 250.389 720.471 cv
250.389 720.471 268.67 710.217 278.725 694.369 cv
278.725 694.369 280.365 693.447 279.92 694.291 cv
cp
f
272.678 694.385 mo
272.678 694.385 265.49 706.787 245.248 717.658 cv
245.248 717.658 261.674 707.99 271.646 694.541 cv
271.646 694.541 273.131 693.682 272.678 694.385 cv
cp
f
265.998 694.08 mo
265.998 694.08 259.725 704.889 241.779 712.506 cv
241.779 712.506 256.334 705.51 265.076 694.1 cv
265.076 694.1 266.389 693.463 265.998 694.08 cv
cp
f
259.014 693.498 mo
259.014 693.498 252.936 703.494 235.959 709.33 cv
235.959 709.33 249.748 703.807 258.146 693.439 cv
258.146 693.439 259.4 692.943 259.014 693.498 cv
cp
f
253.131 692.221 mo
253.131 692.221 248.174 700.893 233.994 704.018 cv
233.994 704.018 245.502 700.736 252.393 692.041 cv
252.393 692.041 253.424 691.752 253.131 692.221 cv
cp
f
249.264 690.838 mo
249.264 690.838 243.951 698.51 230.76 699.256 cv
230.76 699.256 241.529 697.912 248.631 690.541 cv
248.631 690.541 249.6 690.428 249.264 690.838 cv
cp
f
279.475 686.4 mo
279.475 686.4 261.311 665.17 235.373 665.795 cv
235.373 665.795 259.904 666.498 276.959 687.084 cv
276.959 687.084 277.283 688.889 279.475 686.4 cv
cp
f
267.959 684.322 mo
267.959 684.322 251.572 669.201 229.193 668.541 cv
229.193 668.541 247.213 668.814 265.436 685.318 cv
265.436 685.318 265.529 687.096 267.959 684.322 cv
cp
f
253.189 682.143 mo
253.189 682.143 240.744 672.205 219.662 671.67 cv
219.662 671.67 234.006 671.385 250.658 683.146 cv
250.658 683.146 254.678 683.994 253.189 682.143 cv
cp
f
244.092 688.596 mo
244.092 688.596 237.885 695.58 224.713 694.744 cv
224.713 694.744 235.564 694.701 243.49 688.221 cv
243.49 688.221 244.459 688.221 244.092 688.596 cv
cp
f
239.818 686.736 mo
239.818 686.736 232.951 692.439 221.1 689.146 cv
221.1 689.146 230.982 691.139 239.334 686.26 cv
239.334 686.26 240.217 686.447 239.818 686.736 cv
cp
f
234.768 685.74 mo
234.768 685.74 226.201 688.232 216.646 680.49 cv
216.646 680.49 224.924 686.248 234.521 685.111 cv
234.521 685.111 235.256 685.635 234.768 685.74 cv
cp
f
300.067 328.971 mo
300.067 328.971 344.317 271.971 411.817 256.221 cv
479.317 240.471 505.566 247.221 534.816 246.471 cv
564.066 245.721 646.566 245.721 698.316 318.471 cv
753.551 396.127 768.066 520.971 711.816 603.471 cv
655.566 685.975 590.816 706.971 560.816 715.971 cv
530.816 724.971 403.567 721.225 329.317 639.475 cv
255.067 557.721 230.317 428.721 300.067 328.971 cv
cp
f
530.926 715.881 mo
474.176 715.881 388.645 694.67 334.348 634.9 cv
297.715 594.564 273.958 543.154 267.442 490.143 cv
260.426 433.029 273.637 378.643 305.645 332.869 cv
306.02 332.338 347.028 275.549 411.114 260.596 cv
450.551 251.393 476.918 250.213 495.489 250.213 cv
503.371 250.213 510.52 250.459 517.203 250.689 cv
523.223 250.893 528.871 251.088 534.332 251.088 cv
536.07 251.088 537.781 251.064 539.492 251.021 cv
540.652 250.994 li
544.027 250.904 547.977 250.803 552.387 250.803 cv
613.027 250.803 658.941 274.217 692.75 322.381 cv
719.27 360.166 736.461 410.236 739.906 459.756 cv
743.586 512.678 731.613 562.357 706.199 599.639 cv
666.957 657.193 616.965 695.396 557.609 713.209 cv
551.957 714.9 542.23 715.881 530.926 715.881 cv
cp
.980392 .592157 .313726 rgb
f
418.926 349.174 mo
418.926 349.174 400.536 326.744 376.321 314.975 cv
349.567 301.971 330.317 306.971 330.317 306.971 cv
330.317 306.971 356.317 297.096 392.325 316.971 cv
419.286 331.857 430.942 345.096 430.942 345.096 cv
430.942 345.096 411.067 309.096 357.817 297.096 cv
357.817 297.096 401.317 302.721 431.375 330.49 cv
431.375 330.49 415.438 307.721 375.442 293.721 cv
375.442 293.721 410.692 298.596 437.317 328.971 cv
437.317 328.971 407.325 261.971 425.325 295.971 cv
443.325 329.975 427.325 276.971 437.325 303.971 cv
447.317 330.971 437.317 264.971 447.317 294.971 cv
457.321 324.971 448.321 247.975 457.321 284.975 cv
466.321 321.971 463.325 272.975 467.325 294.971 cv
471.317 316.971 477.442 276.846 477.317 296.975 cv
477.161 323.275 489.317 272.975 492.317 299.975 cv
495.317 326.975 501.066 316.475 501.066 316.475 cv
475.321 357.971 li
422.817 350.975 li
418.926 349.174 li
cp
.27451 .207843 .145098 rgb
f
707.316 364.221 mo
707.316 364.221 766.039 531.24 672.816 627.475 cv
603.066 699.475 540.816 709.225 540.816 709.225 cv
540.816 709.225 653.938 659.752 689.316 588.471 cv
739.566 487.221 707.316 364.221 707.316 364.221 cv
cp
f
726.816 445.221 mo
726.816 445.221 753.066 616.975 582.816 694.225 cv
582.816 694.225 653.176 676.83 704.316 594.471 cv
762.066 501.471 726.816 408.471 726.816 408.471 cv
726.816 445.221 li
cp
1 1 1 rgb
f
522.066 327.471 mo
522.066 327.471 512.324 344.217 484.067 357.221 cv
455.817 370.221 441.809 373.217 427.317 372.971 cv
412.817 372.725 411.067 371.471 411.067 371.471 cv
411.067 371.471 411.075 371.475 412.067 368.975 cv
413.067 366.471 411.567 364.217 412.317 362.471 cv
413.067 360.725 408.567 357.225 411.817 355.475 cv
415.067 353.721 410.567 352.721 417.067 350.471 cv
423.567 348.221 425.071 344.975 424.817 341.975 cv
424.567 338.975 423.809 333.717 426.567 332.471 cv
429.317 331.221 430.321 327.471 433.817 329.721 cv
437.317 331.971 442.063 333.479 445.317 329.975 cv
448.567 326.471 468.809 318.725 470.817 318.725 cv
472.817 318.725 473.067 314.225 477.567 316.221 cv
482.067 318.221 482.817 313.467 486.817 314.471 cv
490.817 315.471 492.075 312.725 495.317 313.971 cv
498.567 315.221 505.316 313.971 505.316 313.971 cv
505.316 313.971 526.316 316.721 522.066 327.471 cv
cp
.27451 .207843 .145098 rgb
f
320.317 317.721 mo
320.317 317.721 254.083 384.502 266.317 486.471 cv
277.567 580.221 328.567 628.225 328.567 628.225 cv
328.567 628.225 211.567 467.721 320.317 317.721 cv
cp
1 1 1 rgb
f
420.067 380.721 mo
420.067 380.721 449.317 383.346 475.567 372.846 cv
510.004 359.072 526.566 337.971 514.941 330.471 cv
504.441 335.721 li
504.441 335.721 507.09 349.99 471.067 368.721 cv
452.317 378.471 420.067 380.721 420.067 380.721 cv
cp
.27451 .207843 .145098 rgb
f
521.691 334.971 mo
521.691 334.971 526.566 354.096 486.067 374.346 cv
486.067 374.346 507.816 367.596 517.941 355.221 cv
528.066 342.846 523.941 336.846 521.691 334.971 cv
cp
f
527.691 338.721 mo
527.691 338.721 532.566 357.846 492.067 378.096 cv
492.067 378.096 513.816 371.346 523.941 358.971 cv
534.066 346.596 529.941 340.596 527.691 338.721 cv
cp
f
574.957 519.643 mo
574.957 519.643 576.199 521.51 577.77 519.494 cv
579.34 517.479 580.738 516.213 582.527 520.58 cv
584.316 524.932 584.844 525.057 585.219 528.307 cv
585.594 531.549 585.969 534.799 587.207 536.666 cv
588.449 538.533 585.824 540.311 588.449 538.533 cv
591.078 536.756 593.684 532.607 591.371 528.119 cv
589.059 523.646 588.715 525.143 589.207 520.521 cv
589.715 515.881 587.563 510.646 587.563 510.646 cv
587.563 510.646 586.133 507.166 584.703 503.674 cv
583.273 500.182 581.691 499.83 582.012 495.947 cv
582.34 492.068 578.816 490.475 578.816 490.475 cv
578.816 490.475 580.23 491.584 581.77 484.814 cv
583.309 478.041 582.746 473.178 580.621 470.314 cv
578.488 467.467 577.059 463.971 577.035 459.225 cv
576.996 454.475 574.531 453.115 573.781 446.623 cv
573.035 440.119 573.34 433.873 573.34 433.873 cv
578.09 432.568 li
585.332 437.389 li
585.332 437.389 589.695 432.85 587.988 440.365 cv
586.277 447.877 589.246 444.596 589.648 452.604 cv
590.051 460.596 586.207 465.264 590.258 464.611 cv
594.293 463.943 596.926 462.162 597.473 464.658 cv
598.016 467.158 599.051 465.025 599.051 465.025 cv
602.605 468.986 li
602.605 468.986 607.133 463.701 604.559 472.604 cv
601.977 481.506 599.332 480.9 601.465 483.76 cv
603.594 486.619 603.605 488.99 603.605 488.99 cv
605.375 490.975 li
605.375 490.975 605.551 490.229 606.574 485.721 cv
607.605 481.205 609.543 482.439 608.988 477.564 cv
608.426 472.697 605.91 464.213 604.137 462.225 cv
602.371 460.244 603.027 452.482 600.871 447.248 cv
598.73 442.018 599.043 435.76 597.266 433.771 cv
595.496 431.791 596.168 426.408 596.168 426.408 cv
599.863 427.244 li
599.863 427.244 597.004 420.268 593.652 417.924 cv
590.285 415.58 587.449 410.975 587.449 410.975 cv
587.449 410.975 586.418 415.49 582.332 409.021 cv
578.246 402.553 580.504 397.533 576.266 396.572 cv
572.047 395.615 574.316 392.955 572.352 389.354 cv
570.402 385.748 565.824 386.291 565.973 380.791 cv
566.113 375.283 563.262 370.678 560.434 368.459 cv
557.605 366.232 547.777 356.877 538.441 353.963 cv
531.879 351.916 558.699 374.064 556.762 372.365 cv
528.902 347.955 550.832 372.514 550.832 372.514 cv
550.832 372.514 542.23 369.057 537.285 366.357 cv
532.348 363.658 548.887 377.697 543.941 374.986 cv
539 372.271 533.395 372.213 528.43 369.877 cv
518.633 365.275 526.883 368.729 536.293 375.619 cv
542.934 380.471 544.176 383.736 547.004 385.967 cv
549.832 388.186 527.543 381.447 554.137 401.029 cv
556.176 402.529 557.309 401.752 558.582 408.373 cv
559.859 414.975 561.289 418.471 561.289 418.471 cv
561.289 418.471 563.98 428.182 559.574 425.998 cv
547.836 420.166 545.184 417.189 541.465 413.959 cv
537.754 410.744 554.023 438.174 553.176 441.928 cv
552.316 445.689 556.461 461.662 552.734 456.072 cv
549.004 450.475 542.449 442.971 538.23 444.393 cv
534.027 445.803 545.238 467.018 545.238 467.018 cv
545.238 467.018 541.402 471.682 539.285 471.197 cv
537.172 470.721 534.547 472.498 531.902 471.893 cv
529.262 471.295 528.922 472.799 526.602 468.322 cv
524.285 463.83 522.207 468.104 525.594 475.205 cv
528.988 482.299 532.156 483.025 532.535 488.646 cv
532.93 494.271 534.547 499.385 533.879 504.771 cv
533.207 510.154 533.379 509.4 534.645 516.014 cv
535.93 522.635 537.48 518.236 538.582 525.611 cv
539.691 532.979 541.441 532.58 543.051 535.322 cv
544.648 538.057 546.246 540.795 548.16 537.275 cv
550.074 533.76 551.996 532.615 549.34 529.639 cv
546.684 526.662 548.793 527.139 545.238 520.795 cv
541.676 514.455 539.754 515.588 539.895 510.092 cv
540.031 504.588 539.504 504.467 542.098 497.939 cv
544.699 491.412 542.207 487.678 541.309 484.311 cv
540.406 480.947 541.414 474.061 541.414 474.061 cv
541.414 474.061 541.977 478.932 544.297 483.42 cv
546.613 487.896 549.059 486.869 550.488 490.365 cv
551.918 493.85 552.621 493.217 552.824 497.213 cv
553.02 501.213 553.395 504.463 555.34 505.693 cv
557.285 506.932 561.34 508.639 561.34 508.639 cv
561.34 508.639 564.184 513.24 563.449 509.131 cv
562.723 505.002 560.941 500.643 561.793 496.885 cv
562.648 493.119 559.648 491.654 562.648 493.119 cv
565.648 494.592 566.91 498.83 566.91 498.83 cv
566.91 498.83 566.043 500.217 567.48 506.076 cv
568.926 511.955 570.48 507.557 569.824 515.318 cv
569.176 523.076 571.262 518.803 569.176 523.076 cv
567.098 527.346 564.266 525.127 562.348 528.643 cv
560.441 532.158 561.129 529.158 560.441 532.158 cv
559.754 535.174 563.168 545.826 561.973 551.096 cv
560.77 556.354 559.953 539.17 561.918 542.779 cv
563.871 546.385 561.078 548.916 558.262 549.068 cv
555.449 549.213 554.215 549.732 553.887 553.615 cv
553.566 557.486 551.129 560.885 551.129 560.885 cv
553.598 562.24 li
552.59 569.123 li
557.141 566.213 li
557.141 566.213 559.785 566.814 560.809 562.299 cv
561.832 557.791 563.074 559.65 564.105 555.143 cv
565.133 550.627 568.152 554.471 569.176 549.963 cv
570.199 545.451 572.316 545.939 573.168 542.174 cv
574.02 538.416 577.207 541.51 576.293 535.768 cv
575.379 530.021 575.352 525.268 575.352 525.268 cv
574.957 519.643 li
cp
.945098 .388235 .258824 rgb
f
395.493 570.471 mo
396.411 569.252 395.727 566.799 399.231 563.072 cv
402.723 559.326 399.559 560.111 401.317 556.971 cv
403.086 553.83 400.84 553.396 407.868 554.279 cv
414.895 555.166 411.317 555.635 413.223 559.018 cv
415.133 562.393 415.247 560.561 414.012 562.182 cv
412.77 563.799 410.497 565.92 408.36 566.201 cv
406.227 566.49 408.848 569.779 410.34 572.846 cv
411.84 575.908 413.676 576.037 413.129 580.107 cv
412.583 584.178 414.887 576.963 416.645 573.822 cv
418.415 570.682 416.075 569.533 417.313 567.924 cv
418.551 566.299 417.313 567.924 419.817 562.131 cv
422.309 556.35 419.559 557.439 421.411 555.021 cv
423.27 552.596 421.145 550.326 421.145 550.326 cv
421.145 550.326 419.434 548.377 420.36 547.162 cv
421.293 545.947 422.809 546.471 424.79 542.205 cv
426.762 537.947 423.387 539.857 427.098 534.998 cv
430.809 530.135 429.668 532.475 431.739 528.924 cv
433.809 525.385 428.739 522.787 430.911 519.959 cv
433.083 517.123 433.379 516.713 432.383 514.666 cv
431.379 512.623 433.954 510.096 437.356 505.65 cv
440.762 501.189 437.926 509.928 436.458 515.217 cv
434.973 520.502 439.004 515.24 438.567 517.479 cv
438.145 519.717 435.477 521.529 437.286 524.189 cv
439.098 526.854 436.528 529.373 436.528 529.373 cv
436.528 529.373 435.758 534.568 433.075 538.928 cv
430.391 543.279 435.7 542.209 436.286 543.947 cv
436.883 545.686 435.637 547.303 433.293 548.713 cv
430.93 550.111 431.747 550.732 429.571 553.564 cv
427.403 556.393 428.286 560.271 428.286 560.271 cv
428.286 560.271 429.817 560.795 431.352 558.775 cv
432.899 556.748 434.333 556.557 435.387 553.518 cv
436.426 550.471 437.051 549.658 437.567 548.143 cv
438.098 546.607 438.618 545.092 439.387 539.9 cv
440.141 534.705 441.688 532.689 441.407 530.541 cv
441.122 528.408 444.618 524.666 445.356 522.033 cv
446.094 519.377 446.856 514.186 447.665 514.814 cv
448.473 515.432 444.333 522.521 448.833 520.834 cv
453.325 519.143 456.543 513.26 453.403 511.502 cv
450.262 509.744 450.825 514.025 448.52 510.338 cv
446.211 506.65 441.711 508.338 442.856 506.006 cv
443.989 503.67 439.543 500.271 442.403 499.885 cv
445.254 499.51 446.161 500.838 446.161 500.838 cv
446.161 500.838 445.692 497.268 446.54 492.799 cv
447.395 488.322 447.543 483.936 445.684 486.365 cv
443.825 488.791 442.379 491.533 443.141 486.342 cv
443.895 481.154 444.145 477.49 445.356 478.412 cv
446.563 479.342 447.067 480.365 446.903 476.393 cv
446.731 472.416 444.618 470.158 445.137 468.627 cv
445.661 467.111 442.879 470.756 442.879 470.756 cv
442.879 470.756 437.95 474.682 439.231 478.873 cv
440.52 483.057 440.426 482.346 438.758 486.197 cv
437.094 490.053 438.219 490.268 438.817 492.01 cv
439.395 493.744 443.083 491.436 440.801 496.104 cv
438.524 500.768 436.59 499.932 434.024 502.455 cv
431.45 504.979 428.356 509.033 428.497 504.646 cv
428.645 500.264 425.809 498.104 425.809 498.104 cv
425.809 498.104 425.598 499.213 425.833 495.549 cv
426.075 491.885 420.364 492.65 421.528 487.771 cv
422.684 482.893 426.196 479.158 423.758 477.303 cv
421.333 475.439 419.833 472.369 422.997 471.584 cv
426.172 470.799 430.02 472.467 428.715 470.822 cv
427.411 469.178 425.188 466.205 425.926 463.561 cv
426.661 460.924 424.333 459.779 423.098 461.393 cv
421.856 463.014 417.477 462.877 417.477 462.877 cv
416.262 461.943 li
416.262 461.943 413.333 459.061 414.887 457.041 cv
416.434 455.018 417.356 453.807 419.708 452.396 cv
422.071 450.994 423.899 451.111 423.125 447.943 cv
422.333 444.779 421.434 443.447 424.098 441.643 cv
426.758 439.834 427.168 440.135 427.813 436.779 cv
428.45 433.432 431.422 431.213 430.231 427.736 cv
429.043 424.264 429.473 422.025 431.95 418.787 cv
434.426 415.557 438.325 412.123 438.918 413.861 cv
439.52 415.596 442.25 417.049 440.684 421.619 cv
439.114 426.193 438.899 427.303 439.887 429.354 cv
440.895 431.4 440.375 432.92 439.52 437.4 cv
438.661 441.877 437.54 441.662 438.418 445.537 cv
439.309 449.424 440.235 448.209 437.043 451.545 cv
433.86 454.873 431.075 458.518 432.688 459.752 cv
434.305 460.99 435.184 464.869 437.973 461.229 cv
440.754 457.588 440.872 455.756 443.543 453.947 cv
446.208 452.135 448.278 448.592 445.848 446.732 cv
443.418 444.869 443.512 445.596 442.95 441.303 cv
442.379 437.025 441.879 435.998 443.61 435.404 cv
445.344 434.807 448.016 432.994 445.989 431.447 cv
443.965 429.904 448.063 427.9 445.321 426.455 cv
442.59 425.002 441.356 426.615 443.231 421.643 cv
445.114 416.67 447.782 414.854 446.165 413.615 cv
444.543 412.385 445.762 413.314 445.59 409.338 cv
445.426 405.377 440.258 411.271 442.598 407.377 cv
442.036 405.834 443.747 403.818 442.489 402.482 cv
438.637 406.268 439.176 405.713 435.922 409.959 cv
437.633 406.455 436.442 401.709 437.094 398.354 cv
433.708 401.533 434.282 405.818 430.883 408.994 cv
431.258 405.705 432.137 401.744 430.684 399.287 cv
430.372 399.803 430.184 400.127 430.184 400.127 cv
430.184 400.127 430.645 406.24 429.454 402.768 cv
428.262 399.291 425.004 410.271 422.95 411.26 cv
420.911 412.268 417.286 428.736 416.301 424.146 cv
415.34 419.553 416.684 426.998 414.477 424.021 cv
412.262 421.045 411.262 429.904 412.262 421.045 cv
413.262 412.197 410.786 415.436 411.676 408.412 cv
412.176 404.385 413.317 400.643 413.938 398.822 cv
412.278 403.025 412.696 401.717 413.95 398.752 cv
414.407 397.455 414.571 397.197 413.997 398.65 cv
413.997 398.65 413.997 398.658 413.997 398.662 cv
414.715 396.971 415.7 394.771 416.739 392.756 cv
416.723 392.619 416.692 392.486 416.661 392.354 cv
415.106 396.928 410.637 400.252 410.747 405.143 cv
411.317 409.424 405.571 411.775 405.458 414.564 cv
406.067 415.033 404.54 415.783 404.399 414.705 cv
404.422 411.643 404.715 408.627 404.926 405.635 cv
404.028 407.979 402.559 410.268 401.551 411.572 cv
399.997 413.592 401.094 416.357 397.645 415.006 cv
394.192 413.646 391.965 413.221 393.84 408.24 cv
395.715 403.264 400.434 400.459 399.336 397.697 cv
398.247 394.943 402.477 388.557 399.903 391.088 cv
397.34 393.6 398.879 391.58 396.004 394.51 cv
396.004 394.51 393.645 395.912 391.579 399.463 cv
389.497 403.01 387.989 413.389 389.497 403.01 cv
391.028 392.627 392.051 392.131 395.278 386.252 cv
398.481 380.373 404.543 374.111 398.715 376.701 cv
392.891 379.299 393.317 377.057 394.153 375.131 cv
394.977 373.205 394.075 371.877 395.934 369.447 cv
397.79 367.018 398.047 360.803 397.114 362.018 cv
396.192 363.232 392.075 367.779 392.075 367.779 cv
392.075 367.779 389.34 377.229 387.817 376.701 cv
386.286 376.182 385.485 375.557 379.989 386.111 cv
374.489 396.646 369.731 404.557 371.723 397.744 cv
373.719 390.959 368.891 395.58 371.61 388.678 cv
377.059 374.807 375.5 374.346 378.606 370.303 cv
381.692 366.256 386.024 360.588 386.024 360.588 cv
386.024 360.588 396.5 351.924 387.079 357.541 cv
377.645 363.162 375.911 363.76 372.606 368.928 cv
369.293 374.088 372.801 370.354 367.532 377.232 cv
362.809 383.404 362.247 383.463 359.856 387.678 cv
359.293 389.252 356.872 393.096 358.965 389.275 cv
359.293 388.678 359.583 388.146 359.856 387.678 cv
360.153 386.822 359.915 386.639 358.153 388.654 cv
353.114 394.416 355.606 377.729 348.895 387.346 cv
342.184 396.963 345.614 389.959 342.52 394.018 cv
339.426 398.053 342.45 390.752 338.422 396.01 cv
334.403 401.271 335.286 405.154 335.286 405.154 cv
334.231 408.201 337.684 409.557 336.114 414.127 cv
334.536 418.693 335.188 415.342 334.02 420.225 cv
332.848 425.096 333.641 428.264 336.735 424.221 cv
339.825 420.174 336.473 430.432 333.665 436.619 cv
330.852 442.807 330.665 441.381 332.989 442.521 cv
335.329 443.67 343.426 428.049 341.301 436.693 cv
339.184 445.334 345.993 436.428 344.833 441.307 cv
343.661 446.189 346.321 444.385 350.231 440.951 cv
354.137 437.518 353.176 441.283 352.247 442.502 cv
351.325 443.705 354.114 450.975 352.04 454.521 cv
349.973 458.068 349.59 455.213 345.688 458.643 cv
341.778 462.064 343.661 457.088 341.141 454.525 cv
338.61 451.951 338.469 456.33 337.215 460.502 cv
335.958 464.662 340.356 462.256 338.668 468.666 cv
336.969 475.064 341.973 474.396 343.59 475.631 cv
345.208 476.865 344.493 476.975 343.309 484.393 cv
342.122 491.822 348.192 485.564 348.192 485.564 cv
351.5 480.396 li
353.278 474.709 li
353.278 474.709 355.274 467.896 356.516 466.279 cv
357.758 464.658 357.614 469.041 359.633 470.588 cv
361.661 472.131 360.114 474.158 360.184 477.42 cv
360.262 480.682 360.2 485.775 360.875 490.775 cv
361.536 495.768 362.114 489.158 365.872 490.107 cv
369.637 491.064 367.418 488.084 367.262 484.107 cv
367.086 480.135 369.34 478.018 369.34 478.018 cv
369.34 478.018 369.34 478.018 371.512 475.182 cv
373.684 472.346 374.891 473.275 373.84 476.322 cv
372.801 479.377 375.543 480.822 374.965 487.443 cv
374.399 494.061 376.793 487.553 377.387 489.295 cv
377.997 491.037 379.083 482.885 379.083 482.885 cv
382.7 477.318 li
382.7 477.318 386.106 472.877 386.493 475.725 cv
386.868 478.584 388.629 475.443 390.481 473.014 cv
392.34 470.584 393.125 473.756 392.598 475.275 cv
392.083 476.799 392.176 477.518 391.739 479.748 cv
391.317 481.99 392.504 485.459 392.504 485.459 cv
393.176 490.463 398.583 490.1 398.583 490.1 cv
398.583 490.1 398.137 494.889 397.672 499.674 cv
397.223 504.459 398.821 508.244 398.797 510.787 cv
398.77 513.334 398.653 515.166 396.981 519.025 cv
395.317 522.881 398.891 522.408 401.325 524.26 cv
403.743 526.123 399.372 525.982 396.008 525.338 cv
392.653 524.693 392.02 528.045 389.352 529.861 cv
386.684 531.67 388.012 530.768 385.18 528.6 cv
382.348 526.428 384.395 525.432 384.504 523.604 cv
384.622 521.768 386.489 519.338 384.059 517.482 cv
381.637 515.623 375.497 518.623 375.497 518.623 cv
376.942 515.885 li
376.942 515.885 375.434 512.814 374.848 511.08 cv
374.247 509.342 370.391 507.67 366.747 504.889 cv
363.114 502.104 366.278 501.318 363.348 498.439 cv
360.418 495.553 360.989 499.842 360.465 501.361 cv
359.942 502.889 360.418 506.459 359.493 507.674 cv
358.567 508.889 359.231 513.889 358.18 516.936 cv
357.137 519.986 360.489 520.619 363.661 519.842 cv
366.825 519.053 365.59 520.67 367.45 529.146 cv
369.301 537.619 370.825 527.236 372.137 528.881 cv
373.442 530.521 373.348 529.807 375.708 528.408 cv
378.059 527.002 378.129 530.26 378.7 534.549 cv
379.278 538.838 381.848 536.307 384.993 538.064 cv
388.133 539.826 382.918 541.615 379.227 543.928 cv
375.543 546.236 378.489 546.564 378.946 552.689 cv
379.395 558.799 381.2 550.568 383.254 549.564 cv
385.297 548.568 386.114 549.178 388.348 549.611 cv
390.59 550.041 391.157 543.42 391.157 543.42 cv
391.157 543.42 391.602 538.639 392.844 537.025 cv
394.086 535.396 396.106 536.951 397.297 540.424 cv
398.481 543.893 396.032 544.596 393.243 548.229 cv
390.465 551.877 391.895 551.689 393.114 552.611 cv
394.321 553.541 395.254 552.326 396.801 550.303 cv
398.34 548.283 400.18 548.4 400.766 550.139 cv
401.372 551.877 398.614 552.971 396.442 555.807 cv
394.278 558.635 396.442 555.807 391.106 559.424 cv
385.778 563.037 387.079 564.682 384.922 567.514 cv
382.762 570.35 383.153 570.658 384.059 571.994 cv
384.965 573.326 384.829 577.701 386.446 578.939 cv
388.063 580.178 394.559 571.682 395.493 570.471 cv
cp
f
659.543 606.447 mo
659.543 606.447 662.539 603.162 664.063 599.17 cv
665.563 595.182 670.496 593.166 668.691 590.869 cv
666.875 588.568 665.387 587.865 668.516 583.557 cv
671.629 579.229 672.043 584.494 675.074 576.514 cv
678.113 568.545 681.594 561.127 679.574 556.209 cv
677.551 551.287 676.395 552.186 682.273 546.627 cv
688.152 541.08 690.734 532.525 691.215 528.42 cv
691.699 524.303 689.809 518.35 689.324 522.463 cv
688.832 526.568 680.598 543.307 682.254 533.6 cv
683.941 523.896 683.973 519.213 686.215 509.068 cv
688.473 498.912 689.117 489.084 689.145 484.404 cv
689.191 479.721 697.566 474.982 689.809 474.576 cv
682.027 474.178 683.988 470.768 683.988 470.768 cv
684.176 469.221 li
684.359 467.682 li
680.797 471.424 li
680.797 471.424 682.465 461.725 680.574 455.771 cv
678.676 449.814 677.07 450.15 676.652 444.885 cv
676.246 439.619 679.824 448.904 677.961 438.26 cv
676.109 427.619 680.188 429.9 676.133 422.939 cv
674.84 420.705 670.953 413.986 670.953 413.986 cv
670.953 413.986 681.832 425.439 681.043 423.26 cv
680.262 421.08 690.02 437.607 689.703 436.01 cv
689.355 434.412 699.84 447.115 699.754 443.459 cv
699.664 439.799 700.32 436.498 701.348 436.615 cv
702.371 436.729 703.309 426.689 703.309 426.689 cv
709.621 452.447 li
709.621 452.447 712.316 473.615 709.855 468.104 cv
707.375 462.6 709.98 480.104 709.98 480.104 cv
707.457 497.002 li
707.457 497.002 706.23 507.271 705.781 506.701 cv
705.324 506.131 705.629 512.416 705.629 512.416 cv
700.379 525.865 li
696.594 534.506 li
695.371 537.248 li
695.371 537.248 696.324 534.607 696.785 531.189 cv
697.051 529.229 697.156 527.037 696.848 524.912 cv
695.973 519.076 698.844 516.818 700.238 513.85 cv
701.637 510.896 699.195 500.713 701.168 497.299 cv
703.137 493.877 703.625 489.768 703.082 485.537 cv
702.863 483.807 702.418 481.779 701.965 479.986 cv
701.305 477.424 700.645 475.354 700.645 475.354 cv
700.645 475.354 703.578 481.428 699.395 490.303 cv
695.215 499.186 692.996 504.658 693.207 507.291 cv
693.406 509.92 690.746 514.811 691.98 517.568 cv
691.98 517.568 695.191 516.904 693.969 527.178 cv
692.738 537.455 690.66 541.9 690.66 541.9 cv
690.66 541.9 687.863 547.818 686.586 549.752 cv
685.332 551.686 684.535 549.506 684.383 555.213 cv
684.223 560.936 683.652 561.377 683.285 564.467 cv
682.918 567.541 683.34 569.838 680.559 578.729 cv
675.512 594.807 671.34 585.971 671.34 585.971 cv
670.133 596.252 li
670.133 596.252 655.238 616.365 656.047 613.857 cv
656.867 611.35 659.543 606.447 659.543 606.447 cv
cp
f
473.446 317.346 mo
474.395 314.096 474.028 315.869 476.071 308.721 cv
481.321 290.346 484.067 290.311 488.583 285.748 cv
493.09 281.182 503.441 274.807 499.583 280.725 cv
495.739 286.654 510.195 281.721 510.195 281.721 cv
510.195 281.721 526.836 268.111 517.504 272.631 cv
511.637 275.471 535.473 257.932 509.246 269.447 cv
502.77 272.283 514.199 257.947 508.387 263.307 cv
502.574 268.666 503.824 271.232 498.551 273.369 cv
490.133 276.795 499.27 261.822 495.739 266.67 cv
492.2 271.518 489.102 269.439 486.887 277.018 cv
484.676 284.607 493.606 264.877 489.102 269.439 cv
484.583 273.998 490.598 253.412 486.793 266.412 cv
485.645 270.381 485.098 272.557 484.84 273.846 cv
484.223 276.775 485 275.104 483.004 279.416 cv
480.129 285.631 483.551 266.643 481.02 275.311 cv
479.868 279.283 480.829 275.979 481.973 272.057 cv
483.317 267.424 486.497 256.533 485.129 261.236 cv
482.606 269.893 479.372 265.475 476.762 271.717 cv
473.258 280.104 476.34 258.662 474.434 265.162 cv
472.536 271.666 467.024 272.396 467.024 272.396 cv
467.024 272.396 463.747 289.08 464.465 297.521 cv
465.184 305.955 473.95 285.006 473.95 285.006 cv
473.95 285.006 481.973 275.424 478.176 285.057 cv
471.946 300.846 473.446 317.346 473.446 317.346 cv
cp
.27451 .207843 .145098 rgb
f
454.895 295.627 mo
454.895 295.627 456.801 288.268 457.696 284.346 cv
458.583 280.432 458.918 279.424 459.711 273.732 cv
460.27 269.709 461.825 267.455 461.825 267.455 cv
461.184 270.252 460.504 262.732 459.997 264.971 cv
459.497 267.213 459.129 261.236 458.622 263.475 cv
458.118 265.717 459.735 254.299 456.84 259.537 cv
453.934 264.768 456.208 264.104 454.204 265.416 cv
452.192 266.729 454.481 256.58 452.114 261.939 cv
449.762 267.291 449.043 263.064 448.02 267.545 cv
447.004 272.025 449.469 260.482 445.043 262.42 cv
440.614 264.361 441.829 264.307 441.196 267.115 cv
440.551 269.912 442.254 270.357 440.95 273.596 cv
439.649 276.83 436.083 274.303 436.083 274.303 cv
436.083 274.303 435.575 264.705 433.208 270.068 cv
430.86 275.424 431.411 261.143 430.903 263.381 cv
430.395 265.623 425.918 264.213 424.715 266.154 cv
421.145 271.811 420.379 268.92 419.235 273.955 cv
418.083 279.002 420.219 267.111 417.856 272.471 cv
415.504 277.818 408.504 263.912 407.614 267.826 cv
406.731 271.744 406.043 266.838 404.258 274.67 cv
402.477 282.51 402.477 272.51 401.465 276.979 cv
400.438 281.463 393.723 267.717 392.575 272.768 cv
391.434 277.803 382.2 272.486 388.274 279.877 cv
389.559 281.439 377.676 286.607 373.696 287.721 cv
364.321 290.346 377.446 285.846 387.571 291.846 cv
393.778 295.525 402.946 303.471 407.821 305.721 cv
414.192 308.658 406.063 305.486 401.598 298.131 cv
398.704 293.354 396.43 294.096 394.903 290.807 cv
393.372 287.51 400.731 292.721 399.2 289.428 cv
397.668 286.131 402.262 285.994 401.559 284.068 cv
399.668 278.889 409.157 279.604 411.286 283.107 cv
411.692 283.787 413.942 282.178 413.942 282.178 cv
417.668 288.322 li
417.668 288.322 429.793 309.248 427.696 303.471 cv
425.598 297.689 419.778 284.096 418.528 282.037 cv
417.29 279.994 417.29 279.994 417.29 279.994 cv
417.29 279.994 423.153 284.268 422.575 281.779 cv
422.004 279.295 426.266 285.572 425.825 282.518 cv
425.379 279.482 430.504 289.479 429.77 285.189 cv
429.036 280.9 437.161 292.76 435.473 287.662 cv
433.786 282.568 443.114 304.127 441.43 299.029 cv
439.739 293.936 440.411 293.498 439.133 289.08 cv
437.864 284.674 437.864 284.674 437.864 284.674 cv
437.864 284.674 437.77 287.6 439.321 283.24 cv
440.887 278.881 442.793 280.498 442.793 280.498 cv
444.571 288.846 li
444.571 288.846 447.641 299.26 446.528 296.658 cv
445.415 294.049 452.231 309.15 450.793 302.932 cv
449.364 296.717 450.567 296.396 449.426 291.428 cv
448.274 286.455 447.805 292.568 449.071 286.971 cv
450.348 281.369 448.536 285.326 449.551 280.854 cv
450.575 276.373 451.309 280.666 452.192 276.736 cv
453.083 272.818 454.583 273.752 454.583 273.752 cv
455.442 277.479 li
453.372 284.076 li
453.372 284.076 454.84 292.658 454.254 290.166 cv
453.688 287.682 454.895 295.627 454.895 295.627 cv
cp
f
388.739 297.119 mo
388.739 297.119 383.727 293.885 379.872 292.486 cv
376.016 291.096 380.633 293.705 375.668 292.58 cv
370.708 291.447 381.786 295.533 376.321 294.291 cv
370.872 293.053 377.653 293.029 370.872 293.053 cv
364.075 293.068 365.786 292.42 364.075 293.068 cv
362.364 293.729 376.254 296.885 370.801 295.65 cv
365.34 294.404 379.786 297.998 372.059 296.975 cv
350.27 294.107 367.676 297.033 364.278 296.775 cv
336.571 294.646 378.333 301.537 374.356 300.635 cv
370.391 299.736 379.458 301.291 385.012 302.018 cv
395.661 303.389 385.918 298.041 381.45 297.029 cv
376.981 296.018 394.622 301.064 394.622 301.064 cv
388.739 297.119 li
cp
f
430.817 373.471 mo
430.817 373.471 369.571 363.971 327.571 393.221 cv
327.571 393.221 352.321 362.471 419.071 365.471 cv
430.817 373.471 li
cp
f
340.567 305.721 mo
340.567 305.721 274.684 352.936 276.067 471.471 cv
277.317 579.053 365.047 657.611 387.817 668.725 cv
387.817 668.725 307.391 602.279 290.317 514.971 cv
264.098 380.873 340.567 305.721 340.567 305.721 cv
cp
f
gsave
332.317 315.471 mo
332.317 315.471 286.567 357.471 283.567 441.471 cv
280.567 525.471 306.067 621.475 420.817 689.725 cv
420.817 689.725 318.817 597.471 360.817 442.221 cv
402.817 286.971 332.317 315.471 332.317 315.471 cv
cp
clp
276.067 406.971 mo
276.067 406.971 297.067 433.221 350.317 431.721 cv
350.317 431.721 295.567 443.721 276.067 406.971 cv
cp
f
279.817 396.471 mo
279.817 396.471 300.817 422.721 354.067 421.221 cv
354.067 421.221 299.317 433.221 279.817 396.471 cv
cp
f
269.317 430.221 mo
269.317 430.221 290.317 456.471 343.567 454.971 cv
343.567 454.971 288.817 466.971 269.317 430.221 cv
cp
f
273.067 419.721 mo
273.067 419.721 294.067 445.971 347.317 444.471 cv
347.317 444.471 292.567 456.471 273.067 419.721 cv
cp
f
265.215 456.904 mo
265.215 456.904 287.489 482.088 340.598 477.963 cv
340.598 477.963 286.508 492.646 265.215 456.904 cv
cp
f
268.442 446.236 mo
268.442 446.236 290.715 471.416 343.825 467.287 cv
343.825 467.287 289.731 481.979 268.442 446.236 cv
cp
f
268.508 487.346 mo
268.508 487.346 293.739 509.564 345.922 498.865 cv
345.922 498.865 294.079 520.162 268.508 487.346 cv
cp
f
270.383 476.357 mo
270.383 476.357 295.614 498.572 347.797 487.873 cv
347.797 487.873 295.954 509.178 270.383 476.357 cv
cp
f
270.739 512.51 mo
270.739 512.51 296.61 533.979 348.458 521.764 cv
348.458 521.764 297.262 544.568 270.739 512.51 cv
cp
f
272.293 501.471 mo
272.293 501.471 298.161 522.939 350.012 510.717 cv
350.012 510.717 298.813 533.529 272.293 501.471 cv
cp
f
275.364 538.9 mo
275.364 538.9 302.844 558.26 353.567 542.002 cv
353.567 542.002 304.321 568.768 275.364 538.9 cv
cp
f
276.043 527.771 mo
276.043 527.771 303.52 547.135 354.243 530.869 cv
354.243 530.869 305 557.639 276.043 527.771 cv
cp
f
280.954 565.068 mo
280.954 565.068 309.782 582.354 359.168 562.393 cv
359.168 562.393 312.032 592.721 280.954 565.068 cv
cp
f
280.809 553.92 mo
280.809 553.92 309.637 571.205 359.024 551.24 cv
359.024 551.24 311.891 581.572 280.809 553.92 cv
cp
f
289.051 591.4 mo
289.051 591.4 319.153 606.357 366.817 582.572 cv
366.817 582.572 322.208 616.518 289.051 591.4 cv
cp
f
288.028 580.295 mo
288.028 580.295 318.125 595.256 365.793 571.467 cv
365.793 571.467 321.192 605.416 288.028 580.295 cv
cp
f
296.551 613.904 mo
296.551 613.904 326.653 628.857 374.317 605.072 cv
374.317 605.072 329.708 639.018 296.551 613.904 cv
cp
f
295.528 602.795 mo
295.528 602.795 325.625 617.76 373.293 593.967 cv
373.293 593.967 328.692 627.92 295.528 602.795 cv
cp
f
307.051 634.154 mo
307.051 634.154 337.153 649.107 384.817 625.322 cv
384.817 625.322 340.208 659.268 307.051 634.154 cv
cp
f
306.028 623.045 mo
306.028 623.045 336.125 638.01 383.793 614.221 cv
383.793 614.221 339.192 648.17 306.028 623.045 cv
cp
f
320.247 656.127 mo
320.247 656.127 350.985 669.721 397.543 643.834 cv
397.543 643.834 354.497 679.736 320.247 656.127 cv
cp
f
318.723 645.076 mo
318.723 645.076 349.461 658.682 396.02 632.783 cv
396.02 632.783 352.981 668.689 318.723 645.076 cv
cp
f
335.247 673.377 mo
335.247 673.377 365.985 686.971 412.543 661.084 cv
412.543 661.084 369.497 696.986 335.247 673.377 cv
cp
f
333.723 662.326 mo
333.723 662.326 364.461 675.932 411.02 650.033 cv
411.02 650.033 367.981 685.939 333.723 662.326 cv
cp
f
282.817 384.471 mo
282.817 384.471 303.817 410.721 357.067 409.221 cv
357.067 409.221 302.317 421.221 282.817 384.471 cv
cp
f
286.567 373.971 mo
286.567 373.971 307.567 400.221 360.817 398.721 cv
360.817 398.721 306.067 410.721 286.567 373.971 cv
cp
f
288.817 361.971 mo
288.817 361.971 309.817 388.221 363.067 386.721 cv
363.067 386.721 308.317 398.721 288.817 361.971 cv
cp
f
292.567 351.471 mo
292.567 351.471 313.567 377.721 366.817 376.221 cv
366.817 376.221 312.067 388.221 292.567 351.471 cv
cp
f
297.067 340.221 mo
297.067 340.221 318.067 366.471 371.317 364.971 cv
371.317 364.971 316.567 376.971 297.067 340.221 cv
cp
f
300.817 329.721 mo
300.817 329.721 321.817 355.971 375.067 354.471 cv
375.067 354.471 320.317 366.471 300.817 329.721 cv
cp
f
306.817 319.221 mo
306.817 319.221 327.817 345.471 381.067 343.971 cv
381.067 343.971 326.317 355.971 306.817 319.221 cv
cp
f
310.567 308.721 mo
310.567 308.721 331.567 334.971 384.817 333.471 cv
384.817 333.471 330.067 345.471 310.567 308.721 cv
cp
f
grestore
425.821 396.686 mo
425.821 396.686 469.145 400.674 495.407 384.021 cv
495.407 384.021 475.629 409.076 425.821 396.686 cv
cp
1 1 1 rgb
f
421.532 406.174 mo
421.532 406.174 471.125 413.674 508.496 389.275 cv
508.496 389.275 483.153 421.568 421.532 406.174 cv
cp
f
425.809 427.549 mo
425.809 427.549 477.247 435.572 516.031 409.311 cv
516.031 409.311 489.731 444.045 425.809 427.549 cv
cp
f
423.641 416.615 mo
423.641 416.615 473.247 424.123 510.613 399.717 cv
510.613 399.717 485.282 432.01 423.641 416.615 cv
cp
f
431.809 450.635 mo
431.809 450.635 483.247 458.658 522.031 432.4 cv
522.031 432.4 495.723 467.135 431.809 450.635 cv
cp
f
429.645 439.705 mo
429.645 439.705 479.247 447.205 516.613 422.807 cv
516.613 422.807 491.282 455.096 429.645 439.705 cv
cp
f
447.008 462.096 mo
447.008 462.096 490.333 466.088 516.59 449.432 cv
516.59 449.432 496.817 474.49 447.008 462.096 cv
cp
f
451.661 473.217 mo
451.661 473.217 494.981 477.205 521.246 460.549 cv
521.246 460.549 501.477 485.604 451.661 473.217 cv
cp
f
gsave
712.379 398.014 mo
712.379 398.014 749.316 493.971 698.316 577.971 cv
647.316 661.975 572.316 692.971 572.316 692.971 cv
572.316 692.971 632.316 643.225 638.316 535.221 cv
644.316 427.221 620.316 407.975 620.316 407.975 cv
712.379 398.014 li
cp
clp
721.566 481.221 mo
721.566 481.221 696.816 511.971 613.566 508.221 cv
613.566 508.221 690.066 524.721 721.566 481.221 cv
cp
.27451 .207843 .145098 rgb
f
723.816 494.721 mo
723.816 494.721 699.066 525.471 615.816 521.721 cv
615.816 521.721 692.316 538.221 723.816 494.721 cv
cp
f
725.316 509.721 mo
725.316 509.721 700.566 540.471 617.316 536.721 cv
617.316 536.721 693.816 553.221 725.316 509.721 cv
cp
f
723.816 526.221 mo
723.816 526.221 699.066 556.971 615.816 553.221 cv
615.816 553.221 692.316 569.721 723.816 526.221 cv
cp
f
723.066 541.221 mo
723.066 541.221 698.316 571.971 615.066 568.221 cv
615.066 568.221 691.566 584.721 723.066 541.221 cv
cp
f
721.566 556.971 mo
721.566 556.971 696.816 587.721 613.566 583.971 cv
613.566 583.971 690.066 600.471 721.566 556.971 cv
cp
f
721.566 454.221 mo
721.566 454.221 696.816 484.971 613.566 481.221 cv
613.566 481.221 690.066 497.721 721.566 454.221 cv
cp
f
723.816 467.721 mo
723.816 467.721 699.066 498.471 615.816 494.721 cv
615.816 494.721 692.316 511.221 723.816 467.721 cv
cp
f
721.566 426.471 mo
721.566 426.471 696.816 457.221 613.566 453.471 cv
613.566 453.471 690.066 469.971 721.566 426.471 cv
cp
f
723.816 439.971 mo
723.816 439.971 699.066 470.721 615.816 466.971 cv
615.816 466.971 692.316 483.471 723.816 439.971 cv
cp
f
716.316 573.471 mo
716.316 573.471 691.566 604.221 608.316 600.471 cv
608.316 600.471 684.816 616.975 716.316 573.471 cv
cp
f
714.816 589.221 mo
714.816 589.221 690.066 619.975 606.816 616.225 cv
606.816 616.225 683.316 632.725 714.816 589.221 cv
cp
f
725.316 394.971 mo
725.316 394.971 700.566 425.721 617.316 421.971 cv
617.316 421.971 693.816 438.471 725.316 394.971 cv
cp
f
723.816 410.721 mo
723.816 410.721 699.066 441.471 615.816 437.721 cv
615.816 437.721 692.316 454.221 723.816 410.721 cv
cp
f
705.066 604.971 mo
705.066 604.971 680.316 635.725 597.066 631.975 cv
597.066 631.975 673.566 648.475 705.066 604.971 cv
cp
f
703.566 620.725 mo
703.566 620.725 678.816 651.475 595.566 647.725 cv
595.566 647.725 672.066 664.225 703.566 620.725 cv
cp
f
685.512 639.545 mo
685.512 639.545 658.707 668.525 575.914 659.045 cv
575.914 659.045 651.09 680.771 685.512 639.545 cv
cp
f
682.93 655.154 mo
682.93 655.154 656.121 684.127 573.332 674.654 cv
573.332 674.654 648.512 696.381 682.93 655.154 cv
cp
f
grestore
446.176 370.229 mo
444.418 370.229 442.754 370.096 441.223 369.822 cv
439.723 369.561 li
438.918 368.252 li
438.872 368.178 434.075 360.518 427.692 359.318 cv
421.063 358.076 414.489 353.627 412.059 348.732 cv
410.879 346.357 410.778 343.951 411.778 341.955 cv
413.54 338.416 416.329 337.803 418.364 337.354 cv
419.817 337.037 421.063 336.76 422.559 335.432 cv
423.004 335.041 423.481 334.557 424.016 334.037 cv
427.114 330.982 431.801 326.361 438.7 326.361 cv
444.149 326.361 449.563 329.225 455.258 335.111 cv
461.903 341.971 471.145 345.424 474.145 346.174 cv
477.993 347.135 488.817 349.104 488.926 349.127 cv
498.059 350.779 li
490.016 355.416 li
488.965 356.021 464.106 370.229 446.176 370.229 cv
cp
.27451 .207843 .145098 rgb
f
441.817 366.475 mo
441.817 366.475 436.321 357.475 428.317 355.975 cv
420.313 354.475 412.817 347.475 414.817 343.475 cv
416.817 339.471 420.317 341.979 424.817 337.975 cv
429.317 333.971 437.817 321.971 452.817 337.475 cv
459.715 344.604 469.317 348.471 473.317 349.475 cv
477.317 350.475 488.317 352.471 488.317 352.471 cv
488.317 352.471 458.817 369.475 441.817 366.475 cv
cp
.509804 .317647 .164706 rgb
f
431.235 358.709 mo
429.77 358.709 428.7 358.307 427.926 357.791 cv
427.813 357.799 427.7 357.799 427.59 357.799 cv
425.786 357.799 423.778 357.229 422.188 356.291 cv
420.899 356.275 419.446 356.178 417.946 355.424 cv
415.817 354.361 414.848 352.65 414.262 351.631 cv
414.129 351.4 413.942 351.072 413.864 350.986 cv
413.903 351.033 413.895 351.049 413.864 351.049 cv
413.825 351.049 413.75 351.025 413.668 350.986 cv
410.188 349.592 409.45 347.213 409.45 345.463 cv
409.45 345.24 409.418 344.893 409.395 344.486 cv
409.27 342.248 409.192 340.26 409.567 338.572 cv
410.372 334.955 414.012 331.619 419.293 329.635 cv
420.793 329.072 421.926 328.732 422.84 328.455 cv
424.192 328.049 424.192 328.049 424.497 327.717 cv
426.172 325.877 428.403 324.908 430.965 324.908 cv
433.168 324.908 435.524 325.627 438.184 327.104 cv
439.278 327.713 440.043 328.057 440.637 328.326 cv
441.786 328.85 442.965 329.389 444.348 330.721 cv
446.676 332.639 448.719 335.885 447.739 339.475 cv
447.7 339.791 447.747 340.346 447.758 340.936 cv
447.817 343.33 447.887 346.615 445.762 349.213 cv
445.278 349.799 444.786 350.26 444.301 350.627 cv
443.77 352.674 442.489 354.596 440.301 355.939 cv
437.184 357.846 433.415 358.709 431.235 358.709 cv
cp
.27451 .207843 .145098 rgb
f
442.696 333.4 mo
442.696 333.4 445.473 335.58 444.875 337.764 cv
444.278 339.955 445.473 344.518 443.684 346.705 cv
441.899 348.893 440.704 346.904 440.704 346.904 cv
440.704 346.904 442.489 350.885 438.918 353.068 cv
435.34 355.252 430.379 355.842 430.77 355.049 cv
431.168 354.26 432.168 353.268 430.77 353.068 cv
429.379 352.865 429.981 353.861 428.387 354.26 cv
426.793 354.658 424.614 353.861 423.618 353.068 cv
422.622 352.271 420.637 353.068 419.047 352.271 cv
417.458 351.475 417.266 349.689 415.872 348.299 cv
414.477 346.904 412.489 347.107 412.489 345.916 cv
412.489 344.721 412.09 341.143 412.489 339.357 cv
412.887 337.572 415.274 334.986 420.043 333.197 cv
424.813 331.408 425.997 331.807 427.989 329.619 cv
429.973 327.436 433.157 328.029 436.731 330.018 cv
440.309 332.002 441.102 331.811 442.696 333.4 cv
cp
.67451 .388235 .0627451 rgb
f
427.59 351.377 mo
427.59 351.377 421.333 352.865 421.629 349.291 cv
421.93 345.713 421.036 344.521 419.543 344.818 cv
418.059 345.119 417.458 341.838 418.95 341.244 cv
420.442 340.646 418.356 337.072 421.629 337.369 cv
424.907 337.666 429.079 340.346 431.469 337.967 cv
431.469 337.967 430.575 340.947 426.993 340.646 cv
423.418 340.346 419.543 339.455 421.629 341.244 cv
423.715 343.033 424.016 343.924 424.317 346.014 cv
424.614 348.1 420.442 351.377 427.59 351.377 cv
cp
.27451 .207843 .145098 rgb
f
447.317 337.971 mo
447.317 337.971 451.317 343.975 453.317 344.975 cv
455.325 345.971 454.317 345.471 459.317 348.971 cv
464.325 352.475 467.821 353.471 467.821 353.471 cv
479.325 357.471 li
479.325 357.471 467.821 358.971 457.817 352.971 cv
447.817 346.971 446.325 344.975 446.325 344.975 cv
447.317 337.971 li
cp
f
456.793 341.092 mo
454.317 341.275 452.118 340.654 450.653 340.057 cv
449.426 340.65 447.864 341.271 446.536 341.369 cv
444.051 341.557 442.883 340.088 442.489 339.447 cv
441.02 337.029 442.708 334.303 443.348 333.279 cv
447.684 326.268 471.543 315.975 471.782 315.869 cv
471.973 315.787 472.809 315.537 474.008 315.205 cv
479.118 313.791 482.317 312.76 483.547 312.131 cv
484.7 310.111 486.395 309.756 487.129 309.701 cv
488.165 309.623 li
489.387 310.193 li
489.325 310.158 489.309 310.15 489.34 310.15 cv
489.434 310.139 489.903 310.213 490.708 310.15 cv
491.469 310.096 492.403 309.936 493.536 309.615 cv
494.165 309.439 494.801 309.33 495.45 309.283 cv
501.289 308.842 506.863 313.482 507.477 314.014 cv
512.938 318.705 li
505.848 319.943 li
484.739 323.623 470.543 333.479 464.489 337.689 cv
463.434 338.42 462.575 339.01 461.934 339.412 cv
460.372 340.389 458.645 340.955 456.793 341.092 cv
cp
f
450.583 336.244 mo
450.583 336.244 455.575 339.373 460.129 336.525 cv
464.68 333.682 480.02 320.99 505.262 316.592 cv
505.262 316.592 499.364 311.518 494.458 312.893 cv
489.547 314.264 487.708 313.15 487.708 313.15 cv
487.708 313.15 486.922 312.705 486.286 314.256 cv
485.645 315.807 473.833 318.701 473.106 319.01 cv
472.372 319.314 449.817 329.287 446.235 335.068 cv
442.653 340.85 450.583 336.244 450.583 336.244 cv
cp
.556863 .768627 .352941 rgb
f
689.375 498.896 mo
686.965 493.053 675.09 487.814 670.813 486.717 cv
668.863 486.217 667.855 485.85 667.012 485.549 cv
666.129 485.236 665.699 485.076 663.621 484.771 cv
659.332 484.146 656.379 482.104 654.785 480.674 cv
650.137 478.955 647.449 476.166 646.02 474.131 cv
642.418 472.49 640.063 470.119 638.75 467.904 cv
635.902 465.982 632.73 462.889 631.168 461.283 cv
628.598 459.713 625.578 456.963 624.215 455.662 cv
621.148 453.877 618.988 450.893 617.816 448.947 cv
614.824 447.143 613.223 445.135 612.387 443.408 cv
608.891 440.744 606.426 436.299 605.137 433.51 cv
602.77 431.861 601.191 429.623 600.242 427.908 cv
597.043 426.303 594.973 423.834 593.895 422.256 cv
591.246 420.33 588.816 417.279 587.34 415.229 cv
584.047 413.791 581.73 411.025 580.402 409.018 cv
576.988 407.416 574.484 404.236 573.059 402.006 cv
570.457 400.725 568.824 398.998 567.926 397.795 cv
565.156 395.576 562.645 392.096 561.289 390.057 cv
558.523 388.541 556.574 386.416 555.457 384.963 cv
552.277 383.283 550.574 381.236 549.637 379.451 cv
547.238 377.873 545.793 375.588 544.957 373.744 cv
543.688 372.99 542.605 372.053 541.754 371.15 cv
541.035 370.639 538.027 368.439 536.004 365.998 cv
535.645 365.557 535.23 365.037 534.793 364.451 cv
533.199 362.354 531.02 359.494 527.355 357.166 cv
525.152 355.756 523.129 354.174 521.434 352.721 cv
519.215 351.623 li
515.238 349.666 511.332 346.006 508.598 343.061 cv
506.375 341.604 li
502.332 338.971 499.508 336.209 497.629 333.982 cv
493.918 333.17 490.973 328.908 490.02 326.01 cv
489.583 324.658 489.262 323.955 489.168 323.76 cv
488.223 321.877 li
488.708 319.76 li
492.895 303.377 506.801 294.752 507.402 294.393 cv
516.051 289.119 li
516.027 290.658 li
518.004 289.783 519.527 289.248 519.875 289.127 cv
528.504 286.162 li
528.434 286.639 li
528.902 286.506 539.656 283.76 539.656 283.76 cv
539.188 285.158 li
542.098 284.713 545.457 284.955 547.465 285.193 cv
550.48 284.318 553.184 284.053 555.543 284.396 cv
556.465 284.529 557.277 284.744 557.957 285.002 cv
560.262 284.736 562.371 284.74 564.246 285.01 cv
566.09 285.279 567.543 285.775 568.676 286.342 cv
570.195 286.135 571.668 286.127 573.082 286.33 cv
575.246 286.643 576.941 287.4 578.199 288.209 cv
580.051 288.025 581.668 288.037 583.121 288.248 cv
585.348 288.572 587.09 289.381 588.363 290.439 cv
589.504 290.443 590.586 290.518 591.59 290.662 cv
594.551 291.092 596.543 292.1 597.879 293.15 cv
609.098 295.303 615.801 299.471 619.902 302.014 cv
620.793 302.568 621.902 303.26 622.293 303.408 cv
624.52 304.041 627.266 305.604 630.754 307.564 cv
633.406 309.061 636.426 310.76 639.051 311.893 cv
644.09 314.064 646.363 317.068 647.387 319.486 cv
649.309 320.76 651.266 322.408 652.449 323.447 cv
655.301 325.115 657.219 327.303 658.332 328.807 cv
661.223 330.338 662.879 332.033 663.801 333.604 cv
665.621 334.627 666.828 335.662 667.629 336.564 cv
670.316 338.447 671.652 341.119 672.293 343.135 cv
674.77 345.186 676.098 347.4 676.801 349.049 cv
679.074 350.967 680.363 352.775 681.066 354.354 cv
684.277 356.705 685.738 359.178 686.328 361.287 cv
690.121 363.877 691.578 366.752 692.066 369.014 cv
693.941 371.158 694.762 373.428 695 375.396 cv
697.105 377.896 697.871 380.674 698.141 382.643 cv
699.875 385.08 700.777 387.654 701.207 389.24 cv
703.535 392.619 703.906 395.639 703.637 397.869 cv
704.863 400.111 705.477 402.01 705.785 403.318 cv
708.313 407.049 709.004 410.604 709.207 412.545 cv
710.496 415.877 710.609 418.943 710.449 420.994 cv
711.816 423.857 711.879 426.467 711.41 428.506 cv
713.113 433.779 712.813 438.025 712.41 440.33 cv
713.281 444.807 712.363 448.768 711.707 450.787 cv
711.711 450.807 li
711.551 454.67 710.738 456.471 709.902 457.943 cv
709.906 458.135 709.934 458.361 709.957 458.635 cv
710.469 463.365 709.301 467.678 708.621 469.713 cv
708.527 473.51 707.445 476.213 706.371 477.971 cv
706.27 483.162 703.934 487.096 701.797 489.373 cv
701.223 491.049 700.598 492.408 699.879 493.459 cv
698.941 496.822 696.691 499.416 696.176 499.979 cv
692.738 505.959 li
689.375 498.896 li
cp
.27451 .207843 .145098 rgb
f
494.137 321.295 mo
494.137 321.295 494.633 322.213 495.348 324.404 cv
496.083 326.592 498.098 328.557 498.918 328.678 cv
499.731 328.799 499.559 327.096 499.559 327.096 cv
499.559 327.096 502.156 332.275 509.598 337.115 cv
509.426 335.42 li
509.426 335.42 515.926 343.873 521.965 346.842 cv
520.863 344.389 li
520.863 344.389 525.184 349.193 530.73 352.709 cv
536.277 356.221 538.98 360.584 540.762 362.721 cv
542.543 364.861 545.586 366.967 545.586 366.967 cv
544.73 365.588 li
544.73 365.588 546.918 369.26 549.957 369.9 cv
549.957 369.9 550.941 374.635 554.746 375.811 cv
554.746 375.811 554.738 378.736 559.855 380.939 cv
559.855 380.939 561.98 384.588 565.836 386.084 cv
565.836 386.084 569.512 392.1 572.793 394.299 cv
572.793 394.299 574.145 396.846 577.746 397.994 cv
577.746 397.994 581.066 404.268 585.051 404.842 cv
585.051 404.842 587.715 410.24 591.832 410.998 cv
591.832 410.998 595.816 417.057 599.012 418.775 cv
599.012 418.775 601.082 422.826 605.445 424.092 cv
605.445 424.092 606.996 428.545 610.672 430.174 cv
610.672 430.174 614.012 438.486 618.285 440.357 cv
618.285 440.357 618.215 443.014 623.184 445.455 cv
623.184 445.455 625.48 450.174 628.848 451.756 cv
628.848 451.756 633.379 456.174 636.008 457.494 cv
636.008 457.494 641.586 463.314 644.527 464.678 cv
644.527 464.678 645.543 468.432 651.379 470.369 cv
651.379 470.369 653.098 474.689 659.41 476.541 cv
659.41 476.541 661.668 479.377 666.105 480.021 cv
670.559 480.666 669.723 481.018 673.953 482.096 cv
678.176 483.178 690.434 488.4 694.02 497.064 cv
694.02 497.064 696.441 494.436 696.668 491.807 cv
696.668 491.807 697.676 491.326 698.91 487.119 cv
698.91 487.119 703.484 483.713 702.73 477.021 cv
702.73 477.021 705.23 474.877 705.059 469.533 cv
705.059 469.533 706.977 464.951 706.441 460.021 cv
705.902 455.084 707.941 457.256 708.168 451.338 cv
708.402 445.42 708.105 450.705 708.105 450.705 cv
708.105 450.705 710.176 446.146 708.711 441.08 cv
708.711 441.08 710.363 436.15 707.457 429.15 cv
707.457 429.15 709.379 426.768 706.668 422.768 cv
706.668 422.768 707.707 418.85 705.668 414.479 cv
705.668 414.479 705.793 410.428 702.488 406.189 cv
702.488 406.189 702.27 403.338 699.566 399.346 cv
699.566 399.346 701.395 396.479 697.934 392.213 cv
697.934 392.213 697.254 388.205 694.551 385.299 cv
694.551 385.299 694.859 380.963 691.191 378.236 cv
691.191 378.236 692.262 375.107 688.48 372.053 cv
688.48 372.053 689.469 368.436 682.746 365.111 cv
682.746 365.111 684.004 361.85 677.941 358.307 cv
677.941 358.307 678.246 356.158 673.723 352.842 cv
673.723 352.842 673.109 349.463 668.949 346.822 cv
668.949 346.822 668.59 342.854 665.395 341.139 cv
665.395 341.139 664.668 339.623 660.84 337.971 cv
660.84 337.971 661.301 335.846 655.996 333.514 cv
655.996 333.514 654.27 330.291 650.637 328.35 cv
650.637 328.35 646.191 324.42 643.98 323.471 cv
643.98 323.471 644.184 319.9 638.141 317.299 cv
632.094 314.705 625.109 309.928 621.805 308.986 cv
618.496 308.029 611.82 301.115 596.066 298.518 cv
596.066 298.518 594.777 295.514 586.348 296.33 cv
586.348 296.33 586.59 292.604 577.262 294.232 cv
577.262 294.232 574.668 290.564 568.129 292.439 cv
568.129 292.439 566.047 289.475 557.535 290.904 cv
557.535 290.904 555.34 288.709 548.441 290.994 cv
548.441 290.994 542.152 290.088 539.188 291.068 cv
536.23 292.041 531.777 292.502 531.176 293.35 cv
530.586 294.209 531.402 291.822 531.402 291.822 cv
531.402 291.822 523.926 293.705 521.727 295.904 cv
521.918 294.518 li
521.918 294.518 514.512 297.049 510.406 300.525 cv
510.43 299.279 li
510.43 299.279 497.833 306.9 494.137 321.295 cv
cp
.415686 .596078 .164706 rgb
f
494.223 319.225 mo
494.223 319.225 534.504 322.342 579.863 355.221 cv
625.223 388.107 675.219 427.928 692.285 491.799 cv
692.285 491.799 687.43 445.986 642.785 403.807 cv
598.152 361.635 549.613 318.889 494.223 319.225 cv
cp
.27451 .207843 .145098 rgb
f
589.871 353.225 mo
589.871 353.225 618.48 337.322 667.906 352.936 cv
667.906 352.936 624.48 339.131 590.254 354.854 cv
590.254 354.854 588.152 354.232 589.871 353.225 cv
cp
f
596.867 358.939 mo
596.867 358.939 625.484 343.033 674.91 358.654 cv
674.91 358.654 631.488 344.842 597.254 360.564 cv
597.254 360.564 595.156 359.943 596.867 358.939 cv
cp
f
605.465 364.322 mo
605.465 364.322 632.629 349.029 679.473 363.924 cv
679.473 363.924 638.316 350.756 605.824 365.873 cv
605.824 365.873 603.828 365.287 605.465 364.322 cv
cp
f
611.441 370.545 mo
611.441 370.545 638.238 355.607 684.52 370.252 cv
684.52 370.252 643.859 357.307 611.801 372.068 cv
611.801 372.068 609.84 371.49 611.441 370.545 cv
cp
f
617.41 376.771 mo
617.41 376.771 643.121 362.096 687.402 376.264 cv
687.402 376.264 648.5 363.729 617.75 378.256 cv
617.75 378.256 615.871 377.693 617.41 376.771 cv
cp
f
623.77 382.455 mo
623.77 382.455 648.238 368.42 690.336 381.928 cv
690.336 381.928 653.348 369.979 624.098 383.873 cv
624.098 383.873 622.301 383.338 623.77 382.455 cv
cp
f
630.371 388.662 mo
630.371 388.662 652.699 377.717 692.867 388.104 cv
692.867 388.104 658.488 379.338 631.668 390.174 cv
631.668 390.174 629.043 389.354 630.371 388.662 cv
cp
f
583.605 346.678 mo
583.605 346.678 612.219 330.779 661.652 346.393 cv
661.652 346.393 618.23 332.588 584.004 348.307 cv
584.004 348.307 581.895 347.689 583.605 346.678 cv
cp
f
576.965 342.646 mo
576.965 342.646 604.879 325.549 654.922 339.072 cv
654.922 339.072 610.957 327.104 577.41 344.252 cv
577.41 344.252 575.293 343.725 576.965 342.646 cv
cp
f
570.523 337.33 mo
570.523 337.33 598.449 320.232 648.488 333.752 cv
648.488 333.752 604.52 321.787 570.98 338.932 cv
570.98 338.932 568.863 338.408 570.523 337.33 cv
cp
f
564.055 332.154 mo
564.055 332.154 592.004 312.982 641.59 327.33 cv
641.59 327.33 598.035 314.627 564.5 333.924 cv
564.5 333.924 562.391 333.361 564.055 332.154 cv
cp
f
556.145 328.338 mo
556.145 328.338 584.012 307.053 632.949 322.225 cv
632.949 322.225 589.949 308.787 556.555 330.264 cv
556.555 330.264 554.469 329.682 556.145 328.338 cv
cp
f
549.453 325.576 mo
549.453 325.576 576.359 303.08 625.91 316.088 cv
625.91 316.088 582.363 304.557 549.949 327.479 cv
549.949 327.479 547.84 326.99 549.453 325.576 cv
cp
f
543.027 323.006 mo
543.027 323.006 569.418 296.65 617.418 311.182 cv
617.418 311.182 575.234 298.291 543.496 325.205 cv
543.496 325.205 541.449 324.662 543.027 323.006 cv
cp
f
535.066 320.494 mo
535.066 320.494 559.129 294.889 607.652 304.428 cv
607.652 304.428 564.988 295.936 535.691 322.439 cv
535.691 322.439 533.629 322.096 535.066 320.494 cv
cp
f
563.176 347.174 mo
563.176 347.174 557.184 362.592 564.52 381.197 cv
564.52 381.197 559.238 363.518 564.746 349.279 cv
564.746 349.279 565.324 347.482 563.176 347.174 cv
cp
f
568.863 351.127 mo
568.863 351.127 562.879 366.549 570.207 385.154 cv
570.207 385.154 564.934 367.475 570.449 353.232 cv
570.449 353.232 571.012 351.436 568.863 351.127 cv
cp
f
574.512 355.389 mo
574.512 355.389 568.785 373.357 576.105 391.959 cv
576.105 391.959 570.574 371.736 576.082 357.502 cv
576.082 357.502 576.664 355.697 574.512 355.389 cv
cp
f
557.949 343.908 mo
557.949 343.908 552.387 358.635 558.949 376.318 cv
558.949 376.318 554.258 359.506 559.367 345.904 cv
559.367 345.904 559.895 344.189 557.949 343.908 cv
cp
f
526.676 318.049 mo
526.676 318.049 552.52 291.432 593.613 299.307 cv
593.613 299.307 556.063 292.814 527.293 320.049 cv
527.293 320.049 525.266 319.689 526.676 318.049 cv
cp
f
516.688 315.658 mo
516.688 315.658 541.273 290.744 573.754 295.764 cv
573.754 295.764 546.074 290.42 517.301 317.662 cv
517.301 317.662 515.277 317.307 516.688 315.658 cv
cp
f
505.684 313.752 mo
505.684 313.752 530.27 288.838 562.746 293.857 cv
562.746 293.857 535.066 288.518 506.301 315.756 cv
506.301 315.756 504.27 315.4 505.684 313.752 cv
cp
f
637.043 394.393 mo
637.043 394.393 657.949 383.936 695.492 393.736 cv
695.492 393.736 663.371 385.467 638.238 395.834 cv
638.238 395.834 635.785 395.053 637.043 394.393 cv
cp
f
641.809 400.334 mo
641.809 400.334 661.504 392.018 697.297 400.65 cv
697.297 400.65 666.676 393.361 642.973 401.533 cv
642.973 401.533 640.629 400.854 641.809 400.334 cv
cp
f
647.914 405.686 mo
647.914 405.686 667.996 397.748 701.844 406.322 cv
701.844 406.322 672.035 399.424 649.066 406.803 cv
649.066 406.803 646.77 406.158 647.914 405.686 cv
cp
f
551.574 340.791 mo
551.574 340.791 545.914 353.85 553.621 369.904 cv
553.621 369.904 547.988 354.682 553.184 342.623 cv
553.184 342.623 553.715 341.1 551.574 340.791 cv
cp
f
579.945 358.994 mo
579.945 358.994 573.684 380.646 582.504 397.584 cv
582.504 397.584 576.012 375.342 581.516 361.104 cv
581.516 361.104 582.09 359.299 579.945 358.994 cv
cp
f
585.238 363.525 mo
585.238 363.525 578.965 385.17 587.793 402.115 cv
587.793 402.115 581.305 379.865 586.813 365.631 cv
586.813 365.631 587.379 363.834 585.238 363.525 cv
cp
f
590.668 367.127 mo
590.668 367.127 584.402 388.771 593.23 405.717 cv
593.23 405.717 586.738 383.475 592.246 369.236 cv
592.246 369.236 592.816 367.439 590.668 367.127 cv
cp
f
545.293 337.955 mo
545.293 337.955 540.262 350.217 546.785 365.158 cv
546.785 365.158 542.047 350.979 546.684 339.658 cv
546.684 339.658 547.16 338.225 545.293 337.955 cv
cp
f
539.188 335.236 mo
539.188 335.236 534.031 346.096 541.605 359.693 cv
541.605 359.693 536.004 346.83 540.738 336.799 cv
540.738 336.799 541.227 335.533 539.188 335.236 cv
cp
f
596.137 372.619 mo
596.137 372.619 591.051 396.943 599.871 413.885 cv
599.871 413.885 592.207 388.971 597.711 374.729 cv
597.711 374.729 598.293 372.928 596.137 372.619 cv
cp
f
601.574 376.225 mo
601.574 376.225 595.426 401.338 605.871 420.08 cv
605.871 420.08 597.637 392.572 603.145 378.334 cv
603.145 378.334 603.723 376.533 601.574 376.225 cv
cp
f
607.176 380.795 mo
607.176 380.795 600.902 404.635 613.527 427.768 cv
613.527 427.768 603.004 405.256 608.785 382.432 cv
608.785 382.432 609.941 381.197 607.176 380.795 cv
cp
f
613.473 385.49 mo
613.473 385.49 605.301 411.092 619.949 437.143 cv
619.949 437.143 607.816 411.9 615.383 387.385 cv
615.383 387.385 616.809 386.107 613.473 385.49 cv
cp
f
618.613 390.908 mo
618.613 390.908 611.105 417.771 627.754 444.232 cv
627.754 444.232 613.809 418.514 620.699 392.803 cv
620.699 392.803 622.16 391.424 618.613 390.908 cv
cp
f
626.707 396.549 mo
626.707 396.549 618.406 423.17 634.254 450.119 cv
634.254 450.119 621.098 424.006 628.746 398.498 cv
628.746 398.498 630.246 397.17 626.707 396.549 cv
cp
f
533.34 332.709 mo
533.34 332.709 528.762 342.361 535.484 354.439 cv
535.484 354.439 530.527 343.014 534.734 334.104 cv
534.734 334.104 535.16 332.979 533.34 332.709 cv
cp
f
527.332 330.389 mo
527.332 330.389 522.605 338.912 530.324 349.947 cv
530.324 349.947 524.551 339.549 528.887 331.674 cv
528.887 331.674 529.324 330.678 527.332 330.389 cv
cp
f
521.668 327.689 mo
521.668 327.689 517.613 335.545 523.941 345.561 cv
523.941 345.561 519.238 336.104 522.957 328.85 cv
522.957 328.85 523.332 327.928 521.668 327.689 cv
cp
f
515.488 327.104 mo
515.488 327.104 511.551 334.229 517.977 343.447 cv
517.977 343.447 513.16 334.76 516.785 328.182 cv
516.785 328.182 517.156 327.35 515.488 327.104 cv
cp
f
633.383 402.986 mo
633.383 402.986 624.832 427.291 643.273 462.459 cv
643.273 462.459 628.41 434.064 635.051 406.76 cv
635.051 406.76 636.875 403.439 633.383 402.986 cv
cp
f
509.59 324.377 mo
509.59 324.377 506.023 330.045 512.238 337.604 cv
512.238 337.604 507.551 330.502 510.824 325.268 cv
510.824 325.268 511.16 324.6 509.59 324.377 cv
cp
f
639.59 408.357 mo
639.59 408.357 631.754 433.908 651.504 468.354 cv
651.504 468.354 636.102 437.752 641.723 410.221 cv
641.723 410.221 643.086 408.678 639.59 408.357 cv
cp
f
646.473 416.107 mo
646.473 416.107 640.484 441.807 660.754 475.955 cv
660.754 475.955 643.418 445.549 648.637 417.939 cv
648.637 417.939 649.973 416.373 646.473 416.107 cv
cp
f
653.074 411.131 mo
653.074 411.131 670.66 403.15 702.613 411.846 cv
702.613 411.846 677.207 404.869 654.223 412.244 cv
654.223 412.244 651.945 411.607 653.074 411.131 cv
cp
f
653.316 424.971 mo
653.316 424.971 649.574 456.549 667.605 478.15 cv
667.605 478.15 651.523 456.736 655.531 426.584 cv
655.531 426.584 656.684 424.936 653.316 424.971 cv
cp
f
658.582 416.232 mo
658.582 416.232 673.016 409.443 702.379 417.463 cv
702.379 417.463 679.824 411.756 659.609 417.111 cv
659.609 417.111 657.574 416.584 658.582 416.232 cv
cp
f
662.434 421.666 mo
662.434 421.666 678.684 416.072 704.27 424.193 cv
704.27 424.193 682.77 418.439 663.402 422.471 cv
663.402 422.471 661.461 421.943 662.434 421.666 cv
cp
f
665.895 427.279 mo
665.895 427.279 681.57 422.498 705.098 431.85 cv
705.098 431.85 685.27 425.061 666.754 428.123 cv
666.754 428.123 664.973 427.51 665.895 427.279 cv
cp
f
670.789 432.619 mo
670.789 432.619 684.828 429.713 706.418 437.557 cv
706.418 437.557 688.27 431.756 671.59 433.275 cv
671.59 433.275 669.969 432.752 670.789 432.619 cv
cp
f
675.012 437.803 mo
675.012 437.803 687.254 435.279 704.895 443.58 cv
704.895 443.58 689.98 437.389 675.641 438.475 cv
675.641 438.475 674.293 437.916 675.012 437.803 cv
cp
f
679.238 443.396 mo
679.238 443.396 690.738 441.268 706.41 450.033 cv
706.41 450.033 693.098 443.436 679.766 444.08 cv
679.766 444.08 678.566 443.482 679.238 443.396 cv
cp
f
682.207 448.639 mo
682.207 448.639 691.973 446.545 703.754 455.041 cv
703.754 455.041 693.637 448.65 682.559 449.307 cv
682.559 449.307 681.66 448.725 682.207 448.639 cv
cp
f
683.75 452.439 mo
683.75 452.439 693.012 451.291 702.355 460.623 cv
702.355 460.623 694.176 453.494 683.949 453.111 cv
683.949 453.111 683.223 452.463 683.75 452.439 cv
cp
f
660.309 432.873 mo
660.309 432.873 656.586 460.564 674.332 479.486 cv
674.332 479.486 658.512 460.725 662.492 434.287 cv
662.492 434.287 663.621 432.846 660.309 432.873 cv
cp
f
666.43 442.842 mo
666.43 442.842 666.078 465.139 680.496 482.26 cv
680.496 482.26 668.699 468.646 668.863 444.061 cv
668.863 444.061 670.121 442.803 666.43 442.842 cv
cp
f
674.652 455.307 mo
674.652 455.307 675.535 471.205 689.184 487.279 cv
689.184 487.279 679.414 476.779 677.082 456.525 cv
677.082 456.525 675.035 452.963 674.652 455.307 cv
cp
f
685.527 457.791 mo
685.527 457.791 694.863 457.76 703.02 468.139 cv
703.02 468.139 695.754 460.08 685.648 458.486 cv
685.648 458.486 685.004 457.764 685.527 457.791 cv
cp
f
686.988 462.217 mo
686.988 462.217 695.816 463.533 701.258 474.564 cv
701.258 474.564 696.152 465.869 686.957 462.896 cv
686.957 462.896 686.504 462.111 686.988 462.217 cv
cp
f
689.609 466.643 mo
689.609 466.643 697.176 471.373 697.77 483.65 cv
697.77 483.65 696.547 473.646 689.305 467.252 cv
689.305 467.252 689.207 466.35 689.609 466.643 cv
cp
f
760.566 497.904 mo
746.566 496.076 li
757.387 485.908 li
775.578 468.811 765.734 450.584 765.301 449.814 cv
757.191 435.268 li
771.781 439.744 li
772.625 440.002 780.09 442.572 785.113 453.889 cv
790.191 465.35 786.652 474.693 786.23 475.721 cv
785.797 476.775 li
785.445 480.096 784.391 482.533 784.203 482.947 cv
779.535 493.252 li
778.273 491.049 li
776.402 494.307 773.902 495.189 773.215 495.377 cv
772.391 495.6 li
770.871 496.83 769.18 497.568 767.699 497.885 cv
760.582 499.385 li
760.566 497.904 li
cp
f
771.418 447.693 mo
771.418 447.693 786.168 471.408 760.512 492.771 cv
760.512 492.771 764.137 493.146 766.344 490.838 cv
766.348 492.725 li
766.348 492.725 770.418 491.916 771.348 488.236 cv
772.309 490.209 li
772.309 490.209 774.879 489.564 775.449 484.221 cv
776.891 485.393 li
776.891 485.393 779.492 483.232 779 478.572 cv
780.582 481.041 li
780.582 481.041 782.785 476.854 781.414 472.85 cv
782.863 474.014 li
782.863 474.014 786.254 466.873 781.934 458.088 cv
777.617 449.307 771.418 447.693 771.418 447.693 cv
cp
.556863 .768627 .352941 rgb
f
778.996 465.939 mo
774.426 459.803 758.949 457.205 753.598 457.186 cv
751.16 457.182 749.871 457.057 748.793 456.947 cv
747.676 456.842 747.105 456.783 744.594 457.045 cv
739.379 457.596 735.313 456.072 733.016 454.873 cv
727.059 454.244 723.074 451.768 720.801 449.811 cv
716.082 448.959 712.605 446.881 710.41 444.674 cv
706.504 443.275 701.867 440.588 699.551 439.17 cv
696.066 438.096 691.715 435.771 689.727 434.658 cv
685.602 433.475 682.18 430.611 680.23 428.682 cv
676.18 427.463 673.707 425.58 672.215 423.807 cv
667.324 421.721 663.121 417.244 660.77 414.361 cv
657.5 413.131 654.988 410.982 653.363 409.252 cv
649.137 408.314 645.98 406.041 644.246 404.51 cv
640.566 403.041 636.809 400.189 634.473 398.225 cv
630.176 397.521 626.645 394.967 624.48 393.006 cv
620 392.154 616.129 389.166 613.789 386.979 cv
610.355 386.252 607.926 384.709 606.512 383.568 cv
602.605 381.787 598.625 378.467 596.434 376.471 cv
592.738 375.518 589.813 373.611 588.078 372.236 cv
583.848 371.205 581.234 369.318 579.605 367.51 cv
576.332 366.373 573.957 364.123 572.434 362.205 cv
570.711 361.705 569.168 360.924 567.898 360.123 cv
566.895 359.736 562.723 358.053 559.625 355.791 cv
559.066 355.385 558.441 354.893 557.738 354.338 cv
555.246 352.361 551.844 349.65 546.863 348.014 cv
543.852 347.018 541.012 345.764 538.598 344.564 cv
535.66 343.943 li
530.41 342.83 524.75 339.701 520.66 337.061 cv
517.625 336.021 li
512.105 334.135 507.969 331.736 505.098 329.682 cv
500.516 329.838 495.793 325.713 493.817 322.604 cv
492.895 321.15 492.317 320.42 492.145 320.217 cv
490.481 318.291 li
490.415 315.666 li
490.45 295.209 504.184 280.959 504.77 280.365 cv
513.348 271.604 li
513.77 273.408 li
515.844 271.799 517.461 270.729 517.836 270.479 cv
527.066 264.432 li
527.129 265.014 li
527.645 264.713 539.426 258.291 539.426 258.291 cv
539.293 260.072 li
542.566 258.689 546.582 257.979 549.008 257.646 cv
552.277 255.729 555.379 254.611 558.242 254.307 cv
559.367 254.189 560.375 254.205 561.246 254.303 cv
563.871 253.307 566.348 252.682 568.625 252.439 cv
570.863 252.205 572.707 252.357 574.207 252.686 cv
575.938 251.986 577.66 251.537 579.379 251.357 cv
582.008 251.08 584.215 251.463 585.941 252.037 cv
588.051 251.271 589.953 250.803 591.715 250.619 cv
594.43 250.33 596.703 250.76 598.512 251.627 cv
599.855 251.291 601.145 251.053 602.363 250.928 cv
605.961 250.549 608.598 251.135 610.48 251.975 cv
624.262 251.158 633.371 254.049 638.938 255.807 cv
640.145 256.193 641.652 256.666 642.148 256.732 cv
644.949 256.814 648.637 257.818 653.305 259.084 cv
656.867 260.049 660.902 261.143 664.32 261.689 cv
670.879 262.736 674.434 265.58 676.348 268.107 cv
678.988 269.033 681.777 270.377 683.473 271.244 cv
687.316 272.35 690.219 274.342 691.965 275.779 cv
695.797 276.713 698.254 278.205 699.801 279.775 cv
702.242 280.432 703.965 281.283 705.176 282.1 cv
708.879 283.514 711.242 286.244 712.602 288.424 cv
716.105 290.088 718.32 292.283 719.645 294.006 cv
722.879 295.58 724.93 297.318 726.219 298.955 cv
730.691 300.76 733.129 303.221 734.457 305.518 cv
739.672 307.428 742.23 310.361 743.488 312.873 cv
746.316 314.822 747.957 317.24 748.816 319.486 cv
752.035 321.787 753.762 324.811 754.66 327.037 cv
757.418 329.381 759.242 332.131 760.215 333.869 cv
763.957 337.127 765.285 340.561 765.641 343.256 cv
767.738 345.518 769.027 347.557 769.785 349.002 cv
773.844 352.623 775.719 356.588 776.535 358.803 cv
779.043 362.322 780.078 365.885 780.512 368.342 cv
782.961 371.295 783.809 374.322 783.863 376.854 cv
787.434 382.533 788.352 387.6 788.559 390.42 cv
790.918 395.412 791.02 400.33 790.848 402.893 cv
790.859 402.916 li
791.824 407.486 791.402 409.838 790.859 411.818 cv
790.926 412.041 791.023 412.299 791.141 412.615 cv
793.145 418.002 793.063 423.404 792.863 426.002 cv
793.887 430.475 793.426 433.963 792.688 436.346 cv
794.117 442.463 792.547 447.771 790.719 451.072 cv
790.543 453.217 790.207 454.99 789.691 456.436 cv
789.594 460.658 787.73 464.369 787.293 465.186 cv
785.035 473.221 li
778.996 465.939 li
cp
.27451 .207843 .145098 rgb
f
497.235 315.854 mo
497.235 315.854 498.09 316.779 499.59 319.127 cv
501.098 321.479 504.035 323.186 505.035 323.08 cv
506.027 322.979 505.32 321.033 505.32 321.033 cv
505.32 321.033 509.902 326.342 520.066 329.791 cv
519.363 327.854 li
519.363 327.854 529.504 335.838 537.473 337.514 cv
535.441 334.963 li
535.441 334.963 541.941 339.311 549.488 341.779 cv
557.035 344.252 561.504 348.561 564.23 350.533 cv
566.957 352.51 571.145 354.08 571.145 354.08 cv
569.738 352.717 li
569.738 352.717 573.395 356.365 577.145 356.213 cv
577.145 356.213 579.711 361.475 584.516 361.721 cv
584.516 361.721 585.383 365.146 592.027 366.209 cv
592.027 366.209 595.621 369.854 600.582 370.463 cv
600.582 370.463 606.676 376.42 611.184 378.021 cv
611.184 378.021 613.527 380.604 618.078 380.877 cv
618.078 380.877 623.844 387.244 628.691 386.736 cv
628.691 386.736 633.418 392.271 638.473 391.928 cv
638.473 391.928 644.941 397.846 649.203 398.908 cv
649.203 398.908 652.84 403.045 658.332 403.225 cv
658.332 403.225 661.465 407.986 666.266 408.799 cv
666.266 408.799 672.66 417.553 678.219 418.479 cv
678.219 418.479 678.926 421.607 685.484 422.99 cv
685.484 422.99 689.574 427.838 694.004 428.693 cv
694.004 428.693 700.625 432.521 704.098 433.287 cv
704.098 433.287 712.371 438.447 716.223 439.174 cv
716.223 439.174 718.535 443.268 725.949 443.811 cv
725.949 443.811 729.254 448.361 737.207 448.654 cv
737.207 448.654 740.691 451.303 746.094 450.736 cv
751.504 450.166 750.629 450.822 755.914 450.834 cv
761.188 450.846 777.102 453.318 783.898 462.408 cv
783.898 462.408 785.949 458.607 785.434 455.459 cv
785.434 455.459 786.473 454.596 786.664 449.295 cv
786.664 449.295 791.004 443.936 788.129 436.322 cv
788.129 436.322 790.426 433.064 788.637 426.842 cv
788.637 426.842 789.523 420.9 787.426 415.279 cv
785.324 409.654 788.355 411.596 786.863 404.588 cv
785.375 397.584 786.598 403.865 786.598 403.865 cv
786.598 403.865 787.672 397.908 784.449 392.4 cv
784.449 392.4 784.926 386.131 779.434 378.787 cv
779.434 378.787 780.969 375.424 776.598 371.545 cv
776.598 371.545 776.652 366.639 772.973 362.123 cv
772.973 362.123 771.898 357.338 766.766 353.35 cv
766.766 353.35 765.668 350.072 761.301 346.197 cv
761.301 346.197 762.582 342.291 757.27 338.322 cv
757.27 338.322 755.281 333.822 751.238 331.229 cv
751.238 331.229 750.316 326.049 745.199 323.947 cv
745.199 323.947 745.531 319.951 740.184 317.498 cv
740.184 317.498 740.27 312.963 731.398 311.072 cv
731.398 311.072 731.895 306.869 723.734 304.525 cv
723.734 304.525 723.457 301.912 717.16 299.369 cv
717.16 299.369 715.438 295.596 709.777 293.74 cv
709.777 293.74 708.168 289.197 703.906 288.135 cv
703.906 288.135 702.613 286.572 697.625 285.779 cv
697.625 285.779 697.535 283.15 690.629 281.99 cv
690.629 281.99 687.645 278.721 682.809 277.533 cv
682.809 277.533 676.426 274.244 673.555 273.795 cv
673.555 273.795 672.73 269.545 664.863 268.299 cv
657.008 267.053 647.398 263.541 643.238 263.412 cv
639.078 263.283 629.191 257.158 609.945 258.807 cv
609.945 258.807 607.543 255.666 597.918 259.131 cv
597.918 259.131 597.074 254.697 586.629 259.377 cv
586.629 259.377 582.488 255.854 575.379 259.994 cv
575.379 259.994 572.066 257.139 562.512 261.35 cv
562.512 261.35 559.297 259.424 551.879 264.166 cv
551.879 264.166 544.23 264.971 541.051 267.002 cv
537.875 269.033 532.789 270.889 532.344 272.064 cv
531.902 273.244 532.152 270.197 532.152 270.197 cv
532.152 270.197 523.941 274.646 522.02 277.865 cv
521.844 276.189 li
521.844 276.189 513.902 281.357 510.125 286.658 cv
509.785 285.189 li
509.785 285.189 497.282 297.873 497.235 315.854 cv
cp
.556863 .768627 .352941 rgb
f
496.723 313.393 mo
496.723 313.393 544.871 305.061 607.836 330.107 cv
670.801 355.154 741.266 386.955 780.289 456.752 cv
780.289 456.752 760.957 404.49 696.066 368.33 cv
631.18 332.178 561.559 296.514 496.723 313.393 cv
cp
.27451 .207843 .145098 rgb
f
618.969 324.787 mo
618.969 324.787 647.777 297.623 710.375 301.217 cv
710.375 301.217 655.355 297.959 619.906 326.576 cv
619.906 326.576 617.258 326.475 618.969 324.787 cv
cp
f
628.879 329.4 mo
628.879 329.4 657.691 302.236 720.289 305.83 cv
720.289 305.83 665.27 302.568 629.82 331.186 cv
629.82 331.186 627.172 331.088 628.879 329.4 cv
cp
f
640.551 333.15 mo
640.551 333.15 667.848 307.139 727.203 310.654 cv
727.203 310.654 675.031 307.467 641.445 334.865 cv
641.445 334.865 638.926 334.768 640.551 333.15 cv
cp
f
649.414 338.67 mo
649.414 338.67 676.391 313.186 734.996 316.572 cv
734.996 316.572 683.48 313.502 650.293 340.346 cv
650.293 340.346 647.82 340.252 649.414 338.67 cv
cp
f
658.27 344.189 mo
658.27 344.189 684.043 319.326 740.168 322.76 cv
740.168 322.76 690.832 319.65 659.113 345.83 cv
659.113 345.83 656.738 345.729 658.27 344.189 cv
cp
f
667.414 348.959 mo
667.414 348.959 691.918 325.225 745.297 328.529 cv
745.297 328.529 698.375 325.533 668.215 350.525 cv
668.215 350.525 665.961 350.428 667.414 348.959 cv
cp
f
677 354.271 mo
677 354.271 699.922 334.791 750.102 335.014 cv
750.102 335.014 707.199 334.967 678.969 355.666 cv
678.969 355.666 675.641 355.479 677 354.271 cv
cp
f
609.684 318.979 mo
609.684 318.979 638.496 291.814 701.094 295.408 cv
701.094 295.408 646.074 292.146 610.625 320.768 cv
610.625 320.768 607.977 320.666 609.684 318.979 cv
cp
f
600.688 316.225 mo
600.688 316.225 628.332 287.869 691.027 288.822 cv
691.027 288.822 635.918 287.885 601.699 317.971 cv
601.699 317.971 599.051 317.986 600.688 316.225 cv
cp
f
591.559 311.908 mo
591.559 311.908 619.207 283.549 681.898 284.506 cv
681.898 284.506 626.793 283.564 592.578 313.65 cv
592.578 313.65 589.93 313.666 591.559 311.908 cv
cp
f
582.434 307.768 mo
582.434 307.768 609.496 276.967 671.902 279.033 cv
671.902 279.033 617.047 277.104 583.48 309.709 cv
583.48 309.709 580.84 309.682 582.434 307.768 cv
cp
f
572.023 305.65 mo
572.023 305.65 598.363 272.4 660.242 275.619 cv
660.242 275.619 605.84 272.662 573.078 307.783 cv
573.078 307.783 570.465 307.721 572.023 305.65 cv
cp
f
563.355 304.404 mo
563.355 304.404 588.207 270.021 650.168 270.514 cv
650.168 270.514 595.684 269.959 564.512 306.486 cv
564.512 306.486 561.895 306.541 563.355 304.404 cv
cp
f
555.066 303.303 mo
555.066 303.303 578.16 264.545 638.75 267.295 cv
638.75 267.295 585.457 264.736 556.262 305.744 cv
556.262 305.744 553.707 305.713 555.066 303.303 cv
cp
f
544.977 302.729 mo
544.977 302.729 565.559 265.545 625.293 262.287 cv
625.293 262.287 572.75 265.025 546.289 304.822 cv
546.289 304.822 543.762 305.037 544.977 302.729 cv
cp
f
585.875 325.631 mo
585.875 325.631 583.438 345.494 597.57 365.123 cv
597.57 365.123 586.129 345.967 588.348 327.635 cv
588.348 327.635 588.48 325.357 585.875 325.631 cv
cp
f
593.723 328.576 mo
593.723 328.576 591.289 348.439 605.422 368.068 cv
605.422 368.068 593.98 348.912 596.199 330.576 cv
596.199 330.576 596.332 328.303 593.723 328.576 cv
cp
f
601.613 331.896 mo
601.613 331.896 600.242 354.662 614.371 374.291 cv
614.371 374.291 601.871 352.229 604.086 333.896 cv
604.086 333.896 604.227 331.619 601.613 331.896 cv
cp
f
578.773 323.361 mo
578.773 323.361 576.641 342.287 589.602 361.061 cv
589.602 361.061 579.098 342.748 581.035 325.279 cv
581.035 325.279 581.145 323.111 578.773 323.361 cv
cp
f
534.418 302.354 mo
534.418 302.354 556.789 263.459 607.309 260.463 cv
607.309 260.463 561.355 264.025 535.738 304.518 cv
535.738 304.518 533.254 304.705 534.418 302.354 cv
cp
f
521.996 302.533 mo
521.996 302.533 543.395 266.002 582.969 262.213 cv
582.969 262.213 548.926 264.197 523.316 304.693 cv
523.316 304.693 520.832 304.881 521.996 302.533 cv
cp
f
508.531 303.572 mo
508.531 303.572 529.93 267.041 569.504 263.252 cv
569.504 263.252 535.461 265.24 509.848 305.732 cv
509.848 305.732 507.363 305.92 508.531 303.572 cv
cp
f
686.527 359.006 mo
686.527 359.006 707.926 340.521 754.855 340.838 cv
754.855 340.838 714.734 340.701 688.367 360.338 cv
688.367 360.338 685.254 360.15 686.527 359.006 cv
cp
f
693.887 364.545 mo
693.887 364.545 714.5 348.939 759.035 348.408 cv
759.035 348.408 720.965 348.975 695.609 365.611 cv
695.609 365.611 692.66 365.51 693.887 364.545 cv
cp
f
702.641 369.002 mo
702.641 369.002 723.816 353.721 766.051 353.697 cv
766.051 353.697 729.055 354.479 704.316 369.975 cv
704.316 369.975 701.445 369.9 702.641 369.002 cv
cp
f
570.371 321.607 mo
570.371 321.607 567.629 338.6 581.434 355.135 cv
581.434 355.135 570.309 338.959 572.801 323.279 cv
572.801 323.279 572.973 321.334 570.371 321.607 cv
cp
f
609.055 334.502 mo
609.055 334.502 608.152 361.748 623.539 378.982 cv
623.539 378.982 609.309 354.842 611.527 336.506 cv
611.527 336.506 611.66 334.229 609.055 334.502 cv
cp
f
616.613 338.236 mo
616.613 338.236 615.707 365.479 631.09 382.713 cv
631.09 382.713 616.863 358.568 619.082 340.236 cv
619.082 340.236 619.223 337.959 616.613 338.236 cv
cp
f
624.051 340.842 mo
624.051 340.842 623.145 368.088 638.535 385.322 cv
638.535 385.322 624.301 361.182 626.52 342.846 cv
626.52 342.846 626.656 340.572 624.051 340.842 cv
cp
f
562.168 320.154 mo
562.168 320.154 559.91 336.029 572.012 351.6 cv
572.012 351.6 562.238 336.389 564.301 321.736 cv
564.301 321.736 564.43 319.912 562.168 320.154 cv
cp
f
554.199 318.783 mo
554.199 318.783 551.387 333.049 564.313 346.736 cv
564.313 346.736 553.926 333.318 556.488 320.154 cv
556.488 320.154 556.676 318.525 554.199 318.783 cv
cp
f
632.094 345.654 mo
632.094 345.654 633.371 375.686 648.758 392.92 cv
648.758 392.92 632.352 365.986 634.566 347.658 cv
634.566 347.658 634.707 345.377 632.094 345.654 cv
cp
f
639.535 348.264 mo
639.535 348.264 639.809 379.533 657.629 398.396 cv
657.629 398.396 639.793 368.6 642.008 350.268 cv
642.008 350.268 642.148 347.99 639.535 348.264 cv
cp
f
647.465 351.955 mo
647.465 351.955 647.211 381.771 668.895 405.127 cv
668.895 405.127 649.859 381.869 649.84 353.393 cv
649.84 353.393 650.832 351.6 647.465 351.955 cv
cp
f
656.246 355.584 mo
656.246 355.584 654.285 388.029 679.223 414.205 cv
679.223 414.205 657.48 388.229 659.047 357.236 cv
659.047 357.236 660.336 355.314 656.246 355.584 cv
cp
f
663.879 360.408 mo
663.879 360.408 663.078 394.135 690.473 420.201 cv
690.473 420.201 666.473 394.201 666.898 362.002 cv
666.898 362.002 668.199 359.955 663.879 360.408 cv
cp
f
675.055 364.604 mo
675.055 364.604 673.25 398.287 699.855 425.162 cv
699.855 425.162 676.648 398.463 678.031 366.283 cv
678.031 366.283 679.391 364.279 675.055 364.604 cv
cp
f
546.594 317.564 mo
546.594 317.564 544.098 330.236 555.582 342.396 cv
555.582 342.396 546.363 330.479 548.637 318.783 cv
548.637 318.783 548.809 317.33 546.594 317.564 cv
cp
f
538.859 316.627 mo
538.859 316.627 535.859 328.029 548.184 338.67 cv
548.184 338.67 538.324 328.193 541.066 317.674 cv
541.066 317.674 541.285 316.373 538.859 316.627 cv
cp
f
531.41 315.15 mo
531.41 315.15 529.004 325.568 539.395 335.424 cv
539.395 335.424 531.066 325.744 533.27 316.127 cv
533.27 316.127 533.441 314.936 531.41 315.15 cv
cp
f
523.996 316.307 mo
523.996 316.307 521.492 325.83 531.777 334.721 cv
531.777 334.721 523.551 325.971 525.84 317.182 cv
525.84 317.182 526.02 316.092 523.996 316.307 cv
cp
f
684.805 370.162 mo
684.805 370.162 682.016 401.209 714.102 436.947 cv
714.102 436.947 688.215 408.084 687.879 374.096 cv
687.879 374.096 689.023 369.658 684.805 370.162 cv
cp
f
516.266 314.861 mo
516.266 314.861 513.77 322.564 523.316 329.576 cv
523.316 329.576 515.703 322.646 517.98 315.533 cv
517.98 315.533 518.176 314.658 516.266 314.861 cv
cp
f
693.676 374.615 mo
693.676 374.615 692.094 406.896 725.504 441.4 cv
725.504 441.4 698.34 410.111 696.73 376.166 cv
696.73 376.166 697.871 373.951 693.676 374.615 cv
cp
f
704.043 381.654 mo
704.043 381.654 704.68 413.564 738.598 447.564 cv
738.598 447.564 709.238 417.076 707.129 383.158 cv
707.129 383.158 708.238 380.924 704.043 381.654 cv
cp
f
710.316 373.854 mo
710.316 373.854 728.551 359.26 768.594 359.943 cv
768.594 359.943 736.73 359.33 711.992 374.822 cv
711.992 374.822 709.121 374.752 710.316 373.854 cv
cp
f
714.711 390.01 mo
714.711 390.01 719.723 428.143 747.301 448.1 cv
747.301 448.1 722.07 427.779 717.785 391.24 cv
717.785 391.24 718.645 388.967 714.711 390.01 cv
cp
f
718.285 378.197 mo
718.285 378.197 733.18 365.939 769.996 366.6 cv
769.996 366.6 741.852 366.623 719.75 378.916 cv
719.75 378.916 717.215 378.904 718.285 378.197 cv
cp
f
724.414 383.42 mo
724.414 383.42 741.793 372.021 774.215 373.932 cv
774.215 373.932 747.301 373.58 725.785 384.072 cv
725.785 384.072 723.359 384.033 724.414 383.42 cv
cp
f
730.145 388.967 mo
730.145 388.967 747.102 378.701 777.465 382.662 cv
777.465 382.662 752.191 380.604 731.398 389.705 cv
731.398 389.705 729.129 389.51 730.145 388.967 cv
cp
f
737.473 393.771 mo
737.473 393.771 753.066 386.189 780.711 388.955 cv
780.711 388.955 757.695 387.561 738.613 394.303 cv
738.613 394.303 736.543 394.17 737.473 393.771 cv
cp
f
743.965 398.596 mo
743.965 398.596 757.566 391.99 780.723 396.467 cv
780.723 396.467 761.387 393.646 744.898 399.197 cv
744.898 399.197 743.16 398.936 743.965 398.596 cv
cp
f
750.582 403.889 mo
750.582 403.889 763.434 397.971 784.414 403.58 cv
784.414 403.58 766.848 399.811 751.402 404.537 cv
751.402 404.537 749.82 404.189 750.582 403.889 cv
cp
f
755.633 409.15 mo
755.633 409.15 766.449 403.791 782.785 410.248 cv
782.785 410.248 769.027 405.768 756.242 409.83 cv
756.242 409.83 755.012 409.42 755.633 409.15 cv
cp
f
758.563 413.146 mo
758.563 413.146 769.086 409.045 782.809 417.205 cv
782.809 417.205 771.102 411.283 758.996 413.881 cv
758.996 413.881 757.953 413.342 758.563 413.146 cv
cp
f
725.258 397.193 mo
725.258 397.193 729.145 430.764 755.574 447.666 cv
755.574 447.666 731.449 430.381 728.238 398.201 cv
728.238 398.201 729.137 396.166 725.258 397.193 cv
cp
f
735.402 407.053 mo
735.402 407.053 741.621 433.299 763.645 449.076 cv
763.645 449.076 745.742 436.631 738.617 407.752 cv
738.617 407.752 739.719 405.908 735.402 407.053 cv
cp
f
748.746 419.225 mo
748.746 419.225 754.52 437.596 775.301 452.377 cv
775.301 452.377 760.738 442.975 751.965 419.924 cv
751.965 419.924 748.508 416.357 748.746 419.225 cv
cp
f
762.242 418.896 mo
762.242 418.896 773.188 416.076 785.832 425.814 cv
785.832 425.814 774.922 418.533 762.594 419.678 cv
762.594 419.678 761.621 419.018 762.242 418.896 cv
cp
f
765.277 423.646 mo
765.277 423.646 776.012 422.568 785.676 433.877 cv
785.676 433.877 777.102 425.205 765.434 424.455 cv
765.434 424.455 764.676 423.67 765.277 423.646 cv
cp
f
769.668 428.061 mo
769.668 428.061 779.941 431.346 784.297 445.568 cv
784.297 445.568 779.887 434.201 769.484 428.861 cv
769.484 428.861 769.105 427.838 769.668 428.061 cv
cp
f
579.196 774.819 mo
553.368 779.214 514.931 781.265 478.532 766.097 cv
397.536 732.354 383.786 677.175 377.176 650.651 cv
376.825 649.269 li
370.145 622.538 373.93 612.499 378.442 580.425 cv
385.192 532.425 417.325 509.925 423.825 509.175 cv
430.321 508.425 429.504 511.194 429.504 511.194 cv
431.543 511.331 441.551 510.081 443.129 509.909 cv
453.513 508.765 457.794 515.128 459.853 518.187 cv
460.075 518.511 460.345 518.917 460.575 519.237 cv
464.751 518.999 467.024 519.679 468.997 520.401 cv
469.271 520.421 469.485 520.405 469.692 520.374 cv
469.849 520.343 470.528 520.151 470.528 520.151 cv
471.337 519.987 li
479.329 518.628 484.396 526.034 488.47 531.983 cv
490.063 534.312 491.704 536.722 493.192 538.226 cv
495.13 540.183 496.005 540.601 497.212 541.175 cv
499.63 542.335 501.903 543.601 505.192 547.44 cv
506.911 549.437 508.177 551.226 509.247 552.753 cv
509.751 553.472 510.665 556.94 511.067 557.425 cv
514.817 566.175 520.888 567.46 521.071 567.925 cv
523.321 567.925 li
530.692 567.151 537.349 563.487 544.388 573.101 cv
547.771 577.726 547.771 577.726 555.56 576.894 cv
562.958 576.108 566.388 577.116 570.239 581.222 cv
571.271 582.315 572.329 583.448 575.435 584.956 cv
579.173 586.772 581.31 586.444 585.571 585.78 cv
589.716 585.136 594.864 584.335 602.278 585.593 cv
605.458 586.136 607.274 586.05 608.247 585.886 cv
609.544 585.667 609.782 585.628 610.907 581.136 cv
611.106 580.351 li
613.505 570.933 623.903 568.206 630.786 566.397 cv
633.149 565.761 li
633.138 565.64 633.724 564.495 634.036 563.886 cv
634.966 562.073 636.501 559.042 640.298 558.394 cv
643.153 557.909 647.052 558.706 649.427 565.226 cv
650.021 565.503 653.938 566.347 656.81 566.956 cv
662.728 568.222 670.099 569.8 677.2 574.194 cv
689.985 582.116 699.688 588.335 708.31 596.315 cv
708.7 596.687 709.075 597.015 709.415 597.312 cv
721.38 609.542 li
719.794 604.96 li
721.724 620.147 718.017 688.409 685.278 723.589 cv
662.294 748.284 622.638 767.433 579.196 774.819 cv
cp
f
422.989 513.44 mo
422.989 513.44 395.317 525.3 385.168 574.104 cv
378.543 605.972 374.774 623.265 381.114 648.624 cv
387.458 673.987 404.692 734.55 481.146 759.815 cv
549.692 782.472 641.317 760.831 680.306 718.948 cv
710.13 686.901 715.075 621.741 713.044 605.819 cv
713.044 605.819 711.724 608.757 703.685 601.308 cv
695.638 593.862 686.493 587.96 673.622 579.979 cv
660.735 571.999 645.583 574.577 643.036 567.554 cv
640.481 560.526 640.841 570.636 635.024 572.304 cv
629.208 573.968 619.321 575.651 617.7 582.03 cv
616.067 588.405 615.103 594.675 601.134 592.304 cv
587.177 589.929 582.802 596.097 572.458 591.077 cv
562.11 586.054 566.935 582.522 556.278 583.659 cv
545.63 584.792 544.2 584.358 538.896 577.12 cv
533.599 569.886 529.763 571.218 521.083 572.011 cv
512.403 572.812 515.224 561.487 510.501 561.612 cv
505.778 561.733 505.106 557.784 500.028 551.866 cv
494.958 545.948 494.091 548.808 488.353 543.003 cv
482.622 537.194 477.864 525.128 472.04 526.796 cv
466.224 528.464 467.747 525.491 460.392 526.065 cv
453.032 526.64 455.192 515.425 443.879 516.671 cv
432.567 517.913 424.11 520.034 422.989 513.44 cv
cp
.996078 .819608 .00784314 rgb
f
575.282 775.401 mo
563.458 777.409 549.997 777.421 537.067 778.054 cv
504.317 774.421 li
545.169 773.058 673.458 761.245 689.692 611.175 cv
690.442 607.425 li
691.013 604.479 691.606 600.265 698.856 599.034 cv
699.317 598.956 699.802 598.894 700.31 598.851 cv
700.317 598.847 700.321 598.847 700.325 598.847 cv
701.911 598.577 703.052 596.897 703.063 596.878 cv
703.063 596.878 705.692 592.597 708.735 592.589 cv
711.782 592.577 714.313 595.925 714.313 595.925 cv
714.841 596.581 727.181 612.175 727.907 628.562 cv
728.646 645.171 722.528 667.448 711.942 686.687 cv
679.067 746.394 619.485 767.886 575.282 775.401 cv
cp
.27451 .207843 .145098 rgb
f
694.825 609.823 mo
694.825 609.823 695.544 606.085 700.896 605.628 cv
706.231 605.171 709.005 600.179 709.005 600.179 cv
709.005 600.179 720.478 614.503 721.11 628.858 cv
721.747 643.21 716.681 663.956 705.981 683.405 cv
695.278 702.847 665.403 766.401 546.169 772.206 cv
546.169 772.206 678.169 770.054 694.825 609.823 cv
cp
.980392 .592157 .313726 rgb
f
382.942 614.925 mo
382.942 614.925 379.192 715.425 477.817 752.925 cv
551.372 780.89 602.692 742.05 602.692 742.05 cv
602.692 742.05 544.388 768.862 493.192 751.8 cv
433.567 731.925 388.192 688.425 382.942 614.925 cv
cp
.27451 .207843 .145098 rgb
f
695.317 608.55 mo
695.317 608.55 688.192 728.175 595.192 760.425 cv
595.192 760.425 631.192 757.05 669.442 707.925 cv
700.185 668.44 695.317 608.55 695.317 608.55 cv
cp
.968627 .952941 .807843 rgb
f
gsave
383.317 591.675 mo
383.317 591.675 375.817 667.8 424.192 712.425 cv
472.567 757.05 502.192 761.925 535.942 761.175 cv
569.692 760.425 644.692 734.55 674.317 679.425 cv
681.067 649.05 li
681.067 649.05 643.552 698.479 572.911 710.901 cv
485.317 726.3 402.817 663.3 383.317 591.675 cv
cp
clp
405.887 606.37 mo
405.887 606.37 380.434 614.757 376.825 649.269 cv
376.825 649.269 383.583 624.358 405.887 606.37 cv
cp
.27451 .207843 .145098 rgb
f
408.946 612.444 mo
408.946 612.444 384.079 624.28 379.579 659.452 cv
379.579 659.452 386.208 632.03 408.946 612.444 cv
cp
f
382.973 662.507 mo
382.973 662.507 389.543 635.522 414.055 615.632 cv
414.055 615.632 388.825 643.253 384.645 672.366 cv
384.325 674.573 384.383 667.847 384.383 667.847 cv
382.973 662.507 li
cp
f
388.161 672.159 mo
388.161 672.159 394.274 642.483 418.508 620.96 cv
418.508 620.96 393.692 651.007 390.012 683.069 cv
389.731 685.511 389.676 678.077 389.676 678.077 cv
388.161 672.159 li
cp
f
393.637 686.327 mo
393.637 686.327 396.997 654.519 419.528 629.917 cv
419.528 629.917 397.231 663.565 396.571 697.706 cv
396.504 700.308 395.731 692.464 395.731 692.464 cv
393.637 686.327 li
cp
f
398.622 697.882 mo
398.622 697.882 405.571 661.198 422.02 638.62 cv
422.02 638.62 404.512 673.87 403.114 709.69 cv
403.012 712.413 402.575 704.065 402.575 704.065 cv
398.622 697.882 li
cp
f
402.512 598.12 mo
402.512 598.12 377.059 606.507 373.45 641.019 cv
373.45 641.019 380.208 616.108 402.512 598.12 cv
cp
f
399.512 589.495 mo
399.512 589.495 374.059 597.882 370.45 632.394 cv
370.45 632.394 377.208 607.483 399.512 589.495 cv
cp
f
396.887 579.745 mo
396.887 579.745 371.434 588.132 367.825 622.644 cv
367.825 622.644 374.583 597.733 396.887 579.745 cv
cp
f
405.747 707.632 mo
405.747 707.632 411.817 669.3 426.817 645.675 cv
426.817 645.675 420.594 660.276 415.192 683.175 cv
409.79 706.073 409.7 713.815 409.7 713.815 cv
405.747 707.632 li
cp
f
412.481 716.897 mo
412.481 716.897 417.77 678.089 431.692 654.3 cv
431.692 654.3 425.973 669.038 421.133 692.202 cv
416.286 715.362 416.301 723.218 416.301 723.218 cv
412.481 716.897 li
cp
f
419.606 722.526 mo
419.606 722.526 425.047 683.729 439.192 659.925 cv
439.192 659.925 433.368 674.667 428.422 697.831 cv
423.465 720.987 423.458 728.839 423.458 728.839 cv
419.606 722.526 li
cp
f
426.731 730.397 mo
426.731 730.397 432.02 691.589 445.942 667.8 cv
445.942 667.8 440.223 682.538 435.383 705.702 cv
430.536 728.862 430.551 736.718 430.551 736.718 cv
426.731 730.397 li
cp
f
435.176 738.987 mo
435.176 738.987 439.309 700.026 452.638 675.757 cv
452.638 675.757 447.317 690.69 443.161 714.003 cv
438.989 737.319 439.247 745.163 439.247 745.163 cv
435.176 738.987 li
cp
f
452.071 750.362 mo
452.071 750.362 455.661 711.351 468.661 686.901 cv
468.661 686.901 463.544 701.905 459.708 725.276 cv
455.856 748.644 456.22 756.483 456.22 756.483 cv
452.071 750.362 li
cp
f
443.051 745.737 mo
443.051 745.737 447.185 706.776 460.513 682.507 cv
460.513 682.507 455.192 697.44 451.036 720.753 cv
446.864 744.069 447.122 751.913 447.122 751.913 cv
443.051 745.737 li
cp
f
459.196 756.362 mo
459.196 756.362 462.786 717.351 475.786 692.901 cv
475.786 692.901 470.669 707.905 466.833 731.276 cv
462.981 754.644 463.345 762.483 463.345 762.483 cv
459.196 756.362 li
cp
f
467.446 762.737 mo
467.446 762.737 471.036 723.726 484.036 699.276 cv
484.036 699.276 478.919 714.28 475.083 737.651 cv
471.231 761.019 471.595 768.858 471.595 768.858 cv
467.446 762.737 li
cp
f
476.446 766.862 mo
476.446 766.862 480.036 727.851 493.036 703.401 cv
493.036 703.401 487.919 718.405 484.083 741.776 cv
480.231 765.144 480.595 772.983 480.595 772.983 cv
476.446 766.862 li
cp
f
485.821 770.987 mo
485.821 770.987 489.411 731.976 502.411 707.526 cv
502.411 707.526 497.294 722.53 493.458 745.901 cv
489.606 769.269 489.97 777.104 489.97 777.104 cv
485.821 770.987 li
cp
f
494.821 773.612 mo
494.821 773.612 498.411 734.601 511.411 710.151 cv
511.411 710.151 506.294 725.155 502.458 748.526 cv
498.606 771.894 498.97 779.729 498.97 779.729 cv
494.821 773.612 li
cp
f
504.946 775.487 mo
504.946 775.487 508.536 736.476 521.536 712.026 cv
521.536 712.026 516.419 727.03 512.583 750.401 cv
508.731 773.769 509.095 781.604 509.095 781.604 cv
504.946 775.487 li
cp
f
515.071 777.362 mo
515.071 777.362 518.661 738.351 531.661 713.901 cv
531.661 713.901 526.544 728.905 522.708 752.276 cv
518.856 775.644 519.22 783.479 519.22 783.479 cv
515.071 777.362 li
cp
f
525.196 777.362 mo
525.196 777.362 528.786 738.351 541.786 713.901 cv
541.786 713.901 536.669 728.905 532.833 752.276 cv
528.981 775.644 529.345 783.479 529.345 783.479 cv
525.196 777.362 li
cp
f
535.321 777.737 mo
535.321 777.737 538.911 738.726 551.911 714.276 cv
551.911 714.276 546.794 729.28 542.958 752.651 cv
539.106 776.019 539.47 783.854 539.47 783.854 cv
535.321 777.737 li
cp
f
545.821 776.237 mo
545.821 776.237 549.411 737.226 562.411 712.776 cv
562.411 712.776 557.294 727.78 553.458 751.151 cv
549.606 774.519 549.97 782.354 549.97 782.354 cv
545.821 776.237 li
cp
f
556.321 774.362 mo
556.321 774.362 559.911 735.351 572.911 710.901 cv
572.911 710.901 567.794 725.905 563.958 749.276 cv
560.106 772.644 560.47 780.479 560.47 780.479 cv
556.321 774.362 li
cp
f
567.196 772.112 mo
567.196 772.112 570.786 733.101 583.786 708.651 cv
583.786 708.651 578.669 723.655 574.833 747.026 cv
570.981 770.394 571.345 778.229 571.345 778.229 cv
567.196 772.112 li
cp
f
578.071 770.612 mo
578.071 770.612 581.661 731.601 594.661 707.151 cv
594.661 707.151 589.544 722.155 585.708 745.526 cv
581.856 768.894 582.22 776.729 582.22 776.729 cv
578.071 770.612 li
cp
f
589.435 764.511 mo
589.435 764.511 593.024 725.503 606.021 701.05 cv
606.021 701.05 600.903 716.058 597.067 739.425 cv
593.216 762.792 593.583 770.632 593.583 770.632 cv
589.435 764.511 li
cp
f
600.31 760.011 mo
600.31 760.011 603.899 721.003 616.896 696.55 cv
616.896 696.55 611.778 711.558 607.942 734.925 cv
604.091 758.292 604.458 766.132 604.458 766.132 cv
600.31 760.011 li
cp
f
611.185 754.386 mo
611.185 754.386 614.774 715.378 627.771 690.925 cv
627.771 690.925 622.653 705.933 618.817 729.3 cv
614.966 752.667 615.333 760.507 615.333 760.507 cv
611.185 754.386 li
cp
f
623.56 746.886 mo
623.56 746.886 627.149 707.878 640.146 683.425 cv
640.146 683.425 635.028 698.433 631.192 721.8 cv
627.341 745.167 627.708 753.007 627.708 753.007 cv
623.56 746.886 li
cp
f
636.685 735.636 mo
636.685 735.636 640.274 696.628 653.271 672.175 cv
653.271 672.175 648.153 687.183 644.317 710.55 cv
640.466 733.917 640.833 741.757 640.833 741.757 cv
636.685 735.636 li
cp
f
649.06 728.886 mo
649.06 728.886 652.649 689.878 665.646 665.425 cv
665.646 665.425 660.528 680.433 656.692 703.8 cv
652.841 727.167 653.208 735.007 653.208 735.007 cv
649.06 728.886 li
cp
f
662.56 713.136 mo
662.56 713.136 666.149 674.128 679.146 649.675 cv
679.146 649.675 674.028 664.683 670.192 688.05 cv
666.341 711.417 666.708 719.257 666.708 719.257 cv
662.56 713.136 li
cp
f
grestore
397.817 682.425 mo
397.817 682.425 431.325 767.929 550.817 760.925 cv
550.817 760.925 445.817 788.929 397.817 682.425 cv
cp
1 1 1 rgb
f
458.317 545.925 mo
458.317 545.925 464.317 549.425 464.317 555.425 cv
464.317 561.425 472.813 559.448 472.317 566.687 cv
471.817 573.925 478.685 581.21 478.685 581.21 cv
478.685 581.21 472.794 597.21 489.31 603.565 cv
489.31 603.565 492.317 610.925 497.317 612.425 cv
502.317 613.925 505.181 612.808 505.181 612.808 cv
511.063 616.472 li
511.063 616.472 513.688 619.909 517.817 618.425 cv
521.95 616.944 520.317 624.425 520.317 624.425 cv
520.317 624.425 529.462 622.792 532.888 620.108 cv
536.317 617.425 539.317 613.425 542.817 614.925 cv
546.313 616.425 548.317 625.925 552.817 626.425 cv
557.317 626.925 565.458 625.214 565.638 619.319 cv
565.638 619.319 574.419 621.917 580.622 617.671 cv
586.817 613.425 585.317 605.425 590.317 605.425 cv
595.317 605.425 592.157 603.163 603.239 602.792 cv
614.317 602.425 622.817 591.929 624.817 580.925 cv
624.817 580.925 621.825 601.925 610.817 607.925 cv
599.817 613.925 601.974 620.202 596.317 620.925 cv
576.817 623.425 580.317 628.925 572.817 626.925 cv
565.317 624.929 561.817 632.925 553.317 632.925 cv
544.813 632.925 540.317 625.425 540.317 625.425 cv
540.317 625.425 527.317 626.425 521.317 630.925 cv
515.317 635.425 510.817 627.425 508.817 623.925 cv
506.821 620.429 508.321 622.925 498.317 619.425 cv
488.317 615.925 483.317 611.425 482.317 607.425 cv
481.317 603.425 475.817 603.925 473.817 595.925 cv
471.81 587.929 477.825 585.929 469.817 577.925 cv
461.817 569.925 463.321 571.429 465.317 565.925 cv
467.317 560.425 455.317 554.425 458.317 545.925 cv
cp
f
556.591 627.003 mo
552.419 627.714 548.423 626.116 545.552 622.687 cv
543.806 622.55 541.731 621.839 539.915 619.741 cv
539.306 620.011 538.626 620.229 537.888 620.351 cv
535.896 620.69 534.255 620.581 532.888 620.108 cv
531.021 622.515 528.712 624.05 526.161 624.483 cv
524.845 624.706 523.556 624.62 522.36 624.261 cv
521.567 624.741 520.649 625.151 519.524 625.339 cv
516.185 625.909 li
513.454 623.522 li
512.458 622.585 510.864 620.487 511.251 616.976 cv
511.239 616.894 511.169 616.694 511.063 616.472 cv
509.638 616.319 508.274 615.776 507.091 614.862 cv
506.317 614.269 505.696 613.573 505.181 612.808 cv
504.302 613.179 503.396 613.456 502.458 613.616 cv
497.419 614.476 492.899 611.663 491.224 606.62 cv
490.497 604.452 489.571 603.671 489.31 603.565 cv
487.935 603.612 484.7 603.054 481.981 599.261 cv
478.958 595.034 476.989 587.292 478.685 581.21 cv
478.274 580.378 477.208 578.956 476.536 578.058 cv
474.349 575.136 471.454 571.257 472.317 566.687 cv
471.771 565.862 470.81 564.687 470.177 563.909 cv
467.7 560.866 464.919 557.452 465.618 553.222 cv
465.192 552.12 463.856 550.19 463.063 549.593 cv
459.384 547.565 459.103 544.206 459.161 542.862 cv
459.255 540.792 464.282 540.198 465.919 538.854 cv
464.856 537.78 460.813 535.667 457.907 527.534 cv
451.298 518.515 li
458.716 523.331 li
459.294 522.979 462.403 521.163 466.403 520.483 cv
472.372 519.468 477.731 521.511 481.083 526.093 cv
485.235 531.772 490.091 538.132 495.114 541.69 cv
501.091 545.929 507.692 547.94 510.255 556.495 cv
514.575 570.925 524.423 569.464 525.243 570.085 cv
526.356 569.675 527.493 569.37 528.622 569.183 cv
536.044 567.917 541.458 571.827 544.884 574.878 cv
547.231 576.976 548.864 578.737 550.099 580.081 cv
550.122 580.108 550.146 580.128 550.169 580.155 cv
554.669 579.554 563.704 579.073 573.677 586.151 cv
577.677 588.987 579.981 588.894 581.821 588.577 cv
582.935 588.39 583.978 588.089 585.021 587.796 cv
586.466 587.394 587.892 587.011 589.345 586.765 cv
590.849 586.507 592.251 586.413 593.622 586.472 cv
594.735 586.519 595.896 586.608 597.091 586.698 cv
599.868 586.917 602.751 587.136 605.146 586.729 cv
607.513 586.327 609.091 585.37 610.415 583.538 cv
624.501 570.726 li
623.872 571.737 628.04 597.511 606.216 602.569 cv
605.259 602.792 604.255 602.812 603.239 602.792 cv
602.927 602.792 602.634 602.792 602.364 602.792 cv
602.364 602.804 602.356 602.812 602.356 602.819 cv
602.13 603.612 601.864 604.499 601.532 605.479 cv
600.642 608.089 598.552 614.175 591.685 615.343 cv
589.388 615.729 587.013 615.464 584.989 615.155 cv
584.083 615.354 581.997 616.749 580.622 617.671 cv
578.513 619.085 576.513 620.417 574.11 620.827 cv
572.188 621.159 570.29 620.815 568.685 619.878 cv
568.099 619.698 566.989 619.503 565.638 619.319 cv
564.993 621.155 563.981 622.913 562.427 624.241 cv
560.755 625.679 558.731 626.64 556.591 627.003 cv
cp
.27451 .207843 .145098 rgb
f
615.927 587.53 mo
615.927 587.53 610.603 596.116 603.349 595.995 cv
596.095 595.87 596.911 597.991 595.099 603.276 cv
593.282 608.55 591.599 609.288 586.028 608.433 cv
580.462 607.565 574.114 615.429 572.06 613.968 cv
570.005 612.511 563.821 612.425 563.821 612.425 cv
563.821 612.425 559.989 617.378 558.009 619.069 cv
556.04 620.761 552.524 621.358 550.017 617.265 cv
547.509 613.167 546.216 618.815 543.927 613.331 cv
541.638 607.843 538.95 613.272 536.751 613.647 cv
534.552 614.019 532.157 603.976 529.638 594.464 cv
527.106 584.944 531.595 604.577 529.927 610.737 cv
528.263 616.894 524.61 619.327 523.286 616.839 cv
521.962 614.351 517.653 620.956 518.013 617.737 cv
518.372 614.507 515.634 609.097 512.122 609.698 cv
508.606 610.292 510.173 595.565 508.286 600.405 cv
506.399 605.245 499.528 610.03 497.677 604.468 cv
495.825 598.905 492.302 596.796 489.595 596.804 cv
486.888 596.812 483.56 587.886 485.376 582.604 cv
487.185 577.327 477.575 571.276 479.165 567.39 cv
480.763 563.503 471.521 556.94 472.392 554.081 cv
473.259 551.222 469.063 545.155 466.567 543.772 cv
464.071 542.386 470.005 542.733 470.286 539.069 cv
470.563 535.409 460.321 523.675 460.321 523.675 cv
460.321 523.675 475.2 521.362 479.821 527.675 cv
484.438 533.991 487.552 539.335 493.321 543.425 cv
499.091 547.519 501.946 549.776 506.071 556.175 cv
510.208 562.573 508.661 563.538 514.099 568.702 cv
519.544 573.862 524.06 573.003 528.825 571.175 cv
533.583 569.351 538.536 572.667 543.317 576.925 cv
548.099 581.183 546.763 582.933 548.325 583.175 cv
549.888 583.417 559.872 578.401 570.825 586.175 cv
581.778 593.948 586.415 588.87 593.567 589.175 cv
600.724 589.479 609.95 595.776 615.927 587.53 cv
cp
.92549 .521569 .0745098 rgb
f
gsave
458.716 523.331 mo
458.716 523.331 467.075 534.425 466.575 536.675 cv
466.067 538.925 462.317 543.179 463.067 544.175 cv
463.817 545.175 469.067 548.925 469.321 554.925 cv
469.575 560.925 476.075 566.425 475.825 568.675 cv
475.575 570.925 482.083 576.679 482.075 585.425 cv
482.071 594.175 487.325 598.425 489.075 599.425 cv
490.817 600.425 493.325 606.679 496.575 607.925 cv
499.817 609.175 502.817 609.925 504.571 609.675 cv
506.325 609.425 512.774 611.839 513.173 614.507 cv
513.571 617.175 517.817 621.925 519.317 621.675 cv
520.817 621.425 529.325 618.175 531.825 617.175 cv
534.317 616.175 541.321 614.175 542.821 616.425 cv
544.321 618.675 548.325 622.175 552.075 622.175 cv
555.825 622.175 558.325 623.925 561.075 620.925 cv
563.821 617.925 561.075 612.679 565.321 614.675 cv
569.567 616.675 574.825 617.675 577.575 615.425 cv
580.321 613.175 581.825 611.925 587.325 612.175 cv
592.817 612.425 596.567 605.425 597.571 603.675 cv
598.575 601.925 595.567 598.925 599.567 598.175 cv
603.571 597.425 609.571 593.175 609.571 593.175 cv
609.571 593.175 599.067 596.425 586.067 591.175 cv
573.075 585.925 580.317 596.179 555.317 589.175 cv
530.325 582.175 499.317 571.925 497.567 565.925 cv
495.825 559.925 496.575 559.175 489.571 547.175 cv
482.567 535.175 472.364 519.737 458.716 523.331 cv
cp
clp
565.04 617.819 mo
565.04 617.819 571.536 608.983 569.329 593.952 cv
569.329 593.952 575.341 602.46 569.981 615.413 cv
569.981 615.413 567.356 619.979 565.04 617.819 cv
cp
.27451 .207843 .145098 rgb
f
462.825 542.925 mo
462.825 542.925 473.567 545.175 486.317 536.925 cv
486.317 536.925 481.075 545.925 467.071 546.425 cv
467.071 546.425 461.825 545.925 462.825 542.925 cv
cp
f
465.571 547.925 mo
465.571 547.925 476.317 550.175 489.067 541.925 cv
489.067 541.925 483.825 550.925 469.817 551.429 cv
469.817 551.429 464.575 550.925 465.571 547.925 cv
cp
f
467.325 552.679 mo
467.325 552.679 478.067 554.929 490.817 546.679 cv
490.817 546.679 485.575 555.679 471.571 556.179 cv
471.571 556.179 466.325 555.679 467.325 552.679 cv
cp
f
470.825 558.179 mo
470.825 558.179 481.575 560.429 494.325 552.179 cv
494.325 552.179 489.079 561.179 475.075 561.679 cv
475.075 561.679 469.833 561.179 470.825 558.179 cv
cp
f
473.825 563.175 mo
473.825 563.175 484.575 565.425 497.325 557.175 cv
497.325 557.175 492.079 566.175 478.075 566.675 cv
478.075 566.675 472.833 566.175 473.825 563.175 cv
cp
f
475.825 568.675 mo
475.825 568.675 486.571 570.925 499.321 562.675 cv
499.321 562.675 494.075 571.675 480.075 572.175 cv
480.075 572.175 474.829 571.675 475.825 568.675 cv
cp
f
478.075 574.175 mo
478.075 574.175 488.821 576.425 501.571 568.175 cv
501.571 568.175 496.325 577.175 482.325 577.679 cv
482.325 577.679 477.079 577.175 478.075 574.175 cv
cp
f
480.075 579.675 mo
480.075 579.675 490.817 581.925 503.567 573.675 cv
503.567 573.675 498.325 582.675 484.321 583.175 cv
484.321 583.175 479.075 582.675 480.075 579.675 cv
cp
f
482.075 585.425 mo
482.075 585.425 492.825 587.675 505.575 579.425 cv
505.575 579.425 500.329 588.425 486.325 588.929 cv
486.325 588.929 481.083 588.425 482.075 585.425 cv
cp
f
483.575 591.179 mo
483.575 591.179 494.325 593.429 507.075 585.179 cv
507.075 585.179 501.829 594.179 487.825 594.679 cv
487.825 594.679 482.583 594.179 483.575 591.179 cv
cp
f
487.579 595.429 mo
487.579 595.429 498.325 597.679 511.075 589.429 cv
511.075 589.429 505.833 598.429 491.825 598.929 cv
491.825 598.929 486.583 598.429 487.579 595.429 cv
cp
f
493.31 601.05 mo
493.31 601.05 504.247 602.011 515.935 592.308 cv
515.935 592.308 511.79 601.87 497.942 604.026 cv
497.942 604.026 492.677 604.151 493.31 601.05 cv
cp
f
499.208 605.897 mo
499.208 605.897 510.185 606.284 521.341 595.976 cv
521.341 595.976 517.708 605.741 503.997 608.62 cv
503.997 608.62 498.739 609.026 499.208 605.897 cv
cp
f
507.231 610.351 mo
507.231 610.351 518.161 609.296 527.872 597.616 cv
527.872 597.616 525.548 607.772 512.329 612.425 cv
512.329 612.425 507.173 613.511 507.231 610.351 cv
cp
f
459.267 537.683 mo
459.267 537.683 469.849 540.608 483.091 533.183 cv
483.091 533.183 477.29 541.831 463.278 541.448 cv
463.278 541.448 458.083 540.616 459.267 537.683 cv
cp
f
454.513 532.925 mo
454.513 532.925 464.802 536.745 478.638 530.483 cv
478.638 530.483 472.114 538.601 458.188 537.019 cv
458.188 537.019 453.083 535.745 454.513 532.925 cv
cp
f
449.622 526.995 mo
449.622 526.995 459.474 531.839 473.868 526.995 cv
473.868 526.995 466.56 534.417 452.864 531.44 cv
452.864 531.44 447.919 529.659 449.622 526.995 cv
cp
f
513.173 614.507 mo
513.173 614.507 523.966 612.519 532.646 600.05 cv
532.646 600.05 531.196 610.366 518.423 616.136 cv
518.423 616.136 513.384 617.663 513.173 614.507 cv
cp
f
520.837 617.847 mo
520.837 617.847 531.349 614.698 538.626 601.362 cv
538.626 601.362 538.302 611.772 526.231 618.894 cv
526.231 618.894 521.388 620.96 520.837 617.847 cv
cp
f
529.997 616.772 mo
529.997 616.772 539.888 612.019 544.989 597.71 cv
544.989 597.71 546.302 608.046 535.489 616.964 cv
535.489 616.964 531.028 619.761 529.997 616.772 cv
cp
f
538.513 616.362 mo
538.513 616.362 547.438 609.983 550.005 595.011 cv
550.005 595.011 553.075 604.964 543.958 615.612 cv
543.958 615.612 540.044 619.132 538.513 616.362 cv
cp
f
544.63 618.542 mo
544.63 618.542 553.134 611.604 554.739 596.495 cv
554.739 596.495 558.435 606.233 550.017 617.44 cv
550.017 617.44 546.337 621.206 544.63 618.542 cv
cp
f
549.63 621.292 mo
549.63 621.292 558.13 614.354 559.739 599.245 cv
559.739 599.245 563.435 608.983 555.013 620.19 cv
555.013 620.19 551.333 623.956 549.63 621.292 cv
cp
f
555.38 621.042 mo
555.38 621.042 563.88 614.104 565.485 598.995 cv
565.485 598.995 569.185 608.737 560.763 619.94 cv
560.763 619.94 557.083 623.71 555.38 621.042 cv
cp
f
571.04 619.319 mo
571.04 619.319 577.536 610.483 575.329 595.452 cv
575.329 595.452 581.341 603.96 575.981 616.913 cv
575.981 616.913 573.356 621.479 571.04 619.319 cv
cp
f
577.294 620.573 mo
577.294 620.573 583.79 611.737 581.583 596.702 cv
581.583 596.702 587.591 605.21 582.231 618.163 cv
582.231 618.163 579.606 622.729 577.294 620.573 cv
cp
f
584.294 620.819 mo
584.294 620.819 590.794 611.983 588.583 596.952 cv
588.583 596.952 594.595 605.46 589.231 618.413 cv
589.231 618.413 586.606 622.979 584.294 620.819 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_peach.eps)
%%CreationDate: 3/12/2016 1:19 AM
%AI9_DataStream
%Gb",KB3Q<FfC8Ytf9Q@Y`siHugC"Q3#pG6:"p=8s$Y]VZ262i6rp]jZpU")*OH<KtN_9#eF!kF?g6jsLcCDFp5?mU+9'+cP[f6#9
%9"-[;s(/-YrVkRMqp3E?5q>^L>eSdh#.=.jZX+&DXj)0ghJB<k2LcEUWP-//HmtlJ#F.p[Y>hr.-sf60b`7+703<aQ]icqo;bgMk
%6M#jK^MZ=fkQ$**q+e%ol'-c%BHNI^Wpm\j?ec=kj!\TM@?rUIN\``Oc:01fRaUDlKo_#*H+DIC(>@krmIMN&c0RDPkY]\Tn-A.c
%qLO,3i+"5QS/")M2U<`#XT^rDM^e"%.CJ'KOqtHG?m)$>dGuDK9D?:)p!8MUs50s0rsO;q.5PQ*3!T[K*5g\ANg?tephWJ']l*m%
%=eJ@G)BK.67]"HABJ0fhe'`D3pO+._e+8p+%f=/umV55F1joo.hY#?dPqid*9fn@>@p=\Rp)Rkq`J!0L*;m45H572e5uT[(dqg+k
%rs'LDCPYKLVTFV2:*jSfY*IbIJ!h=LpLLI6$7`'73lkA0\BE9BU45gqj$N?"BER,B.imE.eW^l1o!23M/c5kc2(]\V^CetUlYgI:
%.u*2a9\k6Ed\^p`YWi!Y*NQenXqTJaeLgKG4fH)#pcmQ9"$k'.B)0)E>?199:UZbS;AWD?,N\I1#_o]&q4Fki-W:2ag[1Z2(.1#U
%2YXdG_=$\2iM]tgdUp1MH[ta.57@6m"&c)IcfJs:&,HK9F;b2e'qDq<6\BCg49#2fQi,)i3N.&Xj*%ccC$a?plG*A-O=A^UK@E2\
%I0!:fe4Qj^Pa(^1.;f3`]B(PCQnFUBM^,eqqGBDX=3@X[fO;-4r#M]9j(=tjE2<2'^BI'!ecdMdr]9>/gHh@4%WM65[J_"2h!DC#
%;TJHV-(Lc1OA@%hJ@"$CC'Ftp%iPF3:2f<bKhA1hhCLK9b/H[F&,71UF@4eB_ZK'[K5OKW-iE]Iru2?>MmR8PB&*84*2:3eFGthk
%F]PXG92?/YFB?1_D4mbf3k?^rYS_0<,;nN*+!`G:!tj=]d]M5':oQAt)\A;L@)07*Ag8(*<=6-#1IWD&^54Wd'S+qDj&T.1mFFH%
%c5G`&.k;iiVQTI0UGpr#l*O:p4q<(?<oL6+Hb1ps^sVUU\VTgVd/5WXdopMFmqS['+'2k=RcW!n3rmjD$l(SCB&S',i^LCUC'HPq
%@AFt5!3"jHr)`b#mMC7Ud-`Qa*Zm\7^bC,8>SS_/WUo/).^_U.CV\:]GW+"X_V[(5pj7$(J6EWhLqh*/p-fBTUu$1qEtOY_0A8.R
%;&(G^:7]mjLe0EA[PK+OdVWIofMd,p:hFlG16ojJiC"as?F^aP.]fusDoU8G'AK)?.2XG?@PE*[\CJ[N#WnXa5dgGc]A,$q`&f1$
%[&>#aJT3BQVtQp:1Ia`3lW!V:mD;jSTV@]!-IU>24W:EN67^,9KC9gGeMo>\>5_"nLZC<2\7X+Q<8tt(<A>i,\S9@cYW7d,pqcJK
%V@f6fn<KWeVP"\e$:rOXRtZ%!).QUV<@<K38+fW`(i6PG(IP(U"FlJ+X%b\+P\W4__d5<]M:2hMO"E+7A!"keRK[D3UF5OJN7??\
%@`hCK#`0uhD87EogiT!*<as4B2%-)#='jJ$Xi-Tr!Fm_db0HY7(W3/6fQ)g#Qe6>8/XP+1M(JtZX;H"dc,Bcog?gn9T'X!i^s%a#
%#F8+C\-a]U(PPccYN4msQN#ZSQZBoBRDKhOR0D"'PLTZSXITIhIp2*l,cPBXCYg[c>-2h=QG"0Il.2?aD9LF==8hKe'srb__GB1D
%Znf'f*-J2:6%(-k$urYJdbb_9omO]^RABB\l7<ds=/9%%IpLiG\+E59+-eh"6)cg!P%Eo]=K<#JpH(=mf.?Kr(uZI::@kP`%$$4!
%GaR&\I:<s\%(K\$4-`-RZX.FT$aht+e_anHn7hCnh"nW[Y6AD:fPNC=#0.)-k_ZQ6e*a6?@mMj2^5<XMhIc[="rRB0\;kQ*0A"pi
%nQZ[L^MXr[6E7Yl2pA)G1Nu=jYr.2&fD4#A)UhhFT;N[X`W6FkEr2RL[,W.!bnMO]Tn-Oi6*X'm\m[;Q^gKnIL)>6Wj\9^f^n=I^
%$o`HOH=3s(c$ed<Ye3kOe&BNk&s-TO0E4&k3/^8q3$.g6k\ZJ%\ed3L"'is9e99h-NVV@j?TO)jb3-5226k"QVVZG2",87KSEY>4
%jDttkP7I0ZcWo2VXOeuUAe=kn`c:(Pa"`k%R'UVc4;I)tGL`1:;RmGGD,nQsg6qOFOqe(RR5$ATm)L^LO'ec&eshX,bZu#P$(=1:
%,[k1]cc5*uH2XHf=ORUM_RuaX-`3Ij@[sOD$u)fe6P+((*LRWDTA_3NjC8%'?&XgV5<=E5j'sL#1O:c>(7Ue>ko!"=T,$T.#FJX+
%4>WS%i20>:.#X*)"[C]0p\>s')#H$LA0(i?EQENRH.?$%+VOn:0ZLrek!btE$S"Y4,q-e)JFtjh'RZ;cLUZ<]fAC,UdO&%52=Lnn
%HsgKgd$RCe;_:7Y0oc`V_U@\_oon\<WV?<1%5@a>@kjp>;pEsm?IZu6iQR=\SNqeC?cD(#jf)Z^@_2A>S9pX0R.qmAN_M[ea7.s0
%%b8T"B&:F(c=2OmS<YUiGS*K3$#1,48cP_*/i\n\AQ!GETG/l*'n4($#AC&ABZ?i+XuRqmlknZFi[!=<=q^u_L?`'*UNkB<#=An;
%He,9"it+=QRhQjeJBYROckK*KEk?]6`usYJSJ5&2H7]Ut`F>b!)%r4`"&u)eUqj!pCI',`]oliu;T+o#@t<+33[p_2W1q[&;hMh1
%+@^9RDuGMr(55r&)@P5aJ(4ti+Yh^kfDrn$MF@!s+;-!GNm*CX,)J^U-NEF;8#!rDLc'gY.!,=E?7\Q)p%!0q@Su+b1Fo24`a_kT
%BJM@VM_ZAb5#8F3EIaJR=Hlq#.Z$Sc@T!+>Bp6K09UW"=+ol1<@o6\ip8Jk9o+[)q#FJZAW0:>J50\C'@SpUnf[Nju4N4&5!G5B2
%r\dPdAhg/0em=A&?'F'efhS+T/&EgiM:kNs0fp?E94p!$)9c+[_T^:sN\]C[gp3\j(?O.Qk5'qpNLc>.5JJm,p-]eaGZeVk^,?I.
%EtZ2FQ[CC)^*\4ZiG8&*f=%,EP,N02/HiQpF2l`CD(X^]s'`'r-u3nGeIl.>iG/BaXqj/43gmeZp9ZDCN$\8PF6/fN!)1IIHno^U
%15`=>#oP%"e:TRWR7DK3b'sY]K1b+CaXuB[S4qK;/S2tY]B$pqN"pXVWB6mQY8L=*2s)qfP.+*nPW;FoU;trY)9C[/Vt;i69BeA4
%>>)g4f&/LbG7?a3js[CE>Uotjjk@u*f_1tH,:Kp?Yr475G>b([8RH'XktA(.BjX=32H*1S7VNb?_2L%rVAfC@VVq[6Y4M3biG#BK
%`b-WS59;fa`A%8tks0<5IM<I1VOd"1okL8Y!nDD-'B<6mRA'Vb:W18`Bg,*XYc7>3-FlC8=`.SGK6EbJR43"b_l\,##K8;CR*-T^
%$oc-,otXs1%Ybg<aig13m"%HpDA[7P[-W@[RME(_;c7Y-1+nT$_>NJLj=D??N/=Sk'+C,\oLmJZBE.o(Q;dE%kJ,JtbK9SK%?Mju
%^WH<?&3b[n^kT95PG][=^<)f3YCUF`c[=pHTo\9Y[m'2NhW2n)(Aq@XRI:FY.QR)pN^uh)Za3Ds=%$YT:1?RIora)m6)@KZCG[0!
%o(b]n.]a==$Yg*CXuD`8XVVf@Nab1"cr5:KTb8@$XOk8AY/R*7^(qBgCLcQlS`UgB:iSFr[sC`Y1i;4pnW5%<Z@@eIbfTaj/Det'
%RmBkT"*H(q/([DToD70@\R#TrCX&NZ<c8ag2kESeY-Z&hQFP3Qf3&6T(lE:l5F]0gUjFgk6ONiD=$,f=*e`n5(0,ERGj!!F-`Fgf
%0ti.#\eB89jN;"Nllok41c?Z#p<Tm<pe7F\S@FM]NM$R*X#XNQoq60IZ_unl0\[rh/eA+=6.dpI/cAD@HKShI>CSRs>9+*eDNi$/
%OuQb\a3/tKnKMidG.`VILAW]]j!A]X,`\50nWGk<'$&0h3*n(%r"?>Xd[rL\6B_.E'0-\XB;Rg_F-gQL/72<7)4Q>Yd/Vlag*G@i
%^RZKTg657LJRR8r9uKVjOX-Fk\%(l[H2_8>.XV&c:qk=I4c9@sI`-4M*#%:uA7D!UiL".bRL\9n?^T&r>b%]#9Oh9#s#K$tMs'J;
%i+\@&.ET:\.5_"LA7%C/.$X"Hh=f;ZZcJPDA=lJ3j\K.-q/s1;-RhBFlg3)O?1kP1<m\ilBEk<#,Vq7AFH"7&9/0b:V+T2F_bIGJ
%#DTu@:@n@9C]?gBi1Ej!Hl<+9[PROO=E\/Ic(0QsU>,E4@qZj-2F2<u%u<1HmI/-tTj(\/+T<jW@Kcp-]nlc"`W>3GL_l-g<h,OD
%q]GE>gi<bd=k'UE`/cVTQ=f-sQq@NAnRG8-+2aQM5=QV0&jOC#9A7=F0s,7SnREhnN#D.qr-'^!Fs0mSjh0>\B?`cJ?)YE;QfH$^
%Ek@J"&U$C4]@KL>Ek?R[H`+pT`-TJc8ut\c4gcX@>auK_[8(id2YAO8<7/jP!_Q,+a:!&mBEe3Dn@]LbMK'?qC\9%Y>Oe"hb9d<Z
%$r>Hu=DVu-R<Q)(=,D[o0K[UN,j3S'0j^2\fAieDodL\QB?b`[%]*"08O8O#%8-0q-$b,l&Q!H]eGiq1TO6gU3US_"3u(l`flRSH
%?1sIaCA"qQ3_=XZ?UqABjX?*%QS[a^??&5tp0]OjSq=Xb!L!Y57@XidEKngM6r%X2lMhss/@A!IA]\r/o(3nL`/+>Y_:&O(IZG/(
%]]LkF0<sW9bEe'AAVi9')/;aE\\sq0XLZ9<9<>[2CX'iF,3RdN9>\SYbFXWSO^JC\\JS-hk$2B@-0AHAc6_UX@a6R,k]:.Y`<0T'
%9fdWm9Y+?A,UV?SR<3B5p!S,l&4`hJ]0-rtPFg`T%.j(p`32hT0ZDu*2Y$_qKe:Cs0c`Y;f6J[*r0VnX,pnFYo>A4Y-UGa_SC&'J
%jS2a3e^I-aGe'."U3`S2/@U,1`pshPg-7',][Tht;Ks#Ln_onpB//A5'f*oVilr_`c(0&7/nQEpbTpQATo=es\'G1hAuk(E+[']?
%D,-%Zf^CN>$k%mkZK/BVs'HSIDGXEqFnV)/&h47;o`gV30D;_h8&[eG?+Qs-'LO/p\ll5Eg4^JQip/<nYIBl5F>8B4>+OeYTbt`(
%[,1(&A^[qW"5Sp@0STOlX.<??:gqU?D)8GQ>>AQ^RDdH,&m5AQpabJe7&97(eYcZ?=M\mfA&.253>(7F]-:5fD/OsfcT$u@cAY4O
%ms<?q+B,1<'2f)tL+:^1A7G&IO=b4U>CSTs[9tNc]1ip7BR5o;6mkTKU<sW7&fR?UV.f:%pg_%?Sg\qWoQB0[-6_1r[kFaIXAn=<
%`=ZQM_TOneG%jW/$o_aVl%-[@C/a*^VE-jokgR3U2[,66^gKm*qp%ufCSffM.$SX,]4Oo*`]r?QKOZ2GIl1/rG2X8CL1qHaE<JoY
%*2cAq,][nIc/J\qCn*p)Eq7l@Zmn5RL)8.\If.VsbToY'3IGEhLX03hnM\]R=m,*&plW[FP/KbPioJVkF;H/r_bBQ=4f-7bK78M#
%US4NVEVQ3,3"(s.ok\(V>.95S4j>[ITNb$8_e<nufu/7cq3VsYqs,p39p16C5"EVro5./(SGd`I>e1Qc[[?o%)(W1d/Rssn5Jp&>
%jt=)[$q5$u\JY1uObXtWZF%.u_jpaZ#:5Qg;r^">4Ho(&Gf2F;]HP8ua[DgtjNp]]g:O\aR4gKHkl7$Y*GuZgj6Z2-GUJJMN)LPp
%pe>#f@o)IuF-D!L<]lmD2DS'!Q?H21C>R?S4$g2EUR==GbUbj'i".Y`n4N1iZVYG.`Hb$`$?:O_>T`"*BeuH*neoNPdlV4&E_GEg
%pc#X86JaJ_8n-cW;[Q2b/:UBMjY*(=R#`BGcg9lLa]>MX5))I:2AVjrXOdrT(J82D,3@M9]NgADq>IdhNITa'kAQc#qZp,#[fB93
%eEVP6kV'l?KhRK]OY:/.N(6,Z=$cW[0sRWOXjhd@BjpV-:p-Y)8m^'Nj)?&4S`R]4NnT3HjnR*[N0Z'&b/KsGRe=j3GU%k?W9cI>
%o("XZ!GbSO*sT]1ZP8Yf.p%t3M*rQ$qsjQ%>3\-Gq?CM\V6&0QlJlM/<Vd`M*TB$QD[F$GS4E[H/O[/W&I-6EN(H/r-oBZ\_9,f1
%>%toQ$jV?0k_6g.!C:8Yh&^I*pi%W>la9WggqF)HhT!$X&@g1R[;abaGMVt,;q%&9l+R6a>hea"6AMr:Br2DVR^RW3\&!;bS%@i&
%:?l*c)o]i8rAr5W;kSi"a_0r48o!=-/(hE?CAXjU]OTCFJ-9_trXOf+S-sgG:Z`*oc7.ST'*b!]k_)6_c(H@h)#m1;Do-r&+np*l
%m[J1QK_peGI=G_h'/hp*+H=QVh1X$"Cc5_.@k,$'drmjo9PJ4][X8N)&&.Hm(-3KFnjT3%6A&V\\K^*u%faohT1$Q!s"V.Z&pBhM
%l\&Q)bH;</o*f0KaFJ+L(Gi1_pjZE.=uI.`:rfs%LZTFMPd'D*:&e-Mm3c^2@FGOP*g]S_VJk[CZ=iBo1>BaE2%*4NnCUN,SXYZ7
%*6n-hFZSL15KfsA/`G.bT2,1R\9p>r^qft`aGN-&G$r@)>Br\CpocuG(`]E8Yj$g8s$J]H-YthPdg;KbQVD7s7AHRc$8]7XHr6FZ
%5LZ4`i>P`P'0_uVl$pjRNJ((THog68A+OD%4OBO;E>Sm0c-3)N)XU2)F4s:^FMar*MGK]JT2,0'_PbH:dsQD=V/>A:EqRAT/LiT-
%HfGWr\9Yr_'D=O@Hi=<4KheKC3QdtTb1/tXbF`^3Z9P,u'GZ"k%^j2!("YcfONtOF_^;E\+fnEUr%9c8_WhJ:kt.'[W9=<D<im(H
%r]'`qj[#RQ[+bV6G&W>C\.Vs+TXmLp!;UnRWKR-Uc#hq)+`u(G2^rIqk=&R?GQ5SBm/?GND[/`+?a`%eE7".CF7)Am4hK5T1KXC-
%f10tC59Bd%T%5FEec1P6Bt[Pndg._n>eSdh#.8WWciu>;J+?\V+>VoJ4VtK!+EDgU^uq3U6:9l(2Y=c7bq4oqe"u1'-UTPXh`k7g
%:huV,'q284OZ1RZ14C(._'PUGX7sr.?Rel88)MLFHBigH1+:+F-<526.KDR_f1IaUdI/8E?,2l'T`(%HM#h:sqJ@FqcS*GfHi<\7
%i[mS:;\m?HN&Wm^EC:Y9.BHjpB+%gc3Y3@k/9Y4aH?BSIh_.FGeQ)^90U/7rL[d+lhk6I6dHS=DmJ4sB.C[V%RKEDY!D_LOP`,.N
%`cYJfC[s/-</,oco'$4E^lKr'fWd[[q2bVQ?s5hD@Y")P\^\@X7D`B8Uuq#oFqKtb04G6<Yj-<1Vu0[V6?ZONK4_A-S@/*\jn$mq
%\nEktNM]1%+R[<"b-L6hS.7+PK\KJMUDgKI,uCd_@5@gX:ZcOdHmGt9/lJ1.J(tE(j\@[U(prRnNd.D;N\W]-SdM#BTIk:)WI+lr
%18kB$e3Pm("mo:-eE`l(dnsAD;(*mZ2tRV^$a%V<1tHEkgXka+.V2$L-Lr$XZ;RHfQ9n6%MY0TJ$Ys?%Q0G[AWP_''*Akt>$a+]C
%g$r"#63A?EQ)gHJpE>5CP$jPAZ[H"11eXel^?F/*#qV3Be^S.>bkudbSN:]?4,r3AbHTu[G*"aRcR^Vk=7E1H_pS41ejTiG9eiqT
%d7*:Xg$c9e0SL*u*8<C=)o5540Wu&2N(CW?-Dt\pReU&9J6=M@l@j"8ZIADW&0el+=GD$@AKs6gO`e_0\/BU%7S^Ht<U\U16N6+I
%O?*mNDPsp8j`]Ui>Ud.3F>mJdm3eU`6LDEa3"JmlogX``[bAUc9)Z+n3=Hgs8ui1A_pPmA=\+4b9"=td7?d1YR-Zi?:pf5*!UFIJ
%,fEfq$Ar[#&]Q<IA!037Bddrd=$a0DhV6T]lujR)$FP%;"dE4f'l>VBdY"4GC'8XG]+#U!JjOGBmrj@;ktYDT8+TG^Ap3a98k#lC
%)s@;fKs.7u5=AeOVgIe8."QChj][a\_k(2p/VkC`qJ\X%3X+=*e8B4?<(<s[lEs(DWhD!41Eq.!qb^18<bMTJ]CfX,JkWUA'aC]?
%@;VBJd+lb9e;\oA7_9Il<g.]#cO=5]bI^oU>npO5?,Bpc`U+^;?(6<#JQ;/J(b+C^qm$Q!4fb73<:.3-"^P^k<JI3?T%Z4b)UXJm
%\_bRZO;(8NmcnAE^XZ-/^abG.pW;dfobp*d^c]qqCGWP.YB<ucS,uPo/e/u4$+ST'"ZXE^Lb9"Z6DY=$Rc8q$OYEc';7P1D(5^(K
%cg.Jj[Bk0/MK;W$>cW'o8uc,@?7+?cA#^r1'Z8F`5$Zl2VR\-LoC,5H8Te0p5(:E)1>Bu(UU$>hD`8'#1:$aCXX(c1W4:tj]83PV
%-FY1Udaot/WeP1-G9OKiOHo%54ICes/&q8A0,`@`Hd0''N(&YF#.lC?&'BA,'bD$k6&:a)Pk[m;X*e5(oT%$,NE.Vh)U7nC?!]?-
%;=C^Sp%h.t>3sNU6IAo7`94j,8G[M`1^8q4_aYUQSu&@`)f,/7k6niY%!JA03rP2`2*pFqP94.M))4X9^`SucOO]:b@aH;r/Q,Y?
%ZE`8#p%MF"VQ9C<n<l4.l$Dq`4ac6e8Y(e'g5XYHQ)h-uOVP'S9qQ/X.`EJsY_=SBCTX:'$C0><k(_I05ib&2?D^q8W6(,nTS`lK
%;3d$`H=P%/cYDihWRAC?""Uc?V]fm=TYXgr9!:-3W6/fl=i@O)\'h\B]R\`!n63eWX\J!&_^\Z.P_Xs959%79Z#rnD2'@]/mt'"c
%/$/uW52I<^p3.b;B+tcSKVleOfgCaFUKAU<UGZikW(*a":BY!>3.e"nB7]1.e;?V]"4\mNC8"R88@=Qg\QFi3ObMEOUNGd<E!l.P
%eAkJPe&'MerI[n(W@R!5W1\c4Z[PrX>W9m1<<?/M.#6C!TLtodG:NU*TgFcS7`QNQZ-YN`\#Y3k\:Je5;KIB0*lrh^>X5['d6BI(
%\l^i>-UEYC%b%/?*M_ms(c;DoGm=%m;/cH;CTn>N7b[/VFT;Z$=]Plh(]m&S%V,%I.>&NWGGV"#at/f326riAlG?T0bO+`CV[[tq
%Do'#XD4lK*9n!VE/6YDP0FUG$CISBc7Z%Opg7/qIX^OlVPrt^O!R!\HWfZo)DV#it.lVhJP>Tm+4@&_=DQI1s1bW(bAfd^jGNLV0
%7qWm<HI'fR'#188UNonD%4,>DMH/^DXV&/S!\\4o'4tP-n23ealshe]Kaau-*fD,6n7-XkmWU>nY/nn\;=^ZPJd2X&Q<RhZ[9>p%
%-Y^D7]41HR:d3O6=`7XUod9=jCo8"u;3f*bL[?TC"1eTV)q`[]HX_d9MS"22&s-,ECW#l=heH5WV*fVpKOAc6=C(2\P_:3&)^Ua'
%Q!4)g1kp'[XNF5H>B;KV!#)57"]dXP;2$m>Ud!Sjj4[@6+)^akr>oG:FnK9ErM[&8Ce)#+\F(,9m>SQAG&i";4TB_?NC#3rhBR4D
%;;j"WK.SN2.RE3c?Rp5<>^%&-eO&q?P[hKHJ-cMI5q[Y=Y8(u!);:!hXY^01<3&`X@_)>B23-aT[(8j(Wg:]MEcho&o%U*W4;\1J
%o7Tj5YR%GGPR!_.h#u6CfaT#O(UVn-G*KWZY*l>A%[]WrT]>I.W*p3@EE]ta:i)/<%f?O]+5uu:%ZQ/-s+l1\aJS<!$]VZ:cO#^t
%:gBt87prG'm5tZu6X6s"^uN_YK:T$#VslZdTJsO6d,UZ9g<aTJD?[D8a&1I):`RA-^aM7XkYt>nKlUalS/Zue#PC]7W4,,'7&"J+
%4OhuclGB,;/rfq!;&>VR:04tH:@67IJ2[pIml_?07X=L-,ro]VC*d840rD$sa&(U&GM.9fdZ&;Jr+\'C\p8UX2qq?iLFl_THD?^]
%isS[k;Llb9csT`qLJpH*GgE1NqWf?(V-8R'V!(,s[8X&H(9&>-(A28HXeA^fKc`+IqC0L]>Wt9O:T"2HZ"*QQMqdoHr1i+?2(Ht[
%?:tIC8RW='#'YBRG65rFDF[(;TZ\c$3:*:BCRT"iZ(kci.ar*&+]Tt1],qkj!%SA3bpW@i:@SB5]Mm"9&%^L5O"B>-(4qj<Wh4D]
%<,SNn[7e0YQ+fQUMNCfB=`00RB7&"b\3A.-&"*r!pUA!'Rr\""m%+_4;XF\DY\;U^P(n9pAB@dM7->P'",3+5cMDpp?3Lu@X5:LJ
%cpd$&UUOsM^lDj!9uO>/`^T2S`uDonG"ighG<RpB5]7)gQ;kc8HEH%(#Bip6bad7fL+1:86Pr:MqSCn9==VWl#me1k<plD>6fIE4
%J,7&t`^5q=7N9>iO4"J0@GGuH\5EsP&8U'-E5rktKude^c2).J]j(7D1l!0lo^39F1=Y"_m-otnis9HP?GHUIK/$lKm5Z56nt9SF
%1YerEJ]ku25"<SJN&T3F)SmP[U_ab`3*qC_<&SRRma_fR*emVL2=qu<5!7ECI9d7D$Q1U>l:)Ju!MO#(WJZoaJo$@qN6O\A"4,+5
%k($;=D4$<$L>jb]3K(uj#N5Z]aH]df%KFi)^bAt)4!s>)DdZmeJ4[J0[kOto(cA'TV-U/ZXa&AjWG[[H].migU9u69]7Y(.>?+=_
%>J6'-33tN.N!DHp!YM@(J0ifnU60A_fr2g_I[KfuWgg9O2O$uojsigMr)%U3Mk>.s3`)U%a$MS!4>\kjd;6nRc0JcWl.R*fFfao-
%Zh^@m)i6N-W0>`p]V7Yn"+=04lWH:kHDDA]@2tdlqC$,-`K!<?`jN2o"f0fRjJ^f/od,HIO"lJj)isB#j5HAFD)-_RSYNU5i0*-e
%]KQfCRFgR`C3PWA&@MhE6BZ[;<%@RU7M;7(TBPo_$T,p8)4ak$cD[13Q4M,.9Zi;har.b"B?f@]B7s?kB4B+PA)QI8Ri5Zc^rQeA
%kaGgn0Z]?c5+uY3m3n((5*1Qc$<l<m,K8D^9;GjKGSDKaftW!Ls5?q\O1h:aQq1amLL<(r(h6@_kaTp1,V%A,+Y-G<ANR<C'ILbT
%*g+"9WuN,o&H'1iRbB-e>:UHYjZh%VQ.hfig>(BOll;tl,tbjmhg2m6i8`8^gHQd_(#CN,2]qCiA2ft3eVhuLg7@F&43J!B2p6ns
%l^m_Efp6]'FlW/gP<J6rlL(R*HQ14)dEQSIHes2,ZL2I2/,(W>^9$/F=Sn81['@@#BPk+_(lr*mNO@S(9i^M)4+$tneaCGg'c_(V
%s*R_gV:,t$qo7>A]nZXE>lO`&qdI+-qt<$cI99Xt<9q/ubg')_@d/_j\!,-@pYKMs<?Al.@<-#7o@&9(h/iNNpW]b"T/+HVkr1P^
%)QgLFH"6e.s*8+^Q*)b$QLB%g$eqL6(l$TlrtWbagtCl"DRQiJH+/*c]kD=j\0(@7(&@\K=4DH/Dlc0Opm+!n8[gUmS:@NUY6Ws+
%4/JK0fbNu1^!+mHh&9)K?(oc!@Jk$O9?"$-rG#d4_E(h(ceLH$/7i0@IpLd\I/#b;)0?o_H1Ut%`EKNK\AVb9V6.)[$Q`L'*Z*UD
%q;0`RnsAO9CutZFLF^WG:S#_td=^ln^uEAfo*Z4dERruohT43(&$&?Qm]AWqX.TAB]C+_1R@.b)GP%`T<B]]SR![\9""WOu%,A=h
%<a%(n4taVtl[++6X=OV0ML/02(uF`<hq6^e^\`1ifs`\#<c7)qF8(O'=oYe7rhf=-eMt8>RJM>0]+6#IE?<rTD>ED.F^EU;WLdWR
%(S):,co7e,:&fTb0DDu\rZH]'ksH,>EU^j^l@l7R0\Yb53u7e"oH_1(^Xh:[^#8aVb?J>a2rhTV!uUr2>C,jNCY?cl4o\GAHMcn%
%>3Xeb0=75-N1n#bXK@5.>1r)t'L$`=TJ-4gLp[;Bb3V4Cg^,QV/ndDUS.EoS@cfZED(0]&pr3!06K-n:XE477Q%*cQh<W;aB(d?k
%G#\ITnbr(E3=M+ZhB/BZJpqZ2+1=r:V)MQC?"Q<nqtB_oZi&'n]QR>hJ"GO[H_eOt55FKTLS]<@5k!o`ogNJBpX+nHDR&hc=%BAM
%P5q=B]9.QMo^kl:4+m1DnHp4Na6c)Ha3WM2Ic.@\DIb'CB"Vp9;-b1C"mp5;Y->#=V>KGqfCc%%/cTP&,Wo3/\t74KN]^KOb1?ME
%fCu=iEMK#(2M9E?ks_X?l\*VQQg4D7G37kr:3a+Ze6)U:?T<Cpc=lOa+,n0c?e0KL]dr)a%fINbn=[%rH/T`LDCt7Qo3H_I3d>!Z
%Aok=Z6:BW0lDd#Ji9i48SmQ<AgpQ/-_i4K/G^Fi\%\?\WoQ:)Qp=@CWWBY'#r6+$;-4H(uhCC/YZ[(QnZFfQY#L/U87d=j*GL(ea
%[LCF5[eBRFVgXY64K,@CF7oiKl,iX#bbiqp%H&_-jgT9=Rrqd*h[o6Jld+E=e#9gt?Q5'3hqFoA[ShHNcQ$<)]*Ebs=:.-'Cb=7G
%)YjUgm`3Q1fu6<lpA%#*=k^P#f"%/0Hhbg9q:73d-#UDApIoRK(u`Hs@l(l>roZB(pKr!>f#?CflheY%DnQCD_rHdmmos@7S[_m*
%0&SG>$MET9HM2BQ;9l@`lO+;*s5EHE+hB3I>9^.Qf1nD3$\*VTgQanQ^*5ls[,#ej?uXUs_>CgN[aR8>ra!0PBD#$]A*3"@o1f&G
%B>/8b5MJk!Q*5+V+7)24l5r&7RA8'4ebr+*Of(K:Fe`)EIDB&&-.L!(f:VJLem.r<iNDmerGb2OYu'8.J!I=n$b_e`?dIX0l,0]K
%:S=en&M;JXZd]&3M,l3!b81QLS#YR/ppK<-E$K)"7c9<:[mhG(4["I*hf;sj.Q:n*E.V1Bg(=cmc!Bc_1B"Gro?1$,VSdJlfhjCV
%#o\OAV(QakMqK=-PMQQt)?u[<?_q_if14Y&QdpZd(n-L],L)jipXc+il_j6UO.#3HdeF2W2Uk'r^PXQD0Bn7I03'Z41>Tpg@=!-5
%nG\H[):s&+4,e/l>HJ]8<U,']U6_fl7CZ[u:IZ6h*uqkA&iW)iB3PWGrh[2jY<@@ZDU@7qJ0%'sj27GD-sU&*l!H+?5f4"60*[aY
%6`il^C90O:>mWe@:s0c#([X9Acq"?LqrjSGKN]8OO&('k`Vt,3G>FTD\m*at[Cgn>-.dpk(dp,GRFhr4+H!0Uei28$X>''_O$jmi
%olggL"Ok6Dml"X$4Q$',a@P&0!:uos:#kGqcG'-D+<_j9lbcN33oQjXnXC?&r5QY4)!lc/,:YqU9F[f\q/62thYYk$SO[B.CKb\g
%l7!0MjW<VA\]]uAG@-t\QG8r+C_\V<5@E.[d4t"]_9M+;<#8\`9BH^fCV:Jo9f7./ZM9Z,_LnDu:L0[G@uk>J2r6Z%n2E!]LECOi
%?@:'g6->c%RDW3GJ)f`co+[JEb!oD"*G1.%Mq+.tj^`f$CVG8rlf12F5D#U*VQj-+5(9#EQAq/cBrP`@cZ?ptX_1q)M\N,Q*P]3E
%U7H`'p*8-o<3lT%'b+QcP-:L_g=Fll3t%LZe0"-"I`gTe:k8[RhZ!"#`_-``KbUJX1gXWn/kR,m&Tn8.A&Gmu6N2#Y[:$X>](o%n
%iV!.B;4HE*c]X%;?)hdDF(]`Z]r`igB:j2tZHbfS@IZ2OC?+?Lm&U#UgS?<7caS%@^f!Tq'uKqtcAQd^kF5]>XrJ?$\9P:_RG'Ik
%9kF&YZiBk*TKSAcj(NW`2q]1`Ue_un;+LrHfnskMO_b+:VJ@7F:GpeND-u-1JBhK'U\gel^R!X/NB^0dIqd/Rg"Yu`%5uH,6X_n-
%RA7pE&i;iQXqqV@mMd+Kn+^A;*^:!>]e6E!c2ltCjk\1>:NoiJ`[<,@"[8gbi&#J*m,d(:(b,c'<_+X>BK(=\?5e=Ml$`nX?<]!]
%.iN<Uo,^QYal_3a5,H/'h#*MbO7)/>C)nQqj1\mn(r)C*4oXZU`SK_1<sKZL`o?m\9:9PXrVas@QUbu@,Zc)EIPYQ'lOPiHZ?(>b
%m5ECXmFHa5]Jd,@cYK<5p<YKeLme'uB(P#i[CZ,+.?1R/4^IrB#2lA%k&9ZU3o=jdT4P-"<n!CB\*inT_oFDJJ*k3Ipu0m%Sh=[.
%>2*6;B`@Q"=oQh.Z3@>q/JparV&G/j_gMGon]h<TC2U,FI]71sIC8]Toj[0a%+<N&7d(oPeU=T\B.LOUbsu+Ee,&UscINZ3)H(TO
%Dt1p$E&%qp,a-Jc'IB5S5NQi>Nm%XJ(p(^Qfk.cpG0'Wdne%+DXm_b2\r>SWM"LT0%L@,E`hpJ`q4^2U<d!lV9B6/4mgn-?([q#0
%n)^/p?C#W.WkYW3E8_<]kFZM"c"D6'33C^!4@ulsJA#f<s0Pj[Y7C\;Wb2QtZ^(0V%\4Zk8/HhcGg)MX^!Bn1?g`Dsl(?kdpn%Gi
%&;m]M&Gpt_4880\@e`#5K?gr$++G^5C,X#F5E^jV,(0,)'e&hD?K7tcSo[nUh:r@G^?hJ`JB"mL]]X*NX14sRb#f&N.q"'L4k:-S
%I.QdGqU=%,E]_hBa/o7%>rqTBdD:+jn9?CCFE;s/Z^\YX9?jC:_ZJuHa17b%]8obj3M\.?X4NC::#A$]E:53)EqdEIg_hYG[c6+I
%c95N:>Tf<0b6:GM359qLR,S(MG'<?<@_eoXLt0Dof$Yf+/1U+-^D\KQ0,nit[G0Ze]<KQCGF\AE*f\%<I@OX.q=a<<[e"Kc?2=gq
%0)9Ya^7CgsQ63ip"'oh*PL$plp1P"V4n\.f(hW/VrSsea[GF#d?P_8eY>n^5^+<TRhei&Jq-&&Z\c+l"2JMKF,<PpN]@q`+&F4`P
%R8"bUh/.^Zft1Ybk,IriHh6@]S#=jL7*[ubG<UUNrV[:NHK0??D3V311p$1NI,fb&:Bp/Q)@6"ij8>>FrbO`!fsSF!Z>ATg]6A:.
%7pkSOjZi1dJD\q,VY4Pu4p[9aD\2[:lc"UnGP5.bm&t<?fN?<TU2%6_D1,if\`.gp6Z6Mjc_Zu=1]Qe$XUd_p_6kT^^GR)SK.cZT
%IAVIurs0FC(M,obMZ3P'SN]a5ktV@]T)@i?K<W;/b\S;4>lToXackN5Wtl%Vjr-#4B6Ws:REt'lc&M>4BD;DTG;B0XbKSloR7H-m
%hAktuo'<i0A3.Mmn,BSsqDL=jn/BObEb,^tB$4;(7/I.tFDqg.<n@:sHWf7/lrBCD\D,>+hL,@-p-.7`'=d1*$XN\6!(XadfQ_I\
%gkg.P`-L4]V%63L)lkX,>t-Yppt)eB8%uD\7lMUIIa8jU'ToML4RCaQLR#mr_3_??\H=@n,1#sE\S#8QXk`J]IVXB%hYl&VOmg%t
%X8>]ZI\_8^#Df_0&#;ImkmP<!XS\[.*C%i?*B1eUeBY'+;VYu7rjmMBJ*4d?oBqrgm]>8=&&;BkjQQC`*Y,m,Dk9*L]4@`()q5^0
%FPjChQ,!(]>?NcKbDY0LPPYCE*PTF_gZ"\5Xg$]jr5)4n/K1:SOB]B@"m]OBOQ\6<D8bq2aF(A!kh44g\"G9hJ'73E=VIn,VjA@g
%:E"GP7&dO<pf2V[=\,[&r5![Lg=j^%.kb3PbKpJ&6a^U-?h25,5U#ejI^cacZthAf8pYKmH9KK^7sfO6L\D%AHKK&&L1+K_?[+O&
%YlIC]G.tPsA:eV\IW-YManB,Wm*/6-&Gke%2N[NM/Ya1Zo<//%^1plkpJ!`YnZ;7d<F2i'U?=3gD84u,d.*l/3L9Ylro&-5JNsWl
%c;r_[HXpj3JZ+2K'CMV*ZAuiQQ*^-q#]%pkZ1i'3b>p*PYLi.=#c:$Yq<?J0[f.t\hb0:GJ&kRr!M4#\`PW`KF'.=:kEbkWQ]qPo
%fa4S4,B%7_#@#/3SBkU-ghGo[]YeC623@:Q%X6$b?9>2OGQ?=n2lE]#%F>IUJ:DL6Bu=qX+c=:ngT@=NLJ+k+?WMp3Ha3nKpu3>'
%SPKb7)MSPgJ%MslaY-*uo]s12h+W>ibMP6cDY[X2^aqW_IIOk-&m6SKp#j2m`V4&^]R3tu]=KW+Y,[aOWB>?S@60Y_pYGXG`nPC=
%nK<6+^[QX4c)1KOg0+kb+&i:+_o:id:VKn%]d+*dZl&G@c;)A@D4F*A"L6hpY6rT@$*7oXB:Y]@SIsHqjW6oqKP/M^3U#T"Y5:_^
%N$%0Q)s;b<8"J\gBJanR18^=%.q&s-kcFkXb5,H,BR'^Rk58)YB,JM5X^^ISPDlu6rW?.hk8KM7I&[?Ql`sK1hRrjc`cIbi523aF
%=S`+oYWk%s?^Y8A04(a[&Y;'kDh`RA^@5NGA*rl'cq)to9:E-`]a.=3_^1,tZUX)]@__;=ab=pXXi5L6jBar-!W2=t)nf.(#phDC
%**b&ETo!2<:VK&>Sh"[o/p!)rO,JGa.qDp/f*WDHVk2guK+ID?f=Obaa<#3"IF5bihmHK&L\\B@p*)[gj5@c%T:)eo;#G=qD=63U
%HjO$-hM=-H\]XohcW_o[>6Yl;kR[BP.)**s=t18J='pD:mGu$2mT`T\6YY^,nuki^HG.(_^!&Y;[e6>=qI)XUFkD:Y/,@EJSYh'O
%o^n&hrYYFnp2a]1h63c";?]>_[E.p0^'bFWhnD7![XEN)`j%:sBr0^('tuSl@+4DAmcuN!8'2-1lh+<)<`\kQm18(DCLhTqYs034
%bgf5@oBZ3]C\[1M)q5KS?S/Vs,M&F;#GoI+]W[ZK9mdKY/,?ePo@:1FAE#e#q>f?m(SD@%"i0q8Hb%J[db/F/]mZ"#6;[**&%T@I
%jMTp$SJN*q=.+D1enW_Tf0+#9#.qL<OHr)ncEcgI\U1)"nESKYr5+AnQe?lYkUd#(PQ?O\[]^.mV+BC2ZY]6l2$"cckf\mdI.$WZ
%EDmsW)f%,#6)i:uhrUHe3R`9on#o!'fulT*gGAkGgY:W=ZIKRU4oVMD0?`OHj':nI`**5I<^d\r;=Dk\IPYc.Crij4(!F=]D;d2E
%NEs6I/'#*LQTMb,r5.up"num0pcT2m#`P&Ch$IuV#=9c_i4McKeMCgD`6`0eEMJ^Z^\d7:GP*M2nf2pYd4SU*B;:iSK'NW$>Q&TG
%ao^_EgW_9'V>Eu*s21BrmHe@pn+#84ml%K4k>od+K:;W3d5"DYeI$j+[0&C<^3!_kc&_?I+89A]CN%<"[64<qaKs7p\Zkkks.4<7
%n9T`QEg4P66XdTnIei+7-9eGN^$FoPUL!NS15KI-`XJ+M]Hj-6c$IfB$^6ecW3eJ@AkqEt_J9\Dh8cGe0F,VdOluT)\fF"aW68+r
%HHJdhIL;]HFRd=^)[gjcJ,aBEZr"ERPi[-/CUZdLL7)Y#cnd&QGB0\5<)3U&=mZ>q]FGTti+u3YM*uZin_IP3P>"?W$/'aRdBH=#
%`&FIYn=de-Vd<5B/R.i:'h+UAN;$/JJPV*K4!IZA4oAekr\3CDU[J^nmHjT)FsBd:dYdb4M)]I:9jCt,kNF+*B$A4Wq:jCobh*<X
%Tte0SCRb*KoUmN^/cK_>_q[.6\VUhsWb8sRI\7W<,gHb_g@_@$>ogDt9^/-_VgZI*Brt[s8UDd8!>M$m97t3'%57,$(01%V\o1bK
%Af>C4E""/$FSMk=W?O6U7Qs!Y%`LokF`eY(>%um27PJ2:^2IJKSVAbmbgh)Tm/XkF*gTuDSVG'<htFV%FF9U>l/C[4e/5dE*KOFB
%6p0@GYh2TQ1^dEdZjD4kR@cAD0\:?o2SN']A[ZBAWD.2H6Z^RpTbr:T%Ski7rZ/"R)emQ=YtNhE)a&8Ak<e(Ug4;/j9;Q7SZud/5
%F_k24/E7nI\$QNIa(60T;0,f7CCE3;H]F,J]6;nK*%HTkE"!`AF_S7^aKU(1g]RKDI@;JkBjq62%^g"I`iJBNYeGiFAZc4GOdl5^
%?cVRtgI]#kL!>%5YtOs%AX8?Tp[,>c)(rCq?)H1:i.T5<k,(!<\(oGS2,-=`O+(fiU!9\[=<O4:pG<]%olY/SHT7+b)emVp@r%*Z
%4mLjoY^%t%\K7IH'MBZ<:E,n+$foC(TZi(kE!:7k!Mec]/;WNtj<c+4iR=r-On<,bMHblJ1a)nT"2"g@'Slm]!B".UPGo4$&qL$M
%Oju,g@1\uH?7Z)H#6_Ea%?jF)PLg>u/%9YhG,R,<M=3//_LN,I#er3%rK<ip/aNbW_R=E)#>eC_<J/P;I&m=hl3O]lJD^p__ndqp
%D(a:b[:cWXW@GYf9?7fO'/Y6>6@(>oY5sEO`dk+e&.5)$7=4"p?a,?%@$sMpHa$;+R\L\YM[-%pg,LCO3/s'W%tA"*6Orml0tP1>
%&/%f\`*m+i=B0O`7rBKNjlqS<0\`sGQr7NE6Lb)Y4b=I$Pn:e;ZmIipf$q+2_:B5/@$+s"`jPpgB5'F;eq@VrR_#_/+N/4hJ;A<"
%=X+[i@R77dS)WaGg<teq*T=h2#->\;<JN?aF&d:s:mn2P7a[t-L*h;J]99m:.G!]"J8R8dFc[*Mr34gt4WGH_6mrSMM7:D.3cR=3
%i%h#4JfG&ME"@h[.IC$<V[2,[iWCn>4b,@#WdljkW6[t_D/ugTA3GK#FH+o$AHkZ<!b2prE'1P!80k^%:^.;f*$7&([%e;pJU/Iu
%o5TM:d=<>f>G)B:OB)]BT=L]b)N(iYX,0W7cq:i6R"@:O-HS:j8AgQ1on3QZRIEWMYtl%#>XrdCJB9`YQO+uT<m$PY_B2b@\\,[&
%Rrmp1GeRr<Qln4C@N/G1(aA'96Y%5,%U!&_J793Oga/\W7m,:0eDapH(5Qo?n:P]bb6X(i_dMc*,/Z\$^p9'_&11OW`(f$l>q$Q_
%!6(7>3FT1c587n?m61kIVIcDOjP[$3<)ljH#`tA6Jl&9bE8bNg:ui11q64Z>M)>eLRj#_0Am@b*7bj+"h\=4WI>9b9:rOZ&$*mDh
%nrZes=4\6WL\;h#+)<jM+Yk"AcfWe&'n':EQ\o`")50?*pnTm"5c,9I17J<!17+CWPR22h4Ep9F%h0EpM.`JW205E&T2Z(q#FL"V
%oO[KrbeTXqkTG7D$\Vu^EF]eTGVB/uWAGgV&eZIdK3/-`DM@\(I75>Fb<-6c77q+e2FPm-1/ocKD!9$mWMUj>=<CBK:_2Opogu`X
%?3g,O?$+O1al`a$REU9ah3ksg5cMu+Hr*QYSQ.0b64BO0ZKd0JR&iB6Od5uY=ua)GRu_,+S!Z546>N6pK/.<U+*H(B!ZfICJC6tB
%@M*V/9ju8)n#iG\RBLlC&HG[1V+!Bh4,IW[.*si(`@dI^<pD3k$^FeJ$]@FIKe`o*B+]lKp`<MEPZ7=</5_mX!R30d-kT;/p2)98
%=M68K./$e-Om9$3q!e>//^j;t5Wt*L9p"ee5!dA#&P:4Z.9P!**6%PYX*%^5M4d=595"dufUY):5L1"#24rutX)J_U]?H.goEjJ-
%dIi_.,k_CLY*(c5C_.A=Wp0V1\m4;7QKTHqLaEED(R6s$)ch]Q*%\EuKqW)J$ne;$@*R#![";<g1HU8L2W"\<&UOacYSJ\I`h78>
%U5-KG+<STXW_$)0-q,_KeWlON"B_O01%.9p5Zh&GX@a\a'\XnL/S%k_/pjn%==h(".(pSCLn0Wp@*)10L,?fm@=a90@3FGR,=m$0
%im^5&Rt.Nbl76b?V'NCF/$4Ye3nDihOHDk0"#l$h!K1@(%'g`'cnH2'6SU5F8cqk*6;O9]&;<D,!S_.Q_P,?M;$6VL:Ge2-7UX#S
%:SXm4Mrt7uc1d?JfYUNu!E'IR),Q3,"V;S*$h7nkacTV*)0ZQD-5>2M1EbU4]OtcNR)1m)13&Ckd.4JRBdn_?Q1dN1cf:.8;+cuF
%OePK[?0`!N0JWio5I$=Wl4rV!YafEcq6kp'SYcT5M'U`Np=,Ttg^96698a&Z[5fQY!0"HPZ;B81cm!+KG'l#4E;;Yg\r6OqQhQO5
%.q81M&lEG;"X,<o[[8o!*$VB_j+ND?QWtFc7?CatNMD+m"?D9*_)n;(hdg/sg^:2%c4L19D(%?p(!jd,A4<Gd\;!mGg#f/'"&Uf+
%&FpAB]:a,dW[![pXIEUsa9<uWKnhFII2-G#P<Oe6JfR\MU(emQLg_dAjXZ)O)O_jqTETrVCfg@B?bkAC`KCGW6Q6#i0P7I?)Wdd3
%Bs-eOP_^Rbe&FeEi5RhDaDBUpd0qc[_?::,oF*,]73/KDV3JNZ-[(ggY.!IA,Lo'>O_BZ_!>uT+`<mctFp'`e=;Ztd%%)^CZ`:)U
%j\A0-M4"1KZB\])WLRaMZl6OYSS.;2*:+eQ=><W%!_87FUU/WIZ.Q#sepC^W&0E&V"p%_P5U^aIl0(c,h];bA:01'nV$90<5%$Bs
%>'1'8Fs;B#6i;IFPpf#IA/1q5`J0NVkR\ka7\s:U3)D0"bEXL+/BZ=8^l0&5Nr:q:`mTCEC)0G2$a&]g(fee,E?O+[Ci)1;'?CN1
%r=B.$GF1F!;\Sp+Tb:A%Bj?M39A2$:Y_7-6;C7ZdM8_$0;&`K;/"b>:.ks<BL-[_o!I@Xj;\-QMU:?u`VSp,LV:8gQb!(.3=Ch]3
%7DoaP?c6B#5^q:@aDZfN)ckdVD(2Y-gW/M&&:^#uP+!-i0NdZs*!f\D7?g#>6?MD<U4MqL2iPjT>`%'"luL'm;5[p_7@lpFa>Gj&
%9upCI.Sl"Dn<j^6PrNg&eVbb5=%/_l.JftR&\l'fPr7[3eAZ6I67!"ZdU>Nga+:?8#b<R6T-9?>H\Ys^J8LE<j=<$&EQf'!\e7N&
%.pE&\A$LYg(Iiq7#W8g(UM#DW:)?p%p]EU]@;.U84gL-:e_jPiV6""s8rLI^8j&>I'uNkR?%=6DJLs%mWX@L^(-;(7CWc4BnPQL#
%&uVc`^0t<H(;?VMpJBC[GbIs\\:UO?jrr:`\qdeiYbij2MOK8R8kUU!\=lTB(3;^?kU7MpW)CLW;:"B5:sX:f,h*3,h\51MR&?UK
%LgSnGPDEtJ4.Ko<*@Q9N<W626k")LR,1tG/R*;L#Z<Od$_PD0J9f*:3HO@NT!FQd<60.2=bB6`?@.]qM'ud'_RL"@'$K9PYW`[(A
%WQfdD1.t"V)Mkm<e/F2^CI.0g^CI*5\029MSQ&Z79=jO+G*TSK.BA/ScpsRiWuBui7jXRg7`6s'je.]([?t`UU0`/]B@siZ)IiB&
%#UeIr<Dck]R?'CZkj8?k)_nMant^OsNDTG)7N0r<kQk_L&'@u^_"A=76XtSd$gNH"%q%FR>WNka3?b-F[f;GQ+?;gjmN[%7e\tmJ
%q5?Ub1(2d3i395^.AI"s8g9KM;(,-f%a?lhF1TYG#(ppo8i0UlMW9E5W<at/iCST0*4OI<OeWa:C")-]`A5j`W%&'^G%G,ilp&Ek
%Mctl+$5%iiqSG11.Um%;<bQK"X8lR`FWkp?G[s,.-gi'Z^*3j?<b=!'*L>>>1(cQY')&?inem`ekW2\<d"W_<#M8Udr'ii><E_dc
%NSHA!Qp]((*Mn0g,&^%u@tB28(6Se5!hYXL^<`0uN**GT)c]m<'l]-QhUj?*Di!-#GD,)[p<SmeO.(UC^+Cil5X!+3Y3IE?6d&:>
%Sk(=Qp5(Pj`K2/;&Nm=jkePDQK2#i8\Z.;q2V<TOjdY6lF]Cp_"F]Cp6:&CJQE)Ng!Ca'+-p2]^il/`-5*#1jn_E%TP<Xa)[M)hm
%8iQ9f9,Vkc1t%6]_%Yiq3tSfH<`['i*DqiJAi)O9,K(mL`&A+e_ajbqGO-N[=X9*V`l>P"gM)l,Ubb^G#@2F\\cC](ABs[)!Lm@A
%,P@>cH$fgKm!pnmoKnFfNsoo%.f.;nofP8/66@\(,`sA9*8jFoYWd+c?Q9l`ObW"[,o]YC"RN_Ie=eb"ZpFc6r0=GCj!blsHGI6$
%ETp"[*:S9Q-UO577(U:M?<3YG-%^9m,#m!YjjLDIW$VQukc>Gk.RFm65_9O"?k_a_kXqi^?K%$--`XM25%["B#Jrn2_P7@`#u$\V
%<EF2b_0RF`C?47eFah,aK%/$3qb3&$ZBS\QT!@@S()Bj;0_s5?%AjV`Lhl?bje"8OW-qp'#:mhQH)U9VUBa$%21)Rq+N&uWA"#S`
%pLfF,C`hF0Tuqur+SlYq"G3YYN?G5?f*oO=YmhkX*8;1Eb41E6X;TV0_Rcu],-2d9,f7-4N?YGCgFU4aYmhqV*8<<e]!75>WZ9>I
%_Q%Sb,cVg47)HNTN?kSEf1a&m5@Z*=qk#R-Y^Kbd$1#ShQ`+puK8Jm524:[hCnliQk9nJ#C*2&HU<7IM-UEo?`Y2cf>k<e%a#0NG
%#3)(J=?3f%7?uo%;+0@t%4PaBnOtB@?SRNhWZ0EW+s%ZSTH`M<f;'Un+4mG8GnS`1U<9_L.hZQ99e34`f=3$0)V;VGJK<@X,$!PC
%RolK1r.L2dmGjX<V!>oVZp_B^@qnlk\Af:5ZSB]V;5rRn>ZCN39J5TQVU7hu79m/l.eafe<$'N\U:LGc0.`0"Ibd6!0p[68lUt#*
%A8:d@9"02V_JVGo?%V0;9I$Mg<J``!5VGB7Tm9uK0$mIh.6]5XXUq)n&KsaY2HD5V=`f\NJAHkAPh8EE)mW(qkFikOLrYl&6*%PD
%@]d9t&q:6'/@PH":t#U(6mlD)!2AJTSfa-',$H;V7OUF"&p'g7b]FR_M:%_24_7jVZ%;(mVlFu@cI%]E-n<jq'e-VTfLi`O1papD
%YAP4?f2:_^TYri=WiG&<F!OT=QcK7S5S6d?W,:Y,;\hS$:.VTB7bm<eD-6)-"cYOnUC\?#MXR1QD1dX,N9ru,X<@dFj+&-#H.[$8
%R]D*9fb0KhV;da'e/`fs7Iu]26;1?Q!qi^,0SqRjJ\rDbJ-k!hL_Qe*b6TL.X5['C!(B:W2C!>Z:$.Tm;9ig5oA\C/f8^!V9*DWa
%F'/7'N5[1<H5JQo2uIO18&6[N"DFOH<$d9WUDufd[3S_:KA7k?cW.\r:T;;M/M#Fi0T(W2'D+l/N5<u;/C%:B<U].\%\Kmj"Ha'A
%+uF/N<Pq5GH37nE@PG;hkIn$--f+9d#ahJulsi/5V0FtYV%?]sWqML'gAmZl:^WHt<(7-Y'^6TVj@Q"#`U5-q^uqq'50+"^VJrTh
%r<+U<$=@ik!O$#b$.28QR18hK58$6;JW5[#THE$!5nb.O'8"SPQ"9u:6C=OEDH'HBQ9%t9?jVdR>/`egS)RdS[h5bg$:/QTO=a5e
%TmuuEhEpiG)PPkT4u.^$UUs6slRLMQ"?n%BP&TJrX*XiVKbBmaR_$onST*:>Q8hN[="3Y;j,\ji6]EEVKR-]SFbn)#G(fi%<q,?#
%QmYs*,Uh@^-Po.K_TbY&+O$^P.FP3M4iG4B6lF?7Fkrm4r*'EQPM9X3Ts7"P6#X(t0-c"knaU3(gTAP/d+m`2n\\RN]!ug04U`:\
%I5X[#A1Y1:-s2aVq7bg+)a;/r>[=,4-3,cX<]PSq)U\$glcP'SJ`7)$=UJ([8YRr\Qc[;NX2tAY#,\^ghCunS*\dM/")+.gkeuBj
%=+UsMRkcq?YeT\i".Hj?gNhLfZRBXU>S_Qd_,9I8O&Z/lNQ(<iKSqK8oSl'B5j/5nnJD6UB-')fM(I:GdD[Vs%R%A(j*U'K-(ah/
%-jCcs^9T!bhTKd@][rf!o[o\HP/1*c@X)IWIfd(g,-"gUD&M[oW64)!\jcdK7-8rs@%ipJ>^0=ZY)2<HUK>R5VLW_KJ&0LcE47EA
%o7g!^pf9c^n=ot?!*@D>U<jFA^9lV8kGrXo/U)!X=3<I:4`sti%U!<t['aqD'JD[,S&)-sHrC\P8nEP%JX0QN0U2H`^]\O\(@(1t
%$c@_H@Eu1*</2rh$KFTS8D#0`+jm)d_GL0pJD4NR+@]!PY0293,uqMlR$*qe'=_n=%3=f:'&ok"`2q=-%tG(.I,V=L420oJL9;^M
%4;FiU\)$-q+b<>pMrAbR_=@G"cKEQB_cu"_J_T$M]GS\U1ekO;>8<A8-V3u4MW]cXR!OG=BF(=]7mh;i;-,A?])86n-jnfm<EH,I
%-!L-mE8)M`fr-8'9gn_U$.%O&i97N+X)oK(Cp>*6p,@"7LQ[;2QM<p(*hA4GA4duXW[]&M;r't_0`Gp1)okdH"A=2D-*2b/=u6:_
%Pp(VFb/ko[cVZ!7kU0C)X*hRG/GG"FDL<:],q>ji%KQcmJ(kOGH>'V\F<?r]c:rF2NMjI;("Wd'#_<YCd@939Q-92r_G\EUk(kSo
%kuTX+`[C8enEBl1D](`<TH$HS*0IFl(lds`UHZ>#CT1f'5%R%Y>=+=r_o+6_pJ0@RaiBe$Vk^71+h_;("CISb)u[2s6Tn,VT\2_K
%"<M:*$7\(&`/B"jc2uWkmW=mT)Bbd2)<t6_l0OuA(^;&A=F;Y/nF6sWro%c75#!%nCD%,nn0qQGN=%ZVF`hi3`j%jjcBi4]1K?_?
%bu*nPKK_49dCmIFVIlkK-%4h214VR!*cuC_LBrd]RljF/3tlf$LC$iITZjb0OS)7?#mMQ/e`:_#$?p57ZN@6UhD\B(UCA(?[UhTC
%f<PqAYaE=.`A]>s#g3WT:q-jI3FBHtmVnKGB%Ri(SgId<Os)5,\"*3QKm1PqrpanI6=![uSa3"d;Jp@Y09MG`3q/8Z3fu*Z4OoYr
%+#D-Di_!l#G1kDOn_,lgXfLrZrkWO/Mf6_.FrZd-j;C(&cOPAS_@WhGXhp!jiO3,j*gs@3]"I,Cb12K5TVjn7cO_C&;k[@m_r%mD
%K-mOpoE`;K[d<Z@N!F:Ng(kV7h$C/[)oXKm;\W;7Ck"[.H_H'D9o4/B2^Qr`1XkgoBE&*P)ar.OWG#+V69TufoHN9rcD#G;&j^/f
%@i)$k0hItlZ,K(G$-U1)s2#btiof5;;W-b<I),6diZ,rMktE-A5,9l!Hjg+B0_lH)IuJEp`:-4P_ZXW+lM(noV4okGLD2Lb'GTE>
%A1>nbpoQo].IC42R9*AL?q!gW0fK2ik@"Do;'YJr6(o<2>6=<iaOBIPa?iGIBniaQLTr(`NgTZ4^\&fu;aonZW[P5b(d:Zbfph8!
%0'+7M!"4HU;_BlE/"Wj,Wb;JkVDqM>a&gC58kA_$B%mWUHsI]jf$@`'WYZ"N5l.[aP7'.[!E/G;J=Rh&TLspRn7g#R2T&ctQHGsg
%TS0cV,K4)kJH#(/63p28*oD=#dupeO['!#$1I=aOdb*0p\QC\rKiWGAAEYK_"@6RdL)K4->h14"kXl>g<5>0'9TB#Xh"E(XIo#1I
%Yq5G(iuaFpaAe!E4HneEfuaie+GRF_HVC7W+]eiR>8>c*MrAW`+DSerg->L+!+"((Zn\@E(U\@V2S4JkQ%THR$d#B)_GNl2X%Qa:
%kZIr(J72p_kVQ;5ZT9Vn>h)jB?HS5#@[jMpi3if_AI8+>KT@MtYT.f=b'f*&CrJs3DF=R%E$[T<MJL/OX0>Mc]Y._klA4&VJAqN8
%Dqu_7L"nn5b%-2\!gItlr=ud#UUJoW[OG[E:MK/LMinern6;'uLoYi2)d2"$Yj94,!gf+@CoL6MFu^F\Y"P2VfEku?!WSOn-bPOo
%+c52pF+jhG\Kp$$>O0;Q@'R6-1#/AV^\nhUD(_T=g%ofSc^LnD$-On;N$mXR1/=0@*"G5ERlAQEekP"Ud;[lGQ[:GgiX"N8>o4^%
%$=<c-,9[1P1$p^.C+=iX;&bri]SS+GY+&o-?,#;&ei;IoDi>WAGO]6E0HsA'^aZ[h3[oaADXJUg^=PUKXm_r)3lR&\B,&%L.KcM!
%N]degQ67ur$4u'1og8flblka(TQu^A6T;Tc<@Q:HnQa[F_T;`H7ijM_Gc!?Q@n%!Z7*0^F&:0@=8iU[JQcI<G*5)Y`2E[b-1L@n1
%98,+qT"9)t&?5hZ//F#?*a49rj,\j)aMiACJ1s[^.@DB*$`us'2i1XX*0p3?O^M"?cju1)%2EICHcl,6:;_G:30l&&eV1'<nSd+R
%KVtB(#SmO):j!rfnKL489.k54Q59#)/";X'#;Gbb9SS_CelDMqFbB/4nQMk!/!M/KJoUY,+6i^r!C2&A#YgTa$FFPL=bR^aX<K)U
%Fe4NJ%*f$S_R4[GL@P[uQ7NE,VD(Q#DfK()=E7H@F`S>lNIT]0L^l*.=^$qN6t\B4OEaB_`aBDco>4EnAQVdU+eR=n%OAd<JX>RG
%MVIDc.cOk$>*ghGmJZ(+Au-n5j$W&,@J"fr_i8ZPP3CScCMjj]ccMnd^O*bQkcDY:_F&:o;ndX"E,1>=20EH53FNQ'lbed8cdjfB
%C(0l:@Q.)@6pA/Aaps8!UiOSVgk:QW0S$aG*!CF"a#1JHQjQu>l:MgdKo.o8.0^2F)F.+Ziq$$#6sSqr%tNTEeStq%d?/6s\iOZt
%>^#Sa[)5jRG\G99ii$O!l;Un.aGAB_Kh<6=5Q"(I>T>L_I$f#DcX&%s;"i3FZ]P!C3r?iH<:n)[6FB1`_K]<_d^Io(s'CV\Bu-0*
%8VuW1ChJ0kNrmW^!4joKcgE!:bM,DRiG"rmSM/]#2m#1gip3K@YW:)d-1,b5L>@[J##tA3X/rH<$HiHZIA;jVch@F=j25N/8^XN*
%,69*\c&p3pcnkmkd,?FYT,NJr0mpR<#W2p7iVQS0DneqqGfD1=*a_@np5_EF6;S_OG75qaWb<uIZbAhg,2Z3U7kOCg!2^k#KP;4F
%4b\+Fer(t]l)K.2.-8DuK6IkPGSYtFcuf<G[k6Y]=%u,8ZC1]6=^^llZ24PTF,J7VlB+e\<JF7I=.sNQI8+igK$JD?KU&P'Q\I%_
%s7!K,+-HW%G6_W;j=_aVTHFF&8?A8_/lnXK-p77A9;pkJ_`&c!eBM#CQ73g'2AM-InYgQ:bA=5/!k/W5AVF!QiZTKWnLgTT<NC0e
%][874=tSa!6,XKSKk?+>A6!5OlrEQccMYg((5eU\nOGn/gSjqfLCj&&MeQcY]eb=2aCSV!/'nRnjC9$F\2+uj_ac+YR$&7q:-qV0
%;E9T\dE5cb?+oAS@/Sspi\`R91uh(I,*L's&%XlL5nFrp\eU+G/ZC7c-AoNld&P-gQ)s?5GT`"c5/3aph5#43Qo:C"'c^6HgA%Ec
%Zu)K+fN@u2P/?:P]NTC*dm0?VcDrhBGd#]rlgNAsACNlR8JsQYq\Z%[d'GDe()p\*@Z4mi\4jlNEKlQgWnO2f)]C(%F;t\3,Tt.S
%:ho6"AobTEn%T_Y-?YHN(>n.1FNW]aXUKUee/T$sgRS,G2%PR!?jg#Y0[Qc=ehf7Q]4(3a.4iC$[ao;`-QsWn64=;4'WN(?K.tEO
%bd5/:MuZaXm"WVtn3n*t:psQgbZpHih-u+$!.bq1B^Nq7XIeq/A2Q6RH`au"O8*$+TaYNc_5F"=9`Ql*T8`=UU=_XpM5Z':A.2(@
%8mqFKm4i^)QHDL)n;#3\V592S_)r1[[N&JEj2gf4Deh-V/1TPFDQ@/N<itokY3hDHcNuCPi#O-b!=!t0U_Pc-$[KP^E:"[fon1M?
%',n(bL9AD@d0bI3!<[Hh8^oI,JAHp`@*u#d\/lj$3fru*lS5ZgoN@+e`T(dh3arOE!$K</A^L0f/5m@VI32t,4>0T%8:daW?!WL*
%"%1&Z;LE2=B@Kb2JHr&O,K5[HA):JnBUt#P:PU^<AB-i*#W#<k\oPANN0*8`d`gR:YS!H.LMRqY_qS.FC5tKl9l,jc95MN,_+C-K
%V..Ag<u%J@*Qg&T2HVdu:Q-n/r=eX"3GtXOL^Yr;L<[9/NkT!r7g_1#JIkX;`r.*E]6nupoSj0>**bKE7A>Vj!(b;\&7[g/-)M.D
%2*r+DVPn-)CWb&A06XklDMJ2Mo`<P&RfIOkDA\`Ja7g%WK1$1`RQ7)`#F$(ll31SBGGoU']%-n$j'<^5I#P5P>f0N-*69I;!HZ.\
%=]-.P71CHT9pNjOP(N!(,#oH@s!a@6b)N#:<(\t;';R+'M#Jj.;S%LQ+]hq%T-7<Qs"bon48Ug%M]E3O>PdhFKF8gu%-^+MT-@TX
%s&8!:oD]*u`qB3H&uKa^P/cH^V/X3M;5-0YAJY\,f9eGtl^CH9VQ8"<-Qt$LE"lb?WtrFto=Rm'd?Oe*K*$$4V<;R8R&3i$L?2mJ
%B(qOQZIjFZJaVPM\4FP%FM-gpbo$Xikr+!8VLn9CoSu>Qi\_O?Qb;$A_/#o`'2saT-GGM1b[\R*,mpsid.iDK7]=#[`I+;9`K]FS
%#JEXbipg:TehBI^(a"(`1<k\U`K2-I(OX_e6P5<^\Y5$$BI'bD45JC'GlB?0E;XBL?5,3F28a`pAk/<EY1i3E>)HJ0W!kP(R8I)4
%cikdV2.hXoD@!.ML6Hg]F!h*hB66)f-81&$<O)^8fB"JJGOf?VF;JHY1dYLT$Nefd9oSN(LjIKSM_t1qE:6Jsd;-=\(cWa<^Gu=P
%Xl.,*=u]AO[u$6gg]K<+XBc];CDE#])!n"K'+AppO"6S@YbNQ$m(m1]1iQkuL,)-c;%93c10rOATgM5>[+.$$1q"WXOMq9aflSNt
%(O`FdPgAC]D'Qk_ii6f_C$JU7TW.pH=;#*=i]dOh"9YE*WNh0q)+-CNE:R>Fia)m<T#.uE:5[f1l,&e/-WWVo14.9+bT<B?@3Z9N
%s030fSU`ADhCu.U+:W)Tr:*-j#Z.>8L&lX]%E79$<I2VT$:M_6&LG5+%7MMEUt*B-7FV>V7hK[?7%a8LSZlqRM"h!)2]'r&iJ0-N
%GkD8PUi&/l\IgSU,%eePoT8DJ=(9E!_SP`YV;bsN\0_r3<C9d*lk`:.@;rS'(8h75M3N]Jl&(toVAo@:HCF_G;YZ8S"FN((`A=Tu
%JWF82Xd$t,8b`(X/<jT\e`/'DdiI6u<E3865(1Sc6VP\36cif:d;:PR$Lsts2g=nuWi7np;,80?W48iDKj?\j8;PIQW#CJ*:rsN%
%b-/l+=(?d1o5WUK8dOB&R67uIRTj'H*G+83\B&QtDtrlKc^eNB#Td&GK<$aC,0':b\g&S\m+H.2>ZVBpM+`bqHQb.iiPKrt/fb7n
%n3&-MZQh!`G:-t$al?MWj/a&kG?7gj;<dP)Y^;[VSnWB3rGk5q%&h_`MrbQ76'Qa3QcI9,%N\h2VlC^m!(TF79:'=<3kJrnQ#9'O
%n(!;Y&h)?@$iu0%c6uOZ\O[T5bm_"erpd/rnF@O\8I7.^cBPV:`gnXA0o\9LItqO_9e\k2Pr)[@%Zi]EgKmi2>@A40@O4#RaiFYG
%Qe7><d56MRX>T4%TtI"bJW)-D;R/[Y-Q_hLZ$9t5</_\&8DCs/9T!b]S"q3OmOI+;aE7r7-9D2Y<`*7>(rsPSfqGH-3b->K$N^W5
%#nB$jOA&UE7/\iBfdF+4J?u=RRZRV(<+O18OeJu0_$nN`-<4$oFi,kY\3GX0C:Yl#QC*<"ej109KW[(9oi?H^%T_1>+l@m?Y,NO"
%Hr\_j_m7!JnT5W^%"kbsOUlqtlPSI"N.r%O"82t/W9rR.(*Y(JX2T7fYF_F78DVWBGNC\g.!))3\rGcb@?r5g`e-"_'YO*qOo_?e
%?G?#E2biD"Ts++617hG)#pWlQ([>A1]PgMUSu'j:;B.lb@K(=D&<^M>\2e/2VlGbfY,*oK9@@7sM&;JN#KRWq-u9;d/:nLUX'd%g
%2>0j^U2X/U]KE,629/e,>u0WYanGgI-8[Iu0sNG#K'JJ^MPa-_Bm=_R;/FQeQPZKpUQJg;;@*qPnjdu>9V'K'4ZdI327q-BHiVhS
%CpCRU8!5]rO3f^G7TRj"'m@tJ#"=\FNV8M\&LGTojU`*J'U<@!f9qk8ge1AnOlrD%N5qMP-\G9IW0K-C+Z!)d0udXX!Cmtn^)/9\
%B5_K,_CsOr41oZ.F#!b!VH5nZVf>tbd@'*AjBKJ2*CJGHG17JH1qX!h!OI4frIi8!nEdl!5)EjJD6WQmMD@M?!%W`9dVG@`?FZBU
%678+d_h[ANAr=o1_h_u-eq510W)Lq!lB1Ck*os.TEqnA1&"+b#?HnUk_%je(ShfGN`ZU>"Cd"k`ad)*#"DtiuE$F".L,%D.O:C1s
%e9RbWW[r](>,\Y@m*VQ`[cI*L7W;%1N[gf9L0TP_%Ctg<V'IEfc*1KRAogcc\&M&MVQ;OB:dL5]hDTD;;YgtR_ZrsH='B+4*Ogb<
%d;=XtN^E*+bR`k]&Y`f;CToc:]3-H<[6hhbUHM>%iY8$on)H2Z$(u+Qlf)$snG\m&PjHTI;`61K+C[4OU&>2kXKo6t$\3I5EIA1o
%VD=PQ>!0lVH)__R@l#hfrreVX5q!MteH%'#dHFa<Mf9tc#q4?-UeQFrFE<@&Uqd0_ne=,mC1L8A!K/O9J!Fl*"p`&ci:U_hNQ\,e
%N[rCk71HcRlto7?TV,B[Iup.&ZfKOsP\K,C8$'Vl!k"dUP<@\+5mbIk8lKrp<<^5E_kE&[1WN>i%Z^UW&fj`2:"Z7'6@EtGJ4Ku,
%QX^Y&9/7D0)GJ.=$53at$7fb$D)5$+i>W;dcQ84N-a>?n?R,]?D0OYM`oMGNPJjOV6%d9GL#<Vq$e8,67orfYbrQh-g;0FA!^/0;
%AV?QVdh%Y-Jc6#83L2EC:i4*HGcGE13r-oU%fG8I)NZTRW`-\;E>4OVFAUoDH=HXr;'MuX8k^Ct6Dlt[1)AbcJ2.OLd9ZG^Y]F0H
%1p!RlHD58UP;IusBZ*ir#U,'u9M*:Z>1D3sPWju6CJ8jlMiYlh*bi/+jjJ_jnGuqQ@.d>k=""Fd:IfHD'L`Q))/@o&$\T!T3qg@U
%:GH&YD50-0J6?VZi@nQR!h?g4M+cXFZr#T0e[#>(*:K.P1ql(4%qVH?LLrb+-&+rIH$V+ZrWIu7e%lrgZ(co4-5aJ?PJQ@SL,qda
%+udtF8WU^9cf6dki?>j/G0:;:%D3e'S"kai*dE5G]jYGg:n//8NL1Ft<.T;<c$`_PEgGX2Ob"(md<0_&R9X+92=Tl7*[WWL3&1uM
%H4h:_^1O),F8.2$/-a4Y]&Y9!!p-<HMuG*l4k+pDeor=@7)VYn9Q=gGA[1ZT;(^![.1`i52a0N:g;42!+0n`'0V+Ff&#gKujS!8M
%."k'EBUa#J7L(aQ38g4KNVptq#7/hf]N)cJ)+(^_aQ.p=n6CrjI#q;q`bAVB+B$8ck`Clq\,=V-CadkF]1SX1/)%jUD*D&R.T:tf
%2=;2$+As[&V'-FTAs1MpAKX1*]UYk&(aGW79!U3U&r_T>Om6M2&OSH2/4($d0=m5i[ar>V@2gCs/>i:X9Y#m1X[RjIA9Tk.'_*$f
%<@^Cm7VGPoUXW5[:caIrM$$2TP0q@i:i;"=K&n9!:6u4&/;uJ92L+*B>,$Z%XN@GsRu>,lHm2R4ngKY2+U9_m&YMPS`5fr;e<O`E
%baL[X=@,Nja:P/EUtMLa*QtbAR\J;;gtLo,q)HCQJWQpH<)o80>/UTY&aNU4mEG3*XX?J)A$ZX=geq]-paF7d7`LZ-=a%ttNKHmY
%iL&gW72\UmPJK>;Z0RE>VN\i4MobtV<$Ej9EKoD%'3h)t40F`d<bPaLOl-_/m`(ET7Hu^,N.q*>R?n,uCj&[F9IH9*;,H#@@fRUQ
%8!XOYd$R"d;jJEaA'tZVbUIk(TdZ$]RRp)uHok5k6ogNhR=QDXT,]X(X6uo7+^@#??tf@4\f$euKWr%]`2TR`%Z/$IBSWV(/O")C
%[?UJ>-%.,2Psh?bLD2:3/V^gAASn,9cMfXJ9S1FQ8MV>7T_$"2jXViQQ\tmOD.64RIRMQ2b?LdV3m&M[)k_#-Bl\MbAZTq1JolXJ
%n-DN3^B//+/-BaOMmAqWQn*arpc]6Y"=O_3(]Y8>$;?DfQ`?3UnV>%5lARV<.q&7Kb(sp'bKK@],)!'8cAR>N>Z5-h:<'Q\[^i02
%`Q9VZC5UGAbULe6G+TeD=IR9SAd?lHk&sjCF++o8cXAD2PDmFE6oeb\RI@1VG!Zu&S)H/2Uc!4d"7Wp!>L^Ni"t,1VHG8s"GS6%_
%F7SGVN8emeihRFQLn's%NC]94HJI:e=s3)EG8R@XW9U[lK3O7S`@''A&eV'GL3uR/6%&%F+@bU1@9Hr#V*kT+_iQ(6d0kbMgQ^@;
%25Nf@J,-Od6n)!2iqC62V\Vi;]VT&#qZNZe0h@4l;pI[oBXoNpM9!=PocP:*'Yb7:CKF]A/1$ApGtrVH[R*_n$V:GdN?(7U6kO._
%o_tFL;j[6%'P29?/=t_Fj\)=J=Z99"I/ZrBH%SZ(!JIY4\mg$#4I^tKCFVYk3cH6+5b_sme2fB3RZ^d,UMi#1Eg\+Z)&r6*+(,]D
%o6E\k,%-98MZb-M.iJqg(Uo;4[dn()G[SJ+GH0.K4JL_V;%]X!BN"oBLhkJ*CQrWnYnIaM3JY#`&49\lR\I;bKiuf]7-"kVY!otg
%.V0or&5KnG#Gnklm4^CQ%Cs^6Ka>aNr@uYL>8\>e:H<(houG,\Mrli>]A\NX`gd0<f-KL60>QU86j?*=Oh.:1Min:<^WNZFLL8-Q
%\_%7]bjb-c+c<'Le`.$G0G%)\pZr;O$(`B@NE+DLUi"B;14IRX@sJ(+?/B?u.#l[MH+q-1;bhMd39oc1SdHFq*7aAEFP<db@:U8]
%,%=;rbAhdlr5&^eH8Q,67n/4o!,("_2_aa"(iYi\>N'(`_"_aJ$crSn;@GLq3Re,bI-?1V:+5*8pORD6:_mbO$[!(]PS81B,"#Y<
%5q!b2/&akc:0'fo`XJI>P@Rj3lF'2H@seE:Z9$?1HEP*/q<kF^(J1hLB$52EQD;&cV`5bZEoq2i%Nh%ch"f>e4=+X*aV77'C/*ZZ
%]HFM!f5'r)GotRpCIJR'0f;9Lb!W9;BS(,f8jS<uEs/BmMoe_bcni"P<U:Rbfc^psR7fs*pC\#BP#8_H5P9_CLV/bJd[72[ac;d+
%#XrV#MK;/u:XT^`_pJPUnCA2W(1iEN_?.BE.]_^q:o'Yt6ld8,8#bDAfYJo0QI"nT23=S>cc&%ujgSA69!AI_VIccKPjVS>VJ>O&
%Ec2CCeu>\7hB%@Pnm^&-T6f-n@jFD4R7RDg)+$8E<8]H:HG"m/bd5hKN5Pa;9p]o^@:NCm#p8cNOaX#WT_<$?<<]1-=YsKWjIr"V
%mR8TGV_UW^ZoBPhPEZ)12IZfo"'6Q!6t4b55E_HnQ`621n;N90H\*qrR_eP';uO5/4BA?9]5fp-P)d%7M*C'QGTU4:jHc"dA+VTl
%2<Y2e'L^!C9m-qNQIJ@o$C-`7@Aljqpll-O)_0qf2@"-b.XVoD/Q9NqL?/DjMETf=nkKa4f\.Sb7%Kq?Q]i[+9UB:6$4#O>##gU;
%Hc.l*U3-:`'jb=\A5cZ,kaa'=##!;VJn??GG\WsdTqUTG?34@G9CO1P++T2C['+\[HQggg"s_R9@.f2I\OE@$_O$sMdVqsT?pMA5
%>Z0ND[%A8C/U@DZ33F.=,H(im'o'dNP=<C:[!4=TPlsVTg)jn5%d?*gLkF=hL7OF;aq+_]L^uGpF0n.,C)hN5%kh1.A(:-Q[Ep3S
%%rsoQgQamp'ZIu2ksc_mVcP>#%+*K+LNn*p@H-s5;.A1m-"XZc2NjZQ,c^Fb"3)U<H-J(:Pi)+&^T!InPgtm`?mT-EL?9`uLo#?K
%0ZB=sAZ>:c[+tHVe@f)4,rp,pp>/(5LO<f$0@M6cA<=0j1hf0f:r:!M#Z+q`B\9;8a+MMmA3_Tq^NZd&AjkcA?!h.(ag.`I>$j)G
%6j/.OI9CnKHSh$,[o$DscNuj"M>G^BS!c^$;C^C.=Lf!V7ca.]I4$bHiA5YdAJ[AbE7(SN0#R]sjR=-/RMiJ0P+gfl:X<BFQmF)V
%;HdBO#NFC1SS2"\XXkW5\'l)X5P\2#TBSp#4c%"tJ_?RiK`dSH4m/M<DN#pV'8$9_V</eRC*g=Mfs=?LEr:1h!]FrJb1u9,7i];+
%piRP;r:P078sLfl#*'dlY]W&/)5^e(,_eWO\.[?@G],l"&Gn-rI"b0=^Lc)!TMshe>B]Wnjr\5""--uK8(<lj/r=5f[`2`'MOBl&
%m:$oOFh1[Am3`"tN^_V9H*R1OaYmaT/:c!!XQX)kc(N%@2in[cQ3<G":!lLi7L'ooCQVI1M.fdS0i,9(#&M3025]9oZ4*UC!";RR
%M!FS80dt?J(_GB*N8Yb\NkV7/edUdTS5M.[R]/mES"XD!f+h8C_nB*B4gUQ.LeP<^4iq50BX502gPW2?=YGQL,JNR*6OQJQ6LS.a
%!ogg:l]k^4KM+8sZ<kWPMsXGd524RQFE'*W_$cmF-Dn2m$b>WDZ;sR.mPNS7;gHoTK7`@M_(9.H>4Shc?A]Rqmb`<0M_]c.)$`]N
%.=*@l7+d;DhY''r`=0?+ii+PH,7M':N$CBCFe#X<'0CoI%oFU`^tTXCJd<Q8B&`=7Am:=VAMM(X0/Yes(e<gGBI($+=cm+_DoQ$a
%INj!h9$/7rY9SC@f*9OX'0#EUiOn?Kk46OUV^T:pXH@$HjT*-R(GBCghIC:3^CW>kR#A0!o8;KA82it'QB8R0+e7d9mUe)o4r1io
%E_>tm@']D@amh\L\;oXNnLHm@I+\ns!AnLun*`1/o0+.:$H!q1kGG1L=WVN">&+NSqUid`/"A<jLii`bOulXP'^u?s<(WuSDelUP
%*TRWLpu"OY7o'.L(LBC0db`:]5dsHF>\/NZ\_Vkrl9:o)7ULMl9"<("7pr8M&2SpJJRJ^6]foJ;dt+UF5QI+-BeRttp![ZH0jXXD
%*7r3NrG`pVN+!!l.t6$dH]M6]:<53;0ZCFJ^`ufp*Vpanj2/3-ea$fZKs`^P01-nYQ4t+_VGq]Z*b56%aM>#pm<#p/;i[`3^_UG?
%Xf^_S$!V'r\j128dFsa=7PfRd+QM&)`F%>QE56/hi,%]Sr+'*1$>^S/)-)8PFtGet)WI9lV,=F67O<f19@$NTP3/=ID$s6_SA^A<
%0K_qa+j>i=Rd3E4Us*,>?)Ncs.R=1&Hs['dM!/XajuD7B-&V)BnFM7$*7;:#%^oQ#T^Yt`E'b<uV8o/.5V#K.3N^T0,9Fb))45]g
%q!dn2J<f1%)"gVA[]Ipl5n+jI?!.KJ\TYD&dLPnj[TFhkCV_:D.N(NU%?%4sk$DK2b6=`aae\)ZA')*M4HtrEe>\<"S$qTjZ<G4S
%onm;:>*a;hm:"T8-\t1PN\N/`Z&eE(?1ms[G#B]K+)=p\NC=:MR<VeI=6l'*I`M=fUU'G#CHY@fWPWGEe@[Bmgaf7a5\T2kNN[b?
%C2=)C/Y,4n;Zj_;egPAlJAet,]_<?;+Z#Ii%)+*;FS&&+NWXRj.2IG^DsPN;BJ,$IUo3%>&bauq)^D"WjQq.6_#Q)Z1hU`Y.98HZ
%;Vd*\DEtOUD@uKUhVSTq!$Z1dV(=Ue*-4:nfjJ4+7%dKgA6E[YK3Q5//IikB(3qI:_]qo)Onok<U,#1M10O<YD@1q-4&ohu,;A@L
%@IqnNB=A;-hC]C)QuSRte;Itd!,deNep;_VmXm)&2_Tn[`+6L:SXqHN<B=<qa7==cOBH^I#[>ZSOi8@j7CEf,J;H\Km<uXZ[`>r!
%V?Jsu=e1od/r&*Xh=5Q&p[9+AB7PM'1J_J[9o4:pXR9m_3q;MlaS&&DKU=E0.gDHC9htcl<?gQ"'=!9iI`JBA[Rfm+:Q+tUh3^N:
%ZhS5p^iXbIAnAat`[CkMCUkUIT+%<4i"%e,0,KiPER;@B33Di0Jb0e<FW(@M.;Nl2lT^JGTlEd;P:jLl(uO37W8Z;-DCSju<"h\p
%P0q]5)33tFk;<[U0k)W.pm?YpDeb_V+(\1lIP'+Sm$i1)0[rfVWT><F@jStq@bN&JK.N"Q%0.;hpnI=[?K]s-1M:lL'BioD4Ws6\
%'oa%7Z;Vjlk8XO]._1,1U/iqs".LMn9JF#Dq\"`Z@5?/ji?97DE(>QIo]r2%%4@Ku)UWW.J)JkY!.umZ:dAiu.3-tbm3nAp<FgJF
%,alXPnZlUL7?'8#3';r3RJ/p:-rR\p(]_aIJdlXCdlg,GT]8'L#[1JI!c8lb7XXs:lh$e%"3cJH?,4c?,b(ku!I,3c$)0KH=PnpH
%'Yo24IH&3+Bb#6Zol+MfN>\^X85J2!!tjXi3JEd;gfEr@$)%LGK#S=+lC"J7o@-mX[ulcjd<6:V8s:&BQ5jjo*gaEjiF/a><BoVV
%"#@N4<W\]AK%J,S5n3$MlOD9iEpM@E-ukd-I%04=Ie*8Y,*W`4mA$kr<dt\jjW5*BE"#2.7e&F3YtMSk:ls,p@PEP!<tnf#R=\_e
%b@R<+=3W$oKGlaeKgk1;ILZ5iia4-*9i@>j,IFuXW,kDn'ha(=,5iFRCDHMsoa5krQ;Y=/>Yu,,gM<4TjZHKLiegts,-n(cF."Uc
%JY2l%I8a7Wif?5dB@=r,9%PH*P*QZB%ha'NbuOo"MDRo_`[.C<"&:<$Y8Qra'(Nbed<=HkMu8V-g"?Ye*hELV[9T#d6b<hFhGA5(
%gCD(sfjoIG(OoX"c]Ka`jc1pqI8OG^DhYjJ&@g&8SJRjr<&.K>>>:+?cUN.EX"Brq$K+^_]@s>9gW$fW$[/>$Dm<Vf_Jobn.(\^P
%R4TK-%T:)QK6I#oe@sVgN9i7kO*&.,4=aj_(Y9J)"c55`-3f]><9`oeLFk3T/M&`+(uc.j-AWLkK"Ws&#-e!ZHGj6P%fYN^jTD&?
%[BS_/q50tr[P+PWd2J&.LkGpT%O0.C<Afa-2k)0^T'oWT&EV)feLL3!HG*.cmL#"b;+l!?)j:-shTk\'Hlr[LJPDG:(u,Sf%]J?N
%TFu,k05]Ul:^Hi'7O')h(`a9oVRR=XYXkY$S$G,XYG*dqE\#*+[E)`P3)p_!f\.n^Q,>`A[fsb2bM0K+[jaN\gu(bgic1et@L:CX
%N,5Rn5,h+8QEl3X6k)<nig?hP(Z?n61"SC^#X7\ecra\E(i6oIUe8SSfj]65k@'!.Ce(,2m3,ej4)/X9R0\;5AC//d?/H*KDAj[K
%/t&@Y4c^Rk'W7NX@>`$on2>a?0&%G&QZ`;Ya$:>+)]KE9RRV[LCa9Fq:.HZX%DW.S1HeRD&9L/U>'AITc^p=KS(9+phnj]]0a1sn
%[*:DR2-aW+WI%5fkqT$;2p_"GE1E^8<VEme`-Br>aEYfg7Pn+C30`ghKIL,QF\qWW:6n[4]/HD#L_Bjcg&lmbQ7WH9#B06ua&g:n
%;b))3+2&-;X+HSjnH?8:LtZ)dT%*p2DAD0Id8s3o\Fk[07e)q32)T<6&!n-pN$(IW+fXKL`up^[_-pj*Y@3j`Nr/D#OYoKcnq56g
%4/=mP2nYBh<XO[6C!%lnM%+VK5QJ$&QrAg`j7)ZhF';@X&_K_mi"1oT4'$'0SJ!hES8FeLH@>=HmJ?-$YSZ2&+[Fi1hE<>OZ%RVt
%K>)#rH/iic#rF2R%HGN6I-Jh=WO@g`6!u-n^-!!<%3n/Z=q44e(/n!tY&rpg?t5OA"7T9Crm>Q&/fBC<lE3>DoAY9(%%^1%B\3DV
%V6ei=(qumN#!mj@4<8H:f`#E^(-C#>/Ko`<U[?JLZUn1T]K%XB.cuUB@#:Q:(R8k[=9j`sS5jtuCq(b"!?Wr:%`B=KD`@XT\T/jd
%+P)9%=!Y!!Mq%pq><OG`RW(\bb1aG)@7hMsdS;GDkTGVtepNRR:K\U!5M7d_4]*56+o5X5MKr1rH9^(Eo#["\*eB?Snn_^1F+#m7
%N?4U`XpSgH,X]g&"@>n!dXt&L:o$Y79G#)/_\$?>Xgj+4Co4]W?=Y=8H,<!.OqAC43l7esIPIN%hN;hD-[NBmh4TR%l1\WGEt6*W
%mX[I-Q8X.rPtTU_FGg[r\*P]J+\!@+&QrQP3`_b,&HI>u,^.1HFH6%i[O;,@(Pm*mPk#rG,]61<r.AXnQnKnP0(T+&!DNOd!1+*p
%?WOL'7f>*3G9^L]r[*qa5T1jNB-gZBKGk8-mcEjBq1M7Ql*n`4__UR:2?@qj4P7(:a)'j``5P%QNZLNNfT"CS0pY95RuK:rM_)Rq
%-l82>52EpXROY*q[%#d>BCajc<r9&+NQ=(pUr-BbP"o&[MM&k%G,hf?U"VdJ,%AT=,@%^ADA9QbA)([<T5JoIcZr/MA@,7g%*10&
%#E:j!LLT>o$mc#P7`#]'X(fKT!RV]G`Xb7`Zc=J9j7mF"0t8YXEjaYnicR6m.elPE@?'W7m*9#&kPjm4?jo2hnRrt<M+B="0'GlT
%JW3KU/@gUDi[oN.q@-fGlGN"dG$nOupiQ&QR70)t>l+8PC"nQ"=8E2a0-UbsS4CBpG3]_)f/)R0^;N9,NnK9XV2$kV<t$pU!S4$q
%[h."B3<]%FVH/>0e>M@1n/.jgJM^VlH^q-iEQ(ut0lCh74<Xc5$0&.:0t6_Vg&h?Jdj`-P'R$fXK-\8>7n=@<@.enk(jj,bj`Tf/
%9;i"R!e']CK]%tN`"WjfG(4S[0/k*ERd6u&np.VjDMicNNu[\s=q1)b(B;Kr18Eb$)J8TjJ^2ZI@?2)CY<E\s^..nmGUp".2r@S4
%@\*grMF@aN=im2Zj[$(m>us-@#F^*pFNIdW%#3d>)HADYJ<TgJ/Nu7h'eTXAAQoIH]g>>aL)5.VDr_1LMPUfh>mX@RRs#PP!a=kU
%5TP)1`m-Lb1;AMZ'.rM)A"`pQ[QI;1e[,HoLoikO<25qA$TPm]WQ=jM\j81*,/bciBo^)fGt"UulE[0M@NqHh_Gl2lA%lOq[=H`L
%r&tW=n/A-Z!tH9D!p4b+TtH4X7gqmb&"IiI5cb#\kOM=KiQR\VZNbS:.Xn"TM0sP@O/)aoJ%#uCr'i:#-KDhu*s.!ngLTG+.S-G:
%,^,[<U+8!.@(UTg>ljND<L&`AY\k[udYN3NB`FI:RV[/B4);m-J2c7_9SJ_e7\3B9n1ue75SmE6#_?K/="tG!j!*n6<J/b,A4[E!
%X(n+6UGlcb.9a(BOL&mH&kES+&J-K=8a%d9=45h;je-C,Wlmii.r7nbY.A?\\-h4H`GS/0!h!d#kcsELR`uD,pp/sce\A244us:p
%AiP)&H*V]S4]Km>-C(P\]jNe($C(1[.ON+"7L9j%Y&#Bo5^d`n@As/6g3JlLL0&TThS*emdcJ"L'.d-7<b7b8pI5k>JSia%4ted9
%R>Q[iM3-\*r@Qk^kA\P??>)Zk`G@pCs%p&SO@i^I(-U;R8bLI)bL^-+NB0UPaT_IYeM__tF1'X?-<87qH3T$7Jl7iXRhu`69nDQ3
%AoN3uhL9.!qUs1NLB.CMDufR17>_)<:,,*BB&ddGK&l2[9JY"bP6$8(H'i+h9`b);C0o;(Js/>$#u7*in/DGC]]Bj\!GZ6`LCT*&
%h<H;8%SLXm4Od;+nFSk7IIM,O<1RGuMcC)WL1kRQ;N[jO)djTL];kL"4AKA/3L[lQe+]^+_oJ76TO6:VbPtPA8pW-!27^(^5r#-)
%FGPSnCTd9SJ6_:q;)lK,GI3c7Jfsei@=Y1UInh^@'Y:$\;-.cf'^"G&O"ddG5KcXJ"+VNg,qq3gTH#:*Nc[&GU6&T5g44le"3/8.
%H1=iJUO[URBYh#3Jinn.`!RW1X\rJ>/e6I$mI@:W-P\fmfrKK5:ruoU+cA\gUsu3hUA#4U2`?"E5q3cB1:DH9*eJ_(8L[7`+gHP\
%SBCq9.C6uNnN<e]"[Ulq^7r-i:W&$^YssIO-*Fl'NAsp'/u6b%YB']X:tn]85kBLj+#V1oP+a%HrjdBT\/Ln*k.lUH!;DJd17uC%
%TtNo7Id1el$#bVJ(RWI4i<2.13mm\pBHYD-i4LaZ$``sCdnd*rVVR=QP'F]rfr+tfaE_C#V/0BggJj0'LXN5NnC0'id`I3\ad]<J
%=PU78`Eh59WCl%Gig4JPN[niK482I&0Z]eP14n3(O9OZ#=$*QK"D8$UM<Q]G$1\8G`O$"o!6VT]Q&ah9e%$l1$O/&I&-KS]4<$^Z
%=:A`+OT?h0)]hU><3V#E@O^i9,q'CM6ZVst?"=i2N5:7H*NSKV97)*NGhPMkTaB;L/PCJ2[b>m'=#$&_"X:>lc]D"/&%%-0cs4M7
%!)TVWZGRAZK$hP_A\s/G>ShCe.1!=1\]YB*_>qq#4A6bZ,!@KS/CONGgaU]T8^9uX\FRse4aD*)_b5CQ,_uO=CC@-Qf[.6h2E74l
%I'?^*_;L"/_n7K0HHK'0YX3hb93SeH6Zu[hrEiks+tI`6P-J^\+WFld/F^IE]3)?D*f+E]+L6D+qWW:rLFSB3,loPA'r!7JE43k#
%*"b=cjq-RV_7@D+:-jl#BS+ZE19[uK#2"XhfCM?&%."MB]HqL4MNO+20&A?cA4:Z1egAIo&5==b4459<>[Uds*SDAU2/(2<^qrbo
%]p,/r8O8&4/t`kpO!LI<?-RV[X&oJrF7HE+Sm0VngO>hA"n%9A<H5$4'f@h$+NYrM$E9brI00^,jKGfV0WmaQ"]mTk$b(;5;@o2`
%[Md;i*uAR>n/UK'Gp\d>U^BkY!+6/.P]EaT8%b'PF,3Gu=qM#f,S_G-+b9IM%HGJM@2.?>=5YM4:f,D*GSKK<Qk@0(TBO@)JY<-X
%3)B"O.ZqM#\>"MtYfS!SXF]Q[7=?6bqF!b]@`f4F5VZ.(b01S?':[!nI[q00j36X:iftQ*Hsje\?mZZF0*lh?,?-9![r_TPFc/qg
%j&2ZB7\iK#RouN]Gm';1CaD?%bh>VMB+*'?NZPkYJG?0YA!@h$'X^KfOo;&W7aZF(BfY?F=k1i_Ql2A/V*>Q>8:BHcUO3)u-%`H1
%j_JAMH>s"kPi6(LE_46%A/'rLf6a0u$iR,?/f"Y^A20H"Og^S'-&@?`WnIR)M?+phn/(OunO[MD48@<s_PRg/cs]rl;214$[3'S@
%?f1L,aJo'HY=+9E?CD69RHWM0Rfd(52Dcru.:XQIZ1*A:RT@57BtBt870*jqYW<6QQ)kF=^XPijF6K&3!i_BS:+A633A`eMT,`bb
%&6WZeC7tVbTFIq*89Ci`n0ophMn#`:N/k>"Ah.5YaVaH3Vp5A'qQ.jk`5QZB+(A^e.L];<7PQ^DbB,2,Tr*^EArH5u(?HiUo<\^;
%:>0/W`6*iu,mC!eIM/icg9W\il$/WhbJkDe6R:*\C+G%Uf-m@[-^>BYH&"%6Mg%_!W1@U%<Zu?T1^3PZR$0nn7,5#=WIIr8q2Lgu
%0re[0Y/>j@<Mj:C-C2mdBDal8[q+9o$Ej"jds,5?UhJ_PrM$U-OiqKC&kG\J+Sk^(muS+D(/2ZL.CUeZ7=44BSq3<&/l4^[AN=\k
%mbjFU/N?QA7"Om\NF[p6&"3])//!U=%aTd+#n9E_7XP=[/uV"EP=^:m-)"Uc3(FDpC_of>S8kS\#K^ZR4h3*Kd@iZqI!?,4-(T5h
%q*h3W`DS34b!AjhlfGUrpnYWY]I;a5#e2CU\[/=T,jfBmCsMAi2X7EY[#;c)OO=<OR&W/2gWJ38A$[L3-gJJQdiPgE,0@P:[Yi\D
%7/8Ag#teQP8.;Qr=@(7:j;k-%'4?<Wl,)K=oB++:%9't(iO!BV-2$[JF:6$?G],13ffSp(@.k(&?0Tf&;Z[PZ<<*_`N"u[3h'@"H
%Hb38/n_rJhfn1dVcto\ab^)"TF$SkrMn>^8"U(<tFI<6:Znd2/m!N9B6'So_4jOC8j=N:/K\DT6X0GRN]V[j#YRge,nGjq4UD1j/
%K-:Ag\k,*[#@em0"N*/6BF-g<a9Ng4"`Q"Md.js_IcXl6o+L:o7c`<A)f!iVNPZ[;(5Si[F@?3r7^G*h=S&8q/e;/a6g'ArqEPs-
%dfq3@q^AAm'NkO9;Q$t;IL3"`Wf;+me988Ss!2jr6&KeAZ*%g/lBOTVA"3*USG1uJD%i/ABHiP4QRWdb[`^nnWD>__d?tW:T?hhb
%lt,0dokRW]q4KNU>DG?Gg,8`jVf$`7et>E5#%)>DZg^\XDk&gsk+Josfn;'=Z56(JVk<^VZ)J+e49`M8Ru(cu=u=+UJ!%p<:=b::
%`rkPRPF5D:5D?)9?SdGr021lOZaO4gWOcD@&AgJ6MsZok1.WG&MfMjjVl8DjlE0rL2/96I'tK2!Ca23T@._sM-?YBkKRbXt#!K#D
%BM6NQjj8O`DN7O&E>F'Od$))bb7.*5oEMg>(g/"o`GhHJeS;n+Z.Z6*YM*6!^j4Hq,/_>+@RbK'R*uY%P-;fAAB>_GWD.:2q@uf&
%lLZA?G%?j<CU`T8=W8C@MgK!<"UN)4niTZG%PH[[OP7.'jrUF9]6^K5ST0VB&t(<5Gl$)PLs<4S2Z%Q_p+f-0(m.N=BaZDI=8J,!
%YR_g?V?m"G06k\/pf_^Q1"K5OiY<cM+1,.-,/LmJ0*%dZ\?eSCh'XG9<7-Y]i6qgR.BT\Y0[`MlBobu:M7O6#UU!tH,;L;?TAe=]
%'9cbiWGK_5Il`'"n$E<J#:I-,a:pt[:TfV>>m3E.(:n!olesasT3\@eQaKlf."jj+b9OX$0,K!b*6"kA`09OPV\UR)IBKIaKgpRu
%;Ba=u$C\oA>Es9NI+aiX"7njOD)Z>ubB[MHiE,^IRP$-X#ro3`R0CYuPub`5)+!-^>8_B9V&>65R4`X+1c_F`H3E\VLUgAf"_eI,
%cmWI0p34[!aUHY7W&Luj'0nMS0quh6fKDEeT%#F>VtOno0s>%tE_0L9[U3,lpDKg6+Wut=l)U=t5Eus\0OWGE&1=7_iBZa10BU:7
%_gW*c2a[(&m'g<>h#Pr(["RL2PlfmE&2f[g6f$!(dW1&QZ':8NqFtOO;=o%UVi*+`^c"\>,&?b:3J"c@D`QONT\K5!2F5#"M(,%/
%^@o3hro"C\h;A7JJs;@,X65h(VXl7hW6a'c81RRn?p/Y.^_-9:mMf#ebB;`F=@pn)A@GV>nd%^q'Mfol?>sE4r0R%Y$9>qFbWU=Q
%UP&U6LHcd-kV(NUqi<C%![N/rb8?#[1I'Jr$sEJ-\nrU48)]]r7%\=E`R))AE`X^b*WIm)DPlg,&CUD?ICTe=EX,.)p[`ZO]gfZg
%PInj+p@IR[oNoiMa0HHk;I.bF?74]6A6<%EdZ_;Grb\]\4'e0(>^^<D7X>A""93=8^KK-'`2c&3lfqi8>+FkGTr*/I"q,YgY51]t
%87,>6pF0-4&f#cfB)gqpT71Wu7&Aa&<rHmQU@0=_0*8O!_\.>q_psDfE?&FtnC.$\;<Ngu#sF7qpO)3us,5dh+"L\2B:XDm_[%Cf
%:?u?i6+Yi<>+,a!p/*UK&Xb"jIH/TD@H4iqro_:`/67kl')[es\h5['=Ji%bWN5)F%0!,p_j0@]SH3JREmpAhofl!IoH4+tLHk-F
%OM5]2_s;ZnL8.]D-G,/nL_\C_)IuJRC`;gC4]Z;.L<(-HW_`'Z`^dkXm^HVb`repfVM:PH?@)giA&+MB@CnW'eK]%a55A)B@K;.X
%!W;#U07E0T5*Sd-[O>r(:=,]?!7E_0L:qG^?F;T+9&hBQkV5aGL/"8poW<$e&4ZMRO`Y]1q(KVJo[]N,6ilWeOr3V[^t-+0Vg<(?
%,t13j9_afu^@\8:pHX`QgC3kAZ(gk^VV%^ZMGolTR3>F*#LPRs$7*Cj<aYC;-[1"!UDt6JYo<%kjB.Z"?mgS*(pE>4T/)#'!i<nG
%[fkDC,!Z61qC9n7VGhb`f9a5FG9>!GjMo;`Gl/tojG?PHjb[6k4\TJ+o?_i5'WE`C6#d#oG]MCp5"aXGDqe?PjUg@h]T16HR>37*
%`MK?P7)T/6CVj9.]Y=rpn.7ht&:X,N+)^r'\,P5OM-tMMXohs!js[k-q+sL1:AH%b6$IdL6YVQSQ\09++7K'cTnI'qYKgUD23^W^
%E[[%p$;uu)6Olo\*6Os#J\issp,onO^SS2gqlL%?EpO]SM<MRk&lhS^(]bkVZ0YNXqW%p6QR19'<=J\Jf@Q$/*H6FLKQp[Z-"o4o
%QDc5g):IYYWPY)0TTJ2h@gQUe<T?7!p#"8$+u`cGNj1>%n^4&F3I'1mBr0b3e4ooC&0EC!<*b1"4"4)%E6l#-aKZjc\j)9QRq5/<
%T$B#L?^d(19SY:)R\?:[_6!P>*\-/WXD::%an92*[s[F%J+$7i66:k#C5L;FMc%\Gs':IY,l=]6EM"tCL]AsSrG^(!O5dUe-f80r
%pX'RoO!=(._AVI:;+-9$*i$5hO(,9NXZYJ2hpNqH&[B!=gGQ4C7J(9;("c^+[@&Wd</ScSMK_4qCBT+3J7dK\^`>=B7uuek^tjl3
%P03<BhT7Q5Q`9n%=$?#aJ%Z,nAH8LNhQ44.+E$UA`54c7Fm7/,\7p'Ufj3Y(XWUiN(G?\"/\5:u[)+dK8_Z7/E&@:7?gYs@J"NpR
%U:#NDY954d75o-8aOu4@,&`ejkK)hrY9<#g?2aHABItq1/'&%7f?JFA3DlC-:N?b^ifo;O=KhFCfAG]U@3,-R,@/#i=e'nWV#^SO
%odAEG?OrDr?ZuA;Y4;2URDR%3Y6V=J2=E,7&f)>-9@'dHXPNlpX$,>4YCF6$DX)_br-`EXn,=+&ooK-qO8U_u:]=,hanuZ5+oY7*
%$D-errmuWZrqc(RgV:HiP2Y5Hr\*Nl5Q,R!j+$pa%u-:D+>!^sNaPmU2T-Os"''o8@<'QS[KOrW-n9h:ko-I42dN!SC\^)+*L+Gi
%]R,+ObLD`O_^=[1:$cUETZFrV!s2C-7&FD+q8M(.DFB1:GC.4K*q/s=]<O1HH4cp)]$Z/aCc;bn$85Tn3c:T#e;]:%[h_ZYO#R$o
%]i_@\_mPEf`>6,eolG=GLu`89WOa:J83321HahkRZ^ZEq?EbZQ8(![(:8i[7<,kEC%]+EIE($5J<uaWi*9+?[,(01HY2=RgVTF7;
%)b8OR__Ds7?;WP<PKIp^h(43D7?6o:6%/NQe*knFJ,$<:`)qqfXm:Df,:!ji57!Z;kr2NMH+Nd=8:1"X:'9d:>H[2KY2=M0g;st?
%.:mXsrb8244YA.^;[kW%r`Y,[,"j1)B[jL.&-$Uthe-?"J,f&bs0DXiYFI<ALV%1-Y.]8+r:/,*;-qo25Q:K,Z/<;XIsGU$o"2[4
%gV<YnIsH7nrNi3o.jl`Pp$N]TMf55^hg_#Bn,E5kj7LP`@))+J$1-8<1Z<O\9tt=bI]lUpAcf5A2iSsRlE2#srC?*rm`t8V8fk"1
%7\8624YmTbh_t,@qcNgbrV=-me.X?u;t-q1bAQ.CAAA/%qL*_^]uT=Y^?D61m&?](2ns..oA[C%qKF$hhn;7he(T-5M==M`qBCFe
%o2g/]hgLl@n*^)`X6XTXeb[T(k=^j,!H,#C'_!>=LB3?UT\V,@#4#3.TTnqm[]/oC_+`k5eN=\EDaE3U[aZsh/_b#p-Fl[g[WU3>
%DMpJ)"0m:UOJdtB9gNDQ5t+TG,oEXGn&!E.%roi,09a'1Z,4apFAb?CLbGWIKGC9.^.j?38]T1O*V\WtEl2&!1cuIhKpu5N&N:#2
%'0(u#LOLG[aY4F$fWXi3Y3U?bY+B9HJ@-Nf9:P6mIGK.[5&ZA2W;Cnt_d1%D+-"2;UjmMkhm7`Vj"L6F$1heR]faV"DP)pG3P3>n
%H+nCtD#A=$MVKi1qr4dEH0aaA,4r)1-*!*2o-Njl't364C1d/'TA9+_k7Ipu3'TuEpr31/Csnm#,D47Yr2f:hc-NLSR@drUrd=W-
%Rrm9P)rkpe`a(et%F"KVqH8Jjm:'@J`nA=WAmhcIUhK<8?0n0u+^AAd:Y-ap>qC%+iTfF2?&*C(kiI4%iPSrNO*hg<=(A,rf<5uH
%ME5S=9o;BEB&4p,K5'`TX.q9Ha^*rmjgo&M\k^=(X$PC_S)gq`DVQgB+T=&P"%q!GIJ<*2^X(MiND)*Knb(K,82eSW$[nRSj#S"%
%ER/DQ4P]ULmR<HAMn'Y3:Y3.dQRBuB>e88LqYPZReCIZDq0GT:`W057JmtLhFLPPlhXoGF.HR;7pNY<bH>-[@br5:C'W7O8e`C0Q
%>`0Pf-'9>d?T!Ht7!%heY.r03"0J'6n]5Nb&7*C;EEEGROqc@;;XQAC<t,<em^Nl4-KKpeJI*b`TA9'?EBCC$pMj:fpR.R<#ZrF3
%;sJrc1'O9X$OO-hr^B@MU(FC2UC[UKcl8]E4]A6FnXcq4l`Wml5G["?1uP"\lYkkGU"7HYi(V.Fm(>G[PZW7DRRKrd,%e2B$ip-O
%E<q([CoP[2CLK)%d-CQ(_]LMjm1A4Y;,jo+o+$nT,-o:dn-F507!)tm+Qj&Rgg+hM>&n]b_GNpFjJ@qDrNC)ISV7GU^//'#V+=LT
%/R[g()#>G,A5uFNX)2*uHT(2rB'dXW-C?(*^d2k_jMOYh8N>F!iV:&n::hBM0>2pN/4PC-3il^CDi9gQ";`)I=WK);n15uE$1@l8
%@j+%i:2Z3"oIflPq%gs*W-\fm)f\2],G]OYm=V<,-@sY-;QqhDbt2?e;H])rOu*HJ\-+@^"!K,D2?Mpk9qXmfMlG?D1cbU+_&rmf
%_W=cH1Jbe&;9ZZ:-7*cW[VdD\3FWoV.8lBPS^R14Wl"21FY)K?W30'*"5[W"@EVah%nl,7fUUGWK51cj(7'Z*;l&jsMn)N_Aut9-
%jehkaLRJ2,pg3oDas5%u/6s%tQ&[3>B=Ud-L!IpaaVCGt6@g'dg&d_nlq>8%>eePlK[d/PCO#rN_"";<4(2DHatdV/QcZoH$E-V%
%TM6L)D*b?$RLcN*IXY^PS"VRk>!u"a<Gl\7hP`)Y=Tl^pc_H5c_s`&7o.0K6Gtic>^2o0)+2@b8^d!n;4W>UMc0pZ*A%1>L:AFcH
%NKf(9^O<1#+T%JPEd$m-Gk#Kl7uWS;1XafLMsJ>pYNlP;c&@j,WdGu2OeRhV^tW\M6+mM05Aae9ek;>)-9Q9*k/BN\+(*bJR(1k%
%]h(U9f1UaQ/CtFcSn+!'gA(Mj2"jsfqIgU8l>_KF"-WoC;G?OF@ohnEG;A8l(_Z*i,?rDbiBU6OJK:+_?ngN)efu'Y#\BZ7-gmp%
%gkE0chC=\GnRM`k&7G%sI8]sd_56-Z`MM#r_koi5r7Z"-cDql^o1OE<Kjlhlk08!+leu8`k];>BgZmuY6u1Od]tC`&V0;At1M[6G
%-;+[i$6j@^dkoA.'j/dWir72%Re2e<*S3X;$#K]0c)7X)hHSc(`28F$$-7Pb[m6%7P#\;8'PeD?_h/PURO5)g_ZL37c0CmQ(pjuu
%+ec"ij/OYj]-SHof@iV8$E*28VZjmi-28VN+Qd*o)J]rcT5:t+'Sh(C"kQl-87!pf5"qs@?>W_p;-EfG+D25D37u!3;<KHLFDEY4
%,%"X,)%9Y?#>tk?EAH+<3^PWJqItAuHR9Ee^^St6nC\h3Djt't5C)_#&=1BFA\WF^bV9t\/fYlCa6*0RYW)"uP`@G#QhYbZB?]mO
%6b3tK92J@*0l\1)3L4M-3eJk/>qZbPM>S'G+unZ:ln?sglqesqf<2Mn/@mHD'fh%'n$"Nhmj<WU5oeU]5c@fDX2f/EKoQnUE9>"d
%_=>-SVG0/HlA$ti@dP2e/pnCI&9JQY]b;?oNYJ*)a!WO\4Fh4(UZAtN=+X9\#k4de-&W]S-l>C:bJKC<3\*t_`DV4uIn55!c+193
%%d!h<<Ac$t0fI8:`YA&Whf<NeW;@fV,VEZiB"Vo,iYb\\o^qEtV.^<Y.suUs"`H\jMC.Qj:(#RNjkPKt*%S>'Qj$kQh;^6P4^:4c
%OE/a5nPd#aK$bp2+W0]0O'ml[U=QCEAI6Y%1n1QU,i8*b/jDjriQ8u1:f1ZG:j*h*UK;nL.UFL,.@o&o&#;e(l67AQ%jW#31[00Q
%/K$U](p^m$HoT$>@pPj!446J#gJ(*'QSqCVKt2]A3qb15>/j!8Uq5`3H]fTo5PN<UWjY^eO@SH4,,3Mk2Fl9QUsdj,+DV3].GBG@
%b,a?I+!D*o;b7MgknGr:!,K/uBj?UXf[i\0b$CD)YIU&&(VAm&B$XaLDKe#g0A)B.>gI%ehsOpLIX(8o4Bp52LV%>j(OsW.%bKdm
%](S5C>M8XcIe28OSERGbmVl0Tlh]c4^L`,j#2c`+l)fBW.d%8T@@d#ahm1[YKAXDoq$k)I[<iPak4R$arXCCW$_MH!`;=S1o&A;]
%<Ab2cg+85Ml(<t6VL`=P(u!jma2R8s1.BDaKT=\M'^*Wf]&e#f<j4Hbp_c%^D>gZ+$SHnUL$)n(G@h^rM]FgGWs^h\8B2PeD2ssS
%:4cgnn^8_#;Lgsk=Ft$]F('r,lY;e2SZtu:_mG+^YQYIemF<O\b'aF,rB?hn=q0q8h=^[g0UB-<?9[ml^"cZ@@h2r<N5JQ5G.6KE
%@?9di8AFLQ/PB^RqVaR':M.K(\RX%A1U]),6Xl=5ZCnIV]VF68-!Jri,f-lo38eklGSD>GeoSiR:@;H:UfZ=3hU_D>BcbCh?X,#o
%Q^5Ttq:X;D]teYD6DO5&(V[p>T!/$;s0g9=cT]S!&"bN?Ze@G[+J&W6>p$=X@VLjX;!F[oKW<g\>;GkfVU4uODH:^&lV[pDC+r9G
%QG_\Ck1)IEMZKsgac=d8@"6-*]_Rkfs1=f[ql*H2N@fF4GZR<*LRc!/WcoaAlF%\V?)4%Mj4V!D8k'%A?2)U$@@g@[MnnRVOo"!V
%8ak-Th%9lRgh6#f_ZFfjTd!SND1/rAIE"4#67978EO'40&ol9GlD19UR2e(u'Zmt@`282&:n]Vgk[*OP>h@Dq8IC(<SJ!p+ZsCpQ
%M>5KKO>\U;gNf;jX'&@3bq^cqk'kSuh+!kbVeGtcT1e$kc#VjbN%c#^&[Zu4+A;_3kAtKmA#8L'M#[fi'K,O5:$8"3"=,^\B2:,V
%FL4%q7&;o4Wi/)/:-YjfoYECpA[%ek[\i[=?lE#AU\YsQ:-h&mp`mbuYQqn?!nT.Y[r-%Wg93a3Y"ebJ9`:lt5'2cL"pgp7A_,Tk
%1<`>)YI*4o:+^F8d/9GYCXbsT:PT+0Mc<)0q/Tc-0$7,i$BjAP:gaJX[JKg*Q2\:M]RPR2ZIeo;$?:3cj*fc]@rsrD9F.B.O@ZT6
%+q_6LO6tS0la'K,;5TQ9*,.qbC`e'@S6n]Yl?d2OiQ<'RjO>:og0jV^/LOlf*E?BD,%):-Y$LqBVSK.-?Eh[QCKD"j1%f?n?tBQ2
%)qIA-EX3a`H1ABef#+Z`+LS-'`15U-Ua1R%7$/en*%O5\KD,pA[*a/8F@-fZ-`$AO2s164>.UikaZLY1GWqRAnP>0tXrX_6&P(R@
%-!105Eh*u+rB1Y205hP/IdQe'*7t+)o_B"Va.Hq#^O6:t6@F%f\1[+(/E"KkkCJPJId9[8rp!_M6:;9#c%]RmLO\]%=Dgf*:Fi2I
%mF=bnQkI3mb_;:7i*C]N^'6g:U@G7,!)K^sVSOB!^"I6K!9g\A\EkOV4WQUW&6#9Xg7?T\b:IR_$gj;aVeq/B0Up07Cs-Kq`n!Jg
%q\B7SE-CWrbG_101`Z4dNINnH*:1mC(+?!]0iTVC1M6TW^J5rP$g14KXqg4gHoPMYPW/h6Uu\=KLM.W^p9X(f\dCY-R7Yif/Q7ZK
%1%`n"/rCJ7[i8jl.*i>2Nl9")_7V'e1fJIN=</hpi\("a^BPqBA:5N_ihW?0l4[n#!cu#RXbOnL!r8KVf$AmK)2?sF9/shQPe&ka
%:l258pOFF(f76T=?R)%R\aZ>,KueiQeMcBj+uOMM($fa80cPZJr]D4mA[:U\(ct>u&Qr9F7Er*g.&.6MV8id6\le@rH)Q1D-_93?
%<Yeg)]usY[[:1^V'acB2:=s#5QAroYd8Zt-9Ngo0&eSM:-!B$8p*orb'pnPA]BjL(`e%q@RI8+&?&H/4?ZdMlpck]ub>RFgD0:YO
%BZ,[iS)b]qRMjRbNr1cB(H=\<5oRbK*i!CjUm;MePoAc%U&-P(eU+TtpRHfm`4G%aiq#J'6C"&\#(1!F0Cm01H5,KIOs""iM$PVL
%fuXt("O,R:9rA5.#V=S)cB910KV8#g&`E!a@Ns()opi_l/\mt5OW`n`PoucgU.OZgf4c[:PbGHF4P[>;DO?A]R=ea9/#p!S<SGD/
%.=\sF6L)%9mIFd<4jHop'</N:>:%EF,n,i7aV.K8B=%n^M4j+YW_A`:F>%Edg*]Ei:`C3#'?R9HOMUVQ4^.)nZAf4XCm.aW2@oHb
%8Q0_8^YZ&D$T/:niMZp`4Uc[:9,n/7nT(,=<]38](M^af35S?RNE`*"B`r=/b3TK=TJji",;%%I<dP=-"nLKVBknt*@qC.1f%/*M
%$l,sEMLCI-*B8tiA_M9E_58Toj[T^RlM(/_=9&RZ<u1Z=o8(aZZfSQ0UD6+4Mtf?-UZAJ/LDPNd*6IC^[a]K*4\)Frj.+nja([Y)
%hnp<LF(Mh)q9.aQ)U/R+eDj1,$na*1Ul0qp.n3<.;%:[_9;*G+FDuHm)/(4"Z\DqUhE=<9GT-Mtc('M"5iV+1H$C[ql=)nfi.8IN
%\p>?h>SatbpRpP38g->dhYePPX=6K05:hD"f&;BrM4LDJDf=&,oXF[R;u-3AIU&.ZcT=DJGtS(:q#J@UjpltiS`NuRQ)5"?NJN./
%Q")`me/X4'/!\h^C&l+L$V4uG_[s#@08$sVol3[M\7lVq4,$23:[rk%2S#u-7;B?hOc\n,--cn+H0mFqF8VCe%?U9@[,PQWnL0W-
%L1VMdH]PY;;AnKN^@u5nYJ&$cjs^k)h4%4)"@U2r.i6DK*eJjQ9.PmeolqW1/aH)nJiL7r&Y`nmKb_)uk-_1Q(e4jC[5dC$PB1PQ
%+Qt6M&t.4.NuhD6)XJI)&]Yb.+!MSFN\be32pZ8WYBoo$\V]IG'-7p2EuY'!*q-,ujg)*1*pnU26<TH`KqiMZ-g0HT>S&W'F[D.(
%*<S8-4],.c`PG.X0As4;6`-3'oU6Jik%U^kI9O=D``l]Y/%Huj`Ta8KdXjZ`[X8EU9H@>K<tregY_;QB!(5NKneum40GtY;9\PE(
%UEho1Y!g[D\*9T?$VAP3K1eTi5`@[>c2#?'Of9Q)9,J:FM:hNjJRjA%,\A%mH4hC__Wu;dP6j0Nle#\$Z;D3/k9gIgLk<3kAej:B
%HAS>/_e05d5gpJV%MW'P86tVp&lZd0bH)F+/e/a.,b8k$:&V`X<P`#]T7]M.$tl1m[s4NNB.?8Yc+i[D8'<k0-0tqBdZKIkU"kMH
%@h-UlXC_@Ag,s!08AK*_83U$`RA.s0%ROZMA,81u4g_>AXOF(5q2[uSk<(\j/?6]>H[lmOH^C>W>cZ/*4''-Q\Q[dA0'B+X6+<`D
%0:Br*5B#MI?r;)Q\`p?9/G6=M.Z7CU$FdA[aU[@tR.qTQVB(@'M\ZGY5M4?U98#<9eJ7o!C`D/nF#]+069Y0qm\=s,q34=QQg@-,
%e="J#M7!dtf1#KAMQ:a3-7Mg`H,*l8R>K8qilG#'/VUkiduiXN12mc1LG=8V]S?#@*G22Ui)9;`AesY)ao@&4JJ1gD#KW8"lL@_3
%$b6#S%)Bl^/HTe4[:'X[J";dKQJgKX@Okk_AAZ1lBqZhkLRJ5mgXk*$m5`#O6@rEYEnsS``p(N,5:7OQ2*;eI6<Q,`a4b!Z!Dak/
%./#W3-kE>M2`kmHo>3%<%XG4)Q)a.[2X?Uk*(ooY8k`3mApSFHMS26c=[rX3&ZRe5DVF/RDc';t@^DsQe+OW<l#DLMT];GW[%Pc8
%33V'"b^oT/0Mm10.TjQafXDb()-8hM%pP0M3$OHi3Hbs46'`S5&?9@PKpF[Ns%J(7FH`tmJnI>5LUJejEo>oe_/UO^h2u>@3\XtV
%cjA!TD<f`XiPG\QH'feqOk+ErV8i<3+^%SE.M$R]-ceJpmW=iY$45WSUT,cl-peS5q<qU>aT5l/oD#+$b/[?3O)G`:*BW,_HG:qj
%Y\t1W()Yd;"XAurpe!LJ+de0]![<'a0^-Q\=0!I%A:Wu*AMqgc.8V"OOiD-uC[;hN$jssaQY$Wp1obd'mD6qDmW1!c'"Erp8C(%0
%FqJUC39^k1Dk'cHrEnp!3LI$pV/q^+)/^Nk=n>+fg"$?WZB-g;frh-G'Wb/RoM-Q'pl\='nHONllf;eT3MW4a_&WSd-$]Z!$];ml
%OIN8k`(E):1DT)iM4[.Q37-VhROO8bXY9?d/oFjLE6]2t_S./)'?;!:=+1iK\X%$WW!$HAGUC`5c+:gJD\T6;A\8nPkg79$f<chX
%&D(X#j06_(=&ZFm+upX)@qScN(5Eom]"A`HW-Se@8$N[4:i,IuT`3WjLXIMZ]D4:>Ha2g-c.F/LA@7ib7[qc>%^PV!WOpl]/mU@>
%_ctoVi<mZY7,'`Ka?h<#M0uEfW!OK%U8F0&iG=j"h,IV_`S(Ym,L^&35XiY*m";171Bri&<VmphGa"b[kiL;SLin=0Ob`kk.@57+
%S"LLlM;W$_\BBhS6T87_1JT>K]r>._67cZGnh$A2$mX.S]X0NmZ^;ekcH$8hLj1>*o>t%HKB%*49,W?HNc2?#rkO(uY4=hT%KN=P
%3[K;D/1((!lmO7$[CFrmqk==H_of8g#0l\G=B(o_^%DsH6r6!p[sNp2beOH^"\DjN\bJ*t0K4\JXYNVW^$@dh>[-:r)g&*I5]F[4
%K8\!&.cB6JGtOJj*F(T5AfM<'!C.9AGtH&j=ag!#J`1_EnBKEa"CJMaG99%:70krbeFRLEgeTg8*S<e3`96P\%[;!WSfo482qq`=
%\(C@><Nnn8/BFp+Y,U9DD1;A!IX]bM:F[0k**lhV!"4F20GtQN!\t*hdK^^(NaFa6g:C0,#;Z^9_(R]Lr9[@.b3TQi[:t<t50W7e
%^=9S/S1_>'1/DQgFUP7"Z5'c!)q%blM@fk"-(8pe[r"'/rh8g!01=VZ9SE0^gA;ISkk`B=qp=g:=[S&s9:/#8"S<\s2#.9;&tqN]
%RqJ4q'Co;sr=r4)5-SP^'RAo$WR.bN@0u9LCO\eEZ"C&GEb0f6UdqZNLNFmQ+")bn#R+tn=l=B2E.>/N,hl4JCSbc=m+Rr0Ne;a*
%in5PSIm#.)Wk8/hV5KCfX4lX>!U1l])\C3Fi%m1(J[0+WekY_0"3B-s8j]p8n8LAbPc'iiY&=dL)'5%qXadW$+))sUGqaBIn7o3E
%3LkW**ZaOJH.U*N<6+E"JbPB2N_Lq4g=!\SrV5IA,PS'DJL/<i_?st)s*c94!NoWBbODd?cRWoJ,I&QqZ](C6/p>(925EK?-+UjR
%P=Pfobe.]SGj:YXG8eQG8N.!-;\6EK0Eop0LGS(427f-j1-*'JO6<3*@U=cWOopS&ZhG2Plh3-F4;AmUP!do+(_)?:_BNM=M93N,
%E*HDFmo..plg>UuWC)\[+;^NMXY!lUIEL!SD(?gI*8V1e"G\/;3i*ILS*Ze(/e*kQ$UY1(,I_0#Qo[A$qBXE=*GX$:a,LB=6>;oF
%.+oFujcpG1+.D5s(QWW8-8>D$7=Ebq*UZl[h1TL4SLi\YabHrVfI65aLC4Sp"T7E!R&IPd$U-$#9Y;bT,Z_#(1aSd)+eRV'/,qZN
%kq`Ie;n'gIE6n&/J`CZmI12j\jnt3qn?2Z+Mk<!ppkQI6&?^HH"S!RO\j<k">9"gariRciCS*USr.fXe&2(Z`&Fnbl/eK_MlP/mC
%Rr/h@^$QZqinLUJ0>?ThiR6KKd;e\n#Dq'hFcgY5D't/VhfY-%nSLc&(Z0D$E:IdXM&5&kQZ2=tLC)ShFI@+4[l@+[rO9:2\A;Ik
%M:^U,SW8Ws4&<NaVYe;ImlF:ZnS`QDq")*m'J@,e7eu%JNYLC1VCTW$ml=>G2RhHj?@1:til-+I.Sm'k:),FrlW3Q8]8dUY^?o+o
%ik*L$QfpU,MAP/mYdi$7Fg62]4X\GMf0)'N)rjX_M];(i=,RmPFgcNcI#GVuoBWkI>Wf@]\m2TGmQ+W38T)(E1j/4I?8T00\mDfb
%ml=``VZ''ZMa+u@JC/\Wl[nZd-VbNGpq(D\07N&>dJp`BMS6iCrcOgb=bSrP<u(/)!L+NM]DG,`\JihI]l.!";kN%1e14CABn>?\
%RaP4F,SP/?KE`A0:r9k-L,k'[=Lt/$Nak&j'#ihC;X#^ERfEp06j&tDni2.lQ$<WG7F`qPp?BIf1Q+@q%:,q0q:3"&BYOXm='8Ed
%=j60`<N,W5^nJ7p$1CX-P`O#*HKCa%.*h+$p#bf2"[9W0Mr9cT<UudDSUFag&99Wt75+`sZ4f$:;M):jlZrs]0J8kW/V;4d?K@(3
%Z<(,F4aV_rGEK%mr-;\$0jGe@hD8gN0!:4mNdZMCHum]A\i9a^"FH:)-LPWqpJr.k:]bD?F;")]5WLrRri:AO@#'1&H/Zq0?JA"Z
%e1B6u>"CPj\iDuKZURD%\H2hADHmkAXGG%#L1c^&86,Z^q#$KQYhMs+8'79cO+-PJ3<aSt4,m'bJ6Hb$9a41C`jKoWZap*-R.S#u
%W!"NuJihbWNKK_Yc[L$*n=h\REgN-kdBDp,gN(qM'N@q[A8'/GA>%-\L2UV+UOljhYe6SaPl6bR^>+7ZkJ+T`,ZYK_/.8j5C?4CF
%,iUFVnH>5f2?Y'XhB#fVY&+@q\__\>Qd/151;fbei(QC<U]rOEMoWTc_;g)hqhh.XMg>R974BS]L?=&KP.Ts_'jE?pE>-9<AZ6EG
%gO"Uk:+rGLdQMOXLHPdl"[@?b=!&0*?ZFIGmKn%K^cB4k];s?C;9Y3Jj@P@?FYPnr(u00hRD$+6>Pf!UdXfJ]Oj2q8hs=]2*1cp@
%rC^!nK4>q!r^WG&JW$'_Qa&;/)$-.`>r8[s'b2HIJ)&Pf&S`gIG,19E)-I6hd@u'[r)`W3#6dK&\ZuL`WA:5O"t[86k\<Am$1V<#
%-:IG/Z5a)0ihe@-=9g0mpoI.VZ`nUK*rbHm+bHo50;8/0`ul1\@`O"2W[`'?iK,9>*$k<`\(loL22r_.XSgrH4ATA)3ncidYpupu
%?Js@>":%FqL;X7++2'KiS_nKIEY^!lc*_!E/Tie@R<c6>LT7E0i$!tg4_d0.e>&,AF^#A0n5^>9kI&S,'j]UhZjTMJ.+O@_7TDHt
%S&e*I0H2W/E\&g/*F#puhijh\NXU%$Ei=J5XmBXJq3._k\pmolcukrfI'\;NQZbKa7EK<0EDf'/+V&k#,S`#]3L6Zc9M<E;Y$'Os
%$R<-aiki_Ppsh">T%Nm@CbqQU![R<A`%6NXNWs?+fg0Hrg+n`LO47@*r%Z(ZfqYKV?V./-Vd1BsF?`2)1IoLG$bZ<e4SS;*=R>Y,
%gRaHmP^Fkbd8PSG:]1J,Tjk!*M',S)F>oc(1M*1gqgo,i%Dsh@s73K[_C9FER-OV5DTcN['``;F_OSg=8;!ku:N;c%r8DT.S-ePo
%dTe?tSoN8t$5JCH(fF?tr:'>[pCA!M%`n&f:t-2=6L,VAE(0_J.Cf">i"HYYD.926;0dp0HC:r'$62;8eE0q58H.9M]Xj"<+YA:S
%k2GNu<ZH,E9UR&&T]caB@AfNM2e*.X!e-jr5bY50ZT`M15pKR_'9*\1l/VAB]Zn6A;7XcH._biE?2`Ek*WL3^+bKA]KkkhY;_efb
%)BID8dD8.mcMeDN9"PG1\lII5KSTKd"^]tOUjX4IQ^RZsi"h%4&b@;s*HrQANejCk5e`go4_m9hO.u!V*NUWY25QQ@5_qZ?L_%g]
%D?"PbaA\"#><.CQBqW,iq96`WRB-^,GshZ$p20VJeQ"5gW(3ju+]&Flb'),M7c9VoJ$Dq.9k5MH#bYX==8u[ubM5R#?.iWhbZ)e@
%c)mlBXYl?[NlL3qQ3DL[!D93,N7^@T4#iGrnGJVsYY0G%\W[I[Ep@(o9G<SLb$,jh;TX-5c"96M&N=m\<YG)>lK&GrfHa#ZaWNgs
%<Qp_]H[PgnrH`-@kT#4LP&.4"b>'K.`p=j(`i`;eJgNDUg23pRW7?@6[dZVSR65>qS'`N+ge+FOq>Bb95NlPP9/7hE>9nu5Mj9pZ
%1J,n9k%u86.F)k$-`@/Ipic^Sd[]]/+WT:QKrcQhc-A4pnbcJ_E3uYtM(Fa73$Opo_i,=B`:ksVN]bZ<Sf,VG<\n3HX-D:%e]/iY
%9?d]Ig-_TW$O2j9a1j`iT,\#e,'fQM+=0u$'T#+*TOHXnU4LgN<I3=7K=:?b7,ggL]R^WPr>*XE2:64TmDbKRIs(L#`.F*1Nn>c5
%H@u\,`P)mcfHIWBDe:uU$7nrNEbAfs'UO,p,F<jcHIt6)1)#C1n/e5%l40s:/9:F]ercGc"?fmNjLPAY+Bt>b^\`kQNA)MT+@rD/
%UKWht>cVUqqIee8Xu\_;]tej511cZl\2IE>V]5m/Bj:D+89nWMP/9:m?AXWTFA/r1"jCCmZ:EF(3#+;W+IhVis*8kebB$?mT.\kE
%^C%;9CeSn<coOUQJU:a1OgVpGP.R\2LgO+D$,jMcb+s_R!G9RWn;$2A]SAXtC=(D)a>"^U[aA56i1X[*&m>g2ohd!O0ig:kJ/6G)
%/Vat,LBrruon_"S#R`bAJX7aP[`JHaRRFe]>mpo?;G5,abn2\*cefq$T,,`h`3BJj3BW(6O:a,fSjQ1bm'X.D10&a[s8(^YhX'5M
%Zeg`bic@/A:*>CA-7gVKif5hKHC:VaB*-.bKd6B$Z7/:%8;8!"V/\1[b@1PYJ9Fl$RPO:P?f:%fZsE/]bdSL.06?ie#k)@Si[LQP
%2)2101PW;LS1(&>o^!1.#lHBXpW*`?3$hL[Rm&t6c2RCR^<0f&>\o/m^s'5R(Q![$(N2G\mb:@n""&B7"I#0b?8u;t?Z"5'C_r!=
%(iu=)4c[gCkJ',ud=[En?:%G!&V_Hk1)R)]>0jIg,[*?",8U!79!>TXJPB0U#:`Q4.g/8mGC[mV_7,KOIsD8DD:tJn@gA&(cmo2G
%1P+A87VNr4\m^N>j1N7(5b9Hf"upKV?nY#]'Q.;ZQ2p,255j$f".ER<:Sdg9^V!%4M9A[kBTX`&F3^_6gR<<1PVi`Tpn[-L'(+".
%+=5*-aV0#KJX<:@2t-",6-M7?#Z@KFMUDW2-6R6kigf>1=jRX7!d2417\B'!3j=^G[[:?b-mVF=<Qjq%n2Is\Nq6i^MR_,?ahJU[
%%1F5Q');1"$&\YhB4;G[;Sf0C`d/OQ#`^^C1ur&]-qFbT-0J[9SDK%A^O5h9!O+g,`YMl-p]lYl1b2H,COfdI"0=rc0!S4XH8jjI
%b5qH0EQH#A+eb]PL?Vm>B?u&`aY]&qDgXu]B"'&e>QCmaNt)d?dGJ1F^cg,Z#%1tA_Um%sXDMPAJZKZK-p7;b:Z,6torMG\k_I3n
%ftkSC-smQI6nnoU?Lij=4pEGna6>usR5+NV)lk*)Xr9br9M@Q6V/=?6&111=,bRU)4B*n3MZ[9BR;.f/Is#R%neP5;a=/8C>u<bp
%7ZN?'=#/Y5NaC+#lBNj8]/^*`WC;,u#k::oLWXfjo>.d,&2F1Dq/8]O%qhPa`>f&NWPV)nlq<>rnR3:s,.!eaO2+Pjl3YD%[OC8B
%;ROF[(m]rG-IX<,9.`"$e/g5bqoRl*4b+(Y;@u\H/.>GV7XSsHj\$0=\MU'?eIV5Ia!0^f6#oSL1\k7g?cnh2K"3\h%@,\V>Ft!K
%kJ+]i*`mg0!7Fg\\ZZlt`I\P+1rUsLBpMKYI@SjpJc>(]%:VH`G%`tS3PS26:MSit:8K>!J#e2U%E<6cEUfT`L)8'q.r9b>M*RY+
%mOg7BD3t%_2<s`e0,MU5B4qfd9qk$IOJLf.($QFVl=s_K(QX'XKDY1:?dZ]ul3"0eXptY`QUuBUJcY#1Y79(.#[:-*6ZmnZ/IAk9
%;k#'SX?*^B&'oY-D@f>X/g:&MnS`U?YT(X7F>,7W]_0!pg?51CK5Ad^a0JQs")[."k,K>QM5m\?5VVV'W2WqWU(:=(nP\>E*adj-
%/oK#XqheB5*#V,HJ/!4m@?(N?2L?*&c?O&cVg5ETqGbKEKWN!JX3/,!8I/u"N/@Wg)jg<opc&(o\=De6[S^ke%+uQNnhEU&1C#tG
%iqb1&?q*77Ot%k=F%%0]M+H2k4HtFV8)&`9@kk1I;(CAto&4M0Y&/$OneGAB1-$_J3&%ocI2k``Ct&hi_3_l)0tHJF3(*?Z[\+l.
%^<^%5]F/2q,?JWg3]p"\@1SEKnI^gK1KT"78FE7BP6gjoW$a/AJ-2Z6">G2u5Pk]eK>[[h,3kndJE7SR0t'`+_>1;QCnY4K^l*Pq
%b,uN1WE^ko]s4SFMh)bpGL!.`cKBJLRY)U0i._O3mXjqSC6WDDe4ieMU'^\kr"jR='rRd=0.R(G.S^ER>,r///II`OI%c9\?+kEP
%D$Dn\.OC6PaHtS=_L":IeLI:hT)[@SglK]ts-imtaT63`RA>mmD23.o[r_4K2Wb6pQW;U'3lDd@'QtdA<u(j)JAU'TA>JQdG*@kK
%H2_#24?U,`Z@>:RQVG,\E*>D`J3)hkr&1?M(AHkr6QerVd0XBF77^^garZkTOCSL-.=d2RWdT9kYP/Rbpb8O^Dk^TP]p&T'.ilOL
%3[*^)_>`oc9i<BM)K!<ZN"SH<rG:mp!sCKAjGbhF:)P<'$C6t@qoT@5!+hOC\8VPmJQd_TTpnqdN[@R81eGrj7&"6M8T.oBb%5-/
%[R^Ufd=S51QigGo,RFS%Y9()OJ+>AgfG),C^a^,,7=BVJ2$S#$Z\WYrWOlJN/Gb2cK5_MI-cq>JGcMP[#Z1q0K-b>3!%cYqQ$,n4
%olEMT/@\:%]SB,^*0(;8_3X#fC<.CKbYJ6@nDXrMJ=<6u!@6JX7@#Mo9(]@+NsX.M!!%aJ"5)X]!M<%Dq(q2q,iFi+2EsBt=hi*j
%$@$bXcLLof,geU)*5HP?'3>3tWk6lql42Gsfat-dqPL$uL2%-1fYrOEEc.RqdM2=IQU[)omf4m!B9.W#!5Qst@Eie#^@8%?$tY/5
%[md^/INF1hXOj9`KOnj%jP8$')lA^^E,l\XlXs!\>=.#!>-tu,i'p\B@'OFI6.U%W8cEh5g/LnA&5H5enFB0,:G3KMqCF0u"T6q[
%g.i>M6qZ&?:(#taaY0U+c+RA`m3e\'[Xd)`9stH.e+:,%p:IX7fA<)P]_L0=iLAVl1VEA%XC;"^H,GQ4boH`#NOcr&oJh3MI!>Sb
%il;qtmsf*_nV(o,U0e^CqmoAk+M@DgV)952juWVe-60h<l4`u9ai8d488Zeld-*[-hU;-J@e&W\fcogVAko_EO=)n6RgQf$`[h\@
%[heAY\la'S)8b#AS2-Qk?OCJ)885n%_?oDO[m^K'+M81cn/@.&]rnTt[R-Z9'T]R8YSR&sW"UPmq7&8UdB"3s49KD2(Xp;05gY1H
%CB5_:1?[`>X:gjj!>&/%S*RbY.W:-*fR@[t>m]2pGOnD*DNVRe8nO3Z,R(l+0Q3'M9A&!eK2W.E/V5#dJO5G2X#k'pE567.dNsEY
%#XA)X7fq9XFUD%PHNsaVM@=i:g.V58!/;kf*)u_\^oZaRqL2GMkfskiRPE:E=*pH>mLinp3lOD>VF:@Z#XH-<DK$+HEh!"M%TBS;
%+a7]5,aqFNi8KY1fch)=[0XB1XFUnbTlWTNd8G7jb@X%S=>Ml*KE]Q/,!h`l-csFgM<b<g&i$"a^lWsNQF0Pt3-c"^IYsu`P(X,Z
%(*j9A6<&P/&<KM>r#g9s:s">oaeWnq^P'DN@d4%2?fGaGe;5/hVEl$8G(p@b<JLnY<ABY/5]M/^X)8[<#tUPg/.T91R!J0T#jr!(
%LpN$G+6dJ>.C35rKaBD4@P?'"FDjKICai>H+FL)Rgr_W^XQ1%Rh79m\iioQon`UPdhkH3iNsJH(j5Buhf9>s.".\(#7,T39F1;uc
%D7H:hPkM%Q+gNlQP_.mC0-R7Xmtg4o/F:jJdP.XUQPim_-NH%XarnQh#m$65nf2.t$$rG%?"nj+VofmPP)Rt[IkdS<53.rD9'I&M
%l)>PuRF,:/6'fKO6u/\m$nLM*JO[>2-(78*k/-1#R*&o*FE;_(7of2#qpHct12F[GK]";ibTmQsU/D>t$WS!O<i_1$?Zf6s>I$jo
%V;2@!93$pB`Y>C3/^fUA]'25aV:THoU(<m<TCidWhK,ZXpDH<G7pB:cDF>]pnqP(;"/;fpr%T+2264YBkmk,Pl'-atIo9R0?rMgj
%R_"DZVDL4'iI],.3!h2=FZB^79!KpG8E"9Gi9DLO3IOg1KZc4&"4^&Rk-c%p%'2-aa$B5,i56Ymlq0sM"(I]fZaN#%D5"<gBLPSE
%G6t*'WKSI_<C4/*1l$AqC<KR$Kp[OpLU*#`e%CKMA$"d5q*l29mM:gp$"]g;5eBo5<pN-mXh\&4W_>dd9@1a(f$rc?C(FTFrAle"
%J23:h)K=.TITdLL/0EJ$m+u8GKZcT)?dc5KZQDScN.2giKN4]jh64EIJDg5TLO"N6<n*j2>F"&JTBf\ih,/c:AUR::pCS=I"!2<b
%")q:FIgu&h]@CW*a%NZGL7hB8aEXrk\koY$b,8[dTT,ANi,CU#<*_8WO;^d^F(:\O7.CY=*oe@Mim\T$%a)+m%\c%b@S0MEN>iMj
%7D^@t->FR*A31#);\Egn)`:`A.JVj(QT4aP,hh:D>]$f9[2!;/34<eU`;!GRqLbo1GgXcp\0TT<s&e)NPR0sf.cVHRL$f$_kp[PA
%BXVOD!hWk+jH7>d@LVi&NhhF-i9Z:/;Q`5/,QaiJ:luru?0I'+)m5:[a4$=5baM+2hA'c,etLS0\'n)W$Xbb6epAbF?(;?u/KsN$
%@SR"OWH>`RlAMdFLK#`YY6&"Fb]a%%Hr8r93SYBOfJ'udj[9Lkf$4)J[546VO2,MM^r*5HZ(10>1N`5K",p)ARJ/!c&#`L62O)WW
%enDF.Z7=?UMJ+p)&3fZOb9e&?/Y-gjKssC(,?q"%\DZjMF?H/mFEj\'#b7*)3XuSCXjg*MoD$'H)]3(<O#'N&<c!$>"S(YK<iY<.
%@@=*FI`ArMgX9iUWpSNhX4;?jXi'mVl,:@FNX7L]15D"YcWG,nq&D[67mC9?W;3Eo#!q)e];j(=\e`bAOK3<&!e7&K)S/@!!k6d#
%i8,Z*h.kRl@+(&u%^Bb)>))rb6*2"0NDpqj<tP,2(bM+oQYb@sf'0@&+,7^&!(V(c/L'@E"CQ4%)/'.[D%F'/[1T2l!CJZ+Jo/MV
%JuU=(hk4a<'="QpNa\M3\fJZ>3/,.>WR"MLp?Mu]b5m=$Y<Ft@mQJY'(^jAh7tr;YJ"cn!LlHRZ>5=$>ob#8ie>'r6[kLr0%&BNi
%Yi%1.oOFoEN.oV^;BUHK&"fU^q7U;;677A)L/@(h6^1]LSt,a8"WoOCq5gmBAs.iZ5AI5(2_^U+1RJD!g.hZc<>o4n%5cnh^V_QN
%*])"Va]B,Q$tq\*B4qtU-VNPt@](J@'Y;([;@3OEIUtr%J<GDQ.o&PG@F#&.]?9&^-(JBE["SqbmSkWaX`A:21F0T_cS=".?UWTi
%QTF*UU)jA!eD*BLKk=V4>R],`5,6E[2!"f@1nm\nfE%55JTfjU@iii"&8fu/k1g70qBl2V[L#"$=c+tT2pMXEDblL-q'';As4](.
%))mU:1?ClBJOj\gjYP!`--nM!!Os^MV'/k#_H@dh.Y`!V45t/B:-)CUNKt\]['VL#QW<!pJfg,pZ:OUiS^L_H_QnTJ9%W+u$ndeZ
%fkD%LCXr0R:.[#hjE!o8X299]Td]=1fLBPHY]N7ho55.aadD1g#M9VZR!'<uIrX[NWLC=eInd!j1tH+Le'?11Rq2r(G+oKW#A@=s
%mdgk38/J%$K:_j<8;\[b^8n2sDgHdTP8H[c>t))-\$+2f1jNK?T5b7jT9?'*.YpaYH)P)O=t2'+PpM'rb#7_,.T\W9]2W:P*'QA^
%%u.S-7@I8:4i0Hnf`N^0je:V%?2@[(Y`2Z1deq??%$W,bc\:jqB2`-!6"JY[@H?gm@B^V_9ic,M5E@uu0^_R(8$eRAT_8Ob0/sPc
%-R^1sH7JIACdONX`p,42?Fh7FGpVOMG`bW1Z\$\#ppQU:g/0SUE@qY>c$]t`K=`=8T0XL:KqnUU0?EdAE[4>3jQ\WA7u$/8Z'^k?
%GjcKc%6uJt8L-p^*K1[qY`P^Y$$N$CWFGZrqA8k%nQcDm7gT`#9]rEaRlGTJ,*N"!Y>G.,7):0h91!ad(]7M,qnO;1rI.il)-1'a
%2IN-:?d8u\,Tpdh[)M,,(K6Vf$d&LYmIGB0(X8egCmC/AQC5VNFUt760`2N*.$u>'I"Fc+,^YoGqKIOjY*'N1U5\;k34o7m6/@/%
%6SKbNgg<VSJ]V?AaHG]=)tXY#.F2L-KeU$dGf5&.T]As!CBBe@9.O^Gg$#@^U'a&&W#fcCdL<!qV$b7_H2j!([/`dG'RI,PF2/0S
%6t.H^eU`7kgZU")+<(l#&gqFrL6UDj.sSa]7?%`9(7S!#;g5$n#bm?=0jEA91P3b8Yf^SLK>BF3]Q"I.&/_j,T11$O6!k29b*'Yo
%&SY%s:GFHTlL\9GN'u1;-4a74@-K^QOS;\lF_Ra=(u.gUq(g/"n.PI^hnenEYKEQ4E\Le11qOY"c44"=)9V$@bR_rJAK\Ut<$W$!
%0Omg[Fdf/(`GH:(3B6Dq^;q-=7AYBW;9j!tEY\/d145..&obKM`K2\_>6Tk&LQtp$<Y\Ml"U/TIOq=B4q;/[7e</g_Te0pq$Y80p
%pj@s$;q-):!V'=D!mfR(j3r#2A+35l!3KjocVYC/TRsThm!kAHGQg)^-^Ed[G+*jh>jRYnVMBadG"Wosd$c:_,/*?q&TD^1UkP.P
%c'gd,K_XW+kShY\"miZded2#16WF-*CJe0B.E\s>"_-hQ=cSWpXDe1MHNBr#O?8VjJp!m=I#2$8a]?Ga\'5tWeoa]fb"$oEGbYgp
%'k\CB6[d=MU1d7+V4p9+jt/rh&ZSM@D6t?nm!R,B)_(6ki*d8",t`JGKm@F;jtL6'YZ9^<_CKDhGA&jP64MKLIcB9oj)3g!Rc];P
%cHY>+'."gPY8qZPVg'RSEfR?>'bT]][e'dHe6H=;CC7HNS0f0b!n\\C6d>BAbUY!CpqF.0IWdWb&'H2la&$[$bhk%#*[q-q=:fHS
%3?9?_!YC'2k(e?\IXmp&iqDj`DE9rq2>\0@LGua/r)c;QQMX%#KkCl,jW!X!5ST?*joeQ'iiX4gM2Z@lKWN46b8%<VfqU>k!Kaq]
%&21c`&5e5DVFtGsZ<L(dFiNj[7?h,hknm8Xm&k,7jfht7Ok"(3\OY/^\`k5>9]r"*7/<Ie:6L<bm^Yp?2nJ0#;8DFnX$e,3]?V$B
%^?[E1ik#[6Y.a3XiSncpRKu.U(:T.9]UOqF6%&E3-X;&RH/ceeh']qV>mJONqs?"8gu*o#`Co[2;7u\,,@t]R4]fcscs+e[nZqoE
%.8I=@%Mc1\k>H:+gi]WAnQiV]/+KKHj]-ZR[DKnlSLa+K2r-!%8p;:,.g"RJYq2>fbK7$uhE<fUS,$>[MoWbA=3Ciq4_K\ni&A/M
%4J0C-iM)`[bN5JgEms9I;0:FWU:GEunY.mde+NRtTC4jKZus."rSm;73aeYkG0:&qinC.@7O.r1)eS9ld1HaVk`.1eD[NmI-1#Md
%ZMgRW`f..7cs25/.DTYj!!o_A_,,5A<"m;nm?hK)@+e/&42B,c$,@aEK^*HO'cbC4Bj0G1alZ"=3[O\N:"jL\=dairLaW;9;f1oq
%8&)(4p9eBsJ&-mtA`ZO?+SE.%(MEQMJSR4_U0s/@S]haP8<=utqBX2fZ4i-r0^!?=G&3niOZu&.dqcQs`feG8Z=njV3aa=)&IXdI
%9Jge=CS^Z3bJ9r(?c-2cI7k8Ck9W3FdSB&q$q"a#]YKGPL^hb-:Hnf1%,-6q);?Z"0=tdD,@+2f/9%KFJHWW)ckP^e61EaVck(20
%(3FJtG^/c\YO5h`C/\ISAIT_%$+8L3LmSRDUS>OFgKA=3rummp]RjjFZaGhUP2PH/pV=4O!;tm+?ei=1CaD`P+QuS%XHkCT9l!QF
%ErEjT#&":_C]n8f0<_*M+FMJ6h"D-Fa*MQ_:OdBY.'"YW+I0YlU("l1WYp9o)1MgJ4sjWD@J&MqV[%8q1#$s_c77?$"+)K*-L$;8
%q=GKtN[kN/hBe1@k7Z`g%*m60OH3%$SNn,jhEdaK^+)2?g(8+h`<nJaMj!EH\BgcE<j/qeb#^:d*-O[t&7e3X6eP:H&N&X*G5^c0
%!ITF+1>s%/L[OpSL#InDmMC?+77PosaSkZ!0-3"G0p[p2n-3C+jsV?/@mU3jWOcB"]En/=AnsE=I$p*LZa#Nh'UlNcP:_h1`Hlq0
%>Q$XL6i%/'WYq*j-6_g:Rl*n?JYGKpNc:u^bfrSA\>oUj=%YK@#g6XLA<@Q;QVFP/S)m7)4T37T)ljTaRd'UBB<A'Z$M1p%:'3Xb
%k_2hk0=BuK2"AjY!_BW9/\e[,k7Sb]I/]$c#iA1CNt>EL1ED!gA'U"M1Fe7od^R`F<[G=m.9)L4PpNfqGgcrX[IYG;5Uh@adB'q&
%`tru?%j<*j8i)jW_%o=+3R5u,($XjHXgeC":)?fDL.2M42q>A'9>5(W-bB\dl8/9&^\Z'ihs0#[[]0/j/LV49d6DgY<C?]"JJ@0I
%'I28MTB(Ng'?bsnJm8i9]VmjtP)Ou.6U`+g&uf3"U/f_uNt6_[mh#$@NX_VcqfG*NW83dlQukn30DouX@6uM4$#:!J2e0U2Hae'c
%Kl>LCVl*-^*hWF$pI\6%8,4XrM@g'5()3+j*Fsr4C.9_l7RXf-,Z)/G=QPj1UJbh/6!RRQ.%_#(!@,20E^2#u?iK$SY<DbZ\a&`P
%Qs!)*&G[$"5[1=FOAM5lK/cA7&[V12Dqu0V1o8-%bKSGu6hB#eG8KX/4TEreHX;ZV6R4o_R;[1q%G=&:]j&P`&\bYsjsC&`9plF2
%\+jJOp0Gm/TTHO`_pIiKm.i:U_2]Wo2s5((U/7Tn[(dCr:M84*W+%0BXI4rB9kK_i&5m&$XhK=sclCc.->e,'r"jR=eNQ>NI':@s
%%IZ`:3CH62A'iIhJP)#X/]F%EQiub4m4_A2P4+$RpBVu(D%"JXfqNfeiUJSX@$&?mP<*!(nBm_rP1:t2+W<SMhLUL`P#OmMC3\]r
%Hn$IIJi=Gc3AjE$3/?-f=_@6cnLs;PlJ3FUf]@dE8j4dp`aG;%Um4_d*'<X;3#kpc#C_%9i?4:$iJae"2'G]jP#]I&V4>omj'UP*
%dYTF?Nr$5H8hF\P4=Y<7r,(!'KQP<PF&-,TrsW_mhnp$L'gkqX`MFhqeHA=s\9T8??Jrg%hl?(b@AnSGCWEU(!s031!V4=0o-[I@
%P$2#-NLYLX,GTA0@Xjo1[jMoB(hOk^rn?cp]qh3>;dn-F!t/Dt"`$No&'A#8]qJPE5qo!T/ob>GmHBVKrUg5f(;,4Tn;eS\UH[A*
%`r>?#YO*D_H66pRDifP$6^8G6$B`&T*(R.?in_d3l+p1ffa!tt+SAfH]^M0hilor)@[ZR+O,ne`$,8\(hAFPe!C*)u+]_*RWJ;_&
%dAVW-8.IA>1o#7c`[^S<RRjP0E'5jE39S7;d$?9Qjl9_'4U><T:aobo<8cYqWP>PPd$@&Q%Dh]s+"2/>S_>&,CJY!>QNo,M0Lc1;
%JA</<IsCgj6h3+c'_]Ja:0NtKdZu,&^'3d*QJ*cp#Z"N#EO,d*,8QS%DZ)m\&(VF$<FAa+-Md08?>RB,<`sFrH-psDc(M!e85GAl
%.<;EsF%LiO%8N`3d6#7ZFf5*rlPRuR*IgXhN'BH)`Vi/#fqGRM5_;%a6cPJN4n:qtX[V3s0%Dn">9f1?W#lXW><cY)1n36"d'h)a
%H[LA\cdAjSWX0bbM]k2UnMpbAfE%9<V6s3f$1c2^E*Xp8!>Y@H_NeaD@^(C+U0.l9<L9[L55s+2$`6IbclGM++5IpEZmgUoD4MSa
%CmO7j9go>m>'6,2PTs-0`;s%jGHhUMf.,!lo))SPN-YW7^on=GKuA`RisC_i+WHQ\'?*#rFdMO\FMTQ3F>0)T[qTV#Uh^jAP)UJt
%pt=\7SM]%:Gu#a7952Wh7Gp1QMd`jGl5Cuhd7a3>4b2G9\Y-JY)p@?)!+X+dA63B[H?fE.rC_M'jXV%oaF,g[p9k^PhH't="d]bZ
%Z3L.+_$aaVDnRg>C/_GOPU9i($\M56?+UCc.a7?GH2aiX7kKZ*E6s;D'2mlG/O9V2(HsK9&l>up:r]BuX]5O=1t/Ia8E9i&S6*hR
%N'o+b?rL>q4T;G`lj0S>7?DJ4NHJj?]X7p^E9(H:*Q!?g6JnmS"uic%\'KTX0/f!Z^<^D0>>PX8&Egt&?QGpZYsF>.lnKUL]=PDj
%$H26J`-9<Go*,sr"0Rbs/]9+&KRaL-dRsZD7I*"AINBU2lL*aVie$U<8jU8a&Vcq=/3LF>7'?mnDS5-[h]]!6C+-qDgg]'uFr$8D
%DCu4j#T]E_c[Tp>J]:kiJOL_XSl&(NpDO0F>7en1V7XmEiEaNb4>&M<X@1p!Yem6'<d)BnW.H-=aN#*AnJ6`fB*ICrSO:2EZD;r(
%R)7e6LT]3OQMOHK7@]<1f5lN9fGB*&:LRjf9MtV[c,.3@*rf:@nuQ2liW+^8j0HJXZJqO8[1"_q-SNg0(p[Et4AD0"J/E76$'>I1
%*FhP'=a(+B=]7'cP@He'JJX@i7GCfOd_so1d6SH+o)\&LjSUTHEJ0@Y!g`$V'jQ8_;+-tjPc<dL+cjDU5^_=pm;D^hPNT^2_:DPs
%c]QQ5#_H<s3##s_>'EhuN^uC$73`(UO<jr.\?U`o&1]=6,4riu\Y"K'^b"-;b/)6qq#%Vtf8hq<?T"(83R,1rUIN';aeudm5VH<B
%8,J)E$W]fViqmR%(9k5VR"97T4fVbmAb[&#7:k2T)Jf;jo3WJ06R5S726b)Vh^MG_6^80p)i;=#0P>"Q/G^j8dNF[?S9-C'-hLdf
%Jl;-=dO!hZg1F'6C-9/E>LD;N9_8.]N-M;I?9iOp`F;A9,lhT)]oXqi4$$-De\di..?j`U4#fZCM6N5j#^"e!-;*5Ps82T\(QTZZ
%<cc3-=E!o\YM;Li>BtHi5KE'jdMd&;7MX1as4*FJFLr64@hZ:DeVpqco)(GUcp#HNlnDX?iiP64dB@CX(((*+*M=+g:0TVgK!4!f
%Jb<Z@h5/[H-`)eH/poGA.[p=s"l?PlCJX!)P"I_B3Djc.3&GT:g&/usBK;$j<L`S/3a%8nAW.NI=Q0hF:;uG*:]sP,\Q.)$:S.Su
%#N7`#mpHSW4LdF'1\p7DFu1M)7JN)k\XYQD=o$YGMG0jC;F-.kIDM.#lj@llhu_T?#FXQf0CZ#*KWZXob3gAD5R=BsG?SO14[^Q!
%_>.V4R7ahc>;n3eE.uZnDK&`4c^d1-9n])&@=X]n$rYNokJ,]dITZ&GYm_RB[A9C`:3QcCD1R5J)_?84pk+ViBGVFK*J-,F>%\8<
%\6<dD>k'5#Pg/8%g*_r2X+Rt.\UDFd$EHgrT>N\u+61&:6^q?M>#rHOq9.CPJb!CjiF>_K[RDYM<(Str%9$VEW%>n"QgNf@][]Fr
%%(?$f)/SUCn3_DJBq&MZ'8tX0:&9h;m@m`O3c/>8fCW`Tj'+r1b:5m#,GI-0WBC-d\^L-?nLm)jO_s`:EE-&0Kq[G5#GE3Uo'/$0
%&]:4`V6=JV+D**ej@7kJn5l.?#%#-QG-a[2jl>r>gd-Un`DqtI117:V;CclV'hst`oqekqWaPF5TY;]T*4llrfO_EM-5&<C^Cs.e
%)%<B)0qh<;T)[d[m_P\kge'h]5[!?_j0=<%!19$>_lKHS>(bA`D'h_`U7`o/hA-+bAUTIo/PtnN(<qWt^U4:3EQ$))fObtNi',eA
%P,X4`m!1aO<7""UAH9"MYC4u+"6Uo:Nd[0h6[rm>"ac4JO<1#5l/VBml<ubt]s$qjZ"'dF%fnN>,3n*.m2Xf^>:=!\@";_>!DgV0
%5ti/I?edK<qt'C.,u#ZpN`Fj6q#"Lf+:?/MD>j/dHIYa%oCn=GrqP=,ra#Ems72M+qXK(4jhLfPs6edTiSX[es5X.W$_'ssVuND(
%mc_SNU]HO**WIe+CM<Y9J,eI<J!1A;lc6bDd.]d&j59n3%tF=<^\],1rQUu7T.U$;\G1Q"pG[U!G<,Wt\GGuecT@<Hr@S$7+9.V]
%Pb=q%pE*aLe!JqiLZ>T<I^K(>]:@aVrO`+-?dcQ9qVh4is7CqoCjDaOY/:no.8m;#I?.=sBSMnXoIWr:#@a#07cj$iI.@DkbH[e&
%2F+DTj.)Y<6RB_Kd1")a4[.r3<J)h*D$,T6^^H/S"nc2Hq>gP?*@,2ZRWi_^*`!\^);)53qF>0Wos8-ESG6m;45j3BR`u^E'Q?&2
%EInT;p((L:!N+!$]rUu(T@?>=m3^lbBL>1#[IH,R6@c#iYplA,a3R<a;t1`uV1.dpT[>tVc*6],RZE_aB0n5VA^hq+m[r#6QKD?K
%oU1H*"Q^^APbKY!T,Dml@k$C"aKSN.TcpO8pmAt*c(!f-p=0gm^glAla?N\u#p@4G-MIQhaY$'GUD\<]ljKenYiD6O-h.Mq#8H>q
%C,S>,@=$QQXI#NIRh6KK>90.^\<JXt%:U*^m@q7+lbEp*C[64(<;[KFDth$;$\L7r0Fm_M#p5'4%S5'5l*oRBPplX`peL<Eg<d(R
%_]_rKP3Fh\$9Q9;bQl1Ad1CDm3j;)6cLFmG1=YUlhpH64c_5J<Vai*.WoDKlWnXt]_+'Z@'Cdb9cNsgPA,dN(!MhQp>#Il>Y$[CT
%a:E493hH5CK:RePJS+-.0FeIMc`qP!V@C3d;1Q^J`cXi5i\17XHJ"AP.C;lICU?#pe't=+!ge+D^Rtn\XZ;bN)9q;\;hp$p"J5L(
%"!t3;PK/6YW?nYg,G\1#CCV'm:Q_bmi)sg/BnF-Uc=/+$'TUKga@o@P7M'aeR93:J+mmH#D6U;b,t.g*3@kKCa9#[.]G\piDMeZ>
%0/R@eJ3.N+!lKbKaW]Jr*6S>&.YDsRJCZS8&Z'1MIRDk,X*Al,#bmd@(HZXjgqUY#-*%Ed)gkF8(:E:8FOLHuT>NCuXW.ARQnOM?
%frI8"rl$8P]BN$PSMQW\H<KM@<Bo@<j%Q..D?))TDok:6:Eq,KEXhDjM4JRbGuO&3"n\Y$W=tM\+_ngcSVNd\mA-g,i5U0^FX$T-
%8!DL8;J/';&BYb=A'<RDR5a(j`G)h([^DBnJ;W@'gT$"oa(X<d5uApnbQ2auL\le6VIqA:\`p9oV5G`Sct7klG`btQXqPIM;q`4H
%0#t,jrI9mmPpsGe[g1i$.Z=gZZoiGE;3+PC=h&t_E5<A^OpfYLc7^A*RCEG@B]G+A!F&R,68"1[#(gYG^G=?%HLnW3_@,<&daE_A
%+gV'L^Q.d>FLlm>U2"F1LH5k\!]'-!08]C<Wc.Ng4krgcJe(U"FPSbsTu8o'd""07;UN22<c_1QD_7pkD!T^u#9XE!nuR-5E#]PW
%8<(uTi)l$-F&Gsaf^881<`.`pk[:QG%^H^`U%+7)#e:%DPEisE?A2=T@o),QHt#:QIj=f9I#E).lpK'=pa*s>`G]2P]`[7/J!%*#
%r]IVs':L;:K[334$bl)f&\)W:qabM)8P\O&6`Posk0hNu`TU+.G;QI5gC/>_4IQK_OSSj+CSej&i4U.;!\?<ifkqb1UFHYdAic8J
%%T6<6b;u/lQ>F*B)NC<[4e=do][EM#O/]$e.T;N:LX5JpG[o0?!.3HS:p=D4O9Up/K<ke6'U)N-fQk)&;*\IPl=@(6p5rjbT<B+9
%]<!c3&p*q`)gXGS!h3iF9Y7_Nf?J6hoDfSR-T]+2,GfWRC[.`MY03II-B'eUC<1Uc@V2+^QU'/79ekuoF_'o`JC"[jN.;pCf)g7c
%M+=qWlCc`aj6,>`e!3`O@"Je1HQCHum-u>jFPj,9\_c.4%h]G^&%K?@\]ta`UQnH'`[LIBp0'R*>ojJe"ktOfa];esD^94Ya]lJi
%jLFkLN>Z(JcKsS!M.<P`3K<B73aiV0k>@,(V[ksji?f5Y6T7X"(KC5F\#HV5imb%rC()ZuR/oJ'ppWt00_\A7&d3O-Y3%_7%$V@"
%JOGNG]&V;bf\DF^pPt+'ij3<OZ#b:.*A@K-^_i4$f!L@A\HkG1.oAec`*Bg#6&&)A(?QaS^[06\>6hQZ3e8,Ej"u;AW6?rYW,Wg3
%0&rS=#$a]?(cj-OFL1_G2YqGp3p/VbE.DqEnaFlG%Kt@#GGE?ekbo-TAd.o4<g[^uXmXA0iZ)McO78o]RE$GAe>WKqVbRU"5Ta*:
%o'!#f7OR2?\\Z#f?lY[?#aab*J(ukF]Zm\W<P/0A%'*1uki3cQn'\`@>P;e/rgS(GE_(W%?;51ADqV7<K=h"<3RE6PN_QCqhnE`e
%!VBT>D/thh_nJhde8O$N8R1ruHT)7E^Ld0%I/AZsRlk6=Y_/-=ll5Y;&rh=_/l"a=DqN,#qet-/nag\QbAi/Qg<FViDq`OpTP=;'
%mJNbobMPlr*2/!OYI]?/'_>AuBq&.)0?*o"p0i[?fHsbMXa@I"<3fu<0bhP%4#Js&qP,VemaXi!0k4tg7]6QSHpO9HZ/Lc&Ya1OP
%TW6/sl'N(=Dp!N;C#N007AM+#OcQrMm?HhHdC9<WdK%_D4>,!]:28a)9,g^^N<9K_gC,_l.h!Q:^NB93?#d8d^\jg#SuLK*`9%?6
%!R8En*@HbH?.uZ(W_EL_Zsdt=kq-@Ka!Sr'6[l9M&@CEYT>KbfoE<Eb'&k<BGHEn9Ikm&.k=$ThoFu?Q:ILf;MTh34Ohm@bp&N#>
%4r@,Z3'Aa/M_`JpdFWrWeO8#Q2$\@WDiQjl+n$l12N8nV+GG:'07-??S@C6HQeu(J^:FH[kU=J4CD/[QW-]OXZ0Y7+A_'106NLR_
%hZGdj*8_ZBE)=qsnppl6KCLN:$'4HbGmcP-F!AoG5SiMV^g*WQ$OVSK9eDHm0V!dZKoX&:b4\BM+fN3dFeFtKMHsoI#]I<k!nAT2
%9anrYEL;7Fb<+,Q<BZ%l@*%lfl>ce8pE/_W=U0rU=O#;BoTRVnl2-mgIq;Sq^"jSC1?743)05Q0*?/>_gIK;Tq!I*O;YGG^oGnFR
%n&.^WJ4X?.%g0VlNY*drh<9`dL&m5J*FFW!#4@=*Q*adWkkoKWcb>q`id_LXOf.J:-?P?-arOU+SmI2ra\R""2]E\V.4"^7TKD=0
%0tc_YL\I/,W5)_e#uhQHlrS_APc=U2^>&9$G+<H"-*Sc:$MGLS%UCk*.ZAUtJ;BJYR:0%1$#B(!8>ka%QAG)VGK7D2cZ4K^P3hER
%ZT?9[HM.ET`(ogt&q9PKjH[IVWap%^qm'6:\G*R>(8p\'o[a'?jeT!Hrr*.7ZgE_sdTtGBCsoQNOW!-L\gD3"h4PqIFC_OL,]F(%
%a.?<_Lsh-<[`B6l!;?6/;0ASd_F#+GP.FiF8r&<@OAAB(SPT:=W<jX<LY7c+Q][qkk"\F/$8s'As+kUGqmM+QAT`K00oC`>FhGM>
%qr&(+\,FK#@1N>sr'4ofY]boL!kO%)R$!JHb?B^\#!@MU0ZH8K)cDJJYi#6BY&C#8^MXja5>7905_c.&NoPW)`#H>FV'F+&c*+)U
%`3E;jlf1n$5C$;sG4)!YosM!JrU'B#)"=\AM-bNup^,LD4@,,0921mb't?Z84k:bBEIJC:Gqo*DO4bXlTRNag),f.CD`'GBW&und
%H2^u3^UW/HU>,?u[(DSp!@o]1&R_Z-CI4&f,mE4'*NZt_(?qn#'bR3732$kTW5p_:dcQb.V7M7H/b'fog'*ss!sc<nQfg$pia1ZI
%2m.ak\u+Jp"XTVZ]GcGi'Z^@LjtLH)&[d8ZIkiXTBNTH@^@C77'6bGZgckP*_Ue@i*)!6Ko@G,B7u6,jk:cKtY=m(;51?5mKa#'g
%hCrTiD/`/;Mdp+[kD<(V]ZKS0,r\HC\nYJI6DP_=*(%YNqm;9]9/fWI*YjQ@,l#WOpAO2>,::/fJ#h022P6IsSR7,oFM]1u%3u$>
%]],\O@F`N6$#o482UW:$dP-^@fj.st,=-EF%q)?<`bSYjp5I>:RH`<-8e"P]-hkuk9gs%sm)Q`PqR(Mh0F07s[U)&mfU<NLi+nPF
%T)0XG0%Xl?+'[qP,Da\6qW_PuG\oPM<Ym];Xpr%Fm=5nZ!<>/q"!pGD1C.%'@Gg"k)=WR>Q6j5fjO*5mQ=TPpRm7d+gZN,H@$dGY
%bObISn`iBPGL.[W\4?K%`lQo?,"0d/n4)=--.M7h%Od_@KS(!Df/N)8IJR2=TXtao$"(_E$3\+B2JRdTU0jM+e>kY?1.8b]!16;U
%Hur^nmIk4QI+lG'K8l%[btEbbmN[*X\9oF'<P=I0J(4cb[ZnJ1LGKQ>;V#RQ&b;O"Hi<&1]su[eElLpuR+uJU2fJAEM,cF_2%9.h
%qm.Z8DB08WJ?8l[,dX>b@TZ"2V1?hajaa(baO(J#iYq*;Q[3YL[q91=s'+7.oLO!IfD>XG&%^u7!0`gB16;-:%2]Xa)t;Ypg&nI.
%D64u7A+[N[]oRt[.r0?@<2EfOSQTJKa^BM/GjN\K>"K1_0;q_fb=C`5h#eI7dn2Bt-$Km?K5=tT_Q#MQCO&ud>&k./jEmqfR%U@W
%*K5Lod%51Ma7[!l^7`:0b68-i%UjK#.Eo2(E7@*03C-$j1nmLjQ75EuF.4OGUH1'I,if]1@B^J-\Ns:]M$jD&h$2#8<Lb!G0&$+A
%^)0V;\,4)>SD:Ra]mOf3Ug]k]!$!sM-6-TgoU_atS`'Tm=MamReoaM.k7p)3YY*7Y1)Ya^9ZWmX7WW%<j/+nib1RFA:l)J4J+Ii5
%>gK#2KQ-I=bF!7aj9R."aGaiMiIeBE)Z#un?4?F;keS,!RtTST\BlcS*5GJ+`uPl*RW&s%&Y.\/5#:rb=APN->jS]""5I^['Ah%Q
%CB=>Q!J2;f9[_k!"[^nIS)p1"'@GLL:1i)QPCHOtf=os(<1`U3,2*5[qsFBeSh)g>IdXug:s'4m\`KuF(d0'Ohr0TcOcQ)SLCF)K
%Paf.l`YX41Cq7#GA;q4Bhn6=Zo6hY1PN>9I()'pY&"abg*'V+SafIgcf4_cJBHF.Fiqd)7,$BG93'O?9+O\Qu(HS)/l`26\.X^/9
%SMpc>]B$[9lcF0'"Ki5niMPDN8@eHpf.Te(%@8#]1:TO/7Zn5E#_!u>^!'hsK\U]<mf"%PGEI1CG(3UiQ(.$n6OTo3dau\TPMDL?
%)X!@I]10paDWbGBaNh)*SKe9ia="8m_-1dd`K&l;C6g"O=$17*U^L$P[!KIT%I;,V'-s@a>>q/XI`;UPl4,bu2_PloI(*@oj;RRi
%%V80f%'H#I!KJpeRU7Jkdh%91S9IO$!(VX=(<_+Hes#2"!8130=`-Q-g3^@r:>rNrQ@!IgNh(3cr.=+a41T-?nO[W6P]Vr!PP[DB
%-d)s']#KMbF,WX38$1O/jW7&aZM-qZXVjC\HdOisCNBdfjBbau^od/+?M+KS-=$nf$&3f=5HH6U]q(%%'i+#D+R.6g26)+/lLWd0
%Xss*olLV#5bJHL.2,M/dgfs(8l3O#D-'m:CIW+t9ojkU1$fqllBq:G-<cW,`cL5?t8E8K(T6m,];-*P+9Ilm'SF7Nb]To#U@p8'I
%@6Ic]eoN'Y'j'YJJs-#c'i6I0G2'8qX1+/FhbAIJP_c\NlD46&ao1Upf1"NLhahk`OS_)?-d)ro`Z>?$RW=J=h7,F2Eo5/A[iKTp
%^#MY3hW+Ng![tK][Zh_rPg\`1@#+emZp([/T&99sojkUAQn_"c6#2"d^TJGWN<.#XFnO)*5Z'r]4O.GtHgLg$&paOXqa>>l2HjZ4
%UB:(OJ!C"$=l%'@BKGC7598%3?UscoZ'U,[+g60EfHd_0rFG@L4r$)G0HPa,V:^^LRcpbi!j(?qJLrXPREFZg,_qEQL$O:aL:42k
%\A$c@eW[sAnXKGm+B]LZoRO?=3aBM9WXCPVOE!\M'P5,N\joH9F`O]^S>.YRIH7R=%*?tX8<_$_364UVrpB]`Sh)c;+Sf=;<>[Gf
%R<Q8NfZ8uhhMS#h"O<OQKg"qmaB2+%'-GRscj"ubOC<p/bg'e+XsjhSG(3Ie()rR*^+8E\>DTs-He_`M/sb:pFHk:U+Z@]^SF*R\
%c*8l`e8/W]k'd<A>dKF5(kutBYgsnRfY-)_eW[u/%[@YW^6u=@7t>.^oM;_hK!!^4[qW9T'SHu:^7&p.RqoH(JJ;S^eUU1m2k"T2
%9=EaoadhbaW1GP`Mf9NWm?+^a;A"bFiXO-jJ5(c,Q;!I/*`Ya)UFoZTl#7RqR5s$(`?N'2^KhQKc&3R<r]/`b;*@qG)>WlBe)(i)
%Kn(8"eqee8/,:]_;0GuS0t?Ar*"9[koX..O!a*IKr8c'n^gL16&gcgeIT:YLf'F>:]Pf/?m:]]^-aCPA[VZ]GkA3UfJ?`li$kCJs
%#_7Q9Gj[uR12Q)fHdmB:p#1nR6?EH-ECZNY,7=EJ"@e.`nq'!C'srdWJ1L+B*Z;V_0M@@N6ur``;V<FZ0it1Kh8S;bib>WAs72/Z
%AQ:4=m'(5s5o;]]X39!qos3^5'G\=55]-Z7_aig!*_?VMjpN/1K)&LKHn;1V)\O!K0)F[ob&(A-0qH*CEG@-UPoh#,VCb!ST!.n]
%6s[Xh>-lnC2OE4*5"eR"/ZOs&O]k_W_H'`##3AWLS?9b1)e57D5^$tedAKCm`4Ts7G*H@CZ(p@9UVPIe!S*EqTi!-<"9LYi9$'0R
%r,rT]>)htO8<WZkDLc]\Eh&bh4Iq5."pPQr!L@@f,3!@inZ1c-&gcY9#0H5lDS>i3;bnNDMFfkDd^d/ZR%Z]>k4s>XVmU1YdpdMF
%9-7qXNT[&'`Fr3;q<?;/9M9)'hXe&C5jOTJ3a%">1IZ@[h>-_iY5'h"g!;sLB('"R1Wi,<T%\MULKsH26ku`5aN[r;d%pF]p"`/%
%&lg*$4_6ZXWl@3"rmZ.-Y,3cU0@aa%N6%:s's&#Xi6Tp(P+ST%l1LQ.jBUM>96q4)%f>o^(%^4-le-[(i:hV@gU$9fJd<"e3!,7/
%#hJrnVWfBU2H!IngmhO3Qu/dpKPS_`-5`Q*T0S]MEO%8(-!)W',OpqYWpl>XUF5Du1i@8l(9;UZB7=gDD"ZP+SJ[k!muR0U-d$Pu
%PJ3nSpu3urID#!sMq8=LbJH0&]%g0Wl?ojLbb5P%d=<37LW(=M>9L8:b/Lo#8t]Cpj8Ed0.u-[]GIJ1G`TXNued0`X9)RT\9FtRF
%c?`K\?oE1r9H^.'JY^P-N*q$Pr8#HUDEmf@+/.Fa-nB=-!*?22`];JhSY:JX/1WZclOOfihgD;%;i7eZML;K;pOM_QBFtihAaeO5
%44I7jG3!qVlF`kBYV-*E\Opm)Akffu8b\ekm,seLCK8c^@!sJ(42IN_/<-`8,Q&%4;L@6R<ms8&!+b1[VJOVdNi[a!Yr=qHUZu#N
%Nu2\`athE[MMPP5]P?/Q1l=R9's_[bBC3,P>;B)^Cp+A38k^5#$&1p8G6:sh>R<6^e#(4%Y,XQ`#$0ima[^DV'8K])(8i]9k2?Q[
%)RM[u<.<PG+r!U;ebD.+F&l@kWT,S?QtgXL!NX4_a`:NNXR@"2+0;Hd`H9kX#.jGiF>\DE\FgJG`@.BNMR8[lbQu:j+;lf&H.?Y'
%"RIO'r;\fb9Lq9W=]W+V@1]F%SY$(tYK"tqIW$n!8G_8g4I6RE).mhS[U-r$q]9?.0<>j8=3oFBAn`pt<BPG)`K<2T:t")@/PgGI
%I1Wc2S1W``^gl#DBU_k!HW9fL#3c#$kXuI"OW86TYo\oNF%1;MJA.),8e`9CU)[oNkBpK!6X'X4`,7Y7H"ubA_H+knL`^Xu(c6YE
%Vo_McMI85;0e[A6]/E'0Fn4VXX<njKZtg'$hepR[l'*K0T=6N"=L0((Bu+La@Q$.99SnoWbDPQs`Yk/pH"%,Y`Da-50`dl`iV1.p
%7"[R%Hh"K%bU*=-Z`7MF`6MS(U:o2Lna;&$8in-H&?:&%L`K1_UR!'$D"sEk4qluWE&m+Q[h3s$>j]-%Al$RI`JfK@:`P$pZanEU
%LqL!PJVp0pjit*P1Qmp]!]Dp2FO#%,CN/Lr>#VD@0I`AB@+?\SMnE]/d9WPMZKbZ>R/CDL'l@/q^]=(H`W06e?(;9_>_(c!+'g$C
%kG;c*]C*h''"p.al[coU+d\N6f#rkC-Q1XB8ED^o+>@&ZN##nXM=nYn2Ft6%,`0J!1K8:2;#uWbQ!uhlpd*Z7aZ/8gAQpn"&R?Ps
%#[l%J#@1'hLBq;rcM<i!LD@e_eq7uu+S<7?e,=)hYN4al.i49Jn@)Q[NBBBR%DY;],NX9m:sBgWJnhI!"lpL__lEFE#k+a<i%&]G
%4^F#1k#+7+\gUfQh[ou!J&D9hMjUM3cBkTs8DZ;-161/^_=*ttb\O1pDqk/\hm\I:Mp3S#M;qj-U&-3]IOJP_`ejckf?*qiMT_"!
%O\>?a@?M9P,?K7!()%qsG'!Ct=ipl%`?hR2oVf)dTqle]mB=EM,ho\K"2X'`)q,:S490OFf($G(_i(j0L'3+ORFZ"hd=bGL=q"*P
%/tFlATjFnuXRmeUZPBsD/c8$OMJ]0=jfG=LZh2lmQ-<^Kk)dsPftEc1?JhLTL4*\e==(O<pU"^UmV,P7_T1AXEIt^T("qXso(o"u
%NQbpQcS>;;GiH0dS0)\cjYaX;S\(cg!k<tL$9cIW<M[9CUfm^Pa/p=\&]0ps.;&L1I4\_0&)?gh%($lOG\^W-a;miHME;Z4.,4K`
%1gHj[ZhbuRO@/nS#tGYN]7.-.Dkj%M3;g"9V%$6F$@(2Wo9.k@X<#[O55c3S_FAomdb@d[?pBgSLKUS.8&R^N!c6cuB%dqo4/LCA
%=Nc!eC92[F.XL.6m>^&#_.fuC'AR8_8'9E-RmP_]$p%U-bd#+;fV0>eO7E.ugIj*n#i5k'j.L-#%j^P%/t]A)*(EuM2JJbu]$*H*
%)]/0<lD.]8k/B'U@.W.uHFjAd&uncM(:r"%@m>'1k]IscZU]='BU[EU[]lhUjQ$Kd`H,mQhA96n@.6X<!2cKT)%5uu'9Wu+h:/EJ
%+P(j][A].,O9kXj.7%UR3'56jo.Vct"(^qn@b`83?'/OGg4YBcYoh"Xe3J4[hC!+@)5h^E.m@C+n6BNUnR1lBVEm>-[)BQg+o\9H
%W\VR`nhHmVc!4!h`A)EeR`4PP+s.02?u$_?jDJub]%Sh2B,.^;BWXkaSp]:87"l0$3n]4*.uJEE@^rKGQV\c;L2#6_T1$Wg/7au^
%HePWs,big3_W0TW?heRPbCRF&YRJAAfE3dMXW/Gd"1+dsSU`U5<M<.9#06&6bp'=U(1,X22^M%,J@MSjM`21VP5bju@/'C$PEoIi
%OY+Fe2'R34nl?`&XQ<acq]]`<1/>Bh.A2!_&\$@G.a&GjKtV#)VM46g3n9V83@ZAdN>P@)-oj_Ul?M!F4kBV/hG,ue)OtPr2i!<1
%g%84ul<^];/oY0W5G>i&]]R:CKQ.ArI1@s\3B"X3oPPZ4(<fRTCG?)a\Jp<ZgXJ/k!$`tqA@q1ug9XFKEV,F1jnZ6B!2+j9Y))E^
%^;XP7,S%gOQJlj>c-m#Y1:RtH8@Y'^KR5"sBm3><Qf"!SjfWU=Ise5@!1L6L$j?RF,:3J[l5hYmn,m$6-K*i92AGrUD`8D%JbO]"
%_"Sp)(J(7oLr"T`GfXFR%m4;Xn-:!h)b:)+LuCT?^^!O<^Aj#Z5T[a3bQeae5%$YFr<H"%^Aj!$JKK-XN$&qr,DH=kn>2ub+9#/J
%Jfj.VF+UIQ&VGZSj8kHrmlt8\"OZCN1b5LM+#,<?N;K)=$_C]9(`,07+#5Ku+.CFHH>1iVetkHbMHAtn,%$sVp6Gsck3s%4Pt\Z(
%ad4bS[0QUq\KA6Hdk*.'OU$4eX%>7KmJP(:hqduD,ETus25+&6@1DN`K-'[F"L9>h@K1IN_ITRF(94td2?(.&1V+br&LDpUoSMN^
%^_u<`$o>?P3&*BA`SjUnUo8T8kXK$(_A.pZ9*@"CS_=-?[Uo$:V!'kkP/o7p/M:uso*s`VbNcu#&)\8ebl+T;7dh_kX=)]PP#/AH
%VVZ*V*Xr+p&L/49=LKQ".Ct@48gLq<L)c:`gLSOD/jO&eRo*\MQB*Y\:.kI?!oZI]1$Gn>e9`b)GE8?!-]fu?`-[`uAD>]$UKg'9
%54+P!kGN)c?m*H-KC@ReRA)9npb?A/>$a7djSiI1qm2c4cQgSdS5cDD.%W-,^nS[&n;&E5>CW!Fcdt[ijm3<I;G6F\[iJE%jN>HA
%'8b%AV/)jN!kgUD@jP"ci\aV8Q#T.*97Y@tC"hI\f'%cI%\;OQftT(RP1hOFNB6lWCX<s96F9GT?r!VJ\0Xc46u-XbCaB>gQGTUd
%8$Li)PH@?%,[FM*XcrCWl!Jm(ei5;=@Sl96$!oAi&(22VPIoos@lSp3^.)F5Trs5th"78'#[#DD,"1gd'1]qSo%21e/k6Gf!&mjH
%Msl;r?h4d&>OQu,/b_(7cI6S4(l(UhU6\:jD0mK(GjK1&f,<MZA7sY=`;XKO!N9o5ZqdKljY1r6EZRmqm[/d<k).BHl\,%M`pEs'
%3Yq#Vk[a`SZof<eCUmLkBAsi:W9HGU7skY-)B=U]?g)J*,*Q`26Yk@X5'e57%.,k^2lFN"4\M]$iEhO]qN8*KT(7Z)kegPZq\@1I
%Ih(jB[E/:,V>hN<cGjVtp?FVLN%Fui:@[U;o0fqDn3pZW,#U"pZSgpgNd"9*qTk:0N2fqa]`"[%UZtDAD=(8G8$;$Dk5@8XNpMr@
%h;lHEUXoP-cr.NfcQ=aRGKiLKjRNUe6UT&YPIG<KEO`=AS5,f'27.].^+k-Tg*C$n^=p-UQTQ-YWfu0!Y;W6[-b`cenTPCK4_J/K
%oJ1q:g;V?cp%f!H.BSMK>0_3B,733;e#S2uRpRr95uI`Dp&1)@rc;Uaad4`!cZ:V&QK[TtrCH9#::&PJM1Y#&jEY&)=im%o@=Idq
%Iu^VNc(&3U^V6>8;T#/3;WYeploDB-HgY-q7r%tmmZY$q=?_#t4pD2r_>m0J*+'0Ce4kQT=H1'up42rAU?e"/XSpNCAm%6jl4ZId
%j(.DQ;s_\hSSRtlA'0Flr&$;V#5dqZ)RG5K[c\$4<o5]'AA=Q12oSH:SkBei1+Fh0mSu":F=*M?L*32t3/XNtdf&@I]?O(MnuM/_
%N(p?:%,VQG%HFH#RRcG#@:"^NYh"Q4IKu*4YYFnP^@uZ)CGUH?L=F\oCCu05%cB,UY,/SgM_>PV)H(ReL_m_DiM\'@.pa)i"Ld#]
%4-u=fiiTrhe_%G(;VBkcT23I:9%Qa5dnB.Z=1gcg0&)klp_E@:!<R&CN<h>rLt";TP%UGm)=SNAZ"(E(5LjV[OB"$ni4bA-CYV:i
%,oZL*s5tY4[[R>#^4PA2"?N`D`kHb.2f4]nX-H_=i,nL&(ho"?\%(:/YCWfl6iRSg42Z8hM=#]Xs)Sh(m<0b8YMd.*6pJTj'3?8+
%AJLUN(YBeL=[$"k3o-;V@+p4%fVKe0\&*T7B3Lhti`Qk:B)nRYKsq<A=%J-<$rP(;QB7GYors^#AFMl5YUhOi]Ncc@aD-8<C8U-a
%&Ao(.-pV%DVM$Y+C[[l-ml#[]rY91T*])dcUO.+mNN68[0OXmFJFScjoggPO9*Ya]:44'L%BB5S6Q7iK%-]1&DnL8n)>W!gMt%PQ
%XX?k_S]G$Dm^.X<YZp0KPqa_R<-YF!IdjdI+W<;'[tkMVAfC1Gh$PopG4WEH59o(dORi/R<ZZm)\Wd*IIeB@6VSIeHKAan#o-qq?
%:I=8_$8\'S_4T1/.GrK,RV]+G5(!b/[K"RpGMo:n$Mi\MEqWX&^+d*^2jJb\b%Hgs-\i@&^'q%.H_aTPM_F]O(0*.E7]F>lV>DWu
%\*n=SYY/ck?7hG!0NP7=6eSX16&*XRe(9U:kRqXf+sY3s:JMuU+iE:o/Ucm]ahjaG2%nk\OK1m5C\TG^1omL=SjBNaA<<i`+83@k
%#-&u%>en$&aG"TDDisfpk>)P-;%2!TYU6UN`[3Ga*S0nP%"q0+G?lok143nc0%/kbOOWMgT[K0?_1]d"F+LErI6Ujoi461H1Hl,/
%>0UQq<\iolW8r$^&El$0@T.LaaGCW"$r6p;P2\JaH0tR0ilu2P^I9%q[t"F=\+fm\TD/B\dng#>r=<fgJ,\IMD[kV&lOQ4/r:ch5
%pohG[r:ugHr:nGGT0@`$_bWLja,g7Kqq&;Arqu;Qs7u!,+2@d9c[YmX[,@d.iOeRXoIp7:bocp,X63:+~>
%AI9_PrivateDataEnd
