%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_kiwi_bw.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 774 431
%%HiResBoundingBox: 0 0 773.1978 430.2667
%%CropBox: 0 0 773.1978 430.2667
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_kiwi_bw</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T17:38:41+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T17:38:41+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T17:38:41+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>144</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAkAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYqgdb1rTtF0ybUtRkMVrDxDFVZ2LOwRERFBZmZmCqANzgJpIFpNrf5jeWNHuNIju&#xA;rkGHWFaWC4QM6iP0zJGxChmPq04oKfFvTpgMgEiJKM8uedfK3mRXOiajFeGOvONeSSACgJ4OFegL&#xA;AVphEgUEEJ2SAKk0HicKGDeYPzg8r6ffLpWkiXzHrjmi6bpa+uw8S8g/dqF77kjuMgZhkIFBTap+&#xA;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&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:2E8E2AFFD9E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:2F8E2AFFD9E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:3B57EA97C3E7E5119BEA8FBC829CE640</stRef:instanceID>
            <stRef:documentID>uuid:3A57EA97C3E7E5119BEA8FBC829CE640</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -430.267 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 430.267 li
773.198 430.267 li
773.198 0 li
cp
clp
[1 0 0 1 0 0 ]ct
744.915 304.906 mo
744.395 304.809 744.43 304.273 744.918 303.367 cv
745.055 303.512 745.176 303.645 745.364 303.805 cv
745.54 303.953 745.668 304.219 745.774 304.543 cv
745.411 304.781 745.098 304.945 744.915 304.906 cv
cp
340.852 113.547 mo
340.465 114.145 340 114.555 339.614 114.965 cv
339.915 114.418 340.344 113.809 340.852 113.547 cv
cp
347.747 97.5313 mo
348.059 97.7773 348.192 98.0742 348.352 98.3633 cv
348.04 98.6875 347.672 99.0352 347.219 99.4844 cv
346.036 100.668 346.489 101.664 346.618 102.926 cv
346.579 102.957 346.563 102.992 346.524 103.023 cv
346.282 103.227 346.09 103.418 345.911 103.609 cv
345.602 101.914 345.344 98.9922 345.262 98.0078 cv
345.899 97.3164 346.793 96.7617 347.747 97.5313 cv
cp
769.77 186.07 mo
771.852 183.25 769.68 183.316 768.223 182.523 cv
766.786 181.754 767.399 179.609 767.793 176.871 cv
768.208 174.145 765.317 175.527 766.559 173.266 cv
767.793 170.969 765.106 171.996 766.559 168.328 cv
768.004 164.676 766.559 164.375 766.239 165.449 cv
765.938 166.512 764.176 164.824 764.391 163.453 cv
764.606 162.102 761.708 162 762.106 160.277 cv
762.528 158.516 760.051 159.656 761.997 156.027 cv
763.961 152.391 759.844 151.156 759.844 151.156 cv
759.844 151.156 758.274 145.633 758.067 143.059 cv
757.848 140.484 755.184 140.52 755.786 137.379 cv
756.407 134.27 751.762 133 749.497 129.805 cv
747.223 126.617 748.77 123.754 748.77 123.754 cv
746.692 124.109 li
748.129 121.926 745.559 119.313 745.559 119.313 cv
746.379 122.234 li
746.379 122.234 744.215 122.777 743.805 120.082 cv
743.387 117.41 741.629 119.66 741.422 117.578 cv
741.223 115.492 738.84 116.43 738.43 113.738 cv
738.008 111.047 735.34 112.063 735.739 109.352 cv
736.153 106.605 732.75 107.477 731.5 106.313 cv
730.266 105.148 731.497 102.371 734.817 106.625 cv
738.118 110.867 741.098 110.758 741.098 110.758 cv
735.426 108.43 735.735 104.902 733.247 102.082 cv
730.786 99.2734 731.098 101.656 729.43 100.27 cv
727.79 98.8828 727.997 100.473 726.438 96.4414 cv
724.899 92.3945 724.172 98.1758 724.067 94.4063 cv
723.946 90.6641 720.754 84.75 720.754 84.75 cv
720.754 84.75 722.93 95.0352 721.602 92.082 cv
720.317 89.3125 719.61 90.3164 719.708 88.043 cv
720.161 87.9609 720.469 87.9453 720.469 87.9453 cv
720.188 87.8984 719.973 87.9414 719.715 87.9258 cv
719.719 87.8242 719.715 87.7578 719.723 87.6406 cv
719.825 86.1563 719.286 85.8633 718.61 85.3945 cv
719.012 85.2148 719.34 85.0742 719.606 84.9844 cv
719.329 85.0742 718.985 85.1992 718.559 85.3555 cv
717.958 84.9336 714.219 83.8984 712.829 82.8008 cv
708.454 79.3633 705.016 74.0508 698.766 69.9883 cv
697.688 69.2891 692.629 66.2148 691.891 64.9883 cv
687.79 58.1602 686.293 57.1289 686.293 57.1289 cv
686.165 57.1055 686.032 57.1133 685.899 57.082 cv
685.411 56.9688 684.973 56.707 684.508 56.5273 cv
684.403 56.3945 684.301 56.3359 684.196 56.1641 cv
683.059 54.3164 682.036 56.2266 680.997 53.1992 cv
679.958 50.1797 679.333 52.8086 675.11 49.2891 cv
670.887 45.7695 673.036 41.2734 673.036 41.2734 cv
671.071 43.0313 671.989 46.2344 672.911 48.3359 cv
672.176 47.875 671.329 47.4531 670.403 47.0703 cv
664.833 40.5586 671.489 37.7305 671.489 37.7305 cv
665.813 38.8516 667.997 45.1992 667.997 45.1992 cv
664.122 40.6055 668.286 36.4609 669.629 35.3164 cv
668.586 36.1875 665.739 38.6797 665.407 40.1094 cv
664.997 41.8594 666.231 43.5117 665.192 43.4453 cv
664.176 43.3828 664.063 43.082 663.336 39.9883 cv
662.614 36.8828 661.282 40.8359 660.864 37.6641 cv
660.458 34.4766 659.313 41.0195 659.313 41.0195 cv
655.895 37.9531 660.446 33.9883 660.446 33.9883 cv
659.208 34.3086 657.059 37.3242 656.215 37.8672 cv
655.387 38.4023 654.473 37.6484 654.563 36.9766 cv
654.668 36.293 649.825 36.3828 651.372 35.4922 cv
652.907 34.6055 650.34 34.4414 651.059 32.1211 cv
651.778 29.8008 652.911 30.168 655.391 30.0273 cv
657.864 29.8867 659.915 30.0117 660.629 30.1602 cv
661.364 30.3047 655.598 28.168 652.293 28.8359 cv
649.989 29.3125 649.637 30.7305 649.153 32.1172 cv
648.973 31.4883 648.598 30.6523 647.887 29.4414 cv
647.887 29.4414 649.645 33.4531 646.645 34.1484 cv
645.958 34.0469 645.192 33.7773 644.454 33.4414 cv
644.079 32.9336 643.555 32.3008 643.004 31.8203 cv
644.602 31.8594 646.098 30.9297 646.098 30.9297 cv
644.012 31.375 641.379 30.8906 639.364 30.3398 cv
639.731 30.0547 640.114 29.8516 640.497 29.7422 cv
650.875 30.0664 651.551 23.7773 651.551 23.7773 cv
651.551 23.7773 648.465 29.5039 641.344 27.875 cv
634.231 26.2461 641.344 27.875 637.325 27.9141 cv
636.52 27.9258 635.606 27.8945 634.692 27.8398 cv
631.418 27 621.536 20.6328 623.454 22.4883 cv
619.934 22.1641 618.903 19.7344 614.418 18.5078 cv
612.672 18.0313 610.368 18.0117 608.04 18.1719 cv
606.918 17.4609 605.692 15.9648 605.075 14.3008 cv
604.43 12.5117 605.079 11.4922 604.04 10.2656 cv
603.004 9.04297 599.942 6.96094 599.942 6.96094 cv
599.942 6.96094 604.059 10.0156 603.723 11.9375 cv
603.399 13.8516 604.77 15.7344 604.77 15.7344 cv
604.77 15.7344 602.731 15.1211 601.723 13.168 cv
600.719 11.2148 600.079 11.9883 599.258 11.2813 cv
598.43 10.5742 599.942 15.1523 597.024 12.2344 cv
594.118 9.32422 593.989 6.85938 593.989 6.85938 cv
593.989 6.85938 593.723 10.1289 596.524 12.6641 cv
596.524 12.6641 593.829 13.3242 592.208 11.4219 cv
590.59 9.51563 590.133 14.3477 588.594 10.5039 cv
587.075 6.64453 585.547 2.92578 587.301 9.85547 cv
586.985 9.13672 586.129 8.3125 583.825 8.70703 cv
580.028 9.35156 583.989 7.625 579.879 7.37891 cv
575.758 7.125 574.442 6.60547 576.278 6.21484 cv
578.122 5.82813 580.809 5.41406 580.809 5.41406 cv
580.809 5.41406 577.903 5.30859 573.247 6.21875 cv
573.247 6.21875 573.465 6.73047 571.93 5.93359 cv
570.379 5.14063 570.856 5.20313 568.395 5.88281 cv
565.942 6.56641 565.872 5.46094 562.243 5.02734 cv
558.625 4.59375 556.68 1.79297 556.68 1.79297 cv
556.68 1.79297 556.786 2.88672 557.879 3.95313 cv
557.106 3.46875 556.223 4.64453 553.454 4.67578 cv
548.715 4.71875 549.606 4.88672 545.641 4.05078 cv
541.668 3.20703 541.52 -.09375 539.391 1.23828 cv
537.27 2.57031 536.614 2.20703 533.872 1.02344 cv
531.137 -.152344 527.692 3.46484 525.079 2.17188 cv
522.458 .886719 518.594 2.99219 518.2 1.22266 cv
517.778 -.53125 516.071 -.246094 514.18 1.11719 cv
512.301 2.47656 508.18 2.23047 505.747 2.19141 cv
503.317 2.14063 498.571 2.42969 499.196 2.13281 cv
499.821 1.84375 497.965 -.0898438 494.524 .960938 cv
494.524 .960938 499.129 1.03125 498.321 2.64453 cv
497.52 4.25391 495.606 3.53906 492.204 3.38281 cv
488.825 3.21875 486.067 5.08594 483.547 4.17578 cv
481.051 3.26563 479.958 3.25391 478.098 3.89063 cv
476.25 4.52734 475.84 2.76953 474.958 3.51953 cv
474.067 4.26953 474.063 4.51172 474.77 2.27344 cv
475.465 .0351563 473.395 2.96484 473.309 5.15625 cv
473.309 5.15625 470.153 5.01953 469.258 5.77734 cv
468.375 6.52344 468.239 4.30078 465.11 6.25391 cv
461.993 8.20703 460.055 7.97266 461.059 7.35156 cv
461.754 6.92578 460.786 5.53516 460.137 4.73047 cv
460.645 5.42188 461.145 6.51172 459.508 6.80469 cv
457.051 7.24219 458.247 5.0625 455.973 6.99609 cv
453.704 8.92188 456.125 8.97266 453.704 8.92188 cv
451.278 8.875 450.586 10.3867 448.778 10.2891 cv
446.958 10.1992 443.532 10.7617 443.532 10.7617 cv
443.532 10.7617 444.567 11.9922 435.25 14.0469 cv
435.25 14.0469 432.282 12.5938 430.625 14.2344 cv
428.973 15.8672 429.965 15.2539 427.879 15.6211 cv
425.809 15.9805 426.188 17.9844 424.497 17.7813 cv
422.817 17.5742 421.317 21.4336 418.297 20.707 cv
415.29 19.9727 415.133 21.0586 417.184 21.1797 cv
417.184 21.1797 417.379 22.1914 414.961 22.1367 cv
412.528 22.0977 413.063 23.7461 411.122 23.7578 cv
409.176 23.7656 411.512 26.0078 407.825 26.7891 cv
404.137 27.5703 404.926 31.8203 404.055 29.7617 cv
403.168 27.6992 405.028 24.0078 405.028 24.0078 cv
405.028 24.0078 402.227 26.8477 402.555 30.5547 cv
402.555 30.5547 401.004 35.1406 399.247 34.0742 cv
397.461 33.0078 397.286 36.8984 396.356 35.8125 cv
395.434 34.7227 393.883 34.1641 392.606 35.7266 cv
391.309 37.2891 388.137 37.6367 388.137 37.6367 cv
388.137 37.6367 390.184 38.0039 392.793 36.7266 cv
395.411 35.4453 394.442 38.1484 392.02 38.0977 cv
389.571 38.0508 388.833 38.4531 389.356 40.3477 cv
389.879 42.2422 386.817 40.1641 386.735 41.8672 cv
386.657 43.5703 385.379 42.5547 384.926 44.1016 cv
384.497 45.6406 382.536 46.375 381.973 47.7813 cv
381.426 49.1836 379.856 51.6836 377.926 51.4492 cv
376.426 51.2656 374.536 52.2773 373.75 52.7422 cv
374.395 52.375 375.708 51.7852 376.657 52.5273 cv
377.958 53.5313 377.372 53.0898 375.161 53.3203 cv
372.965 53.5469 375.563 55.3281 373.364 55.5508 cv
371.168 55.7773 372.176 57.7305 370.129 57.3633 cv
368.075 56.9961 366.36 60.0898 366.36 60.0898 cv
366.36 60.0898 368.321 57.0273 369.95 58.6875 cv
371.567 60.3477 370.512 62.4141 368.125 63.9688 cv
365.754 65.5156 366.422 66.8242 365.184 67.4063 cv
363.934 67.9922 362.622 67.4688 362.34 70.9805 cv
362.075 74.4883 359.637 74.4492 359.208 75.9766 cv
358.778 77.5234 357.418 75.1563 357.731 73.4844 cv
357.731 73.4844 356.485 74.3086 357.79 77.8867 cv
359.083 81.4688 357.754 81.1875 356.473 80.1797 cv
355.176 79.168 355.575 81.1641 354.469 78.8359 cv
353.352 76.5078 354.313 74.0547 354.313 74.0547 cv
354.313 74.0547 352.348 77.3594 353.958 82.0742 cv
355.563 86.793 354.407 85.4336 353.583 85.2031 cv
352.731 84.9883 352.594 87.9063 351.747 87.9258 cv
350.903 87.9453 351.598 91.332 350.391 91.1875 cv
349.219 91.0469 350.137 91.7734 349.887 94.418 cv
349.028 95.1367 349.45 96.2695 347.786 96.1797 cv
346.723 96.125 345.848 96.9453 345.239 97.7695 cv
345.239 97.7461 345.231 97.6602 345.231 97.6602 cv
345.235 97.7813 li
344.653 98.5781 344.325 99.3672 344.325 99.3672 cv
344.325 99.3672 344.68 98.6563 345.239 98.0391 cv
345.329 104.352 li
344.864 105.086 344.793 105.691 344.559 106.168 cv
344.184 106.152 343.825 105.953 343.793 105.188 cv
343.762 103.59 343.473 107.352 342.79 106.285 cv
342.231 105.426 342.184 106.336 342.536 107.531 cv
341.918 107.934 341.465 108.652 341.536 110.734 cv
341.551 111.172 341.52 111.555 341.473 111.898 cv
340.403 112.301 339.676 114.254 339.368 115.266 cv
339.168 115.523 339.004 115.785 338.958 116.109 cv
338.704 117.707 337.075 115.516 337.208 113.805 cv
337.208 113.805 336.051 114.785 337.754 118.191 cv
338.247 119.184 338.465 119.852 338.512 120.316 cv
338.352 120.59 338.208 120.863 338.098 121.141 cv
337.739 121.176 337.219 120.961 336.696 120.641 cv
335.29 119.797 335.903 121.742 334.547 119.555 cv
333.168 117.359 333.856 114.797 333.856 114.797 cv
333.856 114.797 332.258 118.336 334.395 122.848 cv
336.528 127.359 335.227 126.141 334.372 126.023 cv
333.504 125.906 333.688 128.836 332.844 128.961 cv
331.997 129.086 333.079 132.379 331.864 132.387 cv
330.629 132.391 331.77 132.992 331.731 135.926 cv
331.672 138.855 331.09 139.223 329.614 141.063 cv
328.157 142.898 329.821 143.988 329.473 146.184 cv
329.129 148.395 327.426 139.484 327.426 139.484 cv
328.481 147.777 li
328.481 147.777 327.083 148.762 326.84 147.176 cv
326.629 145.59 326.754 149.375 325.954 148.402 cv
325.153 147.426 325.379 149.016 326.215 150.473 cv
327.047 151.941 327.688 154.133 325.84 154.02 cv
323.989 153.902 323.442 158.422 323.442 158.422 cv
323.442 158.422 324.211 155.242 325.708 155.73 cv
327.215 156.211 325.485 157.805 324.075 158.789 cv
322.676 159.766 326.563 159.266 324.372 161.352 cv
322.188 163.438 322.754 166.484 322.754 166.484 cv
322.754 166.484 323 162.824 324.372 163.188 cv
325.739 163.547 324.899 165.496 323.708 167.82 cv
322.516 170.152 324.665 171.242 323.77 172.461 cv
322.872 173.688 323.903 174.414 324.586 175.516 cv
325.266 176.613 325.329 181.004 324.215 182.719 cv
323.106 184.43 326.055 184.66 325.348 186.984 cv
324.661 189.309 325.344 190.402 325.836 192.48 cv
326.356 194.551 323.934 194.805 323.934 194.805 cv
323.934 194.805 325.067 195.414 325.692 195.531 cv
326.309 195.648 326.329 197.723 325.04 198.586 cv
323.754 199.445 325.875 200.289 324.723 201.27 cv
323.567 202.254 323.043 205.426 323.043 205.426 cv
323.043 205.426 323.926 202.133 325.239 203.594 cv
326.567 205.051 326.293 204.563 325.34 206.883 cv
324.395 209.211 327.11 209.445 326.333 210.789 cv
325.575 212.133 327.84 213.102 326.711 214.578 cv
325.59 216.047 327.106 218.602 327.106 218.602 cv
327.106 218.602 326.122 214.699 327.684 216.156 cv
329.247 217.613 330.969 221.273 329.625 223.227 cv
328.282 225.191 333.114 231.52 333.114 231.52 cv
328.282 225.191 li
328.282 225.191 329.329 227.992 332.137 231.523 cv
334.942 235.055 333.766 233.961 332.989 235.063 cv
332.204 236.164 335.262 237.859 334.102 238.844 cv
332.942 239.816 334.297 241.773 335.602 242.984 cv
336.907 244.203 335.723 246.773 337.442 248.598 cv
339.157 250.422 340.426 251.148 340.106 253.598 cv
339.766 256.031 342.942 257.609 344.704 260.168 cv
346.461 262.723 340.114 257.5 340.114 257.5 cv
345.485 262.727 li
345.485 262.727 347.247 265.281 344.95 263.824 cv
342.649 262.375 344.028 264.563 345.606 266.266 cv
348.508 269.43 342.7 264.934 345.833 267.855 cv
348.961 270.77 350.055 272.48 350.598 273.207 cv
344.356 267.863 li
344.356 267.863 347.215 272.125 350.59 275.035 cv
353.965 277.957 351.137 277.848 353.379 280.168 cv
355.618 282.473 357.868 285.02 358.856 286.852 cv
359.825 288.684 360.68 294.047 360.68 294.047 cv
360.68 294.047 361.184 292.453 360.524 290.02 cv
359.875 287.586 361.504 290.016 361.184 292.453 cv
360.864 294.906 362.258 292.094 362.067 294.66 cv
361.875 297.215 364.661 300.5 364.661 300.5 cv
364.661 300.5 362.688 296.609 363.262 295.984 cv
363.825 295.379 366.5 296.953 367.028 299.281 cv
367.555 301.586 367.61 299.973 367.61 299.973 cv
369.86 301.922 368.196 301.434 369.833 302.633 cv
371.461 303.859 372.372 305.316 371.379 304.996 cv
370.368 304.68 370.333 305.254 370.333 305.254 cv
370.333 305.254 371.993 305.727 373.153 307.266 cv
374.309 308.813 374.59 309.223 376.133 310.348 cv
377.672 311.48 378.102 312.953 380.106 314.813 cv
382.098 316.676 381.125 316.676 382.333 317.496 cv
383.512 318.297 383.075 318.953 384.176 319.523 cv
385.27 320.082 384.34 320.902 385.958 321.781 cv
387.567 322.672 387.36 323.246 387.36 323.246 cv
387.36 323.246 387.606 324.547 385.543 323.094 cv
383.493 321.645 379.958 319.852 379.958 319.852 cv
379.958 319.852 382.34 321.305 385.356 323.824 cv
388.375 326.34 389.801 326.906 391.918 326.895 cv
394.04 326.883 392.379 328.855 394.106 329.238 cv
395.864 329.645 394.598 331.367 395.567 331.195 cv
396.528 331.031 398.754 331.426 397.633 332.973 cv
396.524 334.535 397.606 336.156 397.606 336.156 cv
397.606 336.156 398.278 334.035 399.223 333.531 cv
400.172 333.059 401.668 334.742 401.668 334.742 cv
401.989 334.586 401.762 336.047 402.895 336.047 cv
404.043 336.031 403.083 337.594 404.219 337.426 cv
405.348 337.258 406.008 337.426 405.583 338.234 cv
405.149 339.055 406.356 340.191 406.356 340.191 cv
406.356 340.191 405.485 339.215 406.868 339.293 cv
408.27 339.367 409.528 341.148 409.825 342.047 cv
410.133 342.938 411.301 344.48 413.938 344.953 cv
416.583 345.434 414.368 346.422 416.528 347.063 cv
418.688 347.699 419.325 348.605 420.309 349.977 cv
421.305 351.363 418.52 349.988 418.52 349.988 cv
418.52 349.988 422.125 352.57 424.563 352.563 cv
427.008 352.563 425.395 353.953 427.684 354.098 cv
429.981 354.262 433.801 357.66 433.43 358.227 cv
433.051 358.797 430.993 357.184 430.993 357.184 cv
430.993 357.184 434.801 360.414 436.594 360.262 cv
438.379 360.086 437.465 361.398 438.684 361.145 cv
439.887 360.895 441.176 363.156 441.579 363.973 cv
441.942 364.781 443.907 364.953 443.481 365.758 cv
443.04 366.566 443.903 367.234 443.903 367.234 cv
443.903 367.234 444.68 366.578 445.665 366.734 cv
446.657 366.898 446.278 368.523 448.254 368.832 cv
450.239 369.156 449 370.297 449 370.297 cv
447.325 370.867 443.95 369.266 443.95 369.266 cv
448.887 372.18 449.899 371.438 449.899 371.438 cv
453.325 371.586 450.965 372.738 452.321 372.488 cv
453.7 372.223 455.7 374.098 454.786 374.922 cv
454.43 375.23 454.051 375.27 453.692 375.242 cv
454.598 375.5 455.848 375.777 456.52 375.48 cv
457.629 374.984 457.184 376.688 458.215 376.273 cv
459.247 375.871 459.817 374.563 459.766 376.344 cv
459.731 378.16 459.95 378.969 459.95 378.969 cv
459.95 378.969 460.364 376.77 461.852 376.922 cv
463.321 377.078 464.016 380.164 465.485 380.168 cv
466.958 380.164 465.692 381.867 467.293 381.539 cv
468.911 381.207 470.461 380.227 470.317 381.613 cv
470.168 382.992 467.317 383.094 467.317 383.094 cv
467.317 383.094 469.375 383.328 470.809 382.828 cv
472.239 382.344 473.77 383.305 474.84 384.449 cv
475.891 385.578 477.153 383.844 478.52 385.895 cv
479.875 387.926 479.68 386.207 479.997 387.27 cv
480.313 388.332 481.981 386.363 481.981 387.594 cv
481.989 388.813 482.372 389.621 482.372 389.621 cv
482.372 389.621 482.84 388.234 483.278 387.43 cv
483.7 386.609 484.028 387.66 484.028 387.66 cv
483.864 390.457 484.247 392 484.575 392.867 cv
483.84 390.84 484.325 388.371 485.446 388.238 cv
486.747 388.055 488.051 388.227 489.704 388.371 cv
491.344 388.527 491.836 389.914 492.934 390.473 cv
494.051 391.051 493.84 391.766 495.067 392.906 cv
496.286 394.043 495.84 396.078 495.84 396.078 cv
495.84 396.078 496.364 394.125 495.747 392.348 cv
495.145 390.547 496.387 392.023 496.387 392.023 cv
496.387 392.023 496.852 392.898 497.629 394.691 cv
498.399 396.477 499.493 397.035 499.493 397.035 cv
499.493 397.035 498.825 395.668 498.18 394.273 cv
497.504 392.898 498.825 391.84 498.825 391.84 cv
498.825 391.84 499.356 393.699 500.34 395.078 cv
501.333 396.473 501.262 397.773 501.262 397.773 cv
502.02 401.84 499.551 403.961 499.551 403.961 cv
499.551 403.961 501.872 402.164 502.239 400.211 cv
502.594 398.25 501.559 398.656 502.34 396.945 cv
503.122 395.23 502.145 396.461 501.176 394.027 cv
500.192 391.578 504.997 392.707 505.797 393.594 cv
506.583 394.48 506.793 395.141 508.18 398.895 cv
509.575 402.633 511.641 403.016 511.641 403.016 cv
511.641 403.016 509.887 401.059 508.86 399.191 cv
507.84 397.336 508.45 396.523 508.325 394.895 cv
508.223 393.266 510.208 393.582 511.129 393.992 cv
512.047 394.398 513.543 396.094 514.215 398.688 cv
514.879 401.297 512.532 403.992 512.532 403.992 cv
512.532 403.992 515.129 401.371 514.997 399.586 cv
514.875 397.793 515.016 397.301 516.836 396.559 cv
518.668 395.828 518.821 396.879 520.461 397.039 cv
522.11 397.195 523.356 398.82 523.356 398.82 cv
522.403 400.531 525.211 402.078 525.211 402.078 cv
525.211 402.078 523.973 400.789 525.817 398.98 cv
527.645 397.176 526.989 399.457 528.676 399.047 cv
530.352 398.629 532.36 400.496 532.36 400.496 cv
531.286 401.473 li
531.286 401.473 531.79 401.652 532.493 401.227 cv
533.192 400.824 533.754 400.73 535.434 401.383 cv
537.114 402.027 537.567 401.367 538.536 402.59 cv
539.52 403.813 539.911 402.336 540.45 403.141 cv
540.997 403.965 542.614 403.785 542.614 403.785 cv
542.614 403.785 541.247 402.824 541.614 402.258 cv
541.989 401.672 542.735 401.922 544.059 402.23 cv
545.387 402.563 544.407 403.781 544.407 403.781 cv
544.407 403.781 545.848 403.297 545.801 402.484 cv
545.723 401.656 549.184 403.199 549.184 403.199 cv
548.598 404.328 550.473 407.746 550.473 407.746 cv
550.473 407.746 549.528 404.582 551.067 403.273 cv
552.61 401.961 554.196 403.754 556.075 403.824 cv
557.958 403.891 561.825 404.125 559.997 405.023 cv
558.18 405.934 551.981 405.949 551.981 405.949 cv
551.981 405.949 565.458 406.133 567.282 405.414 cv
569.118 404.672 571.52 404.164 570.942 405.316 cv
570.379 406.449 566.485 406.793 567.047 406.875 cv
567.629 406.949 572.379 406.035 577.645 404.223 cv
582.907 402.426 579.172 403.973 583.7 403.313 cv
588.215 402.648 592.379 401.328 593.59 402.293 cv
593.961 402.594 593.856 402.785 593.559 402.922 cv
595.231 402.664 597.473 402.199 599.153 401.367 cv
602.153 399.891 601.211 401.777 603.047 401.031 cv
604.875 400.289 606.004 401.34 608.715 400.531 cv
611.434 399.695 613.551 400.75 613.551 400.75 cv
608 401.988 li
608 401.988 611.946 402.465 616.692 400.234 cv
621.442 398.02 617.852 401.09 624.458 399.234 cv
631.067 397.387 634.012 395.777 634.012 395.777 cv
634.012 395.777 630.067 398.266 629.333 398.727 cv
630.528 397.98 637.676 395.508 639.875 395.516 cv
642.075 395.504 646.036 392.555 649.18 392.055 cv
652.333 391.559 656.45 388.977 657.008 389.957 cv
657.551 390.922 658.727 388.363 660.895 387.863 cv
663.059 387.367 665.317 388.094 663.77 390.539 cv
662.223 392.988 659.887 391.043 659.887 391.043 cv
659.887 391.043 659.395 392.867 662.79 392.367 cv
666.176 391.867 666.512 387.586 668.168 386.852 cv
669.84 386.121 671.247 385.383 673.387 382.563 cv
675.524 379.75 678.129 380.344 678.129 380.344 cv
674.704 385.613 682.333 377.16 683.247 376.414 cv
684.192 375.684 686.012 375.551 685.067 377.883 cv
684.129 380.199 684.758 380.551 686.227 378.727 cv
687.692 376.883 688.708 375.543 691.559 374.32 cv
694.411 373.082 695.387 369.406 697.282 368.426 cv
699.176 367.441 697.883 366.469 699.973 364.746 cv
702.071 363.039 703.106 362.188 702.801 363.039 cv
702.477 363.883 702.411 364.496 703.348 365.828 cv
704.297 367.176 704.442 365.707 704.606 364.48 cv
704.77 363.27 705.106 361.063 707.688 359.348 cv
710.262 357.633 710.036 356.043 712.293 354.934 cv
714.536 353.836 714.247 351.262 715.34 352.965 cv
716.426 354.676 716.266 352.23 717.036 350.895 cv
717.793 349.543 719.262 347.703 720.286 346.359 cv
721.29 345.004 722.321 345.734 722.805 343.914 cv
723.293 342.066 724.602 341.457 725.29 340.727 cv
725.965 339.984 726.293 339.367 726.293 339.367 cv
728.235 340.953 725.223 342.102 725.223 342.102 cv
725.223 342.102 727.18 342.09 728.508 339.973 cv
729.84 337.855 729.645 332.801 731.833 331.164 cv
734.004 329.547 732.895 327.582 735.524 325.461 cv
735.618 325.383 735.653 325.309 735.739 325.23 cv
735.825 325.844 735.875 326.266 735.875 326.266 cv
735.875 326.266 736.098 325.527 736.325 324.598 cv
738.036 322.719 738.098 320.766 737.766 319.914 cv
737.375 318.938 740.758 313.551 741.68 315.023 cv
742.598 316.48 743.286 319.574 743.286 319.574 cv
743.286 319.574 744.133 315.168 743.426 314.203 cv
742.7 313.215 741.481 312.078 743.415 311.754 cv
745.344 311.418 742.481 309.973 744.797 307.844 cv
745.235 307.445 745.641 306.961 746.036 306.457 cv
746.098 308.48 745.758 310.855 745.758 310.855 cv
746.383 309.34 746.528 307.469 746.516 305.832 cv
747.946 303.824 748.938 301.645 748.938 301.645 cv
748.938 301.645 747.594 303.082 746.418 304.055 cv
746.348 303.25 746.266 302.582 746.215 302.223 cv
746.192 302.027 746.176 301.773 746.153 301.531 cv
746.211 301.457 746.243 301.402 746.305 301.328 cv
748.122 299.031 748.75 298.707 748.911 296.434 cv
748.942 296 748.903 295.602 748.833 295.227 cv
749.231 294.516 749.481 293.879 749.731 293.277 cv
750.157 292.891 750.395 292.453 750.54 292 cv
750.708 291.789 750.825 291.582 751.075 291.371 cv
752.934 289.797 754.172 287.859 754.567 286.422 cv
754.938 284.961 755.864 282.867 756.485 281.359 cv
757.106 279.832 758.27 280.281 758.262 278.445 cv
758.247 276.582 759.333 275.695 759.809 274.84 cv
760.262 273.969 760.418 273.316 760.418 273.316 cv
762.661 274.352 760.094 276.145 760.094 276.145 cv
760.094 276.145 761.918 266.313 763.583 264.234 cv
765.235 262.191 766.973 253.031 766.348 252.199 cv
765.739 251.371 767.891 243.91 769.641 243.133 cv
771.387 242.359 768.309 241.684 769.958 239.113 cv
771.602 236.547 770.157 236.262 769.329 236.305 cv
768.504 236.355 768.598 235.188 769.727 232.602 cv
770.864 229.992 771.395 229.543 770.958 227.359 cv
770.54 225.152 768.586 224.348 770.02 222.16 cv
771.461 219.988 770.02 222.16 770.036 219.711 cv
770.028 217.246 771.153 217.602 772.301 215.504 cv
773.426 213.402 771.149 211.688 772.594 210.004 cv
774.04 208.316 770.942 206.645 772.176 205.355 cv
773.395 204.047 773.825 203.773 771.747 199.203 cv
769.676 194.645 770.301 194.984 771.032 193.156 cv
771.747 191.305 768.243 192.879 768.856 190.25 cv
769.481 187.625 767.723 188.902 769.77 186.07 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.27451 .207843 .145098 rgb
f
623.208 394.195 mo
622.254 393.848 620.969 393.613 619.325 393.961 cv
618.426 394.148 617.461 394.496 616.129 395.113 cv
614.692 394.695 612.497 394.344 609.918 394.887 cv
609.547 394.965 609.168 395.059 608.77 395.184 cv
608.747 395.188 608.723 395.191 608.7 395.199 cv
608.352 395.27 608.184 395.262 607.637 395.215 cv
606.852 395.152 605.665 395.055 604.254 395.352 cv
604.254 395.352 604.239 395.355 604.235 395.355 cv
603.403 395.164 602.348 395.094 601.11 395.355 cv
600.262 395.531 599.391 395.852 598.375 396.344 cv
598.137 396.461 597.696 396.648 596.954 396.859 cv
594.418 395.914 591.489 396.484 588.204 397.125 cv
587.071 397.344 585.848 397.586 584.59 397.77 cv
584.29 397.813 584.051 397.848 583.86 397.863 cv
582.922 397.656 581.985 397.664 580.958 397.879 cv
580.426 397.992 579.469 398.266 577.532 398.93 cv
576.684 399.223 575.864 399.48 575.106 399.711 cv
573.872 399.098 572.2 398.797 569.934 399.273 cv
569.106 399.449 568.161 399.738 567.278 400.07 cv
566.954 400.113 566.461 400.16 565.856 400.199 cv
563.739 398.426 560.426 398.313 557.989 398.23 cv
558.043 398.23 558.083 398.227 558.102 398.219 cv
558.196 398.203 558.059 398.141 557.922 398.086 cv
556.774 397.625 554.86 396.852 552.481 397.352 cv
552.262 397.398 552.047 397.453 551.833 397.516 cv
549.325 396.566 547.883 396.547 546.833 396.723 cv
545.422 396.391 544.137 396.137 542.649 396.449 cv
542.301 396.52 541.969 396.613 541.645 396.742 cv
540.813 396.395 540.004 396.246 539.297 396.168 cv
538.504 395.875 537.649 395.59 536.739 395.434 cv
535.536 394.574 533.688 393.559 531.489 393.402 cv
529.77 392.473 528.122 392.641 527.348 392.805 cv
527.18 392.84 527.008 392.887 526.84 392.938 cv
525.836 392.285 524.575 391.715 523.09 391.508 cv
522.129 391.066 520.407 390.383 518.043 390.875 cv
518.004 390.887 517.969 390.891 517.934 390.902 cv
517.075 390.008 516.129 389.309 515.145 388.871 cv
514.325 388.512 512.153 387.719 509.743 388.227 cv
509.684 388.238 509.625 388.25 509.567 388.262 cv
508.161 387.531 506.512 387.102 504.977 386.988 cv
503.551 382.246 li
498.825 386.027 li
498.504 385.945 498.196 385.895 497.907 385.871 cv
497.817 385.816 497.735 385.766 497.653 385.719 cv
496.598 384.68 494.879 383.074 491.954 382.797 cv
491.305 382.738 li
490.446 382.656 489.571 382.574 488.668 382.555 cv
487.844 381.988 486.903 381.637 485.895 381.535 cv
485.657 380.719 li
483.364 381.016 li
482.176 379.984 480.786 379.406 479.196 379.262 cv
478.325 378.586 477.403 378.063 476.465 377.699 cv
476.239 377.391 475.977 377.113 475.692 376.852 cv
474.86 376.109 473.098 374.965 470.418 375.383 cv
470.223 375.277 470.016 375.172 469.805 375.09 cv
469.04 373.992 467.708 372.301 465.469 371.609 cv
465.317 371.461 465.168 371.32 464.997 371.176 cv
462.887 369.414 li
460.602 369.852 li
459.622 368.715 458.27 367.746 456.711 367.238 cv
456.512 367.098 456.305 366.965 456.098 366.852 cv
455.551 365.781 454.469 364.41 452.379 363.68 cv
451.52 362.57 450.481 361.828 449.262 361.438 cv
448.704 360.848 448.102 360.438 447.606 360.145 cv
446.192 357.887 444.442 356.41 442.536 355.816 cv
441.723 355.25 440.793 354.891 439.766 354.73 cv
438.313 352.551 434.903 349.73 431.477 348.805 cv
430.442 347.84 428.942 347.074 426.797 346.973 cv
426.739 346.891 426.684 346.813 426.629 346.727 cv
425.653 345.359 424.372 343.578 421.622 342.34 cv
420.754 341.098 419.254 339.914 416.676 339.445 cv
416.629 339.43 416.594 339.422 416.567 339.422 cv
415.797 337.75 414.29 335.766 412.153 334.625 cv
412.102 334.539 412.047 334.457 411.989 334.375 cv
411.473 333.648 410.52 332.664 408.946 332.137 cv
408.809 332.008 408.676 331.891 408.532 331.777 cv
407.59 328.598 li
405.051 328.906 li
404.727 328.719 404.387 328.547 404.028 328.398 cv
403.219 327.332 402.145 326.598 400.989 326.141 cv
400.653 325.734 400.278 325.383 399.879 325.078 cv
398.766 322.633 396.528 321.551 394.446 321.336 cv
394.016 320.016 393.09 318.688 391.481 317.551 cv
391.012 316.609 390.368 315.836 389.551 315.211 cv
389.208 314.684 388.7 314.039 387.942 313.406 cv
387.497 312.66 386.84 311.809 385.7 310.742 cv
385.028 310.113 384.637 309.555 384.27 309.063 cv
383.571 308.117 382.692 306.938 381.215 305.848 cv
380.391 305.25 380.391 305.25 379.528 304.098 cv
379.352 303.859 379.168 303.633 378.985 303.422 cv
378.465 301.449 376.989 299.82 375.512 298.609 cv
375.036 297.738 374.391 296.996 373.622 296.277 cv
372.567 294.016 370.793 292.199 368.805 291.176 cv
368.727 291.02 368.637 290.867 368.547 290.711 cv
368.336 288.559 367.54 286.316 366.083 284.961 cv
365.793 284.691 li
365.719 284.543 365.653 284.398 365.579 284.262 cv
364.524 282.289 362.657 279.938 359.727 276.867 cv
359.442 274.633 358.278 272.773 356.02 270.816 cv
355.993 270.793 355.969 270.77 355.934 270.738 cv
356.856 269.879 li
356.243 269.027 355.317 267.746 353.645 265.98 cv
353.583 265.738 353.504 265.512 353.415 265.297 cv
353.715 263.738 353.375 262.09 352.379 260.379 cv
352.297 259.383 351.934 258.246 351.09 257.02 cv
350.157 255.66 349.063 254.598 348.192 253.742 cv
347.973 253.523 347.747 253.316 347.54 253.117 cv
347.606 249.109 345.368 246.871 343.977 245.48 cv
343.739 245.238 li
343.739 245.152 343.727 245.07 343.715 244.992 cv
343.625 243.695 343.438 241.371 341.661 239.387 cv
341.836 238.324 341.747 237.074 341.125 235.664 cv
341.161 235.531 341.188 235.398 341.208 235.277 cv
341.676 232.609 340.379 230.707 338.739 228.617 cv
339.348 228.156 li
338.465 226.996 337.52 225.473 337.036 224.484 cv
338.395 220.547 336.629 216.07 334.391 213.289 cv
334.333 212.594 334.168 211.84 333.844 211.031 cv
333.961 209.953 333.809 208.676 333.075 207.32 cv
333.844 205.148 333.653 203.293 332.426 201.43 cv
332.461 201.137 332.477 200.844 332.465 200.535 cv
333.372 198.871 333.715 196.891 333.34 195.016 cv
333.301 194.801 333.247 194.594 333.184 194.387 cv
333.372 193.352 333.333 192.262 333.063 191.18 cv
332.946 190.695 332.809 190.219 332.676 189.762 cv
332.583 189.445 332.477 189.168 332.442 188.859 cv
333.114 186.688 332.934 184.695 331.954 182.852 cv
332.825 179.531 332.633 175.363 331.309 172.906 cv
331.461 171.836 331.356 170.695 330.973 169.492 cv
331.95 167.477 332.973 164.855 332.176 162.211 cv
332.387 161.512 332.458 160.852 332.45 160.254 cv
333.2 159.145 333.743 157.785 333.676 156.195 cv
333.727 156.102 333.77 156.012 333.817 155.918 cv
334.43 154.555 334.532 153.168 334.348 151.859 cv
334.676 151.633 li
336.047 151.344 li
336.184 150.57 li
336.254 150.52 li
336.227 150.309 li
336.797 147.125 li
337.024 145.684 336.879 144.449 336.684 143.523 cv
338.086 141.723 339.04 139.898 339.118 136.109 cv
339.129 135.602 339.106 135.133 339.079 134.711 cv
339.481 133.871 339.766 132.832 339.856 131.535 cv
340.954 131.305 li
342.321 128.734 li
342.676 128.012 342.864 127.293 342.926 126.586 cv
343.786 126.496 li
345.071 123.34 li
346.02 121.73 li
345.875 119.801 li
345.84 119.504 345.793 119.203 345.731 118.895 cv
345.793 118.754 345.852 118.609 345.903 118.465 cv
346.383 117.965 346.868 117.414 347.336 116.691 cv
347.536 116.387 li
348.34 116.082 li
348.508 114.871 li
358.833 98.8828 li
356.137 100.27 li
357.047 99.3086 li
356.29 97.9492 li
357.028 97.3281 li
357.247 95.0234 li
357.282 94.7227 357.301 94.4375 357.305 94.1641 cv
357.813 93.3672 358.219 92.3516 358.45 91.0586 cv
358.473 91.0195 358.504 90.9844 358.528 90.9453 cv
359.961 90.6484 li
361.356 88.3281 li
361.754 87.6211 361.985 86.9023 362.086 86.1797 cv
363.348 85.9141 li
364.883 83.4453 li
365.653 82.0742 365.801 80.6367 365.657 79.2734 cv
365.719 79.1563 365.786 79.043 365.852 78.9219 cv
367.153 77.8438 369.055 75.9609 369.602 72.4648 cv
371.801 71.3086 372.633 69.5039 372.997 68.7148 cv
375.934 66.8398 377.754 64.2109 378.067 61.375 cv
378.098 61.1094 378.114 60.8438 378.118 60.582 cv
378.989 60.1602 379.778 59.5469 380.391 58.7734 cv
383.672 58.082 li
384.219 55.9258 li
386.29 54.625 387.809 52.5352 388.704 50.5547 cv
388.887 50.3867 li
389.567 49.7773 390.579 48.875 391.34 47.5352 cv
391.696 47.2852 392.004 47.0156 392.278 46.7344 cv
394.333 46.3008 li
395.915 44.0117 li
396.008 43.8672 396.098 43.6992 396.188 43.5039 cv
397.489 43.1328 398.629 42.4727 399.528 41.625 cv
399.61 41.6172 li
401.02 41.3164 402.032 40.6016 402.739 39.8555 cv
402.786 39.8477 402.829 39.8398 402.872 39.832 cv
405.34 39.3125 407.028 37.5391 408.153 35.6953 cv
409.372 35.2422 410.739 34.2617 411.606 32.1797 cv
413.403 31.6563 415.309 30.6289 416.481 28.625 cv
416.954 28.375 417.348 28.1016 417.668 27.8438 cv
418.086 27.8281 418.583 27.7656 419.051 27.6641 cv
420.172 27.4297 421.114 27.0078 421.887 26.4609 cv
422.106 26.4336 422.333 26.3984 422.543 26.3516 cv
425.012 25.832 426.696 24.3789 427.754 23.4141 cv
427.809 23.4023 427.856 23.3945 427.907 23.3828 cv
429.766 22.9922 430.973 21.957 431.7 21.1367 cv
432.18 21.0586 li
433.547 20.7695 434.481 20.125 435.114 19.5586 cv
436.125 20.0547 li
438.196 19.6523 li
441.325 18.9609 443.766 17.8438 445.653 16.5078 cv
446.172 16.4219 li
447.543 16.1992 449.493 15.9844 450.215 16.0195 cv
450.95 16.0586 451.696 16 452.426 15.8477 cv
453.668 15.5859 454.598 15.1094 455.208 14.7969 cv
456.254 14.6758 456.879 14.6914 457.661 14.5273 cv
462.473 13.5117 li
463.153 13.5586 463.883 13.5039 464.684 13.3359 cv
466.094 13.0391 467.637 12.4141 469.2 11.5078 cv
469.938 11.6875 470.848 11.7578 471.868 11.543 cv
473.27 11.2461 li
473.704 10.9063 li
474.04 10.8867 474.458 10.875 474.793 10.8906 cv
480.43 11.1016 li
480.5 9.625 li
480.547 9.62109 480.993 9.52734 480.993 9.52734 cv
480.993 9.52734 481.778 9.28125 481.829 9.27344 cv
482.153 9.20313 482.497 9.26953 483.321 9.57422 cv
485.821 10.4727 488.114 10.1719 489.821 9.8125 cv
492.098 9.28906 li
492.778 9.14844 493.258 9.09375 493.653 9.10938 cv
494.379 9.14453 495.016 9.20703 495.583 9.26172 cv
497.051 9.40234 498.438 9.53516 499.954 9.21484 cv
501.004 8.99609 501.965 8.57813 502.79 7.98828 cv
503.27 7.98828 503.75 7.97656 504.223 7.96484 cv
505.317 7.9375 506.497 7.90625 507.36 7.92578 cv
508.118 7.94141 li
510.02 7.98438 512.633 8.04297 515.02 7.54297 cv
515.93 7.35156 516.75 7.09766 517.497 6.76563 cv
518.825 7.46484 520.68 7.84766 523.282 7.56641 cv
523.75 7.51563 524.458 7.4375 524.719 7.46875 cv
526.055 8.19531 528.04 8.41406 530.168 7.96484 cv
531.168 7.75781 532.204 7.37891 533.239 6.98047 cv
533.555 6.85156 533.868 6.71875 534.18 6.61719 cv
535.622 7.09766 537.047 7.19531 538.415 6.90625 cv
539.766 6.625 540.817 6.01953 541.629 5.36719 cv
542.672 6.04688 543.961 6.64844 545.579 6.99609 cv
546.661 7.22266 547.247 7.44531 547.731 7.625 cv
549.473 8.27344 550.895 8.69922 554.637 8.66406 cv
556.129 8.64844 556.692 8.88281 556.696 8.88672 cv
557.106 8.34766 li
558.653 9.42188 560.715 10.418 563.293 10.7188 cv
564.235 10.8359 564.692 10.9922 565.29 11.1875 cv
566.45 11.5742 568.204 12.1602 570.817 11.6133 cv
571.75 11.3828 li
572.79 11.8516 573.985 12.2188 575.34 12.0977 cv
576.825 12.6875 578.52 12.9023 580 13.0195 cv
580.114 13.1289 li
582.114 14.8359 584.442 14.6797 585.942 14.4531 cv
588.278 18.2109 591.657 17.8711 592.739 17.6445 cv
592.786 17.6328 592.829 17.625 592.864 17.6133 cv
594.512 18.3633 596.262 18.5898 597.833 18.4961 cv
598.7 18.8438 599.704 19.0469 600.833 18.9219 cv
602.219 20.1523 603.633 20.7891 604.403 21.0781 cv
605.118 21.8398 605.899 22.5039 606.723 23.0234 cv
608.297 24.0195 li
610.149 23.8945 li
611.887 23.7734 613.028 23.8125 613.762 23.8906 cv
620.993 26.0508 li
620.989 26.0508 li
622.551 26.5391 624.09 26.9688 625.684 27.2383 cv
629.055 30.4883 li
629.469 30.9141 629.856 31.2617 630.239 31.5508 cv
633.141 32.1758 li
639.59 35.875 li
640.098 36.0195 640.602 36.1406 641.09 36.2461 cv
641.211 36.3711 641.399 36.5859 641.618 36.8828 cv
642.489 38.0547 li
643.817 38.6641 li
645.051 39.2266 646.239 39.6133 647.344 39.7969 cv
653.239 42.3867 li
653.981 42.9531 654.821 43.3594 655.715 43.582 cv
656.149 44.1953 656.657 44.7773 657.247 45.3047 cv
664.844 52.1211 li
665.391 49.0195 li
665.754 49.0938 666.137 49.1445 666.551 49.1719 cv
666.915 49.7109 667.336 50.2656 667.817 50.8242 cv
668.7 51.8594 li
669.958 52.375 li
670.579 52.6328 671.137 52.9063 671.629 53.2148 cv
678.52 57.5234 li
679.415 58.8906 680.563 59.8359 681.997 60.3945 cv
682.708 61.3086 li
684.176 61.8789 li
684.403 61.9844 684.625 62.0859 684.872 62.1914 cv
685.067 62.7383 li
686.399 62.8242 li
687.2 65.5664 689.145 67.0625 690.368 67.8477 cv
691.473 70.0313 693.516 71.4688 695.879 71.75 cv
694.723 74.957 li
697.856 74.9883 li
698.223 75.5703 698.692 76.1406 699.293 76.6914 cv
698.825 77.1641 li
703.024 79.0664 li
705.04 80.1445 li
705.168 80.0352 li
705.27 80.082 li
705.528 81.4453 706.153 82.7461 707.106 83.8359 cv
708.282 85.1797 709.821 86 711.446 86.2031 cv
715.758 89.1875 li
715.723 93.2813 li
717.364 93.3945 li
717.497 93.5664 717.645 93.7383 717.801 93.9102 cv
717.934 94.0625 717.989 94.125 718.18 94.5391 cv
718.817 95.9492 719.645 96.8516 720.504 97.4258 cv
720.817 98.3984 721.395 99.4102 722.458 100.258 cv
724.286 101.695 li
724.989 102.914 725.833 103.832 727.125 104.527 cv
726.879 106.707 727.692 108.965 729.34 110.512 cv
730.227 111.34 731.192 111.832 732.067 112.145 cv
732.473 113.473 733.301 114.813 734.84 115.977 cv
735.524 118.242 736.93 119.57 738.012 120.324 cv
738.551 121.625 739.434 122.664 740.583 123.367 cv
740.797 123.848 741.043 124.277 741.293 124.66 cv
745.145 130.5 li
745.489 131.383 745.969 132.281 746.606 133.168 cv
747.254 134.074 748.219 135.453 749.684 136.273 cv
750.11 137.211 750.774 138.117 751.774 138.93 cv
751.958 141.742 753.399 143.484 754.223 144.402 cv
754.61 147.414 757.106 159.742 758.176 161.578 cv
758.36 163 759.043 164.609 760.793 166.07 cv
761.129 167.137 761.676 168.074 762.282 168.824 cv
762.059 170.133 762.129 171.371 762.516 172.555 cv
762.215 173.727 762.223 174.895 762.555 176.027 cv
762.805 176.863 763.18 177.535 763.598 178.078 cv
763.293 180.25 763.075 183.52 765.153 185.926 cv
764.801 186.961 764.649 188.156 764.958 189.5 cv
764.567 191.824 765.215 193.484 765.856 194.508 cv
766.036 194.789 766.223 195.043 766.422 195.277 cv
766.422 197.188 767.145 199.066 768.309 201.609 cv
768.532 202.105 768.704 202.508 768.84 202.828 cv
767.973 204.313 767.5 206.332 768.543 208.934 cv
767.922 210.766 768.168 212.465 768.426 213.551 cv
767.098 215.063 766.083 216.832 766.09 219.797 cv
766.086 220.141 766.098 220.465 766.129 220.785 cv
764.704 224.348 766.344 227.23 766.93 228.27 cv
767.075 228.598 li
767.012 228.742 766.254 230.402 766.254 230.402 cv
765.407 232.34 763.868 235.871 765.68 238.992 cv
765.524 239.691 765.458 240.445 765.528 241.254 cv
765.118 242.074 764.961 242.82 764.911 243.281 cv
764.895 243.441 764.883 243.598 764.875 243.754 cv
764.274 244.563 763.754 245.539 763.325 246.684 cv
762.114 249.871 761.958 252.496 762.856 254.52 cv
760.782 257.504 760.637 259.867 760.551 261.148 cv
760.547 261.168 760.551 261.18 760.551 261.188 cv
759.567 262.605 759.118 264.152 758.922 265.668 cv
758.243 265.352 li
756.629 272.055 li
755.934 273.012 754.809 274.57 754.434 276.891 cv
753.922 277.477 753.375 278.254 752.95 279.301 cv
752.61 280.121 li
752.114 281.297 751.579 282.586 751.168 283.824 cv
750.168 284.527 749.231 285.672 748.676 287.531 cv
748.258 287.953 747.985 288.324 747.833 288.527 cv
747.262 289.301 li
747.145 289.605 li
746.708 290.008 li
746.227 291.148 li
745.977 291.742 745.836 292.117 745.602 292.523 cv
744.606 294.309 li
744.762 295.152 li
742.45 299.313 li
742.184 299.645 li
742.188 299.777 li
741.645 300.75 li
740.622 302.648 740.34 304.457 740.793 306.137 cv
740.434 306.816 740.153 307.586 740.004 308.441 cv
739.317 309.195 738.973 309.953 738.805 310.414 cv
738.754 310.531 738.715 310.648 738.676 310.773 cv
737.114 312.016 735.934 313.773 735.118 315.289 cv
734.375 316.676 733.516 318.648 733.864 320.793 cv
733.161 321.566 li
730.915 323.598 730.211 325.707 729.817 326.879 cv
729.801 326.93 729.801 326.961 729.801 326.969 cv
728.379 328.16 727.504 329.672 726.915 331.207 cv
726.254 330.672 li
723.008 336.766 li
722.032 337.594 720.524 338.859 719.563 341.047 cv
718.899 341.48 718.141 342.117 717.45 343.055 cv
716.93 343.738 li
716.098 344.809 715.192 345.992 714.442 347.152 cv
712.418 347.883 711.442 349.484 711.036 350.16 cv
708.942 351.316 707.868 352.789 707.208 353.691 cv
706.801 354.25 706.676 354.422 706.262 354.699 cv
705.094 355.473 704.18 356.328 703.458 357.195 cv
703.27 357.23 li
701.598 357.582 700.54 358.445 698.215 360.328 cv
696.551 361.707 695.723 363.008 695.235 364.184 cv
693.829 365.227 692.907 366.57 692.137 367.688 cv
691.762 368.227 691.204 369.039 690.93 369.242 cv
689.903 369.676 689.02 370.148 688.258 370.645 cv
687.165 370.301 685.958 370.242 684.731 370.5 cv
683.571 370.746 682.45 371.266 681.489 372.004 cv
680.403 372.887 679.403 373.797 678.489 374.715 cv
678.079 374.746 677.633 374.809 677.165 374.906 cv
675.368 375.285 672.77 376.336 670.59 379.203 cv
669.2 381.031 668.637 381.277 667.614 381.723 cv
667.153 381.93 666.731 382.18 666.356 382.449 cv
664.903 382.043 663.27 382.004 661.567 382.359 cv
660.04 382.711 658.856 383.363 657.887 384.145 cv
657.465 384.164 657.036 384.219 656.579 384.313 cv
655.708 384.496 654.497 384.93 653.165 385.461 cv
652.145 385.867 650.981 386.324 650.184 386.492 cv
649.391 386.637 li
647.243 387.09 645.239 388.059 643.469 388.914 cv
642.754 389.258 641.715 389.762 641.215 389.918 cv
640.508 389.949 639.723 390.063 638.766 390.262 cv
637.356 390.555 635.407 391.109 633.528 391.734 cv
633.012 390.867 li
633.012 390.867 630.368 392.242 624.649 393.844 cv
624.168 393.98 623.754 394.086 623.403 394.16 cv
623.336 394.172 623.278 394.188 623.208 394.195 cv
cp
1 1 1 rgb
f
629.333 398.727 mo
629.325 398.727 li
629.118 398.863 629.176 398.82 629.333 398.727 cv
cp
.27451 .207843 .145098 rgb
f
629.333 398.727 mo
629.325 398.727 li
629.118 398.863 629.176 398.82 629.333 398.727 cv
cp
f
670.274 263.914 mo
670.274 263.914 666.278 273.273 638.512 274.848 cv
626.747 275.516 635.719 273.727 615.809 276.207 cv
595.891 278.688 585.29 280.906 566.282 275.535 cv
566.282 275.535 580.958 279.676 603.04 275.926 cv
614.543 273.973 621.637 272.164 627.208 272.594 cv
643.458 273.844 656.629 271.891 670.274 263.914 cv
cp
f
701.372 302.52 mo
701.372 302.52 696.692 308.609 688.665 306.891 cv
680.641 305.164 687.297 300.367 680.774 301.734 cv
674.25 303.105 680.426 300.102 674.208 298.855 cv
667.985 297.605 667.301 294.348 667.301 294.348 cv
667.301 294.348 671.59 298.559 675.797 294.266 cv
680.004 289.973 678.981 285.078 675.891 286.582 cv
672.801 288.082 668.028 285.676 670.778 282.547 cv
673.532 279.41 674.95 274.012 671.344 273.063 cv
667.739 272.113 673.84 260.613 666.5 262.156 cv
659.157 263.695 657.833 261.422 663.977 254.172 cv
670.114 246.922 671.055 243.32 669.043 237.781 cv
667.032 232.242 662.918 228.852 668.625 227.652 cv
674.329 226.453 667.895 220.141 672.79 219.113 cv
677.684 218.086 670.602 212.758 676.481 212.375 cv
682.364 211.996 682.536 212.805 681.512 207.914 cv
680.481 203.02 680.481 203.02 680.481 203.02 cv
680.481 203.02 679.926 196.324 683.403 200.707 cv
686.875 205.086 684.743 186.797 691.989 192.938 cv
699.235 199.082 694.098 174.617 700.364 180.113 cv
706.629 185.609 703.934 176.805 707.063 179.559 cv
710.192 182.309 712.422 176.723 716.543 180.121 cv
720.665 183.516 714.274 181.453 720.665 183.516 cv
727.059 185.578 718.184 163.598 714.024 155.957 cv
714.024 155.957 723.415 164.199 728.473 180.168 cv
733.532 196.141 728.731 173.297 734.911 186.48 cv
741.086 199.664 734.567 184.855 741.086 199.664 cv
747.606 214.469 740.786 202.277 747.606 214.469 cv
754.418 226.664 750.508 228.34 751.629 225.551 cv
752.75 222.762 748.508 206.617 748.508 206.617 cv
748.508 206.617 755.758 208.742 755.579 228.121 cv
755.329 254.676 742.516 274.676 742.516 274.676 cv
742.516 274.676 750.954 243.738 742.442 222.371 cv
735.708 205.461 732.727 197.375 718.348 197.836 cv
703.973 198.301 691.45 217.742 690.583 229.852 cv
689.719 241.957 687.672 260.551 692.364 274.82 cv
701.204 301.703 717.129 292.398 713.09 297.504 cv
709.055 302.609 701.372 302.52 701.372 302.52 cv
cp
f
341.133 217.922 mo
341.133 217.922 354.196 252.277 362.032 266.648 cv
369.872 281.02 381.458 293.148 389.083 301.609 cv
402.372 316.375 420.27 329.379 441.84 344.191 cv
463.426 359.004 475.786 370.133 496.965 376.738 cv
518.141 383.348 537.614 384.555 549.465 387.926 cv
561.305 391.305 651.629 389.836 698.387 347.367 cv
698.387 347.367 657.887 374.57 609.883 379.691 cv
561.872 384.813 535.348 382.457 509.141 375.578 cv
482.946 368.703 469.262 356.141 458.723 349.957 cv
448.18 343.781 435.981 333.465 418.551 319.734 cv
399.141 304.445 356.266 259.516 341.133 217.922 cv
cp
f
gsave
378.083 70.6719 mo
378.083 70.6719 410.106 24.4297 502.387 20.9414 cv
594.676 17.4531 690.356 52.3594 733.083 149.398 cv
733.083 149.398 703.895 147.23 695.547 159.195 cv
687.204 171.168 691.801 177.867 672.852 157.574 cv
653.907 137.289 622.305 77.875 522.969 58.1289 cv
427.668 39.1836 378.083 70.6719 378.083 70.6719 cv
cp
clp
669.629 35.3164 mo
669.86 35.1211 670.036 34.9766 670.036 34.9766 cv
670.036 34.9766 669.86 35.1133 669.629 35.3164 cv
cp
f
669.629 35.3164 mo
669.86 35.1211 670.036 34.9766 670.036 34.9766 cv
670.036 34.9766 669.86 35.1133 669.629 35.3164 cv
cp
f
719.606 84.9844 mo
719.911 84.8789 720.122 84.8086 720.122 84.8086 cv
720.122 84.8086 719.911 84.875 719.606 84.9844 cv
cp
f
719.606 84.9844 mo
719.911 84.8789 720.122 84.8086 720.122 84.8086 cv
720.122 84.8086 719.911 84.875 719.606 84.9844 cv
cp
f
460.137 4.73047 mo
459.887 4.38281 459.637 4.12891 459.637 4.12891 cv
459.637 4.12891 459.86 4.37891 460.137 4.73047 cv
cp
f
460.137 4.73047 mo
459.887 4.38281 459.637 4.12891 459.637 4.12891 cv
459.637 4.12891 459.86 4.37891 460.137 4.73047 cv
cp
f
373.75 52.7422 mo
373.516 52.8789 373.356 52.9844 373.356 52.9844 cv
373.356 52.9844 373.528 52.8789 373.75 52.7422 cv
cp
f
373.75 52.7422 mo
373.516 52.8789 373.356 52.9844 373.356 52.9844 cv
373.356 52.9844 373.528 52.8789 373.75 52.7422 cv
cp
f
731.79 142.223 mo
731.79 142.223 699.926 130.461 670.016 168.047 cv
670.016 168.047 696.684 140.852 731.79 142.223 cv
cp
f
724.364 130.723 mo
724.364 130.723 693.778 118.953 653.997 166.07 cv
653.997 166.07 685.637 132.336 724.364 130.723 cv
cp
f
717.071 119.977 mo
717.071 119.977 684.782 109.629 645.239 157.934 cv
645.239 157.934 679.86 121.762 717.071 119.977 cv
cp
f
711.321 112.207 mo
711.321 112.207 678.313 108.75 633.59 150.969 cv
633.59 150.969 669.606 103.574 711.321 112.207 cv
cp
f
706.231 104.152 mo
706.231 104.152 673.379 99.4883 627.141 140.035 cv
627.141 140.035 664.872 93.9922 706.231 104.152 cv
cp
f
698.516 94.6406 mo
698.516 94.6406 665.661 89.9727 619.415 130.523 cv
619.415 130.523 657.149 84.4805 698.516 94.6406 cv
cp
f
689.336 86.4727 mo
689.336 86.4727 656.434 82.3125 610.786 123.59 cv
610.786 123.59 647.844 76.9531 689.336 86.4727 cv
cp
f
681.403 77.8555 mo
681.403 77.8555 648.493 73.7031 602.848 114.973 cv
602.848 114.973 639.911 68.3438 681.403 77.8555 cv
cp
f
671.93 70.2383 mo
671.93 70.2383 638.981 66.5469 593.895 108.473 cv
593.895 108.473 630.333 61.3047 671.93 70.2383 cv
cp
f
663.731 62.418 mo
663.731 62.418 630.774 58.8203 585.786 100.875 cv
585.786 100.875 622.106 53.6016 663.731 62.418 cv
cp
f
651.403 54.2617 mo
651.403 54.2617 618.325 52.0469 575.153 95.9648 cv
575.153 95.9648 609.446 47.2031 651.403 54.2617 cv
cp
f
640.215 45.8438 mo
640.215 45.8438 607.071 45.0547 565.825 90.7852 cv
565.825 90.7852 597.989 40.5938 640.215 45.8438 cv
cp
f
630.133 38.3242 mo
630.133 38.3242 596.981 38.082 556.497 84.4922 cv
556.497 84.4922 587.817 33.7773 630.133 38.3242 cv
cp
f
619.45 30.2188 mo
619.45 30.2188 586.325 31.6055 548.165 79.9453 cv
548.165 79.9453 576.969 27.75 619.45 30.2188 cv
cp
f
611.536 22.9375 mo
611.536 22.9375 578.403 24.3281 540.25 72.6641 cv
540.25 72.6641 569.055 20.4727 611.536 22.9375 cv
cp
f
599.715 17.7031 mo
599.715 17.7031 566.645 20.1641 530.079 69.7109 cv
530.079 69.7109 557.176 16.6172 599.715 17.7031 cv
cp
f
583.922 13.2852 mo
583.922 13.2852 551.168 18.4258 518.75 70.7773 cv
518.75 70.7773 541.442 15.6563 583.922 13.2852 cv
cp
f
570.231 6.96875 mo
570.231 6.96875 537.934 14.4688 509.391 69.0313 cv
509.391 69.0313 528.036 12.4141 570.231 6.96875 cv
cp
f
555.993 1.64844 mo
555.993 1.64844 524.293 11.3594 499.586 67.7656 cv
499.586 67.7656 514.274 9.99609 555.993 1.64844 cv
cp
f
542.333 -1.41016 mo
542.333 -1.41016 511.262 10.1563 489.926 67.9219 cv
489.926 67.9219 501.172 9.38281 542.333 -1.41016 cv
cp
f
526.29 -.621094 mo
526.29 -.621094 496.2 13.2891 479.34 72.5195 cv
479.34 72.5195 486.083 13.293 526.29 -.621094 cv
cp
f
511.59 -2.88281 mo
511.59 -2.88281 482.516 13.0508 469.754 73.293 cv
469.754 73.293 472.422 13.7461 511.59 -2.88281 cv
cp
f
497.805 -5.34375 mo
497.805 -5.34375 469.981 12.6914 461.7 73.7148 cv
461.7 73.7148 459.973 14.1328 497.805 -5.34375 cv
cp
f
481.149 -.695313 mo
481.149 -.695313 455.309 20.082 453.274 81.625 cv
453.274 81.625 445.497 22.5313 481.149 -.695313 cv
cp
f
468.622 -1.00781 mo
468.622 -1.00781 443.708 20.8672 444.348 82.4453 cv
444.348 82.4453 434.012 23.7422 468.622 -1.00781 cv
cp
f
455.383 1.73438 mo
455.383 1.73438 431.848 25.0781 436.215 86.5039 cv
436.215 86.5039 422.34 28.5313 455.383 1.73438 cv
cp
f
441.129 5.25781 mo
441.129 5.25781 419.34 30.2422 428.141 91.1953 cv
428.141 91.1953 410.11 34.3789 441.129 5.25781 cv
cp
f
432.051 4.61328 mo
432.051 4.61328 410.266 29.5938 419.063 90.543 cv
419.063 90.543 401.032 33.7266 432.051 4.61328 cv
cp
f
422.364 4.08984 mo
422.364 4.08984 400.579 29.0742 409.375 90.0234 cv
409.375 90.0234 391.344 33.207 422.364 4.08984 cv
cp
f
414.129 1.35156 mo
414.129 1.35156 392.34 26.332 401.137 87.2813 cv
401.137 87.2813 383.102 30.4688 414.129 1.35156 cv
cp
f
grestore
699.571 216.891 mo
699.571 216.891 701.426 205.434 707.305 205.051 cv
713.18 204.672 708.254 201.449 716.407 199.734 cv
724.559 198.023 734.079 202.828 737.598 211.461 cv
737.598 211.461 738.336 202.797 730.782 199.273 cv
723.235 195.75 719.118 192.352 710.657 196.684 cv
702.192 201.012 695.543 205.813 691.418 218.605 cv
687.293 231.395 681.918 250.406 684.528 266.887 cv
687.137 283.367 697.125 302.563 713.09 297.504 cv
713.09 297.504 716.489 293.383 710.266 292.137 cv
704.04 290.891 705.422 281.234 699.196 279.984 cv
692.969 278.738 694.176 268.266 691.993 261.91 cv
689.809 255.559 692.477 243.93 693.555 236.891 cv
694.629 229.852 695.583 226.242 699.571 216.891 cv
cp
f
717.551 246.754 mo
717.551 246.754 717.79 235.57 720.86 234.137 cv
729.079 230.301 729.395 238.313 728.364 249.594 cv
727.333 260.875 718.262 270.449 717.551 246.754 cv
cp
f
736.301 229.617 mo
736.301 229.617 743.633 244.258 734.391 269.188 cv
734.391 269.188 748.051 245.031 736.301 229.617 cv
cp
f
742.79 264.398 mo
742.79 264.398 737.829 280.613 727.204 286.551 cv
721.204 289.906 718.528 290.777 721.012 294.516 cv
723.504 298.254 715.899 306.664 715.899 306.664 cv
715.899 306.664 717.532 306.324 723.504 298.254 cv
729.469 290.188 722.473 293.355 729.469 290.188 cv
736.465 287.016 741.243 273.234 742.79 264.398 cv
cp
f
708.114 306.215 mo
708.114 306.215 704.836 323.078 694.622 331.184 cv
694.622 331.184 709.43 324.672 708.114 306.215 cv
cp
f
704.833 254.105 mo
704.833 254.105 701.403 237.789 712.227 224.453 cv
723.051 211.113 732.102 217.727 735.446 225.539 cv
735.446 225.539 732.668 208.246 723.051 211.113 cv
713.434 213.98 713.18 220.852 707.981 224.496 cv
702.786 228.141 698.961 238.316 701.094 256.598 cv
703.235 274.879 712.028 288.359 721.293 283.859 cv
721.293 283.859 705.934 283.676 704.833 254.105 cv
cp
f
664.075 187.734 mo
666.875 190.984 650.817 176.383 640.958 171.344 cv
633.348 167.453 632.793 166.086 623.04 162.176 cv
613.274 158.266 604.45 157.25 604.45 157.25 cv
604.45 157.25 640.442 160.344 664.075 187.734 cv
cp
f
651.606 183.113 mo
651.606 183.113 641.528 171.605 620.563 167.066 cv
620.563 167.066 645.758 177.531 651.606 183.113 cv
cp
f
580.68 269.109 mo
580.68 269.109 596.071 271.41 618.625 263.266 cv
618.625 263.266 596.583 273.863 580.68 269.109 cv
cp
f
gsave
338.629 209.234 mo
338.629 209.234 352.165 265.57 396.59 304.777 cv
441.008 343.988 467.989 363.02 493.762 374.211 cv
519.528 385.406 558.625 389.117 582.79 386.598 cv
606.954 384.078 669.497 369.668 694.805 350.305 cv
694.805 350.305 666.188 331.621 657.891 318.461 cv
649.598 305.301 655.938 319.293 627.071 325.785 cv
598.204 332.273 557.278 342.391 493.254 321.098 cv
405.372 291.867 355.864 242.656 338.629 209.234 cv
cp
clp
645.094 322.426 mo
645.094 322.426 657.321 357.359 689.911 359.426 cv
689.911 359.426 653.59 364.918 645.094 322.426 cv
cp
f
631.129 321.641 mo
631.129 321.641 636.032 361.75 671.149 364.531 cv
671.149 364.531 644.364 357.473 631.129 321.641 cv
cp
f
620.278 323.164 mo
620.278 323.164 619.942 363.426 657.137 370.367 cv
657.137 370.367 629.254 360.34 620.278 323.164 cv
cp
f
610.075 325.965 mo
610.075 325.965 606.29 366.047 642.75 376.152 cv
642.75 376.152 615.836 363.773 610.075 325.965 cv
cp
f
598.684 326.637 mo
598.684 326.637 593.176 366.516 629.168 378.18 cv
629.168 378.18 602.805 364.656 598.684 326.637 cv
cp
f
588.856 328.742 mo
588.856 328.742 581.676 368.352 617.137 381.52 cv
617.137 381.52 591.372 366.898 588.856 328.742 cv
cp
f
579.211 327.211 mo
579.211 327.211 568.04 365.887 601.981 382.602 cv
601.981 382.602 577.84 365.43 579.211 327.211 cv
cp
f
569.184 327.883 mo
569.184 327.883 556.395 366.051 589.598 384.176 cv
589.598 384.176 566.204 366.008 569.184 327.883 cv
cp
f
559.747 327.707 mo
559.747 327.707 543.571 364.566 574.997 385.613 cv
574.997 385.613 553.336 365.41 559.747 327.707 cv
cp
f
549.715 327.047 mo
549.715 327.047 531.997 363.195 562.52 385.543 cv
562.52 385.543 541.723 364.445 549.715 327.047 cv
cp
f
540.227 325.906 mo
540.227 325.906 520.817 361.176 550.239 384.945 cv
550.239 384.945 530.473 362.887 540.227 325.906 cv
cp
f
530.29 324.359 mo
530.29 324.359 509.415 358.777 537.825 383.758 cv
537.825 383.758 518.997 360.891 530.29 324.359 cv
cp
f
521.133 321.023 mo
521.133 321.023 498.317 354.184 525.231 380.762 cv
525.231 380.762 507.75 356.844 521.133 321.023 cv
cp
f
511.403 318.488 mo
511.403 318.488 487.215 350.66 512.997 378.348 cv
512.997 378.348 496.528 353.719 511.403 318.488 cv
cp
f
502.372 315.598 mo
502.372 315.598 476.75 346.648 501.25 375.465 cv
501.25 375.465 485.918 350.121 502.372 315.598 cv
cp
f
492.895 312.227 mo
492.895 312.227 466.004 342.168 489.274 371.996 cv
489.274 371.996 475.016 346.027 492.895 312.227 cv
cp
f
486.184 306.148 mo
486.184 306.148 456.907 333.781 477.645 365.418 cv
477.645 365.418 465.579 338.367 486.184 306.148 cv
cp
f
477.204 301.633 mo
477.204 301.633 446.797 328.004 466.188 360.492 cv
466.188 360.492 455.262 332.953 477.204 301.633 cv
cp
f
468.708 294.934 mo
468.708 294.934 436.95 319.68 454.606 353.137 cv
454.606 353.137 445.153 325.063 468.708 294.934 cv
cp
f
460.192 289.594 mo
460.192 289.594 427.434 312.977 443.672 347.145 cv
443.672 347.145 435.387 318.703 460.192 289.594 cv
cp
f
450.446 285.25 mo
450.446 285.25 417.02 307.684 432.262 342.309 cv
432.262 342.309 424.817 313.637 450.446 285.25 cv
cp
f
442.333 279.32 mo
442.333 279.32 408.004 300.328 421.778 335.555 cv
421.778 335.555 415.528 306.605 442.333 279.32 cv
cp
f
432.516 274.164 mo
432.516 274.164 397.715 294.406 410.696 329.938 cv
410.696 329.938 405.114 300.844 432.516 274.164 cv
cp
f
424.801 267.727 mo
424.801 267.727 389.184 286.48 400.676 322.527 cv
400.676 322.527 396.305 293.23 424.801 267.727 cv
cp
f
416.083 261.355 mo
416.083 261.355 380.223 279.648 391.223 315.84 cv
391.223 315.84 387.247 286.484 416.083 261.355 cv
cp
f
408.727 254.504 mo
408.727 254.504 372.141 271.273 381.629 307.891 cv
381.629 307.891 378.868 278.398 408.727 254.504 cv
cp
f
400.536 248.879 mo
400.536 248.879 363.7 265.109 372.633 301.867 cv
372.633 301.867 370.325 272.336 400.536 248.879 cv
cp
f
393.583 241.625 mo
393.583 241.625 356.098 256.289 363.497 293.387 cv
363.497 293.387 362.415 263.789 393.583 241.625 cv
cp
f
384.778 236.336 mo
384.778 236.336 347.18 250.719 354.274 287.875 cv
354.274 287.875 353.434 258.266 384.778 236.336 cv
cp
f
378.192 228.742 mo
378.192 228.742 340.028 241.527 345.579 278.949 cv
345.579 278.949 345.965 249.336 378.192 228.742 cv
cp
f
369.997 221.449 mo
369.997 221.449 331.543 233.367 336.227 270.902 cv
336.227 270.902 337.301 241.301 369.997 221.449 cv
cp
f
363.911 213.441 mo
363.911 213.441 325.004 223.734 328.122 261.434 cv
328.122 261.434 330.426 231.906 363.911 213.441 cv
cp
f
657.598 326.953 mo
657.598 326.953 677.149 358.383 709.403 353.285 cv
709.403 353.285 675.157 366.574 657.598 326.953 cv
cp
f
grestore
gsave
639.348 216.98 mo
639.348 216.98 635.7 233.074 610.942 233.801 cv
586.192 234.527 560.153 229.137 559.879 200.457 cv
559.606 171.777 586.165 167.477 603.379 173.441 cv
620.602 179.406 647.864 184.539 639.348 216.98 cv
cp
clp
640.942 178.969 mo
640.942 178.969 625.383 205.223 638.59 240.77 cv
638.59 240.77 617.176 205.672 640.942 178.969 cv
cp
f
629.004 173.809 mo
629.004 173.809 602.266 210.715 630.93 246.848 cv
630.93 246.848 610.442 219.219 629.004 173.809 cv
cp
f
617.45 170.488 mo
617.45 170.488 590.715 207.395 619.375 243.523 cv
619.375 243.523 598.883 215.895 617.45 170.488 cv
cp
f
606.407 169.613 mo
606.407 169.613 579.676 206.52 608.336 242.652 cv
608.336 242.652 587.844 215.023 606.407 169.613 cv
cp
f
595.239 168.129 mo
595.239 168.129 568.504 205.031 597.165 241.164 cv
597.165 241.164 576.676 213.535 595.239 168.129 cv
cp
f
584.684 166.512 mo
584.684 166.512 557.946 203.418 586.606 239.547 cv
586.606 239.547 566.122 211.922 584.684 166.512 cv
cp
f
574.129 164.895 mo
574.129 164.895 547.387 201.805 576.051 237.934 cv
576.051 237.934 555.563 210.305 574.129 164.895 cv
cp
f
grestore
387.165 63.6406 mo
387.165 63.6406 404.106 45.0938 416.813 39.4297 cv
429.524 33.7617 437.047 28.7539 443.79 27.7656 cv
450.528 26.7813 466.239 21.7695 475.098 21.1914 cv
483.973 20.6172 487.629 18.5625 502.711 18.3945 cv
517.793 18.2266 528.754 15.9219 551.868 20.9219 cv
574.989 25.918 592.805 25.1758 601.317 30.668 cv
609.825 36.1602 618.047 34.4336 625.86 40.5039 cv
633.668 46.5742 651.094 49.7695 659.168 57.0664 cv
667.231 64.3711 688.204 80.5234 693.278 87.168 cv
698.348 93.8125 732.02 125.719 746.653 177.898 cv
746.653 177.898 731.895 144.594 717.067 124.578 cv
702.243 104.563 686.02 85.6953 678.297 80.0352 cv
670.563 74.3789 657.067 62.6523 649.079 59.6172 cv
641.083 56.582 638.313 51.168 629.317 49.2031 cv
620.325 47.2344 614.77 40.2617 603.168 37.5547 cv
591.575 34.8516 583.239 30.1836 542.204 25.5195 cv
501.184 20.8555 420.754 27.0352 387.165 63.6406 cv
cp
f
709.805 192.906 mo
709.805 192.906 682.93 193.844 683.868 251.656 cv
683.868 251.656 685.43 206.344 709.805 192.906 cv
cp
1 1 1 rgb
f
697.204 193.324 mo
697.204 193.324 680.954 206.449 678.766 236.137 cv
678.766 236.137 674.391 201.449 697.204 193.324 cv
cp
f
230.207 122.281 mo
238.898 132.41 267.367 170.684 269.152 237.973 cv
269.156 238.301 li
265.82 275.457 li
263.27 276.93 li
261.238 278.102 209.578 305.727 148.504 269.336 cv
147.063 268.621 108.367 246.598 87.6094 222.391 cv
85.0898 219.445 82.9375 216.527 81.2266 213.715 cv
76.3594 205.723 li
79.6992 205.504 li
78.9141 204.629 78.1094 203.707 77.2891 202.758 cv
69.3281 193.473 64.5586 185.555 63.1133 179.223 cv
61.4766 172.039 li
57.6484 165.375 55.4922 156.539 55.5742 151.84 cv
54.4141 142.371 li
57.1211 144.336 li
55.5313 139.52 54.2578 134.332 53.8906 129.363 cv
53.4102 122.793 li
57.3203 123.09 li
56.4375 119.012 55.4609 113.453 54.7773 106.52 cv
54.2188 100.828 li
58.2539 100.473 li
57.8008 98.4141 57.4609 96.1094 57.4688 93.7656 cv
57.4609 87.6445 li
63.5117 88.1094 li
63.5547 82.0273 64.0625 72.9141 66.3984 66.3672 cv
68.2422 61.1992 li
73.4688 62.875 li
73.5078 62.8906 75.2734 63.4531 78.082 64.2578 cv
77.8906 63.9727 li
87.7617 63.4258 li
88.5547 63.3789 92.5781 63.2031 97.5117 63.8164 cv
96.1055 61.1953 li
107.055 62.6445 li
107.512 62.7109 114.754 63.6992 122.461 66.375 cv
121.547 62.6758 li
130.352 64.4688 li
131.863 64.7773 144.387 67.4805 151.277 73.7969 cv
152.941 74.1563 155.508 74.8008 158.449 75.8594 cv
156.988 71.5625 li
170.559 80.1406 li
171.047 80.4492 180.68 86.5625 189.523 93.9219 cv
186.742 88.7695 li
186.98 88.9453 196.883 95.9453 202.641 102.027 cv
202.805 99.8594 li
211.301 107.211 li
211.492 107.371 215.086 110.492 219.211 114.883 cv
219.75 111.707 li
227.516 119.332 li
227.516 119.332 228.516 120.309 230.207 122.281 cv
cp
.27451 .207843 .145098 rgb
f
150.063 266.352 mo
150.063 266.352 102.211 237.27 86.0664 210.766 cv
92.3047 210.359 li
92.3047 210.359 71.625 191.043 68.6406 177.961 cv
74.543 181.961 li
74.543 181.961 59.7578 160.879 59.8906 153.355 cv
70.8047 161.285 li
70.8047 161.285 60.6328 143.66 59.5469 128.949 cv
64.8359 129.355 li
64.8359 129.355 61.9141 121.152 60.4219 105.965 cv
65.7773 105.492 li
65.7773 105.492 63.1367 99.5273 63.1367 93.7695 cv
69.3047 94.2383 li
69.3047 94.2383 68.3477 77.7617 71.7422 68.2773 cv
71.7422 68.2773 80.8203 71.1875 90.8516 73.2891 cv
88.0781 69.0859 li
88.0781 69.0859 101.43 68.3398 109.023 73.3477 cv
106.313 68.2695 li
106.313 68.2695 122.105 70.3672 130.922 76.8047 cv
129.219 70.0234 li
129.219 70.0234 143.188 72.8711 148.477 79.0391 cv
148.477 79.0391 160.754 80.8672 168.617 88.1211 cv
167.527 84.9297 li
167.527 84.9297 181.906 94.0117 191.395 103.164 cv
188.344 96.7227 li
188.344 96.7227 199.258 104.652 207.195 116.785 cv
207.602 111.5 li
207.602 111.5 217.16 119.77 222.719 128.172 cv
223.527 123.359 li
223.527 123.359 264.777 157.699 263.484 238.121 cv
260.441 272.02 li
260.441 272.02 208.98 301.461 150.063 266.352 cv
cp
1 1 1 rgb
f
231.859 257.41 mo
231.859 257.41 142.965 127.816 76.6523 79.2891 cv
76.6523 79.2891 131.848 134.059 158.84 169.371 cv
185.82 204.684 218.504 240.875 231.859 257.41 cv
cp
.27451 .207843 .145098 rgb
f
172.684 165.035 mo
172.684 165.035 171.25 117.273 137.242 75.2188 cv
137.242 75.2188 153.117 87.9648 165.391 118.602 cv
177.664 149.238 175.461 163.477 172.684 165.035 cv
cp
f
185.977 180.293 mo
185.977 180.293 194.672 137.371 154.582 85.2773 cv
154.582 85.2773 175.695 105.59 183.984 131.391 cv
192.289 157.195 191.68 176.914 185.977 180.293 cv
cp
f
197.734 196.656 mo
197.734 196.656 211.613 154.223 176.902 99.1328 cv
176.902 99.1328 196.016 120.996 201.441 147.469 cv
206.863 173.941 203.938 193.676 197.734 196.656 cv
cp
f
209.133 209.941 mo
209.133 209.941 226.305 169.488 197.555 115.309 cv
197.555 115.309 213.617 137.477 217.172 164.242 cv
220.73 191.016 214.516 209.828 209.133 209.941 cv
cp
f
220.285 226.305 mo
220.285 226.305 224.566 224.469 227.785 215.266 cv
232.852 200.789 235.652 171.793 217.824 131.266 cv
217.824 131.266 226.406 159.508 227.031 181.578 cv
227.656 203.805 224.895 215.684 220.285 226.305 cv
cp
f
229.137 240.953 mo
229.137 240.953 254.074 201.117 229.594 136.824 cv
229.594 136.824 244.047 163.383 243.813 196.801 cv
243.57 230.215 231.055 240.125 229.137 240.953 cv
cp
f
241.914 250.574 mo
241.914 250.574 257.941 232.301 252.551 192.883 cv
252.551 192.883 261.266 222.383 252.18 239.906 cv
249.715 244.645 247.508 248.406 241.914 250.574 cv
cp
f
158.582 146.664 mo
158.582 146.664 151.625 110.23 125.961 77.8984 cv
125.961 77.8984 139.422 90.2383 149.934 112.098 cv
160.441 133.953 161.156 144.871 158.582 146.664 cv
cp
f
143.566 134.434 mo
143.566 134.434 134.723 102.32 110.5 72.2188 cv
110.5 72.2188 124.086 85.5938 134.711 105.387 cv
145.336 125.172 145.578 133.09 143.566 134.434 cv
cp
f
126.07 116.914 mo
126.07 116.914 114.676 89.2227 97.4531 71.0586 cv
97.4531 71.0586 107.605 78.7891 115.016 90.582 cv
122.914 103.152 127.746 111.883 126.07 116.914 cv
cp
f
108.07 100.238 mo
108.07 100.238 100.711 83.4961 84.9844 68.9922 cv
84.9844 68.9922 90.2969 69.4375 99.0859 81.6016 cv
105.695 90.75 108.777 96.7461 108.07 100.238 cv
cp
f
154.18 180.902 mo
154.18 180.902 107.199 172.203 70.8203 132.176 cv
70.8203 132.176 81 149.801 109.402 166.605 cv
137.809 183.414 152.215 183.414 154.18 180.902 cv
cp
f
167.234 196.371 mo
167.234 196.371 112.906 193.68 67.5391 146.109 cv
67.5391 146.109 87.8125 173.594 119.207 186.941 cv
144.152 197.543 163.02 201.488 167.234 196.371 cv
cp
f
181.602 210.488 mo
181.602 210.488 132.563 217.137 70.2227 166.035 cv
70.2227 166.035 99.7188 194.676 132.434 206.637 cv
157.805 215.918 177.719 216.16 181.602 210.488 cv
cp
f
193 223.773 mo
193 223.773 147.043 236.426 83.2031 190.309 cv
83.2031 190.309 114.516 218.309 150.262 226.254 cv
176.617 232.113 192.066 229.07 193 223.773 cv
cp
f
207.473 237.289 mo
207.473 237.289 205.031 241.422 195.418 243.02 cv
171.719 246.957 134.031 237.52 96.7031 213.727 cv
96.7031 213.727 138.547 234.898 162.195 238.25 cv
184.203 241.375 196.273 240.227 207.473 237.289 cv
cp
f
220.598 248.27 mo
220.598 248.27 174.059 265.531 113.984 233.887 cv
113.984 233.887 141.352 252.832 174.719 256.039 cv
207.984 259.238 219.492 250.047 220.598 248.27 cv
cp
f
227.922 262.578 mo
227.922 262.578 200.363 277.973 147.016 259.914 cv
147.016 259.914 180.773 279.125 215.813 271.09 cv
221.016 269.891 224.922 267.773 227.922 262.578 cv
cp
f
138.176 164.16 mo
138.176 164.16 97.2969 148.172 69.2578 117.871 cv
69.2578 117.871 86.418 139.801 107.844 152.305 cv
128.789 164.531 136.008 166.43 138.176 164.16 cv
cp
f
128.383 147.457 mo
128.383 147.457 97.9922 133.816 71.9375 105.281 cv
71.9375 105.281 83.0859 120.746 101.027 134.273 cv
118.957 147.793 126.746 149.242 128.383 147.457 cv
cp
f
113.734 127.488 mo
113.734 127.488 88.1016 112.004 72.7852 92.2148 cv
72.7852 92.2148 78.8672 103.426 89.3984 112.547 cv
100.617 122.27 108.508 128.383 113.734 127.488 cv
cp
f
100 107.156 mo
100 107.156 84.582 97.332 72.6406 79.5703 cv
72.6406 79.5703 72.2734 84.8906 82.9531 95.4336 cv
90.9883 103.363 96.4453 107.324 100 107.156 cv
cp
f
170.242 221.238 mo
182.914 225.43 227.059 243.5 263.332 300.203 cv
263.508 300.48 li
279.84 334.023 li
278.414 336.602 li
277.277 338.652 247.305 388.988 176.211 389.363 cv
174.609 389.496 130.102 390.613 99.8281 380.605 cv
96.1445 379.387 92.7969 377.996 89.8789 376.473 cv
81.5859 372.145 li
84.332 370.23 li
83.2031 369.887 82.0391 369.516 80.8477 369.121 cv
69.2344 365.281 61.0625 360.965 56.5547 356.289 cv
51.4414 350.984 li
44.7227 347.254 38.3125 340.801 35.9609 336.734 cv
30.0781 329.223 li
33.4102 329.508 li
29.5625 326.207 25.793 322.418 22.9141 318.355 cv
19.1016 312.977 li
22.6094 311.215 li
19.7422 308.18 16.0391 303.918 11.875 298.336 cv
8.46094 293.75 li
11.7266 291.363 li
10.2734 289.832 8.79688 288.031 7.58984 286.023 cv
4.42578 280.785 li
9.84375 278.059 li
6.74219 272.828 2.47266 264.762 1.08984 257.949 cv
0 252.574 li
5.33984 251.309 li
5.38281 251.305 7.1875 250.867 10.0078 250.105 cv
9.69922 249.965 li
17.8633 244.398 li
18.5234 243.949 21.875 241.723 26.418 239.703 cv
23.8594 238.18 li
33.9844 233.77 li
34.4102 233.582 41.1211 230.695 49.1094 229.004 cv
46.4063 226.313 li
54.8789 223.297 li
56.3281 222.781 68.4492 218.633 77.6133 220.484 cv
79.2188 219.93 81.7539 219.152 84.8164 218.543 cv
81.3516 215.621 li
97.3984 215.957 li
97.9805 215.969 109.383 216.227 120.758 217.961 cv
115.711 214.988 li
116.008 215.016 128.102 215.898 136.172 218.129 cv
135.195 216.191 li
146.273 218.098 li
146.516 218.141 151.203 218.953 157.004 220.582 cv
155.82 217.586 li
166.414 220.102 li
166.414 220.102 167.773 220.426 170.242 221.238 cv
cp
f
176.008 386.004 mo
176.008 386.004 120.012 385.809 92.5 371.449 cv
97.6328 367.879 li
97.6328 367.879 69.9492 362.016 60.6367 352.355 cv
67.7578 352.734 li
67.7578 352.734 44.2109 342.313 40.4375 335.801 cv
53.8789 336.957 li
53.8789 336.957 36.0664 327.117 27.5391 315.082 cv
32.2773 312.699 li
32.2773 312.699 25.543 307.18 16.4219 294.949 cv
20.7656 291.773 li
20.7656 291.773 15.4219 288.031 12.4453 283.102 cv
17.9688 280.316 li
17.9688 280.316 8.64453 266.703 6.64844 256.824 cv
6.64844 256.824 15.9297 254.629 25.6094 251.246 cv
21.0547 249.082 li
21.0547 249.082 32.1055 241.547 41.1992 241.918 cv
36.25 238.965 li
36.25 238.965 50.8594 232.605 61.7344 233.57 cv
56.7813 228.641 li
56.7813 228.641 70.207 223.863 77.9219 226.414 cv
77.9219 226.414 89.375 221.645 99.8555 223.793 cv
97.2773 221.625 li
97.2773 221.625 114.281 221.977 127.133 224.91 cv
121.195 220.973 li
121.195 220.973 134.637 222.129 147.695 228.418 cv
145.313 223.68 li
145.313 223.68 157.77 225.828 166.871 230.152 cv
165.078 225.609 li
165.078 225.609 218.137 233.715 258.555 303.258 cv
273.453 333.855 li
273.453 333.855 244.594 385.641 176.008 386.004 cv
cp
1 1 1 rgb
f
241.438 336.109 mo
241.438 336.109 98.3906 271.031 16.5469 263.719 cv
16.5469 263.719 92.0938 282.117 133.438 298.418 cv
174.781 314.727 221.461 328.844 241.438 336.109 cv
cp
.27451 .207843 .145098 rgb
f
143.059 287.559 mo
143.059 287.559 117.172 247.398 66.3281 228.945 cv
66.3281 228.945 86.5 231.66 112.836 251.563 cv
139.168 271.461 144.637 284.785 143.059 287.559 cv
cp
f
162.328 293.758 mo
162.328 293.758 147.602 252.516 86.3672 228.609 cv
86.3672 228.609 114.945 235.098 135.363 252.91 cv
155.797 270.723 165.461 287.918 162.328 293.758 cv
cp
f
180.844 301.695 mo
180.844 301.695 170.813 258.199 112.641 228.945 cv
112.641 228.945 140.301 237.797 158.617 257.664 cv
176.926 277.535 184.617 295.941 180.844 301.695 cv
cp
f
197.461 307.191 mo
197.461 307.191 191.277 263.68 138.68 232.129 cv
138.68 232.129 163.879 242.82 180.75 263.906 cv
197.617 284.996 202.016 304.313 197.461 307.191 cv
cp
f
215.461 315.445 mo
215.461 315.445 218.18 311.66 216.184 302.117 cv
213.047 287.105 200.469 260.828 164.281 235.328 cv
164.281 235.328 186.211 255.078 198.141 273.66 cv
210.156 292.367 213.922 303.969 215.461 315.445 cv
cp
f
230.609 323.418 mo
230.609 323.418 231.395 276.426 177.223 234.012 cv
177.223 234.012 203.316 249.293 220.375 278.031 cv
237.422 306.77 231.824 321.723 230.609 323.418 cv
cp
f
246.516 325.059 mo
246.516 325.059 250.809 301.133 225.832 270.164 cv
225.832 270.164 248.531 290.922 249.797 310.625 cv
250.133 315.953 250.188 320.316 246.516 325.059 cv
cp
f
121.496 279.109 mo
121.496 279.109 96.7266 251.5 58.0469 237.066 cv
58.0469 237.066 75.9492 240.68 96.2383 253.973 cv
116.523 267.266 122.773 276.242 121.496 279.109 cv
cp
f
102.32 276.391 mo
102.32 276.391 78.1641 253.453 41.875 240.188 cv
41.875 240.188 60.418 244.629 79.7383 256.09 cv
99.0547 267.543 103.352 274.195 102.32 276.391 cv
cp
f
78.293 270.418 mo
78.293 270.418 54.2344 252.594 30.1055 245.93 cv
30.1055 245.93 42.7891 247.309 55.2266 253.578 cv
68.4844 260.266 77.1328 265.25 78.293 270.418 cv
cp
f
54.2656 265.438 mo
54.2656 265.438 39.3203 254.902 18.3594 250.602 cv
18.3594 250.602 23.1367 248.238 36.9453 254.117 cv
47.332 258.535 53.0703 262.082 54.2656 265.438 cv
cp
f
135.414 310.699 mo
135.414 310.699 90.6875 327.508 38.8633 312.02 cv
38.8633 312.02 56.6758 321.859 89.6797 321.582 cv
122.688 321.305 135.023 313.863 135.414 310.699 cv
cp
f
154.57 317.207 mo
154.57 317.207 106.664 342.957 43.2422 325.645 cv
43.2422 325.645 74.8008 338.715 108.578 333.934 cv
135.414 330.133 153.609 323.766 154.57 317.207 cv
cp
f
174.172 321.871 mo
174.172 321.871 135.609 352.895 55.832 341.328 cv
55.832 341.328 95.8828 350.621 130.074 343.969 cv
156.594 338.813 173.773 328.738 174.172 321.871 cv
cp
f
190.793 327.367 mo
190.793 327.367 157.965 361.934 79.4844 355.406 cv
79.4844 355.406 120.758 363.219 155.469 351.563 cv
181.066 342.969 192.727 332.387 190.793 327.367 cv
cp
f
210.164 331.469 mo
210.164 331.469 210.207 336.266 202.801 342.598 cv
184.539 358.211 147.391 369.59 103.137 368.492 cv
103.137 368.492 149.906 365.008 171.887 355.672 cv
192.344 346.98 202.086 339.77 210.164 331.469 cv
cp
f
227.07 334.098 mo
227.07 334.098 196.133 372.91 128.352 376.828 cv
128.352 376.828 161.563 378.922 191.797 364.434 cv
221.938 349.996 227.043 336.188 227.07 334.098 cv
cp
f
240.73 342.563 mo
240.73 342.563 225.086 369.977 170.07 382.066 cv
170.07 382.066 208.902 381.082 234.758 356.102 cv
238.594 352.391 240.852 348.559 240.73 342.563 cv
cp
f
113.059 304.629 mo
113.059 304.629 69.7969 312.047 30.1406 300.578 cv
30.1406 300.578 56.1563 310.496 80.9609 310.141 cv
105.211 309.793 112.375 307.691 113.059 304.629 cv
cp
f
96.043 295.379 mo
96.043 295.379 62.9766 299.395 25.9297 288.414 cv
25.9297 288.414 43.4648 295.898 65.8086 298.219 cv
88.1484 300.535 95.5625 297.754 96.043 295.379 cv
cp
f
73.1914 285.848 mo
73.1914 285.848 43.2422 285.824 19.9063 276.785 cv
19.9063 276.785 30.9102 283.246 44.6328 285.621 cv
59.2578 288.152 69.1758 289.309 73.1914 285.848 cv
cp
f
50.9297 275.527 mo
50.9297 275.527 32.6484 275.078 13.2539 266.031 cv
13.2539 266.031 15.6875 270.781 30.2734 274.293 cv
41.25 276.934 47.9688 277.508 50.9297 275.527 cv
cp
f
448.626 395.951 mo
447.999 395.767 447.488 395.591 447.488 395.591 cv
447.488 395.591 448.007 395.896 448.626 395.951 cv
cp
f
448.626 395.951 mo
447.999 395.767 447.488 395.591 447.488 395.591 cv
447.488 395.591 448.007 395.896 448.626 395.951 cv
cp
f
327.536 428.72 mo
326.617 428.491 325.263 427.821 324.292 426.558 cv
323.982 426.652 323.656 426.7 323.33 426.7 cv
321.946 426.7 li
321.435 426.188 li
321.189 426.235 320.94 426.262 320.691 426.262 cv
320.124 426.262 319.63 426.142 319.213 425.97 cv
317.4 427.345 315.337 427.903 311.745 428.118 cv
308.282 428.328 298.859 427.637 298.833 427.641 cv
304.922 425.531 li
304.87 425.531 304.823 425.535 304.775 425.535 cv
303.834 425.535 303.19 425.247 302.885 425.11 cv
302.825 425.084 302.61 425.028 301.931 425.028 cv
300.406 425.028 299.263 424.813 298.244 424.611 cv
297.763 424.521 297.333 424.414 296.869 424.414 cv
295.778 424.534 295.181 424.577 294.648 424.577 cv
293.746 424.577 293.02 424.461 291.748 424.221 cv
291.146 424.139 li
290.609 424.139 290.179 424.341 290.175 424.345 cv
287.88 425.437 li
286.024 423.125 li
285.882 423.12 285.749 423.112 285.625 423.104 cv
285.616 423.125 li
283.592 423.15 li
282.952 423.15 282.393 422.966 281.86 422.687 cv
286.114 428.328 li
285.315 428.229 276.743 424.393 274.345 422.214 cv
273.898 422.175 273.503 422.051 273.159 421.879 cv
272.601 422.3 li
270.848 420.839 268.325 419.009 267.521 418.712 cv
266.778 418.441 264.832 417.951 260.161 417.689 cv
257.888 417.564 256.762 416.692 255.989 415.812 cv
255.881 415.803 255.731 415.794 255.533 415.794 cv
254.141 415.82 li
249.75 415.82 245.324 414.729 245.139 414.682 cv
245.247 413.624 li
244.422 413.474 243.558 413.135 243.012 412.353 cv
241.663 412.03 240.271 411.395 239.704 410.071 cv
236.025 409.959 li
235.991 408.365 li
234.187 408.181 232.236 407.613 230.925 405.649 cv
230.491 405.25 229.838 405.22 229.353 405.202 cv
228.145 405.143 li
225.722 404.971 224.201 403.483 223.294 402.599 cv
223.161 402.47 223.036 402.337 222.907 402.221 cv
221.386 402.16 219.053 401.782 217.605 400.167 cv
217.252 399.771 216.978 399.329 216.789 398.856 cv
215.495 398.517 213.922 397.829 213.39 396.076 cv
213.239 396.055 213.084 396.024 212.917 395.999 cv
208.242 395.251 198.084 391.715 197.771 391.547 cv
205.488 392.402 li
204.211 391.482 203.313 390.335 203.103 388.892 cv
202.957 388.608 202.166 388.14 201.35 387.856 cv
200.452 389.708 li
198.531 389.11 196.267 387.628 195.558 385.304 cv
194.827 385.003 193.942 384.518 193.319 383.61 cv
192.06 383.353 190.363 382.618 189.503 380.221 cv
189.49 380.173 189.473 380.13 189.456 380.083 cv
192.614 386.391 li
193.538 388.346 185.589 378.545 185.279 376.606 cv
184.291 375.924 183.866 375.056 183.703 374.278 cv
180.484 369.86 li
179.255 369.079 177.902 368.159 176.789 366.023 cv
173.815 365.581 172.939 363.794 172.694 362.324 cv
172.526 361.512 170.868 359.454 170.125 359.016 cv
169.098 358.856 166.635 358.384 165.832 355.802 cv
164.809 355.243 163.524 354.332 162.82 352.433 cv
162.154 353.095 li
161.832 352.841 159.374 350.804 158.828 347.354 cv
158.342 347.147 157.913 346.825 157.569 346.408 cv
156.98 345.695 li
156.692 345.867 li
154.943 343.293 154.26 340.904 154.673 339.039 cv
151.949 338.038 150.574 336.366 150.892 334.416 cv
150.93 334.196 li
150.827 334.046 li
151.063 332.525 li
142.083 321.078 li
149.173 327.507 li
149.147 327.335 149.065 326.213 149.065 326.213 cv
148.971 324.636 148.971 324.636 147.953 323.438 cv
147.381 322.759 146.956 322.466 146.573 322.208 cv
146.019 321.826 144.859 321.04 144.717 319.42 cv
144.623 318.47 li
143.716 317.345 143.291 316.278 143.368 315.286 cv
143.359 315.273 143.351 315.261 143.346 315.252 cv
142.818 314.285 142.517 313.404 142.453 312.622 cv
142.439 312.618 142.427 312.609 142.414 312.604 cv
136.785 310.225 132.282 297.884 132.114 297.359 cv
137.631 303.934 li
136.519 302.503 136.519 301.171 136.579 300.625 cv
137.086 296.054 li
135.698 293.836 136.042 292.122 136.686 290.592 cv
136.192 289.38 135.822 288.074 136.063 285.994 cv
136.11 285.582 136.123 285.238 136.115 284.963 cv
135.208 292.203 li
134.92 291.374 130.756 281.396 132.823 278.72 cv
132.699 278.097 132.656 277.319 132.905 276.434 cv
132.694 276.111 132.518 275.725 132.411 275.27 cv
132.359 275.067 132.329 274.861 132.312 274.65 cv
131.238 274.638 li
131.238 274.638 131.259 274.221 131.379 273.628 cv
131.818 271.102 132.651 269.206 133.863 267.999 cv
133.751 267.974 133.575 266.86 133.107 265.924 cv
132.471 264.656 132.441 263.376 132.415 262.349 cv
132.411 261.987 132.394 261.442 132.342 261.266 cv
131.586 260.08 131.568 258.976 131.697 258.193 cv
131.238 257.429 130.838 256.217 131.474 254.747 cv
131.139 254.279 130.907 253.764 130.782 253.196 cv
130.701 252.813 130.679 252.44 130.696 252.083 cv
129.644 251.189 li
130.181 250.309 130.653 248.994 130.584 248.543 cv
130.288 246.769 130.696 245.122 131.728 243.902 cv
132.041 243.537 132.398 243.219 132.797 242.952 cv
132.742 242.291 132.819 241.582 133.146 240.868 cv
133.356 240.417 133.644 240.018 134 239.674 cv
133.893 239.369 133.747 239.013 133.588 238.677 cv
130.211 235.661 130.099 224.33 130.052 223.797 cv
133.322 229.739 li
133.442 229.366 133.597 228.983 133.794 228.588 cv
133.829 228.523 133.854 228.464 133.876 228.412 cv
133.128 227.342 132.961 226.358 133.055 225.537 cv
126.614 225.288 li
126.627 225.279 134.344 217.021 136.716 215.156 cv
136.879 214.907 136.841 213.897 136.819 213.36 cv
136.776 212.161 136.725 210.602 137.571 209.265 cv
137.361 208.208 137.249 206.756 138.143 205.114 cv
138.285 204.853 138.414 204.638 138.521 204.457 cv
138.457 203.739 li
138.229 200.529 140.467 198.501 141.894 197.548 cv
144.322 191.944 146.393 185.035 146.896 185.392 cv
147.149 185.048 147.398 184.726 147.643 184.446 cv
147.686 184.36 147.759 184.021 147.815 183.768 cv
147.991 182.934 148.249 181.735 149.113 180.42 cv
148.997 179.879 148.932 179.273 148.932 178.594 cv
148.932 177.524 148.932 174.306 152.121 173.734 cv
151.88 170.684 li
152.778 170.645 li
153.122 170.662 li
153.122 170.662 153.74 170.688 154.076 170.722 cv
154.093 170.632 154.102 170.537 154.119 170.438 cv
154.437 168.088 155.231 166.55 156.637 165.596 cv
156.877 164.926 157.229 164.251 157.633 163.615 cv
156.473 161.699 155.571 159.52 155.343 158.953 cv
155.949 154.703 li
160.19 155.361 li
160.349 155.494 160.736 155.829 161.264 156.461 cv
162.149 154.721 163.353 153.564 165.544 152.22 cv
165.991 151.94 166.489 150.883 166.975 149.852 cv
167.589 148.546 168.358 146.913 169.63 145.443 cv
170.056 144.953 170.464 144.516 170.842 144.116 cv
167.409 148.288 li
168.762 144.902 172.432 138.04 174.279 137.744 cv
174.499 137.447 174.739 137.125 174.993 136.79 cv
175.728 135.806 176.527 134.744 177.141 133.997 cv
177.614 133.421 li
178.576 132.261 180.824 129.541 180.91 128.355 cv
181.099 125.695 187.411 120.212 187.411 120.212 cv
188.128 119.301 189.043 118.416 190.264 117.845 cv
190.367 117.673 190.728 116.556 190.943 115.89 cv
191.519 114.085 192.301 111.636 194.522 110.321 cv
194.5 110.205 194.479 110.08 194.458 109.956 cv
194.333 109.131 194.161 107.996 194.337 106.682 cv
194.681 104.09 196.357 102.72 199.313 102.6 cv
200.198 102.565 200.731 102.543 201.444 101.946 cv
202.781 100.838 203.619 100.331 204.319 99.9097 cv
205.118 99.4282 205.518 99.1875 206.992 97.2798 cv
207.181 97.0352 207.374 96.7944 207.567 96.5664 cv
211.332 92.3042 li
211.976 92.3042 213.437 92.1709 214.645 90.9678 cv
215.951 89.6572 216.956 89.0039 217.618 88.5703 cv
218.224 88.1748 218.224 88.1748 218.451 87.6465 cv
218.795 86.834 li
219.543 85.021 220.011 84.2559 221.94 83.4268 cv
222.052 83.3711 li
224.321 79.1084 228.025 77.9053 228.025 77.9053 cv
228.734 77.248 229.572 76.6895 230.582 76.5259 cv
230.611 76.4873 230.629 76.4531 230.654 76.4185 cv
229.808 75.3828 229.284 73.5781 232.945 70.3687 cv
234.676 68.8516 235.695 72.3667 235.695 72.3667 cv
235.884 72.1519 235.982 71.9111 236.017 71.7134 cv
235.858 71.563 235.75 71.4512 235.708 71.4043 cv
239.966 66.8667 li
239.961 66.8667 239.961 66.8623 239.961 66.8623 cv
239.97 66.8623 240.434 67.146 241.362 67.3091 cv
241.367 67.292 241.921 65.4746 241.921 65.4746 cv
234.32 67.6187 li
235.227 67.3438 244.895 60.4902 246.755 60.4902 cv
248.736 60.4902 249.947 61.4609 250.665 62.0371 cv
251.039 62.3379 251.236 62.4883 251.524 62.604 cv
252.023 62.8062 252.654 62.9219 253.239 62.9219 cv
253.742 62.9219 254.042 62.8403 254.12 62.8062 cv
254.88 62.4238 257.484 60.3008 258.008 59.6177 cv
258.245 58.9219 258.945 58.2856 260.002 57.916 cv
252.199 60.7437 li
252.947 60.2969 260.956 52.2656 264.157 51.2002 cv
267.792 49.9844 270.392 49.9668 272.291 49.9541 cv
272.953 49.9497 273.555 49.9585 274.126 49.8682 cv
274.775 49.7695 275.213 49.7393 275.548 49.7178 cv
275.625 49.6621 276.077 49.2925 277 48.5879 cv
277.654 48.085 278.234 47.7197 278.779 47.4663 cv
279.355 45.958 280.417 44.02 282.818 43.1479 cv
286.179 44.1963 li
283.085 43.0747 li
286.041 44.0762 li
283.128 42.9414 li
283.128 42.9414 287.386 44.0547 287.399 44.0547 cv
287.399 44.0547 286.57 38.2881 294.652 42.0093 cv
295.713 41.6738 296.345 41.5923 296.844 41.5322 cv
296.844 41.5322 296.852 41.5322 296.856 41.5322 cv
296.904 41.5322 297.157 41.3691 297.832 40.7891 cv
299.104 39.7017 300.363 39.1348 301.682 39.0571 cv
303.168 37.4116 305.687 36.1484 307.216 35.4824 cv
317.512 31.0049 li
317.155 31.5078 li
317.327 31.4561 317.499 31.4043 317.67 31.3657 cv
319.355 30.9448 320.975 30.6484 322.521 30.3604 cv
325.813 29.7588 328.417 29.2817 330.226 27.8296 cv
332.065 26.3643 333.023 22.583 333.204 20.9844 cv
333.204 20.9844 336.994 13.9678 339.09 19.9316 cv
339.739 21.7881 341.054 23.9321 340.925 28.083 cv
341.823 27.5547 343.181 27.1465 345.029 26.5918 cv
349.455 25.2642 353.94 13.0913 353.949 12.6187 cv
355.711 19.5278 li
355.767 19.6611 355.964 20.2153 356.089 21.0664 cv
359.144 19.4893 362.844 18.8618 363.6 18.8618 cv
371.82 19.9531 li
367.132 24.1084 li
365.086 24.7959 li
365.611 25.1309 li
366.616 25.1055 li
367.536 25.1055 368.245 25.4746 368.769 25.9131 cv
368.962 25.8828 369.375 25.8657 369.388 25.8657 cv
369.615 24.7573 370.011 23.3394 370.66 21.5215 cv
370.87 20.8984 371.038 20.5293 371.038 20.5293 cv
373.887 21.7148 li
374.028 21.5732 374.174 21.4316 374.329 21.2939 cv
375.549 22.4067 li
376.795 22.9224 li
376.624 23.3867 li
378.91 25.4746 li
378.905 25.4834 378.901 25.4922 378.896 25.5005 cv
382.506 26.0034 li
382.536 26.4502 382.854 28.9209 385.548 29.5098 cv
386.227 29.6558 386.807 29.7285 387.28 29.7285 cv
387.8 29.7285 388.049 29.647 388.423 29.5225 cv
388.754 29.4106 389.175 29.2734 389.69 29.209 cv
384.659 25.4531 li
385.943 25.7627 398.688 28.332 401.283 31.499 cv
402.5 31.6709 404.167 31.916 405.572 34.0127 cv
405.542 33.9395 405.684 33.9268 405.855 33.9268 cv
405.941 33.9268 406.517 33.9482 406.749 33.9697 cv
405.09 30.3818 li
409.379 29.6685 li
409.688 29.6685 li
410.573 29.6685 413.242 30.0254 414.114 34.1504 cv
414.423 34.0859 414.746 34.0342 415.089 34.0083 cv
414.93 33.8882 414.784 33.7808 414.664 33.6904 cv
405.739 26.3687 li
408.188 27.3828 423.386 31.2583 425.483 33.9053 cv
426.274 32.1953 427.812 30.876 429.806 30.2617 cv
432.784 30.9531 li
433.17 35.1685 li
432.964 35.4478 432.723 35.9678 432.719 36.1699 cv
433.265 36.2856 433.793 36.5908 434.249 36.8574 cv
435.684 37.6992 436.694 38.374 438.597 40.6255 cv
439.001 41.0981 439.199 41.1885 439.208 41.1885 cv
439.813 41.2617 440.402 41.3691 440.969 41.5752 cv
442.378 40.0972 li
442.907 40.4707 446.924 43.3711 449.443 46.6543 cv
450.963 46.6543 452.145 47.5781 453.009 48.377 cv
453.577 48.9014 453.967 49.2622 454.264 49.5029 cv
454.298 49.5029 454.341 49.5029 454.384 49.5029 cv
454.659 49.5029 454.934 49.52 455.222 49.5547 cv
455.75 49.2148 456.502 48.8926 457.534 48.8926 cv
458.389 48.8926 459.308 49.1118 460.529 49.5977 cv
462.006 50.1904 463.132 51.0239 464.129 51.7544 cv
465.633 52.8589 466.622 53.5894 468.645 53.5894 cv
469.002 53.5894 480.504 55.7505 480.909 55.7031 cv
470.918 56.7305 li
478.915 59.3901 li
479.865 59.708 481.089 60.3354 482.125 61.2935 cv
485.863 58.0923 li
485.863 60.7393 li
487.913 60.9668 489.094 62.918 490.34 66.1577 cv
491.397 66.7207 492.39 67.541 493.198 69.3374 cv
493.223 69.3374 li
495.668 69.3374 497.409 70.7031 498.118 73.1787 cv
498.135 73.1914 li
497.022 69.5996 li
505.152 76.4658 li
506.329 77.4668 512.22 82.7178 512.22 88.2437 cv
512.22 88.4155 512.22 88.5659 512.229 88.6948 cv
512.865 89.0557 513.359 89.5498 513.715 90.1772 cv
513.887 90.1987 514.063 90.2285 514.249 90.2632 cv
514.854 88.9395 li
517.187 89.6787 521.287 92.2183 521.824 97.0693 cv
521.858 97.3574 521.897 97.5635 521.922 97.7012 cv
522.773 98.2207 523.667 99.0415 524.002 100.619 cv
524.655 100.885 525.17 101.271 525.579 101.727 cv
523.989 93.7437 li
525.446 95.3892 533.413 107.992 532.819 112.697 cv
532.785 112.955 532.759 113.17 532.742 113.35 cv
532.969 113.643 533.184 113.982 533.382 114.407 cv
533.417 114.407 533.456 114.407 533.485 114.407 cv
535.131 114.407 536.901 115.494 537.176 117.918 cv
537.219 118.313 537.241 118.648 537.25 118.949 cv
537.28 119.172 537.726 119.675 539.497 121.127 cv
543.11 124.105 544.399 125.708 544.008 128.548 cv
545.22 129.477 546.698 130.972 546.359 133.43 cv
546.44 133.524 546.526 133.61 546.608 133.705 cv
547.377 134.572 548.658 136.025 548.658 138.431 cv
548.658 139.802 548.409 140.743 548.241 141.361 cv
548.167 141.417 li
549.027 142.333 li
550.002 143.39 549.925 144.425 549.792 145.98 cv
549.839 146.002 549.929 146.058 550.024 146.118 cv
550.643 146.535 551.575 147.162 552.387 148.245 cv
553.891 150.256 554.127 151.652 554.244 153.384 cv
553.32 140.953 li
553.483 141.452 557.823 158.008 557.59 161.686 cv
558.261 162.137 559.133 162.859 559.391 164.174 cv
559.421 164.337 559.443 164.5 559.456 164.664 cv
560.414 165.209 564.195 176.119 566.159 179.449 cv
559.868 173.425 li
561.715 174.916 563.117 177.816 562.601 181.692 cv
562.476 182.629 562.657 183.041 563.004 183.866 cv
563.473 184.958 564.109 186.453 563.74 188.67 cv
563.679 189.271 564.694 191.072 565.235 192.039 cv
566.042 193.491 566.889 194.991 567.168 196.533 cv
567.688 199.396 566.687 201.72 565.604 202.962 cv
566.502 205.016 565.94 206.468 565.656 207.181 cv
565.699 208.466 li
565.828 209.88 565.969 211.508 566.223 212.634 cv
566.284 212.732 566.502 213.076 566.748 213.502 cv
568.049 215.719 569.824 227.351 568.449 232.154 cv
565.484 224.364 li
565.48 225.082 565.407 225.911 565.192 226.878 cv
564.78 228.738 565.424 229.71 565.944 230.487 cv
566.898 231.923 569.824 239.025 567.994 250.485 cv
564.01 241.479 li
563.95 241.312 563.89 241.14 563.826 240.968 cv
563.795 241.07 563.761 241.174 563.731 241.281 cv
563.667 241.564 563.804 242.553 563.89 243.21 cv
564.139 245.015 564.479 247.485 563.482 249.905 cv
562.596 252.054 562.678 253.141 562.833 255.306 cv
563.035 258.172 562.214 269.963 562.034 271.114 cv
559.511 264.931 li
559.846 266.121 562.249 274.448 562.949 275.239 cv
557.547 272.928 li
557.273 272.815 556.813 272.588 556.263 272.149 cv
556.057 273.521 555.674 274.591 555.245 275.656 cv
555.257 275.617 555.284 275.596 555.296 275.596 cv
555.395 275.596 555.506 276.056 555.592 276.403 cv
556.048 278.277 556.817 281.418 554.668 284.275 cv
554.217 284.886 552.95 286.574 551 286.991 cv
551.059 287.967 549.285 296.075 549.199 297.239 cv
546.78 290.188 li
546.243 291.34 545.632 292.517 544.893 293.531 cv
544.214 294.455 543.6 296.152 543.045 297.656 cv
542.277 299.753 541.55 301.733 540.288 303.001 cv
539.269 304.037 536.163 310.062 535.776 311.38 cv
534.89 311.183 li
534.237 312.523 533.404 314.104 532.368 315.922 cv
530.645 318.935 529.494 320.043 528.2 320.61 cv
528.097 320.829 527.956 321.164 527.766 321.667 cv
525.626 327.309 522.167 330.11 521.776 330.411 cv
520.925 329.638 li
520.32 330.368 519.74 330.854 519.292 331.231 cv
518.768 331.679 518.682 331.765 518.601 331.958 cv
517.957 333.419 517.067 334.085 516.272 334.42 cv
516.238 334.506 516.199 334.609 516.156 334.729 cv
515.567 336.38 514.519 338.253 513.037 340.294 cv
512.546 341.248 511.7 342.163 511.017 342.816 cv
510.183 342.013 li
509.642 342.722 508.976 343.697 508.434 344.487 cv
507.717 345.545 506.93 346.692 506.088 347.813 cv
505.027 349.231 504.352 349.906 503.721 350.318 cv
503.51 350.688 503.209 351.285 502.719 352.265 cv
500.919 355.861 497.516 361.671 496.077 362.758 cv
495.243 363.381 li
493.911 363.411 li
492.038 365.542 489.103 368.533 485.132 372.361 cv
484.067 371.274 li
488.699 375.154 li
487.737 374.811 480.23 374.751 479.495 374.351 cv
479.229 374.69 li
479.156 374.862 473.935 385.321 473.935 385.321 cv
473.518 379.662 li
472.766 380.07 472.014 380.139 471.588 380.139 cv
471.25 380.126 li
470.815 380.452 470.283 380.805 469.531 381.123 cv
469.307 381.222 469.144 381.299 469.032 381.359 cv
468.414 383.13 467.198 383.847 466.819 384.032 cv
462.101 386.365 li
462.355 388.943 li
462.187 388.99 461.293 389.218 460.223 389.218 cv
458.664 389.218 457.491 388.75 456.653 388.058 cv
455.996 388.561 455.373 388.827 454.917 388.99 cv
454.921 388.995 li
456.055 390.125 456.584 391.835 456.816 393.386 cv
461.671 393.829 li
454.336 398.728 li
453.946 398.989 452.829 399.604 451.015 399.604 cv
449.563 399.604 448.02 399.204 446.426 398.422 cv
446.546 398.594 446.671 398.783 446.8 398.998 cv
446.933 399.222 447.053 399.458 447.161 399.689 cv
449.421 400.631 li
447.647 401.159 li
448.124 403.222 444.312 407.647 444.239 408.15 cv
441.601 404.971 li
441.601 404.897 441.618 404.077 441.021 403.123 cv
441.003 403.127 li
440.754 403.204 440.217 403.329 439.448 403.329 cv
438.327 403.329 437.136 403.059 436.002 402.538 cv
434.184 403.497 li
433.081 403.256 432.25 403.007 431.756 402.856 cv
431.362 402.998 430.721 403.024 430.3 403.024 cv
429.742 403.007 li
429.153 403.17 li
428.646 403.583 428.195 403.948 427.808 404.296 cv
428.053 404.532 428.354 404.747 428.641 404.833 cv
427.683 409.349 li
428.972 412.469 li
428.972 412.469 421.784 409.357 421.68 409.306 cv
421.165 409.563 420.649 409.646 420.198 409.646 cv
419.875 409.646 li
419.605 409.697 419.322 409.728 419.034 409.728 cv
418.656 409.728 418.26 409.685 417.796 409.594 cv
417.143 410.269 416.133 411.055 414.561 411.055 cv
413.929 411.029 li
413.474 411.029 413.216 411.119 413.16 411.149 cv
412.395 412.838 410.547 414.342 410.187 414.626 cv
409.189 413.534 li
408.249 414.454 407.226 414.617 406.637 414.617 cv
405.529 414.617 li
405.413 414.531 li
405.035 414.634 404.609 414.698 404.128 414.698 cv
403.329 414.698 402.615 414.526 401.979 414.376 cv
401.722 414.316 401.464 414.234 401.228 414.222 cv
401.228 414.222 li
401.498 414.222 401.928 414.11 402.306 413.801 cv
402.873 413.35 403.011 412.675 402.963 412.417 cv
398.619 416.821 li
398.559 416.782 398.465 416.718 398.344 416.619 cv
398.035 416.757 397.708 416.847 397.365 416.89 cv
396.849 417.397 396.188 417.883 395.371 418.355 cv
394.413 419.099 393.395 419.317 393.081 419.369 cv
392.535 417.552 li
392.354 417.81 li
390.326 418.123 li
388.741 419.743 378.184 421.935 375.833 422.484 cv
382.966 419.567 li
382.966 419.567 381.634 419.739 381.612 419.739 cv
380.443 419.739 379.459 419.451 378.695 418.939 cv
378.45 418.987 378.175 419.017 377.891 419.017 cv
377.247 419.017 li
376.327 418.703 li
376.052 418.583 375.704 418.476 375.408 418.407 cv
374.625 419.043 373.809 419.193 373.272 419.21 cv
371.39 420.667 368.249 421.127 365.791 421.247 cv
365.697 419.949 li
364.592 420.031 363.587 420.311 363.303 420.513 cv
362.311 421.372 361.279 421.806 360.188 421.806 cv
359.784 421.806 li
357.249 423.821 353.348 424.436 352.54 424.543 cv
352.217 423.134 li
351.874 423.064 351.599 423.021 351.396 423.021 cv
351.272 423.021 350.98 423.021 350.254 423.404 cv
349.446 423.834 348.681 424.044 347.934 424.044 cv
347.474 424.044 347.065 423.967 346.717 423.847 cv
345.261 424.681 343.838 425.08 342.442 425.08 cv
341.269 425.08 340.13 424.792 339.224 424.272 cv
339.164 424.251 338.85 424.156 338.566 424.156 cv
339.284 423.61 339.121 426.142 338.708 424.891 cv
338.39 423.911 338.566 425.66 337.677 425.578 cv
337.101 425.716 li
336.285 425.716 335.369 425.553 334.544 425.157 cv
333.393 425.411 li
332.95 425.411 332.559 425.325 332.22 425.204 cv
331.992 425.256 331.764 425.286 331.528 425.299 cv
333.741 430.267 li
327.536 428.72 li
cp
f
283.369 419.507 mo
286.23 419.396 284.744 420.194 286.694 419.962 cv
288.645 419.73 290.244 420.194 289.324 420.649 cv
288.409 421.105 288.757 421.569 288.757 421.569 cv
288.757 421.569 290.244 420.766 292.074 421.109 cv
293.909 421.453 294.369 421.569 296.199 421.337 cv
298.034 421.105 299.293 421.913 301.931 421.913 cv
304.569 421.913 303.882 422.601 305.257 422.368 cv
306.632 422.137 306.744 422.944 307.887 422.601 cv
309.034 422.257 308.918 423.516 310.637 423.056 cv
312.355 422.597 312.587 423.172 312.587 423.172 cv
312.587 423.172 313.619 423.976 311.212 424.319 cv
308.806 424.663 305.137 425.806 305.137 425.806 cv
305.137 425.806 307.775 425.234 311.556 425.007 cv
315.337 424.779 316.712 424.203 318.199 422.712 cv
319.69 421.222 319.806 423.859 321.293 422.944 cv
322.784 422.029 323.012 424.203 323.587 423.399 cv
324.163 422.597 325.994 421.337 326.226 423.288 cv
326.458 425.239 328.288 425.694 328.288 425.694 cv
328.288 425.694 327.369 423.632 327.712 422.601 cv
328.056 421.569 330.23 421.797 330.23 421.797 cv
330.346 421.453 331.15 422.712 331.949 421.913 cv
332.752 421.114 333.101 422.944 333.788 422.024 cv
334.476 421.105 335.043 420.766 335.275 421.681 cv
335.507 422.597 337.105 422.601 337.105 422.601 cv
337.105 422.601 335.851 422.484 336.882 421.569 cv
337.913 420.654 339.976 421.109 340.775 421.569 cv
341.574 422.029 343.413 422.368 345.587 420.882 cv
347.762 419.396 346.851 421.681 348.793 420.649 cv
350.739 419.618 351.775 419.851 353.382 420.194 cv
354.989 420.538 352.119 421.453 352.119 421.453 cv
352.119 421.453 356.355 420.882 358.074 419.163 cv
359.793 417.444 359.569 419.618 361.288 418.132 cv
363.007 416.646 367.931 416.524 368.043 417.212 cv
368.159 417.899 365.637 418.132 365.637 418.132 cv
365.637 418.132 370.449 417.899 371.601 416.524 cv
372.752 415.149 372.976 416.757 373.663 415.726 cv
374.351 414.694 376.757 415.493 377.556 415.837 cv
378.355 416.181 379.851 414.922 380.074 415.837 cv
380.302 416.753 381.337 416.641 381.337 416.641 cv
381.337 416.641 381.449 415.609 382.257 415.038 cv
383.064 414.467 383.855 415.953 385.462 414.806 cv
387.069 413.659 386.949 415.382 386.949 415.382 cv
386.146 416.989 382.712 418.132 382.712 418.132 cv
388.101 416.873 388.324 415.609 388.324 415.609 cv
390.846 413.319 389.931 415.837 390.73 414.694 cv
391.534 413.552 394.168 413.547 394.056 414.806 cv
393.944 416.065 392.565 416.297 392.565 416.297 cv
392.565 416.297 395.199 415.149 395.659 414.007 cv
396.114 412.864 396.918 414.462 397.377 413.431 cv
397.833 412.399 397.377 411.024 398.525 412.399 cv
399.676 413.774 400.355 414.234 400.355 414.234 cv
400.355 414.234 399.212 412.288 400.355 411.368 cv
401.502 410.449 404.025 412.288 405.056 411.257 cv
406.087 410.226 406.315 412.399 407.23 411.024 cv
408.15 409.649 408.605 407.819 409.409 408.962 cv
410.208 410.105 408.262 412.172 408.262 412.172 cv
408.262 412.172 409.869 410.913 410.556 409.538 cv
411.244 408.163 412.962 407.819 414.449 407.931 cv
415.94 408.043 415.712 405.868 418.002 406.444 cv
420.289 407.021 419.034 405.868 419.949 406.444 cv
420.869 407.021 420.752 404.382 421.556 405.297 cv
422.364 406.212 423.159 406.556 423.159 406.556 cv
423.159 406.556 422.587 405.181 422.355 404.266 cv
422.127 403.351 423.042 403.922 423.042 403.922 cv
425.909 407.587 427.744 407.819 427.744 407.819 cv
425.458 407.132 423.619 404.382 424.417 403.351 cv
425.221 402.319 426.252 401.516 427.511 400.484 cv
428.775 399.453 430.034 400.141 431.181 399.797 cv
432.333 399.453 432.667 400.141 434.275 400.141 cv
435.881 400.141 436.909 401.976 436.909 401.976 cv
436.909 401.976 435.994 400.141 434.386 399.226 cv
432.784 398.311 434.619 398.538 434.619 398.538 cv
434.619 398.538 435.534 398.882 437.252 399.681 cv
438.971 400.48 440.119 400.141 440.119 400.141 cv
440.119 400.141 438.744 399.569 437.369 398.993 cv
435.994 398.418 436.221 396.703 436.221 396.703 cv
436.221 396.703 437.824 397.734 439.431 398.078 cv
441.038 398.422 441.837 399.453 441.837 399.453 cv
445.051 401.976 444.699 405.297 444.699 405.297 cv
444.699 405.297 445.159 402.319 444.127 400.601 cv
443.096 398.882 442.636 399.913 442.065 398.078 cv
441.489 396.243 441.605 397.851 439.315 396.703 cv
437.02 395.556 441.15 393.038 442.292 393.149 cv
443.44 393.262 444.011 393.609 447.449 395.444 cv
450.886 397.279 452.605 396.132 452.605 396.132 cv
452.605 396.132 450.087 395.899 448.136 395.212 cv
446.19 394.524 446.074 393.493 444.931 392.351 cv
443.788 391.208 445.386 390.056 446.306 389.712 cv
447.225 389.368 449.4 389.601 451.574 391.087 cv
453.752 392.574 453.869 396.243 453.869 396.243 cv
453.869 396.243 453.98 392.462 452.721 391.203 cv
451.458 389.944 451.23 389.484 452.034 387.649 cv
452.833 385.815 453.636 386.507 454.9 385.476 cv
456.163 384.444 458.105 384.788 458.105 384.788 cv
458.565 386.739 461.542 385.936 461.542 385.936 cv
461.542 385.936 459.824 385.819 459.94 383.186 cv
460.051 380.547 461.087 382.726 462.002 381.239 cv
462.914 379.748 465.556 379.748 465.556 379.748 cv
465.44 381.239 li
465.44 381.239 465.9 381.007 466.127 380.208 cv
466.351 379.404 466.699 378.944 468.306 378.257 cv
469.913 377.569 469.792 376.771 471.284 376.998 cv
472.77 377.226 472.087 375.851 473.002 376.083 cv
473.914 376.311 474.949 375.052 474.949 375.052 cv
474.949 375.052 473.346 375.279 473.23 374.592 cv
473.119 373.904 473.806 373.561 474.949 372.873 cv
476.096 372.186 476.212 373.788 476.212 373.788 cv
476.212 373.788 476.9 372.413 476.324 371.842 cv
475.752 371.266 479.19 370.007 479.19 370.007 cv
479.534 371.271 483.087 372.524 483.087 372.524 cv
483.087 372.524 480.337 370.806 480.565 368.743 cv
480.789 366.681 483.087 366.913 484.462 365.649 cv
485.837 364.387 488.699 361.868 488.011 363.819 cv
487.324 365.771 482.971 370.118 482.971 370.118 cv
482.971 370.118 492.596 360.837 493.4 359.007 cv
494.208 357.177 495.574 355.109 495.917 356.368 cv
496.261 357.628 493.744 360.609 494.199 360.266 cv
494.659 359.922 497.409 355.913 499.931 350.868 cv
502.458 345.824 500.846 349.609 503.596 345.944 cv
506.346 342.279 508.409 338.382 509.9 338.266 cv
511.395 338.149 508.869 340.556 508.869 340.556 cv
508.869 340.556 512.074 336.891 513.221 333.681 cv
514.364 330.472 514.94 332.538 515.744 330.703 cv
516.551 328.868 518.034 328.868 519.409 326.351 cv
520.784 323.833 522.958 323.141 522.958 323.141 cv
519.864 327.953 li
519.864 327.953 522.958 325.547 524.848 320.563 cv
526.739 315.578 526.223 320.391 529.661 314.375 cv
533.098 308.359 534.129 305.094 534.129 305.094 cv
534.129 305.094 532.411 311.969 532.754 310.594 cv
533.098 309.219 536.536 302.344 538.083 300.797 cv
539.629 299.25 540.489 294.266 542.379 291.688 cv
544.27 289.109 545.473 284.297 546.504 284.641 cv
547.536 284.984 547.879 289.969 547.879 289.969 cv
548.223 285.328 546.676 282.234 547.879 280.344 cv
549.083 278.453 551.145 277.422 551.661 280.344 cv
552.176 283.266 549.254 283.438 549.254 283.438 cv
549.254 283.438 550.114 285.156 552.176 282.406 cv
554.239 279.656 551.661 276.219 552.348 274.5 cv
553.036 272.781 553.551 271.234 553.208 267.625 cv
552.864 264.016 555.098 262.641 555.098 262.641 cv
556.129 269 558.708 270.031 558.708 270.031 cv
554.754 265.563 555.958 257.313 556.129 256.109 cv
556.301 254.906 557.504 253.531 558.364 255.938 cv
559.223 258.344 558.879 264.703 558.879 264.703 cv
558.879 264.703 559.911 258.172 559.739 255.766 cv
559.567 253.359 559.395 251.641 560.598 248.719 cv
561.801 245.797 560.083 242.359 560.77 240.297 cv
561.458 238.234 559.911 238.406 560.254 235.656 cv
560.598 232.906 560.77 231.531 561.114 232.391 cv
561.458 233.25 561.801 233.766 563.348 234.109 cv
564.895 234.453 566.958 240.469 566.958 240.469 cv
566.614 237.031 564.036 233.25 563.348 232.219 cv
562.661 231.188 561.458 229.297 562.145 226.203 cv
562.833 223.109 561.629 222.078 562.489 219.672 cv
563.348 217.266 561.458 215.547 563.348 216.063 cv
565.239 216.578 566.098 223.797 566.098 223.797 cv
567.473 218.984 563.52 214.859 563.176 213.313 cv
562.833 211.766 562.661 209.359 562.489 207.641 cv
562.317 205.922 563.52 205.75 562.661 204.031 cv
561.801 202.313 562.317 200.938 562.317 199.906 cv
562.317 198.875 562.145 198.188 562.145 198.188 cv
564.551 198.016 563.181 200.989 563.181 200.989 cv
563.181 200.989 564.556 199.614 564.1 197.092 cv
563.645 194.569 560.199 190.904 560.663 188.154 cv
561.127 185.404 559.056 184.717 559.511 181.279 cv
559.971 177.842 558.369 176.012 557.449 175.552 cv
556.534 175.092 555.386 168.677 556.994 169.137 cv
558.6 169.592 561.119 171.427 561.119 171.427 cv
561.119 171.427 558.824 167.529 557.681 167.302 cv
556.538 167.07 554.931 167.074 556.074 165.467 cv
557.221 163.864 554.244 164.779 554.475 161.574 cv
554.708 158.364 553.324 154.012 553.324 154.012 cv
553.324 154.012 553.324 158.824 552.636 159.279 cv
551.949 159.739 551.494 158.592 551.261 155.614 cv
551.034 152.632 551.261 151.949 549.886 150.114 cv
548.511 148.279 546.449 148.516 546.681 145.766 cv
546.913 143.016 546.681 145.766 545.538 143.476 cv
544.395 141.186 545.538 140.953 545.538 138.431 cv
545.538 135.909 542.788 135.453 543.244 133.163 cv
543.699 130.873 540.261 130.869 540.725 129.038 cv
541.19 127.208 541.413 126.744 537.511 123.538 cv
533.614 120.333 534.306 120.328 534.074 118.266 cv
533.846 116.203 531.556 119.413 530.869 116.663 cv
530.181 113.913 529.261 115.976 529.725 112.306 cv
530.19 108.637 524.913 102.681 524.913 102.681 cv
524.913 102.681 528.35 109.788 526.744 109.788 cv
525.136 109.788 524.681 107.494 523.761 104.744 cv
522.846 101.994 521.011 104.744 521.011 101.994 cv
521.011 99.2437 519.181 101.538 518.725 97.4131 cv
518.27 93.2881 513.913 91.9131 513.913 91.9131 cv
513.913 91.9131 516.886 93.7437 517.119 94.8906 cv
517.35 96.0381 515.056 95.3506 514.6 93.9756 cv
514.145 92.6006 511.619 93.9756 511.163 92.1406 cv
510.708 90.3062 509.1 92.6006 509.1 88.2437 cv
509.1 83.8867 503.136 78.8506 503.136 78.8506 cv
504.975 84.8062 li
504.975 84.8062 501.074 80.4531 499.699 78.1631 cv
498.324 75.873 496.038 77.2437 495.119 74.0381 cv
494.199 70.8325 491.681 74.0381 490.538 71.0562 cv
489.395 68.0742 488.244 69.4531 487.556 67.6187 cv
486.869 65.7837 485.725 63.2656 485.261 63.9531 cv
484.801 64.6406 487.556 67.6187 487.1 68.7656 cv
486.645 69.9131 489.619 71.9756 486.181 70.1406 cv
482.744 68.3062 482.744 64.8687 482.744 64.8687 cv
481.136 66.2437 li
481.369 63.4937 477.931 62.3506 477.931 62.3506 cv
479.994 64.6406 li
479.994 64.6406 478.386 66.2437 476.784 63.9531 cv
475.176 61.6631 474.721 64.6406 473.574 62.8062 cv
472.431 60.9712 470.824 63.0381 469.221 60.7437 cv
467.614 58.4492 465.784 60.7437 464.869 57.9937 cv
463.958 55.2437 461.431 57.7656 459.824 57.3062 cv
458.221 56.8462 457.994 53.6406 462.806 55.9312 cv
467.619 58.2212 470.136 56.6187 470.136 56.6187 cv
464.181 57.3062 462.806 53.8687 459.369 52.4937 cv
455.931 51.1187 457.306 53.1812 455.244 52.7256 cv
453.181 52.27 454.096 53.6406 450.886 50.6631 cv
447.681 47.6855 449.744 53.4131 447.909 49.9756 cv
446.07 46.5381 440.574 42.6406 440.574 42.6406 cv
440.574 42.6406 447.221 51.1187 444.699 49.0562 cv
442.181 46.9937 442.181 48.6006 441.034 45.8506 cv
439.882 43.1006 438.744 45.6187 436.221 42.6406 cv
433.695 39.6631 433.244 40.1187 430.721 38.2881 cv
428.195 36.4575 430.721 33.2437 430.721 33.2437 cv
427.739 34.1587 427.056 37.3687 429.574 39.6631 cv
432.096 41.9575 430.494 41.4937 430.261 43.1006 cv
430.034 44.7075 427.744 43.7881 427.511 42.1812 cv
427.284 40.5742 424.306 40.8062 424.306 40.8062 cv
425.913 35.0742 416.511 31.1812 416.511 31.1812 cv
416.511 31.1812 420.869 34.3906 422.699 36.4531 cv
424.534 38.5156 422.931 41.0381 420.869 41.0381 cv
418.806 41.0381 416.744 41.4937 416.511 38.2881 cv
416.284 35.0825 411.471 39.8906 411.244 36.2256 cv
411.02 32.5605 409.637 32.7881 409.637 32.7881 cv
409.637 32.7881 411.244 36.2256 410.556 37.3687 cv
409.869 38.5117 408.721 38.7437 407.806 37.6006 cv
406.895 36.4575 404.369 37.8281 402.994 35.7656 cv
401.619 33.7031 400.931 35.9937 398.869 33.4756 cv
396.806 30.9575 390.159 29.3506 390.159 29.3506 cv
398.409 34.3906 li
398.409 34.3906 397.721 35.5381 395.887 34.3906 cv
394.056 33.2437 394.056 35.5381 391.762 33.2437 cv
389.471 30.9492 390.159 33.7031 384.887 32.5562 cv
379.619 31.4087 379.387 26.1406 379.387 26.1406 cv
378.012 30.2656 384.431 34.1631 384.431 34.1631 cv
370.458 31.645 376.409 23.6187 376.409 23.6187 cv
372.052 27.5117 376.869 32.3281 376.869 32.3281 cv
370.458 29.5781 373.887 21.7881 373.887 21.7881 cv
373.887 21.7881 371.824 27.0562 372.284 28.8906 cv
372.739 30.7256 374.574 31.6406 373.659 32.1006 cv
372.739 32.5605 372.512 32.3281 370.449 29.8062 cv
368.387 27.2837 369.074 31.6406 367.244 28.8906 cv
365.413 26.1406 367.471 32.7881 367.471 32.7881 cv
363.114 31.645 365.181 25.6812 365.181 25.6812 cv
364.27 26.5962 363.806 30.4937 363.346 31.4131 cv
362.882 32.3325 361.744 32.1006 361.512 31.4131 cv
361.284 30.7256 357.159 33.2437 358.074 31.6406 cv
358.994 30.0381 356.699 31.1812 356.244 28.6631 cv
355.788 26.145 356.931 25.9131 358.994 24.5381 cv
361.056 23.1631 362.887 22.2437 363.574 22.0156 cv
364.262 21.7881 358.306 22.7031 355.784 24.9937 cv
353.257 27.2837 355.096 29.3506 354.637 31.6406 cv
354.181 33.9312 346.619 33.2437 348.458 32.7881 cv
350.292 32.3325 351.431 30.0381 351.431 30.0381 cv
348.458 32.7881 342.262 33.4756 342.262 33.4756 cv
355.784 28.4355 352.802 20.6406 352.802 20.6406 cv
352.802 20.6406 352.802 27.5156 345.927 29.5781 cv
339.052 31.6406 345.927 29.5781 342.489 31.6406 cv
339.052 33.7031 332.864 36.4531 336.302 32.3281 cv
339.739 28.2031 336.302 21.3281 336.302 21.3281 cv
336.302 21.3281 335.614 27.5156 332.177 30.2656 cv
328.739 33.0156 323.927 33.0156 318.427 34.3906 cv
312.927 35.7656 304.677 44.0156 304.677 44.0156 cv
304.677 44.0156 304.849 41.7813 306.396 40.4063 cv
307.942 39.0313 308.458 38.3438 308.458 38.3438 cv
308.458 38.3438 304.505 40.0625 303.646 41.6094 cv
302.786 43.1563 302.271 41.0938 299.864 43.1563 cv
297.458 45.2188 297.974 44.1875 295.396 45.0469 cv
292.817 45.9063 291.614 46.7656 291.786 45.2188 cv
291.958 43.6719 292.817 42.6406 288.177 41.7813 cv
288.177 41.7813 293.505 43.5 289.896 47.2813 cv
289.896 47.2813 286.458 46.7656 285.599 47.7969 cv
284.739 48.8281 283.88 51.9219 283.536 50.0313 cv
283.192 48.1406 284.224 46.9375 284.911 46.25 cv
285.599 45.5625 286.114 43.8438 286.114 43.8438 cv
286.114 43.8438 285.771 45.3906 283.88 46.0781 cv
281.989 46.7656 281.646 48.8281 281.13 50.2031 cv
280.614 51.5781 281.817 48.8281 278.896 51.0625 cv
275.974 53.2969 276.833 52.6094 274.599 52.9531 cv
272.364 53.2969 269.786 52.6094 265.146 54.1563 cv
260.505 55.7031 259.646 56.2188 259.646 56.2188 cv
259.646 56.2188 267.38 53.8125 269.442 53.8125 cv
269.442 53.8125 270.474 54.6719 268.411 55.5313 cv
266.349 56.3906 266.349 55.5313 265.489 57.4219 cv
264.63 59.3125 264.286 57.25 263.255 59.3125 cv
262.224 61.375 261.021 60.3438 260.677 61.2031 cv
260.333 62.0625 256.552 65.1563 255.349 65.6719 cv
254.146 66.1875 252.083 66.1875 250.364 65.5 cv
248.646 64.8125 248.302 63.6094 246.755 63.6094 cv
245.208 63.6094 241.771 64.6406 241.771 64.6406 cv
241.771 64.6406 246.583 63.4375 247.786 64.9844 cv
248.989 66.5313 251.224 66.7031 251.224 66.7031 cv
251.224 66.7031 249.505 67.9063 247.442 67.3906 cv
245.38 66.875 245.552 67.9063 244.521 68.0781 cv
243.489 68.25 247.786 70.1406 243.833 70.4844 cv
239.88 70.8281 237.989 69.2813 237.989 69.2813 cv
237.989 69.2813 240.224 71.6875 243.833 71.1719 cv
243.833 71.1719 242.63 73.75 240.224 73.75 cv
237.817 73.75 241.083 77.3594 237.302 75.9844 cv
233.521 74.6094 232.146 71.6875 233.349 70.3125 cv
233.349 70.3125 229.396 73.5781 236.786 77.0156 cv
236.786 77.0156 234.896 75.125 233.005 78.5625 cv
231.114 82 232.317 77.7031 229.567 80.7969 cv
226.817 83.8906 225.614 84.5781 226.474 82.8594 cv
227.333 81.1406 228.708 78.7344 228.708 78.7344 cv
228.708 78.7344 226.817 80.9688 224.583 85.2656 cv
224.583 85.2656 225.099 85.4375 223.552 86.125 cv
222.005 86.8125 222.349 86.4688 221.317 88.875 cv
220.286 91.2813 219.427 90.5938 216.849 93.1719 cv
214.271 95.75 211.005 95.4063 211.005 95.4063 cv
211.005 95.4063 212.208 96.4375 214.271 95.75 cv
214.271 95.75 212.38 95.4063 209.458 99.1875 cv
206.536 102.969 206.536 101.766 203.442 104.344 cv
200.349 106.922 197.771 104.516 197.427 107.094 cv
197.083 109.672 198.802 111.563 196.224 112.938 cv
193.646 114.313 194.161 119.469 191.583 120.672 cv
189.005 121.875 188.146 126.344 186.599 125.484 cv
185.052 124.625 184.192 126.172 184.021 128.578 cv
183.849 130.984 181.099 134.078 179.552 135.969 cv
178.005 137.859 175.255 141.813 175.427 141.125 cv
175.599 140.438 173.021 140.609 171.646 144.047 cv
171.646 144.047 174.567 140.438 175.255 142.156 cv
175.942 143.875 174.224 144.906 171.989 147.484 cv
169.755 150.063 169.411 153.5 167.177 154.875 cv
164.942 156.25 164.255 157.109 163.567 159 cv
162.88 160.891 161.333 160.031 161.333 161.234 cv
161.333 162.438 161.505 162.609 160.302 160.547 cv
159.099 158.484 158.239 157.797 158.239 157.797 cv
158.239 157.797 159.958 162.094 161.505 163.641 cv
161.505 163.641 159.442 166.047 159.442 167.25 cv
159.442 168.453 157.724 167.078 157.208 170.859 cv
156.692 174.641 155.317 176.016 155.489 174.813 cv
155.661 173.609 152.224 173.781 152.224 173.781 cv
152.224 173.781 155.317 173.438 154.114 175.672 cv
152.911 177.906 152.052 175.5 152.052 178.594 cv
152.052 181.688 153.599 179.797 152.052 181.688 cv
150.505 183.578 151.192 185.125 149.989 186.5 cv
148.786 187.875 147.067 190.969 147.067 190.969 cv
147.067 190.969 147.067 188.734 143.802 187.188 cv
143.802 187.188 148.614 190.969 144.317 199.734 cv
144.317 199.734 141.396 201.109 141.567 203.516 cv
141.739 205.922 141.911 204.719 140.88 206.609 cv
139.849 208.5 141.567 209.531 140.364 210.734 cv
139.161 211.938 141.052 215.719 138.646 217.609 cv
136.239 219.5 131.771 222.766 131.771 222.766 cv
131.771 222.766 136.927 220.359 138.302 218.813 cv
138.302 218.813 139.161 219.328 137.614 221.219 cv
136.067 223.109 137.614 223.797 136.411 225.344 cv
135.208 226.891 138.302 226.547 136.583 229.984 cv
134.864 233.422 138.474 235.656 136.411 234.969 cv
134.349 234.281 132.802 230.328 132.802 230.328 cv
132.802 230.328 133.146 234.453 136.067 236.688 cv
136.067 236.688 138.474 240.984 136.583 241.672 cv
134.692 242.359 137.442 245.109 136.067 245.109 cv
134.692 245.109 133.317 245.969 133.661 248.031 cv
134.005 250.094 132.286 252.844 132.286 252.844 cv
132.286 252.844 133.833 251.469 134.521 248.547 cv
135.208 245.625 136.583 248.203 135.036 250.094 cv
133.489 251.984 133.317 252.844 135.036 253.703 cv
136.755 254.563 133.317 255.594 134.521 256.797 cv
135.724 258 134.177 258.344 135.036 259.719 cv
135.896 261.094 135.208 263.156 135.896 264.531 cv
136.583 265.906 137.442 268.828 136.067 270.203 cv
134.692 271.578 134.349 274.844 134.349 274.844 cv
134.349 274.844 134.521 272.266 136.067 271.922 cv
137.614 271.578 136.927 271.75 135.724 273.641 cv
134.521 275.531 137.442 274.672 136.239 276.563 cv
135.036 278.453 137.099 278.969 135.552 280.344 cv
134.005 281.719 135.208 285.156 135.208 285.156 cv
135.208 285.156 134.177 281.547 136.411 281.375 cv
138.646 281.203 139.505 283.438 139.161 286.359 cv
138.817 289.281 140.192 289.625 139.849 291 cv
139.505 292.375 138.302 293.063 140.708 295.641 cv
143.114 298.219 141.567 300.109 142.427 301.484 cv
143.286 302.859 140.708 302.344 139.677 300.969 cv
139.677 300.969 139.505 302.516 142.942 303.891 cv
146.38 305.266 145.349 306.125 143.802 306.469 cv
142.255 306.813 143.974 307.844 141.567 307.156 cv
139.161 306.469 137.958 304.063 137.958 304.063 cv
137.958 304.063 139.161 307.844 143.63 309.734 cv
148.099 311.625 146.38 311.625 145.692 312.141 cv
145.005 312.656 147.067 314.719 146.552 315.406 cv
146.036 316.094 148.958 317.813 148.099 318.672 cv
147.239 319.531 148.442 319.188 150.333 321.422 cv
152.224 323.656 152.052 324.344 152.224 326.75 cv
152.396 329.156 154.286 328.813 155.489 330.703 cv
156.692 332.594 149.646 327.094 149.646 327.094 cv
155.833 332.594 li
155.833 332.594 155.489 334.313 154.286 333.281 cv
153.083 332.25 155.661 335 154.458 334.828 cv
153.255 334.656 154.458 335.688 156.005 336.203 cv
157.552 336.719 159.442 337.922 158.067 339.125 cv
156.692 340.328 159.271 344.109 159.271 344.109 cv
159.271 344.109 157.724 341.188 159.099 340.5 cv
160.474 339.813 160.302 342.219 159.958 343.938 cv
159.614 345.656 162.021 342.563 161.849 345.656 cv
161.677 348.75 164.083 350.641 164.083 350.641 cv
164.083 350.641 161.849 347.719 163.052 347.031 cv
164.255 346.344 164.942 348.406 165.63 350.984 cv
166.317 353.563 168.552 352.875 168.724 354.422 cv
168.896 355.969 170.099 355.797 171.302 356.141 cv
172.505 356.484 175.427 359.75 175.771 361.813 cv
176.114 363.875 178.349 361.984 179.38 364.219 cv
180.411 366.453 181.614 366.797 183.333 368 cv
185.052 369.203 183.505 371.094 183.505 371.094 cv
183.505 371.094 184.708 370.75 185.224 370.406 cv
185.739 370.063 187.114 371.609 186.771 373.156 cv
186.427 374.703 188.489 373.844 188.317 375.391 cv
188.146 376.938 189.864 379.688 189.864 379.688 cv
189.864 379.688 188.317 376.594 190.208 376.766 cv
192.099 376.938 191.583 376.766 192.442 379.172 cv
193.302 381.578 195.364 379.859 195.708 381.406 cv
196.052 382.953 198.286 382.094 198.458 383.984 cv
198.63 385.875 201.38 386.734 201.38 386.734 cv
201.38 386.734 198.114 384.5 200.177 384.5 cv
202.239 384.5 205.849 386.047 206.192 388.453 cv
206.536 390.859 214.099 392.234 214.099 392.234 cv
206.536 390.859 li
206.536 390.859 209.114 392.234 213.411 392.922 cv
217.708 393.609 216.161 393.609 216.333 394.984 cv
216.505 396.359 219.771 395.5 219.599 397.047 cv
219.427 398.594 221.661 399.109 223.38 399.109 cv
225.099 399.109 225.958 401.859 228.364 402.031 cv
230.771 402.203 232.146 401.859 233.521 403.922 cv
234.896 405.984 238.161 404.953 241.083 405.641 cv
244.005 406.328 236.099 406.844 236.099 406.844 cv
243.317 407.016 li
243.317 407.016 246.239 407.703 243.661 408.219 cv
241.083 408.734 243.494 409.409 245.724 409.594 cv
249.849 409.938 242.802 410.625 246.927 410.625 cv
251.052 410.625 252.942 411.141 253.802 411.313 cv
245.896 411.656 li
245.896 411.656 250.708 412.859 255.005 412.688 cv
259.302 412.516 257.239 414.406 260.333 414.578 cv
263.427 414.75 266.692 415.094 268.583 415.781 cv
270.474 416.469 274.599 419.906 274.599 419.906 cv
274.599 419.906 273.911 418.359 271.849 416.984 cv
269.786 415.609 272.536 416.297 273.911 418.359 cv
275.286 420.422 274.427 417.328 275.974 419.391 cv
277.521 421.453 281.646 421.969 281.646 421.969 cv
281.646 421.969 277.692 420.422 277.692 419.563 cv
277.692 418.703 280.614 418.016 282.505 419.391 cv
284.396 420.766 283.369 419.507 283.369 419.507 cv
cp
1 1 1 rgb
f
206.364 105.203 mo
206.364 105.203 160.989 153.328 143.802 203.516 cv
126.614 253.703 141.052 303.891 155.489 330.703 cv
169.927 357.516 198.114 387.078 237.302 404.266 cv
276.489 421.453 313.614 424.891 355.552 418.703 cv
397.489 412.516 441.489 398.766 477.239 369.203 cv
512.989 339.641 567.989 278.453 560.426 193.891 cv
206.364 105.203 li
cp
f
162.82 184.494 mo
162.82 184.494 168.896 139.243 210.034 101.538 cv
243.034 71.2881 256.779 70.1406 275.114 59.1406 cv
293.449 48.1406 331.029 38.0605 354.864 37.1406 cv
378.699 36.2212 399.784 37.373 412.614 44.7031 cv
425.445 52.0337 430.949 47.6855 462.114 63.2656 cv
493.28 78.8462 530.869 111.623 545.534 144.623 cv
560.195 177.623 568.445 220.708 549.195 262.873 cv
529.945 305.038 518.945 312.368 500.614 336.203 cv
482.284 360.038 469.449 367.368 454.784 377.453 cv
440.114 387.538 426.364 387.534 407.114 396.703 cv
387.864 405.873 372.971 403.351 314.302 401.516 cv
255.632 399.681 229.735 383.868 217.82 370.118 cv
205.909 356.368 162.36 312.368 155.945 281.203 cv
149.534 250.038 142.659 242.243 162.82 184.494 cv
cp
.27451 .207843 .145098 rgb
f
357.043 398.762 mo
346.387 398.762 333.633 398.427 313.808 397.804 cv
257.132 396.033 232.146 380.547 221.163 367.867 cv
217.583 363.789 li
203.915 348.234 167.602 306.916 162.051 279.944 cv
161.02 274.917 159.915 270.405 158.871 266.143 cv
153.568 244.491 150.063 230.187 166.42 183.342 cv
166.563 182.93 li
166.648 182.504 li
166.73 182.113 175.25 141.877 214.249 106.136 cv
240.176 82.3652 251.37 76.0879 264.329 68.8174 cv
267.607 66.9824 270.963 65.0962 274.654 62.8833 cv
291.296 52.9019 332.821 41.7813 356.939 40.8535 cv
360.541 40.7158 364.042 40.6387 367.428 40.6387 cv
386.747 40.6387 400.514 43.1392 409.521 48.2871 cv
415.682 51.8062 421.062 53.0996 427.292 54.5947 cv
435.43 56.5498 445.558 58.9819 462.995 67.7002 cv
493.937 83.1689 526.25 116.586 539.832 147.154 cv
552.284 175.174 563.031 217.545 543.523 260.282 cv
529.163 291.739 519.722 303.074 507.777 317.426 cv
503.987 321.977 500.073 326.682 495.672 332.4 cv
479.89 352.918 468.761 360.446 455.883 369.16 cv
451.248 372.314 li
443.71 377.496 436.29 379.782 427.692 382.434 cv
420.885 384.53 413.173 386.911 404.433 391.07 cv
391.916 397.034 381.286 398.762 357.043 398.762 cv
cp
1 1 1 rgb
f
337.909 48.373 mo
337.909 48.373 368.614 36.9131 399.784 49.2881 cv
399.784 49.2881 369.07 42.4131 337.909 48.373 cv
cp
f
335.159 57.5381 mo
335.159 57.5381 366.788 45.623 402.994 57.5381 cv
402.994 57.5381 372.739 52.0381 335.159 57.5381 cv
cp
f
363.325 361.68 mo
360.033 359.118 357.455 355.655 355.294 347.337 cv
355.152 347.973 354.972 348.682 354.74 349.477 cv
353.128 354.955 351.625 356.979 350.649 357.709 cv
347.615 359.986 li
346.077 356.519 li
345.347 354.886 343.241 350.259 342.21 348.454 cv
341.308 346.877 340.414 342.408 339.696 337.32 cv
339.542 338.305 339.357 339.357 339.133 340.513 cv
337.775 347.659 335.447 354.341 335.352 354.624 cv
334.098 358.19 li
330.888 356.188 li
330.071 355.677 327.523 353.559 326.221 346.598 cv
323.927 353.73 319.188 358.525 318.964 358.762 cv
315.801 361.92 li
314.04 357.813 li
313.902 357.503 310.752 350.018 311.466 341.364 cv
311.513 340.844 311.595 340.217 311.698 339.499 cv
309.09 344.213 305.386 348.428 302.335 348.428 cv
300.539 348.428 299.061 347.242 298.563 345.416 cv
298.231 344.204 298.038 342.262 298.575 338.081 cv
291.129 348.978 288.018 348.974 286.686 348.974 cv
285.672 348.974 282.389 348.578 282.118 343.443 cv
281.989 341.067 282.475 337.596 283.364 333.716 cv
278.526 340.921 273.322 342.068 270.5 342.068 cv
269.571 342.068 268.953 341.939 268.729 341.884 cv
266.435 341.313 li
266.435 338.949 li
266.435 338.777 266.447 334.661 267.139 330.149 cv
267.569 327.382 268.252 322.931 270.34 317.778 cv
264.613 322.922 256.582 330.046 253.935 332.031 cv
252.955 332.771 252.019 332.925 251.408 332.925 cv
250.162 332.925 248.994 332.302 248.22 331.224 cv
246.235 328.469 246.579 321.667 247.249 319.647 cv
247.288 319.549 250.635 309.747 260.363 300.415 cv
261.91 298.933 263.899 296.65 266.104 293.927 cv
261.79 297.944 257.656 301.463 254.854 303.414 cv
248.848 307.591 245.367 308.57 242.299 309.438 cv
241.285 309.73 240.288 310.005 239.197 310.427 cv
234.539 312.214 230.899 312.592 230.749 312.609 cv
224.669 313.22 li
227.87 308.016 li
229.864 304.776 233.263 298.915 233.912 296.973 cv
234.238 295.997 234.883 294.743 235.828 293.308 cv
232.262 294.726 229.202 294.992 227.432 294.992 cv
226.577 294.992 226.087 294.928 226.087 294.928 cv
222.306 294.442 li
223.607 290.862 li
223.625 290.819 225.056 286.991 225.833 283.79 cv
222.422 285.736 219.955 287.138 218.632 287.7 cv
217.42 288.237 li
214.997 289.32 211.336 290.953 207.593 291.576 cv
207.15 291.649 206.751 291.684 206.395 291.684 cv
204.297 291.684 203.215 290.575 202.759 289.917 cv
201.333 287.854 202.261 285.389 203 283.399 cv
203.185 282.905 203.387 282.445 203.447 282.089 cv
203.919 279.244 207.808 273.087 212.578 270.302 cv
214.051 269.442 215.62 268.395 217.386 267.213 cv
218.593 266.409 219.921 265.524 221.382 264.583 cv
218.262 265.782 216.419 266.212 214.473 266.212 cv
213.325 266.212 212.204 266.044 210.691 265.799 cv
208.99 265.528 206.665 265.15 202.922 264.931 cv
190.436 264.196 189.718 263.479 188.949 262.714 cv
187.299 261.06 li
188.489 259.04 li
188.644 258.778 192.412 252.466 198.948 249.776 cv
200.155 249.277 201.019 248.774 201.853 248.298 cv
204.495 246.785 206.858 245.668 212.272 244.946 cv
211.843 244.934 211.452 244.925 211.104 244.925 cv
207.078 244.925 204.59 243.67 202.394 242.562 cv
201.234 241.978 200.232 241.466 199.029 241.165 cv
196.941 240.649 194.595 240.538 192.997 240.538 cv
192 240.538 191.351 240.581 191.304 240.585 cv
186.324 240.929 li
188.322 236.353 li
188.442 236.082 191.325 229.684 199.601 227.32 cv
204.469 225.929 208.143 225.177 213.626 225.177 cv
214.172 225.177 214.743 225.181 215.332 225.198 cv
208.104 224.235 204.443 223.569 204.229 223.535 cv
197.04 222.229 li
203.043 218.069 li
203.146 218.001 203.459 217.79 203.937 217.52 cv
201.638 216.768 200.241 215.5 198.823 214.009 cv
198.308 213.463 197.783 212.892 197.027 212.363 cv
193.018 209.558 192.013 206.614 191.854 206.047 cv
190.951 202.893 li
194.166 202.248 li
194.269 202.231 196.727 201.75 200.735 201.75 cv
203.051 201.75 205.436 201.904 207.825 202.218 cv
211.035 202.635 214.034 203.232 217.455 204.096 cv
216.87 203.735 216.264 203.349 215.572 202.91 cv
214.013 201.931 211.993 200.654 208.895 198.815 cv
205.393 196.739 201.496 193.887 202.497 190.256 cv
203.249 187.497 206.343 186.518 208.771 186.518 cv
209.986 186.518 212.479 186.99 217.88 188.056 cv
221.042 188.679 224.639 189.388 226.074 189.534 cv
229.984 189.925 236.932 192.22 247.937 196.748 cv
250.88 197.96 253.845 199.374 256.767 200.796 cv
255.375 200.062 253.948 199.301 252.534 198.549 cv
247.412 195.824 242.299 193.096 239.149 191.609 cv
232.575 188.494 230.255 186.947 225.387 182.422 cv
219.809 177.24 220.045 171.895 220.093 171.302 cv
220.342 168.041 li
223.578 168.543 li
224.012 168.612 234.466 170.254 239.562 171.611 cv
245.281 173.137 255.538 178.4 260.217 181.748 cv
262.507 183.381 264.806 184.958 267.281 186.281 cv
267.281 186.281 270.108 182.844 272.343 183.32 cv
270.908 182.766 268.996 181.933 266.903 181.026 cv
262.567 179.144 256.65 176.57 254.029 176.196 cv
249.161 175.504 241.152 172.428 237.443 169.128 cv
234.238 166.279 229.546 159.924 229.348 159.653 cv
225.571 154.536 li
231.926 154.836 li
231.926 154.836 239.033 155.18 242.419 155.52 cv
244.783 155.752 251.855 156.62 259.641 159.078 cv
255.435 157.105 252.427 155.657 251.546 155.172 cv
250.248 154.45 248.71 153.681 247.073 152.86 cv
243.64 151.146 239.751 149.203 236.602 146.999 cv
230.71 142.87 228.162 137.374 230.41 133.627 cv
233.078 129.176 241.801 129.047 242.789 129.047 cv
245.075 129.047 250.558 130.615 255.28 132.712 cv
254.201 130.744 253.544 128.918 253.544 127.625 cv
253.544 126.572 254.042 123.139 260.462 123.139 cv
262.305 123.139 264.587 123.431 266.929 124.14 cv
264.239 121.033 262.116 118.408 260.952 115.211 cv
259.555 111.365 258.855 107.906 258.829 107.764 cv
258.142 104.331 li
258.142 104.331 261.695 104.146 261.725 104.146 cv
264.045 104.146 270.1 104.542 275.114 108.886 cv
276.236 109.861 277.413 111.039 278.607 112.328 cv
277.963 110.102 277.447 108.125 277.447 106.17 cv
277.422 105.289 li
277.361 103.352 277.289 101.345 278.65 99.9395 cv
279.54 99.02 li
281.237 98.8481 li
283.059 98.8481 284.52 100.163 285.702 101.457 cv
289.375 105.465 296.491 113.93 299.263 117.729 cv
300.144 118.94 li
303.306 123.28 307.057 128.453 310.366 133.172 cv
307.104 127.13 304.23 121.965 302.889 119.731 cv
302.215 118.618 301.45 117.437 300.659 116.229 cv
297.608 111.541 294.455 106.703 294.794 102.586 cv
294.983 100.356 294.82 98.4316 294.665 96.5708 cv
294.558 95.2817 294.45 94.0571 294.45 92.8325 cv
294.45 89.709 296.517 88.2822 298.434 88.2822 cv
301.325 88.2822 304.131 91.4531 305.966 94.1089 cv
306.297 94.5898 306.632 95.0713 306.967 95.5654 cv
306.477 92.334 306.456 88.0332 306.456 87.4961 cv
306.456 83.0273 li
310.606 84.6855 li
310.895 84.7974 316.936 87.2725 320.451 93.3052 cv
320.107 87.6636 319.737 79.5078 320.287 77.8667 cv
320.979 75.7998 li
323.39 75.6538 li
326.784 75.6538 332.551 82.0605 335.816 88.0459 cv
339.013 93.9067 340.603 98.7666 341.647 104.164 cv
341.651 104.15 345.996 92.3599 345.996 92.3599 cv
349.317 97.0996 li
349.42 97.25 351.912 100.846 354.68 108.469 cv
354.692 108.512 354.709 108.551 354.723 108.589 cv
354.778 107.704 354.809 106.797 354.809 105.835 cv
354.809 100.584 356.793 90.9551 356.884 90.5508 cv
358.865 80.9517 li
362.629 89.9966 li
362.74 90.25 364.614 94.8047 366.681 103.072 cv
366.29 97.8213 366.272 94.1133 366.926 91.6982 cv
368.056 87.582 372.297 81.9487 372.782 81.3213 cv
375.391 77.8965 li
377.724 81.5234 li
377.853 81.7251 380.792 86.3613 382.291 94.7402 cv
382.652 92.2998 382.987 89.8633 383.168 87.5859 cv
383.941 77.8965 393.764 71.2495 394.181 70.9702 cv
397.631 68.6714 li
398.766 72.6543 li
398.821 72.8564 400.175 77.6045 400.527 80.8228 cv
400.6 81.4199 li
400.845 83.543 401.154 86.1938 400.841 90.7529 cv
400.905 90.6455 400.97 90.5469 401.039 90.4478 cv
405.039 84.6211 413.323 79.7485 413.671 79.5469 cv
418.742 76.5903 li
418.213 82.4341 li
418.187 82.748 417.491 90.2114 415.385 96.167 cv
414.862 97.6665 414.354 98.96 413.865 100.193 cv
413.624 100.816 413.392 101.418 413.16 102.011 cv
413.817 101.233 414.578 100.438 415.493 99.6045 cv
420.305 95.1914 427.889 95.1401 428.208 95.1401 cv
432.165 95.1401 li
431.121 98.96 li
431.121 98.96 430.12 102.646 427.769 110.682 cv
426.265 115.855 424.503 119.43 422.282 123.289 cv
425.862 118.532 430.304 113.088 433.097 111.06 cv
436.905 108.293 445.137 104 445.485 103.82 cv
451.398 100.743 li
449.825 107.219 li
449.459 108.688 446.199 121.725 442.19 126.469 cv
440.772 128.136 439.77 129.936 438.709 131.84 cv
438.047 133.021 437.347 134.276 436.504 135.565 cv
436.733 135.328 436.956 135.084 437.179 134.839 cv
439.641 132.201 442.176 129.468 446.779 128.256 cv
452.666 126.709 459.038 123.229 459.093 123.194 cv
466.252 119.267 li
463.39 126.907 li
463.27 127.216 462.17 130.057 459.042 134.572 cv
458.161 135.844 457.516 137.434 456.764 139.273 cv
455.368 142.728 453.627 146.999 449.4 150.986 cv
449.567 150.875 449.735 150.768 449.898 150.66 cv
453.203 148.503 457.757 147.407 463.433 147.407 cv
469.161 147.407 474.042 148.533 474.245 148.576 cv
479.555 149.813 li
475.706 153.664 li
475.456 153.904 471.459 157.892 466.991 161.802 cv
467.125 161.797 467.27 161.797 467.404 161.797 cv
467.859 161.797 468.323 161.814 468.795 161.845 cv
477.428 162.511 485.846 163.516 485.932 163.529 cv
488.364 163.821 li
488.583 166.258 li
488.639 166.872 488.879 172.363 480.23 175.389 cv
479.16 175.762 478.855 175.977 477.828 176.695 cv
476.659 177.511 474.893 178.74 471.008 180.858 cv
469.316 181.782 li
467.786 182.625 466.845 183.136 466.115 183.488 cv
469.475 182.783 472.938 182.564 475.636 182.393 cv
476.637 182.328 477.527 182.272 478.257 182.199 cv
478.657 182.16 479.031 182.139 479.392 182.139 cv
481.983 182.139 484.084 183.131 485.159 184.872 cv
485.596 185.581 485.837 186.371 485.875 187.188 cv
486.108 187.201 486.362 187.205 486.649 187.205 cv
487.401 187.192 li
493.679 186.853 li
490.027 191.966 li
489.807 192.279 487.723 195.056 482.425 197.324 cv
480.432 198.179 479.315 198.721 478.27 199.224 cv
476.866 199.911 475.584 200.529 472.684 201.689 cv
472.087 201.931 471.026 202.223 469.612 202.554 cv
470.042 202.536 470.467 202.527 470.897 202.527 cv
473.987 202.527 476.651 203.129 479.516 204.479 cv
485.261 207.181 490.246 210.167 490.46 210.292 cv
495.183 213.128 li
490.258 215.595 li
490.233 215.607 487.659 216.892 485.403 218.181 cv
482.588 219.788 480.161 220.192 470.75 221.451 cv
472.877 222.164 475.069 222.891 477.088 223.247 cv
478.756 223.535 li
483.379 224.321 485.923 224.76 488.131 228.292 cv
489.159 229.938 491.174 230.689 491.191 230.693 cv
499.299 233.396 li
491.303 236.396 li
491.303 236.396 488.544 237.431 485.102 238.462 cv
483.354 238.986 481.428 239.219 478.859 239.219 cv
477.84 239.219 476.75 239.188 475.525 239.12 cv
484.355 243.31 486.98 250.932 487.105 251.284 cv
488.428 255.268 li
473.565 255.268 li
474.317 255.826 475.16 256.354 476.195 256.845 cv
483.139 260.136 487.178 265.563 487.336 265.79 cv
490.645 270.298 li
485.059 270.599 li
485.059 270.599 483.99 270.659 482.202 270.659 cv
479.512 270.659 475.353 270.53 470.82 269.911 cv
467.807 269.499 464.391 268.678 460.331 267.363 cv
463.661 270.642 466.011 274.328 465.655 276.167 cv
465.178 278.608 li
462.097 278.646 li
462.054 278.673 462.006 278.698 461.959 278.729 cv
461.04 279.244 459.781 279.944 458.221 279.944 cv
456.748 279.944 455.136 279.192 452.915 278.157 cv
451.226 277.375 449.327 276.485 447.956 276.219 cv
447.784 276.181 447.604 276.138 447.406 276.09 cv
451.505 279.609 454.831 285.763 455.57 287.202 cv
458.647 293.136 li
452.159 291.524 li
452.128 291.521 449.631 290.905 446.581 290.601 cv
446.022 290.545 445.017 290.416 443.753 290.21 cv
443.814 290.266 443.874 290.317 443.921 290.36 cv
446.246 292.491 448.222 294.038 449.984 295.426 cv
451.26 296.423 452.424 297.347 453.542 298.322 cv
456.588 300.981 459.738 308.325 460.348 309.769 cv
461.254 311.943 li
459.369 313.353 li
459.063 313.58 457.951 314.319 456.257 314.319 cv
454.986 314.319 453.74 313.915 452.545 313.116 cv
452.227 312.901 452.227 312.901 451.543 312.79 cv
450.405 312.592 448.541 312.274 444.561 310.611 cv
447.105 315.741 448.127 321.057 448.192 321.384 cv
448.863 324.963 li
445.214 324.963 li
444.776 324.963 441.193 324.881 436.311 322.333 cv
438.597 327.962 439.491 333.827 439.534 334.171 cv
440.291 339.293 li
440.291 339.293 431.133 335.773 428.483 334.776 cv
425.604 333.698 420.396 330.364 417.139 326.2 cv
418.887 331.498 419.777 335.735 419.829 336.001 cv
420.971 341.515 li
415.738 339.422 li
415.738 339.422 410.693 337.402 408.339 336.393 cv
407.441 336.01 406.396 335.236 405.292 334.21 cv
405.481 335.46 405.555 336.685 405.555 337.948 cv
405.555 354.517 li
401.172 352.325 li
401.056 352.265 398.146 350.8 395.556 348.583 cv
395.087 348.188 li
393.987 347.255 392.423 345.932 390.773 344.161 cv
390.722 344.938 390.631 345.764 390.524 346.662 cv
389.54 354.56 388.853 356.867 388.724 357.245 cv
387.284 361.563 li
383.864 358.568 li
383.752 358.466 381.011 356.067 378.57 353.279 cv
377.779 352.364 376.151 350.512 374.531 347.899 cv
374.557 348.372 374.557 348.793 374.531 349.154 cv
374.282 352.918 372.933 354.379 371.463 355.329 cv
370.784 359.089 367.265 361.533 366.853 361.809 cv
365.043 363.016 li
363.325 361.68 li
cp
.27451 .207843 .145098 rgb
f
379.516 153.861 mo
379.516 153.861 380.414 130.886 380.186 125.846 cv
379.851 118.506 380.848 105.169 379.516 96.498 cv
378.184 87.8267 375.184 83.1602 375.184 83.1602 cv
375.184 83.1602 370.849 88.8281 369.843 92.4932 cv
368.846 96.1621 369.843 105.169 370.849 115.176 cv
371.85 125.18 369.843 154.527 369.843 154.527 cv
369.843 154.527 368.511 127.848 365.843 113.505 cv
363.179 99.166 359.836 91.1611 359.836 91.1611 cv
359.836 91.1611 357.842 100.833 357.842 105.835 cv
357.842 110.836 356.841 114.506 358.173 120.509 cv
359.505 126.512 363.179 154.858 363.179 154.858 cv
363.179 154.858 357.507 133.516 356.51 129.846 cv
355.509 126.181 354.503 116.844 351.835 109.504 cv
349.171 102.17 346.833 98.8311 346.833 98.8311 cv
346.833 98.8311 346.833 98.8311 344.496 105.169 cv
342.167 111.507 344.831 121.175 347.834 134.852 cv
350.838 148.524 351.835 155.193 351.835 155.193 cv
351.835 155.193 340.496 117.174 339.499 109.84 cv
338.498 102.5 337.161 96.833 333.161 89.4941 cv
329.156 82.1592 323.493 77.8193 323.158 78.8247 cv
322.822 79.8262 323.158 90.1602 323.824 98.165 cv
324.49 106.17 335.829 128.514 340.496 143.519 cv
345.166 158.527 341.17 154.858 341.17 154.858 cv
341.17 154.858 330.488 125.18 328.159 118.176 cv
325.822 111.172 321.49 103.502 318.826 96.833 cv
316.154 90.1602 309.485 87.4961 309.485 87.4961 cv
309.485 87.4961 309.485 93.1636 310.151 96.1621 cv
310.817 99.166 314.817 109.84 317.486 115.176 cv
320.158 120.509 332.16 155.528 332.16 155.528 cv
332.16 155.528 319.823 127.178 314.817 116.173 cv
309.816 105.169 306.481 100.163 303.478 95.832 cv
300.479 91.4961 297.479 89.8291 297.479 92.8325 cv
297.479 95.832 298.146 98.8311 297.814 102.836 cv
297.479 106.836 302.481 113.174 305.48 118.176 cv
308.484 123.177 318.826 142.187 324.49 153.861 cv
330.157 165.531 326.161 163.198 326.161 163.198 cv
326.161 163.198 318.487 152.189 315.483 146.522 cv
312.484 140.854 299.478 123.177 296.813 119.508 cv
294.145 115.838 287.141 107.502 283.472 103.502 cv
279.802 99.4971 280.468 103.833 280.468 106.17 cv
280.468 108.503 281.469 111.172 282.475 114.837 cv
283.472 118.506 292.143 125.846 297.479 132.184 cv
302.812 138.521 319.488 163.864 319.488 163.864 cv
319.488 163.864 289.479 130.181 287.141 127.513 cv
284.804 124.844 278.135 115.507 273.133 111.172 cv
268.132 106.836 261.794 107.167 261.794 107.167 cv
261.794 107.167 262.46 110.506 263.792 114.171 cv
265.128 117.84 268.132 120.844 272.132 125.51 cv
276.133 130.181 302.816 157.861 302.816 157.861 cv
302.816 157.861 277.473 134.297 271.689 129.846 cv
265.906 125.403 256.573 125.403 256.573 127.625 cv
256.573 129.846 260.574 136.515 265.468 139.63 cv
270.362 142.745 272.137 145.409 276.141 147.635 cv
280.142 149.856 298.373 165.42 298.373 165.42 cv
298.373 165.42 262.799 142.298 260.131 139.188 cv
257.467 136.072 245.9 132.072 242.789 132.072 cv
239.678 132.072 234.337 132.961 233.005 135.183 cv
231.673 137.404 233.895 141.409 238.337 144.524 cv
242.785 147.631 249.011 150.303 253.011 152.525 cv
257.012 154.746 308.6 178.314 308.6 178.314 cv
308.6 178.314 309.816 183.209 294.811 177.202 cv
279.802 171.199 274.13 168.2 264.797 164.199 cv
255.456 160.195 245.453 158.858 242.119 158.527 cv
238.784 158.192 231.78 157.861 231.78 157.861 cv
231.78 157.861 236.447 164.199 239.45 166.868 cv
242.454 169.532 249.789 172.535 254.459 173.201 cv
259.125 173.867 270.461 179.539 274.47 180.871 cv
278.466 182.208 304.148 191.21 304.148 191.21 cv
304.148 191.21 298.812 189.989 287.807 186.99 cv
276.803 183.986 274.023 187.656 274.023 187.656 cv
274.023 187.656 281.469 193.543 274.801 192.211 cv
268.132 190.879 263.126 187.54 258.459 184.206 cv
253.789 180.871 243.786 175.87 238.784 174.533 cv
233.778 173.201 223.109 171.534 223.109 171.534 cv
223.109 171.534 222.778 175.87 227.445 180.205 cv
232.115 184.541 234.109 185.873 240.451 188.876 cv
246.785 191.876 261.128 199.881 267.466 202.88 cv
273.799 205.884 291.808 214.555 280.803 213.223 cv
269.799 211.886 258.125 204.216 246.785 199.546 cv
235.45 194.879 229.112 192.877 225.773 192.546 cv
222.439 192.211 210.769 189.542 208.771 189.542 cv
206.768 189.542 201.436 190.879 210.434 196.216 cv
219.439 201.548 219.439 202.214 225.111 204.552 cv
230.783 206.885 240.782 210.219 250.124 212.557 cv
259.457 214.89 275.136 219.221 272.467 220.227 cv
269.799 221.224 251.456 217.554 236.447 212.888 cv
221.442 208.217 215.104 206.219 207.434 205.218 cv
199.764 204.216 194.763 205.218 194.763 205.218 cv
194.763 205.218 195.429 207.551 198.763 209.884 cv
202.098 212.222 202.098 215.221 209.437 215.221 cv
216.775 215.221 218.438 219.561 213.772 218.56 cv
209.102 217.554 204.762 220.558 204.762 220.558 cv
204.762 220.558 212.101 221.894 226.774 223.561 cv
241.448 225.224 244.783 227.562 252.122 227.896 cv
259.457 228.228 265.128 231.23 260.462 231.23 cv
255.791 231.23 237.113 230.229 224.441 228.894 cv
211.766 227.562 207.434 228.228 200.43 230.229 cv
193.431 232.228 191.093 237.564 191.093 237.564 cv
191.093 237.564 195.764 237.233 199.764 238.234 cv
203.765 239.231 205.767 241.904 211.104 241.904 cv
216.44 241.904 231.78 243.567 236.782 242.57 cv
241.783 241.564 280.468 237.899 280.468 237.899 cv
280.468 237.899 239.45 246.57 222.108 247.236 cv
204.762 247.907 205.767 250.24 200.095 252.573 cv
194.432 254.906 191.093 260.578 191.093 260.578 cv
191.093 260.578 191.759 261.244 203.099 261.91 cv
214.438 262.576 213.106 264.579 220.776 261.575 cv
228.446 258.576 234.109 257.91 249.118 253.239 cv
264.127 248.568 289.144 241.233 289.144 241.233 cv
289.144 241.233 237.448 258.911 230.113 262.911 cv
222.778 266.912 218.107 270.581 214.103 272.915 cv
210.103 275.252 206.768 280.585 206.433 282.587 cv
206.102 284.589 203.099 289.256 207.099 288.59 cv
211.104 287.924 215.104 285.926 217.438 284.92 cv
219.771 283.919 227.445 279.253 235.45 274.917 cv
243.451 270.581 274.801 251.907 274.801 251.907 cv
274.801 251.907 257.127 266.246 247.12 271.252 cv
237.113 276.249 229.778 279.253 229.112 282.922 cv
228.446 286.592 226.443 291.924 226.443 291.924 cv
226.443 291.924 232.115 292.595 238.449 288.59 cv
244.783 284.589 253.789 277.255 261.128 272.915 cv
268.467 268.579 280.803 256.909 280.803 256.909 cv
280.803 256.909 262.795 275.252 253.127 281.255 cv
243.451 287.258 237.787 294.928 236.782 297.927 cv
235.781 300.931 230.448 309.602 230.448 309.602 cv
230.448 309.602 233.778 309.267 238.118 307.599 cv
242.454 305.932 245.453 306.263 253.127 300.931 cv
260.793 295.594 277.134 279.588 281.469 272.915 cv
285.801 266.246 293.81 261.575 291.473 264.579 cv
289.144 267.582 270.461 294.928 262.46 302.598 cv
254.459 310.268 250.79 318.604 250.124 320.605 cv
249.458 322.604 249.458 331.61 252.122 329.607 cv
254.79 327.609 263.792 319.604 270.461 313.602 cv
277.134 307.599 300.144 270.912 300.144 270.912 cv
300.144 270.912 286.806 299.263 279.471 308.27 cv
272.132 317.271 270.796 326.273 270.13 330.613 cv
269.464 334.944 269.464 338.949 269.464 338.949 cv
269.464 338.949 276.133 340.616 282.14 329.942 cv
288.138 319.273 286.806 318.604 292.474 308.936 cv
298.146 299.263 315.823 265.911 315.823 265.911 cv
315.823 265.911 298.812 305.266 294.145 313.267 cv
289.479 321.271 284.804 336.946 285.139 343.28 cv
285.47 349.618 291.142 343.615 296.143 336.28 cv
301.149 328.946 303.478 313.267 306.813 307.599 cv
310.151 301.932 316.82 286.257 316.82 286.257 cv
316.82 286.257 307.147 313.267 305.149 321.271 cv
303.147 329.276 300.479 340.947 301.48 344.616 cv
302.481 348.286 310.482 338.283 311.822 330.944 cv
313.154 323.609 324.49 298.262 324.49 298.262 cv
324.49 298.262 315.148 333.612 314.486 341.617 cv
313.816 349.618 316.82 356.622 316.82 356.622 cv
316.82 356.622 322.822 350.619 324.159 342.283 cv
325.491 333.947 329.491 306.933 329.491 306.933 cv
329.491 306.933 327.824 335.279 328.825 343.615 cv
329.826 351.951 332.495 353.623 332.495 353.623 cv
332.495 353.623 334.828 346.95 336.16 339.95 cv
337.492 332.946 337.492 329.942 337.492 322.943 cv
337.492 315.939 339.164 281.255 339.164 281.255 cv
339.164 281.255 340.835 311.935 341.17 320.937 cv
341.501 329.942 343.499 344.616 344.831 346.95 cv
346.167 349.287 348.836 355.29 348.836 355.29 cv
348.836 355.29 350.168 354.289 351.835 348.621 cv
353.506 342.949 352.17 342.949 352.501 334.278 cv
352.84 325.607 352.17 315.939 352.17 311.935 cv
352.17 307.935 352.501 298.928 352.501 298.928 cv
352.501 298.928 354.838 330.278 357.172 341.948 cv
359.505 353.623 362.173 356.957 365.177 359.29 cv
365.177 359.29 368.18 357.288 368.511 354.624 cv
368.846 351.951 371.18 353.954 371.515 348.952 cv
371.85 343.95 365.177 319.604 365.177 315.604 cv
365.177 311.604 362.844 297.927 362.844 297.927 cv
362.844 297.927 372.181 331.279 373.513 337.617 cv
374.849 343.95 378.519 348.621 380.848 351.29 cv
383.185 353.954 385.857 356.291 385.857 356.291 cv
385.857 356.291 386.52 354.289 387.521 346.284 cv
388.521 338.283 387.189 336.28 384.852 331.279 cv
382.519 326.273 382.854 320.937 379.851 318.604 cv
376.847 316.271 374.849 302.933 374.849 302.933 cv
374.849 302.933 384.517 323.609 386.854 331.61 cv
389.184 339.615 395.19 344.286 397.528 346.284 cv
399.865 348.286 402.529 349.618 402.529 349.618 cv
402.529 349.618 402.529 341.948 402.529 337.948 cv
402.529 333.947 401.859 330.278 397.193 323.94 cv
392.526 317.606 387.521 307.599 387.521 307.599 cv
387.521 307.599 397.528 317.271 399.865 321.942 cv
402.194 326.608 407.2 332.611 409.533 333.612 cv
411.867 334.613 416.868 336.611 416.868 336.611 cv
416.868 336.611 414.87 326.943 410.865 318.604 cv
406.861 310.268 394.193 294.928 394.193 294.928 cv
394.193 294.928 415.867 318.604 418.531 322.943 cv
421.204 327.274 426.875 330.944 429.543 331.945 cv
432.208 332.946 436.547 334.613 436.547 334.613 cv
436.547 334.613 434.876 323.274 430.209 317.606 cv
425.535 311.935 417.87 305.597 414.535 301.266 cv
411.196 296.93 391.856 275.252 391.856 275.252 cv
391.856 275.252 430.545 315.273 435.877 318.604 cv
441.214 321.942 445.214 321.942 445.214 321.942 cv
445.214 321.942 443.212 311.269 437.879 306.263 cv
432.539 301.266 430.545 298.593 424.538 292.925 cv
418.531 287.258 416.538 284.589 416.538 284.589 cv
416.538 284.589 438.21 304.6 445.214 307.599 cv
452.218 310.603 452.218 309.267 454.221 310.603 cv
456.223 311.935 457.555 310.934 457.555 310.934 cv
457.555 310.934 454.221 302.933 451.557 300.6 cv
448.884 298.262 445.885 296.26 441.88 292.595 cv
437.879 288.925 409.533 270.912 409.533 270.912 cv
409.533 270.912 427.542 280.92 430.875 283.253 cv
434.21 285.591 443.547 287.258 446.881 287.589 cv
450.216 287.924 452.889 288.59 452.889 288.59 cv
452.889 288.59 447.878 278.922 443.212 276.915 cv
438.545 274.917 436.208 269.915 429.543 266.912 cv
422.871 263.913 400.527 249.239 400.527 249.239 cv
400.527 249.239 429.213 263.577 432.874 265.911 cv
436.547 268.248 445.214 272.584 448.553 273.25 cv
451.887 273.916 456.554 276.915 458.221 276.915 cv
459.893 276.915 461.555 274.917 462.557 275.583 cv
463.558 276.249 458.552 267.582 451.221 264.579 cv
443.882 261.575 440.213 258.911 432.874 255.241 cv
425.535 251.572 423.872 250.906 423.872 250.906 cv
423.872 250.906 430.209 251.572 442.215 256.909 cv
454.221 262.241 463.893 265.911 471.228 266.912 cv
478.567 267.913 484.901 267.582 484.901 267.582 cv
484.901 267.582 481.235 262.576 474.897 259.577 cv
468.559 256.578 468.229 252.238 460.554 250.906 cv
452.889 249.574 429.875 239.897 429.875 239.897 cv
429.875 239.897 464.224 252.238 472.56 252.238 cv
480.905 252.238 484.23 252.238 484.23 252.238 cv
484.23 252.238 481.566 244.237 471.894 240.903 cv
462.221 237.564 461.225 236.898 448.213 234.234 cv
435.211 231.562 417.87 225.894 417.87 225.894 cv
417.87 225.894 460.554 234.9 468.559 235.566 cv
476.565 236.232 480.905 236.567 484.23 235.566 cv
487.569 234.565 490.237 233.563 490.237 233.563 cv
490.237 233.563 487.234 232.563 485.571 229.895 cv
483.899 227.23 482.237 227.23 476.565 226.225 cv
470.897 225.224 464.89 221.894 460.223 222.225 cv
455.553 222.56 427.873 219.221 427.873 219.221 cv
427.873 219.221 459.557 219.892 469.561 218.56 cv
479.564 217.223 481.566 216.888 483.899 215.556 cv
486.237 214.22 488.905 212.888 488.905 212.888 cv
488.905 212.888 483.899 209.884 478.232 207.22 cv
472.56 204.552 469.225 205.884 463.558 205.884 cv
457.886 205.884 455.553 204.887 450.882 206.219 cv
446.215 207.551 422.871 207.551 422.871 207.551 cv
422.871 207.551 466.561 200.882 471.563 198.88 cv
476.565 196.877 476.565 196.546 481.235 194.544 cv
485.902 192.546 487.569 190.213 487.569 190.213 cv
487.569 190.213 481.566 190.544 482.567 188.541 cv
483.569 186.543 481.901 184.872 478.567 185.207 cv
475.233 185.542 468.89 185.542 463.893 187.209 cv
458.891 188.876 427.542 197.548 427.542 197.548 cv
427.542 197.548 452.218 184.541 458.891 182.539 cv
465.556 180.536 462.221 182.208 469.561 178.203 cv
476.895 174.203 476.264 173.575 479.233 172.535 cv
485.902 170.202 485.571 166.533 485.571 166.533 cv
485.571 166.533 477.226 165.531 468.559 164.865 cv
459.893 164.199 453.55 171.199 449.219 174.533 cv
444.883 177.872 440.875 180.205 437.549 182.539 cv
434.21 184.872 413.199 194.544 413.199 194.544 cv
413.199 194.544 419.537 183.875 426.875 181.873 cv
434.21 179.87 441.88 172.866 445.885 170.202 cv
449.885 167.529 454.551 166.533 460.554 162.197 cv
466.561 157.861 473.565 151.523 473.565 151.523 cv
473.565 151.523 459.222 148.189 451.557 153.195 cv
443.882 158.192 438.545 163.198 434.545 165.862 cv
430.545 168.535 410.865 178.869 410.865 178.869 cv
410.865 178.869 430.875 161.196 435.877 157.861 cv
440.875 154.527 440.543 154.858 446.881 149.19 cv
453.219 143.519 453.55 137.185 456.554 132.85 cv
459.557 128.514 460.554 125.846 460.554 125.846 cv
460.554 125.846 453.885 129.511 447.547 131.182 cv
441.214 132.85 439.542 138.182 433.879 141.852 cv
428.208 145.521 408.201 170.533 408.201 170.533 cv
408.201 170.533 425.87 142.853 430.545 138.182 cv
435.211 133.516 436.208 128.845 439.877 124.514 cv
443.547 120.178 446.881 106.501 446.881 106.501 cv
446.881 106.501 438.545 110.836 434.876 113.505 cv
431.207 116.173 423.206 126.847 419.872 131.848 cv
416.538 136.85 399.526 161.862 399.526 161.862 cv
399.526 161.862 410.195 137.851 414.87 129.846 cv
419.537 121.841 422.54 117.84 424.874 109.84 cv
427.207 101.834 428.208 98.165 428.208 98.165 cv
428.208 98.165 421.535 98.165 417.534 101.834 cv
413.534 105.504 412.868 108.172 410.865 113.174 cv
408.863 118.176 404.863 129.511 403.526 133.18 cv
402.194 136.85 390.855 160.53 390.855 160.53 cv
390.855 160.53 406.195 119.508 407.531 111.507 cv
408.863 103.502 410.53 100.833 412.533 95.166 cv
414.535 89.4941 415.206 82.1592 415.206 82.1592 cv
415.206 82.1592 407.2 86.8301 403.526 92.1621 cv
399.865 97.499 394.193 133.851 392.187 139.188 cv
390.189 144.524 386.188 158.527 386.188 158.527 cv
386.188 158.527 395.19 108.834 396.862 98.5 cv
398.525 88.1621 397.859 84.1572 397.528 81.1582 cv
397.193 78.1543 395.856 73.4883 395.856 73.4883 cv
395.856 73.4883 386.854 79.4907 386.188 87.8267 cv
385.522 96.1621 382.854 106.501 384.186 112.173 cv
385.522 117.84 383.185 129.18 382.854 136.184 cv
382.519 143.188 380.186 162.197 379.516 153.861 cv
cp
1 1 1 rgb
f
362.771 150.694 mo
362.771 150.694 364.833 161.694 361.739 162.382 cv
358.646 163.069 354.521 155.507 356.239 151.382 cv
357.958 147.257 360.364 145.882 362.771 150.694 cv
cp
.27451 .207843 .145098 rgb
f
205.333 360.266 mo
205.333 360.266 217.708 396.016 287.146 401.859 cv
287.146 401.859 222.177 406.672 205.333 360.266 cv
cp
f
203.958 370.922 mo
203.958 370.922 215.989 398.766 274.771 405.641 cv
274.771 405.641 217.021 407.359 203.958 370.922 cv
cp
f
215.074 353.623 mo
215.074 353.623 233.864 390.748 298.034 392.123 cv
298.034 392.123 251.284 389.828 215.074 353.623 cv
cp
f
286.316 142.401 mo
286.316 142.401 294.016 152.125 287.017 152.559 cv
280.025 152.993 270.005 145.035 273.039 140.588 cv
276.072 136.149 283.042 138.482 286.316 142.401 cv
cp
f
275.823 144.786 mo
275.823 144.786 272.867 142.767 274.513 142.526 cv
276.163 142.29 278.487 145.611 275.823 144.786 cv
cp
1 1 1 rgb
f
296.882 158.484 mo
296.882 158.484 299.177 151.038 307.195 156.538 cv
313.167 160.637 317.967 167.078 313.842 169.828 cv
309.717 172.578 296.882 166.047 296.882 158.484 cv
cp
.27451 .207843 .145098 rgb
f
300.784 163.181 mo
300.784 163.181 297.351 160.891 298.949 159.516 cv
300.552 158.141 303.074 164.096 300.784 163.181 cv
cp
1 1 1 rgb
f
303.585 179.565 mo
303.585 179.565 312.824 188.412 303.903 188.399 cv
294.983 188.382 288.207 184.554 290.084 179.75 cv
291.958 174.95 298.623 174.525 303.585 179.565 cv
cp
.27451 .207843 .145098 rgb
f
295.271 184.73 mo
295.271 184.73 290.841 183.342 292.061 180.867 cv
293.277 178.388 297.57 185.284 295.271 184.73 cv
cp
1 1 1 rgb
f
307.654 131.672 mo
307.654 131.672 318.654 143.016 313.498 146.797 cv
308.342 150.578 300.092 139.578 301.811 133.734 cv
303.529 127.891 307.654 131.672 307.654 131.672 cv
cp
.27451 .207843 .145098 rgb
f
305.596 139.119 mo
305.596 139.119 302.159 135.681 304.677 135.453 cv
307.195 135.226 307.659 140.034 305.596 139.119 cv
cp
1 1 1 rgb
f
236.331 206.339 mo
236.331 206.339 232.377 200.37 240.632 199.976 cv
248.886 199.58 252.925 203.662 251.168 207.92 cv
249.415 212.179 238.307 209.321 236.331 206.339 cv
cp
.27451 .207843 .145098 rgb
f
242.699 205.857 mo
242.699 205.857 238.08 206.863 237.512 204.779 cv
236.941 202.695 244.323 204.436 242.699 205.857 cv
cp
1 1 1 rgb
f
337.909 144.619 mo
337.909 144.619 342.958 156.994 338.369 158.369 cv
333.784 159.744 329.195 152.869 329.659 147.828 cv
330.119 142.788 335.614 139.119 337.909 144.619 cv
cp
.27451 .207843 .145098 rgb
f
334.012 153.788 mo
334.012 153.788 331.726 150.123 333.556 150.351 cv
335.387 150.578 335.846 153.788 334.012 153.788 cv
cp
1 1 1 rgb
f
341.114 116.203 mo
341.114 116.203 343.409 127.663 339.739 129.953 cv
336.07 132.244 330.114 120.784 333.784 114.369 cv
337.449 107.953 341.114 116.203 341.114 116.203 cv
cp
.27451 .207843 .145098 rgb
f
334.927 122.391 mo
334.927 122.391 333.092 118.034 334.927 117.806 cv
336.762 117.578 337.217 123.538 334.927 122.391 cv
cp
1 1 1 rgb
f
381.006 116.53 mo
381.006 116.53 382.291 129.949 376.026 128.583 cv
369.762 127.212 369.177 119.108 371.949 115.021 cv
374.72 110.936 380.641 111.756 381.006 116.53 cv
cp
.27451 .207843 .145098 rgb
f
372.004 122.305 mo
372.004 122.305 371.837 116.642 373.405 116.981 cv
374.969 117.325 373.899 124.363 372.004 122.305 cv
cp
1 1 1 rgb
f
383.052 156.77 mo
383.052 156.77 378.927 144.851 385.802 141.186 cv
392.677 137.52 392.677 144.851 390.846 150.811 cv
389.012 156.77 384.427 161.811 383.052 156.77 cv
cp
.27451 .207843 .145098 rgb
f
383.739 150.351 mo
383.739 150.351 383.056 144.395 384.887 144.623 cv
386.721 144.851 385.342 153.556 383.739 150.351 cv
cp
1 1 1 rgb
f
397.635 150.136 mo
397.635 150.136 400.523 135.281 406.255 137.146 cv
411.987 139.007 409.379 146.475 404.807 151.769 cv
400.222 157.058 396.213 153.156 397.635 150.136 cv
cp
.27451 .207843 .145098 rgb
f
402.022 144.58 mo
402.022 144.58 401.631 139.87 403.591 140.657 cv
405.555 141.439 402.744 145.856 402.022 144.58 cv
cp
1 1 1 rgb
f
256.921 193.749 mo
256.921 193.749 248.564 188.086 254.85 186.711 cv
261.128 185.344 268.708 188.365 268.996 192.58 cv
269.288 196.796 262.486 196.409 256.921 193.749 cv
cp
.27451 .207843 .145098 rgb
f
259.491 192.748 mo
259.491 192.748 254.76 191.278 256.255 189.882 cv
257.755 188.485 261.858 193.487 259.491 192.748 cv
cp
1 1 1 rgb
f
251.021 224.257 mo
251.021 224.257 247.584 225.077 242.587 224.678 cv
236.859 224.223 230.001 222.728 236.283 218.026 cv
242.565 213.33 245.767 214.718 249.591 217.412 cv
253.402 220.102 254.945 223.063 251.021 224.257 cv
cp
.27451 .207843 .145098 rgb
f
242.823 221.928 mo
242.823 221.928 238.247 223.428 237.332 221.138 cv
236.417 218.839 245.625 219.892 242.823 221.928 cv
cp
1 1 1 rgb
f
229.193 237.139 mo
229.193 237.139 229.456 231.171 238.097 232.219 cv
246.738 233.263 248.014 238.037 241.766 240.048 cv
235.519 242.063 227.273 241.526 229.193 237.139 cv
cp
.27451 .207843 .145098 rgb
f
238.346 237.788 mo
238.346 237.788 231.759 240.684 231.299 238.78 cv
230.835 236.877 238.849 235.54 238.346 237.788 cv
cp
1 1 1 rgb
f
250.794 262.524 mo
250.794 262.524 248.229 269.408 239.901 269.988 cv
231.574 270.568 233.718 263.552 239.304 260.939 cv
244.89 258.327 252.169 259.59 250.794 262.524 cv
cp
.27451 .207843 .145098 rgb
f
241.844 263.629 mo
241.844 263.629 246.45 259.521 247.442 261.743 cv
248.452 263.964 242.05 266.087 241.844 263.629 cv
cp
1 1 1 rgb
f
271.234 278.084 mo
271.234 278.084 266.834 289.277 261.309 289.376 cv
255.795 289.475 255.387 281.642 262.546 277.517 cv
269.705 273.392 273.245 275.463 271.234 278.084 cv
cp
.27451 .207843 .145098 rgb
f
262.739 281.663 mo
262.739 281.663 266.301 276.387 267.81 277.86 cv
269.326 279.339 262.542 284.637 262.739 281.663 cv
cp
1 1 1 rgb
f
289.375 282.261 mo
289.375 282.261 288.791 290.146 284.207 291.533 cv
279.626 292.912 277.009 290.996 280.528 285.397 cv
284.039 279.798 290.416 277.513 289.375 282.261 cv
cp
.27451 .207843 .145098 rgb
f
283.128 285.935 mo
283.128 285.935 285.766 281.307 286.583 282.746 cv
287.391 284.181 282.947 288.452 283.128 285.935 cv
cp
1 1 1 rgb
f
362.517 297.768 mo
362.517 297.768 363.849 309.12 359.595 309.081 cv
355.341 309.047 352.737 301.192 355.109 296.376 cv
357.49 291.559 362.384 294.271 362.517 297.768 cv
cp
.27451 .207843 .145098 rgb
f
357.129 301.309 mo
357.129 301.309 358.693 293.157 360.231 296.556 cv
361.752 299.959 357.769 303.985 357.129 301.309 cv
cp
1 1 1 rgb
f
316.82 312.368 mo
316.82 312.368 318.654 323.824 312.695 325.199 cv
306.739 326.574 303.534 320.159 307.659 313.284 cv
311.784 306.409 315.904 305.493 316.82 312.368 cv
cp
.27451 .207843 .145098 rgb
f
314.757 319.012 mo
314.757 319.012 313.614 324.056 311.32 322.222 cv
309.029 320.387 314.757 312.592 314.757 319.012 cv
cp
1 1 1 rgb
f
382.317 278.505 mo
382.317 278.505 395.139 286.936 389.927 291.976 cv
384.715 297.012 380.418 293.639 378.295 286.021 cv
376.164 278.397 375.614 275.11 382.317 278.505 cv
cp
.27451 .207843 .145098 rgb
f
385.007 285.724 mo
385.007 285.724 387.095 289.557 384.728 289.926 cv
382.364 290.296 381.789 282.188 385.007 285.724 cv
cp
1 1 1 rgb
f
428.526 136.334 mo
428.526 136.334 422.604 150.037 418.157 147.266 cv
413.71 144.498 418.385 134.435 422.725 133.361 cv
427.065 132.287 429.617 133.722 428.526 136.334 cv
cp
.27451 .207843 .145098 rgb
f
423.485 136.721 mo
423.485 136.721 422.217 140.472 420.706 139.776 cv
419.184 139.08 423.705 133.743 423.485 136.721 cv
cp
1 1 1 rgb
f
417.628 163.701 mo
417.628 163.701 421.831 152.1 428.186 153.092 cv
434.542 154.089 434.49 160.066 428.096 165.046 cv
421.694 170.021 416.18 170.018 417.628 163.701 cv
cp
.27451 .207843 .145098 rgb
f
428.104 156.766 mo
428.104 156.766 425.264 160.436 423.971 159.404 cv
422.682 158.377 428.156 153.324 428.104 156.766 cv
cp
1 1 1 rgb
f
443.551 183.346 mo
443.551 183.346 446.817 174.744 456.614 174.641 cv
466.411 174.538 460.984 181.709 451.557 185.946 cv
442.121 190.179 442.834 184.425 443.551 183.346 cv
cp
.27451 .207843 .145098 rgb
f
454.608 179.02 mo
454.608 179.02 451.239 182.036 449.395 181.004 cv
447.547 179.973 455.596 175.779 454.608 179.02 cv
cp
1 1 1 rgb
f
460.262 196.843 mo
460.262 196.843 448.708 193.203 462.935 189.022 cv
472.646 186.174 476.143 186.951 475.095 191.97 cv
474.055 196.989 466.493 197.092 460.262 196.843 cv
cp
.27451 .207843 .145098 rgb
f
472.34 189.615 mo
472.34 189.615 470.94 192.361 467.859 191.515 cv
464.799 190.668 471.653 187.901 472.34 189.615 cv
cp
1 1 1 rgb
f
438.026 217.154 mo
438.026 217.154 426.863 213.248 436.862 210.691 cv
446.856 208.135 451.213 210.799 450.999 213.729 cv
450.77 216.66 449.039 219.312 438.026 217.154 cv
cp
.27451 .207843 .145098 rgb
f
447.264 212.793 mo
447.264 212.793 442.74 215.298 441.631 213.953 cv
440.522 212.604 446.929 210.021 447.264 212.793 cv
cp
1 1 1 rgb
f
442.963 229.37 mo
442.963 229.37 436.647 225.399 443.938 224.532 cv
451.23 223.655 458.741 226.47 457.147 230.491 cv
455.557 234.514 442.963 229.37 442.963 229.37 cv
cp
.27451 .207843 .145098 rgb
f
453.323 227.467 mo
453.323 227.467 452.528 229.478 449.984 228.313 cv
447.445 227.145 449.752 225.791 453.323 227.467 cv
cp
1 1 1 rgb
f
430.089 249.308 mo
430.089 249.308 424.534 244.078 427.241 243.274 cv
432.741 241.642 447.445 243.618 443.422 251.284 cv
440.849 256.191 430.089 249.308 430.089 249.308 cv
cp
.27451 .207843 .145098 rgb
f
440.436 247.945 mo
440.436 247.945 442.09 249.531 438.967 248.887 cv
435.838 248.242 433.57 247.22 434.597 246.355 cv
435.62 245.492 438.778 246.364 440.436 247.945 cv
cp
1 1 1 rgb
f
399.784 263.328 mo
399.784 263.328 390.614 255.538 400.012 255.349 cv
407.415 255.203 413.542 261.91 413.478 266.134 cv
413.418 270.362 403.5 267.707 399.784 263.328 cv
cp
.27451 .207843 .145098 rgb
f
409.232 262.56 mo
409.232 262.56 412.077 265.013 409.336 265.348 cv
406.599 265.679 401.584 261.803 404.231 261.021 cv
406.878 260.239 409.232 262.56 409.232 262.56 cv
cp
1 1 1 rgb
f
413.014 281.315 mo
413.014 281.315 422.583 287.782 419.605 291.748 cv
416.627 295.71 410.165 292.887 408.107 287.052 cv
406.053 281.216 407.2 278.26 413.014 281.315 cv
cp
.27451 .207843 .145098 rgb
f
413.874 286.837 mo
413.874 286.837 418.789 290.446 415.901 291.224 cv
413.014 291.997 409.847 284.366 413.874 286.837 cv
cp
1 1 1 rgb
f
378.201 319.476 mo
378.201 319.476 384.625 331.322 378.867 334.562 cv
373.113 337.802 369.985 312.21 378.201 319.476 cv
cp
.27451 .207843 .145098 rgb
f
375.489 326.118 mo
375.489 326.118 374.871 321.375 376.834 322.161 cv
378.793 322.943 378.858 329.689 375.489 326.118 cv
cp
1 1 1 rgb
f
325.547 290.042 mo
325.547 290.042 324.417 303.169 319.303 302.396 cv
314.194 301.618 315.488 294.158 319.355 289.38 cv
323.227 284.603 327.111 286.162 325.547 290.042 cv
cp
.27451 .207843 .145098 rgb
f
317.739 297.243 mo
317.739 297.243 318.603 292.268 320.644 293.66 cv
322.676 295.048 318.616 300.72 317.739 297.243 cv
cp
1 1 1 rgb
f
298.236 293.363 mo
298.236 293.363 297.076 305.013 291.356 303.749 cv
285.642 302.49 286.574 298.808 290.553 293.526 cv
294.523 288.246 299.447 287.983 298.236 293.363 cv
cp
.27451 .207843 .145098 rgb
f
294.867 293.397 mo
294.867 293.397 292.65 298.614 291.163 296.29 cv
289.668 293.961 295.413 290.003 294.867 293.397 cv
cp
1 1 1 rgb
f
286.028 262.331 mo
286.028 262.331 282.853 272.176 276.377 270.865 cv
269.894 269.555 273.911 264.222 278.521 260.978 cv
283.128 257.733 287.188 259.285 286.028 262.331 cv
cp
.27451 .207843 .145098 rgb
f
276.408 267.32 mo
276.408 267.32 277.709 263.698 279.953 264.944 cv
282.191 266.186 275.828 270.272 276.408 267.32 cv
cp
1 1 1 rgb
f
287.034 197.328 mo
287.034 197.328 297.914 201.797 294.82 205.578 cv
291.726 209.359 277.409 203.859 277.409 199.047 cv
277.409 194.234 280.846 194.578 287.034 197.328 cv
cp
.27451 .207843 .145098 rgb
f
288.869 202.132 mo
288.869 202.132 291.163 204.65 287.494 203.507 cv
283.824 202.364 284.056 199.838 288.869 202.132 cv
cp
1 1 1 rgb
f
441.034 144.163 mo
441.034 144.163 441.949 135.913 447.909 134.998 cv
453.864 134.078 456.159 139.119 449.739 143.703 cv
443.32 148.288 440.574 146.913 441.034 144.163 cv
cp
.27451 .207843 .145098 rgb
f
451.17 138.147 mo
451.17 138.147 449.967 142.272 448.42 141.241 cv
446.874 140.21 450.655 135.913 451.17 138.147 cv
cp
1 1 1 rgb
f
357.387 131.101 mo
357.387 131.101 360.343 139.527 355.556 140.726 cv
351.895 141.641 348.904 130.422 351.431 127.891 cv
352.806 126.516 354.177 126.061 357.387 131.101 cv
cp
.27451 .207843 .145098 rgb
f
353.945 130.413 mo
353.945 130.413 355.552 135.453 353.489 134.766 cv
351.427 134.078 352.797 127.208 353.945 130.413 cv
cp
1 1 1 rgb
f
337.015 303.767 mo
337.015 303.767 340.904 317.989 334.884 319.106 cv
328.864 320.224 328.198 313.365 330.05 307.853 cv
331.919 302.344 336.719 298.627 337.015 303.767 cv
cp
.27451 .207843 .145098 rgb
f
333.681 316.099 mo
333.681 316.099 334.127 310.117 335.524 311.299 cv
336.916 312.48 335.876 319.003 333.681 316.099 cv
cp
1 1 1 rgb
f
429.178 301.889 mo
429.178 301.889 434.318 306.087 431.409 309.313 cv
428.491 312.545 422.381 307.315 422.566 302.073 cv
422.759 296.827 429.178 301.889 429.178 301.889 cv
cp
.27451 .207843 .145098 rgb
f
425.801 302.202 mo
425.801 302.202 428.603 304.832 426.579 305.446 cv
424.559 306.061 421.771 299.74 425.801 302.202 cv
cp
1 1 1 rgb
f
310.886 205.956 mo
310.886 205.956 311.35 203.442 313.301 202.604 cv
315.269 201.771 311.638 198.69 314.8 198.884 cv
317.971 199.073 318.066 197.487 318.444 196.56 cv
318.818 195.627 317.327 193.946 319.282 193.113 cv
321.246 192.275 318.861 189.59 321.194 187.828 cv
323.523 186.058 324.116 181.641 322.938 179.978 cv
321.766 178.323 319.978 176.304 321.864 176.738 cv
323.75 177.167 325.414 181.082 327.154 178.646 cv
328.89 176.205 330.432 176.936 334.514 177.816 cv
338.592 178.697 334.527 167.01 334.527 167.01 cv
334.527 167.01 335.223 166.099 337.187 170.353 cv
339.159 174.602 341.282 176.321 342.382 173.842 cv
343.482 171.367 342.09 168.101 345.407 171.165 cv
348.715 174.22 348.875 171.689 352.333 172.213 cv
355.805 172.742 355.943 175.616 357.773 171.594 cv
359.608 167.568 361.413 169.27 362.53 171.878 cv
363.647 174.486 362.904 170.945 364.945 173.932 cv
366.986 176.914 369.216 177.051 370.569 175.543 cv
371.936 174.035 373.298 172.527 375.399 174.563 cv
377.504 176.596 378.136 171.233 381.178 173.64 cv
384.208 176.046 387.748 164.814 387.748 164.814 cv
387.748 164.814 388.229 167.388 387.009 171.766 cv
385.789 176.141 394.357 171.255 393.489 175.015 cv
392.629 178.779 393.145 180.717 394.198 179.191 cv
395.238 177.666 396.265 176.458 396.265 176.458 cv
395.702 180.549 395.431 184.988 397.747 183.54 cv
400.055 182.087 405.219 186.212 402.211 188.575 cv
399.204 190.938 411.003 190.38 407.57 194.621 cv
404.132 198.866 412.017 199.976 410.655 201.483 cv
409.289 202.991 409.413 206.176 411.63 206.313 cv
413.856 206.446 417.444 210.154 412.593 211.452 cv
407.742 212.75 415.661 218.632 409.886 219.556 cv
404.102 220.476 409.847 225.275 408.563 225.521 cv
407.282 225.757 412.812 228.953 412.812 228.953 cv
412.812 228.953 409.267 229.692 406.771 228.906 cv
404.278 228.115 411.57 233.646 407.458 233.396 cv
403.337 233.151 404.652 237.681 402.156 236.89 cv
399.664 236.104 400.871 237.13 397.979 237.595 cv
395.1 238.054 397.193 240.087 397.193 240.087 cv
392.166 239.149 388.943 239.915 392.015 241.685 cv
395.087 243.46 399.607 247.546 399.607 247.546 cv
399.607 247.546 393.725 244.964 389.33 244.065 cv
384.93 243.167 387.396 249.669 386.115 249.909 cv
384.831 250.149 387.396 255.074 384.152 256.148 cv
380.903 257.227 381.681 260.136 380.676 261.025 cv
379.67 261.923 376.795 262.065 379.421 266.04 cv
382.042 270.01 382.223 272.249 382.223 272.249 cv
382.223 272.249 381.114 269.636 377.483 266.556 cv
374.656 264.162 375.21 267.376 376.284 270.616 cv
377.354 273.86 372.284 268.468 373.07 271.059 cv
373.874 273.653 369.147 267.643 370.784 272.192 cv
372.413 276.743 370.849 276.326 368.756 274.294 cv
366.655 272.262 364.915 269.297 365.619 273.474 cv
366.32 277.646 366.32 277.646 366.32 277.646 cv
366.32 277.646 360.91 267.148 360.906 272.554 cv
360.897 277.955 356.965 270.444 357.786 276.812 cv
358.65 283.541 358.486 286.39 357.382 283.468 cv
356.295 280.537 352.518 264.098 352.11 270.749 cv
351.71 277.4 351.5 280.881 351.5 280.881 cv
351.5 280.881 347.426 264.11 347.104 269.494 cv
346.782 274.878 344.144 265.816 342.949 269.877 cv
341.746 273.938 341.097 263.724 339.765 270.006 cv
338.433 276.279 339.713 281.448 338.433 276.279 cv
337.157 271.118 334.987 264.948 332.795 269.58 cv
330.604 274.221 328.787 272.837 328.322 269.95 cv
327.863 267.063 325.693 260.888 323.299 263.607 cv
320.906 266.323 317.224 264.196 317.357 261.975 cv
317.486 259.767 317.997 256.612 314.77 257.373 cv
311.547 258.134 309.115 256.394 309.167 255.443 cv
309.227 254.494 303.774 250.029 302.765 250.928 cv
301.759 251.821 299.22 251.662 300.642 249.209 cv
302.06 246.751 300.315 244.1 298.73 244.005 cv
297.153 243.911 295.606 243.185 297.376 240.112 cv
299.151 237.04 292.448 237.586 294.893 233.916 cv
297.333 230.255 294.446 230.715 290.364 229.83 cv
286.291 228.949 288.602 227.501 293.054 227.454 cv
297.505 227.402 286.342 222.912 294.605 222.778 cv
302.885 222.642 289.664 215.169 298.807 216.354 cv
307.959 217.541 300.126 210.396 304.875 210.679 cv
309.623 210.967 306.107 205.986 310.886 205.956 cv
cp
.27451 .207843 .145098 rgb
f
356.957 270.96 mo
355.719 267.324 354.667 266.062 352.561 266.062 cv
351.921 266.062 351.053 266.22 350.322 266.925 cv
349.39 265.438 348.535 265.31 347.431 265.31 cv
347.031 265.31 346.142 265.396 345.368 266.031 cv
344.9 265.812 344.38 265.679 343.783 265.679 cv
343.581 265.679 343.318 265.696 343.009 265.761 cv
342.451 265.197 341.694 264.789 340.646 264.789 cv
339.228 264.789 338.334 265.524 337.75 266.439 cv
336.834 265.399 335.743 264.828 334.407 264.828 cv
333.375 264.828 331.992 265.215 330.802 266.843 cv
329.959 263.964 328.121 259.813 324.516 259.813 cv
323.587 259.813 322.221 260.114 320.958 261.545 cv
320.356 261.636 li
320.635 259.822 320.807 257.352 319.174 255.599 cv
318.551 254.933 317.438 254.138 315.66 254.138 cv
315.157 254.138 314.615 254.206 314.057 254.335 cv
313.76 254.408 313.468 254.442 313.189 254.442 cv
312.69 254.442 312.313 254.335 312.072 254.231 cv
311.771 253.407 311.208 252.72 310.692 252.165 cv
310.654 252.126 307.285 248.62 304.251 247.838 cv
304.359 246.532 304.097 245.229 303.461 244.053 cv
302.73 242.699 301.6 241.681 300.324 241.199 cv
301.055 239.631 301.411 237.101 297.974 234.87 cv
298.64 233.692 299.336 231.948 298.571 230.178 cv
298.21 229.349 297.656 228.769 297.002 228.352 cv
297.016 228.313 297.033 228.274 297.045 228.24 cv
297.419 227.243 297.308 226.375 296.964 225.636 cv
298.128 225.349 299.396 224.721 300.118 223.376 cv
300.827 222.044 300.655 220.733 300.212 219.599 cv
300.358 219.604 300.492 219.607 300.625 219.607 cv
301.458 219.607 303.994 219.607 305.575 217.7 cv
306.67 216.381 306.744 214.89 306.615 213.69 cv
309.897 213.067 310.632 210.215 310.89 209.205 cv
310.903 209.171 310.907 209.136 310.92 209.106 cv
313.103 209.089 li
313.954 206.52 li
314.048 206.085 314.362 205.544 314.534 205.471 cv
315.354 205.123 316.953 204.147 317.009 201.853 cv
320.15 201.204 320.966 198.794 321.267 197.921 cv
321.671 196.898 321.654 196.026 321.551 195.373 cv
323.416 193.942 323.27 191.609 323.222 190.763 cv
323.209 190.53 323.184 190.174 323.209 190.058 cv
325.362 188.524 326.638 185.396 326.664 182.491 cv
327.536 182.336 328.701 181.842 329.697 180.455 cv
329.998 180.321 330.316 180.27 330.66 180.27 cv
331.214 180.27 331.816 180.407 332.478 180.558 cv
334.179 180.936 li
334.927 180.983 li
336.345 180.983 337.621 180.33 338.433 179.183 cv
338.747 178.744 338.979 178.229 339.138 177.653 cv
339.761 177.954 340.41 178.104 341.076 178.104 cv
341.926 178.104 344.032 177.812 345.227 175.109 cv
345.252 175.066 345.27 175.023 345.287 174.976 cv
346.142 175.47 347.125 175.822 348.243 175.822 cv
349.094 175.822 349.777 175.625 350.331 175.461 cv
350.752 175.337 351.023 175.26 351.388 175.26 cv
352.497 175.393 352.892 175.629 353.399 175.93 cv
354.035 176.304 354.907 176.819 356.08 176.819 cv
358.168 176.819 359.363 175.281 360.081 173.979 cv
360.523 174.795 361.284 175.745 362.573 175.977 cv
364.726 178.963 367.024 179.604 368.593 179.604 cv
370.217 179.604 371.747 178.903 372.89 177.627 cv
373.057 177.442 373.268 177.215 373.457 177.013 cv
374.647 177.967 375.644 178.151 376.336 178.151 cv
378.089 178.151 379.215 177.082 379.911 176.398 cv
380.383 176.845 381.217 177.094 382.068 177.094 cv
383.198 177.094 384.272 176.669 385.291 175.818 cv
386.133 176.497 387.263 176.841 388.655 176.841 cv
389.084 176.841 389.544 176.811 390.025 176.764 cv
389.665 179.999 390.516 181.073 390.885 181.529 cv
391.817 182.702 li
392.879 182.783 li
393.059 184.017 393.446 184.91 394.047 185.606 cv
394.799 186.466 395.831 186.938 396.957 186.938 cv
397.657 186.938 398.353 186.754 399.036 186.389 cv
399.221 186.453 399.444 186.582 399.638 186.724 cv
398.465 188.017 398.546 189.362 398.654 189.938 cv
399.105 192.331 401.374 193.027 403.376 193.642 cv
403.629 193.719 403.965 193.822 404.304 193.934 cv
403.535 195.382 403.505 196.61 403.646 197.475 cv
403.999 199.657 405.632 201.02 406.942 201.909 cv
406.513 203.349 406.539 204.925 407.093 206.283 cv
407.668 207.688 408.743 208.698 410.083 209.157 cv
409.16 209.725 408.635 210.434 408.334 211.014 cv
407.286 213.055 408.042 215.079 408.597 216.557 cv
408.605 216.583 408.618 216.608 408.623 216.63 cv
406.539 217.171 405.262 218.125 404.592 219.526 cv
403.535 221.739 404.523 223.896 405.284 225.254 cv
405.254 225.408 405.245 225.563 405.241 225.709 cv
404.412 225.709 li
403.423 227.574 li
402.774 228.958 403.226 230.14 403.879 231.119 cv
402.744 231.811 402.048 232.79 401.627 233.551 cv
401.356 233.508 401.086 233.486 400.819 233.486 cv
399.59 233.486 398.783 233.989 398.404 234.229 cv
398.241 234.329 398.108 234.415 397.485 234.518 cv
395.513 234.831 394.494 235.742 393.953 236.576 cv
393.751 236.567 393.549 236.567 393.352 236.567 cv
390.21 236.567 388.354 237.577 387.817 239.575 cv
387.718 239.932 387.654 240.4 387.718 240.92 cv
386.42 241.118 385.548 241.741 385.024 242.278 cv
383.365 243.958 383.396 246.373 383.421 247.972 cv
383.421 248.01 383.421 248.053 383.421 248.092 cv
382.764 248.981 382.515 250.313 382.687 252.079 cv
382.721 252.414 382.772 252.96 382.768 253.334 cv
379.344 254.657 378.639 257.446 378.287 258.808 cv
378.282 258.829 378.278 258.851 378.27 258.868 cv
377.255 259.409 375.846 260.329 375.373 262.189 cv
375.339 262.331 375.305 262.469 375.287 262.606 cv
374.389 262.606 li
373.062 264.093 li
372.477 264.905 372.224 265.881 372.31 267.213 cv
371.661 267.213 li
371.493 267.406 li
371.235 267.346 370.965 267.312 370.689 267.312 cv
369.065 267.312 li
367.948 268.726 li
367.901 268.794 367.858 268.858 367.819 268.927 cv
367.218 268.506 366.552 268.244 365.735 268.244 cv
364.287 268.244 li
363.866 268.699 li
362.809 267.888 362.066 267.888 361.499 267.888 cv
361.168 267.888 358.628 267.986 357.954 270.96 cv
356.957 270.96 li
cp
1 1 1 rgb
f
378.927 246.828 mo
378.927 246.828 376.521 232.734 390.958 232.391 cv
390.958 232.391 380.989 236.859 378.927 246.828 cv
cp
.27451 .207843 .145098 rgb
f
393.708 227.578 mo
393.708 227.578 373.771 226.203 372.052 250.609 cv
372.052 250.609 365.864 223.453 393.708 227.578 cv
cp
f
264.484 225.688 mo
264.484 225.688 263.396 219.35 271.032 220.708 cv
276.726 221.722 282.436 224.889 280.528 228.352 cv
278.621 231.811 267.229 231.329 264.484 225.688 cv
cp
f
268.931 227.857 mo
268.931 227.857 265.683 227.325 266.31 225.748 cv
266.938 224.18 270.877 227.755 268.931 227.857 cv
cp
1 1 1 rgb
f
403.002 312.076 mo
403.002 312.076 399.041 317.146 394.911 310.581 cv
391.834 305.691 390.335 299.336 394.181 298.412 cv
398.022 297.497 405.331 306.254 403.002 312.076 cv
cp
.27451 .207843 .145098 rgb
f
401.614 307.328 mo
401.614 307.328 403.402 310.096 401.816 310.685 cv
400.235 311.277 400.235 305.958 401.614 307.328 cv
cp
1 1 1 rgb
f
267.178 313.623 mo
267.178 313.623 260.956 311.981 265.365 305.597 cv
268.652 300.845 273.898 296.964 276.262 300.136 cv
278.616 303.307 273.451 313.473 267.178 313.623 cv
cp
.27451 .207843 .145098 rgb
f
271.002 310.478 mo
271.002 310.478 269.163 313.211 267.994 311.986 cv
266.826 310.766 271.715 308.669 271.002 310.478 cv
cp
1 1 1 rgb
f
211.375 257.656 mo
211.375 257.656 207.649 252.419 215.117 250.33 cv
220.69 248.771 227.204 249.153 226.989 253.098 cv
226.774 257.042 216.303 261.55 211.375 257.656 cv
cp
.27451 .207843 .145098 rgb
f
216.329 257.683 mo
216.329 257.683 213.166 258.61 213.05 256.922 cv
212.938 255.229 218.035 256.75 216.329 257.683 cv
cp
1 1 1 rgb
f
456.902 260.308 mo
456.902 260.308 451.346 255.078 454.053 254.274 cv
459.553 252.642 474.257 254.618 470.235 262.284 cv
467.662 267.191 456.902 260.308 456.902 260.308 cv
cp
.27451 .207843 .145098 rgb
f
467.249 258.945 mo
467.249 258.945 468.903 260.531 465.78 259.887 cv
462.651 259.242 460.382 258.22 461.41 257.355 cv
462.432 256.492 465.59 257.364 467.249 258.945 cv
cp
1 1 1 rgb
f
470.514 225.761 mo
470.514 225.761 477.11 225.052 477.364 229.4 cv
477.609 233.74 469.595 234.415 465.999 230.595 cv
462.402 226.771 470.514 225.761 470.514 225.761 cv
cp
.27451 .207843 .145098 rgb
f
468.366 228.386 mo
468.366 228.386 472.199 228.24 471.219 230.113 cv
470.235 231.982 463.777 229.521 468.366 228.386 cv
cp
1 1 1 rgb
f
253.771 240.615 mo
253.771 240.615 266.155 241.238 261.867 246.785 cv
257.587 252.333 245.006 254.623 243.661 249.411 cv
242.312 244.207 248.667 240.503 253.771 240.615 cv
cp
.27451 .207843 .145098 rgb
f
248.65 250.081 mo
248.65 250.081 245.178 250.975 246.084 249.578 cv
246.991 248.182 251.026 248.624 248.65 250.081 cv
cp
1 1 1 rgb
f
365.752 338.502 mo
365.752 338.502 358.972 342.348 356.905 332.848 cv
355.367 325.771 356.304 317.791 361.193 318.616 cv
366.079 319.45 370.935 333.002 365.752 338.502 cv
cp
.27451 .207843 .145098 rgb
f
366.126 332.409 mo
366.126 332.409 367.055 336.431 364.949 336.337 cv
362.844 336.233 365.091 330.171 366.126 332.409 cv
cp
1 1 1 rgb
f
437.618 278.591 mo
437.618 278.591 436.161 284.628 429.14 280.804 cv
423.915 277.955 419.515 273.173 422.776 270.728 cv
426.046 268.287 437.136 272.614 437.618 278.591 cv
cp
.27451 .207843 .145098 rgb
f
434.069 275.132 mo
434.069 275.132 437.077 276.718 435.831 277.912 cv
434.576 279.103 432.105 274.552 434.069 275.132 cv
cp
1 1 1 rgb
f
413.246 181.739 mo
413.246 181.739 420.713 172.862 425.651 176.467 cv
430.588 180.072 427.838 186.693 419.936 188.073 cv
412.039 189.452 408.648 186.934 413.246 181.739 cv
cp
.27451 .207843 .145098 rgb
f
419.618 178.955 mo
419.618 178.955 424.186 176.519 424.301 179.453 cv
424.409 182.388 414.767 183.157 419.618 178.955 cv
cp
1 1 1 rgb
f
264.737 155.219 mo
264.737 155.219 253.329 153.118 254.029 147.042 cv
254.721 140.975 261.837 140.09 266.938 146.277 cv
272.042 152.456 271.526 156.65 264.737 155.219 cv
cp
.27451 .207843 .145098 rgb
f
259.168 151.06 mo
259.168 151.06 254.794 148.297 257.287 146.741 cv
259.787 145.194 265.219 153.199 259.168 151.06 cv
cp
1 1 1 rgb
f
242.114 364.391 mo
242.114 364.391 261.364 383.297 305.021 386.391 cv
305.021 386.391 272.021 380.203 242.114 364.391 cv
cp
.27451 .207843 .145098 rgb
f
310.31 125.059 mo
310.31 125.059 301.974 116.99 305.918 112.319 cv
309.854 107.648 316.278 110.854 317.095 118.833 cv
317.924 126.804 315.174 130.005 310.31 125.059 cv
cp
f
307.973 118.511 mo
307.973 118.511 305.867 113.784 308.802 113.87 cv
311.736 113.973 311.831 123.641 307.973 118.511 cv
cp
1 1 1 rgb
f
385.458 121.351 mo
385.458 121.351 382.738 110.072 388.573 108.241 cv
394.396 106.402 398.108 112.547 394.524 119.723 cv
390.954 126.902 386.919 128.131 385.458 121.351 cv
cp
.27451 .207843 .145098 rgb
f
386.992 114.57 mo
386.992 114.57 387.748 109.453 390.172 111.094 cv
392.604 112.749 387.499 120.969 386.992 114.57 cv
cp
1 1 1 rgb
f
310.263 272.769 mo
310.263 272.769 309.502 284.349 303.383 284.357 cv
297.273 284.379 295.567 277.405 301.123 271.621 cv
306.675 265.829 310.895 265.863 310.263 272.769 cv
cp
.27451 .207843 .145098 rgb
f
306.782 278.784 mo
306.782 278.784 304.531 283.446 302.713 281.156 cv
300.883 278.849 308.2 272.528 306.782 278.784 cv
cp
1 1 1 rgb
f
272.352 177.378 mo
272.352 177.378 260.806 176.222 261.008 170.107 cv
261.192 164.002 268.218 162.532 273.808 168.277 cv
279.411 174.022 279.235 178.242 272.352 177.378 cv
cp
.27451 .207843 .145098 rgb
f
266.456 173.695 mo
266.456 173.695 261.875 171.285 264.222 169.545 cv
266.594 167.796 272.665 175.324 266.456 173.695 cv
cp
1 1 1 rgb
f
408.717 123.869 mo
408.717 123.869 409.533 111.559 415.91 110.75 cv
422.295 109.938 423.902 115.696 419.141 122.258 cv
414.372 128.814 409.069 130.336 408.717 123.869 cv
cp
.27451 .207843 .145098 rgb
f
416.851 114.3 mo
416.851 114.3 415.136 118.609 413.615 117.982 cv
412.086 117.351 415.949 110.979 416.851 114.3 cv
cp
1 1 1 rgb
f
424.813 236.984 mo
424.813 236.984 414.303 229.688 423.116 228.305 cv
431.928 226.93 439.216 229.649 438.116 234.686 cv
437.02 239.722 430.502 241.183 424.813 236.984 cv
cp
.27451 .207843 .145098 rgb
f
432.221 230.582 mo
432.221 230.582 436.805 231.252 435.994 233.891 cv
435.177 236.533 429.858 230.393 432.221 230.582 cv
cp
1 1 1 rgb
f
274.5 244.839 mo
274.5 244.839 284.567 244.035 279.884 249.286 cv
275.188 254.541 269.378 256.53 267.526 252.904 cv
265.678 249.282 268.927 245.127 274.5 244.839 cv
cp
.27451 .207843 .145098 rgb
f
273.185 252.457 mo
273.185 252.457 270.044 254.344 269.223 252.324 cv
268.398 250.305 274.715 251.392 273.185 252.457 cv
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_kiwi_bw.eps)
%%CreationDate: 3/12/2016 5:38 PM
%AI9_DataStream
%Gb",KBj4NhZLIbe4O<g6EBmADmWee3&d!rb+J=P!@RrBg#mk4Jg[jD'p:$p,ZND@RA@J+_cL#ti6g\&uXdW:m<AQH,HFm4\e5#T-
%^D8W&)u(<"pUlGrHY18Q6iXq$R@/>'fnl/!&@88""GE=g*?.Wg=kg>h/EULG,P83VTjDK+8%$okUL&hHc..-JhInNR<dtj"R5`(u
%peo<U7+H&NcV2&V/=f(pgkL0c?E$E[ou;9^Q1;-a!UW6(r4WK6TE>$Cn;UVNg+GnM:d-@ISAY(JIIRj4O56bbJrW4!-MD-976]Cm
%`Jd+_b^SE*:+FLhUY)TrCL8,+C2UrL7X(Vc,(G-cTH<l@(-Z=;d;cEsD/jJL*A%!=HBc5qjt^-W#\d0c%iR4f+%-%d^W[f)W.,RV
%r;R8\eR/++b1ISegY(F9?lKk+GXf](V1='>/&aOabu,p/%el^hMe]L3dILIq@:\2Q)29=4Vs?!i%dV#si#>_J[R6\jf+53BPHh49
%c[)/`D*+&G,r37[*D2-:<h_ep1G>M43GQWek8LJYb5YjX9k]Oc,p.<aeYr#P<b]\PjYfG3P;i/T<)kWP@(fa^<DLgQrECuLMN*gu
%"f,D,[W+kS1I9g=g\1GTnQ1C>BhK[T(K#%QrdhZGRnhO%Ejn0ObM'\&0joeYCmNF'18+rJp7u!O9<>1o*p^\3<#`PI)f$CkF/r.u
%WRM\`2uUW1NCp`KZG)S1pg5kBClnF!W;\/-L@M`V;,,;lBcX@jl-oiopgt=H?)s5llfYbl\4pT+5k[(f&_6`7I-phthk5l#Ka`V7
%LMuKTTMi[bs8/Ftr%0n`Y.!<LMakC.Yu*Tcs7\aa\T7Wsb%qkuVm*_,>.OGW,;B*Q_aOR:=o#%Ifja(&d=<]jJ"7\3X-Mgm>[\6X
%s44/aY>Hje3&4].hkLg#g0"GuIdOQoX[o@iD4LSpD6(Z$DR>n2RD!p[)L#'jjAS0c+C-TU2N>Yr]c)E^j'2=oZ!+9"1l<*IPu=g^
%H[Lkn\u)Q(Z`s*@;5Yc;'E3?;s4&=W'!5?@*d<*kS%)X24PIW*3j-t_ZY*t3FCr79IXsOJB(rZWJRHE$:LNJ[*s=30"UWm*kZ[@d
%<39LQ(*J>GTu$\:j$INs<K"7o,=<R4\qr4[(P1=Hi`63J<9kS,k=fp9KnY(?dkpj[mY;UOn?c"/5)Fc%(?)HXD`6L)S>4tq8dWI;
%Z12VFVkqW(?g#rXHsD30CK->JXU&%t4<Wc)NT+N>dV5O]DF?A!YVK!4@&WTcr)`2#XquJU2.dn@T'Se/^bEAsIMSu$_>/3_9!*?`
%(sqn.m`i6Oi@g06r&)&/J9I_CLd*EOeu?YS"E1pXEuJ%R:0SX3;2Ctc:7]mjKX!@YCr`p=8]B3s?l/O87[`!jbZ-;kMhgHQiDn#=
%UI(c%]cN4R:MdEX7pr+A9$uS-i)0Yi,HcD>"00mq>Er7R3o5u9:6Y1o(=]&50'lFEc5JgF>5N]Je11II)H7>pA0NU@\:]QZ<,>%i
%NT`kO86&/L?c!o8i,F#P*aBq)[];I[5p9tuS*Toep?V<XNZ[Wt@N((epRh8D/.-..K*DY9GGEfj2`);HK/tJ3gT@q(V<A*;IMt!/
%]((!d[+`%YRS)s.G1\qfCZPAHN5m95P8`3;2t_bZYJD6(!_-p:BkkeM`=SoDgpdf*C<DO6.HaB!\`6-kFSY4VHDNVZjsIm2did<M
%2!-WB.T9PhC<K=g\Z%/>[H49o*/nLG\cpZThB9hoSo\e54f:0)M6Z6Zd`G!DU[%8]Z!@<MH??![5;ug.6M.TN;2nak5n\UQ)??25
%[m9p7<SQ+sWX77F?PM8>Au/VQ?U)-lesl>uAaHCsIXKq0>('Ep-&mm7@k6lD6fepF6TS`(d>#enNI7pJ&WKNG0!D"pK$erl\h*@6
%l1K3mQdkq5eaX(UhKV\ZZ"ILiMl=#5^5foSOah(uF#;X2j'jIk/J[q,XUBPf(59c<?npEd@UlfPCUT*XS^k;TA7X^VoEVo"f1!@g
%h.V>0+qn^1/E"JgNB%o$=,!\4MD=j*/6I4VnNW"Ar,:XW`cf$nCMi@I,3FA^2g/c5DMm:)O\3s%3tfok&>m%a5<be\3brWr.EAr<
%J7>;%3^&O-3X9=3`<e@Xcnc[T40uqR%(=Fum*UeY6gm"HDOb!B0ZSMKf6MAI`o)fEqqdp^nnP!i(GfulJ@pI(nui^eP@t*V`8c<1
%rAMe%I1nJ5,+Qc3e9:JP`pI#lhqF!&PgA7KYL*]t(jjl&`Yc_NEFtZg+J7sh1[6*TJ'FgLeU"otDa`"Q1l`f!HQ5tpJkq`h2GZbB
%j0!^'=K]#RaAsIEf$:o[+^#^nQl,EmB0H6+rpeb8c$JF0']6(B:kH^6%%4E+Z"IRUJU.3k.p1gmQ7;DDS!=ifSY:&/1,3!CiALhT
%lE&(&D"%akJt65,T<*t@)Y'R9GVNMlOdsdVnQKaHm%pV?U-C*T;eIeJ,'YI4JV*2S=ct=>2[Y#@iU=6cRqo+GjD8ms_;&RjO"[]J
%;/F<EL9[Ln0XuF4XOX'1DH)TfH60;k77K/KSAsOTc,Y%9aG?ZeU!gTh9K\\MjA#/R,"9e&&ZX;>3h-IKVj$[!F60=QolKVQl)0Q\
%TFf/4Z&cSseSsJ@Ni3u7","@Ha)M0\IS=4`q4#YmbXm3W6]8t(Ib/@[D^K,KCCK@6LSl,-L?T[ZW`?_<V!85nM<gsedL-k^B^IRk
%)q@cBeN\u,1kl*ZW)[YImP`')eW=$qiKSI+ggR:H%7<MUY3RLmp!Jab6cL0+lK:2IT$TqaN^cG!gu-QobN2?snl*ROlCa/P<4.$H
%B1Sjsqn1`4.]7&Y$04qmX'2Jk7?)X?V.-ic#uid:eNk5+TJTWqjI3'fhpNVO03^C781fa/X`CR5D"GEB#IiZ#[Td,AP\sJH8oP.^
%;05iL;VW);8<e,bcedqX'V-&F-86.q(+7nd@WZ*55AsIOMU#TV7J'8u/;f0/1Ej"O[ptobVH=P'_2NdnMAECa`hH.:;>q/A1Q=g@
%1L"KW!6X\f7F>T2@kVS8;_3gO?m\=;T#RL0dB(A4(.F/$`dZOsVH=P'_+`"Ss#X"j-8DAeCFsJ/]10>sPPo`t<eT(H,pr)#MTK"W
%hqEucp>Aub?^TS-/C4b`LOZY*CD,a\XaKG)`u@)h0E(ggLTs@l=E!oUb`o<eKWfZ"^32%&R`;p6q:_(:h*/Q]ec<cj?2MraKG/@K
%\CsndRrYod0ishoCU]J-9m*im=8Q'>[H*1ki<[`<a)+F*VBG9:njFJu::JWq[uio27N,2Zh+#k1e3u1nRNt#MQ+s'YG.%,2n8H#]
%31<nbN/XeLGKH&`UD8*C^n"=$f8.`<f=krQICs-%6b.o3\!T5"1BF\gQl0te1,>^7s#)Y%^ErXas':3eR9LBW?)a*aj%A_81q$\#
%GS(Zp"g,a:i/VPcdmmalkg>aZ"[;f=G[M3XkfY)#j'VT@bIFN@s+"fC6FZ8ta]3S]Q"YPSK)#"no5>&t+-@%TbKc/*l"f'uIAq[E
%;/_&$]%,A&CHjPcs2HEq2n<Wd8k-%benZJ?5d=1#SXr>'SMcf`DP5t>44>@XZOso_TJM>g@Y),1@#o16)K*['lc.U8#'7GtE8@4!
%f,1#L&M"M@-#_7jM`8"NrcLPJ&e?1(8?3C;$oGZ^2a.23r:Ag\q2)iMq<ti?o(;kSRZU:iJ#DJEIJ=)>!*dI+-;U&$q+f7`J'Y'2
%l'_"B9_:&&o<"(cVg!IL3sgA<l'^u?qeCH>4$=c>=,r?r3a"itAtNatB^B":^S5JNro`3j<%B>o/O3Ddi@CiFK=Y;qA@A'^g$NOO
%'Bm:Sj&$,BY1@ArD:`lQeWgalZYMF?T6B63Cae+.lUKKj9B.?/VB3%BL[:Ym0=N4A/W7*7P=?8:Q9_!uQ7B:_jeTW_ZVmtrXeeKd
%?E,rA[;4*aVQR8)lYPiIS%?lXK@3SLVuF#b.naKIE>haQ?ferV\h5.:f<QgK;:1r40q>0LIqa32'=]91dhF9BDJ\=P)JO"[JaK((
%g#3T9p:%tOe@^T0+MA]&/#XMrc.hT!q$5.;&VUU+$qps##4@eX7E0Z8Upk,h?%BA0UB,Oq9H>cba33!&no&K[Lms)=0B.[/s3&p^
%13L6'*A:@3bLH&;FhCD$j/(JM0/6$GrDNr!]OcOn7s;l0R:m,ZXa=a@7_Y[tB5A3T6N;3&BW$ncr6l/ZN;I)u3b'$$a!PmLba:RP
%nP=/^hidtJ6n3P!]3)Vp7m2\1;Es/c.NGA'EV^<sj9s#m92+@h*;,$-`5opPoE*JNXo!U=E1Fl<p)DBCo_#'FlV!usdsoX.9=q+@
%ErF>!48$lEE[HdtVl$ro8$;%Q^0CE.'Htrkm,LB;p#G(EeA>4!6tOUp1GS1%7P`;q7Q+C9)Wrh[-`al!nCPbUr"d]6^X36&As_=K
%@pn(mk-cV[Sm#g:c9b_hh3l(nW[#hZ.*hGhTd.q`)VlN0a3Y[AT9Z]_:nZa+CbW<C?qqr[J@$/5A.%_=b`D9Q59W1Hg6FVi@n_EL
%3V?m@V#idP@uS/E,Ido+%%T+Hr>9#sBr?E=EFn0/5K;360d2")Iuf<7.V_COhKJe_\5=fbMUf3/MGDAKQQ%n+EV1QfCVAK&ZqAr\
%GIf>$`7q=l[4_E%@?5/B3`!]Dg?2\EW'@[ZPsc\DTT#tl].caoB!gENI^GkR8OoJgKKlKAQ2]puZI'(I_ilr4(7WTWDEHUf<=]Pp
%_Uj'Nal>KQ<[54MX0/3qeAkfV*B39H3]i&B7Q$@n]0XniK;S)ArMDmF.&d0_B7kZ"j(GRO3,2N'Xs_[IGjA[#d8I$ch9_QR&+]U@
%m&b;mlGVeCH+93d&B6lcbIC9_?<VuL#(%Yd%V'LCcr!1@YIj*"0Cg[%#,u1_j+R6u3DRqWr0Y:K"QT1s-fF^0I?AhS>Ah)i3B\j]
%>'$Il/Q6G&C<]JT\Z%GF[H;qA25d-:hKE[P)BLe>p70-\";>IpBoHeAc:uQoWAumpkGICse=<"60Q2M.V`0EO2sK,PAC>0$AnobR
%Rn:(rYEr$'73/X^g[.!19mVD`A%4[Y-%=a($tDDi^O,SN/qn0=Y/GR$P$@mf`:SK%/+6)hON;;MoD3eTa;Bmm\dF<7BB<D]WYS6?
%9,Rra08cSuldqksVm+kN<RpV;$f7iG:,D_8`:,S-nP%(`>"?H!aB`oR]UQKs2-"9YR6?=36sT]fRD?`leSTG"NuNS\-,tpf*la%F
%!W&31a*mjbH)c">\glCd(]$_%jHqP9(tJDge$eY0MH[T5(\S],8k='3?>I!,f4O%.1/0Eg(tIh,JsDel`c86tkq6-u\u&.>2ec[R
%)A?'I?fer&FTN:fNbXu=7JtC@fSns$BT7eKU+6);Gn,tP*O5H?W":K3e2ml)s.(/RhR"_0AZF"7d/:FGo$E6@k\e!RoFK$mERf^V
%_;7El\lrWTj3s)AWjcbn?.<Z;N<\#a10'4O7k'nl6rTXiE(>(_%o9Q1FR*3,2pABf<VE<;f2H<@$0apUFa>*C4_6fS*'lq)T';?h
%R5Ni2\F.>'XteR=D(;&]LXS*bF1g,`]"jH20fYrj^:,K*[9@9](G"++?'?ZZp!:+E_Jq%FIlC:IGN#JVL2e#i3eCom*61X<9]b9$
%S&>7mff4g0jCtp9EE.=6%kjHCp%YZ&Qq3+%^>UkNDtr,1'Q:JV:"J'a$\%$o4k#1C7`EKqMbota1CY#6_p+,`s7H.&6O&U;Id6Dg
%KfBB#C[B`m$Rjit'D42u>_6iB^$3#X`g]]XmRKHYMk'bE(]?h6LF3"[N8NgQ(s-a*DY)u<"V'3qllXDQpmYX6)!11Xi(#,3?#8=+
%'Xb4/@d%l'*k(gtT$<fCk56kp-lJ#4Wg!@+,1YqID5N0L%2p$.V[E)r%],o-O2k+-^![aks'shb\5bZ>=l"r(:0JNp;]$GB#@7(6
%(\WZqaa1R"g6kJiEgqk9lXu1#D'uY+;_f:LR@1OVRH6pW*'tt^?4#J('Pks'SP0B#8Fs=9ol2cFD'H>^4p1V/HKSgDDOJ("reY3[
%OLJK&3jip]h1=#dbMNtBq3u\L_^%c/\II"I>cX.MA4QiE&TmfV?JC3<kS]inJ`iel8hKl#^]/S+0m&hF^Z?B9?$rZ`$&%l\<r]Kq
%Ij)5Dk%`t;Hja4m3eCZ.1Q&q3+njEgPrkD(AlhcdQ!/o>en%$!%d/],bkE`ugFAN7DI-#7[=#5^.<RMuW1QNW$X**lFfQ\,o9X\)
%bXoLU':%jBE`Ap>N$qVgLd_+7lbEHS19]WfGC]X[EADGfT>)52npfWQ%Xs'1QEbb3M%!56Cndqs@%_A4R*:c]@\_Ip=SZ]2.hA#)
%r^3=s\jp.BN$-O>:(>g!]`0B\la:cFd^j<!h1bkUK#!XH2/u_aBAU()]!AJus-GIGSo*1Frp[V:ZbTnn\q+:F0X4d(G?bg]C\WI5
%.&Q#C@?C:e`!P$C+S.>h`VlK1J<ApYokJ+4I5>(():c1<jkEO2[q80-B'le#eAf5l8!Q<B#H,jLN^)XV;f4b[ei2[@EUY[]1Zc>L
%mQ2]g%Aqp)b'g2CGKP?3giinV2k4pG.JKBRh^S;jEo2A:qg.t#q+d@HPke(Bn!*YIPK`bW^l.SplV!E>mT.UdWZCe[/ZBm.A\AY9
%,Oh?m:*Vk_ZqLu@/0*.2nV:iUQL!N@bB1FZI^i.?q3\c#_4$6hl#i]&;:/P->-4;SM&^o=\Qu:+X]EA-gHNKZpeGL)1mGe\Be7!W
%"p+W-%5[WU:M2o\5R#D5KC2N_Gsp-PnUENhh&lXnTC!9h0Al"hh!!"C<]?`#Y1:*EAk![/,hFmJj6j,BUO!ZUqL?W9j\*td>*)Jq
%lD=3"<,35+/Kg7F_^>eA`.WV``C^+Q&P1=0oCZMuJ/ee@r);/D9s%Y:5;7022u[=LE:uT"H2+_uBJ'`&rW$L,0JJkLmS1%bc\\8D
%:b2j,a8fPS?93uKVWOPC.+J't(uS8f<e_(pI\HsaJS')#els&P`^#aOIj\*hT9R&52D^,7;c1Bp@BH)oZdL'GKUXcO`Lm!C!HH/4
%i,P9`G-b15*s;62>=iqA=[XPEALQn4I7jGcp<E$`S+Zf'Ir<k=DBAg<#4t%ZS@i",P\q!N#A_H)\rN>,Z4dtRI>0oS,n]F\Y;,"i
%VAo;5drg7niu7^&#kqe%`o[)@edVMn_tp];*h:613[0r$0g*L"Z^tkj",D(=kp09(Sg`*n(ndiJ>h>#&W87SU@l$/`D)EdjK4F/F
%1KOsDNE/@3P-5DWd@iQAC'@/?Z095Re1-bMhte9Q';k3A]s9UlZtM(Cc,Do^M9;+WH"JF=euNY-;oKL52G>n?HY#HjC0tN&X$DtJ
%/S\h))c8D+AJ2H/Q+^mYMCVpGbK:fb*QI9]k1SiZf"@rj0&m\I't"-[_iQ;t?W==g!sto*Y;SFOc#%!3m8cBV;f&n:7cf-Ij_AiU
%@HO;/!@);ZcJ-mp,:=KU6'PiRF]:"Pb*c"bhl]RZMU\_>c>$b]fA!FO8Yb.Vk`8r!))&FmbRqF$/"#6lUnFFD$sS2p2,E6U:_sd\
%Q(4(6Of`fm!kL(YOQX3`HgNLC-M/gc1+Rq-_Mb0*`<O%e%)]02@J8]k*E_Pt,Dq?8[2^^,*na0Z?m+ls.W32-R=QCHTUK008AsE\
%).iN9^KR&5EhubuW`1LN?_'WP9!<-+c!p(9>s*s!g\$Jl8mJcW0<4]?@Wa'0BNL[/'H+AtA<,\E=K5CSTX/;6rWSiUJJ)_$pmltY
%'kn4f/GtH!/Jo\=<MYCVq_iMhL0OZq2(m7Hg[%5^?D9imeuE7gk8"f,)oP^e*AoP&"s2X8!"(bT+h75I/&@QG05G*^GJVUG)scm+
%<R'S0Vu_V[?O,2sK=XHPou8kaKUl>Le=oVEf(9Sn6/iI,L])MM0&g>Q2PZmAFhle3>+9Vo)U%\%<^jK:hi4WhM_,e7B"_0F,*QjV
%6>ojH`eMc.NK$7@DY!ZG)T(.6lEk1/G!&5O]rT-+cXLt)Za#j9E]YXJQb%\."KQl)X:4UX/X_=KY$!H]6egoX6&-<c8j<qF1MbaW
%")8F<bLI">P1n>[3dTJCn+EG,YR4q%=(M#9]F3B_^cYDe90KkFf0$*=*5SL7Hdogd#1-\O).=$p"0//:(9:G01rTWf"372kPN,i(
%=X9TR]rE/ke;ij_,g@V]E38!U.@EefGa[>Tel5M&./Knh=(lRgRHCM'c(/X<-K26III_s"A\OX<-=o'0^M">)'kI!V>$6N&?ZF>e
%2N_*_%5('^j[psB<=R&RG9Rm9cV.S4m_+=<1WF\9;o\SkShi!r0kj5)i-*'.G3,p+$=`!SMJ7+`c!QL"Q'5CV]1q^,'")h$dE%p1
%jgEJ:G^j&>]@&HDZ%'C3N^fg"*s=);)7iu*lI@LERrBh[NgU?[`U#A+B+**AX@,'ioIEjRJC%"s9YOae@?0stJ"e09Ai&+s?B[cZ
%Uok2<A)5tP>#Vhk4g14LpUjAKef-!irZ)e#F\lNcf:pY#FE)."&V'N?5%._r9>C="$R:pOc+[*`81dYZ@r%ngELr\mAXd]+8KT3S
%7AB>qUf*t:dAPmB[8s_@m9Z?T8Bpj*4>sfQA'Jht>FXr4E`>=?dBCm@Cb7[sUA!7^X&Q:1khrun;Un0\=DV8SK9m.=VaXDaU'1)U
%M2#2J/S\VNh+=ug0!\Q;JmLu]HM$Gb@+6i%og'G>IPX5+jgL`d]MrjcSd(_hVP@EIojnVd<NO_[VaMW6JIK)2T&_*%n$BXZb^OX:
%ne]frEorG9h>OJC59=Bb>1\]?._'0AO"8c(LA<,@:o0mYD!gj]MRC,BnaH,cEeKis[kD3qGuSLK(]2Sai\FE,LWJo*Ipos>BPF/i
%W*a`\2:a-@M_=\OU7!$sl;8PN"2I#'H9\MjrmrmWH_QYr3_1:,L7ssaie<-&&B'#KSiC:\6fY?)QVs6J&u?r+ZO\Z><NFR5XF/T>
%Hh%rj"`4>V`(T[5GA#;AWdnM3#d9AHPT)##ctRQ#Cc)#`Bh.`ERKY8B\?A6MNSUUAkT`$tooh]*HlesY;V0p#(E7#390LnBmds`d
%3SAH_oWFcm-[s7hMoKbMep$_K<'3[BclB:D+Rl,V-"5Bp%:>8$N@R\WXH6be-X-ERKcdXrel;rBDa\dJ%$F-:41M1"B=T<X?F/=_
%EKV+([O[pKlH9DoR.]$E?Z/7ic*j)R(fbkZZer@21nZpl]R_*ZYq)c_Vmrd/WtAKGh)=VbqO=UeZ?1oka!9eR0;8h\6:pBnHVm8C
%?*3AcihAXR7T=!:*R*@k!_f!(3O$ZBN%2j6D"[f$*b-SlH@MuVn[g]+\#UmSn<;.h@3"6*@'eL%ji"j>;7PW)$SPS);67aZHc#4.
%/cL^c^lhYLW_r2I?Rp;>>]q"Reme;`OCQ)l5m]O%mDA]C^*LGH@;)hp[;mAc;5G\A=/#V+NC1;jV61KGWoRK]ErH9Qnp]"DmS/8r
%H,:bQ=G5:2.Qu(lXrC?dhXtfc&2dZ,G*KZ,YF2GG[X!ejJG)$:U6aPP`bFip/a@6*JR:).!KR3ZUQP?M?\tKKZ7.lk66iY]F[BX4
%'N_<Q/m,/OCE3Q?%aLKni,N?#`_PaW.GRQ9kk-UZpNYki1,N5(Rh777?IEuCQc?6=0T,R!gZM)7@\qdScLmj7m<Z1gf@uu;,13f$
%l0E+d\?P*dMZX1-U^Kk5USHW<hsJW0J2d.2mp-sZ-[B[G.G8PQCLpmu)I6CVUTa+@4`+I;l.S<$I9g+MFn9]lhL%hAml,+Rl&ARf
%p.do)aT*2k5_I17*6u>@_M]edbb(e1/^l9M`#W-bAN$R=p*2%W[RIll6#.lICuWK?\UFZ:WN[Ecen6d(_H8Pj]?00G.fNFdB.g2\
%ZsLpDa@W'?lipO;Jp.2F2(hBn9;D(rBK3/f#'65IeZkiHPc<#D824$pEk,No<WFo^KZtn@c$&=c41nE@O:Sp$)7M0a_%M?cQDksM
%3`Kg*g9i`Li0CuFo1Ehu;PS7eaIMWAMnOF$b<KT&+PldeUCWXR:[OTp&lS*8g2O"BU6<NBAn&n=_s!URD4m7/a]ZC8W1UsCrj1H@
%9C.STBh*AE]tfYW>FROo.N'&Ib8fsTNj;<p!5A'0;.B/m:Lcs2HrI6!46jTclA3!GqTjVJZ@3(s5Z-EC]=O-IZVcGd?9,01bauQ/
%m8e_>L=P(8<0@r4=hQpif-l?aoA"Da,^;VUh<s7YW*'iZP:JNU8&a%knQ46(Ih^AF65[jACMgDq1J*W0W3LFO'--\BN12EF?JgqO
%eQ_:s7]ceu7T9+"*$94-T'Btl]hFT,;Rkk65sM<L?d#":l"N<QhfY:,^\@QnNLIRZ7F/<%RtXUC9-Vt!['lF'[SfGRXg+>">.ie/
%ZV!nO@$F"rB&fqs37B]snbq*H1]T"G[Fr^>J'9Gtb\"_PankrDfTup^=`ZhAf&[NsH;puS9%AZkLMdL2FgKf(53nHO:;lVpU<*nF
%Of^IP*HO9T[ZudV3\%rmcFa1D>jI8:^92+$%c=IMft836XYjuhq*[)Q.B2G?_G*dSf'DQc9qpO$b`&$RR<=e=qK1Q-4A;<Gm@05u
%F.%,NIhc`$l,FQ^P+(`=EY(uA?WG^*ekZ&_.40gh':Q2/m&[o_p*SP@\hob+#&/8jEY,[)GtN2B;0.p>2e.3Sc"P>4e<sWuc:R@A
%E64TN]Qo]XA7+WnT[g;b7'Krr'lUX8W*6>'3H3GMqO>dC1dShQONDqt09N8@jnYQs5c<sZVn@SEHeaF+Zj1gj]/nLk?M(o.Ea8^)
%"W/)mOdsln"aV%!QTLFjXrT?0j3!J\lO(Xs(']Z*Rn]#bH,P=`l%\l#Qg=+TlcgBpW-L`SZ7_32s(8KQg`buUL\_QZWSWY<OZFrG
%W1@MhKq.39RI>>i*P\TrA[]\Ef$#Ceq+pPrV7,Q1=#W#=[fEFTRGMDAELq)3pcQ$us7G8Jn`0Ntqn^iMI\lSor,hJ)G3@EPSb^ro
%X-I/&H/EuKEm;5*\FTX<ZT$2$`Q^Ug^0,0W9E+dVod6%\*Ts#&1^i1K-hG@VQ)1\;a",@)(X86-C[29`Za-r`VkL>$[IP[uhefMI
%443J2jls*L+e*n)Ei#n_nc:T2(Y347rD,(ML$rC>cDQBlgj+=SRG6A2S^'Cim^:XScMd_>pZfYEBVo`b]K5=\gO2:Kp-64er'tXC
%2>cA/<g.cd?WNK=f"\:;2RDRfL&%/1qWs.20f28h[JgWZZbl7!I6V(EWIA)7cC_OG:]4($f8P*(:aha$5?=)B5MYFZT[V09Y:!]C
%nE[oO_FAh2:4=A]IQt<RE3I9PpfK)VTpbEIls+8,jM%*h4`q7$Q?+kUK=Up7q/:=)Wt4*kY=@p"cT]"QGIga'(!lANAT$m[o9>_&
%N@.00;7Z^DZ1@Qf3FA>&rc"PcpI@<S\bk:i%cGaWd]6:cRdl\-Hs+SA8e982T"\?Rih-8@[,UsYR`BTS;;*_ec5+[7b#71uo)m4,
%s"O$<D54aG=aa2$75j$cSR%VDnl:2:SB#TQ3O?$&Z$^J>D*E(3_5tMnBCF\5J$o8uDYZZqo:gALmgI\CX>U/JHKIB)LWf8Ag\9RT
%E2oMkcQ7?>6D,FCRtgb#hODBGipq`p4*.#4fSkS-^/?P9!mMQPG;gN<A+&%HZM[n_?[L&mX7L,a\2NZgg&MKZBZrVd[Pi%=StA-1
%MY<Yp09s;erCX+.pDE2Mb.FYk^rjEL]C;ZG"`sD%%Uqj:_;%-J_BDWt+_j2b]MIDY;Jr]-IBIPejRnSA@e&FU]Qa#I?+<&hnU5:j
%28<EVhQ?]Xq=/%d"IdFo#CD4gTqB!gVmSm5mR,k,R+kdtI,@.nXaKl7/01A/S?/n85;lp[T7->0ST;Em@'KOgr,lmmoC;/>_P?[;
%SfK]?]EOB"=r5k9F3d&bJ+/PkGsQF]Bs2Y<\+coQ^,ibsPFIpG[29u)G>qSSY_0AbnaWik:Z[uXleD"%K!G<qMG82sr,$_m!&X7k
%IP+t<^Kt6Mm`A0UY$)5\TBE,s2U)nq-95)02IGMT?^X;@bB"ImhpuG$?Y=H"o%kb[dJ^8lglq.Dn_-'5Zp+BFimI%j[r\u9\!^Oj
%cn"I8K/t`Vh6f!Nl3cm\o*6tZH]M3':=ks6;X+-TcMqGB?XANTQdlUPQ/@"p[P31Fp0*dO/:+u:c/eTTPimSM4:;Pmc%E?/r?]qr
%hMVL9(cK^/AQUUU2cn,![CuQQ]=P@UE'IKHcX)":kLDU\K5m0:f@LA4TD',04qR2)RP-nL;lbU"h_#u5^UMAKq.f:a4h#Y3nNPIm
%H7lAY@VrjYelmR-i.'&>*1oEJ@UC2;]t)Bd@@`Gd`t)O'd,4[KZc'6^+($LX%P>?mZ=gAES36b+r;KpZa>r)&]q6`2]C?s'G4n+$
%KC@?EA`@SJ\U_qH&F-HXjo!fu7:goCKfPW1oq-CK(R*;LZ6d>u:#i1c2Z*-eIRis6qMGD=g[\.5K@0*%K](V?dRNgFpiktoRlB*P
%cahkMY?'b#R/==tr,OY&.,R2g5M1@F2a=\\F1^g&Vt618Of&6@I&0\DI)&C@go+!YQCi)tf)2*!P?IM@lhd4Ni6M9Y,jeV'`TlRm
%rd&1hH=8upU8,]jk5=T2o,.2&;Z`EPTFr+AbTgJ"V3:JK\%?@f_llkH\8#Fe@<o"-\%Js5]*j<5lgWBB)PSbr1B(F,B&X<_&aO;3
%,&RT(m&jhEmf'Q&`"JbOGIFJHnUP]1'53+ib%&G/q:dR[llg2%C?m]DF^1Lae`k8Zd[tN-];h:/3#,U`"<,AQc>4+WFc[uVG-^`m
%SqLC<d^Y_,9?W)9d(NUGeouqh\?lmK)(pU6eZ#&C6;uDt,>W#YSNj*^\EOem3jI+[1sZ@Z$[8%g`DprZh1%1sTHLb)4KbLi7,EmC
%eY/>$o0ja_TWcYm;][RY+>kB>4/5:+X^:UFC!4M;pf&U-dR\(U(;&mWhVFaQ\7m;W9<AhIBD3Q8GF#=GBqKO(QgeuME]pkT;V]7Y
%R#Nf!dKd_pW8=">GCQ?\=f7+PRMD[lieB;"G`U^?(jT9D]d0\CHF`&>k+aO)`Ck^`U$gsU5'?1EO)oXi?J!b0*_(Ka#96r>q%;b(
%+?`LYf>#!Z=BrW43/_5TLDD9I@,X<51PN0#rHn!/<\%Mf=4TuV59@%F9B[41C\rF!-`N$Jm?>)5eloQ%6X;:6/3J7(3oTePUH^e+
%YKItCm]Ck]3#f#l[WanM?GHK%:C\h')!,pUKrpWrYDjc+DQ>;NAp6%PA6LOu26)GT$fBP$QbP_pqrfgQWZNkE9(RC*o%q$eO>&92
%r6\(ZHG&sWUN2Iuor9$Uk!l_a5D$"jFdLT/^j\]S339:7O'->3;Sbj.MCm>M]\3**LE/_c$?URf;]=[b_f?n(.])[0@C[e/0IG9Q
%*#opK>o*"_Z]52&<3qRNZ4?>9c9uOGpaT&XDJ,t1<S]^RKC!GdEP;:Fn2g#$KGGULjkm1fI[kmHo;+mU13*i=a&F?Z'r(\?hWnud
%j1A[bbT%NB3-he4\_9^V6ZmH'\+T_XO?IDYVU8.7Y-U-58tUCcj*2ZYaB-'=cX[t[1EH)FC0.14_Mbag#klr`ATWEdi7EAB`PpZ.
%0Uu?fhKIM_H&W9>r(rd*Mqi2mAIaTir%Lc*caU!@pNJqYBD3H;0OJJ<!9\n*l0R9lkoY*bTuVqDM?LY(@DH%,!r9/]F'tq_+$9!^
%=[]m\C];P(HDg?XVKl[VHsS[LWEs^MdU%BNH0pZ/>`6AroulBBlYEmdDGP$p4:dgnk3kP1*;HAT=8@'p.j-tbcJM5qgBTOFGAh[i
%TLl:Mm!lKURd1Ims/^XUD/<NhX"ToG;<(R'C3s9%rU4VBRY`J7IAP=NIIA`$fmcaK//cd#^7bS;C)i#0)i;_H0(L[e:-3B]oC&/m
%]%5j3f3GiXH6N9lkPWD%Ebqk[c*&tl^3[?hpsH_VXD8mdT_WU;`7<00qVe22V`7_(AbkP*D.Wb'gk3Sp\_RT`_sfaMH\,=+EHSp!
%.(j:Wr[*kQQ#?#k4_)ud-[4+<[uDsmpOGXUq.p9&A@pm"m(\Mn4i(tDemeT&[F2.$jF15+]OSTXqltIH8e#](U>C*<5a\ThCkGXW
%\k4B/AoIu,K(VV=gTB8s"1-3eq=O@7EhRk%c79Nt]aO!#F/,u9nfA1:L&.?Q=`tXd[r)/E],5sC&BRnbgjYEiAp6qIFLO`N#W0G9
%^3q)N=ZcOBo,5,hEbFK(rp+AO_G4V+"!6gbT7P)i2c'^LX;sJ"<9_tMLjsn$'440&jp<M6rr/CFh/7M`W;a*9(9N#@3][D'AI3Y.
%nY<M?SFK+pR18$S/)1Y;5EPU+HRm:ch`iN*S6%o;h%(U6\Ta+D:NAODF(fg2R!J5@c_$We7T+eG!V>qT@H6tAA(3be#R,JGnntZ!
%#C@!Ln#dbhHZ2e@L+1;IKDY7o=0ms"8`f2U!E(RGB$Po^_RiI]pNKD[[-E0Dh.a%:4nao"nda:;i\:CTjhq$t.rKYHQMKU%f@jKe
%6%X:SZ3ssq*o8V05/13c3b"4EIbcs?O,k)-&)Y&$?#Mp9?9!3*\C]ZMnD$$;B'Dteo,mq85!8PrQBns3Te&W>+.\POD=R#8;Is^Z
%rlG:$l'f.gGQ#^Co@DrWM"a&E2HOSV?5$kmRo<@+SpMPdXM/!=nGEoMaOs)Dc=]tQJ*asCYP^qiNDc%(Kc/afU^)!jdUO<'YYebS
%hUD->0:*'s9t-l?b<gZkGGfDmqlRS9\U33;qKB;f[:^HO?A(^^K=&*f03s6LNh;]LXi7^".nf\rUfoC!>Fo,7/;.m$cmq-V9DNG`
%3;iJ\m8MM\E+qq^mu<*LTF6-1aOO(q*oj&=P>&&Hd@Yo1\e!VC^6'P'B2:\&(R9Yd\[B,@+7>4SH!!%Tf0ge,>XSAbo%s4Xm`W`K
%lH75obPP)[NEl8>/Ctgep\=X.LV8],qJr9pkRR+DHZrO,pS3q;i1b3^Y07s3JBdhUedH/*qc%d@XT*FpZM^Hnk'ZTbs5G?IRie8g
%%cZ$EJSVDGdDc+qB]T&CPn1o^m6p'^]N=JeG,N!WZM=.j=[I1bJ*hN*f5%F-F;+,t+#u)roB.5,]9_A`ouUq?op_E<a@X[ubH5sH
%jk"+N0RpID[f#@gb^6#(K-0p\X_7'%U3Ur!`7`fk;P9?"=^ZR$%-VYW:C>-h%Bp(sj7C2igh;04p0qY4cKgb8]s"QTEP7M%6+8#Y
%d?@(F3:q3=p%Z)Rfga,u6&i]NpFWFPlh<VmY8ERPG$9.\CaK4s,P9W0>Pdig):uL-5.a\K7g&Aoj;&gFdIL?q,hd;[)_jN'Z6.CV
%$J`YL4t'&W^?;rK]FEHeo<X_DB,C<*Ro3rjn>lI40p+qHrfd*C]sF#G(LFjDQ=9K#L9RVW?e;EnSjM`1qIXTHjOU!gL$YQUoCXg#
%n%Mq[FZA%!eT8d;f/*T9s#RZmN`f2YN0D4>F#M+j]a&bg[VQcQbM$41!FigWd=Ubu=3DK4oC[;m>2P:HdQtc&XLu4@ToeI'W9AM#
%9eQuWWc\0;<0"MeY<KWl9G!#R0DVW_Eh=ll3=tlQAAWiO7b4iN\8]+9LrYtV<P3VQaN.G`(Z-juq$BYdM"7=K,@gOX;SSPJ4oUPD
%(*brj\;,i&7W,-<fdb3ar?s0"lDu"M]1_!W1Cr&/GJ,Y;l.g!SY6@!@05D[p?LDWm3PBN^rnmfZpYWZEMUY!DGQ[kj/P?J3c1Fji
%QM/qm[N<`1*.D2WL\L-Em)R`PU$;5dYGS"]\Fofcjm)];Uk4'+[b^7.+R\>5X)HV,D^8`QSi&`d*Cbme'1__;p>)JGZs_`SWSC]_
%(0t!MXWLT9Gec#HlAGW3A1\V1BX[CQI:7Qte\[)AoDNrU.9_+<%\qm+P\g3LO)n2PM*jK\7GY&OSI:H1:(e1kf^G_^`L!5#er?Nd
%G1=%GM!L*0:D+u51M3@$oQ'j`_d-*YGLtGJ:4Uu@gO&%uAF,Fi9J_6#_Af/AI1):(jYsa+q%[#$PK1)6Ar&q.9's6G\R6S-(KEom
%&s7`mW^V3rXBbH_]`7OGn=Qnu>Wr$j^5F>jh3I)Gp=I1If?8BuF6C`c:et:K5$2#lqXP[a;ZGRC@Eng#!Rq'j#%IB&,.CKnpUaOJ
%n`*75dDrkQf<9"`rd4I!?JJNa!Gm8VpC>q8FPH3>>CB[7EP9!-oBealhQn;bf>((+r*t/#]d,u`o;\0P.J>#LXXQ0Kp4KoR/,n?+
%"X?9.^9%1Cjn^a4l5030/p'4MMretnDp^$uhTf1=be4f75CKWLg9gDkru\#KrHct"s7W:;M@gg=a`q!fc0m["(s)q?-qb;YaRPIJ
%I9?IBZanf;8MfLM>uc?]c:KK4i\nC5r;_02f/Ck3_$mQXGO<[WTsXdRhKsaU1O\68b4eUIr:tf.RhKH2gHN][$_s+GQJZ!o*2tc%
%q1m.?Ku]H+V<.N*fD/Z*^Oc&@W8M?&f>`-bFgJ7e86!>]d'</<gt(eXGj]luJ2:VVp$(:<O;61+V;ct&4.<ZTf"TJ3YD)Ylg=MC`
%mt(3a*;%&Hk.T[Kr*>]7k5$1O<keR3[8^K`H&pbYRn&MhIVn-$*#\+0h:V0](O3:c&?,I)VmV52i$@dXgC"<#W-k.#amBh3O1cX=
%MpJ#I"[*7Ef<X)c?sLlb4MP#[>!..8pej,^QQWcI+u90a#+]+&L]),`FJZWHfVkt@?W$t7leNZWen8@Q"'h>_:\47t'QeWI]pM;h
%cpi00NqV&Z%\)g"q@b=l0?`G@<mHq*+h:t$P.$?j[sr"0Xn_;\I'32@cM%+Dfe4+YME_HOmMm1:%][Y^^FjA>^"i,n5JB@6d7!;p
%3s*5)hfr_*K,F9r8'o*p8O'u!GjgPke<1alcE4dJ$XreSc,3lACT`qo]nEEB5Ie3F^0gbb5<RUh9,d[#&q0W0YIV?q;@@jIJ'U1G
%GMTNH"a\+X,@NZXIeht3^3`gl]Z[L<-EH?Zarp3c1-SO&_`RG"mRL'aZ1*bD*_8pe0'4G-(LB_(2hS+(n-P'R-IVY9D*(LIBM.PX
%1Lk"o0S:eiiBKfO7H!=UJ,_<?R#a"l22X-42-R]AS\3i.A/6u-LO\!s+X$Am)M`kA5(8t'H[(?\&h.,Ha$9V$T=4Ura)108603pH
%\i0O0-%Rmi++O&li)r8AE%t'4-<IQ":S_Q0Q:4IOl*s2"gb=/UA\28,[%&7K)(%1MLN_gM^gYeJ49F8?f+#D%Ta%sK+=FNJ"M%[i
%a&t2l-YimWR42!I3u^58K4$WR\?:mk%b,"c#kObAL;gCD#qUa`g!C46.1Wb3Q476Fb'KY;Qr_f.9e:.Ld#^\mmAt6[fXPL&_O"(k
%a-BhG2K4V*Md)c=`LUgQg2;-)+R90-'/pC?$B*Y>f!Oh;$Pd'0m<B%lg%#\d6?`kd*kDqe3,pi-:5Et$]7=:Y-DQ<HlS-P*>cJDd
%E]mFXKXI\;g.p4s^,nV=i7S*,@*he2Tc0!Z!P-!f:h]oVJOOtoTQ0>'mGMf-e2ZTO!P0I;dku,n**Dhu'o0e'e&.k@:=_-%.Lu(_
%@Q,;dlXB#[C<4X\<e0RI);h3<\lm4N-,SmJiqt6mYgunWOH47h\8[H3o+;8P$5k#j",,ji0JX[[XK,tXaa$pQV@CN[;B)40joT/1
%j2#t([,hQ2^gmacqQMu1`Y$a$`9uARQS]U_J\^f[<o8L##L_BQ0FT@KE&rB6pjaanemBiApL+a1AmBt(.ob,E<=Q2%^0reLY_d+G
%/?ml`mq$pjGBoJSk]62)W%,a"!`AgB3ingG@'8sfN+^h$A-"5K%A6#9-WCptkTXbL^fOc-KXh-/AcST]@7Y)TG[N?6G(KE>goRaK
%*%;>-k[9S[$^fiS(qLYWBqScL$U@'i7LineAd0GE9Ge7:S/GilR/j#0]MWBN"V-%oCr/q+9nc4*)$1Ns;h.nVhsg>pi[-3Wgi^fL
%>jcq%=>EB3AMb8GXK`Z4$:4.:JG*@^`:F!S$>;/eoahl\@F./)[8%+*3[t7NqQSJ@FAuEN?+%"4:Sp+i*)ofO)3SKNg!HJ<@_-:Z
%![<^[FpC#ZYn#65-%h1.`@Vo21/?<6?&@$=_D5=`#9cbVo-f.Zp+m.[4Q%\e)YPOtEWg_;,I"ZYh(Xr0R8c,h!)4%2!!E+9)Sh#R
%#:It#,':MKg[:.R<5@;A1h7C&%-ZAcU`g<\n;CG9M%t<-QW]U50EDZ9""3TJ:S+CJSg/Ue0cchuh"X8Z!&H4&G")p?6aY5HL0Ko^
%6EjE=HoHTo13j.aCBVZ@"i<P*%/_%l"D5[6ou40J*?ZnT4G(+Yj=o8s5cSZ7GmXW/d.*qdm4*eb[d"AZI"V[E+'%&j?os]PJb;Pq
%PZ*Io-@S@"]<M7DE?Hou-6?sqBnDH`3P=K:P?%td<#Pf2"<3!I[Xaf0f_5Z+eYP!(+iltl2l[1R`lDo@QA'\2@Mhe3-2[mJ-EJYu
%R0?du3'*]6]4,Aa,,_3h5aXhMd'V%cEF8)K'6q2\I*Vk3m>skoTn7qRQu=2dG`BsUT6Lm`bQ(WI64Kpc`9_1C+eIE:^c=Zk&/bP:
%'a96sEIhYRSOB#=eq=GE@AJ7O;K5f?(T/%bZnE$P\=R(h4u,cafrcK3*c=5\*3/"PF"GusQ3YnU&ofq1l!`2W5kp!=ZB3Y-8qWq'
%o`b0X=iei=%nXbg(p52\L50LS;5PR26)EB;AfbRuKJtdoWe>+(Zle:F#D-UIRp#drM=+;t5X%P:#\L<:UZ)JR,j6^7CmlJ*'X\1^
%+_aYQV9h*`+Je]2b`=,,A/1>eUTR#F5qN,H%@6^`E?H;e<;crWp3`YqW%)n/*F6WkEJu_m#?%J]H]HUt'Eb;>V-t?%E?c=-U0#\%
%e_u@+0cdmFW#i1t$oQ=>d=gAE]G.LpH4)Vu$:RP_WB(2Nm\1&)Tc+fAJrFcpqBFqPUlQYB7V5bccHCS:fHE7A"#>/c2Np&7:r6*`
%h;l;gan5_'4;L:"Y*Vkp"bmdJ_#hh7'qQ9V/5VGK,j/;]e1I=V8*1g=-KHT[3X$NTi;!Y'Ks<0:+XfuH@T6.qHj%&LYs>n+/Pm$)
%QAmc-(54W/PiiNZX>;$L+lR8uYh$I6Z0S2\+O$/iJmE8paZu/%b=]@CLBG"qILe-#?f45Q70MY-C;n/Sib<s`M_Q7*^>eQ?5pVf$
%\.$E!J8pEsK4(?$RLc#.Y>e)_#WB!OR'[Qn(^UJ+olLRaC0i%oXZ'3FE/G*cGTie:*<Ai2Z,`r1Mo1qAi[u_)e<3V=%#@-u3cIOH
%]$O(o%dq!53.Ro[5>Iak8jfs=$,h]E%3>+[g=60=#4(76RjQPq.,(\@q!-:*!fVC=1d[D*8qZD`Ms8oPI=Uaf?l&'i*sgCt//#b"
%f#!$>N<R:(*s]2D8NX#Zdh6IJgD2J7:_9='hrO=;]Oh.P>7k:PTK!aP's5T9pGm?9OthPgMYcLeTX'j`:c9jV<:XlI3p]GD_LTTP
%QH\kcT,U,-bKL&)h5-A>Tkep.E=ao/&8Tc`DP"%t!]IW,.$ARd+]tA<7FRS@ibj??@*ob.jY3o1m&(L(`=R7n8R4(d56D5TH>%#"
%`<6aNZEi)498&2EJ2IA`$Ns-MQ\>bOCIhQtj=E,#a>sANSdlFY,MpqD=GNR;"7ZtI#D7pd<=@>;??/k#L^'h<.$h*=+bN?a!t9#P
%U11@D$l4&[8P(^%QkHV:WUD0I;ZS?/#\IdbU9T5%826'HV2<2Y8.(B<b.Guj#8#D2[>#l[^hQm0"=#O<:i/N9Wb;[EQk$ZLP78$V
%N^Sg;-Bg,sC2=Y0RPZ(1*M80+`e4c/*@^:G$`9"(%p;OiOG8Fb"h5H7(DIYh)O3PE@bW!@m..uq&h.:([_PTk<G=Xr;J^o`#/J/)
%iE$RlC,8MW8tfIje&.h\P=1KNW5IVK3p2m+Zlu"U0]/cm\9<u6UfJk`$#L@M_0TL3I/ZQ<%[T)mhS_`3SId.7&-bFiSO_1t&s$$n
%*_0Hc8_+E(.V^pc8?GDb//iNqTI(^B&0^lJGg&;G!4.9mjB6XgP@1>f8E7'_WV\s369;X5,kf@=JU.agdB_^B9siOQ3Jc<%#T!"6
%g@fpRA\]SD7=qSZZ2jX4Lf&\b$;HMTb"BAs;qqV.R@H=DlBt!opBqV*+QVLT/14U$N/E?)/R7Xg5\BDfA.?N)i8Uofqa-fh`='LE
%#am)XA3gHP.Q\]\'_=HK'AuL!:nVqU*KUg4bYjMod_Jje6:_k,>TOQ(3JbYI%W2nZ+O'>>o$+0Jp(A)Ol9)Tkj)G^(-5c%pfQlTp
%W)8>abHP)Q!'5`sLs7/30PTZ8V'8tn1*Zn/*u__cgpT`^XB/eD=V#%4-uitfW2D@K##q(.-^40Z`Hdi`S=%c[i_61$frd*I!GmEg
%g5ZVNiXs["HJ:bfC*]jDMM"#'jUE.&a@J[c8<+7;(>U'CQAYMA_fV0]b=(%$4:$27AWtOFJk)&8J>k$CG`HbN`OTi[gP8lW2T4@p
%F;1@Efc[/&`nVAG6oIi;NDQV%TrWo^W83>XOSL_`J31j[\Uc,Ug2N;9)#A"$%9ltL!+TY'H>m].^8-*aB`fWFCi&;JWUT,^&k(f%
%+h<hFWsQ1$a%^P@Ol)1I4pWJZ-AS9Om>+[M]l%<J,+^GUN*r;Q!J_^o+Vm"J"+_X`DGTn4$BGU$Q9)'E>SmpQ"US6]m_i*L^&93M
%-RJtXO#.kH&???r_dIf&ib<N;+a-@m2@rH;H\FBHF`J7UCCN4g76XQ+Ef+j?m"2"lTT?=dSVfMi.IJ&=#icsL6Xk0LVqVoP'7.&,
%nsn-7V.1!WIBt;f<!7t"SI-rK2"ps'lmjFh><Z.,kl_8"A(i;'T*njX/+^^RB:rZYgrL8m"(=sK1W^q4X5j%Kf>e11a1d@:J<1gD
%MaQn9k!]KH(D2T:;Q/WO=;u/E\0)eY"IOc'(61&BKm0MIk8Pa8!qN*):2G$G#SBQa6H/1\ap(I!/?9U/8p2+2ee\\.,Gn3\6rSu&
%%-4lGO1CfXZ"ob7FN:Vh#\ATKN55$!+U_u=71Gas<0U?:`Q)ir$Pht54,N-">TAD'djf)sdQ37lRS&7TaKON!EB?u`&\tJuj'e%Z
%1/Lmn5%NUALu<P!G7blX$+Z`Z6[hNfh"'+BL0f$nN.3tInsKb\'-gP4B6ZblJJ_iE61Dfg>S!d<P$#Sb5nR+qgS3Cj<+Ep+,H=As
%k!rD0*J(1JPo7ap<6CH5D4ne1M&)@3MjU#K/'"q;YhKn#VD=@^25sPE"#r324d^?T6<hV='JoCO";E3t34@i[-).*,e/e^_na+Qn
%4gdt<V)1*[e**1<E9'Ou60-B;Z83Js3V^ILWAL6q&Ie=dQmAn"eCbpqIFG!H%)i7oRR:Qnn,fEnO^"'P(BAg)\V+@$>_MBf@`ejf
%k5`S#lk*W[O9gA2fed$V&f![9IH\Hm[Z)/!N(BZ\/o,tHVQ;ZhabpLaZ3Ude21:"RGaoJ8!MbhE,oBkJkTki[p43d-fJ",$$XfR[
%Ds.bJFej:MH,7s$7uB,qJ;Ho1?"N4N#8lrJ<nMp/L2qkL?p%MbL%B9!*jpYP0+^nj)3Q,2_q9j#Y=r.#%2;$\L1nU.ba#_,*u6I^
%%3;g'+V8arTh8+'L>nj\W6V$88)d&pfm?7Q&lffTW#cDha6F[be.KN9QTQSC&WAaeF\0,Q"*V9fT$.H1H7plllgK)VO.6\f[b=$M
%(XIjgB5ci='rN+*:%k+2MNZ=^+'2$L9JE.mf:m>,/fjCg4I5,@pHmsA5ee^&5Ct=;IqPY]305p_FI.=i@JWSjG>MEcOK4gnh"]eL
%^iiu8A]YH:;ml!PHqY&)6OlW.:%.nX\>c8UT"RcU/TlGq>.E\P>^GoCThH%ET/reY"AluBE8Jr;`VQWfnI)&:<Q`^YK=5Bj7W'Vl
%MT(]J'<4#e*L#M.#Z(@p!4,':#F-i:>M'O%&$X^`Di:e?@(t(KaLCA)l`R;T;Hoq<^i6oJ#(VF/G5aa'7H_R`S:FfF;.,KgCnh6,
%]arUAO[Z\i.%rCd_ruW4#SA"gR:BHK$H.@uPe)C:^lXiqqaAKnVA8ZI,2pYX"IM5n"gFtR8SG2mZjk@_c^`So=a;B^3/oXp"_A>^
%a7p.9&WiUFT`UVPYp.762VE)C>DD]c"#LeR+Ce!b!goa1<gG.O";@[@*o`q'>c$Ff;mDm3YudMNj\-/C+#7#5L)oo[&6f.VWs7Y'
%B?MnLO`6;mh+Ti2idP'g69pp%K83hu%igK`X!"U[*(MJ;1dHU+.7+?]DDU0>6KJ:U3i-qOG64bR'SCuNih23a:t5lOPE5uD9_<QJ
%Ng;Dnb%V?W]DD`J==IV&=35bA8OG8.VAs:_N/]n]K/RE&dJ_CS8=`e&ks0M8e/:6^`&3SO"hoWp0OL6UL.j<<pZ-kVO>%0]A5Qg/
%Ajh;[qr1Z^28ThtO4PAbngn\gPB@4aH+^6fZigs".!=2s''kA41NIk\Y]#8(')$rq;&P:g,,R[hqN[AYJ?5IfN2@1q'`)jC:aK@6
%\Fq8#@B(UT-/bF5K!BY?6S9@C/dD`K,1sb_"#daE8$B&RZ3#Ss?K@;;Eu8bM9nDlOMkLPFW`-dZd'nl^)Sm[k-o@<s=/C2!HU9E4
%)?H_JAI&ZGZm%'(19nWL`'0mFa6XerE/Prjf[Kr&-&eTn@+e@i:gmlp18eg$fRhiA&"VGfN("N58:kAPMR.N\+L`n1#%BA,Ui"Lm
%X<9._Z$VfV=/QC=Z]d%q;+^^OQq2A"P)&)%hSkJT"(DCsKa9B^VE(5<b^>#I[iN-f,_ES:-di=;_@J4o7JWX_`hF2V`"Fb78tFZ;
%fG1.g>m@+W@l0VCB<%,k"2H0s&]:Zro]+M>'n6H/<@oXHC#BR'd`bL$8Rda.V12V4i!&/[6=+&dAJdbtBR3\$1-7n.:koe+;5+,I
%ig*sb["O/<W^pCM;8HND[[B5tAgdp/:CI[Z+Qj6CU*=.KXGe.c37qG!UG=dGiW^ob+FDaTJp=Zb>[1D335`V*dJ67h(JPiL8NRb,
%3;F;.jqPoeeHm6RA/5$,M3hU@Y>_JJ"pFd@`%JjbUaD4"8)/LA.?>n\*SS`I;9G'PBW)SAl4F7l!f1Hf,lKR[TL@`Q:msP!+>;BT
%9mFNP&8#'#,GmN4-*Tu>,gf7(`j:q&@0Ropcnj.5,REQ-0FEVT9LcGRkQ#$D)_.^4?;H1t)jF'Ld[YDQN8t]Ea&N%"oZ`2*,AGHk
%*eW[A9.O'a3_1qW#!e1U^-b\Y`MYoL%PW9NAq[6D&spR6@M5hG!SN;0ZW/t0`jd4@dM`3ik(s-_M!>S;2]$/tU.GI2,X4-Y$%iDk
%X-O*!7,L!\78m>.m.7KYFc#.#,[.CI3m-NBWg$#Thc/!!+D'7)8QDe9UI/5mX2>GN;XbjF$o-5XAOBe$"$s=XNls;F9k>g/!+D[0
%s-,.8Sml!4Bh_573Wh6ZK/bGO$PEP/XWt:7NDOUpdM(-g=X>gonZ\k"ll"PX/iG3(:)/Y#p.>!Gmg61PD'YGh%id#>'Mq5`:/ku7
%f_[+U,co+JD3Hq+P(Kmj@Xoq>7]_+\%]WGK7BRMoVh?[;B,!=[+l[6'%CNm2mr^Oo+bp%7A8\\:$cRh-+[9Bk!lOZOT1/kHTcM,e
%-3:7b``Nf\2IkPE2Lq1cAfN7YTm39:6D/IXo0uVH#<T$md2YDB2e%q]AII,9;GriNamLWc'R=M`QkdUW$I'`6;TI/i'jDfXEd*VS
%MVS90127@iKQJ>HPe_4TN2K%6>U,3W#dn$mhgo1!r=B7Pko^e.GYi?q+XrDLdogj,0o21slmp\BBlasj\Zj#+6:$[N2t6IXM$oM1
%85:_`(m#.ng:'[);B(WiHp[4:@T!m@B!]6-k!2hFWSAesKI`3-b<iWe1[gJO.?)UHR-%7h!SEJ-X2E5$JosOS_0tCalKhSNbU%FB
%8Ojf`2WV17%I$]>%"t-<.W1bL4,dl%PJNK94n;<un<F<bfkEtlLlW$+S^!``$'5$6m%9LZFta6AUKpV;#qoi:'@=&\2T7^,a[8g3
%G3,q`NFL?E`:K_Y@94%"<T?bG?>Oe[&PP$6`DO;J'U=@^<QXjlMu%.,5V%1f7,p"h9f$*G7*=a+\O=A274j<D!Q3Dr/]MgF<DX6R
%MGZ^:dPtRJ5okt^aaZu*#r1#PMWNi@@UiUP8"Yq<JZMX6'p8f)XGT(j:1,U2Obe&*Tg!9jEKk&9CZ@TOB_!4#K9.:6L_S2bPUnGn
%KN9e=Rd>8a+CaPT%i\_87CE?+.;P(DX^k2LG#pCk<89Ak+J$_.&mU$glodiNQu-kS#@Wc'LjkIGq'f>Pd$W,oLamoe<rqR:G.]hP
%3?P&JW2LR._r\cUlC`*'XO?3r9JM4!8_TX^GYm-mp:/3H[IAtt_reJ1$Sbh:OEo1+.bYZ\:aG2H259*57SZ:%C/BYnYP,1H;>]_#
%0\N/?\tD\cM]Kl.5Y[F?@AkHEZGX7Y]LJispm,T2V!ek#(m_!d?-(N*E%b)0/)#.lM@uS5GYB-Mb\hsP!>)@cd%nqa!sK3>^?Bd[
%dpIX![nFa#.h6KN/.AI2C$1(=9$,Tj9@=<LfDmgp,4C=*6)_N^MCZt]:2Yku<N\<!4TP"?&LHMo,KU9H00ud:aLWJC@&R@]:1p`Z
%i#U%U8L'fP;jd]k`T`6g2'eanf+DI$.$@9/8JaIJ5Zc286:b]rO6Dsfh5+eF1"bFe6"2Kh5YoAPSV:=)-lC?*hs7dpH)h-o8Bi-6
%c7(jo\jT"$*`EZfe>X`O:?FMNVoWP'3RX'1gMoI>@$eY5H`mn0c-66L9Q<l-'L+Tl&-2G"(e-J@mK%utC#dlo`Wi[.nV$)0AV?t6
%C(o#u4E=RYT[^o,MYBCWM:3M.hP0reJBTh&9ZA<,P%7-dW.p.;#4[Y6d>=.b(kPEO(@M9c"GarnNVa@P9e\*+8:?EV<WF[p`s@s\
%M?$@uf'%L<HmMnXF9@R-M7s(Lj<@dCgM0D(.#$(GG+_ZWoY./$DYW=UWe@="XT.4?Gia=>JhUm+<;Z$g30:-*o[GbJ.1Yr0Co>1Z
%I>JR:Yee_iFPIR>ljE+?;!h_!S5KbOAWd-%EFc":iY+#"6G;"o7aDMS&n!1MLm05u(C9.("f?8'!2FWV9Cs?p9n7Mddja\SL@ndt
%*:]U/BrqXS.hf,:0mTKJ+'XsZ64gpJ#:)"'o[AW"?rF+KW)'A+TR%T/7C@<GDH%jKkWQYJ8I)%*6:I`m4/39f=kfYDRC*0FjcZ&K
%,nXW+88F2nl4fVnB`dna0f6bESH+#l@SRm5<?qY!Z-sm2.u(jBbK%jchbEI1&tUa6#'"H+JSgSCJa4h?0!l@AiP?aRM$JXTH3L#M
%9?5['Al]1)a$62r]5#[&^0:B[;eta>\l,K&?9k#?Se5=L+]RCP+pNtF@7nPG,7[3D.6t@s!G4)'i8=Vt*ic3V$r"W>6&%oQM@gLB
%*\iM38eD@\NY$#Ig]lJ\geUlU.:s3p6XcsS(Z1=I&-o5`PriAU+*hZ?:Yk"qRoB*SUVc7LP_+8e%)X-++GZ_X;h<&LAIAe?.ecAj
%fX(qJ4N<U6)N=JWIh@6;`tu'cpjt)1"U)^c?N:8PZlgLe@0oO97Aqn:@L"QE=W@X&#/$ta@saN#Ilt[n&@G3l614i\'g/;Q^bAa4
%8Fm282*r,HkTW'KLK$kP%C,[VL4BuiNfFKUr2:pjNC/BpkVWL1'ls]^LSAc5R$^#36J*mrCf=%SSe1C]iE$?[+L!Ok>K)h)EL.q'
%<:6d=CdS\,(t0h(-M@T@-Nl6b3#u5KVPsX2@u)gI;g:$`,JJ,+Qm#Ys7eKcOOY7Jn5Sk2LoVb0a;FFS/=EgR&,U$Yj?2VZjZ42?'
%8RZ"+:M-"1L7B@LgN&-NTSFM2jafg&FXjeD2<dMs<YLHF'GBIqUGHS8g$4#$#@DKJ%Vm6Kg/B[u"m%]jT:uA19E]&iV@Y?UUH&r#
%ce+Xrai2M"4`[SW7,?oh6kN7?rIQXc@!n>M-lCia6(%"H`"QJgGq[9tb!"`l-q=?%!+rImM^$a)r]jR5GgK;'5D&,7#D,go#7Xp]
%\t][(`,iRN0Ma=+R";4hI%oq,f$a3d;#W_Sn6D:(BL+`>3&X<O1IIa-N\`NA&t+!@OGK3/.\PouM*`@m[Rc"'r<$FtBeWhk1A.N>
%8Bu@rd0%r"a-C[bO0<R9=Mbb,npkjs\fu#JaPf.rgYebQF@7a%'$[9\#H!4Y<KsZhBh/pandk7E-*3YF'^Et"&us1[h01jXee=At
%U%1W+$4pc+c*TOX>2YMF?.K1`WOMrld\<F6KH4,3b6[ajR5,qWZJYe,i!hA9fF$HSTfGGnb9]J16?RVrJTRbbAa'>f%Wk)M5[fdM
%*LJ"-"rE=X)FNipJr'qhGKDR7n3Bf]k_:K$FS6sG$_?&9!he6=j1T>fV$A^9=?oi.C/&*`-Ol#nVLbJmc9'$B:O4.B?$RPc41?3o
%n4>\&nl7%icAW+.KJsmNk6>(3e9T#tn3frR$KQpYT#V.A0`iLeN(kR)9jAp0k)3FHQ"X\.Oh7!8'<lEa%/()#&7Z:e`9[jV''RV#
%U3;9$E-uaMraR"[HFX#O;'"e_j>QKi7TID:hU`!a.XV7nq0!%;`cLLfW?=,8P.C[B-.@U,'Dk.05TmP.nZ5kqMd\,M(;u`+U+cZ]
%I!D]J"U`!!5_9A2AP'90RUPme5VPW&6jG^-ZUC0T42J.gX2]/GjP`Wfh^RqH0cW`']VrAqXVAIa=6::4k$T\tJCenq0VtA(O?sdZ
%5PEU2j5EXU+FkJ$G^/8,<n%Y^cBU(OV)&`N'm:HCIcI2-*Za!""dS^.+1,F)<X>1m?jVGT1E$tP5eZnlpde!E+KueG0Oc2^@1'<5
%lM<D%n\KMcP)d*[K6(KX$O>Z)-5Kc>cZ/$_5M^i4="MX0LR!Ot2K$Hj4'n.[$"0^44mGcGo\Ju?5`DbAmHlD?$V-`FobN)2m)5X_
%$q2iA6PUU]HK)r\._V596KRIP=lSTK%!oR;30OqEfV9#l'4%M+XtgcPpo4B9X,u87>:%#%b#gCC#O2XQ`o,5&-\5FHV>),j!-*AV
%<?jk+[Wm'DR"`D<-r-!rl*<?F+j?N.jCPVo8uUMG6tLOs0O?Z-&^o3Y`jMP6+^1aYh1SC@+(9Q3!:S,[/nWJb!o,/))9#'m9+8?`
%BbFN/Zjh<QKOm14D%ZYi[>3(F&54\WMB_)_8]6.7Op?S2&M:@O/A<W,ns4'63kPnHaXC2T;!I%rTCD>EWKj1^C%N7a7U(F)5gR:i
%N9).UZM;8_3]c@KQnh\k]T,<LGbt2X,,e;?:nG^fX96!8`OskO@L"fs.:A#r+u!Bb`YoO9F@k1_=#&cg[N\'6BblB,T7f\VpZX48
%YNE6RYJalI%36;4>`iP`(jfd!PnZ%`Whakb_P?l+0(+R^JqV-9!BsQ$8fOMqAjR>Q-JY8cH5HiR3Yh0fl<:>:Y:C/6L%u\o.SG'j
%X)S=uWl'i,Srtd6.@:!S"J[AZ6KO+I'TXaA;XS?uVegelJO`<>2e#\CU@]lGi`!+-"QlhAV:k"MicIlo5q:tp,sQk<#bu+e18%39
%:MZ?_&jK(tl_6'=%M1An5_AkM<B3m']$0M6kcQ54B6U-o7JY)tEoa2BN%noL2@YQt]\s0^YZL??QK7HY/+UEcB#Tgnp^1$(Oue')
%U1WDbT+c9d^<K7J@4d[.Sf0`F&^l]UkHGZ%c:=,5\mNUH5s;qL9[1a9]0V#i=b+p(d?&QCiX(eC/h+1rqDj8PZPA*HiHhZFVU3iA
%SKBJe'GprXT"<t/WKJoaiLLFs9!#u06XS]`?o$^,_O`.37G83H;OF_<N(XjLpViJ1%&#G*T>U:_Xh0I.n2T-A"co0n<'69:l!u`b
%l5I2e=GQVk(RH.Oo<)5miY#;7Xn+*=Q6k>:Oh4>8BA3(mN.bCGA$DkE#o*p.frc1FHl8>a?<pR,iaG>68XoifXJ713DM`Hd](ROn
%,bfjJ#;IGkpGrWt$\b[\@p\==07%#VHmZ45cp'h?).R@i6adV7;RHpYq2RP5*'*e-Jh+2Ed!\(c[<7T@/r/K)DDbpupH+`&nJ)89
%P=)l`L(?20XE^.i=!d>Z8AP^&"0kOF`J@oBVhHf>`sC`5(HruSLluCk!'%Z6Ta]1@'FoX\FiZnJoR$hV%h]eTpf[N<#-g'`YC-^Q
%jEFEgB6NA[,'9W:QK==RP[:L)h^072Y,.`7EFb'50QV2\^EpZD7(0Q!JLq4O$O%<geHgKELRC:DPq:E9obJn/F=+bH'V"Z,egQdd
%hu)a&Gl0;u]bJBLSBGN0HAb;KYfcm>dO`\cKL-M-#!PX)'<aMA#ih+#F[Sl`-&E_=F$*,L.k1LM+YQ"*UJPd,i?Mt4n;_.;9kK8B
%UXFCZMU+ddT.(ghY0p+.G!,;S=Ioja^e.=M#cr(u7p656/S69@=*FKS$(euPSi/^Nk,604`8W/kr7H+fkY+iLY]-L5bZ,3D0,P6o
%'t61CQ&<b]0R<aoH(*`JRP4l2'm"2]N+'n2L(jF9e6O-=_UrMp5$@E>:k:#"kSg9j.eHCRM^NVjW`'`7HYROT3h0P3$=(<k7daTs
%F`%BR$6T/;4h7P,Tf$GEishXBTpsV6BW-PAgJP.dd9@K[RD;b?@1NNHWskP:bdud6-P_lGPd;Q<1j(8hWYcZ@4=e2QF2_!oWYaJX
%;]Vjj<lY_cWQ.T/;tT]]BZ48D!*Oh4l<"3sI$0\)!;gS$dl@QG1P;3d=U[dBn=kW1EZ$nX5D"UZEB[/P/U<*Z@7$?'To<<@2,k8m
%i5hI*/hV@oW49KCCY0VP87sMj/)+as8i(@$#hk$.Cfn@I9\lN=#AH#>F@<<2d%cZgO$W67CT*R,"-3?BUFY?+[Lml-?$YOc@!q$I
%Fl*##aaHZRULHR1&GT]\#<`5)WF4,+QWDmt(N1"80N4M5o["I5'?AtK#Bp$RV9='QW)>etYplK38D*%5FrAa@)*gJ'.-Rn>-`<%=
%>X>Q$RP?=6-16OrX>^<S4K1m?KM$??kB:/3`&CCnp]hLL_!eFL%TYsEN:E02iH`-T#Gr-$@rr:+9TpMSAWNoGDjSDG[PCD0B1K1N
%P0h$9^0?!-eVK:Bir]tu9?`#15J7IZnL,Lb`,gnKs-9KmRD+'*@c]OPV77lo59'&U0Q$YmJf=.66os8tBdpiF`ARg&fHrfPb-'bI
%Trd!^J]4l3m%2%;FbOE^OofQInT2BU*#rG1CM38B0CPT"K'IeWXlAS60-S*jM:Y_ZeJsCAcG_q-&e!dBC[..$M$FcdHm(@8XGKTN
%)r]EmnMoKA]/gk8eVtr6JY>V2IY!lV7Y,lOM4PfTGt4XF[H%Wl4'jqs;e8G"GWoC[g<Kf?JV;CS-AjK;<Y"3),/a0e"eV_ZD`kMi
%MJa:[o8DI:Q8@oi,=Asa7h/Ea-(LoN%c[iVf%pY^-0F`+qujPN1GuN>io4u.'fm@6Kto6.@i#0^=La%tA'$F]1Dih4(S2K1EU6WJ
%Kb,#?P`dOm%T8@`E9@[MgJr\pFKgjRLYeU\34qnU7H,a?d>$%W[Lrd$ELr%*M]]LlZWR\RZZmp('m>DYd(%u)(c`GP-;T/e]ko8:
%qlgVI#bK:BPI\3,@RJ9'9M^1;fK[>'X113BGoWKZ:,#Xe<`;=A(s'caR#6$-j#%34+\,X^hI&G1+<`T&*YH3KX^d59jN$m(-:-7\
%"@7!H9.5f%^j0]T.\):^L%#c'l@pgE&]^'YM*mp"Z3tg);=P_6UB!E2ET9@JF\Z.(kJ72B4A86_1DlY(7N4Lhmb)XN."8c<T5!I\
%/PA61O/JO4`s0_>qu$/6.)CZQE9mq/V';9i[F6*1*JHe]njp);pJr_V27E8KH$na1(h1Y69].`'XPdOZYL'MS[No2NNF/HgeJ"kq
%,UtHj@h:F:(l%[JShJ.):d\<%;TDQ8fbh^r0rX:ji<@5:hE4@^?b6Q)MCPAoh!28rForI'm28NR\hOe\'u=hXG9Xp653q:hY)4IC
%VeoOj]?6=+p\.6dV;)<OWFH()ATW5N`.b+Wr9ub,L3AIkCK(!`/GEFU7H<Ct-M#^1F1-C(QG`[bGpsXm\VELtQnWXAeg6L5Q[#$,
%W!jp85`[^S8qCr0'aTdO(lr_^"MtQZ`b`Y[8#%I@/q-I=p6<)*Qo3iV<1:\+l")663'$KEfX.;M>/f]ZoPU0NV1n<9fBI,EL&cpd
%3>,K>D=\Hsl=j%I$(!rU+L?5mmTEI.QF`nEGqA/Ac*1/7^:]DYnPu;TihFg62\]W\g)Ye*bM*jE`J<T?Y_$1f6W@KuY,<m+JhBdW
%9/S>Gh@0)>*H!aK5]+lklo^V9no@"cj6MkibYiCYkQQfZ/GX[r<,/&oe6>A[]pshQ+;*]jQr%\tSkJ"R-23`noq$g'b1in;Ch<3l
%nG(FG.#s6d.F*uJ)X>D!>*:Cm,SD-.:X0bM6b*q6Op_?h(c<@]RJ\T9WZ@*\h_P#="W<>J?>%;s^,)-p=X$rlhr?5'@=34G<f\u`
%\R$7d9CYWGeEZVd!aFKN`7Ng3eKKCDQS)cX!5PVi=Q#NQnSBi9X&-79F+n6adPftsU%tB0B2m4=;B$O2**R46lA6=p:j4(d0&#2T
%)Kb4/P.q-?j6g0T@B0dnS<ejoEfCUUe`@Q@I&SqVfg]84del?bU<5$]2hE-2Zg#I"?;7X&SRWoCf3ga)PhQ3$@M+Fn$iRGC3S>l)
%/$r9q#:qEpWm/QFWmjVOH`19?-H07)9j:^.$=&Tg#jl/k&kcb#T\``qR%-NQdqhL95D6+'nk#cZ$FZe$,G>GHV!bJ@O5]l=eSo6T
%Ik/c+IfJ=*_#K1XfghHkqt0c(W]@5&jq,ueboBWUUm],91)J>n'Y0.#I%'Cj<'cE>78uHF"s`BJn2ZG<$AQl96kuN=@t`rBAMTDY
%B]V"D`\b">$1>%nN2ZNu)3(l-G"s8KmZl=Y53V,dP$5##2PL_.\W$kP7<Tn,T-h;bPu!P$LruX:EJ3FPAN>nSkiFfKj><9bUq9"V
%3hk&:Z5ldG.InKVH/4ELKWLU5#]WdS4d$/ZnfB78Tedcf"Y"I68bo'd+%c:%o,gR"iA2TR"iKLgK&Z%#+CPGQnfV?Eg6n$.3DD+O
%WZY"o,cVtU4sVVM+sR_d:QlFubNi_.'$T>+,#JMX1*]X"R^nOd=#2q$e2r&,,cVt]L*Z$Nn2ZYB#fC:H_?s3&8YQR!1*mO0DQY6O
%:6@,baq(*tM2J4QQp_[badIesUro,o4\1bqM(2&[3JiKP,'OZb:Q[e3b3S.b,31QuPc02-F!sUo]dud-4EMVj/>"8QP0g(4/gWj8
%bbdcK99E#,b,<=ZK]Q.o<5Ju?AQ=<hdcFK'$IWHcU'afZ<hf/rfp/?f^&1K#ZW;f,`7</<7*$g_/5c3WH'YDADPe^Hf$1TJaElO*
%&33J!,q>N2j-#WK53EPZO='9+Pu!TfM(6ls]HkR%\X*S'0DcBVVTQYA'r8seKGE_5?m8k3/51_e+qG?Q:R-bC.nGq`M(2&[N<q++
%PE-$nVod"Jj\t5NK(<W]1/[QuH'tmg<10/M!j16OKUX;M'3:2E58.(Z.ROkL0Plar.Qi*E-7YT6:D6d%RAl$>e)Y8\$AQmX7&<iC
%CSLB61,_u5BlZ+/"_k8#@0NY$2GjXhR@=Ib2g5oZCM.Q0j>?\%W.HiDS?RT%3Lm$qMC_M%?8mqob[JXf:/jN:>Y\7Ik\O!n=uW&e
%,&:e4,#mBg:5#,aWtSKp,-MZGf?NYM\=0t!<5415mR3&2amULg*Bq@S<KJEF'9u@WjU!G.OlqRYVoeR!'r8tE6kuN>p-]XkanLH'
%UrrI#($Oe-&nJ\W:XZYEo0-%I1msu7Ji($1Y_!SBT;["'r(g:CAd0[#9p5[:.S,[*MTY8IJO3o79Mj0DTlWLk@mam]U@N$h5u@eQ
%B7uGr_rcWHikoD_U>ib0TbR'_bY[pt2`Hsff#\CJ/RHO0-1KkL6qJb\cOiS\%%egQMl4]2,o$iZ.>l9GaV@5ZUraB@'r8qf72;W?
%(e#2'k)>JSL<LP^V2*A972;W>*(Au<jGorAFL+I\Z?H3q=bblk84hEfc64LI*BoAq<KJPg'NL5AP8%#Y,*s"/f?>QfD-bC673?V-
%8eH*4S5N<PR]KDe]0k_GU>ibPV$'pS\!1uNq!:m\6(7^L;I2#o'_PKca-8./n6)WaCW#>'P3rgPBhF+6I'+p__6DUiKTq592^S>r
%0B8:U<A3O"e3&-0.@HQ3o1hks^!'D1MgDq3'X&E9qinHGI/YQtLnQV$WU`)1W+<8]=f=`-%%E#EA;O&.Wns\DSM',:UCoFtpj?&8
%.h%u28p$?WF&Ii=3.+aVV0<H@QV&_E4u8JVXEqFV`72D^SVl@:q5M;9)EpM'[?`",Q*Tt9b#0P*lIA!s1'`,nWlWML,$1'#dgVSF
%8fUqoq5O^#04P`jVTDseD%3,F8t:]`H)h'N.ruH92q-ijU'gOu<tT2)r)M_a*^54AF?hL7'd7@)Z'$nniU^/K"_f_p;$CZS=j]6'
%MJQ<m5#"3kW^&M<PsX'EBr-Q]Ok!($;(o*feXIbh'qP?#a_aH]Ur[F"jbM0#V(0j7E(.jZ3N`Wj1WpNlVT<h4jjRbOU@N#=>tG3G
%frbH\0AdKfVoa0P'r8rs7DTTcZ<gE('R?m\]O'_NM(?usI77!aBsM)C"iKN<_W&-EYR";d#8Z9qaFZkBLX1TA`RAA7U;//4>Z_Ub
%V3MLJE7<mcU'buu@S*ej?;<%<f$'!tEGWPU`JOcVL<YZG'b$WP91f_e*D7RWLX2#M'r8s5,o,Y*aHFV7SLdnXj-_5i(0-GC;\iAp
%,$1';B[t7k-&q0Nb9H"()7(SbGj(Z#<.=&4=]0S@]NJ3bDWWK9f#sUQ1#0@nZNrQcr[_c#p^C>*6&HXc<'E_d/W,rlP=LN\d*8@4
%aEkD(#[&sQQA#8'jjPDac&>hXX-HUVh*99/W[/H#o^Z`/Z=[]#_UZo5--1Dc[01d=r*"-1AG?R;e:BG:[\sGKBA'$=\p:^i=YJ5>
%Tr,o=7HN!/gQH>=_rodKHV1je[ffhek>kjZOBK&kI%%]PEeR.>o9LNbjkc`TA\-R(#WYWY/ZM&p"..ei]:+@F5%nNdU>'m+no2_D
%^#:be;$CZSEQJYX]kgr*XI#!+OOIb$U>(s%3OoDs2_14oXI#8HmWe#.js"?lgg#N&-9IRLM]FuGQW0WATo1PnlK7:Sj>:#NP';qA
%b0rcoUrh,?'r9"&72;W?ehqN911(htO="Jhb[JYa?!'CmXBeeVDVd!4mZk=uk3rSc]4MOOAac'JeBd#@\=+;J"F'V\?<BL^/7)FB
%734*5Sgop?<feetf?Bq;2QrOd)s$UbSdh=>Mi+FRl%S6,Z[*4(R_2r_LT*%U8b&KqHd*P-bjL0"Uri'ojjRc8U'f?0plYu=cglc)
%Urr9T'b$SrMi&%;lYGW:A[X7l+@X!t.\@pF(R6(+kL[pd\u]7<?8q<h+_t]hRQ8mDrC+51Z@?9dWUbP`*2^mZ-KXo@JB](j+:HiG
%@EL]?<'cC8?rUGk(YHsj%C1OVc,8]HUXi=R"I&Dok6.87]KoT&)>3q%Y^+&s%eVW1boH$3##cN]3]i^.0RS='<Pab7_IR,1c4NP-
%LX-S[`J;bQ7MV`@'IFP'T.:=#8<kcc.S,aVN%.A\0l5u+A^3!05Vm3.bb8q20Yu8^*/;P6Eed3i_e0LT$AQkK-H1bd+?";./r,g9
%@/)9^<'cs8@a]nf1Pu'[p>2o_Z6[U+HS<J?&2+?LTR6%Xh*t1'.6Y%o7a/Y)<<s2DU.7-l98oNQ<<$9;?+.:6\7^73mU&:J=!q:=
%[D-e,mG,qZAaQlfK;Z,qE;hA&@QaYo4gFe\V\R1"r:HGTR%M1cWa_R8o=ABqIej`Wj';e7If,Eor6=.!$"h<Q,RO2BK%QH;(nR'5
%o)MPoNk+W=H-%cOn@[tP#C'EqbfqQ^$BP#GT9gVr:#DOL:a:%Vs3l:)56"bSZJY;;ImKmSTus\sAKLS;Te`8=]Mt:(G[@K<2ne>Q
%h>7ME*S2P9)+oh`kMSS>s(>Goo7,rps*t'8oD%t:++GD_G$k?V9%_LebK-[h)@Dh$gNZK]@O*El$.''m3T\L.^q@FWfOSakdoHQU
%QZf)TPmoc6j;\'9duR%"&tQqG3\&n(Eb(s)aDn6S/X\:.^J9YY,8Q<aZ/'U2q%2URXK+s;++td:`08r1*/+Kk,)c$LDR>X&nT[)I
%P-j:`2:tIhd"=dX\\]P>ge(HjR7pd8$I=.'M5o1Ipa3I_OodD1bn3\8VDK')c9?t#.+bloT6P$)&qN:.o%&].(-glKfeg?MT?^f4
%ObJa;B+p=^&HF)1:>RQMl%1@\3A3`Pb[(_37l=>D'_OYOB7o810T;k<8">P`&0&KiO`fK)620?=K\5;VDFH))@L'E\0@@;Z^SB]e
%Wp6N6OrHq>+3k4fNb#r@#`'I;k2\]aPfIn`:*!on0g)=+kJTV<cc:1J5'L^eb5:2%pLm*/'hd&l:l39d\d0YIMJdYOKaMpF0a+(:
%2^4qEUi=OCLbKo<Ko@)2'ft'=HTsD&C`#!gRW*9B2Gj?#5,V\.$m;j5g3_>J8N0Mbl'D\:<`M8oC)XB61rm5T/LSK"[S+9!aq-A;
%9>%Ehkk*pq%hj(K\mF8gF.!+D:uf(,=3=4<dl,[PQ5ePTg%3\p8!D%(KG-$h@0YP3D&]o<K,,GTUOG;%H5UgNnWq02`0c4jhll-[
%X[F@omra"mW&sEnl4F/E;/ZrL+.t0Nl_[;m).%Nt/FApR]^0Z5MNIKRa$nnsft4?7Z^C(Nq5XR'Nm"nM;Yf.(b`B6R\!A7Hit(rN
%Da*<N&:S6O"%*cTJ=U6OZLsk#\nCQV$58!jE@iPDR';5[g4tR_(:^*+UmY@V>rVLuMtEC^c;A"9G,kbIajhAIGEO,]/6NHEH1oY[
%NoYq(@^Z=T=iF`9Cfd^gociXHlm`(R2SfJJXZpN@\d&7qWk$2jlc8T$a]1':8HI)$n+4XoNWIMk)@581?X?R=\I69#>sQH(DA`-T
%=k\&h3>!!3@V&;O5G;jJF?f?C;'C:VZ-$t5e;r3eU$mjl7"t%8%<MBD$Yjp&iD_!;0;*-f1TpdtT]E1H66[`On8[l7P1BHAiS+Ed
%c9T_q%SM=c<8?^Cr5@&o*Fuif,j+Em"?uJ,.(?24^Q^.oaT:TjAXi/]8!ksFikscO@J6`r17;mkF>l(h#Cn/q0HG$LiGX;7bfpSg
%4:SY(P_PWOTYYDCJmcKee*//.,DR5,`K?u$0(_em*LY,_.^N2n.m/6i2stY:%khUT5gJCQ(W&.FAl\3lQlG46(p'Dc/(q+><Uu!0
%U@O8imP2XA<h_LlDm<?8SYO<lkdjO6.7Fql1gtiImZ@Oed;J(1,MJ0<W1Kd1,+cibH;"*(pDu+oTg69U\^'+9mj6]F%_!SGoWh[n
%Q5=&`r(7tQd[,9o`X$f2J^r$7fmIjW8BJKQalMnB1;L-aF6AT/V^_'PrD@<T@ZiCt7^>08am`:39>e%4geX\ljDqtLZO,,J]cr*,
%/&YICk9jq#ap"nY6BJMc<3pDX2pc00GW(nY:/B9=2MC/LUBH^F.`PU#fs5c5XV1?#V)%G&4Q$9/19fG)KJ[H5M_DW\-]\V/]@'s!
%_%s!h>^$?'lga2g*/afc#M"TCdSf$7,bn1Z]/Hrijp5TeSXY/PmNb6c`#Xcd\7d_e)1(3f4e:C1'SC]BrEn2N#!a5+G,U\^BoQ:l
%pQBPGKb]f`Z?+B3MOJ#>_>-XV15R,81EDdT:J\#B2ZF57d&)p`4UY'o6.O;i:cBktS>,]mYi4f8!kq6C#hZ6OT`AMd@eIP2l&!^L
%V)Y2-`n"NL51jc7B:of6HCV_J#G@hKdA-%4g_HAU_$W[`7#F_%f]DgM\Fu#9@Z:93mXP;I95c,(lQ0D5aO1]j&5;OUU<9oKKA[kc
%eS8],dcm)YNKEs,dA.0!DNsjT(H.ht4"qeHUW8ZE[[R0Ibjg#fL8G-%ht(rYrHb`2TDVcW*X+5n.h0(m>OAI3%Iqj/B]D$!(NSg;
%#'u8n.h]/A>Imu.p$43@p:u;h55Tl\_mVsVL_^H>@6e0FQS7%jDPiD2%\f"@kNK:iSq*@sjs*]OI;4\69o(;.@((UA_UbV)IJm2%
%#6:b^@dLdMe55d:XS4O=;\2UmCe-m/5R1^T[(3FoJ02.D%j144dckTn/DL_Vc/F1*2N`^pq4QJ)g6O3'ho#eNL+-p#G!*f?[Z?Du
%5ck8YnoPkecZ!c&RB[&ud)%.+b7UjPP>(]!5<aCh`'F'nlI*uOJ>$ETX1gfAerHPKU8jLP&dj/kTW+:$%HiW5h6Hj=6#:.rG+/@\
%Vdj!Jf9@kU@oLl!Z*Q^Kc&bECLY2ERo#W)2!p&s[a9&+[>(f'u3$E"hk37:^(2%nYr<:rQAQTbC!1KJU\rbe@STdGm=78GaRPJ`b
%/s&K@^<:7W2;Y*d"U$uSJ"TsjZb1?tos=qiAB@7shnA0d\_bGtd1'l)qnkgQDpoU"Kkmr[XQ7MYbIY=il/F);kQ5O7,(63>C6i:b
%b6"OdilJi4/#&DDfEL1u-@8:a;-!j.bsXk:)2AY=d+LFVGdrh)UWkS3244`:8QF0UD-XH)g47t9QI6m[PGtAi<JY(F7=;A5p3;M\
%Xt.CoFLn)Vo;q$nO1Y[j$JF.O`s2J\'md\8i"cNbfeGm(0XIAfoB-9Y(sinI@)-5)MA:S]D.1a\md-^('KQG0(=W'1E",n*4PrD#
%Ed7feJ4O[>H@[1YnS6Sg[<ErT7M(9YHm!mD4SJ#kkd0!N:KMQNPq@n@C^1F)B]QY^l,_k?$P-WA/\5=Pe`DEt_^+>U`td4<+6<YW
%"0s^77\rc+L%iBP5ZBmhBD6.oqW>drR#sF%EO80VDSNIG@op;LgZnqnfe<Y;p,\.6MUA8VkNH@5eLUO2QUooJg`6!8A%jX^qc.Hf
%15E1"^6="^?W.<k`E#rC&@\213R(A3f&$m?5s[Yh"-B:1H;QY+\<^EkD_#SB3>em&$IPc-dhV;gC]t:#7"PV`/q'1m$)H&k1k#)^
%E]"!]&@5hfr,?(%lZ\86KQQd6+COUK('^5D/c:R#mFGmCFY[/Tbrf1(,chr>Ogf:^W4W:C(d380*%iH"2>'4T/B:`)_7HAiO%o.I
%K>341(jr`g)jSB78KP8'<gbr%4G&)qM"qEK$AATF`miq_&-aM\>42-":b"<eeu)V!fau1-#gJGX7r@gAGr?jZrAa^<8JN3G17,2s
%]KZ/rZV.4IrT!J$iIUi0aSW)F/"B1mEenWO[2F1caD@M>(@"sZj#Q\ER42hA;*)>%aXJWpObAZ<-!O1(.$`Y1-pWoSa?g9o"/T6^
%!XF3EfETQDgQ_l=/H@7:\L*ak?3,+d^&$%%Ajm3bGk"9KAneO)#9t_G,k_C_$I7KQ?d6YsfaPd\IVdRm5Tc+P6;338>+d"<2/$4=
%hj[>VT[Sm(,25pJWQu\!cBm9?XTO6TPZkcjlOo:Ne2K'?]8n68<c$rmC4kI?igf"_OO"kS[e?7:KHr"f[U2#m"uqfs!fl"^/P1]l
%4l/,KIB]]<nit)L__u_gbI95q6'!$@q1UQ'LO3[H0[aJU1X8$$G\)dN,@;#gM8PKq9Rl8Wj"R`#f6[D2O$0<dVa;n8fo5#e"hcVe
%NMfIo.be4QVVY0MfZ3ig3qL9uAWSC-Fp+EmLMeg!C+^!UB\U!_:3IaUnp0YmYu#$eBEMm\Rb&Sl,36MOpq$isBsnRtOP-H+6J9L,
%k%qj3jD2SDUAfQ%B]]cRJnUqr)eVX-%9t,_,U:!K]3_OMHqE-Z1#3Cb?VoXC@:GW&\GD0Y![Lb]$Ws[:_Bqm'1,qbu8!/pE@09sB
%[.@q2Rj'6'Ckg/W,c04FUeR4&ND>$0/<;NAam4^Nct/E>aV[;e%"sJ5$&46WIYtI[j:o8`l8"O.R%*C8U*MJD3;Jd$6s)Oqbj(&(
%=*c"I\MSu>.OlS"$N9g?W'\-BBdNdm2pM4%2I!tB_^pL5!0HuojUI"/)XpnrJdNln$9]e:S.<\3qpYPWf!p)HnG?snhUitk#>;O]
%=>"+n_ec<bjBd[[QB5V13d5_i;$/$%+9Qm>=o.idYV\m`.@&fu,RG69VKt2%D2SUTB&b7G^'12S=KAT_Qk4kK%bN=!e5RsGaWn/+
%Z0T55d)Erg&&k?F9A`XA`(!LK]iN^]IK7&_E9Tu!o13*"ObC1e)J--?"F!lKKTH;5[UVKMXG370_F*-U87BY*BfX,f%bKnhP*GJ4
%0g_dr_.Boh3/if?*O`LgpJsZ<opF_1T^%"prKApF+K:hUZg-(2_*4`64YlR%\(H[;](JQ#m5W5V7>>*!J(^i7.pU'-Ktn7;XA,7'
%H+%m]&%p!NUAmt105Qf&0&)*?@Rq7D`(t[R9n^\A;=e6:!c?LS.q=LmD65@.+RZk%*r%:8L3`IRNl1=+[47'8n_F3IE/<9f2(Zj4
%i`d/OFG((L;>Vtid5dQM<p`t(a694#8*]=)>a\EbYUtuiP>$kQCV6cr>JN!@Fm$>82&>Yo^*dI-PtQZrNp]Ip=(11cWWaN/8i`CU
%5`eB);LoG78!jfYk47%:@r."bf1L#RcRmP%#3-ES%m'LYX9-JH=CR$aUViVTj4afpIj^gRPU*qNQk<82;KE4P[YT\fE6lK4*s$S#
%,i>D*N-ua"Sd&KjNO=536b94e+km>n=K*j[^8W$=3;-9:O=E0O($dOr3ftP'nU5R>G:5o86bBUA&Jj;Z1sqm>"op!h@\\'!:_\\M
%imlG/%>5mZ?:]G^1Bh8<>n;OVHp\c]aJFEt8nL'5=S(H1YkF(M*UC:_D:.%q9[Ps)_er&Y^7l[.??XF>G@R^<]*)%(jn6#s(c/mQ
%`5,$=aRWCgN*"Jh0Df$3M^inhX,IO-0ml9VAPJd;\/^5N+c38^*EIX])51i?8./u^@VG"4bsesKJ+4ae(+<Rlr<G5]nIJ^kATAkQ
%.oc*7Nj3:+GFS_^g_A3X)=b7]Njd+QP[B_A]VUBdqTN17S4ef--pR4KK?F^?PIe<Sd>B.'etpAQe>g^R\V4_p(nqZ>k_``TEj,_J
%aJ'SS1kXJcm(IA8$V#jC7QpA-L+J?WYDQ*^;BAl>2X-]rT38?f12S;/Y!?$@UiJ4uU_?f&RQ.'0Nn%3F\'@Xd>nN7VD34.aXrk$E
%[(4s%Yt@T*L9=WXNN9J0UE:F`;i"R<,qM&(l*3uVa6W@4Y0]!ZqkM?k?7_rS98IcXF%id9Zmj(IX]cT@&Pof7:&69j91*gPi:LmB
%OXL4'QR;n9iQ?n9Rb\\V1g1OEdE8X*PsbDl`02,)/bs\Vf)pH4nM'ncFP_1dN?OKP0:GmimUdi/9l!W;*C\\B)46AVJ/6]Jn;faY
%83iF+iOD`?CAL>qq(!=#KhVHl6hpfpSQf(Lncc=58!md"+UM--#N`1D2N&:0:kqj_Z(:;IrbVMTZFL3Yi7O&#p-?GL7__!E7;9SF
%<p[GgB(E'YI.X#DOPc!sW-no?TZ(WBrIp7Pi^sg10<Z!&":;=Ik_mZnH(CR;(G5tVnktN@V3XT`#_&P'r"a;VHK1FRK"k%sTl1W0
%M,5R0U?1BI'\-i0=<?OK^B.oab;TN!['gZ)Ctp.)bs"f,']]Uao9>CqjX[\7DrOo'[?YSeegd84[fR.2B(m#%5.t@,&^JMR@eFO6
%emN1X(Y1\h\+Dh3-8H(F[F*s@"dPZ4."EcQ\3*LVed$^^[?,ZH]66&q*i2VW6%Vb)`hbp35@%7nUA=@Il4Z@AbK%/P/>:!6?018V
%kAOQf$pPE4Hu4B"du+c((lLsm573&t@:!8ZN_haaXUm',q-E25_7;AF#L1t4!hB^rB.[/o5K"2OVMu9QK$M\82-=V<Qb/_3#)CG>
%6WLVW)\J&ZKX?%U`2H!1PM)Goe`*GPfW8=a1_S=:gFGUQA^(5WFrg"RNQa%9JqLVBA-l\[Z,Ne0R$SiiDor(4/5A<eB`;hTEGS(m
%m6lnt,Zg!Z;iFrRLok2oS2p/Ql&oH*4KE1rpbdurKf8DD6Rt>R4kcl\3dXml)S:E#UP*>I5W%j1FOMX7q;(p8hn!tFM3g1U[geH+
%[UW+5"cC'K&1MFhW2ga]`=?T1EGPG'X;giH+7M*S26VjrS^!p1B6b=,`7e5iH=@gm7KU0/H9M.c/&3]e(\&l^&]?&&]fdIR,0^R(
%c(7FdFuVM`EUqbO$\0?LcI15Qo+AHG(^)0-L1!mPBl"`^lPt&S#V;YRZ_mcI.1Wk@+qYhWr^(k`rSibVIZ7abThV$DfU2OR\]Z3c
%h0sB+MWES`Y].u+3c$QN*-^,!_,N>a-[3F\Metm>^-MBk`e]ZeYGtC5Ug1P8o#SP7Ki5#=A!;W[[DA1H0"^X6lmqXU0nK`,=OE'6
%S")UnXJS/933(GsMUIGblo1XZMiH1B,%E+g%\TPc)*E#$:e+?#_R>JQY'hk0SB48&[&#39@'^p:=6='#B:-"2U-O:TDH=c!@[I4C
%:7c79_I.s\:2b6@MSM_$-3)hk;/m_CF0sJM1'ol-"heaq;U24>XVQmVV0J_J%J?OPA0CILT;l\/L;b%:DK+0@S,8)ubb1R`]cbRo
%1OuUlM=qWoC0:K.jI:G1FSa_5Oa.8OEf"68bZo*ucJ`J7MRSBRcZaoqqJ6[Q)LKT5UR#0Z^=hes7%NI-"I`TleE.(,S^1>qF3II"
%ck>-VcGYiCcYm03,9q&3#adHn=Zh&fP^k4h39M1A8.$6(!NG->Vj8QE8,:qWFC8Fqk0A&A*%(NaYkVd_WVEgEX[['+]#0C`Ac!"D
%kE4#ne[Y/""M$RA0,d\/e!*N]6$(j8<4aFHJs7/VH(M!NRP`\BW9+lTDd?CeZjf$:J!t^D+(.edE]#)U@?DBG\JB1Hj#LI>m'%QF
%^-Y8oV+!sAgiu9U7GYa"R_<sNWug[ZCdT'B^e=;pNuZiXhu_kU"d^:T]57NVH2]9[T3(.n+XnNslsRp81b?3\Gm-96+:7:(d>?D7
%Ke>LC0QE.aj:`6>&:Z<Y]+XXZDM#XooQeAAMc(pc0V$YJR2nnM`$NVC5m3#@Lt[U.^.$mo"gm%FRcI*^M2-C!-Z<F@eSt(]h.4AE
%G<k:1Y4Eh+G$+,XK7+/Z<L=d1*IVS-Bm*5d]P)Bjo.%@c:^rHjopoBn_\@6cH$YAk!AOQpK"Q87H:42JZcOiQ`eYJ`$UVJ%#Sb>]
%pamS)p,rZ$:mR=m=mDG6qkS%3=<6LrZUj.saW.gJPh>k#Nk8T8,)+6RT&-28!Iu?N,hTbhD92n4'H!XY3B1aGC62+A9]A25G`"[M
%&Ed3jI9F]cQQIh(q(%i$/89k64LT)]h4tK*5[q5`.0GI?WbO(%.?<]J6tKsB<>9A2YXNC`#;Hg:DYV&b[ZaK@]5EY\:7P6Q%4,RR
%i!^L>D&:19Xs=bN#W>qQm:VO>K(@4B*Ged)YHJLRL<Jr/K5sBB$[kT=IZt51-3O^uQ+(pJFUA+h@E)dlQYCLra!JiQ%"F@LU[([K
%e6'Oqe\6QMM[<=4b7\o."Q(nHkDYK?(GZ0!d0Z0oU+m`PE9sR!9cZ-reJ^=is*/j0$_08;nBlWjfq]k+"f5Q<kYdC0-;>nk"0g1o
%E]iDY1Tge"GsttR0#o/_(5uK]:_>kXas4I+fO`@0Sih8gEFn)[$tL\,=4l<^XOENF5(Y9V0EA9jXU#8!U;3ajG@=QLZjr7p9>=e=
%ID=-E8Xmji[LL9^^4]7":<-1Q95J:La5`h^,VH;5\:KeqXj*]fJ98U,@_Wds`_PS4G7t=bU1qI8hsV1ME?_V1Rlqit?$jXeCK3#+
%nQ-0=KtP,F1'.?J(rKD0V(<JjRb3I[dh^`3Oa1dfIsVc)(De]kP\24b(]@L$'6`_>G.`cKKIQP^iHZu.n2:8@_qb>)YFXl,blVl_
%JJWMKa[#[3P@9G5h6-u34f3_hTu6`o2/!$\9=bRH^Fdi+c@Qi'e%G%U$%%2+&9f+#0s_l@cDQeHC^_Q^!bHg8'AODj>h(tTW4\O_
%oKje2gs2d(O/<Q`Oea,tZDKGq\ll@kbrY(3dS`=*FJF+a2B;^=$0\,#.((E$N$RDf$BMpI<ei`$fYsVrM4%4F<Jh<q$`2F7KQrn/
%-C[NlIhtpC@W)3j#oN8QbRc]sRoZWF\Y2_bU1;*U*aQN3GNW0(A+s9?@O3NK`*<]PQg[Bf8u#m?]M)SGdArQR;9_ZjIDuoI>`Bm.
%J1JhcG[tt61ggXHWS.q>d6309a@AbaD)6%W:HmN@I/<W4\I1h,+=^((g$E)Y_An@rR\_AsXlC&_]-4M_W2YA,ZTYb&7?_9uZkmY+
%O'`\0!1OU]@tcL"e`lYjBN*=>6Yd0=\pD[&b>s_M'g\'s/J2#"CQ'"T_*b_613:i/#k'0*gSfTe$Y+#UEe3*TjjQd9bS\V*qk.%2
%D?1ARl8\^j,FUJt(,bF0LXHG+f&jD3li?H#5uXUDe/HI>'Q=jk*jicV9bf0L`MVXDKd)*b^2\9_WcPjAkiJfZU'N9c9eCT/F*JqZ
%17Z@BmL0KIT#)X-Wch0$9V>RYDI!SmH"t=:=1s;IW/Vj,1X(;g7nEVeqi59Pl<FI.?9aHt[B5^6AN&`?Kf9_<lRYcHa"SDqHKTEs
%gN)Cso0kP2*3Ec(52DNt.%OG".D-O@!f[X\U".?YC$$Y*\SO#u1Co/Lm#I`VS=!Q]&n\<c-$U6YARnji#;mco%HdAKJlWjc8eF.K
%YugO>3s;[2Ku1V\1*k(U,?iN(hH!KQ/;&I`h?4dk(\,m*W1-Dg5"E_!So!L2V7lN\Y&qJk^oS=a%;@"!-q&?7>e+4%$Y]j21E=$D
%=*@@ul@IqD"c-2RS^@R*5C9r%/m.m[<0QVV%49_\\;)XgB=DtlZeMYJ(*+UXZH-g&I"-3T]#G_j/fP1>6uhRCs%;CC;25I:a5"GD
%V$Dc[T_.P!W$5'9NURobO'0ZG?B5[=WQTZ/41O"]TA@Xj$AGWo_!+mLCQjtTN@dS<\4(Xh."ie'l^M><hs+'KQJHkV3^*2\af[lr
%1;MCWhNI;iU1/*%W\.3$MKqWhhF93f+uGT"1:lntSO^#OAm5WIC;>Wn@GUY?LC[8>%[)(k>u()'@,9M3P'0cQ$Yhf6N,#m+pQ122
%e"s6rkqclt"sRX<9W0`m$.dmeRP'c3@+7-\:o@Y=c4)sIY/C\%J:ckC[#/'kd7OWs6>;\tcP47A'#7V]k8U'-ac3A7*;s#o\BiIb
%OMr$<p55Q;D]fB*B_N.'Kqsm%'e2?cH:G5&=Gtug-+7F4KTmURLEM9Gs2p;UdG0no81p@fR`Vtq6>.O^0LN0]1.7ngbM6XjfSjn4
%i0#QSA5[*'_$`Ql'T"_5+-mca6KjI*5KUEJ;aS;E'!fUoP7I_nnJSpZ6!8l*@]2I$0+:B7*``I4_4`esB7oSj14tEVEQ#,s.o\d8
%NscnN)IuSpk*mCgCZ;s?(ql/+_tC]iYdoZ0l+T`IaG2#R>c)sE6^!(2Lah>#'/pc7aZ_k+poa6i,d3d1rq39PQ>H>l@#Aa4:bu"c
%`Eh;%>=i"_=k:rZ9,;MW,$_hAa+ZaE!]%`HYUsn(dCMEMZE[q*U&!Vg8`k&k3AblZ=&*<)6SLM'Y$nZ,-Q&:uMH'T;RK-`"arP>K
%'o264FaZrYE7@Us9E?1jUL7e9+eb@$=$"6b"_oA=3V(IFTa28n0d.u8!?s*M7o3rpJ7A'?,B&PoQ!gth*1P+`PTqc5GC2>Gl-WEk
%/eSd26o#2P:`beu!KQRl&PNE]_[i!<!g^t7M/q9[K@hM?e;ll#CO2im@T0'e&^f/D3Y)rW;54,L&rm"8?Zlk9oed%Bc#=)cF\Pjo
%gU`iC<';1oec@SuZRGAJCLiL[6/JsSWF(0KOJ<0!f,e[)3H+I>"4LCJFQ5O^8#*"s5!o+1[o8R8c$4bl[[)I(fM#nCJc<MRO3N]Q
%6R(heqi9a9ZQ'e@aF(B'Ytb2dTn89OAeF/F_E>;4UZ^nAq[^Gg58)K=iGUWDm<r_J$C/:iDT_QXTf;'5Y7R4%QgK'U;sV+[:NG_$
%StnC.fe3o-o))"W:3l=ZA>drJH_0YiVnYKAC,*Wh.8MCjpcRdi:Oe)l2"Vo_-9fBKY>Ck^r)^s83P[0;VkNDO1]aUF3M337jT)KG
%TS?q@ZS\U(R//WO.L13i$It<E:QqJUTD!Oke/pog7Ypp$VcP9DH1hWAW'((`>#_*n!\l1MIu,*:a%rn$U[n=akYZj-oHHTdO.TaR
%8EKY#OJMIF(MH]rr:D11lAqQDU.XP3pW-8&LV%Z-rkm3<WBC1qb#Al?$>Cso\3l`Xo..bY*8h"c<1\T#4I(E+8"YZ']L8F8!FDHr
%jT$rqW:KjfBN-_%$Uh!Wr<4ZNT)T.c.L3INV[E;a6<2`HTiC+Rc]Y=!j;2K0EW.K,W]^:bC/pl*$FqVjG_oal"2$t)M?.%X=QKN9
%OKA$N=(kVh^e7(r*8h"#<M'3tfdapt?D:Zc!3Zs:Ee%4>=#n&ZdT-;**pkHWn,i,0c[ULl($E>"^<-I_TjQm]Y7RpIJ6+.$H2\0s
%X??Ld)HNI0!YHs/It`ap"2%%AaoPhBA*!\D&@1m)="%3+^^Hs>4T/tt<hK=I0e:Sb8'U<`4AF,Do3\2(`;hP'ZuU\p.9_#j4d&hV
%q`IS'#C(s$eH7p0eOi!BkK-nQqC?Zi+\;Dc@B6dkT;QMe!;B#gDuT7>[&kD-H/_j43^-?ql2dJ(DtO+Ve$j@JHN^ML_^cG(*oM;V
%<t=^$NN:BTT#d0!]KkS9o3W\_o`UkaF7fOZ'=qMri#,-gTDq$QX7,$=['$":e&8D\_"6'Y*8hQP=3of=H<6a=/A\B*i6rCD56#>[
%=+A4ce%GPT>G>3ui?$OMs):X)l9BYhpDV)%9DE9!/`eM_n,hjTQe(>6?bP_h:&O;JT;R/2^3**Jb!4[VJ+XnT-\1l-InKfX`T^S>
%fFZNGTn*Z8ko1gK&+qaoCn1M^)6@KE4<:NZ[9Gt"4+ar+Yl;Nl.4fo)HaL##bJ,3T[24<[%I9d-a^KV7/Np38E(^`]Is@,#eu(`(
%''n<B/57Zk^IK!]5MW#kocKbQMe-.<O"Suak:L+Y7&!IU`a4A):Q`Zfr9%d(H27oeYtS!,665A#an+SucI"aM+6tc4/V,JQE/-cG
%p/adqSX@$_OgY.5,$AOeT;RipcLR8pQ@HD7-gNuZ:FOBe?D3VF!;B#qq1fc"AU48*`3N-u5>NlS!F?q9AaSIlH<CaI!l6G6It_@_
%je&GBApOCI1p\fA4\[cVo3\/ZjnZ*Ac#S>=\lfdaT-g)ig%Qn-?*CmeSTQ7NH.prM`SM0Pndj&Fcaq-o2#/\<goo)N]#+G/!A+Pd
%7mUpp^saR94TB[F>%9.U-__p@iuSr;s):V#b<NX+8':pN$#+7jV53c+*[@NC_2m$m#$C%[@ToOZSu8II!;FQKrJ0S#Bo0oWJY:SU
%YidHM3P[-j[>)L\9iK7,?QlF,N:3(4Q@F.5XHj.2kNQ^jY^DnDQ4VF[-u4,-o;&cVr>"$i@W\4gXu4#hH0SQCn2tuuiR-!#f+O_S
%$A#;ki_NM*)W:TWM(JtB7q6?$rUWFcllLD*b*E.B6>"CAma9_Y%keLJ\iJhS8mD%eglgC^&$O@6Z>J_-@U#H($FQuTO.IZ,Fl1[>
%oX5at"bKsKrt<<<O.Yj'gsUS*k*G`(M/Ih@oF"X-q[_SIh>[367Cl\3E/3r6k,0YHEW07l>Q3S&m4JA-4Rk"!Itd`b"5G-9`?4Nr
%hsq<('B%mB]+hdQ_^d"B*8hPM>RYS4#ab6h.U8I8-,\j/YL)6KJ9usZr51Zi>lWbs;I#`AQPPp;G_$]ukMMuQL&EVaY5duR4Y?uL
%8!(nYgnVsP+'p,4jT)L2jC3YO7(N654fVceiH__6%rb1.Ma,uCbiKr7;!-J\9:G02gsY?]&'kpPEe%5iF3amTPNVcQ\+I6/_]8ea
%gRkCjjT$rqkkb4TBlnY".n$rci%C9Is6pA`/dHWT:6u'q5cDlt?_Gofq(Iipo(6!sFZI5f`4?fD0"%k^n2.[.c[ULPQfl+MYfd&R
%U"I<a09PUAJ6-E-3P[.5],]`DWa-/)*8.JjIZeRbB>6^AbL9glh":ZnPO<IA=(le@_"5LV*8hRs>n?E]q6&%nSpm".]L'F"Hh]],
%Y?uqF89eY@2`/2H_a?i)4SAq.?D%6[)6X9iSrVD)4AX&aL[[,HDleReP4J29(MJ)Brq"(@*8hQH?>i7kjLhkWUZ_:lSgWapmeJ\.
%YIEt)P$\1IH(&&d(=*ZeEe%5iHG_]<QE8^3>In/?i>uF2s):WalT[L-g<0Nbd.Z1B6ek=1oH&.Ys):?^)tk6I?N/n)JZkX#k:(dA
%_"/hc*8l)\?b?3]'DZ[!=/^L,^ais0*8hm/0-dGt#^n_K/!Rafi"]-s%WIK[Q[cM8m*!cP'l%(cn-Z_0ZP,:i^9kX?nB1sY.ho`<
%i"_D^%e'PEYB*Od')ajaG"_MO]\4lH^Du/8\mM'/4Q3JbR86`[o'@/`Ij5^*2!lq$G_PpZ$0tZkJ"92]Rf&N8^I%tD>/1LK^b/tV
%:BBhQan$dnXS4hQ"3f5$+Tgd+Y>>70J="?-3P[d=@/f,16JrqM]grJ-j/3\bJN:Lr[(nnT\k`_Cqnpq!4STY3i#b1s8.YXYVa'-)
%hM!!Fq!^4ls/5n[:ERm,9J"#0ro&&,V!rjU'"V&)$q^BJc\:]_ds4I/X$h(Nb6NLbN:Cl.EINQ'9DeU9r]qI-FTr@';L:W`PnA+?
%5M@T:'"":RjhW9]1YS2s\/k1=hioVdc4u$2gM=%ll)XRgT'1WlIsi+48tJKJE.0G;kP'K%5t\LZ3rpUf<L1r7R6&fW'P$:0*-STN
%*3-o4U:^V+",aUIf<?$J8L6.WR7gV$K/*OlF"&DQ.>bFiQiZar`i:chTpe49(!9;18!$a6l'n(XR2(!^Jj3:[G;EIKBp.\Ll!$hV
%^+sl#ji!7ifHXXDfGO"'r]t;Bc6[)+_:j0Y?HK-tgUm9LDr`uC8UBMG3C@(tl!_iBl&4?N9'=^2h:"rr0,B6Y.u9(1c(bKPm-:U`
%nMl[-JmsNt([hI)1k>9E-'>M#H*]b3P+UdcT_>2k")k_!]BR*7U![n<O-gQ75V"khXOhKIA%4qt6_@88C!>/D"-+m0,(k.c4]o_4
%Om6Dljg8<"[A90ZF'9'iOMDbAFk@&@Q_0[$"onpNog'`!eoQX`UaSGI;.R[7SaXbiC?+t8SW6ZZ%Cl\I4Gll:DkN1`89V%1;0nn#
%JC7C[!]Z;X+rdFABi^[3iYD<G:<9+AWUR00:71<prj+ifa;?Q2r.MP!_HO%'\[e0L(=!TqFI9Yf!m'$K;dnE&Z]99YKK*__%7>*Z
%\9a2Qhk<hDAPsM:2URAD*s!Qsc%@rGVcQe#U,UJ+:(+@"e6I[4`\SD;)JmeCb#h8@VD&CXchL-1/(=F7MQaPJ!RSLp.=,r%U67?l
%-2PdT(E_cDqQsPi&Y>@\p!-S,MfiK6'3N;0"s(MhEMNll`X47`E$03gaM9NdB"cF9qI/;'\uc5CB*9m[#HEcMS%61lO[7Bqa#OYd
%H[t-DG6855a@QlLD<^C!8-C\1j$RBa-&SN-b*]5,5?3S?pZEVDJBV$9`D.cWOp`H"?ZQPPp,JY(:JnN,9V((O+=<V)fh&bs"Ao:?
%X."5SjLg-R6_R[X?HB>g/V/bQ]^WlQ?`(t:!DC;'Afnf0W@WI@I>Erd(rO[IY=it.&0(,CMm%oX8+%Dlfc#'0<$Pg<*0r@qa[Jrl
%+E!8;CahXr](!-'f1X%I.*oH`<bC]3ck/O"o!:ae$1VUlZ=9jIC^$o%o)8CmJ'!ctIPQHpfR.E.T((sYpeWUE2=EB(C\/f9K8lWA
%ZWsG@-7Dbu_3KcBX2LqsU0`4>`S&`UA6'g4-il^k?P>7*/op*p/dBXm\s^jVTGF#e\f!eIepC4"1J&k$VaUh:5&GI-Lb>cC^qKZ]
%OhrUFfiu'e<.H*fm[U4K[bsS.Y%b4*/m%=%>B*>`G`@dZ>@6>Bn*,^sNGFtuP2"%'0I%<(SnHOmS(c,&jH.2!_Y!^A*")&7GaT%?
%3T(@/T7mG9>Z!a@nm9YCdQ`)UI<F`eEt@es"AKuc6q_PThC]RsXg!O<7XH^u30uuF(=?0$-qRn>!L!dkbjb&Jo=Q?QOick8<>3J&
%;s_$g6obN3>Oh?#qX7tG(1pUk-_!"8(&_c%!W3#69Y5a!N-9o<E\u3+3*cI^_I$H[^I[`o+TuKdnaOHH<LYXJ*F2A41<NfX;@pU+
%AqnQ^/P)">/;%@/#s.'p=^1tA;Bd%:XP+;.M<kg&]>a?2>%EMQG."):/;:!TRTC"h]ZP=)kkMGC#B!nc2]Q_:JYbL*QN,PYITJc3
%it!>k:u>Z(h1RHY)S6MB7j%O`:DDM(fL<hn0nVXrh&Q-5JAi6W[Q8WRNCH,8p2,9KYqW.a#s^*$0p"M!Rj]/Ni;SEhU%TLWT2^Y[
%6<m&)n9N[*:I0eh9V8pZR3P\[3'h7.@%atla?V"*5nYm;Ej301chuE)qe\$XJ+(CJbL$:b_sblIo_fuh5:^79iI?<;[#lQnlj3DX
%kOYSfCsY1I=-S#[[L8YU98SC2G3T^t:.u@<^et*ip.2gg2hQST/b9d&YMmMtO'flnZ+k<"^MPmnYKu69eam2Af-pA\*=kBh^R%"j
%1FqFkAMp8)W[%K$cB3.qD?g%kT?$nG0Y71UX136;042b,T?"^?kCLl_I8%g^$pWLHc9uiDFAj9A305*F+6#P6j_M3?g^O!S^Z!)?
%HNCQ>EX?aL,8]n%-h2-68I3nJeo<rd&6SsKZ^]7eo2h*CikeVHqI9I9LT1UFX$aW>of$-OIc2LKLW;"l%Y!V.rq]%^brh,,.WpH-
%S![ojGVE+pfm.1O2q@.tpu,PG.4j>BW"YR)\%/:%G0hnW*^?!=L?n*_Je]3iS9-rmQS,U>k5.FLfqk6CmC0\t8F^NI,)2+/_1q@d
%qW=mVkla+4lVog0D5Xkf8WQ4UH*I@3j)3mX7.<)1/kTi/-0;7,VDi#!2<Qb<c&^0g0L\q>UAkbCKqGL-:9c0%'M2sDn.YKl1O4U8
%nWsN]eG6M0a[#9QqSom`/\QVZ[#8>VCn)b5o4JljRbK0E8.\mn'n684:i+SY&pis1U/%DSG%]=6VZ"2^fG9AO=HAOMqq6$F=j<c]
%RA0X"D_(A@?S(kf63%"m"Q-a1opr"?k0+Pc[=jKZg?>?)U!m_pfek\8EtPCm(TY*)L&bq1kHSn/I;@E4r3+.RNJ=4:l"EpDiN1^H
%6=p^<(+!5o66u)f1ZR%l--eR\5b"\Zpp[$4o<_@KSQ9YT]a&2@HSA$U/P\BOH4O#+4_puDMLq\k7.JNpDb^*+N`5h88Z/4Y,#%Ih
%#3nT`.QJ2F)CA>(DOP0R-)ed0`rpGr!<KZ^^,bM)0!^Pa]'O'4c!SUrV\TDt[0Eg/O*4.hRNi3b">+_`;m>&7)XktMDbYSM/(*n^
%[.C/U7&q,1bF^e]fIFZ;@a0&bH0A.h]D%OkhHfj9BBG,#46i<ij1.I)a#ekSYipO&Y_COqXi)2.JYg.4?to_Z:ktr32Ji_=)$9Ed
%Nr%>6bBZUlj)1b9A67TE)4WV]c#mZ]X<oJ%h]#FtUjXA832[4N/MZaJB]#@HhjX5.F$.0o*8l<Ck&7cpcWPnha7N!W8:T!l<B7#2
%IJ'+Q0R&R#D7h[e4&6cC6@&eaJ_U-XTX."]'#8bAi6@HH!iAbd[#.pBaAo)fbkFSTA(h[`rSuYm1#1/HA/]IRS9EQoIUe;C;oH5W
%Ye`8ce'<#5M&k_J^,,$ndr+=udN3nC%r+`Aoc<uk:-3ApNXZqh<WLg)fEa51@[#.mRIe[VL:<ql2=5D';VuK'6`uB,?7ZJ*g>q6!
%*`\,FJrX&oce7[1SG's[nC8YEkK^#E9`&p5cTpabC$3b5]Zdh('G?g(4I'gKk(q:O>-L&E=`]W_lgP1&n_6@eQo3$RofI'bZ2*LJ
%CZCpB3'g6FCY:,IWTN9b":fD!UI68D>-dDLQu>^qr;)JpK*0n-'9dtg!/gh)h1Nn%S:;0U"\ZH%Y-R62Bt"'e&Sik%inI>fR.dVZ
%htMBB92_'.e16jc:)ZF/G":n_VI/0_gH`n6q]a,#R>ZFS.j2]1A%j\ZKdcE[QPu+)N^bE9;O@!LS(<"TreMC@IrpG`>rZQ,BQG+2
%2,rLP8,^tPUZ9+<O5G^\L=o:f)$)^6B[qsECUh2I)U"H*W.G_&g5n8ZVG.l<kK]`=c+9Mjo&K]_m],>ZN^23:en7B^*pZX^-"b$.
%*+CGV<&eYmjRn@]F[7t`G18IJIBH2QIE/^9E4(MVn^'0]h.4hXHJ8GU1Y!V:[Z+!8?:*2bHj.mmB%/c:%FE1?`4R@)&]YpF^O"Sc
%N@J7=E.s0U3a'po:,WuK3Gn9"9&H<]d!fWSGFiq\_:;!MfO`"Cga%/qE_@;THTH;60^I[#K*=E(->iVFgHj_Df#N6,N?eq&o[n*J
%86^9uR/J_:4T0k^0[oZW4^=;B1#I-!s7n-mr#`-A4am*Pr5\:+g\YJR,,^nor(lLjrSOO?^O6+-jMV#g^SVPAo#(:Ds7Cq_]kRWq
%$-Wu1-G]JZPB]WF!mk3#8,ti4h2kIS,U+H'g8HTnP]Pgt$/o89F%s?R/c[H"=N=9*#%Vn$bc<79F6Ki6J!dpHmIiiSpKOG;<Pt0N
%.W:3,F^_*o$<J4eGgHet:nb;VRe<<Z1_s.>&@gjc3H)nE_:@';CQCVWLiq(BMqf&sAVRuq`H\#7Q)`767[is'&DSCOkidhCEZ@@a
%KAJufe&L'W5@-j:^56PB3+4F6KQe6:8Ot\-Dh3&4DEf3DED+kdrt;P8osCM1XX<40200Da@0\mEJHQe_&lEG)Y)Si#!=T#3_InE1
%=!&%dFD`HQ]R3i4/D0ogh/hmW4ktoL[e_>)VV"C"8Q*hd!R=NVHj$1r3*Ds+9Pp#gET$ObJ(M,s5<G][iYf*PJ=5M3S)%N"K7af\
%J]utD5s(Y>=;h&5pZUptc0DCsnDNmbB8cU9`heFr@.h)m1Y.:(M^8NIi;Od9k5##N!Wn<qH9q:!\CIFC`L2ceNO@jl/"96gaa4%,
%37%/7J+fF1h`#fibdX3EYo5R!NV4kGacGYQ.>L3NlLqciM1Mp$Z]KLVn-o57-O93):>Ak-WP#SWKOcs/P"b;-9!DMNA*a0Sf1LHW
%0UjTUp@NU3f]J-b2Zm5=AYYOq[0GD+p=W6iR^[!J[Zn>a\r0XE41FXK)q.gqg6S#Bb58MH0(JI^1<#ed=;8\n6QpehNT%g;NF?(1
%=5Su4XtS;tcEEZ$o0gJ_MAjC&dB^[`-h2J`?mHYfL6%><hZV(]ILheC))Vrg1W`6GX38@*W9R87B:RMnmu8/G]*YHK1k&eTqr,sU
%m[fp+L'[iha)p2EgREe&2jhm&&=L<uWto8Z)i\gX.=-to5d,,ggb&h<.'pb6fN>s`AQf5&j\34-Pj#3\^%&kj;uZWMK2YK<Midal
%.#cC%;C)c48TGf<?P_E3g8jfR<lJn2>@(bK[7A@JX$B-taN]1E]CIO1>>3&^do-D$W$c@j7U-Xr_Fl^?IrY"o>0UG^;,-BMRbkT*
%=@*]3SQO^a'Q8`a'"Afsm7]gNSObss(b.&uU+I-JVC:/:7Xa0.,?PRu@('m5$5Q'Q(.nV>HSb&L7>SbI9Ht0EEa-lk/CfHD6/Qh5
%]D!GWXnFrcShm;H:EMZG_0;4l!fpL8TF0FFBnY+cGCmRVBqa\+&a=O.&"J5/`r_aqFQpVMJ\8)<Z"r,>Y\f31#o+'>0OXe1$O04+
%lJ4d*N&Q:<K8'L346fWB%rkY]$1gQ"1+g>7#,+<`U"TFn9]a6D6Z5s8as(@.e@>a7^W"[TBgE5q_kf6]Fg6o!fk!!!?_O#j)DS%c
%kEVf6R9hg0WPkt@;%$_W6S'b3e";l#D)&dBg;+8UYhhRdci;/"+l*)oJnYSJ,q+<AC^:-Z+lnKc!5`]OSW-W\pYXR:De;!t`c>_=
%2nkpUKl64'b*:1&nR5]W)?:/d2_-J[Gg2(;&lIa=Mr\??&MMK>>IUBA1%!HEWo$[,_Rf"+DA3i-I^[pG@q8!ghH=V*@(C>cY^miK
%.5qJ%leE!Heu[1_FZl=r8#fNNY]I=UY#;]$"JkE_"^V<qA._(2Xhd$WLlefBK&uIHW,K?oB]+>%JP7p@Ynmk5'PV2NNfV:?-<:Ln
%GDL2#R,X1TcER:#(sH7R],gKE-iLMNH9J%Ca5:^5m"g0?aE:JrT"uEPPRAL`'Q475Z7`l[`_\dSis=J4Y=Et]c5hOb:Ya'^T#_PV
%$-uTdDF'OVnP8<NY0Ae'#pP6&]:1h(iI8C#K>'57F5tR14,V]6,Lc8N-49\(j\*SlI'm+2P&dPU/$ln"0<TYKHU24pgims3I;@]T
%jW.,W^:a@$"X[.UDU]6u_4thT3NgENgWb=ZEmp*92C5Cu(kp^?J*G7WDdLHZ#fh.:U88+(='o,t<$kp+a)eeqL`K(D`R&epr4T,6
%VB3rc0(*?$\)psk:M'6tDh#3U"'5Zg*dAPG?,>?qMo2EN+@AMKb!r"R,;0:SU;)oH;;]$F1R_&LGJNcN]n-?"dd0%/80Ede.\Gn*
%E\T:@m#"Ojjj8^?-Pbmh4/9MIms;-Qa28Y:S(jR0;ja-q'&'@8\"L@8@\=E3aZP,[i*ACkX2_:G63QPMh%';D<Qrqbpl9sKMYmS4
%h/!WGF>M-X#IO_LoH>mUO4H(=?X2R!"&FDK.$0oqhjS`kB("W=p=m3OY.F9:70b='QaiqFKHPi+0ZO_M/H_UMr'<)BWu4=nNV_dK
%SEoh;n2F$j?_fMd,Ao;0q'F+G6!qe8L9`199Ze]IiO$3cBR,;2Njpn/>I3b<=H>hcDf.bg_bEpt`2]KaILScs^0C5V%:X(Tn40-"
%K#;(B6)8i'mAOr/#%HZk*AE@WY8K'LpKd:"L^4>,Vl:UfOWnJa"(k+!_I::^JX,[4qW>.8EiMpmIAg#1f_f-4!&"BR4n6'Le!ssE
%<;7eg$bk+rG6"ka>c&_K,&RX6o-.3UofMSi*Dop3/n,*\:cH(4Yokb`)H*)e?b-'I7h.gNdcQS"*V-=(T+?!,NcDY@o:SNKVA0Ob
%#kWdOW57RgI:g[3kWNW(1#aLP@FS!77;i%:+lBqehS-%B*^DD7MNNNaBS@3pc8*p*'jegM2Gq)$eaH-<OUHQ(b/N0SorWKmXS36\
%,WGJs\>JhR+BF/",6cn-@T!>o>uiPn8KM8=k#<Q%hn7k')>27t3'XP6E&P\S`0>UT61QE9'bQH0Xcm:''PsHQ4I'\l$Egt=/"VdU
%+lAg]^omY.X\W.`"tC,NQ=*RM\i_001q1c;%4"!!@MK6f)O.s@$@^lmqW;@Z$c:qL&&.&cB`dmOC.>jdG(-Clfp%q8l,%6sOT.5N
%+mZG"N&`EkGAku<T/X'-k:?8mDThdk9QJW^8T>V>:d:gmR4[QtR8SAlD>;)_8="MBDL&iQlC4,[qB_2LRcc?"aDa)UqS_R(Q%YfI
%JcZdm71!3b(U@sDW+l*Kl9+=XgJQjupFP@p]Y_q\B9SpcB1t+aCjC/OXBIoZE!DMKVRbG_FIB.+70Vi1TPn/U)(1K#*DPNh]K';0
%FBD[*[U9[`)-1]D$"f"-Re*Cs*LBe\#O/A$*VHO[+6?bkSrL$$^SEeu(h(A+5f-3VS8P86Mpni';DVj.rQL`B'G=,2jPLpLc-&*@
%k4S5L:DAG(SYkM<2")FFU's7)$^sd`'4TT6IVXsO5m8@md`-GlkaU%-o6<AUs5h[@%9+)H7%2j`aOfl3pY:k*XU@rYbm>XM't:.&
%(>'"@46g#RYB.@sT>C\$]`7hD&A!1?TVML<<7$p<jXL8k=GhI1fG@BYb-&XJOoZd-"igi^6:qeWQ9UB]<K`%M8Z"0L^mHE=d#]5g
%>namg8s3RQEEQnS7\OPDc*#_Qb%GAbV6pcP9gd<)Z7q,J%W1ajbPZ4W9(,t^b.coK]%s^p;=l3_1_fN%*X_%D'osL!QMcK7)A'=l
%H<,70I-:&Z&4TQj"^jR*A*&Xo%,6E%&V)>^'1jd:&s5r/&-d(,aq56r2e0SnS3pD6$CNu0FJ//1XuN:Slso=S?:M%^,;]o\2"?^4
%7,0u])tTU.p<0[>l?rkMS&p*eQ6E\>`WQZ`atg#U8Sg(c+f[M%9=c#3S``*o(I0l/?BdC%q]\4jJ-U7#WHaK=mS:G:i]e-6UjD6q
%;;ZZQTGf^uDNaRparAUtO$NRt'u[N'"LBA72R*C]m^4>b^*Aj6SPe8`dLi_Q<$]nlC.;4[!Ihe>MfDYtX*C=O5Y&$MWpn7k+8P;c
%^DR[K5COCaS-T#9&&7FS[`%oDPZPpA;-H/`ja:^sbmgJHgEaqPUp3Vq4bCS::bj@jFe*(/,K+as;MjBYiN.DM6or1Cg1kjYF"<ti
%)(G-=aQrBX5=hU?JI,=2>JkL?EudcX9L5[m.776j#7mJG--jl[Lh\)M=S2f;W<R%@2Td]FB[KT[3GcCXALY>-\#7nK<@q,[2N$#`
%;Bu[0cbMsijL*h7gkC%d5c.%Y2^i<R@$'BFAOHAm:_@7Pl@tf$(E*NjgtZdN&TUZB$2q:RmAn2kXIsNVIjZqD<"+IsJB1+*pWOY.
%aDO<LfW#P[f4(XX[h9)CJj(iaf(_@,CS7o,jbp%:c%1'qjT5!KXXdI?_L,l+d=*f\Z%rd9Ket7_[J3C.(H(qM0`4lWa5fah7$&9m
%9g(M*NX20504D]TY!E>U)j-'KbF]5\F5pb)+bl;8<!B=u3ED1^caR5fX9?0i"i1P9IQAa.`J7#k!W%=q84[t^6_Fo%h!=Vm"RO'"
%k&6u<Q`LHMjC8:heDCq=,c8<j&WD>cfl&aJT"%5`55]WD"t-Tp#QKo?%pjSRf^DE\f^U7;T=2bZfG_QXNSO4u8g%Ss.F5(?^E$0%
%pRf3sF(L,]l#Dit#jqbUJXBpe%ml^]4nP@7*>RBII7*"<(X8LJ^BDU-=.Gn,J";I2O8_<RIWPc>Vn,`,\t7Els)9%Pp]&T(rJuI)
%Q]M1EQiHXVrpAUsn/qYQs7(U;M'`Y)J+O`(L\$ME97+6%ksL*nj8\hjn,<NRlc3@k3<%b&s7,-!reLO4_nZ6@2kU)aP!5EAs7b^#
%ro$D?cD/_#I/DW&pL!k'%)3>?]O]MErKu;6fVjOAOii'RR$NV+#SdkPi1jU.JV.(*8%9VUO8X`q)hg@a%<5W^1Y6$!K>K!F8=?G<
%a4.dk6YW\gq3,P8U@Lig%Ht![^d'*kI/7XJ4dk?Q:'tD2UJT-bLr:`MjgcEhcCW]Pel%Qh%CAb>^^*K(*BP&"as?]u-KjglGS^`c
%1HA=_dJZ-;j&/6Nn2-n)]@n>RHe1cV_&coojTZOPe<pG+)]QHIdtYR:%8[0f3Gn!@.Ql#I+.OhUasS\u:p\1E3,NJKX3/Y-V*/[g
%igGQ'7n0&>l?ST`Nld?UCa:B.+obX1-^&iU[%SUNM$_2`1oY3m;&1G/2<O`)G."DU\KJmSpQhZSOAAJ\'Q^L__;WC-OgS09$8&XO
%V1e4E`onEPkmH^BcsR#Q!3\!iDW@'5(%tJ@AJ;#dk@7ZJZit9Be#skcfuOg,(EYlM$>INqK#L0L?Xbf+&B[oi'+K^bZS-B\`!jr$
%V[J;G[L([[;nt+95>GE0W<:jji$eTce)SdiEm&i`]sC9H8j4(7bTh*0Koi'99VCGWOcgM0]:?>$nsc/FU_G,)X&2mp!uYMq&Yc`i
%`PbT3`XB#qg5oa_pN#!'`_"dfls!"YFEY212d5I`BRYmoc[E86ar]A'7c:2g/M=+=\M^:%Ba(/h501:,f=3IJa"CLZL&eQX&m&+l
%7\tKc7]i#(].RSqbjtBm+SdHUW$55F!$1(@'T4_c\`!YDhH'.]%*G7W8RK\;,4e-Yl]@N+Zh%=.a#f_q*>[Q;EgV4dO&.[pO&`8L
%o^G^&,jp!:4gq8QQ/+N=:duf!9N$Y'c3A8`iLioZ-Kdc=ZIggBf8Rpe-KTq%DW!Uo&(Cd)kl;hg7QACqA<c1+1N;95JUE5+(HN'!
%C7RO+J<+O/*l<As4s4$,2J&.jkkF'q^\hDZ8>&i7ZDn![Mkblo6sn_+82ACm[#b>=Cqi<W>@krt)G*4dMUJm@*.fY\)e0C!^&;Z1
%?g^Ta<uiKF)d8qGDVNrLAA>U_rmS%taJ$gWg3Au&kKin8cYrUW#K.mp(ZM!.bBc\&dFgYd"qc5Q+@+%B1a*t'`XmT>[BWhXRL*O%
%,M.n]ZBM7?,3m3h/b(&I\*WA1L%DVUEP$mhWluF`^e-3NlkedXc%qB)e?Y":kJ/;`3dBYG_q,1W904#:!O.7(P,%;@`)a.$7p$@!
%a4"W1X:^bA?h.;3WQe;p@#fA8+PGo`H#F(GhO?`Uq9;SNK#c8f_7"&\p\A+hOe2o9mJc>BpUmF%n<S)%]XR`Rd(AWkQh**F\PN-D
%fcbW)S-b/_0D$f%IdtjS9>Dq.O2^!cB>)r"XGM&%Hk:auVNhHah.an/cjkXO+jV5S^,%("Wa(0.fAm_S-*8h*j1=tX*6S1)7jpWj
%B$Y\kK;8lF*s@s&qB-aYA`+7R/8@0_,VI2B:I8d[[%\@:@Big^q-1qR0JAlr;Ko9,\/(AWetksr1aBt3cG=$W0+NO,>q[U21VOh2
%;Wh![,KS-[,aq6@F21C6WTuch!C>cq#DK,a$3F$!&a2t@@SC6(OY-YebPoRpgTF(MhLaZ<pTiSt\8MH0gtV*pCE1'?e[<s@@_uHG
%43PGMjPFZP\n3J,]DA&k8(Sh&H?TP0+!+a@E:D[`#_.)D*TBlO>DY>^UMCH3\[NJsPXj=MNcK&,iZB4GPBc<)<Jc3ME*_J*I<9&[
%e%E.JnVqd8Fi(t=egJ+I&$Jehq!K'>GP9Ea$3rf,:>sj;.i&'QkZW[Mn#f^d_o(dT%_fPaSUYm+c,-/u="X@/iH5M5hc[KL_$ASp
%?fNO6m\T648t%A#]Q5jj]P6m7);M"K%Z-IC]ec6e>1ZJ\'Z3>U9]UAlDL1Z.U=""`J-ctcqWCCTV8#h74C=AEEPWS+6L@O81p_;Z
%S'nJe8AG2-SoHuPAS*B$>4uTa(KCr'1]n&4)nA!P"Z(qu7N(jZpnG8&SgOVkb;G`Q2a.f$W<ZL$Y+*MXN4u'7"IKUbDC>)5Q])']
%;Cg[%6#qRD%+aRbe\"=A14Y9`\.$`$3..+ee@1>S(%N4)W.4r*/\WZDV$F\u*T@=E@$_7Wi\[<#Pm"TQWAcKBS8ZU233U.".4<2[
%%HY;AL^iI<^uC);MiT>F(9Q.!$QuX,?t@5R9oT@TD/,''4C"lUYfXSs;5oI6\`+W%e1i2f=T%$OhR`&p>Nq3t$Z`YtPF*4!FU#R;
%ie_[lZ<?$E)<E^eC`87\I[<W1#$q\OU0NNIVBC_)C`>Iacc+B*%:hjeD21GRr]7AapLa'CDtmkd/MRN=3\mNU>IoRe\DaLo6fqAM
%Xq7B2P+72h5ZEjGQ"\IpU.7`d?;]Pd;IACZDm$#/k">4Um:>JNmhe1:G(#?N'8dMb!:4#c<KmPTXGf*)oA2D7--&G(1:/tW[<?G<
%jKqagK4G'HEn"fc_W>53HWHAk_*UV=Rp&GK$/s\M@$b%T1RER=2V4Y2.H\>M1[7nSs37(jql97F%!V(giTdG4dT@.7B$(I?B;]AW
%AM1HNZ4p,VE[`Xo)kT^p[7!HBh(e*P69JsoHLE[jji5U'T8)FaRF?L9s.GJ3RLUXp,PhM(drWS3<5r=;%ob8U.RjH,M];K\l*mN2
%4';UC0"3F6,&R[]&*i8=HNqom"8*?$S'`,&5'&NXpV(CVFb_>BLA/=hB6Q>#a6&?0JNoM!`Y.gPiEu;(<%McTQa(;.e!6J.`s%Gc
%:t/PX71@&Kp.4C$9+p'[s#Y:Jmu'BNZ?"$EiC;"k7cRAiiI5gh7Ch^%E]>1kc0;?!=mMdu5g/(Vft/Ap3`20orCISD+tA\8O2WtR
%%0mlar&jDkl(,!rjY["S\u7i`=#g,^5b:YM-J$Z,ZlnE;^=gtofU']k')FD#KJ'F"J(m`S\L?/FU,E"_P5+p30c1,fiY(--F*dT,
%qTuOc*JU6TTD\nL9gKZAAVh0g0aal,.F4IA_=sNFAR+r?+NiK]gsDi#!*(o,nVXA<"3Y"`QuK=dcKX0@G9CV:J"kDl2`rO(V5K"_
%^[nJOCL+nP9Q138`1p$VQh[YMFD#V6!N+9)XG"*Z]TuaVceeuP"A?[h"m&50cKW#J=Z#(oH7/<9.qSK5'SM&bEj04KR+M[Y-S+r\
%D0G!1EqlBll"pV9,02QBQW[(().TLFAe`u*S[pbZpNC,aVMR624TS!2j=I:*T1WK#<p<^#5@5[:TDNeCa2Jud%O3"J[jlT3qGsHt
%4>3SYl(nbQ<\-]qc2s1/GL9p7RF-Ari2HZe8_[G`>#@rl4#7kIYMJ7L1Qa$-;\7sILI^-20c6>liS:hgmS[I4%Af'_Bi?;#TD=U.
%jTruSaj'j5(RC4B_G@ZJPHeKB!9\H'Pt/'sl7:\`7S(Jb[JU5hru$5dGuXM##-ap/]6<,/%Se<1>%Moog,h5kG&mJR4i\1":6/VH
%Y,VIIq;V`,_KhC-:t29/7Uh;1)83ZFhNUB<T+qG9"nSDCR`;;1TWRZNDa/Ws'fC_@I3J=9N:=N;!uo(GA[^mQ4Ca'"?"IZ]U'\VX
%AZ"P6Uu)!T!,EQ[(m<cXkGmIZB]Dk<#sfl#Q$e6#HXre2eE?!]Hq/!sJ?C]<WHFEeT*lmlVoiH/G_&+keWlV"!oi(+e@Reakegp`
%T3n=KABr@&UYLqQkmSRl1R2cA1InZs@pO29)72d%9usTbS7p6<*LaUuq9`FA?K!N,2`l,#lk0'NS'u^k2+m>k;#@h?GKeZ#;-_(0
%^rp=L:LJ/RQO:o(I+ToqLZh3ui9UHndn<ZK"*O,`cV4BDUd#URh3lW:qll/BPVY4aTG4uuaN(.+"Yg.Z"WTgS50H_?8N`\Rcil!h
%$qRYajJQKHd%MR+i'ei$(m[C&#sBTP[Y\_22lHD`l<e;+'*=:e&EI3OMR_L=0iA.u_o,LuY0r1<'RM#q(r1N_!BTnnH8Qhl^`f-Q
%D]rWmUtLZ!+Yq`L^rY;a+?TTT0aNlK$4]F`%[AsagT*0P[$ViN?<gWD7OPu\fO0C*K3<a3!'5M:\YlZAL-F@\@^t]m8R6;0762R`
%W\Ik5_W5He1FpqZ%N=H]Js`YTpljP5;3T[3HGGQdHg//-SIPAXj[0tMbY,\SngQQLjHLou)[BptJ2W]m!Y\,NR/%pY8d,!iEWV+B
%--u[K@j:K2dJ;"c(?\khU*2`P-WM/)P6QXlgpo1!<T/c/o]i$=c/?KL9.<Bm=/4VE8&H<()o>*$PB\o/s/"tOpS&#r$)66:VYCGL
%YB/FW[0-pD$`X%YKZnbFB(=fP@$&qY!,+StXcGX_<DBpUG==6BB6:HlH1Ile6>m!p@ji40UhR```QMOtb$G,j[08^h_i4;:$"Y1:
%XoVbFPm&Dr/OGpbgS[eN4^T!L:lhC_6U-<c_;N(@2,BujD5`'/[_l-sYLnZ4S8arJ>XKX[=O_3K60:s/i"\[qr_tF9VajaP+k*)T
%]("q;khClXS!0t!T""n=;/&s7'UO;/("Ym.r0-:sAF+$l];auAPh]n$O(8K(-Ib`Er.Lm)am.Qp1JUQM*+_4s6OYPm&!*Z32*Yul
%LDNao"B5h"]ppc3#BSUr@'%SQZ7k891j\)&;<Pt8W=MSrBuW92c4@^k('k%!%B.!+V\7(o*,!\igP"Kp*(;1r_LPcZ&S4ImYH,:"
%9f!1#>THq6-ApJYJjIPGOGQ5A*NPAEEb*(#5^(!#e3qu\'\7X?5DYS-R[N)H$:AaI9TDKeMS[LtIZ&^a@3r5m7/SVhfgP,%'!DKX
%)S*SukK/a,;oD.=+O4^UFgiJ`brJ*;KZ`MIii$FD8*D`p^,4'##aK'nAnE&hKjqC(Ot)b--fK`PggsJTX+iA?+De_]Fs>L%3d5&R
%+&@i%dHr"Pl``W^*DSQbiC<Eo@"CIY36M"PfLYM]!7^t_3Y$NNDKAM%Sp0kE:;F>kL_l4o&iV%#)nrb\]ii[DfGN0V-D9$.<+#;+
%!],%X5C0*prnX[+Hd6[<]1jWF?0!+\>aoSOgs$FO+GnIcYDPq:S<tLcg5(,k#;MC3$At,qU\[5na^iHQOr9`U;n.P*m_0-TbuL:L
%JlRbOl\*aZDcZNWGE;+[,EePZBh.<pM[h8U'n>kq1=e53Ja8YgoMf(ohdmtT/5=\^lL#eq)n"6B/BPU#HIFJIiM#0fr6`!)\/E\5
%0W)i^-i'T>[0M0N]k,<Wb:4=o5MBi@ZJ)@l-Me_ShmIiLQ^N0kA/CWu`erB&fg&RIQe^W8"'i9f[>69X[772[$&Y4Bk&bSAa:MJo
%:Ot!f/rrEIrC866,YW83[?GP0\?[TMU9,4;#R+is<Y^jn9)o(ciV+2lE"-:/5BSBc6K30n8>-TE3(NhcaS)Ur"g"">fRfGSa3G=!
%_1XhiEMAsi$>:Pc-oHeJh@oa$G3I9[DL+qO@4XIdb?faJKlb<RUGu)X#i70@Dk[?KGB*Hd*I)c?,*;-,AVe.,HOGtPH4MSr4SIW@
%KKhT3*"fr0DaD5^*aY"KnD-NiIs?'<_SLF4-N;u?V2<7L>F`u'4MEptPXcN<*dhm_nniYcOn/Ib?)IBV+'ki?3:ACuI^'quX9a&u
%E4PP?I(NeVH['AKih?)^/c=SdAW%DHHOCY[NfPeu"?bOF]SJ=jFSWeiG8Dt2iSc*L=$_Gq]7O<RK&a<A#uY>;$V]9#*q[)OGuMSI
%?S9&E(D)JgDkh.o=2fjC$dM#AX\m^C*ehH5ad?^A=!]WKh(eh(X7EqQrH_f8]C.3Vp!+oc`nOaB$5aIm/)n3/0:RTj4uRmIPKhf)
%^^F`_p:7C>C<^=Eh+@^N-omce/'t-iq`qS1dIj%j^%XtUU3%j+PgWEGF.&(%#i*$'0=$-DP,M5],u?iW2_nY)CIL)@\jS,OmL8*@
%(343uPOX>rraJ@QnTIZG?M1ibP_XOt<"39UJg@a[U47@Sd05XfeW%WTaMdDrc[#TSg03]@+cI2NAU+)4G'=1!L/+0gER(eQVBac4
%7blqhPhs"8G&Hm.5sP_6T>)lBhM3h;^hJ,>02Y2/NFN=OeEc883U]bR(Wa*=!bjW4m<!#k$m66]L:fhqbmgCPXt*4YES.dF4/[:O
%_,99N?T?P/rNlH(iO@s.Dfr@>=k(E5lW+Z;RC0mTK?#P_Q+&B\UpRfC`?*\C1!$Z93[,TWW^V]hZ`2esP!8lTMN,MjlO`/g`X9dZ
%mHVmu$I!aA7IPZNcsiYAjY/QSOHj\i32[cCGeDj#*jERD<`Gk\*2,br[58HdhKD9sqgANS<kF!WdnQ]@B+G&7hmH/5RF-@go?PI>
%"kp"A1j4\+iE&U00PdA?=`Z-(]8MU<!\Ci/F4Us4kQF$_i(VG<601.%k-]Mkq(Q)7LE524;gRoO+8]kIVQ@Jbk"?t\X*ZYTC$q%T
%?,Xb8,/@b&jaTX:AdRIMl7VBU:9Z`sR[7_Qd4XJ7<)-;(]UdM5?Su$%Wd,_M0^QGeE-WMAAF;qXHqE\uXj60sW,-n5+AG*>?^I<9
%`H21('M[Y='6VY6.c#pkC?9DQ-hZ>_%DY0n(DK5rO.+8o$9k]C',ni!M'JReFKTX;9,2J%d5!*SkHA6XE^;fDF)9JspVTJcfE">o
%[J.?p^%YNjKJj\`6BE:m)XU\=h4RtC9MVK$]GU_2L*M&@L_KjV+9J@&>X%ruh]#!S2,FY_.&+6#GB+VlLYu(lTTf._:@J-i_Z<\A
%MUI]cM+)E'C6:eNRuhdJ$'dL^m!JOti(<8`CL-:IB,i@m!6ap:&IS#t(Ts^Mi9/cO8!dQPl('9:].84FE^#Vc8HG;G<e0*#CrP>2
%%Q"E+DWk`tcKgSmMF'IC3[Ot^^m$K;2S59(FY/D.\LX=?kd!Q%X`([)H?VmQE-/r%[?6S3OrGO7jkG\H<P-fbH>CNe$7o9s<X'7:
%%Em24k*@sJ-h*0/m(uJ_qpprIE2m*PgZ`<Bn*S2fYH]U_IE>@G7>&JBOAo?DZf7^\FU1\OFZZM51k[HHi,;Ipd%d(;"_rj9PW6S8
%6O+#:61'`O"RoIJRF?MthXh;U`>X[1>\.M"#][-D<K^<<.kB`kdg&WR#s["n'm*K3oW7@#l?\F9%m`,nHg/WRr80kMOGa@tfMY^1
%di>X)*DE_32.8-#P_DA9lKc*(61=6^<\M2*G?>T8TLJ`bg#8q":#(r[NO\!>5So'(!$Joh";:bkH$(EOHk!Yd7F6\u8J)KfJWqf6
%Taar#[rZlaX3U.[daQ7+/FPaB"3B:Y4E)?U0&Z.(V[fh5ClBUW:O<kaJg*FMG3rt+3-[nR>>W0&c>3-uB_:$s]t5X2H'0%%<a>OV
%`<!0^C=9Y$n-(Ai`FXVL8$rZOZ4KZ]XK)FTPL;iXJ2?c?UWTE;Nbt_?E\O6&S^Y2tZ6_3Pbg5^X:?o,IIs@'-P@t)3^sfqGAJGo[
%frgR6_TfN<LHP1V)$:jb@<.pJ:!V#-nT=i&,#$;LSDN(a7=.-Y[uMa!kF[/S.VcjN/6h\&"eU+)ATTc>#ZebO5!E`BhW11J7Ngok
%0WLAHbnpZM$8S6+J<jO2m>Tp!RSbuio?2n;'n1>^e.n#aab>au"Q:uc$P8\%i#[Q,J]B-ga0FSgbh,A;1=%@TO:`#lGIc43[c_ls
%Vt[mi?U>+69!=V7>OhWpYNQ_mpWtGQn"a$4=)Q!)LKj;'Sf\Xi6[fBjN$,>%fk/>P1V:"?d]9rU!M_k<jZg\GS\#Z(#;Vh+%f/t>
%P\@gud.EdRoDUWB%hDr7*;e**r*#ZRHS<9JRVTU<^HR^./^NIHJleZX4=aEGWQQ`]gRgo,cm<cjR88mOW^9YK!<_FAB@4^r.mq-=
%AI`1W\=F>B8HP46L,TG4K@?'NFeJ#!BtuWu%K8e:`,G6;RR'r[I.V\/O)6MWqR>0d.Kdn=X+cOp9C,lHgXW`0A0%[iA'V7g"Z$VP
%0(;NXD6RqrfJLd?SgqO%4;%ZkkOnocZ:04.JcWJVJ!8"UYk@*73RXt9FPgV`Vt@RK;*6+.eX3IGF%k?HP7c`dU-AfI%\#C@L7&\<
%gJ%$9p\`B=X)00E/"7lNU<7IuBTd$UD6<!``-#5]K0u`*FZRAnl:eJ>,7WR&&?l]<$U5e=f%-*\Vka&3[BC*p6P>SiMr>KYF;AZ<
%BQRN9IN=6-.B>m:;;UKZ$CeUc@8"/4.iWEjbZ896l%AsjPS/dqTWM`4K?hF#=4m0*&@bBj*#`+Ir$BoV!Ll:1'&+fB`F"C<>"YAK
%($YKQ6(HZP\2)N&YpPj<Z.S!G=?UKNFGd"DPida[]iS]qmUL:]U;j,cV]p"MQmIm?!nXer#p5bd:g[`Pa[g-6;nEn^C7":l@BFe9
%D&.e9RjGLK`PdGJ6ZHia*@0D@Me+O?/MN0eX"WY2B-7g;Qqu=c&LSaTbr8,/S``YIn_,a;R%PY_DIG^rJI#YQ^A9<6DVA(9@\Un>
%=<NYoCGsX[iI"fc$\1KW%:oU&M,NnTno7UsF`c*QUa60Ek$D(;LWgJ%&]rMOH98NCONXUCqN@/o\p-9G*boe@;WpSq0fE!_ph2We
%7[X;2QIe!OqMH/(!c,a`)@@E_0W+6qLJ8uOH"GFWLW/pG-IrgdN+-DFMj_Zi4`A1[(lG%"9i0o=-,75]EF_rjnXT/q(Hq!@65n)2
%LIr_*e0:9Q6EcGL3=?SU<ICq=bTYqnki]#(BS>b1ZWA%pc:S@bheKBDNACG>U5V+CI\Pp@@ZqnOX>\HT2/68;4"Mj"5iC1"#i[4L
%FGQQU&i&$lftIgpU2C0<,\"-2XsbNf;s%>,LM`5p3!b8e.'fD+TK@^Tl)"G6c$bs@Q-%i/l]g]&JTb*Q\1_=*nVU_DY$<Nnj*P[b
%AqIjS^fMR_#=ZCWhIS\\+Is?c'4ne3C!ePk*HlK>Pu2[I,oQpmI]/?2ahrKgUFl)!e$%bLUK3o'[5KQ\"PZe`WZhHta_LuJP?OK#
%>HN.D9'g!I1acTfqeq*[hh#pEZf)L8rrZ+0(>PNe)D<VBAGToG]I`r"kDPPsDeUmq$/b/I9/*PD=nmXta`JdXj+WC!5_I:s&$ee]
%H^'K$,78n]m9TQ(&FU)]_Tmpj&qAJT5fR3Cc`.Jg4`Ji:Rq"@$HI/I283Rc%JE`%E3SDtFD\`VPP4$B'geGWe\<(4I,9989:R?fE
%V0h.?l,3.:G['j'T-%k!]@Tqb*Y]"<iE,T_K'l'^3`f#@BgaI!P*cN6CZ[lGQb7t.4is@OQJ6R:s2bD?Q>cie\?=i/RAQ^VR5H)5
%1)DrQW.YX>W:dF4FsMQ\,J1,]^HGQ1G>2"[,GA_XFRNrThrAefJgADI'%B<!o7ui.iuXt0XU5],@Mu&'7<4u?1_#9qJdl3\DBL$u
%5.hIR!Aq8cDo&3dYtA0"hC.0j!NBnk^u!qd5$_CqjjG'<;(RBZjIS;D[sXi#3Se#S99AmBSe$a5c)LBbgaB-2V+Jmf:&WN&+>uJ8
%&JDNUS')A=R(qK=V#Y)hgW47D4sVTiEY36%!X+m0)LgeQO7FGf1?[*q6,2JWh'>P\J]_0oFHGf?6*ZDei&!$(3:NYjFPcrnXl>=@
%)e8:'#"42.-16ZSbu2"q5[Q*\-[>%17IrR0@uq%eZn2GS:e](Z)F(JSDN]!Z2`?TGHuoPXoFS<gAkSN8)3jH'ln$/V%&s:a\L8t:
%.%&;(K>1t%:Au$5?A[?ad_R\6`5COq!#MVLeO?pJEbX_Q*7O/<Z(!!FFK6Mgn0a8@!F4KB555P]?$N*,(<o)['Qk`\AH?p10SZ)O
%X1`d`b[N(iTVf[>*FtSA01%lS/:[/_7rEKunadiO_$54+4rU)8>gQMgWAI\=;klQaC(PE[MmDX?nomK#^snQ5!46Kcee+ft@Wk/\
%/+&:tfGJpVqu(TTN<R6q0)F(hXK)T!6'^gC;[3I4pq!,DXGH*J/ZJ[E^_iEOiR*%OL[tek8D$g]0\#BX@68:?_j:K+KffC_GR38r
%6/oaON@dH")Jm!W!8u2eqZ:_Kl,WP0%GNuba:X[dRnN.Q21JRNP@`o6\A)#-?&lK.Q7jg'KXk%BA;O8c-WdEn!hp-BC`,toP<Nr5
%Zo).BJ-)FRP`$i1;*5s4.L&mEC=.NEhB8a=8l[&h<,bVX'*I&W,T?O?MNjk[MjspGSG%)/;\T\nR2],F5\0ORc[g[M;?=%#_1YL`
%`@uK[2F%;/j-T>`Tgs'qnMh_>YV"l?G:-cG2COuO.B_o_U-nFS>+4dDWjtCdp@O.Oh0i:!%]>sZ..Zl07#.laHJ"8=P^Hb_o#^N'
%7-KVZ3P-oq6)5/VNo1C6nik%9cm5NI``(b((^5f5c<@R#Xg@e-lFP*7r(si!YC7D?-5KF6$&JjWb(nTdKa4VD_q$+'b%N!Gi<08F
%+f)JeGZaVM@k[b^@_*M&lS=W[eJ['SL0B-OKmQRL#:i%TpO?@e5?ot;9+fe4\^UZ6WoPMqa(g@@f>;`q2i]:@D!KhR_:AJe*[0]+
%]eWk!ET97Beude?CSAUs$WkM80N?OMP:[GY<iCTndqjX)!jg[#DEK>Z-3FjmD[_i._7fEhkmG6,AP,L+`T_"hi/S[hQBK>#$OHui
%98ar"#X1u<^3&K#?u8)*=Xr,2A;Bp+=-so`J*u@U28Y&Pe*t8Hh;jQjQ$i]r9=.G2+:2[EoEE\jg*Yac#e5dAe]RX"!G2-#c_"Nq
%QPA6"aXS1@-$,LE&YWY1K7mH!NmFP5K:r_u_:P`C6*-3$:;3rjoM^jU+t]!BoO;j==Cr2o?LBLN2'Bg;7ikP3m=)'_M:XR>ETf!O
%/2tlrn:+n53o"IGh><YrM6YK;gDNf,B2Ne7'B*FP4X9I>r>`RIhrEK;gn(@V-X.5&f!SZid#<T1pZZq#OmM#e'KWp,<%=Khl&7OR
%-3J-\['"('J>-H,&U=L9:D#P'WTAb&RU2*dCkXqRgPa'_<B)!rNk-Jm8=PM8CmT'1X:&iT3qUdA6]-I6=O1X9r,rjOBSXk/@*W,_
%,'6!.TXiiAIQB"G'0jF<&f[P+XV'nK+c>Z5Z,6RPfH^:cdg,(#+E;Cq=Za6k$]m]B21CCiKdejRp@-:P3)[r_l2/NUTc]`o^M'Z>
%EaRHsQugL\9e[bh-g)G_)8sfXX3&#CO$"Eo*pH[s[QaHm!C+ukDSgc45RMPebPM=W1Q&i/7p*6A(dkXV5/a)rY"l![03_Vt_ti=s
%G</,,mJ^6pAuihTA<LPX2gY=s7CF++J79C?*Qa:l^9!-Dd$un?ndmDBJNZ5h,o1iP,rA\?0Vq7,$Z1YTOB3,J,F)`<I["fJX8*K5
%HA@38K(Ork+m?+RBn#bkT,1,O8!R4T'!Ms80BKUiqq&8*bjT2:*p3'+cM$q)fVoN/l`sJ%OJ$bnXMB4t`"Z^J52Sk7=\+Y)bVS6W
%n(#uM0'9]JN1dEDr:U\^e!A9]!-LSql\JsS1XiRb.Ot0pV-t=^5?,Y]cig'1P40I"<'Fc#RE8orXt-@&&Ca=pU6&`"m/Z`7%%4"S
%+gA.EeNIuLZ`pW-&qhKu3Hmi_?BdcR-1hK@+\P5!PKoBR$O#?4lReueLpIW_PG=Og4.&Qe<sdq.8lCD3:Q8s6.C!#.176VQ"<R\g
%AnYj.Rk99O4VaIF*lq2o8XWS9P:3!I2QfIl3cM+8DcL,=W"FpLWEm8):4grMr$HL`:_qB82?:1?o7N#R1l$>4Z3ihC"Z_I.fX7\&
%rP:lH\V?OMe*-ihnj]0^1MWGgIW1lqkLKrPj^Q',.$5=F!XJ8I0+0pdAj6#+^i<n'cH"0ORLthY6cgi6BV51]g+6'*ou48oZN7Cr
%(XFWDj)HOi;iqkf,[V&naHL.Qm.r@&2XPIKam,2UD5&>32$^B@n%9I)>IpbibDc1j1LhPn=N@S/;^"A37iq_<jA*p`2)o?Op8Y@o
%2L\rLM&'*>H4(b!dmHqa!MJu)#D_rHe2&O"4gR]VQkNnKnpD%=M>X)ma.+Hdh,)aD+qgh@Er/-8dn)c*NG(BUUI\li`MBCLT:+,c
%CJ2+D87Z+,*o6J@kM;Le"5=bTmf<Pb[J<W+:W$f=*4@*h\=MEEBEt='&(8@q29nRC.]NbEJ)$`43JDWYm>9:0\565fge42$5!;tF
%;HJR/P$anpEain&-R3b9CoaST%#$[HFd9CcoNR)eZ\KW`!d8:O3]X]B/qD+>aB*T%$FJH)ASGUns0EC2=o+XRqQbRpV#?s0aGSdn
%AWLoUCSJEcMGg?Rq>3!q^L!/0RjMEA.26#e3G7#c[Jh?bq'H8qJ4rK\O;\M1:Kgh3'fSqiTM6:3PU+='E8!QZB"_,B;,0IlWV4`F
%$Su&*V'q^!rPnP$Me018U=2oIAl(u9V$'e!J&0]7%fss]X$KRdXNPlMZ`^TbO-IdbhuK!_0u[K#'D<V^bQq$_g!&))LWJC?WCb[C
%QAS:%`=GLWLij8nc;6VY:HSuaJ+u;E[5fNuKRif1=&f68*jH3U(;:t]-G&)EQh*\Ep(3r?7`i$r!85jEa&m9!EU3*WJYU[?kB$hc
%5H#bS[gr?^,((^0Yc&C7AYuE]J_Q_Pp##gWW[[usW?\HQ7U@EHSMG%_.@g(U6<TZaq?N=Z@=uTnMKLBW7"pjkO``<W<QN<7doKGa
%VN=?WNTi^!5&_Gm7D:ITO't5J`G+q'D>5i*KQ^q'M7FGVH7uFC["Ff3a<Dto;/"7K&*i-dI.&45;D<V[s3@=6165rL<&8Zl(sQ&4
%rP]rtk5\d#kq&*ikDUo1T+b</l*=P9M@pjGfLtk`_`!Q5V1cuE:o@)$lHr9?H.r$3d3_b0fN@m@/OKk3V_>TJP%RK_A<mu!@k#go
%=grF!fE=E0nl3=aoDhS=U@;e8i#WVbN%R>ie$F!DROAPM.)C"&g7uJZl4rN4l',5fSN/Vn6P,\CQ"Z1bmqQ5lD0W:bra8$eh?/T/
%U-M#<$YeaHq(Wt>8M"fFpY#NU\A-W]pjh^!62^t<l"S"l[X:Ld];`GfoL`ZFL`8ZY"<+XIecW^*MGg'_Xnc])9lN]\;qcZC&CX,D
%"=TsVo'&6,!qXQ^`MsZm:m'ue/-nRBGY,Q;YXO+F7%r+&_#:;"NTa\[B]I^^!Y(>JW4cLM(GO1R<<Sj==kocHrn(phhTTD4F<;##
%%QUsc]3.5jlY+LYXEnt%;kGtlD7ST2kggdD[enH2;Q(9ZcF']f'5B^6RTCmUQ5XG;U84+[7f%QU4gU1rH%F2)-jC\C.);e8HS2aV
%o!l>Q"J/ds$mXf<"!ScH^j,(MXO:g#8nkP(dUY&,kUbk;V@>C)?7^VDM5jTbQL-[&Q0h3agA"X]3jchfb*io>2`7>kK(r$%?NK9H
%Bc_RTL#"hh.#`sL\=6'MmOB1?_DtBl$8[C@&JD&4S^%.]VNeaUgC/RFE4o_9h)I=\daHP+4*16=_cY9cc>B"/Ypl(E-=9c?<DpU<
%N(IDU"U[/:Qa3;YpR.q'+hI;U@R16)3.n[BN0ITN#"pX&g30%pW7aTUoft9o"[SA:g,Nna=ga<aPkA`X*SDenor"?V4mI0gB3:dG
%TWP4ajeL4q)Wm+BI6u7tV0QZ5FR4Zgr-BCkg.HS(_T[N="!kUQW#fJEBOoT=_F/V]-b6S80Zt@"+DbJU#s)#K_8Fj9o(Qf(i`:X!
%$"YMkAEd8E:Wj>T4/g`RELSA].l2W&#B6m[R'bALiEkLk"$)%PmfHZW1EZH1:>mBOJ,3rpFB'(/_HluNU:M871qTFtSSeKZR@cqT
%?JjOUHphHBr5e2hNMj67gjj9_F1q^Dn3#qZ!rE!/;eC-Nn[faConN8N<P.Z,@jm`Oc'FX=*&2PBWEu!hTWmFq(;BO!j>3?Yi=/u^
%m/dF=/3+Z,)s$*Jh#e0lV+29/31W,;VD#M#X9tLQ"(Wm<&g8dX6*X;,`DbaL,3GXQR9^b"2L\L0FZ:*C57?0>,fTIcUsqo(JO/hA
%Kr$H*(X'6B=:66A8b"IA^akSd,B4TVe5aXt2Lp*>.@?H@/oGs(fjLU+bP"Oo_PLd/h!9kUq-aS*7pFFMCC+.u\G!`C(J?R%Vj%%p
%Yl+5MbY):i^3_3>LP<gZUbF]8Tu,PEOr>hd($p`4<hFG#S#Ti"LJ+\4PhU.9$=Desl#_$fIq9tmg%gW[AklM"X:F"U*-$94m8gGe
%'>lD.h;q"X0Hd?4eS:%pBC`qYVUj.cg0YW\0>Op@S18:hZcT-)@O48MZMi97i)UC(dm_j^lJ:B+0T<q6*TY[MjVfn4mgtPu0.%Tm
%R7\qcT>&196R?o$."sOLm?]162Vo%5W?h31Tj86FCd!XZKOW-5Rh1[%d"7:+kM41%8&u0FI%QH<r=Z1"S+;i4kaa4S-%:_6ps+U"
%b5NAQNc>E^'lTPqi8)G%a\7Vg6YL_tPWDU-C@uT05#QcSAi6/\/_W<ki@MM(R/VVQ*kJ1SaQ*-1F!V"#\tCAdP5>c"j>.uUG1T!&
%h^$=3-)RBn:=V-]aC.4'nB"]t$1$-Rhjmc).hSgte*_gjlh%SthtHW5'8(_HdcZ5MHV^uW,qN5_B4;Muh>NqPF5'a_*u3<jG]l69
%O(;?[)^,QqAP'4?P6'%l@_qao:X?oWdX3Hc9T7*#ZW`V&UNTh,)i1H;B;>7=2]qV6`t:1a<pZ9\;+EN5pgO'AVqX-sMS$/TJ,m:U
%IcZ6g??'pCJ?)jgp"@]q/Y3VAUqE6EWFSeGiO,@0.uiZC5^AMlR&Qp[SeSYQ<.rMOgi&Z2nB0jVObpprPRP?BnpsY4/V5=u4EatO
%/p(5r#SqRt/#aR[YT<0oMAW>iBu8XL!i&o,eSf9+XD?R'TC18"l;/9OBOd0Y[M#he*B*lkcHT2@:k]WWhW]=r=$%gXYYFt.j#F1P
%7!:KCA0H3qRs[L![&F%-fUs2.YdO(<J=7@b%0k6j12YhW@/t"'\'_;+)$P$]Wnb!bX2%3LciZHQOFF*e%'&pAVUN02e?0>$Y1&bT
%J1oV9,?=qhH]QEicO*2]HkC/BHc?kaS%hiaaR:dsT@c"37d\0>Bb'K`Yn4"]+'ZUq1=^H#^&DW"1uPfGbgZ(O)fsmoA]jf]5fuC"
%n=rApIg_[4`SX/d@W;oEGC2LM69n2Fd8RhN`KuC\dBu#dVTf*`#?J=%;62!h>C]k7=I;)r`$,Qf_G$dE'qUMejIKk=+tK8oG[3n4
%'T(me2!I-K-X/gUb^KO?\u3Wj&pGc\Qn/VVAWUQG(7cnQ4e565&g(1%oI:si`)l'S>#tUa3/%u%:%$L:'Hpk;R4Ed%S4G#:S$mKZ
%Rmno;>L)ihMkK]O0C!hWZ45!?Zo\#3.#sHsl/W)6p-K9ooh,XWHTR&)fFK-aR/J]2YW8]dkZm'b7]@Ol6"rf>%$c\70*b'oV0FHD
%e"dG`6srSjY!$Sg]$nG)c^5Efcrdj\mt+Rh!#+UATj/cBCF&`KJYLj2Yoh5S!C(?WRF7tJ-#f'%XVIDp>RkW6qq(Q+CjnG.;0JOl
%8(6AFXj$EGJud/(X5UO#W<>W3kZi4&\G8d5)L*[M"L&1?JX3)u=#U+WZr'\UP@F'Tb'N]Y#A>(:QS\P+\&/#&d23V%#gCMND)6$7
%qteo&c=5Nfopc1:qWcGmE$\3pdqL<F\fE+Oe`k0+=<*pr5+,GmA^`.lEAhp<:sHBDM9HAe@.'?o"-Xq5*JH+,#RCV/(hbY/,D-_g
%4VXf>a)`M3/!d5qh!O'Z0c/YpBWX<dCZG80.F(d(O\5lE=b^!OIB>%KK-X2>Qe3pQ(?J9p)bEG3K7b`p$!Ce;/r^`d$IH,&S]gMc
%5EG/?34k<VD<HYknsN7fR"nibZt$%pO/uW"MAZR"4UO5N1G6>>!_%05?9>EM*%J7HJpiS3O8':F8BL=r5Va(^=uI?'Viq4B]/\K*
%Ie'FQ<H%<gh<Ap*Q&/U&rQ5[\+mj_mRLMGqBibb@$INr=3q3;B_%oJ[$S-GoD8nJ?=];IdEjX@B*ctc+"ZR'Z<r"p:gFpLrXr:)N
%=$Adk$6XTjRPOM8h:?ZpaVmSe)(l&AaaWF#o>-n)g45<VhTm-),?G)XVPuq3Y6_0Zo+6-oX5-N/JH>70.iV*IMCSZ^DuucWa6UC`
%El<QbdKSreM5Y,@IEe4t"B1Ta\Y;EPq:Yjr51Kd'B39Ks!fj7s&>'^=74=l_GtL`fG9X\[A&KZFmIUgra<*h)\[1hu@Q]Eno4;SR
%Hi/+L?5J0OYVg)UK$2f#Cia#bQ%VS>#<(e%V.f!L!L=[A*IuNk(.nn3Ol;`rOWVi2GC7H5\@_u^hP*OU/FE(eYG,*skgKJsLeU:)
%:9Q8N/M\/C7k7?hEoU>#QtXr?JobM-F4!=D)OUuA8^XDa_Sm#a_l"G?:Ha?p,n+C^`ok#08dG6kZ4WA)+Q5@mEgC#"LiR<R`7j!f
%@^&;-pA_1=:,b_j-3,H1,n9;jM"[(TAF!TC'nUmj@'!$U;mNA*EH;8'/GGCMK/%TLELS7jCBY!t<5`.fMWuYPkbpaTWPfiJAbTqf
%K!];iP*IEO<u#r9H;`esXp$^)EY<m@=f'7=rGkK.OXRe,l,QA2S6im22c2L`[9K.dTToKtMU^o;_.(GQ4RPu-3o'l4#2;!*;s'q[
%D%hk5[_k(AXuH28=GMTi4`1([@3(btDWRQOiY(fD\,OX"YZJ!Nh%Ut@E:gCP<]#GfQuM5blanbnV!gq)`+i^Ie*>J:Ma]?Z/*Y5j
%>'%3*5[\!$'aH`/fL4Y:GT!F*H:[G3M'EYX(k_nhjMeTP1V:pem5n3Rr)!>:K&e5-S:)KU+25L)TOZ^_U,@pU?:H-m2j97]f$p_4
%Sn-q`NB"D*7CK5I8t0TYW/i7>1C.^pJ(iajf9.CN'&+4art(Y&WWBEFhI]NcH@j?$L;XLUX2NpKL^#?0JO]A;ipZ.&:iei5;&uS&
%aim0sb-(P[F*jpdMMP0)*`&+KVa7RU+ke1H&]tqB@%4H1g+7,ED9Ch%8"%qN0g\iN7$-lC2a?.<Gp3c!(#M(YIugngAnV3t^@E&!
%:CJ;,.T:^b(G6)81^`I;d,pm^nMX9[ilkJeHgm:?pg=r2Ws(8fNq5%oHrUlAgU,1iV'\j6?Z&eIcis@p/%c`HTXZ3@A(P\Z!7tP.
%)dA0\>,u',U.#MoL2^Nol_#'MqBK8g1'1:m77L+6.@Pc9kOkPR'-1qq]7t%e8T2P,b;i:N7&c-=K/tYU)rSMg$5!LVWl3FmEpV"(
%ZbjY9M`J("c@%cU(^!Xoa\*II5(mB4W.f?#cb<b"(I7L%3KkR4V3WBLDZqacE+4L<ff2:"9M\>$Bd0bseIB<J>e7ia1BJ[M5)2C3
%?+n4_TSg'X=:E+oYWK-=kaGd\kB%(O-!?j'>DPN\9<4dZ*L^&5,J##9HI.;/<ceQVK4Eef6gOhuL*2BD+tec<@N\einKENR.#C.S
%*,#C2_4NlW01%qJ8]m@8%,L-<Q%ijAmMje7SUq_=ML$7]a?Gj]8QGU$F9?K?&JRVmL/\8$2Tgd7ZWM#a(+4AcC+Km#E"ZYq1m*sE
%fF)Wk;G=hSC#\Ut5"(9>C3GVL8g]07$Yk@cjI6^"%u1k4_!im+%6S*q#$ii[1oR^#<'.13frP<$!/>nM@4H[8iX;G>/_ZQ\6e(1(
%a9'/oiBXn47"k<&:O),''&=OO<'j^?-;1Vj/O^p45t*&\^"J5gWJ!\DG2<Y#pgI0gU&5SBc`YVODF]^?8q0]10;+ruMh`a;":@Og
%Oc[bna%J8\-LW!_]jTei;)n[bE-599W&dmI:PBC9jHeH&J.FsCgo:j^aAnQ9g0WP?QeeCO3$7/Ok9,)d;^oBeV?!GoONL=O)\K+6
%CFh+5St[@ee6]T`;e@U8HF+,]m*&JXGWcPoqc>Qj;TK]"E%Og_$B<<Vp?O1?"A0QB$$WRc1`<#D5jO_Jac`?lVB#^tP4m%>1I6hN
%pEftn.4m9=.ERa;-[7KMia+Deb/+T^^P[o8;In3+5gBgsCSudhXLL<N>"oP^Vl*oRP2%ji48SZ1[im%-9^h5G6q=1,bM<Y`_=6L$
%U#rIZZm\Ib:cX.L"hKVW<e:nb\.]?&GncCn5<CJoZq4,LVKr*<`ID"2A;sH00lK'%cKmeaB1UWc/e5F8&KKbPAX>gkK4k3OeYXRA
%_B%\Tdk<uD"j9RC@VM]G#%^cdV(d?LA2A@h;E/:NH>@$/??l%P\9U]nGl&c!o4iaM[+7o,a<].Wiq^Gs\U";9/hRSTE6<11kr5q,
%#i`g%GgI>UTGl2Y-=V#Nb9@&oR>tE&N@[5[-tD.7Arg8Z<<8\//fTJ*_l;$0":.?Ko'I12g:/TR"*PI'b_SYK$WfQ@,(dU+Gm3h`
%n&m9U,UJo00<[OO/>63'"k!>9[aU:(Q(^<MUB7DhP2@DTpD!/:DH/i5,fRC$RGa<MJp%CB9^_u#E6$+0CiMp_fqi&i.44X`AR]bt
%fW$5aTqiC^m9HLXX-ljD.P>')!-kCdMDYHHg*WC"KETOn)8CB`_RijnJ#E_Oe5&k$["//Ddh5GuoVb>aDJNrXjjJ@[]1@j1)<^(J
%3C3n$`[3jEE"si#0Q7P')e-)68snW]gFjl,+IXQR<+`/1Hn3[p,PY4-U0h/!YCjEc*pu1ar2%JiZ^JT>PgMk<0d/6ga8kK=+=VN;
%T$oAFolLe]P!oF)UQ!E<QH`p#r/=0cDK7e%]L%3u1f]CAJCSJX+Y=V"'Jr'dqRo_6Wf),frU6m<-om/"S4TMqOD0FXj:#du9RHCa
%'3#'[>H-J:p&5Oa>pu!r7+nPJp5K.4Br>0S&SDu?;]_I<MUl+oc`rh@fnlA\G%Z/h&oUG.V'0d_S8XR>KEN$n7<H8g*3*mt#J:XG
%>>@p^KX3iH:;hosJRN/r>*g5(/B\a]6s432JX!2S0,R?rW$7DDM`p^87(u,n8AZ5\q:P`g$_"r6Rca+Ts!KH$C.fH/!'4.1#P\H@
%:[e[J)';:uOeG'[('!9&B-:C>;@k.*H&:<V]\Cf43*Q6afumNskc='0O!hnJmo:M3lAB2IA#$-M+%/s45)f!"<9[5,W9P"HO_#O<
%Y.Tu5/R[8;9]1,PIrY#Be:*3_2LqJdQ:[bYAR'!:I"k;SM\8muPV='IV\7n.FdV8dUlHAf@'!(-K%)&VaK*m)Ui,TR;4O[e&g_aW
%1.fs$N(TrqP?-M6\6doSMMo/`b+lI?A(-@G+ebuMafuoH#3t^oA4eNWjkbRS[2$k])?WURSo0]7;toSI*:jC"Um[XO+=#A]$9G;>
%M_abodkV>Z*/S+RGR1^n_#MBm4m<bFCj9\t!L%0P01HL*lF>hT'?.SFHr=\F5fKP#"^mm%c%YH2`^J,u<Y:rVXTYMA"\3tF*J.ii
%HDiG@<#QUmA*(b2_b$t,-<_):Zuf8@8)2dJd=Y2N@_)p!r"<#mi?ITI\4@.>OMQ$Q?r@r?Zd;R=*mMp?ak8`a'F4'/0A!:'P:2ah
%jVU(DXN[!Y+J8e<SkbSG6Q(#J==-64l)KMQq*=H?+t:AZ2%/Z>[[(`rOWqmZ.bgYuLDJ(LE!0/YJ--f@!7]\.651pf.j<QpFe-`#
%B=S]U-8$bKdqg:<<P;#VT7bcJ.\ctm_^0;a<F47Ym'@koi_E"CE9;"e;[HH?.*Ylf[4ie"6(2eH%PSW$pmWBEaVKL7/p>rU>c_`F
%'\I9Y8iO(XlfAcG`%p<hY;0usPeY\/goG1Z\sH-(9gBR*Yd]V4:KA\cjcV)V<YCijV6fOD+ks+mO1.)4DcN:7ekkKW(X.5U]5N8c
%')7s.om3rTH>8V,7]Of];ThX+AXC)uMBE/c]ddu>h/=Z59"EPc[$"7Cc_a!!m@;/f5VdOOC+^`H7(Q&cOgN<kEB2&%ZlZ%L(UJm9
%\`BJM,UmWliP]pkN\sa/Xh;Cs4(fqrql=<:@ajr>fk_2TPpm/f<)4j:jfY;u/TF60:g!c[.muc)]QH8$2s@LWPU+<oMo/gF(/!e4
%=#KZXidIOeY**7Jba^DWlgY&Ift<W`ou'GP4_X:;5>CZ.Q>)gr=gm$>hX(DqW*=1lh^[=Z_P@1RUA%98JUA).r%$=P-tNI0$a/.I
%EJ@>lCGF<4$G"O=SaB,1@bdMXE#tq)Kg$?6/>%%_k4'RV@r!'M3aaEt->('u,6l1$,@[UQ!-Q7[eIOmE]PEW&F&oHH'TupNAK_gl
%CfYP3qcuEY5+)rH/gLIe6n;b12JEVu0B>^JbLBhAh.:sR2IgIsU$;Z$,,p.&^W>)^bddYn-@`Lr`]b+pm4Q;Ybo^8oEPn/t/dqYI
%4h\$;AE8lSM&]<tGRmd/&Q')cT]Wu@CHR'%FJp;+`S,hXK>V;\JDh=8_^l:j<?"M_XE0-Co+?TUOIE8o=[`;Qa-S%%16301nBhqe
%f?Bl`ct-DhA\>\(*4Z[l@!CYm$k]8B)^'90"Ij-sP])h,7&H9HrHhYdC#%G,fJ#%2F5;.KNurB3KL@lg"bbD]S^+^2kB-#OMU(e_
%9Er^\mq/AeYiJj/7@'K'*KN;HPBsl6Hc!Il[s*b%EPo_Hqr6ET-@N:F%a(N41iq<A\@0#=@sNm#(T%98O8;^$6b4$L[]GqO]QLQ(
%]+h\fX:CIu94^/ebakk<7m?)05qmdKU5Pf0Z!Gu2mVA#4K?%6kI0!p1K1+e#m'ERF,CAm)*$A`eqP:*Ho-:*!34,G`1KLdXkhQJG
%)LH+\/mBL#FLO&/_XQ2p.P567AVlG&\Q"Et4DoKJ/VKKa?1?7G4,uH"IIfYD.?Am/N/;HChS]%[EP]O?JjN,7RA-+eL^'5irbuf=
%De9ql7NWBn"`Y&&7`@:/ftm)mFmgl!4Z37_7R]eFhS\8n6NKhfa1&=_eD3fE\;P5#0r$rE=jdR/;\`tsH_\U2N&D9j@aZ75Np6*%
%P]48FAcY<BhCSUPIM1kY)W@aZMM)9*,(:.K*,/L`L+X-G+?VrmX"6dp<p#a,k06s?WL(]2^t+.7Vo+/V<*]]4Cm5LLM:2kl.eij5
%+TMhaNdifg-idfsNQ7sU=Hd5==X"e$6uTd*ioLo-,VR9SW>Ib69"UKj9Rc_I[,c2XkgBK6;VKB[KG+njK*`Ka.)?H1;XoWV_i!@S
%b&Y.bW0&aLq+JiDJL*MGfr!F$m\>Ubkrf<A]AsEJjD"*"WTFiGKjG@KZ/WcP9e^@McH([KL[E>^%m'lo_gHDSe5GXHU$Oqc]H9@c
%4!A%TZC)u+--\`Qo0ca=gGD'*m:"GFZ5&2<m4;P*<WoQedB/71$eJ6me".=a;-:$IfMfnWQ^apV=oD[74#I#o4OT=PH?ss0QUT2t
%WiC-d=hDD^\>fuHr4_CK\#N_<jnj4L9rFs5I$9T&]GoeL@>MF_]*tPqP7rj4>7)e5`TSj'f4WMHg$A#]hh$Q[dua!,<J?<QE[m#8
%dfs@%&^KZY:t%k5HP2Dd3o^]:B'jlUX>$;MFM<D$.H/ZamX8JX=([N/3g1/4^(DJ177NNt.!gY#ZqI=XE`>0OSYT[3>QP,)QP.^o
%2,P4f%Z;TLhf&4]>PiJE+nP+<^HFai&c:k`[D2<ZI"ipJ;d+R+[#IM)"`c=j.ik>&MM1<t$8[l9]SW(d?X2.%/>Op,#m`!>Y)IJ<
%^j(''_Pe1s&umks%')A0dP+8dd0#C*MBY3W,II>S<D+0Q!34=XWbq.h9;tZllLj^,5@##OC"f%El?"t-RK%[/:c)n-[WurT`Wn_<
%LQ">>;XZ>\@T3Q,P]MS)89Q@Z.sfdea,c<L^)j1uP@!9)7GW.\SQjV[r<>)MD<dk$:$%-PF_6o\p%n[:NK>WHYf$../!h$,I^6np
%N0GdViGq`'67[pXC;ij?*G6QY/cJU+k_nJW*ao2,)b6Z>K:J(ZiKi=aBc5\rJ@WPac5EH#D2-;%hi*G_Cf8mTK?KGLgaYA-nAl)#
%Zg?&l*J;:;7J`]7o$u-N]Bnh[]MB:$lZ3JkVc_2j+cNp.=B[LFG3SO`H$G.i!\2dt\D$rE[L\gmP\_;V6/Y:lZi20%6[52Unq^%e
%F!iC>cZFhGm,5CJ!%fl.bQf[q=L(nK7_ZFp,dsr0"C2XRL5H,r,'uWO+B#r@<D<FS2*dB2-DEaW7l/'FOSgL#)C7o'O*1\qR47;q
%RV`*+P_os<L8&'oX\M*dLaj?U3lhk@VOZ9RWcMQMD,-aSU'7k?`+0D/l7`db(i`UmHse!J(,1g%JZe]?ae^7\;Uc[Gmp]>uL5N#;
%/J@IcTF:/LHZ6_&(;lkk9f<6':A?I+jEY?9s1C>7%kikm1Qi&1>]J_;J=)aNk8N6.7KZt,Ae#[%m!"s-MT#[fU6!6Hh.2Gn2XZc4
%^tggcWQ:fm3\k'$XH?r2FAOb2R,`R7@/S:EoDle07@XYuUXJHO,3r$C`gICU<(*d=mZciGGaouJ*'T+6<Pkd?CB@.V=_(<UEO(CA
%3c8MF'&`_;]mo"E/?ZT`H@Qd(PeKa4Z]atY=j5Abr*_Y?=_;1_i!\g5"@tB<!-@?YF27*>(79Kfp=[JeZst<"/6nRTcRU(rE"$/d
%b(b$-877SWW?cC),>rZYLaj3g(^N%m'6)W['ipn(Ko(R[KD19iD+ah*EiaF0bM/CF&lmgp;l@R1#+-62ihlmThS+;3eO;kXWf^`'
%EAE?.2q7JGRrkFE!0MuV9brjH9eRJ.A%/DTg+5O"-_=*q%CcBe[XCR?[#t\OAB3^KkO*0?PZ0LATo1(IC7(\r!jn1]XCLJ?2JMM(
%*O--i\uDFnU+::lc*qg(5FpYan4=dtmXdX>1X^k0WP,nZ/Zq%-+l+S)a'<)@FK"G7i-d=NPCs<o5C'jcakIaW4=Ip8M(D8u?\ms+
%.`pBW)e7'3"VEhbBY=FV)U;\e@YrF48+7'k$Fr_VJc"[OaPo6;DJt!7DKdL83q%]0IZl*P.rMD<_B.=PO4[FDe#Ec`bLt-W-X!]T
%SH05E54jA?@RXrZCDe,Nfa!&\<\)Sllo%=*UZJ.7'0LkUT#64"qiG42X0Bo9Y#]IMJP/W[-!O""Q\M1<!4@c7_U$23"W^j;g+[2u
%Aa\M3/fOjgmAZ)2ZW)2AL^`(^iY&_f9u$lC>Y_XT0q'LAIM,2-Od']0U2"^1QTQABB^`@82gPJmcTsN)9IU5Ro1L5L:Wsi2*7cL]
%_+eFp7K!?/=H<<^A0&"YFMB<emLk8>li\e5.%C;L&_jl1SUe'im<c.OM700A*icr(orD"_1F-:G&1e1KEDUWd,,pi33^u5L';/T(
%2de-2,M<qi$K:rmliuQJPlJ6dDhO/RRTPfBG^@bg>,$+^ABRN<[71p4Pi]E6J=N]q1?4GFCCp:6RteYJ>uJ/Y(;\;_Hj"_qdeu#u
%0CFlg[!"usT-P>'5(2YSBnClQL`-APCPG_7a6p"K%l*&\'l]LiX-<0McI&JCL;Z"hC)OhAj%W&pNa3#(-[bmG<HeP4d=^Hcb&Jp)
%\!)!Y7Q"\!j=r<P%>0)JjhuDI\ca4Wgas,hB!/(W>RQ-Imj!WdRS@a=kIl$='OK&0ojuuuQ`_rNcpUNSnMb0NK"At0_oK1)i3m59
%]),:/aW^H[Q<@ktq*XK]TVOGjR^l%<]652W^1PSZn/4)V!)j`.FQs`@bB:]IREip-/r&3g0eW%-m=E@NMe=F!n]E.nRZiLVYp"ZS
%eU).i;Q<2<O_T\+Z">^KHHer6i;JkgVA,<bp(D4NKbO1>+l/,*0#(Rja7F<3)^jrde>TuLpR=Y04h>+Z!X=m!M-b*B2)^9VK:nj5
%e\E./H;1r0B;ZsD;K;3$>>,98..%c+c+g,#h^WjnT5'6jDniubBn`LZ7k>WfTWErk21EPGe;dZ(5YUNcki-S;mBd(.H#nYr4+rr\
%fGl=Y&Nm>!;3\<4@bPa-qe3P*dBPh*mO%B*7($UtQG"%Ys,Xaj`V)oW<t>Kc0B13!UY4-qloB0\a.'7#>Wp*pl8euo;gJ/`Fkh.V
%^mp?E2,3N<p*6'GE;N4)q1;suboF;PVY,2o-bG]86^]r*?b_#HrHKF1@qj`K9fY*u3'<4gU[kAR9o)a7We),*"*J]]4DTp#0HZVh
%r.62cUc'%4<g%!4b$G]^dW'i=Pg#fqHn.PA&9HAFf=:D0*5u.5#XCAo]NE:DH!c)6Og5ir<_CAp/766\19j!H0)Ah"B,,'Hc8k.c
%Zsm-YEIoZ(/QGl^gB`bbdi7[J#p_[IFs`S/rVJ7NC,$eiSLj0`,38kpd%`\MVF/R["2pD&2UQ>a=l1-%b=Q1\a\nlP%8qLT(f7d/
%CK0=/=>n=\j=p4c]_S@d0Ka_$c&X5X<p5fVIt%4X:\S>\&J_?J:,Wl-N8AD"A9E>YI$7(s:m[@9.h.bTD%=^Sa8>pt:1JrcR%i=&
%RS?mQM42MT13VA">!AB3&15ek_sC!XECEW:),9JTmP?Ih0kko1g?e9.Q$&uJK.KA\@mCDlM015_f,cGGdc@+g6"FRDj.`-.%8Jt5
%kTgFd/]HWl91p3IEKbJ\V3VUpnmWG/r![eQA=9YZK8iCIUb(F=Bmu_&.f"FIo;a[?Hof@I0?r;\GgH&)MBjmo>tO3DbL*%>RAqRR
%%%apI=_<Q!XSXBk,,TsZ3E1j:OdR5V@D0<<>RC<p]?+'.5C?UOK\$fa2f>TDL+Mfc7LQ:>b/7TldWZpi#]Q*@Ndt6K`K**_Z5-u'
%V62T0ObbuCXLZf^+R_71[,BL]mlQpeELVUX/k+&"<J5tH\6$<Z\X%,b]6$YANE8Sn%mi%cL%a^=aJ^-,PG!S"i@EI"b5hNreErE]
%27c:9/\Wh&,mH.a69N0/o"/\;gG2W2E=:?8:\h3^IqWWZ'fh!R*d*;GVInF5%Pker3-p+26]O'25op.lUkhTjnOP92r0mS:=4)X-
%h(Ana;Z7^?mjRUSr00@7"MiA*0lc\$qC^Cj>gMJa8oAQlNFFLF$AEMIg/tVAZud`k-7&q'K0@!*_kgURGC+"J]fdVA2k?9,W[c7H
%r?RXt_oFlV_b6dj:343bUsW(`G\nAiEFn&6c^%TX[_Geo:o]p*U#mY.+(0Cm#:nL6olL\DIJ&m#HS8ir7ftrgmE:'GWqfM8OGC(5
%C(3$p&1/f%Dqq+<5\KjB=%n^VXCgjfnhVnZ4OI'i:]8h?h;;N`n^9,j7l`kEP)L86naW1HJSr$RpfVM"(:K3_$MUOli3H8VFe&hS
%Neb?$PaQ.>/_:5udG9fI(/6,i=gP:!(_s1t>N'TUKcW7gE"!E;5`^=MdoBNd;dit$;IZs(@N36mM::,e3^UP0iY&ujmheTV2M#nd
%6#&Q/':3H^3D=b`"S47Yg=>m7D<`Xc>_=K_JVU2eQmD4uLEA*35q-ZJYA?pc*haL5HgB5mLU#;*GSO[p]!.W2XTe,bg%"]Ta9+sl
%OEh*&_accC8)&9\J7R'YOQM\2+e5i.oT1*bE!f`OFmL\\OhLIe+]`4!U4.06-oa.,^+]Vt^1#WL"s<_`%Nf0S11rbC_(>g4lPV.E
%$3F`D=c&.\dI"FOZ`L_qd7-9h,0^bmn[2+a=A7(mEl1Ub]on'P.RE'1:j&obH1%-2I#hCV\V9YoA\(6)c,U_Ybc#@EY+2sE6^4Q?
%?BY7.)9A5U_!Y6<dr\CLfsuI33*"?1GXrRMLpLl$9pat/C%/fMiPO-Im66<-`XF+AYRa-b8.I`%ahZQ:o7)_'NAb=%^#=X*l%l;n
%/.*bp6k7bE^,AA)`S,l,QKI,uP>NZK9og$7X'58<n"/;$Hl1`Tda\2h136]fLV@'dL^d^Si-/QRWG"Wi#l]3WMhgnKU+!lfhg,2&
%8mQMurJmjtDp5_Wa401q8j>Uhos"Pm-qub5A%'h]d.\%lA<rE:WL5WHb77rrhARi.8JEFZ0H(8W6i$:1p>GA^%fIiMbMFID3,E_O
%@h["!XQBkdbWRucC+,_+<=V,E,#q6!&N/I*6hIsI-2:<F+"&sioNOJP+GU2ha^p.`]Ge@G*ROd$@p+,*kLeo"e(E#76;C3tNfJ+1
%;S,d$QE""5lPp-Mp5(^(L$.!SaG6R7=/2D/C^P,@7pNfT`"X*DkShaZoC]:^lc"7:csojKVGB5EUE[D17Bni72W.`N+qIIQr^kq1
%L7Q%J'3BD7N!Xen)@Hb[8DQ^Ppr53BfgV\aUBI0Dj"Nh9T$m2[M]m3%V)E6S0?OapqdP5C^I@bP^/f7=NT4Fii.ofR"b)(_3Vok+
%4X-b*I?nd($*)QL:Y)KHj`GPUJ;2FM2QZUE#IucGpDSsm]M$l*D=+Tb;5!SZn$@G;goh361Whl3s3R?/+20isZ&c4>\oR258ni`X
%fj2]@U?U*3Aglm9(@Wti^09rY3pj(H?[,>SBKDZ@H:sIbjXp=69DV8Le9[Wc"CcHB[V_$[HV#c:\?%+NELT@Tmc8/E@[JB`nV;#:
%"sJ&JY`EHIa'Rtq_r]rZkDAkD[R3tO\nf+I2LApZ34$?t"\,KFhTT^DC;^$GA=a=gld=6Oj+`Z1MRdSC1TIZVF2.)QOdIVAR(]Z:
%Xi_tF`U[Lth4EJMBqYt4mH>?VZ9PGgGhQB?$6mr!F8"ANL5YCX*kj!XU3PR7K3mWrZkJKtaS;92QGCLd3,RMG2N+RqR"*VJaYp^)
%\0tn%nC-k<STn"P7Ci'1NcL"DGL2T]"k'BM*;658RW5nlk4G2XbHdu(@O%?]e(7a-F`S(SnEWsC[5,YT+\?6J8<i1#<*\Gqe_YaQ
%I_'cR<X_QI`"M@:b+spqIXG%Z\i(W8GCc^sBY@>)j'3lO,VF)A-J*-FhN99OSc/,Z&CSHL[a=*(4iTJX=D^jGPH(@njD60N'B3#j
%qJOGiI-/tXU/R+Q)-0X8kKIOSOJ`bLP^]4lHf_f..C)=KZ/[kr5&32k2Ve3MBm=V2P"+9_?9B2BrGXgEX%hD9A%#[@'COV%L&g@5
%,!s28HZ*Om)ja4F`6:)cI63N4.<8/Z/)fBI"?O3[NX$2BU>a&,;PU,0kk=Z$*T)''0+]nQKK>SMg`(#i`a\U7fFo<b\pZrah"5tV
%4AA@Q3Zam4C$j4q\&mH<9TVdj6A</KEl/7:SV.S4LL#pm*T*Dur$l3#_H-1SQ'eu/?dltP.up^2eQr@_:,GMN108&a[B!?g0D+d[
%CXQ"t#[+$/,s;s5Eum@N:2E"9JFi]e,Gnc66Jj2RlKjgsGHP2(kd7p9^Pt=LkSbc.]@Bks`$hm*NkGXjZP:^"L]\<;jro:FY;Qu3
%p$,eCA^_l/o1!gM.BfAh0c]tG*k?/On@+q%0%8iLN0\fj+ORT)_H"U,a(as")8'E(?ZMnY=lsBaXM6dnidn.Gp[JEUB2)/a]N*]1
%ndfClnQ<87NM_$]+jcu]!XqNRI!Zk(SBC&CiRWiqeBEL@;UaT>I<[eUbtG3E$k0"Ip4`UWYnhBEr^ruB.RLJGVE_F)p@RjL?,.&$
%&YbPZ[_Ra"9t//KVQ)4+P$?HOP6;#LSrEF9d)3>62*^Il.5B&N#;gM)L&sW9.16"P?6FO3R<D6c?)."aZZ+QeOBA?ZAk<-r=*'Fu
%jT1AdVHDS1r%U6sn0.X%Eg2i2HphlJI)4/8]loGZjIdM<LXh$EP+%fVQ\b,EE=R<+`L;LjU]i?PJt_+*E80e6l9^gLG4)a<[SPOR
%G^n,tS3uKXY]3IdSCA^`$J9^_H/uAN;n,_&[H^KE\a/Y)p]\*uJH(_Zm4tQ'Eebe__u5DC\'^JB&YR0cQp&Rd$W8pX7F'P<cNdOg
%3s<Bi`=.R+*e/B6YL*%JnSYX1)GTU0W`m<LaJ8h[C):I$R05%A.%1t1\r`"h$4tA*!<#[I<hb>"Uo^#s"SHHbl1*o$K:&DD-IDC,
%"^jYEM>E$&fb@j%aI%4V>WGJNF/Wg`B,]POqB4F7H4;JGdJ;dr;g9"U/%Le)P-(>Z<d"$G`p!iPjD-9??r'\iV?iY=d1[EsG^S_-
%E#kRfZ7i<a4e=e]Qpui&GmKXJhBI!W/X''ZR^\+ks(mNegh,&\3(:@A9\]nO.&gr6UWbl^n@fKf/G;"WH:#._+T9j;DBLenhP,pr
%Fk2J"d[="Uj5]mCo;LaZ"3sRrLX?o]dg5g`nI$?RZeOW;=R5BcfM;:j(=rnX76i3$kh2F7D?M*Unsg!RkiL&YlWKOKS\TgO1K/Zs
%2+gc--_E:&6Wf$H:(?VnPW"fbkH2tT9g4"VDUD*oq4Nu_.GruU+m2Xeh8sNPCquaH)8ZOM9l8d6'DMT69CS\l1q^NCOdL@mW#%5-
%iQ7n0Pnfd%?WAZ^hO\:Q:'F"4ZHKU2+l]c9p=YgeKTFl83Qk#?FsH4M\r6hZ.Q3ghFP.h)0Sj<MqiFdu39flr>'Do<SS@lH*!cFY
%!=9nZ9Co<@VinomRS?jd[d#EuF=WB8)F*J?PYLiK?9LFm`][cF3Yj)4<h5K8Qps6@";7hG0%N;*8CUQq_=K;q`XKZU6a70KZRj)(
%ML=K3s0#]Up&9NK.'#GkkF]1/-d=O6"!"#d0e(>?WYWm:Wg(`[5XSpYG#Y+??d!1h?*(M0iE>MDQ"ZosjE_CUgK\hhG.:fUHd.iC
%d9Iiu5+/XF5.nrQF-bKc-gL<so#gVOB=m#kD2&]rb2\SS%,giB#CkCk_iICt!fugIf<%a[0#YPl`f=+]A2NQ,Y:oatJ?n$IesKiV
%]CDPm[85iB98$3lBY1i5.9SY3O7PJE9OJg;GW]Q4NN7hOqcO#gI"+.Cq>3E,=f-_&"/Sn^mEXaM[Spud[&LbMAF]WAE=D71Gr;8`
%;t=Ze,YIdi7UE(6"@@[_B&@S9P<tr>F2'0HhS+=6Wg[BGoG#KDljsga`o0CTb`-X&'90KZm%>60eCtRe?]Z61SAI0]MD%VC4c^65
%ZptfRA8Mk/kI9qE:($p_:#fhm(#?:]qMrkUT+l-gGe.dA%q!8]=5IS\]sl%gD;0EldrdC\YD3(&q-GeTrLBE_Vg\MeJ0U+<T;jLt
%F>UTsYO8@J3P<ro3uuJWQYQ<kDR6$i([*arb0>]`Rgg[68@KIsPNj(3rV?5:REN'H[K#XMH\RjWm76n/!g+a2-s+`[HMOZ20?SVT
%]KRcL44bMXJl2<NDV^iWBjMc8,`<u2\$,?51n+=>c@,/THT6U1'-6'uL1Jm1C<+J?mDSSh/tDg1bB?<ZjIH)W$G$1R@LtT?DGE"]
%**h8VE_spJP1`>4Nk'S6?>iH]0mVY06#Z@jT9a%N;SJ,\<=k/lCjdC>3i>6nMG</n"]!\FA_C*s-)^@j#5iqtAq.(J&p;.Q\*Z*-
%NiKg)+W2p\"+:#.(-2J/j#IJp]dIL$%ua9[YWHYFYcM/L3b0neEN`S8Fbl05\Ca7D[t?%G0$S1qp91ccBs0!j&3BX1A(BmHX4(<'
%*3cOW^qi$PV+%?Vn*doS'sD,e%BcBTT$8\W\JA3Z6O04Aea>fq#$Zt'WXa1#U[Pl&^,CBQ@L)=uh+Ho"mY`H1"3_fA[kWM^K8+:?
%H;6P`f*@!Cepc=R0`C@cG$CL/Z?tTdl6YgKn[Rqq`D"j1]]GN=@n,3iQ9T=P0;DkGd/E'0`:2Ld'9YSQ@r>BHX,Hqgqp'Y;ID%ri
%0WjR[i",VR(=rWahgMGR,bU_nbDlkViGm1J&B=I"?<+mpY;$h_\t&iF\]-6B.AfJfLrdH@A]s9pV[_GJqgs6=<$,Q?+Ti6,8\!)Z
%aCXa#'qOn:qmcOnE>kS?^?EZY@SjnS(BS+U$+QZb-6iYW\&/?gJasOmCC]:7WA_.Dj:P\Gk0PbB)K1ksM;!i^$:,bn;7jeeDnggP
%WD1/ZW'd%G@f3%3N[lTPW>jH4^<$j9VK1kbDZ+1S,*aF7!4_m]IY8:2VT?-!13YLXN-d:%#D'hmf'W[:V>@pfYdb;2<%#.sgIHc&
%dG+a<dS?;Fq`X9`Fjk<r9>9hBaW6Z^,OO?jOWGH_h)653`7ikJD/Ter(bSV![SQP#4MisEe)AAOOY#`Xr5*kN=1=7IRGr9[^THRb
%j&gn>J\HpIf$]&X7>rNhm*\_kDZ7`*j!&tj>jdVm$ggj0;a"2UpQPko$V?-dK&@^@P-5GlG25aO_@"]u+Y01J$"a]4OCAlm+Xon:
%N:8)cLq^=<+143#WYuM,7;poZ?$Ib\D=Y.1&=?Lf7\'A6JEZ+*hi8SQc=r*?6]BT8P8$R"jf\*UQHO,Z:iWU?>fG0-XdD]p>d82f
%<Ad7V`3je`>B.96*<IG+d2m$D2&:Pq/g[<:dIroCD8+i^buCaka'4(ma[s4Cm(QD``s3Fkj1&*t7#iO@l=Fe,JibjWOBSYm@6Bd"
%IAD5ueYF+!+f1"[5QFmW2MJ?Ul9Nj\3c6p0#Qe7fMqAb*]]NYF4hFAiZHM+m&WDLFeXJUQV;-@?ZZW51MWocX;3X#;H#<"(e,AM:
%7pTS?Dthlrh>Z,\Y]ss?l%pZ&*J#l0D7c/B,[H"%a[[Gl>C+B>?'p-\f1E!n_2A3W:OdBd3*1:qWQ)?8;`GaD[jJ1qFXb0Uh)Oo(
%WMWMP9"!-dW2XbkJ<6FT%OIV\.$GOjr,iq&.+@58=LqLL@>$0.$R8h,m@WaSE*eO).uJVtrmd"6$N,dN!=g^U.1FdHO"dJ=&(*`p
%=18s9=+#2ZaLLfBlqf6`*<)rN_9<sD$O'*ZDjgW,O67IN-"$o3jr>]U<.q&e,C$Vp(3JXG&Hj:o"A+YDbW=)`2jI?A[=injGCK!.
%"lC`b+41(6Yu'!.M6&$nIi.<V<T'7Va:pd)d+Q"o!BlQ?F*LiU*E,+DHdbtQD\:Q)nVRWiP_tJ7NSFeTiiu5-_UnZ<<VLEblG$0F
%?J2Y?K6LHks#8\MNipm97e_&od<Wo?l??U^c%!=nQ%/7K!(ABl50&]^`S$Cu@^)WfQX"&dDanO:^8HduH79*E]nM)JGG_%hbn%ie
%\4Pa9;4Q1+Rd'\'m!0gg03P4kZeCiZbdB$^O"EJG>apZ91/k`F]AIf.?^5*YgtVAV-NjN-6mKW14bjD<0@chF!\skG4CB2%D+BlH
%.&P+N">H[Cbmu0S[_UegL+A*H</?_FUH$?2RXFiVC[)(V77t9&j88nf5S@*em1H;L]/f,Xm1'XoGJH*P"E670MQqKJodhoToZ\eW
%7gnS@c/\kF>P%:hr*?j)'LIC@3R_s_Rh<(@8,FJ>5t&LNYBlO]9(M2%p,K)J\\Z8P8kLN6Zhb(`O6i03"sBfJU_d)9A-rd?a$6J<
%b*g\l*VH9uL3GE1]>T84J,ro`>,VS,C#P$Jh334M$b"T*A%>`8Od_5VS?^?NG,q+)=@1%49?ulPLu79o9_o6-RGXe`)3@DB0n7A/
%NtdJCe`^L@@'tTgR48VFUoW@0TJU`A3h4$MP#,5;b"G2TQ;Q@>>Z,^br9q2P]8`.mFldccb-_foD"N;m1(Nc<,ejm*n2gAg8\K,S
%rl=brK&GPNe%&4<rJu#XD4ggRTBK%Z1cdR]WASs?!f"t_*8QEl.dJ'#7cd&Ark@#q9W:PF1!?s>4m.4"g:!BB/8FE"!c6DWb7/k\
%X"[k9N[h(W9s\n)/`!770dBjcRG7tK3m$NW;_Z>SpYCZGG]:l=Vt4@%k=Gt!j_c/8/IU/s&l]n6f8'trip'4d%`"hPkZ"QY6ujhN
%hZ@47TiPjs66G6on+JOf5@P?dpD4X<>A"ONXIf=H<=D_jEQHEOs2gW25oKanTQ$GU0grl(-'/UIRCT?5,dh6gS.ZuD/3mp&iNH>r
%es[6'P;*3lIPFrB'gWq.'#,$D2p&b;gF@!N3r:R,\?KC^A?epm*obshnu!F'RiI0(aAk\B1=n)T6<6;gOirNU_s+HXU'B2a\ef)"
%j-BFbW4@9[#^ni^%mC'.L8fijleHAKBb/"]0eGq=HQJsYSnYL&R0ABnS\O*r$Jppu]I=R^.K;,DnNh8?,o.tn(,UW56*EJa^q4tp
%3]s.Z7Uo>:auMDTK$Ku>UcY1>oK7E!Nf2;'g0c,',\G<b"sR]W4(_lf=h+k<<,)uc#pLahG5:*NLp2IG6_Jfr;\3YX`'2+fX&?;9
%q&3<,QfH@:/OPnjbgh]b8XWW%b@R,,n*.b1DhmEW5s&ON-lh>AM@>jb&k@VL4+@i(AR4!O%XRX9:QgKE7Q6`Ek>ZF.gD%bNYjZ*O
%dF;8-37Q)m@ajr61$+&gTCjf2PkGNMGsli"14A@GE>;poC\hA`N5_6<ctX?o%,O:L5qOAf]^McUDS;[QGQ5.ErcEPao07["+90Y_
%J,8um^U$Ah%kheJk7>56:#cJm]2>2MG\sM$&%o2NoD'32CHVXQ%GQC-G0>n1I!F+0B>1`iis/oE\FBYSD;C_^05TKirh]#Zk?hTM
%_"%1M><&4(BbN^\i3dDA5OcfbN\>Wg/'%7bD!$!A]A#@GnA9q*RITf!SMTl&:&X6^s)oFlTDnc7J,@j4I4FX2hC`k3fc8=pp3=,9
%,*jjH[)[NSHfYiecg1FaRs^(B+6;WDb77KOrUrb=j^OpJVb!o>pFEq[#3V4Y*F3M@M`n((dZ\sa(&[*]++=1&HjIrC3Y1'p]6&OO
%ZdkG*F;u@BiLEd7(K8Ht"Jj>L"Sg-J)!!`BGjY)u@Wg6IP0MGSTmTpQ3(0.1FkB5\lZ,?na#3o4;Sm(ZkhLiN$(=P.$h'5>@;FpH
%VrBM\O7MDJ\P=`:<N:-5<l-?RE.qDO8ca(U<gQ";"8&6+)83Fg<:Fu4^0^?KV*s$R-h<#?%)BpL0EQRa4HeqHNO6<nK_CqtXDI44
%&qB1GURZD"Y6;rqZ480.AJZGR('q=<Od]<ha,VALn.CMIOGP3%B>D<e*R*9+BI.$h<i"3?MBEkaHiVP=n:S(\_9?utF"t*Sl8^ZH
%J:KfPLTUodp)L"NZadd]ETYOdSj2R>9G@IA?tG@qUO7bNE+[D`<Ni5o\RMO21@,<k!Lj5)bn4SLj/,\$g(5TEeO3p6Lh&F];l2T_
%'Zim^C6qU:momb0\lFtEUrX7-N=1CR]&L$79_TC$MPR,^Ag7<+k`;D95;u;_0pAO6\O5+V4/]p-Q-#SOV,l2X<RO:87Tg&)(Xmn5
%oXS1@=H<Oj1<^kOhGg1S%dHU&6K!mHa$&aejRUujb]D%R:M.rcD:0RMf:n(p0kN.7oi@q?.Sd0%+0#f#VY\2_CPhGZQoJ3g#fjUI
%rJDpm^)m:A_I+SK,4]nnB1"su$aJgOqlaPei`aN=%2%*(_R1?p$uT7\m*.8=WL818$6L>$)JV0/dd6c!l@jX-!.I#r>t)05_`,>X
%<BRHieG!DPS-9A$dO,_EV(KI5&K;S<45DDj=QkTr(U+$FZS=Taa(C3o3H`d!(eNo4i3n7(biLj#0RmNI<R,iN8VUhB<\@Y2,$3h:
%i_nM160bY/f,,W+)O%#1%5>'-]dUa3VgWYLef=4r5k-*(>,_d&BMFi#5_R%T*/0I\:csSF7j4hBdtM:e:hjiTV=H#H9nRjt!`h1A
%;\)S#,g^%rp_<"]>:oCZiFLB'"//I/$kds:GD>\r;KNf#e?N>Ep8'n_Wu4u-G!"2nAQ3*mON@Z2%o3>dra]<N:!Q`3YU\tt6O%t'
%Ql$gT7e)lT'K+9O=BU"UNo+1A20EM\30'r[0j?`Q0LRae[,lkaMKBSu\^OEq>HT$nYp4grF`^f<b?p8blCKK(S>%&,F8U($^N3"!
%:4-W>7US8S4U(4cI-VS=VCgm?*^Hif6FY2'E6L!NTWUk!/[F]j\;7Sb?'-ugVc@K58E,2R&b/3gM_#2h6POQ"e`mjKW?a-]3OD;'
%3GT)l=c,DR9L8@:nC>3%0Lo)"7N$C@s7[n'$C`l!;Gdc6I=0ICPLg4TC"^Ih2fo`UMX+2WP.pu%p9G:u7.S^73itI?IEt'$N[YZ[
%Rd<p!M.=\TYWZS.gRN^#Pk"_fDW<q&_LRdp;Jr^9#m"[em?Bco*+<P"7OpS.E!OX)0;5_*ddrbH3<tr/&'k.Fs1.D)-hMT3X6@eL
%CKj5/7Hi[Yi=AOlD#knY2HO/6Nd,k%-X"@]S1?.kWcH-9"$oM=DOgFf;K(u6MgU`8e)6_<>lsS,';-4BV^R`DL9c)nh7N(;Ti-QB
%<[%h//V\9G<98PVIAdo#NnbA')Tg91"<5h#CD+!.M;lQBVhp*^UV3q=h<X=nYlLjl\;*K!/?c_>M-])-;Qa1Ik)n'SZ_,fJVBfd7
%r9BJKfW2=[ZAIc#UYX)bDEpAQ'hMMmN#7spI4-ReRV,AMORhfso$i#n1-94-\R:cHPXGMBSubMIGNM>K_#"]XJ<?m"jdH?4<KoY1
%;*22kSsZZr%.a^F;^Kc*6'FR)iVIP#+g9=8%4p=7GiT5,223ch[FJhB81KQc9l4p>R5?.pMBhpE4Ef7c%d!E&Ce\W4$c8B"9Wc^P
%VEmj+bu6.SC=7uE&Erl;CiJ'ZkCDH8d"!/iSrS\4]`pnfY)-3-q%dPHTSqsuX_L=S<W42\:kTa>6-(Z&S94-U=_Y7:P_LPIA#Yal
%hJXq8&Wc(<)$0\XE74@jRgHkZ>p[orA#<OK=Abs+EPsWIW^=`d?.rPa#Dcp0:Vmp@fb&M'a?M`[g-$,'<2s;U_r`T%L#AVul&=LG
%dqX1Z6cRP,qNNXjHZ[rUd&("#TmA,b+hLYfPRX4!hH-I'p5M]!r*C-4mesY)Z,d6d7Qd8`bRJ/s,K1,FA6[IFp1$rBY<(K"asu1N
%.`8.Uf`Qo<qM>V@_BXO"<[t9_2!u]>+c:&-/j@%hqtnIZCcibUg.IDG%)'Q^Jhb*<Kl"paAeL/Z[J?;M3qf21c8Po5(>(/11&0gH
%"Bh;=%oB=>N3?DII2HlDJ]1;\g(jdQlP*95bjb0Ch:odA^8`r_!B#jm<;Aq\c$;(C,FHt_N(Sc#F5Ot"V)aFr1')iD>6OcM#[CoY
%4]9"Z`<#*GjJmMC2CqSB'Ze)--2koib^o-=*cp*M6s<t2Vh"s`kTuth&!#LmCf;N\@^>hI,eA"\*m#)=QEc+To4WI`7t3GSEj1sC
%q$<&&*08RcM+M[L7rgr(]gO3ijBR:/j=?YIA3Fa?N>5P#(sQCMmPdWQ&mV90)t%[lH(Enj.U&';2fOm##%a.*TW99bS'c(G$]YF=
%lG4i<)VuO6#md3QfoP,tL$jZ-Ro31Tp/_i6\4S.[7>,Wmfqco4!qL\ckp!0%]\Y!1S<kk2-hYg,EVHtF\4\<Y_CHZt<tCqtq`kRT
%lo;k-kY,?2E)#<B!QGd[:?eM4VgHj/k3S((.HTA:Y&$3_fd%nW\1Tek4e6U#i9#X1:7C`"RKLA>pKCSJ/uDJk`>Y;M4EJ&8PEE*t
%S2om,!Ed\lK[4oIW1TT[1U>@K6CfA'q1dPh*Ts`j3j.@>XU";$BU`k^=/EmOLCUp'Ejj&d;U-aVA!V=2fkGg-'l>_kJsTpCE^(]b
%R5<\0q,Z3E]TAJD#LU:IZ]gGT,E-<XOPoOeT?HfU<YCMPSP'6RcHPRq:)8j0$Fic2#Q*j?lc3<J<G0s6B@Wh?2L@L,08(R^;g]N=
%#$n9lIrW&fF4IgjBak83kXS=XQ+HViHjaiFkVJINg5A&"Kg3Z=moE8ZGECj!B,__Pb=RNq;@#JA/="tu7P&bTC[I=MWL%MB6Wnr<
%'Tq>VdFGPD_aLKjds-o=mK'M)2H9"T5,u+HYI@-k!J;O[3Q4:c%B1Z3];AR[fOnG\.4\81nn'J7B6U+_[83*(F+meNd\PoCl[dF!
%+5U.M-eboGBtur+e9-;B^[k0]\Jj8>=q,uuM0!DX+s9B<%Y][Mjn&(ISi+9.#@s-$"4M6=l4MTOn?^-C(>2K7XQ/'/FIfsL&3SU9
%-2"p-;BMapjGrcKI,R&9k#SPY0;f[H<$n=@dGBl;I[%g/41ErC:_eC/bTS[DE_A?h#ujr&>^Y&m9RNS'b4\8*qe8.U(RII8[kaTb
%Hg%-iijgLW/HWf1$SWFYV-;Z"@c#7:+gpi:&PbXIm?CScr^.Y;eabT\-@BY0+hc,oVdOU6@mK;m'/VQ9Bpta)N8C/lah:ICq'RJD
%O?3kIK>a/Hg<*eo1W3BXe:>it@8@#nF9d:/)FLa?J$Ed+FlaB)6Yf)[S.!8Hmr!O6i7q>Sk%anG17"K8;?p?'&KuFuiKE5UN$r+=
%AiWJH(S;u5B644[OHcTD=DSQ0aiZ#hD8VrFAYm5P>D)5kK?XeA<DPP6E>V@:!T%=+k-dV;V15j0V$2E5b7b[O>A]Qp)\-5`IMBVr
%B$I4k5o"]I%lFC7fPJ=1oRW'-0qmdS&&o]W%PHcA9!/30Acu+qOMb3qTn+KH+glA3pn$:'er[(r.:]nGIWe\d*/h-BbMIe"0SUem
%:UQTV\oXbE2M/up"ISC/AJ_AO$;n2eC5kc:@mX=tLFN),eBT9B3ZNOP)3Yq;Va1_Fb]h&siQN:@\c#.C#s2C"?H-L8@DGK[C_HbC
%QflLHRlU2>!?g]4j'"rg!PZtAB(N@h:O=M%WaMkm.4KBg1YNmN"Zp@;7%(?i.ctt-gd1^Y-aK.t$=6/$3EY9LQVKtS23O.7'0)'6
%*.gL<;cE$<4j=B'^#D?(du[%&N#5;#,!AiOiM4a>ApKu?S8IEpr5GB[518g(35lk-fk%!;:EshuC3Ja12Z(k],:>G!)qqF<Y_`7f
%MW*ki[PuGtS,h4LGN`%l,(,6h`=+e1DI&b56B=B`NE;W,'rOuZU?"BlMGJT8\oY58mDa7FSso5Uo<kj`o+JW":ZJ$C.:egR^FFgC
%8#:`338Aipo)QIh&th&p`rtg'Kr'odQ_0+p)E,dsT+hb@2lOZf0J[Kel<9$G+kPdAMm`01H_Sq#qlpcbJihl?pXmU5+bn/[L`GO^
%A9Ol,o)bdFRg[18LI?74SH2fs5ue.T#V&p;Eo]asKcCG!CZd-Sl8Sg&kil8'S'7GBr'q550TBeC8Osa<rPp<b3gV)1W'?MdKtbOd
%A*7b[`9Yf9,-["IFLjSc$`bO,^pf:=l0Uiu&BPsd.?!bIPmijZ!2WqEkrMKnE'H&g\@f\AO9_=ZiL5dj=acW&0i)SFVaCk@.hr"W
%`=RcV-:@>jcL;nF6Qtm1=-GmFPi^L`cHL^G<-GM-+Ls,^0;oZ9]'1*q<;"V!&/mq'Z:5OPq*nM7*l)'a[0(jrau))Kg[qVUmV/.[
%^bLp!.8eE_)87;]BPq'u\.U]K.7B;V`"im"chO?`m"6\VC+K6Z8)EU$6&3[Y#eRK7=*:GF%]-.aO@^CX@4UhJ(%u!Kno=#*@0e$p
%e+L"f@jpEVA7@f02O:c\fN#i\#LjBa!pb`El;rtO.td7_8Shu2h0EM#qSDdomg48W&mid)=H;Hkb-^>/FuDCW/nlZ=m#]^CODB"k
%_,CKO\T^nJDA&-hC;W\$EtHnQlJ\]ar9OP9:6J,ep/-KE`d'>LS-W?br@2[d'K4d"km'4e$*cm?!G%4,*M&sj5VZb-=#rBYbZt0-
%7+8FbV+a$#e,#kSP_X83`!!+jJpF^'5Yu@'AQ?SDJ>::]b_HJXTiEa1LpZN1**sC(O1jP4`#!ePb!nJXR$n;,qkWJ;;fNAa8l'uc
%5GDu@qS7c'N]EGSG']dLO*`U.',#OgRta0,(FSjK#?V9;7l<]!jtpp__S=ruP34sF%[fkCd[!ccLb/a\EO&llN%g`J6JNuaO%'6P
%Q79VDdND?tPR(WA#eCHtJpGunn:WO"/b\n@T>BXWn>W4JfI.Y1?j2E4E''\OPOH3;$tF*V3-ceJ3\4o9cY=0CMljXNZqhgYkS1@e
%3S$ACVj,Ugc:_f*mYLJ=>r$4&EMdB)fq*JO>Z:FB*[fT*?r>Nm()L7-O=Xe]_pK>!VOV>'Q+c7#mS(Pg+;6uH(bEO5-,.=HRJV<)
%gh.-^8p/Ol9?+TQs+/dk[52ICoeE>1@j4F'QV/TtZg3n5$)[?+LX>%Vgo"$V-E0<kB<""FiqU3ckr>ZjoM"Pc[;dl]D4s>:57Nr-
%DXL@1?+&R`C?bd@e*/aJqrsB]A[.]p_7XZRMZNWK#9CXr9If((5I:g?';CF`TP)j7ogs'N4_3B-Ek67f1(/m;K/9KN\QQKDNh8JN
%4P=_.QJ\C)?H4D98P7g$@aS.aY2:F/>Gmn<[U6,PccK;lY<cVm?.-T8kD_5\hFDti<HW,]">^Aqc]!/iILRG$D#:GP!"&7W@DW=k
%PUJC2gduAL;VC$mYJX=i'l+1J5gC^P>Mtgm,]ROE$UruN=Ci1ZWRS?nonTj%(*9q?I:egiqk5LVIGAZghh"6I`+Nk*Tkjk(Bc*XA
%GupTGR'"Mj>04,Erau0mb)g;)9h,1<Y=OQ['Bp;Ldo_fPnuQgGS*56QT+DG$g?cXfoLeFF=5IEY_j^nl4FrH[:MngjAT&#g%P)0A
%G*sYCp:35*o:cE*97V&M,.bFJ,"O'l%9d$W\2YMU@l[RAm!\^MM%lEXe4qH;]8Pnc6eNh.!o=SP7<?[eXX2TtK2*/@6ba&5;5NAd
%QFk.DKC\OEI"m#sbWJQpna;1'Crr**9FK;eM3XKaC_]Xk2^cO+2^nR:M9D6DE:kX.p:u&/j1(AfRI0=Pr`+)Q\\%h!3[b(RNl1Go
%)As3-pdA,(#`1GL3RUh;,;A*;SdG5EcV?p/m.N!]`f9ptk9S6>+"%Em.f8QhWXN.2(uDH'be7$a;b3p4(BUY8re)s5>cth$OmBOs
%7&3FLS;\/d/1XDkh0LO(M6M8dXp6%u33Y5SFE8CV,?j8-I!F^EF3H<\LN;)a!bm\94XoX_LhJ4D3]?\3'u'eq.=!u[Cpck7ee(R"
%G=#:I=k+]$r`&SL>uLXjPasjF<31K64lkL&VK2cXQ(HU09T9S(a0"W7^gnq%9#rR\6[iFqi&m35iok(Z7*Dn59=Q/7,\Rf@!H0<L
%CB:n.D(mO='Q;Lj%:NXSPah,1=X9[hQ9ke6AYrk"`QXp/GBBJg)!(`SJ8L/I1)j(C1K%.m;e+%4RI[Wd`i"ID#6cARS34nI>eh"p
%$/hLPPV(Qe3iSP9X]g+],EVTOX8BsuJ.OD[ogokc.DedJ3ic7=Kpa@7Een"if2j_7fRIh2pJkQbX?8lA[MC(MZ$V]LAW6eL10cWb
%rU:0b$9"o1>`DqX&egQ4E*O@sj.Q!t#0QK`;917U;SCd0R\[,Z_XC/9*jX>W'::OuF\ZHK_kJ]J'2QZ(WWAl)b.NnN#EO0*nZe,,
%:3,.3JYCX/ad&nBArsG(-<367ek9r5d4(M)1bO2@":QYN_=h3(j_>tGj]J4ccbiT4f6XnH*SM"Dm=^7egmQ8RS4U&Lfcp>tS"AL(
%a;aEQ^Mtb!o0icW`J[RnGVVRjE(91+"67OaUQ/hs-ZdtQO7PX?d&gn7i0lk[RtqB8l#&'/n_W9\*>EuU-9G%n^J!sFmY^A8*B.?%
%H>=`8?`GnNRtd!gbUp#_3)[Al>9r!EHdTaMSVN]sBlWCd&Tm$@PANSOdL`\.Q.KM"@g:O4b&XpZT7nYE+gPS#6e(BtZ-euF7r,Tj
%XWrkOhYb0mPtb&?h7[FrMcMB<ei>Jpd.H;/7h>2/9(,DI59a]A6Q-RXEaJ9oXNiAa@S+&*<L]gKfQZ&P6%Y7)P<rU/AUPiUj5c8Z
%/1Cd4q'\]:#GoEQ^gS*-&F_*m+Q3?M`+NG(Q6"D^_g_-pc'oPh)*jNXZ++'hVR;,YMmbp%S42hHAl]8h)s.\O`037rI7hcHE$gI1
%S0Gp"WU%4@.AAN>B62]9OeU9[2"!4+#ra#uNY4JTWB:%QGu6-im61SM'*Xgl6=o7'mBlKkrmt`>pVlC#7d'oF?Is.ZM(VIc%%![2
%AI;Jj@C1&K0V*9LqCTnB,n[[&=A_2/$A0J:J$U`Y2@]l4pYak@`AmHJK/bHa0jLOYlX)Lnh+1@[7M2G!2+OYthQ&3qZ+2;=FB)$9
%hHr_O\n0N%"R4S']8o[7WZ&gj;mm5CpEsqke`/G@7g1u*@mgs;=:DTaLa/2C&=VafQ]b)T7(U[mbsP/4MEDQa!:$Fu!:FPZ&8-%+
%@b>4rAi8h(o]J1u(;j*!(F=s(:8:OM*G*nWj6UA;39CL]$sW<p,%Q\""AfFELM<!$1CN:`PRU=1cZUb"p;SL?NV`%i'A3p@C3B;l
%VL18r"_*eT/]+;8L4X-n>bSR]PNbL5I2_Q$1I4AbKhF/B-,Bk0eJ/BcG*/_YZ19AK@bE+p69e[NJs]^1T?>Q/-A$H:("$kud]lO0
%j9br8R=I!BgJNSSQD`25Djh(#"!,BTJ=3HAeOcKc[7nG!]-K9O(6;&p*]tGu&-.>VLW+kOY]%,Z>/A*QgKQCnNpu]pj**d-i[U!u
%Ys;,ZD\g4l2<?p,JhYg@HL!oiUKH+]'_>A!?d/q&Li1k%r<&",WqVZ-/`j2b/%C=N3JoPZ>.tAFZ=\7iD=-cP9XVraEF)m%m$lt8
%<Xcs?"Ef7dB*dr9E"[j[BY[iT(]3B/-F@6!<9'(cA',mHY`)+Ai0h%?\B;_j0haG>`#L[[2RG$'L5;5F,deA+1L<B)*.ahPR`:$(
%Lm]uB]gCmP>&,C$)=$9-8+7'Be!rQHNGQ)EZ6\c"H5b;P*q.D*7b`Lp2!NI5l\M2Y?8:[ZS*'=MAWA7AC+Vn?Q:`q%Sj%CAh%].h
%m>gXW;<d&6]i*q'?uCCJ6iP7n-CUcHBR'1]VBZD<.`TYWYY<B?a#G'U6tsBIC6CL]\"^f0H4D@&F->D?R<6-!WR>hJ2T?e;"0c0Z
%)!q5oSIB7/*0E+*m<!3-.H7#[[]p#!#1g5'5Z1E0.3`h5]X;GQ*oKq+PMdm@fpl3(hQ,D[=<9Gb^,X+nL)oG8e9_e$K/&GpMVl%d
%l25s"L*V7nd-$jp!k2FVb0,b0RR1;?2*R6bR/R"dQ!m8@n6lh`:.T!t8c$YE,.S4hE!(EI"uu8fDbnh5(,lq^."]FcW%mK`)Ds-N
%kF727_(fj!Tb6?CoW)F\i1_$-,n%t\Xi$51nQpm'^):3Q9/lKTe?.`.]0&>T^n<,0of'je-)KW[cH8e>?iodhgo62L<Th)5Dns_Z
%('a^ulpO&h8.3/ZGsq.*Zcq%424sI4_c$X+<Sd6nT]SiT1*ibL#TK:AC/`_QKO;lH0;Si2QTZ`tj(k&fr0[3U(E5eg'MId$M%F4D
%G"'7Yh(4_.o9*?@%i7A<-fAOZ4i]:,X."d/*R!*A6m6C?%o\BC)Nt2h'3%C#6=e;%]'lch%QK7T$_tNf/+c2*Jj:bfE7hVpou,$Y
%0)8p1&od+FLEKKkl7V?U%e9&=!,Z<uYo#o"AVSW;#HKrUpOIVSdm6B&oProRPZ.H/(6X\[,T]5&Ie.H5dUDdl?M#[:-opDkmkb[0
%H/+07g@_mfQ).a5JS%Lq3sh5,FS(MgX,$Ep=[qjtr#l=Fh?J\[)TF3E:<6:l]U$UFR6[;GdO,;=j!Bm<4DM2^c`to"AIfWdX4Y0:
%m0)N+gl!$BcE8T7[rYmq?TjDL08l+GK\AcFDtu&LR(;dj#pL3jQP$AkAM*R=)iu(;?A(JJj$8"`4KR5f(M*iFjG)58nfHmU(td'=
%_g%s'4.^-cdi/XJQ0C-'A>:-)AVh.[9+fp%CF/FU,Cl0"TEQUFkYskOT?]7J;i61@!(nToLp.DNq_ECP&G>7YSYF[hq+,Lgd)3ZQ
%?0$^BB;:\fQ/T@%..+bH[ZgnBp+^d"pYDEX0eBWP)!q[ji]c3)qihHgH42g?il6(Zd>B<%60f;rL/fb4%oq&BG%Gk/,VbtV''\,2
%Y+SHh#as;>U*)'[Cf8;EHKXshCfKkdT=[lnWXj'_@?SL4p;K;dOddN93hTo>T;V5-U!6.YjE-O-L)n5JEIZI(2s*V5e!oDY-0g4[
%F0==`T?YQn`cHH]D"`r1(2d-_6oL=]b#dafZke<%6C']9no0^FT_G"O7h#>K*APWP8dg?%@GWASZRLiS+;cne]+ES*`T[W@)YiqL
%gG*Gh2,0>':c\>l0kZJVLZN+>DANkNl^E("(aC87&<G,i4<=N8G;Mj"n)uc77S*Vh9?;11+lhO_'GmU^AS`%o8OZ$+Wb+5iVi7a!
%)GuVUZ:)Safn>1QQk(4H6h5U;Bk[&e6_K*3"6@dkK8ig0#9<mYC3c5o;9RZf]Sjm%Q%lWLj8^NkeUe^hJj'>=%4ME)$`.h@+@%+8
%nE'2mJO+5HZI?39<'A\%o\-nibTgDcLIq'b%[R_6W)C<R`CJ9V"K\,`#F<PlX:bFo>uZc*o?/0.$O]?CdY5f>O"2`%#kE9so'ikk
%JCmG=gtj^7jCBgh!ISkI0cs!_;$"t2Q<uX?(I58bl3Jr0Ohqo74eXO_iD/$,P#COCW'KCVGiWmK1oE:/;d,C!#G3TW:qHb^?Fl3>
%in=5Tg`Zm,#lq5n",ktj!l="l^3aKQ#Dk)a$:lUie!pn0kJ!,g`3GC*hT1@H@f3#KR`bNf*f<m!mPu>Tao"p9%*1sokTgtETW=\_
%XKVDJAX4-M!SJL4<n]p">jp,ceVeq?!>:r!emK@^D01?rpd)-S?$6/q^^,^KabM)1b'8qLVKSDE!:;H<Ae#i"9AY/m$]dP([]#X%
%`D0mIr()`i(G$tU#+O_]aC6d,<t8a:89q(GP#@s@C(2O$[p$Rh];aA?Mef6P#0AR+_1Np59h""!GcMS];@gRj<s"r,.#,aPR'rcT
%'!/tZ;X9+TA1octi2PLmVaJ4Kbn"i?O&GB//43#9S+R_3GaspD(F*!]Q(Ff.kLLp@J.!#ecm-b&`\!W"Q"0tZP[/#d79!1Y8*R:P
%j-D"ZqB;(G#FPKc`p/UqD*M6eE0eDJ*K-JC,i+$,4@9C3+,h472YbXuB06545!/GX*jo\c-VM\RElb%J/;q27r-GT7p#.ES'%gEO
%.jtG=5>n:3,D&7dMgT$6j$$sJH-D>kY7Q!7<L)2B'M(]lTWH)hV`Ffr/o,.77UdTVjW.#q5>;lRZL!m-IGU%K30rfmWg3F`Wf)4q
%j:X^%[aI?*SjYOPCK(:HdRV"F*7PK/Bben/5cBhinaGi)ApMbI[:n%k?4qO'L9_c]4[(3V&d>K'6D_e4<DMQ,^R?)MrS%G@O<,[Z
%'[I-_iDgWuj'`M9Y)9Q@b6,I=iHW.pmZR7YcB)O-/V2la<o.FS1^D_>''k@Ge%>[";'Md[("(4Lj9#J!@TF&Hcf34ui,)A7M_B-T
%?r+u<:V\<A)?[,n-!QNkj:j6&'UQeG3#?SF=5E%%@1IJ-QQ!CM!+-.7Cbf%f#Mdl-I32oSl#-K0j%`J/^3S-h`jg`?bs,ukd%4@L
%2)(VMq]K!M$sk_cP3FElDAA*MdTCIZ-o'WI@O/.\OlI<,JCL!Kg<r;Y.FQI-j:N5+-0iY0"&N6up'*Do-/>Fr<,$RGcr+#5#aDd6
%DEAAh1-Zh8T5kGaFL%Qb;Xf4+J#:l@kh_]lO!8F+/@e-#fel"Dag>jIqjZ0N?)/q=Alu+VhX<rnrIO:-ruj*9DNUD`Z85+%-AY,k
%cr@%GSNe^e/P+ATD!6qT6B),T\5bhKWg$&fN.a@rpYb6`Bg-W&j*,W\AX-"$/*3@`\^t5&go]MJ?e]Ws+d0o&1L(e#+igkMK]t2D
%%[u<a[Kq0+Bq3/qIArLT*(^pS]QI0*EH4HWdXL`"^cjm]@s'H'1iqmnm-;0+O.CJ;^acipR".tiY#hC8GbEOI8r7^c1>$=W`2fSn
%"%4BFl-!XqZ&erF)M2"BF"]b>qeq+o9hY??'UlY%@eV=G>bO8`R0,&6]8;5,)K)MNMV74mgQRHq\XN34+P0i)C%jbAUE5!n]OG+a
%GIQssEeg!G?nmt%!!_u;iDr\8ad1#='h0lM-.kf4=.k:8#cNM?%3:-09^Z[3bD<+1IF*GN%O5r1VVRJ3_Zu^h=s!A]H$J3e^?T2N
%Bf5:\q#q#Ud!k.`LurSgU3X4oZW"s"8-rb\^/3X41]0'G\QNeD23"1gWA3C9.:2sXQMJ'"4MEJVOMf![?@9):Wk/[UF[?-_)h;7Q
%'Pa)hhj_^Ka%jNahiSU2aZd>NLHq":%Zoo64d[&+RgYEaU-*'g8gIkcCG>!@1?PE[7h*cX*I(jFk_O;'JLcmc(?53AlfBgS,:qCh
%h-gTb9;(l+$N\j4GA!5[99'pb[R]C?>7fq\09=59e00;@of^n<c!riS&3T^'[<BF8rT2NpVRII"NlT8ZL&%%OHi%>"]\.[>%S%f!
%k&(Ne,<M$FE1GYC,"SoGKY[[@L_=1Qk.K_9%aGVnqP8Ih_.FMpf>$WkqIg&BR.7%mnF(NMj7s7Cgsb<.;%,tHNtri@HM*ad??3=3
%k%Wd$]md=Z,j>)FH+oKQe7_aHib/H2V"cI.+>E[1R9L)Mf,1;.I/Qa-:b=U[.Xd@3'oOL%CV-kKPs1$aY]P+rBGk[%^CnS>0-P7_
%#nJnd2MWP/;)MRHR!biVs!h<T[o'^tME\E/jgCk%[-DWZW<&$X^unfDPRS_T"r=<Q84NiTOF:Y/U^Yqg%P8tujW((fhI_RmE%p>r
%-!X#-_?$R%(C37PaB'oK4!9Ttn=6?3M91k?11Ze^R0[4qoo`q>XiP;L<WqPOBM`'4?mnkBq-_Kn29cA7"BUX!$/ua;A:tCP^OY!9
%F-]^$gg?(?[+G1S\jF3a(FhTT$4H#=o+B'Rm#'A8'CJ-!.0_rS8[db^Z=<g<7E.p!<F?eL>r6Du2E%!,DZ3"+1`ce9+EYMIYdCdb
%qY/%6^:TZ0PN(gT?1,;i4[<^5?d<qP3&KZN?8!$f+e^"n$.tKVB^A.A20(4/[^Rf&,cPtLXf7G1],NIQNCd9.LGL%WU>f(p^V`)"
%;\o0'g5OZfS^nBl2ac&=Jt1^>nJiNn:ZJKEqp<!@OUg?;`P&d:L`_SbA)/`=07FQPk*"*B)B?u_j)+eL/:cnVolt-aI'o.0Nd5[h
%C$:&Y\o(CWG<L=;GRfVdZm<X0)b%T:O@A^KSWQa6fk-.<F1@3)CV8N5:fOiA9UmQk;(/\8I&EW"LJZ($K-(Os&tALh]Dt=N=WGL8
%K2V6D#T(+:+A!Ch*T_4<GBE6/Z\='VfMMF;+`J$1$%pG&MeV#8':g.;;nC,]o`prh+E+e411]LJQ>_+4RrfCcqKODm[l&4A?i)hd
%QZ@FXEiX%:C6A:O"s/igLmTMqB!9U@K3O>h+15slrC*CTKY<&jf;@R^$0tAOVsXtg)0j.p72p>p=BPjHYGCN]&CD:SQ]dOYJ<u%#
%-6huHB#BW*^W9gE2AH9$RW>ka]!U<+JSi!Ljh4gEQgD3%&(&3UQt0kP1[i>c9)4kM&VNRW.8d*c@3<RCItZ#[3SeVi_j=(17iZ"B
%o1C-UDu\h`H.!j*"6*&()V'2i!m+*4c/,PTI.n7!H?(b#cIF%&&?0s&Gua*'TZ97\Lo43f]&,$Q=;W/7hcX`Yc$(Lf>OMq*D9TA"
%aTIRWAR>l3[iRF/WKR;IijrIJ^it"[OO5+VE,X2;H*+#1E"nd:TlbZ$dsVD^fXkm'e\;rk?$2?]?Tp\2rcX,5[U&#JDJ3VcD"XaP
%#SSKDk.'[Z,9VZ2@aL2kaRS=+?+us(k/@VcbhTbe>]t;n\ZV/,@<`D],1ct/:s@h76IabBn`Gm4Do7&MRF/]Cml.g^-9%;kk,*cc
%@nX)LeY3A3h1Mq'M_l$>)^q39)?;1/CR:q?96<sP)MH:2-2L>_n7cV9FJg(nV;G/UHVVC.jfSPG0_a;e__8t8>]";;+?/ZK]7#'1
%^/4"\Fp:@g.;Q:]qA[.=p!f(PM,P2oakC!b\,j<JTY\<>QGeAnZOMY+O['":b`i!^h4h]TDS-kg3O_DK!C.jm8H,9?p2k*u#h^P"
%drh_%3!jLD"C7`Q!a-9ArQW87-A&kbDLB^Y[W-t>,QQOS'^>!L&Of26>2a4)A37A=#%RDm1)S5F>m[=7Pl[.R7%ae68_+(['V(fp
%[V+Hs!m%q>>^FlUmq_;5du*TAk++XL6Uo"U'1kA]%V!]IGCqg)0s&-W.0$k?KPc=Rh)bJ2;M1i[-8<(r[CAq%W?_*ZggEH"_W5!#
%QA;oABQ;L2*ZtDo>mRVN!)KC$`RJk6^_#c5",LfG3ojPd_iJu"I(R/Wh9D;_oW@Dcptf!d?Q(?cU(e=>eRThKZuu.F@Im.1rWkhT
%`%6!Q6!u1+?s7p$&mT6b0_g`>9u[/5=-Q,*B-?F?3B#CN-odesi9&h8'M\sd%$Ui^0nn"ISEoRk!AnOZ_d&fTO2%)KYA?F:.#%#@
%]JJW`MWO?H<@sq@U9[$d7D^SaKH8_b)#+YanAA#h;EFkoe3A8EmC#e[cFd[HgH8r#`:><B@Dj2>7FaM_G!-95@'UDm0gnFO,^)lW
%Mtq#B0'3F"O(#J_6_hJ4S]ljVL5OXUf5q&3]4C4Rplf]mlB)5kEi8bK#(f:b*\f\fPQ(.*Bb;-CC*ee!L+=?q2soKY52u*18'rjr
%'Z>FkMm>:*.FSB*imqt&c3[?5?1-rl2]cXl>q#j/pCepsZrh*c.,bOrnrOB@d0j]eQXbJ-M[sI2]?1C_+CsKcPA"BkdDtZel@`I,
%MJHfsAf]:uLUGE:rdsqDP-r,g4kA7jFT2F40uI"T'ITu5EG_\\kYbrf#.$\;4A:YVkh=B?IONC5=[L,Dng@:.V]Rk!bh]Kh*.Hs&
%/S*%1i1'VmLs&NI?_'$U6`,K%@G]?`d+#H7BJi5%HYHL46::Z<9>ToiZk%ON6J"XJ*f.#'`e^m/!FSRa3`Vu;**ruIM5kqhOK\%I
%N5jFX5G$8Lob-YC!S;1^]*qpP^@I#4i\O8AatL/S9j'N&/q=U"K_![*45]JGj)$Eah(#h7R%I_Z6Y(X=%Ztmti^,!BZ8s':;SLtC
%`A!,$aTg59Cqfa$bY])r!Mhf:KrM+^FRVIuB[edUo6+KB(\mH^0Ar-^&W,.%,o8pL?ck<KT4T)eC[ZHLl9Z@pf'S/;k>t/V;IZZ8
%qb9gpp<#[s>;Z@L^tTY=9&5i,iGN<PYC+q,`Kece)uM#hYobJEl'.1_(;H*No9$MaU3U:4a*kB.Wmn,aA]5Ym)YScS>;nN,].k"N
%"HV<%j:c,R3.Ya]D7-N;ho#+EhP9<X4fl@!jp[KU,aeW5M*kZdn0J,I(lkD`Z@@Ue7%IOnTh#GPYa?K!Gg6-A]Xat>f>WH9_n[Sq
%gI&k,:l+)K`J[6^FEDH=^c9ITqr[2K"<Hk"76L(e3&g-DcK&g8#O"As`%6o\#eEiLC6G3<ZeNHE%Ue*%*R>M0!JLls?2C3*4H`At
%J2%,XLE#FX=+9$:#Wc5qI?((ja^IdIKRM%TZ`2f/^\&BdLPj';p2C4]l&.\j]RjD-;PKERAN[+bV-TV9nR8.%ai,tq29Th;"pm`d
%)0"#jojX_?&)2b"okPc#Pb:g51PCF<\%>l4lK#KB#`Q!U,<FM@-l5%"/i4Sp_0:6UCsb\-6JP7t?5MK1`"Y6j-p$$rW,UH"FYV9'
%R[Q+'L\A\>]II@96`Q*SccdXsR3cF2,l(Q,34XEb1`+(TK<D]5$3PZ/Ds.mhpqjGfhgLenPO@FFL>,f#nl2;HW*_5F],MqBC/L</
%%OnBSO00%eK2=%3H^BAM@]lKh(cQeZahf9LQptr8r:XTF1qBpZ[[+G1:$QEl-H+&l%<W^`s)(SI37k?^JCan'=&K<r!R\B3a"Jpa
%%O,jERTk"7j@Gb]ZT\3@m>O0@keM1KIZI5$7QU*iqrpnsV`u\53)YifQZ^M:4Nfg0jc;3Yq#er`O&>^Up+bl^S:Ac'T4B(NmZSW$
%epWj<N64rfO<6!&J;MJlGa=9S[lqc$B'!+haS:=a)9JuX/12=#?XY8PA^Bq1q6FY$afPCI2]4jL$9K-O^Vio["(#@`ZYuJt.._"G
%ZBSMdj#gmrbd1")ZguRMA_)9`Xj!(oa]E*1-Q1,,LlZVCnH1GLQMCWdn<P/Fi$6HWp;+e[bFY>%Z'RI-cgmFUY#cIam$Up7bkQaM
%Z^CR\a*GmRr"UP7^]%@g1LKi,S!fOKiA9L!Sn9gSo$a+@rphS@Ae*P$]Ok2nQJ'KZI@/d5??h%WbdY@(Dt\!rNoB=ZH]I.1b-/%>
%nH5uaSFQMM9P69A"g51Yi&S7;j,s!:^@T5Pp&W/h>P8EeR9fD0l^;mfj?:,u5L+Z=QbC7aB%K5iIcb8?/H=CMcuTV/<dp26rOD=q
%j"+m;faBoU%be6_BN0GL$dC!q@5]s6IYeT[6$Rqmc%1.o'@!+sKba"3r\uS-r.3Ied;6WLgh=uaO0bUp+afY!rA]NR?q@U+?K"Fb
%#bGX"Zgs;BC"@]d.EtZc0NX]AlUeNAlTW@Uk*l**A,:2Zr8X;]+0?Vs:%M"Bba[aV50'2e9R2X[buVNpT(Z.Z3.KZ"q@&#1L>u2P
%C4=gU=k)fV-[F4?q_XM*rUgMaRbQsTChdj8cgn'gjj,]^mj>i*37T"U='4!:eNV9Zp+$##ZeEIZa19_WDOtE@q^1kR^Y32nEJF/H
%eGB9eqD.Si`3SMA^V[=cSbs2N3j-%iENL>'iWF"4gNh-7Xma:'Nu6LCgXM!<fBe2-=P%XD]u%Ci"7,!kCOX)-ghRDe/*q%1i5>J.
%4/8BW@'dJ:ia?gZ]Y_Oo?2PZQqsJq1+VU=enSp1in)Vg"Z0rM(+7ZW)cI<@ZZFq/?cH0[6?XRG,?Lo-iS!BUVB!^nUgh_>F5L.Pd
%#i]!92Ch#8d.T+Wa3jn^(5)N.9A<mgB6`.3q@lm*k?jkEC8:4GCi*5P0OO_9koVUfJ,]+Tc8M`;_V5"bf7/=[rU[5m!-9*E?fGtp
%D(i-&rVTUlD)V)j#5?G&i5LI2gcti81lM7o$Pr=W*r!u>>g.tjh#)_9\_MYgF)5_nIYlC1+*a7%c-"@Q\lnhD<]@e\"^X-[Iu`4,
%[Q_n%B'!+Hh=uOKq;&.K/Aq@incq/2r3Bs<hL+(!4E!1FUJ,Sgr\W7(k?jinHh2HRjEpK2T4NDVngg5Kr4pd_DcD1SpW[&oJbdPS
%H^=QRQT`Okk%?g"s$l*_);sr,O)r)sSBnLVq&.NK_"eQa@tNagVmtZdp^A+3NVPOUgn4NZ,Fel,/16rPr!FsE+8.6=S<]^XLARH)
%c4+DV4Ne4Ij_+DJCt]7*EDOgiEl:!&50ae]j"Ko?g%JL7iX^CsO1=3+j.9b=hcJi.pu6PtBuW+_5KapWT>//[kEe?T)s>D9AWHXD
%T&YjCnoO/;[eU++\.@G/)!#!8:N=JO%Bm"WnH2SYaBeTj-9:D+^a80RJ"06Y:4.ppcC.N`b1YIOE6?i]ca(\847EKfEq\'7b]<Eo
%a1:<e8"X@ZZa%jIb9(Bl#8lUko]J3rpH@Jj/9Cg]$TrLElkQD.Vs\V2o:#pZ,ITT;kQS[\5O9-)q;[k@J91.f4i]UuRi<I.S[0,>
%@%Q7Me/r\VH'`c=IK%dcrhKC4)nmD)T\gRX%lrjFZqmsRn)i;YGj+m+jU[aBXSOIah&"G!ZdEUlI>Er55I#[U8@K?0$n)"&WW'q@
%l0Q,3H0MF-,W#C:3.6UPmd'mom.C04m>(U]c^9bLeEnZ1L8.LNb-NYla,T*]4E]PmT4=nUKCp3cSWuFb<bFA(_H4La(Os5&kI[>H
%X?X/Z"0?Y=bHnj(4!UA,Y$V\"O)W_8jaEH.c<!0P?YAJ%)!prF5K@3qG<F&XBB<3>ljl>M!@I\,RdhORqp3%VmAE21:OiB,^]!KU
%5*^;IdZ1O9rqhA>.`2f[\&ED<T2QTYXosJ!c?WZ3iHLopTh92CCZA%3SXc-1-g'P\A4eh!`1M*pDJg"OQ5Dbj`C0AN'%G5#2]2MA
%BC:7Pi[?!bGb^$&(n0-qUFFJCS="^#I"5#-q<;t1H!*-1-BKa:LEfVKAK$3s<@ctJq'Yg?X^HS(htn?KOhcT#jE+9LF*a+*o)MDO
%kfHHrTX-C[#=)WC)=KZ%qB#+KC+qqQoGRYjCd5HfiE>7\+h"NZj*En1mL=VNqb(OW"j#q_<da@+rAm7J'lS<SP]+GO:8dN*:8AK,
%7Rd=mGOFGVE"shc<BMf\nEk/.7lkhu'q-Og8/n1kWZ</Z/F*EaX[Tn=`/!i@!a)ZS^[[iVG_Kt+Pt-MQL2;Lkc4_@VOdt]P/l?%q
%Ob0:J$\C(2+uuS?%)uJJ5oX/g<&<Os?iS;6s4b<g+91p*n,Ms^J,>l<p>sd'L9a&DY8Gu7+Qkt;qChmC^]3''r9aO]o]Q8N?iTrh
%m6?'s^]*o`s!K;re#33L<W@:@chB3L1DD'#1#*V%jfr_.%mMos0a\#_d,;kEOQ9E4@V#Nf+d3MB%L%VWdnMAT0)"[*Ic'V*X(;.K
%n$/oI-umr8[IfhB6gIA4grW]VF&+/=*02m[Scoq/6H]LJ\Z)gW3MFCr4KgTJAqq_7!)YkJ3G6XDHVILWEb@Qm$=?cpVscKBIJ^^_
%?;nch>uCYAqp"$P,mR>[Omi'A?TG%NgNW\5H2Y&7HAlD8V;3i8T3"D-^3\,[2ej\Sdl<n:kPd#5><<WU5De0FRA4Du#[DenF[Z\u
%/8I8Sb0rPq])&,19Z(X@9682l273T9M5pIFP]MfDF;cUblk($VIKB>sSC@*l!scSXk^U/J30R)>s-9F/IT_l`$mtX0gc';/]Z>BY
%BnIc7@]XaAF:e`-2sK+3Mu=!BC]M\F=`iuU!X3u?9u$#7r=SY`4A4/^q^0@U-:6up%.A`M;IFD8@R&uMJ_p24&8$\<<j=nE[)4`Y
%-sNF.e*'SN^'h3URQ]\;FPf"AbMQUKk@q(<&8^AOfgJr.YojE6$Q+38qkZIA/3@da*ntJb!h)kAchHa>370(NrAX3@_j9k-*&k-G
%cG""KQ2ThJA=_\&>\@5'b]TG6TR1L=eR*t0Ye7r*A;ff"NYn0R\2Rt;c&;HE@oGXGm6#;E==uGulR#%n)X&0o[Kqll[[B?@bfY4s
%D(cpX#bq"W)\pK=1782):0(aI<!a+'qVlJqL$+7tF-\..$unq`R4!=*BCj*6.s1Z9mleGS\,H<4#*F1ob%Y)@=9o1$k,d#Jr8Sh,
%NtOSCesqrk+I>?ke[_rGDY?bol#9NIQ[*_(,S^PAnc*W!_c@D1n(dWuRuBf-]lsD2EuNHeTZe@^_f#UAIjM-0$m?*R$E*Z%#-YR$
%W;oiEms>`-j-8-K^\PS;r)&BA>SHf:S5O=Ka!c(Q$5=Z;0Teja1146p[mKD=:*!1-4@mr9M.foR%_$d9E?mE>iZdfV*JYBe)$Ku:
%6%=*Z7;o'BhE7tH$lAj(H/m0K]ME=P]N77l;&68]^Q-8f*Y#%X5$heYId^!\fRTKi:*,?(Y9XA%D\fEiX]p_$fN`s[m'^*/aLjUF
%O?X(ldt;jJ7/*KR!_\YqIc*@&a8!;d9h;.#8ALSMFb4;!-==WsH;39og2C0j_[S'(@u_?`>;j"?'8bZ7H&&m'!8:Y!T._Tu/4[/S
%f@2g^X#M1_@b/(l0<D;<!.!kSIc/5:qE+0AID>.[Qo"q1C;WRB>7FAs&_!%L)g!:?M8u(GRmipE,>8\)Drg/qb4`_'[OP\3]nY_&
%S!Dmu+M=@5NA\K&`4s(5cK)+IHfo>;NS77UNOi\a6@_n[IYuB3*"h\jXb_]!cOQ_S#*JKB\,9Z-)O@p0!]oUqZV'GC[Kar<TnQ6G
%khI)SL1-#Zfn6L6B3VPiKg*H.YUSVA<cdXG0%f.Y2nqklW:RYb%E:$8B,q>Z<QX?NgVt<r!_2T2fhO5\ZJ;%ba=L<*/=;M/(c+!?
%UZ^uO#J;j/Ie='k#D_J_S`FmEQu]9IkZQd%RlC;[?hXfXh!Hq$-::1O#6Uno_\/V'!>X'=&dNs_P_9&s(RBbV/tOMqK2$Yp6$:V@
%=tE&7.*l9$*o&b,DQR"qK5Pk[(aYDjQ<Cf`gP5^kL:Kc(jV=O0;m^\fNTcL8h]RlHRrr=r7u,QU%L!'INc63rnrF<n(2>#"[fL5K
%r?4J<q;tDdlc8r)oB%m&o,K)Ad)E,4",X$hGgrh6GDb'e#u#SIo"&]aK_=pQehGc9>79Khl`q.TR*Dk?<qYPl^KDhm!LG7=HBid[
%QD@*:qS8Y^$X0e\_[o6Dl-h+06kaQ`Mfh5BnY\JBgQ29[H9SI,4C@[4'KWDH"%;Uu7B\#2_9PWYJm-uroL-:#+7Hp4'2HUs)7?j(
%2&!FI#*XJu4hpH`r;fiW=#(C-E+mMcGQ?MC'q/R18)9)G"Q?Wd5a_HO<PVmD[,qN:&i>or;s3:;mfLHuX;sDnGk$>'+tEto*4(cV
%RiOAL+:%"*^=1FN*Wp@?eX*/X\J:rO)3]JYUp`hVfnA`o,"^sXXQ-<"/],6D_)<QT<-h/JkR&PZVUVrdIF7N\EIYo52'osb'_)N3
%IO-n>3;89[e`9dmO+-D5XHK?"E!RL7[0B/n->rq-hPJ@Bo8]J\OqQkWg?;?m*>Z+PEY<Z4JTmYE_XFl&5OV_@MmJBAd]?S`nDPmj
%U>hcDTsfO7/b'^`O@1XR,9r_7!$rqSbCT\3j=UP:Q($eEAmpq`gGf)F?hXe!)a`0p,j4Z@Hd=crW[S-,m?iP9FC+2_RaQ_2eF?l[
%Od3e%2-3^5Xk\&SKKV"&Tt8SN3Ni;J(DF?9;h!HX]&E]if7FY7<?$G;X[)BAQaW>P6A.Rs7J-<?QLgcoEksSd@KFFdFAH?fC<eD(
%PE4JY\`Ydi:pB`=V^[Fe"W@3r4hpH`r;e\YP%eM.SZ;pEIDoE:BOLoB24D)"<Er'crleJ>^iD*&RmGt1fF$t35/cB4..dLT/<Ur\
%FD#6/^oq@l6Qnj_V$UrJNoq2h]l+kd_nOBgjh3EdE35EI%<R/uV[_Da3blK[:W3H;$)OA=oU3"'i$<$mHo9$n1Pfoe'j,nV@=RmC
%htPn)J9s@i^UUn285"M71"2JB.^=9Eq9`2/F^0Jtk]<sDNhXBum@=&?(1U1hUo7q^.pT-V&?20"e;)s]lt1G88ha*l5s5.DOoK^9
%T&Y-'(3=iak2$M'&FD2$kWs#[PPBJ63#;9)94BkPg]mE[`6>_g,#$KbBL5:Cnpp]fqr=.^rP%1_#>COYH=NK]BZoctI&Vh=-l#mf
%#\@t%TW,$^?e+kmocgjD@2,M*?C6(ILBOH'&dc:O5U$KZ&Qa(].J4pM@L84n:-8Ki2\+i=R<'.h@gIM\AfSe>Y(]EBW:/np3s2ZR
%D6nFR-F2:aBDZfUh0p&qQoS-9^3\0Kk@Hl.ka=I5M:.[\.E$3kop#4JC^PThOp6i[_1\g"#O`YPWU(Z;Q^PgJ6oHL[]HBhFleM-p
%MPTE'k=CPKl("DjH;[0IG/U%kds%8V!s_50j#f5+=kms#%'kmY9O-?Lg8$D.S^l!t6l.E=p(%JP]t7phKZ26S/4ZppHib?/+_1An
%COXkgqq\.Y!>l#F&&afGG7l>f`F-P+0T15FbfV0'@G;+)&ubS(IRmOjYKHLZ3X(6rqctHa>Wpr6%]kI0J\/7M4a@>!,RD;^"8CP^
%rpV,aiSXM,S>"t?=ZPusZkS>VQ^jBG]5jqX%*?q%oOXp=#nbX*Os1Ud6DlH[KW^,@e^`f/Du+msmLP[DkI*+1*<90B,]FP_O$!]"
%?8'C4!5]k!?qYlkY/hbt$;g(W2_-sC#!H[Z"(YO@Uqo`_/Ft_5U*kh8.PUuES.,=hkcc]2=)Ik4\"7_7J)QRVp1iQRiVT+nBq+q+
%8Q@e"7m\0qQ1Efq]2fs7))b@jR%bofE8K*XhnJ:JrO+pub)h:n(^Q73ePcZ=ge)74GkBADWB)n=(;O:OUq/%;O[b#jqFal/'jTN,
%rV.1o$B&b#B8r^k^.8DpO;gdM.qMX3@L%CdSNkcF6!7nTpgHTJ)^RI/ShiVA*PlBYZ[2=I=TVJ4WB2iu`Ff6gU^k<$"f3DIC%L$G
%YPDJ=lOT@;VkG\Lro!u2lBa$X;['$0<_coZ"L-HP)LMNf^LE,g:1?Mc5HV?-HqkC]6rlH5?f6Yq?\N1u`'b.O!qoJ<`qZ#]r[=.S
%>*/[d`.0UY*$!XB4f.$[p%Z@E35PAqk0/`WJeOPt:#;FthDn$MPn676F%]4904PMgHMj6krN77:#L&R`jmSBk'*p>-futR%9%a7k
%mnq<O+lP!8FY+nto72WSRi.bt1g!+pAQa2<\I/$(jtt'jbWgX4BSUl?QGbl0DKCEEC$-":E"HT+A_L*nHnIV2Dr)5.3$LN]XGtl[
%C0hn^'d[n`A.3.Zcu_Tu;'BiEKD=1;rN>&Oa.,hn!5.\1oVnuR0<H\a(E@Du)cms:TNKJWaeDjM9?bl7YS7[KI(G/5jul#f:Hpk@
%`5l)6]it7?UBI(ZgI?Ve_03M4)_^!0BM',:$'gBK@`(@1>Xed\%'$::Qe*AVK4=@Q9cN`,@8lU,?57Tlb0/"_YMSlGPNX+bZp3Q=
%1aNPSC/lb?<jH!J:f!JlJH9UeUY`+*`h&m.:UfV`oWt^GU7<X(Y#[6Mj!brjU0=HkRi-KW_#@Q%IPa45o<5g6K:M77Gr*NO)fb?]
%X2.?L7bRqJ!PhNCU2\,aPAEn_'#2f6[&afNrc//,&-nP-M$qUsdTbe604mDa>A5,ioAae-U1tqDrS)MpBR9VE?1UQoWJ2Eu#["M-
%rtkD]/!a^KG4U=^LR8ch;TX2KL>>-'"9Hq9F-3tqC-b@UaARf7^R)(C[d,!d/%k2:4.81Mm=!7)fmBp1f89VK$:]]\@*9tDk*k;+
%ENG.-'uR1`&9CA%TOK*e&kHXoHk%u6AT<gY@-CDlJn6G&!*3pk$2$<$PSS3f=XUbpcF9\EKMILWQ((KrN2!p4VGh@&=pY<QD[KnW
%o(@442_01GH864X4R:C,'(*f\&oe'D,/lCT1NQD0FJQ7?"jOrb,52@Vj82Jqj2:c7T#!qXl7#g?)-nL>heG8?515`L&ECU[q&Vhi
%BrJY&JbG=p6-@#KTonAY@F-nDVqo^3!D/#4r!hR$B\Z%D;<V/W#3_<6r]8q]]B\o2VK?BA_sN8Va>S&nMr_.=g)`jGP$)2/=]Ks@
%&q,-&E0390fb0@cC=o3:P-'4`U3F;[O!l>B\>!34\(6q0d!Zf^YK_s1j-eaPJmXd:PH@@komg0Q7i*\d[-Rj9V"">.hEoR3a5/I8
%4Tcnd7O';on^XD_C''.DC,:!&pcE6j[,(`DB>[dAS!'bB67s%2cSB%E443r^gB[ZA\HJ*;;ZX7le-qMbo:i(bI*iTE-qgL5K?;Ct
%j!rW_h>NRU0<ubO?Tn;(ib?A@YQ:9<UK9?302XIRLe"pX^@UgjbC&p'*iWkc`72j%]o@%)0lA,dP[P&LB0t!e8qM[YmFs9'97,>q
%\^T"QH8fPq!qhM[I@QYeH/Dj'M"]rj'Ae$_Wqm1!e(9U54'$'Of\48cRp#X5aS_8K"4i1=Xj/G7`a0FXAt'$TIlK9Vr(Ir4:M*5g
%IC%tUY`U229Zs[4m<=omG+!b!WQ2u\fVF5-$5+!a!HfhKlE6`js6IcH0s+YF.67CP1lnL4_,S:"(!:f3qC>``GjOOKhY5kjK"qG*
%(25(n(ncBTX/R%E/^R!VGoQDS].4Qb^89%%MNHOIW@iQAF*,s_@OEX_"Gg6>g0qWP2sLUs>A;)HJW%OJ%cm5XnpGqXDgd^T?I_^H
%(#8:d/5adEZi*=Hm'VXd[*7QFPGSFe$>#.NK?SXp2Znnecp_'B$j%_FQ6(5tHJb4hM"dd#9)mbWA-lUe)D">E*\/sn^q#OoWZ)8U
%^+$KK7\_P,F,Q$,ebuKEDTl@P-iXPA,>8k4V&PVeL`d/$<p]_Lr;0Y(lmZJ\$$E'^ROGX*iOC;EDqtI,M)1uA&;TD9[VX*=ARRmr
%,5SIr[/KD\+2gWVd3;6G$<GmCm]g$T%_[ukPII.NWbBo*O`n+<@PlC,$:Jjg2=>?`esJ#"N(Ssr(g0NUEJ#YO4YKnVYgYNKJ&Buo
%hd,I'qk7o5(Xct9`OQ]J@ASWM[hU[0?4N:[WEsrfQmF`C7p,7IA2sen*7*^69HV7nJLI`@cCiW(:!Gp]p'c3Ic'7Tp`IpcpKYpd(
%AdYHqelK@UIa1[HP+6'`fS0aLPBWqR'SZFAA.YD[UcppiN4.(sIW:X&TA7ncV<[-rZr(/C](JCZ5R"P2;U6r)>eEt*X+YR%/lU'P
%-uLNE\3JB]oe_;h\a@@u<.&1cnaV&:`=I",Am]K,(]pRJ\B@6HP8K^gRg3)1*!='CHDfEZS=89WG)sEYCLji6<?"(P,%n;293-oE
%mP<[):WBY1?\u&'!FFcM/bc1/d:=1M1)Q8O!4s`5[/h?P+?A?WCm-o$TVtm:qHcseM!6&JPr$,Bh0h]Q)B>!AT8hp`YGP[6=[FR7
%#SXoUcgt:6+4M5iAg*`fl:'Id&dJTC/LYUC"WD$Bp1rco**B2'Ze0YLG>3!Td#O')?[5'c*_X@0:.`jbYJ)qADobc=<_(Mdb.8<6
%6.C@t\^iG0EG=`T"/R<6S^Ic^_078QUX&Ilh:qN;jB[FQTXC*@NCkpcY9*,27>rBG#LI_W.g`i.e0Ek+(_7j'KO&W^4*I6#Q*=b)
%aP/`DmbN1<Tt5*#.[LhEdYJaAbTD.jV0Iqol;G7^kJ"$nZ+B)^#MAdn<fXOu)@@4Edlt`?ok#s6,aVIom5EuAZFH%i\hpl^p(l=0
%]hm]ZdHV,QjQX0/PEj_4%^LMjet?W>oA"GXQIO=1IA8bKD5RMnXR4.]R4L%!R!G7#VOb'+=rLJ:>f%Wb06L-WUe.GGB-FDW.2INd
%N4laq"r=OCF3hZ7"W_B?Z\4'j*L@7]=:%j_TFt\OVMe(lH6p&m6TNn!QsQ:$Kq]-QON]%5Qsp+$)B-Pc'_ZVIe^3?M-CDYqa1S'.
%U:slrUaHHR[AN)c/_qqNfh%i*3Pg2?C>R\S<'4hq%0k4<[#KXd(O8&[M=Q`h5f*(?#8Q"1Bk]7&LV1a#B!`HO-P:`/],<a3hK]5K
%LY&$1K>uhao1<cneU3N)bqk^#-fNMe#VOYX)<1aha15Y4&Z!45A57nc8#2U(q"tPj*,7LsfX.\=6KVl,&LH;AqseFhAD&]tEZf#g
%&i+J7).<ToX8-%C;@ltJEiu5&6.s2r%c'1m`D5$<QYY560s5bA("t^]5S"+q\<HX09,Kf<a7p-2>\u@1N(?nVS+:?V%8X#JYY\kH
%XRAKJmk[jp%26kMTPU`Lb2)'ON[M96\fhr.P<e>Ib-0^@!GKf&q(YQo\PHgO<uJ\^-mM]t<Ee8Y;X#G!]/M#d6e_1<-`<G#[qPd2
%/XiQA219"k^7<UX7J[(YPne"=PoqBMBY8u+QSbV6phu@;,(N[`.Brj6'8/rk:E'MBPfkr$\o"Dp]+Pa@D1Tl15S+<V+P>ulnlkr=
%o-)4gQf1F;LsPr`(fO![KX@W4*'t)Pr"[MukSMmhpb=H>;1"sCCK.3G@?Ko`n4o(WRb0r4I6IZ8L?DBs,bGj?b\qTtI@F@LJcW!Q
%&Fm+"Kl12qk;:-KD;%')`r`WAKcl9`4K<$J,UYsa-m\@%KJV%3pceTs%nWrb.RRsjTi$0Gq]BZg^A3q\9]9D,/SDfBeio,EBEd-i
%gKb_5\].(siUZqu^iYnj>m?;4mDuj%)`hPsBbD($nJ^p:%Po_obZ\5-h9:83TZa@m'f%E8cr*pI97H6(VJ>,8WK4aB7E2oRa&d#/
%R_d>q+.B"9W>SN/<uc7e_5uO4-Yg<=DDc78SHd-gQD'$sbS2+:4hEup-Yf^8"*:od8KdT0RX$)H8'kVk79l4KS&m$Ujuqda'_@sn
%D<M?g_LF:`L)PYM8n\GcEsZJYc+Qd(P[)ZoaWEl?B&gg82NiHiWg:B%WD.`7,2M$9]O\t_S4q2*TV@=0!X$Cj7%I%0I[ndAg;@.t
%`X8F@c"W^u3`u@KlRZop3M)!Z$:Wq<UY_HC=>riYj:)`qqg\m\XDQO'5Yng]AXmARC>;UB0T(0Hq6ETdQU\J:>Crj<j$4=.DrO[7
%G-OS0;?@6*LgI$(nJT1.]/g((P?]Z6Y2pnH)oHQoDM;`e_nY-KPkef39$'4si>OKuSt(bEYhi#W&-2naTmZU3c;'u/5'LpgU>GFJ
%hiIa(p9lfH6S#_6C5bq/l[A62:,r+d5t%mI/O':ZK;+1pjA:W)W.daqhYs`.LWuG#X-S57f'O02fXKr_ocP.BjJj:m]@XAL$!R$K
%4F#CT?VdO>guE,GN!fuP(KQ!NrUVphMtg%7>b14Fk`m1sR%=Qh>`0DPG>>hGA;'/@ZA-'X8]US!q&B=ZPq>=AC>!#bB3H!?J&rFO
%nsZ.Tj>jr&/&&,'5'<^Vh(G[oK73B*TI5id49Kcc+LHo&-S@:gUQq,LftR1;D>3,F#ePDm_%<7I<dosrYg"YH6;7JlhB[<,=NhhY
%(-SSf'O/W]15-D'6d3"p::FmHS%21'Qg%Ji4df+XelnD7'U(pOEfW!H/1iEO"Zst\'&KpNi,S!&A!El?X[[cm!pZX?N:YDt7PL3k
%T.]9'r$"M,URt8=[M6[G1K>e>T$6^;%h2LWC++>\]3E0G_aSJUb7;QK.%9bj9"(,CH.um`KN2!\bG#2!n/(GZa]9r!`j`:Z=6(ei
%Ze/7![[Xq'a<jk!Rf%;BN2-NDI4Ja&ln1I:d,b.UiOpep3u+SibMT]Q]BaVZXD%&G6O_7u;^*?*b:uWT^Z;)=FuJU[fl/Z@0&9JZ
%5.qg9iiS'2Z!4T7ZP6$L[MeX4:df46-:s4/>`bqh%?"36_a$4n"b.9JPrQD-@WXSmoZBPhiJ$&Mp/!(MaU5mPFs#lX*("_kEXhUK
%O`2+a(\-:i<FT*nEAp)6(0"I+'Vefp!l6'Z*7)%'$<P)T&@D1Hbt>Wg'Tm";[2P>&6/,;!KAmI6b?#$?DtY1\!)ERA!nY3%<kjjc
%6F#oEPNr:7ATPAX[L`[s/%8R.*Q#?=93ao*8:7@Z?h7+P&Est7BYtSH#V^=*)joe^[IjiRk2'drC$$\p5o"ttCO<.4nrhC)$p8eQ
%dCU7MTL!.6)uXNQ>_ljE9*<48kCc!0S$@Vt+/CgD+O,,K5HF2rhgTVfWlE$52JlB#2]NR4+.GV"YhpV^^louO8DQeD)[C1;ao:7q
%amm#;2<!?1Stb9je';Tqp8IUkEE!:#P"09dX_=r:ZWD9eq'i/hI!,:*bGp+/bOg!<a.A5-GU^:Bb.QJ)Y&?`O;o4^1>@q*3]r:a:
%4,%@P;R*ooDo/A>!XaN9-b54*rGF*[\8BBs;E[`JLn'1I=^Zk<.tSM-*E"T6A"b9(YkX-3VZZ]G@NHNZ7KbfN.#@DQAop")WQr<K
%[7K`dR5'3k<\26U$;/kniisl_J/ogrgD!%AO!HTTj+Mg,d#aX>_$q@j@UBEd;$4N,bdZkYPr)^(C"e0o5VLGB`E4(c5!':qka9Pu
%5*oS"$4F(ic_rQq*Y0;ToKC#),>&a:qa\T`OHhu/3]l3bAY"U]\2#d;=*t?KCn(FR&q^^.6i`%pflQeKpS;+.=c,jGX@$h]ALf(f
%*`7;,lWg<J`P;ghR:.=@rop5g48maYm3*r7I!1Ia16>%p`l(o6*Fnc=-McpBG,H!(\kkS[Cb^,A\_]H.ZC-5;RL5`ECj.q8dWk-#
%]/qf9Dp([PqKE.!oX%ahiOEfm!V-/<p+i-1;+9r1`n'e-m(*a5V=Fu57Yi'.nsI\&2#29O)p".-X,a-N4Ci&^$\WEeQ,T:eH&YNa
%^@W#:2m`@*l:sMS!n9"mR5*I3J!76/N&cY\;*mYr#b:2)7hH'bl"BJAF,f,m3\3X-ef636c!h-rGmfDt"$>MUD$oGGnO]=3't(*C
%,a*?7E#^$[Oq*-dL$oG84X*9kqLLB?DCAm*s7u$--1t^f788:LRjn^'+n":,=i:`X#(.UYeg!!k*gZL@``OUcn>q:DNhNF5XjQU`
%Sn=dg`aRduRP_?3_\pc?$Z$6GMQB*&V^-Yk,H+#iUSbBt#>ei7\*:+E/knE_E]Q=@;D<C;k0VbZ7aqFFa6[,tr^':K$S3'F'"(aA
%<._<<qeXWIeiYa[j#;kl?p9S*;kRc%D_InePE;rKXQ?dT-?_Bd5Eh'gIVb=s!R7%cSh.Yb`!kX[-[U'Yd$$Y6eQ^UI[U"+#L>93>
%G,B<s4^s\H[JFMSA#QE`,VGHeqct[ZZ\M;&\"Egh-;cK+R\Y:SXa=h\!"@JS<uNXrkDCnHNBAD?TOM$3T;],i-J#q[Np*?9ccC16
%,qVe2N6;Q[Mc#CP^_4*bEOBQ.%WUeN_e'[o`b66=<M@[Gp[_et8(<.BR:LpdH+`X#EiT9.P`7Z.c!E7]TdtCW.0H;s>Nc2(_h[,A
%ee[m'.;JlS`MLsE`-4dQM41#s4ZQJ8/*@_<,/.<W#J:o!oONI/ge==[k-d)TW6M238VrcHA*R+6=;-W!(R"(@2?IVR`)c$DPW_]0
%O;ol=UN+WZD!]8prK5t2Q^\IbE<Pg6js%XHRG6>laf4*oA>,TW/p9*S^bL#ILiO4(_kGE%8P#6#hV#jMIW7PqnlUEY/jZNRL(3j*
%!@^B_<]6MI\]JZJDT)G*=;9bN._aOLqDZT*TEW&J%e^1D;).40US]^KH'V:aD)P=V.`"q0\V4,Ng2$5^L'kNi-h,ZCb)/GSg)`8?
%5=@@sCMmX^CsF^sGdcit^O[hHH^8a_L?!\h;0#%#f,>8`<oQEI6#Z#k!>]HRhG%4nPg<3e(,UrqV$T44C(&sei=_BMGFHjtFS62s
%qY>/1PYH?eZc*)o$YH&,N4E7BLK()IR<N<g!_;qD@.%56rtJC]4=5"jSbV9V.:Si'%#kHH;9jnh,bNag)?:00e-!$V6PTJFAreHG
%ee'h'0ue>/E>i3?2B=9NqF01s<U>j'Z8n.G5C;ja_hQn(jIG0?$"eiM-ID[WiXXBpL`gGV9\a`ab?hBe(tM9AV2(-4Ci!UkaC#tS
%.&s6l'q9lnmd7N_=Id9KKj^`UKHZtubpjm/6bOa?aG`JH-cVNsD^*?<fG&XP1OSB9XG/3cQUSR$%O?nkc>Gol;^!$0D-p-PKk(Wi
%H$%+BcPb$)H$cOaXWrP\C5I\:G1MfrGRP=i"8OHQ/UqB^'D^sg`SR$m2j<m1YrnbM0Eoa^Q97&$df(s4=jPL:\mu4VBUnSF3tKSl
%#^[hobYHc,(Z)5Sr[,+kBQ1(4q"jb,GXBCX<Uj>(6hR('JXlq<,Ha\b\,aCodnl&16c<dPP(X#%.&VZ'-28AP?cFns=W@r#s#V.c
%XsrB#W?6Y6<0d&1@U`T;c;'+R>DQ:lN9fT;i#?@qr%WDG6tDO?/mfj:A94)dA"\f1Nb:#",X"$PhGO7EfAS8#@fg1C9?dKc]*+NU
%c-P-SZ[0W7fT0Z_OnWE?9ftYgP*EtV7'$*r3Su+Vn"0JE@!nogL*I&m!uBc=(rpTQ,gb'JO<m!qAJ&*.f"F.VLd(]a;20?+J+5t4
%#,*I_9;gp9*>O#)qUr&;>tT9ko^]An(9GrW"!SEI=-uB0s4.@JP-78c5`0(K9f^L9d$@e!p5[-Db4l:S7#dicDeak9D2hbK2AVqW
%Cd#PgZq&d]7=#"(R%c"`87%Bh;aduh2^iKPA^QI"="oH1,taVZd]AXPA'Xke6B/k2$0pVu(^Msq-Xu7H=PXR5J+b_5;\++SFZIfq
%P5sY+A,V?(32Qjp#+TtnFS<M6!Emq3Hs]#RRr3X?W.?/l1_)iiQA/@>Jp=OCaP1<4/on5JFpfUdfGn)ZoUGT],6k`4/Fi(Ega-"t
%DFhgO)b.E+''WqsU`a/5:8%l?m)?2Kr0Lo*]=\u5BTdr]A>f@)N];$Dp_o/ogp@8cFtg?C-T3BqeT>:5/<rl_.CaprQK`p#.\mt5
%B&ulL:hRi=Q`H.<aO+!1R7o$+M`OJ,9<nNIKG`ZN$UOHf\!9>"Bn4ua0N=KfabY0+e1Jhn'RgG9X!F853o^+YpJG%sJD#(%0*NH=
%Y(eF>G%.OkisSi@do]Q9[qQJ2^pK""&]7u$E-Jgb4gELW(aPW??'!lp5l3b8dj-VP>RAB;?tet!)PJT+G#Sm"naK@D&g.Y9824@n
%19T%p2785*]#M1*aB)k,i?=a!%`mnfW"',.39(XMo#.22UN.,KHF/VSX$'>k-QAZAJ7&AWd$]D+(FQiYfD\0?PDpk.lUn;dJ#<-[
%/CGI:/i!:C_^TPQeoEbXdr%;S\jQgKhEd3O2R^Km.)qLeS_fRV2XO?B!`l(Q)MkVT@"G.'J\-Qe^>(TT^oI?5.$"=P(lZAh=5Z(+
%rtlm!>p"d]\FTl#Nr*17j`#`C^`3l("e+HPY(1RU^]ermqd0EgG^q:U*=hQg8EYIb#h*e^$U>a,IiPKKmZ3!Ca6qR;3Zd2d@)i@S
%Ja@W3/"dmmE!<]1rYL)HmXGDOo)Tm9n$r60ps'+h*5M.T4:^??!*;EJ+5h,UcS*,p5TX:m.o;g%UrU;6J'&;>H(Ko]!BpGB*n'ZL
%j.N!AcA,gk:]-7UHT](YB[;Uj_r.-\Ii.&&rYGPumXG8sMl>PWOH2If%.c3H\Hhsjr#4)J#jPj&O8E:8q]#]%%/;ggI2qg!)#ZGX
%`rfRtrL?,8%fGhs(SF!*5S&KsbeGdGJ)(&2!6>7IJH0\?9->>fE!6Ha!A4D(4MV[[O9`8q#'0_oE$,X0#nZ.uY!@S$^]dQ]q`bPu
%nc5ioKD<Kfd%LF/0K@/PYJ>cQ^_MB]#IjgInc0Ik6=7OG0Hp/)!#0bRLS7'&s#=-%h64VJ4MV]IO9^"E1A'6A#7Ys//$NGE^disn
%kJ.$aclip="[)DrF:TJidd@-(IPOtI6m(>q&<ZisJJ%k.57Srbep.s%jR-*b6r3`A_hhW6XoO>A^uLNN=6mmm7E5ds_MYVq_n[Gu
%Sh&0^&+DQga9,[t(EN'0$8?Mp.hEp9E!9cod!H9ZT&K>95U-C(.o7H$n/BsCJ)%r$rl:da,BnV@Eod!Ykih!G@7MBs$Lm7il5k9D
%5OQ<WVJfPo7ipRq!;S[_a@lF'O+56CrmO+1qU](=NVZsr=R%Y8mP<inCl_7PLXVIg=r1*D'3+!OdnQQ%Q7&@$NC4)5@4=F2^!ZQZ
%rC0I\g(Aok\>Gmr9-N*l%Il9&\>!@/R*8[=j6;Sj+\CRgT(2[56$9bg5IOAOUHBmeLlDsUPY`drR'Et*bUf[Pb?,Oea@@:_RG"SC
%>sXY8G'E_"5c93gbKi;HN<VLbDo?O@Bd;>^NApNV1qdn#HK?';hQYPsLa9/0n5A+@Zg<kAUE0g.)sTNAQM$mgq.RLun4_c"*:%Fk
%690p@%f'ZjF<Qb@Pr$,>c$b*Tj\Dfi&n79,2#n:]$.!(cjc@*4eX-BAPg`#=kqo^NJeiAe_L&`b'T@!AL-u5B\5W/!;N^ChCp?YY
%.KG1*-Qq&JC9gWm_I'q%+$NkMW?3qj'u,&!`Y:I@ca8NHYBS*1&'G5fb<<2Z2r"M-$m;=Qh</Y"le<8'Xr1*mS`a;IliU4VnQjaC
%)J'YN+&q9XA*$G(CA>lKIkG+d(E4tO9U43)7LOU=0K@RDWaTGsr/2I^UJ"mD.+2t8ab$ndrB<39lB5m&1&\btbTB#N0G4-nXB_3/
%f(kUAg1u-0"=35E>%(@($;VeR'mM6p:-G!0+;"jOL+Np.;*.*uWmBLnkZr,orSO"L)+nTXe1J/CY8hFX2fX)fHV6*s<Hp_q4?kQB
%RgN"*XlU?QV7o:gJndFcdm?ci>19BMY)uD1U'-[:j+nGEKoCVqW`-*,jr6,O&Y5bA`>+5r+^H4\Z</_!]Shr3.&]1\0oC*ob6>o,
%2fG-Y)Tg!N(;rqgINZe[GMMYF'><_6I=u5][+SR,!WO[?g46CQZXuNp*;*?R<,Om:crNa#P/sM;jR=op/gm-s*]#SIA#E%*8',m5
%"gLeVh=Z0*:"sY&b]9*Lh/(dVB*`D\XsKRGA#A';\cJsVg9a-a>q.CE6')j.9]i.Z6u?bN)(krA-8(!J)h$Lr7<7bD7d[O,%?2"U
%?g&F^fDfKU2G)1e(NPsba%&3p84gW=WO'AM8MNl^9N>?3GuO$/df+St#QE4'gVd/:A$:RNa;726:(LCodS-+T?G!!T^0hY.C[$F2
%L#hSnOF:<3IL=0IHOUUKDf,I6E-Y!"pR<8"59J73$J"]o$=0_f-%,LAM;D@>riphIJ1.<=>71JACi<X_co!2;cYTE,[LHF`Z37';
%cHE.SWT;Z-H""3]iIRQDL1<ntN$VFb]Sb7QgnE%\`ipkT<0J*iD5AsU;*#chr]8s3o]C,sku'uN:K]X#YpJaCJH%F`U4a9C`rXuI
%I0.UNg&Y*SHm0Ao%Z#/0bS^N'?Ti<$ja#_Ueik4K_CR7G."!Wr4La&>8M2?W-cHV8@PSeN6#cAd3,GB7J"ktYU)Xpo46gu[`[(H-
%C.r,jNI&PmIb=2#))S)Ygik.Xb(L*.ri,)Rh.=<_F4;Fj*WKQgq:Do$>hY@a9iE5,X"!h<5U(f`PI'.dFlH:#S=asn@?H7t=:DfF
%gnEn&c5qh%bB:2\:@t^`p(?^B+9V/Gam3%Q@OZo?UT0t)F+kb9+n'=uJ#@6<bW02X6`!X"/g3X'JZPg["okT[+%d8:CD!ok"i-h!
%=Ge]<m@DU'$@(qnJ,!D%7+[KYkE8PV[RqNNamGq"Mj'8.a8nAEZ`U![7tCHQ2]om"A>\CS3!P966.m_kipT\8Y4qWE:7s0FlSkUg
%]?;W\8A7:.Uq=QK?jnI/#&#OECkPJ7(>gUqLPg>c2$VCl@<eE#]<M;RRetHXhD3$>P#`>FS[a#%mdf(crp\>7\Y=CpCj3u/FQc^>
%f*L8$Qol&LOAPa2<MO]jTBE1GCOAtPK`XEBAG^h]m`c8si;.4:HJb4hM!>ET/#9-e?,R9Ne`"f9*THK*^ileVMki-A=.6I-"ZH0(
%;1NsDo,uV&8uj0:cJ(u4Ml)F<=oMl4e#aK="*Fg9=G4[<Plt!T?+]!"k)Z,cB[4/K93,nH"A'*E7[1<dA;$3mBc0E+-__e/55RWc
%s5!I)TZitKIIGNmkF7.fWcd_+o=XO_]sk6PljQum"$I<J86#JbSr1sRT*gP%#cB4'qlV@@m;mLhp:*?L%Ei/((a[#YC64#nrsm3r
%jN$`o"jF9<C%=QaCLGm!LkPK?U]ihOh`+UBUdOOu^+Q(&QUYTT"G\/e&E&m;a^Uuq@<WM_/^*QY@JG(kTg/N"J]&TgHn"[ln"qcJ
%56AU*QbQih#]eX"%HlL%ePLCI'm5N"fjJqJR2=EVFgrX1`Hn**(<E\Lk^@C;"+kHA1RXbP\GgZL-):NWrUO4V9M_26P3k/9IKkR`
%:.d85nC'4&V9%5?Sk2=pku,YQ@=h2gP$&(0'D_6-'52U2_G67$U!%rVNP<$M[har[Ni;r?YnhFpgXNFPN9mT8D7$Q[i/G_s$DU&:
%^d&JHc=7M"4pR3g@:.Zfmph2DE-IoJ]sSAQ&+LBIg!hkP46_BLK`nCO0`G*_&]om*TO82t*ks*s4[fG-TT@JZ$Soipj.Q$hX/b$C
%3=UM24rS1n;#rF@nXl@1gRY%MZ*8Y#SNhS/W)1ba-b)"d5jE_HUunbQ7t[*Fq7Tk9?e>ZDVHYiJ+OHlLWLatTkh1EBh/;cTPmJ]#
%QfiYO>Pj4!C5_W$CndWUV+$MjC#X;K__bf,+X<O$)=_WO5:bG+90ui5drKt*UkR/udLD$U%?*X5s*>GM5nn[-kmGV*24XiU(8n#@
%3iTc4Tg+"7A3V&br$<&9J^..'_VSQ]S.-th)_p$-\"fL@fZfV6f7:]7gGMguTN>RrWilm>VL#G9l$`$g,7o'Fm4c&#5=O'f0]0*m
%!:*A*-9A1rBA%e+Rn`ZkF3A!4_3P"D2Ie>JPcLp%o*(hW89Wf,D/t?$1pE%oEcD2QhsBfG\GlI_h^[h36%->/llXUlK.X5HHt(63
%Mc2LO+c1E'rj\p>QCP]M+!ie0nY&P42>h/S9WrhEpLed')uBoqa"2]sP(hQQq:36U)U..L<,rQGB,'%rZ%=s'7K8\.6J,5TWQ6h%
%fR'E51RgZWbf)gal9A0_J49475>D*lTTuP'jR+5L$5[?XX^0*?dD[ote]\5P.%:O(!394m.Q+eO@@QY#6V_DS\@H[jM9$r+HjSKV
%U6d6Qhu!8#[;"^+39aRONA@0P&X)c?Gls=)p9H*mGF1s[$!'kLEZ`%*#iKZ,_sp&&UIap1C\CadL/02'Wl@?8MY3/`fBFqJ5.u-1
%Da6Y0"Fhu%Qb:tuiOY!TZOofscLDA1A_dJ,if^Yl_DRMTAbQuldCn/qSkJ$@^BWT+,FtaEcmpJif6_lDeia!0b<I*Ks/5nFs2VnP
%qEMamr;/.^rV=d[^n:V\c[YcP^]4$!s8'33If&.IrpmOj^]!`fk?i_XOam2aa1jh:jgSUrp4*)<gFo2up9/uE^DOd^k73"<e%bh4
%s89o%r',@]@Jp~>
%AI9_PrivateDataEnd
