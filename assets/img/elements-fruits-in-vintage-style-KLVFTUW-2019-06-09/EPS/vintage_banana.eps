%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_banana.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_banan</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T00:32:58+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T00:32:59+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T00:32:59+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6xnNu4dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirAPMf5ks+oyaB5ZT6xqY5rPeleUUPAHmUX/AHY60oK7cqDfplwx&#xA;0OKTWZ9Ay5fKXmHT7eFrHXvr1+iqL601MD6vJJQczDNCgki3rQEOMxDrsJkYnavx+OSRGdWpS6xq&#xA;tmeOpaJdx709az4X0R9x6BM3/BRjJeNiPKcfmy37i3b+avL08ixC+jimb7MFxyt5D8o5gj/hloiT&#xA;y3XiCaggio3B6HIpdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqEfWNJS+XT2vY&#xA;Fvn+xamRPVO3LZK8um+S4TVosIvIpdirsVdirsVdiqX+Y7qe08vapd254z29pPLC3WjpEzKfvGSg&#xA;LkES5MV/KXyXJpfl59WuLdZdQunS4tI5QU5CMh4yagMqhhVeQ3b4uNFUnF7Q1kRPY7jb3d59/wCO&#xA;rHFjJD0Ow1G31CD14Sahik0b7PHIuzI69mU9f6Zz+SBid/7XLBtE5BK2S0hu1FvLEk6SED05FDKS&#xA;dhs22TxiRkBHmUSqt0sufJX1NTLocv6PI3ECDnaMN6Vtzx4AhSaxlTTc5to582P6vXH7evX4E79N&#xA;2j0nlsl8OstFdJYatD9QvpDxgq3KCc/8US0Xkf8AIYBvam+Z+LLHILib+8IO3NM8mrsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdiqH1G+t7CwuL64PGC2jaWQ/5KCpwgWaUmmLW/wCWU+seSbbU&#xA;op2OvXBlvprRysXK5MjP+7lC+pHNGfgVyStNiKbh4xx2D7vd7u7q0ljnlj8y7vTNQ/RfmeV3tJRW&#xA;z1GVOMimvExzhe6MCrHqrA126ZBxcQscxzCxnXN6lFLFNEksTrJFIA0ciEMrKRUEEbEHMduXYFdi&#xA;rsVdiq2WKOaJ4pVDxyKUdD0KsKEHCqUeUbm6028byreN6otYPX0m6P2pLQNw9N/8uElVqOq0Oajt&#xA;LTAHxI8pHf3/ALWeKX8Kb3+mXCXZ1PTCqX3ELcQMeMVyij4VcivF1/Ykpt0NRmDDICOGX0/d+O5s&#xA;I6hE6fqltfK4TlHcREC4tZBxliY9nXfr2I2PYnIZMZj7u9INovK0ptaXAuFKsKv+0tQOVRv99KE9&#xA;FXN3ps/iijz+/wDtqjyEIDzcTJDh/H4/aULrWgWOp2ckF1ClxFKCZIpFqH6MDTseW47iq45dMQeO&#xA;Bqf3/wBv++iFhk6Hl+Px8Cwa7s/MHllm4rNrGip1j+3fW6+x/wCPiMf8HT+bLsOsEjw5PTP7D+r7&#xA;mRjW43CY6bqmn6nard2E6XFu2wdD0I6hgd1I7g75lmJHNANorAl2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxViHnO7m1C/s/LlmomkleOa7jP2TVwLaF6dpJRyfwjVjkuQ8zt+s/jrTCRZwFS3SC2gd&#xA;jFaRrDFIdmbgKcyR3Y7k5z+pzcWSxyHJvhGgxHz1pfluaFpLrTEvtW1J/StrdWdDPOVpzYIygcFW&#xA;ry05BR17Zm6PUZskqB5cz3D8dGE4RCN8o+XU8vaDb6YsrTNFVpHJNObnkwQHotegzaZJ8RthGNBO&#xA;MgydirsVdirsVY95nBttT0TUw/pqk72E8o/Yjvk9JXNdqLMIzvleeHFikPj8v2I5EFNPKXmP9K2r&#xA;29yBHqdmzQ3kNa0eNijEV7clP+dc0Wq0/AbH0nk3wnfvTDU9Hgvikod7a+hBFvewkCVK9t6q6nuj&#xA;Aqcqx5THbnHuSY2lsXmO5025jsfMaLbvKwS11SMEWk7HorE19GQ/yOaH9ljlx04mOLHv3x6j9YY8&#xA;dbFkSsysGU0I3GYsZEGwzItNbTUFkor/AAyeNaA0Na1PQ99+/wAXgM3Wm1oltLaX46/bv19RJIAc&#xA;XJirl+Px+xXntoZVo4AA3JG1Nu3yXt7KO+ZObBGY3/H9g6eUAd5NcZkcvx+P19zCtf8AINbt9U0i&#xA;dtL1Zt5biFQ0UxFdrmHZZPssOWzd65ixyZcGxHHDu6jny+R8tm64y5bFJo/Ms+nzpZ+ZrYabO54x&#xA;XqkvYzH/ACZjT0yf5ZKH55n4ssMouBvy6oNjmn4IIBBqDuCMkl2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxVL9d1mHSbA3DIZriRhDZ2qfbmnfZI1+Z6+A3wgd/JBNJL5H06T63LrF5Ist1K0hjnB2luHBSe&#xA;WOu/pxp+4h/yeTftZrdZqjuB/YO73nmfl0ZQh1LKr29trK0mu7qQRW8Cl5HPYDNXCBkQBzLcTSR6&#xA;ZbyNNN5i1gC3uHjIghlIAtLUfFxJ6B2pylP0dBnRYcIxx4B8fM/jk45N7lMdL1fTNVtjc6dcx3UA&#xA;YoZIzUBhuQfA75bKJHNQbReRS7FXYq7FXYqgta0uLVdKutPlPFbmMoHHVW6q491YAjJRNG0EWHnl&#xA;9qmo6Xc2PmaIek14/wBQ1xVFfR1O2Ajcsq9UuEUNx77N9rjmOdPEg4j03j/V/WGPGRu9P0DXrTWL&#xA;T1oaLKlPWiry4kioKsNmVuoIzQZ8Bxmi5UZWjrq1tru3ktrqJJ7eVSssMgDKynsQdsrjIxNjYpIt&#xA;j0Fpqflfa0SXVPL25NmDzvbQeNuWP76If76Y8h+yT0zYwyYs+2T0z/nDl8fx8mkiUd47juZFZ3dp&#xA;e2cV/YTpdWU391cRElSR1Ug0ZXX9pWAYdxmNqdJkwn1cuh6M4ZBLkjl1sWkYNyrtCCOUqCvAfzMB&#xA;VqA91Bp9ojuMvSa0/TL4fj7ffvRlTVkw9R+Px+NkziuILiBJoXSSKQB45FIKMKAhgQSOIoPo26k5&#xA;syQR+On6BQvuA4fqkXHr8fj8deQQl/o1rdwPBLCsiSDg8UihlYfZ4upqDvxr718Mw8ui6x2l+B87&#xA;4b8zLubY5e/l+Px8mEXPknUdIYyeWbv6vBXl+i7rlLZmoDfuz/eQfa/ZJX/JwR104bZBxD+cOff+&#xA;n9rZwg/ShovNMVvMtrrtu+jXbHihnIa2kP8AxVcr+7b5Nxb2zPxzjkFwN/f8mJNc08BBAINQdwRh&#xA;S7FXYq7FXYq7FXYq7FXYq7FUPqGoWen2ct7eyrBawLykkboB/EnsMIBJoKTTEbO3u9dvG1zUg1pZ&#xA;iMrbI1VaC1kAPw/8X3AI5EfYT4R8R2wtXqQPRHf9J/UPtPkFjG9yzDT7YqBM8Yh+AR29sAAIYRSi&#xA;bbAmgLU26DfjXNRkl05/pLcAlVzNBql8007qmiaS5ZnchY5bqI7sSdvTgP8Aw/8AqZt9Bp+CPEfq&#xA;ly937fuapys+SVy3kXm/UItNRnTQD+8cqrepe8T2H7FsrDd2+2fhXLtVqPCieH6vu/b5dObGI4j5&#xA;MJ8jX8vkTzdfeXNdb0oLooI7jrHzB/dSeySK257GlehzP4xnxicWqPolRey5jNzsVdirsVdirsVY&#xA;zr+nadFcXP6SH/Ou68iWusGtPq9wvw214CQQtDRHP+qT9nCQZAV9cdx+phIV7mB211r/AJO8yNou&#xA;oOY763P+iXNCVuoWNQVG/Iv3G++4q9RJDLhjlhxAbdR3H8fivpjGRiXrHlzzXYazEFBEV2B8UHIN&#xA;2r8LDZtt9u24qN85/UaWWM+TlxmCnmYzNKLrRrm3updT0KZLLUZv96opFL2l3TotzEKb+EiUdfEj&#xA;bNhpdeYDgmOPH3fq/HyacmEHcbFX0vXrTULr9HzRNpmuAFm0mdgTIAKl7SXZbiPY/Z+IftKMuzdn&#xA;icePAeKPd1H4+fv5sY5iNp7LXstS06Z7vQpVhlZuc2nzV+qzNWpOwLQyb/bTvuVJ6Y+n1Zgal+39&#xA;v3joQznjB5Jlo3nXTb65GnXyNpmrgf8AHPuiFLgChaGQVSVaVoUNQK1HI5toZBKN849/45d3kLri&#xA;kXFlEg/j8fjoE/eNHryHXYilDTcHYd/jO3iQO2SnAS5/jv8AvO3eYx/hKAa/H4/FlLr7R7e5ikjn&#xA;jSSGQESRMoeNhTccSKEfA34ZgZNHR4hsfL3dP9LL7O9ujl6H8fiwxG48gvYMz6BeS6VQmtqP39md&#xA;6f3Dn4N/99suSGszY9pjjH2865/2shGJ5GkI2oeZbA01TSTcxDreaYfWX5tbvxmHyXnmVj1mGfXh&#xA;Pn+vkgxkOiI0/wAx6HqEhitbyNrgfatnrHMPnFIFkH0rmVwmr6IBCY5FLsVdirsVcSAKnYDqcVY/&#xA;c+cIJJmtdDtJdbu1PF/q1Bbo3hJct+7X5Cp9sZyjAXM8P3/JF3y3VLbQvzG1OklzqFro0R3ENpCb&#xA;mTiRX4pJvhrTf4Uyn80D9ESfM7fYEG+pSrzX+U0r2kepar5lubm1sXSa5huwrQsgYcgqRUAZuVBx&#xA;B6ila5cM+QA1Ecun493zB5NexO5ZJZpdX0i3d5Cbe2QhrOyb7Yp0lmA2Dfyp+z1PxfZ56ZEdgbPU&#xA;/oH6+v35g3QXnPW7jTtN9CyUtqF2GWIhlQRRLT1Z3kchEWMMPibbkV65bo8InK5fSPt7h8WOSVDZ&#xA;jlh5Y1zXkt45+EOlW4UQIyMLRAn2TDBJR7p/+LZ6J3CNmx1GvjHYc/t+J6e4b+Yao4yWZ00Hypp7&#xA;SMzc5mHN2Pq3NzLsqj+Z26AAbDoKDNR+8zy/FBv2iHkX5iDTvM94dWRxaSQQtyf7atFFyoG41q3q&#xA;fBUbEkgVCcjv9BxYRwc7P4/X/bTi5alu9b0UXA0ewFzX6wLeITcvtc+A5V965bLmWY5IzIpdiqye&#xA;eCCJpZ5FiiXdpHIVR8ydsICsaXzhqF7q1xZ6FpDapa2kKzT3gnSFTybiojDghuX7JLLyoSNtyzMI&#xA;RuRpjxEmgiT5n1OMfvvLWphqkUjFtKNvdZ8qGfEf4x9v6k79yy48y+tavHdeXdUaGZTHLC1vHJyV&#xA;hQgqsjbEZIZsd7Tj8137ixnUV0zWdFk8v+YrHU7eCwXn5f16SxuJJYEP/HtccFcuEp1BPJetGAJs&#xA;GSIlxQlG+osb/j7Pc1GPQgsG0rzBLbXzWl3PxvIW4pdqWUSUbkG3Curk79A1fiFH5CSzLgBjYG3d&#xA;+Px8OQjLd635a/MS3mjS31ZhHKop9b24FaVBkpsDTc8dqfEPh5cdBqNARvD5fj8dPflQy97OAQQC&#xA;DUHoRmtbkFq2jabq1sLe/gEqKweJqlXjcdHjdaMjDsVNctw5545cUTRYyiCKKWG98zaGON7HJ5i0&#xA;hB8N3HT9KwqB/uxfhS7A23+GT/WzaHPh1P8AeejJ/O6H3/t+bRwSh9O47kQW8q+atPKq8Gp2gbdd&#xA;1licfzIeMsMg+g+GYWTHk00tj8e/8fJtjITChAvnXy+f9xlz+ntMHTTr+ThdovQCG7oeYFdhKPk1&#xA;czcHaEDtMcJ7xy+XT4crNAHdqngPRONH/MXy9e3C2N276Rqp6WGoJ6EhIpvGT+7lHwigRj0A8Tmw&#xA;ibFiiO8fjyG3lGI6loMfx+PxzLJgiMvgegBNaHalT7cBU+zHICAI/Hw+XCN/KZW/x+Pf9ylJZQO2&#xA;60FQKnYgcq/gr7/6pynJpISPL8X+qW/9U9zOOUj8fju+1J9W8q6XqMAS/tIrxQPsTxrJxPEk0LDb&#xA;4kIzE/Kzxi4SIP8Ax0n74kNviCXMfj8FJJPy/toG/wBx13e6fStFguGkj2oNorn1ox1HRcn+Z1ET&#xA;RqXw93u71AifJRPlzzZDtDrMctO13ZByevUwSW47eGTHaB64/kf2FPB5rfqHnJSayae69m4Tp+HJ&#xA;/wBeH+UofzZLwHvCR6r5k1uxuxp9ubLUtWbYafZiWSRe1ZWJCRKO5dhmTj1AkOIgxj3n9Hf8GBsb&#xA;dUwtPKOs60qy+Zp1kiIr+ibUtHaCgr+9YnnN26kL7U3yiernLbEKHeef7Pwdk8I/iZrp2jWlrCkM&#xA;USRRxCiRKoVUAr0QU8Dt7EbGhyOLSi7lvLz/AB5Hz2I2lRYyyd34/H42Rct3DBIIQDJNX4kQgsin&#xA;kxdj0FPSehPVgvdsz4xA57Afj57H4iMv4i0E3+Px+LHRJZjI5rcus09Vaif3MRCEFYQewaSQcjuR&#xA;TwFNbrNdYOOG0fv8vnflVORiw9SpEAih3B6jNU5LAvy8jl1PzFra6yq3c+gNDp9i8lWokbyn1KNW&#xA;rtRfi65tNeRDHDg2E7kfs29zRi3Jvon/AJo8/wCn6SXs7Ff0hqoIT6uh+CN22USuOjf5A38eK/EM&#xA;XTaGWTeXpj+OTOeQDlzeaPea3r+pyGNm1LVzVKR/DHErVDOGNVhiUbR/tM3x7mmbzFgERQFR/HzP&#xA;f8nHMiT5sz0P8u7W3nW91aUXd0GV47SOqWcJT+7VIzu/p/sl/nSuWcQAofPqkQ72YZBm7FXYqwH8&#xA;z7iR73RNOhZDNO1w0UUlGBmMYhtiVbY/vphTb37ZZEekn3fLmfsa5ncPQ4NNsdKgGn2KKkUfH15A&#xA;KPNMqhWllb7TuafaYk5oNZmMpVewb8caFrswm12KqlskTzxrK3GMsA59q7/hluGMTMCWwtjIkDZv&#xA;UPK+k6nbrHf2sd0hWpWZEkAJRG25Co3kGZ+PBKIBiSD/AMdif980nJfP8c/1MS1D8mNJZjJpNxca&#xA;bIPsLC5eMUZyD6cnOlDGWHFhQ9MyhmzDmBP7D/F3f1WFR934H60PZaN+Y/lotHALfWbJacbcMbZ6&#xA;7VorCRFrXs4AJ6U+HMfNHFk+oShL5s4kjluncXnSxRf9ydne6W42Y3EDvED/AMZoPVi+9hmCdJI/&#xA;SYy9x/QaLb4g67JlYa7ouoU+oX9vdE9oZUc/SFJOUTwzh9QI+DISB5IXVfKul39yL5edlqiiiala&#xA;N6U9B2YgFZF/yXDDLMWplEcPOPceX7PggwB36qMV15m02iahCurWo/4/bNfTnA8ZLYmjfONq/wCR&#xA;kjHHP6TwnuPL5/r+a2Rz3RjDQdfs3hlSG+twaSwTIGKMR0eNxyRvmAcr/eYjYuJTtJBQeWLzS/8A&#xA;lHdYudNjHSylP1y07bCKYllGw2R18MzMfaUv4gJfYf1fY1SwDomEHmTzjZ0XUdJg1GMdZ9Om4OR7&#xA;wXRQf8lj1Pc5lw12I9SPf+sfq6y6ysVHCfx+Pxt3I+Lz3oe31wXGnsOv16CWJBvX4puJh370fu3t&#xA;mTHKJfSRL4j7ff198z3MDAjn+Px+pTuvzF8iwDiutW1zKVISO1Y3cp2ArwtxK37KHp45Z4Rru25n&#xA;boP1RPv4u5je/wCPx3/Yltz591S8bjofly5kBqBc6iy2MQB50PA+pM1PU/32Moy5cIO8u/lv/O+H&#xA;8X2M4wl+Ph+pDSeXfOWtsTrusta2rE8tP0xTax9gQ85LTuvwb7r0OQ8aR+iPD5y+HT/N+w9zLhA5&#xA;m/d+PNkGheUtG0aAW+n2sdvGTuAtKtWlXO7Md6GpJ2bwBwjAZSuZ4j5/j5+6XcCg5KG34/H6k3Co&#xA;gBUdaUBFTU0pX6ZEr828cvAA5fjl+mUb98+9rv8AH49x+xB3N8w4yI3pR0DJXeRgQxXY/ZH7qI1P&#xA;idhlWbUwx7/L9H+5h8SyjjJ2/H43KXSTjj6cQ9OEUAFSWICqtWY7saINzmq1GqlkPl/Z+pyoYxFR&#xA;zEbFK7uEtrWa4c0SFGkYnpRASf1ZKMbIHegl4iNU1W013VbaG6a3jvItPnu4kYxPI72quQ0o+OOM&#xA;FyZGUg9u+dL4cZQiSLriA/03d1Pc4dkE/BH+VfK+oa2wktq2WjRgomocAssoavqtboRRS/TmRRQA&#xA;F6HLjED6ufd+tYi+T1DSNF0zR7NbPT4FghXc03Zm7s7HdmPichKRPNsApG5FLsVdirsVY95nW2sd&#xA;S0bzFPCskWlztHO7AH0o7pfT9ff/AH1Jwb2FTjLiMJRjzrZjIbgsorXeta71zmC5SSeYvMNxoskE&#xA;z2Mlzp0lRPPDVmiau1UANQ2ZODAMli6l97CUqRWka/pWrwCWxuFkH7SVHIHwI/pleXBPGakExkDy&#xA;THKWSvb3s8BHA1UEHi242ZW/WgzIw6mePl+Nwf0BhLGJI6HWLSJOc/7pYwCzMfhogXq3vxb/AILN&#xA;hg1sNgR+BX30f9N5NE8J/H4/FIyCaCWNXhdZl2KshBDceBBB/wAoxD/gxmZEjpv+zh+8w/2YaiD+&#xA;Pj+v7Gns4HUqFDMahGp1+F1X7zwP+yGQlp4SFVf9kgP97/pgkTI/H48/kluo+U9A1ElrixguORPH&#xA;1Y1k2LfB9sN2kTIflgPoJj7ie/b/AHUWXiHr+PxRS/8A5V/owKi19a2DFQq209xbj4mjA/uZIx/u&#xA;wHIHTzPKV33xB5mI6/1gnxB3fjf9Sn/g+6CKbfVL2MOgI/fmQ7qr/wC7ll3+OmUfl5EA1A3vyroD&#xA;097PxB5oW78malMUd9YvBLCCUnVbL1AFDkgSNbFv91t3wDHKN+iNe+Vfxf0v6JTxA9T+K/WrN5W1&#xA;0kRya3flgSK/6Gh6kfsW6/ynInBIGvDj9v8AxS8Y7yt/wRNJ/f6jqEnT4frk0VdlP+6DH/OMkMOT&#xA;pGA+A8u++8I4495Xx/lp5aLBrm0jueJ+1dF7rpy3rOz/ALMbHL44s38/hHlt391dIksTOPd+PwU7&#xA;sfLun2saw28KQg0ASNQi8jxUfCoH7Un4YjRCR9RJl+nYffL/AGKDmrl+PxX2o9YbaNS6IAvHnT/J&#xA;Cs9D4/DGB/sjmQMcIiwNqv7CfuiB/nFgZE/j8d/2L1MakK24DBWJ70kEZ+8I3/BHJgxGx76/2Qj/&#xA;AL0/6YsTf491/j3JXqfmLTbKJY7mcC5njrFboDJM5aJt1jSrkc5DUgbZTLLcPh98T+mRZiG/47/2&#xA;JXNqetaiWFDptoxY0BDXTAuGHxKWSLoPslm91OYeXW/zdzf6b/V+1tjh724YYoYxHEvFF6D9ZJO5&#xA;J7nNdKRJst4C/IpdirGvzAvJI/Lr2EB/0zWJE061X/KuDxc/7GPkczdDC8nEeUPUfh+1rynau9jG&#xA;meUrDW/Omu3tyCdMs5oLNbMD4JntoVFJD3Rfh+HoT16Zu9PIxwx79z8y0GNyL0RVVFCqAqqKKo2A&#xA;A7DFm3irsVdirsVdiqnc20F1by21wgkgmRo5Y26MrChB+jCDSsP0jWLrRVkgv5WltdGmGn38jbst&#xA;tJR7K6PsFfhJ9/7Oa7V6YGdR5y9Q9/8AEP0j9qYSrn0ZyRHLHQgPG46bFSD+sZqOTcwTXfy6eK4b&#xA;UfL0zW1yKt9WB2JO/wALVB/4YU7HNph19jhyCw0yxdQl2m/mRq2lS/U/MNs/KIUaUgqa17swAG38&#xA;x38ctydnwmLxliMpHNnmleYdI1SPnaXCt0HE7Gp8K7N/sa5q8uCcOYbxIFMspZIZtPt/UMsXK2nJ&#xA;5Ga3ZomLVrVuBHLf+auWwzSjyLExBcLrzTag/VryG8ToI7uP05KeAmg4qO3+6j0HhmZj11bEfL8f&#xA;p6DuapYV3+M9UtyP0hoVyoH+7bB4rpBTuFYwy7dR+7/ZUZmQ1MJcpV9n7NufP+GI82s4yOn4/H6V&#xA;w/M3yerBLm9OnSfZ4XsM9txIG28yIDxqPoQdzmQBKX0/Zv8Ad3fdAdS1kVz/AB+P0ptbeafLV6CL&#xA;TVLOYMKD0p4pKAhh+yx+yD/wnvhlfUV+jn91/wCw8wo/H4/HNMDNDICwICODuNwFbmG3HgJZP+By&#xA;MpA89vxK/lxT/wBIoB/Hw/UPmuadTIHc8TUl+9N/i+7lJ/wOJyDis/H9P3z/ANKojt+Px3fNoy/E&#xA;GpWQdh4gIKf8HDT6RgM97/i/6R/30K+IWvx8/wBBQd5rmjWh/wBKvYLdamrSSonw/En7RH7EwOPF&#xA;fL8fUP8Acyv4FNfj5fpCSy/mX5RWUiDUUvbhaER2KyXbFgUeg+rrJ+0pGJMwbIr37fzT18wQtDl+&#xA;OqHfzhqt0OGm6HcFAOCzX7paR0oyfZ/ezfZYf7rzGnngNjId22/ePdyPe2CB7lF4PMl8xOo6p9Xi&#xA;Jr9W05PRrvyo8785TvvVOGYk9YP4R8T8+Xv77bBi70RY6XYWIb6rCsbSbyybtI5Hd5Gq7n3Y5iTy&#xA;ylzLaAAisrS7FXYqles+YtM0mF3uJV5oCfTB3FBy+KleO2/jStAcvxaeUzsGMpAMEstdm1i9m876&#xA;jEU0XR1eHQ7MD4p7iQ8OQBrViSEB8fChzaSwCAGCP1z+o9w/G7QJX6jyHJmPlXSrjTtGjjvCG1C4&#xA;Z7q/cdDcTsXk/wCBJ4j5ZnyrkOQ2CxCb5FLsVdirsVdirsVdirHPMtlNaXQ122gN1GsLW2s2AFTc&#xA;WZqSVU7M8VSQO4JGRy4vEjw8pDeJ7ijkbY9a+YLjyckBEh1LyZfENpuoBi7WwbpDIdzxHQeHzBGY&#xA;UsA1F/w5o8x3+aRLg/qs70zXdO1FVNvICzAEL2NQT8JGzAgEgjrv4GmsyYZQ5twkCu1PRtM1OLhe&#xA;QrIKfC42YD2Yb4MeaUDsVMQWBap+Vl3al7jQrtg5NTEeKkjw/ZWvids2mPtIS2mGk4a5IWDzd500&#xA;FxDqVrJPF6n23VyxUdl5E7f7M/cKZM6XDl3ia/H46I45R5sl0f8AM7y/fssVwWs7gmnpvv8AwB/D&#xA;MPL2dkjuNw2RzAsqtb20u4hLazJNGajmjBhUdRtmFKBiaIpsBtWyCWmVWUqwBU7EHcHCqV3flXyz&#xA;dkm50mzlY9XaCMt/wXGvbLo6nLHlKXzYmAPRAH8ufJPPmulRxt0rG0kf/EGXLv5Qz/zmPhR7li/l&#xA;v5PUMFtJlV/tqt3dgH5gS4f5Rzd/2R/UjwYrl/LnyWFCnTQ6jbjJLNID8w7tX6cB7QzfzvuT4Ue5&#xA;GWvk3yna0MGj2aMOj+hGzbf5RBOVy1eWXOUvmkY4jom8cUcSBI0CIOiqAAPoGY5JPNkuwJdirsVd&#xA;iqlc3VvaxGW4kWONerMadBXbxyUYmRoIJYT5h/MBFikjsZFt4B8Jvpa0ptUqF3pRgdtyp5L9mmbL&#xA;Bod/Vue78fjoWmWXuYbomk3/AJ0uGu7p5LLytb1e9upmCtOEbmyBthQcRyP2QQW2Y0zY5ssdOKG+&#xA;U8h3fj9jVGJn7md6Paprd5a36QfVvLmlgLodpx4iVwOIumQjZQNogd/2vDI4MJxgmW+SXP8AV+tm&#xA;TfuDK8tS7FXYq7FXYq7FXYq7FXYqxfU/Ls1k1xPplul5pt4SdV0CQgRy13aW3LfDHL4j7Lex3yOT&#xA;EJ0b4ZjlL9aOXLkwW40DU9Ot5dQ8nySalo8LE3mkSclvbJmoSjx/3g3XanhVa05YTISNZhwy/ndD&#xA;+Px3NdV9KO8vfmRIyhYZuQQEtby0BAHWop8IX9riNvtAceSrjZ+z+8fj8fq50WccrLbD8wbOSiXU&#xA;ZVtwzrsNqCpVj8PxECnI0qP2SrHBnoSOX4/H432bRlT621jRtQj4xzxyBqD05NjVq0HF6b7EU8QR&#xA;1BzFlinDozEgUJfeTPLV7/fWKV3I41UVPX4fs/hk4avJHkUHGClaflrpMEiS2N7eWckdeLRyjav8&#xA;oK0H3Zee0JnaQiWPhDoyawtJbW3WKW6lu2X/AHbNw5f8Iq/jmFOQkbApsApE5BLsVdirsVdirsVd&#xA;irsVdiqBvtc0mwDfWrlEZQSYx8T7KWPwLVvsgnplsMM5cgxMgGN6j59cs0WnW4BUVaec/Cu4A2Un&#xA;b4gSa7Kwf4hXMzHoesj8vx+Ds1nJ3MC1/wA3RJPxvJ5b7UR8K2sZ+JZCV2NKrGwqdlqVkSoHFs2m&#xA;DSkjYcMe/wDHP9IPeGmU0Xo/kS91CP8ATvneZdN0e3HNNOr6Xw8iw9TeqLyc0X7W9BxyGXWxgfDw&#xA;Dimev4/sTHGTvLkzG3sJfMSQpJbtp3lOAAWunU9J7sL9lpkFOEP8sfVureGOn03hnil6sh+z9vmy&#xA;J4vcywAKAqigGwA6AZcl2KuxV2KuxV2KuxV2KuxV2KuxVLNS0C1vLhL6GSSx1WEUg1G2PCVR/K3V&#xA;ZE8UcEZIS2o7hBjbEfMflbT71vW8yWLW92pqnmfRI2rUVPO7s1q4O27R8v8AY4YAx+g7fzTy+H4+&#xA;Ba5R72NXXkzzlp9p9e0l4PNOjKpWK9sGEjrwFF5xAlqqpKFd/hPE9qSMoH6hwH7Pn0+Nb7sd+m6U&#xA;2nmCyeUwvK1rOpKmO6qpDMAKO3syhHPXjxf7S4JYJAXzHl+Pj8xyKRIJ/Ya9rduqta3kgQn4ELih&#xA;BYKeQNUU89nNKKxV/sOwzEnggeY/H45fEcwGYkU6s/zF1qMqLhI51PcoUc9VAVQRvUU4n9sFO6sc&#xA;eeggeW34/Hw372YylNLT8zbSQD17NkJIAMbiSu3IkbLUU+IU+0Og5AqKJdnEcj+Px+OrIZkxh/MH&#xA;y7IKs0kVASxZQQAByrVCw+z8W37PxdKnKjocgZeKEWnnLy25p9cCsDRldXWhrQ1qvbavgCD0Iys6&#xA;TJ3J8QKw80eXywUX0fJuimoP2uG4IqPj+H/W+Hrtkfy2TuTxhseZdBPS+iOwOx7MKinzG4+nwx/L&#xA;5O5eMLZPNGgIpZrxCoNCVDMOlewPRTy/1d+mI02Q9F4wh5fOugRhj6rvwryCo1djQ7NTp38Budt8&#xA;mNHkKPECXz/mHZKSIbSQkMVPqssYBUAuTTntHUcz4HkKrvlsdBLqfx+P1MTlS+bz7rEjhYLeKBOJ&#xA;aslSQOQRQxrQUc0fwWjiq5cNFAcyT+PxXyY+IUs1HWNalheS8vXhjA4VZxbryYNsxWig/u2Qn9mV&#xA;QR8LUy7HigDsL+38fpie8MTIsVvfNmhWTuloz31ztHCYAEX4SSrBqbcpOEoCg8W5r0bM6GlnLn6R&#xA;+P7PdXc1mYCP0vyd+Yvmxz+5/QmlykEgqyvwAcKAn94wVJSo5FQV27ZE58OLYfvJ/j4dF4ZHnsGU&#xA;aLoXk/yrMbXRLY+YfMqfDI8ZVxC2/wDez/3NuPYVf2OY+SOfUfWeCHd+Of3M48MeW5T218uXV5dR&#xA;6j5jmW9uojztrKMEWdu3YojbyOP53+gDL8WOGIVAfHqUmzzT/JJdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdiqVXPlqwe7N/ZPLpeptu19Yv6MjU3/AHgFUlHtIpyfGeR3YmIKXavpuoXqCPzDoun+a4QA&#xA;ou0AsNRC9/iH7tj8nTGIA3ieH8fjmCwMT72H3fkXyG0lNP12/wDKV0/L/QtZiIg+IcWUTgrEQRt/&#xA;eNlvHLqBL8fjoGFV5LZvy3/M+3iFxZrYeY7SSv761mTdCoU7kwfaCqarU8gG675D90e+P4+K2WP3&#xA;g8y6eznWvLd9boCPVlEcioTWshVuAXdqSLxagcVHXD4Uf4ZD8fivcni8kLB5r0V1q7SwyMV5OEG3&#xA;xEsycS1KNSVB2PJfstjLTT8j+PwD8D0XjCItte8v80/0xY+IqoMchRWDFRsV3VSeaj/fZZD2yEsG&#xA;Tu/H4+2ikSDceq6I0TkXkSs/FeMhYgcgVPKoqwXjwY9WRgftJicU75H8fi/f5FbDv01paKG+uoxY&#xA;8qFiWqRz+IqKglk4sV/aCSD9rHwZd34/H6YrxB0PmTQouUkl6zMv92saOGpUMGB48Vf42b/JkXb4&#xA;WOJ0+Q8h+Px9nmF4wsPnLQoePAzuy7q0aKArAsEZQxG0fwsg7VZPs4fykz3fj9fX4HmviBE22v6z&#xA;dgLovly6mbgFicI8iruG+yqHYEugq32G4npkDp4D65j8fgH37rxnoE5tPJH5x6xUR2MOj28nEVkK&#xA;p8KI0ajczSUEblfl8sI8GPSUz+D5Dmty9yIl/Kfy3YXAk87+cEkuyebWMD+pcEsd6L+8lap/lTJj&#xA;NkIqEREfP9Q+1FDqbZRo0Hl/SaL5P8oySTDYarqp+qpuPtDnzumH+TwXKZ4TP+8lfl+wbMxfQJhP&#xA;pGt6uvHzDqjSWp66Vp4NpaUP7L8SZpR/rPT2yURGP0j8fcnh70zsrGysbdbaygjtrdPsxRKEUfQM&#xA;SSebMBXwK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq1JHHIhSRQ6NsysKgj3Bwqk7+TvL&#xA;vrNcW1r9QuW63FhJJaP98DR1+nJcZ67seAKsdj5ntKDT/M98qA19O7SC8Ujw5SIJf+HxsdyOBZdN&#xA;5xnot7DoOsRilfrVlJExpTuJJ1H/AAOACPS/x8kcBS2bS4iQLj8vtCuCaB3trgRdR8RAa2X9eH/O&#xA;P2/rRwHuQ0Xl7y2eXrflwiEfZEV9E9f+CZKYTfSR+1eE9y6LQPK1S3/KuSpXdRJd2xB+6VvxyNS/&#xA;nn5n9S8Pkrxabp8bj6t+XOmrvUPc3UVQR02SCb9ePAOs5fOX6wtHuCawHXYKfUNG0LTCOhCzXNPu&#xA;W0yPhY+tn8edsqkiXl84TUD64tou/IafZwxVB97g3dMlHhHIfj4UvB3lCz+XYLvl+k72+1INs0dx&#xA;dS+kR/xhiMcP/CYePuXgCKsNH0nTl42FlBaL0IhjWOvz4gVwGRPNkAAi8il2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:284CA0C2D0E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:294CA0C2D0E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:821600e5-2dcd-8144-b93a-00bcf661e4a9</stRef:instanceID>
            <stRef:documentID>xmp.did:0780117407206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.878431 .745098 .545098 rgb
f
248.901 500.637 mo
229.548 486.721 193.731 457.771 171.385 420.155 cv
149.47 383.277 144.771 362.791 141.667 349.234 cv
139.671 340.49 138.558 335.675 133.904 330.976 cv
116.609 313.591 121.574 297.642 124.237 289.077 cv
127.747 277.741 130.649 273.792 144.295 267.56 cv
147.355 266.165 149.223 264.274 151.207 262.283 cv
157.049 256.445 162.622 252.649 176.631 261.046 cv
186.981 267.256 202.941 270.515 219.828 273.957 cv
229.012 275.84 238.514 277.774 247.93 280.328 cv
268.428 285.875 295.019 303.582 325.803 324.091 cv
337.657 331.977 349.9 340.133 362.901 348.365 cv
410.504 378.496 533.339 448.865 645.456 451.459 cv
700.229 452.723 729.7 451.576 749.196 450.811 cv
770.271 449.99 781.9 449.54 803.017 452.937 cv
817.202 455.221 869.212 427.928 907.022 402.008 cv
920.703 392.626 927.678 383.063 931.837 377.345 cv
935.031 372.946 939.861 366.312 946.079 370.774 cv
946.646 371.184 947.174 371.686 947.661 372.263 cv
950.021 375.039 951.337 378.946 952.746 383.086 cv
954.584 388.539 956.661 394.707 961.004 397.831 cv
968.241 403.032 972.719 414.942 971.437 425.543 cv
970.203 435.691 964.207 443.408 954.565 447.267 cv
934.687 455.24 853.229 515.157 836.327 538.674 cv
772.342 627.709 660.876 636.236 615.929 635.775 cv
481.454 634.381 351.869 568.01 266.849 512.584 cv
266.767 512.551 259.626 508.34 248.901 500.637 cv
cp
.27451 .207843 .145098 rgb
f
269.894 507.9 mo
269.894 507.9 208.702 472.006 176.189 417.305 cv
139.784 356.026 151.949 341.225 137.864 327.046 cv
123.779 312.875 126.479 300.653 129.569 290.731 cv
132.651 280.812 134.575 278.135 146.624 272.633 cv
158.669 267.132 156.794 255.665 173.759 265.834 cv
190.724 276.008 223.387 277.726 250.484 285.064 cv
277.582 292.396 312.622 323.153 359.913 353.09 cv
407.189 383.015 530.463 452.892 643.896 455.502 cv
757.342 458.131 763.507 449.911 803.407 456.331 cv
821.894 459.305 878.542 428.3 910.184 406.621 cv
936.115 388.842 939.04 370.707 943.409 375.875 cv
947.789 381.046 948.419 395.664 957.757 402.365 cv
967.087 409.073 972.366 434.104 952.477 442.081 cv
932.594 450.042 850.008 510.053 831.794 535.41 cv
807.802 568.785 744.517 631.512 615.981 630.184 cv
487.454 628.857 360.824 567.178 269.894 507.9 cv
cp
.972549 .827451 .333333 rgb
f
124.552 310.388 mo
124.552 310.388 121.064 308.892 121.387 300.012 cv
121.706 291.136 130.469 278.221 137.456 274.129 cv
144.441 270.053 141.292 268.805 148.278 264.713 cv
155.253 260.626 157.458 256.148 160.799 258.548 cv
164.129 260.945 157.432 270.271 155.298 278.866 cv
153.171 287.457 142.934 293.251 138.805 300.398 cv
134.677 307.561 124.552 310.388 124.552 310.388 cv
cp
.27451 .207843 .145098 rgb
f
150.194 294.425 mo
150.194 294.425 179.103 327.181 200.279 341.547 cv
225.441 358.613 242.407 368.787 289.296 403.49 cv
336.187 438.196 400.424 478.294 467.376 506.18 cv
467.376 506.18 393.629 483.533 316.244 427.925 cv
214.844 355.051 206.452 348.004 193.994 339.05 cv
183.314 331.377 157.702 307.91 150.194 294.425 cv
cp
f
937.533 426.274 mo
937.533 426.274 784.191 586.174 547.454 524.281 cv
547.454 524.281 752.144 583.125 937.533 426.274 cv
cp
f
126.651 304.516 mo
126.651 304.516 134.238 302.019 140.602 293.333 cv
147.434 283.992 152.463 279.458 154.214 265.947 cv
154.214 265.947 149.421 279.515 143.463 283.58 cv
137.504 287.641 141.149 296.367 126.651 304.516 cv
cp
.972549 .827451 .333333 rgb
f
gsave
155.197 346.576 mo
155.197 346.576 160.679 398.06 224.305 455.918 cv
278.512 505.227 363.682 544.768 426.876 575.205 cv
490.075 605.637 603.847 624.357 672.187 613.916 cv
740.534 603.488 740.624 597.525 769.425 583.125 cv
769.425 583.125 698.864 613.365 564.19 585.432 cv
487.049 569.424 257.999 496.317 155.197 346.576 cv
cp
clp
146.242 320.127 mo
146.242 320.127 127.6 327.53 115.99 349.955 cv
115.99 349.955 130.454 329.986 146.242 320.127 cv
cp
.27451 .207843 .145098 rgb
f
147.4 325.508 mo
147.4 325.508 128.729 332.911 117.138 355.34 cv
117.138 355.34 131.594 335.375 147.4 325.508 cv
cp
f
118.867 359.911 mo
118.867 359.911 130.154 338.918 152.887 328.208 cv
152.887 328.208 136.867 337.928 118.867 359.911 cv
cp
f
120.854 365.075 mo
120.854 365.075 132.168 344.093 154.904 333.406 cv
154.904 333.406 138.873 343.077 120.854 365.075 cv
cp
f
122.106 371.382 mo
122.106 371.382 134.396 348.522 159.168 336.867 cv
159.168 336.867 141.704 347.419 122.106 371.382 cv
cp
f
123.292 377.209 mo
123.292 377.209 135.565 354.354 160.334 342.698 cv
160.334 342.698 142.904 353.251 123.292 377.209 cv
cp
f
125.512 382.564 mo
125.512 382.564 137.804 359.697 162.577 348.042 cv
162.577 348.042 145.117 358.606 125.512 382.564 cv
cp
f
127.51 387.316 mo
127.51 387.316 140.429 362.959 167.219 350.963 cv
167.219 350.963 148.387 361.936 127.51 387.316 cv
cp
f
129.892 391.925 mo
129.892 391.925 142.822 367.58 169.612 355.591 cv
169.612 355.591 150.787 366.571 129.892 391.925 cv
cp
f
133.492 395.337 mo
133.492 395.337 146.407 371.003 173.208 359.007 cv
173.208 359.007 154.387 369.976 133.492 395.337 cv
cp
f
135.892 399.972 mo
135.892 399.972 148.814 375.616 175.593 363.635 cv
175.593 363.635 156.76 374.615 135.892 399.972 cv
cp
f
140.099 402.999 mo
140.099 402.999 153.037 378.653 179.819 366.649 cv
179.819 366.649 160.994 377.641 140.099 402.999 cv
cp
f
142.495 407.611 mo
142.495 407.611 155.414 383.273 182.219 371.281 cv
182.219 371.281 163.375 382.265 142.495 407.611 cv
cp
f
145.78 412.479 mo
145.78 412.479 158.707 388.133 185.493 376.133 cv
185.493 376.133 166.664 387.109 145.78 412.479 cv
cp
f
148.177 417.095 mo
148.177 417.095 161.092 392.734 187.889 380.753 cv
187.889 380.753 169.049 391.733 148.177 417.095 cv
cp
f
152.564 420.916 mo
152.564 420.916 166.199 395.225 194.444 382.557 cv
194.444 382.557 174.599 394.164 152.564 420.916 cv
cp
f
155.073 425.78 mo
155.073 425.78 168.719 400.096 196.957 387.425 cv
196.957 387.425 177.112 399.027 155.073 425.78 cv
cp
f
159.64 428.896 mo
159.64 428.896 173.287 403.212 201.532 390.541 cv
201.532 390.541 181.679 402.144 159.64 428.896 cv
cp
f
162.149 433.79 mo
162.149 433.79 175.795 408.102 204.037 395.423 cv
204.037 395.423 184.177 407.011 162.149 433.79 cv
cp
f
167.043 436.85 mo
167.043 436.85 180.307 411.155 208.597 398.472 cv
208.597 398.472 188.774 410.075 167.043 436.85 cv
cp
f
169.675 441.729 mo
169.675 441.729 182.932 416.033 211.233 403.336 cv
211.233 403.336 191.407 414.946 169.675 441.729 cv
cp
f
175.439 443.577 mo
175.439 443.577 188.932 417.991 217.304 405.593 cv
217.304 405.593 197.396 417.004 175.439 443.577 cv
cp
f
178.023 448.482 mo
178.023 448.482 191.504 422.907 219.873 410.51 cv
219.873 410.51 199.979 421.906 178.023 448.482 cv
cp
f
184.008 450.484 mo
184.008 450.484 197.751 424.246 227.099 411.796 cv
227.099 411.796 206.519 423.346 184.008 450.484 cv
cp
f
186.756 455.581 mo
186.756 455.581 200.481 429.342 229.859 416.903 cv
229.859 416.903 209.264 428.435 186.756 455.581 cv
cp
f
193.387 457.231 mo
193.387 457.231 207.074 431.165 236.129 418.681 cv
236.129 418.681 215.744 430.208 193.387 457.231 cv
cp
f
196.057 462.26 mo
196.057 462.26 209.751 436.197 238.814 423.717 cv
238.814 423.717 218.437 435.241 196.057 462.26 cv
cp
f
202.953 463.703 mo
202.953 463.703 216.539 437.761 245.519 425.427 cv
245.519 425.427 225.179 436.838 202.953 463.703 cv
cp
f
205.649 468.729 mo
205.649 468.729 219.243 442.801 248.211 430.448 cv
248.211 430.448 227.905 441.875 205.649 468.729 cv
cp
f
211.327 471.192 mo
211.327 471.192 225.07 444.95 254.421 432.507 cv
254.421 432.507 233.827 444.039 211.327 471.192 cv
cp
f
214.068 476.277 mo
214.068 476.277 227.804 450.057 257.174 437.6 cv
257.174 437.6 236.586 449.124 214.068 476.277 cv
cp
f
220.706 477.923 mo
220.706 477.923 234.381 451.868 263.437 439.392 cv
263.437 439.392 243.052 450.912 220.706 477.923 cv
cp
f
223.394 482.971 mo
223.394 482.971 237.074 456.908 266.129 444.421 cv
266.129 444.421 245.759 455.952 223.394 482.971 cv
cp
f
230.256 484.392 mo
230.256 484.392 243.847 458.468 272.819 446.12 cv
272.819 446.12 252.517 457.55 230.256 484.392 cv
cp
f
232.968 489.417 mo
232.968 489.417 246.546 463.497 275.519 451.148 cv
275.519 451.148 255.198 462.567 232.968 489.417 cv
cp
f
240.082 488.99 mo
240.082 488.99 254.699 463.197 284.324 451.914 cv
284.324 451.914 263.437 462.642 240.082 488.99 cv
cp
f
242.602 494.225 mo
242.602 494.225 257.234 468.436 286.874 457.141 cv
286.874 457.141 265.994 467.874 242.602 494.225 cv
cp
f
249.146 496.156 mo
249.146 496.156 263.703 470.54 293.032 459.215 cv
293.032 459.215 272.354 469.936 249.146 496.156 cv
cp
f
251.609 501.323 mo
251.609 501.323 266.189 475.707 295.518 464.397 cv
295.518 464.397 274.84 475.118 251.609 501.323 cv
cp
f
258.404 503.056 mo
258.404 503.056 272.864 477.575 302.106 466.377 cv
302.106 466.377 281.5 477.001 258.404 503.056 cv
cp
f
260.89 508.23 mo
260.89 508.23 275.358 482.738 304.597 471.541 cv
304.597 471.541 283.998 482.172 260.89 508.23 cv
cp
f
266.605 510.796 mo
266.605 510.796 281.227 484.996 310.874 473.738 cv
310.874 473.738 289.983 484.456 266.605 510.796 cv
cp
f
269.148 516.039 mo
269.148 516.039 283.769 490.238 313.417 478.958 cv
313.417 478.958 292.537 489.68 269.148 516.039 cv
cp
f
277.364 515.139 mo
277.364 515.139 293.122 490.22 322.769 480.544 cv
322.769 480.544 301.731 490.126 277.364 515.139 cv
cp
f
279.937 521.146 mo
279.937 521.146 295.068 495.822 324.565 485.258 cv
324.565 485.258 303.711 495.462 279.937 521.146 cv
cp
f
284.932 524.869 mo
284.932 524.869 299.407 499.374 328.642 488.172 cv
328.642 488.172 308.039 498.803 284.932 524.869 cv
cp
f
287.714 530.416 mo
287.714 530.416 301.747 504.729 330.865 492.938 cv
330.865 492.938 310.39 503.967 287.714 530.416 cv
cp
f
294.427 530.945 mo
294.427 530.945 308.894 505.438 338.137 494.243 cv
338.137 494.243 317.534 504.863 294.427 530.945 cv
cp
f
297.206 536.498 mo
297.206 536.498 311.245 510.773 340.342 499.002 cv
340.342 499.002 319.874 510.039 297.206 536.498 cv
cp
f
304.792 536.547 mo
304.792 536.547 319.259 511.066 348.505 499.861 cv
348.505 499.861 327.892 510.511 304.792 536.547 cv
cp
f
307.578 542.123 mo
307.578 542.123 321.599 516.398 350.71 504.627 cv
350.71 504.627 330.254 515.652 307.578 542.123 cv
cp
f
314.302 542.6 mo
314.302 542.6 328.979 516.924 358.473 505.516 cv
358.473 505.516 337.671 516.309 314.302 542.6 cv
cp
f
317.073 548.188 mo
317.073 548.188 331.327 522.277 360.667 510.274 cv
360.667 510.274 340.026 521.479 317.073 548.188 cv
cp
f
324.959 548.482 mo
324.959 548.482 339.929 522.559 369.723 510.852 cv
369.723 510.852 348.697 521.854 324.959 548.482 cv
cp
f
327.715 554.053 mo
327.715 554.053 342.239 527.906 371.928 515.629 cv
371.928 515.629 351.037 527.029 327.715 554.053 cv
cp
f
335.41 554.029 mo
335.41 554.029 350.369 528.098 380.186 516.398 cv
380.186 516.398 359.148 527.408 335.41 554.029 cv
cp
f
338.167 559.594 mo
338.167 559.594 352.702 533.461 382.379 521.188 cv
382.379 521.188 361.488 532.576 338.167 559.594 cv
cp
f
344.984 560.025 mo
344.984 560.025 359.939 534.102 389.759 522.402 cv
389.759 522.402 368.714 533.396 344.984 560.025 cv
cp
f
347.74 565.605 mo
347.74 565.605 362.264 539.445 391.934 527.172 cv
391.934 527.172 371.05 538.58 347.74 565.605 cv
cp
f
357.187 564.977 mo
357.187 564.977 372.153 539.041 401.965 527.34 cv
401.965 527.34 380.928 538.348 357.187 564.977 cv
cp
f
359.969 570.537 mo
359.969 570.537 374.474 544.389 404.159 532.115 cv
404.159 532.115 383.256 543.521 359.969 570.537 cv
cp
f
366.809 570.92 mo
366.809 570.92 382.773 544.051 413.688 531.305 cv
413.688 531.305 391.807 543.105 366.809 570.92 cv
cp
f
369.532 576.533 mo
369.532 576.533 385.057 549.439 415.829 536.119 cv
415.829 536.119 394.09 548.334 369.532 576.533 cv
cp
f
379.454 575.037 mo
379.454 575.037 393.907 549.563 423.157 538.348 cv
423.157 538.348 402.546 548.99 379.454 575.037 cv
cp
f
382.237 580.617 mo
382.237 580.617 396.247 554.893 425.365 543.125 cv
425.365 543.125 404.909 554.143 382.237 580.617 cv
cp
f
388.96 581.102 mo
388.96 581.102 403.642 555.414 433.128 544.014 cv
433.128 544.014 412.327 554.795 388.96 581.102 cv
cp
f
391.724 586.691 mo
391.724 586.691 405.981 560.758 435.329 548.76 cv
435.329 548.76 414.689 559.969 391.724 586.691 cv
cp
f
399.606 586.984 mo
399.606 586.984 414.565 561.045 444.378 549.35 cv
444.378 549.35 423.344 560.348 399.606 586.984 cv
cp
f
402.367 592.553 mo
402.367 592.553 416.901 566.412 446.572 554.127 cv
446.572 554.127 425.68 565.535 402.367 592.553 cv
cp
f
410.062 592.531 mo
410.062 592.531 425.028 566.596 454.836 554.896 cv
454.836 554.896 433.807 565.895 410.062 592.531 cv
cp
f
412.822 598.1 mo
412.822 598.1 427.356 571.943 457.023 559.666 cv
457.023 559.666 436.131 571.076 412.822 598.1 cv
cp
f
419.631 598.504 mo
419.631 598.504 434.594 572.584 464.407 560.902 cv
464.407 560.902 443.376 571.898 419.631 598.504 cv
cp
f
424.296 602.656 mo
424.296 602.656 442.417 573.428 474.487 560.34 cv
474.487 560.34 447.359 574.52 424.296 602.656 cv
cp
f
431.842 603.455 mo
431.842 603.455 450.43 575.318 479.879 562.586 cv
479.879 562.586 455.579 576.836 431.842 603.455 cv
cp
f
434.586 609.045 mo
434.586 609.045 456.021 578.063 486.183 564.42 cv
486.183 564.42 458.887 580.549 434.586 609.045 cv
cp
f
441.475 609.406 mo
441.475 609.406 459.292 582.305 490.979 566.445 cv
490.979 566.445 468.074 579.492 441.475 609.406 cv
cp
f
449.699 610.17 mo
449.699 610.17 469.349 580.82 500.965 565.41 cv
500.965 565.41 474.247 581.979 449.699 610.17 cv
cp
f
458.354 609.316 mo
458.354 609.316 476.151 582.203 507.85 566.336 cv
507.85 566.336 484.964 579.402 458.354 609.316 cv
cp
f
466.574 610.104 mo
466.574 610.104 486.224 580.74 517.837 565.313 cv
517.837 565.313 491.133 581.877 466.574 610.104 cv
cp
f
475.045 608.99 mo
475.045 608.99 492.865 581.889 524.55 566.029 cv
524.55 566.029 501.662 579.064 475.045 608.99 cv
cp
f
483.269 609.766 mo
483.269 609.766 502.923 580.414 534.539 565.006 cv
534.539 565.006 507.832 581.551 483.269 609.766 cv
cp
f
489.243 610.879 mo
489.243 610.879 507.059 583.768 538.747 567.912 cv
538.747 567.912 515.842 580.977 489.243 610.879 cv
cp
f
497.478 611.656 mo
497.478 611.656 517.132 582.293 548.733 566.865 cv
548.733 566.865 522.036 583.441 497.478 611.656 cv
cp
f
502.949 613.197 mo
502.949 613.197 520.765 586.107 552.441 570.223 cv
552.441 570.223 529.54 583.283 502.949 613.197 cv
cp
f
511.161 613.973 mo
511.161 613.973 530.823 584.621 562.436 569.205 cv
562.436 569.205 535.728 585.758 511.161 613.973 cv
cp
f
516.217 615.504 mo
516.217 615.504 534.029 588.402 565.72 572.539 cv
565.72 572.539 542.827 585.602 516.217 615.504 cv
cp
f
524.429 616.279 mo
524.429 616.279 544.098 586.928 575.71 571.527 cv
575.71 571.527 548.991 588.064 524.429 616.279 cv
cp
f
531.262 617.428 mo
531.262 617.428 549.07 590.326 580.751 574.451 cv
580.751 574.451 557.864 587.502 531.262 617.428 cv
cp
f
539.485 618.191 mo
539.485 618.191 559.14 588.84 590.751 573.428 cv
590.751 573.428 564.044 590 539.485 618.191 cv
cp
f
546.64 618.676 mo
546.64 618.676 564.449 591.563 596.137 575.689 cv
596.137 575.689 573.258 588.74 546.64 618.676 cv
cp
f
554.856 619.441 mo
554.856 619.441 574.519 590.09 606.119 574.666 cv
606.119 574.666 579.411 591.215 554.856 619.441 cv
cp
f
562.079 619.441 mo
562.079 619.441 579.907 592.352 611.587 576.477 cv
611.587 576.477 588.688 589.527 562.079 619.441 cv
cp
f
570.3 620.217 mo
570.3 620.217 589.964 590.854 621.565 575.441 cv
621.565 575.441 594.858 592.002 570.3 620.217 cv
cp
f
577.709 620.465 mo
577.709 620.465 595.521 593.363 627.209 577.479 cv
627.209 577.479 604.308 590.527 577.709 620.465 cv
cp
f
585.929 621.229 mo
585.929 621.229 605.591 591.867 637.199 576.465 cv
637.199 576.465 610.495 593.014 585.929 621.229 cv
cp
f
594.07 621.354 mo
594.07 621.354 611.872 594.252 643.57 578.367 cv
643.57 578.367 620.669 591.428 594.07 621.354 cv
cp
f
602.271 622.117 mo
602.271 622.117 621.948 592.768 653.557 577.365 cv
653.557 577.365 626.853 593.914 602.271 622.117 cv
cp
f
609.854 622.219 mo
609.854 622.219 627.675 595.107 659.362 579.232 cv
659.362 579.232 636.456 592.305 609.854 622.219 cv
cp
f
618.074 622.984 mo
618.074 622.984 637.731 593.633 669.345 578.221 cv
669.345 578.221 642.637 594.77 618.074 622.984 cv
cp
f
627.765 621.477 mo
627.765 621.477 645.584 594.375 677.271 578.502 cv
677.271 578.502 654.37 591.553 627.765 621.477 cv
cp
f
635.983 622.242 mo
635.983 622.242 655.653 592.879 687.265 577.49 cv
687.265 577.49 660.546 594.027 635.983 622.242 cv
cp
f
648.688 618.08 mo
648.688 618.08 666.494 590.979 698.182 575.115 cv
698.182 575.115 675.276 588.154 648.688 618.08 cv
cp
f
656.917 618.844 mo
656.917 618.844 676.556 589.516 708.168 574.092 cv
708.168 574.092 681.46 590.641 656.917 618.844 cv
cp
f
667.813 616.01 mo
667.813 616.01 685.619 588.908 717.325 573.035 cv
717.325 573.035 694.401 586.072 667.813 616.01 cv
cp
f
676.042 616.773 mo
676.042 616.773 695.685 587.434 727.304 572.01 cv
727.304 572.01 700.589 588.57 676.042 616.773 cv
cp
f
687.727 613.512 mo
687.727 613.512 705.532 586.377 737.216 570.525 cv
737.216 570.525 714.329 583.586 687.727 613.512 cv
cp
f
695.946 614.266 mo
695.946 614.266 715.604 584.914 747.194 569.502 cv
747.194 569.502 720.498 586.051 695.946 614.266 cv
cp
f
709.664 609.99 mo
709.664 609.99 727.473 582.889 759.153 567.012 cv
759.153 567.012 736.251 580.066 709.664 609.99 cv
cp
f
717.869 610.756 mo
717.869 610.756 737.534 581.393 769.144 565.996 cv
769.144 565.996 742.432 582.541 717.869 610.756 cv
cp
f
733.356 604.389 mo
733.356 604.389 751.165 577.287 782.849 561.42 cv
782.849 561.42 759.959 574.463 733.356 604.389 cv
cp
f
grestore
160.912 385.077 mo
160.912 385.077 178.679 450.436 269.894 507.9 cv
361.109 565.365 496.533 630.309 599.673 627.553 cv
599.673 627.553 500.2 623.771 341.602 543.252 cv
188.189 465.368 160.912 385.077 160.912 385.077 cv
cp
1 .92549 .705882 rgb
f
153.659 349.662 mo
153.659 349.662 170.44 425.296 250.784 481.013 cv
331.117 536.734 447.059 597.795 540.892 613.635 cv
634.717 629.477 702.914 621.836 755.526 590.854 cv
755.526 590.854 685.987 629.902 560.298 606.334 cv
434.594 582.766 318.985 516.99 264.059 479.431 cv
177.231 420.072 153.659 349.662 153.659 349.662 cv
cp
.27451 .207843 .145098 rgb
f
966.389 424.733 mo
966.389 424.733 949.908 417.68 948.382 408.646 cv
946.852 399.612 948.404 402.241 941.991 395.382 cv
935.587 388.52 934.807 377.165 940.941 373.546 cv
947.084 369.931 946.499 377.956 952.709 388.482 cv
958.908 399.012 974.489 416.416 966.389 424.733 cv
cp
f
836.644 446.254 mo
836.644 446.254 816.149 453.601 814.515 462.848 cv
812.872 472.084 811.425 477.665 811.425 477.665 cv
811.425 477.665 812.399 465.274 806.669 461.562 cv
800.936 457.854 783.501 453.35 783.501 453.35 cv
783.501 453.35 790.581 452.461 803.017 452.937 cv
815.459 453.421 836.644 446.254 836.644 446.254 cv
cp
f
931.154 397.047 mo
931.154 397.047 918.899 410.446 894.963 424.879 cv
879.922 433.947 855.149 446.813 838.511 453.428 cv
838.511 453.428 857.41 444.387 874.102 434.093 cv
890.777 423.796 911.137 411.211 920.451 403.943 cv
929.767 396.687 931.154 397.047 931.154 397.047 cv
cp
f
gsave
251.894 300.428 mo
251.894 300.428 259.63 293.499 296.234 323.142 cv
345.441 362.993 453.76 420.004 519.888 443.262 cv
591.472 468.447 633.39 468.087 677.039 468.237 cv
714.243 468.368 757.331 459.976 777.472 465.177 cv
798.06 470.495 802.285 483.882 780.573 493.49 cv
758.864 503.102 713.636 507.237 622.623 503.258 cv
499.615 497.911 390.265 434.78 322.495 384.098 cv
247.683 328.152 237.599 304.91 251.894 300.428 cv
cp
clp
243.314 276.74 mo
243.314 276.74 237.637 300.14 212.722 315.166 cv
212.722 315.166 243.907 301.576 243.314 276.74 cv
cp
1 1 1 rgb
f
250.867 281.982 mo
250.867 281.982 248.407 310.726 215.159 325.088 cv
215.159 325.088 240.029 311.209 250.867 281.982 cv
cp
f
258.126 287.513 mo
258.126 287.513 255.816 312.792 228.625 327.147 cv
228.625 327.147 248.249 314.187 258.126 287.513 cv
cp
f
264.929 290.124 mo
264.929 290.124 260.526 317.33 229.143 334.955 cv
229.143 334.955 263.748 322.669 264.929 290.124 cv
cp
f
271.912 295.347 mo
271.912 295.347 267.501 322.557 236.114 340.175 cv
236.114 340.175 270.711 327.882 271.912 295.347 cv
cp
f
278.609 300.263 mo
278.609 300.263 274.207 327.473 242.823 345.091 cv
242.823 345.091 277.417 332.806 278.609 300.263 cv
cp
f
285.284 305.753 mo
285.284 305.753 280.881 332.956 249.487 350.592 cv
249.487 350.592 284.106 338.3 285.284 305.753 cv
cp
f
291.682 310.958 mo
291.682 310.958 287.283 338.161 255.884 355.782 cv
255.884 355.782 290.489 343.504 291.682 310.958 cv
cp
f
298.131 314.99 mo
298.131 314.99 293.74 342.203 262.356 359.828 cv
262.356 359.828 296.947 347.547 298.131 314.99 cv
cp
f
303.711 319.283 mo
303.711 319.283 299.309 346.497 267.933 364.118 cv
267.933 364.118 302.526 351.833 303.711 319.283 cv
cp
f
309.869 323.604 mo
309.869 323.604 305.459 350.81 274.075 368.438 cv
274.075 368.438 308.68 356.153 309.869 323.604 cv
cp
f
316.015 327.923 mo
316.015 327.923 311.609 355.129 280.229 372.747 cv
280.229 372.747 314.827 360.473 316.015 327.923 cv
cp
f
321.888 331.943 mo
321.888 331.943 317.497 359.157 286.113 376.774 cv
286.113 376.774 320.699 364.497 321.888 331.943 cv
cp
f
328.053 336.252 mo
328.053 336.252 323.654 363.455 292.259 381.083 cv
292.259 381.083 326.86 368.81 328.053 336.252 cv
cp
f
333.614 340.546 mo
333.614 340.546 329.219 367.752 297.847 385.381 cv
297.847 385.381 332.437 373.107 333.614 340.546 cv
cp
f
339.775 344.866 mo
339.775 344.866 335.369 372.083 304 389.697 cv
304 389.697 338.586 377.416 339.775 344.866 cv
cp
f
345.659 348.894 mo
345.659 348.894 341.249 376.096 309.873 393.717 cv
309.873 393.717 344.474 381.432 345.659 348.894 cv
cp
f
351.809 353.202 mo
351.809 353.202 347.414 380.416 316.026 398.037 cv
316.026 398.037 350.62 385.76 351.809 353.202 cv
cp
f
358.012 356.367 mo
358.012 356.367 353.613 383.581 322.222 401.198 cv
322.222 401.198 356.812 388.914 358.012 356.367 cv
cp
f
364.166 360.687 mo
364.166 360.687 359.755 387.901 328.372 405.519 cv
328.372 405.519 362.973 393.233 364.166 360.687 cv
cp
f
370.034 364.703 mo
370.034 364.703 365.631 391.928 334.251 409.546 cv
334.251 409.546 368.849 397.272 370.034 364.703 cv
cp
f
376.191 369.02 mo
376.191 369.02 371.789 396.233 340.405 413.854 cv
340.405 413.854 375.01 401.566 376.191 369.02 cv
cp
f
383.219 373.084 mo
383.219 373.084 378.816 400.298 347.429 417.916 cv
347.429 417.916 382.03 405.631 383.219 373.084 cv
cp
f
389.369 377.401 mo
389.369 377.401 384.974 404.615 353.59 422.236 cv
353.59 422.236 388.184 409.958 389.369 377.401 cv
cp
f
395.242 381.421 mo
395.242 381.421 390.847 408.642 359.463 426.263 cv
359.463 426.263 394.057 413.967 395.242 381.421 cv
cp
f
401.403 385.737 mo
401.403 385.737 397.004 412.951 365.617 430.572 cv
365.617 430.572 400.214 418.287 401.403 385.737 cv
cp
f
407.684 388.722 mo
407.684 388.722 404.238 416.071 373.492 434.787 cv
373.492 434.787 407.639 421.302 407.684 388.722 cv
cp
f
413.992 392.817 mo
413.992 392.817 410.549 420.173 379.78 438.882 cv
379.78 438.882 413.936 425.397 413.992 392.817 cv
cp
f
420.006 396.631 mo
420.006 396.631 416.564 423.991 385.799 442.696 cv
385.799 442.696 419.947 429.207 420.006 396.631 cv
cp
f
426.299 400.726 mo
426.299 400.726 422.849 428.086 392.099 446.791 cv
392.099 446.791 426.254 433.306 426.299 400.726 cv
cp
f
432.847 403.358 mo
432.847 403.358 429.794 430.752 399.299 449.888 cv
399.299 449.888 433.259 435.927 432.847 403.358 cv
cp
f
439.203 407.363 mo
439.203 407.363 436.146 434.765 405.651 453.901 cv
405.651 453.901 439.608 439.943 439.203 407.363 cv
cp
f
445.278 411.106 mo
445.278 411.106 442.214 438.492 411.719 457.617 cv
411.719 457.617 445.679 443.667 445.278 411.106 cv
cp
f
451.626 415.115 mo
451.626 415.115 448.563 442.508 418.075 461.633 cv
418.075 461.633 452.039 447.672 451.626 415.115 cv
cp
f
458.688 415.598 mo
458.688 415.598 457.034 443.104 427.589 463.79 cv
427.589 463.79 460.776 448.1 458.688 415.598 cv
cp
f
465.239 419.273 mo
465.239 419.273 463.593 446.783 434.122 467.461 cv
434.122 467.461 467.324 451.786 465.239 419.273 cv
cp
f
471.49 422.686 mo
471.49 422.686 469.844 450.203 440.376 470.877 cv
440.376 470.877 473.583 455.195 471.49 422.686 cv
cp
f
478.042 426.361 mo
478.042 426.361 476.396 453.878 446.939 474.556 cv
446.939 474.556 480.13 458.854 478.042 426.361 cv
cp
f
484.649 427.715 mo
484.649 427.715 484.99 454.126 458.227 475.707 cv
458.227 475.707 488.917 458.671 484.649 427.715 cv
cp
f
491.167 430.838 mo
491.167 430.838 491.526 457.242 464.751 478.823 cv
464.751 478.823 495.441 461.78 491.167 430.838 cv
cp
f
497.399 433.707 mo
497.399 433.707 497.751 460.111 470.992 481.715 cv
470.992 481.715 501.674 464.66 497.399 433.707 cv
cp
f
503.932 436.823 mo
503.932 436.823 504.291 463.238 477.509 484.82 cv
477.509 484.82 508.211 467.772 503.932 436.823 cv
cp
f
510.28 437.052 mo
510.28 437.052 511.765 463.422 485.969 486.155 cv
485.969 486.155 515.894 467.783 510.28 437.052 cv
cp
f
516.94 439.883 mo
516.94 439.883 518.444 466.246 492.637 488.979 cv
492.637 488.979 522.554 470.611 516.94 439.883 cv
cp
f
523.282 442.475 mo
523.282 442.475 524.789 468.856 498.963 491.581 cv
498.963 491.581 528.899 473.221 523.282 442.475 cv
cp
f
529.945 445.317 mo
529.945 445.317 531.441 471.676 505.642 494.412 cv
505.642 494.412 535.566 476.044 529.945 445.317 cv
cp
f
536.257 444.331 mo
536.257 444.331 539.126 470.584 514.574 494.652 cv
514.574 494.652 543.487 474.725 536.257 444.331 cv
cp
f
543.052 446.802 mo
543.052 446.802 545.946 473.052 521.376 497.124 cv
521.376 497.124 550.282 477.2 543.052 446.802 cv
cp
f
549.521 449.063 mo
549.521 449.063 552.419 475.313 527.853 499.385 cv
527.853 499.385 556.762 479.465 549.521 449.063 cv
cp
f
556.338 451.542 mo
556.338 451.542 559.229 477.796 534.659 501.852 cv
534.659 501.852 563.571 481.928 556.338 451.542 cv
cp
f
562.566 451.328 mo
562.566 451.328 566.946 477.357 543.827 502.805 cv
543.827 502.805 571.536 481.25 562.566 451.328 cv
cp
f
569.497 453.395 mo
569.497 453.395 573.888 479.438 550.762 504.89 cv
550.762 504.89 578.474 483.32 569.497 453.395 cv
cp
f
576.089 455.277 mo
576.089 455.277 580.483 481.321 557.347 506.769 cv
557.347 506.769 585.07 485.213 576.089 455.277 cv
cp
f
583.019 457.358 mo
583.019 457.358 587.429 483.41 564.292 508.834 cv
564.292 508.834 591.989 487.283 583.019 457.358 cv
cp
f
588.224 456.29 mo
588.224 456.29 594.476 481.951 573.235 508.98 cv
573.235 508.98 599.31 485.495 588.224 456.29 cv
cp
f
595.285 457.854 mo
595.285 457.854 601.54 483.503 580.289 510.556 cv
580.289 510.556 606.378 487.059 595.285 457.854 cv
cp
f
601.994 459.26 mo
601.994 459.26 608.249 484.917 586.994 511.966 cv
586.994 511.966 613.102 488.476 601.994 459.26 cv
cp
f
609.06 460.842 mo
609.06 460.842 615.329 486.507 594.07 513.519 cv
594.07 513.519 620.167 490.04 609.06 460.842 cv
cp
f
616.177 460.032 mo
616.177 460.032 623.512 485.394 603.441 513.323 cv
603.441 513.323 628.495 488.731 616.177 460.032 cv
cp
f
623.286 461.303 mo
623.286 461.303 630.644 486.661 610.563 514.587 cv
610.563 514.587 635.628 489.995 623.286 461.303 cv
cp
f
630.048 462.417 mo
630.048 462.417 637.425 487.786 617.324 515.709 cv
617.324 515.709 642.4 491.127 630.048 462.417 cv
cp
f
637.181 463.688 mo
637.181 463.688 644.534 489.057 624.456 516.969 cv
624.456 516.969 649.529 492.387 637.181 463.688 cv
cp
f
643.754 462.792 mo
643.754 462.792 651.816 487.932 632.557 516.432 cv
632.557 516.432 656.894 491.127 643.754 462.792 cv
cp
f
650.909 463.857 mo
650.909 463.857 658.972 489.001 639.696 517.486 cv
639.696 517.486 664.063 492.196 650.909 463.857 cv
cp
f
657.704 464.791 mo
657.704 464.791 665.789 489.927 646.507 518.424 cv
646.507 518.424 670.858 493.129 657.704 464.791 cv
cp
f
664.866 465.852 mo
664.866 465.852 672.933 491.007 653.661 519.469 cv
653.661 519.469 678.015 494.18 664.866 465.852 cv
cp
f
670.47 463.073 mo
670.47 463.073 680.602 487.463 663.798 517.451 cv
663.798 517.451 685.938 490.22 670.47 463.073 cv
cp
f
677.685 463.542 mo
677.685 463.542 687.839 487.914 671.021 517.916 cv
671.021 517.916 693.171 490.681 677.685 463.542 cv
cp
f
684.524 463.891 mo
684.524 463.891 694.679 488.273 677.86 518.266 cv
677.86 518.266 700.022 491.037 684.524 463.891 cv
cp
f
691.765 464.345 mo
691.765 464.345 701.909 488.746 685.083 518.723 cv
685.083 518.723 707.241 491.499 691.765 464.345 cv
cp
f
697.724 463.351 mo
697.724 463.351 709.462 487.013 694.687 518.063 cv
694.687 518.063 714.959 489.406 697.724 463.351 cv
cp
f
704.962 463.343 mo
704.962 463.343 716.706 486.987 701.925 518.049 cv
701.925 518.049 722.212 489.387 704.962 463.343 cv
cp
f
711.81 463.231 mo
711.81 463.231 723.562 486.897 708.779 517.939 cv
708.779 517.939 729.074 489.297 711.81 463.231 cv
cp
f
719.058 463.216 mo
719.058 463.216 730.792 486.875 716.017 517.914 cv
716.017 517.914 736.304 489.271 719.058 463.216 cv
cp
f
725.751 461.611 mo
725.751 461.611 738.937 484.467 726.157 516.395 cv
726.157 516.395 744.584 486.515 725.751 461.611 cv
cp
f
732.963 461.138 mo
732.963 461.138 746.182 483.995 733.379 515.914 cv
733.379 515.914 751.821 486.042 732.963 461.138 cv
cp
f
739.8 460.598 mo
739.8 460.598 753.011 483.455 740.208 515.386 cv
740.208 515.386 758.657 485.517 739.8 460.598 cv
cp
f
747.021 460.115 mo
747.021 460.115 760.244 483.004 747.441 514.914 cv
747.441 514.914 765.88 485.033 747.021 460.115 cv
cp
f
753.81 458.596 mo
753.81 458.596 767.771 481.017 756.074 513.35 cv
756.074 513.35 773.485 482.862 753.81 458.596 cv
cp
f
761.009 457.887 mo
761.009 457.887 774.989 480.286 763.259 512.637 cv
763.259 512.637 780.696 482.153 761.009 457.887 cv
cp
f
767.819 457.129 mo
767.819 457.129 781.792 479.532 770.077 511.854 cv
770.077 511.854 787.521 481.388 767.819 457.129 cv
cp
f
775.034 456.402 mo
775.034 456.402 789.007 478.82 777.276 511.133 cv
777.276 511.133 794.702 480.665 775.034 456.402 cv
cp
f
783.407 457.816 mo
783.407 457.816 797.369 480.226 785.657 512.559 cv
785.657 512.559 803.073 482.071 783.407 457.816 cv
cp
f
790.604 457.1 mo
790.604 457.1 804.581 479.495 792.854 511.842 cv
792.854 511.842 810.296 481.354 790.604 457.1 cv
cp
f
797.407 456.334 mo
797.407 456.334 811.387 478.745 799.675 511.073 cv
799.675 511.073 817.112 480.601 797.407 456.334 cv
cp
f
804.614 455.604 mo
804.614 455.604 818.598 478.036 806.864 510.346 cv
806.864 510.346 824.302 479.877 804.614 455.604 cv
cp
f
grestore
331.671 394.647 mo
331.671 394.647 460.128 493.269 613.724 503.198 cv
613.724 503.198 467.182 506.24 331.671 394.647 cv
cp
f
261.704 380.791 mo
261.704 380.791 287.376 396.451 312.325 414.886 cv
337.267 433.325 389.789 463.936 389.789 463.936 cv
389.789 463.936 349.653 450.451 261.704 380.791 cv
cp
1 1 1 rgb
f
128.707 310.002 mo
128.707 310.002 132.921 308.483 138.805 300.398 cv
144.678 292.317 145.263 291.968 149.133 288.507 cv
153.003 285.042 153.475 283.193 155.504 277.269 cv
157.537 271.34 160.177 261.125 163.552 261.496 cv
166.919 261.867 171.194 264.365 177.697 268.122 cv
185.47 272.607 205 275.671 205 275.671 cv
205 275.671 189.025 277.988 178.582 274.298 cv
168.134 270.608 164.084 267.087 160.649 274.625 cv
157.21 282.169 158.699 286.01 151.563 290.622 cv
144.427 295.223 145.274 305.359 128.707 310.002 cv
cp
1 .92549 .705882 rgb
f
825.584 494.562 mo
825.584 494.562 845.024 520.482 823.425 547.842 cv
840.704 529.121 li
840.704 529.121 842.864 509.682 825.584 494.562 cv
cp
.27451 .207843 .145098 rgb
f
gsave
837.824 529.842 mo
837.824 529.842 863.384 503.563 903.704 476.922 cv
944.024 450.282 950.145 444.882 959.504 438.402 cv
968.864 431.922 960.224 411.762 955.184 411.042 cv
950.145 410.322 937.904 428.322 930.704 432.642 cv
923.504 436.962 889.664 467.202 864.464 480.162 cv
839.265 493.122 825.584 496.002 825.584 496.002 cv
825.584 496.002 841.064 508.602 837.824 529.842 cv
cp
clp
945.832 416.802 mo
945.832 416.802 961.191 430.718 958.792 447.522 cv
958.792 447.522 956.388 433.122 945.832 416.802 cv
cp
f
940.548 419.206 mo
940.548 419.206 955.911 433.122 953.508 449.922 cv
953.508 449.922 951.104 435.522 940.548 419.206 cv
cp
f
935.264 421.606 mo
935.264 421.606 950.628 435.522 948.224 452.326 cv
948.224 452.326 945.824 437.926 935.264 421.606 cv
cp
f
930.468 423.526 mo
930.468 423.526 945.832 437.442 943.428 454.242 cv
943.428 454.242 941.024 439.842 930.468 423.526 cv
cp
f
924.708 425.926 mo
924.708 425.926 940.071 439.842 937.668 456.646 cv
937.668 456.646 935.264 442.246 924.708 425.926 cv
cp
f
919.432 429.286 mo
919.432 429.286 934.792 443.202 932.392 460.002 cv
932.392 460.002 929.991 445.602 919.432 429.286 cv
cp
f
914.628 432.166 mo
914.628 432.166 929.991 446.082 927.588 462.882 cv
927.588 462.882 925.184 448.482 914.628 432.166 cv
cp
f
909.832 435.522 mo
909.832 435.522 925.191 449.438 922.792 466.242 cv
922.792 466.242 920.388 451.842 909.832 435.522 cv
cp
f
905.024 438.402 mo
905.024 438.402 920.388 452.318 917.984 469.122 cv
917.984 469.122 915.584 454.722 905.024 438.402 cv
cp
f
900.712 442.246 mo
900.712 442.246 916.071 456.162 913.672 472.962 cv
913.672 472.962 911.271 458.562 900.712 442.246 cv
cp
f
895.908 445.126 mo
895.908 445.126 911.271 459.042 908.868 475.842 cv
908.868 475.842 906.464 461.442 895.908 445.126 cv
cp
f
891.115 448.482 mo
891.115 448.482 906.479 462.398 904.075 479.202 cv
904.075 479.202 901.672 464.802 891.115 448.482 cv
cp
f
886.312 451.362 mo
886.312 451.362 901.672 465.278 899.271 482.082 cv
899.271 482.082 896.871 467.682 886.312 451.362 cv
cp
f
882.476 455.682 mo
882.476 455.682 897.839 469.598 895.436 486.402 cv
895.436 486.402 893.031 472.002 882.476 455.682 cv
cp
f
877.672 458.562 mo
877.672 458.562 893.031 472.479 890.632 489.282 cv
890.632 489.282 888.231 474.882 877.672 458.562 cv
cp
f
873.352 463.838 mo
873.352 463.838 888.712 477.754 886.312 494.559 cv
886.312 494.559 883.911 480.158 873.352 463.838 cv
cp
f
868.548 466.718 mo
868.548 466.718 883.911 480.635 881.508 497.438 cv
881.508 497.438 879.104 483.039 868.548 466.718 cv
cp
f
864.228 471.039 mo
864.228 471.039 879.592 484.955 877.188 501.758 cv
877.188 501.758 874.784 487.358 864.228 471.039 cv
cp
f
859.424 473.918 mo
859.424 473.918 874.784 487.834 872.384 504.639 cv
872.384 504.639 869.984 490.238 859.424 473.918 cv
cp
f
855.588 478.238 mo
855.588 478.238 870.951 492.155 868.548 508.959 cv
868.548 508.959 866.145 494.559 855.588 478.238 cv
cp
f
850.784 481.118 mo
850.784 481.118 866.145 495.035 863.744 511.838 cv
863.744 511.838 861.344 497.438 850.784 481.118 cv
cp
f
846.228 482.559 mo
846.228 482.559 861.592 496.475 859.188 513.278 cv
859.188 513.278 856.784 498.878 846.228 482.559 cv
cp
f
841.908 486.878 mo
841.908 486.878 857.271 500.794 854.868 517.598 cv
854.868 517.598 852.464 503.198 841.908 486.878 cv
cp
f
837.104 489.758 mo
837.104 489.758 852.464 503.675 850.064 520.479 cv
850.064 520.479 847.664 506.078 837.104 489.758 cv
cp
f
833.269 494.078 mo
833.269 494.078 848.632 507.994 846.228 524.799 cv
846.228 524.799 843.824 510.398 833.269 494.078 cv
cp
f
828.464 496.958 mo
828.464 496.958 843.824 510.875 841.424 527.678 cv
841.424 527.678 839.024 513.278 828.464 496.958 cv
cp
f
950.871 413.202 mo
950.871 413.202 966.231 427.118 963.832 443.922 cv
963.832 443.922 961.428 429.522 950.871 413.202 cv
cp
f
grestore
889.281 282.369 mo
889.281 282.369 889.848 275.83 895.585 277.775 cv
901.322 279.714 901.997 286.431 908.995 287.642 cv
916.004 288.857 924.921 298.761 927.423 301.821 cv
929.92 304.888 954.523 317.301 944.264 320.844 cv
934.015 324.384 919.75 323.511 907.956 314.9 cv
896.137 306.287 889.281 282.369 889.281 282.369 cv
cp
f
211.611 651.238 mo
117.4 604.333 104.399 565.082 100.124 552.178 cv
99.8687 551.391 li
97.8511 545.395 94.9487 540.711 91.8853 535.742 cv
89.2749 531.553 86.5938 527.215 84.6064 522.163 cv
84.0815 520.844 83.564 519.594 83.0762 518.424 cv
79.6675 510.201 76.439 502.449 84.1265 493.832 cv
85.9448 491.788 86.1475 490.412 86.5562 487.67 cv
87.0962 484.011 87.8462 479.004 92.9165 472.292 cv
97.0825 466.775 99.7861 464.919 101.999 463.607 cv
102.089 463.558 102.164 463.513 102.239 463.468 cv
102.366 463.179 102.584 462.583 102.906 461.409 cv
103.652 458.623 105.074 454.73 108.67 453.118 cv
110.718 452.196 112.971 452.252 115.038 453.275 cv
115.667 453.591 116.204 453.955 116.654 454.326 cv
125.939 457.146 143.031 457.528 161.091 457.933 cv
179.016 458.338 199.319 458.788 218.087 461.56 cv
231.07 463.479 245.249 467.766 263.189 473.188 cv
299.789 484.258 349.424 501.482 426.888 506.994 cv
543.974 515.313 642.089 481.584 679.566 458.991 cv
753.464 414.444 767.646 416.938 787.776 412.877 cv
803.496 409.716 804.82 408.512 834.914 370.209 cv
868.687 327.23 877.693 290.792 878.058 289.262 cv
879.34 283.884 881.905 280.273 885.662 278.511 cv
889.409 276.763 893.437 277.487 895.762 278.642 cv
897.307 279.418 li
898.139 280.929 li
900.411 285.054 903.164 286.678 906.362 288.576 cv
910.364 290.938 915.34 293.889 917.894 301.502 cv
919.139 305.218 924.892 309.928 933.284 314.102 cv
936.914 315.913 939.73 316.963 939.756 316.982 cv
946.844 319.618 li
942.201 325.588 li
941.553 326.424 877.349 403.472 861.464 438.924 cv
856.881 449.158 857.316 466.228 858.303 479.072 cv
860.62 509.368 863.496 547.07 804.321 603.872 cv
720.682 684.145 603.187 698.342 532.975 706.813 cv
454.664 716.274 331.469 705.868 232.821 661.284 cv
225.501 657.988 218.361 654.602 211.611 651.238 cv
cp
f
893.286 283.607 mo
893.286 283.607 885.989 279.973 883.446 290.548 cv
880.915 301.134 869.302 335.424 839.47 373.389 cv
809.639 411.351 807.093 414.643 788.867 418.314 cv
770.643 421.989 737.624 428.125 682.488 463.708 cv
642.189 489.714 542.211 518.631 426.989 510.44 cv
311.766 502.25 256.296 472.817 217.281 467.045 cv
178.259 461.278 132.321 465.729 113.721 459.205 cv
113.721 459.205 110.429 454.832 108.254 462.853 cv
106.086 470.882 105.344 465.047 97.3486 475.633 cv
89.3389 486.227 94.4502 490.584 88.2627 497.525 cv
82.0752 504.467 85.7388 509.924 89.7661 520.123 cv
93.7939 530.319 101.091 537.605 105.126 549.632 cv
109.154 561.658 121.341 604.836 235.098 656.244 cv
333.974 700.918 455.766 710.56 532.318 701.313 cv
608.863 692.064 720.276 676.844 800.478 599.867 cv
884.2 519.516 838.191 480.219 854.541 443.736 cv
870.88 407.252 937.821 322.179 937.821 322.179 cv
937.821 322.179 916.308 314.196 912.64 303.268 cv
908.973 292.333 899.5 294.898 893.286 283.607 cv
cp
.933333 .792157 .321569 rgb
f
110.121 465.137 mo
110.121 465.137 117.404 459.643 114.115 456.201 cv
110.826 452.75 103.911 456.561 100.638 461.319 cv
97.3638 466.082 96.7227 465.065 88.1538 467.634 cv
79.6001 470.199 80.5225 478.851 79.7124 487.33 cv
79.3525 491.158 80.1738 492.801 77.8188 496.633 cv
75.46 500.462 79.1948 503.473 83.0386 509.484 cv
83.0386 509.484 81.5688 503.281 86.1211 502.363 cv
90.6738 501.448 89.939 494.709 90.6665 491.424 cv
91.3862 488.139 95.9312 484.483 95.3838 481.022 cv
94.8325 477.557 93.73 475.183 99.1938 473.357 cv
104.665 471.527 107.027 470.424 110.121 465.137 cv
cp
.27451 .207843 .145098 rgb
f
106.184 533.781 mo
106.184 533.781 122.804 596.413 225.044 642.137 cv
319.45 684.369 419.834 702.246 548.332 688.352 cv
676.828 674.458 780.637 618.234 829.469 547.6 cv
829.469 547.6 852.374 511.194 844.105 470.196 cv
844.105 470.196 847.177 514.757 817.713 551.994 cv
788.241 589.236 684.513 671.33 503.478 681.051 cv
335.046 690.073 161.59 632.395 106.184 533.781 cv
cp
f
137.609 514.441 mo
137.609 514.441 232.619 584.342 358.919 605.121 cv
358.919 605.121 243.546 593.709 137.609 514.441 cv
cp
f
864.621 371.353 mo
864.621 371.353 838.438 412.959 807.846 433.243 cv
807.846 433.243 749.961 478.183 715.169 495.928 cv
715.169 495.928 785.286 456.609 810.04 435.253 cv
834.794 413.882 855.898 386.136 864.621 371.353 cv
cp
f
gsave
118.986 554.729 mo
118.986 554.729 156.269 615.189 256.589 647.83 cv
356.913 680.477 424.004 684.729 498.021 687.891 cv
572.035 691.041 676.975 654.051 737.072 621.133 cv
797.174 588.212 821.557 559.378 838.615 514.139 cv
838.615 514.139 778.964 597.365 635.013 632.248 cv
475.589 670.869 274.806 652.194 118.986 554.729 cv
cp
clp
116.054 557.668 mo
116.054 557.668 101.744 570.467 101.042 593.372 cv
101.042 593.372 105.587 571.518 116.054 557.668 cv
cp
f
119.616 561.781 mo
119.616 561.781 105.299 574.576 104.609 597.482 cv
104.609 597.482 109.146 575.631 119.616 561.781 cv
cp
f
108.344 600.699 mo
108.344 600.699 109.413 579.118 126.085 562.097 cv
126.085 562.097 115.326 575.904 108.344 600.699 cv
cp
f
112.619 604.33 mo
112.619 604.33 113.691 582.732 130.379 565.734 cv
130.379 565.734 119.609 579.523 112.619 604.33 cv
cp
f
116.703 609.167 mo
116.703 609.167 117.861 585.666 136.026 567.137 cv
136.026 567.137 124.296 582.156 116.703 609.167 cv
cp
f
120.505 613.637 mo
120.505 613.637 121.656 590.136 139.814 571.607 cv
139.814 571.607 128.11 586.625 120.505 613.637 cv
cp
f
125.076 617.338 mo
125.076 617.338 126.243 593.826 144.4 575.297 cv
144.4 575.297 132.678 590.323 125.076 617.338 cv
cp
f
129.156 620.615 mo
129.156 620.615 130.229 595.633 150.16 576.107 cv
150.16 576.107 137.324 591.966 129.156 620.615 cv
cp
f
133.551 623.643 mo
133.551 623.643 134.631 598.659 154.559 579.133 cv
154.559 579.133 141.726 595.003 133.551 623.643 cv
cp
f
138.539 625.239 mo
138.539 625.239 139.607 600.261 159.542 580.727 cv
159.542 580.727 146.714 596.582 138.539 625.239 cv
cp
f
142.938 628.266 mo
142.938 628.266 144.014 603.283 163.934 583.757 cv
163.934 583.757 151.101 599.627 142.938 628.266 cv
cp
f
148.337 629.313 mo
148.337 629.313 149.421 604.33 169.334 584.792 cv
169.334 584.792 156.509 600.666 148.337 629.313 cv
cp
f
152.729 632.338 mo
152.729 632.338 153.805 607.367 173.74 587.83 cv
173.74 587.83 160.896 603.699 152.729 632.338 cv
cp
f
158.084 635.252 mo
158.084 635.252 159.16 610.27 179.091 590.732 cv
179.091 590.732 166.251 606.594 158.084 635.252 cv
cp
f
162.479 638.278 mo
162.479 638.278 163.551 613.284 183.486 593.766 cv
183.486 593.766 170.654 609.628 162.479 638.278 cv
cp
f
168.408 639.932 mo
168.408 639.932 169.544 613.569 190.544 592.955 cv
190.544 592.955 177.025 609.699 168.408 639.932 cv
cp
f
173.031 643.115 mo
173.031 643.115 174.167 616.761 195.171 596.15 cv
195.171 596.15 181.656 612.895 173.031 643.115 cv
cp
f
178.803 644.117 mo
178.803 644.117 179.95 617.754 200.942 597.141 cv
200.942 597.141 187.42 613.893 178.803 644.117 cv
cp
f
183.434 647.323 mo
183.434 647.323 184.582 620.965 205.574 600.351 cv
205.574 600.351 192.051 617.087 183.434 647.323 cv
cp
f
189.494 648.167 mo
189.494 648.167 190.266 621.932 211.296 601.295 cv
211.296 601.295 197.812 618.031 189.494 648.167 cv
cp
f
194.234 651.306 mo
194.234 651.306 195.014 625.082 216.044 604.435 cv
216.044 604.435 202.551 621.189 194.234 651.306 cv
cp
f
200.564 650.833 mo
200.564 650.833 201.606 624.609 222.846 604.184 cv
222.846 604.184 209.178 620.795 200.564 650.833 cv
cp
f
205.266 654.039 mo
205.266 654.039 206.32 627.815 227.556 607.389 cv
227.556 607.389 213.891 623.99 205.266 654.039 cv
cp
f
211.874 653.601 mo
211.874 653.601 212.849 626.747 235.011 605.916 cv
235.011 605.916 220.765 622.877 211.874 653.601 cv
cp
f
216.828 656.896 mo
216.828 656.896 217.799 630.031 239.969 609.223 cv
239.969 609.223 225.719 626.174 216.828 656.896 cv
cp
f
223.874 655.93 mo
223.874 655.93 224.894 629.232 246.749 608.503 cv
246.749 608.503 232.69 625.375 223.874 655.93 cv
cp
f
228.741 659.191 mo
228.741 659.191 229.754 632.518 251.616 611.77 cv
251.616 611.77 237.562 628.637 228.741 659.191 cv
cp
f
235.941 657.966 mo
235.941 657.966 236.909 631.416 258.756 610.824 cv
258.756 610.824 244.709 627.58 235.941 657.966 cv
cp
f
240.813 661.229 mo
240.813 661.229 241.799 634.689 263.624 614.087 cv
263.624 614.087 249.599 630.854 240.813 661.229 cv
cp
f
247.341 661.284 mo
247.341 661.284 248.316 634.431 270.479 613.611 cv
270.479 613.611 256.229 630.561 247.341 661.284 cv
cp
f
252.288 664.592 mo
252.288 664.592 253.274 637.738 275.437 616.906 cv
275.437 616.906 261.194 633.857 252.288 664.592 cv
cp
f
259.341 663.613 mo
259.341 663.613 260.346 636.939 282.212 616.198 cv
282.212 616.198 268.15 633.069 259.341 663.613 cv
cp
f
264.212 666.887 mo
264.212 666.887 265.229 640.201 287.084 619.469 cv
287.084 619.469 273.036 636.332 264.212 666.887 cv
cp
f
271.394 665.66 mo
271.394 665.66 272.384 639.122 294.216 618.52 cv
294.216 618.52 280.184 635.274 271.394 665.66 cv
cp
f
276.276 668.912 mo
276.276 668.912 277.259 642.373 299.091 621.785 cv
299.091 621.785 285.059 638.537 276.276 668.912 cv
cp
f
282.839 666.031 mo
282.839 666.031 284.849 639.246 307.806 619.311 cv
307.806 619.311 292.911 635.68 282.839 666.031 cv
cp
f
287.646 669.531 mo
287.646 669.531 289.671 642.732 312.632 622.799 cv
312.632 622.799 297.738 639.167 287.646 669.531 cv
cp
f
294.741 668.844 mo
294.741 668.844 296.781 642.216 319.428 622.348 cv
319.428 622.348 304.731 638.66 294.741 668.844 cv
cp
f
299.459 672.31 mo
299.459 672.31 301.521 645.67 324.179 625.802 cv
324.179 625.802 309.471 642.104 299.459 672.31 cv
cp
f
306.711 671.354 mo
306.711 671.354 308.718 644.871 331.334 625.139 cv
331.334 625.139 316.664 641.338 306.711 671.354 cv
cp
f
311.451 674.795 mo
311.451 674.795 313.465 648.313 336.082 628.592 cv
336.082 628.592 321.408 644.781 311.451 674.795 cv
cp
f
318.066 674.941 mo
318.066 674.941 320.08 648.133 343.049 628.209 cv
343.049 628.209 328.139 644.578 318.066 674.941 cv
cp
f
322.889 678.43 mo
322.889 678.43 324.906 651.632 347.868 631.686 cv
347.868 631.686 332.969 648.065 322.889 678.43 cv
cp
f
330.269 674.773 mo
330.269 674.773 333.771 648.313 357.486 629.717 cv
357.486 629.717 341.909 645.186 330.269 674.773 cv
cp
f
335.481 678.891 mo
335.481 678.891 338.204 652.318 361.356 633.024 cv
361.356 633.024 346.244 648.955 335.481 678.891 cv
cp
f
341.939 680.252 mo
341.939 680.252 343.957 653.758 366.569 634.025 cv
366.569 634.025 351.895 650.226 341.939 680.252 cv
cp
f
347.144 683.92 mo
347.144 683.92 348.632 657.414 370.874 637.232 cv
370.874 637.232 356.504 653.725 347.144 683.92 cv
cp
f
353.744 681.973 mo
353.744 681.973 355.754 655.479 378.377 635.758 cv
378.377 635.758 363.696 651.947 353.744 681.973 cv
cp
f
358.941 685.652 mo
358.941 685.652 360.445 659.125 382.664 638.965 cv
382.664 638.965 368.301 655.457 358.941 685.652 cv
cp
f
366.171 683.02 mo
366.171 683.02 368.189 656.537 390.801 636.805 cv
390.801 636.805 376.127 653.016 366.171 683.02 cv
cp
f
371.376 686.698 mo
371.376 686.698 372.865 660.182 395.099 640.021 cv
395.099 640.021 380.736 656.492 371.376 686.698 cv
cp
f
377.991 684.729 mo
377.991 684.729 380.114 658.011 402.876 638.008 cv
402.876 638.008 388.086 654.422 377.991 684.729 cv
cp
f
383.181 688.431 mo
383.181 688.431 384.801 661.667 407.155 641.226 cv
407.155 641.226 392.699 657.92 383.181 688.431 cv
cp
f
390.809 685.889 mo
390.809 685.889 393.093 658.865 416.02 638.503 cv
416.02 638.503 401.106 655.164 390.809 685.889 cv
cp
f
395.995 689.578 mo
395.995 689.578 397.761 662.521 420.299 641.732 cv
420.299 641.732 405.704 658.686 395.995 689.578 cv
cp
f
403.285 686.833 mo
403.285 686.833 405.569 659.811 428.496 639.459 cv
428.496 639.459 413.586 656.121 403.285 686.833 cv
cp
f
408.471 690.534 mo
408.471 690.534 410.249 663.479 432.779 642.688 cv
432.779 642.688 418.18 659.643 408.471 690.534 cv
cp
f
415.131 688.476 mo
415.131 688.476 417.419 661.453 440.354 641.102 cv
440.354 641.102 425.437 657.764 415.131 688.476 cv
cp
f
420.321 692.188 mo
420.321 692.188 422.091 665.121 444.621 644.33 cv
444.621 644.33 430.034 661.284 420.321 692.188 cv
cp
f
429.002 688.307 mo
429.002 688.307 431.294 661.273 454.221 640.922 cv
454.221 640.922 439.304 657.594 429.002 688.307 cv
cp
f
434.2 691.997 mo
434.2 691.997 435.959 664.951 458.5 644.15 cv
458.5 644.15 443.897 661.115 434.2 691.997 cv
cp
f
440.882 689.882 mo
440.882 689.882 443.691 661.712 467.174 640.101 cv
467.174 640.101 451.829 657.729 440.882 689.882 cv
cp
f
446.046 693.639 mo
446.046 693.639 448.326 665.436 471.426 643.386 cv
471.426 643.386 456.404 661.307 446.046 693.639 cv
cp
f
454.784 688.881 mo
454.784 688.881 456.79 662.409 479.406 642.666 cv
479.406 642.666 464.732 658.877 454.784 688.881 cv
cp
f
459.985 692.57 mo
459.985 692.57 461.47 666.043 483.711 645.883 cv
483.711 645.883 469.341 662.354 459.985 692.57 cv
cp
f
466.596 690.602 mo
466.596 690.602 468.726 663.872 491.481 643.881 cv
491.481 643.881 476.699 660.283 466.596 690.602 cv
cp
f
471.786 694.292 mo
471.786 694.292 473.406 667.528 495.76 647.087 cv
495.76 647.087 481.304 663.781 471.786 694.292 cv
cp
f
479.421 691.761 mo
479.421 691.761 481.694 664.727 504.625 644.375 cv
504.625 644.375 489.711 661.037 479.421 691.761 cv
cp
f
484.6 695.451 mo
484.6 695.451 486.374 668.395 508.9 647.594 cv
508.9 647.594 494.309 664.559 484.6 695.451 cv
cp
f
491.894 692.705 mo
491.894 692.705 494.181 665.672 517.102 645.332 cv
517.102 645.332 502.195 661.993 491.894 692.705 cv
cp
f
497.084 696.396 mo
497.084 696.396 498.846 669.34 521.384 648.549 cv
521.384 648.549 506.781 665.503 497.084 696.396 cv
cp
f
503.736 694.337 mo
503.736 694.337 506.023 667.314 528.959 646.975 cv
528.959 646.975 514.041 663.636 503.736 694.337 cv
cp
f
510.07 696.159 mo
510.07 696.159 513.839 665.256 538.273 642.936 cv
538.273 642.936 519.036 664.424 510.07 696.159 cv
cp
f
517.607 694.168 mo
517.607 694.168 522.314 664.007 544.428 642.913 cv
544.428 642.913 527.908 663.467 517.607 694.168 cv
cp
f
522.786 697.869 mo
522.786 697.869 528.891 664.322 551.264 642.227 cv
551.264 642.227 532.754 665.391 522.786 697.869 cv
cp
f
529.491 695.754 mo
529.491 695.754 533.942 666.729 556.734 642.216 cv
556.734 642.216 540.988 661.25 529.491 695.754 cv
cp
f
537.655 693.482 mo
537.655 693.482 542.818 661.926 565.754 637.828 cv
565.754 637.828 548.002 661.16 537.655 693.482 cv
cp
f
545.481 689.701 mo
545.481 689.701 549.922 660.677 572.714 636.174 cv
572.714 636.174 556.982 655.209 545.481 689.701 cv
cp
f
553.641 687.44 mo
553.641 687.44 558.805 655.885 581.732 631.787 cv
581.732 631.787 563.991 655.107 553.641 687.44 cv
cp
f
561.193 683.525 mo
561.193 683.525 565.641 654.5 588.434 629.998 cv
588.434 629.998 572.691 649.033 561.193 683.525 cv
cp
f
569.346 681.264 mo
569.346 681.264 574.514 649.708 597.449 625.6 cv
597.449 625.6 579.696 648.932 569.346 681.264 cv
cp
f
575.541 680.083 mo
575.541 680.083 579.988 651.059 602.789 626.556 cv
602.789 626.556 587.043 645.602 575.541 680.083 cv
cp
f
583.701 677.822 mo
583.701 677.822 588.865 646.266 611.793 622.156 cv
611.793 622.156 594.051 645.489 583.701 677.822 cv
cp
f
589.619 677.181 mo
589.619 677.181 594.066 648.167 616.855 623.653 cv
616.855 623.653 601.116 642.699 589.619 677.181 cv
cp
f
597.775 674.931 mo
597.775 674.931 602.95 643.363 625.877 619.266 cv
625.877 619.266 608.125 642.587 597.775 674.931 cv
cp
f
603.283 674.424 mo
603.283 674.424 607.731 645.41 630.531 620.896 cv
630.531 620.896 614.785 639.943 603.283 674.424 cv
cp
f
611.443 672.174 mo
611.443 672.174 616.619 640.607 639.547 616.514 cv
639.547 616.514 621.801 639.83 611.443 672.174 cv
cp
f
618.453 670.712 mo
618.453 670.712 622.908 641.688 645.689 617.181 cv
645.689 617.181 629.953 636.219 618.453 670.712 cv
cp
f
626.62 668.451 mo
626.62 668.451 631.783 636.895 654.711 612.793 cv
654.711 612.793 636.967 636.118 626.62 668.451 cv
cp
f
633.629 666.313 mo
633.629 666.313 638.076 637.299 660.865 612.781 cv
660.865 612.781 645.127 631.82 633.629 666.313 cv
cp
f
641.785 664.052 mo
641.785 664.052 646.957 632.496 669.884 608.391 cv
669.884 608.391 652.135 631.719 641.785 664.052 cv
cp
f
648.658 661.498 mo
648.658 661.498 653.103 632.484 675.895 607.967 cv
675.895 607.967 660.156 627.018 648.658 661.498 cv
cp
f
656.814 659.248 mo
656.814 659.248 661.979 627.681 684.906 603.58 cv
684.906 603.58 667.165 626.904 656.814 659.248 cv
cp
f
663.959 656.83 mo
663.959 656.83 668.414 627.805 691.199 603.295 cv
691.199 603.295 675.464 622.337 663.959 656.83 cv
cp
f
672.115 654.568 mo
672.115 654.568 677.286 623 700.218 598.906 cv
700.218 598.906 682.477 622.225 672.115 654.568 cv
cp
f
679.9 651.789 mo
679.9 651.789 684.344 622.764 707.145 598.254 cv
707.145 598.254 691.408 617.301 679.9 651.789 cv
cp
f
688.057 649.528 mo
688.057 649.528 693.231 617.965 716.158 593.867 cv
716.158 593.867 698.414 617.188 688.057 649.528 cv
cp
f
695.294 646.93 mo
695.294 646.93 699.745 617.908 722.537 593.395 cv
722.537 593.395 706.799 612.44 695.294 646.93 cv
cp
f
703.453 644.668 mo
703.453 644.668 708.621 613.107 731.557 589.007 cv
731.557 589.007 713.808 612.332 703.453 644.668 cv
cp
f
711.963 639.977 mo
711.963 639.977 716.418 610.948 739.21 586.441 cv
739.21 586.441 723.471 605.48 711.963 639.977 cv
cp
f
720.127 637.716 mo
720.127 637.716 725.294 606.152 748.229 582.055 cv
748.229 582.055 730.48 605.368 720.127 637.716 cv
cp
f
730.273 629.729 mo
730.273 629.729 734.721 600.711 757.506 576.197 cv
757.506 576.197 741.771 595.232 730.273 629.729 cv
cp
f
738.426 627.467 mo
738.426 627.467 743.598 595.914 766.525 571.81 cv
766.525 571.81 748.783 595.139 738.426 627.467 cv
cp
f
747.486 621.223 mo
747.486 621.223 751.926 592.205 774.727 567.699 cv
774.727 567.699 758.977 586.734 747.486 621.223 cv
cp
f
755.639 618.962 mo
755.639 618.962 760.811 587.409 783.741 563.301 cv
783.741 563.301 765.988 586.625 755.639 618.962 cv
cp
f
765.238 612.084 mo
765.238 612.084 769.687 583.06 792.471 558.545 cv
792.471 558.545 776.74 577.588 765.238 612.084 cv
cp
f
773.398 609.819 mo
773.398 609.819 778.563 578.256 801.49 554.154 cv
801.49 554.154 783.749 577.486 773.398 609.819 cv
cp
f
784.457 601.382 mo
784.457 601.382 788.901 572.357 811.693 547.844 cv
811.693 547.844 795.943 566.882 784.457 601.382 cv
cp
f
792.606 599.113 mo
792.606 599.113 797.777 567.557 820.709 543.455 cv
820.709 543.455 802.964 566.781 792.606 599.113 cv
cp
f
804.389 588.302 mo
804.389 588.302 808.836 559.277 831.637 534.771 cv
831.637 534.771 815.891 553.816 804.389 588.302 cv
cp
f
812.549 586.049 mo
812.549 586.049 817.717 554.484 840.64 530.383 cv
840.64 530.383 822.898 553.705 812.549 586.049 cv
cp
f
grestore
gsave
212.98 482.368 mo
212.98 482.368 213.104 473.267 274.124 490.142 cv
335.155 507.031 442.417 528.561 512.162 521.5 cv
581.901 514.445 640.502 495.197 678.366 473.48 cv
716.215 451.757 762.884 425.424 784.057 423.531 cv
805.236 421.629 816.396 431.991 800.117 449.274 cv
783.832 466.551 727.521 506.601 642.1 538.239 cv
526.641 581.02 407.691 566.191 318.749 537.617 cv
229.81 509.045 201.539 492.054 212.98 482.368 cv
cp
clp
207.351 467.9 mo
207.351 467.9 211.191 491.672 194.062 515.185 cv
194.062 515.185 217.536 490.558 207.351 467.9 cv
cp
1 1 1 rgb
f
216.344 469.802 mo
216.344 469.802 225.231 497.244 200.155 523.386 cv
200.155 523.386 217.694 500.946 216.344 469.802 cv
cp
f
225.175 472.085 mo
225.175 472.085 232.859 496.277 213.363 520.056 cv
213.363 520.056 226.431 500.503 225.175 472.085 cv
cp
f
232.461 471.849 mo
232.461 471.849 238.957 498.636 216.869 527.053 cv
216.869 527.053 243.996 502.307 232.461 471.849 cv
cp
f
240.921 473.957 mo
240.921 473.957 247.417 500.743 225.321 529.16 cv
225.321 529.16 252.445 504.41 240.921 473.957 cv
cp
f
249.002 475.888 mo
249.002 475.888 255.501 502.678 233.41 531.092 cv
233.41 531.092 260.534 506.346 249.002 475.888 cv
cp
f
257.286 478.363 mo
257.286 478.363 263.785 505.143 241.69 533.57 cv
241.69 533.57 268.825 508.82 257.286 478.363 cv
cp
f
265.199 480.673 mo
265.199 480.673 271.701 507.455 249.599 535.877 cv
249.599 535.877 276.734 511.135 265.199 480.673 cv
cp
f
272.718 481.888 mo
272.718 481.888 279.22 508.674 257.129 537.092 cv
257.129 537.092 284.249 512.354 272.718 481.888 cv
cp
f
279.524 483.685 mo
279.524 483.685 286.019 510.475 263.931 538.889 cv
263.931 538.889 291.051 514.143 279.524 483.685 cv
cp
f
286.87 485.274 mo
286.87 485.274 293.361 512.068 271.274 540.486 cv
271.274 540.486 298.401 515.739 286.87 485.274 cv
cp
f
294.209 486.872 mo
294.209 486.872 300.708 513.658 278.616 542.076 cv
278.616 542.076 305.744 517.333 294.209 486.872 cv
cp
f
301.184 488.297 mo
301.184 488.297 307.694 515.087 285.599 543.5 cv
285.599 543.5 312.719 518.762 301.184 488.297 cv
cp
f
308.538 489.883 mo
308.538 489.883 315.036 516.67 292.941 545.087 cv
292.941 545.087 320.069 520.348 308.538 489.883 cv
cp
f
315.333 491.683 mo
315.333 491.683 321.835 518.469 299.751 546.887 cv
299.751 546.887 326.875 522.148 315.333 491.683 cv
cp
f
322.687 493.273 mo
322.687 493.273 329.189 520.066 307.098 548.473 cv
307.098 548.473 334.214 523.734 322.687 493.273 cv
cp
f
329.665 494.702 mo
329.665 494.702 336.164 521.488 314.073 549.902 cv
314.073 549.902 341.196 525.156 329.665 494.702 cv
cp
f
337.004 496.288 mo
337.004 496.288 343.506 523.074 321.419 551.492 cv
321.419 551.492 348.542 526.753 337.004 496.288 cv
cp
f
343.953 496.802 mo
343.953 496.802 350.455 523.588 328.36 552.006 cv
328.36 552.006 355.476 527.26 343.953 496.802 cv
cp
f
351.299 498.392 mo
351.299 498.392 357.794 525.186 335.707 553.604 cv
335.707 553.604 362.83 528.857 351.299 498.392 cv
cp
f
358.266 499.821 mo
358.266 499.821 364.776 526.614 342.681 555.031 cv
342.681 555.031 369.809 530.293 358.266 499.821 cv
cp
f
365.62 501.406 mo
365.62 501.406 372.119 528.201 350.027 556.618 cv
350.027 556.618 377.151 531.868 365.62 501.406 cv
cp
f
373.671 502.431 mo
373.671 502.431 380.174 529.217 358.079 557.631 cv
358.079 557.631 385.207 532.893 373.671 502.431 cv
cp
f
381.014 504.024 mo
381.014 504.024 387.516 530.814 365.429 559.229 cv
365.429 559.229 392.553 534.489 381.014 504.024 cv
cp
f
387.989 505.453 mo
387.989 505.453 394.491 532.239 372.404 560.656 cv
372.404 560.656 399.524 535.91 387.989 505.453 cv
cp
f
395.339 507.039 mo
395.339 507.039 401.841 533.826 379.75 562.247 cv
379.75 562.247 406.874 537.504 395.339 507.039 cv
cp
f
402.295 507.354 mo
402.295 507.354 409.72 533.896 388.641 563.068 cv
388.641 563.068 414.884 537.396 402.295 507.354 cv
cp
f
409.694 508.682 mo
409.694 508.682 417.123 535.232 396.029 564.406 cv
396.029 564.406 422.275 538.73 409.694 508.682 cv
cp
f
416.714 509.863 mo
416.714 509.863 424.146 536.413 403.056 565.584 cv
403.056 565.584 429.295 539.912 416.714 509.863 cv
cp
f
424.109 511.201 mo
424.109 511.201 431.542 537.752 410.451 566.924 cv
410.451 566.924 436.698 541.243 424.109 511.201 cv
cp
f
431.159 511.082 mo
431.159 511.082 438.966 537.516 418.289 566.982 cv
418.289 566.982 444.171 540.939 431.159 511.082 cv
cp
f
438.576 512.315 mo
438.576 512.315 446.376 538.746 425.695 568.217 cv
425.695 568.217 451.582 542.177 438.576 512.315 cv
cp
f
445.619 513.399 mo
445.619 513.399 453.415 539.833 432.734 569.289 cv
432.734 569.289 458.616 543.257 445.619 513.399 cv
cp
f
453.029 514.625 mo
453.029 514.625 460.829 541.07 440.151 570.523 cv
440.151 570.523 466.038 544.482 453.029 514.625 cv
cp
f
459.726 512.33 mo
459.726 512.33 468.873 538.337 449.748 568.824 cv
449.748 568.824 474.25 541.479 459.726 512.33 cv
cp
f
467.189 513.182 mo
467.189 513.182 476.343 539.181 457.199 569.668 cv
457.199 569.668 481.72 542.334 467.189 513.182 cv
cp
f
474.272 513.906 mo
474.272 513.906 483.43 539.904 464.286 570.393 cv
464.286 570.393 488.808 543.055 474.272 513.906 cv
cp
f
481.743 514.75 mo
481.743 514.75 490.896 540.748 471.764 571.243 cv
471.764 571.243 496.266 543.895 481.743 514.75 cv
cp
f
488.354 513.44 mo
488.354 513.44 498.91 537.643 482.62 567.924 cv
482.62 567.924 504.291 540.31 488.354 513.44 cv
cp
f
495.576 513.781 mo
495.576 513.781 506.145 537.98 489.843 568.262 cv
489.843 568.262 511.521 540.646 495.576 513.781 cv
cp
f
502.432 514.014 mo
502.432 514.014 512.999 538.213 496.705 568.502 cv
496.705 568.502 518.373 540.883 502.432 514.014 cv
cp
f
509.661 514.352 mo
509.661 514.352 520.236 538.563 503.928 568.84 cv
503.928 568.84 525.606 541.217 509.661 514.352 cv
cp
f
515.602 512.102 mo
515.602 512.102 527.196 535.828 512.234 566.788 cv
512.234 566.788 532.693 538.247 515.602 512.102 cv
cp
f
522.839 512.125 mo
522.839 512.125 534.441 535.84 519.475 566.811 cv
519.475 566.811 539.928 538.27 522.839 512.125 cv
cp
f
529.687 512.057 mo
529.687 512.057 541.304 535.787 526.326 566.747 cv
526.326 566.747 546.786 538.213 529.687 512.057 cv
cp
f
536.936 512.083 mo
536.936 512.083 548.533 535.806 533.571 566.766 cv
533.571 566.766 554.031 538.236 536.936 512.083 cv
cp
f
542.361 508.73 mo
542.361 508.73 555.193 531.813 541.904 563.525 cv
541.904 563.525 560.812 533.941 542.361 508.73 cv
cp
f
549.584 508.371 mo
549.584 508.371 562.439 531.444 549.13 563.158 cv
549.13 563.158 568.041 533.582 549.584 508.371 cv
cp
f
556.424 507.951 mo
556.424 507.951 569.279 531.024 555.971 562.73 cv
555.971 562.73 574.893 533.162 556.424 507.951 cv
cp
f
563.665 507.591 mo
563.665 507.591 576.513 530.664 563.203 562.367 cv
563.203 562.367 582.127 532.791 563.665 507.591 cv
cp
f
569.324 504.973 mo
569.324 504.973 583.465 527.268 572.023 559.693 cv
572.023 559.693 589.199 529.07 569.324 504.973 cv
cp
f
576.513 504.193 mo
576.513 504.193 590.665 526.49 579.224 558.924 cv
579.224 558.924 596.391 528.291 576.513 504.193 cv
cp
f
583.318 503.372 mo
583.318 503.372 597.482 525.67 586.02 558.104 cv
586.02 558.104 603.209 527.48 583.318 503.372 cv
cp
f
590.512 502.6 mo
590.512 502.6 604.683 524.896 593.227 557.309 cv
593.227 557.309 610.397 526.697 590.512 502.6 cv
cp
f
594.906 499.584 mo
594.906 499.584 610.611 520.82 601.521 553.975 cv
601.521 553.975 616.45 522.208 594.906 499.584 cv
cp
f
602.009 498.298 mo
602.009 498.298 617.736 519.516 608.639 552.691 cv
608.639 552.691 623.571 520.91 602.009 498.298 cv
cp
f
608.744 496.993 mo
608.744 496.993 624.471 518.211 615.37 551.387 cv
615.37 551.387 630.311 519.609 608.744 496.993 cv
cp
f
615.877 495.703 mo
615.877 495.703 631.604 516.928 622.484 550.074 cv
622.484 550.074 637.432 518.313 615.877 495.703 cv
cp
f
622.116 492.201 mo
622.116 492.201 638.714 512.732 631.053 546.257 cv
631.053 546.257 644.602 513.872 622.116 492.201 cv
cp
f
629.162 490.614 mo
629.162 490.614 645.779 511.127 638.106 544.663 cv
638.106 544.663 651.674 512.274 629.162 490.614 cv
cp
f
635.834 489.017 mo
635.834 489.017 652.461 509.541 644.777 543.073 cv
644.777 543.073 658.346 510.688 635.834 489.017 cv
cp
f
642.891 487.423 mo
642.891 487.423 659.516 507.951 651.832 541.465 cv
651.832 541.465 665.406 509.087 642.891 487.423 cv
cp
f
648.613 484.044 mo
648.613 484.044 665.789 504.092 659.088 537.83 cv
659.088 537.83 671.71 505.063 648.613 484.044 cv
cp
f
655.619 482.248 mo
655.619 482.248 672.801 502.295 666.085 536.034 cv
666.085 536.034 678.73 503.271 655.619 482.248 cv
cp
f
662.238 480.478 mo
662.238 480.478 679.439 500.514 672.723 534.253 cv
672.723 534.253 685.356 501.497 662.238 480.478 cv
cp
f
669.254 478.678 mo
669.254 478.678 686.447 498.737 679.724 532.445 cv
679.724 532.445 692.365 499.693 669.254 478.678 cv
cp
f
673.334 473.942 mo
673.334 473.942 692.141 492.493 688.281 526.652 cv
688.281 526.652 698.125 492.966 673.334 473.942 cv
cp
f
680.17 471.572 mo
680.17 471.572 698.98 490.101 695.121 524.278 cv
695.121 524.278 704.969 490.581 680.17 471.572 cv
cp
f
686.609 469.243 mo
686.609 469.243 705.434 487.779 701.564 521.945 cv
701.564 521.945 711.422 488.255 686.609 469.243 cv
cp
f
693.457 466.858 mo
693.457 466.858 712.273 485.406 708.396 519.572 cv
708.396 519.572 718.259 485.878 693.457 466.858 cv
cp
f
698.564 463.629 mo
698.564 463.629 718.559 480.887 716.991 515.232 cv
716.991 515.232 724.559 480.955 698.564 463.629 cv
cp
f
705.231 460.813 mo
705.231 460.813 725.227 478.048 723.651 512.409 cv
723.651 512.409 731.234 478.127 705.231 460.813 cv
cp
f
711.494 458.057 mo
711.494 458.057 731.516 475.303 729.929 509.653 cv
729.929 509.653 737.522 475.382 711.494 458.057 cv
cp
f
718.172 455.226 mo
718.172 455.226 738.176 472.479 736.589 506.826 cv
736.589 506.826 744.183 472.551 718.172 455.226 cv
cp
f
723.719 451.149 mo
723.719 451.149 744.745 467.102 745.353 501.486 cv
745.353 501.486 750.741 466.798 723.719 451.149 cv
cp
f
730.188 447.92 mo
730.188 447.92 751.236 463.854 751.821 498.246 cv
751.821 498.246 757.232 463.551 730.188 447.92 cv
cp
f
736.281 444.771 mo
736.281 444.771 757.322 460.712 757.911 495.103 cv
757.911 495.103 763.33 460.419 736.281 444.771 cv
cp
f
742.746 441.52 mo
742.746 441.52 763.814 457.483 764.388 491.863 cv
764.388 491.863 769.799 457.172 742.746 441.52 cv
cp
f
748.416 437.492 mo
748.416 437.492 769.986 452.736 771.745 487.082 cv
771.745 487.082 775.964 452.222 748.416 437.492 cv
cp
f
754.776 434.042 mo
754.776 434.042 776.354 449.271 778.09 483.628 cv
778.09 483.628 782.339 448.768 754.776 434.042 cv
cp
f
760.754 430.697 mo
760.754 430.697 782.332 445.929 784.075 480.268 cv
784.075 480.268 788.328 445.423 760.754 430.697 cv
cp
f
767.121 427.232 mo
767.121 427.232 788.699 442.476 790.432 476.811 cv
790.432 476.811 794.672 441.962 767.121 427.232 cv
cp
f
775.391 425.286 mo
775.391 425.286 796.957 440.529 798.711 474.868 cv
798.711 474.868 802.93 440.016 775.391 425.286 cv
cp
f
781.746 421.835 mo
781.746 421.835 803.316 437.053 805.057 471.422 cv
805.057 471.422 809.309 436.558 781.746 421.835 cv
cp
f
787.721 418.491 mo
787.721 418.491 809.297 433.723 811.049 468.062 cv
811.049 468.062 815.294 433.209 787.721 418.491 cv
cp
f
794.088 415.018 mo
794.088 415.018 815.669 430.27 817.397 464.604 cv
817.397 464.604 821.639 429.755 794.088 415.018 cv
cp
f
grestore
816.906 398.601 mo
816.906 398.601 809.279 412.101 809.279 417.568 cv
809.294 423.04 811.12 424.858 803.088 420.853 cv
795.066 416.863 781.214 419.076 781.214 419.076 cv
781.214 419.076 803.808 413.935 816.906 398.601 cv
cp
f
150.79 606.076 mo
150.79 606.076 224.819 670.948 367.049 694.393 cv
509.283 717.861 647.602 696.114 745.397 639.617 cv
745.397 639.617 605.178 705.396 450.726 696.451 cv
248.901 684.752 150.79 606.076 150.79 606.076 cv
cp
1 .92549 .705882 rgb
f
275.89 527.66 mo
275.89 527.66 532.057 626.455 727.02 500.469 cv
727.02 500.469 556.334 635.938 275.89 527.66 cv
cp
.27451 .207843 .145098 rgb
f
88.1763 516.951 mo
88.1763 516.951 82.2813 508.899 86.7886 506.016 cv
91.2964 503.139 93.6177 499.176 93.6064 495.069 cv
93.5986 490.967 93.5952 488.916 95.9165 486.317 cv
98.2339 483.718 96.1787 480.298 97.5439 477.564 cv
98.9087 474.831 102.187 475.101 107.241 471.804 cv
112.292 468.512 117.479 459.486 117.479 459.486 cv
117.479 459.486 118.304 466.723 111.752 472.344 cv
105.201 477.958 101.774 475.228 101.924 481.787 cv
102.074 488.357 101.526 488.762 98.5264 491.368 cv
95.519 493.978 98.5415 501.621 91.3037 505.194 cv
84.0586 508.761 88.1763 516.951 88.1763 516.951 cv
cp
1 .92549 .705882 rgb
f
83.8638 496.884 mo
83.8638 496.884 86.7437 488.964 87.104 483.205 cv
87.4639 477.444 86.0239 473.125 91.7837 471.685 cv
97.5439 470.244 106.544 460.884 106.544 460.884 cv
106.544 460.884 104.744 466.284 97.5439 470.244 cv
90.3438 474.205 89.624 475.645 88.9038 481.404 cv
88.1836 487.165 87.4639 491.844 83.8638 496.884 cv
cp
.933333 .792157 .321569 rgb
f
882.378 303.688 mo
882.378 303.688 882.4 288.129 892.424 294.205 cv
916.184 308.604 907.813 323.511 931.079 321.099 cv
931.079 321.099 927.704 327.324 911.864 319.404 cv
896.023 311.484 894.584 306.444 890.264 309.324 cv
885.943 312.205 880.903 338.844 859.304 361.165 cv
859.304 361.165 875.932 331.892 882.378 303.688 cv
cp
1 .92549 .705882 rgb
f
882.378 303.688 mo
882.378 303.688 867.146 354.399 820.559 404.057 cv
820.559 404.057 867.531 364.607 882.378 303.688 cv
cp
.27451 .207843 .145098 rgb
f
884.916 293.098 mo
884.916 293.098 887.631 283.074 890.916 286.532 cv
894.201 289.986 895.855 293.087 900.771 295.082 cv
905.706 297.073 909.164 300.174 911.009 305.634 cv
912.831 311.098 922.135 318.92 931.079 321.099 cv
931.079 321.099 921.235 321.654 913.746 314.743 cv
906.269 307.835 904.791 300.718 899.14 297.444 cv
893.481 294.178 888.362 287.08 884.916 293.098 cv
cp
f
843.464 439.645 mo
843.464 439.645 859.304 491.484 848.504 529.645 cv
848.504 529.645 857.864 502.284 856.424 475.645 cv
854.983 449.004 859.304 442.524 856.424 448.284 cv
850.004 461.128 850.664 443.964 843.464 439.645 cv
cp
f
gsave
143.264 524.604 mo
138.336 520.573 134.624 512.364 145.424 515.965 cv
156.224 519.564 177.824 531.444 210.584 546.924 cv
243.344 562.404 296.59 583.115 323.969 591.482 cv
351.344 599.844 356.744 604.524 347.384 605.965 cv
338.024 607.404 240.104 603.805 143.264 524.604 cv
cp
clp
146.819 509.875 mo
146.819 509.875 140.373 516.887 136.596 531.666 cv
136.596 531.666 135.516 519.148 146.819 509.875 cv
cp
f
149.699 511.799 mo
149.699 511.799 143.252 518.811 139.476 533.59 cv
139.476 533.59 138.396 521.072 149.699 511.799 cv
cp
f
153.299 513.958 mo
153.299 513.958 146.853 520.971 143.076 535.75 cv
143.076 535.75 141.996 523.232 153.299 513.958 cv
cp
f
159.228 513.328 mo
159.228 513.328 150.419 521.814 145.312 539.732 cv
145.312 539.732 145.304 524.848 159.228 513.328 cv
cp
f
163.071 515.008 mo
163.071 515.008 154.259 523.498 149.151 541.412 cv
149.151 541.412 149.147 526.528 163.071 515.008 cv
cp
f
166.671 517.168 mo
166.671 517.168 157.859 525.658 152.751 543.572 cv
152.751 543.572 152.748 528.688 166.671 517.168 cv
cp
f
166.979 522.354 mo
166.979 522.354 160.533 529.371 156.756 544.146 cv
156.756 544.146 155.676 531.632 166.979 522.354 cv
cp
f
170.339 524.038 mo
170.339 524.038 164.47 530.417 160.656 543.838 cv
160.469 544.482 160.289 545.146 160.116 545.83 cv
160.116 545.83 159.036 533.313 170.339 524.038 cv
cp
f
177.111 522.928 mo
177.111 522.928 168.299 531.418 163.191 549.332 cv
163.191 549.332 163.188 534.448 177.111 522.928 cv
cp
f
180.711 525.088 mo
180.711 525.088 171.899 533.578 166.792 551.492 cv
166.792 551.492 166.788 536.607 180.711 525.088 cv
cp
f
181.019 530.274 mo
181.019 530.274 174.573 537.291 170.796 552.065 cv
170.796 552.065 169.716 539.552 181.019 530.274 cv
cp
f
184.379 531.958 mo
184.379 531.958 177.929 538.971 174.156 553.75 cv
174.156 553.75 173.076 541.232 184.379 531.958 cv
cp
f
191.151 530.128 mo
191.151 530.128 182.339 538.618 177.231 556.531 cv
177.231 556.531 177.228 541.648 191.151 530.128 cv
cp
f
194.751 532.288 mo
194.751 532.288 185.939 540.778 180.832 558.691 cv
180.832 558.691 180.828 543.809 194.751 532.288 cv
cp
f
195.059 537.475 mo
195.059 537.475 188.613 544.49 184.836 559.266 cv
184.836 559.266 183.756 546.752 195.059 537.475 cv
cp
f
198.419 539.158 mo
198.419 539.158 191.969 546.17 188.196 560.949 cv
188.196 560.949 187.116 548.432 198.419 539.158 cv
cp
f
204.832 538.049 mo
204.832 538.049 196.019 546.538 190.911 564.451 cv
190.911 564.451 190.908 549.568 204.832 538.049 cv
cp
f
208.431 540.208 mo
208.431 540.208 199.619 548.698 194.511 566.611 cv
194.511 566.611 194.507 551.729 208.431 540.208 cv
cp
f
208.739 545.395 mo
208.739 545.395 202.292 552.41 198.516 567.186 cv
198.516 567.186 197.437 554.672 208.739 545.395 cv
cp
f
212.099 547.078 mo
212.099 547.078 205.649 554.091 201.876 568.869 cv
201.876 568.869 200.796 556.352 212.099 547.078 cv
cp
f
218.871 544.528 mo
218.871 544.528 210.059 553.018 204.951 570.932 cv
204.951 570.932 204.948 556.049 218.871 544.528 cv
cp
f
222.471 546.688 mo
222.471 546.688 213.659 555.178 208.551 573.092 cv
208.551 573.092 208.547 558.208 222.471 546.688 cv
cp
f
222.779 551.875 mo
222.779 551.875 216.333 558.891 212.556 573.666 cv
212.556 573.666 211.476 561.152 222.779 551.875 cv
cp
f
226.139 553.559 mo
226.139 553.559 219.689 560.57 215.917 575.35 cv
215.917 575.35 214.836 562.832 226.139 553.559 cv
cp
f
232.551 551.368 mo
232.551 551.368 223.739 559.857 218.631 577.771 cv
218.631 577.771 218.627 562.889 232.551 551.368 cv
cp
f
236.151 553.528 mo
236.151 553.528 227.339 562.018 222.231 579.932 cv
222.231 579.932 222.228 565.049 236.151 553.528 cv
cp
f
236.459 558.715 mo
236.459 558.715 230.013 565.73 226.236 580.506 cv
226.236 580.506 225.156 567.992 236.459 558.715 cv
cp
f
239.819 560.398 mo
239.819 560.398 233.369 567.41 229.596 582.189 cv
229.596 582.189 228.516 569.672 239.819 560.398 cv
cp
f
246.951 557.848 mo
246.951 557.848 238.139 566.338 233.031 584.252 cv
233.031 584.252 233.027 569.368 246.951 557.848 cv
cp
f
250.551 560.008 mo
250.551 560.008 241.739 568.498 236.631 586.412 cv
236.631 586.412 236.627 571.528 250.551 560.008 cv
cp
f
250.859 565.194 mo
250.859 565.194 244.413 572.211 240.636 586.986 cv
240.636 586.986 239.556 574.472 250.859 565.194 cv
cp
f
254.219 566.878 mo
254.219 566.878 247.769 573.891 243.996 588.67 cv
243.996 588.67 242.917 576.152 254.219 566.878 cv
cp
f
260.631 564.688 mo
260.631 564.688 251.819 573.178 246.711 591.092 cv
246.711 591.092 246.708 576.208 260.631 564.688 cv
cp
f
264.231 566.848 mo
264.231 566.848 255.419 575.338 250.312 593.252 cv
250.312 593.252 250.308 578.368 264.231 566.848 cv
cp
f
264.539 572.034 mo
264.539 572.034 258.093 579.051 254.316 593.826 cv
254.316 593.826 253.236 581.313 264.539 572.034 cv
cp
f
267.899 573.719 mo
267.899 573.719 261.449 580.73 257.676 595.51 cv
257.676 595.51 256.596 582.992 267.899 573.719 cv
cp
f
276.501 568.469 mo
276.501 568.469 267.292 576.512 261.299 594.152 cv
261.299 594.152 262.03 579.287 276.501 568.469 cv
cp
f
279.989 570.805 mo
279.989 570.805 270.779 578.848 264.794 596.488 cv
264.794 596.488 265.518 581.619 279.989 570.805 cv
cp
f
280.049 576.002 mo
280.049 576.002 273.261 582.688 268.761 597.257 cv
268.761 597.257 268.304 584.701 280.049 576.002 cv
cp
f
283.315 577.847 mo
283.315 577.847 276.531 584.533 272.031 599.102 cv
272.031 599.102 271.57 586.547 283.315 577.847 cv
cp
f
290.901 573.868 mo
290.901 573.868 281.691 581.912 275.699 599.552 cv
275.699 599.552 276.43 584.688 290.901 573.868 cv
cp
f
294.389 576.205 mo
294.389 576.205 285.179 584.248 279.194 601.889 cv
279.194 601.889 279.917 587.02 294.389 576.205 cv
cp
f
294.449 581.402 mo
294.449 581.402 287.661 588.088 283.161 602.656 cv
283.161 602.656 282.704 590.102 294.449 581.402 cv
cp
f
297.715 583.247 mo
297.715 583.247 290.931 589.934 286.431 604.502 cv
286.431 604.502 285.97 591.947 297.715 583.247 cv
cp
f
305.301 579.268 mo
305.301 579.268 296.091 587.313 290.099 604.951 cv
290.099 604.951 290.83 590.087 305.301 579.268 cv
cp
f
308.789 581.604 mo
308.789 581.604 299.579 589.648 293.594 607.288 cv
293.594 607.288 294.317 592.42 308.789 581.604 cv
cp
f
308.849 586.802 mo
308.849 586.802 302.062 593.488 297.562 608.057 cv
297.562 608.057 297.104 595.502 308.849 586.802 cv
cp
f
312.115 588.646 mo
312.115 588.646 305.332 595.333 300.832 609.902 cv
300.832 609.902 300.37 597.347 312.115 588.646 cv
cp
f
320.421 583.948 mo
320.421 583.948 311.211 591.992 305.219 609.632 cv
305.219 609.632 305.95 594.768 320.421 583.948 cv
cp
f
323.909 586.284 mo
323.909 586.284 314.699 594.328 308.714 611.969 cv
308.714 611.969 309.438 597.1 323.909 586.284 cv
cp
f
323.969 591.482 mo
323.969 591.482 317.181 598.168 312.681 612.736 cv
312.681 612.736 312.224 600.182 323.969 591.482 cv
cp
f
327.235 593.326 mo
327.235 593.326 320.451 600.014 315.951 614.582 cv
315.951 614.582 315.49 602.027 327.235 593.326 cv
cp
f
335.542 588.988 mo
335.542 588.988 326.332 597.031 320.339 614.672 cv
320.339 614.672 321.07 599.807 335.542 588.988 cv
cp
f
339.029 591.324 mo
339.029 591.324 329.819 599.368 323.834 617.008 cv
323.834 617.008 324.558 602.139 339.029 591.324 cv
cp
f
339.089 596.521 mo
339.089 596.521 332.301 603.208 327.801 617.777 cv
327.801 617.777 327.344 605.222 339.089 596.521 cv
cp
f
342.355 598.367 mo
342.355 598.367 335.571 605.053 331.071 619.625 cv
331.071 619.625 330.61 607.066 342.355 598.367 cv
cp
f
350.661 593.309 mo
350.661 593.309 341.451 601.352 335.459 618.996 cv
335.459 618.996 336.19 604.127 350.661 593.309 cv
cp
f
354.149 595.645 mo
354.149 595.645 344.939 603.688 338.954 621.324 cv
338.954 621.324 339.678 606.459 354.149 595.645 cv
cp
f
354.209 600.842 mo
354.209 600.842 347.421 607.528 342.921 622.101 cv
342.921 622.101 342.464 609.542 354.209 600.842 cv
cp
f
357.475 602.688 mo
357.475 602.688 350.691 609.373 346.191 623.945 cv
346.191 623.945 345.73 611.387 357.475 602.688 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_banana.eps)
%%CreationDate: 3/12/2016 12:33 AM
%AI9_DataStream
%Gb",KBj2NHZhF8Vf9Q@Y`u?oZcb9CaOV"h'_-k(UJqZ%3N&GHkioe5Tm;Lf\4^&))'T5L+3]Tt[Un40XlK[*7Wqu/>FL>*t'J&A2
%lJH@`h:=FYQP'5_pYYDqI9&H=)K>snWqf[UW&,%MeU5_WCfO-YH=JP3oeTZ@m,cOWQX&Nu:b#KF8u,+jr$=Lig9FGZ`DVf"f#tU9
%_F\M?V0Tog^M_Cs1]]e@mrp8W;QC?Kd.9P3VbFiap_W[Xs#:@S9nJPbWWT!5Vs/),ee/o$Zh3cA3%m1Yoj"h*XaGSJTrB&&?@!=8
%Eq0<,7e=tk9Cu^<':e/fV5?MAk_u6sbm+PKZ(0IMiL:$9jj8p-r^ToeaBuO1rZ_8Q<QG,`L(/UKB-Uh3/:#RX5mHd3A:UF$/=V)H
%e-#Q_$h2CR!soke#N],<f*lmU%8G<7G!bqOTDm=2=#c`$8!_u]N211a*j*-A-T*D_(quJ]*0&fl)-YI4e0>u/#_!J?^Xa%DJm9It
%Ws);LRn(HtdDG/epdijjott4='\$JkMG:L-W?#?sA?T/B9&XtV6+3#q.X0?us/ea1kN_4rPPDRiC10]b&mkGe03dPogs5u%Br[Nd
%f7M.boaQPbC1r(5e.%itC&/SgldKM(YrXDu3aM%h:5_+d6TDR@\lc$9il_4Gn[qt,$c-m[T%8gR%]d01_NTI($;%GeIt%/W"Y&Ed
%C^-/d(:nLk[F^h'(2rXIDr%Q1[]3mi!Og&)1pMC]G!`0SY(#d9_8"A3XdVS0^GpLAV$Dkm9`4d+0BG.]jIk"s+.q,bXkHP3XSVg4
%9;t8N1e8VIRMW?1K1_j-+JHN5583SnICi_]&Up.l'l+=L9R69:Hs/*:)s-dHh;>S(a-l5&T$%cgM>bnA6(U"#P5:pEl)7Tu#'$M$
%!;YrGrJFufD`'-[a44q(%AXo8IVL*'/1]&jbY-ZBUL$2McL0at\PfDO?I..SMYX4H,CXRGk_a$5]U$!44m:,.J'rhmnD@=VS`a"2
%K"1QQp+$?>R#UiJU!AN1P3<5/3$$.Cb;C+DM5,u6%:<UU[VKCnpdrkr2:0;]r9\[h7o65:\e^t;9o`QT2HR*$g01=X-!*n3&+-o1
%1*,FHg@\#friS&ZI6s+'>;E@aNg,sC-9iQbGtNfd'2%akqf?5+rd)&_qi^RjJ'Jc":fk4(cOiCD-^O`aQR_Xf.]m!iGhQm:,^NO*
%@&dPZooI4%'MF.+:uN!UimA70gAV]aCAu.td>prSh$8d,7l2LubaotBEi#'?oCIh_Q!@H]d&VX'1p`(Vh_@t&H[7*%<>5Ol^P[a-
%71;T6\Cj@6+t0$i1h0o,%\+:q<Al)54JL65Sagl9dl%D^4enp/ASUBR<N9?c:@urt'alb#_P!0=&C6e=CprW,jI9->_.[#n;^89h
%SpW!n<N8R6@P`M!m-$d6_;jGU`o5^EdF1G-(l_Ol<Sl%\F$F+WeNJ.l.P7XQUX;-I21fX-ptd2qNME9G`_Qt&Cp27-eUp>l'LtB@
%"(M\-X'jM6_)to\#KNTm7Mj:d.6j(dJJC9S8[?(r\Rr5j@o59SVo<4;eQ+gT4;Ha,L/,>fruR_3RIsiaXB[%]Hgree^0fN<Cp5u=
%A%PtZ'Pr&S#2g(RWJU;%.lS+i/6o_g6Y><"c)*"(/R5imHB)h;d`ZC1Z#Jjf^mU+sZ?,6R`JCKEI(=qa\+&Jp^>-Sl>PN5lc)Pac
%]X`8Xbdp#Oh'@J&(,Bskc]P,h%XnPWUPiBNqUa`j.[L%gBGNA>O!83m`c;HuLJQM'@(5h6kl9+0lRGUda&_f\>cZ7#jsoVrZ(#UB
%3Sq'c4EjfOc5Juia=@*3O3O\4/&X/t$<+<eintBg)CkYJotA)c4>rP<]EF]-fmJ&t'):ePC;6T8C]5m(M%-J)Z`RAB?A(1N6%6Rk
%'n=K'r/-W^d:h(VEr"WAT8Ua(4i=2[;8g8.(:.#`e[MQD7Pe,&ZW`!B9FX3<5(_O=f;b*D/-J%qbc/LbMLqE:1n+)6KcLPZ)37e!
%)Y"U'Ikf=FhpcM%K5.[>gl3,-=LgULNmq+c<Hc8b)Eg%I80G?pYcr9LFc=<Kf%eJJN`hPG\U(N+;%B%7%aa?1'#_">0B9:hV(p^a
%QuR(!Vh[VJ]ArH34F;%oB,cW,U,Y:q=OWSM2s7EX<,?S`jpb4M@i-m!3TW5]:@L4TpMoo]1`(6eW1O<fjBPkMnV,!->`WZS@Zfb.
%WH_.=FGuUuS]/BQ`WKkb^.@h*$Cb`Wq>=l_2R]X9;S!nPs,1k:H.2AP$:V<Q]4mCbA;j^bHEL(\`F7M?i,nqAS!&pL",FF,0B9.S
%K]U7^fpgN<m/jue@MhBek_:Y,fZ]8YRioAHW<@!;EENRNR9>B7h\e.D<p""0XPSUUfJkB:0,o;!ZX=T'naf`t+!Z8W%L_<,(m8rD
%(`uDpc+Nb/A*D6sp5FXJ]I9@3DbtCQ.SI7,Ngg2:h=UH2Z-?d[a8BcF(s%ZBc"C*YNKkG<'f6D1*"6^jj=6FfF;0skI(Ta;i$6^f
%0,<O:G's2l+.9FCaV5[Ogq\OM7eUl1\PtTN*).70k\r.:S^(5"M1L_6cc=E=o>`g36TB%^"oHNEg))!'q,+OuBJ=[:1/9Hn)C?_A
%>JA(U_jnce+0g',k')64kfs%lqA@</o^nBSQt\To`DS-k##]/mf#1SB^H2c=SB'>pC>?0mad)kJrJZ:;m@e-p*cng4aD%>Ya$?O6
%Vr<YpRMm)!9^c^9_n.rm*+J-aZ[0#!B>a>FC#Mo"fUWt@9s.;@2N'fZ3(0=2e&&+_Xi*LST5U!!6aC`YOQm`H/[S-h8s"s.=-Cmp
%o!gY:#$RRkdm>O=.GDIIiQGR`&u1eqGPkE'Md3)\Nl>fbf*/ubBZtW%I";-Sb!bc;5UK*n'q(EX`?Gt,QK#503YNf78$"^E7Cg5N
%m_of\1Ts#];D(Q]AEH>Rb]tg5$qk2-E`$_o2SVho-uk?:q-9.dZ>,M[ZH,K1=1$3r(M1U6SIl/V2_u6rQ=->1<I9pM;;r]S0,F4)
%(M1CfSr$^:=?JM5]Da/=U;T?0??Z8m:MJrGV^BtuNj63n\X)jC4>0`if4$&gY;sT"/B"q_0hhpk<<'hbc:NaPgmh%tco$m\lULUE
%M%bl>QVKcsfGJt8Jp"^Y1CL`ONa-W@EpZ?=[2A5@OD>67G4XeKG+H?MQtsGg"X(_mPA1J@D'@I/_bt>[XPHFH[]n9t;XH[te[eP0
%:8W!E4_l="6%WH,=.ZGp^r82MIiGqVD%qU*Mf#iR7Qim*T=KX<T_N_-3[j*=SkQXTE&q8@["KGEmo"sk(b>9bC[@S6^Nr_Z?J3e8
%dCa%*W8,2N/UErKR=joZH9tst["N>G^U44CDk0)@J(Nq?`!slT/li=q=g<#?27>Ya=:9/o9WZ5!)ETP#(/8/uW9HsML:/b1&Y#hu
%0;GV-s'Wm6=Yl':"kR^N@Fpuh=5dkpMoOp,M*E%Bs2?ho.G6sFm//7YJ'IhmcWA;tC4f4/rDnkmmH8*UO*r31:8RbC"i46L??7P!
%EqNo5U)Z#MXN=^=K,A%1b;_%r3Q5;/EH&E;(T7QDF*]ga#YSK1KkCo+qJ>22eY-Ob%bA:kQ+>>+2lYisQlaJ$:.`ak6,]/'3]G/G
%Mb:b'q="6Rs%^'mhr=QX<d8n0rd+eqMt>iFq<nkTJeMNZ>E:43(2(@>1Z.N7l@to+hT1U=(2(A3=c`2-c@"duY-g7\*T:?Wc?pEu
%UkRg]=Y%cL,'1(d@Uh7dTno=,WDrh31a8dUq*gJOXQIn62$QtW%nt7"Mp$960s;8S)*Pl>.3@<F<lj$u`7\,m:JB$:NFD^kl=]0F
%`Efk-iA(#RXJph@KPV5DqmYY0%Ct@seD'hF4U<P'A53<o`CchK?=!S.XHnJ#H9E[X=6mE>Q"O!Qd+KUb[KrEU6>'Rp`@ur]n[#26
%9=br"1aMh1@_(%%l9`R`AI1k%Msm/QkQE4..qUWBC[@;'1moQ")nXa);pA%YM#Xf^G5,=Jr='&N2/5FKZrd3<-.S3eH'9I)s+8uh
%V0%8*Lae'!,MY'La@re-Jp.%[)Hj+N+kV'N&U7F]?5A*Ys$GX4Kio\jU7s=]Ioun\(4hf@i+3LF=Ti%HJX<nQ]Te/h-0FHfIh=q\
%Djfnmj@D9nEudQXEK)<bMBshuA+PcsqOag`>r8&G[i5IoHF&Gf36Z]TM)Yr#(<n3*/a7U6f3_4nA8`OMMH@frk>=ObcT#5Za+\P=
%FCL\gjgaNm1`ORl^+u)q]m,`%0TG>Qs6#X,4J'$C_5E4Z98i42dpgf+9_YBYMd2tPf;,V,R7G@5U\iQ8.Y$`,cLk3!:K)rub1UE[
%];fLVNM),.W!A$D>@qcsknob4(1Q&GbCaCELT>N>%h=(bIF%@<YPf8cJ:FlJDPf3DCFaI)0?[[HBK+4(>Li,QUH(/k5+A9-Mha\?
%L%b95OO,R2"qlD#$aGire[VS%A&^gs,)DSIefHe.KD%MFa-^fRl$9Y=S4+E-%Qr!)*+L<)i'eVqp>["H%>\N4_-mqrQuPj4Lh"Z/
%(gk39(3,9nM.?I-4LA]Q<^u1FpWq.M\U627H<Di>an_4b7ae%prKM'!O.+%"ri5H_O6;@>a2LrXUAph4dm>Z^MjR,;]MFI^,8O>9
%K;XEfQAj3-jttZqZM!.&/#_Oh(t<uoVhJ?(_RX7,5pAcDCMl8C369lsZ%&Me%Gehf4?'&rO-Y`E]1fOLa/#ZZ\9^3:=3GT,$4iUA
%-B#T(MnVK8^-UA(<#c#55M.mX\cP+:Xnlb47'rQ3T\tgqIM0i*SomP9d2qBFG3k1qPfChgRIPC&3%3!sZBo`uP.b<JZUjfT$9HDL
%;*r;73Ou0>s$%3#C5t'm(<6_3ZZDWJ,P,CT:D:+)H^oWRFn7B](;AR?q/Z#8CuNW5B=BG)\V2uOnE(MCgqoPm?>hHN'm\9A\OChs
%I/.h<3YKZ158OF&Kfcb_k8*L@_OXo@Esm20BiVnK%UD1BB&0;iDj!a0$^l]A2et&%gM4-8?I-SflSmXlMd]3'EBAoEF0W[V2.W(_
%F=+]sY013WoTbf'9ld$+8hBgK%eQ$R,*Uh&iAI#-):Jm]QcP8P>C"gq9=au^H:#?GeoLRqoB0;Y87A:hZP4cZXi=(nmp]Te4?)g^
%-9h%,NNus)\_KV40"MpeZPM]I1iL_!Nego'(BSZa<&ZZW4_sWUL,_,smpV_*&J4tSa][O#IpL!mTJ!4ufiNrCW,A.%+.*gmZ*/"+
%b3*6edQO@<(b<S">Lc?@RCi#:^)kn5s+tGu(F*(^dAii#nj2&"lQ%$F-dA)<d*3D\ao/DFDT+YfC6+n91:)e(E!)To1kq%<a=8Uc
%?STkM]#ILuI**.+'^Wh$#$e]65Zfr3.]p"\k,.AAN,s:.gfSYWh%'8tFR#r266X7,@1!H-1,\u=k`ue6mD!Ge8h_$4SOXGbdHh]=
%$_(g<'9*4W8F>BH2MuBW#_1(1eJH6^,5ZZult.PL0/bK+6*+,LF!VE-BYqqP/9YaO2@`f2N9S0pS7u'`nu=E-39[]^%Tas:o\a+O
%>Pd3H"P6PVH&sO_l#t=HJrG2n[8;kkj`oTJH.J6j*#rQr3Q=oI$fs?@b%.1^BA=O,&*h/[N$'c+)k9p'kB^[tr2drH68=fHZ0:.&
%?TidSj:uSl\L6^f\dNsto:AB\U1m3iEfR#TdAC>)A@S5Xe3?g&g>@k/Q9WBOKAjUkfNC!`-D&Z7N?MG#F"AWI8ni4r?CPddEO2-^
%g_;nurIo^Lgd?/?,NJW0)cK%8s!APKY/]r_B"hEfl@cc\9QTsSEKc4uQWlD'Tf2L?$o)tIYiBM7Rl`RGq*0+#1*&;2cK3AnBhj_u
%RH@+"`$g^P(t8pVoLljjmOY;LMtJO=5A"bdS%7!-X#h-F8L"i-'S[3K'0#jA1O@3l,ho?[&*HiLga"4>\d9s.e(O*PK$C1;B)9ag
%B'H9ALTl\hP2PAHY0o:fF-FHLo)+ITI>hg9c%X[sB->f=GKr]ub9HTKD_)9o]VS5sKno7qGMj[anp41bY6fe801!1=g<m<lm7O(#
%)%qF3j/\B1e]Ip;_JO*iebA=d]NFFtjnIY=f)G1q^AO:s2il=c\j;;GU/Lrj_LI,@Q;SG-8%p7qKo]o6r!;#k5@X04WY@KQ3A#)R
%jGK4U%*9uF+:mXt)RC(TfMOGk^E!9Y3,_IQ)T@*MX6S6Y@/*(ns&%LRX2-<714j1;D&roWC:t/mpfA?38CNi\o^:o2^M/Pfo][<C
%pK,4(lm4iEee3\ol*j%X7fP&JHLO=S\88-[W]%cA]>64Y7gHSN1D6g3.B!qMOCC0V4@:b+7LT^:+RdNn2;lBWfW%sZX^^lO%!j"e
%&49j%Iu/-3TL62:,$.YuFji2]>#MhWNMr4d4jEUb:+b_BL2HbY_)#?>-8HrCrkHC`*%2i"F7aq,B`l65-PY"ZC+6F[\e/cY#V,_*
%_G03k)hSbdZi,*0DZLXL0t]J!6:<2Ch-#QuKpZ2&l*847X4a'L0s/B8dM!3E!h%!8Ds4V;&P`:Jr.Tr5M!0=<U>:NZ?ARg!L`Tbg
%6SLk_CUQ!p:!;+8:["8>PqC74gfVY\KmXqG5(BBsF0/@3F16Z`.[FkHNdqmW9S?D8pd\Eq>a0>XQk.,hNcO>'i`Y(<>?W<InU]I]
%_m])$$jh:]kIsTK_m"I.Y[!pYK,"W5[O['7E6d[Wcp=fK1n0&hG&Rdn>d_`pf<\/j-+&e^:%t1id\W"[1dRm>k9RF\&""p:rWdK;
%rp]f'#C6/Q\cY_)V;oOmG%oBreJcA/LA\r.R'+Pl7mG1peInbUJ))9Z^2L3$K*")4c*th]V4#F_M,!E04:8h'1Z?ZOJ2;W$'oe7K
%q<HTb%;n[[s/fu^oTlP0Y]ilt#1;n2/D[?`:4D9hNV/DGF;g)[7\3/[TkX/u3VT<ngN3!I"-"g2o9[;7rl,@<3-8^Y&3MOFE;fRq
%3_pYe4ED2n?SXMo&FCN&8Z)9*U's2_\9ejL'Leg*`7c)K<dO%i0YU@cq[m0d@-h\`4RgS()U3#B#/oE,ZKPI:#9sX<PkJO5:Am-F
%c-bbGUjj>TS$eM#B7J/+J'WZkDj6.TRj5pq>9e(W0Z]N6TKKLoP6(G=,8*'R8g=^""b9`A8W//J?cBnGlTZ3l20+.B]*RD$7);]Q
%6Y?M30V3D5AuF0+=VeWc=`_>a4<L,D`4udF1c%T(91MRa8gD25)cd(j\!_cA*&M^?19W#)N;q):gb,NB8M$J!)D.#"g^=J.<]P.:
%1odC<MFt9(9'thgU)en1CT1<,A4sk,5p`HW%dH>)BI:;q]n*k23h]NOjU.^UgPuf2F,eBB4k?Q3S,MAfV.-q:9ZS(u=eSkiW\5ss
%<PDY:GAp:D,Z:aV20#"!1kU,EImO+AW?"3#bLHl^7^:_uFUCJt9S+FuHLnM4WtuD>HdR-d+VKK.9jC`?c*+REM=Z&$<?"-18/0B-
%K>]2_ZUJ,V'.U_XApF2Zd(!ba^`[g&<B!c9O6j?E2$.4)6]Q#Qp6B;<FFpR<AOb:]-Bdb3\N7=:&XpZ?;6N^KOcuBgK/W>UL1PU2
%%lV!B(ccc@M<jP"bXd7G6hR$^AEL)q#SP1ohp')_U"IS[(/)X/cd&8c8I)`ODQ\$:b+/coK5.O5-$HeO:J96e>j3r@[7ZE"NblI9
%9:WCK@D5^B&[66Mr[)%!l%sA_\/iM6*iUr*XSrLr9gY!!Q/h"/6XNb"dB3BRl8:tJ)\LlmF?Pbe1lD[o\[c[PmBsLs+K2&"0hue^
%&dOsm$#]e!m#k#QPLPcOoeVr6SSY?+$7Ye*Aft(;f?poH_NsDR?Fp83g:=%h,tKk,:&AH/QpZ]o_"4Rk_dY!:K-*Bn"RX'/)gnmD
%f&[!/7'CVq$;/Wb9u;+`Ra76AA/dWRg(\4]-=DK&:8VZ?p[?/lHh$A4BZKbh2NAr+[rR`U\].KZA$:NpSHGiTn-9H)HAQ&U8/CYE
%.NJ+X6+^maEG#S=_H76b`e&MGqqu/+/8@lY1o!kS\+HGU?2!Jdoe]77!ePebBD7Ifd?Z0=GolTDe3C*U=fe1BVS%:1r4R74]m:n'
%K_5pU17l$S.H[j2$8tB5'TVP"CV;;DESU9#HFd$8X!YE'Y$2!0WZ@Lj-rsH9WToJ1-42QJ0XG;?(UkMD\!56%]M`G6=AbiShMAO4
%pI`VH>qNsdeoQNh7")49:s+-`\sB7;_5sWI4N/4Mi2J]5)V@)'+_:3V8dl2ihSS(_PB$+a-KE.DR627;B\eifm\o)sinm%YeAPM:
%k/i+aq$TK`G[AMb^/G%!*h':_lH+salHh@sggC$?#2Y;9'$_Q(UG8\ikJ!XQo^/Gg7(npogD*QS/3W6)3O6[g?ciLaZkA)2l-Dbp
%:.i"-R%s]'/pCh3r`t$_Tk64p;+0D@Cp&d4A%c7Zc;^ekbLOIKaQnOj[=4\e%_*DkSr;gdQ,C+I7sh\,"+L^]T1@F(q4C$a70_j(
%NM.Vo5ts+UgYPOJF.S^OPDsacacJf!M?JW1KC\\MD$\p0Q"I<ul<Tt%6&jH0)`KS<AW:6"f:%U9Ea"-P(^>%+=UEApYWdi'b#^)f
%5%bopW2)d&k*gp3Y]!q0,"H61cm?=LLVYIB"H<H8h*(,n>&qD-L`-EJ@gM]`U0>`A7u_0jUB$?'[,S(#^'@0pBsLlt*3Dh^W,UZl
%\Or\=PSc/lUd34l];<Tslf:nunMW?QrCc9_+n9:2kjAAcV[&&#`YDV'"LWRKXB=b3bkhU,.2<QOhG2Rn[^C=Zid4%X*09H8n'HWr
%`bD\\c4/eCN0Q^%#aHDZIqcNVC2"kU1^mUtD;17b7H]G/d3=TZHK7O]5U4U2h_2#&s)f=TaC/nuN\Uk/@Y1nMX2RmPC>^cXc]U&^
%^pts(j\uhkbc+n63FjZm<O:?EXF/I#,@q8&P-k;mYtoj>!t0%G8<1NbEV6KQ\<3cm6(?>.]ePJA*R-r`(5_sqTa"Zgk[q4<IrN*Q
%4rH4_c3(qne<T(;\b]m4&+UR44-7K"g^SOfiB<90V1&fK>5bO+)7k)r/!_=l)C&:P'OK/Q;eDTQE1\JU%gX'H6DB4+a-&qhINjf@
%K)p_jJJ.kuV2oqHE24*_]qq737UsN_=^+GL/mnT<<"=(@<gsmmUC"UrgM-lP<2K-JY]V6I+<8JM^lIg7P=$=hm]**]^g:0I%m)Ip
%UKIpe*L?S>%&2q(E&FfA8/O+j<e0$Z<T6AC)_Qh!<.o4'A@..8(T(:];)qfV[7>DKqJ^p[7X+=oiEi.8n(I'@Tq54C^,st'Fs&oS
%c$+5gAkIcDFts.s4MQBO>-?:3hRi^bUYLo<O-ZSD.g;od\5k]0d2t,-WjL$;;1S`qJeN\#5pgr1mYb9iJbGg?.1G1-n0u'X+]J??
%,+2\A:L0fE_^CN2`UY'AjgX'KEARnEnq9NoYR#A)`JF,hX,r3lDYT,F6).SI5fq4.Q?i8""50D6kdY[\C=pEPcEtJh;F`kTISo,q
%"TF0dUXJgbG+fQ1;g,s.'3FN\+jqUc<VXKEH)j4e9+(8%1lI&M<[JmU4Bt;^O1PnoL-IQfGisrsQs-[4!AESTGN`E_O5V,?'HLPf
%b,:M0Yr#/#7<$mF[8\+am0I(;Wb]('1tE_.V)8K2N^-]KQ\='fa1*/(gI4;fC`4YWHN6fbbMZeS3GR\+"VQ&75RqAG:trOICcr^$
%8f3B!C:0aDSt=2rm[3I\aOWPg$&sf%$Sl*&`5W+h?kQ'B-YO$acD6TtlQW8Q)S$sBdCDkYVc7Coi9/b%W7DXOL(_$$IS:KVVkfM3
%g%Jj&1-mIMM<Wn,H*1f>T@Hu:<h`*bPsbUD8oF_I1?gfV!fIe=NaJnp\rr^&[jS*c9bYc$-HZRM,+jVN&uD*\pCh6E6qLj(3RMcP
%neV:NVip!UFD!@SZ[*]F+^&N9l<+@b@O':#>b[f?H%kA1[AEHe@Vq>kgVXfIeR>&!>PO;'IiFol.0b:@T)#T`X'NO\(.52td^G_"
%7InA]YrO%WTJe0<YWc9pQ>$a,<NTVOm>J-rNo!:d-$B^Og:URsfXY\f9=ut\AUV^OI[=Q>0'o]2B.84IY?IoKb^geeLoJkgO(!c`
%r"OmJW]o.J)U%3p.F88PSeX>)cVT"9c(DhZR^#tkS"gE;.\_$=;&GYFOd&bc$aJRCMsa]N%9$e8q0M]jfA+XL%-k`k@X;)]W=5'S
%JHS*Iq/HNrjtDP+5r<55[lh\u:EDi9'neZ64@ts.`lI<@ORXHQ@hD,>,e^9u`UQ:mUp=EImOV).pFq!Hos'#=q=%Li*ge/B/7cEC
%W@M-4$AORXVM8<S99F(LRB`$X8`EmXbrOjLdk`2f\(^*uVE:h)h+5g9'=lV+-L!a@Op#BlbE#6+_]LT0*mg)HLfYGl:Q0lR=)-kj
%FXu<f;[k\*S)"pe:>M\WnopjRZ85HQ()sr<\N!ETToLKab0q\4m#aiAoOK1R"kfilpHb>BnV3O<n2A.NBM9muS,&i!Fq[+)6j?K"
%LQBDdg3@FG%'nOtd*7"rj%O<Ma#[6clYQOD<CZP=2X2Qq)m4'(XN4LD%m;H+6]Vqn;&G($N.INWFN9EJ%?3PTN^D1\6#tIg]q6Qi
%pbCnXe]&8Lg3>_loDoVJkhJ=I$n43^b3S)(,I7pC;6+2c`NVL1e_Y?8K2S]Ff>p[!`8>Z_++^0GOPOkuf8PG\V<+@t"Ai\h:sMVk
%T(Q>$5FPtjf@2"&?`n\T\H!j134`hXpHXrfd19&tG3p]B[/lMIgBuZM)b-j:nOTJK@m#X4`ggE)T7?X=f>jbe4sgp\r>5t#%*$p"
%)$9jJ@A8.WeJ:U48_Hl#14b0>h+)"Yl\9s#:'c;T4\b9ad&iGoMWI&p(IPMlFgSQ_j4P;*h$`"al)s\is5(fXNOODo?dHDiH#DKn
%?VPIiT9_.]c7?AqB5an'h;9^EP)VQKlY"ttmBt3j:ET%.:Y'\Rh;?tg\+4E[gXu,clBZQsdi+WmRI_0\cK=tijMT6%Q!.\(n\TN=
%YM!1<]i>S54`@4DT=rt7gouC*Xl>t6o9j.[rqX@AFpmd'Kl/5aGKp*U[$ga`3Gj1H>tL<^]8b=c;=e8mZ#dOBbuf2HVSADa^STOm
%cEuc4OgEk`rA42mX,ilNa'6YE=22.igtLr9NQ^\Oc*^$H]UW-8gWD-3/Y(4(QsSILjITr.5/26hV9RH#[BoKoF6g^AT_D:Dlb,tu
%hu1:"n`9[RR>?B2Cje>D;Pd1`^1VTr41EY=hR>SGUXe*6!TICfd%].ehj0T"gNi\Hdaj+pZG)I4CYi8j^KgTG]X`1bF`o9K4ad1i
%q<a+5Hp2b2:W;G_ZeZ"7[B;[8\b4sQYA;*1cO9!ch'_qulcYo(WSO=rhgrRqc1U69-G@E%J+IqA<QX,O0E8Slrl?[@qQoCsNuDYC
%Wh/+qQS6t_p6>Bso>V`DS9mJ>hjR_WXgn$P7uOJ;rOK;H&u81g6!8/O^O(0GCM2]$g[,a57XqM`c:@'k@s>!MAU3<1iT$AHHM]ME
%qm^[5:jVIj]T$Luke)%E<C!S)l,s=WWaa=6Kj@FQI![O<.(=1LHY`FE*NsJP_\\nuLX9hDdm&",raYbDG!g]3Ge<o@`c%tqJ!J]G
%pVm\_n2kL_n`0!O,P1!o:GpPS5<%.$hd1cjeSITHoBiICn23$PrO`TVk7.dod[u:3'j1C)I4LjK@<-"4`Y6Pki-`_GN\fRY1M;bT
%I,E62mb^StVlsJ'#C#(=:@2tr%l.cf`UB;R5HgX,CXUf2itEU"#H.'"qa=e?PIB>Ep9U0*Dbmg!hjd4&BB?bgfr_T93mmHe=4]Sd
%<')c*NkUieV"T!S^;sn-'OD&f6<_PJ!"1W!a]HY]hW2BY8rjuG\%-tCr$-@^]\+2kY)g(uPR&)c?2[e`eIh2Ar@RXKg\t$ZHZ"5e
%G`pI[T/KF+K8m&RfaRDl_j0>*ec4(4?G4;E?JKKSKRKFs1g3R#@+.iMkIXMg-dQqtRuQO`qUb)^fo'B5gGo1?4Ljuo6QkWiLsnEW
%KC%%"g4QL8kO<M=GrM/Yn13mYpJhte8)"2$l6bo$ni]>-p4KL=MsZ82Spu0UE^(CZqq'fb=m8Z,jF9;J?<oSaUR&m6$smbtCJr3"
%Kk1lTO8Vaup\eY;]KEQ:gsc#c)/Ys^6Sk<;H\:\64NK]G.'7,<p'5+'n^F]*VUe%mnB.A7[kkI^G#n@pYj=sHcebbm>;M>SefL^'
%2%/MfWUcpT3kfi_LZWidgn(1I]i'8mAFHY3+&dr-(\d1!chGl5o'V2ESI[JgpRaGKDtQFbiqAjccU*I`Dg:gJfZ\6)s7m/qrbLZG
%\p0]jI5g'I*Hs/ZGl4i-I4MF;Y]T3p"h^]gT__pJ87+""MV3ueqGNZYs)@`ef1d%//R>)Tf1oQ)97MD?gX/-3^Oi/GRdN0:(`Wtn
%n@gNYmki<\IckY(Bt[OCQob*?HqXG'VnR%d4PNKVOKWRn*ph`VlQ9:XWMA%LebPI86`/6ijir+#m@Gk3pI9T'IcJQL<lK2gjDJbZ
%RiaSs(JEk,qH"iB^!I-9q=OU`T0@[LpR&\<D0CE,T;VJk]V^$h:-JD^l$P"/nf*"'i#g$-lLF?Q16Kd]bL3mJL\0h87Y[kX2>*Cr
%J/Hg"&\k35l(=^Yr:UfM0+/X$Nkbe]GSU@4?R(s/PQ:#8qFJ>!ZS>ea)EckPV)H^!Dr'5Ge=l[@Ru^@V*e3&%hk3iMT?t>:VRibK
%mpGps)%puM<>Q7#U`]$>$toC!l4=c8l!:FToc862qGs?^)WTDtOBr'i)ZT>I8?*_gaLKNf_DKJ#GkE0j=()bT=VqD>'MbWVmJ.F.
%_/")qHOSkm&%?_on`oVe+MIOTISCNi"C3?D8<GO+0fY?!bTL1n.iNSeerMdRUgD]FUDKH'h'r\[I,+<obU7=WpK7,`B?>Id<lg%F
%ANUPLC<NQHM8uh2\lk<UohDOt#)l4CO\EYlIj`<[EE[_^3tKG^4Q$!*bfIu%&/M#1T#TM,3;_Y^7L=kVY4k0Rg4Tu8a)>9`ZCCT@
%A+B`IN,JUQV^eK*cZc^&pYN)bD`pc\X_GW9RMT--X*;XVa]r_t^&@eTX8(deF$"mIrLW5]/fV]G*aJ+#FPA"_DqWrt\(9m80W:E2
%eH\mg-9Tq+n>W2THMfMbp?%kA9E*L2lgR:(`Ja3LDNrQs60b\;g#"pg;EokT>M:Xo]rtRNf4+-D<]\o9rL0k^s8(r?#9V&bI8enG
%Y8fc!4"J<cQYWRu:X:i5_sM(WPD]mKk:OG9)eGRgo(K].]5GfDr)YknIOSJa'=2O`Jp.tn[T\*dGPETj^gKEi/T6.6($?ltkJ@GQ
%001a@4I=D7Cbt?+O;#[Ga$]iHg$rI_;R69qXi'J:Qca,jpH6\9DMM2^WG\6d_>\WAEBX2`H'*:<di0?uVI+1hI$fA*pN)NmAaT:l
%h2NOW\#[C$s4DUZbj9^uEuiE>nGr+/&u7#'gc)(cj4+(o(W?$S9nc)!OBgmg#Y?+"cGT?>Ga^6Fk9&A9T\";@K0`=drQNa6])h<*
%<uVEpjQY,co4dTQ;r:qg[pJdR]6f5BZZ0=YS#<6\dcN;JIf<X!+$S@:2IGA4Prj?j0Hb[I=sJV$`eVal>8NoLXV&K!-QrkF:(kE8
%8:gEphD.)@#A7(aUTD:Mpl`?Jrk-eWU!<2_>+o3LYZ/qq4D?16h:V^kCsV*Q^O1KT41ed4@=&o:rN[gK[;tHX8'fHK5#8pSfK:i/
%]J%$!TXN_79tbjuoEHpnpqtj)VBU*ST&s@f:(O_f>-de-YohKm?6*q0^:-o7eb#:gB4a*goo%GQg>:R3r.]@]anf'uJ6U`q^U;NJ
%q0jpo/8_fCR_J@(EN<^m5(6*!lRu;n59*nbPJrc2CYLA/ofo$4b<C<X@Zfl#9+K<@TgJ&00Uk4NE9dS8R[Y7o?RhO`?S1/>]3%6H
%OuDsI0tVYOl@DdPZdm:kqSTLodg#X1f(NSkg>9q7Zc1\=L6K3h.Zn4!UNWrrM,OoA`a+[6)j@a54khGEM@PC`<^2aEZ2K*ODorpE
%J?F0)h'-DODIZUp](Mf96e6AJek8Pb#O`1lW>G$rJun(+04#DLKsJH+ZJa.QjN^!;10`(BMfN"'hKk]VJ:U,ChYq5m"^g^%MH%n3
%*i2NO6_,PeWj"'AYE=%CI-l@=55B6n,Ct>nC\)oLb>MPu?*q/'A?^.</eQ"YJIX`u5(3'sfPB0Er;Obi^/Eq%k:iRa[sPNX?@=Fn
%h$nEef`&1+H9rCj3b6RiKC/TBp*jQ)q6*='^@fE.;"$>]Df.[_I4qp*/q-LKDr)d=Y9"aTV[ecSZe.3\T71t4Q[5@^D8:sZq=@Hq
%kMttt=<NA]KOjbq;&&f^n\%"Sfot1bhIk,iAEf8$B-m.sl+n"%4<5ldk/I/P9B$B[O7fh@7i)bU[7ID@2R\qo3bR:F%dR+V8UoE@
%F/R]-^Nu64q>?Q-gs*\b9\[V0eXk[dhpQ[352B%VZrJa!Fn`V@SZNXq^Y0o:D^C[n]RTW/$FuaJp+j<nrH%YlVdZ@W4EOrmfD#/s
%X9W)R>]SV:mH+.iEI4PY5pnC$l_u*jqtXs:q=$SfI;94[!FE@n+Pj>I+m.#_kM=UhQWnC"oJ)._ql&EK81+$(6X&a!mp0P#RS$3c
%L#:mM"$Sr+=GJ/=e/+/:BD25/ND+'<mMO#[+hugHPrUr&>2:\-EQ9F*[e<Xba#hg"7cLfVn*O3J21P)]Oe196gO?E<T!!4*jU/GU
%V9Sk:hh$O<9Y$c'0/I8?f14R;K''a1P5=)$pQ*E3q!pUK^"@f?U@kfcgPXuT5BXahYb(3'Z-))k*A`RGr6*U`EQ[qbfq(=JS@rZ&
%8W2(pn34ITh+E)ZcYdTk+$R=.VnSAc+'kb<LSPu?gO+(TPKRiSRU+j5>e^0Wk1\SJI+,.H:H4RVnX==T_*_N^ih_9c\@@Fpf/q0q
%e'_QJq6Bhh)>)2J&*r]=X(@IDghn7Qs,)'^gV(ijB?.-WaWEUj>FFP\@<HYYjgWDcbFSWTm/3!JCoO2!p:gKs12mqi/sAKc=b?OI
%7i0".Y9CFYX.(<Zp03qt?Q+pJb%Z$Gj2%:uYDFL]InuF*+5;EAoBHiaB9s^mJ6LQk8Ea3#abDm+PW:h.P<Z":Q+OKa:?1rtVg#JV
%?>S22Iq`N?WqBm*htj-=cQD(akZrAtm"sEK7\P;6MnqjW<_T^`STitKRUKQ0A=c!!)j&n73tf*K^\Q5icb#cSg*s[g"8W>Pia!n`
%p]<s[[G:9agW)_E_kdU0?!i(S`mW=SWI6pHOuNC$Ec^8\m<86$%':cN<-Zn]8?K/f_0Pt4g.p>%04$qTkRk#W;%2`VXDo5ZV#JI'
%<jqUCKjMH]Hk8TIq^M8Q02(X#rZG38SLn.;)P[3=n#AC6aJdP4fCkM)d]LRaDT1>84l!6lk,Jm;Nn\>Dg<Ra(P\*&"^*;/)WbpqV
%fBpfEZeG.mn4FFMSg3%_o_iBYNup`QA,4I6+.dZgLt'f7FNN@O_k)TD&9VqIiBD'DF<%HcSo*!3\9>nBp7=Fod\Tk/CS.6V`G&VX
%r,hg8gUQ-XhlA1Hq&rb\"ZXu@NPcehF]dI:AleW?(IA5hZIK/k8)NfOmVV.eE'BJ`F/tngp(!_f>9Mgq*U^3p]ma"rGE9E6Dbe>@
%MQdH]8:GJ)H,9$>+bn#5g[4,$qo_CF0<<"14l2t4pu2ds3h)(S28,mcp:$M1V<ihP"202mUT6<rp@@s[QeVL@<\V^X)^#!<TS2M3
%<dua8HLMssbf`MqgM7bNedY,\:J-Zf&suF.dsZGSSar@1RQ*iFbq;.dIC#cb/iV@6[<lK%qX?fFWulgEZ['Y*qFNm7'qMIkG?R)s
%dL[sY5J5-%,9sFmXe3"QHG:T*50Q.SHD5i-baa;6a*6?(,%LO!S)$1SAj:#N(Ika9_k&S]!a`_bn^(KmN0K=8eBuDcXj-[Z9$_:?
%8%8)l5>G,5C@Vn&MG>7WOaa;5C$W'$E8J8,r5NfMCd$OapfR:n0%_88)m@I=R27M7rb.ocpHJjD/XsA]]t+.<2-HaCX(BOXq48t-
%s5B-jn6%>c=L-iXLud@'c,PB[Iq2kJ2i7EMVe`tL7Q*ln<H(2Sf[)1RSB'M/50r<!EgN2L`CK_)q:-6dD5l&$=J'o&$P#A1a'Wc:
%iK6:Y>lUOHFhVXN,$skX1[0&$&<2<hbC?Ct$aerT;f=JTf&o\0Wodnp+B+$]huC@&lF97qE=`)2=@jpM[atk?r:/La0;kr=f?^Q,
%c@.2.gkYh(7&JT5gZco*rGUF4nu!QRVQA2Y4Bp(-%WBlt>"6iNORpL<5G(,PJ_Bi6<[SD#[U8JIhs%c20`CCnj(D/K:WPO+h.`bY
%]C"D*g+k6`Fj5@5Abd__Jhk$rlKQ`sIf/hjGPiArmORG;CWKe0pcZ6Obr:AU^V)lAL$#G4-9,JPH$rM67%<rD9!=.K.Ub2]gSqr6
%p4Q`,qbQW'N-mo,Z'-E(J$kX=r%4?))t30X#$2bdrU:toocAU=T%nU2Oa`S,j.reH`Gs_o=s5r^mBlW9kKI)?g#?sh2[d:pF?@,,
%,426#?T`^o7%GOld/@S6$TgE_CNGfEhsXM%h%P3^Z(9.0IP@pnj)fA@`BG/>g<.%Oo35j2:Z20d=YG-Tqs8ZAT0;l@GIHn#"Pj[i
%[GmO<o@.cWnZ^2@,.1I+Mu0aQeUDZlD49J*8CSC3I6$'%CU0GAHD+E$D/ZM_18ig%j',1EgZ%aMh@ub><o8*$I!V,;1.qi7D=WOT
%1@#+[7PjV)Xj$V.:Np?LB:4tHOD/u%Dl'#LI'O\s2fRRCQTJbU0JD:#V+E)kXaBpeDEZ@l:0.*1m="hK6R4n*)HN-Ibg-f$#b4ts
%K_j:9nbi4R?/7D'd_C12c1:SbZ;5(XqAX:t>)W$iK/`i)\<DHpRp;<=0(+l0gF;uaar*$"WlhjNG,*klo_('(l@b*+PpmEhVg>tH
%oSu8%nq]Tt&X>@^f+n!bP]mpFm@ad)mp4Q<EOhWFI]0<J'(pp?E;]pB<2BP-#od7>T)S`DdV1=`M3d8%`nIP6Z=0ciN4S04ohHj=
%QKWTZ.'&oc'<g/M3WSORY"7WS)W1Js85ckb:<:_7NeV-1-LQc"gD;._^$le+=']!u[,o2M(R5oK6A4e>.F[&+J*a1"%/#B1n4,J)
%m.]C\]<5OPMY>n`3#7W64XP/Er\h.t4Z6_QiW!]L'Xkp6\/c-JYN9pia'_f#pN@M@k"S2F`GrS'*'3Chrrnmpjl)q,/"ujST/7S+
%A!4HY:FcZZBY$bgo?DsVph%r3BrI_.7a`u<qT@?PVIuCjQ0Te\b;KuYHJ5Y%Uuc>\_U*EQko'[cI:jj3=1@EUdj;6g[&#,ja2(h8
%E3pX2g@URcZ%]@f$=1Q]9eU58Y!_),<mihg7J*-BTG-ngSY+C?e!J,>Q&au=kdoq&/^;=46VlF=70"3oOYgnkD`=bn@6,HXVrM)h
%6To=s`4QSnM>f/BfSm@4CLLXD_f,m):XChDRt*=h,AC;LV(d+-H=A#ng.Zf>%:EofTE0IR'/^%ih6D*ka5M%15+TLIa)*c7=nG==
%2A[O\BKAW2_<n8p*@BD-\Ebhii,MpbgX>2'6J2$S"dEfMf/bKNd^T!5>#WTH7'9:CA[mcY!tsbHRVTJE3/KK'6gLY^TY&L&"#Up=
%Qb`)bXKJ8g8dXI48!B7tic3ekD6Gi,okg-19B">tkX7AUY`kX_@d'shbNB8RGXM^=Isau>BZs^&dEU9"`<Vu%^X@uX_QNMO0op#V
%ke7NUAE$$[C&XpU!gk;M9r"CCL([m;d]uGF&IT7]Q=f/s@L<SBCu]<j:"Soh>-8&\1"7s0?5,UqR"4#_an+'C0(pMl>9c>_^p&RP
%kmDZ_B0#`tC*rldf"u2ZLLE,8*S\D<R'9#`qBdpRm2a"1)G/1"ar-N-JhVG-:CH+06K)q-^h(k<F,>g34^<:DXTC'^<W_%%2o0)O
%Q&-M%V@`9]/VKn&Bn;Y6FF$KaZ-npEC@cX;6H@!U/RfCFa%HhJfRTTkY8n#+XrC]q,>Q9U2[QpTmmp^9nt"h)]"H!>L"d%Ee0=bI
%CF_t+"HV#8R0l\P"NUd'A(;D<?+?H>[R_Hk'm,up/5J@dM_pps-fI<Tn=A;.armk\I!M+3bcl1?0<qDC\A48@9r+X^RR^nn4WWG-
%ge:#Y[D4l0j;+&OWNJN.BcrC(T4ep>ge$3`Y8KTICutefgGIF'9oJ5XP@DWS0F[KLn=]2r(5Yp%`$@YhP'&DE@Nl;1EX]p*,f=.O
%d3jR5`I[H"YX(fN4!q-om4ZB;9gaFCGd:>*0eEY>qV"\*ZutRG&`%NtaX9":IGXd[6W!8rSkFF^8SmoD-[AHB>CC9Q\@T%/*Q%p=
%4p3o24fDDi==ZmWd%s_TYd>(FmV>PGku=75V8I%DMbg0;>C9LuW#p/)M6j84,AqFCeP5:7W%(M=WuVWehSW&i&]abW/F>@QG=2[N
%*pkN"6]tM=(!mA@=(dr\d4Y!((]@/KMpsHQ*JnXjjcMr0+7p^J7J"$j#tW4d@UNir_KEf*@B+`O$`YI"&N%W+<sS[Ta?BhiRC=F2
%Csm9e^+usa=ha3`8^L2M?FFXUd)Nr.(;X$/=::4TJ1MF`j3`I`@\[X"&fLb?QIs64Tm]R%A&)B%ct9t%68dE(4RNm)Bbt2Y;a_6A
%7Ujtj>bs/[RYWqV7%hS!P%sJ\of.dVg;&f>Zu(s;Oh.HGb)R6kplAuMnX$Eups-bMf0j3FoF*AV$O)SMR0c`+p`a*;*r</dSfdAX
%b88Q9OJ:hg7,KKN-WN\e=+`fS@N5fm,+A]gCB7@)`A/BS-,GJB2;nYcj3T1k8KpMYLIGs7<#^RSm6h&nm8$EOgP/6Oh1h_[ct-2^
%q9!a$1<"KHiQ+\9,*rG2a'2kOR\.=cTNkX<@Du=W'8!C3aH3h9'dX.eP4B[4X6.=`EKo*#NWA,c&P/nS,'#9%<>A6hlYX]PP&.!C
%$IH7*UHg=b66Qs)/'A)F8;])/OkbPI<^\l\`B4TM$Y"ik`Y0E"TbC!;&JgsN.`hiML;*7JXbc%Y6chb2-DQ59_?MBfe!.ed`.j,)
%h4/-*o6PH*a%n6L8A%=#dn-q9_"Vif#N+V5.foher.545p]#:XK#`@4N*q6E&gSUnYD<g;r`=aZpYko_EC(?:P!G`(ImKmgl!G&Q
%R,F=L$H)lOJd(fD-.)bup_Db.pZ0KL_"b3(:Fr=lp_*./d_PqWH>OUk9#N+K:D\L&%^Lg8-@8R6S\L?d#Pg[Xn\j!5^l11!7hTbl
%N7^A'*+-ep=/#jF#g22co!t30m]g]am\ion\ASEhMIgFfh@A\Gn&R\:@?n`E2TYbo"q1B<)_>]Np3,)$[VS`EB!Pt+*n/!:^:;Rp
%G'.B`38f*Y4fjKaNMfMEY2Ski:]p1U?!jh`:$!EXA>&7ka@Kc@`nM[\CpM^A8D74\"=cNn2^2,D+a6^bBk6bGfG6O<%IHhN&[`<;
%-Yak>aM\FuX(]8)2!;i$8]GO<M0M'^bCp0PqL`=hAWpcuK0o^K=tP'&E!)O%KRh'i_-7?o,N1p6"960+ifK.Eoh]i`0$/V51u:js
%-Lmt@OHX?6_fHP'K%A9S+/_=C?8!KI0c5.h[Oh5k+Lua:KG"Be_e0ScC5LXiS/b[YNYV=Qa'F'k<&&_n^9)3Ca"ro!fg>>I_*/*2
%M"]DFUN6u]OIZ-'/f9_i`J/#nDb?t,$u;+j6J@fg3]cKB6IcDHQLEPe[f0[PQCM4."rKs9cXk^X@+$.'l\iSo&Q=>c!D..O&tUrm
%X`Jai\OqN::mDsf?-SL&iXZcVZXd.s/j`S^%MTF(EuI]@=3(:bkF?eL(Me]tXP4%f)Btk3'ej^%3TY7"+q\2XIBEo85pVi+Di$0s
%-!!RZSd[,&&V\]AR\\=fA32Fs'f#KMkf=FUV'L]e/$urQ%K*nHKj'>HhcWI2fE*3f/[.?I/g[2XdM64^KCo^9PjI,"aVk1<UBVs.
%,o3RD6sE7F+m`iF'"i3HBJ:Mha>C-]%;]O?NAQbjU.q.$ZEm[0Od)[;*>>0:LnsBB&daT;FtQ?X(;V7=BG!C#gg:GDKuHhL!X=/;
%n/F5%BbhQ&_#deH8!r4CZB^[2a-=M?Sj^EY6'b=QH$Q\]?r_2/S&?Yed<.ER"E+Q4*Gar.H6S68oV.9$Ij=e#=]Y_E_8tZXWQC[7
%i#Lj&G)+/Si)hm?Ks'D96shfG(Y\I8M!i(Fo_C`T<\;F1,sO5KiA;7"@nZW"]orpBedfaR]J5?HChj?X,GGKO9>L8Rr1RulMRPoK
%'89/@,896\?r*HHa]<%[9<7K:Y;nT,UqtVF3<LC3PWMlG,h-Zk"O^k*Z&nOpEeW];Wu^Ab254]%<)>_mek*bRU6#7E1*jstZ5&Rj
%*/b"ci"UimEtY8,EL%gP(8sCY!h?jE.94<N'8N!K'6eu:K%RkUlX5qT3#GV\kQ>2N6)%#-J//S&bDuCeQ@a8o/?clM-P!P`g^"m>
%\@uQ*W,39%a6=+O03]D!e)XFQZ97))$J7hX!`j![&'d1TW,3i2l!L6)m1=#6$ta*F;r]*%@U#"hTg<IL:m:CuKn[W<kD_P_kJX';
%`QY5=(aR(7XVkj]`]`WP'9Z^4>.[?Cd=@:j0%4eSfO!cJ&r.-1YX^N(lbqb:qp%JNnm8`47qBHNB3,M>\Ze[3DWR+fo]*I'&*6a#
%E(B_GN00*gFg>tqQm59:X;m=A8.$loS^8CPIHC?d,B5W3;D[e:^>UQ_XZ"-U3A6G^FOCj^m5AhN<`]GE/0#L1&rJG-p85rFZ$h6@
%_',#^%LMR%,;PhBR^3Ht-Cl^?YIb5.Q==[T7t_;50@K9'Q]enr*6kCH.`Mh'c)6A*&3d;tThIi8Go@_#G$rmX.sk`<hrZlE><Q?`
%4)#^.\($87CG=4^7^u6&$KrYJ3s[[Kd+<8\.n9HPXOg0qS,Gn]c:LD@D=Spic3Yc-Xtg,"O&5F._16&TIj\pF[h4R5YPYDa#%sJd
%q7WTL@35XM8UH,.!gtNc5`@LG_r8Z>J`(fIIbc@Z0GK^AD;gEbL_bW(?6a'qB(A<IF**1^)a6Ym;%ul(&KU.a_FJ^/&-&>J83.(j
%A/!\@k;\e%&5+(7F4-j3(=ue^'-,dPmmf[GGahge(MurEe*ONIOWe]bJXXei;#hNT0\f(GXOg0mdR'7sb:*Eg>".pSM2?8cc1O1o
%oHCQr'N%VCS#o6Ml,k6)M",:)IK,h$VS-If^Ki'20fi.[IcHqI@Xd$`Lbb0^(eRWL''i$&[R(`W$0-@P;')8#RV<:.La/0=DX@uC
%&,$jhhX`#UNR.H;T2dCB_$FQ4*Y.Tt)$reM#-4nX8Ojr_iP`kUKD8![ig`-cPIr.A)mO.K_)@K@#?+okRYJpS>eUi3$oY5JQkY\g
%_f"_sXHS?bJG@&6(6d$5S;;\H.uK'`O:S7/lro/RcNe"m5?c,p`:)]fY`tCAn%b`_k'U6AYAr!YXaA2]o@mD^,ZHT;3Kf'YR_g!`
%1DQjF;)n"W1\j`@_)\]emqMB5\;q0\CgEd^9Mj@'1cK5]Rh'%l2's(IXUIrh-+KcpWl/!^>/rsQE7.>,hK*WsBr]'R*%ji%%q:Ti
%[d%T1N6>kW7!i,JilQfD(!F+7-lsG?ZI9XJlSVVu&'qqOArBn^_1Ds;)6=`j0M*g<EP*LY,:)AF*9>1DLb6001t7l]8&V3e-9__I
%g/Q^l88,Dq\ckM;c]GZs`)"Z-<U2q[gf*'dX*\9LSRY6W5h)U]97'F"[1.SYK+fh*HnpkAh3k!J,b$?-/3@B^kUdPF^k%n+l5&C8
%5qFs(dKpTEeSLMCXPl]&'_s@#P(kKbm;/hC@NLptQ7rOc5762K(m6H,<V#S9XOg-oSWb$R@g8j08pGrbZum6EW$<;$OgV0K(.d5=
%^!CAZHp$Q6:sLJKRW['>f1E>0/@:OoK2h<FU8`fb32aUPK2O7R/*c#RLoJ0a%-BQ">?Jc@&[Pe"q)OWU-ha?QLuOF]"&V9YB)tQ)
%@3TOQ&p&ht'rOR)(n60qXcKVq4?6EC+U2PL2#37^K^9UO7u"Bh.^7Y/'2\K+G$AA.35G3P[XoUBBh<\=@gUfdP?p'8:#$<'C50Yc
%;m`VSb""L_=N'@8mdd>?V^^BmWu(=<*%I4Z:98#"qYn:3P:""XW9e4-3V]0i^.%s90gC;s2.h7q'UT1)+AY@t`mG;]O+\)Ya$G?!
%?8Lt/oZp-eA-M/b1D1sC*-Q:PK[O-IW_Y0G'qf!Y1)?GZ@(NAP,\#>eBNVY?@io?'-AJ&GC*]h4!uJIQdSZm)g[+I@*ff\gjc4!N
%+k3q-8SL/Ei"YU83@>4-+RslMXP%V8a>k5O78ZsQ/2hmTT-1h)BH(S`=pW!"\K=@!$T%K57X&gs8Wt4G-R^_oXm/JiO$F`JGG;U'
%bllo>PF\Aa%TFdDMf]\7Bf(q,G6k+_.Bf01aRnEkLlVOlV9Z;J]Ju(IK31+'<_j)6DbsGd"<#4rK3*^%%?/5nDUb2?VEC%4BYR3J
%!El_Nefj:pqi1igiBU4cLa`%ljpr[\0&0gkPC]=ATp*;QYF5$=7V]@`\W,r6PncRoK1.bVCT^haf$W!u7Hp58.mjR3"HRst)JNFB
%M[`EBES=o06+H_16dV'\nk=3UBXa,30;R2oe;Q(sORTTnU^*N6PUQlQ,Y0eX;;!nm2&"k9nhTeb.W&#H`)r+Cd1)4c^;P_JcS-&F
%\hD`q^r"RmYRj_(H#]S@*/OebNa@+e]=sMM6!KK\2\k5F_G71#%3[NP\";!M3[,Nk[1ppu7S-ZTIr#OW3Ic#!O`6KlD)hQ_pmrc4
%*)9_ec&dX,57BPdR]7_*E)(6>JfqXCLuD*BOQ%!f9[b;),\kn%ZbD2M:!#Nk\a6C;Ee;9l:p^`!,3^._+\n@Ope^(M=<IFm<&03@
%>3+^49KEf$EqM<i*toad0dLE'q_[&J'c(,CdgX5N(^ZT+Z6$I8Hj^Riar:Dr4<SCe8^lNdKqouO,,\`u":r=AV!*WEj"i4sBB>;3
%O-%$s6EPD[-^$j46qhm.P]&:A/JX5\.lkSWXFQKaA"R8#-DTN39Y>o_%GauRE?6)lT=Gpb6OnuDbW91tHc3l]XuXpY1+YSR$f[l*
%esGqm;_1Do_pQ!>8RTIWVPGj7IP<``#gm<h/>3:1]O&VPFA(%EpjMLP$PFKc>8[[*ZdV#R0RVB&c+rRtJqPX3l%1PNi^QU&C!son
%6thG65S?mP7-8inMJ/*YF&dKKC)&^PPBeBHo&U<HL4^fCSW>b*B"_gAUUo(NjaB$9I"_`a6kGO`(7\s]72^[fYTTQ5;4mQ7_h&q3
%ka#n;r^eJ3I$?,HY^V#DQMM7!gBo0U4qc5)%aH@F5"a^d`C\/YfE<(aD=LH[eQ=a@b^.OP2f[?.?i[qQ5VO+`=%t.>"n7tsl("\)
%&d)&!BgJM2TXfdk2Fl"QC%=Un#t#r:#hAJI[ip%m,k"]/QJaZs(.sN&`R)Os3c/7W+@;%6i0>4NopX!`EWhH"+8?jj[:Md*<QBbd
%((\'=I4L0T`GE8hX>W8HQD(PO:%8/?Um%[iV;gn7"sj.M9(F,&mBHR;H"04nPImkg&Ic!9a%UPs'rsdj\u#;Zd:$G6CSj;4Xdo@V
%UX=X$._1V9BU^:j=+Pm`aObTO[B82oY1OA%B+l%keR=pU:-*+SK0(%gN?%jmLS#VcCUl>;l/@Z*"'Sh*2@jql5[l1+LGggkrb*^[
%5Wq1@2=!+u+"[UPQ8*&)6H6=(6/0rO8h6PX[5t7%6!Ytaq+b3Y=Nf/qJD)tY7ZLlpUm%Z>CiPKBqM$G17fp+NLJ\0_n\0Y27P_W4
%iu&\h6a=@WgJT=b:em%8+:_(kIDd40#hKT&Kt,N"aA44=inS$OA=9SPd-8!fc1%7EY8Iu"AW/J,_+2a2l'4M+R`TlJXCTdYc&#9'
%@#3EggfKJ0HfPBOOYX8#CFcV@kqU(#C#`BRW(F1<)o/V#Uc-('@:*X!9Q=tW2Uo%<'J^8QE5Sg:3K![3L_59#cp/L7,&5\#;]i7u
%K@cH5Vl=s%JibNWL%6rL_[o+Ib!&(#,BZi+[3,tFAP3BK&lFj!1\J9edo!Mo>+!MVAL]TJJWa[>,>kE-$MBN1TFP#,,tptSJGi:L
%%*gnBl=7kSM*9If>G:kL66+NXKm:T!,;pXA/R6T:>d!uWlj1W>PqDB/r'!+)ohllkR5b<n08,-7/(cgsQa'?fA(sn\J[2=N[=rUr
%.lmYn"!kT@3:!B>YH*=q0apC(d7<'r5#LjlFUY[/Wu>#ib=tni%<=7lj"\tpj"k/ml__BLD8Q(%(7OkM(23*NWC=Tm7$+0!VjPN4
%d.m5b1G$`r/9LUV,:8s<nbMYW<;)EkKmZc&)onDY!!@s7fN<cicGCQJ1Gmj6mZb_S#8PISVTS)uB"_gAUZIfKBgRrQAVntQ?-E,n
%YekEF0(i[uE=/_H1b(^PV&$K*=K4_ehlN"g5M3je6>7V^"`B+jS2Zu>Mk@*T&*I5Q,9"?u`Y]0XU]?=@`NjV4K_f;oB(D_hhdoeZ
%0BD7.Jqbon4Tq6)VC!*X8fS*l<CJUp']f`)65]+O=Bl;13bdk`^776j6g0r\BLZggP]g<qd,OmO<3CTa;g#uc\<311k)o(c9/\cq
%2,g,LJ<SJJ-O24r(^ouNZ)*PQ>X;^,NEe:YF+jDW,ZI00aJeeIomQPM"t#ltnI\^X-"f!,dgLe&Ci1YrKql'7kogtq1%CgC`JOR3
%>c8(jlR\e8-bX-G]=-4VZF.Zk3b.+fWfI[CVX*OBfg[&&-@QfPiKG"s0m"R&pXtClFjecpdgCtAH-*1#SP-1(WpUJ;B04en_!e-W
%XKs1-6,:L/-j6A,h;FgT9RBRsh!nk>L9<$Pcs>$tD&KjhRum-&Y/T5q9LH+^(^]u%/Du(4LDQ[sSM]_*-ZVX'r/+>416YAN([kFC
%DJ0X3VPsu#h3<GB,^5Z:/dU0_lG/qA8pfM298&g-fO6%eJ`^'pf]o'S8L<S1^`d>Y&R8BG@Ep`=T)_kg>h9lKk@?$fLRU>N<_A([
%+bi0.ZZq3YZRt-1aVg>fBPPs'J>),6ZE0+090BMY=g+7gi+nlf[!5X+f&WCEl#Qus/n1@J6+J7:Pl7RVr$=9n\m=<+"WhO1XHP!G
%J`BC@PDM+#6W6[29L)H9E:@7O9%pm0[P4<c$.PobA.(oZ78ub$H-O8tK!$A*G_VU*JqPeFZXg)2I"V<3H!6@?(g+edV:rp36!/Fo
%^e(e5_%"[MC!rJZ6XnA/TMGUt"H/<s:IchUI>GG9R"F%+_nqi$)X"hr8!o+$n!_@YIWu8M?H@DCAHeCJ5+3j=2(l+qo5[t3VCmS`
%gl]X]fs8P9[TF;tZVHtYE4+AY7=:SY28bDIG+Bqgk"Bn\6eB[ec<'q<]N_PlZZJ_S@*"a\;3P<Bosp!5*!#Y>J\"%sOPkY!KcPb^
%O,Z#;Uhh8DKCk>eGq,Q(><6NM8Q-_EKDdKUlG?q;\2cR#R9B.COAi_n99b='KaBG<kN!dlKMdtE[_YP=RJJmh7OeSuB:H=r!pPa)
%EM/_].<XmTh`Ft\m4)?).]Bn8fbEfYk+"9m]lm1^f9:CMAVLARkF*dbbiUuG0T_G(Af1a\EKVZFc\ru:BVT1QB%l9mJ`Sq!a=St\
%%AZS+CpbL%a7?$7V(EV$d%u@-@ps'!I?G2N7Cs"(3aq<K!Op46EcG,+iI#6Xht#9O(#'RRJ8>OqTj;qWAa3r`A/gE>2"h(sB"_O9
%UV)o"N-_2`8cBj=\`6;HeP^!+)V:J6:X3St<3d4J^B(g;(D4XB4sO[12#6euSq/hRO`4oSc=UUUdZ3G/5);+!Y-8?oFC_nD*%jhl
%mF=pKh**ga23T+"'Pu'ASC/To]%l(0M*r:WM9u1@<K$r(/75Xn\mW%:;I(7DO.(+;Zo;u<_EGW;]!eYA+6U/BBaQ)h?cNV'%<5Gl
%0=;@/L[S.2"[T:\O.,a1BlA\4';gVI6[_GA+b&PXa,oC&ET/TZ\carP`BE"m0(L:LhunU)S,:bFbW9J/UN_lgZKR>7W#b3@;mfo-
%rfQNc9hj<uJ@S#eU80uAjssHNXZI_=]Oo=HFC44l&'eOK,Y.tfm,8Iq8l#`qp!A(R$B/QR#q=3>d:!\[:25TRFjcLuEP[GS0An*M
%#2@2OPdodf"6"nrV);1sKcr!p2i$e*WkpV(L<j_MqBrsgiZh6#&km;AN$hV#dKS,W_Xn#LPhTHi6<3"PQHIG1DUn$"'O;6Go?-!e
%PGZ$SoEp@0]>u$!")8%,JlsRO6'Ne#QGI9r6l&*la__tW3!bP,?K?`[?8(]nW18LW*5N#8RER64:K)I;0[kR4.+/eEA;[+g-4Y<%
%.X9,C[S`5`R.f0cEi"N2YrerS@/`t/e>,#DUb6VQ7Fe[Y_%K^q0\AAQP+6^f;W1UoSFi8,cQ.u*cphRd0c%8q7h4Nt@g[GOoF-oF
%loX4L+E\=89-X13Lc1X'SqrhVZF')DK]0Y9L#7B$_XCfRrSDZ5QYHs9qA\Yu8H,\IZ8L04B'9;R-6Csaf%!;>).R$_`Ef-YDHql"
%p?f:(YdgNG*6f)*);8JrnM$q>QRX^04.'i&iZQU4/7;hJPI\;b_b!m"G%3<UcQQ1C[+*`3_jL]Z?!P8n8%WHBAT`<c81>LmLRTS"
%!^G@meIuW?M2ki$mAj!OVWig<f&VuH%WZN,6G?,Y/mZiNp"g'l*70=CQOG9@2.sdOZ=^H@L:<jrlRPV,g%^ZdS9r31;2JP\6nISn
%CeO>q@si,*gR!;J9036I1)iQR]:W.3h+%eW5H^u1W?r(rV'EG6%+TKXO,>ke@PUkE\\16`g,VmN7?GaUH5R]u3PK6@%dR5SQk1r+
%jN`J\i_=TI]=0,I.$LOk\Ir$+elH@riPZPMMu0r%N>Q"l@!Z)0iTkjopd8=O`J)7cTZQj$dK<,W+EG4AWTkfj.3Vl/Eei50iS@QT
%'Trj"O<hV#1NBi0GA6(q)t^Y;DGYu_C"_J<;r@rl/ofRD]Ei\b\mpX#PB(l4VV].CTQ51?Vf:_J;P)Z-AP#T$pE\^UXWf/MWo5qj
%IBI)"<`?M:b-C_.$!M]0=L&.,G0n:aP$k*M6OoL)R*mS:N'g)apCA<[8C0Z*3RJH=2VD!g^;/rT#:f^P6VX1c`?mm1!r7q<\iKu7
%@Hrf-^=C(s\n.gBQiX4+dji:+Odq+c%33943e-Os-67a5X9kQ.BMjc<V0Lo@p7qD29`!c&2:\:a]7<H"O(!%N*`KpC(Cg]odoT,*
%]\'e=I07T!_!]]Pf.69lD3u`?QfZ&["PdGCjI?#,KMJ@rnXV`i:#SXG`]:qaXdElq/e=Smpo7a8!MIP+Qo&F6riHq[n59LG?<2GD
%#]?0mS.6$DEtX^B7-DbD@,-O+n!&aGI^8VEY1dljG+('d_5.Nu]+i+,;b=<kZal(hMRn`$;(dml>@D?u\\b],(EK/eKZ5&UG_-l1
%Z@qk\LBU;l=O<^nP`&T-XB*_'bN6lgPhb$QS>52+n&T]`60f/H:pl4kai'<Bl0KJL$5E<)Q*":?A*Q\6E48TJH/810/6k`?0!k,2
%Mrq'DGps^hTr0.gO1hXd]o351]DNSLF%ZVK.I?4,6\7*c#pT"GB@kcp"AlWgcqqVbS2*\]EjSE'E^rJSNomZkLQs,>(jF*^;Hi<&
%a`jt&iN86P)UO[CjbO.\G:"0KdOl*]XhHW>l!NC/*PtZ7:!u<H]0j(`ki?X6:<.:[j"R='4\Ps[dqV:)\p[hSaLqpOer`qMG:3_t
%=b1hSQY*A6\l:FocJdoiL@cKiRk]4(BWB+\JQQ41PK[T4afrRKOSb;VBll'084Khc-X^_1LeC)ul%0m4lbqcUUaZK)#f'SlZE%hb
%eKdZ-&@H^Z.;Wsa;O!iQl2bdFAFVgeGf!-BbrBF)*D;:DfYuo@51166'4[)2ThXUj]`@EmnPpiXV^FSc^>R@$9$0m#.?0^:dU8gS
%9U@g`/>P7\m4;KSRgb6%*K9cj.@05.Q.9P,iQtPD3Sufho0+4cFlI@eiEa4*oCuclBa/"FgN<OUc1sRVB,C'ZNie0?"E%9u.R5OY
%66HlH:)\!\G8bIFDdOgV8L"BJbs4r'7S^D>bChm@gLj`Z)`E5N_KP4)\fE>:ek*c=$U-_^\343Q3XFND1id)64RPM\gXMF!lF7p(
%[DX?LTr_Ke:bD+X(bt?piV"N9Rq4m`_[gXl[cCTrQ&\BtDb,,)RqJLORY':VgT%c[4kEh,brT:C4"VCnUi#<=J)`j[^2oUdaeZV5
%K3OaHOeOkEV]*1@F,Q2D<`o281$cd:p=1a>Yd2J,O-3a!0u8"H8=?<ICIuEc^.lafG>$:F.:/)dpZ,59_+?!`2X\-'D09tk])rs4
%%4HKeXNXb6nQ+bCS:%nbX%(,X$((X4]'1`]'/AaI_8bSfSf;"-D(B=P3cE2SK,gQlMjo_N@@NefFN6;nA`>Z[Q<qjUMOC.^At:p:
%SoSLdV=^Q3hisG#Hq\9r`[Uc(E0CF8TMS]K4aB!sk,Yn4^,V.VI2nVrdSM/]\ZGil*$AYd@Jb/1J43]Q9dZZ])rbFV9HsQb6T#83
%j(og3,\#2YKC);n00XL=>OA3nhj-<BAn7bipQX#]3S[VY:C,aIC/P=5JBqCD-Cm!G\?ePVUib"/;MD;)gCEt3Er?Q-#<pD_]%W%9
%<17T7R<*2"UM,:$:)[kl.jCX+PDHE:OJmX=g[=rrJrgHdT=G"`'I5(l1\_S+p'o]-)Otp/@)J.?Vo;R.D+V"DW?MR.T3cfW\8qlO
%2]AiO$Em:r:jf8.W[#8*ocAal:)\"?h'U<Sf@7]=!@XmZk0sk);U!S*F?0!0m6,RA@)=Y8,BYTNi-]Ll8OJI;YA#GZgMSpmf<U<7
%_3^!L]*/R4=LKJAL>mc2"7R>u*+.Zj*YFT2*,J+t,NQY<n#:)G;"(UUOG.u=K^F"8kpd(SA(aIj]?4;dhVg!IU1TrIgeruE[]d2[
%,ZZ@eHci,%WJP_`i2t-c(H36C)j0'bWMs\_;]Wgd9KHmFH[]0g)\O$NJojYgMWV!%\JPKSeb1;$`AoMY)Zq)BaA>S^m&4&7%6&TB
%a]2r7]l"+bYD#,63LJ,:g%N>,Q>oEk)4nei-VYLE,E#jQ\-?T:0\fpbW/80^IHRPX^)l1Z,2N17C[HAQo&WL_hj##/:#_O72cXL.
%4s>oSFg>sVSTPDKBQ<=*-d"uH]6:$`41lc#mg7nV4eu-//O:B&e!6*U),/m3n<eW!@ih._'UGn?PNX$^1frKEcBkHe\5!c.,<s=P
%d98HF<@TQg"rs,tiTaeT3F*cr_r9t'_+?!`[Xkbr7pXTb)_\;U<nF!(l95;FXPhik2-\mQn3[r^M?f#D?bU#1@a9ftNK3*/Mm%_c
%;?q%e`M7F37kuNPn1"FmjFlD4i<6TgN\;AD0c?L'Z=&a*'6(Rm&kJ&TA.U#7Fb;jN2I#f%qcAm>/mqsf4fF#HpOk%0Upnq5Ua)#o
%d+<>t3aHk'jD$#Kj^h&,\"c^BGdDG(,j.SdV5ZEodZgi"RVBLg*_4GSS:,A-8]-N/(9U1FBfm55G:Sg?k[Cm$Y(rA:=@To&#>_"u
%--4ju:";q<GKrb^NCGN?3n=kgpXDo45!&?sC9+XrPbMBBB]);-$nn:ED'M1>Z#Ql4WFd#rP>2n[EArKoM3n@)Kd.M8R!+`dWGr^q
%Y!9fuI@_G5G4+AKG"SnfII'shK8<)hi^aiN(;%I4\'X,pCf9#`EX\eL,@;h=njnp)d6^0G]UFSF((8c4=''<.GnNu\:)\"OQ[<)l
%<\nmK@geRYEg8Y*JKuYcSL%NTVsAD(0n\k^g`;rDebISgW&Z48[3l/(>AC8=_ock>gQ(A$NO^^!aA9N>hGR1Fb8d.sC4*_$Xd[T0
%9fcF]a5%$>Wp8jW=.Q+Pe^ni$YJuQ&'R-UDc)Tm7i2EALN2+Pn*1V'aNfJaM@`PG+eKr)U$B$PZ.BBWu"O)))8@9>mZ(e;ubdqOI
%c@%e9(`]hS%W3M'SN,E-at_k5^!m2qIcn9ce!I-*Lefj=VBKM$UnO$R96DJr=Vb4`"-ZIqC2PW,Y+id50<,1<pJs35K\oYOYdpBu
%k,V]'&<^*k6e5qb#U;O%MO8Ij:li'r\4a<)$u"-V]4"jP0(fit]n=M>%#Ja0.qM[_>N+#'Rb]of`&4?fH>qGt=<b.)p29&`#@GpX
%*)3a7"E%#r&@\p2)m&tab)pHX_X]N/0%m\tMT"U,/u*$L1u&AZHX+=&j$lXF[6VOPmp;A>,3m;E_JCB[Z)DH;jGFmJ/0Z=.$[8<l
%SN,8@:#u!j9C?mTX/]\V9b;I]"j<5>L%e6mmA:,98MeO<"E\Kb-+!6g3a&u5h$ffDc4#Y2.S&nCA*Keu0<3t.2mcl"h%3k0H-Af_
%-5r&9U(@dc<qiB]9f`VQRk/j@MSD-A96lUMk(e<9;Mk=q.D,si(Qb&Ii)H:%c[]:A`BS>=1u>`pP>3*6*2)i`'"0,MlD6Jq&8pZ*
%iHSfF\Pa.jc/\Ino[lb99B*!dL[!@&ZVDEVG"Gq]c])L_m@&49nC:MVP$>t`e^D#B#Ka"!0hZuMjlS,*MZ6.>3a&E%h$HhYZib7e
%='%K"ES;sT+L+f\7Sul#I,nA]WcB3Ul_.Si,O*pp,(m4^`0/>5B8j5aN6ZXb*)b$^4QW#?;BKOBl\[iip-ts,jkt*NbApaVOYW"3
%lA/Rj%6%``ib_h!qgpPG9J!!*0bHd6fN%ZBqn=KchEOuuZarL5=$k!YZ%KAX)K$goUS.ZlSmc#\_l)92K8HPDeIKg#Nk$T8UU@>%
%6mJ6tN/,50-O]UWHNEkI)U&eZ.IHTIW^PT^-"YS)2`Plb#DpKoK9GXQq't&;Nm\lppO@/5;-7!KD4]CB!Br;9$)1jc[?SPo8R"&Y
%OlQO^RGmu,SqYONj+B+)QH<neq=,&<:)I_0,aBm\E!;I@Q9f78eW91Dn^N,R0.!Th-fGGfRVYofqM]fLcDlkkF5g$n@=g+j"^CCk
%i'^[GHj*cA_j?[5WpkG>$<6m="oE>aT_[%02/:R]Jj&6c^tGs'Z5HBYSZp$Mh%OmMfduBUb0atSI>O$oYI`_?kLI!23'35EN.FPj
%+_ge-VoLtXOZXJA23FkU)3CkC/M%>rT3Ar9&D7W'A(or/=Lo?FI*h-qZ4de1k7d$p=XOY;W_P*o/(17o8Lh$t<TSpP80j+s@V=_j
%6P,!UTXNAKPO(P*il&Ws'8IH<.pSi7B!81hm5NDl=9=Gm-5U5+!NiRpJnI^E@"B6i)[fRa2!OC&*PJdS(@H0$Ju*if-6j.fV:8i_
%&"/Q>^fNE;;b2&A5]M^W/3ocDXNZ%YV&>YA,`7Un)=\)7;"2FqYtRR29,=IG6]15:NN[TeC^=K`Q;G)2dM1k6a2nQELNMM8HVYk5
%SN,9)<:d@"M*iZT7pq,O13TJ:>_8smWU%@-Fh$dl_0.\MV8G/&SD+i7l(k"rE(?:*L_%:FCIgYk6`"a2h0miZ8FU`2NuR)UG'b;R
%?n0,t)HtL'S238]lX\rqG9<L?ddbl%oSl\QH<PR2U`S@sa/OCM-6Ar2Q&LVE:!ZRVY%3HZFVL,GEMFJb7ZhcJ\N']*+nX\hCuC_Q
%Z?J.IK>S]G"ud@d,`*@!/s>7`5=!KFE_">6BqS&)gP2OK$=k*SXsdgUOO@+U/O%-]=JSIk4!?06k=,j?\(QZ9349MUl_NM54/#'4
%;;,Go"[/(ig_\47AK7rA(i1F5fk@$kON#a`BOrI>$A4O;(@6$b!^bRLc#^jtMB&=Y_fGCrKU*m5?UZgh9CB+`6WJs<[PBSIl8NJ+
%O[tZ%G2oW=<,MC3+5UD+.&qj\R$seo<WX:!5Zf[',%n,W*QVV5fV.U<DGf!tZVDEVSJ*:aAR%`&)ht<dp?VpLdd4r<9FC,n7lBBa
%E3Y3<g*:-eUKi.RcA;W4F5@@5i2L%7"ulBX;0BU>Sa"J^X\.m2Wa>mf+3dcbg?#1?K6'd'l7r#68JggS-n"&H+/7sj,Ymb_24:'F
%1l?HV"5bf0@MjJkL8>k:'Y6fY3=83\8j"c@Z8VJ9C-tuLP>/5!OPlMTdo@YaXF>&(+`6"+E->7dVOo"D4Tr7!#mMcJ37p2Qp6FeT
%*p++efWnZtHa+E(99VCt5,-PlK9*<7>kKP+S&L`=7SGjWYYhZBFADd$I=N(=(7SjGUM=d'2"W!Z/o'E9/_B_#DBCh)7*Rbq\B!D2
%\@>h?#o^s%<er&YFI-L2grP%<Njei5L#-n)Q]`2?)f>Z?dEM9sK<pTVP&/G=Qd?@qkkr]I*!l&tWe6pp@Sml<,6hS[dm3L5S$-r)
%E&Xr!\-gfZ0/q=7eI`D":)n0D\RGP9"pc`OiJ.<K_A+BaI,hkjr+Xb_EMG4@73c)P>q)IJSL_&P-_3*H8<an1(k!BP'fRmE-)Wcg
%^kU1!\MRRa<C6g%](e#85.[;(G6V;q`;M52At:L.j),&3=2;=SeBeS--/ej]nJ18jb6@BKGG`lAgAJaL)a6f$4#*!MPoZB;d]8!n
%#gc)"h[nWV6blf47gcsgJk;!RqqTth\]Rrij\-YI/$f^;2d*a'c8osTh)8j&>cL^62!lt[\LegK\%qBd4Y;fDU7<eRMO%J$g@(29
%&M`U)iANQiSbTiA/1MoQ]WeS!)MpM@-!`r=9*<M,C,1Ou:cGiRdP(_7P@"9$k\c#/]GoD)p-Tar2\d5QnK#*o&(_4G*0KM/d7okF
%E2Nb*dFn2SNY,^i&(9Z@b=<8tg>%[4@+(/QkZAij,*KE?/r1"<XAhlLCQp-!%aeonZM40$2*S55CoM14WWRq,\<@6^/A#.hJ_N2u
%0Wt^Ym%7P0j\&mk*%^]WK<HAVZ(i2Ac_pb6M_a*C4SWa$PZ[hJ7M#f*W54CE*&7.9*8%#)(Zb--B;u+<D(D=`>8`siO.o&J8[j_i
%IlLrSBrQa-?>cDEO,;1>\D%_A:/-*KMbRUYMQbH:LISHAEmPMY9.]!]1:,*OXpPj\kk'CcnD&sr:'TW@GV7DM*?:Vk<W^"qM>2(\
%968C/@B0%H3q6_nXm5BrlE.;1BSj^%HMS,BP[3rAK)I;P=gY-gH;1-9.ZlOre_9O@%n6@oED$]hHK3k"U^q;'Wh?qZ$0lb50Zia[
%ac44Y`)+#C$5Q*D)WP.:c5OXM-I</M_HF@r'9Ls:3&'!qLtC!R1JdjBQi(C4)U(*/QFaAmST,J&X=P\K=Um`"4Q?Fn9Xan![iG<g
%=[tldQ$8$FF*30CD%0Y]:74FIEEj2P"&1d%iN2C+3l^]^-9'UmEZ\A>^GagEEG2E;Gf.=tA<3d?7-"U$U<&ITX2t_d('cFB9\$FE
%/dAOV/LSAH"'1BQ;'CHA!F)j[Fm]fqRKJIB"'"#q:ERdReW/UqGsCY4k,=k8oX-'QdW\l>VMru8;l2rL@e^u;V6hUc^Bj+g[lm%S
%s-rno*_hZ)\T\)P&+`,<IaG[o(]0&PAO$5)*s4]Wh\PjAO:U9CHmicIrd.^7AG.rD?0'4Kq?%-C[bRCt0>"eJ=dbBaC:#:1_k.,,
%*=1r1l*]A0+$QBAK-/FW(cR9RA?L-e!aS.l*GC_DrUYsX"D.%hP38Io`]J5cP##oMEWWca;,<NdaCaKt59UC1L]=!)c<&EqXj9tG
%4%+&)JZpWf3>*2SqF=$9k8JO(!00Y$bk81XHQCBN^$s^NAf04bWetmCW'>u##//C)W:OVRj:DH;eaR*aZ0@Z`(E\1Vi,$nm%Mb)F
%XO>hCZDEfogQU/IEgX?[(.a+MD&uc,%hi!Zs#SmsIa#!(^o">QqpB7k1Jo[c18&`b0F!Q^RBOa)B<)6W6hO%Ibc(O]@$Q<CTuaW3
%)rMk:eIro#!ttusD%HKZgM<Hi`#SI'V#M3`n:^-S;iYkfJoC/BAC7D*3U&M"akNb=_6,*p6\$>drpjmsppG-iT2,*Za(I=$#BE6L
%p2P?!f/r'Ej'u;l7U*C-ks'pBH[Qs[Kh&VFa^6&e<H+h9)OR.EZfKo$J:6*q5<!lc<'@s6]Np>cRcm3e;fEBi.U<0/#l\$"NTB:?
%g))u%Nhf/9aVP_>?h5-:FBd>*aF^K*NQ=7Y58V:)YEV`Cc^g$KcfJ<#q%?j\h7hSV'1(<hK!K@U+/X'D5M"lWq^KB(/sN]ej2]LY
%.H)'>`/ef2'<$^IcT5><cI"s-Xm&2Ee@cLj<I<6@WrLq[g:Yd\fg":+,K1MK1:mUQD!@If4IpKBkg<.e'l;l33#b#0/iin<pUY#a
%ei]!C*ju4t0KDNim@a!8%mfZFE!ISq7+--de:.t%UL(jPoAdrGnjd(j'Z2$AoYufr9Fn%29n'OCN?5ih>prl_h]"^l_e'\L/qs4l
%[h/u?8]CnH]fIcboKmG5B@VKM`=R2TT[OK#g#L0[)0"36k[tBmLQ'Q7/=(JA+Fi/8U)U/Rn!+DS;`t[OcG+fb,B[bbN%p<%"@<-?
%BW6EWh^\r@YFu)C<rMd>I@f(UP(8BG>frC&`!)9M3^Pe[VcZ)GY7oc9)cWho3o3t%I]rUN$[I`oj,*1>&Sk8XPN1n[,g;nf*Nm#9
%#AF*:G=IXcHV/BRC8f0c7Z)je)56c`Ydk#G8GukZJD]apm]>^JSs+undX9iF-1)buVL;0DaE_R<OP/5jo9QuhJ%di@WO6$1JT#&K
%?Pdh!g@A?%o@6\K3=tO1JZAm"@\`Q(Q?FrfZ&IU7;G<\>fNIn)_oZV64,B?`nRP%%#)ns=XI.2fCm&dQ8_nT&@sd$64amo(Oi+CF
%r+fS[L@KAL0K^J[GRP584#)`^pTb%G_s[:]X8[Hrjlol5T!e@YpqfQ)DuaBI,^#)XP'f54.BP+fJ(:+;oBc:9/fKD,gAf3Q;hl@7
%c=<D%%G.q&i<+ucIMTEV0dA@tI\V4$oBaGGq#uhnqnp"aIf&=)nP;CKjh'u2ro'd4s5"gpiJ52IbE%%XD?uPs;N`Lm@"GJ?AGnaO
%U#P$Ts8B"UI1t&DH2-eDM+ms:J,<%!rUZZ]_o'69pu^W:c/I^Zj+%*uc*r1_iT'e#oj=<R`/Z\6FZ5jMA.j1@9B7fqG+rQ#A`5?]
%?C<X,@):p_>=V]1"@^ic[,CSM"@X5o;$^R@<"Qi"/])AaUm+5=:G/<Aa>/_XraIc0+>TS1`Y#8Ec<`oR74`??^d)`$9ZC&*+oa+*
%r7=Uk7cmGM:Sq968(RneicqMQH\RC[YuqXM=aO^]W8=SBlU65)T\Ka%UMqgCp]"c$:,FS+!5J&^S)JaO7N&FnqJ*_IE8u&%gd-lB
%%Of!DRC&[gUqGhH[0AH'Zr!"YQhW1u!<SG&77?qR+7>3Uhc@&A65L)JndXfVn+[ae3eXl6Y7%c:orLC\N#L$ki9'?E:oTc:W`2PX
%nu@kT[c$><#ro&"9k)o5Gc4-BSf-=NrKia`eitfKMn'!i\S"(K,iKlcXos4g!"ur\"o5>`dMP$<:^T^@Zf7HhT3jlj73N[9,,/59
%0[R;%T17!=_7=C\>[&aBO/3f6XU]<%nSN$I\0E@qNV.O%/>aIieQ_icP\-ULlf-jkp#]cJ=p=eCYh'<#]<KaoV==Y16Red^cC>uC
%RA"\hlt"+tgs4dF^J8!D$j2)*#9]/(Pg9nrl<-PJplG-pZU#6Di/76+\qs;T^?`ldSI+a<dl_OLKRg-^Tp_?9"h:l2CtJ^:-Bc-:
%N,6rKhK]\%?[J$^]-20nlP\p#(hg$aXD]saPj3Z!\Jg2ms17KBo5OdT%>"$S]SE(M&f].t!&`gKZQFR5Le.&t.p`3ljgYs(J_g.]
%NS7,#/2WirD,%H]2FkHjoXGj/7A=PYdH47qLC(,,im:2N.]Kg3dUUb@"`]D?_c=A2R$nU0*4CS_E49PQGKpUd!teF_U;WLL]$I'D
%.]H\*3lT0o5mR54_/nF8+;uSe:;FD7+gg2td5B7FjXZ5fk**V+/3$a)L([dn[PuU&?thNbGe::VN6ZJ#-S#C".%"7@ikn3M:EWdq
%[6kgF73tCH2;g8'WV%XNl_posE86JQV2NujP/ehI#2)q-<[CGDFX>DLm\mG;TqY$;hN'27,RYO[=<5Y*lWMaC>mFWaM=AV^85:q&
%JV+/bQUoLmieXZj-_6^;ADj*Oh#!l&DKAXF"NPi*I_22GdP/8k_6>)1B?:Tt\>gfQPZZ!Z:P,a)`067^J38`9l]CLm-%+?;$iD'e
%Xk:fq2&>5*1lS[*A3?K-7)ipnU"I_W)MLj)o3QD@l[(1q(_Z3A%e&ZF4-73(U4qF90l7,pAs-3#@0!(HB9e.Vl5GR#-L-?T2?PKc
%F[\84@%[hRaNr$:na5k_kRYCe?L;?r$^V+*G7s'P_TV)0pjg-VA9X@pL^$>QWLGf7o[F8!9N^K&@#/Mq)gN@DAu"l]ZM's(!UaWk
%i2g6Y.\^@'kJYgg!CX5E_DGX]Cq]Z`^KRc;8]ce]nnV=+][EJ0"L0^[,4c".DL\2&f\tH]R3gM%Jo1U]bPK[sip[sn8,@@Ag.)<5
%.$L.c_C/_"_d:;d1Kc]*ZepHXJ%RhV_2L]D'LAjV]-s&@$.o=>(&hXT"q9Q"0:tYGaeE+E7CDerH1Q,W?u+p[#<]53$-A<-]_&Yl
%C:hUuBIK94iqa#WFqEEh*>8^-Rp^cu&`jL#_%q[&GsJitl\<j,PQ8f+@0(/j!u:N!S;^m,a?S:2WeLX8[DE+Mp(%--#Xu%bG^YH!
%UGB^:*m*hlMi&`f1t++RUKS$P.4c;^M%>`CK1!F-BU`,r1<:?\X:_s@5lepTo5C.7CFXE6FZCbK+2c9-K#r8SnHR+pFV^tim$N=J
%Xg8Yh<!PKV_o`Pn=MsBlFA[V3E*b;)[#5Z1W@BEbed`FW)/*jF(V*)!L^A\_>Q6,O+tWH71g?"@fC`*R]5CJ;!?R<8oln:\k=DLI
%,uFV(.F6/ld^lY;MM91o8!CPoj0Ru;$*(UT5E>WXA/kpk0Jl0PQt'O/StW1"!$kO_VJ??D$eJ.[*`G1^,Y;d.(5DKA>`*]iWe4`^
%odX+E[90bY=+9#m-U'kP^m%Hnk%88d.!s4+]&fZY6\,:$(),Di/ABrMq0;KUU(*(.%+M6aZn@Hirsc!hle!bcC;p7FGrY$H=90VO
%G@W,X;d"ake,q_n-VM&h?kcclAZ4H1`%IN*E8pn6pI]1$lSr@7;aGjEC@,e*'-H8VnR7B^`(Mp[CZE)^re0?LG*>^nICO%X40fT.
%J,G#V$if29q\T;-*BP,;rO_d-A`,_`f_Xe"gW.&-po^0(rU]dNAMEVrh$ef0Y5N/SGi+NN"7OmknF,8BX)SF%Z`i>/^Lq2sI!aK%
%`Wc*sh$sD`[JS_TgXkn5puC8Ea*mpV=%/V8[`-4@Dnc2?Da-G(fWKf=I@9H_MN^"YFgpip4ZBfe9LC=p]@M:/]E!h'1lW%V(.N&)
%EEG/=:>)Ci"uJ]uZ_0(NqSk8G4aFBNrh0]%;f3?-+sk\>>F3g9<>_!T^hdhphi_#kdWoUE(dT#h-k[gRJAX"`^[!UWM_\:ir1E0;
%NIeaYn=N3*Y(85BktmV<57FA8a@>J];6SEn`md7ZS-G)g<+TTGXZYL,W?2L:5KLnr,Q`F3fUqlYI+r?2)Vfh5Tl^`7&.+lT'3/pF
%bJ-<GT"7r"1XXmL?a0DE9qn8^iG^W6&SgJh>/G-IJ5OWps&4i1k9ME3^66n@PQFF"mT`mVlFMRAV;$Y`7&kt=3/Y@fbHeEaksYL/
%4A>V';bla-iCdjs2m+Bq(.<SPFUh<q@45!Y5#I[dKt9R8S5`4TB[eYILn"VmV,FApM6kD>Q.W5`3=P4^LR`#>?U^V,Mh42"nrX`2
%i8Rk%'^POF.C7kMCNcB(dZg\"@IVC]D7P#n6XU0tTTN3SchilcC)`;1ll2,U*Y@^.e%L-=*_U>l6d;I'QgW#hUF.s_M*)dr8*$2M
%G>j(#.+k3&7O['S6/.NH<28e?#`V;CMqRRD^gI%S$0G&s)DZ'F"K0g/d3@'-pg2#F:p+5!irQKt%hh2pY=Od^D'OtWcKIntkH^ub
%HirHE!HSsCUI2-8Xn4$@d/%-Dm)]$6Q-9\*f;l;/UdDd0X,:s=;?/jPF-O`]".1@VB/SG)o)od.3]'8"=4YLHXVss]QI:sk;&-/#
%P"l->?I6lTpXajpQbR@b00XWB9pVh7%`!i&]5S/oWKO`7I:d$YVot&BTpD&nR]:G2pt*I*\X!to@V96o*MN)k#A:Ua_FEHbUM^_a
%>-OBZ;&U^K@nm]cRQY6(+>^HmHtCo4,/35+fM[UPN)>Z;@jlmA0f"t]Ck<pqOr==A0L?1>MV+_8$!O*;WABMpeA1J5&Iif*K)X7b
%p6(:Dgc'Doq)Ye&[qDNi7%pmj&M!NhY[qHeefn4&CDTcdP]5Ag!*rLQ=sg1Dfaf8tq!A;I5-;'ZV9p+6A(F%o]d!+F!U,<Ecj%YG
%j3Zb9c!;CO_(7\;T[\FCg(=Z'T076m,Y.<t*#kq[q]1Eo;'^kA+h6F>&g`i5JuVYj%G\hY+#29u6UJ"Ad7(.DadI?2HMMOWNj!cs
%1jsJ](FOQDEGo]bSKPb\R;jZmVA7+EeQ5#fA7sf>g$7[JK62W*']_WQ7,Zi+E#2]a',*9nTTU/e4Yg_^B5[Epbl2Ns?L9Qg!6]J@
%GkX6Bn':lcP'1LjB]r*L[e/..\$99>T=)itMF))=@YM/5bIt'%.>Q[fX&SZ$!FOHdBkYD%m$XVu"?qb%LZo4j#k/#>n$TKJ\_g`>
%L[N3o21(ONPkq=pP&]]eK+Vp7]MYlupGbW(K.'BDY&VJKN*bmpB%'YD##_UUrN=101/J[Fab;$^h!jY!c,H-!OhUn(9@PI),I=_&
%Xl'/ONrrHE/0I2(f<*"sVlW;60%L'2=g"MaN^lj?k!q/XEN@RISNeM_F#J@;Lnh5@Mi"0.\_)_5jT]g-XJ'b_ef"h))4@8b?a>YN
%>:=_"%G2rrJnLk1])<%<\UG*V.#p%qU8(r>a!uKg:U]9U(/p\IU3n0r@rr!:"$:;.GFhN84nLUoRREL7@r!6-!TQ\UEN;COZruo,
%[n%84E+?2"#ukK_Z?U9Zc6Eic4,We&<aaYjTW?jHfIE>X_?GHWM+Z\1RKkCRjAe[sW9k7:FL$2b^c/'#3CZk;B0+k/>lsfAaM(=n
%rY>CkU1Y-b]h8pRKnj7-"J_KGhKe#[p^56m6E^T@H$Tkb/_Q0&P*mOa(.kGUjAJUTl-kbsiTZ3.d.B>&]mB1[@=G#5GaqGJ$A7+h
%THU4]&ddgJ5TkSHJ(g,)*\n-h?'I3+>J9Xtj44ujX.m+Fo%-uFCaFK6g('Jd%jZ0H$IqY;2Mo6'&>srUa>7:8p$1MVN92II95cV_
%L@r'T0pbDBm]Yj?X^,ST<,meE"&Wq$jQOfN>J9XtUXh-`)[M-[QitKe[0U$;3I;(2:p<#.3d@]ZAH6%+C&``5@;rV=2u;N,N#:"/
%`B>-8a>4V[5bPHngXQhhDBRAfX/;1;8juHkG3b?f,E`q1`n2-Af'VX1O82J&-pV_u-a=^^6^U3fOpRo9WJnhNGJ++c5P5ZTT.qP0
%>XNS^_qF1kdiNS`Ad2-ec&!!^kDDquFqURslRp,T%cF:gQM!ZX*Cl=V$qN>DXPS0T@kohhYrp!:6[O9C(hZ9o=T[A.iPh1K\TH*A
%Nh3XZq%?"#DG4A"oO'LH]r@A9fA9t3GJah"oEtsoQ2Q3k7-[6Wa99,t*I'f7NcnIl4S6-(Bq1-IRVtKbScstAWIg-a?DhNP(]J'n
%/e@CDcrid+J$sUpaFgdK)1.1cNo5b35Wl%?Jf%@aXUb$3W#I1Sn&547]^G'(@N`u)p<Mro7m:!oWXCkSeXO2m2`)[4<#H=1mcZ(.
%a8gRGW(#;S_0p]GOmC*EfXuP"0f\A"&e<:[clMjZS+^Wi<$HWWScES'm;a,1pA.F(pi0:m:[2eUhKeH\GBAA1)>+b4TM<-(qbPe'
%*\7:\/nTfLH4/fiFW[#PfA5)lHL*.M`OIq0mp*`6)$B9<Y)0pmJ;P*_("q@nmL1o+P\EUDZMkP4#tU"lXPS6lf/:\UWeldoYL,UU
%_mKhDM8gutBJXB5jVnS)#I-n[XomMsh?Gl=Y9&/"W5tC>p?$&9=bhlB14`r;!>#k-VY>bjH$p>/o/p'Y16?k8R(W%CA&%'DSr8-S
%I"e?U("XZgdM)HbdUkq2Abag_;ul6O]YtL:Ho?<DaKNt/YV^$<(u<%K&E8h%&/Apo;hX%r*_E52Cr2kFWbU">;PDqb^%9m[aiqbH
%iJj:k5rpK>$?I>lW=t6gl8lD9V3s7:D#7YFec5o0L;_*s9<YVG_:2du=N5/h>K6MnTXqf6Stc2Ckc::/La,gnY92#fJd$[`7e;PY
%mFg^2DP'B?>mNLK+g?^]P])+8i6VqFWrlK9LSRJTX"T;E<"LKi^+al0o/)!q1TOT<rWM)0"\j*;Lk1Ytri.G"\3b3YU]MR'_sU`B
%G;coXHB=<H:l2TddJFFQ!3]Ygd'67s?9aa=fso#65YRWc;41%h`3ABN:sN45!jE'tPM-keGjKue.@!7*2)ee)kVefb)o\N`?a?(?
%LJA[-;YhiRra#07;lqNIm]>8jo[,eP"@]\GOKS[-nDMMV?@ZT#gc@dLSHKO1[(!:5,/-K3j7pp`eYA1Pp>E+U.c>La9QRWR1,2$2
%W!`F(>L;`*\Efn8^N`&FQiO^WeN8gUMGo1Ai+orHnR,F[(@X&6+>>rXL]VDG.M5%T"C5eki8ljd?[R_'O5m9L3Jmuq(0<W:"rQ("
%0p4nAI7Mp!Q/t7feuaaeMg$YBG%,c@BD"^.CFsJQHi.pR0m3W.bTi108NnZN*r;7e>Sd_ZTg)s;6Hqp>@6ZGsdsL&ulC#bpV`h8"
%r#m?/YWh1?n<:8QWKs#4;85P>J+qC/@*qK$ZR-"$NQi91?<=WXIe0eqCkrdC'7`+6,ljrGJ-2*][]:TIbIq+_`7\E1,#;S-Tdk>8
%Z?l2r!uRs51Va2`$q?1Z9&YMcS#Xp4aU]Z(!p8ccUW6/YDLcKbLRl]%%R.oT[l_Q@i8R&lrb1-pp'3E0UL:q_j=m$U9tZV1^mI66
%7bX?&dAr&;7hN9%Lh41)h$318A*o?hMIDdrTJXNsG0Lc[bAV@SAPF+R`nOY0oBbpO,]#DAh4seSY'@jm&2s8Y=(12IRaYn6"RUpV
%a48\+2cd+'Iddo/BV8Y.5NI%Y.>%8NS5jNd[G(!0^.>_q=e7aTfEojUib\84UH^>Ya7U41kiQ*BGociR*;u7]9uh.=lr*$r9jf]M
%;Z6i]ms;'u05OrXp&Lg_VQebN,K?AK\>*8o;nmt3V@".ag`-Ou-ooTRl<,.P;)-GCl?rmZ'huh<EijU%"g6P;>(SfAKKl!LL'0EB
%n0K:;k=+]\#b#qBH1BMh$=l(@b4SjpE0?H".^mr?$[B#74l_WdZBWs.*;t7L,&qcqml^5m4KDLVh+NC5!"2l8klZ',g(`J2,,LYl
%KJ`9PdZH=RY8hc6NR=d356Yt@8(%K,9".*hX@,f94qW['XVjYh"EAjSFcXWQ$U!sjZ[1f^LS.IO-4^Or1Y_,+P\II`5/k(bEXsoM
%*F6rr[Jk8?gkWd#aN2Bde\e#mo*gt*nor:G8s$OT2lII$9cjiCJQ\@BUpF:bT(mu0`B+Sn@^<hs)#Z8<dc0ajGZS3TJ2nEo4^j<e
%qI*sOokI=liV&;"0-'oClIA6tC)OF>1bg>umpVktbku3TEhMN-L')GoT&k/pG8ahNdpm%`I`$[3'GXRhMU90P3d#_9AA6S37a<*!
%J80s_,;lDB8>(9(G0+26G@U1.cVVaLBN`pgXpp436rCfOY6sJOFK-nN<!tQ-bj/Kp_3:<,UN^#I\A-=$`skU!oG5>`UH$1_)FB`]
%]7edZ%-dU6c%@roWXp,[Z$Q*,,L&(/+QF8"HFnglOMVT^dNfu2i06gBH6Tu3[;BMkXP+N)oAK?FOGPUWCk4BICT=i).R5Q>O]Wsn
%&a&Tci.TLe.Z/uJCgK9sA5?]o%R$:jH$p5`$6T[]&,"MIjTf(9*.!&N\ilap1;%X@3aF,.G92*-aKbLCQ,m+pquUktDB5ZIU#f*#
%>(IPAP2<,`%*e.Op2]MPjC:tDY9*Q)"[WcmJHAeG%gNk9R_#d(*e!B)buICUbNkp>Z/1OcQ]9D)N]]BImB.H@NYtb*>RP@$)[(pq
%BB*P_!KiISm-5.#UD<q^[ZWC*gUq^n9eMgf#go!9h$i]R0;B9Pj0Cn=X-SMT8R:HOoK$lmiXO[G^%:07-;jjA+R4?g77r%#6NB&:
%O@gf1Pp!Z*[.kDE]I)/0Y;b.2[D"JDp#(HDhDXMlp,omFCIk[h7)BT[(FSgO$?Ocm+DD.Y&CEXl%._^/SHg88a\'O*+uh,\"+`f/
%C4;>g+$q'4n/_0j^'8i=_-E^]Jb:Z\Z[)6%,<A]MAh?mRf$S:&(+Q5:%8`dtm7>a8KVY6b))b5;MtXK%#>[hX4SIkb+[jM+kUiYK
%N>]Fj`9@\R^SnUqJ0!MKSZj>AJu;Q:l"p"W_2$)j'mEJ!-e/X]`W\Jh/mjQ;Js+CNY5uP&D",iMU'ZFae0I-$g$5+u?N;:n!L!Y@
%YHd5Jq13piG^g,^%CO/_,N"\laWMNU\W*r7X,!;:H*spY:D`l_Mkob)$j?e:"RaXWbi3[u@D;E$dq]PoA@5il0@,U6H0!B+bel2f
%]"$KV9]&<s<>jAk,fuDc<a(B[[&AsJ/,56gcH5.t"-<=W:n]rW)bm6PqS[b&$9HfZ;aajb1u-/+*JF)K<e*HD>rZ,dBmVaakCEl`
%-#u+F3f_[d%t%=SgJIS/-(5)VeW<jsWEd2uMeb*K"rgH`7^!k\A<'[f6[dgSq4&JVaam-;BW+iU*KsK!9Iq6\7`&]1/</uHcK9Pq
%4u2f#%4]1j9/"[5M1^'SWf=BGI6m6+^N\c2qBj2&U=o>E^4Dj*M[(?Q=VNRjf^Rsqha"I1WroKF/UX*bQB`KIPsrGRA\m4Lps%[*
%S^fe45?N<T*X4M+VU5)V.=(+_8lP!V6uX?N;Eet3R_68l+2\]7)p?Ole\_pc*E&os%dQ(.2:P/)A4)`A2C9W_6s;Ql?):q%(*IE;
%1`8;MEF<;KcD."_T6=b;GCQd9_n3!Ip(s2M@!11$nJ9,u^lMq=)<ANP>!Et>HLLq=f8:dkh1Y;BlH%N>3[>`TB(['Hoc$B>o(3j-
%-*5EIrm@5r)nkk$")f?g*9p5O92s+SDMiZH:fpQq?qaSTJ@X:6M4__ub*1i0NR=fI*aOB/s++"NRb&r>ZZHIS1A._7EF^IIkS-M:
%;V%I`W8K(I+CW7/k+,!`EGdXq68\Cnob<)=$s'qcCoD"s?8?\F)j$(%7&hekD^'t@0m`N6_^dLo+9JEN)r1],<``3+X($/N8sgk`
%ZoEh'Q=S[!a#mdS#4F\BLaA>IK?di2]/_3qnWi$<ZKOWeA;0dsh<q<@*_#8/+eZ*FHM,>].mY4"`:;%ddr2H'.Rk7E>pR:1Y!;J]
%jCH.mO1E69Ms&dHlCE][<j*2]7qQF).eJl>8?Y<6-'H2ZVYn6s'<2Ak,:=mE!2St^kT!B!0-:)q;?rcT[5oTGeUjo&4.9GUTt"lk
%:GF7X7CSD)$Ug$dP@-N-]^OL*oj1dF#)UI?'JWn7=+Rf\@%tOh@Ys)ZEAfWdq3N/T;2f8tLhAXnY9%rRRs0PeAC.7#l1j0m]+bcu
%3scpYfNo00CO$rMf0Ql74F]88kE-"0<@Ls6?EKc74[s?]YT@Xr`N0kCgean'\tGUaDh5tpRU<kn2sN8jX^40cTVkH53c++:m>IqO
%d[:*"-G[0T4sT,7)VCW'7DUDOPX+u6eN4:k\KQug3`Ghm5YKQ:!51E#+=Vl@7JI#tNuDreqGU4$C/JUu8F<Kb4o?_"$'7?FUc@Tt
%_I3'YJl%,cju)V6F_K"SF=>OTTR<.fES@7[d6!CQ3lgeF`eS7O6QuglMo^EOP'K%3A38"gr`Z^#-hZU).c;S3'H9%M]mB%=+ZY7m
%Usak?>B'47<]2>4$!BO8!Ot2e#CTsTbNLiKactCN_<m3<H0bbQY.;B!EmQEf+9Pmm%G,>R#4h-%)cIBY$[Ml]NgK:Xf"F@%e)s3(
%*d[l<-$U.):MD`\bfbO2#]#VQJs=Xr:NBLo_2TE<5Nb^t-rH)KG@U9Z@o"D7+\GXkX\5REHC/YE?uJG\S5Fnc47#q9V5Yn1l@]<c
%^g/3q]WleQk\"]]_Eu3m),L*'@Th9AOo4@<&3BD.e/"sm5t0?p8]'60DcW0J<ppCJ+m&B(^A;-iM'"q/(&ZZj'*Kl4oDhJ6^j6RR
%lO:94Ef!>)eV#DS1,;Vp:P0Ie)D*6fothA0fMX:_+JUL#M\>uQ7H^;==:-M:%hb06e6Wd]!#2gEG?0NjMnU7bjiiY(E.,%A'Vp/_
%(lrO./8g:n345QpKPCY>3l'0Ep5fpIbnO)3W%rTFU<\$#Te%$.aS+DD'X,UU:;@DeK%N!Ya`^"M=QZ^-_hu7@K2#toF+n_DVIia@
%?Q.gl'[p:jUbh,K#F]h@4Q_$!QA=k:i6i^hV0d`hGMSrq`E*[@bXTlr$:^T$lmmojJI9_A-;(]A-:,lqn``+3+C&a*cl<EfYim)&
%T[b<oFCSdO"%Z0lkEoE?f1bI:i,L2a\$>eXdT[A1[F_lbJ^;6!(kR&h`Doc@d1k+L-kVOk`n!D)K(4KN!YKuh4b,>8BD$#SThsRG
%.q?V?,Ej0k(`dcq;S`>HHnnOU/FI]`:D`%D1n,,OZE\_`h`1Y)1q#]7mt<ZN<E1cj7mTj;[3Fj-,j:,lZCj3o](Cafrf,I/r<=;c
%7GB;E0dqTN_R;^7K.8;P;Di"V7/N<ngQTTB/P6`9+T(rekiH+i4BWm$dC9)>U0ng)MS-)8"SX-._)>7UT\GIUa<iOlfJ'_<HF;Y<
%3t6G?pd.XafojR0Nt&u$6#7`s)djg0a@QSnOn>PKWV)h4X8Q?Z:n3c(JJrlU^B&Ne>&$X6h@l=mJ8/S7$4<<@%0)>3m)J8>DA.fQ
%9i0e,9gFo-JrQHHcPT%BJ`EiC9bZ`cn,tgd"#`V%GFL_Z'ZL0G<]+'\Z.;gK0@MQISJ7gr!'i=[gffe\-`n9>bVc$<7^$tS$+EYY
%OD#%C,!*fBb(h^Aa<u&gLcGZaA_tAd2qS``c']L7<R+XKp)AZ0_.8@X<#.n&Xt_OF05[?<LGOF`kq\HbgCW[$)K[lMp4nXPMk(%_
%K<?<C'HoQD]KQgBe6,<h#S%JOOgpOqjd:u.$s6rM[\$9#mPO-O.>5mq#2;TOol59JXftcp&nDsoYd]o;kaL!%MUI'8WGIbX>J8a/
%MN>>@9nq#I#Q]IjW#A#h!2sa-qUJ_e]K5@3S%<em(L:<'o9mk(]hZ]!AdR1F2QXQ_lG[>a,cDD'd[32!;5-(^*.`s%Wt^dUXW!,6
%1S^;K4\`4O2#YuoM(Sk<4nA_E]hc"'L<]d<h/2ogF;leO6qpB0H)QC<14$@[d%:Ts"4ZOOP\^PA(0`;s8SS``JMP_)/@UD@=G(`-
%Jfm.U=8P]a!^caVh<O_;et.+BKATAlOc1Md7O/-X_:CV<Ar\Kd[:EFVNRb*.#"j)3&.0_2hmJ#XQ)%X!;-'>)K>DB/$Sq\#AXe#U
%Y5+e;gK;/EmidS3oa?klRPs#95jAuH?X)HeerA;68q?n.-WhS_S$(Aan>Q2)2L;dc^fd+,0]^^SX[,-Cj/3t]Hru<Vh*N>+'p(Xa
%DgJM?d")Ls[dV6$[=5/*4r[cA/d5%>bC_=_J8/!G*"Z\*%P7fTR^:@+]LNV@-jASZcW74jEmt/"[K\"_S&fO+5IfK6@lT;@CK7Bo
%8mkiUM6IPk9/D>p'][L(jaMF*[R<uupgFJ?a/MnC/!VCZa<:H"WPjDd[SW5jL`f!aZdl,TLADf-0pE$P)a&WTUIYsEV'uE:l__5@
%CU.j9cpWbC$\UC)T1rYXoId3@.iBq#4tu_(J(iW7m1gcbY:FW,JrrG4X\a]OO>K=U:^TY4.D-sRI<JXuHHQ`Eb?*khV=\2qW$irc
%mkBeOfi:seYlNj<`-HqU)<[V[_'`A8'($\b!]XDtg@'87:nY>Zf6ukNR&Ei&d5u:VKIThB#fPJ:"/i)k759:rMt1]VC:E/oBs/!5
%lJ>EF$Y*Djkf%$DN):!ThdCt8.sQ7'h54N4cKMZR^ND,i2NN4ITI?AE,MF90ahL^aPr\7iURJll91.Z72E#u*duu]^D"P\j>XA'&
%(sh._EPkC>$qlX:Yj%TR;/3dT<G5:IFSP*5CH31e4moO!A^do1B(]oRJ^RPk0Rt,Mk''77Y%i8Q<nku5V*n/j!m&OMgW^\6kA7!N
%B/ZseRSAFPe/YfoTYOVdmDGu]bT+r7Mf-m:eXOgG[@[Y.9e#DO-Dc^LCV>2_3WOH,"Fc/Y1=7]WC$U#Paq(b9lQlQ<j#^Y?3up.%
%D-gG^dm.ZMNQi9s&a7U;qCdId9UeUP'A9.'P-:PtRSUkRF-\W*a9e,['qj)K7iiLP#pVHu]\7"W;br]V$6DQ1C-CeQ%Aq[1o1\@B
%9IG!Qb3NJl266l=WHM=Gp)@KfE@qC2hD4G$3V_6!8E1'(U]rdgPt[)$MUW_C94$[inlhC;\cg"a.h+tp461W4R8u:<cE2`sSh;Rm
%gN@H$6fTG7h<PcUl,MkD[IohaX)I4_Y/d,^'@^So`XoH!lOXrtN-/X[ZG9%nLG`[4VfILG\MB@k[X,(5dVrh3(n[BtQth7[!V3Vm
%X:M_()n)2QQYER)EC^cO:0V<,D";VEOZm524K;A7eNOtCXpCgD"EPaF1"l6D9sT$L,#2WV?)llPG#kg>qebYL9%5G+*4t,QO4LOP
%q6X2PPKV9@q'LacGb6T,mfck2B>i>6BD#i'ak@kD^"V.oXVQ6^K!hXEakE[:i3l/c5d3rD=CS1ehKo.boPXrCF"jld09'<+o`;P>
%h6n0o2\`/)RGqnPWhPrPB/W$g\d`3ZSJ&YMG#kg?S+jba^YfQpaBhaEQD6UbW;rL)cDrbVpAVd&MePfj<0F4:s4lhG?GCV/0`=?T
%Vd1+h1gR4pQoV7aohL\*P''Xq2W>DfJ1.dA@O^/:IH`=nCFeCjrO5)_Ppe<X25-P>-L#&=&TG?_$<]_4-um.1DNA6feH?AI.'N/[
%A+FB,_'P@g%8W_rHF2i!`6MW=m?+@,peRS\F$Bkj?n!;ul1N,G54#@Wm5MEeWd^UoBg`fOR=[NRR=HdJ?`(UE)PdPnr=N'a@=Qt4
%=ElTHXj:ok"aGZ!P/78Jdq'c2=NHp"cNHp,V-DC)T_Jo><WQ`@fI2G!/$DQ,X"V3KZ8:D-AT$B*3a&-o=255&\fF3W6Hb/f?r^nm
%j'+VNq+%,@M/\gm4.B;uNS8$p8i,Gm7r,#gV@Xr"(.Te_DkUHn$H#)Tdk[&p!:dB7A7P7H[ipJC`KSh@?(asWZHaVra^162>^r22
%):%k8_1Hbj1=]kV-DS=bBD#HChmsN!FY0o9;I[&"f]>./budZI7b:!NJW+j!3J817_Z"c/J@eo*:.AT:aV>Yo!IB0Pg5:hVn9S+G
%hP(54Yi=4GPiZB+]p]L/h9.-4[Gm8-%#9q<3o81`0DBfQ'b^)3TiiI[.c-/8$RE?*,3nB_=#)VC>/d%<q,2j^.rmB5XBt:<'VU*6
%#hqJq^KV7G!*Ra'(=I<#(J,`JXWnBf]69GoG5dKKCV>2W;Lmq@Pos&8:ZlpE"_tJjRH2/2EA=Cf0rS<31?_^)7UY#%40--mQJcph
%Oj"b.%:B]3E:_f&$ELbUl\DVs"3Hgg:QpS(0MaS-)K/W/>_3<;lNIS_g)7TVlO5hU,&#.>aX.]UQRu;G!.$+7;sV@eC+'tA>Qdhh
%&VoFh`e9Q#MgYf5',MX+M7$Qk80lUk(m6*fj-Zh]%CnjdZ;2(o9S"Mj&17S$`os7*^NC.`?Gl*rRO?[/%JhPPi39d"'HuAg.Q?`A
%2Ou$9$iXRs[eJ)09<X`S/EI=8qGf'hK[_)<qB3<ri<PBH-=#,K5cqj0<3uD_KVgef:GXk\SsYM^Mg\'o#oP8Mh.q&'?2T^"mnnl:
%f%I[QC3M>eHGbkUVaq(J#%.Vk(qnYfW?R:''N;C!$OY=4Hh6#\.S"@@>nJK@*RI2@Y:$K1,isU`I-C*/BD#03hmrq%XC]Fs=/T_7
%NlMd6Oe^opAP5,<1_el9&-]]'UB#7=P*$]Q0>(_H)VD)Z>*^O2B`gJG8PTjQXc#Wm6#(h!=>h,?&\tsXH!9rN6#kE!&c&>;X&lph
%S8f*/Z"i7E]&\b79^+OD/[,1)*n8FW'!V1bY&L]9$enek%^34hMqs*h4d-=G[]Q12k4[l#['>"W'Ajg9qcVGP"Ji$/f0_TGr6lB)
%?ko2j?L%/e(BO4D$o]tECr:QUa/a5EE=)omL+gs<!Li>S3@V(tp@bDXOFlM/oqdupCHHqB&Y6ed#*]-4lF.Q.`)a4P_9<fPT+\^[
%"N`P3D0cY;GnR(7:Dl']D-lQbVXS-gNg-$r91eQeejhQ6Zq2/@O?X$^28bCa/V+'fEQ>nfWcRlMokLskkKFg<'mG#'K$*^HbGIfu
%Hs!_G@9jYuLi*<.0F4OLh4+)_<\JUmNQV=.KQ(toJOfBE!8kR8_SX*U#kV'3H-CR\B":5-f2i:DQKPhK0_)BRqSGn&dat>\%:fg^
%Za^b34QFEa$\@tO!d+o:';#_U5O$Ht/XHoaLnkFrZG65oB<,+Gh2Im3#uUCC5FO7lH/\lN]c!G>\5Nj9dg!EqcQn&EDM7_f1O?=X
%-&Jm^gnViaU$)l(\kJ0g4blu<kc!'tG8q/A&eoG]F)`-A\+[i,V/F%j+d>:^(3An$N-m<0YUm=)a5*+Q*o_[O%?s%.s.4O:Rlp_V
%GJpFmRkMJ6LbZQVTTcBaO3+7[Ws'<T;H0O\fJlQB)2&\k4h3P=P-I<3,ab@:P;BYDZdF]%G0*qLPCrJ"ckU^c;ZhJN"*LeJrTi-/
%Q!diNH?N+Fi^113HF;@16)>u]S(!,mCe<3X!3R2qh5gbsPR1O*rf^5k!b76KIXm\>f>-))V/F%j%BMRkKGt7S4o1!o`P]/)T??/q
%7mdh@QH+gga#fG76F?lo=^X577PF`t,Pjm8ApJ2^0YA``PhEVDAjLZmhKs%[:I?=?EdK9SauU"O]m!M\G.W[:Li`bW=>gZ'0NGW1
%U"],QT8:oJ+[\iL#!3`A'E>@6"sR]T(OM-Bq8#*4g=1kgA`ud&_q(IFn0#8LF^TKS.:AZUR@UKs*X1"*0/OWKG@(SN3A,c3cU-q#
%eT".4JY"(f^_3kLTcG1n!jC8C!K9l8&H_/]=1G^<a#Y&7W5?.BAPNXf'mr<)5pck;(/Tu5QbtO.OR+5AZgPA"T:nrKDNibN"WE^G
%a>>T%@Udu?RL\al>TYldW.:+MlkV#:2(fihn<*)SCOtk`lPYS2lNMdH'h2#hb$(p5LRnGu!p:MqHuG^,?tWKVYce]?A3m^TE4@pX
%8BR9Uca7lLF]Gr"K4Nj^2Oo`GGfFVt;(SC1BNW_$g"T'OC$N]7QS:ND;[D@bL6t#UN`1VDXi*O[0S:>fLmb)_e\XVJ!AYG\:p]!-
%_"^$n,tX1/ZImffo*\F5&]NLgo07;Ls7s5l4r2&f+1FVF*l!0.^AdoQiE?Fl5@AHtF[Plqa'WI(H..SgLMsp*nS^WU`7SoG\Tlk2
%DbgEZldhhs]YIFe=XR&d0-jk.[nWnYUEM#>eK;j>l(k(7LW!C9U]3P2fCf%D>3;pskIO$',Yq3f;?8cJoaK1s@_D65LZsaui-&_=
%E]Uc&f!>dVV63eb+L6RE68R;kRDkZ5a6^b,<$l+Y4]?SD+er!+XF`]s]L1ULcI)VOoU*:FJ%=A)VeA\C&d?iqf<Yqj@"q\6dVD#F
%3T[mgD)LMc2<^@)SJNerlIibDkUK?a^ae'0L:l>Qp&o>.;V3j?4EC#un'O0.*k3d'U)C8ukSS]KB>alf,r&R\m!(nG.-S-:'MA.G
%n1)S-g`c"rf,N,0lO565#^,@VhZ<7J!Q(_=qTb4ahUmi)[q@74Mb8f#>T$+33%3H%WZPXNAVsFq5.TYB^s0+cFT#^t122>.WFYDY
%f3S.#rI!aWGjUI0+2;Sde%g<B2%@32?CQN'5-o5i]ln;bDdPT<n]1*chu)[+RGf-Rh`f(@O^:,mms>IXs6%],5aFm1HeA/s3"0mq
%p6fC/_3i%Z4pCAX?oi'C>I:+pebulqMN@,8>&]=?@uWj6h),*`4>"fj*RU)Kf0Nps@Wn[g6jcD(Efj`u]?G-?:1N'o:b:$NUrqX0
%pJ(.u(8"aXPMQ.X*CR`#\CQV:YNsNtLZ[qlR;sF8[$!VXl9$u.EA2e@jfEr[]I%Z:Ps9^=]2-/7ICTsW`gHebQ(uR<IEsloY.o.U
%\[#O'f!P@8dIrRr2ifnaenn!cVb?$o+jo!s<eT$1\H0k#W?cKX$Y4XEW997;&0Os?8gs*%QWj9a'46?7SJUirW-+&0@0Bj='^"$?
%%Z!_DZoV2,-SI%t!G#$$$MKH*OFlAc$m/*@*&ue@V[<4)Jo(@Nkl)VlF[/6\o*c7J>L.mPOs+f^:[7f.?1+n/!FH*s"MQ,iHHOe!
%NsYaCa5K6Q-C4Hd-icY36#=R/o4C#LLY/35DNNHl^MfKJi7.o=fA8=5I'r\W2@R6A\=]mX45H*LBpg*mb'FV1B*,hU$=:MjB&:l-
%VrRt)hJ/UOnX&Fb<TiN@JO8L1;Y&/lBf._U6C^k0kemutA/5)!!mPR6@@=K&OTib4W?CD-c`4p[A<^c/&r^EhGR0!BlR@ZkOHF,Z
%(V.s,J<8eB>aNNo0T.UmKcc9cEc'Om&=BR;JM_Na)tJ$Z,a2bAc_>/g^V$fo6BQkRJ_l^7D!BQm5!q]VQ%51=_6oPmQ!M^0OtW!n
%4`[tahnc/4pYcJ;c2[tK2#Fdn#B2Y<LdCU#=Q[Z)1L52#(nWG[g*QV.JilO\;"AI_iFHq3i$%J,!qH)ar8))f-Rg@H?VsJG3[\em
%S,O*N<PgX:Tf6]Yp.LM4l?[XOo,;2'K3!U\).dt,@l[Kgnl^=C:!pfFSMY*]qUP$A#[*M'-I4]ajb"/kX]#m0c159=`Ln2a&F)pn
%?"b)V7>%C-Edfj&F7:NeIc'u%J3RHe;X8.[mn^N,@ZS?o@B.]qOO+b*2aoPM?+XiV1Y'Q#_:Kf\qIRo#LA>7=\Tg\,AH+b3dQQ+^
%-ZY#^AE*YBgJj*&peLA',iOI<^Q*JZC7jE&7?QQR\38s&rPrJpC@UGh2._V-Z;arXE'n]&]#ofUUOgq<UqSS/Y/oJ8hBA>WogM9:
%G..2j&3>f@?V^^OattDbJ:Y6Cb%iok'nNYnMHg'SB>%cPPhJ5W%0^:ZhSc#&NRb*.?F,d$<U'T<mP\#F74>V4j_<F"OG4R`$cNe/
%J:%t#/8.)dUN/8<\^+s&EIL?B1`n<GDWGIZR$$52M`+)'M+EAkdc97A3g'kiA+a$?_'mhP##U>FCK$bF`k*"[eMrM(ot[Ia=pP+u
%LTum2EUf&*WQ]:>?9R;M3FrrTL9c0^`N60?,4]!IRLU+NG/3Y?=Sr[m$;A/gH3^W$dF6IlElt+GqHec%f6J]K3Gd]G]-hRpUDB?T
%5U\-iJc2E2L$<FGC9MX"WdC+h%\MR:%4kb5!8_,'XuC(WF]1*4B7%IhZf5@&_)!=1WLsRC<R7BOUD0Cu5M><W8kj[UE_gS#](W7u
%aXuubNRf-#eb>e((r!E9@+G"mU/P\bVAXFXT8GN?r+.DhD/<PWl(CH`UG^iO.+mh]@<C4_K9$m<]T!YI[<auEEoc8sFTS3N4&\(=
%0D@OH4YUX6cG&$],`mthMn0mq#@.XCn2TQ>gF<,)e2g`RYOK/oCgQOOYoMh8kHXDG]fU[ah&PhCJpr@'#o"q,D>3'M"07#KY*6sh
%cZ5i6NS&2"ZK4/-.#RIY)FV<+Uu<Z<>V"+jYmr@mlR:=E>J5@H<tK)84:(bQZ*`I:n''!)nRt5lQD:jWH>B/p-YK4%o%b.rh!OAU
%Bu&\jO^g=8W+,>r'#>u/_U+jHh"6<Pj*[@1fa>?(UR/SU4K\]@5V]u-HtKu'e806&GST8naAXkDEk<DT4YZkf_gSh:hoX`+,1TY+
%nPGr_IQ02F#e_/N7OAs?+BWPI"?m<i)E*-#cKN6BhnsD-#Z+GopNelO(p77t99_bhc=f^NT?jrJf)D8Kdo4n9A+U7;pT2J6,e$<p
%8[)Y=pMX=m)mRo;Ll$qcQ.ot"(%lE$R?EQ[X8S(*1f9cpA;KV(4cn`:b*`Q^"7!T/&_DRc-QCk\,Y@oib$rBD=hXE3O%<5h#*\%+
%Rcjc-A(iH+/Bl[mbhsok7)2pY0^0B90'#;LVQdG6HM-d&38-5CZbgh96u(^./8Mpj*!:Hl#mI-u7.gP@$OO!ZEl\c62L5V;H^=`]
%pi,i9M'edr7'nIa-<+trVKQJY+N\+PEb(OE@6Q'.QTO"+7,h`"h2o8R$d[<4:@4)7aK"-._Hb\tp\HkE1),g!ZuWHtkD>doc[mpD
%LhNL\65p*V8L2BslttbM!M_-O4[7\!BrUu60L"Ar]mB1qSY6l,"*H0Ae33BFh%qKP<TGG0!?6I$KW'9H"`LL!_=&SY\[X86eYJTg
%1@Dg'Jp3h$[?q:j0F$YhVd--iOWkY#[W(]f(qn_jl.NO.Kt3E%OS9S]h.c^MBmNB)FpV[$mFrd!r%pH=^%5d4*5#D(PHmY1e7=II
%o(8/m_lFYP<CB?^5q2>'r8p"Q?LNhZ4o.&2C'%P+kFA1XA8;m-E5C\?/Q$0bHd7J/[7&E<b+-r#kT/Helr#`PM;/<U1%W2Z;R0fH
%;n5_g-B"YsZV<O=lrP0pO>GQl^"i'#p-TG2-+hYm(Q3ec*'AB]h.4.K!Q;,j!H-Akh.Js3c:77bf3@aDJ/[KgVP9DOIK3BA8,un8
%b"m\g10JiQ'c`_JN!.EqY9&(eVR&o%hNfSL-!b\5Jng.ni2L/+On]Qkm$[&/MS;L)7do7n2%2LEadO?]a,4)H1L3Ms/0)Pb'A-;/
%4a?;bKL4M"h%.]_D6.(3GPB<^Z5u:-%8+ef=juWu&]f!X9+=;s]CNQsg$e;j3a9;hA7s=Rg/Wa$pIBSBU`:E)dL#<YX'#W>'jMt/
%=HD'BRR>Yml;=j\-`\o77diLRSo#Lb>c)<;2Am4pkVoeh$=-T;l3?C&WLEmg*i&U\E(^;&35U'q=hWPX&IbOtJXt8tePKk:2AK19
%J7`*=1PedE%1jUcrJ!I+0Qf:"\_"@)\-@&VfgiZBJeNM\NH$p;mIUf0f]b,#8+pM_Ci658fK*0Kf'h'uB,X5/CfBL:?N[*$b+m!c
%X>9k>>PU!U?MCe>Z-c=el6#;-p$1M.LK61VP@CMB;2+^DUd]DkZkH/6]>kS!43[$C9kdn]ZQ#Z`E81+R+T&a(0k<5(G4m_kc`%KO
%Cd<X$2,2H&dK:'cU_mN0j)"C/^QF1$L-d")n"\2MAZh-=5bAg7p6<fGikX)-#8oIa_?+_&D2d=qZD.kB`DsW*UYT6p!PWWWg#T'm
%%$i0U>D/dM$#J_OH4&,3nMXE$*dn=C)<;k9Z9qWb&Qbea"Qi(Kq`F?=RdK@\RqlV+#45gI)'M31XPUe^;=k5l28K8^D]W\NSZu,k
%#g^N'd:_r'nL"YW`l$*aeQtV;4-GC@JN0[)O$7iR>QuK#1aX@4W-n3(:Nb^5Zm7!7oqi1fps/)okB[40NHXfgL,cmNT`.H+Xp>DR
%VX"@kK8&^=p;0`rP@S2iqI=%.lI!Xl*OM.NSm$T0j7'%b@qYq-.1d[j_*Y0pG`"hY_`n7^94t="nG>jPQMcISKL-HLW#O.GfEMWl
%m=%)e]gNUS3Md\"1O?UdW$F.V#Yh[ZO$7oj2K>L^@/$C9'@8Ha0#r]#B2YdKXju+0Z#>TXH*Xb3`3fnBBX@p!?rf5_9PA/OFmoIh
%K"3,?`eob.Jh^ZraN_E'HM-Ks/slM5&dBr&O'G`TbRgYgTN<?Y)4'q0UefF>lIL$a0mXA>`@ho*3uYOpk%"]?d"8pj@jVUI67WpU
%ofh-3'2fDJ7'`$CN*bm0B[]N^%o#NtB0Z7Jl12DV7=@=WL7s41T1S@MVZAnm#*:[\e!&$<cZI$-(b&p.9repmWmoYdYW<S,N/:e3
%o`6hKQU!W_?D<U%CM38(OU%[Q't[9PJFW3A#U1sU@].3mFRD/prAJp]3>rj>d5"un/AJH8#Hp^ONBIidOQLYo,7q1Hq+o4dWFt&^
%&3ej%,6jP@CS>A+al_\['0ts:##Ee>)c(_gS/\#BYf5hn@/*ref>T2.E$'Y=)jC#cjM/WcnOnB'h&hrBDuX',roqJ<I/!Tc5Q(0N
%hld8ls3p^lrSbNjo_lQ&cQ@W4l?@aVqtH_4Gkh9Y+7\Y]r3,dc*rc#b%tFW:J,AJcLVNkM^\o6:_*:![_:N&oks,3gYC?6G!$)g8/c~>
%AI9_PrivateDataEnd
