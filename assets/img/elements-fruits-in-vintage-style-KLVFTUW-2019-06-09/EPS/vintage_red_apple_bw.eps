%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_red_apple_bw.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 959 519
%%HiResBoundingBox: 0 0 958.3326 518.0865
%%CropBox: 0 0 958.3326 518.0865
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_red_apple_bw</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T01:12:30+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T01:12:30+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T01:12:30+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>140</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAjAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUBruvaToOlz6pq1ylpY268pJXNPkqjqzN0Cjc4Ca&#xA;SBbBb/8AMPWtX9I+X/T0rSLglbXV7yGS5urynU6fp8dJJFH+/H+GnbvkeK+TLhSG/wBL0/V42u/M&#xA;nmDWrxrWQM0VrcW9nbIykjhJ6RFnAyns9z6vy6ZGr5pvuV28qfl9KnO58vxyJL9m+v7i7nZgR9oT&#xA;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&#xA;FX//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:0095522BD6E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:0195522BD6E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:97a2da30-ae4a-f74f-b645-dd672702c0d8</stRef:instanceID>
            <stRef:documentID>xmp.did:4A32F49441206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -518.086 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 518.086 li
958.333 518.086 li
958.333 0 li
cp
clp
[1 0 0 1 0 0 ]ct
334.844 382.942 mo
334.844 382.942 329.801 391.774 327.816 412.977 cv
325.836 434.176 318.887 444.833 314.547 455.168 cv
313.566 449.184 li
313.566 449.184 306.438 467.286 293.496 478.918 cv
295.488 473.368 li
295.488 473.368 283.574 489.122 271.07 497.786 cv
271.16 494.055 li
271.16 494.055 254.051 508.571 239.77 513.465 cv
243.23 509.071 li
243.23 509.071 224.34 519.821 203.141 517.844 cv
209.922 514.641 li
209.922 514.641 184.457 517.45 164.785 511.504 cv
163.816 511.215 162.863 510.895 161.926 510.559 cv
161.926 510.559 142.316 504.145 125.719 496.305 cv
109.129 488.469 73.5898 477.586 50.9102 458.801 cv
28.2305 440.012 13.3125 424.016 0 419.235 cv
0 419.235 5.40234 411.161 20.8359 404.801 cv
36.2695 398.45 40.918 390.723 58.7813 375.852 cv
72.457 364.465 93.2578 356.735 102.258 353.731 cv
105.012 352.821 106.66 352.348 106.66 352.348 cv
106.66 352.348 112.773 345.786 131.891 341.375 cv
131.891 341.375 156.77 329.641 166.125 327.997 cv
175.48 326.344 177.301 328.254 188.961 323.676 cv
200.621 319.094 222.348 314.379 222.348 314.379 cv
219.066 311.317 li
241.777 312.586 li
237.383 309.129 li
237.383 309.129 260.848 310.043 271.891 315.887 cv
269.012 311.715 li
269.012 311.715 293.449 318.625 306.594 330.852 cv
319.73 343.079 336.02 363.954 340.816 366.301 cv
340.816 366.301 336.832 377.395 334.844 382.942 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.27451 .207843 .145098 rgb
f
83.793 367.2 mo
91.7305 363.454 99.1914 360.735 104.055 359.114 cv
106.602 358.27 108.156 357.821 108.219 357.801 cv
109.73 357.364 li
110.813 356.215 li
110.816 356.208 112.785 354.34 117.629 352.051 cv
121.949 350.012 127.18 348.278 133.164 346.903 cv
133.754 346.762 li
134.309 346.5 li
141.043 343.329 160.051 334.821 167.105 333.575 cv
170.016 333.063 172.125 332.934 174.176 332.805 cv
178.488 332.532 182.566 332.278 191.035 328.954 cv
202.129 324.59 223.336 319.965 223.551 319.915 cv
233.324 317.793 li
259.418 319.25 li
256.605 317.043 li
261.449 317.965 270.23 322.262 273.391 323.938 cv
271.434 318.43 li
278.594 320.856 293.777 326.672 302.73 334.997 cv
308.77 340.622 315.59 348.235 321.613 354.95 cv
327.301 361.297 331.168 365.567 334.094 368.258 cv
329.648 380.637 li
328.418 383.004 324.023 392.676 322.176 412.45 cv
321.281 422.012 319.324 429.286 317.047 435.383 cv
315.84 428.04 li
308.293 447.102 li
308.234 447.247 301.75 464.661 288.785 475.266 cv
290.969 469.942 li
290.887 470.051 284.797 478.051 277.02 485.485 cv
277.109 481.583 li
267.492 489.735 li
267.363 489.836 254.781 500.446 242.801 506.098 cv
242.633 506.176 242.473 506.254 242.305 506.333 cv
240.422 504.145 li
240.34 504.192 239.434 504.696 237.883 505.426 cv
233.363 507.555 221.121 513.973 204.402 511.727 cv
209.301 509.004 li
209.059 509.036 184.723 511.61 166.426 506.083 cv
165.547 505.813 164.684 505.528 163.844 505.227 cv
163.492 505.11 144.207 498.77 128.141 491.184 cv
123.703 489.079 118.152 486.852 111.715 484.27 cv
94.3906 477.321 70.6602 467.793 54.5273 454.43 cv
47.9688 449 41.9336 443.688 36.6133 439 cv
26.3711 429.989 17.7617 422.403 9.66016 417.622 cv
12.0469 415.747 15.3867 413.536 19.8633 411.426 cv
20.8516 410.958 21.8945 410.497 22.9961 410.047 cv
24.2227 409.54 25.3945 409.028 26.5117 408.497 cv
35.9492 404.043 41.5195 398.934 49.2305 391.848 cv
52.8906 388.489 57.043 384.68 62.4102 380.208 cv
67.7891 375.731 74.9805 371.356 83.793 367.2 cv
cp
1 1 1 rgb
f
336.363 365.645 mo
336.363 365.645 329.699 387.668 301.965 394.301 cv
274.23 400.934 254.977 403.106 243.047 403.2 cv
234.508 403.274 217.969 406.411 205.156 408.09 cv
200.074 408.758 195.582 409.192 192.402 409.118 cv
181.227 408.864 144.793 412.676 118.313 413.192 cv
91.832 413.708 8.23047 418.118 8.23047 418.118 cv
8.23047 418.118 66.9727 416.676 86.9336 416.02 cv
106.891 415.356 143.105 413.02 159.895 412.473 cv
176.676 411.926 197.438 409.051 215.355 407.973 cv
233.273 406.887 246.504 406.633 250.055 406.34 cv
253.605 406.051 271.41 401.805 284.117 400.418 cv
296.824 399.032 331.094 400.379 336.363 365.645 cv
cp
.27451 .207843 .145098 rgb
f
328.738 372.922 mo
328.738 372.922 306.949 339.43 277.422 326.637 cv
277.422 326.637 299.285 340.75 309.23 354.028 cv
319.176 367.297 326.215 377.336 328.738 372.922 cv
cp
f
254.43 321.825 mo
254.43 321.825 289.402 332.973 321.34 378.719 cv
321.34 378.719 322.242 382.489 316.613 377.493 cv
313.051 374.333 301.879 359.59 294.004 351.532 cv
281.988 339.231 254.43 321.825 254.43 321.825 cv
cp
f
235.566 321.387 mo
235.566 321.387 273.898 332.336 312.961 384.395 cv
312.961 384.395 311.113 385.614 305.641 380.594 cv
300.16 375.579 295.465 367.083 288.887 361.2 cv
282.316 355.317 261.738 332.196 235.566 321.387 cv
cp
f
227.473 326.934 mo
227.473 326.934 265.801 337.883 304.863 389.942 cv
304.863 389.942 303.02 391.161 297.543 386.141 cv
292.066 381.122 287.371 372.625 280.793 366.747 cv
274.219 360.864 253.645 337.743 227.473 326.934 cv
cp
f
180.836 330.618 mo
180.836 330.618 190.113 328.313 207.398 330.528 cv
212.656 331.2 214.051 331.122 210.074 329.614 cv
198.711 325.293 194.77 326.461 180.836 330.618 cv
cp
f
207.91 326.489 mo
207.91 326.489 242.656 329.106 294.336 391.801 cv
294.336 391.801 292.492 393.016 287.02 387.997 cv
281.539 382.977 276.84 374.481 270.27 368.598 cv
263.691 362.715 233.598 334.067 207.91 326.489 cv
cp
f
198.434 331.301 mo
198.434 331.301 233.527 333.325 284.777 394.235 cv
284.777 394.235 282.891 395.461 277.434 390.606 cv
271.98 385.754 267.363 377.465 260.813 371.774 cv
254.258 366.086 224.285 338.356 198.434 331.301 cv
cp
f
187.871 334.551 mo
187.871 334.551 222.965 336.575 274.215 397.489 cv
274.215 397.489 272.336 398.715 266.875 393.86 cv
261.418 389.004 256.801 380.715 250.25 375.028 cv
243.699 369.34 213.727 341.61 187.871 334.551 cv
cp
f
171.344 336.129 mo
171.344 336.129 208.531 337.286 261.344 398.028 cv
261.344 398.028 259.313 399.325 253.648 394.524 cv
247.98 389.719 243.297 381.387 236.488 375.758 cv
229.684 370.133 198.59 342.661 171.344 336.129 cv
cp
f
157.305 338.606 mo
157.305 338.606 195.488 339.231 248.867 399.422 cv
248.867 399.422 246.762 400.754 241.016 396.008 cv
235.262 391.27 230.574 382.977 223.66 377.434 cv
216.746 371.883 185.199 344.758 157.305 338.606 cv
cp
f
148.379 343.848 mo
148.379 343.848 184.961 344.184 235.699 400.793 cv
235.699 400.793 233.672 402.075 228.195 397.622 cv
222.711 393.176 218.277 385.356 211.695 380.153 cv
205.105 374.95 175.07 349.485 148.379 343.848 cv
cp
f
136.723 347.458 mo
136.723 347.458 172.707 347.543 222.242 402.301 cv
222.242 402.301 220.246 403.559 214.883 399.254 cv
209.52 394.973 205.211 387.395 198.766 382.375 cv
192.32 377.352 162.941 352.77 136.723 347.458 cv
cp
f
122.473 351.922 mo
122.473 351.922 159.066 350.946 207.84 402.532 cv
207.84 402.532 205.77 403.805 200.445 399.797 cv
195.113 395.801 190.953 388.586 184.547 383.922 cv
178.141 379.247 148.98 356.297 122.473 351.922 cv
cp
f
111.984 358.25 mo
111.984 358.25 146.879 356.774 192.574 403.86 cv
192.574 403.86 190.578 405.075 185.566 401.438 cv
180.543 397.817 176.691 391.188 170.66 386.961 cv
164.625 382.727 137.184 361.891 111.984 358.25 cv
cp
f
99.4297 363.137 mo
99.4297 363.137 133.996 360.946 178.152 404.782 cv
178.152 404.782 176.148 405.989 171.277 402.633 cv
166.387 399.301 162.723 393.067 156.848 389.176 cv
150.969 385.278 124.285 366.043 99.4297 363.137 cv
cp
f
87.9727 368.883 mo
87.9727 368.883 122.594 365.926 165.66 406.872 cv
165.66 406.872 163.629 408.079 158.84 404.981 cv
154.035 401.907 150.523 396.02 144.746 392.434 cv
138.965 388.84 112.754 371.051 87.9727 368.883 cv
cp
f
75.5391 374.747 mo
75.5391 374.747 110.457 370.657 152.223 407.684 cv
152.223 407.684 150.137 408.899 145.434 406.153 cv
140.719 403.43 137.41 398.012 131.738 394.84 cv
126.055 391.661 100.379 375.868 75.5391 374.747 cv
cp
f
67.8438 381.141 mo
67.8438 381.141 99.9492 376.829 137.52 408.743 cv
137.52 408.743 135.582 409.864 131.324 407.532 cv
127.051 405.211 124.129 400.485 118.984 397.793 cv
113.84 395.098 90.5977 381.637 67.8438 381.141 cv
cp
f
60.8477 387.551 mo
60.8477 387.551 90.0156 383.196 123.504 410.52 cv
123.504 410.52 121.723 411.536 117.906 409.567 cv
114.074 407.606 111.512 403.512 106.895 401.247 cv
102.281 398.973 81.4609 387.583 60.8477 387.551 cv
cp
f
50.3516 393.879 mo
50.3516 393.879 77.1797 388.965 106.59 410.551 cv
106.59 410.551 104.918 411.481 101.516 409.989 cv
98.1016 408.497 95.9336 405.165 91.8242 403.45 cv
87.707 401.731 69.1797 393.024 50.3516 393.879 cv
cp
f
39.1172 402.286 mo
39.1172 402.286 64.5898 396.278 90.4844 411.575 cv
90.4844 411.575 88.8555 412.458 85.7813 411.504 cv
82.6992 410.551 80.9258 408.012 77.1992 406.926 cv
73.4805 405.84 56.7969 400.172 39.1172 402.286 cv
cp
f
27.2148 409.286 mo
27.2148 409.286 50.2891 403.043 72.5391 413.821 cv
72.5391 413.821 71.043 414.618 68.3477 414.028 cv
65.6523 413.434 64.207 411.504 60.9414 410.852 cv
57.6875 410.192 43.1172 406.598 27.2148 409.286 cv
cp
f
319.938 397 mo
319.938 397 312.73 449.114 275.996 478.184 cv
275.996 478.184 293.805 459.348 301.68 443.27 cv
308.723 428.895 315.758 408.645 315.973 405.438 cv
316.184 402.223 316.246 399.43 319.938 397 cv
cp
f
310.992 401.067 mo
310.992 401.067 300.586 466.59 231.539 502.61 cv
231.539 502.61 267.336 483.997 290.262 446.282 cv
298.574 432.606 306.191 412.473 306.578 409.278 cv
306.965 406.083 307.18 403.297 310.992 401.067 cv
cp
f
302.633 403.442 mo
302.633 403.442 289.613 468.493 219.18 501.715 cv
219.18 501.715 255.691 484.559 280.109 447.786 cv
288.961 434.458 297.379 414.641 297.887 411.461 cv
298.402 408.29 298.73 405.516 302.633 403.442 cv
cp
f
293.418 404.293 mo
293.418 404.293 278.711 468.993 207.438 500.372 cv
207.438 500.372 244.379 484.168 269.746 448.051 cv
278.941 434.95 287.871 415.364 288.465 412.2 cv
289.063 409.04 289.465 406.27 293.418 404.293 cv
cp
f
283.625 404.77 mo
283.625 404.77 271.086 472.903 181.281 505.926 cv
181.281 505.926 233.277 484.833 258.637 448.715 cv
267.84 435.614 278.078 415.833 278.668 412.672 cv
279.27 409.512 279.668 406.75 283.625 404.77 cv
cp
f
273.961 405.524 mo
273.961 405.524 260.602 471.442 170.551 504.422 cv
170.551 504.422 219.637 485.418 248.48 448.247 cv
260.602 432.629 268.285 416.27 268.918 413.215 cv
269.551 410.161 269.992 407.481 273.961 405.524 cv
cp
f
263.047 405.833 mo
263.047 405.833 248.738 468.918 158.59 501.77 cv
158.59 501.77 207.738 482.887 237.027 446.981 cv
249.332 431.895 257.23 416.176 257.918 413.25 cv
258.59 410.325 259.066 407.766 263.047 405.833 cv
cp
f
251.855 409.418 mo
251.855 409.418 235.383 465.168 145.824 497.426 cv
145.824 497.426 194.691 478.989 224.77 446.426 cv
237.41 432.747 245.754 418.684 246.539 416.102 cv
247.309 413.52 247.883 411.262 251.855 409.418 cv
cp
f
240.313 409.645 mo
240.313 409.645 223.715 461.84 136.84 493.02 cv
136.84 493.02 184.262 475.227 213.703 444.497 cv
226.074 431.583 234.313 418.368 235.094 415.946 cv
235.875 413.528 236.449 411.418 240.313 409.645 cv
cp
f
226.426 411.7 mo
226.426 411.7 211.848 459.379 130.418 486.723 cv
130.418 486.723 174.156 470.395 201.563 442.856 cv
213.09 431.282 220.809 419.489 221.559 417.34 cv
222.305 415.188 222.863 413.325 226.426 411.7 cv
cp
f
212.922 412.571 mo
212.922 412.571 198.785 455.864 123.43 480.692 cv
123.43 480.692 164.43 465.84 189.625 440.833 cv
200.215 430.325 206.422 419.543 207.113 417.598 cv
207.809 415.645 209.648 414.051 212.922 412.571 cv
cp
f
201.477 411.75 mo
201.477 411.75 187.145 454.04 112.148 478.754 cv
112.148 478.754 153.715 463.176 178.91 438.629 cv
189.496 428.317 194.973 418.586 195.676 416.692 cv
196.371 414.782 198.219 413.211 201.477 411.75 cv
cp
f
189.586 412.176 mo
189.586 412.176 175.277 451.278 103.145 475.051 cv
103.145 475.051 143.156 460.149 167.609 437.219 cv
177.891 427.583 183.262 418.551 183.961 416.801 cv
184.66 415.036 186.445 413.567 189.586 412.176 cv
cp
f
178.543 412.2 mo
178.543 412.2 164.875 449.106 96.3711 471.684 cv
96.3711 471.684 134.375 457.536 157.637 435.864 cv
167.41 426.75 172.531 418.223 173.199 416.571 cv
173.863 414.915 175.551 413.52 178.543 412.2 cv
cp
f
164.77 415.243 mo
164.77 415.243 152.109 447.208 90.6016 467.493 cv
90.6016 467.493 124.742 454.84 145.797 435.879 cv
154.648 427.918 159.328 420.512 159.941 419.071 cv
160.563 417.629 162.086 416.411 164.77 415.243 cv
cp
f
153.18 414.836 mo
153.18 414.836 140.504 444.442 81.0313 464.059 cv
81.0313 464.059 114.066 451.891 134.605 434.118 cv
143.246 426.653 147.855 419.77 148.477 418.434 cv
149.098 417.102 150.578 415.95 153.18 414.836 cv
cp
f
138.207 415.329 mo
138.207 415.329 129.938 441.817 70.4688 461.442 cv
70.4688 461.442 100.352 450.598 120.895 432.825 cv
129.535 425.36 132.891 420.262 133.512 418.926 cv
134.129 417.594 135.613 416.45 138.207 415.329 cv
cp
f
125.07 415.305 mo
125.07 415.305 117.074 438.168 62.7656 456.09 cv
62.7656 456.09 90.0742 446.243 109.039 430.629 cv
117.02 424.067 120.152 419.637 120.742 418.481 cv
121.324 417.325 122.691 416.309 125.07 415.305 cv
cp
f
107.707 416.583 mo
107.707 416.583 97.0117 437.868 58.082 446.895 cv
58.082 446.895 76.2539 441.438 93.2578 428.84 cv
100.402 423.547 103.285 420.059 103.844 419.161 cv
104.395 418.262 105.617 417.442 107.707 416.583 cv
cp
f
91.707 419.293 mo
91.707 419.293 83.9727 433.653 45.7852 440.602 cv
45.7852 440.602 63.4336 437.09 76.8125 428.739 cv
82.4336 425.227 87.0234 421.149 87.4883 420.594 cv
87.9492 420.043 90.0273 419.395 91.707 419.293 cv
cp
f
74.6641 418.309 mo
74.6641 418.309 67.918 428.981 39.1211 430.778 cv
39.1211 430.778 53.8164 428.649 64.9883 423.528 cv
69.6836 421.372 71.7344 419.758 72.1523 419.317 cv
72.5742 418.883 73.3711 418.563 74.6641 418.309 cv
cp
f
56.1992 419.458 mo
56.1992 419.458 39.3555 428.434 18.543 421.668 cv
18.543 421.668 33.1641 424.098 41.4453 422.61 cv
49.7266 421.125 56.9297 418.075 56.1992 419.458 cv
cp
f
378.48 517.428 mo
353.723 517.428 320.645 513.131 292.883 504.526 cv
222.027 482.557 163.637 429.542 140.34 346.178 cv
115.848 258.557 148.754 182.518 174.051 151.917 cv
176.992 147.209 200.367 111.217 241.148 86.5493 cv
268.805 69.8149 312.207 60.7603 349.051 60.7603 cv
375.117 60.7603 408.75 66.4048 436.461 75.0337 cv
508.136 97.3657 560.171 176.014 581.484 224.956 cv
616.449 305.221 604.214 400.487 540.816 462.131 cv
498.82 502.979 445.742 517.428 378.48 517.428 cv
cp
f
179.762 156.026 mo
179.762 156.026 202.984 117.838 244.781 92.5493 cv
286.59 67.2681 351.871 56.4165 423.082 78.6001 cv
494.296 100.792 555.851 183.69 575.054 227.76 cv
611.695 311.877 590.816 401.19 534.57 455.885 cv
478.32 510.584 388.297 522.78 294.328 497.659 cv
226.945 479.647 167.379 425.932 144.152 342.838 cv
120.934 259.752 153.957 186.979 179.762 156.026 cv
cp
1 1 1 rgb
f
349.488 177.838 mo
349.488 177.838 360.832 168.319 378.582 176.491 cv
378.582 176.491 362.906 172.174 349.488 177.838 cv
cp
.27451 .207843 .145098 rgb
f
335.613 189.026 mo
335.613 189.026 357.754 171.846 392.004 182.952 cv
392.004 182.952 363.543 176.819 335.613 189.026 cv
cp
f
331.672 197.678 mo
331.672 197.678 359.113 173.592 399.066 191.276 cv
399.066 191.276 362.965 179.608 331.672 197.678 cv
cp
f
331.926 202.76 mo
331.926 202.76 360.039 179.452 399.48 198.237 cv
399.48 198.237 363.723 185.569 331.926 202.76 cv
cp
f
327.051 209.905 mo
327.051 209.905 358.531 187.331 404.43 204.713 cv
404.43 204.713 365.113 193.745 327.051 209.905 cv
cp
f
334.512 212.534 mo
334.512 212.534 367.941 199.147 395.23 209.151 cv
395.23 209.151 371.188 205.042 334.512 212.534 cv
cp
f
337.031 217.874 mo
337.031 217.874 370.816 205.44 397.813 216.206 cv
397.813 216.206 373.898 211.417 337.031 217.874 cv
cp
f
329.77 224.358 mo
329.77 224.358 359.184 209.917 400.992 224.87 cv
400.992 224.87 367.441 215.584 329.77 224.358 cv
cp
f
335.969 227.971 mo
335.969 227.971 358.668 218.167 400.469 231.065 cv
400.469 231.065 365.902 224.87 335.969 227.971 cv
cp
f
328.23 234.163 mo
328.23 234.163 364.859 224.87 414.402 239.838 cv
414.402 239.838 378.801 231.584 328.23 234.163 cv
cp
f
334.934 240.389 mo
334.934 240.389 357.621 230.565 399.434 243.424 cv
399.434 243.424 364.871 237.268 334.934 240.389 cv
cp
f
334.934 246.581 mo
334.934 246.581 357.621 236.756 399.434 249.612 cv
399.434 249.612 364.871 243.456 334.934 246.581 cv
cp
f
334.418 251.198 mo
334.418 251.198 368.988 246.042 396.855 257.389 cv
396.855 257.389 368.477 251.198 334.418 251.198 cv
cp
f
320.484 256.362 mo
320.484 256.362 371.055 251.717 409.754 269.26 cv
409.754 269.26 379.832 258.424 320.484 256.362 cv
cp
f
328.738 262.034 mo
328.738 262.034 373.645 261.522 402.535 273.909 cv
402.535 273.909 366.926 267.19 328.738 262.034 cv
cp
f
334.418 269.772 mo
334.418 269.772 370.027 268.737 395.82 281.647 cv
395.82 281.647 375.703 274.932 334.418 269.772 cv
cp
f
329.77 273.909 mo
329.77 273.909 371.566 274.932 398.922 290.417 cv
398.922 290.417 368.477 280.1 329.77 273.909 cv
cp
f
334.418 279.577 mo
334.418 279.577 372.605 284.737 391.184 296.608 cv
391.184 296.608 350.422 284.225 334.418 279.577 cv
cp
f
329.77 283.709 mo
329.77 283.709 364.859 287.838 394.797 306.417 cv
394.797 306.417 355.578 291.963 329.77 283.709 cv
cp
f
332.348 290.417 mo
332.348 290.417 375.703 301.768 393.242 315.182 cv
393.242 315.182 349.895 297.635 332.348 290.417 cv
cp
f
325.645 293.002 mo
325.645 293.002 374.871 308.377 400.992 330.667 cv
400.992 330.667 361.25 309.514 325.645 293.002 cv
cp
f
327.707 300.229 mo
327.707 300.229 362.281 317.772 381.891 325.51 cv
381.891 325.51 353.512 319.831 327.707 300.229 cv
cp
f
323.059 300.741 mo
323.059 300.741 341.637 323.444 388.082 331.182 cv
388.082 331.182 345.25 332.733 323.059 300.741 cv
cp
f
324.094 310.026 mo
324.094 310.026 339.055 329.124 367.957 334.799 cv
367.957 334.799 334.418 331.702 324.094 310.026 cv
cp
f
314.938 311.729 mo
314.938 311.729 326.543 336.034 363.699 339.807 cv
363.699 339.807 337.996 336.522 314.938 311.729 cv
cp
f
311.707 317.252 mo
311.707 317.252 323.574 339.448 361.762 344.604 cv
361.762 344.604 328.23 347.186 311.707 317.252 cv
cp
f
307.582 321.901 mo
307.582 321.901 319.453 344.084 357.637 349.241 cv
357.637 349.241 324.102 351.823 307.582 321.901 cv
cp
f
307.738 250.463 mo
307.738 250.463 315.355 274.612 294.195 285.971 cv
273.035 297.327 292.262 286.588 281.422 286.588 cv
270.59 286.588 274.715 282.975 269.559 282.975 cv
264.395 282.975 263.609 278.319 249.156 278.834 cv
240.887 279.127 236.734 278.241 228.285 278.292 cv
221.969 278.327 217.434 278.327 217.434 278.327 cv
217.434 278.327 222.598 275.241 218.469 275.752 cv
214.336 276.272 214.34 274.725 222.598 275.241 cv
230.852 275.752 213.82 272.659 226.719 273.17 cv
239.625 273.682 202.332 265.456 202.332 265.456 cv
250.043 270.807 li
250.043 270.807 228.785 264.909 223.625 264.397 cv
218.469 263.885 232.918 262.854 224.652 261.819 cv
216.402 260.784 242.207 258.721 222.598 256.139 cv
202.984 253.557 193.855 248.51 193.855 248.51 cv
193.855 248.51 208.141 249.956 226.719 254.081 cv
226.719 254.081 200.402 242.213 178.219 241.69 cv
178.219 241.69 196.797 238.081 222.598 245.307 cv
222.598 245.307 216.91 240.651 223.625 241.174 cv
230.34 241.69 221.566 235.502 224.145 234.463 cv
226.719 233.436 220.02 225.69 225.691 225.69 cv
231.367 225.69 223.633 213.315 230.34 212.284 cv
237.043 211.249 232.387 205.057 237.559 204.542 cv
242.723 204.018 232.402 198.854 224.652 171.506 cv
224.652 171.506 236.523 193.19 248.395 206.088 cv
248.395 206.088 233.957 189.577 233.434 178.221 cv
233.434 178.221 243.75 195.245 254.074 203.51 cv
254.074 203.51 238.59 180.799 240.145 159.12 cv
240.145 159.12 243.75 179.256 250.977 187.506 cv
250.977 178.221 li
250.977 178.221 247.879 161.713 251.488 144.163 cv
251.488 144.163 249.953 174.1 267.492 201.444 cv
267.492 201.444 268.008 191.635 272.652 188.018 cv
272.652 188.018 270.066 202.991 284.004 221.565 cv
284.004 221.565 278.832 206.081 287.102 191.635 cv
287.102 191.635 281.422 212.276 292.773 225.69 cv
292.773 225.69 289.168 219.499 289.68 214.854 cv
289.68 214.854 291.23 217.952 296.91 225.178 cv
302.578 232.405 300.508 225.182 302.578 232.405 cv
304.648 239.62 302.582 218.475 313.938 212.284 cv
313.938 212.284 301.035 221.053 307.738 250.463 cv
cp
f
276.133 245.838 mo
276.133 245.838 282.535 238.752 291.074 241.377 cv
296.109 242.928 300.902 245.307 302.84 256.53 cv
302.84 256.53 297.418 240.034 276.133 245.838 cv
cp
1 1 1 rgb
f
262.848 186.991 mo
262.848 186.991 243.75 151.377 262.324 117.323 cv
262.324 117.323 248.398 141.569 262.848 186.991 cv
cp
.27451 .207843 .145098 rgb
f
147.297 236.924 mo
147.297 236.924 129.238 320.139 167.238 384.252 cv
167.238 384.252 137.441 321.292 147.297 236.924 cv
cp
f
434.973 329.631 mo
434.973 329.631 423.621 364.831 360.707 381.792 cv
360.707 381.792 421.363 373.651 434.973 329.631 cv
cp
f
350.23 389.514 mo
350.23 389.514 412.844 382.584 435.816 342.6 cv
435.816 342.6 421.906 385.1 350.23 389.514 cv
cp
f
353.742 395.69 mo
353.742 395.69 414.285 392.815 436.707 352.936 cv
436.707 352.936 425.91 393.811 353.742 395.69 cv
cp
f
358.543 402.667 mo
358.543 402.667 419.098 399.799 441.516 359.924 cv
441.516 359.924 430.707 400.788 358.543 402.667 cv
cp
f
373.645 421.389 mo
373.645 421.389 434.195 418.514 456.613 378.635 cv
456.613 378.635 445.813 419.51 373.645 421.389 cv
cp
f
364.348 408.948 mo
364.348 408.948 424.887 406.073 447.316 366.19 cv
447.316 366.19 436.516 407.065 364.348 408.948 cv
cp
f
369.043 415.424 mo
369.043 415.424 429.602 412.549 452.02 372.663 cv
452.02 372.663 441.215 413.534 369.043 415.424 cv
cp
f
378.352 427.87 mo
378.352 427.87 438.898 425.002 461.309 385.116 cv
461.309 385.116 450.512 425.983 378.352 427.87 cv
cp
f
383.605 434.241 mo
383.605 434.241 444.156 431.37 466.574 391.487 cv
466.574 391.487 455.777 432.35 383.605 434.241 cv
cp
f
388.41 441.221 mo
388.41 441.221 448.961 438.354 471.387 398.475 cv
471.387 398.475 460.582 439.338 388.41 441.221 cv
cp
f
390.938 448.213 mo
390.938 448.213 451.027 444.979 473.625 406.975 cv
473.625 406.975 462.551 445.815 390.938 448.213 cv
cp
f
394.531 454.901 mo
394.531 454.901 454.613 451.667 477.23 413.659 cv
477.23 413.659 466.148 452.495 394.531 454.901 cv
cp
f
399.691 460.764 mo
399.691 460.764 459.781 457.526 482.382 419.518 cv
482.382 419.518 471.305 458.362 399.691 460.764 cv
cp
f
431.125 324.569 mo
431.125 324.569 420.68 358.542 369.484 371.233 cv
369.484 371.233 408.707 358.678 431.125 324.569 cv
cp
f
403.84 467.342 mo
403.84 467.342 463.926 464.112 486.535 426.1 cv
486.535 426.1 475.449 464.944 403.84 467.342 cv
cp
f
409 473.206 mo
409 473.206 469.09 469.971 491.691 431.959 cv
491.691 431.959 480.605 470.803 409 473.206 cv
cp
f
415.348 479.377 mo
415.348 479.377 475.445 476.143 498.046 438.131 cv
498.046 438.131 486.957 476.975 415.348 479.377 cv
cp
f
420.504 485.237 mo
420.504 485.237 480.598 482.002 503.195 443.995 cv
503.195 443.995 492.125 482.846 420.504 485.237 cv
cp
f
433.543 490.139 mo
433.543 490.139 493.378 483.592 513.503 444.448 cv
513.503 444.448 504.949 483.776 433.543 490.139 cv
cp
f
439.074 495.706 mo
439.074 495.706 498.91 489.151 519.039 450.002 cv
519.039 450.002 510.488 489.338 439.074 495.706 cv
cp
f
259.078 260.776 mo
259.078 260.776 232.32 246.725 199.207 240.374 cv
199.207 240.374 232.652 240.706 259.078 260.776 cv
cp
1 1 1 rgb
f
231.984 205.92 mo
231.984 205.92 249.375 226.995 274.465 242.713 cv
274.465 242.713 233.66 219.967 226.969 213.616 cv
220.277 207.26 231.984 205.92 231.984 205.92 cv
cp
f
248.039 149.061 mo
248.039 149.061 245.699 194.885 273.457 221.643 cv
273.457 221.643 250.043 200.569 243.355 165.784 cv
243.355 165.784 245.699 150.737 248.039 149.061 cv
cp
f
275.801 257.768 mo
275.801 257.768 237.672 237.026 220.613 231.01 cv
208.789 226.834 219.609 218.967 219.609 218.967 cv
219.609 218.967 266.77 247.393 275.801 257.768 cv
cp
f
271.008 255.647 mo
271.008 255.647 266.543 262.78 271.227 271.702 cv
275.91 280.624 284.16 280.624 284.16 280.624 cv
284.16 280.624 272.57 273.932 278.141 257.877 cv
278.141 257.877 275.914 253.862 271.008 255.647 cv
cp
f
267.66 252.526 mo
267.66 252.526 260.523 272.151 276.133 279.51 cv
276.133 279.51 257.629 275.268 263.426 248.956 cv
267.66 252.526 li
cp
f
gsave
202.773 392.561 mo
202.773 392.561 174.23 364.018 206.34 327.448 cv
219.301 312.682 258.965 314.065 269.668 326.557 cv
280.371 339.045 304.051 355.471 281.227 394.405 cv
270.602 412.53 218.102 415.655 202.773 392.561 cv
cp
clp
206.316 321.366 mo
206.316 321.366 188.512 336.073 195.48 379.417 cv
195.48 379.417 190.832 351.549 206.316 321.366 cv
cp
.27451 .207843 .145098 rgb
f
214.055 314.917 mo
214.055 314.917 190.836 355.167 204.254 398.518 cv
204.254 398.518 195.992 359.299 214.055 314.917 cv
cp
f
218.699 319.565 mo
218.699 319.565 193.934 363.42 215.605 411.417 cv
215.605 411.417 201.152 368.588 218.699 319.565 cv
cp
f
224.379 317.495 mo
224.379 317.495 199.605 361.354 221.281 409.346 cv
221.281 409.346 206.836 366.522 224.379 317.495 cv
cp
f
229.34 317.971 mo
229.34 317.971 205.27 362.221 227.695 409.862 cv
227.695 409.862 212.574 367.268 229.34 317.971 cv
cp
f
234.98 315.815 mo
234.98 315.815 210.914 360.061 233.34 407.702 cv
233.34 407.702 218.219 365.112 234.98 315.815 cv
cp
f
241.207 316.424 mo
241.207 316.424 217.141 360.67 239.566 408.315 cv
239.566 408.315 224.445 365.721 241.207 316.424 cv
cp
f
246.855 314.264 mo
246.855 314.264 222.777 358.514 245.211 406.155 cv
245.211 406.155 230.082 363.561 246.855 314.264 cv
cp
f
250.207 318.424 mo
250.207 318.424 229.012 364.124 254.441 410.237 cv
254.441 410.237 236.629 368.698 250.207 318.424 cv
cp
f
255.703 315.909 mo
255.703 315.909 234.508 361.608 259.934 407.721 cv
259.934 407.721 242.113 366.178 255.703 315.909 cv
cp
f
260.699 315.866 mo
260.699 315.866 237.789 367.038 274.434 424.319 cv
274.434 424.319 244.508 372.198 260.699 315.866 cv
cp
f
266.148 313.249 mo
266.148 313.249 245.824 359.342 272.125 404.959 cv
272.125 404.959 253.52 363.768 266.148 313.249 cv
cp
f
194.961 329.37 mo
194.961 329.37 188.254 341.745 189.289 366.01 cv
189.289 366.01 184.129 343.299 194.961 329.37 cv
cp
f
271.828 313.249 mo
271.828 313.249 251.512 359.342 277.801 404.959 cv
277.801 404.959 259.199 363.768 271.828 313.249 cv
cp
f
278.023 312.733 mo
278.023 312.733 257.699 358.827 283.996 404.448 cv
283.996 404.448 265.395 363.252 278.023 312.733 cv
cp
f
284.215 311.706 mo
284.215 311.706 263.895 357.795 290.188 403.417 cv
290.188 403.417 271.582 362.225 284.215 311.706 cv
cp
f
285.785 324.202 mo
285.785 324.202 279.078 359.815 293.008 395.424 cv
293.008 395.424 283.723 359.815 285.785 324.202 cv
cp
f
290.426 332.979 mo
290.426 332.979 286.305 356.206 297.145 387.17 cv
297.145 387.17 291.461 355.682 290.426 332.979 cv
cp
f
grestore
272.344 244.499 mo
272.344 244.499 279.922 236.026 295.535 237.811 cv
295.535 237.811 280.371 230.67 266.098 244.049 cv
272.344 244.499 li
cp
f
307.227 254.081 mo
307.227 254.081 269.051 241.69 226.723 210.737 cv
184.406 179.768 185.445 166.338 183.379 159.12 cv
181.309 151.901 165.832 150.87 160.676 161.19 cv
155.512 171.506 154.371 181.217 167.895 185.959 cv
186.988 192.663 205.566 214.854 239.625 236.53 cv
273.684 258.202 287.629 267.487 291.75 277.815 cv
291.75 277.815 309.297 277.819 307.227 254.081 cv
cp
.27451 .207843 .145098 rgb
f
177.184 158.096 mo
177.184 158.096 186.832 186.858 223.957 210.604 cv
223.957 210.604 192.809 190.706 184.824 178.495 cv
176.051 165.073 175.113 161.713 177.184 158.096 cv
cp
1 1 1 rgb
f
161.695 179.264 mo
161.695 179.264 159.121 174.108 162.223 174.62 cv
165.313 175.135 160.676 172.042 167.379 171.01 cv
174.082 169.983 173.051 160.178 173.051 160.178 cv
173.051 160.178 175.121 170.491 169.961 173.588 cv
164.797 176.686 161.695 179.264 161.695 179.264 cv
cp
f
305.23 255.424 mo
305.23 255.424 306.363 274.124 291.75 277.815 cv
291.75 277.815 302.789 271.686 302.84 256.53 cv
302.84 256.53 302.891 254.084 305.23 255.424 cv
cp
f
203.887 196.221 mo
203.887 196.221 246.031 228.331 265.098 237.698 cv
284.16 247.065 299.215 253.081 299.215 253.081 cv
299.215 253.081 304.23 257.428 298.879 266.127 cv
298.879 266.127 299.879 258.432 296.203 257.092 cv
292.527 255.752 290.512 252.745 285.836 251.077 cv
281.152 249.401 268.105 240.706 257.07 235.354 cv
246.031 230.002 208.906 201.909 203.887 196.221 cv
cp
f
298.18 255.741 mo
298.18 255.741 299.965 267.717 290.207 275.487 cv
290.207 275.487 297.266 267.745 296.004 254.905 cv
296.004 254.905 297.012 253.42 298.18 255.741 cv
cp
f
295.082 253.565 mo
295.082 253.565 296.285 264.03 288.984 270.92 cv
288.984 270.92 294.289 264.073 293.48 252.862 cv
293.48 252.862 294.246 251.549 295.082 253.565 cv
cp
f
170.441 186.077 mo
170.441 186.077 177.574 188.088 186.496 195.221 cv
195.418 202.354 212.359 215.959 212.359 215.959 cv
212.359 215.959 198.531 203.249 194.297 199.682 cv
190.066 196.112 185.824 192.987 181.145 190.088 cv
176.461 187.194 170.441 186.077 170.441 186.077 cv
cp
f
292.438 252.424 mo
292.438 252.424 293.473 262.545 286.836 269.252 cv
286.836 269.252 291.668 262.6 290.992 251.752 cv
290.992 251.752 291.684 250.471 292.438 252.424 cv
cp
f
gsave
308.387 492.456 mo
370.82 510.295 453.77 495.127 491.23 487.991 cv
491.23 487.991 463.324 503.198 380.629 478.182 cv
342.656 466.69 342.293 422.963 253.086 421.991 cv
171.031 421.096 143.137 319.385 152.477 346.28 cv
173.102 405.655 214.91 465.745 308.387 492.456 cv
cp
clp
141.031 225.026 mo
141.031 225.026 163.066 229.92 187.18 216.249 cv
187.18 216.249 164.27 233.643 141.031 225.026 cv
cp
.27451 .207843 .145098 rgb
f
138.66 230.686 mo
138.66 230.686 160.691 235.584 184.797 221.913 cv
184.797 221.913 161.895 239.307 138.66 230.686 cv
cp
f
137.281 236.002 mo
137.281 236.002 159.313 240.901 183.426 227.225 cv
183.426 227.225 160.52 244.627 137.281 236.002 cv
cp
f
134.844 242.127 mo
134.844 242.127 156.879 247.026 180.992 233.354 cv
180.992 233.354 158.082 250.749 134.844 242.127 cv
cp
f
132.473 247.792 mo
132.473 247.792 154.508 252.69 178.613 239.018 cv
178.613 239.018 155.707 256.413 132.473 247.792 cv
cp
f
131.094 253.096 mo
131.094 253.096 153.121 257.995 177.242 244.323 cv
177.242 244.323 154.328 261.721 131.094 253.096 cv
cp
f
132.27 258.971 mo
132.27 258.971 154.156 266.94 185.742 244.917 cv
185.742 244.917 158.168 271.018 132.27 258.971 cv
cp
f
131.246 265.276 mo
131.246 265.276 151.543 274.487 179.234 255.061 cv
179.234 255.061 154.246 279.588 131.246 265.276 cv
cp
f
131.211 271.233 mo
131.211 271.233 150.723 284.866 186.16 256.881 cv
186.16 256.881 155.797 288.124 131.211 271.233 cv
cp
f
130.508 276.87 mo
130.508 276.87 151.012 291.409 187.578 262.51 cv
187.578 262.51 156.344 294.889 130.508 276.87 cv
cp
f
129.957 283.229 mo
129.957 283.229 150.457 297.776 187.02 268.877 cv
187.02 268.877 155.785 301.26 129.957 283.229 cv
cp
f
130.598 289.51 mo
130.598 289.51 151.105 304.049 187.66 275.159 cv
187.66 275.159 156.438 307.538 130.598 289.51 cv
cp
f
130.043 295.87 mo
130.043 295.87 150.543 310.424 187.105 281.526 cv
187.105 281.526 155.871 313.905 130.043 295.87 cv
cp
f
130.691 302.151 mo
130.691 302.151 151.191 316.698 187.754 287.807 cv
187.754 287.807 156.523 320.178 130.691 302.151 cv
cp
f
130.133 308.514 mo
130.133 308.514 150.637 323.065 187.199 294.167 cv
187.199 294.167 155.965 326.545 130.133 308.514 cv
cp
f
130.309 314.733 mo
130.309 314.733 150.813 329.284 187.375 300.389 cv
187.375 300.389 156.137 332.768 130.309 314.733 cv
cp
f
129.758 321.104 mo
129.758 321.104 150.25 335.647 186.824 306.752 cv
186.824 306.752 155.582 339.127 129.758 321.104 cv
cp
f
130.395 327.381 mo
130.395 327.381 150.898 341.924 187.461 313.034 cv
187.461 313.034 156.23 345.409 130.395 327.381 cv
cp
f
129.84 333.745 mo
129.84 333.745 150.344 348.292 186.91 319.397 cv
186.91 319.397 155.668 351.768 129.84 333.745 cv
cp
f
135.195 342.487 mo
135.195 342.487 156.871 355.237 190.824 323.331 cv
190.824 323.331 162.473 358.252 135.195 342.487 cv
cp
f
135.184 348.877 mo
135.184 348.877 156.852 361.627 190.816 329.721 cv
190.816 329.721 162.461 364.635 135.184 348.877 cv
cp
f
138.918 354.706 mo
138.918 354.706 161.16 366.428 193.598 332.967 cv
193.598 332.967 166.902 369.174 138.918 354.706 cv
cp
f
143.074 361.096 mo
143.074 361.096 165.734 371.987 196.914 337.35 cv
196.914 337.35 171.578 374.518 143.074 361.096 cv
cp
f
143.672 366.26 mo
143.672 366.26 165.914 377.979 198.352 344.526 cv
198.352 344.526 171.656 380.729 143.672 366.26 cv
cp
f
147.828 372.651 mo
147.828 372.651 170.488 383.549 201.668 348.913 cv
201.668 348.913 176.328 386.081 147.828 372.651 cv
cp
f
150.305 378.053 mo
150.305 378.053 172.543 389.768 204.98 356.311 cv
204.98 356.311 178.285 392.526 150.305 378.053 cv
cp
f
154.457 384.44 mo
154.457 384.44 177.113 395.331 208.297 360.698 cv
208.297 360.698 182.965 397.862 154.457 384.44 cv
cp
f
159.074 389.725 mo
159.074 389.725 181.539 401.002 213.316 366.917 cv
213.316 366.917 187.332 403.643 159.074 389.725 cv
cp
f
163.355 396.034 mo
163.355 396.034 186.215 406.479 216.73 371.237 cv
216.73 371.237 192.113 408.901 163.355 396.034 cv
cp
f
166.555 402.264 mo
166.555 402.264 189.441 412.655 219.863 377.354 cv
219.863 377.354 195.332 415.065 166.555 402.264 cv
cp
f
171.074 408.393 mo
171.074 408.393 194.324 417.94 223.438 381.545 cv
223.438 381.545 200.309 420.135 171.074 408.393 cv
cp
f
176.02 415.096 mo
176.02 415.096 199.754 423.397 226.891 385.518 cv
226.891 385.518 205.832 425.276 176.02 415.096 cv
cp
f
181.082 420.803 mo
181.082 420.803 205.094 428.225 230.824 389.374 cv
230.824 389.374 211.246 429.877 181.082 420.803 cv
cp
f
185.055 426.573 mo
185.055 426.573 209.078 433.94 234.723 395.034 cv
234.723 395.034 215.234 435.581 185.055 426.573 cv
cp
f
190.316 432.073 mo
190.316 432.073 214.602 438.553 238.805 398.721 cv
238.805 398.721 220.824 439.963 190.316 432.073 cv
cp
f
196.656 437.366 mo
196.656 437.366 220.313 442.44 244.586 403.229 cv
244.586 403.229 226.363 443.51 196.656 437.366 cv
cp
f
201.93 442.186 mo
201.93 442.186 225.813 446.401 248.66 406.428 cv
248.66 406.428 231.918 447.245 201.93 442.186 cv
cp
f
206.148 447.198 mo
206.148 447.198 230.035 451.366 252.789 411.35 cv
252.789 411.35 236.137 452.186 206.148 447.198 cv
cp
f
211.613 451.803 mo
211.613 451.803 235.699 455.088 257.004 414.377 cv
257.004 414.377 241.863 455.698 211.613 451.803 cv
cp
f
217.164 455.893 mo
217.164 455.893 242.34 460.323 261.652 417.354 cv
261.652 417.354 248.746 461.209 217.164 455.893 cv
cp
f
223.32 460.819 mo
223.32 460.819 248.598 464.319 266.324 420.604 cv
266.324 420.604 255.035 464.959 223.32 460.819 cv
cp
f
228.414 466.01 mo
228.414 466.01 253.691 469.448 271.316 425.686 cv
271.316 425.686 260.113 470.065 228.414 466.01 cv
cp
f
234.727 470.702 mo
234.727 470.702 260.09 473.198 276.109 428.749 cv
276.109 428.749 266.535 473.581 234.727 470.702 cv
cp
f
243.043 474.182 mo
243.043 474.182 268.586 475.28 282.105 430.163 cv
282.105 430.163 275.055 475.331 243.043 474.182 cv
cp
f
249.797 478.276 mo
249.797 478.276 275.313 478.432 287.176 432.772 cv
287.176 432.772 281.777 478.229 249.797 478.276 cv
cp
f
255.523 482.745 mo
255.523 482.745 281.031 482.85 292.785 437.159 cv
292.785 437.159 287.48 482.624 255.523 482.745 cv
cp
f
262.398 486.573 mo
262.398 486.573 287.863 485.725 297.93 439.573 cv
297.93 439.573 294.309 485.268 262.398 486.573 cv
cp
f
267.48 488.831 mo
267.48 488.831 293.043 488.495 304.027 442.702 cv
304.027 442.702 299.496 488.174 267.48 488.831 cv
cp
f
274.449 492.534 mo
274.449 492.534 299.934 491.272 309.234 445.018 cv
309.234 445.018 306.379 490.706 274.449 492.534 cv
cp
f
280.418 496.678 mo
280.418 496.678 305.887 495.362 315.078 449.088 cv
315.078 449.088 312.32 494.772 280.418 496.678 cv
cp
f
287.492 500.116 mo
287.492 500.116 312.879 497.858 320.352 451.209 cv
320.352 451.209 319.289 497.042 287.492 500.116 cv
cp
f
292.266 503.612 mo
292.266 503.612 318.57 502.51 327.316 454.674 cv
327.316 454.674 325.195 502.002 292.266 503.612 cv
cp
f
299.652 507.252 mo
299.652 507.252 325.82 505.198 332.813 456.932 cv
332.813 456.932 332.418 504.42 299.652 507.252 cv
cp
f
306.027 511.377 mo
306.027 511.377 332.184 509.28 339.063 460.983 cv
339.063 460.983 338.77 508.483 306.027 511.377 cv
cp
f
313.504 514.737 mo
313.504 514.737 339.52 511.659 344.605 463.026 cv
344.605 463.026 346.074 510.627 313.504 514.737 cv
cp
f
318.723 517.288 mo
318.723 517.288 344.887 514.381 350.316 466.061 cv
350.316 466.061 351.465 513.42 318.723 517.288 cv
cp
f
326.344 520.417 mo
326.344 520.417 352.309 516.561 355.953 467.928 cv
355.953 467.928 358.84 515.334 326.344 520.417 cv
cp
f
332.984 524.096 mo
332.984 524.096 358.934 520.198 362.477 471.534 cv
362.477 471.534 365.457 518.944 332.984 524.096 cv
cp
f
340.68 526.932 mo
340.68 526.932 366.41 522.065 368.145 473.202 cv
368.145 473.202 372.887 520.588 340.68 526.932 cv
cp
f
343.715 530.901 mo
343.715 530.901 369.887 527.991 375.324 479.667 cv
375.324 479.667 376.461 527.03 343.715 530.901 cv
cp
f
351.34 534.026 mo
351.34 534.026 377.305 530.167 380.953 481.534 cv
380.953 481.534 383.832 528.948 351.34 534.026 cv
cp
f
357.98 537.698 mo
357.98 537.698 383.922 533.807 387.465 485.151 cv
387.465 485.151 390.445 532.549 357.98 537.698 cv
cp
f
365.676 540.542 mo
365.676 540.542 391.406 535.674 393.141 486.807 cv
393.141 486.807 397.883 534.198 365.676 540.542 cv
cp
f
370.238 542.565 mo
370.238 542.565 396.188 538.674 399.73 490.01 cv
399.73 490.01 402.707 537.424 370.238 542.565 cv
cp
f
377.934 545.401 mo
377.934 545.401 403.668 540.545 405.402 491.682 cv
405.402 491.682 410.145 539.061 377.934 545.401 cv
cp
f
380.977 549.374 mo
380.977 549.374 407.145 546.471 412.578 498.147 cv
412.578 498.147 413.723 545.506 380.977 549.374 cv
cp
f
388.594 552.502 mo
388.594 552.502 414.566 548.651 418.215 500.018 cv
418.215 500.018 421.09 547.424 388.594 552.502 cv
cp
f
395.238 556.174 mo
395.238 556.174 421.188 552.284 424.723 503.62 cv
424.723 503.62 427.707 551.034 395.238 556.174 cv
cp
f
402.93 559.018 mo
402.93 559.018 428.664 554.151 430.402 505.292 cv
430.402 505.292 435.137 552.674 402.93 559.018 cv
cp
f
408.965 560.749 mo
408.965 560.749 434.914 556.858 438.453 508.202 cv
438.453 508.202 441.438 555.608 408.965 560.749 cv
cp
f
416.66 563.592 mo
416.66 563.592 442.395 558.729 444.129 509.862 cv
444.129 509.862 448.867 557.249 416.66 563.592 cv
cp
f
421.988 563.331 mo
421.988 563.331 447.941 559.436 451.477 510.776 cv
451.477 510.776 454.457 558.182 421.988 563.331 cv
cp
f
429.684 566.174 mo
429.684 566.174 455.418 561.307 457.152 512.444 cv
457.152 512.444 461.895 559.823 429.684 566.174 cv
cp
f
435.723 567.909 mo
435.723 567.909 461.668 564.01 465.211 515.35 cv
465.211 515.35 468.191 562.76 435.723 567.909 cv
cp
f
443.418 570.745 mo
443.418 570.745 469.145 565.881 470.879 517.014 cv
470.879 517.014 475.625 564.397 443.418 570.745 cv
cp
f
448.863 569.542 mo
448.863 569.542 474.816 565.659 478.355 516.995 cv
478.355 516.995 481.328 564.397 448.863 569.542 cv
cp
f
grestore
252.723 288.202 mo
252.723 288.202 280.508 294.323 298.66 281.51 cv
313.82 270.807 304.898 239.143 304.898 239.143 cv
304.898 239.143 321.402 262.682 305.793 281.065 cv
285.723 304.698 252.723 288.202 252.723 288.202 cv
cp
.27451 .207843 .145098 rgb
f
243.727 288.26 mo
243.727 288.26 284.055 302.917 299.977 289.51 cv
311.852 279.51 318.102 264.51 313.102 247.01 cv
313.102 247.01 327.477 279.51 299.977 296.385 cv
274 312.327 243.727 288.26 243.727 288.26 cv
cp
1 1 1 rgb
f
261.809 95.397 mo
261.809 95.397 325.793 58.7524 413.527 85.5884 cv
501.253 112.428 556.226 199.405 556.226 199.405 cv
556.226 199.405 446.852 33.7798 261.809 95.397 cv
cp
.27451 .207843 .145098 rgb
f
201.145 150.045 mo
201.145 150.045 237.262 83.1509 331.809 77.7993 cv
292.566 87.6118 li
292.566 87.6118 239.055 96.5298 201.145 150.045 cv
cp
f
gsave
265.363 94.7485 mo
265.363 94.7485 331.711 65.6899 416.543 88.9478 cv
477.477 105.655 510.601 148.78 510.601 148.78 cv
534.351 171.28 li
534.351 171.28 494.976 114.405 357.676 120.167 cv
311.09 122.124 265.363 94.7485 265.363 94.7485 cv
cp
clp
275.227 90.229 mo
275.227 90.229 313.926 78.8774 342.309 110.354 cv
342.309 110.354 322.695 86.0962 275.227 90.229 cv
cp
f
351.086 111.389 mo
351.086 111.389 331.477 87.6548 296.379 85.5845 cv
296.379 85.5845 324.246 78.3618 351.086 111.389 cv
cp
f
360.012 112.549 mo
360.012 112.549 341.926 87.6274 307.031 83.3774 cv
307.031 83.3774 335.289 77.9165 360.012 112.549 cv
cp
f
369.336 115.475 mo
369.336 115.475 353.664 88.979 319.313 81.4868 cv
319.313 81.4868 347.961 78.6821 369.336 115.475 cv
cp
f
379.113 120.803 mo
379.113 120.803 367.219 92.4048 334.219 80.272 cv
334.219 80.272 362.98 81.4282 379.113 120.803 cv
cp
f
386.332 122.885 mo
386.332 122.885 376.535 93.7056 344.504 79.2056 cv
344.504 79.2056 373.105 82.4321 386.332 122.885 cv
cp
f
392.555 125.135 mo
392.555 125.135 385.371 95.2056 354.719 77.9556 cv
354.719 77.9556 382.934 83.6821 392.555 125.135 cv
cp
f
398.121 127.721 mo
398.121 127.721 393.59 97.2759 364.582 77.3931 cv
364.582 77.3931 392.188 85.5845 398.121 127.721 cv
cp
f
403.363 130.452 mo
403.363 130.452 401.164 99.7524 373.746 77.729 cv
373.746 77.729 400.656 87.9907 403.363 130.452 cv
cp
f
408.121 132.463 mo
408.121 132.463 408.129 101.69 382.359 77.7524 cv
382.359 77.7524 408.469 89.9204 408.121 132.463 cv
cp
f
413.039 134.448 mo
413.039 134.448 415.578 103.772 391.855 77.7954 cv
391.855 77.7954 416.875 92.0649 413.039 134.448 cv
cp
f
416.676 140.139 mo
416.676 140.139 422.949 110.006 402.598 81.3149 cv
402.598 81.3149 425.68 98.5493 416.676 140.139 cv
cp
f
422.297 144.413 mo
422.297 144.413 430.039 114.252 410.91 82.936 cv
410.91 82.936 433.324 102.815 422.297 144.413 cv
cp
f
426.422 148.542 mo
426.422 148.542 437.215 117.487 419.699 83.6587 cv
419.699 83.6587 441.68 105.721 426.422 148.542 cv
cp
f
432.301 150.702 mo
432.301 150.702 444.363 120.116 428.258 85.5923 cv
428.258 85.5923 449.313 108.549 432.301 150.702 cv
cp
f
438.098 153.838 mo
438.098 153.838 451.48 123.815 436.902 88.6196 cv
436.902 88.6196 456.934 112.471 438.098 153.838 cv
cp
f
443.398 156.917 mo
443.398 156.917 458.059 127.495 444.992 91.7017 cv
444.992 91.7017 463.996 116.385 443.398 156.917 cv
cp
f
446.758 160.827 mo
446.758 160.827 463.91 132.792 453.996 95.9985 cv
453.996 95.9985 470.781 122.229 446.758 160.827 cv
cp
f
451.191 164.538 mo
451.191 164.538 469.887 137.678 462.477 99.9243 cv
462.477 99.9243 477.332 127.588 451.191 164.538 cv
cp
f
457.902 167.12 mo
457.902 167.12 476.594 140.256 469.184 102.502 cv
469.184 102.502 484.039 130.174 457.902 167.12 cv
cp
f
462.082 172.877 mo
462.082 172.877 482.417 147.233 477.383 109.088 cv
477.383 109.088 490.48 137.635 462.082 172.877 cv
cp
f
467.012 177.174 mo
467.012 177.174 488.351 152.362 484.824 114.049 cv
484.824 114.049 496.789 143.084 467.012 177.174 cv
cp
f
472.637 180.971 mo
472.637 180.971 494.816 156.901 492.609 118.487 cv
492.609 118.487 503.566 147.924 472.637 180.971 cv
cp
f
479.348 185.1 mo
479.348 185.1 501.519 161.038 499.324 122.624 cv
499.324 122.624 510.269 152.053 479.348 185.1 cv
cp
f
grestore
155.602 358.155 mo
155.602 358.155 201.355 450.268 285.602 478.155 cv
376.227 508.155 424.352 498.155 424.352 498.155 cv
424.352 498.155 359.352 513.78 277.477 483.155 cv
183.949 448.17 155.602 358.155 155.602 358.155 cv
cp
f
587.497 66.9668 mo
587.497 66.9668 513.329 43.6348 446.665 90.2988 cv
381.899 135.639 362.915 232.795 400.415 320.295 cv
428.231 385.202 474.735 460.249 534.911 492.936 cv
555.852 504.315 574.165 516.967 602.497 509.467 cv
620.243 504.768 624.977 513.635 642.497 513.635 cv
668.329 513.635 711.665 509.467 780.415 445.295 cv
826.329 402.44 869.997 319.467 862.497 211.131 cv
856.442 123.697 772.079 70.1152 683.333 72.7988 cv
628.333 74.4668 587.497 66.9668 587.497 66.9668 cv
cp
f
643.333 506.295 mo
635.696 506.295 630.481 505.624 625.438 504.975 cv
620.454 504.327 617.969 498.631 610.829 498.631 cv
609.008 498.631 598.797 503.92 597.079 503.92 cv
493.336 503.92 424.309 361.663 405.622 318.065 cv
370.368 235.799 393.45 137.084 458.172 93.3262 cv
489.723 71.998 526.954 67.5215 552.629 67.5215 cv
574.696 67.5215 590.321 70.8027 590.477 70.8379 cv
591.575 71.1152 622.329 78.6699 669.993 78.6699 cv
674.36 78.6699 678.868 78.6074 683.504 78.4668 cv
685.438 78.4121 687.356 78.3809 689.282 78.3809 cv
779.141 78.3809 846.469 137.693 854.754 215.615 cv
864.997 311.967 817.961 396.053 776.239 441.459 cv
734.649 486.717 668.102 506.295 643.333 506.295 cv
cp
1 1 1 rgb
f
637.028 90.9199 mo
637.028 90.9199 652.028 113.686 639.469 107.842 cv
603.567 91.1582 581.055 92.8184 569.442 93.1465 cv
550.657 93.6738 542.301 89.4395 542.301 89.4395 cv
542.301 89.4395 557.586 91.7559 562.188 91.7402 cv
554.711 87.8496 li
554.711 87.8496 558.551 88.7363 564.481 89.4316 cv
570.407 90.123 564.129 85.7012 570.583 87.5996 cv
577.043 89.498 572.497 85.7441 575.446 85.8809 cv
578.391 86.0215 578.157 83.5371 585.7 83.6543 cv
593.243 83.7715 590.145 81.9746 604.407 82.2949 cv
618.665 82.6191 646.122 80.8496 646.122 80.8496 cv
646.122 80.8496 645.758 85.9043 637.028 90.9199 cv
cp
.27451 .207843 .145098 rgb
f
848.329 196.131 mo
848.329 196.131 879.997 333.635 759.165 454.045 cv
759.165 454.045 847.079 353.624 831.665 195.295 cv
848.329 196.131 li
cp
f
569.79 503.42 mo
569.79 503.42 596.665 507.17 607.497 498.631 cv
611.688 495.331 614.997 494.467 624.997 501.131 cv
634.997 507.795 645.833 506.967 645.833 506.967 cv
645.833 506.967 625 507.795 618.333 506.131 cv
611.665 504.467 578.118 504.256 569.79 503.42 cv
cp
f
639.997 77.7988 mo
639.997 77.7988 648.329 71.959 659.165 53.6309 cv
669.997 35.2988 680.829 28.6309 689.165 21.1309 cv
687.497 26.9668 li
687.497 26.9668 701.668 13.6309 718.333 8.63086 cv
714.165 12.7988 li
714.165 12.7988 731.665 3.63086 746.665 1.13086 cv
744.997 4.4668 li
744.997 4.4668 766.665 -1.36523 781.665 .298828 cv
776.665 2.79883 li
776.665 2.79883 798.329 1.13086 816.665 11.9668 cv
809.165 11.9668 li
809.165 11.9668 833.391 20.291 848.649 34.0527 cv
849.403 34.7324 850.129 35.4277 850.833 36.1309 cv
850.833 36.1309 865.833 50.2988 877.497 64.4668 cv
889.165 78.6309 916.665 103.635 929.165 130.299 cv
941.665 156.967 948.333 177.799 958.333 187.799 cv
958.333 187.799 950 192.799 933.333 191.967 cv
916.665 191.131 909.165 196.131 886.665 201.967 cv
869.438 206.432 847.329 204.549 837.907 203.424 cv
835.028 203.076 833.333 202.799 833.333 202.799 cv
833.333 202.799 825 206.131 805.833 201.967 cv
805.833 201.967 778.329 201.967 769.165 199.467 cv
759.997 196.967 759.165 194.459 746.665 193.631 cv
734.165 192.799 712.497 187.799 712.497 187.799 cv
714.165 191.967 li
694.165 181.131 li
696.665 186.131 li
696.665 186.131 675.833 175.299 668.333 165.299 cv
669.165 170.299 li
669.165 170.299 650 153.631 643.333 136.967 cv
636.665 120.299 630.833 94.4707 627.497 90.2988 cv
627.497 90.2988 635.833 81.9707 639.997 77.7988 cv
cp
f
860.348 199.123 mo
851.575 199.123 843.668 198.4 838.579 197.795 cv
835.911 197.475 834.313 197.213 834.25 197.205 cv
832.692 196.951 li
831.227 197.537 li
831.219 197.537 828.641 198.389 823.29 198.389 cv
818.508 198.389 813.04 197.732 807.04 196.424 cv
806.442 196.295 li
805.833 196.295 li
798.391 196.295 777.567 195.881 770.657 193.998 cv
767.805 193.221 765.836 192.439 763.934 191.682 cv
759.915 190.084 756.122 188.576 747.04 187.971 cv
735.145 187.186 713.985 182.326 713.774 182.279 cv
704.032 180.025 li
681.047 167.576 li
682.649 170.771 li
678.665 167.873 672.555 160.24 670.415 157.381 cv
669.836 163.193 li
664.391 157.947 653.141 146.213 648.594 134.861 cv
645.532 127.201 642.606 117.404 640.028 108.764 cv
637.586 100.592 635.915 95.0801 634.415 91.3965 cv
643.711 82.0996 li
645.836 80.4824 653.938 73.6113 664.047 56.5137 cv
668.934 48.2441 673.805 42.5059 678.465 37.9551 cv
676.422 45.1152 li
691.379 31.0957 li
691.497 30.9902 704.79 18.0059 721.04 13.9434 cv
716.793 17.8262 li
716.915 17.7598 725.833 13.1265 736.04 9.7168 cv
734.293 13.2051 li
746.469 9.93945 li
746.629 9.90039 762.532 5.66992 775.782 5.66992 cv
775.965 5.66992 776.145 5.66992 776.325 5.66992 cv
777.098 8.45508 li
777.196 8.44336 778.227 8.37646 779.946 8.37646 cv
784.934 8.37646 798.747 7.79492 812.915 16.959 cv
807.317 17.3262 li
807.551 17.4043 830.661 25.459 844.852 38.2637 cv
845.532 38.8809 846.188 39.5059 846.825 40.1387 cv
847.086 40.3926 861.829 54.3535 873.122 68.0684 cv
876.243 71.8613 880.313 76.248 885.032 81.3262 cv
897.735 95.0015 915.141 113.736 924.032 132.709 cv
927.645 140.416 930.836 147.795 933.649 154.303 cv
939.063 166.822 943.622 177.357 948.907 185.143 cv
945.95 185.818 941.985 186.389 937.04 186.389 cv
935.946 186.389 934.801 186.365 933.618 186.303 cv
932.29 186.236 931.008 186.201 929.778 186.201 cv
919.344 186.201 912.122 188.455 902.125 191.568 cv
897.379 193.049 892 194.725 885.243 196.475 cv
878.465 198.232 870.09 199.123 860.348 199.123 cv
cp
1 1 1 rgb
f
631.247 92.7949 mo
631.247 92.7949 646.668 75.7207 674.583 81.5488 cv
702.497 87.3809 720.836 93.6309 731.668 98.6309 cv
739.422 102.209 755.715 106.428 768.02 110.373 cv
772.903 111.936 777.157 113.459 779.997 114.881 cv
789.997 119.881 824.579 131.971 848.747 142.799 cv
872.918 153.631 950.418 185.299 950.418 185.299 cv
950.418 185.299 896.668 161.545 878.333 153.631 cv
859.997 145.717 826.247 132.381 810.833 125.717 cv
795.418 119.049 775.415 112.795 758.747 106.131 cv
742.083 99.4668 730 94.0488 726.668 92.7988 cv
723.333 91.5488 705.418 87.7949 693.333 83.6309 cv
681.247 79.4668 650.829 63.6309 631.247 92.7949 cv
cp
.27451 .207843 .145098 rgb
f
gsave
837.907 203.424 mo
837.907 203.424 854.997 449.459 672.497 503.631 cv
672.497 503.631 763.329 441.967 754.165 196.131 cv
837.907 203.424 li
cp
clp
755.415 203.623 mo
755.415 203.623 798.329 212.795 837.907 203.424 cv
837.907 203.424 802.079 219.455 755.415 203.623 cv
cp
f
747.079 209.873 mo
747.079 209.873 794.993 226.123 839.579 209.873 cv
839.579 209.873 798.329 233.623 747.079 209.873 cv
cp
f
741.247 217.795 mo
741.247 217.795 789.579 236.545 837.497 218.623 cv
837.497 218.623 797.079 244.459 741.247 217.795 cv
cp
f
738.747 225.709 mo
738.747 225.709 787.079 246.545 835.829 226.545 cv
835.829 226.545 790.829 253.623 738.747 225.709 cv
cp
f
738.329 234.467 mo
738.329 234.467 781.665 257.381 837.079 235.717 cv
837.079 235.717 786.665 264.881 738.329 234.467 cv
cp
f
737.493 242.381 mo
737.493 242.381 781.247 267.795 838.743 242.795 cv
838.743 242.795 791.247 274.467 737.493 242.381 cv
cp
f
736.657 249.881 mo
736.657 249.881 780.415 275.295 837.907 250.295 cv
837.907 250.295 790.415 281.967 736.657 249.881 cv
cp
f
735.821 257.381 mo
735.821 257.381 779.579 282.795 837.071 257.795 cv
837.071 257.795 789.579 289.467 735.821 257.381 cv
cp
f
736.653 264.881 mo
736.653 264.881 780.407 290.295 837.903 265.295 cv
837.903 265.295 790.407 296.967 736.653 264.881 cv
cp
f
736.239 272.381 mo
736.239 272.381 779.993 297.795 837.489 272.795 cv
837.489 272.795 789.993 304.467 736.239 272.381 cv
cp
f
734.989 279.881 mo
734.989 279.881 778.743 305.295 836.239 280.295 cv
836.239 280.295 788.743 311.967 734.989 279.881 cv
cp
f
735.817 287.381 mo
735.817 287.381 779.571 312.795 837.067 287.795 cv
837.067 287.795 789.571 319.467 735.817 287.381 cv
cp
f
727.602 292.483 mo
727.602 292.483 785.829 321.545 836.653 295.295 cv
836.653 295.295 792.602 326.233 727.602 292.483 cv
cp
f
733.321 301.545 mo
733.321 301.545 777.079 326.959 834.571 301.959 cv
834.571 301.959 787.079 333.631 733.321 301.545 cv
cp
f
734.153 309.045 mo
734.153 309.045 777.907 334.459 835.403 309.459 cv
835.403 309.459 787.907 341.131 734.153 309.045 cv
cp
f
733.739 316.545 mo
733.739 316.545 777.493 341.959 834.989 316.959 cv
834.989 316.959 787.493 348.631 733.739 316.545 cv
cp
f
731.235 322.795 mo
731.235 322.795 774.989 348.209 832.485 323.209 cv
832.485 323.209 784.989 354.881 731.235 322.795 cv
cp
f
729.153 329.459 mo
729.153 329.459 772.907 354.874 830.403 329.874 cv
830.403 329.874 782.907 361.545 729.153 329.459 cv
cp
f
729.985 336.959 mo
729.985 336.959 773.739 362.374 831.235 337.374 cv
831.235 337.374 783.739 369.045 729.985 336.959 cv
cp
f
729.567 344.459 mo
729.567 344.459 773.321 369.874 830.817 344.874 cv
830.817 344.874 783.321 376.545 729.567 344.459 cv
cp
f
721.625 349.327 mo
721.625 349.327 766.379 376.983 828.079 355.002 cv
828.079 355.002 776.563 384.163 721.625 349.327 cv
cp
f
722.125 356.858 mo
722.125 356.858 766.887 384.518 828.583 362.538 cv
828.583 362.538 777.071 391.702 722.125 356.858 cv
cp
f
721.321 364.327 mo
721.321 364.327 766.079 391.983 827.77 370.002 cv
827.77 370.002 776.266 399.167 721.321 364.327 cv
cp
f
714.625 368.819 mo
714.625 368.819 757.965 398.651 820.672 379.733 cv
820.672 379.733 767.786 406.319 714.625 368.819 cv
cp
f
714.758 376.366 mo
714.758 376.366 758.098 406.198 820.805 387.284 cv
820.805 387.284 767.922 413.874 714.758 376.366 cv
cp
f
707.602 381.233 mo
707.602 381.233 760.102 414.983 819.625 394.702 cv
819.625 394.702 762.915 420.608 707.602 381.233 cv
cp
f
702.915 386.233 mo
702.915 386.233 747.903 420.295 811.461 404.483 cv
811.461 404.483 754.168 426.303 702.915 386.233 cv
cp
f
698.54 391.545 mo
698.54 391.545 746.977 429.67 811.223 412.034 cv
811.223 412.034 752.29 435.295 698.54 391.545 cv
cp
f
695.415 397.483 mo
695.415 397.483 746.04 437.795 809.684 419.381 cv
809.684 419.381 751.04 443.733 695.415 397.483 cv
cp
f
695.915 404.807 mo
695.915 404.807 735.657 439.288 800.079 427.487 cv
800.079 427.487 744.563 448.006 695.915 404.807 cv
cp
f
695.208 412.319 mo
695.208 412.319 734.946 446.811 799.372 435.006 cv
799.372 435.006 743.856 455.526 695.208 412.319 cv
cp
f
693.215 419.561 mo
693.215 419.561 732.954 454.045 797.375 442.245 cv
797.375 442.245 741.86 462.764 693.215 419.561 cv
cp
f
693.594 428.19 mo
693.594 428.19 734.219 461.624 798.317 448.147 cv
798.317 448.147 743.352 470.104 693.594 428.19 cv
cp
f
693.083 435.717 mo
693.083 435.717 733.704 469.163 797.805 455.686 cv
797.805 455.686 742.84 477.639 693.083 435.717 cv
cp
f
691.282 443.01 mo
691.282 443.01 731.903 476.448 796 462.971 cv
796 462.971 741.032 484.936 691.282 443.01 cv
cp
f
692.344 449.858 mo
692.344 449.858 732.969 483.288 797.067 469.811 cv
797.067 469.811 742.102 491.772 692.344 449.858 cv
cp
f
691.833 457.381 mo
691.833 457.381 732.454 490.827 796.555 477.35 cv
796.555 477.35 741.59 499.303 691.833 457.381 cv
cp
f
690.032 464.674 mo
690.032 464.674 730.653 498.112 794.75 484.635 cv
794.75 484.635 739.782 506.6 690.032 464.674 cv
cp
f
686.633 470.022 mo
686.633 470.022 726.524 504.327 790.899 492.249 cv
790.899 492.249 735.469 513.006 686.633 470.022 cv
cp
f
685.961 477.538 mo
685.961 477.538 725.844 511.858 790.223 499.772 cv
790.223 499.772 734.793 520.53 685.961 477.538 cv
cp
f
684 484.788 mo
684 484.788 723.883 519.1 788.258 507.018 cv
788.258 507.018 732.829 527.78 684 484.788 cv
cp
f
680.93 489.053 mo
680.93 489.053 719.54 524.795 784.313 515.084 cv
784.313 515.084 728.165 533.795 680.93 489.053 cv
cp
f
679.985 496.542 mo
679.985 496.542 718.583 532.295 783.36 522.569 cv
783.36 522.569 727.211 541.292 679.985 496.542 cv
cp
f
677.758 503.717 mo
677.758 503.717 716.36 539.459 781.133 529.745 cv
781.133 529.745 724.985 548.463 677.758 503.717 cv
cp
f
grestore
gsave
493.329 81.1309 mo
493.329 81.1309 447.497 91.9707 417.497 155.299 cv
387.497 218.631 389.997 300.295 439.997 376.131 cv
489.997 451.967 534.997 492.799 574.997 502.799 cv
574.997 502.799 464.165 394.471 454.165 275.299 cv
444.165 156.131 509.997 87.7988 509.997 87.7988 cv
509.997 87.7988 499.993 74.459 493.329 81.1309 cv
cp
clp
481.872 81.0293 mo
481.872 81.0293 495.309 97.2793 520.934 101.029 cv
520.934 101.029 494.059 100.717 481.872 81.0293 cv
cp
f
476.872 83.8418 mo
476.872 83.8418 490.309 100.092 515.934 103.842 cv
515.934 103.842 489.059 103.529 476.872 83.8418 cv
cp
f
472.809 86.9668 mo
472.809 86.9668 486.247 103.217 511.872 106.967 cv
511.872 106.967 484.997 106.654 472.809 86.9668 cv
cp
f
467.497 90.0918 mo
467.497 90.0918 480.934 106.342 506.559 110.092 cv
506.559 110.092 479.684 109.779 467.497 90.0918 cv
cp
f
462.497 92.9043 mo
462.497 92.9043 475.934 109.154 501.559 112.904 cv
501.559 112.904 474.684 112.592 462.497 92.9043 cv
cp
f
458.434 96.0293 mo
458.434 96.0293 471.872 112.279 497.497 116.029 cv
497.497 116.029 470.622 115.717 458.434 96.0293 cv
cp
f
455.934 101.029 mo
455.934 101.029 467.497 119.467 503.434 121.342 cv
503.434 121.342 468.122 124.779 455.934 101.029 cv
cp
f
451.559 105.092 mo
451.559 105.092 461.247 123.529 492.809 125.092 cv
492.809 125.092 460.309 128.842 451.559 105.092 cv
cp
f
448.122 109.467 mo
448.122 109.467 454.684 130.717 496.872 130.404 cv
496.872 130.404 456.559 136.029 448.122 109.467 cv
cp
f
444.372 113.217 mo
444.372 113.217 451.145 135.705 494.684 135.373 cv
494.684 135.373 453.079 141.33 444.372 113.217 cv
cp
f
440.309 117.592 mo
440.309 117.592 447.083 140.08 490.622 139.748 cv
490.622 139.748 449.016 145.705 440.309 117.592 cv
cp
f
437.184 122.592 mo
437.184 122.592 443.958 145.08 487.497 144.748 cv
487.497 144.748 445.891 150.705 437.184 122.592 cv
cp
f
433.122 126.967 mo
433.122 126.967 439.895 149.455 483.434 149.123 cv
483.434 149.123 441.829 155.08 433.122 126.967 cv
cp
f
429.997 131.967 mo
429.997 131.967 436.77 154.455 480.309 154.123 cv
480.309 154.123 438.704 160.08 429.997 131.967 cv
cp
f
425.934 136.342 mo
425.934 136.342 432.708 158.83 476.247 158.498 cv
476.247 158.498 434.641 164.455 425.934 136.342 cv
cp
f
422.497 141.029 mo
422.497 141.029 429.27 163.518 472.809 163.186 cv
472.809 163.186 431.204 169.143 422.497 141.029 cv
cp
f
418.434 145.404 mo
418.434 145.404 425.208 167.893 468.747 167.561 cv
468.747 167.561 427.141 173.518 418.434 145.404 cv
cp
f
415.309 150.404 mo
415.309 150.404 422.083 172.893 465.622 172.561 cv
465.622 172.561 424.016 178.518 415.309 150.404 cv
cp
f
411.247 154.779 mo
411.247 154.779 418.02 177.268 461.559 176.936 cv
461.559 176.936 419.954 182.893 411.247 154.779 cv
cp
f
410.18 164.299 mo
410.18 164.299 418.844 186.131 462.196 182.088 cv
462.196 182.088 421.247 191.568 410.18 164.299 cv
cp
f
406.5 169.001 mo
406.5 169.001 415.168 190.834 458.524 186.787 cv
458.524 186.787 417.575 196.271 406.5 169.001 cv
cp
f
405.915 175.443 mo
405.915 175.443 415.594 196.842 458.708 190.779 cv
458.708 190.779 418.25 202.166 405.915 175.443 cv
cp
f
405.313 182.537 mo
405.313 182.537 415.774 203.568 458.641 195.92 cv
458.641 195.92 418.629 208.791 405.313 182.537 cv
cp
f
402.79 186.693 mo
402.79 186.693 412.469 208.092 455.583 202.029 cv
455.583 202.029 415.125 213.416 402.79 186.693 cv
cp
f
402.188 193.787 mo
402.188 193.787 412.649 214.818 455.516 207.17 cv
455.516 207.17 415.504 220.041 402.188 193.787 cv
cp
f
400.915 199.193 mo
400.915 199.193 410.594 220.592 453.708 214.529 cv
453.708 214.529 413.25 225.916 400.915 199.193 cv
cp
f
400.313 206.287 mo
400.313 206.287 410.774 227.318 453.641 219.67 cv
453.641 219.67 413.629 232.541 400.313 206.287 cv
cp
f
400.692 212.83 mo
400.692 212.83 410.782 234.037 453.774 227.131 cv
453.774 227.131 413.543 239.303 400.692 212.83 cv
cp
f
400.227 219.936 mo
400.227 219.936 411.094 240.756 453.805 232.271 cv
453.805 232.271 414.051 245.924 400.227 219.936 cv
cp
f
399.012 226.365 mo
399.012 226.365 409.922 247.162 452.61 238.584 cv
452.61 238.584 412.887 252.318 399.012 226.365 cv
cp
f
398.825 233.479 mo
398.825 233.479 410.497 253.857 452.844 243.725 cv
452.844 243.725 413.649 258.912 398.825 233.479 cv
cp
f
398.629 241.264 mo
398.629 241.264 411.364 260.998 453.11 248.635 cv
453.11 248.635 414.774 265.873 398.629 241.264 cv
cp
f
399.086 248.373 mo
399.086 248.373 412.536 267.623 453.801 253.732 cv
453.801 253.732 416.129 272.369 399.086 248.373 cv
cp
f
398.704 254.904 mo
398.704 254.904 412.196 274.123 453.426 260.143 cv
453.426 260.143 415.793 278.857 398.704 254.904 cv
cp
f
399.43 261.979 mo
399.43 261.979 413.622 280.693 454.321 265.209 cv
454.321 265.209 417.399 285.303 399.43 261.979 cv
cp
f
401.071 269.518 mo
401.071 269.518 415.602 286.838 456 271.85 cv
456 271.85 419.45 291.096 401.071 269.518 cv
cp
f
402.196 276.1 mo
402.196 276.1 417.383 292.913 457.165 276.541 cv
457.165 276.541 421.407 297.038 402.196 276.1 cv
cp
f
402.43 282.217 mo
402.43 282.217 417.653 298.999 457.391 282.541 cv
457.391 282.541 421.68 303.104 402.43 282.217 cv
cp
f
403.817 288.752 mo
403.817 288.752 419.688 304.991 458.758 287.19 cv
458.758 287.19 423.883 308.975 403.817 288.752 cv
cp
f
405.563 294.948 mo
405.563 294.948 421.59 312.659 460.477 292.053 cv
460.477 292.053 425.805 316.983 405.563 294.948 cv
cp
f
407.274 302.116 mo
407.274 302.116 423.915 319.198 462.063 297.131 cv
462.063 297.131 428.29 323.362 407.274 302.116 cv
cp
f
408.055 308.866 mo
408.055 308.866 424.723 325.901 462.825 303.741 cv
462.825 303.741 429.102 330.042 408.055 308.866 cv
cp
f
410.024 315.952 mo
410.024 315.952 427.293 332.331 464.602 308.749 cv
464.602 308.749 431.825 336.319 410.024 315.952 cv
cp
f
414.153 323.288 mo
414.153 323.288 432.36 338.749 468.215 313.233 cv
468.215 313.233 437.102 342.487 414.153 323.288 cv
cp
f
416.786 330.174 mo
416.786 330.174 435.516 344.928 470.458 318.065 cv
470.458 318.065 440.399 348.491 416.786 330.174 cv
cp
f
418.446 336.76 mo
418.446 336.76 437.196 351.467 472.071 324.518 cv
472.071 324.518 442.083 355.002 418.446 336.76 cv
cp
f
421.321 343.522 mo
421.321 343.522 440.583 357.514 474.489 329.249 cv
474.489 329.249 445.598 360.874 421.321 343.522 cv
cp
f
423.774 348.108 mo
423.774 348.108 442.813 362.522 477.188 335.057 cv
477.188 335.057 447.758 365.995 423.774 348.108 cv
cp
f
426.786 354.834 mo
426.786 354.834 446.305 368.522 479.7 339.752 cv
479.7 339.752 451.379 371.803 426.786 354.834 cv
cp
f
428.813 361.315 mo
428.813 361.315 448.348 374.959 481.676 346.108 cv
481.676 346.108 453.426 378.217 428.813 361.315 cv
cp
f
432.059 367.909 mo
432.059 367.909 452.067 380.803 484.348 350.694 cv
484.348 350.694 457.262 383.881 432.059 367.909 cv
cp
f
433.571 373.225 mo
433.571 373.225 453.594 387.506 487.493 357.249 cv
487.493 357.249 458.778 390.936 433.571 373.225 cv
cp
f
436.926 380.147 mo
436.926 380.147 457.407 393.651 490.25 362.061 cv
490.25 362.061 462.719 396.862 436.926 380.147 cv
cp
f
439.266 386.85 mo
439.266 386.85 459.754 400.303 492.536 368.635 cv
492.536 368.635 465.071 403.499 439.266 386.85 cv
cp
f
442.848 393.616 mo
442.848 393.616 463.797 406.268 495.454 373.327 cv
495.454 373.327 469.227 409.272 442.848 393.616 cv
cp
f
445.231 398.491 mo
445.231 398.491 466.196 411.358 497.926 378.842 cv
497.926 378.842 471.598 414.42 445.231 398.491 cv
cp
f
449.055 405.17 mo
449.055 405.17 470.418 417.225 501.008 383.452 cv
501.008 383.452 475.934 420.065 449.055 405.17 cv
cp
f
451.848 411.686 mo
451.848 411.686 473.215 423.702 503.743 389.85 cv
503.743 389.85 478.743 426.522 451.848 411.686 cv
cp
f
455.891 418.194 mo
455.891 418.194 477.657 429.374 506.969 394.334 cv
506.969 394.334 483.282 431.995 455.891 418.194 cv
cp
f
455.856 422.866 mo
455.856 422.866 476.821 435.733 508.551 403.217 cv
508.551 403.217 482.223 438.795 455.856 422.866 cv
cp
f
459.68 429.545 mo
459.68 429.545 481.043 441.6 511.633 407.827 cv
511.633 407.827 486.559 444.44 459.68 429.545 cv
cp
f
462.473 436.061 mo
462.473 436.061 483.84 448.077 514.368 414.225 cv
514.368 414.225 489.368 450.897 462.473 436.061 cv
cp
f
466.516 442.569 mo
466.516 442.569 488.282 453.749 517.594 418.709 cv
517.594 418.709 493.907 456.37 466.516 442.569 cv
cp
f
468.723 446.686 mo
468.723 446.686 490.09 458.702 520.618 424.85 cv
520.618 424.85 495.618 461.522 468.723 446.686 cv
cp
f
472.766 453.194 mo
472.766 453.194 494.532 464.374 523.844 429.334 cv
523.844 429.334 500.157 466.995 472.766 453.194 cv
cp
f
472.731 457.866 mo
472.731 457.866 493.696 470.733 525.426 438.217 cv
525.426 438.217 499.098 473.795 472.731 457.866 cv
cp
f
476.555 464.545 mo
476.555 464.545 497.918 476.6 528.508 442.827 cv
528.508 442.827 503.434 479.44 476.555 464.545 cv
cp
f
479.348 471.061 mo
479.348 471.061 500.715 483.077 531.243 449.225 cv
531.243 449.225 506.243 485.897 479.348 471.061 cv
cp
f
483.391 477.569 mo
483.391 477.569 505.157 488.749 534.469 453.709 cv
534.469 453.709 510.782 491.37 483.391 477.569 cv
cp
f
486.848 482.311 mo
486.848 482.311 508.215 494.327 538.743 460.475 cv
538.743 460.475 513.743 497.147 486.848 482.311 cv
cp
f
490.891 488.819 mo
490.891 488.819 512.657 499.999 541.969 464.959 cv
541.969 464.959 518.282 502.62 490.891 488.819 cv
cp
f
494.973 491.686 mo
494.973 491.686 516.34 503.702 546.868 469.85 cv
546.868 469.85 521.868 506.522 494.973 491.686 cv
cp
f
499.016 498.194 mo
499.016 498.194 520.782 509.374 550.094 474.334 cv
550.094 474.334 526.407 511.995 499.016 498.194 cv
cp
f
502.473 502.936 mo
502.473 502.936 523.84 514.952 554.368 481.1 cv
554.368 481.1 529.368 517.772 502.473 502.936 cv
cp
f
506.516 509.444 mo
506.516 509.444 528.282 520.624 557.594 485.584 cv
557.594 485.584 533.907 523.245 506.516 509.444 cv
cp
f
511.223 511.686 mo
511.223 511.686 532.59 523.702 563.118 489.85 cv
563.118 489.85 538.118 526.522 511.223 511.686 cv
cp
f
515.266 518.194 mo
515.266 518.194 537.032 529.374 566.344 494.334 cv
566.344 494.334 542.657 531.995 515.266 518.194 cv
cp
f
grestore
594.165 498.42 mo
594.165 498.42 608.54 481.545 620.415 489.045 cv
632.29 496.545 640.415 501.545 640.415 501.545 cv
640.415 501.545 628.54 497.17 621.04 493.42 cv
613.54 489.67 604.165 491.545 594.165 498.42 cv
cp
f
590.727 73.7324 mo
590.727 73.7324 564.165 65.2949 533.071 71.2324 cv
533.071 71.2324 570.102 68.2637 590.727 73.7324 cv
cp
f
843.329 211.967 mo
843.329 211.967 849.997 301.135 808.329 383.635 cv
808.329 383.635 857.497 301.971 843.329 211.967 cv
cp
1 1 1 rgb
f
474.165 235.299 mo
474.165 235.299 465.911 193.404 479.997 170.299 cv
500.829 136.135 525.18 134.873 536.665 136.967 cv
573.329 143.631 576.747 159.376 568.329 197.799 cv
559.911 236.225 542.766 252.646 536.665 263.635 cv
519.997 293.635 519.813 290.436 513.567 292.901 cv
489.817 302.276 478.684 261.877 474.165 235.299 cv
cp
f
gsave
474.165 235.299 mo
474.165 235.299 465.911 193.404 479.997 170.299 cv
500.829 136.135 525.18 134.873 536.665 136.967 cv
573.329 143.631 576.747 159.376 568.329 197.799 cv
559.911 236.225 542.766 252.646 536.665 263.635 cv
519.997 293.635 519.813 290.436 513.567 292.901 cv
489.817 302.276 478.684 261.877 474.165 235.299 cv
cp
clp
513.547 141.501 mo
513.547 141.501 533.805 150.318 571.602 144.986 cv
571.602 144.986 536.809 155.693 513.547 141.501 cv
cp
.27451 .207843 .145098 rgb
f
499.543 142.775 mo
502.149 144.514 529.801 164.068 586.993 148.6 cv
586.993 148.6 528.469 170.889 499.543 142.775 cv
cp
f
485.875 144.338 mo
485.875 144.338 518.114 176.072 592.77 153.412 cv
592.77 153.412 521.965 182.154 485.875 144.338 cv
cp
f
488.969 154.1 mo
488.969 154.1 516.219 179.381 582.25 161.9 cv
582.25 161.9 524.426 185.064 488.969 154.1 cv
cp
f
488.231 159.811 mo
488.231 159.811 515.172 185.123 581.516 167.619 cv
581.516 167.619 523.696 190.779 488.231 159.811 cv
cp
f
482.461 161.912 mo
482.461 161.912 514.598 194.279 589.352 170.982 cv
589.352 170.982 518.547 199.725 482.461 161.912 cv
cp
f
478.93 167.876 mo
478.93 167.876 511.329 199.751 585.817 176.951 cv
585.817 176.951 516.032 204.818 478.93 167.876 cv
cp
f
482.993 176.295 mo
482.993 176.295 510.754 202.006 576.274 184.1 cv
576.274 184.1 518.45 207.264 482.993 176.295 cv
cp
f
477.219 178.389 mo
477.219 178.389 508.875 210.646 584.11 187.463 cv
584.11 187.463 513.305 216.209 477.219 178.389 cv
cp
f
473.684 184.361 mo
473.684 184.361 506.344 215.584 580.575 193.436 cv
580.575 193.436 509.766 222.174 473.684 184.361 cv
cp
f
476.86 193.326 mo
476.86 193.326 504.196 217.818 570.141 201.135 cv
570.141 201.135 512.317 224.299 476.86 193.326 cv
cp
f
471.086 195.428 mo
471.086 195.428 503.747 226.646 577.977 204.498 cv
577.977 204.498 507.172 233.24 471.086 195.428 cv
cp
f
467.551 201.393 mo
467.551 201.393 500.211 232.619 574.442 210.471 cv
574.442 210.471 503.633 239.209 467.551 201.393 cv
cp
f
471.911 211.354 mo
471.911 211.354 499.25 235.846 565.192 219.158 cv
565.192 219.158 507.372 242.322 471.911 211.354 cv
cp
f
466.141 213.451 mo
466.141 213.451 498.801 244.674 573.032 222.521 cv
573.032 222.521 502.223 251.264 466.141 213.451 cv
cp
f
462.606 219.42 mo
462.606 219.42 494.883 251.619 569.5 228.494 cv
569.5 228.494 498.696 257.232 462.606 219.42 cv
cp
f
462.2 225.26 mo
462.2 225.26 494.758 257.123 569.09 234.334 cv
569.09 234.334 498.282 263.076 462.2 225.26 cv
cp
f
458.665 231.232 mo
458.665 231.232 491.25 263.404 565.555 240.303 cv
565.555 240.303 494.75 269.049 458.665 231.232 cv
cp
f
461.965 241.662 mo
461.965 241.662 496.493 270.803 569.211 244.1 cv
569.211 244.1 500.321 277.17 461.965 241.662 cv
cp
f
458.805 247.838 mo
458.805 247.838 493.016 277.975 566.051 250.279 cv
566.051 250.279 497.161 283.346 458.805 247.838 cv
cp
f
458.762 253.689 mo
458.762 253.689 493.235 283.479 566.008 256.135 cv
566.008 256.135 497.118 289.206 458.762 253.689 cv
cp
f
455.602 259.869 mo
455.602 259.869 490.118 289.967 562.852 262.311 cv
562.852 262.311 493.958 295.381 455.602 259.869 cv
cp
f
463.915 271.314 mo
463.915 271.314 500.872 297.331 570.965 264.357 cv
570.965 264.357 505.235 303.338 463.915 271.314 cv
cp
f
461.313 277.748 mo
461.313 277.748 498.036 304.78 568.36 270.795 cv
568.36 270.795 502.633 309.764 461.313 277.748 cv
cp
f
461.786 283.592 mo
461.786 283.592 498.727 310.241 568.829 276.627 cv
568.829 276.627 503.102 315.608 461.786 283.592 cv
cp
f
459.172 290.022 mo
459.172 290.022 496.196 316.975 566.223 283.061 cv
566.223 283.061 500.485 322.038 459.172 290.022 cv
cp
f
grestore
481.977 85.9199 mo
481.977 85.9199 410.735 110.404 396.887 211.678 cv
382.391 317.709 461.809 414.491 493.954 446.545 cv
493.954 446.545 434.075 377.502 413.274 306.608 cv
392.473 235.721 397.516 142.018 481.977 85.9199 cv
cp
.27451 .207843 .145098 rgb
f
628.852 108.631 mo
628.852 108.631 604.79 89.5684 562.915 98.6309 cv
562.915 98.6309 598.852 94.2559 628.852 108.631 cv
cp
f
580.102 92.6934 mo
580.102 92.6934 562.29 96.4434 543.227 91.7559 cv
524.165 87.0684 514.165 93.0059 514.165 93.0059 cv
514.165 93.0059 525.102 86.7559 537.602 88.3184 cv
550.102 89.8809 553.852 92.0684 568.227 90.1934 cv
582.602 88.3184 580.102 92.6934 580.102 92.6934 cv
cp
f
627.852 85.0215 mo
627.852 85.0215 613.293 74.2324 578.903 81.3184 cv
578.903 81.3184 600.266 78.3613 606.344 84.2207 cv
612.422 90.0801 627.266 90.4473 627.852 85.0215 cv
cp
f
606.665 91.1309 mo
606.665 91.1309 605.833 66.1309 602.497 56.9668 cv
599.165 47.7988 594.997 36.1309 601.668 33.6309 cv
606.415 31.8535 609.993 36.9707 614.165 37.7988 cv
618.333 38.6309 627.5 45.2949 625.833 53.6309 cv
624.165 61.9668 618.016 77.4824 621.352 92.4824 cv
621.352 92.4824 612.29 95.9199 606.665 91.1309 cv
cp
f
600.418 37.7988 mo
600.418 37.7988 600 43.209 608.75 42.3809 cv
617.5 41.5488 620.102 43.2637 620.102 43.2637 cv
620.102 43.2637 611.672 39.0449 608.75 37.3809 cv
605.833 35.7168 601.25 34.4707 600.418 37.7988 cv
cp
1 1 1 rgb
f
616.196 41.3887 mo
616.196 41.3887 626.977 44.0449 624.165 55.6074 cv
624.165 55.6074 624.79 49.9824 621.977 47.4824 cv
619.165 44.9824 619.321 44.3574 617.446 43.8887 cv
615.571 43.4199 615.102 42.1699 611.508 41.8574 cv
607.915 41.5449 614.946 40.6074 616.196 41.3887 cv
cp
f
599.79 42.4824 mo
599.79 42.4824 600.415 48.5762 603.227 54.5137 cv
606.04 60.4512 608.852 83.2637 607.915 92.3262 cv
607.915 92.3262 608.852 90.6074 608.852 83.4199 cv
608.852 77.7949 607.446 71.2324 607.446 67.4824 cv
607.446 63.7324 605.571 56.8574 604.633 54.8262 cv
603.696 52.7949 600.571 46.3887 599.79 42.4824 cv
cp
f
608.227 90.6074 mo
608.227 90.6074 610.571 93.7324 619.946 92.1699 cv
619.946 92.1699 614.165 95.4512 607.602 92.3262 cv
608.227 90.6074 li
cp
f
599.79 42.4824 mo
599.79 42.4824 600.102 47.0684 607.29 47.0684 cv
607.29 47.0684 606.665 48.0059 603.54 48.3184 cv
600.415 48.6309 600.102 46.959 599.79 42.4824 cv
cp
f
641.247 89.4668 mo
641.247 89.4668 646.668 129.049 667.918 153.217 cv
667.918 153.217 654.168 131.131 650.833 114.881 cv
647.497 98.6309 645.415 86.5488 641.247 89.4668 cv
cp
.27451 .207843 .145098 rgb
f
686.665 167.381 mo
686.665 167.381 659.79 142.381 650.415 87.3809 cv
650.415 87.3809 651.2 83.584 654.165 90.5059 cv
656.04 94.8809 659.852 112.982 663.54 123.631 cv
669.165 139.881 686.665 167.381 686.665 167.381 cv
cp
f
703.54 175.818 mo
703.54 175.818 673.54 149.568 660.415 85.8184 cv
660.415 85.8184 662.602 85.5059 665.415 92.3809 cv
668.227 99.2559 668.852 108.943 672.29 117.068 cv
675.727 125.193 684.477 154.881 703.54 175.818 cv
cp
f
713.227 174.256 mo
713.227 174.256 683.227 148.006 670.102 84.2559 cv
670.102 84.2559 672.29 83.9434 675.102 90.8184 cv
677.915 97.6934 678.54 107.381 681.977 115.506 cv
685.415 123.631 694.165 153.318 713.227 174.256 cv
cp
f
756.977 190.818 mo
756.977 190.818 747.602 188.943 732.915 179.568 cv
728.438 176.717 727.149 176.193 730.102 179.256 cv
738.54 188.006 742.602 188.631 756.977 190.818 cv
cp
f
730.727 183.006 mo
730.727 183.006 700.415 165.818 680.415 87.0684 cv
680.415 87.0684 682.602 86.7559 685.415 93.6309 cv
688.227 100.506 688.852 110.193 692.29 118.318 cv
695.727 126.443 710.727 165.193 730.727 183.006 cv
cp
f
741.352 182.693 mo
741.352 182.693 710.469 165.896 690.102 88.9434 cv
690.102 88.9434 692.329 88.6348 695.192 95.3535 cv
698.059 102.072 698.696 111.541 702.196 119.479 cv
705.696 127.42 720.977 165.287 741.352 182.693 cv
cp
f
752.29 184.256 mo
752.29 184.256 721.407 167.459 701.04 90.5059 cv
701.04 90.5059 703.266 90.1973 706.129 96.916 cv
708.997 103.635 709.633 113.104 713.133 121.041 cv
716.633 128.982 731.915 166.85 752.29 184.256 cv
cp
f
767.915 189.881 mo
767.915 189.881 734.774 172.971 712.915 95.5059 cv
712.915 95.5059 715.301 95.1973 718.375 101.959 cv
721.454 108.725 722.137 118.256 725.891 126.248 cv
729.649 134.24 746.051 172.357 767.915 189.881 cv
cp
f
781.665 193.631 mo
781.665 193.631 747.395 176.775 724.79 99.5684 cv
724.79 99.5684 727.258 99.2598 730.438 106.001 cv
733.622 112.74 734.325 122.244 738.211 130.209 cv
742.098 138.178 759.055 176.162 781.665 193.631 cv
cp
f
791.977 192.693 mo
791.977 192.693 759.024 176.787 737.29 103.943 cv
737.29 103.943 739.665 103.65 742.719 110.018 cv
745.782 116.373 746.458 125.338 750.192 132.85 cv
753.934 140.369 770.235 176.213 791.977 192.693 cv
cp
f
804.055 194.4 mo
804.055 194.4 771.547 178.975 750.102 108.318 cv
750.102 108.318 752.446 108.033 755.458 114.209 cv
758.485 120.376 759.149 129.068 762.836 136.354 cv
766.52 143.65 782.61 178.416 804.055 194.4 cv
cp
f
818.852 196.443 mo
818.852 196.443 785.336 181.717 763.227 114.256 cv
763.227 114.256 765.641 113.986 768.747 119.881 cv
771.868 125.768 772.551 134.068 776.356 141.021 cv
780.153 147.986 796.743 181.178 818.852 196.443 cv
cp
f
831.04 195.193 mo
831.04 195.193 798.84 181.643 777.602 119.568 cv
777.602 119.568 779.922 119.318 782.903 124.744 cv
785.899 130.162 786.559 137.799 790.211 144.197 cv
793.864 150.604 809.797 181.15 831.04 195.193 cv
cp
f
844.477 196.131 mo
844.477 196.131 812.278 183.365 791.04 124.881 cv
791.04 124.881 793.36 124.646 796.34 129.756 cv
799.336 134.861 799.997 142.057 803.649 148.084 cv
807.301 154.119 823.235 182.896 844.477 196.131 cv
cp
f
857.29 195.818 mo
857.29 195.818 824.715 183.729 803.227 128.318 cv
803.227 128.318 805.579 128.092 808.59 132.936 cv
811.625 137.771 812.29 144.592 815.985 150.299 cv
819.68 156.018 835.797 183.283 857.29 195.818 cv
cp
f
871.04 195.818 mo
871.04 195.818 837.711 184.623 815.727 133.318 cv
815.727 133.318 818.133 133.107 821.211 137.596 cv
824.321 142.072 824.997 148.385 828.778 153.67 cv
832.563 158.967 849.051 184.209 871.04 195.818 cv
cp
f
880.727 193.318 mo
880.727 193.318 849.844 183.521 829.477 138.631 cv
829.477 138.631 831.708 138.443 834.563 142.369 cv
837.438 146.291 838.071 151.814 841.571 156.436 cv
845.075 161.072 860.352 183.162 880.727 193.318 cv
cp
f
889.79 190.506 mo
889.79 190.506 861.547 181.998 842.915 143.006 cv
842.915 143.006 844.954 142.842 847.567 146.251 cv
850.196 149.662 850.774 154.455 853.977 158.475 cv
857.18 162.498 871.157 181.682 889.79 190.506 cv
cp
f
901.977 189.256 mo
901.977 189.256 875.618 182.256 858.227 150.193 cv
858.227 150.193 860.129 150.061 862.571 152.865 cv
865.024 155.666 865.563 159.607 868.551 162.912 cv
871.54 166.225 884.583 181.998 901.977 189.256 cv
cp
f
915.727 186.443 mo
915.727 186.443 890.118 181.014 873.227 156.131 cv
873.227 156.131 875.075 156.029 877.45 158.201 cv
879.829 160.376 880.352 163.436 883.258 166.001 cv
886.161 168.572 898.829 180.811 915.727 186.443 cv
cp
f
929.477 185.193 mo
929.477 185.193 905.938 180.994 890.415 161.756 cv
890.415 161.756 892.11 161.678 894.293 163.357 cv
896.481 165.041 896.965 167.404 899.637 169.389 cv
902.301 171.373 913.946 180.838 929.477 185.193 cv
cp
f
659.477 71.4434 mo
659.477 71.4434 688.227 27.3809 733.852 16.7559 cv
733.852 16.7559 709.704 26.1973 695.727 37.3809 cv
683.227 47.3809 668.227 62.6934 666.665 65.5059 cv
665.102 68.3184 663.852 70.8184 659.477 71.4434 cv
cp
f
669.297 71.5801 mo
669.297 71.5801 706.665 16.7559 784.477 13.6309 cv
784.477 13.6309 744.165 15.1934 707.34 39.5293 cv
693.985 48.3496 678.508 63.3105 676.797 66.0371 cv
675.086 68.7637 673.704 71.1895 669.297 71.5801 cv
cp
f
677.875 72.998 mo
677.875 72.998 717.399 19.7129 795.274 19.709 cv
795.274 19.709 754.934 19.6543 717.165 42.498 cv
703.469 50.7793 687.407 65.1074 685.586 67.7637 cv
683.766 70.416 682.29 72.7871 677.875 72.998 cv
cp
f
686.575 76.1543 mo
686.575 76.1543 727.473 23.9121 805.325 25.9277 cv
805.325 25.9277 764.997 24.8301 726.649 46.6816 cv
712.743 54.6074 696.313 68.5137 694.426 71.1191 cv
692.536 73.7246 690.993 76.0527 686.575 76.1543 cv
cp
f
695.637 79.9043 mo
695.637 79.9043 736.04 23.6309 831.352 32.0684 cv
831.352 32.0684 775.325 28.9668 736.977 50.8184 cv
723.071 58.7402 705.375 72.2637 703.489 74.8691 cv
701.598 77.4746 700.055 79.8027 695.637 79.9043 cv
cp
f
704.7 83.3418 mo
704.7 83.3418 744.895 29.4199 840.415 38.0059 cv
840.415 38.0059 787.915 34.2559 745.965 55.5723 cv
728.344 64.5293 714.415 76.041 712.54 78.5371 cv
710.661 81.0332 709.125 83.2637 704.7 83.3418 cv
cp
f
714.7 87.7168 mo
714.7 87.7168 754.555 36.7637 850.102 45.5059 cv
850.102 45.5059 797.59 41.6191 755.782 61.6035 cv
738.219 69.998 724.368 80.8457 722.508 83.2012 cv
720.649 85.5605 719.125 87.6699 714.7 87.7168 cv
cp
f
726.352 89.2559 mo
726.352 89.2559 765.032 45.8496 859.79 54.8809 cv
859.79 54.8809 807.727 50.709 766.633 67.3301 cv
749.372 74.3145 735.821 83.4746 734.012 85.4746 cv
732.211 87.4824 730.731 89.2793 726.352 89.2559 cv
cp
f
736.887 93.9668 mo
736.887 93.9668 774.165 53.8418 866.04 62.6934 cv
866.04 62.6934 815.559 58.5605 775.821 73.8027 cv
759.125 80.1973 746.04 88.6387 744.293 90.4941 cv
742.555 92.3496 741.133 94.0098 736.887 93.9668 cv
cp
f
750.325 98.0293 mo
750.325 98.0293 783.852 61.1309 869.165 71.1309 cv
869.165 71.1309 822.641 67.2441 786.102 80.459 cv
770.739 86.0137 758.727 93.3848 757.137 95.0059 cv
755.54 96.6387 754.243 98.0879 750.325 98.0293 cv
cp
f
762.915 103.006 mo
762.915 103.006 794.165 69.8809 872.915 79.5684 cv
872.915 79.5684 829.493 75.5098 796.04 87.3809 cv
781.977 92.3652 771.766 99.4746 770.309 100.936 cv
768.852 102.404 766.5 103.064 762.915 103.006 cv
cp
f
772.915 108.631 mo
772.915 108.631 803.915 76.4902 882.29 86.1309 cv
882.29 86.1309 838.043 82.4863 804.79 93.9434 cv
790.813 98.7559 781.711 105.221 780.266 106.639 cv
778.821 108.064 776.481 108.697 772.915 108.631 cv
cp
f
783.852 113.318 mo
783.852 113.318 813.469 84.0527 888.852 93.3184 cv
888.852 93.3184 846.305 89.7324 814.407 100.041 cv
801 104.373 792.29 110.248 790.907 111.537 cv
789.524 112.83 787.282 113.4 783.852 113.318 cv
cp
f
793.852 118.006 mo
793.852 118.006 821.95 90.459 893.54 99.2559 cv
893.54 99.2559 853.133 95.8418 822.848 105.525 cv
810.125 109.592 801.86 115.119 800.543 116.334 cv
799.235 117.545 797.11 118.088 793.852 118.006 cv
cp
f
807.602 121.131 mo
807.602 121.131 832.688 97.6152 896.977 105.506 cv
896.977 105.506 860.696 102.385 833.567 110.553 cv
822.161 113.982 814.774 118.689 813.602 119.729 cv
812.43 120.764 810.532 121.217 807.602 121.131 cv
cp
f
817.915 126.443 mo
817.915 126.443 842.004 105.068 904.165 112.693 cv
904.165 112.693 869.094 109.607 842.938 116.92 cv
831.938 119.986 824.829 124.248 823.7 125.193 cv
822.571 126.135 820.739 126.541 817.915 126.443 cv
cp
f
831.665 132.381 mo
831.665 132.381 850.442 111.943 912.602 119.568 cv
912.602 119.568 880.946 116.626 854.79 123.943 cv
843.786 127.01 838.579 130.186 837.45 131.131 cv
836.321 132.072 834.489 132.479 831.665 132.381 cv
cp
f
843.54 138.006 mo
843.54 138.006 860.52 120.74 917.29 127.693 cv
917.29 127.693 888.387 124.951 864.571 130.99 cv
854.559 133.518 849.833 136.189 848.805 136.979 cv
847.786 137.775 846.118 138.107 843.54 138.006 cv
cp
f
859.79 144.256 mo
859.79 144.256 878.54 129.568 917.602 138.006 cv
917.602 138.006 898.829 135.193 878.083 139.334 cv
869.364 141.072 865.266 142.994 864.383 143.572 cv
863.5 144.146 862.043 144.373 859.79 144.256 cv
cp
f
875.415 148.631 mo
875.415 148.631 888.54 138.943 926.04 148.943 cv
926.04 148.943 908.579 144.592 892.915 146.443 cv
886.329 147.217 880.442 148.947 879.79 149.256 cv
879.129 149.557 876.977 149.256 875.415 148.631 cv
cp
f
890.407 156.787 mo
890.407 156.787 901.063 150.018 927.875 160.67 cv
927.875 160.67 913.68 156.33 901.391 156.197 cv
896.219 156.146 893.672 156.732 893.11 156.943 cv
892.54 157.162 891.688 157.111 890.407 156.787 cv
cp
f
907.602 163.631 mo
907.602 163.631 926.665 162.693 942.602 177.693 cv
942.602 177.693 930.415 169.256 922.29 167.068 cv
914.165 164.881 906.352 164.568 907.602 163.631 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_red_apple_bw.eps)
%%CreationDate: 3/12/2016 1:12 AM
%AI9_DataStream
%Gb",KBj2KIfC8Z_Y&""=fhGGoqk>DL6kU/m7SV*E&6^BcKdAOc5<Q^Z4^0cQ[*XhD!/G3YHNq*_X6Q39FnRk=mp<HZWKkW6ZY]U/
%Q'?1PIS+f).qMhcQSJuqr:>trpKj*YK@W<*[,tKG3ph0pNM!^pe&PgMB;Ahbo^UsH^"B:g[J!q5?4:#>NI%GXCosKkIMHUsS\c8W
%.AT-1PtM"Y<45[Q?GJLf/c.M7Xp"QHZW_%?S?t`rc"$VFD%"(0%e-qihl7DASPlZshZp![._K]I)u#a!3!e5TQoU,*j,E](B;:Yn
%8SRhC_Pd@jXP@PL$ghuJp>mGUc"oC&kX!QDn-eFgqLO,3i+4ASS/+/N2U<`#D$</Y%o_-"@VWB':KmCU!s@f[O!anr?b.%;;#`*4
%q#B/^K>6obOYTiNO0c<^__DR;i+OPIQ3.'5#<qHsZp9gC*$,=77]"HABRL=ae'`D3pO+._e+8o@%dV$.i+ba81jomj_?HY6g+dt6
%m5Q#CD&HO2GN=r?,m6HU_-\^l(I=`/1hFKZc1XI!J$?.<N(3i1(]0aqd!T%J[q5Ln><]74:;%?@e2-A4?Ran_8+B"IQ5570k#p%8
%>-:pf\0NRR0-'(rVn-1/'d.4Z1<=>XW#aIHd8Y85E`7^NlNa(C/g/'Y;EjH3E91=PZC\(#liVT2IClY?MmWdh\_A[-Q"qmbHLC=p
%B"?D;<S'cer%A*pm7%$;X8g:8!Ub+mW$u!8`pq&D[jP:jSHBjSZW>eY=)eOcHecdG\^t4:<9e,e[eg<CK.]1o!JDL6^TPHZjVi=?
%k9$o'STh_Jl+kL*c$H:m<BI>_q8Yh!<'L[eH\M/RD!IZoC->841]B2LT>8qCnk\p4>pqWQNp-&l=7r@q.CZ<cLX@L.mj)0Z2@Ds(
%,IMmh4Xe0Z?'#<I?O*-B4%RfM*hpDPgT<3KbtdReF]bhK_F[?%GngAk,g5(=bogHT\,kOLoQIrGW)UoPbsLI'>`@u5k']59-/U$e
%(:IO*kk7Do_LGAO^PN6-8?3Lbj5*kr&;+=`a#LS*Vr\h9oFu/40';KM"tC._KC_D3+(NKAUh,_bK:iBb+@7%>FL1ZsW72cK"UL_7
%@)/O(Z]Sp:<=6-#1IWt6^54Z5'nG'3E@Z@dmFFH*c5G`&bKD,UVQTI4K6PX-d:o?eHlW,\Xh\<4GICk2I&#T0EY68jU%rKBX4>_:
%hpk=.?7s.L29RA<Fo\Uf#o[EEbsHoLid&(4C'HP1@AFr_!N=sMr)`b3Xr"`Ud-a%j4[+BKJRS7/q,sY<Us6)9Ra_[ED?3-)in7!U
%#_+3%iU=m>!*W5$+T<jWg?/bBO`o1_b^!#K4)ZKs7Q$\M3-A+D,$*-*fM6.mPA6Qe^n0,@JhjZTS>e?j$ci*WnB.R1:gp,qA2Bf8
%T%NHf:V\lf'naoDi3,UZ,OBe%!7g?>m;fg`)=NB3e"V#!""'_sT%9),c57!jX]+%-[L5;5!>TH60p.dQm*T43'O!f:)>r[uW@!bT
%II/Bc*,_t-^bpaFVijG3W.kVHc"1tILWt*$`t&YM0oa8ELLYcWMh5.%-m1hQDALt!AqEJ92OtPI*Rm0q@don)^B?=Z1AH3,>&Du;
%9t>Eb47%[=R.u+Rj0;&8A:j4>Rq=sTfB<N'"sZ"53]H/t!ee*52f6@S9tBLFjfH!AGM4Tu/mim00=U)`g^G$@#tT4DNO]0UQ+8J*
%\)lb\gt\3bgN%@>%\Qr_DLaU2%#AW,kH(.`cQrX)B'_O^FL&a/TQ5!X.+S?dLTV9Sc`M@>(]5g_2Idr;+PM4K)??252aIA7<'$@;
%WYsBVT,0Pj<k2&M?4Pe5lcmP;Aa67qIX9]Tg-\p"RPZq)N3/=4*@ac[+%cT%&oFT>pVch&0%&<Fmd^_M/==[`UdG35SR69DoLR56
%PpF(0BfFk2Aa3E#Wt?%i4."@H/FotIko?g#o<_=&%Z5sNPh+<2@MVB6\6q$QPsTPe?>HqV[3Ve1prUJ4dujgCq0/T?$a'V?pQHIP
%30s)":BDM1];reD"N?W&.[H')Mt+Ob@/Os&3lYL>>\e7*F%%YY^1eS.<o"P)@4%82)]',XX<Gf1SUVZS.lqH`As?fZ3'a0?DP(!_
%G*2jZ9Q>Xe)X'U&'"]ip)[8))%-HVY8>(03>R"gO%/P(`E1%N?#6ntlh"Tq6b:D[4*R)/^!qH]@bC<8HcCtnu'p&5lp=gi/F=1an
%"c19ge97!2NLRI"^NC=`/>$qXCD*IR9YKaC!=Vop37IPGP0[^d9KL;Y5BCLJUL(-7RmHPY"Q@FkT#Xe[A')$Gk,Cm!331mePffOB
%A?-VDf$:oW.9QsbQl5KNaa/o6J,D3QZefMgA*pi19$e9@+`fP"ok`tA0X'AU"D_1LR5;%G=c'-8)$qK;1UAs)DaG(QOqjCM%6h[4
%Yk*M;ZZRrc62p'V*fNmf8C$G8pdAq9lD8,+7=S@6B+eTa7I\NGJV)'C=e[H.BbpVWe),)`2G^OuZa7mi!-=EB5/"Vo9"?)Y!Fn>[
%?uY/=:oabbK:ihkPBjqJ5FE45R0:@\X2?mkab6KbY2!dM%6SmOaA/E`P9Qo.JF4&'%VNZ,l!F%H)Yg<+r#?/"rCgZTW.n6qfV`'*
%-?.qfNi8L6J\g6_j7qW5@8(.Aq-0#'R'Toi,8#o0rN8rS]pYEsT)b7JSt9tk0MU`;>cB!l5cRLSS%)/g8%ilX=e]1Km3W!/U%2:D
%<s!>K&%)eiKY*4J:'r7.!B?o$"a@K,`5"p:HIn?/hY#",O?ggW2XAm=)kNKm$BA^`k1jW`$DgY2?2g81+R1kU'NDJd/I=te@].ot
%P*OJu<2B&[^oEW75p=(TP%(+_`/@P-JCSKt.A.<PU<thsK>/`U7P@taqh\JlKj)$ULtJ#Bf*lO`@C@+_!u,ZQ-Am!L1/X49aK2m)
%k*[XHjIa-5R4(WV@a/:1apl((0+jtKHMMiME`%u"1Fo24`cFuiBJMB,MfLV^q+]"#8HR,ckFs6]<V'I[GqR7S,&QJQ-rXaDN(?4E
%RCO`&)#Mg@g7+=bOp%.TdAZ6=-j,q2<90c!U9U]Tof"<9,mc93ZKoOKV4#;mRRCq:L#"W.[@HXDH&4;hjsr05`@5D3+b&`.-96\t
%<PL5oFe#362ofEOFNpQX\rjCLP'CJLV:*\./;u_h`d5$B1NU9R'u&hSq:^hhCC/R7cI_3+mH3rHbpGQ@X)!29"GhjQ`ms5*g755B
%LUl,D=hBf$D6Bqa\_;OrX$n7"`tO8I:E)n=T]!D$jd?GUcF;3O[uic07L;mFha[3Se3c%lR7heub'sY]]h788nX*)W:8[<.QEh1b
%>r)!F';]#)g<M,HCBi>cV)8_E`EOYnapfoYU*j*8)5uDdVt<tV9BeA4>>)g4<oH"8G84G[DGXY`\Q0&4bI,NsZ0`^P7Smd]&hRFc
%mA*":(O_^FU+`VQQ@0V[fM!$.)5UpB#:mM^RqhRKR"c8r]AAda$;V:?1d3]er5lbM0;e888-c_7nY:d02=8#i=KaXJ/Po/c3si't
%T:+MbjbVPh:7=tA&T"E=RRo,.BU7E9eY&ID9kK8%,]N'T,U'FN$.^k&!lJT[5WpfgPCk$0>Opc/3.#&[V]1B6JsJPR=L02PAkG\P
%Ul((3Zs`lS6?3hD&QbdYR7RUOTCeVnIqM"F46@0(oD%d]d.0<uHO1thq!U?E4+rZ&"PD(%'CqB5b]b-"rB4!5d$X9]]]`iHo;tg#
%Vfs3RSHZdZ4Q\`B^7*)ik988Oq=M%Xj;*lGfdDV"RX/&RYFndms"t^V9)7hd%1SV]=9UP_;#MJ0bgoEZFpA>W'Bj-n`D?l#DU`H0
%D:as;WdufMB%JBVI6,VOYb@44>&X"cEbX7G_;%C9pQ5>Xr8i[gDp.-WorK#6[8g&$K%4nD<'I@dr[cYO6$p!WPZI+p6LE3geD,1)
%GFcuaB62[-"K2H\nD&LOEFh`9&k#(os!q/4mE7,8lrb+SE`.#B,QK3j^g@D]JW[ASG15NpA8Z5D`gURY8ri;2D;!l(8bP*]A^kGt
%7?Cj#S!?q`g?)-'[/:;Dqh3B$&ca6]HNeW:i$VI:E\cCo^DiiJ?4"F8-Zd>Oh!m.D]_iQc0B-SPa,>1NaT"#>]Z_BLF2uJZnM5=$
%bT/>miHV=1nOq)(Ujqet$Fe7JR`L$s4>Z@j\oEENY2i6EHcBY@/+c&MNcn`Finl@"0^Zh+P/&d=`?p`^ba939pp[d%Dn5jV67R>/
%Y>Ds_7m2b313pn0>WC#_j1H#RljLjZ-)To<Nld!sbfIbm<.X:kf):(n36l!Gr<dX-YJ)is^,.8orQeGM3]JdWl@4fjlCD)=9F7^p
%btmFs>gN4oVt)2a6KZ>AVh;SGVl-YiNN:D78dVuNbc&ts0(UV?\4r8-9f!3Eam'oargrnVh^)J'0A6F+A=)+G@pn"kk,)IN4h&dU
%S;"DQg\409BG,SK6#i2!La3&hn&YU(>?V(Nr[O6I,m?oQM#h*5!TlL8QB2k?S<uY?+7j!$\V0T+C0/^9O"ga&k1l"PPm[$9O"pT^
%%.=Dq0p9=+pL?n-Un.B;VNm.er>9T?`f0[Ir]:m!]9"G9ntt/SVp.Q5?)YE=Q]pM.nol>K&U$C4ZdoBKEk?RaH`+pT`--pt8tn]Q
%4fp(8>`o^S[8(i\(A2;aW1o8!"dG<J:`&8icjK?gi(#/n'pC&qII/Bc>B.ltAWm-=JL>5F/@Hh>giTuSUC%Id_!4$@Uc=F$:2mg=
%]:MEeW)'sK3c3HK8TkFuRhR.>\j>r!61_ZR^Bpha$L3,FCs_Wkr#BmK-_1V&H8_=G2m3!K,.2aN%@qciOPdNWDj7"R8RB],VgB]j
%@G6pY[%!<HPmEb&Z<,!/0GU:7Xs.n6fhqeLOCtOU8hHNf':,LCS<+lb@g8\7g<C'Si:aa-R<ipYDRsYpA5kIrjsIE=k18>CR[[N&
%F),Z2c2Csa/qFd`e#g0+HJ!&eEsX</bb.+c!33Ri2`Kp^k1na^S""J?F)GDh^B"OE1*EIMUpG!&8XB^M\Oe_s-J_P4?92j;P)/e#
%DU0WUUh@1W_p,_oiqF0uQst$S^%m,D_D\SJ0ccbE7b<omf>el0.ks=6]/e)N49[Jej,C-k,0.1`Y+/Gu`J`7\5H6XL`H(k-8g7&>
%X8T)^`(M]L-:N+b0-?c'I[1P:=kQ8i,eTQ#75rN(R?Y#>lHCMlc_65P)rkQ41UC%>eKI(mr9]4U2i7!3S/E*(r+=&bhu8+r-TXP!
%Ok\QULInEm9`6&,$GOI1[N-%iM0/!Rel*!BOQ]0IenQ!R]nrr52!t<P;U?^\<bccGVhJTAFO>E(-^73O-4P&Q!FcE9.p"fh,#D^k
%8M)a'LbT^MR7q&Q"GNq/$N-/C%M<D:@J)'N-<@@A/.B&\4"!A-Bj7CU>aq4Uq/_hE6YAl`]BOXg^E?IQ<>/75HNdD_n<8^FQU&!X
%fl$fFW7QVO!SI?]XqXTk;Dd!^juUoRM&aSXSnY%b`jtTBGdmNSfpcV]c^il;UmpK>Gr8,lb'^'G639`'ObCY*N9Q)UZALA"0UPdU
%.U660V?[<R]%>oH`/u)XX@[KjS!2c6.C]$Yj\*k$=VQt>j'-T`3#@UiRjh.FE(g>NZjXo"Jn6PSVb*9"jl2Mo_uE$U3/\j=q.53-
%Wq?31?8t%4nQTW\P8#aTiA4[qHuA![D`>3Rlcm!KIUqu?H"!F=EUmiF\k>ks@4$6/T$l\l\6n3YdEp=f,^`EGS;!Lkok`VJI,,^(
%oeaQkJkdc^%,5RHbpI=OOcPtUB7KqI^IdjeRBMbCqg9=r!GD-R+"gho?s?<QZ&Id!=3Hulm[rG^'/qPQmL"j*e8mA:\K_VHr,$"d
%B8/GH#6Q990iO9@r]HD0o[PkK9_!i?#:/I>oiqu4Mq6aW#0hP+3C3\c[&n;ZE0=aSB>Q`EU_6((#iKnuh2a_$-d5<USQ^#_-J?I7
%,-nSFdS`#pbb!/&CsljkhgB%%SS3$LR5fF:pomo"[8)q@UbIKZJ)acU=&[R[6L3\LaR@S>BB*sSh"C2U/.8;eAL`tUL%A)ai&o!L
%pS:pjVAWY/&u9lB/R:HpXHgZGOQ`*lO,dT!CO=D9Q*FJXkLndp>`6>lo8hL_J,G;PmkW/]!LBa'!MR0+ec2Ys?UuaVR2WU\?c1B]
%NaS4O%)Vb"M*5urV=%&Q$QJ8_E\57)nq%Cr_g*eMQJt+jBGZOB=8shnB\>_Q>jN?.=hb5sIq6nJQ//;o?L$P_J<P;+5:G*PV4^4p
%\Y5ZCP)8i1f:RP+WL*,?4$<BjAYjQJT>#!<d\$#H+5ana9@uDU6jfl/+js@]0JGC_9^;.SU"PG0.pE<pV%KXC%Kc=M$\=E?K#l0J
%4^:2@iD=@?CSae:I2N1$+-27$E2Bal3:*;r[p<<>:.N3OhA>ZQEe;[8#pS`.YR320f'AUN_V8+qq(nu:Q:a*,9Pt80nBL+Q6*Z&`
%iKrgn]GSq`dN*,KIHTC0c@)n3IBTpHF#JAD5e8G7[HD@Lc=Z6UG-9oO\aR;TI6YR>6Dr92&nSf_j_CR=A\XRp)H'GdnNG.h;t.]4
%C`WOkqM+FR&(f6P(OtYGCY1QE0Qc(>l%a-OWV;g]&?N#?QHhto5Xh9/buuRU7iC]Ufdg$RFus*Yp.c/7fCCeO5k-Ch?u\'YoAGD-
%l+Wp)]'sDU3bYpjPl:::+ee#rrt(a70E1lZY6b0OG,Gu`H8Wai2K[ZZ>(\MMPCMeOdPZK!n>gk5Y@(H30BsMBH[=?N1?i&WfVo(_
%G-90r1:_W,=?SoY_EWB0^$m0(#**tW\Pj4]LMkXlX.(i'Egc[nhXOG2otBC>qmG#FcU+tG3mr-[NUb!/:iJC`<puY:O"/L-7m$L>
%?):l?#Y#RFVO=B[92blL8\'TMIZH[#$#P6*%YFCiJgLMkdH9I7MX)KuBRo$tEACLX1%uj=c:G7h'.8I61PM*dak6a(SIU6A3/a>.
%]3_$0p@hc_FJVu&,n+?5m).nKqJY_iK@/k6rpBO:XKC8=rG)c(HNlHTX&:S,*&at3\s>6;cV6RZ%gnRFE0!*e8[J1L-#?epF[)ug
%@.B5.CZO/>T#Hr0jkF+q1_"dW=FZT/UMo+aM+Ggh!7,ftTZ5C+SHh`hKV41#VGdMfXrL]56?Z7FK;u0sS@3X2jg3@&5W"nFO/>CI
%+EklK:K_dQ:5<!RdV^Ps;%;65''NP0R#HO^akS>%dj,OM79]<GT6>fa\Pl5i#H`<K,AsNcUWf%,Va@QqW)&sR.UN4^$u/'a[FYgj
%5s#gdr<DtmkpW^].$TrV*'0%ZL"8]m*c!XumJ_9_8m1N];ptk\V+*Hs%kW'+XB1ir=>O0\9W)/lm2&snTNV8$d,/\Pb>0u&%=k6S
%Y');N,FVm^_'XkJqkRP3Q;ZNXb'H)L'Ig,\/o"egf/rBL=gQt!$u]>SN#126l3(D#A\=U(KV52]L842?Xn*),RUTg0U.FNtZJ0(P
%?j\,BEbsL;0*O/._n8;c1Eu5?R.fAb1pIN0J6=K*p-RPpm.@@sKZ%dJQJl-+fSIg\AD8VWg^IIE,:D8`WqS%h&V'CbO?*gLDPoBc
%j`]UY>Ud.3FVe=E*Sa!9L"]\-E#,8ClA^lt6M^Gi;ElU0p4Gi4dd!OIE-*[S)K*E$V;-UCU(-lV9_Jn/:j^1K!nQs7P6b[oB2ECH
%LbMk\b#AfjVP1f-rsY>*FQ^)AW8!/V;5gnG.G207e^4"V.btK$==G)>\'KVWN_p("rnWV(-/D..l0(^)Mp,59;lM0=^4RI,<-UL9
%pO1O;HFh]\JJ*-DV-FC+D-57NhL`ZhX:OLcVGk:L:2L5#K?=JTWErdC7h'&*J5suIg^f"ZMaAB@h6%P%'kFU%C(RQUKWS[g6$"R.
%dl.(%&.N%f>#!^*4YqagTm*8.qcRSQF>rnC,.AMblC7c<"KN=V7LFD1Y$g4]#7K6sbmq?Yct15FA/GX<WQi,/&\U`)rbb2VUpfpU
%Y$UhsHi53!X9':8JB[G"f75F`bk!CLRo+[Iej[,h!h8c?iUCiV5^UaVJ2;#%k`XjT<%83D.5'6k$'T*AKkiPVOViRp=[1T>S^p_:
%RYser>.r*X;WShe1-%je:dlP%(oET-d,G6bbme*Mqj0'4C<L)YnN5m!fj8P6Q.=[fH*^<s,HEKI8g:p'MJN3+)i6H$jKD+K%"+=.
%<C=&eM?n)_";?EIj0rtAA)&[sb..D8EQ4Us5['C.fNg5E=8k:[J=&;*6CRhMS%fZEb%J+Kn!H5bB[^Fcd7g1aV,l$#G(91o)]0Gs
%Z%%,ANlFO7%Kn:*l.]q$L`;\8NVF2M92GGO[d5`p(NR>@X@+L[ngfu@K$]JuX6BR=@ZCkJ5;J?EfSiQL%S>0-eCB[tXERj#4]Rs8
%C:uHOk06f8hE4FAT=?^UJJ)8#Zl.E?#^[NDnE7%?;l`BaphL/CE2-mE2&)n6W"!KZBW]2ck?7I%h$S4!L,8s3,UeXe<,C,)6frf#
%CSsgjhURI"eEWQWYaKK`[F1=HD(`!58Jt[LYW92@[G\-:g?7s+`HnX\J`gI$.QY_i6@4e'p,-ZW(I/E8,0W-W)/?"UTJaNsUWrdU
%U^)j1\41.X%%08cW&KV,;(Yth0L.3^SR`qKn&#`a)KZ`[8#KB-arI?[TiMPl&jr+IAB;`)P`%**9cp008&5MQ?Vhh;WQtqW8%X,?
%+/XK*QTt]p1n+*dEi%YImqW'+<)=(,S[_._[W`qp]qIcQ>"6OQg9Apb.CZ@3@C1T&\PY.PAB47JfIe:Mg?9Us2I1,;lB@l0(Pc_P
%b`5Qn.#aSqZoeM<5Hd$Gf/;2jS!!D*8fb]u@@!0F,D!XlL;R+UEQXr/`a*:,V(t[i8r]q8OLDAmm;fhNo'($3A"YDe)lOnQam]#H
%U,>mS_dHHUAgC;mUo6PVbt4V^)MZ\Cj8h+G=T7P]Krhb+]A?*8\CmpTN,$Z.!9KQY[!f@/]P-u_4@/<$bS)gnc9+DaSs`q4IS5qq
%o<_gC\p6js<fnc:7]\KR]V+(.bdtOI5"X*@?nu8H`&0\N`/dai0fs+\3Z-iqZL_^n4R1b=YsOuBQ5FnLer[^>>-Qba=T(+A%sD1.
%gZLr;$,&1MBa%mDAb")TlO%;jG9D/5]=MKJ;K8eJX&gbO=_59)lp1TQG"#Op`:lV)iqp^WdOq7>$u+HEU"lg#P0]jWS-rh*B#<Ai
%nLO`8QuWpDj_.*u[d7o)iV">%NpcT!<Zeg>g$HDTSr@D+FnT(n&["7!gP&Zi,OVD1gjg3en*d>TW.iB@`9oi<r![aV8]m#bOQl@P
%KeAC7Qgm?n<*r*T#+QN&5Zmc$q.$LY\C"l$YKF9$&Gf72d@CENqHl*Tm>?:6RIF3`*]D3l*T5(1;:@Lr!n$UmT5_"?O1CKbia8#Q
%'g'%d"6G,8]?H:uf>BIe2:*C_;$?*e)\Y*q@2LBIiMB9S4TW=-p*1RW_kE4jrEg.5ibZd*[*XUZpI'i0=E11O2um_OB]hZhmN^!i
%!KSap%!HA<T#/B95]?F!6c2!PHpcP4gBqUK&#6:[TeqL6J5LE5hPm*r$K]Da3>Y%kHhC!VW4,,'7&"J/4Ohucg;9:'/WKgu8JdcJ
%<`cgP^>#&?!,idqhKpT>NUl"9-okrWC*d84$)XeKa&(U&(Mu;Jl-_QlI5Mp1h)mii2qq?iLS6;YhC)spn/N.0'Td;A1mjNKi=tW%
%4F#:HrH012;Q[f3gsLgZC9(7s4J_Ge[\u,`BFUdF/UWs8ePAFWjmlia5+M`f`fB$8/cMoNj'VISW_n=Cla9]BS.nH/BlKt_GQtBW
%j6pYp)0@;2",@oH!2lf>*BP_TWA6n0$E6XK^\`_!"b9/eCl[_g3lQ01n5_,253Qls4L0nN9*e^)Wd`Zm:q;kVe1U6@=8EQS/$c"/
%c#R<Y3SQn:L\5)AJ&m"&\fV)'n&iIRM0n*?8@;*(_kL:l8fHu_&X93mM9ZuS",2t1cMDpp?A1!/=1rkkfb]ca8+3@t&j(hbD;$N[
%A6cM<3SkJjAUVDqhK.<t!kf=a/?'/(lEtq>*S<\!0lp7m3D<:FT#*0ZeAl?+=&O=P9!H.TVrb)71DJ\Pok,t\k";E^V.dc&o-dn=
%'ILe?/>a\<+jmg5i*L,"Pp2D@2X;`Ep3,Crcl=*al!5H+AZ3$2f\m^E`t?g'49kuonW\%$jZ+;!Gu1i4)/du^^h"-.+/AEpXu=`S
%)F9lbdRsq6KGTe!Pmn\C]/6eD_sgs`8,i&Ki@>@#cp_b%jD(YmQ]fE9"J&Xh<Egmra>R2GfI/R9nZ3^.%N+<s%C>Sa:n/ggB=5)c
%96m0S='FuJr'sNb_e_d.R'\sQ"1.Fu/Zk'N_W_#/e;Oa"G-TK&Ou51p\T,%6N?RU%D&paUNMFU5;_;9mofD5ubh?#O*pBO.RlIeX
%/@j>qNI9F'7KqZS@FhX5ge7j[TmWR@YnU408%"=#5OHBM:nu:=6tY0'aNPJHZQW7+qnYtS[<XXXZ2.%)j&_p4P&@X(OjrU-U-Mhc
%^8`6%f$9#)'VcdUKk?9pSMbN0?=b&oICL7#UtGk2W7H8Z8s7P2_G.%9NU:F]UG8N^13#VCB^70fafDMUI[+b\p<@m4l53SHfH.%"
%\(lb3;Q9[REmkoJ2kAf\TK#/HFC*?^UhWq5%[<$APSp$V1D76r4kI*&7Mt>HNS)-%Q[OCp!$a9ZU,_Q;+O6)4T27AVFqi$O!6E'#
%"`7Y#OlGbC.+7r8*^rY%lsK5MJ,$1uYDc?WMF;"I6SNmD(g!;j0ef:E6r^736<9m+AQuR#'NW;3L<*W/2s^6Mr?SdD::F7RilchA
%/M"4lF0MpWjk2Xjh+L_*l(7Qap\q)0[A,)[<X\A_?CLV4Qa?#&kLK0hZeDOJq--K"%lVRaFR-+$p;NnMB4_&/o;=\$Z^'q(%sHNn
%SYDV21j6NY\n0^FZrZUAmVGJ,]>",!rFgUrWR4mf]eUYH0^Gdo\!j>IbBEUG`LH8f2(LZ=-pMu\bb`c!c3D;B/q&6Nh-Bs9MYlph
%488\Hf(unhPc<6C>FDUGpA*]Hk>!CsZgJlG^K2Hr_(`DumH$oUDg,Lee:%)Re*"s67f(s&UIO"?Hs'ggaF@?"Br.kg\YXYDr5/'R
%.1AT=b'sNb/9gsPaN[c:/+6P7Zfg_8F8)HdK9:*HF%(NSa84Mr#=mP]9Y.Y%p$?H7Ibk$dgF@'ratA%umq*&qn'lRpmgGs%%-)hE
%==e>*m5GClkLT1g>3;E%IkghHl.b4o`e1brNM,n,l+<:+c<#qC_?Kog05dA!TC^F@p:0$=bBL_'PeXp`ALmMH4]lSSIdUaT&+9H_
%!$8;H^-">_(h`NtQh=%Spn54nA7tS?>Q+Jqm(/6^Ve2f/gsQul<qNW>@d[gn*FR0@&@b6-<a$qj4>+DnlT7lXQC!2>`SIRM$m2qH
%X`&$Xh)X1onnfqFQ.u/rgj/1&eA!W=]dnM70i%.aTmiWbmK#jSSO[mC=["i9cC5`Hl=otOTsH9QqQ@3-l!NlFj;o,gmcSL?IVe!t
%%_h^1]hf@Z7Q\/oA^MTX:\/AmC[Gg,'t<(&gAJt()'=ehT]#RuimXfp91J@&fb<W6kfMOnl20eM[$os4TtfEbXbMC-fpCY3^3$9G
%00Iq.<e3]cls&/u0qgZF[%:FG8*>4RF-uj=Qof`olGmM1nDJ383I1MAhn/X^D.[u:]9bTB.0!ELnR^ejL<3U@%Z_L$+.^j#c!u1l
%?.O=og!/]o+!#9a^H7KX:TO68nf+KfFMQkaDm$]ZWcn^?%XqAaATkO)]uoLZQ<l:h'Wu]h+:5Cokr4OHhA(Jn85C80YeGG9^7@93
%g$T7Mf8&,e-IcM;Dr+At*P`0=h8&#YRib;tcAZ[WcZ34go=@M8YkDocT*$!W['Z4&qd96PWu&=o`Dqi4jR_`NeKI$u1f75cgjYhT
%I]4":X=Z>2^Z?8,?_oR4g>PQ^iSC\Q4Hj*131YI^a=l=e4PVo?p+J<?\'t.*]tuu.:a]jrYZX:Z?&.69]aqp7H+7j;^=dO.Mf8>G
%mRQ<9Ii\5h<8R:iIf&s'o$W@:[k.MIn7i&[aW0`5(4k.$olJgR%i96WV5BAucTeq;Y^&,9c$4-n%$FD50E6!pZC9+m+-"7;cbEn6
%[4Z+m=7J,^RBt_NZb60qGY_LmnSX1Qbru'WGa/0`/lf6Cg:M[nnGN5jki:3&fKj"gWW(Vmhd:OkAbJpG+2DMrmUr*0m;l^,%s+WZ
%?8sXrqDkn#c$/V`.#nc^]_ZY^k1@qN]LRGN/U(Zp+(a<c/%0cYh9YF0I]@YM/'D_Hh7@V-LZp^q^XUi?(CQ4CIdO\[&7P5RpE(-E
%BE?d!@GSM<db.lMo&HZ!H2?AA5qfV$1RMQh0[RW4[^`p!3X,Lg]OPUI:?>F:i7lEaH0]+WXfoFj84/SZmslKrhp:R043*bAcCrd:
%99#(3_3=/1Zab%JQRo^F++IC>[_#CXpJ9*NoTQIs1ZnX?G;kYk2tZ8Pg["Y#WV5nnr^7,h<hAPK$QIF/B2?-H^bFTAoGIVP,%',u
%0Bl9q@,#pYDkHO^C4m%DQK?sYCWh"T?I%pW`uc7ifOTs[j.A=K-CeHZ>J9HJ`5CM`]mZu;dsi9bYt@`03dW]]&E!uA"GS'j).oD)
%]D#dt&>-(&Dr"j#O+&XZ8b\9<ItmnBW+!Qhl(_6p5_(u_@[#Np"<!?0ZdguX&e52Di@o%qbD.@i]36rTq[XI;D^Emer"7qhgGo:$
%W9V@C'8!:^-hS5brB+[)lg`=a*PF!dC&/QfaeSS/ag?VNi%jl5PW#c9FpM09?=NFn09Dh3nb%ROV&c?cntZXN2VsG2CYtEeEVMq`
%ed!XtAYlksB>)dI#`!$?mMhE0GBY,AFEbiQQM,$ZGc<hM,87Cp<l6BSKkuE6Q!Pjk5lG"0h8>)(YYL"MSe\*@EC0d[gnRpq7UDC"
%0+$s?=meACrc"3QnIcre1k#;Ra'P>+;<IB(X'0uN6#[*Q^o7p2++C'kddq9:s)$r:9)dD:1l=-nbu5Ornm0UTEYn%3GM\p.PeS9C
%D\b!Tgh5:Ud4t"]hW<lp<#8\",'+!k[9ecHVOBSNIe\kE_S*(,T=[Fn`u`^tXM9+di,>-0p-7\G^&!kNJs8D.1AeK7meXcOjp<NH
%Q1_0643Sn:(+ZSrb443V[sYmhmGlq35CoO)Y-D,73ddH?QAjp]BrP`@c>parbnjZNM\N+V*P[LOdEXq&]+O?]W`alNM?^:lak'<k
%D&_]s]`k#[f,sJJJ'Quj:k8[RhYqa?j!B9<6424"NL'd6Mc'dI6=!(=fWaeKOM>+D/Jt[SDSD3TG^JmGe>DsnZ_ZQ';:Y(!`Yfh.
%D_$b3`TQ$WXRcE]G^,C"Zi92dp<C9(D,QX]CUc*tMOH"_rD/tcl.jj6\'W)6)BO\s=b9?7L&8$YI@/]9q[1Cc[OK[=G:&[0*/r=D
%Nq4[S#LB^kkNil8"u&a&4;aT'Ya]ugEA)ijp1=ci+%>t4e:-8aIH(-^X4HUnI^^u8@FcJ*Z[&-&W2qYhk@[$Oir68iA,YdH?d.3@
%7fhQ6_A_AQ0Krguff9"ZCB\<tI&ols9,[e*,8\F-ln!a^Z?L&;)eB3?L9K8<j2nFkMid)/Pu>#aiDRAUZ)!q,IVn[t3pai1J,Ss%
%:4BP#_<kslo;`q]f@&KqT00TmrA+7^D]PXoL[&ZCC?NLJba[2hn'E=]093c9K')oXc+W>2ltP46FQId`2e_moXgVm"ki3^&L']:b
%^YWdu^U7*cNh4W(X4jo1DeK,gBW(jL<i#?C7eT:%l=;c#l##`ecT6IMRdjHd/VbthXWQeJL97l.V=j!<QS7oj*\LU2\rOQ+=t8&f
%>j^_G`t**Z,HU&(g<%t#qU(eOq^^if#A'!Orc]R\#d5:gFhCi%]kfn/-BpDZ2n(];EmntTp[jbf)]MQ75)D\ufo4Y,B%Kg=HlGRf
%K%h-D`VSgg\Q*gorNQ36?[K?ZA#$6N"Q"Z"^Me"@0N[#]"Jt6\Kpo+,hCZ)?nddtO[55!MkTsQY-a-jCEi#eNUe#I`2OO*^[+rZZ
%4"QnflaNI_fjV\Q[\G5D9(;4s+K0UkpGcAKn*A?b6&fsu(l$(YrRUkOH2R?l-^andXn<dhY7%$03tJ;$Gd)8`*[&AX65amRH1L`?
%\Q?*\rr%[IHkG>lB;e)+7lu]_??sgjh)070f_i=-EXWl0.e91[LRZ7Om;p9NnD=3r4RuT=OR^RWlYFi'hTp%=bFc*6]D(R6Rn%g<
%RJk#l1d%AeHiD"/?Ke4t<.SHYoAjn/ldPPPe3N`,$1R5fK=L/mL\L6YjH&cbs,];GP[uB%h5/oMKng&3noVDBW>B4A/q>_TgT.5r
%&'eZS[6Uh][l,$E3N#`"L[3JMc@0&KGIQB<LYdbs5.fp`\+BJfd.Umo\`_e$>M@Z+kA/L9.!!G5]CZ!nFJ\onbmrr`9::1q_i%$)
%_"G(@(L`]]0D/,5LUDI&aF.?!h<f!`)LQsX6%6;.f4V/Gc)(8,*S@0iB+F;+QflomUBfH>HcU"-B^&8"ABW7YX#J@ppWkd)DnLGJ
%7j&HAB\rRg.eSjN=R#K#&[bKIdaE[),J<Z!i[6JHOG8bkb&O$6J%Sn,<OV:tJh.<*p!0\pl+sk*7eua`)sH&1c.&>&e`-plecoi,
%[pEnG4/\/4bjNX9X7b"Z,H@'Qgt!7lS'-6c3V7X;rDIs448$?OhY\4tn+WO*s5&-B#eIh'&"3:imNY,'0?JlN'`Ij<4+3LIZ`OM4
%4FQ4VEE(q)A2XrSY.md/jDjV[9acY3Et+Q+M`^`oba5[6`qnBfMn;dWXc3;T+qriZoB?)J]>La;IP'039F(@`S_NH\8&<lif4Z4h
%.l1cSYk]?fH3#VbSL9,VotT?iet,rdWf'[/k:]Zgr:meu+^?T4\E7B2?2SVk7_[beIs64kM0/aHH.g<9pIi]q/$H]p6o9,_f:d7I
%?e^[h9t5+kAB;^6<^@f#/AZt]j7D3p2hg\8MIPYcDC>2<CTE_)3lu<C4hQ.1/PtM`+5,rI;gXU>hV8<TG4C\/W)\6HR%AF2FL]6/
%\^SGCfRqml26mt+>$o!,^R)_.C;"oUCHH`DDl.%.ed"3]p(2jDn+.Krcckf8;YCQ7$nf,0=nTqpIK.!^)>;$pmeP=Y!U(Q<_k,WB
%]8s(uhpqYA<p9l!d*KcbhWKKuY@pIK(:uJ6(a_![/Ni[lk3<O,9@(@cG4hpCf(cS0osL]W44-d%Zm5?GH5o5Helqq64FM!^B'eV\
%DiePo0uHg<Rd/M;E>U4%DWeKERmjpn6SG>Z`o-/K`]_tr_`E1tbLA>G$^V8(fRN!gf#Ih?<SH-KcCtWNp$hs_6sI*TqIOLrgAmr)
%?>IH%5-/<Pj&u?jOOc@-ZhU5.kLNusI]17ZF]@uQVP`MueghG`<%>rJPF!@u7M#]3kY&ADY2:Nu6NWtl7OHn\*Fp2f/'Fi+bn/I)
%Y@?\66S2NA1qrY9q%65WM"6bS'5d,&<54bP*Ia-M'EX5-gqdBZQJ&H[[rY3S5>"P!]'+grmZBFbbl,fGD<D:/3k(RR9lL&#^BX8h
%`Vqc`e#TCsqtIq<s6au/U_p4A#Pe%*RMHlu)5:fG*c3Ot5$.q-IU+#Gmcb5Ja&dInk^5F/BG`'9rFgV]P(+<Kd///O\9nD<?N.5"
%HIMm`!bUt:l_E?KPfPltW[A0m*e$?^k4Rd*SWu([F]GL?ETOG-%+D2W]C4'(1Z%_()[#?Jq1Y0Yml'gIe^eK>Ek_rXmlua@rU`UF
%e4\fJc\b"Alg//pPK$`n64j%mpnmN^Peal=HJ/[orJ\8c./,^l72TM]b!@]$&)BGMAc*[C?U"X%5Nj)Q7[()EQ8)eLXb7^fTd'Z(
%PdR(+_9tBGc.SjqcS.b^S&N\?j,CI;^5].edmmpkT5$[C\gWi6GAk7/oA!st0/h*?Q#<?'G'eZ)NVPI+lIFVU0^d`r)<tr3_YqaP
%eLti,,B_lpC<"\_+u&tV(EeH.)k$Y^IFQ/t$h)\O&)Z9i]m=Aop#!kLijc$]!ndD6*ZfN?kdER_Zgf;bAimKRQ9(Y]cI3kr2Si(5
%oHV,:0+(R2]IIGjMEM8ACPg<@GCT/)\pHM/aTsSa0,s=FWP4+eHK4GFjfV*qV,SocXr)j_HeHQIIe`j>a7hGnRs)7+s5PH0^RfQ<
%hnF3X0n\Ke),JG`V*g.V,J)eOh,;3BEr(%V#Zgum6DepHedD4X:R>FJ.S7TMhF:;Umm+)Tg&W1B\-FSQ9rIkh..&F(psqUpU<gSV
%s1SrX=-%[_S;?EJ7j,,V=t?AM]l$4XWJ%JAK=/VPU[mI)g<taXfo3DIL&Kg\,;ccC6TsZhm&L:&eSc+CXDBVtqs"@)?-b\W-B+NV
%]t"TX,5ANK33%Hu'DM%ZpNu^1^L#dpqYpCEn=J_P1$u_9Dg+Eo(M:"Es*SPDq1n@fqI\-#BP2N14tO=RXZ)/KYkPc7hgd>`PCER3
%IJ;dand"V7CE8hd&J?LA>rp.Kk$!h9+0Q$tSq%!X!7objhE,,tb9Mu'XIcLu4NW"#J%-.8\$.)4s$6ih0C-N'ZZ3]c>0^tb2NIX`
%!6oc[q+cCt<S#'qg&&9YO.`/dKC4CTU5V"1]m4Y.Bm86@cd3b2R<VRQ:UbAAI.YPZ6C,!XQ$WBb/";62hj6++B=IU*h\NpC\1'W)
%?J[`n\eA&6++ISPg3p6pXLs%0!mh'qd2derKQ"NQcp<Weha87>F4AP)XPEW7-u6ruNu'a!(4Fh`MbC:@%U5FAV_=^D\+^hcrO88g
%meUQdBM$+s?D((YrAAY@?>SXQs6jY\s/n;i/k8@c3>8iJk*HV(@,7S=\*L4U)XX9.PX2)V1)?h4i#2>aDpad*<`l+ZVU9/&_48U>
%Kmad#h8?;fYQVt<OmDo.ZlNM.W6<_JHHJpl55me&ZC%rfiV(BcIk59q_pijhEXXbKG2.3fDmsbdQ.3\@hkkQ*N>\5>0slBKf&jac
%*of,7FC!r(^]+/+UFq6ogEunAh>4(>0)ff1cS8]"@H5%_GakEN(IK)Z?E8mk5?bMXHR%r/e[>DR+$J@PqjQ]FFO0^1SnY"#psel_
%Sn$5J^kcV`C!Y7&puV9bf6@/B:MOIW\!iq`p9sF!Hdb^d[]Y'^\qRoC[%lq.r%d'7UB*]>ppk)MK\XB:@.k=_CtNH+1[mK^:0X<F
%%<Nh34#dnu9RA[>5i_02g9tG4nCUN@RU^@CRR-[ZVKCFFJSi<C?[-(XNP@TC1j4a>i+'Y)7)EFemHP`g_0+#0Xs<_ECB9;eCg[?;
%9Zr/tJ-/aA*:CWtdY;[E.Jh-)VUU60_LsHn71FX6H8)"kAiobrk$[s:pL&5"+buM40M+Xo!0Gn=!o[Nm)@M!S*WiNR=0A,Q*1tX:
%G_W:05.5<q)*Ggr1nMP04P02pR?mPpNM(lkkV,)'#05-?VL7g.*J9ftb.=g-L_hFU3Ihna$)Xa"-;N+#!!a8rY^O<qNKAITS^oq?
%0Ot9?Hl(2q)*hL\O=lQ(>HZo,ZOEL@U_6eDZjBihB7OCAG+k]#AfDjO5_9:f8=ph:9Z9G@!14`H[Kq9K.hZr0*XO2$'Tt@gYrl-+
%`h%$7;pW7V0P/M[E$Y2aL`>4IRKEiEI3-M^)>Cl5nP\Z_:nVO<g??90Uc"YUTL06^_2MeA&jB`mRd7K]PaC5-RWaP5HrE[BL@(gd
%@8dij`q1g0lnDH)NX`%",F-(,8XhoV-.KQ8O<=,9<!!Gb#krap#3uEqaA$)[C^\YWgTYonBCO,:S$\lo.3KJl=S'sKPL/JHIGDOr
%Ii#?X+NQ_hhf81%(M7.@#!E'Apb3/I^2"q+,3AU(+;XTEK^3<%;hLZV9G$h5k@3E@qQNhI^uVa.39%)l-s]cXH*[hb*+V0lC_YNr
%Jlijb6TV.4Nk@Zu(%u'?!EC?r!PTT/,B.d3=(3"#@@%8H#J,KbK<tcWU3VDo=DSL+4$N7I8,53i>1"u]oai3/:qB5FC63k\32`)L
%LP9:>&ZF69?7qYjAr7_*p?Oka'h(<.0#*HN?#m#._!aD?`H;<<BtG/PE(ALoYcsiK!TjB<L@$*k^l/sB,I?tRg[NC;hLpggKoUe1
%!J7cM3b!=<)q`LHI\oXTSe8#rB8ESt@21OYFCaX_lS^m1/CAX]D+)#dI*;l:a,U62BQF`o"%JTb9G;UnC_MR@&FLcNW4Xeod&4l/
%?n01UJBTc"$c+TLDr=(%Yd]/O+U@L2=@lTGH)gA`6e5&F:t+B=RM.5(87.i.)m3oF@j#\q,A[Gk!?!+cJV[H8pm.uM!fRf$(d_uR
%>Mg7(HEbp^c/H^GNi^D)FsHn:66bu?DhI7//C!9h5&t'-gil3Jq7nA.Y9A\QFHN?nN$6/5cZG/.#@J*Ce(t:h`=*`ifn00Q_?bCk
%74cpn;<8D!_e0G]K[4Jl,##O*?=)a:<qCn$'1u)==N"@)AUqG$jKX\g4X1.rK[JAJ`up,Jqc1W<XKZ7)*INbQkQ7*ZQj]#>"\,mC
%,2;ZORm/h`!/>e'`5mrDH01<r!K9;]&b$iI!u2FcK<E9.<f1!+m;*nSiN<0k:+?AD/V4E<LnkU'/\8uk2?8,UEeQ]d6LG3Z>HWT'
%iVJpp'\u28NL>LGF%"7V`$@X%b*/lq3%*A#]'1pIGq_NWj:tJu8pbep!qd+["#O\mE<5ScV0Kdoc0h+[%h``NUWK)mrl=>[;\@Oe
%Lg+NR$jJOS%e?DheEof.UMMY:?;j7V8\>6C"Af,X<BW6fhrMhd5sj9*3M;QM#Hjhc\Fqa\p,)cS6$MG,J6FfDGmLO?ah.\?3`.3^
%.;a7Zru@K0B#ujU7tlR?&K%IO183V1ZtNF7H<mJt6b_UGX;qo]<0&V3R"4UP'@drLkZBos,mVY?p^p==CW<Lb]Ekl2hH97ap85lk
%=V\qh[cojDN+FUk>E1A_/6%[U@f\)g*Dl!.gZgM/Omq##fth!&o#F7N5Z1<BH*DO4=<:*AEnIJq''r#=31OcX89S+eoJG'K>i>I[
%<hZOl=cVi)@(N38C,5U%b@B?^"Zn?nLI/#@lS5&_C#I"4RolD$,0pHYRJg8t$K,FHloqJXY/MO"qH:b9!T>S2nX5B#.Z15VM[,:`
%*XR(Oi>SfNCFlA[d:>rj2*&#p=A5B,n7:cdr&\;_(cjtOgT2j>1Y=Ca:MR&QU5qLi9jpSkkuu$eTl3fpckmpd#](0ATMI*AEJPTl
%PY/tr6k8@>Mt."BTh:?<"4mc%7V*!N=6;6IgSl2DcS24fN!5l)J"cE@g6$pn&T2S%jVb9T:JD+^/o`XO9pi$9jZ!_'TJjq]hHuqZ
%)mkhfE!Wlk:ra&;M:?>^PlZ:!kpW0@$ahhN8n^u0e0SL),<H@"3<T%!:E<JlkedMP(s#A.)%Or!j7;5##bk$#SqgpE@a9c@QL8/$
%Ll."EZTV@Y9bEdOOL1AkW'D9,21]"#S+Js#2AgM<,=3A`"8F9:7,()[9ffjtYRX!l"(Ugk?i\56*?V?bTJP0&Fju=H=q@W@)l*_Q
%*M4hFV\U>NhW'1%j%E?8HuUa7%m.:eg.*1%.=Un5:A%O=riu$L*F),5_s_(M5^F$?!of,R.=p-f[F@J.i*)!\?Aj.^<=h6J<<ht^
%X?&m*iY4_,E@mFe4,?lDl,>O06MUP+MBR.^*S$7cO&HPQ`HBZtlJO]1,'FNu+pua&PsfofcdbGM+APePkLWTHM,*&p73]u9F\uKC
%F+k2f\<b9.)_b$$<%n6Mg*f&[+"NAi>2iLOH1B4G7q.t>;'2ciCFG8iC9F<uP(:9,&rDn2Y,+Ts#M2funb[+$P17<*PXtr73pIu6
%E%QbV41LSKM&lM8V=NL5V6Qr!l]c^1+]GGn:c2_<Z8;LT'=gi*SY3LAO\_qnPO$RF^p_WF.R\;Z1D';PkHX'4__e5o#Z$f+_8qRI
%l*TG6lspF1#\Cjt65\InYa&H\4be,l\:n1Pc7!^<csg.u7:L75*E(1%SRP1c=OW*Q^a=1TQV!1I.k[5X-8=H?Lpp(\r:mi7V2qW1
%0cOFu'ZVc!Ob$%3"Ek=L=;:ceH(4>t7U!'6KE2e-ic0F(M5$-^n/Osk$/@sO!^$Q!p_(EJ($3<pAMQWSO]Frf4e)3gljL3AJKZ/J
%BC@(DD4rT@=X::p7tp8JkHUCCG$n.5Y/SgU3@%9*GBatL5efKO[qo#ZBe=F"F#^tT`X+gRje"^A2SeT&5#q_jP9&doFGi3^M1UtF
%cX9"BKc>.SPEq@WL1.;5`bH;IokFF:P&#'=55hr&>HT325+",0Tg8(U5p<*'JT3#;MLj`K"<]RU76]t=VF3mMF#)EP6Cs#P2i/!k
%T95<^7oUWC0dn`eb5*M?8qVd3"u\#1ARZuD?7_0F@/4?,U%kp@#sE'qlm8rh8CKh(Pnb4a2q+44$.p(;dp-@cR]p5O3,/$c('Dh(
%T+YoTisbhJYdAu!Op-Ni0NgZf*qgMAJi]B$6ou:kS4m&ngG2]Ie,M:;"G'T*jrB(g@BllO$ph@Ba<El"O&sL],a=)$LI+oJ239c_
%!2/bS5XD>7)(*mg$jtTf,ihTD*(?%9TeSAmL`7S@O;^Rq3G[>^c\+Cr&S-b.mntQqN&mXTR&;Mck5\'5VCJgZ=G-<%>)/i(O9V^*
%CZ.Hj$6C*?*1LOD`A^c_%\=SJ,(OeY;.e0PdZ2Clpk?Oc`gO!hT4iMVEMtn!?28/Y;_ZY=aIpUoLD?\\&o-Dld7$)=MfUbJbY?G]
%W:(RZ`f)^o=$^rc7O&_f$K2CO5#W!3N%Ir95n/HR9RI$pgE`G#Zaf?FZ@sddR7a3hB9J!X-uhjVC_^`-FYpZi&rfpD"bCeP%![Dd
%edX\U2plW/&&?5R$TKW@PcD7f'mq>Y)osJ\=$k'';H8f*fYHuQX/C=LU^9IfOZ5Mn2P;Nm%!YIG@08h5*O9UIr?.WQJ=Zd)$oidM
%ElG#UEA3pD.nF`%.KR^?qe6V5EFTF.:0]H\c73$uA3J[#aMofij=XWsjEX&YNZ9E2Km/>JijlAC,j8?YJ\;A%S*5F7.*9QV1cCC^
%4.N&9loT5T=/2pVmU3%o%G]-kV1L]g8nqP2$cN*%DKK<YM()).(^aIm[Y`JMDC7Xlo*:V)@@NTYiBZT:buJ(pB],Aoc\M`cO^/85
%=Lj7+%O[0@(nkQ?cS;,M>VO7r8Q@02C(i,]512Lf?sRlYP"LYc.;Z*sJi%ZMK]8Vo@t5Rl*?h50Up5>?hQ^%S(kKp,(kA/RlTqG(
%B\9!T0f9TI--mJRc*/Lbb7,oEA5.^G@$2bVf0j9QH/$L?MA@2c"b\YdGN=\OFkDVRc0DHP(SVFo"A0(jj2Ms>2WWd$il2Eq-jqin
%\p=cMm$k(.j*o?T?CS'%!l/M\X+@"_:2A54JM_1WC1E-d_o[KC12p[NEt2N0\Y8I[<")IHP,On/c?St@pgik*b!=-+R.<LJAZKSX
%TQ+HM%3egXa`Ckub#%-Z/1K%X<tIYKVCUf^TtL4N4O5lV2ujgW]Sk1$jA8a:-Z0W5$G2'>*f:8Drh14Nm*QX(bXFH'I>tkh0bcQ&
%//;44`7msg?_$*=RjPa*j$4MAdU40$pC:[_-Mha2pW,ko%";r1;HKfu,BCAm]nsBlBA8qs&kR(N^Ec]&3C-Z:V"2mBTaMJR4081V
%PUtU.T_LQa'i4rPlPR-U#sW+aYa5hk>9b9uL_eV"+@P80RAHFd3,3-qU!51C,R2$9H&UaP?0n.NH%*p4ZYkF+/@KlP;dnucBODsU
%@J<]D]U/\j_eKOtKJX_H7t$%h2UMsa3P&Ta.!q#l9SQXWVKhGnrDB^Ie-=$JN.G]u=>NhJqkW^`**"2a!M<7ZSAUp8iB(pV&qVV!
%==0/uX*1A;C_>I@-3fZ_MD?`o5%Y/VPWWZ<Y!ibZgoF3%BBpfB12KNY!&S^)%u?9oi]p?XMBnmGYmugm2[?#o2njB0fr(4aBo;S>
%+\d!WU=$eF7Vf*3pBkG^01:Ok)_<)Yh*T[Mat7%!T#TV*c9Sh'q\R4%&K,1'o0+?e(mRtB@HC`i'X"l:3-F"1W.TJY6a^4U%.lE#
%dDeF.DOdCOB.?C:"(b>02QR#n@5@3C_FT?]5=21Q?Up-n0kt_REdRklb*s5sJQaE-]qtpE&XB"gOE1uhJ)haD*9E&FLESBC`4ZeP
%0HK7'"]Y=2+4jL0>M$hY('DsOEJBKhLII?G`\!km$pD_*7`Pl;LH4\[[`=V:?ZO:D@%ccD:*j6-30mJA1&QZ%O':8O,c.9;@##Te
%/`m#=<9W4?NX$74^2b;VTHoCr&HhF%LZuMcOJp*\-l<)#g_`CJbfV"2ljZb]Fa`B?6f0KY'EEA%o?dGPMDr_`6P$Ptr5o#H6uF_k
%V^)GC6*Lr]ZtDI27Dn!Aa?N9(d1fF',(;pb%lG9BR;%?Fa5u5*OHcrM9FR3G2N.`PgdhhE`0&r3L(d<O<)VTi-POM`PY2nP$XMY_
%I1&D/8u*:=VNgj.Hi6Zr`)B>$>aPkbW+o3m:W8KI?CB*[QVL:r:M8A%M:9%nX(*E3oFqO`JSceuKu2#Q&<.WAYdH"l["3qkq-l:6
%bp98Ca?)B9K$o,C'F3XA&FBnTK]L>[iXG(h0dmCiE(a9#V%3@E*ChNC"*b;F1M%Zg\K;n,HVhg#3q^,<WX`i0;A^"2*"YK4N+Y_B
%PZ/V^j$jks_AGm87>m<?L-hGnK?aZ::dB7`D\rmeUIOcP,`"+9%umteG\0NJJCejY#BktA&IRX(1qjsW5qL.b)-ee.B=%6h1Fe-L
%nj"PD'#5jS?C.5M:hiW39]O,2VHU7"_DNQ?6a$R;cW<D5oVcf+al<dY3iqABA1Dt#?9O7haGCRX(>A::13lo#Y]l,UH4mq&YmZUL
%dHg=*pK.sk0fFfe%$',r)#Rk0@/,Qq>RWa03<4^uHOca#,"82OMM.?H.>\P]OnTn;KH(X1U9^$mV.:FKNR=Xua,;@WiUZu!m`?qk
%pU7-4+Qe=H+Vk^se1a:)TnjN(;'`#paW[T'o9haGFBPCdRgr;@A1&f2!_LiXLrN,1(u!?Tc`31T=d:B>84#oqE`>r+/T+V]%?\\g
%I:J;Id4dk=I'Su*,`W9HpUS@A%imV\%PV-Yp-#WQ:8nZ^UO;2pC^cN<6rA[.=Ar///G)V\)se"?_@6K%&n?H@a%;:G6ff7!k;Bm1
%2G"S0/WQ1F\LsJFlcDFCG+r,K"sM.-<qh$-2e>J(<I3WO15tc[)oNJ"?-?10*9imPD./H\ZD%oj.\7-MTP)[8Y1a>Pk/35P!K]e1
%bQj=(PN*'0Q?Z4TWDO>TUT`Yl(^4jrBnhLtUMJ^a#(c*-!];0]cG%^m2HK':8PEX7Y,@YQV49T<EijAhT&Os]&L[4H70@Lr>32b<
%4=.u)1HQjFG0Ioj1^[lGA^0n2is\(NA-1csjA]QX@Aoa*-3f\``s<>(=B34[/eW$DO2b3I,+?ghA%IuLAqF_cB[R8/,aO=,i^Z%J
%7)r/sj,07ZUg6gFB2NV#k<r2IF#_:k$_'1,Qp(f)R'B-6KtLoO]GY@Hfg6SfHEU"pr=4i-:%fe!>!1K:nap,4Gp(G9BF(!'C.Qu+
%dODIXMm=K\nA5KuNhR58-Ft:fV20+$4F&[_'VZQh`>Fm0/i5a?Ct0'B\FJ['F+%S]X5^l1gJ=0"iadPFqF9gF8OD4:glqlIimu0J
%)+,$9Q)X3"Ti[Qm`Zc)\<Ft0CadY8P0#GQ)_hj,AC9:qUb1B.lYXV3OK+O"]B<E""V^<'K<W)T=17'7,Yp_HF=\ZrhOr<[]A9TU!
%-uIEk3/f308<B:rVHq@bYf:C/Gj_+c'UZY2YqOq<PtpO^Xt[nf*6GjkKL56_\;n^57:@>WiI`84)elaa6:^7E;;#_!b[;_/dn&*l
%A#ngqlhTA,.s.nN>+nMC.`]pbO-C8t<(PY1+,-X3P(lZpCFVEii[P2?A<OET-`#.L=-Su73$;[iZ61So--;1YiXCGnN>lZ!b2C69
%20C5`iu)=tJtgE`<Y!-)C"lI-2QE#.IPb%k*Zi#X>mI<O=NF>LWC2Fp[tcmZ#&ScL$=TZf@JV])2$d-J*J:!;OgHl:j]A4=Aa_68
%PLL.67B^2d)E6)<>q/.5OJ9#o*4-*[i@u=fmN+Ki6,$/09q!H\Vl+Qu8?q01/Lkur\e$9#/%h'oA`VJe=2G&$4?asK_`!7EiWkhT
%*2Xf#o+_*pOrOX=,bU#QRq)R1J2D/>Tg(m75]mjo*4>qR9pmi*#flcQ3_75bNBo]B=E<29/*eZ#LH]^W@"H]p'U$+o4fLf#4HlSF
%DM>Wf@4XjV<15)p@sTWH7HIf:iao$QjV/i#)!%6GJS3aT6],8G$oLS/QXb3)o'MpXno@RK'#Gi)#)$k;/:,0[e%i2`bpT&%2?Y`$
%>,CFkh$M3jYa+7leI9D-*D7@oa<O,Z^jqHF\3PfO,RN99%h.)?cpb*I2\cSFQuRlQ+Aj;YF]W.l$,\VH0?=Hd)-"&IQQ)"7E'lH&
%g%gHl#ZbXkg"3ln]7NuGT,:Ac<!Pf/S)'*C.)1l(KNj?U/(WhQGqE3'dFgj#)?\BsETVt4!A[\TG<!mILF/duNr*Nr75pC;M4SIC
%A&a8(KIlC"m,Ps_7)#KUZ)O*$Ce^c$U#*eDJ>&LAY-4oX8*]bd%*DY7"kakE`>HE(MoAP-i\<-H)f+XGAD[AuB"5:fm<n$F`\Ue/
%$=JOLM*a_XCO$N\24%;M_i:%k`i7FQa,/hk+1(,7Z\^E^!fn=t:]Z"j,Yj'sYp;G;(WN,pN-EoE-c`kJRcB(0QXhEO68WSMfrhgb
%.H/)Y6F0!+'V-jrq4s"pTgjYDWh0oL&]ZZ,&fg!u"bWBCGjs-Zr`qo68*r!/;5a"QG*p&,(o!AVO]%#P@/Nb[D/gRAoKpuj9(QFE
%7jP12.Qn4@1iA7T.U.Qq5f+_0iE8Cr5:oN%!Lo*SE5J]o-R4(4j@,N+%dsP'%n3jXl'Y.W@],CgBM2MQ@TPnAN[Z\.HmY='`I]bj
%'J#,XU!cDV$H?Sp$?7a?'ii!cJB!R(6\Qp.LF!g.m2RQI`7<5UH0q=._IWr7WFTfa1K<$%YpA3L;H8S]$(2.08<E3<Z8!r#1+WhY
%1slchmIX)P%q2Re[)Iq9[?8@'-nUf/%6W0MaDiip*s2M&)e4+0SHgj\c8,\o4_m`9-CVH)ND,mo_dg-Xe8)A;PK!VK:b%:n#`YDi
%$q&Q<`Letm278^3j\XecL"#Rn-)i>^UIrNdP5S^OY`5.YF&Wl($8&P:^bNe.)2)\I.'kX*P?eG0;g)/0N7kN;A:e\*$0sQeoD$%W
%O1;2(*$U.nBl2!*-&?EQS$@t329o/hglT.2!\l;LcUH\dBm1E"l0_MMGrbX6VV*ql<^6[7d;NIjdY[Z`BSN8i#6dt8>TkS5LH:OM
%9g;#+aS@(8;ILb*e9:n#3c;s&ihRn$ng4icdnrA-0I%/34:TB2Y=)*Lg5k:kCiJ?a/BTK#RFCU4+%:ZtirtNHdrMcqU5G8[bC>O%
%EbVHZQggW=,+&.+MHoGq?KBO9Skpo6Lf@'Q%gl^nd:;j:*".,q_^/=&&5?IOPfCe#(]"So5N(cN:(tFEHrfKK[%L:lE5L)V=@C%"
%AICL800rZqTj\QYIuYF/M?qiud%sG\_O"aH@(B`YS]_b#*:fAF["QJu7?\N(`<N41_M6$.#`ce_]4CLO3l[:js,.]FjbP(KEN&**
%eV?0j(hB$'b>tSi@u&AYej*Aj3)6q3Ps)o&Ep/StF`fmO6<OhR6$_R>g&p9PS3jG$%3>&[cp!3YG\e4M-U<\X>$l5V>DN^g'_+L/
%M;dPN0r;iI&2a[Rb"M<#i?;Ma.cNt`41^Dj-#%JnVKdJJ*]'!/m@C7Pd&HLe+UlfC#&WBg-2B6M&kuVuR=flf'%RLeZ2kZ5UQ1o;
%;DJ7'8)s:$!1MtY!'7A)W\&B4#(lp?%b=^cpp_D\)Lu3hoAi9u!2>;VlSoBN-Nb(bJs"iMg3h,3_'caM+SHCGG.>%MAV>O_hrsm/
%(*bV:W5M@GqALpmPFQOS$M$;+%3M>UP\#d;opFFL3QdjVO+'T,QZUU1'[mKhb<TRs,I-a^UF,tOSb!-)Yb@%2,!N;IMGV1\.tgIM
%;Ej95!/[C25pmT_Ij'MS&gsgTi8PGNXe)+&4)o%,71>?^+r.!MkNdB]pf]0ST3l@c@J8;W9uPS)ee?Zn)CnDbjlM$iD`leb/<U]>
%5cdcaM\_opDhE4kN^D#)Ft%-d31LR%2oKi]M&GUB](.0/V6A5(<CQGF3T;];N)nW%J4)3S:De9gnY9Sr`H=2+PRbVE\Trp_[5ku-
%FU)3I'BS3emHo#^Ze"o!KqSO8BmqJM4a'[9D56DY7C?CB#m,/k_]YI,j^LJJ4FS]dGl%:7%C;q%/f6n7h5Me*D.T/nC!]F3Qo'X>
%BShFs>WnT7W@7fTA`HEWXfp2Ndl%Y0e$"l0TJB#G'2Wk70%6+R=1%p6,?oPCR_fQE?[u>@3"0D^o"&KO+/Z8]9Wt5R%GM%WnI"J<
%g%,7ii/n=?nm"H=+ho*m`^ElMT;SJ%0!rPe6J9GqD.^/>1LR'=qA_A.(s9.fO>K7SB0rXd7F`[fb`gIg1`;L=N@F()s$BA[Q6u9u
%4`r4o>3[;3@QGMiD'*WM.hIOO70fjbd"`BS84jNT7:lj=89tpuF$?IG16#\Q!A+]!OZ[fsolnQbk#0If]n7-"YSh=LP*E1:?ijDm
%l?BZn`G@"gUduU+.c!\7FfL0pjiTk;A'T`%Y;+5F2lrTGnApm6*Eu"SZ&.Sk@8!&CJo775&3Nkt3t"]^7CY,(j+]`G(rLa<ieD](
%b47u6UgO<`ZpIc&Yfi^SJ8(3.)#dUjD))+&%XjVR(s\N`!8$J+2"Fs?n!c-S"S8]o>bC&K1e!ohBS%1-Ym?CR,r@7CHn9Y1mVkuf
%lk"`d9unR9m3/W6[BQOh$:?0NVR6a]`Jc3-O?an$A?K@C%MlmZqUra;q+MR('5/oEK#`!PTj(-*JN"L:>ufhpAD+h0*EaAS!?uG?
%L^(H[60TZ'&h^,id[CU<)5147)f')>lrKWhn<=!M3qHPd[7M'#U^[5:A!/Sji2J7'i*`0#BH_.f'3:KB=PAOY@.>"m4Suk/%'aa4
%0W3)?7<Gcc6/YRJnE"a"<JKH'Q^G--ctVd0(D_F`j*-_O+LCRiRZ6X?+$=42=!6//*![N8Mh@&]n=aCEM1CAZN[Xl.$ODum7JUZ,
%f+>U!Y.qhN27b%5$78HoiE,YNF0-19#-$Ac:?3b6!&]7iI*mS[L@A?G]EKY'\@TK=RrX$!AoIO+*>')mks5\Y:K&Xk0jfu8S!Zsg
%iP`S"A(<N]P.FS`3hLt'.$;%'XI`ZVJ:SM,m5e;PENo)3:V+hZTAa14e@*7R>*rZT[2$e.KU46WVPYiE=Aft\JkA\PL'^eEEea>^
%)3,K`MaSqY&f'UEk,PRtdb3[^7E($W@UW87=8<XH%FQ4]9TsAFhe1$F/.&-"`=!h5d3m7/:_>,lAZ'i_blAH2NYH@rT0/`,`8#[A
%dkfA6-mfHkf"Zh9C5T&5=4oJGWEJM((b2Orn1bqXNk47"BflC<Et3+=_1TOR(I&Y`WBq2O`b7s6p'\hdnA%#SZc.qF(B7gi+*@cl
%Kcg]r>]po^Uhn>Ykj.i<E`8(m=o._#8%C.ijATXeT@l?`bG%YN``)QCLd@3j-C^V<[Y)gCl:k6K8F"HoF3gT%!@G!*K!EOs8!Vpf
%/S'h2N;\pR.[CW(`Dfa\cge!#!1e;Q/6(IDl5>)S,%&`p#%sgKjHV<W)4d#-67gbJI2Uk,18=EnYoK8)k9q`FT@8D>Tmhm<EL5mT
%#sH/,8ns[-m[B/6HdoB/dZb6hOi3Dh9ipS\(lf6oU>t`b;?7h;MKqf8TiVQP6aO9fk<P(j-RlLVm?A7G6kEjj,2JRO2EG(LmI1+_
%WA#OLA+Wlu!kMJofHb#rG?JK%Lp1P3Gm#sGQfHBSMi]30N?,24O(G7bFfNV.E/*<274]K[n$I3II).Ul_tQ1KPg08k.RL9C<CT;S
%E%IpJ':p1`BqsCXfp$1"72'Pl;`XG:V]OKiif/001X8s<=tCBo:d^8]diK[AF;0(p^cA-pZ9qsB!n`)7Kb]$Xq1<6?q<thiSD8^o
%(3^=\Wehm9<<U@L3Ale<HC`LF]*QAspq@RJ\Fr691)/n:ZDN<Ac./X#NkpSr*S-=YT+RGAP[(B;BpBCT-eh.;PZ&aa,GlDS64o?7
%"s;Cr1X3sGRYjke`<+>b*0fh=;SkDJ5u)Z(.X5a'\]5(g43RiKmm,89c5kK$^BD`,;A=gKkES;DWfN6`*D_^+&fSTbKh$ShbSHnO
%@nM;H(a?l;<qSXC:Sd2o>WS4[41ai.35HKnL."NgO,e-L!BEcFi8BAg3a>n;`M!O-"ZGls?6K`!34<DlonkpY>N[3A)OJDgrsSqI
%8cS'q3%r"Hal2Lkd':lf)epkZ8$d!(df-,<&^Z.XMK;l>)8O['\bR\j,n16"P4OZu67c=d],%eI>H07t^DB,*9;fCu9U*%,EW:p`
%Noq>5"JTC*SAj`sd-Qe1YnI^$6<,("+M)5:,Y)uLaUlJn`fFpr1IK4Fa<<j&_IpY@A[OT8]0RlG9f=2m*/NpB%jdnV%Z`K(KMc2-
%A&K/M3NaBp(R%6FfQO3SOcP*_\idL]Eu(.bqGZk6_,-KD(*/YkUEn>TU!B+F?l4gI([AY)nS!%.cIP<LdBZ/t+A.<9l(Tq'?-6f$
%H66;^*ll]jH1UH&S;^kHH11?=2ut*sM)!&k%!tVfHL.,c!-!@G#EOO/(tQ0a!3<e;b7rm5.A\5>GbB@!;N->#N@;Z$V:IN<9lQb,
%;%t$C-"KK+Vg3\j@KJ3OUV]]b+i,"SPjgIcs-:%72$(4#%;'L&'Or3NFeffm%!*r(V[nifqR0"=VW*"@:rTF2,^^T:\CjEi^$I5d
%$>9-t)JW]W2P1.S9U@!*!4;Fd.lcE,5:kbE"s_A1e'b(!JYiKQkl0TTQ<:$m)4[/'PR,&)%Qb('HQD^bd;LMRP*fVHXAr+3FKbIE
%0@:P/j!>TlUNt.Nb$N,7E"3t%lgJlL;\&D74H1q9So^8E8nEiY_,N$1J/=@sC?:p=<"/ibF/0pQ?`.D*[;q.%;GZLt7;A'e?-%"3
%K\EOZCNZH_jUTB%*0\?d>d%Y/2VL0=NWtE=(uiA"RoUQ-,r:b[M5)Q,l;UH1B2)!Y-H0(l%L3O:3UTIciAlCS]pLor:Z[&;&j'`u
%J6^6Q(5h;u82tX'L!DW^a'kXmEKc3ZZ@d"PrV]D6Y*@m6k6AJf^uX%qWAVD6`/n^1.N'(J\*H[@\?FBOcC4%;Kc/dVE_#)J/95b5
%2.@&%J>',\p$%u/6aOe\h0^7HQ$J"_j:(ZAmV0;un,liL[Y/npg/3!a*(tEPJM!ss-q1%%/)k:?;B#kEi+69[@&IM+2&90O9QN=1
%l\O<6V[Dm?U;g347Xk(WZ-=<sR^K&o',mh/YfCmZdrE^f</4("GtXZ.F?;"NUZ4cR*)6%:Vd4^o)"=?=$=TeYq,`3>NdK3Gb5Fen
%>uLeF/3Tu;@Shac%Pik?$&Mtk*(Vu.g^iie`jeTFVdl=+XbA_,HE8?sE:ftr#?HE9F?qC9bE_%jPcuF*@X=TdH&K!CiqaYdUlDVR
%':ij#kUsH@V+-H)S=>Ib4Hmap.qk-%\eEpgb\>U4PYk5qofDMTHg:<<c0#'e:YSgG7'To&qCB\d`Vom!fr`GK"nWfBQU=giSQL^4
%Fj/;m/L>j#+TsBWC5>2N.Z6A8q#RbOP"o0:kU[@KRG<F(RVBWBid)X>[+2]41sd[aV5dA5C7hB.F9F\O:a$dZ<Zn=+a^)t+31e$S
%XJ<U<a1WWBIu,/rA8bI^/r&Go:gk#5(G?l42kR_q]nfsOP_P&!,CIoN#<Nq\CVp3(0mQHFDJJ4$m88WTdO'8O8!2,S/21efMG-%Y
%Uk3(:gpG`FlA*f-Yg]l&3\F_NVLae#UnpBalm*aXXsDHL;Tk=F!oj7">7Sd,bEpk<?e#YB:3;s:H1M7:$j/$-r6O#hl#s.]K1jre
%_oF)Sdc]VT`md-*P_'@)a+m58hifr2XXDYF+]i`PK1.)C%J!BDNII*)N]A!DBLcd>ZrF'DCD$*H.`4;Z!l&2a'g#:(j=KOpjkd7Q
%PJtOuVgA_f1#IfXn*h5ITP$Qm<-BTYXTTfOdMfZAn_f5&r/of[#H"#tgW)#o:8[(IHXB\m,1WZQpN2dmB\kt$4;#TXP+F%k-acZ0
%e"2Ribk2UMqNf9K12K]+W/=)PZ7I`1^f?tSPq@l_,]nO2ejt6jgZH9ke[CS?*i<'b=V,B<CmDDZ"irg/jY\`>4Bc6m8L0[BU6GqT
%E2n"a@+*.,ijCH"(^hdLGMR3eNM\2XE$Y@Yd^$,(h*4=`Q@f$!AW=WHNAnXlQ@NT<oe5-64;OO[ifkHZ&o1`:N.57RC?>3O?@@ia
%q4q%%c;^=,(cRP9DGo%Z=RAW\003+ukjeRcAgBk*b"])[l_FXuWk-/@9;]g>\Y$,o<G2k,rqsZ+mJKPl9[?[>Af?O;38oj,C`C_,
%=<<)*o"]i-7=`roDYPK(:R?,hEh<H*)PbjV<*:Z]M*hX&PFfVb`F(OFTEBI/G]='sUoElqQJkhQT%=De:q41(40`JLc*.g.mTVdi
%&-jM/IfALP5[Lj<T$"pV=+:j[`90OD$U&L0j'm!lNMYE/F<^f&'1W4+jY:2[DS#b)Y$iNH:e[dESBUIX@k)c^WY-H5D)$bqH(fIq
%V&[?@Va2/S!`MM8NA-]eFfE2`_spusjPj#"<6DQb;XK^O?FK*e9=u`TXt8$Hcl&95mssNQ3Qkj(;`1#?.`c&H$!GqDS>UDSn7#OW
%BSKU"@L5@g7Fn_?/L*TKoUD4C_r3^Hj\@)C(/)rr2)JF.6t5D@gePY-LlLh65a#UjSp?1WF]>p_(A:Fnp5Po0UaWpo%MYMB:J?VH
%:6Jj%Tp9BJG(_<5iI09Z"H-/_#5]D3SB7>$I'h$<MA[X:Eo/Q=M5N0=W>A#?>tTM%'\a2^/GT_WI?&["Oq:9VbuXf[bZ0`tPmuh/
%7o_l.B0^pJbB6#do]PR"/4%3i1>(j$BC.4N=:n52St+V,-I:ps(mVS,FKEkQK7QSpEq_QUZVn[/@&KbH%AM=__PH!A%23MkW+=NJ
%FdBQ-kn"5[)c^S)AjTn=;cac[l#Q>OY1%C:g(3ur'a6N_%?PKjea_pC8*g4uADcFc/=ptiT<:b'F\J\XZNW)$kmHMTPq/&gopBco
%bQ0>K7reX$<MU;mik]cL:*Z)t$<tCH2:4u"H6)Uap$cu?gLPNB'!s4On<PCbH%Ru;9Nr!gFOb5&'dTK2lrifeG,f'TjqQ9)^KrJ%
%W]5;=99.d`eV>GHh<`V0dU97g`Y)Sn7Wfi$:4n[34,TmD\o>YgW@(ZcdYhd`T"80oNg4Pnh*@UmSMM_USFl%1TrWsU>fjH5:uA/+
%U\T:HM6#Qh8d6W]';%-=Q$GRGl*tB.l?Jt'a[Y73[9po7_;8O'lHj9n.Bho(cEM!I8:J&0@%Sq5('*NTHk\X8<F.H;0#]b<)3/an
%l!ZS3hraQ#Q.Eiqq,'Rkh*%Xeb7egO>cA9#9]#2FAV?0u0tIA1F4nZ*=\B+B5%d#]Hj5ld3d7oR-k5*I`8mQn7A=-so"Ln<@d-(u
%&s!p1&oUOc9o31%S.rA*33DrV/!mak3ksq70.&9UD65QWH%2iO$'CHF4%r-YO,Dr0(*EHCVSep#'5'OTA_9/(eab7_d?E?MY)Fa%
%AhFHWf.Go$Vf_'gZ<JlDX.<*66H\c',rsET*Is2,L5Ct5Wg^/Q=bg6C!qVJ#c?_ljY$7&*MI?]Q-KRm:Su`#c.of_ndF;STP2M%#
%.[LYNilsur\hmFRGq/h`=Xq"[;C:oF[&Q?/GUh*tT%['WZYq:A?D18L>g<Hh6<d0A+_$R"c8NT[3D#lH.bPJr_Q-$*Gi'4c_1[Q:
%K,:`%j?,00a"G$oa1#%l&)@udQS*.8UW[*FA^$)cWD='aF5.bWk)M#,c^r.gcMZ_YKoRPTgMmFuZ6ncb1s_:`;l3!o4GY'C.K^GX
%SdO.[PpN(gcg@EO%.A0F(0,I,.%[f<U3Ls^m"2AZS<nfW'*UqE@$R.Z`0(Gk#+s_L6JS@_af0@'$)RcT7%cS@T5s2!YQ6.^^$,"=
%^_[=I6%)uC,IG\:E'd84@YNs0'JG*'12pTT&K]^c,)J])q5=-WE`U?IVZAEE;KUT59/SaZH"\lP<OJWd@E_sN#g_GuYtjHVC!qom
%';`,DV^cPI9m/@R>uJEchk$"DPoC!ibjgg9WZ"X+;EX-g;Aq3jQ@lA<Qa3SgbU?.SOWVJR:<g)o%-JInhr/*D&d]$i`F4JF;ig/g
%X=ec$#+m$W.l]X?M,-&bo+=s>%0PY)3lmB6D/`&Jc!p,Y*Q*#I\]0Ja3cWG#Q@C\N5"aFEp-eKlXuf/Z.``'#m),%*?R]<sV*6`I
%nW!HcK4p9Vp@6<lnX?6]6If`^/dW+gdRD!lM3io7?Y<dQN,'t=+3q%'3$SM^La@\7&0QAZ8Pn60iZf@eS#Q7?k"FK3F1[iaBWRS'
%EKaT^1@Q)%MD3hiE!A2M(iP.L3ld1DeB5\7&$E#r="s6mCMh1db5[GWPXBFOSY;]\MEDW879.58bq>3-&_p8_7Gam7M;`Z,aja5?
%R05JZ0JN9HJa3`ELj0>aCK1'=dpZ657u,DT@!Q=,iaX$oUN9DCHhp7Ae<pNRJr@$HXKg#M,TK[aagfg;ng^fGN]qFp-n8)(ZB;.R
%,][u2CN$Q"=qcB#SR$8-O[_u0Nd"@gTdlAiX5[ro-@uQ"VrAi46rAfYM!1XkE'h][;QN^TUj+$dpc=cS<Ate5&hjEYY6?,if%!cB
%KC@![6];5irA7aK4%uAJk<1rYfmI\;o)StWXJUTG,C5faD1s?c3-$u<JamWF-uGo].cu2#DD$7/k_s2aS;jNrAs)fpc^Jot!p&;c
%;^hW\:qA2IQ0J&P'pnM#W<Gth@]m<$qs)$u1nM=7l1+BZ1DYc5E(\*Y8V+b$J3'<F1Vsd^>'D+%k#NsIA#W7jD?R`fid>\abBeK9
%=R/j%gS\Pq<jr4D\dL6O^uD3AS:cd*)Wp::=GfRZ06PDtNXeE`M4on`\Ec+X-p?CjoDhq+PW`Xubj"p5#!#?>KT9=n"\d3q^ebRh
%Wl0!?_D-<n*)Jq<8HZ1+et^pFo[Vo#99gSC".7aKT"B2G/UC2kh@PX:EioAX?H53GLBG-S5>q_AW3AG:J?j9?rfEV*di\'mLF%6-
%%cpZ/h?j$dOXO^#*VZX05$^S`?F6PSf!\Hh9pJqXKmX;i!ise9NYKhe2Pq(mO6L`@PL^I=VOQo\WUK5ClJs9AVOf(m-ZDB`k%pt9
%!q`M'I+[65U5a/@NdK1mQgA,I?$WUnWn&R93h1;IP*tUE&0Z^^(D/d0gdoPC*(#\MFSr'Q#%3hS'Eak`'P5W?>=t^"bds9r61c<*
%GL:]PF`I^K*C$]0'ueo66ViuEd]W'n0rYmiNRHaB&X]sZq/VF/qAs-aU`'\a3W9mp!1qPJ9ABoYBTNc5??1\'<79140Jq.%BK./,
%99CAskK$LTf]ebND1tKV8KY7^&CD,kp[PsEZHpm7/=EkK2`hHDN5^Q64]Uf,VUt?6S'10V4k-K"%UJ9n:HaVW`6!AO%%/_YGO-rZ
%3QQnS=Xfh_Yfj:H\KeGH]=`R6Y>`Nn3Od(p\-l#9A0!]HeJTJt[OlWLCbFZdfB`3oc"I$'^AlRhYq6-9>XQZ0iO$QYT]q^@VpN['
%V]:bWl*rpt3pE>PnCLadE;Fs8#nJ1?7X*JR4ggY9+_`Hq<-dS?@]HL8/L1S.*V&^?FSZs-Om[/,_hR.7CuS9"bq./3eC5esG`Khl
%6:#"[4A/AJ,VppIdofmG5!qqt*[=@J:Dm)+#$8:]*4]"*%3qpcOCG.r*AImP%X'o$L%OF1C!=hD0Z'Vt/LAXm:&sG7'PGq*:=jN/
%W,A0LBs:ie.AkEo>=V7'_/*OeW[/c[pt.89(@XX3p&EeDQ5rV],J3mSo+/5P0H3X`%X2VE6]HTs>*'LDUg8VQBlF8a;A)JnWW-:R
%c8"pHb_Y\6DriRN$daX0Nf<:4r\?FAa#TH>d)H,ge3k2Tfk*b27B=b,8X8Iu@\CCe[[jDN&?e'Y]$g.=]PY7uX?>YcfCD!\qFs[q
%/Iln]kDVme]$KjW8QMU`Zt6@WYWe<<2dX*$0Pa/b6l1j>(mAfSMf_0A00^REb&!B`Ou`q[1"qU`@PbD1O@JZIUtAk;K[]A/<qWWG
%Vi(H'Vp\.r<R>H?.9u:Ts"ZYg)ma$p/#Ea*EbJ:LY\^DjH*g@KXkjt\O]/rck6B3Ze`[UNFkuYd<@Pd+Ue7(SPGglK\Q)Z,YNF4f
%>Ys3SFCR?jH:-s-VY`l,jdV?@,IJ.-s,`9+5j7Eb":iD.jPfJ@3l8sd2qgMm7%YN.#RD;ne`O2.^3O`CO=8neJhpN)8n4t!KWl.t
%55:+&q]ulliP8IV7_eN0%o8#!&-EV=!K?7#.V!$4V3UT]<+/Q?CLcme%oq"^2>ZBrLZ]s$qGF^!._%3lNj`jImS(nsJXjOkItgHe
%[NT(o=cmf@oBVG6k*<=oi*msYE-dB2HKnRi5/LTD+>%a1F20I@nbBO4V<9aTojQQ[XZXDQR@H@>[iIW#*WeX2OSYL%PT8r1.?90g
%q<2PU"HlVsg8WJ(;O;Z\5#PngG2uL0a4_Ql#45CtT^T;LridC6h=smgm,E%O,!)Qo#Os?8rnQY<5#c'!4hrckHtn4bgfIcY?4;Y/
%ggVT*V&Pb)>^Iaf=JY3'F+;JphNGIroli?9_.hu.\hgY4[N4r'@X$sYEK;V'dV(F6;7K6'P-PonYW56rHYW+@(Vk'^+!F#^`n/iO
%m_LEFN+9O:9;"cAMX3Fk^:hZO#NnrYZAC3f]I!1)1&&#3SC2OHZ!oQjE0+?uIIP0j!s/G?ne&G4TL%1@"-mUmgjci6%JRTNC\1XT
%qRg#r:b+<gc>7TV6&>TAJBD3K=?mElMW\`-A^ojhM+_.g;N_:XcE7)IfF\Mq&"H=kYt%6@@Z@3*WZC\-OG<D6jR,9IMt9p:/j1r4
%Mm>>^''N>j[lQ6\O0(R`Rr6`0^o$d\(uSX.c7CotX_F8gE,T>.;sG9kPS3cD.Pa"CH;!N]HMeuP6Y37a#XifJEaX`l=F.<=MT0qg
%WW3?jR*.*O?'h'-J1qVWpI1jd3jIX)IfId@:H??k3%1;3V=tB,>Ohoe,bf^)I0\FnQ(O1d,K30%]lU55`/]XU5&rH+48,UOjReWm
%bYKb?k))e_.F'beJKPX8EVQ[]Q>D=R$&ur4G\ZhN(Zs\C*a&&F6)b'fb4P3?PJkg_@X!Xt?IuH/9_b3WW%G,bF\Pr>h@dG\efIue
%?h7#$M!i,qJ6.K)4=W?<<ck-bVC@mEh,_1Xfbe>j`FSu%;k(6cU`od"JTBZ7A?77+apUPO5b<R?L_)p=I.O`oRS9C]R)"PH]$OPl
%j4dUQM*7_5p.KCC!7\oZ&7OcH(Ig82S"D_A_@pE$(g&\olJ=gua#`b.\mCq3]eLq7:1<U8<,IT16qcM/a=9T_j"md$;C7V>HAo"D
%:G`Ok</;52q?>/]hNE/;m=#fL[3lRj3[1^:@<]TZ5DI`GOKu/:>8qX,h8=7M.D[Ll8'squ:T`InPggeJg]6UoOcW`E\VsA+U;MjW
%PH%"rlAQ.*]M(tt)W"kXqdi4'VcI_l%7;Q$IH1:[F4ksg;"%)*A5<2aL)!aZ]+uBQ_M]sRLF0g)KEOo].>QqPUUS6R/tDjTSchLr
%Oo#D.ZT+bT(Rh*#O'EBtaKg^+&1m)rZ)@j\Z0eAVk=0A]>n@D?V9C1l'P[&GpilR+']LU#%k]=-R=Nq(pFb64]Jp2JW:?j=CFn+5
%Ib3f.1$L8P^k3:/UL-D;eSZ`GAS?P(pge[G0ML2:#+:.Q_Ju*5`eSeVo9Rbpln,u:/P/,EjO_R]B[4X&LA7k'$'+(O*'G2*4?0YO
%n"gHLd'hb@17VO]2(1?+S&th9pYF'WD0nWa<)uoa[^bOqhr9aD;`lS=7UKuQ+LGm7;l_k?Ei]-T1REX;U<^[\Do$%[V[??'d)0Z@
%!$*Bq8n;Y*`an]=A#'JDSGCt&boms/H@YB]OHNmm8oW-N#UfrbHrmsC^ohf2dc$%f]LNiO,?"J41SDd4NS]c.UfJS[oDYa'M:7*+
%.?s!0^qXqaRR<N^]E%Pdes:pn[gQ!9K27iDJja4UeU;?.et<#gjajB^SnnTmH)K$,_N?"jR\ALJRtYrl-t2B.7mW0FK&^C)a<CpR
%[<bL4WNZ1PAhL-h.B*U.S\XTkXG<*H;ftm0L]2CbJ5/94C<3JOi8BM_DiP."IXi3`d?rl-U=*#g68eE)NEgp"Sl8"?i&,RQ#KO5Q
%POk<8)ndQjW22Z:N;T\3M>/R<5$O".YoQpmeBqHi[0QF`q+Hh,\elC"PX\&UWX:gFqW'dG7NCfodW]_"A3eUr]EtL&iKN2(1)s=:
%ild9H^`h&n&pS0_S(`tYAmsN?.mdUETAiC1VjIfNT/G5paE+he%E9/LNPY!tKm;cMT=c>0hSAG@4D][@VpmF,3J1Wbg17!,'keN@
%4Y*KD8HGT&ej7nIVcLR3*SH4Q!Wh]7M_>Z#('Y<ipc^%\_R%29nFUB>HOrdjZY!IZV`(/0Oe]JH7ja]]%02TQ#nrg7->t(mMEGag
%@'3\ROc0:b8DABZSf7QnVNI=F./%SA7#d&`'YtNe$9mOu.<c"u[:YQ)OW>m-d"MUB\S1WGRMAL7NA8h?N":(86,JQ<#n]W@ZP/"T
%NX$ls@UB,C;AH:9YJ,oa^Eq\C5X='dJ=@I8egC0PbXTr+N*"8l*7^okSPpBeYG+.kB_8i>EY*S&GtV2V,cMCA@h>^LJeuOI[Nh]a
%08n$^H%6<nTmNYUc>A#/>;A3P0A/T2h$tlr_rH>jP^rU#]Y8Ke](nj".qW?8,:P[Eqn"2I4H2nJ@;H_$+!`BK?V[sb@3p"M"hQeE
%hf_D'"h<s@/<N]X.]Y4+rMCnScs+`>,6=jW>g_$9llVr%B,-:,]7/\\D.*;&^sVNo=\\EdRnoVIR?`jZ*nA>4ggpST?^YTK^bV6N
%fP*:"=/\0!"Z=T)eSf1LH+hi=P]B'_U8MT`^rE(G%M`#2S)lN]"8jPJ;[!SM'1CJmdHZqY''T1\[$^R^%8'^gE0!^nG3#_`5AZgY
%Y)]&57l4)4;']L+qFs[1oSfM0?k-P`r5b1M^6-sC-IjCl>EE@#Lgg@0a/mt3R%,(Cnk=Z-O$)H,%''.Oj%;!^Ds$9a;4CRV_Iip`
%Cc&M/(<agLJN9(or1_TB5*J23?F_gP%S2g[RdgW%0r]Q6-FFh56\e#0G:Qj/g4e-%`kCTB+#qN)I[opbf%R?)S(pSgj8]^)Erp=`
%rC#4F<?6"RP=JJL<tqTcZo"8YW5;*9@af29nd._EA>p;cO9f!<RXr]V'fqGL,Ru\q9'%f(p;JZK!<7_unRot9iTt`<4+o8efV%u2
%mp?.4XK=Yjk<s9C1XX;0cgq+GO;4B")@Zm8(kD_R?Gb]#Ocjbpj0BoNW%$PSQ/hcS2Ii>56()FtK7Oi2TJ.W`plX:NWa9;,h<?Xh
%T78_cj5d^(i'8G7K0rc(7+b1`N]8hhRRdFZg<'mg-904/W^9!^gI;/Eo0,CkS?:cJXk1#b'`]=&=Bt3@[n<(Ba>3)rNF3c-Rqg@2
%fEjZ3hPW4B*K<I@rN1q(Kqn/_L(gD;YmD&)0p=h`?)k,<&<mo)B>$/-'PqKe`l)>GU+W(8Yi2RR`W,ID1/Ej<=J-7B3*qB"m6T%/
%3DW\`,Wlo<5JUqJds$WY8r.d&@_Z0TC.j8+jN+HkN?%_'0fq;U7*QDNG]gsD@9=cNT"tJ9"^1Kmh!"Ui0Y"=M>cA'n"R@*nVf5II
%L8]^S]$k^rgP=-[M6P-lTgle4oOj40+9])Oa(*>sKuc`'*n[:R<'2;nZH;d>ar^hWM/8?lJVt5!hh%,HfVYt#NSY:0ee[^M-X`'m
%Tpm):_bn99We`+u,'X?$0V?V'`P`$N0p4Ypm#>H;SK#6gp,)HNqbM^m0kB8D"6[a!(;mfi4BhqXVbjW![80UZC^VUJ,^lq4jqCE@
%VI#f4]d7f=;aoPMGCgHj-KS>=\5Y*G@^s?A&!PK^]I4]aZ8;HP'S?<L/pOL\MahWA4f9eoOMVLi%:Po1@pY6Y(24B1KSU\K#V!*s
%Gm[hY*<l\CQY9G-(JWbL\X&I$8H";'eT>h+o12OBNt"dsSMFi5AK6OU\eI2M^,f*[R@?Bop@-BsS%#22Y[eg6oj#Cd;r9TYdjD9<
%PhH,HYn.$^8#a2?>ZJAh[Z41,DY'aP,Gb=S:r=n1F]pLd!VoBH!LH4<?9.q8-rA-NY`^&tl%AnZcnu4qSt!A=o<tLdJ@;?L8#L^e
%\M<8H:Lt<`$jXHtLGK9-M)5PC=-f&Z.-<PQUc>.D\^=Vjcco;G!t(hlK*.'CjGLCG=US&:^8U[MO;/%&#\]*e/WCY?SQX%cF&p5q
%HuAPAeFQ9N*akjRPqE[>@kNOP0a_e(b8QipU8&LTW;4GqKc*a%NV;Kc5SpR%]\FnWWK3j?N>fc^-D!K;Z,+OqC7n^A(k'OE5Rs[O
%%%e>,'S]T#X]9CZoqpNn9RK8&e]k=<,C&JRYqJ%?0_j$t]?Pc36>pVLh-#g8Go\]NF!s@rDY07I&O:R7k@;s9_lITIFf.2<Yila;
%fNOhs]+r4_MrVVL2nGq^k/>oSn#Fd)@^eJ3r.*F"(`pVN-c_)a@ECIdgmuAPUX)s2TgEk-/:G%KaQq)$75[U/WR4pZV`H]e!ufNp
%F662q$e38rGJXHB#^D8]g[eLDgdu`3Id&V/WELXi7AI?1c3aD!%uB%h`Ql("W?UD4X,=)XohP=Pr$_iuhtNM-TZMf:;mKZgMcQH%
%GE2qg:Y%b,n;4ondkjB/(,!cIeUha(]\b6AG.q\0FIX0+<1M^U.<Nlnhd)F5kDA#`SG`<(r-c.D,O-)/iP!WJjq6Z*-3C`Y@dk4h
%epc$1/[7skF'A#KHUM9mOm']fpB3t:H's76fZ]CG-MJs4=][>`G`.:r7uI@`/fMDPG2;H^+l)mI/fsVpZ8RR4@Lf&'rst8214_RH
%)n+/&b(j&.^<T]#3=)bFWm0^!IEUgMgL#p>Q1.GK=TSf,qHhAXAnCjY^]gWGZJsY9G#gh401A]pQma%4goZ6M-8%^X`IV7:*k16h
%F!h]N^,oC=SEd0m5XmnNS$$9bK2d?pGB4,jp)iSoJ,dQ=r9ebnrpZgms4SOlh%.:#k<JObCu:bjEndHen=<:E1B0"TWd+<pJ,AQH
%qAYrKhu+fAn%\k*s5CTIrklMJoPZqlc1h5cL[XELs7Xq!r9Z_enGR`]roNO9\70j^927A/2ep6]Q(WYZEfUA@%5ai*EuPSsKBPrH
%k4W6ojK#,[9KS=#Fq__Vdl>B+%+A9s/r5^/e8!7DSj-G65n^F=8pn_[1[+iV<]%r91nBcX7UWKZ)<mb:-]n4mG(<R<Li1"_19(Pr
%+OI74MUH2&h\jc0@jp%N2IfE+ilUNhgm^draKpMZ)>gg+j0.Df-K*APC8*U(`t(mI]]8M2HcK&;eUA#+#jS-X:COEPc$u:rI=-4g
%np^@Li[iNPYO8Pd?m;Cf,gkMrc2BI.%sk&=Q:'>6KA5F(5d2%T@JB3Ii(]qkcN[OHbYDUb7Fj.K\]u;G`iFfU=dZ6iGLlmLR6B<_
%]^lH0\<(KP$a#Et&d-DjGV+fsC`M`1$@g'f,MchPDdPr$Y/mDOPBPm(VLdKoEG\-@_o?_A9HBEXA(_UM("H'W!WlMN0P7<pqD+1N
%1ri#eb'W4"%)mLNk71tQZ=EY5X;QJ6:<V5)QB@ngp<c^0HQm`]T,,D=F2OX?kL`([%ds"),S!0&ZY8D8Oeu$^8(iV+FPD't4`s[X
%\ip*$"Qp2o[;Lair%W^UJ-^7AEA46-?Y!8rDUCAJSoFejfD#lZ"$PdH3s!qE8Vh[^FCME,d^I%LrZ"bH]J]&ZcMQX$W4XIp9(1]c
%a8hrk_t_?0lG60u-jf:UBq.h=A1Y4>*3(?*9S).:<"B[oBW1Te:bFksXH"qhH;I2Op3-D,\&rVA=;?9o9ApC'g/MbD6e_qWHt[$7
%#!T?#_"dJoc%YV9BR?G(%r<p.i!6\-If>I(2Lkb3D2&6Y[*`If+5:Oli$4`YJu7SM7b:l[LptLL-);-ELYu=cdqLV"0U<b,)`PVF
%.hRj'C/Yg^TS[Us`S8Le2TG.7]3>=W@Hbs2J4?I7VT2OBRg=!l`;km=JT5#CER1as*hl2cVTqHFY\.,7#P6J+l<>cZJdltT)&(j,
%!So:.&-R"1ZS[h/<g%%]?mBR:h!W*(i2`!P%')>nQQ)JERtjZrnQ_5n,mFhulo].?i?f1e/l!]>-n#45i-P5[-oU9iRZBDpEPP:_
%U]B8<3L#*I/'WLC_b\8tK2FA"i4D0A`Pr1t87G>:&^Q>;W_fq*Sl=;%ip[.dX%!PrN2_)d:-"a39`_<hlfi%8Vat>IomRIIfkn'-
%7?Ra7'+6^ZAWi?jjFXa!M+t.V*/3't.sj8*FTgf@p+Y0KMEL3+h\(u$(\?ut<CSf\p:+sK?"ULlp!-EPDO():`,,Sa]W-M9+=lZD
%#ki!l]:*oW4bI&--=^>B2iG:]3_Y=]NInLT(2A-dC>KHcVS*SajECV+S_qQ77_7Q]\hEn==nshu)%R?X%7ArpAh:g7kgP_.joM5M
%)>\*!?n<hbTq>De:oDUJT=;^l,OMsmC:=<3r'ZcB%!$+#>KH,NZ'AUFWS^dpFqnEnCPej([BOP;WLF<4Tb[%5B"&Pad.b#-m],k"
%[T`(q?'WIPrimb:Nb]L1HW/YseY!CnmA;a'rg5:eA;V[Y?7)"!O!l=m0g_njhiVj.opD^[o@Yf,Lrg5J$_DJM@qg^f?SDC<>L2Fa
%h61]S0_eQ!V_\&>QIW+Ifu6.?ipX_.>PsXdRZAV_J@m.nk&VJi*DVIi)78haIm15(W6=SYRb"Np6/@6H0%]lb2:+ufbRUcL])>l$
%d`n9g6mP-/(poFi)"%V=;h_JI!^CS+?pD]'VeX32#-<'pV[;Vrj[WY2Mt^q,TlT]1=[Hi%m7PYFcdfGt.IZk][A\3g\e"F2Z;_0!
%9g<G%N+cI#Zf^q\%s5t;D;]L+j-r3A`h,=@qI;L$>p7\(okE+P1sbr7CLCk>^=Ga.pAGb.LN.DOhf!KdNT_j,\(#(TY$j`6`"leQ
%jc7NE#s`paPHqQ,"<>uHoXX?)^]NcNZS$[>gX2-BTOMG).&?gYF)l>SIQa8q0UZeeADtM,Q'$87>'%SAp(^-]()MMB@]&ih4ETd)
%<=9m;mAR$YS_rqg+MAr!HFH`'GC5?KTk&#WXBA>G3Bj%8)ORD]j=<PBREn]C:1=ic7S,D+FCb:*?W@;^/RMFiWNBf->E,@(G?a#\
%liG7NfKk:jd;:aj3`f38Ri%3tmO6m#?#13]jgZc/_FCTX_3oR2%,<nSqS`qtj'`A&,)Pm+?dIP@r_$,iie;)_R^%T!77rEI,?Hh/
%.=qicGa^D;1Q4_S)_Vm0n3aFQ(%c^rIFp>T9)XK7.U[`?oJ(7Ums"g7U,H00NM"h_BSR">(erHI\4>B/N6u?<H&p>>!H(p!^3"Ek
%;TJAQpD_kr)Q@HJir7EVl<N(U5%Da"r442d$HCl.:19Epb05\DqKKEN)QIG=76sAW'1o.#XM(W[D!b#d]$l*6-o:j=2_)G:J6]6e
%J0R"uYaf!=`^ci,l5?OOOAbQeo2+`;JrslZ:jcnBWMd6X>?3+\cZVGm*m)GCKu9NZPM'3>^1mDe%APsuV%[k1-.MjTneT\OF5Zk#
%KR?F\#4aP-T7G0S2ZW"T(!VH`5`GhboZ(j$78J12\J;S&N2)@S_e6A*'4B.:6,Ri1&Ra[/7%]AjTNl=>EP*]pLI+UK2SY!_m'B_I
%4NJrGN?(49=rl$_Ciq`?OqTnQA+QVVYu7FWiT@F:E*Y3]$(In6++6'-/SG^i(TT/q`s6ZY[J^\k`3$:A>6+=U\r_P#\_1Ijm,HZp
%f&S'8!U`3m]nU0!Kd#4#Y;\6l+JW)Rd-bu4a2@Dp6C/lAOAOQhifer6\k&a,*AU`@;PfMiR3dpqK>JR>.4W966u.ELMosNo]J@(>
%j-`pmSokJTPHS6#6^_qHV.05[e$KI26^[QaK7DA(9R^c:nB+aJmn?g-Ap4jTH<q\9La=E+RB*Z]IUeP.Hb9aO@0SY%J;@j!@B:6r
%/[-)U=.&m%eK[?Z:nkatUM,t%5n^<_Hnnr^AXa*qT;F0e)gLTA>9O"VWE,j;']^dLPE@i_p_SlrZQBc&7RmDrB]sKo1mpr+b*8mW
%V!mhIkN(-_l`b("O]mjtalRYm'pJa[A42F[M%1\VlcD>3&3fqVNE^qQ#U?*C)UG?r@H>aU^E9';kFhh_j6`mgc0cr"\'&"g5dr"Y
%f$p_A-QTN?<CIs7Rb7kooOdk[hfFn^d]WMTE3s4^0>a5UiXDPho74o#9W>AKFm1]s[a+Z'&(kOirC8Cqrr1&0iu]nT1k5MDFrD:o
%OJR[9Y&#sZ^Tc;Yr$1nR4LuW>f^SbKfkbaZJ%=*aT3p;hoX8+0DZ%D;m7.-T8$"X+E,!)W%j/%6(mOlQ%EIDW8$"ZXMk05p'CEsp
%3KD>hCcTepPr4>B^9m(i%ps5%Tn,k+cMm=p<h732c?:6-E,""Y+2675@n>hlXZQOUb.b2HI'JA1Sb<('O/hcnb-O<[Z(6[-J&p&J
%"!=f@d(kF<^"L3Alod2pjVAqer?7X@%=H7^UBD[Dqq/\S/3bu\+kt?*nB7puY+h!0J*/NR;[SX_O^,3&<"$9p(kY>L"[9dM-kM+Y
%9s'S6a+Fk9O&&f;XQQujqhf]!O/9d$Npb_@`sQjnCFc9B[a(o&c.UiM8)\C:H-T#Q?(+XiXrM-e=Abh\.k9QCN1<ds&e[;8*\biI
%J"0ckOHVJ)R?W*!\[ba/Elj1>A:2)R2i_4_"U^kV)XFQj&q*$-XiJ;b4I/qA(s0qD?-]5\ei#4O:>`7k',&`6'3BOA1<!_[T1=Vf
%=r^.HD)BKl:DiEFFpPi*-l*PaFr1-WU!&u9P?'9$eX_.+&8GFk1i/#QY2'4!VRDT%kH>mhrP=gE$8a>OYH8XJ>e]jZP5Td>/QkC8
%<DZ'nD%D:$ZC6Ud'\Uq``u]8T6#N*L`H+&fQJY2N3-FDFrSd(-Irh)m=p"f6gf_D/IDKRn681k*4JaeU,EpjNU/?UTFL0?KJ5cmA
%F2bG0!f^P:1glW`IJ*98AB!9:C3=sNV`D,i1fFmbl-aAm<=b,J72L5uD7,o.(t8@?rF=CP6bmSS`P8jjZ+a7T7>@g4YGOnXBj+e(
%[s@b;%tmA.osL&\i"mGXc6OgHc1Sab]S`394jU75mh*F,Ikgo\hm:^dDX9Z$SRm*A!6q3B0<Tu^M`02=Wo&B6C"4$bC;8'!CujE`
%A@-P&97Ls#(=-j#Y7V@o3t.RlB'Y,'nnT&[X>e>Z\$3WWP+'^6*r?^mi2gqUqaMLh@Hl\7>k;%SG)gKa:Z/s#o^FjfLs<\fA*5Ca
%N^-ENI;[aRGVpIQ0!%!5DT5,?LTq9=`g`C&7DY3Un(h_(*2d\(F",:RUMm#iV<_W(NRlTjesfNfH1,4&cJuWa<_h:SI62^m>4q>-
%e"C]D!b#$7$#Dg>7ukBTll7C+Lg"A<%G?^<I:WH"VfRcsB1^4./BpckWhPuQelo38;kd48]$Q)$]cK%l;NmK$HI;$S?3Wr(=(U?6
%r8,e0/)?4GkV"8rnC;paT"f"X6W^B2qU_.F3*L[`^T,gb_Wmaf^IfB)hm6C*3V;cGX6Y*L?IVZ!C3j^^H`M!C24D77)F]/+M&eS#
%p1i:a7s<GJ=t/9S?>Yd1gt^C%-/b0^%OoIi^7+[fhqMN2ATcDcqVKTLMT*efs5"Y*'IO&[3]!IdS%cVG?B$jE=03P?f<h)h5PB"I
%Ya>q!ZgF!dA,k,\TcO"(Y18e`5VGpN22_I7`N!F9hS`&&5rZSX5Y&&Vg25i=nEd$<`8KChicN`79f/2^B=f6mA:D@4LJo$5@_1'1
%\t`dZSL;D=rCGQR<q<7RT*9sY(!7>P5$dHX-F1B,ClL!5NGYoS]Jij8pm\P6,5K0:1_?GEgu`[SI`Juhs0PL<b_s5r<u8Hr#]<@<
%B:cQS7f(,U)S0B:;n1UuBS(1IdG7fl2`ibj<:T\n4nu5p;*mTR"IX;p[;:(c"QuZ7oY7])OJo]BpZQ&tm'[9T>(*j7acEaC,&`Zk
%.-I,=^g&O6B57JJ8`U'LFG13iJWW4%I6'=^>_,\O,qTF&?E"Dk1VtQ,R4]Vs<$jfWd"\Ht!E5+KQkbW0qFaV$h?7-$-gn.*-(J*G
%AG[B;4(1b+1-Ha3WC.anVqqk:bF*1EeE/&%PHF\*dHK&u/me2%la!>Em#CjZ=]QtlW/5X#qeZ%uH40^a*l;,C2u-^H:Wk%"T3;eK
%!(-4p9N'_'#ZX>$Q"fq$f:',8[G_F&2*-e=&OaiCX#KRO@[Qo[LPA"/SLfqYV%d^-]9P4UU[b2g24^5=%14Mo'>Sh541bA@e_-H3
%ICe'FNZ==-bG'f<0ftOu8UIa+n*QqSUCs^6rQ;2<8E*eV*TH:TY$-7Vguh\$'KHk%Ft_F)XCsN&QE2tE^(-T+/ER^=JC:@+]$O7m
%jpZUkjNWD9b6*FTquD.k>R%8UntCijknA=JAPQ[tm6F9*jXIlpdlJ`:,TnIl%K3n>T.Y=aGnuZu;mk%e2iSlI+JG[feVY)lpZ[bJ
%>VZ_jOPPOheQ8k:=75[CM$cTUQSIp'DZu!Y`+q:-]&R7BE"Dj0X6pAhA$B^[[nV=*TiXrZ:WJARY#_R(*/6o"TkE;TCVu:53V9G2
%?7u+hH>`E/El6YJ#m\j^E0q9nK63Y31]n:]Vqe6,'44:3l-HDa,8e1,M+]*<a@3.:H-$3-RMWq^2%-]DEFU!S>2e<]3WVf!X$Q1F
%1oT*nr9\/Y20r2$L)06uLb\ffRT6%6*$N=F7hC"diI*#[C`+dai2-pWK=)X)0*,Rdg3gK]g$>/)A(m:!F(:JQS6SC8JTE?j#"PMS
%1HobZ=<0+O4bi#][JF.=h_,iM;T9i9!GZgW0P(Q+SVG]r2`Jj1-$G+Ogn7eQRUaDO!"Id)>Ol(#2nMqa+asC[ZdQ(63Me;q32N#3
%F9)K-RI0K"-;hfl\30bH0E<k?VVDPHl.kRQj_f5`6a15g<-*1"MoV+@AWPVk+P7%ESfndQA^!S^N*!,F=74t["m!31,lN5l*9p.A
%&%WD56<E]')klB\2(TMFN?bW>BeQP"/_;&k+W\o8X&cR]9oa*QHPY=Ajqu[M!,7`83p`]($lUV'@5!DCB:fVqc72(^J4%\q4lR9<
%K!nZ_Pe:H4!?_d.*fH4KgoK6o*-Eu6Y?s"lLiCMX?B@es7DWCI65(2`C[p<nJN19T-kNS-)blXRVTABuP?P55^?[Fn5ZRUX@WQ$$
%A)[aI5W[)mg<N\AN_#?t2WlEL<:HX(oeB;/($-S)0L'!"c*ni+ht\uC3,XL<X:W&>'(KqYX$8K,?gGaI/9XA,F$=8V2e@.a_)a'g
%>2Y=BL@;OLQo,b:cpa/a@k5:qcp5jT;T9W^CoG+a#Lg_^^%c?4'DA](N5VbDrF:ZPB\qKI+:N/_Qj$h?E=(FSRWq.9>*;ahE90N`
%lYGV<.XQG&]$8\(JA\62_"En>*;a@$4@k%-JNU?N53AVmErIq/IH;)@>@tg*e%F<"0PR"0>[TFO6g3=$J#b0;[_1V3MP>&>lInIB
%/SP?3etd/sDMenV<L`;i=nd;=4I<URHnt^9pG:f8A,kikn.c*sAL=B/'4,X.P+Ld08cMoc@:45-g3($hN?Amq3Nh$![M4haQ5hOo
%I(b29Apt+JI*[eT\:MG(.<Gs<&#.0V=Yfum[;^.NILqb*8cVWPKC9abh+MNTm@%QL#%Q^A1'f:(Jl,=HZYV'pY6Ie'1]X%Y'^Md@
%=3jtD]#7G2*3.uMPtHfr;[1nk.P;/pGgKJul6Zae^cKu3F.5@4`V3XmjnE6"\Oq;RCkSa:(mWX;9?(G:cXfcL#@aV<G&$Y&1ic5R
%QD7nU$rt)-_e>A0,D(d9%aJCK9hj7_k6ek8dml%&H3COhddP.[E_MW4Bb9p--#E[K-YE5q/7=HB=G!(^rQC.)G#KT_@p`8;=W"1m
%`O/&Aa1c*9%eE*^^:\B+NSIFgan5Uk%B*/.")C$)6L3'tTdicu++s0QQq1X:\^#'kAO[0*T;C940*Zu90iq.['eq%fs%N;ZN<[t%
%7W.>OGT,mJUHa*t#T1$u^Jg]^bGs>_S1RjH%f)\qHNZi9G-ia103Ecl,$rM[>GY!;(^2QrIB(q,I4A=7#<W2]b?m7(eVg-VK(.i?
%%b,GJ$CfTRXb(5(Y$/Ln.!*#E00M"U`U_cgXB:\J@]L[Y$%]Of[_5Y@3F!)k<f$s0PQogq/fMDLFmC:.N>;H<&&Mk8^9Y`be"of-
%/*d22As3sgIhbJ^fI^4$UF7-&l,-M2IqnZ0A++qI81WlcE3Y\c%tHBHiD])8%2js;<0l#86OV.qL+aJD\mlh;Q`'p*CQ1L@QaH0b
%nf%j*'t!C5QeD=P";802CD/AP<NAn:qri/C5WpQ3m#bYWF[%IT@Ul$Xh1K'VNICA?O+UeLIr=nZO1eP$2WInESR=Gj;F7iD6HsW9
%Qoc><$Y#0J5>II'(TlQZ7@j1O7gN[\eVCT/F8<f#or&Tm)NJ\c`p+qP1!`I,Pe42r,W"1"I_'4bQI+*"b?p^8_JGUDnM41JW^T;4
%Q,Q%P\e^\L"i/(diNk5_]@`*s$eq3)7.a7,;EM@6Wttm+V2)R.<'5kFlnk443":)FT`[]cL=g*k0O-j5=tunF:t=196$-l7L=jR,
%O'h2Hk4`]\_8&MLRBN9H3YQb5b&DLLe_k'Bdde,`gEAI$TO5*QWtu%&5(KOqB3,7OOJN(-[KlVR#YfaKAs$lfX(Wt#Q_D@#L8fkP
%h@`H\FOfXcYqnp2mp7eOK<H5'5YgDrpTrVPnDUe*M_\c<A<?XBY@C3?T&:'^eTPj'AhU%#p].u5CuIZX:#NXcQ(P`R%X37@nk,$E
%,'_mBS`E7U@G$S+X]t:j\@8Ts'"bRWcDe.H'0Ma)pf>pZ4()VL,Ir]%L!CsE=X3BuF1^Kc86OeY`Vk#.kcITrYs6+$PP2E3<8[W5
%"3PR%3D^W4@U!%hpSMHNml>^r4_YJ1>.l*Q<2cqS9t,4UA_LBbX*46IjgNUWZY3Xs$c<DZiGC5mLS/":R35S5hWi(m$9UX<P1%L3
%2mUgI>6k:qUg5X.1Xq1/hiN'`IQR;&-s`6n5+6Pf\"kW\94+-t-.HJ&?-s[u=N64G*5M#WeB49=M<VhLkTrAB8oc*95Ih`YD;OO[
%\.p)gp2+-hqCk]5m4NLdF><PHR1q,'(R([JOA57;1!pNW;Gh(5[!GC3dE?cFfmhh)ng;"VY,2f^TOa`tdn@kH=H!Qg$;P<VfoGK7
%dmhkt,\NT1[s;ISl;SYqVeXRB$I$A;cathk_9rH75j'5?=fDP"MG\5XlL#Y!^(ea_^2!;+e9NS=dg:JGYMZ>nWKtchc<gamZ/mqF
%@]3qZ*bp$QUQuRqM$+<Bn\:XK]JUsUmN6FS&R9pC]X'goBY.U"S^E@qD5O6;2CtNp=,Va!&HI$AeE4<h)cF.j_VME4^\U?9_Nj9;
%$r5d+BF,jX@G8!/MDg+0)A!iZFTl!ne[sFN>d\ln:o7NEs+O.L:K8b&6%\qLRieiS!-SM2?q+1Z*5`5.mE#R-M7uu#HjA4-S/T'e
%FR/Uno_#C,_QZ\I)2,H.)o<?\BEe*d/7V8,5E^\p]4IIEU'r/ILhlJ/k,f4EI;Y.%fHG,'_"F:SR4#c]d<U^.AI7/r@'4aj,!Fb6
%f+PpHQ!&QRoTmuIkW$>EH/-u0M0&=.il_I`R!8PSlKhn7cC;0ee_'6TpF^Iof?14BC@gSDCul8[[2PID_>0N9.bftfoErlO<7&;M
%=[+[F>TRWM@ddpZ<NO`_B_7&+)`"1;1#&r[0CgB"L2hfTFtEA,?pMrb%!uD._B;K?_&s!,$&^j3bC%k*c'b*UqN70KrMN[l@M8Qr
%9oj1"?n,Rc(:/=S9aeqG7DIq,#=F@<#^OL)4gfQV,$VUMU\_#eAG<r#golq==i'\2-4mJU/)?VXJq9@<QBbn&^o,]b,+bN%ijmU/
%K/*t,#Q.<;i9*SiPcaff=?O]?_kJtcKHV:.8`!QK?KNUF9s2u[='(PETA.")FK9[LibeOl1C9XC;6tC$h_ZV/Cn59pMVOAD6!LTb
%rGbHe&^4oRR9gZPcahG-@ko\HrK2s'G/$=o&\0)2[@tkgd6sFRDCEmLFl[`lVoH-_0c%]aA,G'D/YT*8'RqhNag?(g<^mh+-u!PK
%#*D95C'qZ^_@qIch=heXGkSX*ZS9[ahAh`]Zj3+_Rq3njH,,CaGRe0RqD1A>ZM$)uCVFOPOH3ShKV=a\.TlbR,STS#l4(#]U6uD_
%(Gh>q9@H_!^H;S=^SE=(>,)_l)CEBB[:lsAC!u3KQ"8!/@_Z[Maa8'ok0*)O.d0Xl)argUE[R-8+MM>S(gC-Zc:h2+H:mP&S#>`5
%gu^Q'-]qi+2%NFT^l'dI.jW"A@OO:'`HF^.l:)1L#PL.KddlY&d3nBST\Au)O30gj(c]^DD)D$%7+_eb>F$4B>7>'E$/IprkQt*J
%hF5_lIT(S+pk@F"\LmJHMiTi@Z_tdm/#f("B?8-d=tj%mp/i1=T<9)\nl4%.k+JWWe17:4Fd7!8HA*#5eT=Wu9>)O,/56Q>2Q>;L
%X5DE+K"5(9$'L,bRK/7HN/OVCPBnh"Y)OjkhUO+XN&#ZFGP-9"oZ?B@X9q<kaY3;oX%Xj9n4Gi/A6#$[-t$0Be[!6YS(Z<W\]o%b
%]opU/o+9qJ]cpa7-4bBuV-X1g-eg!2K6g8Baam<1Zn7%%2iU"D:F]pZ`X.OuQ?kt80K7]DMQ9g'k@F.fR`<mYVmET-Q0S%BeSf+s
%o&r#"'7ei^V_YfT*2II%p'c)3W<j-_5*af\g8u#3kL3G+c^r9fFs[Ou(GncM^7(q)-Nub,b@oIBgiiUnOSr"H.i*ehk!aOHl8LSc
%5XM8p_Fj3<;PGM"7LtFRFAfOs5#[_mYEQ6pH]76"S<R*75'\WQeRPgCH9WkMg1oBRLk*N?7Sc!M7"@Y4M5K&\,$1mq;cB+>eARm)
%gVuN.DSMofQ>ntJ\sf=M)SU&_V;&0rC1l6!7AEYMb2ej8q:W)MAQ`4H$(-CD&1]62ZH:V[;d%q*h#O%430iZ-^T"2;^cC.mgm,[T
%(I5h)*Y;pJ&&mS3XGb9-qQ;q>qW+VDbl]QBXW;U3Gu?Yf]6aNXRjtXliuVl,(Y?&Fc`MZhWI1A_pdnE`e"t28K7-t)*1\%1H>9?g
%9aa9:3-l[>T7p+;@X&!/N/gi>>'%A\f;fD2-r*c\Pp`tq?Ch"EFib>JXYLj)fZ0_+_Cf!3''_$_F/mO'F<_A_Yd?\KTY>)3%@!*(
%?9)B.'rdL,-k\ungIDA/^M*32IV-FYV9WN(X3jH?l;cY]6^!!ZVp,g?a4R(Go&c1H"Nj,8p/S/o>3??9cK3[RLO6d3R[ndO\AW8t
%o[u"RS>>kt+p-'(1K<;NOut8%M[+u<=SPp(=BIMGFB>dmT<]?*9%\D8SSh=.d4QscZd?'VNFPCg.6B%nhq:.'S>UoX1tAgsCJhWn
%?&>No,7(jk?\c;<[/FefKo`XJ/H_Hp@Zcb3&3V^\%7UuPJ=COg:Qr]ebW6E*51+;lH<.Peqq+)<NUS5Ppn-GZ$%Ra0s7uJ?1d;B;
%i3tpl&qpob]__[lD#U&o<rCqEM4L.9@oJ9i4uBf`i'YtO#!OfYq#-OTnZT\,-iD;?1"H&p=amP_T+76>JIo:jM(6Po0e6D7-oe),
%Y<`Ar7NRm)f;<!D@4G4u9KY1Ep7L*P<S[ArR.0C;66;:i%/6+)pF<>53TVN@i[%%$"fMqXs33[eS)KT^Ad14Qg>6eNZ%=S0*eA\k
%(LMK/=282P-pYo`N.Mje*DCNePH8gH2A8\P&pA<f93=%%-!&.q-0*M;ZXrRqGGpte1>M*t&E@&L'9[nETVGPu>K#s_ZJVRdf1KFp
%KjhLgmok.JfUF):XS*_f(D@aQ]_"C=+GdZ7(e[jOP4>Xi+)H!Cn$T5uXZftU-nJF/+XUN)B>s"9qC':F#bQgSQ#4Iq&#JY!do_8e
%(QCUYC2-K&C8n]bCB)8UWil.6]L=M2H^1ad>4L./PB`k>[OOYjXZh*9PH0E\%`B0-b!qCq%n>e!L``a.msV`eYcCm&[VD.dF/.&&
%laA^C0h&[+<GDNH,<@fh1T`u;(_t6/RT4W("KO:A>rDIpWKWmRoZA*Q,?urmBgjiqnO/C;5X-sd`E_N\%0JjM#3J^Q)L]'@<=l8H
%KktFc3dYuZTig+.8le5!APKk,"'Lk/Tc.=T<NFF]4*]F`haBEr@SnAJDeX)mNK(`t[)F#rKF&Qo,g-aEj]/'OQF]0"*_)52G9-i1
%*$-=h<6eG-ls-H0Xlkep$B$VVJL?I0luT5R+)E`BO^A81^)&S/XR^_l[Nfp)G"l"c%#h6uXjInB&_uKE7N:`=XZh*=X0:-pA1Cg;
%#\g4sEuG]H:eT#<Au`BrakA\LV5A3o;tjS*qJ<F-]T`h#eH\1:N/OF_)O]ca0K4NHQaYkXqooXo\:MioPe:`&q*M"!;kiiq85!]p
%U^L1^V?itU2Egoka&l5PQ+]Zl6Mm[]<hCr:k-VRjRNG75#@H03/t#tt@_7?A`*3%>n"IF0ghg,p5#pr6gORI@L;=k))c>(q1PVeu
%16\L72t`>p#<TMo3nYWPMQ93b#Tdb"iIU'#A45`g#(W@R%ZnOMG`6o'DaS\>>p'/>f&3T?&:hbmQi</Zf0-i^oIC3<2M[.UV(Sa,
%e7Db8]L]+mG+%(CL]g=,UCf%hBrj<V\,'pG<E77!A"_J%jT(\sa`04)"@8V30\2W-ch/8W5t1631*DdiD*Ct^;r)+_N[#0>oha7c
%8H:q(@i"M&/oOB!=[K&ZJ+Z259bI^n<EjlhogUT4$$A@,'E`kP!Jq?q\W1h%6m\1<Rt2'ecmUZ6\6m9;GEd,-8/FG5IIjVhk=]Yl
%2e+Dg5+O$QU6+Ft8SB?o,NI=_9G8-D_Tl`?b.5J=M[YM=*&;"/h1cEHdPhpLGN627n.270ENSci`)A74@JZtNV[EA4cM-ne^\[rU
%k5;j^A`40oHF*D7Sc5]tIK-r)MU'g(T,.Fq+g2Y"\D+4[ln2T>[Q%',HFG=#Sc5ahbC8R5U@@o'\L@EiI]fT,J*$!jq"K*H./ppZ
%Y,@2-jn#5AGC$r=RGI'#HEQm)iVT?;pNjSjU#"o3HMZQ,pqWhame)1bi8<W$HhuB%q8+QYS_c%^8FH))4^ImlT,<9sf.4k-n+;N$
%?2,r-(^7M&43"P?f0AtNnZR=N'`Uo]);i-Z:\JVh07@CIe@j14AmN*r?hP3=s6MNtZfjTVR>q2oI^>r5rfur2ins&bF%bsSs4Pl?
%^[RpoqKonhf%%D1BO=(#ZS0S!^X&B]dbj4`Ha`^94uGrSY?0!GHC&"+\`3X79u5Mp7^;CSYF29!bJX&F?$OSK@P_uoZ;I3?rG6lW
%:/BWr&H:a-1[4B"\!cm_H/+uDre8s`2X$]\2d?0'H/>,C4#=G(q]L@)#A:+74tdmOJp[H85MrBZHn?'4aqn^enLeaMSR_Eij1^-;
%B:k]d9m:jDbQPMt0DB;1YC(Dg61=Ejfc%KG5PJFAhsZ6UY-bT4Z'CRbs$5$/.@pJ6.J.]cd"Ebmf`<%:_o<p@Ol]6UlIa(SKG_t,
%q*MHg4Nn3App=#/U-`d-@n8\<s#"$O4;kXoH^rbOCAJ?-/32?+(n)H%-sB=S*I4>>@[24TJ?fImdrU"$9-/AJFH:6-1oBpFCj>C\
%fo2W9Jee96[o\ur+2%]BIXnH4BN%Z5?:pV`%g"T.VUrdQ+6uY:r^<n9KQT]1(L$LM0Ol&kG<S#FiUa<eIE:kB[P?]5lVgLen9u^V
%mO3,IW_?sFPd'8EY!%piYaO)<c/hO6@/nF`KD;UgM_>"m"5UW;%3&$(BJOlFrthJE[).'7,f(u[`Km0)=CLU>HsCbdTC_,&Ih74^
%C5EBSK*W%_9Tj+P*!kHRcg`P6b'9*6o8O%*1mlbJVr42,RPCpti3CbiOo0qtWg'5Va2R*b1%W??aiP`BPZbAU/L-W80'+O7!7?9+
%]nWj,N2Kp+T1o;dUPLujd5RR2)]c8LYo2S*9'#@2XE$);8C1i3R3SVV%[\/;7M<o0:HErPXkAr?5!m1`4W;(J)U[hXMD%"SqJ7su
%mu8qInnC(k^!7oP>Vh&PfmE@#O+U"gFHL3$6[+2_JiqXg8un_CDBo^?p<"6M)Ac6dpLF[r(0pulBmSBC4g_cGHngX<:0k;0]:9@4
%d_")QG4&5-Q.(IjTooNFV^+6\4qDJ1/h4$]&hr*rdh:>pD,/U\IHbVJ-9t1J'u>*-Qt`("Y\+B>B`<l#auEFio9W0-@@WhH'L>ar
%HpeNb/_akE=$o4EgRta7V!_KIKoa[;2V-&\CW^;I[KEKmTP7jjI63K47?Lnnj01FW5#-,OL_WJHFEgs<&eo,J%_0hc6Y:6h=cYeU
%$ig2;H>RUOV)=WHOnIj>4`$4tA#m`2qQ`C_<TD179tmYr=7;="@i3k*qD`Bf2J#VCGr:aK`p%FrY`mLPh?FH9PDWmD_03?YQ5k!A
%`:_''GTBalq(j\<oS6@Vcd,=rm8uS3nW@Wl^n/6R;:\hhEoWA_9ZnQF[g1>i*D%n*5LdgFq3,=_/j\G&7N9G8N4Wik["BXSe$/o<
%_G*(m)gV_Ob-ArX/XYnTkbed?,cRq3l.D=<gZ_u?l@(6A,VV;R>FpPS[0,N/RQR$bUpum)=EI82)8+q'-3_@3I8H&m&*LiP,:S1u
%c!U.W*4tl1I&#JW@*+^PlTWq!iS756mV3=2LALRsph&if[9sQgThD!u)s_KeWtN@HqhU6>[ed;22YDWr>aC]/LL=7s@)nE.fpDXD
%C5^G\<8'@dCpgTRUSsh!9U@U%aBW!cJ+[6]k`3tsFu)"Cnb^1Kor%[&lH:`c(Ff56'lZ?2dUfr._g%-:@c=0JH?4/42B.-LN&(!o
%NSA(Q["cjRFfNWU\TaG2HL?gfF0gKV\5;O)1HgGJJYWMe\<D$f'LR8<o/6"?;]\8ifk-W[5lB-i(E]N9QN4?hmjJI"25$p;s0cj[
%Z]HefZ*IXPkPR?:?g9.2RoSmNI@DgbR!(RK0,'*am:3m?V6F!qm6*Y=eX4"=EF4^&:ta1)<hnQ);DQX>c.^5%D/[(Vbq7"U\6Yd3
%cgN"'9i:_lXYH;)aptCMT/V]NL*A(6''[]H;[^"^7YDa473aAhJ"67@niY-70;:Z"6k<QbkMtR*egdF#7t]AEWj9GVFjZbf(k)%n
%3:8ij`K3.?f`RGmPho7Rd[F<_Tm7#";aGddfO:T4d]7fd+qGb0A7j2SJDP*H.,$`0Sji11Z)aN]dUO7[<3a)hCp#]g7rm--mqqfi
%+8g`5hH":V+f-IOjcoKYqKD'S5S'(he2QhJDCnJDJQ!a.lg5ZZ@\<5VY+u=AT-;nP-4NUp>a2O8WE/f[fNW<2BhQd%0toZGd=($4
%\Wj@Hd3n63\Df(iiS2L4NKQ<%dZJdpYX>_2;)CO5cKdH_4c`^GPg@nrS)PDRVn9bo)C0,&h$o3YkNW-Xp*XSs73oZFbf^Xr$D@-j
%]3kZ:)SWQrO=4*I.Bfn#jF*$8p!n&sDI$3IlE%E\F^'j6_:l-$qZ4>ALU]r0DG!:s=.9fSbf@\IcsX;D)2U.JQ";__8-7l%L2ZfH
%BO%"m.quSM%Y%A.bpaY'5tcQ7.@g:q*DP4A"jrmR)9,'r)6CceO=c'IQ8`D;=IRk_1@js[/%!no""<C7S(N)lK4VAc/cl^UQ3eq:
%Q6eP7H.9["'r!EV;mEU*`%!TZ>pGejF-\Pg",c';8)Dj6g-3#"M^T)q/bCn?coV3<+1CQE&u8j("aE4Ck2C]rBQ%,/%F?p?/;`s'
%(6A8@>QWVr`Dcg!$:+nWI;ufCk2RV:$(37?d_(,=8rI_);4i3r?*187i>m!N_qE$VN$,P@_/qQLjYrWOgoSC2ip^%s#Y&%DY?8VL
%D.OP$^sTGbL\oA#*9$<"b/)OEE(?h+qb3-&B#Bj"W+daJN'*Jn9['B5553.qg<;%b+=n=0L3Eihj?/@B;)c7tNgtF*/O0G-6dRK_
%M.!]K7]PV,bF+42W25?E:RmePPn04!`1Z5QoQ0X[_"_PTENt_=-_!!-3JFir8toZ2!Tu(\?T6Rpprfu:121G>NWMU6WC8"E%G/L@
%c+&7]:q[e#-o"-r2akpMUkEdlJHsA>W":6^NUAt`A4>_F89`Okc=n$Dcc:bQbNl5lh=IO&Z(.$ZAT?*Dn*J])r7K\[PCd6,d7$HY
%CSBEjAK3ahFB+n$"[lBN:bjZ7>)'@b^k1%9`Q?UhM):]BEAo3kELo>GEQ+U=BpqOj9c4bq,kjhf7q)[C[0"XkPi,Q&<aX['m+)1\
%d.G;]4Hse?-0TLY.L0%)-B8^=DCK1jk.,M,Wa[f4Y;UiQk(;7p<4MPQAiMkkGR]<SkJr3:9#Th%I;MFC%sinGUi98.*^XV21r-(X
%f$b9.ii=rKO'V/MM%dgb3'Xg0VJPtuX%=FKCo0I1/je?;16XHOm7V%^!(+`->`s))ZKC5IMe*r<2R@B<^X_"pV.gJZTHoXnDuh?>
%^5+4(ieoF7B@Anco55'$@A'r!i2,+m2ntpE[$YAaY\*]gck6_:Bm6!^@R_:>d6*uD3.X.Kn1<qfYV,&#bC/tl-k7QOI^[L52qI0m
%*bCrAc+)/L:<l#nY5/n:%IlJbMl-Yr\2NKbkM_jY[H/[sT_Q*5U-,$nRcU8Q?Ku,+k*aF4<+<rY$*6)/-+9>dq<d5IB/JZ>1I\<9
%pgBU9E<2Ei1$-JD%c_s)OS@7K+JM0fCb:K9E`c,"?H(dU9f*l"AL0gh?KGZ<jX"Ms2UQa3FZfnR3/'rY\A[q&2ZN!/osd^N^SnB*
%J2`%HQ`$7XAHr]C%qo15SDDkT^7s*>*aQ>XC#\\HhFE!Sf>Tf$jm/i\VShe/oc'5RZ"Lpg[bHgLXP\[SQCA)F1ip"61C4jfo<S#M
%&<-p]$@RB[[S.KBq'AgqmS>h8`SJNf)gP!5045p0bPM(&pM&><G#$LE?B0cK!ZQ!%"phbF/HXt.de*1qm%jNEpJ(FC/E@@tdUhY5
%kU'4A=0h_EPb<o:#'p-//>,:`K>-XmG3[N%7MC878%=k15i)sb5URC%X`.ZE<H-<TN0Jr-F;66jGcjR&EfbF)_:-J?Od+UXq1ZMV
%*?G9-9mEXL,s_l-qneVkP9+V7AqO#>31k&%.EQo(5.`VdM.@*?^qB5IGL<1T@lEK#]UPIK:0Qb1-XKB"D(!7TR5TRg,S`/\2I1d:
%F1Pp,o1!2?<e-Wk".T0YVC0BE#F%=[dB4#4KfTPp/kYN)08[gh.oM'S==Q.)5FVaIm(^Ehj+T/kO4+:g6_mLZIC_:N\?+5m3HV&N
%W9H:*bt"n=GhDS^_C4E3!4U8A0c^'m]!6ue%;SP;]5:^7K><V9)e/e>hALEB5rPmeb.kfe(jsPjOg%q9=^sAVFpdK!=*`2gB91_.
%rO3N"-onj(B'qYu#J0bP?"'L+%L-"eURduI!Y9tp+U%1WMRk`L=Utgq!Be=7=;:CKX:r,daX1;0RjM3MoVqCt`g/H"!nOF?+Y0X>
%d@k1`=l-nijVE(q25NFl7(tq?1Mm<H%^*L(b_]NJ9;`J?3(DuoJbt_!h,eZlX$Qt>8Tkl0$"EOI,a:KRL3,1i,[_,(OZE?FM22S"
%6q"V7d'teo?1mF7@g91!BYNfgq$SK+RK[Qi;p?hQQI>:M%a.YgIaZV/YE&jB,I9&8S[$uX#*>@mSB<jN78tfX*ntVC]p#IfA)ik<
%@Nfn&*1l78k<2PAOf^t;gnSKm=nNIdSC%^j1lXXWUAG\'mh(&UJ98mbEj\.gg#NYcLdW]qK5dIkFQc+sY4]4iO0l[4?J@5(@B%/-
%Fg%g25%EL@NR'\\h68tT&'YH/f;3*j)@@tT$AM1`8k,C72tE-PL\$C_nc2m<%63*UNF5W*QOK4GFtp-/bNn$L_703&mP"'>b1Y-s
%\HNQ%1.Q`L<of&5h(D_!^2KdYA[*1NGSt8Zr]GPGp&r5!&801+8)3daE?>*o3edt*G-Jk*=q3=t-^cWZKCPQ-I)]Qc2u#aOF>5&6
%XbkG80cq6sh7\nNJ/ERP]\Cg'b<.-ZcW]+^%R#0[`r:ZZqBap3@i]0\@qh13a,5p:=u]N6&dV&LguP%"fZ54@!9Ybm0"D&]EY6OA
%(#_-U]FbQJ1do!0$VLEXbr+BZI"]MN3?he*h1"e@P=KKW6"WP:5?;rk*Pli#MIjb5qpB!<KW<P3b0J,9+7s<2rLh%P=Jd(@Ek:#f
%4aN$BDPG/U-G=lRkbjge)0'co9A2)S)2:np:s;c&i1``f*jW:>:_$\C.;s6T%+@`<pg;,QSkpRXd>DkZX/Nq1(]bfscSXD#*sSX>
%b^ugKb^Z+6eS$-]_48qEZkCL]@T(nXf<FKR=_^rND_Q7VQdJKtSNHK1&R.h/m?"[^-gXmuJAFf[qduuD7GNp#)-'.F,pUHJ:$t9:
%_[1b$:'u%X+m(S.4dlHbSk._BZ,0QVKb!n((5+*9qJOEW70NRE9@)t%M[hms`:D&JWQ3X-peMfm0uc^,WKL<Qa`]Ks=F\@iDd0A4
%F@n0h<ga!cC@g@ZP6\9&&se#ahJ$h6&u2+%N,0eXA&QX*=WP[FkB.,aja]:GM_7/>d&MkV@h!bp(sIEYi*q5$>>oRT#bi&E8''01
%R]+9kBsn,:*Y/6=%kF2S5Y0JrMVK,.e\EQfGsbdWdCLurq7(bGU9<uS2*Q"D;]XO[Q_$?RD<\!><+fT*lkUqu9tKC#3NmR4BK-fc
%bf@:$<adVp][d3pkh/i-ZUYlN)paDQ=@+.c.,(08X8*=tff[dg+Ti[("=]bMJE+]*eYRN/khMqGO4g+)R/8U3Y`d)-kN%opRc8QX
%5IdnTHQ;Qk/\/s'UqtAc*uDn#b6m/!i`65cP&su>a9sMSnVm3h%U)YGMkL>SZ-m?E7>%C=#P#>tcQ9HuZFobE5/Zs]g%*@r;O3lB
%%nTbIXo5YZR3h8E-dsQK(,KoWo]f%q/3SMa=gc)e7.i48/3,id0MY)J5:a19UWME+lI(k$9`YQlc,h_C'Y>JO4%"UcR0)!"A+cM!
%c<M(fIpZ&Y?H;m-U5YjXDLE%$)"%Tg2_GhI0IfK+1RWH3k0]9jg%fGM&t;E+JMVCL@dkT`cPe_,7@.m$=pDsih'@KVJ%k+*+n#_q
%b#IU48/0Bt7"3LcdE8'*kYkd010!9WS$D</kL!45&Ql?[<d--7P3<mh3WAof^RJO)gOH0Zs8=&>n[m]Wpqr_QrTj:;=9%N/^]37W
%s64b-r.cBno[eTcqg\FtlOTV:pW#L-&:XBro1u!-s/-t<ja[7'5Q1*9?iK<)s)1$9O4FhjorGk-O8o3_s6BUcE)bLE~>
%AI9_PrivateDataEnd
