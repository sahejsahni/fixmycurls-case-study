%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_red_grapes.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_red_vinograd</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T01:06:55+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T01:06:56+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T01:06:56+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6xnNu4dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVWyyxQxtLK6xxoKu7kKoHiScKpJL&#xA;588mxS+k+s2vPp8MgYf8EtV/HJ+FLuY8Y701sdS07UIvVsbqK6iHV4XWQD6VJyBiRzZA2iMCuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KobUNTsNOgE15MsKMwRK1LO56KirVnY9gorh&#xA;ESeSCaSTU/Ov6PthdzaLqBtWdYo5OEAZ3kICKsLSib4if5Msjjvawgyroh9Mm81+YLCHU7fVbbTb&#xA;S4HKCCC3+sOBUgiSSUqOSkUYBBQ4ZCMTVWgWUS1t57slLw3tpq4G5gnhNrIfZZY2dK+FUwXA+Sd0&#xA;00TWIdVszOkbwTRO0N1bSijxTJTkjU27ggjqN8hKNFINo/IpYxrf5i+XdLna1Rnv71Dxe3tAH4t0&#xA;o7kqin2rX2y/Hp5z5MoQlM1EWhYfN/na5X1bTyVezQH7EgMxr/wFu4/HMkdnnvZ+FXOUB75Nj8xG&#xA;s5Vi8waLe6Qzbc3RnUHvUFY5PuQ5CehmOW6+BKrFSH9E2mmq+cdFsNE/S8cy3cMh4WqQsCZZd/gH&#xA;gRT4q9Mx4YZSlw9WuIJNDm8c1fzLfeYbsyahK0yK37qBFb6tGfBB0JH8zb5tsOGEeTsdNhxXv6j3&#xA;16fgmXljRb7ULpzaNJAtsvKS4iAAjB2q7u0UUa+JeRfp6ZkubnyRgKNe78X9gT+IWWnTxy6msV1B&#xA;Xh/iDREaGe1cnYPKkcdvcV6shL1/myE8cZCiHAyacZN4+mXcev6R+Nmd6bfXC3A06+ljnnaEXVjf&#xA;wjjDeWjGizID9lh0kT9k+xGafU6fwz5Ov8kzzGV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KsZ8qBNZZvM9x+9e4eWPS0bcQWqOUHEdA8vDk7deg6DLcnp9LCO+6/zZbamdQ0S/trWS/tdP&#xA;uJZbqzhKByWhZInUSMingzeOOMiiO9MuitobPpWiXF9rPp2BlnmvLiMsCkAmkJCFhsTSladWwS3N&#xA;BRsN1JPzD8mOV/3KRqr/AGXkWREPyZ1Vfxw+DLuXjCr5VmS+GoaxEvG11K49S1qKFoookhEhH+WY&#xA;yw/yaYMgqh3LHvSX8zfMlxY2sOk2Uhiub0M08yGjJApoQpHRpDtXwBzI0mHjlZ5BydPh8SVdOrEr&#xA;LzLBoNrHb+W4Et7oKPX1eRFe4ZiPiEHIMIU7VHxt1JHQbgCnZjSCW0vp6RHL495S668w69dy+rda&#xA;ldTyV5B5JpGNR0NScXIjhhHYRHyRlj5281WaGJNSlntm2e0uj9ZgYeBim5p+GLXPSY5b1v3jY/MJ&#xA;J5heHUOU9nbLYzMpMsMDN6LMaBiiNyKcgP5j7UG2QlHqObRm0p4SQfVXPrXd+1L7GJKLSjKo22dh&#xA;9DNRfuXGITpsY27viftO3yDJNA1eKwu0+txLcWfIM0ciGZUbYGVYGeOJ3C7D1Kr7ZNyc2IyG2x+X&#xA;wvn8mbea7mC/8u3Fwzm4WFUVZV9S99NyRxRrjlb2UJP8lvG2Lr9PExyAcvs+zeR98iEm0bW518lz&#xA;XBblceU7yG/tT+0bO7f0LuH/AFSWVvmcqzw4oEMO0MVT4h/EPtjv91vUkdXUOpqrAFSO4OaBwW8V&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirToroyMKqwIYexxVivk2w8yaHDFoN1ZxzabatKI&#xA;NVSZQTExLoGhpy5Vah3p/G7IYy36sIgjZkt9eQWVlcXs5IgtYnmlI3PCNSzU+gZUBZpmS84i/MnV&#xA;Naum06LRLeaOZOTWFwZ2doT+05ELRgGo9stmIwHET8dv1tYkTtSZ2ttoUIjXVPLFxbRxHlGik39q&#xA;h8UijaQr/wAihlQ1MZcpD7mXBXMLP0RZxTSaj5DvoYb2P47rRedLeYD9loSQ0L+BoPo65eJ2Kly7&#xA;2NdzCvM+vDW9bkvDE9vLHDFBNayijxPHyLofk7Nmy0cOGLt+zCCJFKowwB5NzNSa0ptXYfRmUHYw&#xA;BA3NrsWbRIAJJoB1OKCaQx1CH11j5BevIkgdAffYg5HjFuKdVHiEbasCjBuJBpUAglqCuw8B8sYo&#xA;0pB5fr/s9yLyTmKr3V1JBHbvM7wQ19KJmJRORqeKk0FfbFiIgG+qZ6PcpB5f8282osmkFAterNe2&#xA;yrt/ssE+RcDtL6B7z/uZPZNKR49Ms0ccXSCNWB7EIAc56XN1ARORS7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FVk8ENxBJBMgkhlUpJG24ZWFCD8xhBVgGm+QPNNlxWLULEelCLRLh4JZ5H&#xA;gViyo4kk4jc9FwzjCXO+d927AAhGDyb5nQ8hfae5FKcbSS3b3o8EqMMgcWP+l87+8J38kNd6Fr0a&#xA;r+kbNb2GP7MsTG7KDxQsILxD7q0h9sh4PDvA/o/XH7k33sO856NJFKmr2t2bu3vkNtI7t6jRzxj4&#xA;UkkIR2PGoBcchSh7Zn9n6kknHIVL73J0xIJAP1CvixmO8+N1WoYFjwOzVFHp9PxDNqJObHUbkDnv&#xA;t1/nV94VWvOKFuQoP2u1D8Sb+DLtXxw8TbLUULv8cx8xt71GB/rbsZefohqKv2Qe3xGu57UGAG2n&#xA;HLxTcr4fxz/UE80TTb+5v4rbSISbtq8BHRaKB8TM2wVQv2i21OuWUHMnHHCO4AizCfyxYNZfWNbt&#xA;7V7ajA69pNLR4mHhzWC2vad1jDMezYOEOsMY8X7u4y7v7LI/ztvJimu6HeaJeQwzypd2V4hm0vVI&#xA;ARDdRA0JAO6OvR0O6nAD0LmaXVGR4Z7TH4/Hf0S2SWOOnM0r0HUn5AbnJEuXKYjzV7GaSaVLQw1s&#xA;55YmvebRxF4InEjRgysgHIqOvhleQExoODrIyyRqIP4+17Dbeabu5XnbaNc3igcmWxms7yQD3ihn&#xA;aT8K5rDoZ+Tq5xMeYr7PvpFaT5q0PVJ2tbe44X0dRLYzq0M6kdaxyBWNPbMaeKUeYYptlauxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLJPNHlyK9exl1O2iu4zxeCSVEcN4UYjfJ8Equkc&#xA;QYRp3mDzveG41G01GB4frM6Q6fcQL6YjjkZVX1Y+L9B13zG1GshinwSiem4P6HFlnIKWWvmPzb5c&#xA;tf0ndTeuLu6lWTRbhiwBeRiv1eUcioA3ofhpvl2HURzZeCI2r6h+llinKUuEb2xe/wBQm1q9kv8A&#xA;UGE9zPSjgcEAXoI160UdG6++b3FhjEUHfabS4639RPX9X60ct7o16qp5i0x72RNl1WwlW2vqDp6q&#xA;urQzH/KorHuTlhi05tFkH0+oefMfHb7/AIJT5jsvKdraxSaHd6nLMeRlt7+GKJUQUC0aKSQMebA5&#xA;XIV3uFKE4fUCKHf+zvKFsIgvAdWQAGlGK/Nj8K/6q75OAdlpcdV3j4/byHuG7JvLt59W1DpGVmQx&#xA;sLgsYKVD1ljTeVV41Ef7TU2PQ2Obnjcfxfw7ve9LtipkluJjJNfQKouby5aFJ4R2E08wkttOXYhY&#xA;YleXtti6mXcOXcLo+4DefvNRSLXrCS60y80iRWMN6smo6JclbgINQt1Lv6Ul2fWlFzGGVm4gF+NB&#xA;gkLCZiwJR+qPu+F1sKP2W82s1QxLNXlJKoZnPXfensB4Yx73Z6cAxEuZkObIvJ9np97rAtr0fA8b&#xA;lZDukYWjTSsO/pwLI6j+YCu1RhXUylGFj8dw+JpnEeh6TeQLcQ2cVpc3jRy2yIPS9E3EbfU19ROL&#xA;Bbe0RrqdhuxK1xdccsomibA+2vq+cvTHu3SvWdUsZZ7fTPNBku7OaNbjRtfWg1aziZ2EEkjjiZAy&#xA;qJDG2/FhQ4JRBFFTpBOJMBRHMfw31ru97IPKGt38k1zoWrypPqlgqyRXkW8V3aSf3VzGe9f2vf3q&#xA;BpdTg4D5OByNFk2YyXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqg9U1jS9JtjdaldR2sFaB5GpU+C&#xA;jqx9hkoxJ5IJAY3ffmv5Nt7SSaC5e6mXjwtkikjd+TBfh9VY1NK165YMMiwOUMaM+q67r2oSXsuq&#xA;6dYERvZW3qtDGFCgSBvSJWvPcb9MwdVrRCI8Mxl3uNkyk8lEaN5bsry4nv8AUUuhdqonTUpY5WJU&#xA;URld6MKDbMSeqz5QKiQR1jbUZEq1g+n2cDW+karYRwNIzxxN++C8qVVaTqad8qyiczeSE7r3f71B&#xA;82MebpNTn+s3N3NDImnenbRPArKhe7UuWHJn3VFFd86DsjDCOMziCOLv/AdhowIxlLrVD47JVZLR&#xA;iD9vjuCPip25fy+y5uYu+0wo+dfH493lFGZNzEs1pCVFP20dfpBV/wDjQ5XkdX2jGx7wf0H9DrKR&#xA;GSJhQ9OO2wNK8UXu38zYxK6aYIB/HuA7+8prHJJFIskbFJEIZHUkMGBqCCOhGWOzItlOjebIIRCl&#xA;yBB9WqYJEjEogAA/3mt2Ij9dz9qaUk+G43XDy6Ym66/b7z3eQQes+eYX1G2vI7dLb6tOlyJ55GuL&#xA;yZ4zUGa4f4m/1UCr7YCQGPhwxxInLmK7h8B/aWJQ39hGhRXb0ldxGzK26czxJNKfZpkIzFMdPq8c&#xA;YAE1z6HvRkciSKHjYMp6EGoywFzozEhYNhNl8z64sLQ/WiUZZUqQpYCeNIZKNSvxRRKnsOnU4sPy&#xA;8LuvwN/vKW6nqs9xctcXkjXF3NQDuzcQFAA2ACqAB2AwE0iU44wAPgAnnlqPXDcW18uq2umm0hmW&#xA;EMJLuX0H+N1McCTFVUqXAdQoJJrlWTCJjd1+owmcuIij5frND5Wy9p9Xilf1/Nl3H6bPHIDo49NZ&#xA;Ej9RlJCc6qvxEEVA65V+SxtAwXyH+yj+pMdN1XzFKa2Vxp/meBRVorBmtr8KNy31a44Fz7KMpnoB&#xA;/CWuePh53H38v9MLH3JzpWtWGppIbZis0LcLm2lUxzRP/LJG26nbMDJjlA0WsiuaOytDsVdirsVd&#xA;irsVdirsVdiqHv8AUbDT7c3F9cR2sC7GWVgi18Kmm+EAnkpNPPNc/NGWbWI9O0G6tY7KUCuqyRyy&#xA;AOduPFhGg371IyyceCBkRZHRonlrkparoWvaxAsOqa9LcKjrKirbwRBXT7LLxFQRXxzVfytXKA+b&#xA;jyzE80ZIbz6ssFzZNeinGR1aIcqbV4sydc144buMuH5tTHNS1+4a5/RmmJcWl6HVJWuJY2SPlTiN&#xA;nlBO/wDMKZutB2Z4vqkYmHkDv9gc3SaM5Tf8I6p8vk6a4EYk1a+vZWQz1hlMayRu/wBXtVjRaDnd&#xA;T7pUfDH8RG9BvodnYI8oBzo4MUecfn8z/pR9uyS6p5a1LTI3uIpotTtowzuLpBOjRRusDTVkq4je&#xA;dmSMhqtQmmQy9nY5D03A/wBE0yOjxZNo3CX4Ne+ufck8ka3nkrzHPBbJaS2GoWFy1tHuiwyI8LMt&#xA;Aop6nDt3yeHFLHj4SeIjq4xhLCDE8/8ApEj9KTW08cS82Y8CCV8WFac292P2cyQadvhyRiLJ2+/z&#xA;PmTyTrTtBu76IXN7ewaPYN9mSckyMP8AJjRZJG/2KU8Ww7llLJM9/uHP4k7BOYvJvkaZIxNrupMZ&#xA;STDcLYStDVPtlf34ZuI60UUx4Q484TPON1/thv8AUEPc/lbdNayXnlTVINftol5S28BZblI61Ym3&#xA;kCyqD4rywcFcmkVA1vD+t9PuEhytjltcc6xuOE6bPGdj23Htvkol2mDNxbHaQ6fjotup5A628G88&#xA;m9T0Re7H+GCR6BjnykEQh9R+wd7cFjBEeZHqTH7Ur7sT/DERATi00Y785d5TbR9Hv9WvBa2cMkzh&#xA;S8npoXKoKVYgdBv1JA8Tkm3LljAWSiLryRcW+pJbRywxXlzVLRFntnMkwoVinjglmMfP7Klv2iO1&#xA;ciY9zgmQrjhsRz2NEfEC/vSN7lY4JJZFKNFUSRtsyupoVPvXDxbW5X5iIxmZ6filtpC6gzTbzybt&#xA;/kjso9hgiOpRp8ZHql9cvs8mYeTPMGmaQtx9ZWsskkczFlqrx2qPMlvtvSa5WLl2oMkw1WGU6r8X&#xA;tfwFsr0/WNIm08epMt4kcLPqO/7yRVRb2+5ftA3d1LFbBu6oaYuFPFIS5V3f7mP+ljcveUg88tbR&#xA;OC0wGt21wFuHiortclTLeOxHxKsUjpDCOnwNTFydJZ6egj7P4fnuT7wraJ5qm1ue3hv5Vi8yQDjp&#xA;OtP8PreFnfHb1I5Psq53U0OV5cQmKLRqtGIjih9PUd3mP0h6DpWox6jp8F7GpjEq/FE32kdSVdG9&#xA;0YFTmhnExNF16KyKuxV2KuxV2KuxV2KpdrnmHSdEthcajOIw54wxKOUsjfyxoPiY5KMSUSkBzYF5&#xA;kvtX81WZtryCHRtGZ1dGuaPeEqaqw3CRH8cx5a+GM1D1y8uX7XFyZr2CYRO0cEUMEqXLqoXnJIFZ&#xA;qDqeCkfcM0UhZJIr4ftcZD3NvcSktLptvK3ZklPM06bmNKfflkJgcpEfD9qpVe2zIjyy6TeKIwWM&#xA;lvekUCitaesn6sysc7NCcfjD/jpZBhlhza1WV2LSzEyyuxLMzOakkmpOdrigIxAD1uhxiOGNdd2R&#xA;WPm7XrJaQ3FTVCruOTAwwPbw0J/31HIeHgd8sbJ6aEuY/F2fn1WX3mfVby0a0kZFt39EMiIF+C2i&#xA;MMKf6qKzGn8xqd8Uw08Ym+u/27lQ8vapY6bq0i6nU6Hq9u+m6xxFSkMx+CZf8qKQK4+WQk4PaOGx&#xA;xD8d33kfFKLnQLzRtcutMvnSU2JUxTIeUcscihoZUP8AKY25L88jCO+/Rq7OiZE8XKH4+zf5q4ZT&#xA;0Ndq/QctdyCC9P8ALOqQX1gpPpTXUsa2z27n04/ShDGO2O/JbSJI/rFy/wC3svjVdTnxmMvLn+3+&#xA;sfpj3c1HzM0MMK61ZTSw6nCBcWt6nGGZ1ZlVbmalfTSUDhbWyAUT4ztXFlgsngI9PKufwHu/il37&#xA;Ma85ta+Y9F/xZaRR2+uWTrFrlvGOKS8/7u6VR2cijj+eh75GQ6sJ45YjQ3reP6Yn3cwwa0uHJknJ&#xA;BeQ0MvWiL8I4igqWNchE9WWDKd5dT18hsK8yUygcspr1G1OpHzI2r8ssBdjjkSE10G6s7bU4nvIU&#xA;mtm+FxIjShakHl6Yltw5FOjPx8cK5okx25/jyLNvNlzZroc8KSwxyoUaOCOexRlIYUpb6fbuFP8A&#xA;rz1GLr9NE8YO/wApffI/71hX5h2yz6ho+txACHzFAlzdqBQfW7dmhuNv8t05/TlchuGiiMgx9OP7&#xA;tx9hr4JRHcxSU4nZq8T4gEL+vJgu3hmjLl+OirhbXYodilp2ZULKOTAVVRtU4ljIkCwLZ75B89aP&#xA;a2d3aaxemG6a8kkWWVX4ESqjsTIF4AmRmJqc1WrwyM7A2dDqYcM5UPSPlyD0aCeC4iWaCRZYXFUk&#xA;QhlYeII2OYJDQvwK7FXYq7FXYq7FUh13yRoGtXK3l3HLHfoAsV5BK8ciAdONDx/DJiZArmGMoA80&#xA;luPJXmezVm0rWVvEUfBa6jECT7evFxbf3XMeekwT5x4fd+polpx0SCK802bUP0VrujpY6kADwuUi&#xA;aOTtWJz9vcdsws+lzYRxQkTHyv7XHlAxbufLOnivHRoSnWltO0TV+QEQ/HKoayf+qH4i/wBbG0BP&#xA;o9mgKmz1m0B+16E3qjcb/Zkl/Vl8dRI/xYpe8V+gJth0Us1qDbSK6GB/TZZFKMAW+BmVqEclOdZg&#xA;yiUAQ9Do9UfDHlsiY7tSvI9OPKv+xDf1y8SdhHOCL/HK17XMYqO+436bGn8RjbI5gEDdyeuDGf2i&#xA;qBem7N0P3GvyyEjbhZ58e3uHzP8AbfuBW7Q+ujMTGJVDljU+msXILv2ovH5YOVsABj4h/Dxb+7hv&#xA;9iKtpWFef2iaN/rUqx+S/ZycS5eGZ6/g9fgOSOinmi5GKRk9RSj8SRyU9VNOoPhknJIBVbzUb68k&#xA;eS6neZ5G5uWOxYDiDTpsuw8BtiiMBHkFkF7LbiWJGol3G0EyHo6Eh6H5MgYe4GKJiJoFj0HJILSR&#xA;6ojrIBJQ1PFzXh4sa0yiPIOkwSAjDf8Anff08zdBM7Zv2SAtPh4j7KnrwHiQOpy2LtsJ6fgeX60T&#xA;knJRtxrWrXFhFp811I1hAQYrXkRECAQG4DYtQ9Tvi1jFES4gN0R5zn4eSPJ6gFp47jUZgOp9LnH+&#xA;HJXyvIeTp9VIxzEjoYn5A39jE4WMNzHE20UvFrV+gaPkzdf9bbIg0abMU+HII/wmuH3bn9SOguKo&#xA;vLeqRtX3kJGWAufjzbC+6P2q6urDY1/zpkrbxIFcSB12xTahLeQR/tV2LEjoApo2+AyDTPURj+O7&#xA;m1ZK3oc3FHlJkYeHI1A+gYx5I00TwWect/mm+geYNT8vXX1jT2LW5NbnTyf3Uo70H7D+DD6a5j59&#xA;MJjzcbU6IEcUNpd3e9s0vU7TVNPt9Qs3521ygeMnY+4I7EHYjxzTSiQaLqQUVkVdirsVdirsVdir&#xA;sVedecPM9n5gs7nStF01NX9NuL6hOFFpEw+0Y3JVmYDunz3GSOWGEgzNeXVoyZRySnQNGu7bTUFx&#xA;eNqMwFDCs4AQA0/dSAB/+GAzUarURlPaPAPdz945fY4hK+cTxHaDWLfp8UUkdyPD9p52+8YI0euI&#xA;+8GP6Ahj+s2kFzMLuS7uxdovALe2EirIg/3XI0Ea7HxpXNno9RLFsIx4fKY/SW/DmljNhKbaHy7c&#xA;NVdSk0aRWI9O8hkubaqVHwTQK037R2MOw7nN/GQIvk50dQQOIWB8xt3fPvTJPL/lqJVN75ttpRQE&#xA;QaXaXlzMwG23rx20amh4/E3TJfFI1E5bAH5f29NuXLmoXJsZHjSxtWtbG3qYVmYSXErtsZp3FF5U&#xA;2VF2UeJqTOMXZ6TTSB4p/AfpPmgZ7F7i6ESskYu6Rh5GCoso/u+THZQx+Gp2HcgYJhjrYVZ/hl9h&#xA;HI/oUOM8U8lrcxvBdQsIriGQFXV5Jf3gIO/QYAWrDl4tuvX/ADpb/Yio7gk/Mnr7ycFyYLnRy/j/&#xA;ADqCqJ0P30+9uOG24ZB+PfSgbkyREx9ZAEjP+Wa1p4hcHFbjnMZR267D3/sRul6St/DJoUJ46gXF&#xA;5obN0kuVULNbE/zTIimP/KXj+1kDGtnW6jD4Mhw/TsR7x+PxSUwTcWMMgaGWGqSxvUMnEVlY+5bb&#xA;GMnIwZwduRH9sj8UxSQMtejDqvgaVI/HLQXZxnYXRH1FUgFeVNnotK+NemIKxlYvkr6tqKalfwLA&#xA;eWm6TbixsmH2XIYvPKPaSZ3YexyA3Nuv0seOZydOn49wAULWXT4Yjp+s28l1ojMXiktyBdWbtuXh&#xA;LbMh/aRtj7HfIyjXuaNVpDDl9H3fs+7zTK3/AC41q/iM/lLULPzNa0XjFFKtveoEJYepbTFWBB/l&#xA;LexwAHpu4UdTOA33G32Gxv8ArQsvkb8wklMLeV9UD8nAKWsrqOZ5A81HH4X9+mGz3N/5+J+3qOu/&#xA;2H7EYfy78wQRG48xzWnlixNS0mozKZyr0ZhFaxF53cH4lFBib67NeTXXyHf9v7dxulupR6RNMtvp&#xA;UMg0yFi7Xl0ALq8k/wB+SKNo4x+xGPmanoRG3M0unnP1T2HOu/3tZY7hTkRJkaMk02DUNCOh64kW&#xA;1ziJgxL0v8o7uRrDUrE1MdvOssXgBOu4H+zQn6c1GujU773SauHDlNdd2fZhOO7FXYq7FXYq7FXY&#xA;q8n/ADCNnpPmux/RVdOub08r+4gZZVcf5dmvJi3fnQV98nkxieI8Q4q5dPtcbOAra5a2JpJPBaOS&#xA;oJe5tn6+JmUfD92aPTTlyBl8JD7nFCQ8tMJ/cQ2jHehtNWeI0r/I3CmZ1T6mX+djB+3dkiIfrPIB&#xA;V1Ub0Ho39vcdfZ3P0ZXLh/2v4wkP0IYbrEE1rqdwsyyKyXHrE3QUvxnFeb8PhJBG9M6HRZBLFEit&#xA;u7k7HTz9A/oy+/8AVSKtjRq7/F8Rr9ojszk9K9hmwi7zCd/xfvP6B+ALyTmKN1KiJwKeo0nwpF/N&#xA;/Z44JFozzAFVZPTvTO0mlm01E1zTDrNjahYor6Fmt7y1H7KR3XGRXVf2UmVqdqZDgLqcnZ841wkc&#xA;Xd+pD3Gk+VnUtZazf23T/Rr6w9Rh8XI/vbaSRW33rxHyyNHzawM42Il8r6396V3FgiScY5mv1Nd+&#xA;LwRgVr8SuqN1PTfDTlQxylzEj7/SP1uf1bWVJpSrowCGnwiME/s/5PjkuW7fLixSEpURy7uH3eSM&#xA;ZUmjFa0NGUioYHqCO4IyRFuXOEckaPIp5c6zomtxqvm7Tprm+QBV1/TWSO9cAUH1mKSkU5p+3yVv&#xA;GuQMe91GXs+cfp9UftH4+PuSe7svK8FGs9V1SdSGrHJYRo4rRqMxmZdz1IOD5ph4g5if4578KSzX&#xA;MtwRCrMls4L82oZHUtQCg2BJ7DAZE7LPPPJUeUSL8zv+nu/QmVoiJHwUBeOxUb09ie5y2LtMEREU&#xA;Oivhb0BqNtAkf1hV4SKykyJ8LULAHpTK5xHN1+swQEeKqNjce9EPealX6udTvjCCFMf1iTjTiX6V&#xA;9seFqOkgJVcuff5EoeNtLhk5CjTncn4pHqd/8o4RwhtgdPjO31fM/pRbziJA80csKHYNJFIi/eVA&#xA;w8YbhrMffXwK1rhDHyiYOTSlCCKnoK+9KYbbDmBFxN/j9PJBTXbRIHjNXI4Rg/tqTQf7JCd8gZU4&#xA;OTOYC48+Q8+74xZr+XHmez0Se9t54JZjcGGNZIzEoBiRieTSvGP28xNTp5TO3RozYJykeEWIgD7H&#xA;qdhr+mXs31eORorwLzNpcI0M3H+YJIFLL/lLUZr8mGUOYcQhMMqQ7FXYq7FXYqh9RvrfT7C4vrlu&#xA;MFtG0sp78UFTT3wgWaUmnlejW6Rz3fmCeH6u+r1kW2gjaaKJG3HMKGcserdBmv1+fxJeHH+Dzon9&#xA;Dr5ysrJdStg59GaJSOv1W+ELD5284CLlYwmtwfjC/wDZDdjSFudRhjK/pO5kQSLVPrMdhcswNOPE&#xA;W5LtXseNMthhJ+gD4Gcf91t9q03BFcXAjjWxtrKK5k4QXl5axiZyQTSO2QbbKTyc4JSEbPFKRA3E&#xA;ZGvjI/oVJvMenRzob2Kaa8cyval3Jd544kLyyoo+FUicbUFM2Gg1HAeGQEY1fus7D3lvwZBE0fpP&#xA;P8fakVpcGMiKVhyHxI5qVfv6hPfio2Gb2J6O4wZeH0yO/f3/ANL4DkE3SQMtTsR9oHqO++XAu3jK&#xA;w7RLVb6+SWZ1jjlais7iNViH+WQwUv4kU6ZGO+7i4jd5e/l7v283rmnWD6fbRNAkbJIvpQSKIbOa&#xA;VafYiuoGl0++26pOOTeGScGc+I7/AKT9hqUfeOTyq79L61N6NfR5t6dV4HjU0qoLU27VOLuY3QtQ&#xA;lbihP40qB88SiZoWl8iyTzw2sYZjOTGsNORPJTTgw+0K0oMqPc63NKyInkb2+B5HuVNOuC1vGT0Y&#xA;bk9yBV3J8K7ZKB2btJluA/HvP6Edk3PcRUUOKEoe1ltoLC6YgJKJbf1e0bxyEEH/ACgrA/IjKOVO&#xA;ggeEx6EXG+7fn8rpGWzgAbcRQEL/ACqx+EHxZupy0F2uGQH45A8viUXknLWTRLLE8b/ZcEH6cSLY&#xA;ZICcTE8ilccM9xMLZyVNvtNMp+2KfB9NDlQBJrudVDHPJLgO3BzI693xTzSYmhuoYrOX6m8jrGJl&#xA;Ypx5GlWYb08ctAAdkMUIRoDZ6zYxalbRkWOu6hHFEnJ3mlaVPiQSKHgcSRn04WEki8SeTxxD4qsV&#xA;1MzE/VGP48/fsPcZeSR+Y9M8uX0gt/MtlFpN5cM8MPmLTUWIrMlA63dtGeEoRvhd0A+IMFrxJyJi&#xA;CxGnJBOMn3fqP3A+XJ5lrGhajoeuTWWohZr2OjWhh+KCZJFBS4RxsVdd65XVHfmuGRMuI7z/AIR5&#xA;95/T/YrW0PoxBCeTbl28WO5OWgU7nDj4I116+9PNI8wyWipaXsX1/Sw3L6q7FXib/fltKPjhkHUM&#xA;vX9oEYmIIotWo0scg7pfjn3/AIp6loWqljBay3P1y3u42n0nUCArzRIQJIplGy3EJIDgbEUYZqNV&#xA;p+A2OTo5RMZGJ5hPMw0OxV2KqF/JfR2kj2MCXN0orHDJIYlY+HMLJT7sIq91LyzXvM+tapM+j+aA&#xA;vl6wZh6lvxctcqpB4/WT+74V/l3OSzGUI3iHGe/u+HNxcs5cqRkmr6XBCiWmrafb2yrxiQ8XooFP&#xA;h4yp0+WaEYJyNyhMn8f0XGpB3Nm+px/BqM2qDstq8UFuK/zyIGem3QFj7ZdDJ4Z3iIe+yfly+5PJ&#xA;D2ujQ2NvLFbGOJnJ+t6kiVaMNsYbZm5SSOenIk0Pvtlk9QZkGVnujfPzl0A/HLdbbnhndmBb6mII&#xA;REz15CxtKCo5b8riUDt9kf8ADCMgP6Vm/wCvL/iR9v3Kg1tQemQbJXg48Tt9S01d2LeE05Hz/wCB&#xA;yzj6/Vv/AKef/Ex/HNUuufLEF7IpjQWXrcrlrdxSK2tFWiM/RlkkK12bxr0zMxdoyxij6wNvOUut&#xA;eQ/U349QYij6o/jl3JRqGj6lZabHcPQrcpK8SF29URgVMrKYxQUp1au4GbHF2jCcjEXt16Wejl/n&#xA;/SYgHr17/gm+h6k+kXkNzE8qLEOLG3lMEnClCFkAam3ipHiDm1egniBhw7fFPdR89yy2txb2caw/&#xA;WV4T3AVI3kQrxdJ44uNvMR2kMYcdcWmGlAIJPL8bdR7rpipdR1Pen0nFyzIBDTTggAbCtBvQk+AJ&#xA;6MPA9ciS4+TLf4/FHyPNEeU4lfzD9dcf6JokMuoXBIIXlAhZFZTsC8gVNtiTld7+51Oae5PSI925&#xA;25d/M7JRYvQC3ccJF4RlD4FyzH6RTGJ6N2llXoO0hQr4kn5o+C4LcfFwr/8AIxjT7guWAufjy3Xn&#xA;R+ZP6AqC5B4U/boa+xBb9S4bbBmBrz/af0IvQRY6l63l3UJBBBqwjmsLx9kt9RCkJyPZJ1+B/fif&#xA;2cqP3um1Ud76SAv3/j9XVKbqDUtL1GbTNVha11O3cpJHIKEyMQgbwoF+/EHoebZg1Buj9XQ95NAH&#xA;4BEwXCFQOg24/Ikqn30y0F2mPKK/HfQVufxAAEgivMUp+vC3cW6D0+QC2Mp3knkYke5YqP1ZCB2c&#xA;LSTAhxdZSP30i45FcVH0fKtK/TTJguZCYkmdt5g1u1ZGgvZUKP6ijkSOYdZORBqCecatv3A8Bixl&#xA;hgeYVtS8zajqOnxWM4QRRtGSyijMIY/SiU7nZeTtt1Z2JrXFjjwRjLiH4/G3yCG1K/a70G0Ex5XO&#xA;kTrHA53c2lyaNGf8mOWhUf5ZyMu9x80OCYmOp3+77f8AeoLJOe7FU60bzFJp1jJCxJWC5t7+zA6i&#xA;dHEUoHgJLeR1bxoMqzx4oEOu1+G48Y5j7vx95e15oHUuxV2KuxVZNDDNGY5o1kjbqjgMp+g4bVAx&#xA;+WvLkchkj0qzSQ7l1t4gTT3C5Ljl3o4Qx7zT+XtteQify8kWk6tzHK5iZ4EMf7QZIhRq7dR9OESE&#xA;tpjiDCeMFKdR8sfmSiQm1m0+YqassasjLTb4Gm9TqK7kZix0ODf6vx7qaPy65tI87XJVf0Ha2wR/&#xA;UUzXYdOda8ysSb0O/wA98qj2fEfxn5ftQNOUpkvE0+6m0/zHbPDqCSLOwgWSeO6JFY2DKtfgpQKa&#xA;DbBl0OQEHFvGq7uHv+fewljIK+x1S2vNTu9N1K0GnSOYZkt7iRRNNzqVWRDuNgvweHXKdRpJ4Yxk&#xA;Dxc+Q2H472MokKmtabNefW7aJ1NzdpxurpvsW9su6xr/AJT9fvP8oynT5hDhkeUeQ75d/wAP2d7E&#xA;F5+tysljHMSDw+CYA9QRxan687gSuNvUxzieES7tj9x/WtSd60JBeo4sehelB9Ei9PfG2Mcp5df0&#xA;/qkPtb9UFf8AJ+yvLYU/325/ZZf2TjafE28uW/8AuT3EdChmlmuZhbWima4komwqetOLijK/sRkC&#xA;b2DiTzGZ4Yby7/8Aiuh9707yr5LiSE+XJB6nxx3HmmVTtVDzg07kP2udJJ6dKKvUHMfU5eCPCObh&#xA;zo1GP0x6957/ANSTebfyw1bTpTNp8Umo6cprC8O93AOvFl/3YB2I3yGLVA7S5twyDYTs1yI+ofrY&#xA;UGkglEZnjDRcVKTK0TrwrQEU/wArMsS7i3Y8lVU4mq52OV/rVbKG7upY7a1rczKFCQ2sbTOeIK+F&#xA;B174DMDmUjMIgAyG1fTvyFe56f5O/KxPq7XHmSEPziMVvp5bl6QYULu4/wB2U6U+z8+mBn1V7R5O&#xA;NkmZ0D9I5BF+YPLYeyTTvMdncaxp9svp6b5hslEmp20Y+zFcw1X6zGvZlPID7svxauMhUmoEx2ri&#xA;j3fjl+Leb6nomn6exew122vbZDsG5xTLQEANDOIZQRXoAR7nMoEdC5mHLDpIx8pb+XMO0fTNZ1Jl&#xA;i0i0mvK8QHCFIVCrx3lfio8cjLPGA5t/52MBUTxcvdypW1Pyhq+ki6gekuoaepuZbeEEh7WRDSeK&#xA;u7LDIzrJ4DfpWkMWUSjYcKGoMR7r+2/uJS2KdUTkhBQB2U9isQCAfjXMgF2mPIALHLf5RoI0SKWK&#xA;13G33AH+OTtzRIXS7FmhL1t0j5VEjpRPARnmx/DIycPUnkL5kfZuV0Nx8EYO5ZUr82BP8MQWePLs&#xA;PcPtVhKhpQ/apT6dxkrbhMFfptk+p6zZWcDMzXUscXEdAlRJJJT2jByjPMCJLr9bkHCSDz2/Tfyf&#xA;QuaJ1bsVdirsVdirsVdirsVdirsVYb+ZthZDRI9Sa3iL2t5ayz3BReYjEqq3x05U3GTFkEDrE/c1&#xA;ZR6UFqVr9Zh9KRwlmd7lQaGRe0dTQBW/a8emc1hnwmx9XTy83ADEvMPlwOi6nBcQpd3zKn1UsqwS&#xA;gr+7jjalOXFep2b2zd9n9onGTAgmA+fmT+NnL02qliJ6xPMMNljsVcpI8tm9WQxsCybMQ1NmBHId&#xA;jnRxlCQsF2QngluJSh5dExsdA0m7cevr0dHpVES4lkYD/iuKKRv+Cp88J4epa5SxdZSk9F8r+V57&#xA;ZPT8vWU2l8xSbzFqKKl4EOzCytQX9FiP92yMWAO1Mx8mrjEVFplMyHCBww7u/wB/ezzR9HsNI0+O&#xA;xsY/Tgj3JO7Mx+07t+0zHqc1kpGRsqBSMyKVKe0tbgUnhSUeDqG/WMIK0uhgghThDGsSfyoAo+4Y&#xA;kqvwK7FVkkEEhrJGrkbAsAf14bVfgVKfMHl9dUWC4gnex1axb1dP1CL7cT9wR0ZG6Mp6jLcWUwNh&#xA;BFvMfMPlG0MjtfqvljU3BV7lY3l0S5LUqytEGks3am6lSvhxGbPHmjPkaLXGc4cuX6/x/al6fl75&#xA;5uGLWWmpqkL8ytxptzb3UTKVC1Bjckb/AM1Mvs9zmfygP4hV39oWXHlLV7Ak+YZbfRUbb0ZZUnu3&#xA;5qBxis4GeUty6c+C+LDEy70y7RJGw5/pH60bN+U+uahYfpK2HouxJt9Muzxm9Og+NnSipI7VbhSg&#xA;6E5hS1ceLyceeSUzcvl+OrFrzy95l0yT07q0urfjxALwtInwbgLLHyVqe2XxzRPItkMxH8RHLmL5&#xA;eYVNN0DzDqEgjs7W5uSaU9OExJsSw5SyUVRvhlmiOZbPHr+In3CvPmXr3kLyEugKb6+KS6rKvAcK&#xA;mOGM7lEJ3LH9pv8AM67Pn4/c0ykZGyzHMZi7FXYq7FXYq7FXYq7FXYq7FUPqNhbahYXFjdLzt7mN&#xA;opV78WFNvfwwg0bUi2DaB5Avp7uWLzQVvdP03/R9MiqQkwpX6xKoO7BSEoe9fmTGMIEmAoy5/qaI&#xA;YQDur6J+V1kluYtdk/SEUQkisbUFhFBE7Egg7M0lP2u3bxyXEBImIoy5so4gGTaP5b0nSrKxtbeE&#xA;P+j1YW08gBlBkr6jcqDd6/FTBKZJbBEBNMgl2KuxV2KuxV2KuxV2KuxV2KuxVxAIIIqDsQcVSW78&#xA;leUruT1J9JtTIdy6xqjH5lONcsGWQ6o4QraZ5V8t6XL6thptvbzDpMsY5ivg5qw+/BLJI8yoiAmm&#xA;QS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:7E536961D5E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:7F536961D5E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:7c5cb5ab-85ee-c240-971f-4b2a54215155</stRef:instanceID>
            <stRef:documentID>xmp.did:82C4BA9779206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.878431 .745098 .545098 rgb
f
73.4102 638.482 mo
78.2266 637.67 83.0781 634.127 87.1445 630.127 cv
90.0156 621.092 li
92.7344 612.537 98.6406 606.256 103.82 602.131 cv
95.7734 596.561 li
106.281 591.486 li
108.848 590.244 111.344 589.119 113.672 588.115 cv
104.375 582.854 li
115.48 575.037 li
113.781 574.225 112.07 573.334 110.359 572.361 cv
104.699 569.154 101.016 566.236 100.859 566.115 cv
93.75 560.459 li
101.184 555.229 li
107.242 550.963 114.203 548.447 120.309 546.967 cv
116.277 543.479 li
128.16 540.193 li
121.375 537.174 114.969 533.736 110.523 531.217 cv
108.438 530.033 107.207 529.295 107.207 529.295 cv
95.4219 522.186 li
95 522.053 94.6016 521.916 94.2344 521.799 cv
94.2734 521.494 li
89.8516 518.826 li
91.1523 518.689 li
39.918 504.49 li
51.875 496.225 li
65.3711 486.897 79.7266 480.526 88.9922 476.948 cv
81.2031 468.315 li
90.5313 464.795 li
97 462.358 103.762 461.518 109.836 461.471 cv
102.566 454.155 li
112.457 450.467 li
125.008 445.788 138.672 444.698 149.125 444.772 cv
148.27 443.62 147.781 442.905 147.719 442.815 cv
143.492 436.522 li
150.195 432.995 li
158.008 428.889 170.254 430.159 179.84 432.186 cv
179.84 432.182 179.68 425.784 179.68 425.784 cv
186.051 425.225 li
189.801 424.897 193.445 425.069 196.855 425.526 cv
195.73 422.014 195.402 419.428 195.367 419.159 cv
194.672 413.225 li
200.465 411.76 li
210.414 409.26 219.941 409.788 227.816 411.327 cv
227.793 411.268 224.57 402.053 224.57 402.053 cv
234.238 402.127 li
240.59 402.182 246.988 404.014 252.555 406.331 cv
251.555 396.932 253.621 388.94 253.773 388.374 cv
255.242 382.87 li
260.922 383.354 li
268.82 384.034 276.164 386.268 282.742 389.995 cv
283.148 390.221 283.539 390.452 283.926 390.682 cv
285.191 376.967 li
294.18 381.655 li
294.965 382.065 295.734 382.483 296.484 382.909 cv
304.398 387.393 310.297 392.631 314.531 397.307 cv
317.102 388.03 li
325.34 396.112 li
332.711 403.342 337.5 410.831 340.594 417.229 cv
344.656 409.178 li
351.309 416.045 li
370.316 435.667 398.418 492.018 399.602 494.401 cv
424.809 540.186 415.063 579.885 407.234 611.783 cv
405.027 620.787 402.941 629.291 401.805 637.186 cv
396.398 674.971 369.684 714.939 368.547 716.615 cv
363.801 723.666 li
353.816 713.1 li
352.508 717.881 350.984 721.537 350.676 722.264 cv
346.973 730.912 li
336.234 721.432 li
331.672 729.037 316.797 737.604 315.789 738.318 cv
314.164 725.721 li
313.797 726.377 313.789 726.846 313.789 726.857 cv
313.789 726.178 313.359 724.889 312.66 723.365 cv
310.773 724.021 308.512 724.42 305.844 724.396 cv
304.129 724.502 299.395 729.236 296.336 734.604 cv
291.215 743.568 li
284.984 735.338 li
270.18 715.721 270.641 698.943 272.273 690.596 cv
270.344 689.947 267.824 689.553 266.555 689.459 cv
258.145 688.822 li
260.547 680.74 li
260.875 679.619 261.121 678.264 261.25 677.08 cv
259.152 678.01 256.172 679.709 253.023 682.111 cv
246.703 686.924 236.676 686.307 234.727 686.131 cv
230.383 685.744 li
228.922 681.639 li
228.918 681.631 227.488 677.998 224.289 676.189 cv
222.281 675.053 219.883 674.834 216.969 675.537 cv
201.016 679.369 184.949 677.553 184.27 677.471 cv
171.707 676.002 li
174.484 672.697 li
165.473 673.896 156.602 673.998 156.094 674.006 cv
145.344 674.107 li
148.797 666.619 li
147.156 666.092 145.363 665.377 143.406 664.416 cv
142.305 663.873 li
132.156 658.881 127.961 656.811 112 658.869 cv
91.5234 661.506 72.2188 651.654 71.4063 651.232 cv
53.3477 641.869 li
73.4102 638.482 li
cp
.27451 .207843 .145098 rgb
f
393.508 497.432 mo
393.508 497.432 364.914 439.87 346.422 420.772 cv
339.309 434.85 li
339.309 434.85 337.199 417.276 320.578 400.967 cv
317.273 412.889 li
317.273 412.889 310.328 397.752 291.031 387.69 cv
289.516 404.069 li
289.516 404.069 280.07 391.823 260.344 390.135 cv
260.344 390.135 254.934 410.338 266.418 422.014 cv
266.418 422.014 249.625 409.061 234.18 408.932 cv
234.18 408.932 236.816 416.459 244.477 424.241 cv
244.477 424.241 224.242 412.788 202.129 418.358 cv
202.129 418.358 203.758 432.217 214.199 438.127 cv
214.199 438.127 201.148 430.737 186.641 432.006 cv
186.641 432.006 186.754 436.377 191.148 442.311 cv
191.148 442.311 164.418 433.206 153.367 439.018 cv
153.367 439.018 158.043 445.975 165.422 452.737 cv
165.422 452.737 137.773 448.288 114.828 456.842 cv
128.559 470.647 li
128.559 470.647 109.375 464.959 92.9336 471.159 cv
100.875 479.967 li
100.875 479.967 76.9961 487.131 55.75 501.818 cv
103.43 515.025 li
96.3594 515.338 li
96.3594 515.338 118.156 522.506 123.547 522.111 cv
110.719 523.463 li
110.719 523.463 134.492 537.791 148.832 539.877 cv
148.832 539.877 139.547 544.096 130.344 546.643 cv
136.129 551.646 li
136.129 551.646 117.988 551.717 105.098 560.791 cv
105.098 560.791 116.391 569.771 129.984 573.158 cv
117.086 582.232 li
129.484 589.252 li
129.484 589.252 119.914 592.455 109.242 597.615 cv
116.047 602.33 li
116.047 602.33 100.914 609.275 96.5 623.15 cv
102.262 622.107 li
102.262 622.107 89.7891 642.619 74.5391 645.193 cv
74.5391 645.193 92.5313 654.518 111.125 652.119 cv
129.719 649.721 134.945 652.678 146.406 658.307 cv
157.875 663.936 159.805 659.002 159.805 659.002 cv
156.027 667.201 li
156.027 667.201 172.492 667.041 182.711 664.213 cv
192.93 661.381 185.063 670.717 185.063 670.717 cv
185.063 670.717 200.418 672.514 215.383 668.924 cv
230.348 665.33 235.328 679.357 235.328 679.357 cv
235.328 679.357 244.359 680.162 248.898 676.697 cv
253.445 673.24 262.82 667.342 266.367 670.213 cv
269.91 673.084 267.063 682.674 267.063 682.674 cv
267.063 682.674 281.113 683.736 279.461 689.697 cv
277.813 695.662 275.641 711.67 290.418 731.24 cv
290.418 731.24 298.18 717.529 305.898 717.6 cv
313.621 717.658 314.535 713.006 314.535 713.006 cv
314.535 713.006 322.672 724.502 320.086 729.072 cv
320.086 729.072 331.586 720.939 333.5 709.947 cv
344.422 719.58 li
344.422 719.58 349.766 707.1 348.895 697.982 cv
362.91 712.818 li
362.91 712.818 389.82 672.896 395.078 636.221 cv
400.328 599.549 424.523 553.775 393.508 497.432 cv
cp
.627451 .694118 .14902 rgb
f
375.727 516.666 mo
375.727 516.666 186.508 636.197 101.031 639.51 cv
101.031 639.51 144.773 644.455 201.684 615.486 cv
258.594 586.518 355.832 544.186 375.727 516.666 cv
cp
.27451 .207843 .145098 rgb
f
348.789 534.314 mo
348.789 534.314 269.512 519.408 210.039 513.314 cv
158.977 508.084 80.1094 498.374 80.1094 498.374 cv
80.1094 498.374 140.77 500.834 168.871 502.959 cv
196.973 505.084 329.289 515.564 348.789 534.314 cv
cp
f
107.289 615.314 mo
107.289 615.314 138.414 624.314 159.414 622.439 cv
159.414 622.439 160.164 626.189 147.039 625.439 cv
137.297 624.885 120.414 622.439 107.289 615.314 cv
cp
f
121.914 607.064 mo
121.914 607.064 139.539 617.189 171.414 616.814 cv
171.414 616.814 175.539 617.564 177.789 615.689 cv
180.039 613.814 174.414 614.189 155.664 612.689 cv
141.078 611.525 121.914 607.064 121.914 607.064 cv
cp
f
162.789 634.814 mo
162.789 634.814 151.914 645.689 135.789 649.814 cv
135.789 649.814 150.789 650.189 170.664 632.939 cv
170.664 632.939 165.039 632.189 162.789 634.814 cv
cp
f
123.039 594.689 mo
123.039 594.689 159.789 605.189 199.914 604.064 cv
199.914 604.064 199.164 607.439 190.539 607.064 cv
181.914 606.689 156.789 608.564 123.039 594.689 cv
cp
f
217.914 595.814 mo
217.914 595.814 175.914 599.939 135.039 587.189 cv
135.039 587.189 167.344 590.287 184.539 591.689 cv
202.914 593.189 219.789 592.814 217.914 595.814 cv
cp
f
239.664 586.814 mo
239.664 586.814 175.164 587.939 134.289 575.189 cv
134.289 575.189 166.594 578.287 183.789 579.689 cv
202.164 581.189 241.539 583.814 239.664 586.814 cv
cp
f
261.039 575.189 mo
261.039 575.189 163.164 573.314 122.289 560.564 cv
122.289 560.564 154.594 563.662 171.789 565.064 cv
190.164 566.564 262.914 572.189 261.039 575.189 cv
cp
f
280.914 563.564 mo
280.914 563.564 183.039 561.689 142.164 548.939 cv
142.164 548.939 174.469 552.037 191.664 553.439 cv
210.039 554.939 282.789 560.564 280.914 563.564 cv
cp
f
296.281 552.314 mo
296.281 552.314 186.414 546.689 139.164 533.939 cv
139.164 533.939 175.742 537.83 195.215 539.596 cv
216.027 541.479 298.41 548.549 296.281 552.314 cv
cp
f
322.164 539.189 mo
322.164 539.189 172.539 528.689 125.289 515.939 cv
125.289 515.939 161.867 519.83 181.34 521.596 cv
202.152 523.479 324.289 535.424 322.164 539.189 cv
cp
f
157.914 656.564 mo
157.914 656.564 178.164 641.939 188.664 626.189 cv
188.664 626.189 193.914 625.814 188.289 632.939 cv
182.664 640.064 166.914 652.064 157.914 656.564 cv
cp
f
175.387 658.865 mo
175.387 658.865 193.086 645.658 210.566 617.408 cv
210.566 617.408 214.008 616.486 210.977 623.068 cv
207.953 629.646 191.344 649.686 175.387 658.865 cv
cp
f
191.512 659.615 mo
191.512 659.615 217.164 635.189 231.789 604.439 cv
231.789 604.439 233.852 609.814 226.164 623.564 cv
222.633 629.889 207.469 650.436 191.512 659.615 cv
cp
f
205.164 664.814 mo
205.164 664.814 236.289 632.189 248.254 597.158 cv
248.254 597.158 250.281 602.197 243.938 616.615 cv
237.414 631.439 220.461 654.58 205.164 664.814 cv
cp
f
221.5 667.135 mo
221.5 667.135 255.703 623.787 266.289 588.314 cv
266.289 588.314 270.789 593.564 258.359 617.459 cv
250.883 631.83 236.391 656.311 221.5 667.135 cv
cp
f
354.039 517.064 mo
354.039 517.064 212.289 491.565 108.238 485.913 cv
108.238 485.913 157.555 486.194 177.039 487.815 cv
249.039 493.815 356.164 513.299 354.039 517.064 cv
cp
f
366.789 500.565 mo
366.789 500.565 226.539 480.315 132.039 471.315 cv
132.039 471.315 179.875 471.803 198.039 473.565 cv
217.457 475.448 368.773 496.799 366.789 500.565 cv
cp
f
366.039 485.565 mo
366.039 485.565 227.289 463.065 155.488 456.663 cv
155.488 456.663 182.289 455.565 228.039 460.815 cv
245.84 462.858 367.867 482.073 366.039 485.565 cv
cp
f
372.789 471.315 mo
372.789 471.315 242.289 448.815 182.488 443.913 cv
182.488 443.913 227.211 445.014 242.289 446.565 cv
258.402 448.221 374.441 468.002 372.789 471.315 cv
cp
f
381.789 457.065 mo
381.789 457.065 280.539 437.565 216.988 434.913 cv
216.988 434.913 246.426 434.104 259.539 434.565 cv
302.289 436.065 383.219 454.389 381.789 457.065 cv
cp
f
235.75 668.635 mo
235.75 668.635 270.789 625.064 283.539 580.814 cv
283.539 580.814 285.039 595.064 272.609 618.959 cv
265.133 633.33 250.641 657.811 235.75 668.635 cv
cp
f
255.25 664.885 mo
255.25 664.885 289.297 617.654 301.539 569.564 cv
301.539 569.564 303.078 585.08 291.051 611.018 cv
283.809 626.619 269.758 653.182 255.25 664.885 cv
cp
f
271 666.385 mo
271 666.385 305.047 619.154 317.289 571.064 cv
317.289 571.064 318.828 586.58 306.801 612.518 cv
299.559 628.119 285.508 654.682 271 666.385 cv
cp
f
284.488 673.682 mo
284.488 673.682 322.539 622.814 335.289 556.814 cv
335.289 556.814 332.32 593.877 320.289 619.814 cv
313.047 635.416 298.996 661.979 284.488 673.682 cv
cp
f
356.297 438.315 mo
356.297 438.315 304.539 422.565 253.539 418.815 cv
253.539 418.815 280.109 418.159 288.039 418.815 cv
324.039 421.815 357.297 436.584 356.297 438.315 cv
cp
f
290.793 687.604 mo
290.793 687.604 340.766 627.58 356.539 552.826 cv
356.539 552.826 362.031 560.916 354.438 582.9 cv
346.844 604.893 324.492 660.334 290.793 687.604 cv
cp
f
296.043 706.35 mo
296.043 706.35 361.539 632.564 376.539 532.814 cv
376.539 532.814 376.539 560.564 363.789 599.564 cv
356.559 621.678 329.742 679.084 296.043 706.35 cv
cp
f
311.043 709.35 mo
311.043 709.35 376.539 635.564 391.539 535.814 cv
391.539 535.814 391.539 563.564 378.789 602.564 cv
371.559 624.678 344.742 682.084 311.043 709.35 cv
cp
f
339.309 702.205 mo
339.309 702.205 401.141 625.322 411.273 524.963 cv
411.273 524.963 412.621 552.678 401.781 592.252 cv
395.633 614.689 371.641 673.33 339.309 702.205 cv
cp
f
876.344 716.851 mo
853.078 716.851 827.227 705.343 810.48 687.542 cv
796.625 672.8 790.039 654.987 791.449 636.026 cv
792.297 618.776 804.898 584.999 846.34 581.749 cv
848.781 581.558 851.191 581.464 853.547 581.464 cv
897.531 581.464 930.313 614.397 935.453 644.909 cv
940.488 674.745 923.539 709.491 886.445 716.007 cv
883.277 716.569 879.879 716.851 876.344 716.851 cv
cp
f
798.234 634.292 mo
798.234 634.292 800.484 588.538 847.734 584.788 cv
894.984 581.038 926.484 617.042 930.984 644.042 cv
935.484 671.042 920.484 703.292 886.734 709.292 cv
852.984 715.292 794.484 685.292 798.234 634.292 cv
cp
.670588 .215686 .372549 rgb
f
924.48 661.038 mo
924.48 661.038 924.48 672.288 919.98 668.538 cv
915.48 664.788 925.23 655.788 924.48 661.038 cv
cp
.27451 .207843 .145098 rgb
f
867.234 587.038 mo
867.234 587.038 926.109 599.788 929.484 649.292 cv
929.484 649.292 920.109 605.788 867.234 587.038 cv
cp
1 1 1 rgb
f
797.109 642.917 mo
797.109 642.917 799.148 673.976 834.609 693.917 cv
859.031 707.647 894.422 713.112 919.359 683.417 cv
919.359 683.417 906.609 699.167 874.066 698.206 cv
848.727 697.456 807.609 678.167 797.109 642.917 cv
cp
.27451 .207843 .145098 rgb
f
gsave
798.609 643.292 mo
798.609 643.292 806.898 683.382 849.621 697.737 cv
892.348 712.093 902.004 690.976 927.012 673.397 cv
927.012 673.397 893.695 690.776 872.828 674.804 cv
851.965 658.831 843.563 646.972 837.316 636.726 cv
831.07 626.476 802.211 619.421 798.609 643.292 cv
cp
clp
814.617 632.765 mo
814.617 632.765 796.375 653.675 807.563 677.366 cv
807.563 677.366 803.313 654.097 814.617 632.765 cv
cp
f
825.891 632.812 mo
825.891 632.812 806.875 657.39 814.852 686.179 cv
816.75 688.866 li
816.75 688.866 811.781 659.956 825.891 632.812 cv
cp
f
831.621 642.448 mo
831.621 642.448 814.594 668.44 824.789 696.507 cv
826.887 699.05 li
826.887 699.05 819.688 670.616 831.621 642.448 cv
cp
f
839.848 651.194 mo
839.848 651.194 824.988 678.476 837.41 705.636 cv
839.703 707.991 li
839.703 707.991 830.234 680.233 839.848 651.194 cv
cp
f
848.281 658.546 mo
848.281 658.546 836.172 685.085 849.969 710.007 cv
852.34 712.104 li
852.34 712.104 841.289 686.452 848.281 658.546 cv
cp
f
857.684 666.683 mo
857.684 666.683 849.105 693.694 864.094 715.28 cv
866.449 716.909 li
866.449 716.909 853.914 694.226 857.684 666.683 cv
cp
f
867.531 670.28 mo
867.531 670.28 860.313 698.534 878.305 720.624 cv
881 722.28 li
881 722.28 865.582 698.979 867.531 670.28 cv
cp
f
877.609 673.999 mo
877.609 673.999 872.82 702.772 892.617 723.249 cv
895.438 724.667 li
895.438 724.667 878.098 702.765 877.609 673.999 cv
cp
f
886.695 676.272 mo
886.695 676.272 884.016 705.331 905.262 724.312 cv
908.18 725.511 li
908.18 725.511 889.289 704.929 886.695 676.272 cv
cp
f
897.336 676.257 mo
897.336 676.257 894.645 705.308 915.898 724.292 cv
918.813 725.491 li
918.813 725.491 899.918 704.909 897.336 676.257 cv
cp
f
907.43 673.796 mo
907.43 673.796 904.758 702.847 926.004 721.831 cv
928.922 723.03 li
928.922 723.03 910.023 702.448 907.43 673.796 cv
cp
f
915.234 666.003 mo
915.234 666.003 912.555 695.054 933.797 714.03 cv
936.715 715.233 li
936.715 715.233 917.828 694.647 915.234 666.003 cv
cp
f
924.234 660.249 mo
924.234 660.249 921.563 689.296 942.797 708.28 cv
945.711 709.483 li
945.711 709.483 926.82 688.901 924.234 660.249 cv
cp
f
935.039 655.085 mo
935.039 655.085 932.355 684.132 953.609 703.116 cv
956.523 704.319 li
956.523 704.319 937.629 683.733 935.039 655.085 cv
cp
f
grestore
295.735 644.042 mo
278.008 644.042 252.235 632.792 238.043 609.851 cv
218.942 578.979 218.899 550.202 233.571 524.421 cv
244.524 505.179 262.305 494.585 283.649 494.585 cv
311.637 494.585 342.059 512.851 352.907 536.171 cv
369.735 572.358 367.047 624.671 334.649 638.187 cv
315.235 646.292 295.735 644.042 295.735 644.042 cv
cp
f
239.485 527.788 mo
231.149 542.437 222.235 567.538 243.985 606.538 cv
265.735 645.542 303.235 645.542 331.735 632.042 cv
360.235 618.542 361.735 571.288 346.735 539.038 cv
331.735 506.788 267.235 479.038 239.485 527.788 cv
cp
.670588 .215686 .372549 rgb
f
246.907 523.128 mo
246.907 523.128 227.149 547.19 239.399 585.987 cv
247.821 612.706 269.907 640.897 308.407 636.28 cv
308.407 636.28 288.34 639.05 265.25 616.101 cv
247.274 598.222 230.469 556.03 246.907 523.128 cv
cp
.27451 .207843 .145098 rgb
f
gsave
249.969 523.405 mo
249.969 523.405 226.375 559.351 247.735 599.038 cv
269.094 638.733 290.579 629.929 320.848 634.198 cv
320.848 634.198 284.657 624.097 280.348 598.179 cv
276.047 572.257 278.028 557.858 280.477 546.108 cv
282.926 534.358 268.915 508.456 249.969 523.405 cv
cp
clp
266.625 527.694 mo
266.625 527.694 239.016 530.483 230.977 555.413 cv
230.977 555.413 243.79 535.53 266.625 527.694 cv
cp
f
274.817 535.437 mo
274.817 535.437 244.137 540.37 230.266 566.827 cv
229.817 570.089 li
229.817 570.089 245.961 545.601 274.817 535.437 cv
cp
f
272.407 546.39 mo
272.407 546.39 242.211 553.71 230.454 581.163 cv
230.25 584.452 li
230.25 584.452 244.438 558.78 272.407 546.39 cv
cp
f
272.43 558.401 mo
272.43 558.401 242.93 568.144 233.422 596.46 cv
233.477 599.741 li
233.477 599.741 245.555 573.011 272.43 558.401 cv
cp
f
273.555 569.526 mo
273.555 569.526 246.575 580.616 239.594 608.229 cv
239.895 611.382 li
239.895 611.382 249.368 585.108 273.555 569.526 cv
cp
f
274.852 581.897 mo
274.852 581.897 250.118 595.741 246.297 621.733 cv
246.903 624.538 li
246.903 624.538 253.266 599.417 274.852 581.897 cv
cp
f
279.579 591.257 mo
279.579 591.257 254.989 606.937 253.008 635.358 cv
253.844 638.405 li
253.844 638.405 258.532 610.858 279.579 591.257 cv
cp
f
284.383 600.866 mo
284.383 600.866 261.219 618.577 261.665 647.054 cv
262.743 650.019 li
262.743 650.019 265.071 622.179 284.383 600.866 cv
cp
f
289.461 608.733 mo
289.461 608.733 267.641 628.104 270.157 656.476 cv
271.465 659.351 li
271.465 659.351 271.766 631.409 289.461 608.733 cv
cp
f
297.235 615.999 mo
297.235 615.999 275.407 635.351 277.934 663.733 cv
279.243 666.608 li
279.243 666.608 279.528 638.671 297.235 615.999 cv
cp
f
306.282 621.108 mo
306.282 621.108 284.473 640.468 286.985 668.851 cv
288.297 671.722 li
288.297 671.722 288.579 643.784 306.282 621.108 cv
cp
f
317.309 620.757 mo
317.309 620.757 295.489 640.116 298.008 668.491 cv
299.321 671.358 li
299.321 671.358 299.614 643.433 317.309 620.757 cv
cp
f
327.809 622.71 mo
327.809 622.71 306 642.073 308.516 670.444 cv
309.809 673.319 li
309.809 673.319 310.11 645.378 327.809 622.71 cv
cp
f
339.223 626.335 mo
339.223 626.335 317.403 645.687 319.93 674.069 cv
321.235 676.948 li
321.235 676.948 321.528 648.999 339.223 626.335 cv
cp
f
grestore
512.336 418.526 mo
482.195 418.526 449.219 396.901 443.477 348.593 cv
443.122 346.769 433.493 292.862 473.802 261.425 cv
487.914 250.413 503.328 244.831 519.602 244.831 cv
543.32 244.831 561.367 256.554 568.297 263.479 cv
608.238 303.421 597.059 346.249 580.652 375.147 cv
565.227 402.312 539.688 418.526 512.336 418.526 cv
cp
f
450.235 347.788 mo
450.235 347.788 437.86 294.913 475.36 265.663 cv
512.859 236.413 555.984 255.163 566.484 265.663 cv
576.984 276.163 607.699 313.741 574.734 371.788 cv
540.234 432.538 459.235 423.538 450.235 347.788 cv
cp
.670588 .215686 .372549 rgb
f
522.984 252.538 mo
522.984 252.538 561.984 251.788 577.734 284.038 cv
593.484 316.288 583.734 346.288 580.734 356.038 cv
580.734 356.038 589.734 311.038 570.984 282.538 cv
552.234 254.038 522.984 252.538 522.984 252.538 cv
cp
1 1 1 rgb
f
486.141 269.976 mo
486.141 269.976 461.52 275.577 453.692 312.304 cv
445.84 349.03 474.81 405.218 529.559 407.651 cv
529.559 407.651 492.996 404.62 472.114 367.948 cv
451.231 331.272 461 289.12 486.141 269.976 cv
cp
.27451 .207843 .145098 rgb
f
gsave
486.141 269.976 mo
486.141 269.976 459.563 281.476 457.266 318.269 cv
454.961 355.065 479.31 399.089 526.055 407.319 cv
526.055 407.319 484.813 379.937 485.922 338.823 cv
487.055 297.71 495.797 288.702 496.977 279.921 cv
498.148 271.128 492.141 263.995 486.141 269.976 cv
cp
clp
498.922 274.995 mo
498.922 274.995 471.634 269.042 456.551 288.64 cv
456.551 288.64 474.72 274.964 498.922 274.995 cv
cp
f
504.48 284.327 mo
504.48 284.327 473.626 279.358 452.485 298.511 cv
451.079 301.253 li
451.079 301.253 473.813 284.526 504.48 284.327 cv
cp
f
498.926 293.288 mo
498.926 293.288 467.813 290.554 448.415 311.249 cv
447.25 314.089 li
447.25 314.089 468.446 295.71 498.926 293.288 cv
cp
f
495.387 303.905 mo
495.387 303.905 464.219 303.522 446.727 325.663 cv
445.817 328.593 li
445.817 328.593 465.305 308.632 495.387 303.905 cv
cp
f
493.164 314.093 mo
493.164 314.093 464.028 315.675 449.168 337.968 cv
448.512 340.823 li
448.512 340.823 465.368 320.499 493.164 314.093 cv
cp
f
490.758 325.413 mo
490.758 325.413 462.954 330.128 451.583 351.937 cv
451.321 354.593 li
451.321 354.593 464.868 334.331 490.758 325.413 cv
cp
f
492.504 335.132 mo
492.504 335.132 464.297 341.503 453.969 366.022 cv
453.879 368.964 li
453.879 368.964 466.524 346.042 492.504 335.132 cv
cp
f
494.266 345.097 mo
494.266 345.097 466.805 353.683 458.801 379.015 cv
458.954 381.956 li
458.954 381.956 469.442 358.054 494.266 345.097 cv
cp
f
496.789 353.601 mo
496.789 353.601 470.145 364.065 464.157 389.921 cv
464.563 392.858 li
464.563 392.858 473.11 368.253 496.789 353.601 cv
cp
f
502.09 362.374 mo
502.09 362.374 475.438 372.847 469.454 398.702 cv
469.852 401.636 li
469.852 401.636 478.407 377.026 502.09 362.374 cv
cp
f
509.258 369.659 mo
509.258 369.659 482.609 380.132 476.618 405.983 cv
477.013 408.925 li
477.013 408.925 485.566 384.308 509.258 369.659 cv
cp
f
519.914 372.698 mo
519.914 372.698 493.281 383.167 487.281 409.03 cv
487.688 411.96 li
487.688 411.96 496.234 387.351 519.914 372.698 cv
cp
f
529.395 377.628 mo
529.395 377.628 502.75 388.085 496.766 413.96 cv
497.172 416.897 li
497.172 416.897 505.711 392.272 529.395 377.628 cv
cp
f
539.273 384.315 mo
539.273 384.315 512.633 394.776 506.637 420.636 cv
507.035 423.577 li
507.035 423.577 515.59 398.952 539.273 384.315 cv
cp
f
grestore
529.086 688.772 mo
524.141 688.772 518.953 688.351 513.668 687.507 cv
485.492 683.038 468.149 665.124 458.563 650.874 cv
443.79 628.937 437.18 599.948 442.11 578.749 cv
449.493 547.007 470.896 534.312 475.735 531.804 cv
482.074 526.687 495.227 521.007 512.773 521.007 cv
522.129 521.007 531.828 522.628 541.602 525.823 cv
585.781 540.265 601.766 584.644 598 622.218 cv
593.898 663.272 567.492 688.772 529.09 688.772 cv
529.086 688.772 529.086 688.772 529.086 688.772 cv
cp
f
479.485 537.538 mo
479.485 537.538 457.02 542.917 448.985 575.038 cv
438.985 615.038 463.305 672.624 514.734 680.792 cv
561.984 688.292 589.234 660.038 592.984 622.538 cv
596.734 585.042 578.484 545.038 539.484 532.288 cv
507.461 521.819 485.484 532.288 479.485 537.538 cv
cp
.670588 .215686 .372549 rgb
f
458.485 609.163 mo
458.485 609.163 461.485 649.292 492.984 666.167 cv
524.484 683.042 555.984 675.167 572.484 659.792 cv
572.484 659.792 552.609 672.542 527.484 670.667 cv
502.359 668.792 473.485 652.292 458.485 609.163 cv
cp
.27451 .207843 .145098 rgb
f
gsave
452.985 581.538 mo
452.985 581.538 453.485 640.046 491.484 660.038 cv
529.484 680.042 559.484 673.538 579.984 650.538 cv
579.984 650.538 601.984 625.538 572.484 629.538 cv
542.984 633.542 496.984 617.042 486.484 604.038 cv
475.985 591.042 458.477 562.038 452.985 581.538 cv
cp
clp
468.762 575.421 mo
468.762 575.421 445.344 590.304 449.344 616.187 cv
449.344 616.187 451.875 592.667 468.762 575.421 cv
cp
f
479.563 578.659 mo
479.563 578.659 454.36 596.843 453.836 626.71 cv
454.891 629.827 li
454.891 629.827 458.333 600.69 479.563 578.659 cv
cp
f
482.328 589.53 mo
482.328 589.53 458.625 609.628 460.442 639.437 cv
461.735 642.46 li
461.735 642.46 462.891 613.155 482.328 589.53 cv
cp
f
487.734 600.257 mo
487.734 600.257 465.743 622.198 469.954 651.765 cv
471.485 654.679 li
471.485 654.679 470.274 625.374 487.734 600.257 cv
cp
f
493.727 609.69 mo
493.727 609.69 474.599 631.71 480.762 659.522 cv
482.438 662.202 li
482.438 662.202 479.11 634.468 493.727 609.69 cv
cp
f
500.449 620.159 mo
500.449 620.159 484.559 643.632 492.809 668.581 cv
494.602 670.808 li
494.602 670.808 489.016 645.507 500.449 620.159 cv
cp
f
508.867 626.405 mo
508.867 626.405 493.934 651.448 504.914 677.741 cv
507.031 680.089 li
507.031 680.089 498.855 653.37 508.867 626.405 cv
cp
f
517.477 632.827 mo
517.477 632.827 504.727 659.062 517.898 684.319 cv
520.195 686.476 li
520.195 686.476 509.789 660.546 517.477 632.827 cv
cp
f
525.547 637.593 mo
525.547 637.593 514.734 664.69 529.727 688.913 cv
532.184 690.894 li
532.184 690.894 519.902 665.796 525.547 637.593 cv
cp
f
535.746 640.585 mo
535.746 640.585 524.938 667.687 539.93 691.913 cv
542.383 693.894 li
542.383 693.894 530.098 668.796 535.746 640.585 cv
cp
f
546.129 641.093 mo
546.129 641.093 535.324 668.194 550.324 692.417 cv
552.773 694.397 li
552.773 694.397 540.492 669.308 546.129 641.093 cv
cp
f
555.82 635.827 mo
555.82 635.827 545.016 662.921 560.004 687.147 cv
562.461 689.132 li
562.461 689.132 550.184 664.034 555.82 635.827 cv
cp
f
566.078 632.862 mo
566.078 632.862 555.281 659.956 570.27 684.19 cv
572.719 686.171 li
572.719 686.171 560.445 661.069 566.078 632.862 cv
cp
f
577.91 630.976 mo
577.91 630.976 567.105 658.069 582.102 682.296 cv
584.555 684.284 li
584.555 684.284 572.266 659.183 577.91 630.976 cv
cp
f
grestore
587.402 510.054 mo
563.613 510.054 543.727 502.53 529.887 488.296 cv
517.113 475.155 510.383 457.151 510.93 437.597 cv
510.914 437.476 509.188 378.124 573.387 365.12 cv
582.387 363.3 591.246 362.374 599.719 362.374 cv
639.492 362.374 670.254 383.101 678.094 415.175 cv
682.867 434.726 677.922 456.983 664.859 474.714 cv
649.512 495.534 624.578 508.007 594.656 509.831 cv
592.184 509.979 589.766 510.054 587.402 510.054 cv
cp
f
517.734 437.788 mo
517.734 437.788 514.734 380.038 573.984 368.038 cv
625.172 357.675 663.234 383.038 671.484 416.788 cv
679.734 450.538 655.742 499.288 594.242 503.038 cv
542.047 506.222 516.738 473.038 517.734 437.788 cv
cp
.670588 .215686 .372549 rgb
f
257.071 561.187 mo
246.821 561.187 236.094 558.948 225.176 554.538 cv
203.508 545.78 187.899 523.901 186.34 500.085 cv
184.915 478.476 195.282 459.819 214.766 448.894 cv
214.985 448.745 227.094 441.269 244.793 441.269 cv
250.93 441.269 257.063 442.171 263.032 443.948 cv
289.055 451.683 315.063 474.429 309.993 515.058 cv
306.434 543.511 286.161 561.187 257.071 561.187 cv
cp
.27451 .207843 .145098 rgb
f
218.485 452.038 mo
218.485 452.038 237.235 440.038 261.985 447.538 cv
286.735 455.038 309.235 476.788 304.735 513.538 cv
300.235 550.288 266.485 564.538 228.235 548.788 cv
191.168 533.526 176.485 476.038 218.485 452.038 cv
cp
.670588 .215686 .372549 rgb
f
339.415 395.093 mo
337.743 388.538 li
307.305 358.104 266.352 359.378 250.29 359.378 cv
245.672 359.378 242.454 359.647 240.95 359.804 cv
237.477 360.171 234.743 360.585 232.629 360.897 cv
230.204 361.265 228.454 361.53 226.922 361.53 cv
222.997 361.53 220.891 359.679 219.813 358.124 cv
217.907 355.366 218.333 352.39 218.993 350.183 cv
216.821 348.194 214.282 344.702 215.594 338.812 cv
217.383 330.772 224.438 326.694 236.579 326.694 cv
247.516 326.694 264.485 332.921 287.485 339.163 cv
342.25 354.03 357.399 380.187 358.04 381.429 cv
360.528 386.276 li
356.336 389.765 li
350.125 394.944 343.024 395.093 342.235 395.093 cv
339.415 395.093 li
cp
.27451 .207843 .145098 rgb
f
351.985 384.538 mo
351.985 384.538 337.735 356.788 285.235 342.538 cv
232.735 328.288 223.735 333.538 222.235 340.288 cv
220.735 347.038 228.235 344.788 225.985 350.788 cv
223.735 356.788 225.985 354.538 240.235 353.038 cv
254.485 351.538 305.485 351.538 342.235 388.288 cv
342.235 388.288 347.485 388.288 351.985 384.538 cv
cp
.862745 .713726 .309804 rgb
f
381.059 718.644 mo
375.973 718.644 370.594 718.28 365.079 717.546 cv
346.375 715.081 329.391 704.089 318.477 687.413 cv
306.997 669.87 304.055 648.894 310.204 628.362 cv
310.813 626.288 325.907 576.733 370.618 562.491 cv
381.165 559.132 391.782 557.429 402.165 557.429 cv
430.383 557.429 452.473 570.151 461.063 581.972 cv
469.676 593.819 486.875 626.101 460.653 669.94 cv
441.047 702.71 415.008 718.644 381.059 718.644 cv
cp
.27451 .207843 .145098 rgb
f
315.985 629.042 mo
315.985 629.042 330.235 580.288 372.235 566.788 cv
414.235 553.288 446.239 571.198 455.485 584.038 cv
468.985 602.788 474.673 632.136 454.735 665.792 cv
430.735 706.292 399.235 715.292 365.485 710.792 cv
331.735 706.292 303.985 669.542 315.985 629.042 cv
cp
.670588 .215686 .372549 rgb
f
646.734 688.081 mo
624.125 688.081 603.57 677.358 583.91 655.315 cv
582.484 653.507 556.336 619.101 563.539 579.085 cv
570.305 541.499 597.063 518.151 633.387 518.151 cv
636.785 518.151 640.289 518.366 643.793 518.784 cv
679.066 523.015 716.406 552.565 719.523 600.851 cv
722.355 644.78 703.582 675.495 668.008 685.104 cv
660.715 687.077 653.563 688.081 646.734 688.081 cv
cp
.27451 .207843 .145098 rgb
f
588.984 650.792 mo
588.984 650.792 563.484 617.792 570.234 580.288 cv
576.984 542.788 605.484 521.038 642.984 525.538 cv
673.602 529.214 709.734 554.788 712.734 601.288 cv
715.734 647.792 693.984 671.042 666.234 678.542 cv
638.484 686.042 613.734 678.542 588.984 650.792 cv
cp
.670588 .215686 .372549 rgb
f
766.277 644.077 mo
731.57 644.077 701.289 629.722 687.258 606.608 cv
676.086 588.194 676.324 565.749 687.949 543.401 cv
688.887 541.702 709.492 505.288 756.059 493.444 cv
763.766 491.487 771.672 490.491 779.555 490.491 cv
817.039 490.491 856.113 514.269 858.281 559.718 cv
860.539 607.077 832.09 637.538 780.234 643.304 cv
775.602 643.819 770.898 644.077 766.277 644.077 cv
cp
.27451 .207843 .145098 rgb
f
693.234 544.038 mo
693.234 544.038 712.984 508.288 757.234 497.038 cv
801.484 485.788 851.484 512.788 853.734 560.038 cv
855.984 607.288 823.977 631.597 779.484 636.542 cv
718.734 643.292 663.984 600.288 693.234 544.038 cv
cp
.670588 .215686 .372549 rgb
f
211.735 477.163 mo
211.735 477.163 212.11 482.038 210.61 482.038 cv
209.11 482.038 209.485 475.663 211.735 477.163 cv
cp
.27451 .207843 .145098 rgb
f
341.86 698.792 mo
341.86 698.792 336.61 696.167 339.61 695.042 cv
342.61 693.917 343.735 698.042 341.86 698.792 cv
cp
f
223.235 342.538 mo
223.235 342.538 221.86 334.663 231.243 335.038 cv
237.75 335.3 248.239 336.538 248.239 336.538 cv
248.239 336.538 237.743 336.042 238.743 339.042 cv
239.735 342.042 238.743 343.038 237.243 344.038 cv
235.743 345.042 239.235 347.038 236.735 348.538 cv
234.243 350.038 228.739 351.538 228.739 351.538 cv
228.739 351.538 232.243 347.038 229.743 342.538 cv
227.239 338.038 222.235 341.538 223.235 342.538 cv
cp
f
368.602 530.386 mo
360.375 530.386 352.118 529.183 344.071 526.815 cv
343.102 526.581 311.86 518.038 294.809 477.39 cv
287.29 459.468 286.766 435.94 295.079 415.272 cv
302.75 396.206 316.485 381.972 333.75 375.206 cv
343.77 371.28 353.915 369.288 363.907 369.288 cv
387.875 369.288 410.122 380.749 424.946 400.733 cv
445.422 428.331 453.223 487.378 418.313 513.491 cv
403.325 524.698 386.594 530.386 368.602 530.386 cv
cp
f
345.985 520.288 mo
345.985 520.288 317.485 514.663 299.485 475.663 cv
285.985 446.413 299.239 393.417 336.235 378.913 cv
371.133 365.233 404.11 379.663 421.36 402.913 cv
438.61 426.163 448.301 485.71 416.11 509.788 cv
388.368 530.538 358.743 524.038 345.985 520.288 cv
cp
.670588 .215686 .372549 rgb
f
365.86 486.538 mo
365.86 486.538 366.235 491.038 363.61 490.663 cv
360.985 490.288 362.86 484.663 365.86 486.538 cv
cp
.27451 .207843 .145098 rgb
f
316.743 400.038 mo
316.743 400.038 302.235 417.538 304.235 453.538 cv
306.243 489.538 340.735 521.038 388.235 515.038 cv
388.235 515.038 342.739 511.542 321.739 480.042 cv
300.739 448.542 312.243 411.538 316.743 400.038 cv
cp
f
gsave
315.61 399.163 mo
315.61 399.163 301.36 431.788 307.735 453.913 cv
314.11 476.038 326.485 512.038 386.86 514.663 cv
386.86 514.663 339.61 493.288 333.61 459.538 cv
327.61 425.788 335.86 392.788 335.86 392.788 cv
335.86 392.788 320.485 390.538 315.61 399.163 cv
cp
clp
330.715 395.038 mo
330.715 395.038 303.422 400.069 297.454 425.577 cv
297.454 425.577 308.61 404.706 330.715 395.038 cv
cp
f
339.516 402.077 mo
339.516 402.077 309.344 409.511 297.68 437.007 cv
297.485 440.296 li
297.485 440.296 311.579 414.565 339.516 402.077 cv
cp
f
338.008 413.198 mo
338.008 413.198 308.508 422.96 299.032 451.288 cv
299.102 454.573 li
299.102 454.573 311.145 427.827 338.008 413.198 cv
cp
f
339.016 425.167 mo
339.016 425.167 310.395 437.28 303.235 466.276 cv
303.575 469.55 li
303.575 469.55 313.415 441.921 339.016 425.167 cv
cp
f
341.04 436.171 mo
341.04 436.171 315.059 449.417 310.368 477.522 cv
310.911 480.624 li
310.911 480.624 318.204 453.667 341.04 436.171 cv
cp
f
343.348 448.382 mo
343.348 448.382 319.836 464.206 318.141 490.421 cv
318.969 493.167 li
318.969 493.167 323.262 467.608 343.348 448.382 cv
cp
f
348.829 457.327 mo
348.829 457.327 325.594 474.968 325.938 503.452 cv
327.016 506.413 li
327.016 506.413 329.446 478.585 348.829 457.327 cv
cp
f
354.399 466.515 mo
354.399 466.515 332.743 486.054 335.516 514.413 cv
336.844 517.272 li
336.844 517.272 336.891 489.335 354.399 466.515 cv
cp
f
360.094 473.944 mo
360.094 473.944 339.93 495.026 344.766 523.101 cv
346.301 525.862 li
346.301 525.862 344.305 497.991 360.094 473.944 cv
cp
f
368.426 480.542 mo
368.426 480.542 348.266 501.624 353.098 529.698 cv
354.633 532.456 li
354.633 532.456 352.633 504.585 368.426 480.542 cv
cp
f
377.875 484.897 mo
377.875 484.897 357.715 505.979 362.543 534.062 cv
364.079 536.815 li
364.079 536.815 362.086 508.948 377.875 484.897 cv
cp
f
388.821 483.64 mo
388.821 483.64 368.665 504.722 373.5 532.804 cv
375.036 535.554 li
375.036 535.554 373.04 507.687 388.821 483.64 cv
cp
f
399.454 484.733 mo
399.454 484.733 379.29 505.812 384.125 533.894 cv
385.665 536.651 li
385.665 536.651 383.661 508.78 399.454 484.733 cv
cp
f
411.129 487.413 mo
411.129 487.413 390.973 508.491 395.801 536.573 cv
397.336 539.327 li
397.336 539.327 395.336 511.456 411.129 487.413 cv
cp
f
grestore
395.11 385.288 mo
395.11 385.288 421.735 396.163 429.985 432.913 cv
438.235 469.663 425.11 495.913 412.735 506.413 cv
412.735 506.413 437.11 481.288 425.485 434.038 cv
415.352 392.87 395.11 385.288 395.11 385.288 cv
cp
1 1 1 rgb
f
298.735 422.788 mo
298.735 422.788 289.36 456.163 307.735 485.788 cv
326.11 515.413 351.235 517.663 366.985 519.913 cv
366.985 519.913 329.485 516.163 311.485 484.288 cv
293.485 452.413 298.735 422.788 298.735 422.788 cv
cp
f
243.739 347.538 mo
243.739 347.538 271.243 338.038 318.243 363.038 cv
318.243 363.038 296.735 355.038 286.235 352.038 cv
278.477 349.827 273.743 347.538 262.743 347.538 cv
251.735 347.538 243.739 347.538 243.739 347.538 cv
cp
.27451 .207843 .145098 rgb
f
524.238 442.038 mo
524.238 442.038 524.742 482.038 571.742 493.538 cv
618.738 505.038 668.238 474.538 671.238 439.538 cv
671.238 439.538 654.242 484.538 601.742 486.538 cv
556.242 488.272 541.742 479.538 524.238 442.038 cv
cp
f
654.105 560.565 mo
624.414 544.089 602.613 505.194 617.531 468.62 cv
617.988 467.28 632.168 427.921 675.668 417.843 cv
704.945 411.062 730.652 416.104 751.055 427.425 cv
761.883 433.429 770.238 439.358 778.969 450.632 cv
790.371 465.335 794.664 484.272 791.078 503.948 cv
787.117 525.671 773.898 545.772 756.594 556.401 cv
725.613 575.413 694.5 577.944 661.461 564.136 cv
658.98 563.093 656.508 561.897 654.105 560.565 cv
cp
f
623.836 471.19 mo
623.836 471.19 635.848 432.39 675.867 421.729 cv
712.773 411.897 752.75 421.788 777.242 453.39 cv
801.734 484.991 781.652 533.034 753.031 550.601 cv
724.406 568.171 695.414 570.956 664.09 557.858 cv
632.754 544.761 609.57 506.163 623.836 471.19 cv
cp
.670588 .215686 .372549 rgb
f
662.625 433.245 mo
662.625 433.245 699.375 411.323 744.598 431.843 cv
781.57 448.624 784.828 474.757 784.828 474.757 cv
784.828 474.757 751.922 407.319 662.625 433.245 cv
cp
1 1 1 rgb
f
625.789 493.437 mo
625.789 493.437 621.574 518.546 654.125 542.323 cv
686.68 566.108 752.531 564.913 776.344 515.796 cv
776.344 515.796 759.078 547.956 715.324 550.554 cv
671.566 553.144 634.5 525.14 625.789 493.437 cv
cp
.27451 .207843 .145098 rgb
f
gsave
625.789 493.437 mo
625.789 493.437 626.523 523.007 661.313 541.737 cv
696.102 560.468 748.348 558.011 774.656 518.858 cv
774.656 518.858 731.93 544.323 692.484 524.726 cv
653.047 505.128 647.742 493.03 639.672 487.987 cv
631.609 482.94 622.336 485.229 625.789 493.437 cv
cp
clp
635.664 483.983 mo
635.664 483.983 619.195 506.323 632.289 529.007 cv
632.289 529.007 626.148 506.159 635.664 483.983 cv
cp
f
646.891 483.097 mo
646.891 483.097 629.977 509.159 640.281 537.194 cv
642.387 539.726 li
642.387 539.726 635.063 511.319 646.891 483.097 cv
cp
f
653.406 492.233 mo
653.406 492.233 638.566 519.538 651.035 546.679 cv
653.336 549.03 li
653.336 549.03 643.816 521.288 653.406 492.233 cv
cp
f
662.328 500.276 mo
662.328 500.276 649.742 528.694 664.359 554.745 cv
666.844 556.897 li
666.844 556.897 655.113 530.015 662.328 500.276 cv
cp
f
671.332 506.921 mo
671.332 506.921 661.441 534.358 677.242 558.065 cv
679.766 559.952 li
679.766 559.952 666.648 535.304 671.332 506.921 cv
cp
f
681.367 514.241 mo
681.367 514.241 675.047 541.874 691.746 562.155 cv
694.219 563.593 li
694.219 563.593 679.875 542.015 681.367 514.241 cv
cp
f
691.484 517.026 mo
691.484 517.026 686.609 545.78 706.348 566.327 cv
709.16 567.749 li
709.16 567.749 691.887 545.788 691.484 517.026 cv
cp
f
701.836 519.913 mo
701.836 519.913 699.406 548.976 720.836 567.769 cv
723.75 568.944 li
723.75 568.944 704.68 548.534 701.836 519.913 cv
cp
f
711.078 521.437 mo
711.078 521.437 710.789 550.604 733.523 567.772 cv
736.523 568.733 li
736.523 568.733 716.004 549.78 711.078 521.437 cv
cp
f
721.664 520.546 mo
721.664 520.546 721.375 549.714 744.109 566.886 cv
747.117 567.847 li
747.117 567.847 726.594 548.886 721.664 520.546 cv
cp
f
731.539 517.253 mo
731.539 517.253 731.258 546.429 753.984 563.601 cv
756.992 564.562 li
756.992 564.562 736.469 545.601 731.539 517.253 cv
cp
f
738.664 508.854 mo
738.664 508.854 738.383 538.015 761.117 555.194 cv
764.121 556.147 li
764.121 556.147 743.594 537.19 738.664 508.854 cv
cp
f
747.164 502.382 mo
747.164 502.382 746.871 531.546 769.609 548.722 cv
772.625 549.679 li
772.625 549.679 752.086 530.718 747.164 502.382 cv
cp
f
757.516 496.343 mo
757.516 496.343 757.227 525.503 779.961 542.69 cv
782.965 543.651 li
782.965 543.651 762.434 524.683 757.516 496.343 cv
cp
f
grestore
633.453 529.593 mo
633.453 529.593 656.336 564.19 701.898 563.765 cv
746.871 563.347 758.914 546.96 767.402 535.55 cv
767.402 535.55 739.656 563.8 695.379 558.464 cv
651.105 553.124 633.453 529.593 633.453 529.593 cv
cp
1 1 1 rgb
f
393.926 400.483 mo
347.86 400.663 326.368 370.312 322.75 344.999 cv
320.711 324.96 323.11 285.538 366.297 270.847 cv
376.348 267.429 386.719 265.71 397.125 265.71 cv
432.176 265.71 463.559 285.53 471.751 312.835 cv
477.407 331.675 474.188 352.851 463.157 369.476 cv
455.196 381.464 439.594 396.417 410.461 399.554 cv
404.711 400.171 399.149 400.483 393.926 400.483 cv
cp
.27451 .207843 .145098 rgb
f
327.235 344.788 mo
327.235 344.788 314.86 294.538 368.907 275.366 cv
414.438 259.218 459.829 282.991 469.149 313.483 cv
478.478 343.979 461.422 390.538 410.86 395.413 cv
368.11 399.538 332.68 382.147 327.235 344.788 cv
cp
.670588 .215686 .372549 rgb
f
351.739 321.042 mo
351.739 321.042 352.743 329.542 348.739 327.042 cv
344.735 324.538 351.739 318.042 351.739 321.042 cv
cp
.27451 .207843 .145098 rgb
f
345.235 302.788 mo
345.235 302.788 356.758 279.179 394.235 277.788 cv
434.735 276.288 450.985 296.788 450.985 296.788 cv
450.985 296.788 392.485 260.038 345.235 302.788 cv
cp
1 1 1 rgb
f
336.985 353.788 mo
336.985 353.788 347.485 388.288 396.985 386.788 cv
446.485 385.288 459.985 346.288 459.235 328.288 cv
459.235 328.288 451.735 367.288 408.985 377.038 cv
366.235 386.788 343.735 365.788 336.985 353.788 cv
cp
.27451 .207843 .145098 rgb
f
gsave
336.985 353.788 mo
336.985 353.788 347.86 384.163 392.86 383.038 cv
437.86 381.913 458.86 348.538 459.985 321.163 cv
459.985 321.163 439.36 339.913 417.61 344.788 cv
395.86 349.663 372.235 353.038 360.61 344.788 cv
348.985 336.538 332.86 340.288 336.985 353.788 cv
cp
clp
341.125 343.89 mo
341.125 343.89 335.524 368.14 354.375 382.155 cv
354.375 382.155 341.192 365.53 341.125 343.89 cv
cp
f
350.055 339.167 mo
350.055 339.167 345.407 366.64 363.868 386.046 cv
366.5 387.374 li
366.5 387.374 350.36 366.604 350.055 339.167 cv
cp
f
358.672 344.374 mo
358.672 344.374 356.172 372.124 376.094 390.03 cv
378.829 391.144 li
378.829 391.144 361.125 371.69 358.672 344.374 cv
cp
f
368.872 347.812 mo
368.872 347.812 368.625 375.683 389.918 391.921 cv
392.743 392.812 li
392.743 392.812 373.524 374.858 368.872 347.812 cv
cp
f
378.649 350.073 mo
378.649 350.073 380.282 376.179 401.719 390.069 cv
404.473 390.726 li
404.473 390.726 384.891 375.104 378.649 350.073 cv
cp
f
389.52 352.534 mo
389.52 352.534 394.149 377.526 415.102 388.272 cv
417.665 388.569 li
417.665 388.569 398.168 375.921 389.52 352.534 cv
cp
f
398.829 351.218 mo
398.829 351.218 405.055 376.624 428.61 386.507 cv
431.438 386.675 li
431.438 386.675 409.399 374.749 398.829 351.218 cv
cp
f
408.383 349.917 mo
408.383 349.917 416.727 374.702 441.047 382.542 cv
443.872 382.472 li
443.872 382.472 420.903 372.464 408.383 349.917 cv
cp
f
416.52 347.882 mo
416.52 347.882 426.672 371.987 451.489 378.03 cv
454.305 377.753 li
454.305 377.753 430.665 369.452 416.52 347.882 cv
cp
f
424.922 343.382 mo
424.922 343.382 435.071 367.491 459.891 373.53 cv
462.711 373.249 li
462.711 373.249 439.067 364.952 424.922 343.382 cv
cp
f
431.883 337.163 mo
431.883 337.163 442.024 361.272 466.852 367.315 cv
469.665 367.038 li
469.665 367.038 446.028 358.733 431.883 337.163 cv
cp
f
434.743 327.71 mo
434.743 327.71 444.899 351.815 469.727 357.854 cv
472.536 357.577 li
472.536 357.577 448.899 349.272 434.743 327.71 cv
cp
f
439.442 319.354 mo
439.442 319.354 449.59 343.46 474.411 349.507 cv
477.228 349.226 li
477.228 349.226 453.586 340.925 439.442 319.354 cv
cp
f
445.817 310.706 mo
445.817 310.706 455.961 334.804 480.785 340.858 cv
483.598 340.577 li
483.598 340.577 459.961 332.272 445.817 310.706 cv
cp
f
grestore
343.735 375.163 mo
343.735 375.163 359.11 397.288 402.235 395.413 cv
445.36 393.538 461.485 368.788 467.86 344.788 cv
467.86 344.788 457.676 385.995 404.86 390.163 cv
362.11 393.538 343.735 375.163 343.735 375.163 cv
cp
1 1 1 rgb
f
474.173 500.034 mo
443.141 500.034 417.016 477.136 407.028 461.741 cv
406.325 460.808 384.5 430.698 391.844 398.046 cv
398.239 369.644 423.594 340.894 459.688 340.894 cv
463.375 340.894 467.133 341.21 470.853 341.827 cv
509.68 348.3 534.785 377.249 538.02 419.269 cv
541.043 458.624 527.375 483.683 496.211 495.874 cv
489.156 498.636 481.742 500.034 474.173 500.034 cv
cp
.27451 .207843 .145098 rgb
f
412.735 458.038 mo
412.735 458.038 389.493 427.542 396.243 397.542 cv
402.993 367.542 433.743 340.038 469.743 346.038 cv
505.742 352.038 530.234 380.038 533.238 419.038 cv
536.238 458.038 520.234 479.167 493.734 489.538 cv
459.235 503.038 424.743 476.538 412.735 458.038 cv
cp
.670588 .215686 .372549 rgb
f
421.36 362.034 mo
421.36 362.034 398.493 372.726 398.618 410.28 cv
398.743 447.839 438.969 496.601 492.984 487.37 cv
492.984 487.37 456.618 492.159 428.426 460.757 cv
400.243 429.339 400.844 386.069 421.36 362.034 cv
cp
.27451 .207843 .145098 rgb
f
gsave
421.36 362.034 mo
421.36 362.034 397.821 378.909 403.375 415.354 cv
408.93 451.8 442.067 489.655 489.492 487.788 cv
489.492 487.788 443.379 469.776 435.75 429.358 cv
428.133 388.944 434.766 378.288 434.055 369.452 cv
433.336 360.612 425.954 354.917 421.36 362.034 cv
cp
clp
434.915 364.229 mo
434.915 364.229 406.981 364.198 396.399 386.55 cv
396.399 386.55 411.258 369.327 434.915 364.229 cv
cp
f
442.325 372.171 mo
442.325 372.171 411.11 373.858 394.524 397.058 cv
393.727 400.038 li
393.727 400.038 412.395 378.866 442.325 372.171 cv
cp
f
438.797 382.101 mo
438.797 382.101 407.813 386.03 393.243 410.366 cv
392.708 413.39 li
392.708 413.39 409.524 390.937 438.797 382.101 cv
cp
f
437.59 393.233 mo
437.59 393.233 407.051 399.468 394.649 424.812 cv
394.383 427.87 li
394.383 427.87 409.188 404.233 437.59 393.233 cv
cp
f
437.579 403.659 mo
437.579 403.659 409.442 411.382 399.641 436.319 cv
399.61 439.249 li
399.61 439.249 411.774 415.812 437.579 403.659 cv
cp
f
437.625 415.229 mo
437.625 415.229 411.458 425.737 404.965 449.46 cv
405.274 452.112 li
405.274 452.112 414.211 429.437 437.625 415.229 cv
cp
f
441.399 424.358 mo
441.399 424.358 415.184 436.565 410.286 462.722 cv
410.821 465.616 li
410.821 465.616 418.321 440.53 441.399 424.358 cv
cp
f
445.231 433.722 mo
445.231 433.722 420.219 447.937 417.762 474.394 cv
418.54 477.229 li
418.54 477.229 423.719 451.651 445.231 433.722 cv
cp
f
449.497 441.499 mo
449.497 441.499 425.68 457.378 425.309 483.913 cv
426.329 486.698 li
426.329 486.698 429.461 460.839 449.497 441.499 cv
cp
f
456.54 448.948 mo
456.54 448.948 432.715 464.835 432.352 491.374 cv
433.36 494.155 li
433.36 494.155 436.5 468.288 456.54 448.948 cv
cp
f
465.086 454.546 mo
465.086 454.546 441.27 470.437 440.895 496.968 cv
441.907 499.757 li
441.907 499.757 445.043 473.89 465.086 454.546 cv
cp
f
476.149 455.257 mo
476.149 455.257 452.344 471.14 451.961 497.679 cv
452.985 500.46 li
452.985 500.46 456.118 474.601 476.149 455.257 cv
cp
f
486.461 458.062 mo
486.461 458.062 462.645 473.937 462.274 500.487 cv
463.297 503.272 li
463.297 503.272 466.418 477.397 486.461 458.062 cv
cp
f
497.531 462.503 mo
497.531 462.503 473.712 478.378 473.337 504.921 cv
474.353 507.71 li
474.353 507.71 477.485 481.835 497.531 462.503 cv
cp
f
grestore
401.731 589.647 mo
375.833 589.647 350.266 577.944 335.016 559.101 cv
321.383 542.253 316.711 521.304 321.508 498.499 cv
322.188 493.472 328.977 454.53 375.094 443.894 cv
381.665 442.378 388.301 441.608 394.829 441.608 cv
429.375 441.608 458.672 462.983 469.477 496.062 cv
476.169 516.573 473.298 539.632 461.766 557.749 cv
450.575 575.343 432.797 586.46 411.715 589.05 cv
408.458 589.448 405.094 589.647 401.731 589.647 cv
cp
f
327.235 500.038 mo
327.235 500.038 330.063 458.464 375.243 448.038 cv
414.243 439.038 453.243 460.288 465.243 497.038 cv
477.243 533.788 459.739 578.538 410.485 583.288 cv
367.61 587.421 315.235 556.288 327.235 500.038 cv
cp
.670588 .215686 .372549 rgb
f
351.235 467.788 mo
351.235 467.788 380.485 443.413 417.61 457.288 cv
454.735 471.163 461.11 502.663 462.235 509.788 cv
462.235 509.788 447.899 474.679 419.485 463.663 cv
397.235 455.038 377.86 455.038 351.235 467.788 cv
cp
1 1 1 rgb
f
332.86 511.288 mo
332.86 511.288 329.11 546.913 357.235 564.913 cv
385.36 582.913 431.485 584.788 453.985 548.038 cv
453.985 548.038 437.11 569.788 406.735 571.663 cv
376.36 573.538 357.985 561.538 347.86 549.538 cv
337.735 537.538 332.86 518.788 332.86 511.288 cv
cp
.27451 .207843 .145098 rgb
f
gsave
329.239 505.038 mo
329.239 505.038 335.743 557.038 372.243 569.538 cv
408.739 582.042 451.086 562.308 462.411 535.425 cv
462.411 535.425 397.243 547.042 384.243 522.042 cv
371.239 497.038 339.243 477.538 329.239 505.038 cv
cp
clp
346.852 494.843 mo
346.852 494.843 325.61 512.698 333.024 537.823 cv
333.024 537.823 332.407 514.171 346.852 494.843 cv
cp
f
357.985 496.616 mo
357.985 496.616 335.426 517.983 338.868 547.651 cv
340.325 550.601 li
340.325 550.601 339.868 521.272 357.985 496.616 cv
cp
f
362.168 507.022 mo
362.168 507.022 341.344 530.085 347.098 559.397 cv
348.786 562.218 li
348.786 562.218 346.04 533.019 362.168 507.022 cv
cp
f
368.961 516.937 mo
368.961 516.937 350.063 541.604 358.161 570.351 cv
360.071 573.03 li
360.071 573.03 354.977 544.147 368.961 516.937 cv
cp
f
376.149 525.499 mo
376.149 525.499 360.106 549.854 369.915 576.608 cv
371.918 579.038 li
371.918 579.038 364.946 551.995 376.149 525.499 cv
cp
f
384.196 534.979 mo
384.196 534.979 371.567 560.351 383.047 583.983 cv
385.118 585.96 li
385.118 585.96 376.231 561.616 384.196 534.979 cv
cp
f
393.375 540.046 mo
393.375 540.046 381.891 566.858 396.266 591.456 cv
398.665 593.499 li
398.665 593.499 387.024 568.108 393.375 540.046 cv
cp
f
402.762 545.28 mo
402.762 545.28 393.586 572.968 410.004 596.257 cv
412.571 598.085 li
412.571 598.085 398.813 573.772 402.762 545.28 cv
cp
f
411.383 548.929 mo
411.383 548.929 404.266 577.218 422.344 599.237 cv
425.04 600.878 li
425.04 600.878 409.536 577.636 411.383 548.929 cv
cp
f
421.887 550.546 mo
421.887 550.546 414.774 578.835 432.844 600.858 cv
435.54 602.495 li
435.54 602.495 420.036 579.253 421.887 550.546 cv
cp
f
432.25 549.667 mo
432.25 549.667 425.141 577.956 443.215 599.983 cv
445.911 601.62 li
445.911 601.62 430.407 578.374 432.25 549.667 cv
cp
f
441.153 543.163 mo
441.153 543.163 434.04 571.452 452.118 593.479 cv
454.813 595.112 li
454.813 595.112 439.305 571.87 441.153 543.163 cv
cp
f
450.93 538.862 mo
450.93 538.862 443.821 567.151 461.895 589.175 cv
464.59 590.815 li
464.59 590.815 449.086 567.569 450.93 538.862 cv
cp
f
462.411 535.425 mo
462.411 535.425 455.297 563.71 473.368 585.733 cv
476.063 587.374 li
476.063 587.374 460.559 564.128 462.411 535.425 cv
cp
f
grestore
460.735 346.288 mo
460.735 346.288 528.234 347.038 531.984 428.038 cv
531.984 428.038 527.484 361.288 460.735 346.288 cv
cp
1 1 1 rgb
f
585.234 559.288 mo
585.234 559.288 569.484 579.913 576.984 609.538 cv
583.156 633.917 607.359 673.292 664.734 672.542 cv
664.734 672.542 627.539 667.854 599.484 637.292 cv
574.359 609.913 578.484 569.788 585.234 559.288 cv
cp
.27451 .207843 .145098 rgb
f
gsave
580.234 556.038 mo
580.234 556.038 564.227 602.038 593.234 636.542 cv
622.234 671.042 657.227 672.542 687.734 670.538 cv
687.734 670.538 634.742 647.534 625.234 623.042 cv
615.734 598.542 614.734 584.038 614.734 572.038 cv
614.734 560.038 595.742 537.538 580.234 556.038 cv
cp
clp
597.414 556.839 mo
597.414 556.839 570.961 565.202 568.172 591.249 cv
568.172 591.249 576.664 569.167 597.414 556.839 cv
cp
f
607.02 562.749 mo
607.02 562.749 577.992 573.843 569.813 602.573 cv
570.031 605.851 li
570.031 605.851 580.84 578.585 607.02 562.749 cv
cp
f
606.898 573.96 mo
606.898 573.96 578.824 587.292 572.918 616.569 cv
573.391 619.827 li
573.391 619.827 582.039 591.796 606.898 573.96 cv
cp
f
609.367 585.718 mo
609.367 585.718 582.477 601.272 578.941 630.929 cv
579.672 634.132 li
579.672 634.132 586.039 605.503 609.367 585.718 cv
cp
f
612.738 596.378 mo
612.738 596.378 588.586 612.737 587.391 641.206 cv
588.328 644.218 li
588.328 644.218 592.234 616.569 612.738 596.378 cv
cp
f
616.535 608.226 mo
616.535 608.226 595.148 626.827 596.707 653.054 cv
597.867 655.667 li
597.867 655.667 598.977 629.78 616.535 608.226 cv
cp
f
623.07 616.421 mo
623.07 616.421 602.195 636.788 606.055 665.019 cv
607.492 667.831 li
607.492 667.831 606.461 639.905 623.07 616.421 cv
cp
f
629.734 624.847 mo
629.734 624.847 610.672 646.913 616.91 674.71 cv
618.574 677.382 li
618.574 677.382 615.18 649.655 629.734 624.847 cv
cp
f
636.313 631.515 mo
636.313 631.515 618.898 654.929 627.156 682.194 cv
629.023 684.741 li
629.023 684.741 623.609 657.331 636.313 631.515 cv
cp
f
645.398 637.034 mo
645.398 637.034 627.984 660.448 636.246 687.718 cv
638.109 690.261 li
638.109 690.261 632.688 662.851 645.398 637.034 cv
cp
f
655.301 640.198 mo
655.301 640.198 637.898 663.601 646.16 690.874 cv
648.023 693.421 li
648.023 693.421 642.602 666.015 655.301 640.198 cv
cp
f
666.023 637.597 mo
666.023 637.597 648.617 661.011 656.871 688.269 cv
658.734 690.812 li
658.734 690.812 653.328 663.405 666.023 637.597 cv
cp
f
676.699 637.374 mo
676.699 637.374 659.297 660.776 667.555 688.046 cv
669.41 690.589 li
669.41 690.589 663.996 663.179 676.699 637.374 cv
cp
f
688.617 638.593 mo
688.617 638.593 671.211 661.995 679.469 689.265 cv
681.336 691.808 li
681.336 691.808 675.914 664.397 688.617 638.593 cv
cp
f
grestore
546.328 589.308 mo
534.406 589.308 524.75 586.155 518.742 583.519 cv
489.234 570.534 472.985 546.909 470.45 513.304 cv
470.407 512.729 466.911 457.226 515.777 436.046 cv
525.531 431.819 535.18 429.679 544.453 429.679 cv
574.742 429.679 593.625 451.694 602.188 464.819 cv
618.152 489.312 626.672 526.878 602.68 558.87 cv
583.813 584.022 561.621 589.308 546.328 589.308 cv
cp
f
477.235 512.788 mo
477.235 512.788 473.485 461.788 518.484 442.288 cv
559.25 424.624 587.484 449.788 598.734 467.038 cv
609.984 484.288 621.984 521.788 597.234 554.788 cv
572.484 587.788 539.984 587.788 521.234 579.538 cv
502.484 571.288 480.235 552.538 477.235 512.788 cv
cp
.670588 .215686 .372549 rgb
f
696.234 591.538 mo
696.234 591.538 713.484 624.542 768.234 629.042 cv
822.984 633.542 850.734 587.788 845.484 561.538 cv
845.484 561.538 838.734 611.788 782.484 620.792 cv
726.234 629.792 696.234 591.538 696.234 591.538 cv
cp
.27451 .207843 .145098 rgb
f
gsave
693.734 590.538 mo
693.734 590.538 724.727 629.534 773.234 626.042 cv
821.734 622.538 848.734 585.538 845.734 559.038 cv
842.734 532.542 827.234 546.038 810.734 560.038 cv
794.234 574.038 752.309 596.319 730.273 583.679 cv
708.234 571.038 671.73 562.542 693.734 590.538 cv
cp
clp
700.32 574.769 mo
700.32 574.769 690.141 600.585 708.621 619.163 cv
708.621 619.163 696.82 598.655 700.32 574.769 cv
cp
f
710.953 571.03 mo
710.953 571.03 701.285 600.565 718.441 625.022 cv
721.125 626.909 li
721.125 626.909 706.758 601.343 710.953 571.03 cv
cp
f
719.59 578.19 mo
719.59 578.19 712.254 608.394 731.266 631.421 cv
734.098 633.108 li
734.098 633.108 717.781 608.733 719.59 578.19 cv
cp
f
730.273 583.679 mo
730.273 583.679 725.406 614.366 746.215 635.792 cv
749.168 637.245 li
749.168 637.245 730.938 614.265 730.273 583.679 cv
cp
f
740.672 587.784 mo
740.672 587.784 738.164 616.843 759.516 635.702 cv
762.453 636.874 li
762.453 636.874 743.438 616.421 740.672 587.784 cv
cp
f
752.266 592.296 mo
752.266 592.296 753.234 620.616 774.586 635.933 cv
777.352 636.683 li
777.352 636.683 757.938 619.507 752.266 592.296 cv
cp
f
762.742 592.382 mo
762.742 592.382 765.414 621.425 789.766 636.214 cv
792.855 636.866 li
792.855 636.866 770.523 620.077 762.742 592.382 cv
cp
f
773.484 592.511 mo
773.484 592.511 778.617 621.226 804.133 633.882 cv
807.258 634.28 li
807.258 634.28 783.586 619.444 773.484 592.511 cv
cp
f
782.813 591.612 mo
782.813 591.612 790.02 619.878 816.406 630.647 cv
819.555 630.8 li
819.555 630.8 794.852 617.733 782.813 591.612 cv
cp
f
792.828 588.03 mo
792.828 588.03 800.031 616.304 826.418 627.062 cv
829.57 627.218 li
829.57 627.218 804.859 614.159 792.828 588.03 cv
cp
f
801.523 582.327 mo
801.523 582.327 808.734 610.589 835.117 621.354 cv
838.266 621.515 li
838.266 621.515 813.57 608.456 801.523 582.327 cv
cp
f
806.258 572.366 mo
806.258 572.366 813.469 600.632 839.844 611.397 cv
842.992 611.554 li
842.992 611.554 818.297 598.487 806.258 572.366 cv
cp
f
812.801 563.929 mo
812.801 563.929 820.02 592.194 846.398 602.96 cv
849.547 603.124 li
849.547 603.124 824.848 590.058 812.801 563.929 cv
cp
f
821.258 555.444 mo
821.258 555.444 828.469 583.71 854.848 594.468 cv
858 594.632 li
858 594.632 833.297 581.569 821.258 555.444 cv
cp
f
grestore
333.985 683.042 mo
333.985 683.042 353.239 707.792 395.239 699.542 cv
437.239 691.292 478.735 633.542 454.735 591.538 cv
454.735 591.538 468.235 635.042 429.985 670.292 cv
400.348 697.601 363.739 701.042 333.985 683.042 cv
cp
f
gsave
324.985 679.292 mo
324.985 679.292 359.485 710.792 402.235 692.792 cv
444.985 674.792 465.235 637.292 454.735 591.538 cv
454.735 591.538 438.235 573.538 428.485 590.038 cv
418.735 606.538 423.235 638.042 380.485 645.542 cv
337.735 653.042 306.235 655.292 324.985 679.292 cv
cp
clp
330.985 656.042 mo
330.985 656.042 330.985 683.792 354.985 694.292 cv
354.985 694.292 336.485 679.538 330.985 656.042 cv
cp
f
339.508 648.659 mo
339.508 648.659 341.344 679.679 366.27 696.144 cv
369.461 696.917 li
369.461 696.917 346.723 678.39 339.508 648.659 cv
cp
f
350.168 652.151 mo
350.168 652.151 354.422 682.937 380.555 697.397 cv
383.801 697.925 li
383.801 697.925 359.684 681.233 350.168 652.151 cv
cp
f
362.122 653.335 mo
362.122 653.335 368.848 683.675 396.059 695.979 cv
399.34 696.237 li
399.34 696.237 373.958 681.554 362.122 653.335 cv
cp
f
373.301 653.347 mo
373.301 653.347 381.622 681.296 408.411 691.011 cv
411.563 691.034 li
411.563 691.034 386.375 678.976 373.301 653.347 cv
cp
f
385.743 653.288 mo
385.743 653.288 397.032 679.28 422.508 685.702 cv
425.356 685.386 li
425.356 685.386 401.004 676.526 385.743 653.288 cv
cp
f
395.524 649.526 mo
395.524 649.526 408.657 675.565 436.735 680.394 cv
439.844 679.866 li
439.844 679.866 412.915 672.437 395.524 649.526 cv
cp
f
405.571 645.706 mo
405.571 645.706 420.86 670.546 449.25 672.968 cv
452.305 672.179 li
452.305 672.179 424.84 667.062 405.571 645.706 cv
cp
f
413.915 641.452 mo
413.915 641.452 430.985 665.101 459.477 665.44 cv
462.461 664.433 li
462.461 664.433 434.696 661.339 413.915 641.452 cv
cp
f
421.911 634.456 mo
421.911 634.456 438.985 658.104 467.473 658.444 cv
470.461 657.437 li
470.461 657.437 442.696 654.343 421.911 634.456 cv
cp
f
427.911 625.96 mo
427.911 625.96 444.985 649.608 473.474 649.948 cv
476.462 648.94 li
476.462 648.94 448.696 645.847 427.911 625.96 cv
cp
f
428.661 614.956 mo
428.661 614.956 445.735 638.604 474.224 638.944 cv
477.212 637.937 li
477.212 637.937 449.446 634.843 428.661 614.956 cv
cp
f
431.661 604.706 mo
431.661 604.706 448.735 628.351 477.224 628.69 cv
480.212 627.683 li
480.212 627.683 452.446 624.589 431.661 604.706 cv
cp
f
436.415 593.706 mo
436.415 593.706 453.485 617.358 481.977 617.698 cv
484.961 616.69 li
484.961 616.69 457.196 613.597 436.415 593.706 cv
cp
f
grestore
201.235 512.788 mo
201.235 512.788 211.36 539.038 241.36 546.538 cv
271.36 554.038 293.485 537.538 297.985 522.538 cv
297.985 522.538 281.86 546.538 254.86 543.913 cv
227.86 541.288 209.485 527.413 201.235 512.788 cv
cp
f
gsave
198.235 510.538 mo
198.235 510.538 215.485 546.538 254.86 543.913 cv
294.235 541.288 304.735 519.538 303.235 495.538 cv
303.235 495.538 294.258 515.882 263.872 518.835 cv
233.485 521.788 207.235 497.038 198.235 510.538 cv
cp
clp
203.493 506.222 mo
203.493 506.222 195.833 527.624 211.442 542.351 cv
211.442 542.351 201.247 525.866 203.493 506.222 cv
cp
f
212.098 502.882 mo
212.098 502.882 204.954 527.319 219.645 546.897 cv
221.891 548.374 li
221.891 548.374 209.461 527.808 212.098 502.882 cv
cp
f
219.36 508.519 mo
219.36 508.519 214.149 533.437 230.313 551.8 cv
232.676 553.108 li
232.676 553.108 218.68 533.573 219.36 508.519 cv
cp
f
228.247 512.737 mo
228.247 512.737 225.079 537.987 242.672 554.987 cv
245.125 556.101 li
245.125 556.101 229.594 537.757 228.247 512.737 cv
cp
f
236.872 515.823 mo
236.872 515.823 235.583 539.683 253.563 554.565 cv
255.993 555.456 li
255.993 555.456 239.891 539.198 236.872 515.823 cv
cp
f
246.493 519.21 mo
246.493 519.21 248.028 542.386 265.907 554.362 cv
268.184 554.905 li
268.184 554.905 251.844 541.347 246.493 519.21 cv
cp
f
255.071 519.011 mo
255.071 519.011 258.012 542.718 278.336 554.194 cv
280.887 554.647 li
280.887 554.647 262.161 541.483 255.071 519.011 cv
cp
f
263.872 518.835 mo
263.872 518.835 268.821 542.21 290.047 551.917 cv
292.618 552.159 li
292.618 552.159 272.848 540.628 263.872 518.835 cv
cp
f
271.489 517.851 mo
271.489 517.851 278.125 540.815 300.008 548.937 cv
302.594 548.983 li
302.594 548.983 282.024 538.933 271.489 517.851 cv
cp
f
279.598 514.659 mo
279.598 514.659 286.231 537.62 308.11 545.745 cv
310.7 545.788 li
310.7 545.788 290.125 535.741 279.598 514.659 cv
cp
f
286.555 509.765 mo
286.555 509.765 293.204 532.722 315.094 540.843 cv
317.665 540.894 li
317.665 540.894 297.106 530.843 286.555 509.765 cv
cp
f
290.172 501.487 mo
290.172 501.487 296.825 524.444 318.696 532.565 cv
321.282 532.612 li
321.282 532.612 300.719 522.562 290.172 501.487 cv
cp
f
295.313 494.401 mo
295.313 494.401 301.961 517.358 323.848 525.487 cv
326.426 525.534 li
326.426 525.534 305.86 515.483 295.313 494.401 cv
cp
f
grestore
722.191 706.714 mo
689.602 683.933 680.039 650.429 697.188 619.222 cv
699.414 614.522 719.016 577.089 773.836 587.718 cv
787.664 590.39 799.934 595.425 810.281 602.659 cv
830 616.437 840.973 636.905 840.398 658.808 cv
839.977 675.167 832.688 699.507 813.563 714.288 cv
799.512 725.171 779.656 726.507 759.984 722.042 cv
745.465 718.737 733.727 714.776 722.191 706.714 cv
cp
f
703.797 621.542 mo
703.797 621.542 720.055 582.581 774.129 592.925 cv
814.758 600.698 836.586 629.253 835.746 657.952 cv
834.902 686.64 810.102 728.007 761.859 717.167 cv
713.617 706.327 679.313 665.745 703.797 621.542 cv
cp
.670588 .215686 .372549 rgb
f
483.984 490.663 mo
483.984 490.663 477.985 517.288 491.109 542.038 cv
504.234 566.788 535.359 582.913 572.109 570.538 cv
572.109 570.538 543.984 575.038 521.859 562.663 cv
499.734 550.288 485.109 531.913 483.984 490.663 cv
cp
.27451 .207843 .145098 rgb
f
gsave
487.984 475.038 mo
487.984 475.038 472.231 515.038 501.234 549.538 cv
530.238 584.038 549.48 571.038 579.984 569.038 cv
579.984 569.038 542.492 566.538 532.984 542.038 cv
523.484 517.542 522.484 503.038 522.484 491.038 cv
522.484 479.038 503.492 456.538 487.984 475.038 cv
cp
clp
505.164 475.839 mo
505.164 475.839 478.712 484.202 475.923 510.249 cv
475.923 510.249 484.414 488.167 505.164 475.839 cv
cp
f
514.77 481.749 mo
514.77 481.749 485.742 492.843 477.563 521.573 cv
477.782 524.851 li
477.782 524.851 488.59 497.585 514.77 481.749 cv
cp
f
514.648 492.96 mo
514.648 492.96 486.574 506.292 480.669 535.569 cv
481.141 538.827 li
481.141 538.827 489.789 510.796 514.648 492.96 cv
cp
f
517.117 504.718 mo
517.117 504.718 490.227 520.272 486.691 549.929 cv
487.422 553.132 li
487.422 553.132 493.789 524.503 517.117 504.718 cv
cp
f
520.488 515.378 mo
520.488 515.378 496.336 531.737 495.141 560.202 cv
496.078 563.222 li
496.078 563.222 499.984 535.569 520.488 515.378 cv
cp
f
524.285 527.226 mo
524.285 527.226 502.898 545.823 504.457 572.05 cv
505.617 574.671 li
505.617 574.671 506.727 548.776 524.285 527.226 cv
cp
f
530.82 535.417 mo
530.82 535.417 509.945 555.788 513.805 584.015 cv
515.242 586.827 li
515.242 586.827 514.211 558.905 530.82 535.417 cv
cp
f
537.484 543.843 mo
537.484 543.843 518.422 565.917 524.66 593.706 cv
526.324 596.386 li
526.324 596.386 522.93 568.655 537.484 543.843 cv
cp
f
544.063 550.519 mo
544.063 550.519 526.648 573.925 534.906 601.194 cv
536.773 603.737 li
536.773 603.737 531.359 576.327 544.063 550.519 cv
cp
f
553.148 556.038 mo
553.148 556.038 535.734 579.444 543.996 606.714 cv
545.859 609.257 li
545.859 609.257 540.438 581.847 553.148 556.038 cv
cp
f
563.051 559.194 mo
563.051 559.194 545.648 582.604 553.91 609.874 cv
555.773 612.421 li
555.773 612.421 550.352 585.011 563.051 559.194 cv
cp
f
573.773 556.601 mo
573.773 556.601 556.367 580.007 564.621 607.272 cv
566.484 609.815 li
566.484 609.815 561.078 582.405 573.773 556.601 cv
cp
f
584.449 556.37 mo
584.449 556.37 567.047 579.78 575.305 607.05 cv
577.16 609.593 li
577.16 609.593 571.746 582.183 584.449 556.37 cv
cp
f
596.367 557.589 mo
596.367 557.589 578.961 580.995 587.219 608.261 cv
589.086 610.812 li
589.086 610.812 583.664 583.394 596.367 557.589 cv
cp
f
grestore
582.234 451.288 mo
582.234 451.288 633.984 502.288 592.734 557.788 cv
592.734 557.788 624.234 511.288 582.234 451.288 cv
cp
1 1 1 rgb
f
584.484 368.038 mo
584.484 368.038 647.484 359.038 671.484 416.788 cv
671.484 416.788 645.984 370.288 584.484 368.038 cv
cp
f
479.485 527.788 mo
479.485 527.788 496.84 598.132 563.539 579.085 cv
563.539 579.085 504.984 592.288 479.485 527.788 cv
cp
f
699.234 651.542 mo
699.234 651.542 701.273 682.601 736.734 702.542 cv
761.156 716.272 796.547 721.737 821.484 692.042 cv
821.484 692.042 808.734 707.792 776.191 706.831 cv
750.852 706.081 709.734 686.792 699.234 651.542 cv
cp
.27451 .207843 .145098 rgb
f
gsave
700.734 651.917 mo
700.734 651.917 709.023 692.007 751.746 706.362 cv
794.473 720.718 804.129 699.601 829.137 682.022 cv
829.137 682.022 795.82 699.401 774.953 683.429 cv
754.09 667.456 745.688 655.597 739.441 645.351 cv
733.195 635.101 704.336 628.046 700.734 651.917 cv
cp
clp
716.742 641.39 mo
716.742 641.39 698.5 662.3 709.688 685.991 cv
709.688 685.991 705.438 662.722 716.742 641.39 cv
cp
f
728.016 641.437 mo
728.016 641.437 709 666.015 716.977 694.804 cv
718.875 697.491 li
718.875 697.491 713.906 668.581 728.016 641.437 cv
cp
f
733.746 651.073 mo
733.746 651.073 716.719 677.065 726.914 705.132 cv
729.012 707.675 li
729.012 707.675 721.813 679.241 733.746 651.073 cv
cp
f
741.973 659.819 mo
741.973 659.819 727.113 687.101 739.535 714.261 cv
741.828 716.616 li
741.828 716.616 732.359 688.858 741.973 659.819 cv
cp
f
750.406 667.171 mo
750.406 667.171 738.297 693.71 752.094 718.632 cv
754.465 720.729 li
754.465 720.729 743.414 695.077 750.406 667.171 cv
cp
f
759.809 675.308 mo
759.809 675.308 751.23 702.319 766.219 723.905 cv
768.574 725.534 li
768.574 725.534 756.039 702.851 759.809 675.308 cv
cp
f
769.656 678.905 mo
769.656 678.905 762.438 707.159 780.43 729.249 cv
783.125 730.905 li
783.125 730.905 767.707 707.604 769.656 678.905 cv
cp
f
779.734 682.624 mo
779.734 682.624 774.945 711.397 794.742 731.874 cv
797.563 733.292 li
797.563 733.292 780.223 711.39 779.734 682.624 cv
cp
f
788.82 684.897 mo
788.82 684.897 786.141 713.956 807.387 732.937 cv
810.305 734.136 li
810.305 734.136 791.414 713.554 788.82 684.897 cv
cp
f
799.461 684.882 mo
799.461 684.882 796.77 713.933 818.023 732.917 cv
820.938 734.116 li
820.938 734.116 802.043 713.534 799.461 684.882 cv
cp
f
809.555 682.421 mo
809.555 682.421 806.883 711.472 828.129 730.456 cv
831.047 731.655 li
831.047 731.655 812.148 711.073 809.555 682.421 cv
cp
f
817.359 674.628 mo
817.359 674.628 814.68 703.679 835.922 722.655 cv
838.84 723.858 li
838.84 723.858 819.953 703.272 817.359 674.628 cv
cp
f
826.359 668.874 mo
826.359 668.874 823.688 697.921 844.922 716.905 cv
847.836 718.108 li
847.836 718.108 828.945 697.526 826.359 668.874 cv
cp
f
837.164 663.71 mo
837.164 663.71 834.48 692.757 855.734 711.741 cv
858.648 712.944 li
858.648 712.944 839.754 692.358 837.164 663.71 cv
cp
f
grestore
567.984 554.038 mo
567.984 554.038 562.734 561.538 561.984 557.038 cv
561.234 552.538 568.734 549.538 567.984 554.038 cv
cp
f
780.984 486.538 mo
780.984 486.538 780.984 495.538 777.984 494.038 cv
774.984 492.538 780.234 481.288 780.984 486.538 cv
cp
f
827.484 666.542 mo
827.484 666.542 828.234 672.542 825.234 671.042 cv
822.234 669.542 825.984 661.292 827.484 666.542 cv
cp
f
459.235 525.538 mo
459.235 525.538 461.485 531.538 457.735 530.788 cv
453.985 530.038 457.735 520.288 459.235 525.538 cv
cp
f
gsave
457.235 377.538 mo
457.235 377.538 462.735 352.042 487.234 364.542 cv
511.742 377.038 529.242 418.038 510.242 425.538 cv
491.238 433.038 460.235 423.538 457.235 377.538 cv
cp
clp
453.235 382.542 mo
453.235 382.542 464.731 359.538 495.234 361.542 cv
495.234 361.542 473.731 363.542 453.235 382.542 cv
cp
1 1 1 rgb
f
451.235 394.616 mo
451.235 394.616 475.235 365.62 505.234 366.116 cv
505.234 366.116 478.235 372.616 451.235 394.616 cv
cp
f
458.735 403.003 mo
458.735 403.003 482.734 374.003 512.734 374.503 cv
512.734 374.503 485.734 380.999 458.735 403.003 cv
cp
f
462.739 411.386 mo
462.739 411.386 486.738 382.39 516.738 382.886 cv
516.738 382.886 489.738 389.386 462.739 411.386 cv
cp
f
467.735 419.772 mo
467.735 419.772 491.734 390.772 521.734 391.272 cv
521.734 391.272 494.734 397.769 467.735 419.772 cv
cp
f
473.735 428.155 mo
473.735 428.155 497.734 399.159 527.734 399.655 cv
527.734 399.655 500.734 406.155 473.735 428.155 cv
cp
f
480.243 436.542 mo
480.243 436.542 504.242 407.542 534.242 408.042 cv
534.242 408.042 507.242 414.538 480.243 436.542 cv
cp
f
grestore
336.243 551.038 mo
336.243 551.038 363.735 593.042 421.235 582.042 cv
421.235 582.042 368.743 586.538 336.243 551.038 cv
cp
1 1 1 rgb
f
gsave
335.493 619.038 mo
335.493 619.038 346.485 591.788 364.235 591.538 cv
381.993 591.288 379.993 622.788 367.743 634.788 cv
355.489 646.788 326.993 644.288 335.493 619.038 cv
cp
clp
341.661 588.784 mo
341.661 588.784 366.844 583.558 384.172 608.749 cv
384.172 608.749 369.282 593.104 341.661 588.784 cv
cp
f
330.946 594.702 mo
330.946 594.702 368.571 595.573 386.774 619.421 cv
386.774 619.421 364.946 602.261 330.946 594.702 cv
cp
f
329.008 605.784 mo
329.008 605.784 366.645 606.651 384.844 630.507 cv
384.844 630.507 363.012 613.343 329.008 605.784 cv
cp
f
324.907 614.124 mo
324.907 614.124 362.543 614.991 380.743 638.839 cv
380.743 638.839 358.911 621.683 324.907 614.124 cv
cp
f
321.43 623.241 mo
321.43 623.241 359.063 624.108 377.262 647.968 cv
377.262 647.968 355.422 630.8 321.43 623.241 cv
cp
f
318.563 633.14 mo
318.563 633.14 356.192 634.015 374.391 657.87 cv
374.391 657.87 352.559 640.702 318.563 633.14 cv
cp
f
316.016 643.437 mo
316.016 643.437 353.641 644.312 371.844 668.171 cv
371.844 668.171 350.004 651.003 316.016 643.437 cv
cp
f
grestore
374.735 710.03 mo
374.735 710.03 412.747 720.378 445.743 680.534 cv
472.243 648.53 466.743 621.038 466.743 621.038 cv
466.743 621.038 466.743 657.53 436.743 685.538 cv
404.11 715.995 374.735 710.03 374.735 710.03 cv
cp
f
571.234 612.534 mo
571.234 612.534 590.242 683.534 651.242 681.53 cv
651.242 681.53 598.734 677.534 571.234 612.534 cv
cp
f
333.235 360.538 mo
333.235 360.538 324.235 326.788 287.485 311.788 cv
250.735 296.788 226.735 314.038 258.985 318.538 cv
291.235 323.038 310.735 275.788 273.985 263.788 cv
237.235 251.788 213.985 263.788 205.735 287.788 cv
197.485 311.788 232.735 312.538 227.485 284.788 cv
222.235 257.038 171.235 269.788 159.235 301.288 cv
147.235 332.788 171.985 338.788 177.985 332.788 cv
177.985 328.288 li
177.985 328.288 165.985 334.288 162.985 320.038 cv
159.985 305.788 164.485 292.288 180.235 281.038 cv
195.985 269.788 213.235 271.288 222.235 281.038 cv
229.079 288.452 222.235 302.038 213.985 301.288 cv
205.735 300.538 207.985 262.288 248.485 263.788 cv
286.7 265.202 294.235 283.288 289.735 296.038 cv
285.235 308.788 264.235 320.788 255.985 314.788 cv
247.735 308.788 271.735 307.288 294.985 322.288 cv
318.235 337.288 333.235 360.538 333.235 360.538 cv
cp
.27451 .207843 .145098 rgb
f
gsave
384.235 492.538 mo
384.235 492.538 367.735 470.038 386.485 467.038 cv
405.235 464.038 433.735 476.038 430.735 489.538 cv
427.735 503.038 407.485 516.538 384.235 492.538 cv
cp
clp
362.954 487.46 mo
362.954 487.46 364.743 461.812 393.68 451.952 cv
393.68 451.952 374.59 462.05 362.954 487.46 cv
cp
1 1 1 rgb
f
365.743 499.382 mo
365.743 499.382 376.774 463.39 404.665 452.339 cv
404.665 452.339 382.231 468.702 365.743 499.382 cv
cp
f
375.883 504.241 mo
375.883 504.241 386.918 468.257 414.809 457.202 cv
414.809 457.202 392.375 473.565 375.883 504.241 cv
cp
f
382.797 510.452 mo
382.797 510.452 393.833 474.464 421.723 463.409 cv
421.723 463.409 399.29 479.772 382.797 510.452 cv
cp
f
390.633 516.276 mo
390.633 516.276 401.665 480.288 429.563 469.233 cv
429.563 469.233 407.122 485.597 390.633 516.276 cv
cp
f
399.387 521.714 mo
399.387 521.714 410.426 485.726 438.317 474.675 cv
438.317 474.675 415.875 491.038 399.387 521.714 cv
cp
f
408.61 526.964 mo
408.61 526.964 419.649 490.976 447.54 479.921 cv
447.54 479.921 425.098 496.284 408.61 526.964 cv
cp
f
grestore
gsave
582.984 389.788 mo
582.984 389.788 584.484 377.038 605.484 379.288 cv
626.484 381.538 639.527 394.905 636.234 404.788 cv
630.984 420.538 577.734 416.788 582.984 389.788 cv
cp
clp
577.336 413.53 mo
577.336 413.53 572.578 388.265 598.086 371.409 cv
598.086 371.409 582.172 386.007 577.336 413.53 cv
cp
1 1 1 rgb
f
583.055 424.358 mo
583.055 424.358 584.625 386.749 608.813 369.003 cv
608.813 369.003 591.246 390.507 583.055 424.358 cv
cp
f
594.094 426.499 mo
594.094 426.499 595.664 388.894 619.852 371.14 cv
619.852 371.14 602.285 392.647 594.094 426.499 cv
cp
f
602.355 430.757 mo
602.355 430.757 603.926 393.147 628.113 375.397 cv
628.113 375.397 610.547 396.905 602.355 430.757 cv
cp
f
611.406 434.413 mo
611.406 434.413 612.977 396.804 637.172 379.054 cv
637.172 379.054 619.602 400.558 611.406 434.413 cv
cp
f
621.25 437.46 mo
621.25 437.46 622.828 399.851 647.016 382.101 cv
647.016 382.101 629.445 403.604 621.25 437.46 cv
cp
f
631.5 440.202 mo
631.5 440.202 633.082 402.593 657.27 384.843 cv
657.27 384.843 639.691 406.351 631.5 440.202 cv
cp
f
grestore
699.234 670.292 mo
699.234 670.292 716.578 706.757 763.734 716.792 cv
798.984 724.292 819.984 698.792 819.984 698.792 cv
819.984 698.792 795.234 720.542 758.484 711.542 cv
721.734 702.542 699.234 670.292 699.234 670.292 cv
cp
1 1 1 rgb
f
740.484 596.038 mo
740.484 596.038 768.234 586.288 799.734 603.538 cv
831.234 620.792 832.734 655.292 832.734 655.292 cv
832.734 655.292 828.984 622.292 791.484 605.038 cv
763.391 592.116 740.484 596.038 740.484 596.038 cv
cp
f
216.985 540.913 mo
216.985 540.913 239.485 558.163 265.36 554.413 cv
291.235 550.663 298.36 533.413 298.36 533.413 cv
298.36 533.413 291.61 546.913 263.485 550.663 cv
235.36 554.413 216.985 540.913 216.985 540.913 cv
cp
f
gsave
673.734 439.288 mo
673.734 439.288 682.734 428.788 711.984 434.788 cv
741.234 440.788 740.484 449.038 735.984 458.788 cv
731.484 468.538 716.484 471.538 705.234 466.288 cv
693.984 461.038 694.734 461.038 684.234 461.038 cv
673.734 461.038 656.484 447.538 673.734 439.288 cv
cp
clp
670.883 467.937 mo
670.883 467.937 664.957 442.917 689.66 424.897 cv
689.66 424.897 674.438 440.218 670.883 467.937 cv
cp
f
677.098 478.487 mo
677.098 478.487 676.922 440.843 700.266 421.999 cv
700.266 421.999 683.711 444.292 677.098 478.487 cv
cp
f
688.219 480.116 mo
688.219 480.116 688.047 442.476 711.387 423.624 cv
711.387 423.624 694.84 445.921 688.219 480.116 cv
cp
f
696.668 483.983 mo
696.668 483.983 696.5 446.343 719.836 427.495 cv
719.836 427.495 703.289 449.788 696.668 483.983 cv
cp
f
705.883 487.218 mo
705.883 487.218 705.711 449.577 729.059 430.722 cv
729.059 430.722 712.5 453.022 705.883 487.218 cv
cp
f
715.859 489.804 mo
715.859 489.804 715.695 452.163 739.031 433.315 cv
739.031 433.315 722.473 455.608 715.859 489.804 cv
cp
f
726.223 492.073 mo
726.223 492.073 726.059 454.429 749.402 435.581 cv
749.402 435.581 732.836 457.878 726.223 492.073 cv
cp
f
grestore
gsave
513.984 283.288 mo
513.984 274.905 524.484 261.538 537.984 267.538 cv
551.484 273.538 556.734 287.788 555.984 299.038 cv
555.234 310.288 548.484 318.538 541.734 314.788 cv
534.984 311.038 527.484 298.288 523.734 295.288 cv
519.984 292.288 513.984 290.038 513.984 283.288 cv
cp
clp
503.734 280.593 mo
503.734 280.593 517.371 258.796 547.555 263.706 cv
547.555 263.706 525.953 263.644 503.734 280.593 cv
cp
f
500.602 292.429 mo
500.602 292.429 527.258 265.851 557.07 269.21 cv
557.07 269.21 529.57 273.104 500.602 292.429 cv
cp
f
507.258 301.483 mo
507.258 301.483 533.914 274.913 563.73 278.269 cv
563.73 278.269 536.238 282.163 507.258 301.483 cv
cp
f
510.445 310.218 mo
510.445 310.218 514.602 306.073 521.461 301.265 cv
531.984 293.897 548.871 284.964 566.914 286.999 cv
566.914 286.999 539.426 290.894 510.445 310.218 cv
cp
f
514.617 319.042 mo
514.617 319.042 541.277 292.464 571.094 295.827 cv
571.094 295.827 543.598 299.718 514.617 319.042 cv
cp
f
519.785 327.96 mo
519.785 327.96 546.453 301.39 576.258 304.745 cv
576.258 304.745 548.766 308.632 519.785 327.96 cv
cp
f
525.457 336.925 mo
525.457 336.925 552.125 310.354 581.941 313.71 cv
581.941 313.71 554.438 317.601 525.457 336.925 cv
cp
f
grestore
gsave
276.985 470.788 mo
276.985 470.788 276.985 458.038 258.235 452.788 cv
235.985 446.562 220.735 450.538 217.735 460.288 cv
214.735 470.038 231.235 479.788 244.735 478.288 cv
258.235 476.788 272.485 481.288 276.985 470.788 cv
cp
clp
211.883 488.937 mo
211.883 488.937 205.958 463.917 230.661 445.897 cv
230.661 445.897 215.438 461.218 211.883 488.937 cv
cp
f
218.098 499.487 mo
218.098 499.487 217.922 461.843 241.266 442.999 cv
241.266 442.999 224.711 465.292 218.098 499.487 cv
cp
f
229.219 501.116 mo
229.219 501.116 229.047 463.476 252.387 444.624 cv
252.387 444.624 235.84 466.921 229.219 501.116 cv
cp
f
237.668 504.983 mo
237.668 504.983 237.5 467.343 260.836 448.495 cv
260.836 448.495 244.29 470.788 237.668 504.983 cv
cp
f
246.883 508.218 mo
246.883 508.218 246.711 470.577 270.059 451.722 cv
270.059 451.722 253.5 474.022 246.883 508.218 cv
cp
f
256.86 510.804 mo
256.86 510.804 256.696 473.163 280.032 454.315 cv
280.032 454.315 263.473 476.608 256.86 510.804 cv
cp
f
267.223 513.073 mo
267.223 513.073 267.059 475.429 290.403 456.581 cv
290.403 456.581 273.836 478.878 267.223 513.073 cv
cp
f
grestore
gsave
786.234 609.538 mo
766.375 601.362 748.734 601.288 747.984 616.292 cv
747.234 631.292 764.484 629.792 773.484 629.792 cv
782.484 629.792 792.234 642.542 798.234 634.292 cv
804.234 626.042 798.984 614.792 786.234 609.538 cv
cp
clp
743.844 632.909 mo
743.844 632.909 741.273 611.858 763.172 599.351 cv
763.172 599.351 749.297 610.511 743.844 632.909 cv
cp
f
747.973 642.12 mo
747.973 642.12 751.273 611.249 772.133 597.944 cv
772.133 597.944 756.523 614.698 747.973 642.12 cv
cp
f
756.938 644.476 mo
756.938 644.476 760.242 613.608 781.09 600.292 cv
781.09 600.292 765.492 617.054 756.938 644.476 cv
cp
f
763.512 648.413 mo
763.512 648.413 766.816 617.546 787.664 604.237 cv
787.664 604.237 772.063 620.991 763.512 648.413 cv
cp
f
770.766 651.905 mo
770.766 651.905 774.07 621.038 794.93 607.729 cv
794.93 607.729 779.313 624.495 770.766 651.905 cv
cp
f
778.699 654.94 mo
778.699 654.94 782.008 624.073 802.863 610.765 cv
802.863 610.765 787.254 627.519 778.699 654.94 cv
cp
f
786.992 657.753 mo
786.992 657.753 790.301 626.886 811.16 613.573 cv
811.16 613.573 795.539 630.331 786.992 657.753 cv
cp
f
grestore
gsave
551.484 466.288 mo
552.82 458.015 563.484 452.038 573.164 458.062 cv
585.715 465.866 588.445 481.038 585.914 492.026 cv
583.383 503.015 575.402 510.081 569.332 505.304 cv
563.266 500.526 557.898 486.745 554.672 483.187 cv
551.449 479.624 550.406 472.952 551.484 466.288 cv
cp
clp
537.273 465.487 mo
537.273 465.487 554.211 446.14 583.219 455.8 cv
583.219 455.8 561.914 452.296 537.273 465.487 cv
cp
f
532.297 476.671 mo
532.297 476.671 562.844 454.687 591.738 462.753 cv
591.738 462.753 563.969 462.214 532.297 476.671 cv
cp
f
537.422 486.675 mo
537.422 486.675 567.973 464.69 596.871 472.757 cv
596.871 472.757 569.109 472.218 537.422 486.675 cv
cp
f
539.172 495.8 mo
539.172 495.8 543.938 492.374 551.477 488.722 cv
563.039 483.124 581.133 476.999 598.625 481.882 cv
598.625 481.882 570.867 481.347 539.172 495.8 cv
cp
f
541.887 505.179 mo
541.887 505.179 572.445 483.194 601.348 491.265 cv
601.348 491.265 573.574 490.722 541.887 505.179 cv
cp
f
545.566 514.804 mo
545.566 514.804 576.129 492.827 605.016 500.894 cv
605.016 500.894 577.258 500.343 545.566 514.804 cv
cp
f
549.738 524.562 mo
549.738 524.562 580.301 502.581 609.199 510.651 cv
609.199 510.651 581.426 510.104 549.738 524.562 cv
cp
f
grestore
677.234 647.538 mo
677.234 647.538 673.23 652.538 671.234 649.538 cv
669.234 646.538 676.23 642.542 677.234 647.538 cv
cp
.27451 .207843 .145098 rgb
f
841.234 533.538 mo
841.234 533.538 846.234 539.538 840.234 540.538 cv
834.234 541.542 837.242 529.542 841.234 533.538 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_red_grapes.eps)
%%CreationDate: 3/12/2016 1:07 AM
%AI9_DataStream
%Gb",KBj2OedcgWlcSPU;R=k\ER,/W%#r]eV"9JT:Z4g`W_4eQ\$^mLqmr,tK8F?,&/PjH4);fMmF,6o`<2EK0W[]SOUoUUiTiAQr
%=8uT&kdIAYIi7glrqp87iHaZIBW-$s<:d54:h_!$X8/F9fWKtZH=K+CrA.MH*98a2QX&Nu&;J^WM0,-.?c+h%4o7?G$A30&?HtDA
%:/[iVo:/!ndt"W0!;p'.moApeWt68epH`5k%)4ab(\aI!E=t*tYY(9_`t]W`VW3S;:MBBm`K/'UAZ=(YkF/5^jms+.:$jr'kt+^p
%nII;jN!')_KHCkqTU9MK9jUPgh$a3u/gYImjhtR:>8m.!!u'qk+&2Zgs.t'>KDa&qNrQlMXnOLHgIR\<Ms!)]b2=6DGAspBA])iK
%pd";9!*^4QObgp(TNhkGc%,N9cnm=g-Zn8?iI<of-+h(on@#rtOYfeiK=uL-Uh1n]_fq<)UVY`OTd>+WI+"mFi2.4d=AM$iEeU/=
%2EXuXSs93Z)lmaF8"-<3+-'Q6:k)Cm29#Qkp3b_\K5)P8AK))?%<K&&EBMWuM]Se,qIS"V\ug]=glh>`(X;NN<Sl(#%$3;?1!*iU
%W16oGdSa-Ubtj_<!J;[mhZ@26ptL"op<L3DCd7$c3!PBca*(`)2sUaJnuuH3/619_o%`imHE#7<<S'cdr*KRndYn'r0E4hL']<je
%K8RU$DObVeZq#_m4#k&ZG:J=6C)OJ\O2jR*aLqX&+fo"-?ebURhdD7@9`RKhkHCoT6)fG<s7s\crlmMh$=!#[DS=c(m8]%o5Q=hZ
%'ri'9i[EEkJjUPX$B:m8B]FRhp_.>s0AX^hA?Jm9)D^BqcgjL^/2bStJFSrhDj@"kla]-nOZ:#K(?FGY/rGDW?RMsR1JetS#gm"_
%***p9HE2%N33?6!BT]$ApaH7c8=%#YQq=$tr?d%:-[5(I>SrbZlab_L.Go(A5/0T$h=@\jZuG[&6$jmR-i@lps&Y&Mo<`<3<o!LL
%1e$jLP;*Sc<3]C'Nh2nre&HdC>XLq'EH7>F@5IW$`d4Yd*s=0/"#8N&et'rX&6<SO%>\2.0]?0;?;img@BPco-g6>!CuS,Y3T,'d
%gksh>_qO:h3THWLF`f+Ye2@6qjR"QJ3_^<?CXM$rFnjS#KDejohrsN&.?EI<=8t;AViAXShrV'D5H_l[eOp^\AcSoV"ZiOGoiu^5
%r)G0se:S,$0G8/J!,D-Nr`A\=mMGf2W%BPHekTUD@$hs?DK9/Yo_Ec*QV+F)4^dQI]UDCqiGSl2rZ3-eTG8mUnY9&s?7>juqFrk%
%=$c*AWi5uXlo6V:Wh`,&/>D+-($W5lC9%>B8+1F`RG'_uKsdu:\NV"G;F(=5m'NLqi^r0ebuXcECm.IT(lf"'C+)!7_8cURV0^Q@
%2=n<INYj_blA%9j$KZI'*Z&e8E2Y7gnmT8#]28VZhK`o]/ZIF@_7I]FJo!UFh?$STOjRJ5`s!G(YMm:IK17@jOUnam,."gsc2+(j
%&*N`(kqJtH>Ou7HO(D6d$Q]KtB]&JfZW^G_P]kYu;;"OK<R1o^D#5[&[+jO-OD0tO5;f:[D="J?%V+kgKoF%VR?IuujYs;n1p>jG
%=9Bd*Yq\3!-3Ak2.5ttVbY>Xi2!(gL.9EV65aN!g<D/=^0fK9US-$f-TeWJ';jlB\F'EO"bKXn7\LfbLjT(`L@g9"p2'=7%T!N%N
%Sl5]&C@!sbFOJ!"&>!.g$Ip6iX",Lp\^;s=Jt!BA1Fedrna>Gf!6D74!Vq3W[Vh:.;lhkFk$!a6.9B*u%c([]c"bugn^LPj()oP\
%^b5O/ND1m4/#]C6Ke_j[.PRf76\W:qIb#$d`hr<kLT%Oe1gci;"FaV3DRX^Yc(C\eDc$(qCrnI&/?D\VnqX@%k\D+4QU3Z%UK&u0
%o"dm]VabA@h8a,).)6"Ufa;fnm:rKFbZ.VcX7qg__5F77\FXpH=p[Y"Yl2\.)B>fFd%c,d8U"1e8l/3kY@?$YgPl.]JFUCZlPN.B
%;Pgq-k)*::IEOS^7s/2&%9'7ubhSJ6ZA('bFoHN>7Wd5*jt4WLEI_<-e@[799pH*nWT"$f)X+R9M-V'a%>1V]K/l+4'_IFOgYhFK
%6(_s1DY)k0^gN.kqp*JuH!"fZ@ce(*a:XZ's."%u7O*-lO8C?gD4DPk&C`?8`8jm446fLL2YZ7@Y$rI6F'&>ZV/VBMGF^1u0]A$J
%?(VAtg]l$5K7*YS8K6F7C7)./_>b4P,A00"WDLHpA[CNu81N]#f5lXD98.1na77lOZP&Ft!5m<RQR_lPa8Fu,l'p4Lm0[X\.4@Iq
%BSOaafYk,$=^YRN.0XKb@@8pTM:m`B58aee.oULG<bEQ]<b4duja^-H'^Rq:I_$0P(#h`]0JQm"Odsk<GU57,n^:?)d@V3=W<1;N
%#bEIu:iKVe9:SGO7_t-Er-^J`\\`ehcS8K$As?dh\\)[QfT<@gENF+6\:'XC<.aTb#_TdY#H[Z`EP[u>\@`h&^>;Z*/8[/=7L`__
%_$<F>Ej_k\3TV4hVf6c<'p_VlWLlT)T6ePM_Z?W!<@e@-EM=?J`/@e&(XDZ/g+a9Yr*;FF+.aCh,UT"qWT7J_A)RqE)OpM#YMd*^
%Sl;fmbcHSt'G\N-MPW"+Ma.WiW(l%orSq4oi)8g(M14Id,o?R%rDWb%c;6;u=$1?TF'Kj@$K)Ut$LVl:Z%8UAH<4)\n*9[U:lqs$
%HF9hpi2PJ@i2?lkc4,OU="'<%V&L/%W82T$:fXM1'p/"^<k1(1.]3BI=Qa[T'p^=8:*HedT*t8cE2itAmB5IN8jO2On!T^D'`g%:
%gH,4me[!7r8nB;X>PVPTR"`Cn1LL=GB.=P5Rt4*EPoZ8.pVf6-AWltt1ED=H;A![O6W%Ij_*')62t?H[Q=<]jJ=.2#1Zbki$C]2'
%`1kJq0qY:E'GY"&4r-SD=3Y5Pk-6?7MR8elU.grV1F)s32IfUK)#M70g0';%;#t942!T?;8rmRI&[<`V1cFm%I[4G?<.LC&;h(.C
%1t*:?UU6@4S??l"j`D<b;i:(5n&4i5VjO'8poUS6k6bh$IUR![4@9j$cL9E523%0B->WRYG[mYJda)h_N'14]3a.f:3F<_ZY;p[<
%2NrM_@:/2FD9gaFO0@s#Tk1C0rNR1^,%ce7c*ar>=8NML[CNS$P?_t-X3J3/J!-kODhQEVE5+PM-rE7GYMLd*eHOn/(la!'h"`[&
%5f*@8c&Y^,c2;2qiAiCd*J?pkmcXBdB*XHpl@P>+(#gh`q8Z+$Qa+8'b5^`m\U&$cK6d!QZ%4Z_`ERGLm?rRk/UBb@0XQLN_gcG.
%pqI:5)ub$`IRq[Z>^*/F#`>J$mEaF.OC9`^2)@jo([F.8d,mc(VPr]OUP<>eL''>67:1d`)?7O109`7Or<oL](u;@$nlF_'dR3%n
%'?%'Yc@7R-InVoMN85R)dat:eqL#\UX#<4#4_uQ0CHj\SJ)hQR;)6D:aU#?:ISD+)aONr.X)cQdforDp"q#7]CD@Jo*b-c('c:hH
%"mUWS*$5RrDTV5!i9Yt[T55?^]<ppT_3u.E10%4mQ7=MIBYjW0K]Fsr7#X[;;\KQrch*^as%`Ummi@bYS)=6@$8'TmIrBmKIfDLE
%ruJmFn-7Ol2ACGZr6BM8kPKV!RaF4SR=+4.Icjq+FAMB'c?C3)>4Xi5+njIac?F_+=st,D/X9C*VWOBs6T">9Ln?sM<dtM_,V35-
%25.p&*ikq`!7h%afPE]NZ9(p2:8"BV"@FJKFLt]WCV-<]Wd;ArRpE(fqm>WWYb>#TXg>X6>adKh0_^[R4_4R.J!lGnD-=Mg>h4P#
%Z2s5iYYhD78se(fRo2*PRN(pmYYhOc._"8+c!=t'f@er%2Kt_2J5T3skPhfm.ndIOE#Xu;?`DgqhY&(&a0s'\j.\V*!Lt9cIjo[G
%@suDaVTG(Dgt9Z"2:gEE%,4#Die1)Rg!>JtW)3rn+MI'H'iY^tjt(j_rWTWV9]6$[J-gfJ_;3Q:a[GTf=RFDk2:,Ao!jMXFh!m.D
%]Z_BLrrpH$E3le/7<i7^s"\f2bT/?Xa339.13^CT*A:@MGR4WM-)Tq(J*oRZNm-rqaGDTqVV6YZF+kr1ng2ODA((u(qObs+SJRdj
%[gN=4HEdbk(acrKKM'(>H*N3UMu3L>k:aiNZ8[hbV-AAtdjQ?h,ECs(E@r6oQ'eFU36j$/9nmUd(FE'*(MB]KdtlTRInhsuj*ge1
%F?6V>1p=VM/i*CO<*q\saq^p@meZ1=C#hqpeYhP4q.&#tIU?.T3(:nNSUE8lX'.&4JgTnP4X_^"RAj&]'curt.(gm"SL,5/gLPF3
%%"F?:bT@J"r>0=$Ir`\DdhnIZSXJ$KZKE"WbZSV[]"Kef6<3+"(r_m]&1RbKn*pFP>FGU)5=u*UTKpnCCquDf^g%%X!GPEOYpm'[
%0gEYuQ]Re.mE1jo0rDb7SGP#f;?<Bd0dbe=iQZlp6Nr4T+(N/6mG*aWWGHtMa-c`YVSnPchm(Os3MhPS=gu_7oj#5!$XZn,.P\^9
%h,&Je_iH7uqP78/k&5>0FBG-en$EcY-2i&[*Z&cF-"8@+nf_i7N=o4\cJnsu9.JGF\]?X[Cd%RM$7^<9Kt=>b\7!M;EGX<QJ5G`G
%9o[,h!mIaPrL#,l1kX>(Au%DIQ;i*7VHHnr.B4%6Sr32U=llGU[rF\hY8]=%)`4`;oUCA/;,I:FAV5Guj6*dL^M&=OlfiKuc<U#U
%-+/'I%@qciOPb7kB?F)O&skE5iEduV9R<q02G:km9#/Z']ja`lM7?/k.jF/cV>C4I4A3q-C>&MG@:aJ^',2WTVXQK0S)*B54C5?1
%WAh<J-Hh]RUU%Ef2kJJR\)ui(gt\?f>B=k$me9n+$<lMl>BBE*Yj&IV'Ij_hTfo:Re_H[aRr`XlDJmbEc+1AF\%&HaJ3g(;`2&lE
%p+2VR9#/YF\k+^BcDoF3ANcq8en<g1;p_><\/`EQ4=p%"$8P:/3-TfGI[@o0Y:D=FLLd:J9$HU2p=,?E,E^4\o=CCm)<5^+LS2`Y
%X1[a7@4m&COl3*O/XJ+JJ$(;I$6.6^To,1?oG\V&.6]pX2>g,[SnU2S=X:YZ4@M'hh,L5P\N2Olf5ml7iqD1aJZ7>&=`m82)Ln4g
%j$rhb`i3AIl7Ye*qXOT*V3F7dMV$N_#>(jR9\geL$U3ZbgJ7<"-!e*WpB3i089DIIBf'n?^;SW3RWa080'F"$Po?cN0p`DM2m'Eu
%U.h"4BqUq&LroV!<,O/@5XdiV[EZW6m^RelGR?eg'XA'4pm9u'7',jEeYc)t=M_`*2;lXG>R9ksI3DVQg>!OiT2?X?SJmK*f(G\c
%6)IDW-6rn@"BDDpPHhs%+C!oAGQ+aF/&=aV[Qg017?aJ\c#obk:,I>A-fPP1[8Ji&0)Q==<hCmhoB>MNZ^ZVi^!s\E#>1i:Vhu]I
%8A]-W'"^%K)i!)s`cT"(::.!>I9W<R)"br,LYDl#3af23c$a4P^bmZ#O)h($c)tapOQuREF5](pNk_&4:V(LEJRQu\UP`HI$cbgO
%-?H^WiTBWZ:c;(D#C6=$i1qhc^P<V#c[PfC<D4]-b\QuI<t1diI,]"/CU27:>OY"<pWO!YNJj!eF"j+NR>.^!iHdg(s698Ze1r"I
%qGW(Yb)XqiZ6l/;m)%A6!DuWkbU"Z1l!Vk@Rqsu;gI4;<7F(o37)*`5TrG5Xnb[\Q@fbb3QBOsC'l8eb0:&kha42rbH2=GKaMc<A
%er??$9fs4ZT0)VJe)+1aGA<N:J+01C4D(V9j3LZ':60RcVM[;\,Y62qlF@o2-!GXs%-lMDI>n/d8_`39mQtK/VntN0,SY-)#iN1l
%m`1@EA*,,k<[E5XQ#'usLb.d;[)B&0g$YBS`_C(Alnc!?=G&u^`5.\rdsA1F.&sqU0S)&FF0:SOe?l4%3r'9HpZ\6tOk_^9IJb&=
%66U9H0Uu?,s7?H>6S*^_LuiPY_2+-p/Yr)^m<kg0L`SpX2B/.2?WAUH0FF)M=V^>gi3H==s75=pYA4+4)kVUQeXIpgWk&4ao!20l
%;5&I_[4J1)jGnTk94p;;;fWO>^TS5rC/kW.Q^ei#YB$I3K"GOs4tmIZ:%VTQs4Kt"QbOU?1R6YA\OJ%*0ibo5*=VqgTRVWMFjYK2
%MambBWm0QH?`b,r!r^7^"_qM/8FM$,q1k8\!IoNM[N>f+EKKtj=\BJ.K\qg[2u)83%Z`H/!%M33%2BH`b`*=#=?F[URsi+FLI%aj
%";QPTTFj4.0GGXcXh6g6m0b!E`HJXeBU,$q6.#Gt*>&GBoIh?t#AE/b&C?]L%+hccK1XnH>gG`I-8j'?%DZZ*OZtn@V<]2rZ@'nf
%]ZVIqeL=#WVOV<CKRNnE?*/j<`A`cak9d,I((.BC:GW(cI'`EgODj)]pdb.!?69rRE:c/WSoa-VQQDDb1Y^HC#'"2K_pa$(o5NW`
%-ehn^F:AKS0K%b:X>uW=F6S1qV2[L%Soa-VQQDDb)kLKl-88h7G9+k\5:daU0l#5/(WY'B%pKIuG!'6bY$kQ6S6=1+ouPAR,IHW;
%@InQ1?([A([BRoYR5>R4lNmO.UkVhOG+AlH*mpf<oYC%HOXsclpg!_!PmSJ\$QVgiVa#uF;kjo*/d[hA[QC-+#L?/A&9I:KpCeS/
%_P#Qj(pp%GKZ+ZeOoo<tWQ3>RYCX,-=1\1s(^=Y1lP,TWH&9o=mXL&<c6*&`j!YH<QYnH(RWLB9eNODqZ!4mqF-hC?*n*"Gn`4?Y
%U)N#fs"EfGlY=+M#-mAc2;]kgQ"DAp">X+>?]tpi9_cpD#;e9U][M:X^>7BKSKi(A^GX4Uc#T:PG2[hA;gmVPnR886IZpfk2MQP-
%Tel[%oS,D19r%<P;i`D)7#0Y]5ejOl^CH"L4/S:aXt(.di'jVsc]Jaaqh2[K1FGK['g\SpBY=4J'#h%!A`18@_RUR78f3_bF>?g=
%HL-;=3`B.q;.g9hG;9FFiQSbLc"_M*f\^TndIfs=Pq\GrE":DIp"q_f-c=DurpBC&ekp<!InTij:B;h]KVeV5Y]8LM^m[@qEo@"[
%LSe\3!e*lMa&W7UBVHh,?rB8<'L;Ll.L^e:KGG_W:(M#>J]bkEZjPK/14YSfXBQj[W&?rJfFNka_g:QfGWZTjVY?jB;'LfXEX5\a
%rLK.G7=]?HLinr7B!).!eK$3\s5h5T0*iYV'$\CAoB.2+JjQG::)jLuC=j/*WG%sSSusFb-OaZ]X]cnf!a,_mTUn-C#E>CELm`QP
%B@CrJ=/b3fde\t$_rY.`]).FDC=Qp?^Kam(-br,66RXJ78kIEDM5GYXXLDV4m3PZ4Ai4RuCG^Zil$l"nYc0cM;9RJiP")G+$JUE3
%D'HeK\U*kAR]@5;m<?u>"p#E0X<t)#@-1Npc,=2,g8YVM>69cHRR,p74gQG^,Y&2*M)1\#+D>"K+OCa2HPK%CqieouZNa&>nr[G:
%VL9t^#p%S3;4/$^f>QVE>-<n9huLu!!O*C!G3GTcocPH-gTV+Tp<H-T"[i0I1iPVK`!fpj];senNC<^;Ril\hr7t'5'M?X*74BcF
%J$q:A%,-&]p2cMB<ph_6**$bdQ.U*bGJi]7/j'VYXg$2=OjWN!U)4ofHs!Db@aX96)]!c,?c]S5[K5^hUeZTJH5#A/!$]XPULI@.
%Vl<7,X#E>XL>LZS+6n#Y?fW]];?BU2:3O"XLe<_[3n>h$]A6bcTQ:g!4+B2!HqAOF=u)[FF.M%.[_bjMnh#e#TYdnM7mBIKU18H8
%(+A/&L8@M(BYp?anJ3A[_>8+6Y?O$Bm)4?l'8/_l-V&%#2/=J\H]3bUiI2DmcZ;g2GJBTmKuddDe=jW,&G:ds#5,Z'8)O+1VeGha
%e8irsl'W-B'#!&1b"]$YdQZ;&Ltq]X<7g\f0!%*r@3g@>*ssQhFC7DHXkRQ:$eig,F;[JuH=H($AB60n:\QQ\5a"W`Xf[qlIB-["
%JQ3g;muc;ZrG$<4JU(Q+>q>4.f=3H`0&TQ40+FM^%^];U"Lu>FO<FqU>Snr6P?b=H'IMKh%bF1g,4W837J1,n;QM5)1`)LoQ"led
%,YAg2AKmU2;+2Y&(o3Jid,Hr=c#(9RO)JTue<e/<g0<^*ktZ+6Qdsl>\"5+7OO`MD"X1M`MJN3++,MjTkH@FNoR*L0WZbNG,(b.P
%^dN,(r^Sr.1%(s"1@@@^cM01!Ur>?Hh%mmuV8%Wo`'c>9B_%c:r^+s[>ul!:F7MZX?1YI-4aC$B'q9sMqpF6'B4gMLmd's%)ES]/
%hH(%UhbKV0^NjPIQp\]roV?tPcOTPo0bY70-OP]gT8?5^KPio_U\i6%3ALU6fKodM1VSZo8>9FdXq##QS]g:=.BFo?e\^70f*f]8
%rA$BXiM)OK(X]Wp]29<(BXFHRD[%ecHI]n1cN2P4Sar&c5a4U5-E+J;[F1C$0?_th7MKSmTG+7J6"*lnI(`]&YjPtsR4O#^]@45f
%UNI0bB(h^qOUO=Z\UIg:9#r1\XgsRq"ID-u4pUi)="@"VB-,POe57:LR_<OAX(10>#AQL8A);XGTiP>')Ek_phX0c8ZH"BWf*P04
%!NUtseQT[JX@Hb3#,k%cV'Z8U4reU?6"^4?Zmtm&b^k*%.[A((0qd8tL7Bp;\]Ed"j@M+H(0lCf"nf-^pp>9dG'NXn.</kQ!Yl,?
%X&k4UYhLl#l3++d:l;?FI[q["mm?gD"q!BU)4u+\a'@Z!e1Bbed0B=+:A$dp].a2<irYsOM>j27bJgWH4pbD7IZP>ilki``goqMY
%cQ^a5<OMh@[_^h0)elLne,c'V<Z1%7$3ES:*5pin;[*snmKs%FQ!#S6C2?*>oS'D^QC@33:E"C`hL^/AgHYqI97HVB/6YCe0FW^/
%X2b;%L5H=[g0E_(NBnt09--p9JE7RP.V,*`S(3sRkBa%T19<Rp#=uVZXo6GRqK8QKjU/]U.p(pS?b&MtNg8KKILBSd?E@03*aY"e
%A`O/W+hJ0b05,M8ZaOe^9+oa$Qjd+@rOQ;bnKS`sb`8.*%Yjs'g%dEt*d+(4^-\@OQ8%kJN<,6,Zs^@K^AN$p+)L\Q2Qm=2'09j9
%eHish9&i,@m44h1h1=VrD!R*%0uSLZ>r<#mZH>4FfUhUPbtqS)`:kJ^qN$Qj7DG4Q0VE?dJ9!`QW3;pRQj[D*B#<r,rE08j0VpP/
%b2J:/lIeAdKC(hi*C&kBXZl11ES*?Y4Xo&Kmd(hE&M?5Lqmf0P-/;.?R3"#Qh`Y'n=,E19R,*7T]*SsT91lTG89Oa9+r<bYbP7kG
%W@u./"&9q15Zj(&flO77\D:b102%SI!;_gbdE;f`lAl9BElGc(:&)ja:[=kJ!H@/,\7s`j!n$UmTC?D(B#0`.gje,a<8Z48SgY7/
%RO*-A]Gdl>bDD8SLa#*^m5n1_*e\OM*Bl&tdW+6tYQ#0Ss'TM.\Gjek./du)p9N&$.s9VYl$^O9r8Ij\eY&<6JU*26;Z\"a7LaP+
%/j+icYm\7]?Oa[)\`FdIesf,oRs>or*=S_uS-+_Ee#QOFU67$\KB-8Z$9P8BV1IJ53>%+NrR*r<]BfoPNjLbK?m]/eC3sgZG493Y
%rW'TF&:<kJE&u9s#GL4SRB%$Pi@-<\nrA:4F!o[&,grf1!;`_G#.f(@%WAq\^(3P7FF,6tM:3tO?kP`E$.*&m64PC$$t5`!,OseD
%W$E:l)a)NY8n'F^>>+T/fbW+a!j/.aY(8g7$IoNG8XXC:=eA@f$0/hjh[TRfA)O!0<h^AHVq"B`5Y_Zmi%fQ(92#pK<VSYE>"lMj
%J;L$%.Y,u9Z\ekHK1(Q66ZS#;a5?j6YQDTc&2rG02d6#->ju&G6U'`-?p(c_&%3%VZp_=S?;RV`BN;2iT.>2FjqTsUq0K"ubae&C
%Mppr6b<KH"+Pk@qMmoP@L[rO,0r]=(D-4/[ToqlkAdmdXJ"h#X[=KMo,\MP6?7j&,r_]e)a3I-?[\NFm[D7eg8"1"32Am<jDN6Z-
%UT@**_!cYf'SG9-CFmR<&#tn0>92?`*AM\6]c!UoX+rA;(%qO5X-$AQ]`K2C;R+_0HNq@AWW)OEeVlmGEJcZ5ING=iPX8A4pVi@&
%?;R*"'AS_IPp%o^I(aigC[UA7#5,f60qCCZTa[4K&N`,8oJhLBo2gJ#TKd"H[QUMjD][tS`<u>hH/LH8b/a#HOO7+/U(R#R8NKH%
%QKn_ITX$j>\$r6<oe?0jFch1Rqr*[7mMVbf?-$]Q;n%q2/Hi2WVTPYJ'4a2+Ao-XF*-bMA-jP]OpkIJsFsP?IbulX_p8'lJOi'XE
%$3-bJJRLHGG"g=)r.3Po!S7,dr.WPs`NU*=_Ic!5>ADtgdG5XVFCW*M`I#YbGPfcu];q5K2*)b!.]YJ(N!DDd_]_bp!)'J:6mLTt
%Z=0*g]eJcIFZ5TD2Pa,J&PI+$IotSfnrlgU#AUpK87\TW7V5+CR1390faXh$d,o#;@s+!\p<QuT.,ARSDGoN\M?@;[oi6.mZZ8(q
%8hggm-o>H+S?.8hG*HKMFQ%6WOCe`Z_g:Y)-rH[.`C$Yb`qHdeB[#[D9YX6`Gjc6Sj=!*nO)g3'Xu-aE*Fg@Hm@^KCaLr,$Ykhkn
%Tek1/S_f'nIX]B5]&G`FE`Hhf-m,`C1VP8M-ut4dO2_]#)!Eib^<&%;I=SR&6R+SM3:6R8T-;UqTQkSG0T`[`O9b(Y>0dUE`S5&S
%d^gSC7S+hbYBQ$lpseUS@oOP4Ll?3W"s4%Zj96Da$Q;8uq._Eh7Im<lYB$2LJiN9N1=pZFUOrW"?W8ZkLZEPm,\"Lc[<,!?mAZ<:
%]fj]eJEgI6dRsu!ZbqP?QT*6^4PIli>BsX@4BtU!eT]2<l^*l`0=(=Q(*@C[Ell<'kKWT=kPk>/S)'tIf!G&J:QH!olE.^gh(]DP
%"l6KPCK_tS/T\Is4kSK`P'jpM\Pd3Z2-q2:0[81grk5o0oqIkgI/\GACXWVc[S'Dfjtk-?UW]7>p'^=t68t*6=Ed!r2Da5SVl^K1
%/#dQ3^QI53BjNAUFmc`E)=,+AqHNaY%&V,\[20X-7sj1j7JH38O.T=JgW?q6cPl8]rcr;N3r=2<]oaj!B3#dOfu;c6&Z-_!A\WhB
%Q778HF49)Kphmd4^1qOm\KCGRN-p&@am8i][l0jA3obd!d>dNHQX?c^f>I'F]u&X>oW%ZQ60`"RIYAU./lu`&2#au'jnqm1I_E7>
%AY!aUVA@C2bNW(Y?^J71+2,d6#Hc$BhnHUM[?8euY48^DnkO3)MPo%5[@CGS4nuTpqXUAB%Mt^">-0H-C8LW"*e$TZQF8\X>a[:*
%Zgmb\<iV=4<*k#oYd*>V5<UI+mTQB!VX!t?IJJ1pO+tkk?8UL?k1iIXHY.#Hp!WP;%Q7HSGd=ij&u7nhW6?s.hd>$ihV5\m[^4uJ
%=<B'"pX-POeD79V=l+O1ppb3Hh#C(.5-6@985GespMjD$3bQb($DQg"qKg7d'a4BAYcm;`miQ)kEgmTGpQe%nE>f(3pd1`P(RR\(
%phS3MIk3h/DMl1ecZWW8s6Z)BY<89DhUho;I]"b^ICcaoA=d'j&HeReg"\!'HhE)91KlMlGF5i#1sdcO,$MkHp(I#:-cajiYc,g\
%Qd2*7\hcY4RH8g8^?&:kR;^9:inDTE41X.A#ANA\c"m>miSC!QiHG&G;`lLWhtm=tr=Yu!>OPA6)5/.B_M=\'IJIa6HC$\:B"jh,
%DjS0uCE(7`_I[o&pfIb@55jcXa+\8T6LWu^q.8i1s7+9KAuY9_Yp4857fZ,R=\HJ8IeG\oSO%SeGe'r9e)k#:dhg8005t4<NF>.k
%`k2(13ReA*TYkWJ't3_-Y]+<(h0bO9ZCeR!U4^^oS(S4saQ&QIFOgE>]jI>ONGkuT$mqTZ=,e!S$)*3NlG`a?lMQ?2FL/M_g\@4C
%/A=fT[*@&1`mTJmS%OnZN&[qL5KGH@X=\9r3QK`5bPTCtRpP%n]WVsS3S>i(Tl.^2.R+'omOrEa?L9T)NVo:+Pl&9Vle[DlkMb0U
%_>i6F=^AT-qe_7@*PC0^Bi:i6Kk4XM:]3t5s8@)TohsCD^YSX%&J!-ITc(Jn5qi$jO0VDKiC5_8Ik[1\mXE,iC2M;tY'_t9PHirN
%Z[2D4GY_4ercX!-c)c>q4\gKB(<YmGo!XuJ]mBDQ`d#$6%8be^WP1-n%p.SJWT3!g,P^Ws_mHb_IjJ4[;Ps6Q\HD0"?85+.H2I$?
%jQJ;8bKm(uG3e_@466-C1DeWm=mF6u^<tX&@I!X[A*A=K=#YuJ[H.Hbe*^%\Tl$[1(Mfl6k,uE8A+^q(+6VWs!SJ)qh7@dWg0&go
%rN%Sr\pd)"?>R3>Ye]1mVh=_dH"4$T"TFt,Dl<8/pb?p^ou4B7ePCVLg3gW*KJ$Wh!^G=eR+=L/c;Q*m;lfjIF[hr,/`j*\If1F.
%=o=qq^#+3\\6X+1Qb!"IMrr&3mH%f&#QCccem@Wq'`[jcr=^:PHM8--Ea/&lrA%)Si&'u,3Uu4S`QN,ojYusMaZndG`92.F*f*=e
%AYJ"fA,,@oL:`8e2).h45jT4-Lo)V6]#TUY5PjBYFWhuq_e[->d3u4)RYDu^+`UXXkn@qJUCg`f%=[/nV.e94ZgM`=m(diSc,XJ%
%cX/L>2keimBCK7M;fQX%r/4pj,U,0Sa,n(brUB$9*9BhnNEi!NF1;#7n#2`'[1hqAN-i/L?a*MWs5R%7WXau,^\0m[BS_%TlJ=tb
%#*$d6&.JK'*)c^gnP>qig7)<f@fU@n\@3Q8X%b7\pnAjDRXY$@E![Bp,;H.%F'lQmJ]+2s3,BhA)fYRC9Gic:\X_;dAUm!/m?eX/
%j&t8&j`Ao-ZHfR`o\kne+-=n=aG?%:TA_edP:FiM:$`=4(_tjoM2&86Ne**c>."1oO8(hDDZ:qjUhp\D1XbJ\j6TFaU&9g669lC=
%8"Vhb_T/Y)[kB8bX[g2VfE"Dc/jK85"f1>CIeN*Dqt9<ha%6t\>&^b78I])#!U)>-l`IMjD_ALl?d?-(o%2b@Z>>H`(j>N7G&o%6
%M_(K_\V&I:Vo;"rc!7D(4_(&PBQ*-6>Ng4^A(pm`[uV='mAnh.LWmr.hpZS,dcWp]\<8l-3r)[g5ijoZ.dNYS/<aeQr^mRE2cmb+
%X51OnrO)80%+VhpSc$Xp>2!+6<b&#'T"__Y"HRbu[oG%YTO,#'2K"1kp;oCT=a+l1!piuFJGh0+/[F*]1Vc'[5$P.l*?9Q$iPJEB
%!aX[^n12M:K&o<+e1V^n$C6TL#9uQ@7Guh&m]_ef>dl:%020rhMg]iVE%TS:G;%C?iO2V6*bsgG&$i[@`V'.-k%37l">_T7UgJ%g
%I%5Z!n@;,jZM%a/GPe$_DQ49@5BU9Z1OJ$7>T7`tGTcRq(8NG+h7)ABC$P349-AR@VG*cPQ/#tm0M7rucK"+.m&!/5nfufl0MU:a
%kZqqBR+]/Z#iM5dhF.*.*r]>WmahBKnGVGXlW*,XqmY33Ru[]YfhJ#j>KcO3j``k;r9Ve_H?7CKk3V?m!:Y,J%<2jp+0P'N?[]Mp
%%P'_-QR)&\#ll?8$`'s:QGHBX.U(4c=\$*_9D[@eEj,F/7.],YTc@gW<A-BaBd]J-h"d1n7WGbA5!QcRh5RdNGT$s=fjjk^H*I"i
%F7]8^d]\_?Nf9h/j]>ojXnN4&f<7s+U.Hte3;[:p1fkc6mWIjT8DC<o_qi=@;"'iV*m_"Bms8`9-DJ`N<kWtT``bSdHU]f-B[8TN
%U&hd+(&dO5f\hOmo^fH?8o+:GS&W.%IJER`j_qe:NIEjp^*cQ&[aoV&[d&@UGb0>rZsj(%3WfItV,.24Fe$^J0AX6,=O!tmM_C?t
%Ze*A2f<:K98g"TADaa"J?JXZ,GeTVl;1JLD:g,O.gtR+s?)*V=0q-fN2Or8a&rG\U)0V1f[\%U00oi@=O"jape`(bO;0'bVYkerr
%MOj4j>sg)d"(L<)^'DM[*b/.+h0p5>QZ_,rpBnIHdefeOlK*B+^jGn<jf:_F;"ds9#ql2\k57"eZi0ec$`DP?]r+GF(pLL:m"rCs
%I!lh;<'<HL98CW!*<n[+O=gU`n=6]=Gb93*^FXbcj^6m!qO[\l(l>JtM#)W,3tE),)?(]"TZ`ma[1B*/c%c#f7l'Ug#iEBb"j/ti
%W1A%QF7/=2RQJ@2Qc"`&cr`2fpCrs;o#oabPdT_i#$-!2Z$mhX2t([%5'ulTZWAc-9\XLC,u^uh+'kb(:RAD4DAIC[]BO+E:ld+\
%/7>'NAbJ=U5=Q+CR(<:$hE:&3I.-^dK9PZtrJ0ht76k!:oH()E?7[]\P0289!i0.-/mJKipj[,p+.QU/RFMADHJI.UId@d/ndbDp
%G+S]=p%C\X),7dTgO+:mC$oW]-qrBnajlF/*o5<=543<G0d;`QIbfWp`Su4.dH^n]oi=uDbkpRaqZ5<rcX)??2Ek2,IN$`%m:5lj
%IcIZ5b=:u4l'hNfl`Vp"8inQR%m$pd>>LgBg!@:lk2Stamp!_HH>)Pl"(]Tk'rs:>S9MU"YI<=PlQQm[pJJ^"&QJ&aa0=#shd^Dr
%(eRF&L<o@K"1g_]ZO]VeW%T1S8bW&QbtPWc[hWGYO^IP6b7mad<jt_O4g9LOXi"-"l!Cb>+jo-hm2]7!2?0>ZVPapUG@#0(UhatX
%>c_d`EN?h=[u`sqV;0CN=.,f_F`$;/d!XK";ZBu"d4+8\?f%]\=,2hKBq6L_Bi4NK:[R8]ZC^I&8EK(La6Z;BrcMu=2!+SSUedRp
%MQ[sIUmZ"Sofg-_h+iC4b\h?)*^>/D7,LZ5CY,Qb>uH`uD7r*gb@NUgc.I&e0AleFC],foh"#4QF)kjcR:aKAH;+2>ZugDd$7kFl
%SYL#hL'Qi%Vs`toPW.JaCqPgPb64uYdm+`LCS6f.&%CC2:Kt*?T/nW/RH/?rF_gs+\*KFD%f^\:r0=C#MlW?2gjW$:GSQ>nK08MQ
%Jk+eR<Uf+N7!E%X1%P7HQ$NA*dE&CoA9Tqu*\=r)ML>Fe>s<XNpCba:^He;pIino06XKtnB.\WDGIj(hT%:_!e;EA?;;>r7rjo_'
%^%ZQJIfE%s;lnQ6IH]5e3I85hQUC5IgVmf;q\Vp%"uQT$h7'J3AKSS^<mhERqC8iKF<LXt_fsaSRt(=/&WODb?/-s#T`Our\])0S
%Yk\G3M:Q_%7Z=L,bf>W7SmC55"(c3@>O#$\Rp_4?]AD7h>.Yk@PYsSp^C"a26u%^H&'iW_ekX@oIJFdaL>HP]l:"AEOu6#3$E:eG
%qj!_b?%JtVP=p>nodJpn*+WJ"hB/SoWT)nhdfB)KHFJm=#YLA*\ULc!Jo!SuGYdSFG#5s+S(eE<jL<a0E1B]S.F!+'I1<"F<SPX1
%YM5JIkI'cao1B`44bp"Np\e,`f8ihk=FTi#_i#@`5R`'9L[N^qZ8BLRW.R#Bmc,(gNoTf_iat?*2=@M)GeTuM_m&jBbKc/G>"k/f
%ls+4nO5g#L(t.@b;IM2n4,s,^fqYC(X8C/cb2N)H<1pBudBYjp%8HG5-i]P))(_>*p$@]_r4H59q>U;:T?QPZ@entMYjT7dD&'%2
%<cA':HRDB(NmeD51cEX&Q4G&h!tN)I%dNf\!7'WJ#;C9Yfl(Vm-CXmLCGX0e`>/%5d8"RDJ9[BpDnk#r^QO+MIbOST[i$Kt:5%oS
%ip3H8BYh>b/)=Ri'Y:I6Ps#Z0*+5./\E1H:gdue'N@%u-Y@\SXXM3NAhio'!_>;&)5^g9ZTDIgH19$VYTqCG!:=e)jGo*m3R"QUU
%qr)\c3@KGYD55_jlJ7E/qDbesq]`U]-H\V-a*6?(!G20SS)(XY@R"Rt(5A$X6^BH8!j.+XTV4.DPa'FFeB,iKm*4YP9#ibVUHA;&
%?frkV2>J&gMG=tMJUFI#C$W?,E8J>)r75q]D*QplqH3M#9sDC@2IDq\1,!!PrY=6NGCP?n=uQ+oB5?Q!)ph.3f?9Vfni[LWs2-^M
%iF4B]*85$G/33HBX0M<bYKY0+-;aa@FKJKan3Mn)"UC0D3]&QBkNV`]0/E@jgi_b!BeA5[^EV5DENP%*IHh(j3;VR)I_B)YMsTub
%`Y\$Co3H-rE11]L8MB3n1l`V05=t5Vi5D7bc8(a;kA/_Mk#T]ga^#AuIGS+Lg_-j$a+(@t7.RINog0gO])M!<74\9.F6e^X*t!@U
%OFMZ[ea*24oQB<D\"+'*M[t5jXMP`8?d5I.n'sj/7`W$[k>-YYm_0fug&;_o:?hgi^C`ij`Ok%frU&@gkI[YT?lVg\RP=\X-hk$W
%%%C:'GMddN5*8T:_Uk3I%Ti>Ph%/B,)e=,!EBK`qbgjbkZ^]Wq@kdVO%;H/&?S=="+uYuN7tif[]Pgh39mdKYX4dAFrUobpAE#e!
%p(6'$=.g-e3M?3"#FWoqP3K.KhB>F/EM2(t+#7!fl%f7j4"mecY>Yt%[+2*7Y'X>&oQPL@d96=9.AiRdEqdRFi:X#Ffu9:l06R'\
%nJMPrP^nK027k2OT1Ib,@_2Q;97Y%fqXSYSS%8<%gc!0kf#Gm#:o^mfGF99AMHYeqrAA7A#MDUXHY/o=HA?i/[R<F:j1epsZ>u?o
%bqpK^X<eEnAMeBKG>@O<\'q4rL(&E7Z0b2(#H,[]mH]I$3OZ9)d`Pg*(JjKO\n@kgpN.fK@'%(\05u+9%Pi#.k:HF&:RUkW6_bOp
%X]FTTrhfu`eFUo[$fl#I4)^sdXaDl6XrB?<q9+CG$^d8ngM(%f$[(q-_n@@uGeSL.G4=b.N@amZeZc'HAq#3A!m>l&$D;lc!R4t(
%0Bfk?&cTto]ij2P=S>$4:Oe#W=_iRn=F0jo:YPnpS\]FdWoD<tYjJ5ncCD_f7of!/?#DJ_6t\*(==%LZ:mo0Gq,D"WPKmK:UqBL$
%NBWajZ0)J+*m.^&VtR>!`h0O!qC(0[+$\8o;i,h;8@X*MT2^LDd1S>qmU,nfa5TN?IuPbt0cOoC6G\DUHF)Kb-ZA]6M=j9W#E2gQ
%*56Y2($`TbT&UK@oMjk_+1RJ59tgqeIaHKH9\mYM9'ti9`2"bf;0:n=VDeH/g-_\@4s<8]Lm2?AkTB]]+,9QGdIRn%Xn_'$qlqLc
%$)=&0,*%=e9ijaNq;8&mXt(a*7K6_QUXqEos3[=)J6i)jFmuMN6m]RY8agq_B/^8/d>`'[WZYHr\mO'r>r-3ZRZYr[7o.k6E[Ti#
%oob'g37r$m9iD,sfq+UbflV&:@@Ku-Ea`G#`[7=H[ddj7956^8cjI\cRV2,uq*rdi/IS$+1WqM#(r5m/Nhp/chZShA@!"mpPFeJ9
%f]FMh?sS_+-XHL2U&33Q14>W]FYkI[Ge/aV*WQ3$aN\&>ZWn<9rM45`0U\^%8^fFXB[_N-4cS1>UuU`([cu.NGr1qa=\7)MYn\F(
%`*BmEZoeee%4gZf"PaDYk9UtT7bbe"%7$4KD,/MF9KFl,C&80diPOGtDB^a2EdZM=h)AbBQL,k'FFca8KWuP]g>H'3*87-Pg5%[m
%Om0bLdfo5e;YNl_gp1<R\jVek-e?)$/3g,%/g=N/J;3!plFm`)D]:["JM4idppgi<DOLdi6jHDt\F%#t,],o/C3W;e)Fq2d"uH=F
%Rrs9J+<]!L%%bXd4N+u:6SVPj'\f9dFZdG`b`s"!B8Or_prMt<]R104e:eR0!VsJHA76@_JM'b,*!8KC2RiGs&ZQ@4eoV$$85f%1
%DDI"fZ,t@76f8WHREV>Wenj2QgB6)E)ScI9\j/\H%K$=Zccr>iM:l;nHlW6Ae^:q'<ktpE0Gtc?Yj5J%A2m8e'u5)OTHbIK`ccoD
%nao,2T<qj]:*1H%+#_Hl%+l9K&BfcAC&d\;Oq'$?X:*\eO<c[;d(s`jZ\pD#I=O(:Bs+40)rTI</37`T4<RR?ZOK\O#U=%FNWm[n
%NDsWudPm=[Z-Wj=B,]e!_(j;e<C!l"f[L?m&25"C1hZuA2'bNo510n0Rg_[.AAN.C5.*FCe'merbN0BAD/N8CD*tZ2/)`B,+m71&
%3A@$Eprd6u4#V%KTOr"o!FT')foled@3]n(aiq^j9dVJ,H('HMg2R]R^;liZOjRE>c*#AuiVsH80#I%D7&Ic8@FI&oS"n5POK:9V
%[X%Hb37,H=:%%883l:/D5^g)cD+"pl5I*[UULp0@cc5),GlSJ.2@jK:eO>tl\-BDS8Gp"E[ff_JXiU`9A&0d*1Mhd0o;9*<;D$]k
%8d"'nYo28GcCpBTGb\OH;*gH+iKfrq))f+@afV_&Uuh^l[?3trf6C-NO<^d`nA22tB_L@,nGF&Z5=2e3OmQ<^JB_A:JH4:+9!p8+
%!5PB45k=ikhQRm%S:pjXc[ib1T)t*r@/cUI;@_GPbYXd=34AV;B&3j=5]*C<"QVUIdRW^-c+rJ\0`uF?&e%r\jBf'mY3Q(WZtM'j
%,/=;;-jJ4h.ZsN-(Bg/di=\t1\]?M1%>[pF2V[drD?GaUELVe%Tr!'#8Nq$LNgrEW8f)YT-c4AU&*0BC_:\,'DBiQ'Bd4+DXt5Lc
%5Ui?a#<7BQdsRf3>cWX3d\jJS.f`ud@!Ma2!IPj<jT=ClTS#-q0I0IQ5i*Bk<Y(=LI$q2JN1CdH!<Y(@@,Y^CT$STF3l$m0OC2KS
%NfE&S")`hu!"KVS1c->Gpa2-,J\mHq!^Z&&NldON)*7?mi#403TJI_>()uH<%ksE+*IuHm;8WE7`R8a.%F5s\TBH)&<M0fr]FWbL
%3'lZA'CsUbD?9V8/.qY$$@cGP3cZnr"e&8D4Cf0JIh#t&#"gHXGR811au2L'*AgrgX&0O$'?tQ#7AF"!6NApL+bW8.n4cs/*7>(R
%2Ls(E@0>q83BiXh.Fe_8QmOO5,$<=$"I`"Je'Jt-S>OD?3,6MuM3;u]'#k)MlQ_t9!1qR.Yg%1PDuuYP9udrp!b8d>EO`5<%A4HJ
%lj0uV#e&cMa\]^6VWIpeHla+7Sa-q#W2BD$!X>$84^8>M2?4])LFLL-o*:n_KEo0:W-B/)";dI,@Z/_r)??4JgZiX^$or"6fe_^P
%XQI(7dWM,7JEBEn6EE5F6oH#!<b\fhkSq$ZdUI?cgHaXdS8'Hm9on$oC,8Z&Z_nb6ccqc:^B6on4q\hZM%rNC\L'pj5`!ZU+uTJ%
%MZIVu=WSQ"+EurQSgF+A8DaIAaNZCYE=_>"kbC&0]VE2UUQXrSL/=L-]`pc5$1<iZMBG0O24HNFfJrA"DR2l0F$VN+/kp2kOE3ZJ
%d`g'8q/Y;Iq(`8oB`shUe1>E*2%'nELAHPKPb97rLGk\0OP1-."\/q72)1:JoJu:%qm9pb*h<QI#;gfO,W*qQOb(@5AQ9ejO\<hR
%&qT2>dL26Fg;c)_mYG#-E%Y?rck]bD+Ne-+L<&)tY_DB,Jq?]P#+C*_K=0*Eeih\Yb5rPsTf=<j1g3$2,(h;n1[kfgbU$NhSZO4L
%/K)Pk+OT66JTL%^RrH)DA&iJ/R-EqX4@+oc-5f]P2\qi:3&g:Q[ZN%0D)Ur/<h!J-:m&dEq-qqq<,@BY4FdM*6_R*Ra]cV-^kP)X
%#mLJq/sLWt,;?Aoo1cK5hj4Z_kc07$T\8pj.Y0&r+*u6iR7+P&KFu?4C*pQX7rV.:Z^<t=L8f/O4JA(.$5a>\A(Yd,/fu@)(t-h9
%LBL6kOGZ#M1C]3lil=>:O1HGho>7e@_oP4$ga=$@&!p&G@?Ch>Yt^Rc6)Yci3KjmdC6JP]iScKpLjdKqG*V]DCFlX*$%qhWGqgsU
%3h=FV>NOm[8)8=Hfg&mKfOMc[JMnI)U',3i->MX-0(MMoet@k]lN5C8gN-d/cNX+ICf\m(qu?ap-5cu_`gS:qFje6"QB2siWj#:-
%`!sfs?]''#,FHMIK[^DLN@$Tb#_o03-/7Y>!!U2OXm&;'.)aH)X328F-oe\MGWMl]L?7E'JK<3A`;t,m[\-A?J:'U%3^Q>*I6OH=
%N?&-UJqlGt&$$qb,Umg8-Ek7nd1.iNeoD`8.3BERCElaKVk.9m3Fks;P2i<qKQms,I2]7!EC`6D8>VU^8@D>@E%SFKaQs%T!j'c0
%Y/iq#919O#,p/d,d0"5H>EdPO%8,@i"q`6eA0Y1hfoFACr/KVXXQ6+DA\^T'OHDp4Kg,6ZPMsPo='/u]UCD=BpsJ84rAf+YW%3r6
%UW#OD!833]-\77!<7Xod]9/t_A[7/m)&BM3a-JObS:Hnn4b6eh,1&SZFP3)dTKLqX%F6_CU,Tq*@bX:h##H?XE?X#\5.O#$(=riB
%kR/&.C3XQWdJ'(V49Rp/7"ZX'>2[9]?:?4FO9Opu?js?q#IIB.K>cql\d]A%5&t-E8,PM"!:2`:KLi"PJ_XYiKROQr0YlV"80r0]
%$8re>'bt1?5-2^mcOl-:ZphD]3I)#G"2KT:M$#?n-Pg*PDi.#<Ac%:,BTj>83gi[r[7"(dkVPK/3.0VGfBTZ88'M7_i1Q\.PD]sk
%a4YBaQceqXLYZ[[#`u[8B!>$_c8Z=@j@0QXH+)%*5%:'>(\D<2KPj-.o#(l_Aic`rgQj.5-,Q>[kCI_g\HIob'!P?O!qc^7BOV)T
%%;5ieLUIE+UPm=djXpTed45=D/dndXGbA0joRPq(Y5t`0<=!FWqqc5iA5=]n>JM$%A'#FcPHP.Y>kWU&#Zu@^;+G9,%X6Gn#6]0,
%%@297,\;)K@`V8V]0b&"D$*^nKX3>V&hq7#])SRdNjNNIL4cU=P^l#/!lAQAS@"llnOU7&T$*YC_#m'#NT/;n60_%2aoa>R."4eg
%"Xup:%[!n!2M'5V^ks8Rlp`I0/0n*&j$l>(c((>I)q=Lo:uI=\L/?J)!CGWJTQO[XRB3\J]+tkr;GUPeoQ"u(C'&kB4U/63@SF.V
%Js;KMFEk*IL<k9[p9"Nt`uT.&T]h6^8N5%n5Lfr%B<cK.+t?b0q*o'$1t[*LBM4H`mXk8V5(;*"\3h&:/Y/2\9L^H1Y[OWFThRkh
%;]D0Y2o6a_QO5U>]FSQMUW#mW,;L1#m[t4cK2.deLiP\AAE+PZXl?52U=kn,/#[,>0:9t?)e%g60,UOdV+Ye=;@uSE'%$nfYG<^p
%A12_Bgb_u`BEZ?eaELM:,@dP^cqVR8B=L89"d'I(LS2g]84se+ck$*ZRZ>4n"iA@jkK'<[hab/tP:$"cmZ]FjZ+-$CLF"t+DpbEN
%#?>UJqtAR<kQb+I$9S"4WTXReXU7,`f;n*?<Qtk4X6Na<=&llL^<69eG#m1uYd:Wq7@dGd/::,l=jOt1WgX^s<RnM@79`c/$Tn+3
%\$0.<j.a89F=sY.Wi1'f&H25R*2B_"KjQ7o?IZNXp-lJhd_D`YWWkq`qrqLq&4J10qPrgh@c1QeN&J2,/k-q]C1C^%^&",KH3K:e
%HM5h0E/0^d1*Qrl]hC]jcS[L>FDAB)FmZ)ti=Dsb)>7(]d"j>(l=e+.<OF[CdAhL21&kV.e8PCf?&cdcWj[YQImm_^n!,ag'"b/)
%)g594g.3_jdbD!=?d4RZ:t=AmQ0G3[i=F*-)g)':%;t/&ef^[6'f\@]R&XO=.WMT&Nsu/.Ad_DAO1.@S?s,Hopg/`ZK+&W\_Rp7%
%$[M*[/u&C[E`7Qt@7H2J#@BE8+S@-.k=0^dl!b-)K.4;PI`14Qs.GjehBh:Pe3h?,;I\<C-m?C#C]YO$11.]hG]?K]FhI=sLm._7
%1gsJM47ZZ\,,e"RliHoI=$EW9R^b7&]@Xn/U0&*O0.:\u_K\/$!?]Ym]Y]g9Y.P27nOAhXgV315U\8)`[[lWkpq&u@S!_k?s-poE
%=ONlq,LM6c*>Zgp="K0gN,/U\N9?e'F.0Ujo3?8O5sBM4Y_Q+4l3^^f_&dp67&,8C6gGf$hkCr.'RqB>4)05lEd]C+4[Z@Q?0L&Y
%Dr.6p`r!6D/#2"<qo`Y:MYCNiV5+b8kX9&/i.Zn&eWqulPrjp*?r3`5NI_keML`$;W'Bu[s%`Y5E&k0-1r>uHYbM_FYr%!^NjKHO
%"r[>+1g>E^"ALM.,ZqEd[Y0T+>c;H,!cB:39mL&1f[(O]Bp"P]Zn2LPr<PTViT"G+9,^*-M)UiSRJ]#o)!PlGR1`oSAE6Fqgp>j+
%#o[e\T+tP*'uM;'`enA&Lb6Q@(do0^_ru*:%ZR/#FB=O4?FH6ICXWP-FE1>N+9A\$`+de-5rX3--'rED@Z->!Ft?]2bso'FH0n,<
%#jp_7Op)eNZs7m3NKFMfbE\iKEk+H5!]"&EH(ROIjZ9t@R9ThG(IX,tfPi+RT^,/6$H$#o%Kdl4jdM4VK';c%FLC+M,C'Yd8+O[3
%:5!USdVb[GalRis(r47pLgbN?opD>H1+U5$XiJ]oSp696Zs43:JG-<7%k%o"Iu=UK91EGg1f,P4qCP;lf8not/N:\04\'H31?nuY
%OCnp\/n<)43VnQ58"K9eN"k<F!43j4qOX$(%0Rc,3/2mFMTJqVL]gbBqCG5i(Y)!c"t`:QXs#7:e`Cf\4!sZ1S4El8*0kK-cXOF%
%FGY!('Wfto0%)@BA\''`PqK;[W"+QQ3T?pICJduUf^]U5*Gq8_>YfAfFD:5A_^MuhWQ#'Taq7lOM?F@ZnK]o-6fo8,"CRHX1G-Y(
%(?!?DhF5QJ\nF/cDF3,%_ZlFG)H\^AO^LbGL&sA,Wf`af4)Am^,fr="fr-F%3G8m!VClfT?l:jk3FGgA9ipo"%';ubA!/%fB2QQG
%'gN(=I`e*!cH7UUg9Y>[QN^S0]AuM&j-k9>)!om8`)(1UlU;>7i+RiYW@:T3).CU>A!27tYqQmDK;d]AO+Pkn,J/.sG7:p\8VW9Q
%GU*O@jk-F_ag!u=AgO'?FS"Ug97auF0U@k9Hl$J=ViY[i#)"^c>cG_N`#*PFeAO`XK?_tN^I8S7)^>Dl;f$TT6"8M`Q%Re!0Z`I=
%j+&*$.Lq_2@pL'r?#T&q'FuKXXWtBWm7CpkSctgE,B?0lN8k46K=GK2(*5VZKD$j0(q:DHUCJoJ=D<*"oN..-$m!t<(a>%"RM[S/
%!bUs:Hh&X$fS'Ta`@)sj6L\9SDNe"_Ju3,7J8!LRDMJ1S`rKru=/-%dhF1$8mRY;)%38Ug/_=r0fIB@r;g:@B`/)MDO5!bVq9fc]
%=SF9(+%2(Sl0t?)id>go3EkN&\YmgQ_-UWr9O`fiU>M,CMj7DKieqq*DG<WS_P5%fEJ1TNeu6Nh(N"dN7\G8_0e*Oc2K!@L,`\3:
%'R3CYPWe-,m2=tgl<TWZXt(3=2Ss.<<jW'8(Rp0F'$E_9Sg4JkN!!__^4YIAA"T5FjP$2a+%Q>m"WsKBZT-1``2GY^6pf4ojDmCh
%raHb(`j3sp"=Z<b7%#+8Dkij8/XNW4Clb&K+2'nI++8"8=,RP2!JFs?/OT5CE+/g?hP$VA5&6%?C3Jj:YKDh!9#N8C="'L(#]/EL
%IbU0_Lg$M>7pTC/KkA&n7i"9X?g91-*(Ti[m3mW#F\:dHh(-'@`^5gS[U@Rq"PE=B]hL+ES,@u&[Vont3Tt04%Euk?*bPCrq.2@V
%4kNV!m%\3N5\O,VA14>$f2m(9kiq/hlsA*\6gX+)GB>+?kR&%`!hRWHU0C2t#C11(!i%8/p'.8CMSSo3JC>??QT\IS0!H5)N<4'A
%O^Ek(+^A^u8]]h5XQPUP78K$O!HiY$Z;A;i$11>P'<s+h[UO+bP\2?=8l8FM*"/f9?C$rtJV%,EMl9MeBYMNRAon?PZ(]OVUq7D-
%NlX0+*50T=d;ppB#2ZU>_m*bk"l?8fH$%ef#L/e1K2-Tl[k$/EU)Apk+Y);]!D"Ggh;1R0<<E8#p'=l^G?2G6/uPpkJsnf^[c#Ma
%?>W3(A.3Isj>@hA^b/nL3%69d"hYQr5&.e;8YW!&lFi6m9!6,;Q+S(,3Q&+G7Dh%;n:?FT!3nocaRBES*a9;bm79Ep@TBp0h$@K1
%NDXN(3ARk]q_&Z$31E:*M8S\:]/I8!+c@46"CLoq/Eq%<`di7f^(pf2Jcef?JA[H#[:@0@DDt3!!^S)k+ZBV2X%+;e&nLY'1W\XD
%U6tWA-/C;s1<9SOYV<G7UOIUuAKXk7@br#/3Q"a*ZDPkaXV?D?kn\B7j[]'@ppirD"f'<Wed[eK0^:dZ)^I6GR;>DSh.KI"J-O;;
%q>\D!I]$?7`[G!U`[G!Us*h8b@:DhAkJ9uPS56'!0Q!eO7*UIC)R$tN#rB=mf/>A.K[R=m8m<UZgb:FIN3B07^K?,KL**ttd6!-"
%r6V<n%SZ[-W+giL.)%S``<g5*^]5#]":nkH;V%0=gLFEIFB%L<OcqJL<_q-hZs&cH$V+JDZhLEC2DG18!>Np#ZAh$Q;WMeKG#o&)
%bPC/M_c.cf=+UMad#sZ1A$C^-J6S<Ta^ru:J>Ne!O@h,HDU@T4M`/tZ8@RZEE9MA#2B&)0*?:PW?9jZF2OrrSlpU<>D:?n+qb4mp
%kRts2?&ZqC$WjJLTugX]=0k&+_5\/f"9CcS<nj)u!8HJSPWB%T"!/*]13O6u!k[Z(fTD$T_jp_.UX,-VPlR^;r<[K/;ch.]A82HT
%]kE`TR^jB3e/+oKL_`!%T'0k/WDQROJd@u21W`:p)l@Jn]IV?qW2&<A.5?.ue.#b!1`-Vol]26`=%<C:rWQ9:kJ)NUSG]"SK5TVd
%c$@/\(b'[RVuRT+1)!SoVqfsa$-tXU%>0p6=+PK>2(P[R6(0cW`KOt5Rq5$*4YuW*CLTFX#]Pd=IUl&"b.uZ0*7f%"a-"9^cmj.j
%,49,AL<tV<WfDH")>'eSJq"N=Y_fNQ&sN3D+dK%WkJ0G[nhMojfYmP,m\r4rPE)a3$T/\e7"B6,jWX$6GS3hY_<BipOJ+t55'\KI
%=j;fC"B,jS!KMlc%ceg(V#aOaSd2e`BC0-?LP:;B_"Hd?L<a0#JhoenYUpZQ0g^KBpHS\^&dNn!oo$q/-cYKm)=<)+l*)j(j1\?G
%aC4(Ig^RZ5&<Ts00*?M4FL<fu7Pi0/o`a2(+D$O<g8GUW:gs0P$&oW_KqW]AqclLUbEPEY4*$C(c8+Rp!66>("1!Y-0;VUA)osjA
%::qo&$Y3c;9GA(.nN/@N`5I1fE$-&63^An1(F/GBeXq<k"1UKDk9''+*U,bdiVX!s#uJ%T/jMO4[NuE6_Za#dpbE<5?tp>lUWWqO
%j.P(i1>ft,:86_(6#VLFT.XGi\>iX2%1?H_UaD:^jk4MAj(01nI'\&LifXHcd=s8e!gC*):+sHs;PR4?d?)oROS-mU$l6WB(aeOP
%?u@us%s"-)i[F'^rg=t`C``s'\?W9/0^@9Q^h%1K2FEg:(fY6cL&_IlhQ@-7"I09^?LMDl[g"ZY:\fSJB(/7Z,79^bCmVuS<*u?g
%l1,P9oaZ]"!R!;?9C*+H^_\NB;`2f5]7Zfi/8m7`!KI)-P77W7Z!^q(,EdlQMVBTgDji8K_(h^tCiVqtbi^rm)',/pZoPQ<Zu>#H
%@.W%[%?)Xh=un.c/hs2o\V<C[KApX8lHi?I4[mD"o!.Ti,6hrBBOm[O#r3*P^ecVFeP&RH(qC%bjsQ6>Jf6N2o:[jj`:^?hAZ09h
%HRBa:Nb(5ds4+r*U_,rM&R6Q3j$\'HL,ojFIjR3S./Xq"5tqjD":YpA%-+AW>6;aZZtb4XeI8Ntdq=tTE56q?J(3FrgQL>8UQ*'.
%AMc*prP0IG[kIr#`F9<0qZW\D(7m=@Maam9TO>/VMN4V'OU_&QBdbC@V5_Wcd]%q*#'8)/72%3h9qg=i,UOCF!Msa?4%0qnedBZ!
%pb8Q+qZ7[3"sgbo4H!?&I3om;%dI<e#S[K1j8'KIK4Pr0%K\pb+UB&0NFu4i7>S9c[rkj]?nuPQ`f?FS08ai`0KrVa]i3`A0G[+d
%E0NJ$^7bj>AndR@'gXn.D%tqE;27`jdiRgKXJ*gX&4h8a,7]]e&OdD-N$FE`kr7:$K7bKq$Nr#Ki4B%1h2l21n5@KI\iZ2q<Eep/
%?8mE;>hnEr,fo"BUbFd2e0?\]O-KK)PMJ)UL)%tke'Vdn8XF0.-D;P#6$=.Z)IIEhAtVYV*C9Z<>sa1t!QUh-o@1g>V;AcN)OMp`
%&T(+(Ns#ktn(8mun?=lc*`uMLM`;@'jdmjl8rLji0hEO0cig1RrA[C[i^<uM!da%@>@?<l[JR,rk9#`VF1f45;E=`#b[iehigQU%
%QJZkFnDuD@SKg!cZr5.(K0,g9:?@g9b*aKp^;b%H9#X5#N()h<%3Z^j%:rgsl8lfPVgoKqCTDaI)(4a+/(@B:K?mEWUl'6X,Rs,K
%XC>c*iiX6%28@t3(O$IOl,GfZP-<OY&E<71W@ATqlfaq\liBIINCBc_)-$U`dY0jq$@sLA*/K-laL?u<0]GkejlEj<&QWSo"Q/W8
%n,)#(=JRWPbG3Td&JfPk:fs,\MtKr6G>*l%P+)dS-bF^b\;EJj=Ck/#E$uts6=>pGR]HjkWsN:f,3f^\2G1ju*Bd\MFS#jX*]p"8
%H5(4`PUU6_NsSuF_aCCr1a8b_qRl<(\GLOkDnut_n1,?M*34RJ,>&:="Y>KEVLOW(^95Q7OiKhC&GaOYihC4q,FTnK6'9\GOp8+q
%Qs3t*QnBll@/?Q?@i>d5'X8Q=.L)d8)QWHH+%0sjEJf@/CDLAF,#+j<Oo7p7B@rZ/..i&M6o,]5a!=Q9&b7''0QF#s0%,;<Wb3tY
%_f!gU]ZF(f.W&6*"i0pr5@1JgQ5bO]JPM9Xi>.la,U1oKm^"QHH:,5rSSsA-8k*nE%S@aI=_b#ke'0Taas)*4/0%Mr_5$j[/osAM
%iD<L*BlP>c*r/N$m:3#MN0KQ+Q77P]U#uVr3F,?h-6:'o?mrO?GIK[Jk%R`Y0kLu:<sNMt=X'Pr>at[gU>S`B-_#(AhD>T>F:?kY
%f3g\O/GQ]O4*3RPZXQBlk;.]d/:rBboLT&a%UZ#99T-TZ%T[Oj9Y(?YI=r^h$rs/d4q+;S5$8X&>;ohb?.gql(f`p)'=eT<Ugi/7
%01Wf?CL-*I4W&YS</Tag6/Xq.-L@.:(c\r5j?Gti1'XB?iC2j+(P)r.FK"L\O&>r[qPV6?9V*[l!F[81J[\P<RgB6Z38Fde2`b0A
%4YmQ))@qkEBX!kgl$s'oW4bi+Hu9-3iRq0O'9c3#6PLuYXXM7q*(7GfYsn1%g_`l+.D$;3+M":WcW%f4!LqX3[1RpDjfF8`]Z2W4
%!Fi[,bL)=1W2)4Z1J:(Sa,OQjr?MOr@]U[-08(O&fQ9)$_d[N4Dm#e\(iU6\$11+3Z6?N<84&S1#e-sXoll<K:(W"/9Y.+A%/M<6
%S/g*uZee"+!%j$`VJ1-Te8MKud"#0`NtePV$[I;kA(&iB2+ft<`5RB><h]$*KT-6gdqQqZ%-7&HPX<<q6P7g`Rrj46F`No5pJ*U\
%*#m(kNtdLcHBdr[Q[.fSk<rN8\qX&'$kD!h1atps&!eG.SO3RDag[4QW5(AZTf-[s!`1`Y[UOP1)[6d+%8@cF*)+q])SEeGn-fe0
%1DF#lZZDP8V6Vqe`-i@nDK:Ggb7.>s6IG-4X\jt0Y6k5Of4;cMC/@_IB9_mO2q!X:l1!c0I\GV$;WGSK3$tPH33e\-;S<N@pm->*
%.uEK4E.t%22I5cVG79GNY<]UF\;C*IAMgK(MTdR)1h8`O2DiK3O]j3rAheW4X2%!&1_e2$Ku8F9S^!4eamL&e/01F(\1St.1'4)2
%&Ng9<@j^S5h?:Kd6Kb5)75e;>a7+ILD@T^Kei?M6dh,k__R=6c]*8Mh0/XVqCksR4G_N>`Fb"aSL>sRJnRFTd#0'QqU95<`CuXn4
%AX"34jGhVG?^QD)6(&JD;r';Z-J`d%Cd1Doh-rh\$PCOp-FXFRI@+7Y";@:_!K3YpUHn9-kb=^uh8n!C_3@itqV3mWh81q44uLJe
%1AQ>*PTE_P_0dNu^k6GMD\rd!0)=t"XL!R4#"KO=kIUSM#"?<H</2Lu^I]?D8M<YCllRQeS"reeMC7+oYVF393.@Ki?X,tC^cXlC
%_S5P@Sr-R"h&o$*-jbb<`^ak_hE\&/oNjea.l'mm&Me=Ij?hH<:W/J:-G!eL?^8d(EW2;b`JZ,W!oHPqW%o+iK\g9dqn^+M==c.\
%RLF\*q(r:?2M0JAn-XsaQlJl@P1],Vptlk-#<OBi2UFDFDY$R=hnVM\?j;D,`Nl^71WC<J#I$NQ+Ll)$7f*1%VVDf+'@Ig(+Hb@.
%T^l[lY!M\?@E!A"=0.m.b1@'cV&f_,)f(`:RKl'BJ7:n@I:,Ra76/n#@h0@oE5HIFH)77;#L:'O[Jos:+-\LcE;kbT_#\uk.lb<t
%iMD$7?V_A@=/;F"(_MF1c8*e\*]8j5;PFH#gRs<`7&1kf,U2*Z^g[W*(&q_Sm<4sGgW5:!M8AdpZR5i(2-6!JlY\d2:udH6>*LVN
%p9+GYh1a``Fsk8Z_j5$Wn3ohVm0D]9(k"q93gnS`]li>nQ4"_hVtY_?g`er\5jf7,9dTEi!pVIEL7^'gAZ\-'47h)Fj^Ujm0!g>:
%e@<53U$=ZS%+I"5<(+f(SH4t1peh=R1t*pGM#]AA)*du/(SJTn6QP4)2>%SBdV3qFk"sSrG&:Vd[R"nsQlq&#4uArt=gnN!(;"1/
%?8-Sb*,l`56)`833h7n/?T%ALNPYH%9-&rZ[Gd?a_CkKNDNu<>_)DmT(3h1P'dFP42Fm1ORkHI(R6#)seE1_e5O:H-/*2+)=A4Zg
%5T3`cd3TIY2^6mOO0`^mr(rI5W9D!3O!0+q-o:)C.[b4,Bcq(Y&i=])8+3&&]#coV(/)_k7;r_I@$9-7GL0d\-mag#CN#kQLp1:H
%<K:k9ARdGRZ%_Q#7Gg>c9gFofd2_^:BeH@j4ur[3;/]?P:kPTaL$\9!CD\m9%(i[9XB.3l0M2Tf1UC$B6<M>0&WX&O=H4dmBq_`!
%\>ctsVaMWt(IG1YG(/GGEgF\^>(Z0h-5sHME&);'r$=I.<;2!o0hpLNTVke'U\L(:9C*%iSIEq9h6s+kQE$-fFbQ"$^t@Y@<l]5"
%G]hn^ZD$4?BYof1N[Z'Q6HnFu,WKo+!6l;"VinoV2'7tV?tuBD#]S.jUM$b!)@:[e":f_d!D4G@&5DedCD\mgAH>.:!?+[3cUEeV
%$H1;!2?T,R:(LJGU:--M&UUoJB!:dXOC\mGG'n?^9^,&\n63f)$b"p6L:Z&\$g;"%E:=#XPM!Rfd2Wb#Tecck(1>)%9-Cgl!MPAW
%9WeN=7(J.[0ut9$(PCaeTE(rMbl)kN)X:u@<adM6'N7\WJ[qg8WPt33A[*#3koN3cFh7FT1"MT36K9)fB1n*HaaMZ%%Nf:rOF*'g
%ZugIEp7#lsEuG`1G8,!a!=E/BmgK*0,p@pI\#%HlN(od:Yq?1JNS$_K,Z)P4V%3eKZqc2&\7<Idqb8p^(f3jWAP/^9QPr$%Vc3MS
%0Y>_<B[V_r7,/\*S+f/]R`19="*1"9/,)$OR%a'F&A\VVkLK6nlct'tpS-kZ;K5i7SKK9]`Bg1T^_BP1T:A<#WiW'*k9lR/k/9M7
%r/H^:Jd0^&l'Y4mq2^.@qb21bi5fZSZjWb.$ZIe/_;iu.%OJ$7*lq&T_d!?';7!Y(n^oNH^3GEmTD#$j^-4@/2(XK,_2RTo'Tiel
%'"C,O-;_/T`RF@ra"*u5L;B(V1sbBC-DZ\k<$!&*Z5i_cF4ZMHs%^3PM;`NA_iX)VNYF%a(0NFqFiQ3WQg=$/;>Bq7TOq)4(0\^k
%Kb6:h,Ke%/"/IA`^!C55$dL0W_D-BC%:<.!6d%rR5@^r@OZtIf!L'*+AVRI,K#H'i8gTQ.cL8i4K.X)Dd$n_0Ui8F.?%XkIT'NU_
%'$l!be$d-3N<0IVL.Ks2=:<3FMdEJ>C$RNrKDaC>gF&/;8Z<mm,jFi`dm,+1Djn0CXCnlka2J%"?C*;d=[\jY\X((G96O%)d`BPX
%aF.bn,"jk@pGg=d7H]<%"lJa*fA0[E"h5Zq*K2S1*a#jQa(*_V/Mip%"t7I*,LLOc$G>(OD0dJD(RKF./'&*jMb%>6*I28EB-]AY
%g-XM1qHUIGpEtQAD8.`3&FF_cj6\NEY7l0_\7QrJ#*O#Nf2;IC\-OJ!@[#f;b-N:<1Kjb@-h:Mt91?Bg6B340M'LUf!D8cck_!V?
%)[j]L06:qAo2aqTnsq0Pf]'hT/9N0-L2BS4D+:At*KfTT(HdUk_td7RKc]USm-_%TnC-:dfb]_1&lldoq+1NG0%">-/(hf/Ig)J>
%r@_UO?OK.fen9g>:5s\>dZ5fF7@GsCr&bk;n!QMp)=@'68"`HMVQ&2VA_1\"+a]n5=VA@f(#6\#"R''9=Fe0Z.3I_BW"C3Yf[Mq.
%)VH=0%4c;d!dd4Ag5J.DS=M8>1;j[3)8YUuCVi+;e;8<=;RmD;8OD`9BVQnApq]NB&/_YLp(9_/.V[.b\ji',[?sJ;MNEg(I5^.+
%fd)aUa`Sspp?d$f0Zk*%8P8TM&'U6R9Vs<N;_L2kNk[Z"fV/2o0k=F9[$JkOCLU3.$eAc6s"k$XDPIbB4_DTY*7p$#<3t-'1[*3\
%&Q$1-&KE7&0B/U$]XNk1RpN2c3FiQUpgdSLaNieG?P21N*PoZ-F]U$Y0,3Tp1at95(TueI;[ioMf>.Sj#6rAiM6^e5#>(6#@Q7*q
%:QEPG'W`QR.16t2Ce&r=-k)Tn@"ljVYAZ+RR(%!25[*VU6\,:(A;&C*B`8:_n,)L^/(C[hoFZfqBr%M482Q#N@^`>]X!VJaA0RD^
%TM+<G';<]NZcI(urT5#EX`%[EmmmpM;5XEg!"#AN][RWl85Vk;$H;<\7olXt,**:8]B9NS/uOndJpb]-5_7)u9@IORTpaSo#nr8*
%WGAg+%b?q[>O%M*<Fn7S/(B[2#-lC,mYPG+fn#T>:B=8#Yge*sL,%g%Y[Z?Kg!IrZ'3)kH_!sf)CFWj+q1c.VZmhu3PP<Ge0%,#"
%?,Ga>*ao`QUZ/O,?Z^(1SCV73*%0N[ZD!]>Yd_2iAi<[C[CAO[B',"5#[4e^$[cTCr'T+:QDG/7A1RsCNn`J3CqMP2KnDj*fqV_]
%e+7[pP77[#G1[c8*5e'QMPCA%>hsD=&>(!&HVI1$(/K2@I.'hgi-We?DlmHfKHn:KXjRXJMDQVgp7#l3VE*9Wg'GWOKg[L_7))lN
%gC>!AShUtADL,.R'Q5o2c*X1\2m'V'17!NNTY]AGT-%Ul,r@c+h)-mPI$>%4YPZ`(cpLVTi6a$N[!<*ROE2?VbRe>p:e)3QeS([4
%<[].LA/Ra/HL,t@\nc!K\Jn9L7FuI"E2_P/0dU5@)Fs?XROlNHi>Wb[bXHWKVk_=78`7rW+.Vh]MO[Y@]-b.*E3OMjGY:V]8sKRE
%7TV;T%"&V)_INSE&/h:WMW`9,OYfVeOR>C#!KB&g1=g*D]*8KB?H"GZIWVhjmKZU`!H/Qp0c5,SdKO!\'.MMZCrlfn*IWu,Vjnur
%"rHI0nA,.<U$4Adh1@FOSib9[g=%=<l'd@sNd2XW]U;+K`%+\e_U>,*3&(GgmQrcde1E;:LN8"g?6e#k3[M.Ibh7fmGnu+1i,],-
%%7CWX1te(gCXN$XL8^Pmi^kMI\W16naEp/eNp-n+S:SD5r@t$YX@T-)Ht-Pd'Fc7h2s>rp,6+TubWO?ehULtlj7/g%3m";gdq&[t
%R4u`9JP!NpP\B:U^l`l%e)jh+d+&k>$&CjXc/@>=M@.hrjUG'm:q+Ai=FC!AS4"aRa:i0fn-2d=7D;XJ@PNkVP_@]5<BMZ@MEQIV
%NU5KmhcCj18\l/#BC.Ca[Xb9&*uU__MPr&<AW,nu*NNASI$86"Z:qi>7MdAf2p<*4oXX+PmC5EoknXYgp,jm1]Yd)4VhcVi/bt^/
%n&-El0\r0*6)*N/Em9)U0@=-]S@oH'IHq%0`s;R9M@o(MCH0-2IL.M=<qn1iq,[n-l7Vo^ftCpBm#$m]=.FIR2:H=SS4e`B@!jum
%&sCqG@E1.E1!P[5T=-%$iZ'Fg`'/N<`'*.m5b+J4;qViSn<dj.hC%5P<.s6YJ35meQ6tCHpc8gpW:3^fW!MD=!]H8"LRRJS;9CVq
%*SNUcFec$$f-a!c[aEe`?I71_]-<Ps0AuGuS35fh$V[oMI+,lk11igUg2o?0YLMj?0J3'8<3A7=<l77#L4#I,CTQYep46fG4%Tq&
%6r@QPmdQFJd8oo-g@'rG`^1.TW23X7<5"Ec?kEFF[P.6sfdTX47c`q]&7"X<8QRhck7d+F15-alZA9c<cY6;keh.Vmq,g3TA@joY
%Ze`!"ZG,;>I^nq-*:[Od%UDQ_7hgXF\;l6a0]h;@iTsoNTJ&L-W.6?eki('!_$SZmpa*#ge%!/EQ[acROe'a*Fm+(3@:&!r66@'#
%]G$h46n#2H7C/_a2gcp<!^(SKDPM:nIV=P3=_/P=+e^;NX.u_,aKQ8(2p%qC:$=dF:aO";]$nl]"!Nge0Gg"bKPAP^R_G_0Je.Vp
%*82[\(\$%4&=U]4`0DchSX:DSZfIWp'H76.;RY!9"pHQ%Fk,,]a_U'm6jt64i!YHC6n[BVE_QXnpndIXg3%Go6CZ.)bZs:aE_ge'
%U!],6<sT2V?6O*NQn\,I'U]r^Mf1%Cjt9.)j8H3PST5u)b)J#=l0Wc?W!4D]Eah+e+.E@"AK,QVbK3oWY)XeV<d0558i?<Q>Pn,I
%9#ZSl9hWuci]"2@;K9J]k=sY%mXb`'+sr>CPOFn!%<YYK@BYIudJ[]u^l?A5=Dl.1cY]/(/2Z)sWL+TZZq1Vf7<+oMCtnB-)"u]h
%?`2Lo26*Edfa0LrHj;Pu_`q_%McoqqmbtstQM+b]R-DR0$Y))h>9l7M]I#-Y3TA^h5(jkbp\7uP2e*=HG;W(Iju<rcMSQUtk\cO(
%er?sdr(\TYj<TJej[(Dm.f.re?"g<T`##O(RDWd?D3WU&ken+C7c^$&Bl!1"Y.#4.[rnFGD!m)+Rsosc5N\s#M^n-d$N1>*EI_E5
%57R*44$YHls2lD0qqS3`cmd!,h^-;3_'PT(ONtZgr*Y8=Z%_^[\jbZM#1uBGr,f>41%G02\o!;X<L0]gj-%DUY!EC;dmYuZEl?F:
%6$t\M^,cVrQ-(G1%.Z.<L+fnC;I9`9Uf*C(O!GCR6%PUZ/q'QBfo,!]'#hB&>kGle7C="da5N`t5fJroS/3$i.CC44fPjY3eT7Al
%ArJ`Z7G6i/?_(:<>leHZ,0(2%]:smGfYgB,j?;Hq*(RY15fK8b,3[KaX+_U\j4FN<+kRN0J`r!<Z,tCP^1Ak&bFq_CW,tB5jSo1_
%mTXui8!<33!q[RLUSS1jIOsl;$lBO`)t;]$Zl>0Z.`i_LAb<_rcT)S/ejiL,hC_hre#N]=I`r&=b`%ALpgf*d<+FRQj8"i;\0F$Y
%%)\8#YU&$o?73\T-UcVU\B%ZV])'?qpgLHgEWa`(RDuLGGbMBC5@DK@7D:?)$`:jm+%;\.o9CgA%9dn>'o0%8VQRe=7LBLO:;TY;
%T-&WQVCe26mB2,Ms(tl,>uYe]T.]9hnmm51NEgs?SOh[b^2#3<KC>4%!fMO!FFGGdp@a1=4r+C.3,iRCFZYg>6P<5<^4)@Fl7.4*
%#a5@ic5_o,[;j\",1R@$%cD&-GNC!.^c^8S0r^#*YPAs]CWXZ?E1EbX0Th[;REedpSFl7/\M[SHG/'o%.T#\HWpDr%mVR\o,(*fT
%V2l?D;=hVFGHqC>Uqp)p2]Lg5bj`+BbeIGQ-C[RQ&lW[A.4sLQDX?GB@G\L:,I&//C`%'.9-'R<*:FY:-5AVc";I6I%+ce2:ZD;r
%IUG4%Aq,h98nL=R&$uKn@^O"HO$V^d,$jSX@M'lRj,7=hgU`S[j2*KELHFaOjFoUJ?R%lNnAG`O=56b"`O$a(@n/##b%@!@oeXn+
%!,(FsJn(<:rDHmt5n*]#^6S)@1&LA)LDTQ'SV=bG7KO*-SB)p2q_q4qF0OOXRIHaBmF-pSJ,=ou5)Wi9a(]`cZ-d(sgB>n=XaGSc
%/5+HW-iSnD$m8ltp2ZU(NaC[VOCT4!W-jS?.UU*P*\_R4ocu5F'\)C5fesj+*PcF2csK2_W>p2g]QmuCF;WDUZ7>bP+Q+XT"a*lp
%Fb,1C(_gDI!E9,h9_;i0L-O"(GmU[HAs`d,WNI_I]3TJLrQ2Iu!8^P.2\3Ob.pC6?_;#N/9kc0)J_C7mA*9OeY/4t^PN?s>36#KY
%)!C)Uitb%qnFh.Y]%c]3S$A#l`q<$:.j9T%<%$e3C*[fpmo5((P.kGXr8X.S/*3SpLtS2tV2Y>HiF[i0RXCq)\RCV?/$q:e-Z&cU
%W8mX^D8Eb$jlO's4W@WU?C_UQ<di;Qcq<Rbk(LGHN`l1KC.g:-ML.Er/F57<_FZ/<c*ZT"!K6g:)Das<.t.2,Qn(UBm,Y45IPTYj
%UcGJBgZZ6daW!qm9gMm"fnBWkJ[*^S[Ig,!Q+%D?G'<3VhRT)%d'o!:lc=a,8CC&EeUC:pXpkE)-"VtgJT67:E`[^q'ijO/-cU5[
%'6i[MrRC7CjB0KGqk^M$"f]GSHM-f`eVQ[FB@sUZX@FLK]3P9;k8NL*)!/1EM205]/q28)&':ZNnT\g3(J?!!qg0B!Y/ZM?8!kRU
%N5YD<4hijTcKk*br&nc`BM,/?g*$"W`U^Vf[Hj0)O>%QmDK$Ht'3:1s&(\T)^+3')"eK'=RclC4cLKK;=elSJpQs!F'be40.8]Zl
%L#T2t$*JWOGk/6>&>9kM,q6Zor7qZ^NaZHQG\5/T,31i<mo%R%]^oZo;ib+=nSEn^E(2Dh`k/,%JR;?)V[L[spaLaA->*K398u9G
%:E?/@U*=+>PC_jF=LtUid:qp.^nT0_\VeKT04d#Oc-"0\9kmof*/!AbUMU"?Pu]t/aR_4fJLR&I&MkQQ91jdSD7Vj\;D:lsS>rNZ
%64MIeP5%t&nUoWWUkYgl4;e?f&#@\#MX!(]BL*M6/[(hJX)UJt\Mc0qofks;fbWdh)G?kaA[:.&#P&0[k6fM=VrT#CC+?<%HLA5q
%MBb0;j`=4=FIf>?S4b2J?Caek@)$28dF`ZfW%l):l^X^Jn!_eaWI>44EK*-D6SYS9SDoKGh/(bW,L$+gVf98>;HUK=QI]@?0jh<K
%9047T7AT^hitpo>W'60IM@@J-Q*tTaPh+>)@T^#Cca'Z,Q;>FsIno8")IlkBD[ag]V.a(>0V[*!"$5)blF$]?2aKj"f(=5Qh\*b]
%A_1-'%\u$':@(DcA&/Pc["K#Q`gU$O4*W=s^dni<0_u]->FSc$RV_k0MP6S([(MuK$&?&cI=27;4-fbIJf2mMI$nNpb00+)57dGQ
%%jZE0DItb1$$LfbZL:k9$A6O]J;X(<(hrPe`p9B)Ue.'Hq6'Id+57[nFa\*h&66iW#'lejJ.iRC.(ir4,O-ins4#J;X4)$BK3JUk
%Q.frZW]Wi&9Jp-6G-?=#[c?Kh__HF>at*sfQCq'T/jfo>BK\;=<Z*DD`QLB1&_gWTC&cQO&`O0`6q=*.cRmsGT==BG`;X]d!59hu
%e7DH^bHpIWf]gTX78h3]2>CqT*];BfJ10RMaFoho!e@N^"*&5DFtDCa-GM22K0VsUM;T^B?`ZB/=r<(rg/Tjk$5;C:]3&BlYia<>
%/qO)*YmeOi"?Mj<&)rA1m`)Q'#i"ZgPs#&okCSUH`E"g].2&Gt-$H5Aj?iL/P7-I\)H>%Y<H-$,Nrlqm&OHi%$RP$jg:C9I7kjP[
%BElru3/)(uAOFF;OISRu\?pp?NKHkp"(.tNWaa[r8Y_\#AHo65\M'MB\n+A)m4EQgQAoq)"R+c:+N%&RII_dufimYi@4RI`1IZ96
%rg'$&dXtWBM!;6Q-=R<$4iE>`g:CibD@p?'@l0k,fJ@2-"b!Xu_/Q@*'Y8O6L3T!ZN-j.f#S7gXocif18$i0J/[W_Sor>:OiC&pP
%h\aYSMOO2E(U$8oiQ_VR=mA`/jL2Zi`R1jB,LpTT5BjZPE%j0Fjln[1Vj<nq9(sGDkKN&J!.5WmCF6CLG(q5UV(in`\Ki!VoND[6
%!GMf$"ZR>)d>_b;7R=",)LHci8Be,B':XY!^Nf$2&.>"!k^5d5-=tQo&DSt/J<b!)Et]I>@2r%g>)^RH250P]@o!VJ\tTufCcNS6
%/m_"-gX@=gO9uq(7QJ^AK,i1854Y!crlX38B249Kl$b6$NBKBDPZhOZekb!W!'t$/7YiB^qM8dLbT-N)isUW0T?u`A'rU'Of6/%?
%!OP_8B^FF2gsN`/Pcbt=jBoAQ`"4NeNocq_R63&@_[<WsoQ[\74lAUWmY@i+E;-tR"Z@+]Qk%DWF\e(jQ)Jm#2Z1+VR+j7JD"9mq
%,XXdlYcDjFJ$BFQ*$1aFIW5'$dmL\*,<LR!?BW[T^%)EGj;nWqnj#(7!88GA^qek!7VQ#HNR^pc4u2[7f;UeQJE!.s3V?`(HQXN-
%-'j]OocRiLitB\6H\.M18AelF6[!m\,kV5t,JiZD`+(6jO!W1l3YulNl755=.:tMofrk]_\mE@%1`-):J'AEY<RT.tiFGsTE7rl6
%?4LCqe/:i)b(A;Pnr1'c>*Ze3,!QQaA[.lo=pkQH6T%UPT<S8NXHkud+pN*m5E.:P<RsrEE$^nCR""UB/)(_o'kK.TOUgY*;1'3J
%1N)#>cF[W<SAj`+7bgrDb>*,sAQm:KW%B`7BQnA.TbpR1k1D,BW^IDp:0;\88$KWFL<0TaF'3)YJ_kt1XV1hq<JU!VR4k?=Ro")b
%+^.K>l9q.q:UU6pM:j-9I-=Qfm*@+[_NQC<7iNA@5INBRW_IT0bi:CZ9kPWG"PZkDJ`B!d\!sKCQS'L197P6u]q!::?GVCVZqYPG
%-"G[5\,X@"Uf/L&/e`b%\d"6Q]f?'[nDo*Q9cBI6L?Kd3ZTQrH4n1bn&WF2eI%=[C6Rq?m(SKLcEI?5A;bTGb0\_O:_3`;hXt]Q)
%Rkb"EW/-8=8lLkP<$_9,Q(<9rD[O&n<Y&Zefnb5HS,rlqHrq[n'alu-Z)M>6j.OiI>Ze2hYV9hRn_NA:\eo*]A9_&lKm-Y-NC"GT
%Rlih6.[F^J,#1B:CklW9E1Wkj`II13IT+V.HmhDO]_Ya3qYsbAN8XedqkHISht:qJg@';L/-e<1FP\pnJ1ro)K3Tog5!FEr:l]Sl
%f*:b7\q/A17ln"Xo;`daG@LQ)\p9..o3me/oT(2($7l0Sc/#bbU@h`iKD/HAmlg'"cR^e^_PPJ6P=;H#,u%PL;['WK()Ej\Ao7u5
%6>;u[(tkE\q1_taNnK@p[W`^e>]'ndA7;uoeEL13:%g=D?"]h7@S6E3WCQ1^'DP639%M(`p7jniR#CM4o]WYd2<6DdSGUA@3(q=G
%p9\Wl2oqfCG\/`l%I@)r_pb2'(KTE9]7JK-2KMN5!;$J&3.])5NX`]r]u\qE]hje;K><eW4;_YB8F`7kd/AVfMAiIH#)M$b/P83B
%M2intN<:B@!>6$rpQ!n#X3Q2PpFj&?^Am1W=FK.[mO+YSSHqF$3)-L]X.7Ef^`rnWpTUY7I-<Brd=PI+Rl]I"<l$3e(B(OZ$fK?8
%*8f7t/')Y"R0NCPA_/t10VUo2Usgpm?'7Rq>L;^,fa]'`1*=6!SK#2+$c@)"*8:!1/L%PHjD=f4i'!s@Ie]TYfH4is'>BUR/=Lbo
%[!oSJ%u5d>2E$0l)h@>2f^7-:H/!jV+&6$4IXo\>Cr7]#T,hM8ZJpgD9W40%A(rI=+!/C^d7`C:YUP3q6D'=cr/8R42k($'Ph1\C
%hI_tf$RS6?ds@^=SGR)#G/]+bW#R(*DWtIu%u'jN;VL.RRm%j;E)&FoSD(On9\E/mrH11>(_b;8:<6]\e2\H.+gk!]lZAp*%5=9J
%R0"f0FL6-7'uJ[ODT`iK@jKe:4/>$-F&R:8aXrSG`aIqh%lI::0>9)<-?b5WciqF4(R31HL-c`"Cbg306r8<?q`<ZhZ)AIUh2Z(T
%MrX+io"^G"ID_X0njAn;A+AqbQjBQRp/?(fN2Ggi`b,:0&&a^)/aToE$?:^h`&T\t2jg_0nTs/Wc:N2hl!lq&^qNHnIla\fhTsm$
%%2_e((>._kSB,<%bMci%$/&??Har7YmY8&:eaL"%D,"\:PPd0GKjX1eels4AWPem]eB8*Kp1PBEn8tu>!qIX;[EIqA.pi:&.*^*k
%g3S'%?o*U\Kjl((7@`E]ncJM#bHOs$5iZp0`t@GoVW\9<X?f&)1FnHCK:C4p2>6faL/6GIhSA!UmBU73-T+7^jD*'a6RhnH+@.\7
%`Mi`iid2XTF#\P.4?Ld\l)M"dLP&[I>3N"^^0Lr8Q@2/hNc@X*F00O]PpR!=/,nODkpj(L9oO`,=brb=pSk9m7g%<!./$5e"e:PV
%494t".'bHL14LbS<r8&Jh#^B&Q&?NdGu8;QA*DNBGmp?FMX4V*p?Z`>1Xl;ol3qs!KmjdsM_>+[\G2=_+R4*g9!9Kd@@,NYhu.*f
%EkdbSJOH9pL(Q9$oie),W(mC#U[W&F</,`tln6`:Og*hsn%D.OQUXbCZ:-!TId$\_GA!G36[CaRGfDBMr2lr%pa#^YMP8"K=E3"$
%4fQ!0=disO!J7C=^h]doo1oS#gLf9iAe\BCfa:a6q:Hj8!-?T>.m_;p%nD01AsemKSY?Y)@&Ma!/6nB9S0a#$=&_me;AED#6_1Or
%6)8[8k8@hS$m&Sg_S!e`_i1(nA]G5;]%)?L8sB+OEdW#^H8Sbp#3aHZIRERX@XcGMO;LVJ!<tMPW'f]1"?\=q?^P[Z!/YPSk2F-]
%4ff_24AUBF*pR&t,`d.Po_OakL?1o`P,r.0#G;o0!p4WE)hla&0g7:K'sn+eZpood/OuWb15,,U#;<Fem2%$W[#gfF;[7`:K1Z=<
%HjekHrQNA+MQ$#`s193320Sn<3f"f+F[D&Js-op>rZU/T.Hp/C:!;u.riQ`OL)/uNV5UF[g0IFG/-8XD#OYSp68n.\m'ds0^,iZr
%kC29oLkN7ZR"o-3$$>sF'rXqVCJ76MK-A"qA7Y-BK,<)6X!?+[SDV`:F8;:doC&[]?QV+!#(4ZaG1pAP=)'^9rA5R<5fuh4.VjEl
%Qros.#C#M\18O#Q<Om2AT8)<SSotJ&JHE&:YZ'kT/Tr]?BhTVamXKN/p>nQe=ZbM7le2@CYe-0a'/_nU@+Up_G+=BU9j86>fH7E(
%q8.`?33%CTG$b]VicfO0aV#6><KN$bqs`c5)2QR!i5@j/oR>!&O1:^d*s[ZVd:LQn[!#[lTU/P76Ue'Gr.$b"['7&QBljTJG\>pj
%0CF-*oPXcM4"0Y<9WM*TE/)$&J#Z6J=hln8;p7^r3WLJ/GF0d=GnDBUO5\LOM;SS:iYio.]$JB4OjNFf^**EBFs1T/AqW_g\uqn_
%0=]D(`Ke'Znld$h6+[a.$rs%ugBcCu8Af7Kc;!+BA%"Pi4Tt"mg2FjInDq#sMUn-Rd]-,VN]c$LZ!3HU;QW(d(ooCV_C=1X$"t,l
%W%T($O24G94ho4?D)qfMnd;`FLGON4,bcKPUimL?I*@A0K,J)alFPGS*X\U,r?nVmoGs-PZ<T812k4a(g6Rp]:o"Ycd92q&3M@.F
%+*7eOcfUuMP!sJ#OA;!FTM'!C@Z3W&%X2V^`VBi_S,1[/+BMjsGiS[nl^c&s"K+5R#,TS3oO%r)L2)pSa+-?6-O,u&WDpm==G*Iu
%+Os"H&s_Y&+Q1bth,*5LQb;:e*/86B@\jrS;&kpbGB+;@V-_.VfKdp.,O$]YPR=d*%L"%HJZbZFHT6+^l=MGp`/Q^1&t9q'C"@/B
%SXQ`BgS8/i;u,CgK3sK@f@]AeGJ&fI)9;okeXX6F>/RnMRusMPD9m-&*eE+J"+>#JK7oM5#rWn[<hP!$_*6thgn^=XZN**F#.pMp
%^_%Ki*4V8gEc14%_-dd4Q.CST"$e7]?O@)?MRV"O>6n;",fRuaOo;U6?jFNoG2tL'p0rmMX2^_Pc-k^mn]SsNUeo@?P[Jo_g--[s
%D5o0sJGSA>Qe_b1ls74*C]u[8+.IS&,g/T'T_,4"1@#ZtL91-C]!@J1PVjH30GFPO,13O9^:-d5U5P%sFHX@QlJ]!a8$<O#@RH=h
%go<#nPaT\&Zmmh_>f)4ZhPmWIUD_bS6+FQl([5r2%c*c#\ZnXpoC!mtH46cd<p?];3`l/c&(HW>_i$!5"%,^I\9@5EcfEL1,RW:`
%U5gsd6'/Araq0@S%qT<0k5)a4MXaGe9,IPV$pQ@?@&=a^UUIK;C\T3q_dslmN&_2q)<ifko8F&Y!-nPN\Nb*bDGm+"IheO1GZ%J5
%&DD4p$<1l#%cU>?`D:Y*0a.Ui&Z?u_2-%gb<qGe>/)>k![n@@nbT:-Y^SDs62XG:;T#tS"4iAk@!m2@sTX#5;KK*;@0Nc#Cn"rdf
%@^I;ARu39RHkV>3%ODM\/aHSdfN)J^n[qWkG']a4;R*=%#P,mOGXNF/'1$4!Mu>)p+4uXtRkCQC#IIFCLDaIBg6<JRl1+iLR+@B,
%Jl*.Rch9_j=IgDh.3WR_FtFdu<Iu0L//A;T.I!W+$,f=;.3IO<kH(86I-<\dpnhVf'SFPp`)*KrqL?iZm#EDT?l6F0jcuB!:!mOt
%om/):@I`&^iZ?u5Sb+H3SdE@F^1U(&%/i>QqYM-W0=?s6-f#Nq%=;!/";la])Ps!9TbKYT0O7<YQ5A;MaVr;sL!H^*mtT"4kVN2!
%COXm^Ko0C<AP>lj9bfn)^]HkT6"O4O5mB[!.T/-g@^m9(Y<u$8Q--YO*9/[Wk.``uh$ju>+Yu-Si%$ZAS(]o*L>f4@0P7<Y`A9Eu
%q_SR7qcPl:_W:*r/VrJY!)U>_M/bM"lE'AmQI\oIRoA&WU>^$4<i*;?3bl]e>Wa#"^e%\TlkTiIIh#qQ^`5;>N,&(LQW&Bl1k#*!
%4Ds;Ob>PpO!mQ2!]cE&C;%%1ZDp'[UX6?W9#J_e<fZ_@S]Xm>J0tqf:hnO/]:3Q>=^<cHgaS%GjU?6_Sn9N6%,0>E"X4<=Imjr=D
%caF]hNWSZ<bh;1b+54:Fc1^eIlRoeS2#?iD"ki<i#i.%*n:<)k%$a1YadIM7P%h]S#(a$:4@/!p7jLg[p:7=&B/@#<`Z(];*g)/b
%:pW2O<XpLe`Z(M/P'C3o=&+pFoCA@uF4>t4P<K8pQjhNUX]kspm2bV5Ya*UfFC/WAfS0VA&]r^^P4bGLFf8E/QcH6]M_YYTC!UW=
%<S2$-3Lmd2dFR\uEXZmMQ:r27qI7*emRU/T0n>/F!/t3lAW0S%/;LZK=#k#Zq)X6:0MM"UMcO/j5!LuK/&JT_?/A/GiVYk;mGWAp
%_;J<Cp)'UTKCX%$"<^"sd/[=L3fCVBq8s-c%M0AfN8Rk^N,rL<3\5E3C>MSj8G8+5\XqMK6rPEQ1@,s7O.MS95[\]"s!3app;ff]
%Y2!Wt>W\M1A/B6#lW/b:NVZ,eR5>f81^-g8f3kUO/sR`"QtYdOXFq=J"2#ju($(mi"_f[>!%A=;FV6aCFXt?b\"N5M(CccY9l)[%
%$fs=2WEDM1#J_<c''C9]DcSXA&OPEO:fRp'HIJp0+S0omq:*pCK5">K*0Pt1a=Q6;A1k%Y!Q2*od;R*(bkZ"g'2g+F:n"L%J9+P\
%a'c1sk#G&MO/4eOSEMQVd2D&nP,j"^q8^W)P3C&I5pOAU)Z6Rk!<AhS3Pd'$;gr(sLd*ikoO)?Z(H`b]<XhH3]G6o<qu5QGfs>l`
%-;U@KiR8Wg/Zg+`hQ_/nc.*pPc)IhC7l,@dH5D[-UN$ebasbpMd'F*W:uBf<Rq-USgOfLK':aTd&Madn$%6mXQC],??]B]Eb,U,6
%7e?+jpSF!4Oa`^@HBTduU-!?'VL2Cf#=RLkkS?S5""NkCC9#ksi'iY7IqPKt+`\J",QBgXTa_,eamd0,J-lrp(Nckbma?JUgRdP[
%\WBE4cr/6V69.jkLMk;Kl&*aF;I"\<-eg4(p09hQX/_64Ke,4JMQ01NJB>\`Q;*C^9XdrLL+fSB(a5;@5:9uu9s(FOXePSS8?\',
%%t^C\A`sf`Fu<;NLfCC/[@E!5AU)E4))#%u-a?u.C#AS'cVOI_!*EE*dM%?(N,"Y2;X"lke&%?\HPPk6W66c;AuMkg-9J:6)i%^?
%0m\VfEl6k!Q52[-,Y(cq?jYY.W#_+kRmE;VjAcrO@pL-F]=HO-R(j-8r+8"67HpWTE>,2+4=(,4Ia=f$@/2t7EXf7cWT<EO4Obn7
%Tkkr)l-3hO3]k+c8&cjkZTOqg`G>3]E<unphbi*JY<!"J__+LQ9CD;dUr9+%SD->rG:p5Vh7pBO[/#1<4JnbE:[nJ,@p/r@iukCn
%VN2VU!#%M!:Wg69/cq>]LY*W]QfGoObMO@b_4!5&^-5VI,/V-E)OcRP!B%9^%#B/9PZE3jr'PUA[l*M9VL$>+0,I/C]as<k1PP[M
%D>1n-+stc\2mR]CZ#sK)0%^(j9n&J)>GAf5L@%WkjrcptT-We8iNhghI`>c9EA!6G=%>3Oa[!M6pnchk"L,h$`o66\/>@R_C!FM?
%5X-%QkkGA#/[;l9EN6`^N:'-KD!nHrMqD=7%4)E#-#RXn&I$I(]gHZ<Yqt:R#kfR@SJB`QF(]NaN&U/%OM)[_(2(uJ9P]qX_VDb/
%]gT/odsp0o"EMoBh/F\rC2\pQ[cIG<W$D@;0DoE]PU"be'M5ne9u>Q9U_O%p+4]pn6tJqJZalMJ-.-2tFOet@_a0aT/^P^E0cm?H
%0i/#n'q9@t/Eq+@Gjop7MgtkV/.7?b(8ma[>Fm;NUG,T]\ZK(mJ8HlPY:$%L_a5CVHWbV(FA^4I%DpP0Q_nf_bfB3$l<c_pSV!M[
%)B*Xb;mj@q$qtVXl?4^=bh!0o&s(N\LWDU^%j*3?_Nijs"-k*B%6>"t'&6s?0a&=!qe1:cY)*NN^Q5F]DRBt_8a()OAS1Zm6-7W_
%*/GsJ58+FW$3\U@TjY0g?JRE^9LLMLAAC_0FY60ub?VGt.s4[0WGa&UJR)t6h\6eJ^Xs[0[N^MC1Sp+QhDSBD"tu3@60-]oosi)^
%_Qg&fi7Pah)3S>`FXqU][WUarrD/J%_%2Tmk_(7uMF`_AP`d\>E"$EOkb*Sb+ke'0+Y$aY%Z.XRmt@i'2g,R"hgS^7J(&AThVJU+
%#$UgZC=)H=5paX:K@43E=3g,qTF][g\nic8P%kW:?md_r^1cisd:BS?(IpLKQ+&WH:bkTf7KuG8lh5/G&qE@mL!BF6;5)?6WHJh\
%hPYe5B^4ieJ65*A@jL\i,U_lig@is6JF%/r`&'o]/'?65!?g!oG+]<b#S][@RDPg;D*:$#Yci)OF9AqS*Q5o0L:po2#*$j/eMjK[
%!B?NCC8A+rAeN@5PPdP4"B3'Mlflfe:X"iLZkOi`.,=-oB3A\HHGiM%GVN`AU`^sNp8jY4?'\!YQC],?GGPPZ$hK25]%1V&0d.cN
%6i4Bc(b6#L60W^tK#fg[q[q@pWJ8l-+6;k;5/W?U8iUq(\c!Td4pn[aY,W%ghM#'%(5e-b,\A%4IZ[qK8De"l=I+GNhjn6`n!?Ot
%_41f3E9G'U5@uG%-'6K`GK=W!<t'I6So:?"_Q3S>q4M`^MCC,bfsdld9FT_ZO^rkX]RAi#\mu_,E$U59GiqBN2Ofp`q5BIE+\>!b
%`=.)Lb<Zn6"Pkm1*%pRFj0c8;gE&$2"YlLsToI5koO9_-?jKD8(/pM%g(j9I:-Q&59[a_OE1PO)5X_0bM)tT:1J'K1OY#SJeNIhD
%_$sA;f*.ChQ&*nhkX[,&e(quK:h-O?pY7s%+ZjZ8b%OTkT@>eg=Ao(>akpQ0:CP8>l(Y03.Xd:"^)ZSRQsiT'-t!c/$@"m0Aa>O)
%e76Y;/o)ES5S,L:3&+*d=p%>O^ZDerFQ9p*gP=3UHUBLk(`LlJ_G4Vm.[b%nbB+5\Ka'iT.%[$re@AjC0gh@R@9:ocRLKH39:@@I
%NSRY!-SRH^%u9XI6J%mPJjZo"Z^lr-bi$+++PX<l%tVO]m-F-pM)T\VH<PlGUUIc/PItYsFuW]jeR$6lOm$%!^^%M4koC`R"Qq5r
%##6H$++e9SkfQ:ffCHj]9u1)fM3nk([[O^)D0K-`Ml(AJ521?.^+kuXPr[Q%KBKMHmC(Y@qN'8Mgh",iQ$_94MNTr+D$?%4ooKZn
%C"iflqmo"LYqeO#Fuu5Bb'ZR$0Y*<+l6$d9Odp"PcbX\SiiC+-mQ>48GaJ'gTPLKS2qY?DQX?Z,7B`/kc!Rk\iu<V:E?KRNaZXq%
%7l.ma'S7N73,I55"^&C5E=%V7.]BVtK)457Hfu*%U)@koeFMDID:3'UpcA,1!7n6#_Ze;H]^33M]q>^bqBJ(cW'!VW5$O4qEg3l`
%TOIfC-J8\t*&FDD`+Z:lH[7XdBVIc&N4BAGLrm'&j)Sju%$8IOqAkcV66b<aLP&,/?c-O*,rNI/S6\\Ugt'rL_>.-&_#\<8W>=L@
%PLA'Gj9>ETb#*d4dCp+?jdn'rUapV#?b/&l@]B0KC@(3Di%2:,@+9dJpW7,?Z['Y;&QT?2,ctf9Y*@X`Gp8Q\7n/Z6'K`co17O8X
%%.fCcSfZ*X%fmr\-2*$j:?2bO/TXPs:<Dt@p8tsZ(POiJ$O/g[&u\!`k,7jc:p=Ug&ND`Clu;r=0J7CcPHZV3&'PqNqRgA#rN^6-
%Qm0U<h9!#n&IJE0@p-Gq$VD6tM1_)cSZB%G/d$cS$K7Yn=\kC%l79E!1K+h(%5ri'e?->5k4d`=OK$NY@gUih9F*p4DG3GA.;Cib
%ZTuc=1DSX;CHkspC9lOi:SA:nV0CY[<b!"U;m^nHQ(MmMMK8R/]Lb8F,kPd'(Znf\7a`:`)i_c[HOpL?,=83S;eX8A`V@]Q3'Xem
%aCkZ&,4j3AKDZ=`ab:bYmW3mp64&`=ZSPB3?qmZ<qMO8kqYK$*r9&#'<)/3>36XhcW@mV/U<@[3MhN9]JSQf,B=.=XR-oVDi]uYH
%CFQE1p0_Qd!j^ud<^qj!2s6rXa+KoFkaKqC3LBZ!=(`2:ZJRj<E.%G`)+F/S25__MIF#"o?CWq=pKR[8=@Q0BpR==^"bABX%C`T?
%5[gL>E_:fG")&B5bVcI9OAAe-Feuporp&UXc5L3gLlA^0hHg6+X[-9;DdA%$F4Yp;-B/e3D^b%m)B79&j8k^k.//urlhN6E\3^:E
%?I8"@UFYZab(Gr]dkoP/\eraqF-G2PjrDU0A,)DrPKcs-DjG%a+T.Z1'DB9;+uEUu4^2?;Xmmj!p#j4+E=aD=_(mslf:D*g7jcir
%cN64cX?f_O>0>LmD6WRNZV63hGb.[NmU".n5'2Dg/V:UEl#"/Kf52g[6N\9G4=ejM9N>"?adP],nf2p"gJ<U(acBaD*.h)8MTWLN
%%A`1sl&n5p#pS=!Wic/=.YM?h(sNhg%F=8jX!ZKs,eE%Z8O8AmKVU&AO(crdI;4fIBM%]oB2)TfhS>!sLM1u[=,l$"S?Y6/Qa&VR
%++QQHC<&D^=_:6'!q9<*p0.0tV+g`W.@FOC:$$4>-,K-G4G$otFZYt@q0PIag+s^P4>"'t<jgGJ#>5q^;<jB6Z3E+s$/m*Cj84In
%:J>U3?l'cAV/3<g\f8ofi;5T&ptL+kf*>PE3ho>'H=(Ne!$3tQYq.)8S6@jsj,PmSeB"q[&jDfKZp,O/Cq4<IDE)VtBt$$U,6PiZ
%(3Vk0k$D#K(h:6ugVqqs!r_Q)<0S&-(5;1u@Z,7di4pe'L2o2Z=fr[T)pWV[9',_nDX+sXUBOiVF#\S:Ne"2c%`sg.aD'jjG<r1p
%E]9P7Uo+Oti,J1C=[j7i<<NsONSS9jK^IIUf;f*82cs<N)6Rjm1eMbh<j3RZa<W!ne'\6@OXe`4G'SB@!OCuVG4F@DLL.fZHrW6e
%Fu,Ss"\\6*?Q?d.(B)1"a2qaiC#Hp&VidLjf(h^%WY9H^X6sn\b:D,7V(YcSWl\B+U9/&5!s^eAJ,hL^*7hUBqruFI1Y[bjR]O9b
%qPoMZ!J<S6DHT\o#*]B&&e;]6hR[Cel-V=H=4g8hgfV9m?S#bEc)l$Pp,)L_S8TERab-;0Ek(IBdI?8%ZkgqF,\^OAp@)`>r"+Ij
%^c8c;H[Ygu+fCk+J6\Q+@^iR5jYELK[u#%#RgU62%L%_X120$""q(</9+MOZ/_:ATiL*pJG'UT_73k2&iR[:"'sX8rWCE;t?>%GX
%4OFhYZ&XO;McLl>`c')%4a0eR91(3knfRe4?,nuFke*[r(X/4MQUV7m&.f2iG'3^K?pj9@N/'QhgmK+.TI3#Qo;*5rQ+qDGCEaZ*
%QU.trjn?/aP*%Q2.pEgF!UWZmq8a!nlfNaWGI]Et+^dDa=I#q@d<@Ws0?X:WeUH09)F:[fs+R_h#PWck60/pQ,JlQ@VT`)0?r-f:
%?4FG'\2.b'K/TsWJOmUL-[uu%s".ocI$gh"pn=40*5&\BpNLGgMQ^2@Q.7H7)?hK&1`pDbjkrA[;P10c=&`f53G3%bm(do%6f]>h
%FQ9G&s7G"bBl7I&?4NhIMRi'V1kY<hZ&PfMDNB"/]D".P"jA?0"us@NL3fb`5"gi$`7ZjskmQ0I!(bWE%Q5R]*IbFu^($ZXnZG_i
%j.`g5iIjD\bKHW)#)UASprg*Oq0;,XAjiM(*!L5S,@F:8cqJ?#KnfiiSFIX-ClUH)TgZ94pnFn&ZYJAmKPugGB+\$as6BI7K5'ge
%',uh&<<Pc2_('Y9%2,d(0s2^U-*2AJ>WH+I3fI@PFgk_CYatXJ+9=G^MXUB#RGj+/"`1V<6l#i%ns;Q.+fb_dGduM22HXU?2JTO:
%l*+3NE:QG%2hO\M47g3AQta_0I%uT;dIAYBGbT0E1PLqW<43D%5uWDK5$og&`++TT2@&_qdS%)`lt/'lF7HiU2NKfQf>_)R1mrK@
%J:Fto,_iPR_jLP.Fs,l:TTi;qojaMbpap%b3j'C5)9m>WoK&"a76-jSC,#!-"r+Pc4;X.,8ZNssS(DDGY-XUFGm8r9F]34/O1_"a
%L5Vn!)nR'6(@Tj67#t0)d"f:T!uSXtZ(9a\VJ+-69HTJ)NGF"(<"W!&f`DMp;M&O/+&/`[,!S$[oOtfpd#2?+N^k/+D+(8ilW^7U
%IiJie^&+2DSl]D>4r+to=4/if2YH]5n-T;&Cr1KNb443u8ouknW[&jFCLM]Fh>*qm"F(nE?R4^bN5^%lfYaJ8mBISF$%/iTAK;D1
%1kq=WN]A#h])"?AS@a\IJnO#O0\C&8+c9`"SJlj$1e;aK_s3nHSGe7&P*D8'qDB,H8>;Vh1rWk838AJ7)GN/:)7E?c=frZiF>SJI
%JR/l7"-@#D]Z96Km3P6KbIUaG:5nUh>qXZW3rQn^]^7m!mG!P:LeKjSGi.@8p0-%TK+M!X4%\4#Y<@,t7X];Tfe:A;D8b&gMRpf6
%5hlQLrEcs=ENc0*=)]Rq&9"Y#,\35C#j!aRr4-Xo^ji.l>]8ap+=D<&9k2Lb-G?q&NGn%m/<9MEOFCa,ejG`]Wl/7MU9)V907u+c
%4q`+(.$#`YCo?^l)&7@^Pe?"p9lI'd-#]jUbNhiWF1bW&0]@)"Je!@D.\k.^ngiYu'O0S/&3Y(!BsC-C>\'TN4?CF<9E4j_WS;H#
%RbOh(NPS<gnE>8$Rd5.-3'"L:dJ`bSd9YoKpBN%\okl)?PfrpNWdWV2L8<Lu(IbHqMmdLF9oV$Ec3<U..d;Y+ZoLVYJnGmb/XZu9
%a$HXO"*Xka^"Qdr)>Apnk=kiGbf`fi+;@AWB^E/o[XE::7"RS2oedPb+E0;"Sdp2lcjZX6G_ba<SjHE__U6."5T^*VOZ5XG1jSp*
%#Zi<%/mPc+3uY'-^[\>?,>F_[rjaVI`5g#Z\1>5Hg9/kWj'\>'"jnV&1$XTiPJ-;4o\_%7`)GTnWS;M^7lpD;U"&@r!>)lOin/FB
%*\0g7+ej8:fnT-JAXm/$m;9lNMgAT-A`@*rQOlhl9!4KsNSP'leK!IkcVD*l(Ro?<Jc^A>h)@;f+-4ZG09O7k,.eU(T&rjqZK)DQ
%X\A<HjnA>IWKZ_Ns*>-?`s>l':m-GREK6h*s/;tq<LIP2P$1=K@9O/bA_Dj!bH]`@2U^"uM(1bt20P<Ja_=u"h\Ze<*R5e7G!+Zl
%/S$2Yd#o6n!rSL'%h8c^1^AhrS4A3Y%L.G%9h-]X$s^45n6fYbaXeX$PB+'$",^RGY1ZK?Pr&[Y-H"k!72KP]9gQTY)Dmn#iY]ph
%I+?fcK:,%)E*EE3`Ae;2p`mqoCgg,)$=<?IQ%?NMbXfRt`Jg.iF2@BI;I!5b>Gb.J)LHceoaenI,=s[S'cc3G47Tfe\Mj>^J]R=T
%'-p^Z_LYk88iVR:"I4itAuE'Y*Qqe#mMtr!5RApc8\fiflinJJ&OW4Ed\s61JeRuW:DFZODuFX6$]hh$$PO[2-r;e!>_&nBF<-:]
%8icqg6QY74]cf"IFD%Mgdj3?^*:do$?k5_O-RphgQE+f/&7RFDFQS-oM^5auW\YaOZE_;dc-!usY"Zh6EdBuG],De.G/@$o'G!k5
%[(Pk&/oie\=<g#,hMYp<kV=gco%rs>!BEWYRp$U-R];LcI3FO`75;V&K.p+Y,SJ5<'Dpg\b"N5uIr@?95DrgF[;Hd"#1s2ON1kbt
%0FM8"-%['?N)`P6nq4hq_?L!6/ek$_n8+<;*5^0!98(rV/iFM^(X2;T]3O9Ia&Ur#62C4B^>mj4V]JQj#!Ke'40mgE\%`O/#ZFL.
%#2(ZL@EZ+2?&WfTc_#MC#8$e*UuM6oe%5MQq^*(;pn"HRDnfq*M*ZW+DLWIPQB<3[%kdKPDo"a_>0^6)?8EK%&I73!g`e;nFj:Bf
%?VT'ZM'0rO5_"5^:'`.-5p2HSKB&!s@#$%Q#XqFBN%`.FBOU/.D4)uJa0[ZIQaP!"rgS!@/Y$oYf'^7u',FlI*q_8Op;<*b;Jc\1
%<tBo%(P!KIoXWI&G"X+urCLTDB3/rk:(6o@L=:_T%XAd\XAG8=rF`l7<V3turN^42;+&[r?HU,HS7go<8k)(2YgG[CCX+4N"D'<R
%99j#j:Q<;:1B1sL&UZk!e$i[RPDhKYo2_F?4irM1eYuEK*Pf!rSK;YQ"cjh-;KT*E@Rr*h_98^e"m30`7Sm9PLi79@+rg=0eD46`
%P`.j0%A\FGg<39J&P)t9T$YC@-@P#WQ=be:eIkO]aYb=8L^#^]M!`RlqU![X;gD.p,/e@!84]5Jjh*[-agZ)iOkV^U;&J\1G!I'T
%rf[$o+C/V^2U-dWK7XOi,;'nH'j5cW1BQIu(-u./gGL5NV2NDe'US/R.(m?N!"n5p%KMrm1E]!"]t==4>YC2DafEF!L\%*L"MR;Z
%5-VWdRM";4DF,Pt12BMCdl@d.8i&]kB<<2BTSI&gECcYd0T)BR%\jhWh5W$=-Q7PIhoIVc\l*R?)pKpuBe*cBoRI(mZ);=qj_,hq
%VFcfm#H\`0]*&d-;cI^RlZOuN8OcP!h_q"5Uh<+MeCO]K$H;-NY"fo8Z*6a-KIhfpOK/eE_EDPdjf.k;N2)<>mRHfFAd"L5JRK,5
%`g3uE+1_5=Z%eBEi$"4b+G_hbAjkS/6;@RC.Kt$jXHsr?Orju`)LIkJ*`*hR^V<XQb)86GS1)0?Pc4C!K5ilI3cKKOWDmmt>HfP_
%b9S[->N`Q%Vh]n4[rOiemm/Y'1&>QZ-[&o$fGTl#@8<sC>IaOI)1C+q!4,[A(Q]"Ndr<^ce"_K3L0.0h*!eQnmF?AGTkT&^,fkq0
%#6Q\:Y,<XD=gDfq'M)E:/`!X+f/dkgm-3Ke0NFKJ.p;"k;GY2RbqjK_>oo/e\ZB4!q]`]oCeX!o.WWm2i,CrRA=/,1$l!9U)LHci
%F$0^IZfBIY)m2\cj:>68!mB66*-A0\_Vkpe22[E8;"O`"h_IL&);jnWZ"Jj`n&"ph$=%1<>'=WX/QuKNg['B2T8UWlN6P$;C0HbZ
%=Ju)g>r?nR92%0^GBp%@Wa0f)0KH][if&7u&"!\%1sOS-l)k5#`Yl$0jR!2]"<=73b\`7?Gr"IO,'cPu8]SCDiORTE(7q+9qXm.>
%8)uOe'NbiZ/-N%X.(Q-KZ7qb2&ekOTo+3nn8LJ@F6rR)YZPbb,oc`Gq^u)B(.dS%iSVuQnKp87%]omp\`*tec(`a$OV_UMGBh650
%m.?@Vq,Ld%g4sR0nO=_MC$qWYpXN0G;]NC0W^P[l7+E)-VLtu88qL8U&f2i<7KF_20rK`TXQCOfZBtrMKs^q:cUuG_45&Sj9_^Ci
%-5&+TgstNQ;T05a%`(WRf0XB+P/'mE!VC,R_UD*+[0R2XQCu$1C1`4mgr<K%&uV5ecc(jU@''2DT"q\^GaPS"m,h,R?I\a%Rf4RA
%#&VEN?u<XA)F*T]&(M!#mT4XUbM1Qp42e$U.&:QZiINC[PNG@W594:<cjreJ,HEOn57^_=bPi.jDHp9DDfqS(eVLrCF#1;gmHn^-
%hBA$EQ%IgMf$nO3U%8_;<.k9]pqoIL"W5%]\;G;`ctH@3@O<fA3#q#ZP\pX5*a/HB`bqElp?dlaB]RS,1*oK&7n!HsqjI9@j<%3i
%VG5-`M]WjV#E_?XS@[,0p?UcX[rBV]amc=8]A^-&IJ^3<6WeDhYRAQf1[cV?hK6PbR!mnCLRG9kPLm,Ak=,%cXDm<C.8mfNC"VlB
%]08/r2ji<'H/6bt-)s6C%humH**&^P:oN*u9\Y1(9e,!Y"k),i>huV+MQtnV>SWJ,F6_po1j06[.kQE5L=<dB8'VG;-rPGuoa%1B
%&WI%3CYWU?d`VeuS0(:Wnu6&H[_M9oguR)*;!OdO>B&8KB@@fYpjF7Q`$L9P?S!AKS]/c8;bJVq9,?))aRQ<Ufd&%!3]qG,ggA+k
%P3]*DgS&Fr`7K42XjQ+>1.3c_ZB]\l9<nRa&WAFRGQRU3hYP+2YgB3(W)J&onf\=T4tV878qSd>e^uIZ%.\%L]Oe$f$b)*2QLk63
%=clh;E*,a<NER\O%S)p6&t5X6_9r%(Q35qLCbX9=3]Ha$?uf@9"0q<(Xl+MdObV^+3ZjNtXE,5m%OZ.1)b@>D(9_('IooUMQ2/39
%\?T9rp@N=`/u;kX"8cP=Aa-r11aA8G<&uD5E@B/>h\seE^nc0q@FoIqSKb]#P?p-?oPd_"(38K6/J`V<=G8$D;&o%Q1aDJ4Es>*o
%8('T\Y)\-)WFZ3V+:%&'XeuC+,uk8la<';u<U<`>,=/jOG>UL<LKB7e0ocDB7sh#B-n_,$bgE7%"E>%q"&;QR4-[c@#J[J9A91c+
%`Hk?9C1S,b%uo6ts(OMn9\V&M\nE'`+8`NYgoH_TEH;)!0t_n\6/+%SkC@S7I]`$di!sFe]ar4rq'D.@rS!$mX:O!$,8_2@FJ%%1
%PY4XmD)i&mFb*T^V%B69r^59VQ?L&4,<o<pUeYPcoWf,j;!`9"M)u+Y#]!ImF(I@l(5H`Zf?O!;^2!H+QG2IF9Xe3$8].5PaXo?,
%gBN]+VB!.L1^=B+WmB\n]imU"L.PfA^BXV%Bm^s=,lg-5da+GcNM?[?M(BG!75lkMkbg8-GTX7QT-_MFO.2CVckr2=Z?BhcK,hKU
%"Hp]R/l4jf6m+\Md;rU:75I9A_l`f4j<Q:@IMTlKnt#KoZH`GWX\Ne!:#5`e0(-=))t"pX\AGPN*qi%O.q;b.om"`0VH%*WAYs@%
%T0D)\S)]DmUIQ@H94##Cb2[P(FJ]K:GV.pQ?bM>6Q\48c0CHF*leW9r>Ko3JcKKZd;jRf-nS;VL")'OUQPT_bI+OX`bU0KIoK"jR
%eQuTA#o5_?H=jq#%M-C^4k-^t*Nnhqm1&Z[BBIYZ+p*8d[7l@PjS_t]$W5i:WDBWK[)p?mIQcqirjNt]l,1cs]Lg/[ZBPD<;?pp=
%NjAFtn_b\HL3oEdRXK>)YMX)g?pu::!nc#9dGe=K1taPmm%V;+U'[=.8gXI+=Nib?MfdPQKsj)'^[2B1oT'P=T40V=2r+>WC\:o'
%48R5`"pCtDXUn`V3BjD`MN@lgYsL;WEbbB!=CVfn6R=I<^hG\nD2.XVDen<98G/"0+jaB2jc$.Ei*mRAkuWhK"hq$Bk9pC@iPE?*
%Epu_lq:!l"TC+XYB[VY9oC4frjOhj=ObRG7D,XSfjN9=.6DBR:PdQs"h_/mDGdiU9R4,)d%:.kYi\gg/->J7q[^S7L<#;m0:2(e>
%pH%4(nQn`DAgk(<PaQVZ,NZ\K*RsF*43;F'#dq#_p^Khe`qAo*DYeIaj7pNtnf#cW?DFf.1UTm^mKn/h9F`%M[F&`q*.og"#(6V8
%,Q3Z^ID"/g4_:C*--EcC2;0<b19%+q3ek?%0FU\T796n^AC>^G/$=90la-QhS[PcjN+cm<\_*U7T#eW6es:8-aY;o\MPe#ceZl9Q
%CdL=[1r=B=o:L3\`/#&_0;HIfTB::@7@e^*'Z%l$g4I-%WI*pr0370$*iK+g;;;s69KS(%BpkM1:7$-@W"2!qbU&(4gj/;HY'S$I
%35i!VF[#<L7k/tuqqg&'^-6*ZZ,35Ah>%QmEr0Qc*m0F1oWP-,648\R^O;ZY]14)$]\kA?nQU0p^0(8<LObsZ84dBThW*juZ%qVR
%F@C6JH(1]dOmDA)GDZ$br-'S2NZ^K]ebZ#lG99XbQM8Wk6It`(C;$\SX8-0/Ir<`bik!^m[=7?;IMo@(-iQ!+IepIEJQb_4V[&p*
%<i9;r51-JI+6om'\)H9h$?glO,)>&'3ZKL(I_%r9&(>XuF3q$\f\S5No2OOq)Vs?@n3"IR^&=(V&(OqR^jG.5#Pkl7]K(Yj:==[:
%c#;3KYc;';Dg[&LpWei23pP%j\,E@qI]]cN0og0Il)XFAc`,0lCX,gCO8QieII(&lr67h!S9t*sJ,/fV5.l4mKqh#X$I"[r2(4#"
%J,6f*U3,VJ:U>Q&_#+#$kB5$6@,rI(bX5ReP.<=YTmOF+<pXhokZ]EX]^1pY=Vt8ql(AcnmrY.Wg1Fu`Hi_VU_$$@>^=2\>+AY>@
%cM+sp1iB5QnW&-'X5:H"QE7G':cOjVaskk+lprDCDOp2nW_tOi5l25BST^_fht5l6GEu+3E]EsdEAZ@tZS072'$N<:1?N\eEF_!^
%G>tUfXAu!0(O(;;gOhX;_XoJn0t[rp,Va5.B&;4sVA5Cu/gq$:c^7FOF*XEch"BWD:MfWm(S[Cb/m\,D+g)M)KIg:BjLR#AA$@td
%/P'ul'TOe`qK/namk+sh=:A:MqN+B%Uj2VrG`F%N&K'sPe.Jqrh[q4;?/>2,DH#pu>^Nt<jOJ*<]o4BmQIHY3PG]-W?\[Lt1]?IP
%[3n,:7g7/8]0=s9(XD=GkL\#@jU*;JR)9aVMXUm5>T%3#8c;iF9p&fkAXB0Y3Nt`ue?f.q$mfud>/EB=)o]J4$%7,fUO*Vmi?PNe
%qSni;>7s7l?e+.>lQH"'TU3,,7aEF,+Xl_9['>o"G(<&tgJ>.CV9aA!H/,OGqRY;da%n07@Ebghq;\02(V52T'XP-!+DF.o\]hE-
%bo)qt'n,r<Se$$k('/L_"L#YWbhH&D'U_loh$<)^M6l8BHVCT410?9ni6<SFFOOkaNAbk>,(r>hp,#,-E$S,9kE+G.=3t"mXG@Eo
%MXPdC#t3ksfh6h/lbhP5UfQD/$dm#B%!;t);P<R4(S^H`G%iUK$G42mN$_OIa)fD5?ek>5DGssA'5OC]Q(#pjJ=1n2#4981ZJ%$l
%83hEA6'Y_XFomF_h!s@kDT<af4H-W/5k70^2*t"+#NWWp$7&>ZNAAH&O;pG%n7cDTmeCIFJ!Z,>&cHN4m#It(MCNn*,3l`Y:]Wqg
%/:$A[1(Mil]?pq7O=e9ZIkgGt)FBHT7V1+$jbRGLnF5Q$je2.%:0JtL`]3BdEaUEb%VVf*=N,XW\A>ISKPKFdG)%"<_K5F6^[%iu
%ih2Cl(1UWn*"/E'bFo-tgt/'V$o6'fG>pr^^?+MMC?0I'gSZTi"^JieAg)uq6("qFdY4`*</c)tXaHI^D#3BLp/='+\1KLZTY.,3
%oA4gX20RO%%n:G"qju]^JZc7MY"Y#CH,So:"tpcQRahlbFo"m^njpAJK=1&&MbrD^&:k:VrA7$b5=@`jK]Hd8ZjP##k?Y_'->ReV
%]Y)ltQ1T$4PkF2Ef)&nNqbQNm]d>sHSYt_C@o2MXn2#gt_6MdXjpF'[<2&P%@+,rQpDrY1rI#:;;_&Yu";ggF>KnL$MDkrq]:?rE
%NHU^:V%XNgL9<0u<WG9naIN[S%"])eJ?(.p*iU+AHTp5!VAiZda!&JG$bT/0+/c[o^>Sl^CaQD)L(i[l6bM4Jb@4kdMjloclNo$<
%+e/REe%XI7UH,o8h%]][#O#"N$UfGg0F+iK43r+u[`A._mHohoJb6o6q]eTR9%Z)NOVR+O*l^lPPked7i\kkX]t!1AI?)<gAbM(\
%ZS-L49ce)+/o4J-rEq7n%?:i$6:U@81\4P&<4B(!qJ`q&c^C#8l3I:k=N[(5/GIZ%K&'`>oFFF"3BF>NE-o8WXOb4dlf,(.G5M)s
%3Vl@_El_V%]pq4I"UeTdGhO<kg#7.BNEoV_qY$-.rIsTC/bWm;UTM7W@BJ9a;sJrtNPunhm^p(<1>MF/?Sd`9_V)bT=CN7ik0-7*
%o^%mc[i]Rpf&deHgpWO`Nq;5\2-3`N<Y-?RlR30r7K3V(SpG)&cm@XJbUQpVJXugJKf8)T>fhaaht=.f]#Cs,]g;*UG*X9eVPh$*
%(+,D$;_1`nio((M[kh&i](ap+hY:ssER)o)I(\(f4n@'L1VfuFe0r#ndRrL"5@Em>&NlM("B.KnWVM-hES%,cNQ`WB6[fBV,>cmD
%'?6dcEV%i[8HVfJ.D+Y0NpG543rJJW)LBMuCPg9,i0BagmD[(Z6f6>c(,9BN(LN#ZM`s9fl6=Ufl3pE@9]Lbu[liO\ot!Z:Uu32P
%AtDLeL<:/A%oGICST"@LY;%!?o^l[_52;"VBTK'#\B!IWCK$QVW^tc)n"IlN6b_#4TC+LSSiA8k!0JDM+XMj7#Naj_Pc(4*\qLFA
%iF$pPk&c2EBHtsmq2WdEq<9Jm$k="(#tnT"!W1sk&#]IYop't+'kFM:i`'V!WG*(^bGt<V<P-KH:`>AU<7:-dlgh.1=D<$[>s/&\
%hPmk)%<@*a0"'uukAe47VhEq*OO@3h/)"H<Rr221+Gj9S-p-C>Hp;e2H+4D>k6^pqKW*5kI.Xp:a`fCRKS([*i1p@)WOs^3hEhJ2
%B\SiI/`7j.IJfq0a^*]niD0"7:ne'g3"?KI!236,"4]P8F#r*::g)eGaeCB$O#/rXrl/X;lD>*d3hsD^?_pn,\AcWKKW9Q+!6<r0
%ONnM+>S.e0Dm*(l5f3?"%sJtU@og@(CP1_[Hg\u$;?.4I:ti9rV=p!D1A;\1%V2,p^%5MOmWNG?a*=bcMjLF0bR1bSb:(m[]0[Es
%\s2Y-\H0m.]T+W4qJ`n_/UJmBf2gBIhP4[@'qP@Q0tg"](^aEl_d-EN^H6P9Q\>8#Y5c52Xu)S[>A#o,S/U5Q5#E,SC)=gFH+J0]
%QAQ?RTPJ@]QFpu,Cdp'MXa"<`#M07'+"g,p3LtUY(P/PhqDlehIVO#5S!O8WN!\m,hSEs94-00-?jXbqo-MDW1-Ij/QIs=qko%#R
%534PV%q5:>0Sh[Q4a^e=<-<34S+idt?dJ%uQ?lFA)V?BVFAm?,F+/6N[.<Up,kEOA)65i?OWeX,l]Ao[+Rd9D+7AgQW-QqFWf9Jd
%kJDqi[8CY,m8Rcq.!,49b$X#lU6CIU=#YQ;f?a\qS-9J3X*BG=C;a0&QQiu*,q0>YYAPsAHj3K66Oe_DpT(nighd<)a=&%,Y,+Sf
%V`8`bpDaAcr"A]*&;d+mlLrXrL;H0/[4^nDFLP[%JE$bpqe1KR`>4Ug-oR8HkB!OcN(3RP6qKNo`C!1*jRTMn.5GkRlbhO"c&Kpj
%N`E[TE_Ikdcj=_s_am2M[ZfpDC83?i=k<$e56VMtV-1"iqIm@1chc2*4Hp@Z^RCsUTTFq,32'p`C$A8j3P3coIYW0'\H;'R(Sd_P
%qMK)PX)>tCMZ_+*ik\0KJlhr8_*^!."GjNdlVN&,Si@3*d]PpN3tnGL+V<'IbDq%W=@/]]Ok"H5VogH0F]&]>8CG*?G?>`'h(t@Y
%`FHQ7K=#[d_@=:g'G.gUM0hOfl0i%<*9)=FqnJR]Ugd61W+6X*68]WZ`h>en)!HcU(*'N1.gCU;*BgscQ"E/9oe(>^gICj2[UBOE
%\-_KFl*<:!3=LUrKiT1Ha@%8(Z<P:&5Rh:7%L8*[_0G?pf>mc*$H7CTM"PhC`i6fYWl0I^bA<JJ@n+s5143dbPqGt5&lRo)52PaB
%-lMSEnaO:qG&42J#r.+_m):<k#*J[1-W/&Co3dT^KqAOEV_cZ\8U3XSb_Y2o2bs;`ISqSj2TDWA9X(Z\o^n4G';.5lQ3[9d3]>:8
%TdEXbm7W!m0$C-NQnS[h$XuOm9hLf>ii\@:)udSDj;N.oUENW.3>JN_b7F\.`99j"1`pAipR"tAA^r[lmeV1CNN=^sDX7N.p%aUT
%@^JPNJD,q:h6E>[ZWuZ$`=t*]>=%1pf4Y!Z190P^(#M8"hh/(;CI,$K.W(0AW"F6Be^53W[KR7`X&!14m*@hZ]4f9.0-#3\P=4k+
%/o=m;!>"tf\2V;f6A_#VBH8FJOh8eSG?;[A\$Q!0f$jE7s0t4os6uZHs7hA!q4I]^VdFoPoABTHG2_ohl_"1@kPtPE5Q.e35QCOt
%s5osQm8%)=rq*+<q%l0VTE"ZZ:S7XNcThHas8CP6s8;-=rqTq$+0OO_efXhGhu1HBq+lM;2uas"(bf_~>
%AI9_PrivateDataEnd
