%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_pomegranate_bw.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/11/2016
%%BoundingBox: 0 0 835 544
%%HiResBoundingBox: 0 0 834.3711 543.3599
%%CropBox: 0 0 834.3711 543.3599
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_granate_bw</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-11T23:31:50+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-11T23:31:50+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-11T23:31:50+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>168</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAqAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYqw&#xA;Dz7qGoax5l0jyRo1/c2M1xyv9dvLF/Snt7GIEIokoSjTSkAU3232OQluaZx5WjPJGtala6le+TfM&#xA;Fy1xrOmj17C9koGvdOc0im2pWSM/u5duu+9cMT0KJDqx78y/MGt61p/mbTtAu3sdN8u2U0usalF9&#xA;ua6WIutlC/7IVfimYb9F2qcjI3dMoinonl63itvL+mW8RBihtII4yu4KrGoFOvYZMcmBTDCh2Kux&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:5E823117C7E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:CAB30D49C8E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:e1ce81ae-ef30-0642-b733-98b67919654a</stRef:instanceID>
            <stRef:documentID>xmp.did:0680117407206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -543.36 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 543.36 li
834.371 543.36 li
834.371 0 li
cp
clp
[1 0 0 1 0 0 ]ct
83.5786 427.656 mo
74.4629 431.398 66.9897 434.012 61.5391 435.917 cv
58.7725 436.886 56.6396 437.624 55.2412 438.199 cv
40.5571 444.225 li
35.8887 446.14 32.0059 444.814 29.0225 440.277 cv
28.3745 439.297 28.0957 438.925 27.5581 438.643 cv
21.4771 435.421 20.4639 430.064 21.2842 426.492 cv
23.0928 389.644 38.3179 363.274 72.0815 338.436 cv
77.7808 334.233 84.354 330.602 91.603 327.625 cv
117.732 316.907 144.706 317.809 145.843 317.858 cv
148.923 317.971 li
150.618 320.548 li
158.029 331.783 160.002 345.434 156.323 360.001 cv
150.986 381.148 133.853 402.633 113.694 413.468 cv
104.126 418.612 93.9971 423.38 83.5786 427.656 cv
83.5786 427.656 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.27451 .207843 .145098 rgb
f
145.611 323.852 mo
145.611 323.852 104.667 319.915 76.106 340.927 cv
47.5479 361.94 28.9844 388.145 27.248 427.469 cv
27.248 427.469 25.8008 430.921 30.3691 433.34 cv
34.9341 435.759 33.9902 440.431 38.2764 438.673 cv
42.5625 436.917 46.2354 435.412 52.9639 432.648 cv
59.6992 429.888 82.7314 423.294 110.855 408.183 cv
138.976 393.073 164.533 352.555 145.611 323.852 cv
cp
1 1 1 rgb
f
125.491 354.984 mo
125.491 354.984 48.1162 398.171 34.1523 430.358 cv
34.1523 430.358 55.4893 398.718 125.491 354.984 cv
cp
.27451 .207843 .145098 rgb
f
78.6069 380.713 mo
78.6069 380.713 61.436 373.289 54.0078 364.649 cv
54.0078 364.649 67.1274 374.583 79.7788 378.767 cv
79.7788 378.767 80.3711 380.772 78.6069 380.713 cv
cp
f
84.0166 377.372 mo
84.0166 377.372 66.8384 369.94 59.4136 361.303 cv
59.4136 361.303 72.54 371.243 85.1909 375.418 cv
85.1909 375.418 85.7803 377.426 84.0166 377.372 cv
cp
f
89.019 373.126 mo
89.019 373.126 71.8374 365.696 64.416 357.062 cv
64.416 357.062 77.543 366.999 90.1938 371.184 cv
90.1938 371.184 90.7832 373.186 89.019 373.126 cv
cp
f
94.2349 368.896 mo
94.2349 368.896 77.0566 361.465 69.6357 352.828 cv
69.6357 352.828 82.7622 362.767 95.4067 366.946 cv
95.4067 366.946 95.999 368.952 94.2349 368.896 cv
cp
f
74.0386 385.407 mo
74.0386 385.407 56.8535 377.982 49.4321 369.344 cv
49.4321 369.344 62.5586 379.285 75.21 383.462 cv
75.21 383.462 75.7959 385.468 74.0386 385.407 cv
cp
f
101.208 365.155 mo
101.208 365.155 84.0298 357.734 76.6021 349.092 cv
76.6021 349.092 89.729 359.036 102.38 363.21 cv
102.38 363.21 102.969 365.22 101.208 365.155 cv
cp
f
106.855 361.382 mo
106.855 361.382 89.6768 353.951 82.2524 345.32 cv
82.2524 345.32 95.3789 355.253 108.023 359.439 cv
108.023 359.439 108.613 361.444 106.855 361.382 cv
cp
f
112.985 356.297 mo
112.985 356.297 95.8062 348.866 88.3779 340.235 cv
88.3779 340.235 101.505 350.167 114.163 354.353 cv
114.163 354.353 114.742 356.359 112.985 356.297 cv
cp
f
67.9409 389.468 mo
67.9409 389.468 52.4917 382.594 45.8218 374.594 cv
45.8218 374.594 57.6255 383.8 68.9951 387.667 cv
68.9951 387.667 69.522 389.52 67.9409 389.468 cv
cp
f
63.6099 393.985 mo
63.6099 393.985 48.1572 387.112 41.4907 379.112 cv
41.4907 379.112 53.291 388.318 64.6606 392.183 cv
64.6606 392.183 65.1982 394.043 63.6099 393.985 cv
cp
f
58.3145 398.439 mo
58.3145 398.439 45.0259 392.383 39.2891 385.324 cv
39.2891 385.324 49.4395 393.444 59.2236 396.845 cv
59.2236 396.845 59.6787 398.481 58.3145 398.439 cv
cp
f
53.2085 403.226 mo
53.2085 403.226 40.1372 397.031 34.5034 389.796 cv
34.5034 389.796 44.478 398.109 54.0972 401.589 cv
54.0972 401.589 54.5454 403.277 53.2085 403.226 cv
cp
f
49.3979 408.06 mo
49.3979 408.06 36.3267 401.862 30.6968 394.626 cv
30.6968 394.626 40.6675 402.943 50.2935 406.419 cv
50.2935 406.419 50.7349 408.104 49.3979 408.06 cv
cp
f
44.1162 412.514 mo
44.1162 412.514 33.4253 407.294 28.8188 401.186 cv
28.8188 401.186 36.981 408.197 44.8501 411.128 cv
44.8501 411.128 45.2153 412.548 44.1162 412.514 cv
cp
f
41.439 416.72 mo
41.439 416.72 32.23 412.745 28.2505 408.111 cv
28.2505 408.111 35.2788 413.444 42.0591 415.676 cv
42.0591 415.676 42.3799 416.755 41.439 416.72 cv
cp
f
gsave
37.6221 433.582 mo
37.6221 433.582 50.7935 416.021 70.5454 399.698 cv
90.3008 383.366 104.095 373.417 104.095 373.417 cv
109.36 404.382 li
109.36 404.382 92.8569 414.854 79.6406 420.99 cv
66.4316 427.122 37.6221 433.582 37.6221 433.582 cv
cp
clp
71.9443 397.806 mo
71.9443 397.806 76.1987 416.028 83.3721 424.875 cv
83.3721 424.875 75.9302 410.192 74.0664 396.993 cv
74.0664 396.993 72.1992 396.059 71.9443 397.806 cv
cp
f
76.1987 393.083 mo
76.1987 393.083 80.4473 411.297 87.6201 420.152 cv
87.6201 420.152 80.189 405.465 78.3281 392.276 cv
78.3281 392.276 76.4575 391.329 76.1987 393.083 cv
cp
f
81.2671 388.91 mo
81.2671 388.91 85.5117 407.138 92.6846 415.98 cv
92.6846 415.98 85.25 401.299 83.3892 388.103 cv
83.3892 388.103 81.5151 387.163 81.2671 388.91 cv
cp
f
86.9863 386.064 mo
86.9863 386.064 91.2378 404.287 98.4175 413.127 cv
98.4175 413.127 90.9795 398.446 89.1084 385.251 cv
89.1084 385.251 87.2412 384.321 86.9863 386.064 cv
cp
f
66.5142 401.464 mo
66.5142 401.464 70.7622 419.698 77.9351 428.539 cv
77.9351 428.539 70.4971 413.851 68.6328 400.659 cv
68.6328 400.659 66.7622 399.721 66.5142 401.464 cv
cp
f
92.0508 381.955 mo
92.0508 381.955 96.2954 400.176 103.476 409.031 cv
103.476 409.031 96.0229 394.343 94.1665 381.148 cv
94.1665 381.148 92.2988 380.214 92.0508 381.955 cv
cp
f
97.9424 377.303 mo
97.9424 377.303 102.187 395.536 109.36 404.382 cv
109.36 404.382 101.918 389.692 100.058 376.497 cv
100.058 376.497 98.1938 375.563 97.9424 377.303 cv
cp
f
103.724 372.307 mo
103.724 372.307 107.982 390.529 115.148 399.377 cv
115.148 399.377 107.72 384.69 105.846 371.49 cv
105.846 371.49 103.982 370.564 103.724 372.307 cv
cp
f
61.4287 406.74 mo
61.4287 406.74 65.4395 423.169 72.123 431.16 cv
72.123 431.16 65.1704 417.899 63.3931 406.022 cv
63.3931 406.022 61.6563 405.175 61.4287 406.74 cv
cp
f
56.2197 410.203 mo
56.2197 410.203 60.2197 426.632 66.9072 434.613 cv
66.9072 434.613 59.9512 421.361 58.1729 409.485 cv
58.1729 409.485 56.4404 408.631 56.2197 410.203 cv
cp
f
50.8862 414.616 mo
50.8862 414.616 54.4766 428.772 60.4023 435.669 cv
60.4023 435.669 54.2217 424.246 52.6157 414.006 cv
52.6157 414.006 51.0859 413.272 50.8862 414.616 cv
cp
f
46.0698 419.893 mo
46.0698 419.893 49.8423 433.85 55.9648 440.683 cv
55.9648 440.683 49.5527 429.392 47.8477 419.304 cv
47.8477 419.304 46.2627 418.564 46.0698 419.893 cv
cp
f
40.7158 423.822 mo
40.7158 423.822 44.478 437.786 50.5967 444.617 cv
50.5967 444.617 44.1953 433.313 42.4868 423.232 cv
42.4868 423.232 40.9019 422.488 40.7158 423.822 cv
cp
f
grestore
144.964 332.378 mo
138.687 334.957 114.866 342.301 71.9648 328.589 cv
64.8916 326.357 li
47.3652 320.865 33.5146 316.524 20.2988 305.727 cv
18.9688 304.638 7.14453 294.746 2.27295 282.863 cv
-.648438 275.749 -2.99854 265.671 10.2041 260.255 cv
12.5747 259.284 13.9248 257.209 15.4888 254.818 cv
16.9292 252.617 18.4175 250.336 20.8848 248.806 cv
21.625 248.349 23.7163 247.132 27.1206 245.737 cv
34.4727 242.719 49.1499 238.439 64.8501 243.697 cv
67.5337 244.596 70.3105 245.32 73.1841 246.078 cv
90.4243 250.615 112.902 262.998 139.045 305.042 cv
138.259 298.664 li
151.552 328.937 li
146.645 331.618 li
146.645 331.618 146.087 331.918 144.964 332.378 cv
cp
f
143.841 326.313 mo
143.841 326.313 121.471 338.109 73.7905 322.875 cv
53.2153 316.3 38.0762 312.503 24.0957 301.083 cv
19.7476 297.527 8.56396 290.529 5.0498 281.961 cv
1.53564 273.396 3.40332 266.905 10.1353 264.145 cv
16.8672 261.382 18.1318 257.578 20.3677 254.229 cv
27.1616 244.059 44.7119 243.284 62.9482 249.385 cv
81.1812 255.49 103.527 254.188 132.94 301.468 cv
143.841 326.313 li
cp
1 1 1 rgb
f
121.715 324.662 mo
121.715 324.662 65.0674 280.693 27.124 268.379 cv
27.124 268.379 85.6426 287.267 121.715 324.662 cv
cp
.27451 .207843 .145098 rgb
f
73.6113 284.1 mo
73.6113 284.1 73.3252 265.385 78.1455 255.067 cv
78.1455 255.067 74.4834 271.118 75.8682 284.369 cv
75.8682 284.369 74.2798 285.727 73.6113 284.1 cv
cp
f
78.8862 287.656 mo
78.8862 287.656 78.6001 268.941 83.417 258.623 cv
83.417 258.623 79.7544 274.674 81.1426 287.925 cv
81.1426 287.925 79.5513 289.282 78.8862 287.656 cv
cp
f
84.8086 290.47 mo
84.8086 290.47 84.5195 271.759 89.3428 261.437 cv
89.3428 261.437 85.6772 277.489 87.062 290.739 cv
87.062 290.739 85.4771 292.101 84.8086 290.47 cv
cp
f
90.814 293.485 mo
90.814 293.485 90.5283 274.771 95.3447 264.452 cv
95.3447 264.452 91.6821 280.503 93.0703 293.754 cv
93.0703 293.754 91.4858 295.119 90.814 293.485 cv
cp
f
67.4546 281.857 mo
67.4546 281.857 67.1655 263.149 71.9854 252.827 cv
71.9854 252.827 68.3232 268.879 69.708 282.129 cv
69.708 282.129 68.1196 283.491 67.4546 281.857 cv
cp
f
97.0811 298.302 mo
97.0811 298.302 96.7915 279.594 101.615 269.271 cv
101.615 269.271 97.9492 285.324 99.3345 298.574 cv
99.3345 298.574 97.7495 299.935 97.0811 298.302 cv
cp
f
102.848 301.898 mo
102.848 301.898 102.559 283.184 107.382 272.869 cv
107.382 272.869 103.717 288.917 105.102 302.167 cv
105.102 302.167 103.517 303.532 102.848 301.898 cv
cp
f
110.001 305.396 mo
110.001 305.396 109.711 286.684 114.535 276.369 cv
114.535 276.369 110.869 292.414 112.254 305.671 cv
112.254 305.671 110.676 307.03 110.001 305.396 cv
cp
f
61.2495 277.971 mo
61.2495 277.971 61.1602 261.062 65.7148 251.697 cv
65.7148 251.697 62.1729 266.233 63.3237 278.192 cv
63.3237 278.192 61.8491 279.439 61.2495 277.971 cv
cp
f
55.3442 275.876 mo
55.3442 275.876 55.2617 258.967 59.8164 249.599 cv
59.8164 249.599 56.2744 264.142 57.4253 276.1 cv
57.4253 276.1 55.9507 277.344 55.3442 275.876 cv
cp
f
49.1152 272.886 mo
49.1152 272.886 49.1704 258.281 53.25 250.15 cv
53.25 250.15 50.0249 262.736 50.938 273.055 cv
50.938 273.055 49.6323 274.147 49.1152 272.886 cv
cp
f
42.645 270.191 mo
42.645 270.191 42.9204 255.731 47.2065 247.625 cv
47.2065 247.625 43.7271 260.135 44.5093 270.333 cv
44.5093 270.333 43.1553 271.432 42.645 270.191 cv
cp
f
36.6743 268.71 mo
36.6743 268.71 36.9536 254.25 41.2397 246.14 cv
41.2397 246.14 37.7524 258.653 38.5381 268.848 cv
38.5381 268.848 37.188 269.95 36.6743 268.71 cv
cp
f
30.4487 265.727 mo
30.4487 265.727 30.8071 253.83 34.4863 247.122 cv
34.4863 247.122 31.4443 257.444 32.0127 265.826 cv
32.0127 265.826 30.8618 266.74 30.4487 265.727 cv
cp
f
25.5078 265.01 mo
25.5078 265.01 25.3496 254.984 27.9336 249.454 cv
27.9336 249.454 25.9697 258.054 26.7139 265.147 cv
26.7139 265.147 25.8633 265.881 25.5078 265.01 cv
cp
f
gsave
98.1494 326.467 mo
98.1494 326.467 65.8252 318.274 47.4683 311.866 cv
29.1084 305.458 6.36963 290.119 8.72266 278.429 cv
11.0791 266.736 17.3911 265.578 29.1704 270.756 cv
40.9502 275.935 88.3921 300.08 101.832 312.796 cv
115.272 325.516 98.1494 326.467 98.1494 326.467 cv
cp
clp
65.5356 293.175 mo
65.5356 293.175 50.9482 304.886 46.063 315.18 cv
46.063 315.18 56.0889 302.126 67.1895 294.729 cv
67.1895 294.729 67.2241 292.651 65.5356 293.175 cv
cp
f
71.6338 294.967 mo
71.6338 294.967 57.0464 306.674 52.1606 316.971 cv
52.1606 316.971 62.1934 303.918 73.2876 296.538 cv
73.2876 296.538 73.3252 294.439 71.6338 294.967 cv
cp
f
77.5874 297.733 mo
77.5874 297.733 62.9863 309.444 58.1147 319.731 cv
58.1147 319.731 68.1401 306.674 79.2344 299.294 cv
79.2344 299.294 79.2686 297.207 77.5874 297.733 cv
cp
f
82.6279 301.661 mo
82.6279 301.661 68.0371 313.372 63.1724 323.667 cv
63.1724 323.667 73.1914 310.612 84.2817 303.222 cv
84.2817 303.222 84.3125 301.134 82.6279 301.661 cv
cp
f
59.8887 289.861 mo
59.8887 289.861 45.291 301.568 40.416 311.863 cv
40.416 311.863 50.4453 298.808 61.5391 291.428 cv
61.5391 291.428 61.5737 289.333 59.8887 289.861 cv
cp
f
88.5229 304.452 mo
88.5229 304.452 73.9253 316.163 69.0498 326.46 cv
69.0498 326.46 79.0728 313.385 90.1694 306.005 cv
90.1694 306.005 90.2041 303.918 88.5229 304.452 cv
cp
f
94.0356 308.245 mo
94.0356 308.245 79.4409 319.966 74.5659 330.253 cv
74.5659 330.253 84.5879 317.196 95.6821 309.808 cv
95.6821 309.808 95.7168 307.728 94.0356 308.245 cv
cp
f
100.988 312.048 mo
100.988 312.048 86.4004 323.759 81.522 334.047 cv
81.522 334.047 91.5547 320.993 102.642 313.609 cv
102.642 313.609 102.676 311.522 100.988 312.048 cv
cp
f
55.2549 286.243 mo
55.2549 286.243 42.1763 296.969 37.8696 306.447 cv
37.8696 306.447 46.8071 294.439 56.75 287.701 cv
56.75 287.701 56.7705 285.775 55.2549 286.243 cv
cp
f
49.6323 282.429 mo
49.6323 282.429 36.5469 293.144 32.2471 302.633 cv
32.2471 302.633 41.1841 290.625 51.1235 283.883 cv
51.1235 283.883 51.1411 281.954 49.6323 282.429 cv
cp
f
43.3481 279.532 mo
43.3481 279.532 32.1367 288.886 28.4707 297.216 cv
28.4707 297.216 36.0986 286.698 44.6504 280.827 cv
44.6504 280.827 44.6431 279.128 43.3481 279.532 cv
cp
f
37.2739 276.565 mo
37.2739 276.565 26.3174 286.013 22.8037 294.488 cv
22.8037 294.488 30.2144 283.821 38.5728 277.923 cv
38.5728 277.923 38.5518 276.166 37.2739 276.565 cv
cp
f
31.2822 272.993 mo
31.2822 272.993 20.3228 282.437 16.8052 290.901 cv
16.8052 290.901 24.2266 280.238 32.5815 274.336 cv
32.5815 274.336 32.564 272.589 31.2822 272.993 cv
cp
f
25.4463 270.271 mo
25.4463 270.271 16.5161 278.14 13.687 285.258 cv
13.687 285.258 19.6992 276.328 26.5142 271.418 cv
26.5142 271.418 26.4932 269.95 25.4463 270.271 cv
cp
f
20.1606 268.296 mo
20.1606 268.296 12.3403 274.571 9.72852 280.093 cv
9.72852 280.093 15.0967 273.085 21.0293 269.134 cv
21.0293 269.134 21.0566 268.018 20.1606 268.296 cv
cp
f
grestore
306.301 543.36 mo
227.125 543.357 165.146 502.419 139.217 465.251 cv
102.772 413.02 90.9619 364.772 98.8555 295.887 cv
105.439 238.46 128.702 218.529 149.801 198.005 cv
152.788 195.101 161.991 186.895 164.685 184.114 cv
178.928 169.427 172.106 154.839 169.936 149.333 cv
169.501 148.228 169.143 147.545 169.057 147.387 cv
179.479 141.437 li
175 144.042 li
179.521 141.505 li
199.779 177.454 li
453.813 499.361 li
447.862 502.842 li
401.936 529.727 354.315 543.36 306.318 543.36 cv
306.314 543.36 306.308 543.36 306.301 543.36 cv
cp
f
174.276 144.424 mo
174.276 144.424 174.834 145.396 175.517 147.132 cv
178.081 153.633 182.38 170.86 165.677 188.083 cv
144.509 209.913 112.096 233.064 104.819 296.569 cv
98.0391 355.731 104.819 408.362 144.509 465.251 cv
184.199 522.14 309.223 577.045 444.83 497.665 cv
194.783 180.806 li
174.276 144.424 li
cp
f
358.763 525.94 mo
351.731 525.94 344.634 525.559 337.681 524.796 cv
279.3 518.451 252.044 488.806 232.147 467.161 cv
230.535 465.407 228.975 463.708 227.452 462.079 cv
211.266 444.814 201.942 430.116 190.142 411.501 cv
187.148 406.781 183.982 401.795 180.492 396.421 cv
163 369.516 154.108 343.139 144.654 306.674 cv
135.689 272.093 139.996 240.114 157.822 208.92 cv
161.119 203.149 164.079 198.553 166.697 194.501 cv
176.413 179.421 178.432 176.286 168.937 157.743 cv
155.183 130.891 145.157 126.436 135.455 122.125 cv
126.793 118.274 121.598 112.968 116.575 107.842 cv
113.925 105.134 111.42 102.573 108.389 100.193 cv
105.86 98.2012 103.427 96.5854 101.256 95.1284 cv
95.4238 91.2246 89.894 87.521 89.0156 80.8232 cv
88.375 79.3145 88.3022 77.6299 88.8813 76.0688 cv
89.3564 74.77 90.9966 71.752 95.813 71.752 cv
97.7598 71.752 101.753 72.1758 113.839 75.8413 cv
122.349 78.4185 129.957 80.3896 136.023 81.8188 cv
133.856 77.4639 131.865 72.0273 130.669 65.457 cv
129.285 57.8467 121.388 45.8882 121.357 45.8672 cv
121.357 45.8672 131.517 44.9165 131.521 44.9165 cv
140.761 44.5439 135.372 45.9224 148.726 46.4805 cv
161.632 47.0176 173.043 50.8218 182.056 57.3643 cv
181.688 51.1626 182.101 44.6372 184.213 39.0972 cv
187.065 31.6143 190.535 26.2534 193.322 21.9429 cv
195.744 18.1982 197.664 15.2319 198.125 12.4614 cv
199.435 4.61963 204.261 3.77246 206.27 3.77246 cv
210.542 3.77246 214.27 7.25586 218.011 14.7354 cv
218.742 16.1963 221.519 20.0581 224.207 23.793 cv
227.521 28.4028 230.515 32.627 232.95 36.3999 cv
233.88 34.7661 235.228 33.2056 236.096 31.2866 cv
247.042 7.05566 263.262 .154785 263.358 0 cv
261.629 11.1182 li
261.626 11.2349 261.023 23.2246 262.242 31.7827 cv
262.504 33.5986 262.897 35.5967 263.324 37.7778 cv
265.12 46.9146 267.576 59.4277 264.13 74.3325 cv
261.636 85.1475 264.675 102.088 270.498 109.871 cv
271.982 111.855 273.233 112.6 273.853 112.637 cv
274.218 112.658 274.587 112.668 274.956 112.668 cv
280.048 112.668 285.936 110.667 293.395 108.134 cv
299.741 105.981 306.935 103.542 315.837 101.526 cv
324.402 99.5938 336.013 97.3745 349.939 97.3745 cv
367.276 97.3745 384.723 100.754 403.279 107.718 cv
440.717 121.754 472.972 145.302 496.545 175.814 cv
520.399 206.688 541.168 235.194 553.694 271.459 cv
562.977 298.312 579.852 367.18 536.324 426.467 cv
511.241 460.627 497.785 468.038 486.974 473.985 cv
481.206 477.165 477.036 479.46 471.941 485.613 cv
455.765 505.165 410.604 525.94 358.763 525.94 cv
cp
f
174.276 155.008 mo
160.385 127.886 149.801 121.933 137.894 116.641 cv
125.987 111.349 121.357 102.749 112.096 95.4727 cv
102.834 88.1963 94.897 85.5503 94.897 78.9351 cv
94.897 78.9351 90.2661 74.9663 112.096 81.5811 cv
133.925 88.1963 149.801 90.8423 149.801 90.8423 cv
149.801 90.8423 139.879 82.5737 136.571 64.3818 cv
134.559 53.3193 129.294 50.4907 129.294 50.4907 cv
129.294 50.4907 132.603 51.814 148.478 52.4756 cv
164.354 53.1367 182.876 59.752 192.137 78.2739 cv
192.137 78.2739 184.53 55.1211 189.822 41.23 cv
195.114 27.3384 202.721 21.3848 204.044 13.4468 cv
205.367 5.50879 209.998 12.124 212.644 17.416 cv
215.29 22.7075 231.166 41.8911 233.15 49.8296 cv
233.15 49.8296 235.796 42.5527 241.088 34.6147 cv
246.38 26.6768 255.641 10.8008 255.641 10.8008 cv
255.641 10.8008 254.979 23.3696 256.303 32.6304 cv
257.626 41.8911 262.256 55.7827 258.287 72.9819 cv
254.318 90.1807 262.256 117.964 273.501 118.625 cv
284.747 119.287 296.213 109.364 316.72 104.734 cv
337.226 100.104 364.127 99.4419 401.171 113.333 cv
438.215 127.225 469.306 150.377 491.797 179.483 cv
514.288 208.589 535.455 237.034 548.023 273.416 cv
560.592 309.799 569.854 370.657 531.486 422.915 cv
493.119 475.173 483.197 462.605 467.321 481.79 cv
451.445 500.972 399.187 525.448 338.329 518.833 cv
277.471 512.217 251.672 479.142 231.827 457.974 cv
211.982 436.807 198.752 418.285 181.553 391.825 cv
164.354 365.364 159.724 340.889 150.462 305.167 cv
141.202 269.447 147.155 239.68 163.031 211.896 cv
178.907 184.114 188.168 182.129 174.276 155.008 cv
cp
1 1 1 rgb
f
236.458 483.111 mo
236.458 483.111 268.871 535.371 378.68 529.417 cv
378.68 529.417 276.147 552.57 236.458 483.111 cv
cp
f
231.166 493.034 mo
231.166 493.034 264.902 538.016 344.944 535.371 cv
344.944 535.371 262.918 552.57 231.166 493.034 cv
cp
f
222.566 497.003 mo
222.566 497.003 253.56 541.321 327.083 538.716 cv
327.083 538.716 251.734 555.656 222.566 497.003 cv
cp
f
206.704 492.837 mo
206.704 492.837 230.804 535.511 296.826 539.123 cv
296.826 539.123 227.989 548.352 206.704 492.837 cv
cp
f
235.142 207.711 mo
235.142 207.711 259.169 206.833 263.8 216.093 cv
268.43 225.354 263.807 226.022 277.029 230.646 cv
283.931 233.062 291.369 235.056 297.323 244.317 cv
303.276 253.578 304.599 272.101 298.646 281.361 cv
292.692 290.622 290.039 290.615 290.039 290.615 cv
290.039 290.615 295.332 299.215 297.978 313.768 cv
300.623 328.321 289.822 333.396 289.822 333.396 cv
289.822 333.396 301.946 346.843 300.623 352.135 cv
299.3 357.427 302.608 350.811 309.884 347.504 cv
317.161 344.197 319.807 340.889 319.807 340.889 cv
319.807 340.889 317.161 331.628 322.453 328.983 cv
322.453 328.983 307.238 311.784 317.161 302.522 cv
327.083 293.261 336.344 289.292 336.344 289.292 cv
336.344 289.292 321.792 270.109 324.437 256.878 cv
327.083 243.649 319.807 235.711 335.683 227.773 cv
340.975 215.866 li
340.975 215.866 321.129 216.527 313.853 201.313 cv
313.853 201.313 294.669 197.344 299.3 180.806 cv
303.931 164.269 309.884 168.238 309.884 168.238 cv
309.884 168.238 303.931 133.84 328.406 127.225 cv
328.406 127.225 336.344 108.041 354.866 116.641 cv
354.866 116.641 362.804 115.979 366.111 122.595 cv
366.111 122.595 387.941 116.641 390.587 127.886 cv
393.233 139.132 394.556 133.178 394.556 133.178 cv
394.556 133.178 406.463 126.563 415.063 135.163 cv
423.662 143.763 420.354 153.023 420.354 153.023 cv
420.354 153.023 422.339 147.069 436.23 151.7 cv
450.122 156.331 447.477 172.868 447.477 172.868 cv
447.477 172.868 461.367 166.253 469.967 175.514 cv
478.566 184.775 472.613 203.297 472.613 203.297 cv
472.613 203.297 479.229 213.868 479.229 227.111 cv
479.229 229.757 507.011 236.373 498.411 268.786 cv
498.411 268.786 512.964 274.739 512.304 298.553 cv
512.304 298.553 522.887 302.522 519.579 321.706 cv
519.579 321.706 548.686 327.659 537.44 355.442 cv
537.44 355.442 538.101 373.964 519.579 383.225 cv
519.579 383.225 535.455 395.793 506.35 405.055 cv
506.35 405.055 507.673 428.869 483.858 428.208 cv
483.858 428.208 476.582 454.668 467.982 455.99 cv
459.383 457.314 452.107 446.068 452.107 446.068 cv
452.107 446.068 428.292 455.329 416.386 436.145 cv
411.094 441.437 li
411.094 441.437 419.693 454.668 409.771 463.928 cv
399.848 473.19 398.525 470.542 398.525 470.542 cv
398.525 470.542 393.895 488.404 383.972 493.695 cv
374.05 498.988 368.096 492.374 368.096 492.374 cv
368.096 492.374 366.111 500.311 352.22 489.728 cv
352.22 489.728 344.944 502.957 332.375 502.296 cv
319.807 501.633 323.114 497.665 323.114 497.665 cv
323.114 497.665 292.685 502.296 290.701 478.481 cv
288.716 454.668 290.039 475.835 290.039 475.835 cv
290.039 475.835 259.61 482.451 253.657 463.928 cv
247.703 445.406 256.303 446.73 256.303 446.73 cv
256.303 446.73 225.874 440.115 221.243 422.254 cv
216.613 404.393 227.858 405.055 227.858 405.055 cv
227.858 405.055 197.429 401.086 190.153 381.902 cv
182.876 362.718 196.768 356.765 196.768 356.765 cv
196.768 356.765 167.662 354.781 164.354 326.336 cv
161.047 297.892 165.022 297.237 165.022 297.237 cv
165.022 297.237 152.447 283.339 151.786 262.833 cv
151.124 242.326 164.137 237.702 164.137 237.702 cv
164.137 237.702 170.308 222.481 182.215 213.219 cv
194.122 203.959 202.721 203.297 208.013 201.974 cv
213.305 200.651 214.635 205.726 235.142 207.711 cv
cp
.27451 .207843 .145098 rgb
f
166.669 103.742 mo
166.669 103.742 149.801 86.5425 145.171 77.2817 cv
140.54 68.0205 139.217 58.7598 137.563 55.7827 cv
135.91 52.8062 134.917 51.4829 134.917 51.4829 cv
134.917 51.4829 145.171 50.4907 155.754 52.4756 cv
166.339 54.46 183.869 58.4287 190.814 74.6357 cv
190.814 74.6357 191.145 44.8682 193.791 40.8994 cv
196.437 36.9302 195.775 33.6226 198.09 29.9844 cv
200.406 26.3457 206.359 14.7695 206.69 10.8008 cv
207.021 6.83203 211.321 14.1084 217.605 24.3618 cv
223.889 34.6147 233.925 43.8755 236.017 52.4756 cv
238.111 61.0752 225.433 90.8491 237.119 104.072 cv
237.812 104.858 194.452 100.434 194.452 100.434 cv
166.669 103.742 li
cp
1 1 1 rgb
f
224.881 135.824 mo
224.881 135.824 220.913 141.778 225.212 144.093 cv
229.512 146.409 228.52 145.416 230.173 150.377 cv
231.827 155.338 240.427 165.922 242.742 169.561 cv
245.057 173.199 274.164 198.667 274.164 198.667 cv
274.164 198.667 252.995 183.783 241.088 169.892 cv
229.181 156 228.189 149.385 223.228 145.085 cv
218.266 140.786 216.282 137.478 216.282 137.478 cv
224.881 135.824 li
cp
.27451 .207843 .145098 rgb
f
175.6 192.713 mo
175.6 192.713 187.424 174.75 169.936 149.333 cv
152.447 123.917 142.525 119.287 133.925 115.979 cv
125.326 112.672 125.326 110.688 117.388 103.411 cv
109.45 96.1343 99.5273 93.4883 95.5581 84.2271 cv
91.5889 74.9663 97.4873 78.4702 104.819 81.5811 cv
126.648 90.8423 140.54 93.4883 145.832 94.8115 cv
151.124 96.1343 174.276 101.426 180.23 113.333 cv
186.184 125.24 190.814 128.555 196.768 137.154 cv
202.721 145.754 200.736 151.7 200.075 162.284 cv
199.414 172.868 193.46 184.114 193.46 184.114 cv
193.46 184.114 196.768 173.53 195.444 162.946 cv
195.444 162.946 194.783 173.53 188.168 184.775 cv
188.168 184.775 184.861 182.129 182.876 186.099 cv
180.892 190.067 175.6 192.713 175.6 192.713 cv
cp
1 1 1 rgb
f
274.164 152.693 mo
274.164 152.693 244.403 152.589 235.579 127.894 cv
226.755 103.194 226.755 84.2271 226.755 84.2271 cv
239.986 92.1719 li
239.986 92.1719 227.645 70.5596 236.464 46.7456 cv
245.278 22.9316 255.641 10.8008 255.641 10.8008 cv
255.641 10.8008 255.861 27.3384 259.393 44.0996 cv
262.924 60.8579 264.682 67.9175 261.154 80.2651 cv
257.632 92.6099 260.278 117.302 278.8 118.188 cv
278.8 118.188 268.217 120.833 260.278 112.896 cv
260.278 112.896 261.16 118.188 268.217 120.833 cv
268.217 120.833 274.391 124.358 262.924 123.48 cv
251.455 122.601 267.331 130.54 259.393 130.54 cv
251.455 130.54 265.563 134.953 258.508 135.831 cv
251.455 136.71 259.827 148.39 274.164 152.693 cv
cp
f
171.63 96.3584 mo
171.63 96.3584 167.228 92.3892 164.137 91.2871 cv
161.047 90.188 164.137 90.8423 160.83 86.436 cv
157.522 82.0259 157.305 78.501 157.522 76.2964 cv
157.739 74.0879 157.084 73.8677 155.538 71.2212 cv
153.991 68.5752 155.754 67.0352 153.991 64.8267 cv
152.23 62.6221 148.261 59.9761 148.261 59.9761 cv
148.261 59.9761 159.951 65.0508 164.798 64.8267 cv
169.646 64.6064 171.638 65.2681 173.398 68.1343 cv
175.159 71.0039 180.451 71.8862 183.097 74.9731 cv
185.743 78.0566 191.482 80.9268 193.905 84.0103 cv
196.327 87.0972 195.889 95.9141 193.905 98.3428 cv
191.92 100.771 171.63 96.3584 171.63 96.3584 cv
cp
.27451 .207843 .145098 rgb
f
235.142 89.2988 mo
235.142 89.2988 226.763 71.876 231.834 54.2393 cv
236.902 36.5991 254.539 12.7925 254.539 12.7925 cv
254.539 12.7925 249.908 24.6992 247.703 27.7827 cv
245.498 30.8696 245.939 36.1548 242.632 39.2451 cv
239.324 42.3359 237.788 50.0464 236.017 52.4756 cv
234.252 54.9043 234.48 59.979 234.694 62.1807 cv
234.914 64.3818 235.127 63.9448 233.591 66.5908 cv
232.047 69.2368 236.678 72.3203 235.355 75.8516 cv
234.032 79.3799 235.142 89.2988 235.142 89.2988 cv
cp
.996078 .996078 .996078 rgb
f
274.164 152.693 mo
274.164 152.693 257.729 149.991 247.135 142.439 cv
244.368 140.465 242.004 136.176 240.427 133.509 cv
232.82 120.61 231.497 118.956 231.827 109.695 cv
232.158 100.434 232.158 100.104 230.504 94.4805 cv
228.851 88.8579 228.189 86.2119 228.189 86.2119 cv
235.465 90.1807 li
235.465 90.1807 225.874 74.6357 233.15 49.8296 cv
233.15 49.8296 227.197 56.4443 228.52 69.6743 cv
228.851 80.2583 li
228.851 80.2583 224.881 73.6436 224.22 60.7441 cv
224.22 60.7441 223.889 69.6743 224.881 73.6436 cv
225.874 77.6123 223.559 68.6821 223.559 71.3281 cv
223.559 73.9741 219.589 63.7212 219.589 67.6895 cv
219.589 71.6587 217.936 67.0283 216.282 61.0752 cv
214.628 55.1211 212.644 49.168 210.329 44.2065 cv
208.013 39.2451 207.021 33.9531 207.021 33.9531 cv
207.021 33.9531 209.998 54.7905 212.644 63.3901 cv
215.29 71.9897 214.297 69.6743 215.62 75.9585 cv
216.943 82.2432 214.297 75.6279 214.628 80.5889 cv
214.959 85.5503 213.636 79.9277 213.636 83.5659 cv
213.636 87.2041 211.651 81.5811 209.998 84.2271 cv
208.344 86.8735 207.021 84.8892 205.698 85.2192 cv
204.375 85.5503 203.713 84.5581 199.745 83.8965 cv
195.775 83.2349 193.46 80.9194 193.46 80.9194 cv
197.76 86.2119 li
197.76 86.2119 196.106 88.1963 191.145 86.2119 cv
186.184 84.2271 184.861 81.9121 184.861 81.9121 cv
184.861 81.9121 189.16 88.5273 192.137 89.5195 cv
195.114 90.5117 197.429 91.5034 190.814 91.8345 cv
184.199 92.1655 191.476 95.4727 188.83 95.8037 cv
186.184 96.1343 183.538 100.434 177.915 98.7808 cv
172.292 97.1265 164.023 95.8037 159.393 93.4883 cv
154.763 91.1733 153.439 90.8423 153.439 90.8423 cv
153.439 90.8423 160.055 93.1577 163.693 100.434 cv
167.331 107.71 169.646 104.403 171.3 109.695 cv
172.954 114.987 173.615 120.94 173.615 120.94 cv
171.961 106.718 li
171.961 106.718 174.938 107.049 175.93 116.31 cv
176.922 125.571 180.561 117.302 182.215 125.902 cv
183.869 134.501 188.83 130.202 191.145 134.17 cv
193.46 138.14 195.444 133.84 197.429 140.125 cv
199.414 146.409 201.729 157.323 201.729 166.584 cv
201.729 166.584 205.367 163.938 203.383 151.7 cv
201.398 139.462 196.437 130.532 204.375 134.17 cv
212.313 137.809 209.336 131.855 216.282 137.478 cv
223.228 143.101 225.212 144.093 225.212 144.093 cv
225.212 144.093 218.928 137.478 228.851 136.486 cv
238.773 135.494 242.411 137.809 244.368 140.465 cv
249.987 148.083 252.995 150.377 254.979 154.677 cv
256.964 158.977 259.941 157.654 263.579 156.662 cv
267.217 155.669 274.164 152.693 274.164 152.693 cv
cp
.27451 .207843 .145098 rgb
f
218.376 137.599 mo
218.376 137.599 211.313 121.061 206.47 114.222 cv
201.619 107.387 197.208 97.0195 196.106 94.1567 cv
195.004 91.2935 198.973 90.188 198.973 90.188 cv
198.973 90.188 199.631 91.0664 200.516 93.4951 cv
201.398 95.9243 204.485 97.0195 204.485 99.4487 cv
204.485 101.878 205.147 103.638 207.793 107.607 cv
210.438 111.576 219.479 122.604 223.228 127.676 cv
226.976 132.744 228.299 135.39 229.843 136.713 cv
231.386 138.037 229.398 136.938 228.961 140.245 cv
228.52 143.552 231.827 148.403 232.489 149.506 cv
233.15 150.605 237.34 159.866 237.34 159.866 cv
237.34 159.866 221.904 140.245 221.243 139.359 cv
220.582 138.477 218.376 137.599 218.376 137.599 cv
cp
f
176.702 83.1318 mo
176.702 83.1318 177.364 86.0015 173.615 86.4395 cv
169.867 86.8804 170.314 83.79 173.174 82.2495 cv
176.041 80.71 176.702 81.3711 176.702 83.1318 cv
cp
1 1 1 rgb
f
220.141 88.6475 mo
220.141 88.6475 220.582 89.9707 222.566 91.7314 cv
224.551 93.4951 223.235 95.4834 219.479 94.6016 cv
215.73 93.7158 215.958 85.7847 220.141 88.6475 cv
cp
f
226.535 86.2188 mo
226.535 86.2188 229.174 89.9639 224.992 90.188 cv
220.802 90.4082 217.281 87.1079 220.802 85.3403 cv
224.33 83.5728 226.535 86.2188 226.535 86.2188 cv
cp
f
207.572 103.862 mo
207.572 103.862 206.697 98.3462 210.218 99.0078 cv
213.746 99.6689 212.86 100.992 210.438 104.3 cv
208.013 107.607 207.572 103.862 207.572 103.862 cv
cp
f
193.681 102.095 mo
193.681 102.095 191.692 100.328 195.886 100.11 cv
200.075 99.8931 200.068 102.312 197.208 103.417 cv
194.342 104.524 193.681 102.095 193.681 102.095 cv
cp
f
178.466 96.8027 mo
178.466 96.8027 176.261 94.6016 181.553 94.3774 cv
186.845 94.1567 185.305 96.8027 183.758 97.4644 cv
182.215 98.126 178.466 96.8027 178.466 96.8027 cv
cp
f
199.854 106.726 mo
199.854 106.726 204.044 109.147 200.736 110.694 cv
197.429 112.238 196.099 103.417 199.854 106.726 cv
cp
f
230.504 107.387 mo
230.504 107.387 221.912 103.862 217.495 111.576 cv
217.495 111.576 216.168 109.147 219.7 106.063 cv
223.228 102.977 231.607 106.063 231.607 106.063 cv
231.607 106.063 232.047 107.163 230.504 107.387 cv
cp
f
233.812 88.8647 mo
233.812 88.8647 237.788 90.415 239.324 93.2783 cv
240.868 96.1411 240.871 95.9243 243.955 97.2471 cv
247.042 98.5698 249.247 104.741 249.247 104.741 cv
249.247 104.741 249.033 99.2246 245.278 96.8027 cv
241.529 94.3774 239.772 94.1567 239.986 92.1719 cv
240.207 90.188 233.812 88.8647 233.812 88.8647 cv
cp
.27451 .207843 .145098 rgb
f
278.794 190.729 mo
278.794 190.729 286.07 198.667 294.008 204.62 cv
301.946 210.574 311.869 213.219 317.822 215.205 cv
323.776 217.189 322.453 226.45 322.453 226.45 cv
322.453 226.45 331.052 215.205 314.515 211.896 cv
297.978 208.589 278.794 190.729 278.794 190.729 cv
cp
f
459.383 488.404 mo
459.383 488.404 468.645 481.79 470.629 470.542 cv
472.613 459.298 473.936 455.99 481.213 459.298 cv
488.488 462.605 488.488 457.314 497.089 457.314 cv
505.688 457.314 516.272 446.068 516.272 446.068 cv
516.272 446.068 506.35 464.589 491.797 470.542 cv
477.244 476.497 450.122 496.342 448.799 498.327 cv
447.477 500.311 459.383 488.404 459.383 488.404 cv
cp
f
303.269 503.618 mo
303.269 503.618 417.047 537.356 465.998 467.237 cv
465.998 467.237 428.954 524.125 303.269 503.618 cv
cp
f
236.902 332.952 mo
236.902 332.952 233.371 322.812 246.38 308.476 cv
251.562 302.767 253.664 300.321 266.446 295.907 cv
270.642 294.46 259.328 292.58 259.328 292.58 cv
259.328 292.58 223.235 301.644 236.902 332.952 cv
cp
f
226.149 405.975 mo
224.261 405.975 222.205 405.767 220.03 405.362 cv
201.987 401.974 191.296 393.365 187.348 379.046 cv
186.421 377.25 182.683 369.272 185.515 362.347 cv
187.19 358.261 190.69 355.412 195.927 353.888 cv
198.618 353.103 201.522 352.703 204.554 352.703 cv
220.023 352.703 236.881 363.142 240.644 375.046 cv
242.194 379.959 245.188 392.235 239.469 400.032 cv
236.582 403.976 232.096 405.975 226.149 405.975 cv
cp
f
193.288 377.598 mo
193.288 377.598 184.62 360.817 199.483 356.122 cv
214.349 351.421 234.17 362.833 237.884 375.584 cv
241.598 388.338 239.538 404.446 219.72 400.415 cv
199.899 396.389 195.765 387.667 193.288 377.598 cv
cp
1 1 1 rgb
f
197.212 361.62 mo
197.212 361.62 189.274 362.943 194.566 377.496 cv
199.858 392.048 206.917 393.809 216.62 396.018 cv
226.318 398.223 232.489 392.494 236.017 385.877 cv
236.017 385.877 229.401 392.926 216.172 390.726 cv
202.941 388.524 192.806 369.114 197.212 361.62 cv
cp
.27451 .207843 .145098 rgb
f
285.998 428.983 mo
281.516 428.983 278.477 425.261 275.796 421.982 cv
274.164 419.979 272.475 417.913 270.721 416.938 cv
269.481 416.249 li
269.229 414.854 li
269.057 413.91 265.12 391.628 273.067 380.792 cv
277.502 374.74 283.803 371.408 290.804 371.408 cv
295.338 371.408 299.961 372.782 304.179 375.38 cv
305.02 375.897 li
313.343 381 319.917 385.024 314.729 401.334 cv
310.208 415.536 298.136 424.762 289.171 428.348 cv
288.117 428.772 287.048 428.983 285.998 428.983 cv
cp
f
272.179 414.316 mo
272.179 414.316 268.43 397.118 275.707 387.195 cv
282.983 377.272 293.13 374.849 301.729 380.142 cv
310.329 385.433 316.499 385.871 311.869 400.423 cv
307.238 414.977 294.669 422.915 288.055 425.561 cv
281.44 428.208 278.132 417.624 272.179 414.316 cv
cp
1 1 1 rgb
f
280.117 376.941 mo
280.117 376.941 273.833 396.125 276.809 403.402 cv
279.786 410.677 286.07 413.655 293.347 413.324 cv
300.623 412.993 308.561 408.693 308.561 408.693 cv
308.561 408.693 296.654 426.553 284.416 428.539 cv
272.179 430.523 259.61 416.3 265.563 399.432 cv
271.517 382.564 280.117 376.941 280.117 376.941 cv
cp
.27451 .207843 .145098 rgb
f
323.207 424.952 mo
315.038 424.952 309.161 420.145 308.23 412.704 cv
308.203 411.128 308.365 382.798 322.174 374.074 cv
326.081 371.608 330.484 370.302 334.911 370.302 cv
345.802 370.302 354.88 377.765 356.506 388.048 cv
358.767 402.368 347.514 412.668 337.454 420.042 cv
333.14 423.212 328.083 424.952 323.207 424.952 cv
cp
f
311.207 412.332 mo
311.207 412.332 311.207 384.549 323.776 376.611 cv
336.344 368.672 351.559 375.949 353.543 388.517 cv
355.528 401.086 345.605 410.346 335.683 417.624 cv
325.76 424.9 312.53 422.915 311.207 412.332 cv
cp
1 1 1 rgb
f
311.869 400.423 mo
311.869 400.423 312.861 411.008 322.784 412 cv
332.706 412.993 339.651 407.371 344.944 400.423 cv
350.236 393.479 349.905 388.848 349.905 388.848 cv
349.905 388.848 353.874 398.771 342.297 407.701 cv
330.721 416.63 327.414 420.6 318.153 418.616 cv
308.892 416.63 310.215 403.402 311.869 400.423 cv
cp
.27451 .207843 .145098 rgb
f
294.122 459.169 mo
289.784 459.169 276.603 459.169 272.606 445.592 cv
272.399 444.878 li
272.544 444.156 li
272.688 443.428 276.241 426.212 286.566 420.311 cv
295.069 415.453 302.163 413.092 308.272 413.092 cv
313.812 413.092 318.432 415.046 322.005 418.891 cv
331.831 429.475 331.394 436.104 326.553 447.874 cv
322.05 458.808 312.124 458.833 304.147 458.853 cv
302.353 458.861 300.568 458.861 298.852 458.984 cv
297.302 459.098 295.71 459.169 294.122 459.169 cv
cp
f
275.486 444.746 mo
275.486 444.746 278.794 428.208 288.055 422.915 cv
297.315 417.624 311.207 411.67 319.807 420.93 cv
328.406 430.192 328.406 435.483 323.776 446.73 cv
319.146 457.974 307.9 455.329 298.639 455.99 cv
289.377 456.653 278.794 455.99 275.486 444.746 cv
cp
1 1 1 rgb
f
278.463 432.837 mo
278.463 432.837 276.479 450.037 292.685 451.03 cv
308.892 452.021 318.153 452.021 323.114 442.76 cv
328.076 433.499 324.437 425.561 324.437 425.561 cv
324.437 425.561 321.46 436.476 316.168 441.767 cv
310.876 447.06 300.954 447.06 294.339 447.06 cv
287.724 447.06 280.778 440.115 278.463 432.837 cv
cp
.27451 .207843 .145098 rgb
f
260.479 462.271 mo
255.807 462.271 251.989 459.949 249.129 455.37 cv
248.496 453.965 238.821 430.667 253.377 421.475 cv
259.476 417.624 264.695 415.751 269.333 415.751 cv
274.032 415.751 280.44 417.799 284.237 427.555 cv
289.801 441.868 287.724 451.381 278.063 455.842 cv
276.892 456.383 275.693 456.99 274.48 457.602 cv
269.932 459.898 265.226 462.271 260.479 462.271 cv
cp
f
251.672 453.779 mo
251.672 453.779 242.411 431.949 254.979 424.011 cv
267.548 416.074 276.809 416.735 281.44 428.642 cv
286.07 440.548 285.409 449.149 276.809 453.118 cv
268.209 457.085 258.287 464.363 251.672 453.779 cv
cp
1 1 1 rgb
f
252.995 427.98 mo
252.995 427.98 251.341 443.195 255.311 450.14 cv
259.279 457.085 270.525 457.085 278.132 449.149 cv
278.132 449.149 270.525 454.109 262.256 447.825 cv
253.988 441.541 252.995 427.98 252.995 427.98 cv
cp
.27451 .207843 .145098 rgb
f
284.789 382.137 mo
283.831 382.137 282.852 382.054 281.832 381.888 cv
268.975 379.743 263.538 369.654 261.794 365.414 cv
261.85 365.392 li
261.195 364.162 261.099 362.313 260.975 360.018 cv
260.313 347.832 265.433 339.552 275.025 337.309 cv
277.336 336.765 279.607 336.493 281.76 336.493 cv
294.163 336.493 301.915 345.661 304.096 354.747 cv
305.516 360.672 303.259 369.154 298.729 374.905 cv
294.994 379.636 290.177 382.137 284.789 382.137 cv
cp
f
264.461 364.042 mo
264.461 364.042 260.162 343.866 275.707 340.227 cv
291.252 336.589 299.19 347.173 301.174 355.442 cv
303.159 363.711 296.213 381.241 282.322 378.925 cv
268.43 376.611 264.461 363.711 264.461 364.042 cv
cp
1 1 1 rgb
f
268.654 343.536 mo
268.654 343.536 259.393 363.38 273.946 369.996 cv
288.499 376.611 294.677 375.294 299.968 366.912 cv
299.968 366.912 296.44 372.204 283.651 367.349 cv
270.863 362.499 265.563 352.803 273.946 340.452 cv
273.946 340.452 270.855 339.567 268.654 343.536 cv
cp
.27451 .207843 .145098 rgb
f
228.333 336.28 mo
227.375 336.28 226.397 336.197 225.377 336.032 cv
212.52 333.889 207.083 323.8 205.34 319.555 cv
205.395 319.536 li
204.74 318.306 204.644 316.455 204.52 314.161 cv
203.858 301.974 208.978 293.696 218.569 291.453 cv
220.881 290.912 223.152 290.636 225.305 290.636 cv
237.708 290.636 245.46 299.804 247.641 308.889 cv
249.061 314.818 246.804 323.298 242.273 329.051 cv
238.539 333.778 233.722 336.28 228.333 336.28 cv
cp
f
208.006 318.188 mo
208.006 318.188 203.707 298.012 219.252 294.374 cv
234.797 290.736 242.735 301.32 244.72 309.588 cv
246.704 317.858 239.758 335.387 225.867 333.072 cv
211.976 330.756 208.006 317.858 208.006 318.188 cv
cp
1 1 1 rgb
f
223.552 301.65 mo
223.552 301.65 219.913 296.028 229.174 298.012 cv
238.436 299.997 238.104 303.304 237.112 305.62 cv
236.12 307.935 227.521 305.62 223.552 301.65 cv
cp
.929412 .882353 .882353 rgb
f
212.199 297.682 mo
212.199 297.682 194.342 316.193 211.982 325.013 cv
226.28 332.167 238.222 329.437 243.514 321.055 cv
243.514 321.055 239.986 326.346 227.197 321.497 cv
214.408 316.641 209.109 306.946 217.491 294.595 cv
217.491 294.595 214.401 293.713 212.199 297.682 cv
cp
.27451 .207843 .145098 rgb
f
256.668 339.628 mo
248.605 339.628 243.741 333.261 243.538 332.989 cv
243.314 332.7 li
243.176 332.362 li
239.6 323.938 237.498 305.519 255.11 296.131 cv
261.292 292.834 266.708 291.16 271.214 291.16 cv
280.392 291.16 286.015 297.981 286.639 309.861 cv
287.393 324.193 272.023 335.122 262.16 338.646 cv
260.34 339.297 258.487 339.628 256.668 339.628 cv
cp
f
245.936 331.191 mo
245.936 331.191 236.675 309.361 256.52 298.777 cv
276.365 288.193 282.979 297.454 283.641 310.023 cv
284.303 322.591 270.411 332.514 261.15 335.821 cv
251.889 339.128 245.936 331.191 245.936 331.191 cv
cp
1 1 1 rgb
f
252.333 306.936 mo
251.228 315.969 250.129 321.489 254.535 325.024 cv
261.595 330.684 267.765 328.111 267.765 328.111 cv
267.765 328.111 260.265 332.961 253.212 330.315 cv
246.16 327.669 244.038 317.858 244.836 313.996 cv
247.924 298.998 260.499 295.69 260.499 295.69 cv
260.499 295.69 253.439 297.902 252.333 306.936 cv
cp
.27451 .207843 .145098 rgb
f
257.674 384.937 mo
245.525 384.937 234.28 375.119 232.068 362.582 cv
231.858 361.375 231.607 360.125 231.352 358.85 cv
229.849 351.371 228.148 342.894 232.543 336.875 cv
235.093 333.386 239.379 331.288 245.278 330.632 cv
246.835 330.46 248.372 330.375 249.863 330.375 cv
259.596 330.375 267.989 333.923 272.895 340.111 cv
276.899 345.158 278.229 351.669 276.644 358.44 cv
276.541 358.891 li
276.303 359.294 li
276.278 359.334 273.812 363.553 274.07 367.481 cv
274.418 372.649 273.185 376.979 270.515 380 cv
267.899 382.963 264.027 384.611 259.011 384.9 cv
258.563 384.927 258.115 384.937 257.674 384.937 cv
cp
f
273.722 357.758 mo
273.722 357.758 270.745 362.718 271.076 367.68 cv
271.407 372.641 270.969 378.595 259.393 379.256 cv
247.817 379.918 237.126 367.574 235.142 356.328 cv
233.157 345.083 236.023 334.715 245.608 333.613 cv
263.465 331.563 277.36 342.212 273.722 357.758 cv
cp
1 1 1 rgb
f
236.678 355.442 mo
236.678 355.442 243.083 379.701 265.129 375.732 cv
264.248 370.88 li
264.248 370.88 251.011 376.166 236.678 355.442 cv
cp
.27451 .207843 .145098 rgb
f
253.767 422.664 mo
252.361 422.664 251.472 422.602 251.472 422.602 cv
250.459 422.534 li
249.688 421.861 li
248.971 421.227 232.047 412.338 233.474 392.818 cv
234.328 381.155 245.336 367.164 256.523 367.164 cv
257.908 367.164 259.266 367.38 260.561 367.811 cv
270.222 371.036 276.023 379.876 277.802 394.099 cv
279.366 406.643 274.246 415.898 268.479 419.504 cv
264.302 422.116 258.173 422.664 253.767 422.664 cv
cp
f
252.778 415.863 mo
252.778 415.863 238.225 411.233 238.663 391.605 cv
238.932 379.625 249.688 367.349 259.61 370.657 cv
269.533 373.964 273.501 383.886 274.825 394.471 cv
276.147 405.055 272.179 413.655 266.886 416.961 cv
261.595 420.269 252.778 415.863 252.778 415.863 cv
cp
1 1 1 rgb
f
246.163 379.701 mo
246.163 379.701 238.222 384.555 241.309 396.899 cv
244.403 409.248 251.018 417.186 259.393 417.186 cv
267.769 417.186 271.303 412.776 274.832 403.515 cv
274.832 403.515 274.832 411.014 259.393 411.014 cv
243.955 411.014 242.632 383.67 246.163 379.701 cv
cp
.27451 .207843 .145098 rgb
f
308.782 230.646 mo
308.782 230.646 318.043 240.348 314.959 249.609 cv
311.875 258.87 314.521 263.721 314.959 272.101 cv
315.397 280.476 318.483 286.208 307.458 295.029 cv
307.458 295.029 315.403 287.979 313.199 275.628 cv
310.99 263.277 310.111 262.843 311.875 254.46 cv
313.636 246.078 314.515 239.907 308.782 230.646 cv
cp
f
314.773 495.916 mo
313.819 495.916 312.833 495.833 311.817 495.667 cv
298.959 493.519 293.522 483.433 291.782 479.191 cv
291.831 479.17 li
291.183 477.94 291.083 476.09 290.959 473.794 cv
290.297 461.61 295.42 453.331 305.013 451.087 cv
307.321 450.543 309.588 450.271 311.745 450.271 cv
324.147 450.271 331.899 459.439 334.081 468.525 cv
335.503 474.451 333.244 482.932 328.709 488.683 cv
324.982 493.414 320.165 495.916 314.773 495.916 cv
cp
f
294.449 477.82 mo
294.449 477.82 290.149 457.644 305.694 454.005 cv
321.24 450.368 329.178 460.953 331.163 469.221 cv
333.147 477.49 326.201 495.019 312.31 492.704 cv
298.418 490.388 294.449 477.49 294.449 477.82 cv
cp
1 1 1 rgb
f
298.639 457.314 mo
298.639 457.314 286.291 474.954 303.931 483.774 cv
318.229 490.926 324.658 489.072 329.95 480.689 cv
329.95 480.689 326.428 485.982 313.636 481.126 cv
300.844 476.277 295.548 466.581 303.931 454.23 cv
303.931 454.23 300.84 453.344 298.639 457.314 cv
cp
.27451 .207843 .145098 rgb
f
200.189 244.844 mo
195.851 244.844 182.669 244.844 178.673 231.267 cv
178.466 230.553 li
178.611 229.83 li
178.755 229.103 182.308 211.887 192.633 205.985 cv
201.136 201.127 208.23 198.767 214.339 198.767 cv
219.879 198.767 224.499 200.72 228.072 204.565 cv
237.898 215.149 237.46 221.778 232.62 233.547 cv
228.117 244.482 218.19 244.507 210.214 244.527 cv
208.42 244.534 206.635 244.534 204.919 244.658 cv
203.369 244.772 201.777 244.844 200.189 244.844 cv
cp
f
188.83 220.496 mo
188.83 220.496 184.861 213.881 194.122 208.589 cv
203.383 203.297 217.274 197.344 225.874 206.605 cv
234.473 215.866 229.843 209.25 225.212 220.496 cv
220.582 231.742 216.613 225.127 207.352 225.788 cv
198.09 226.45 192.137 231.742 188.83 220.496 cv
cp
1 1 1 rgb
f
184.53 218.512 mo
184.53 218.512 182.545 235.711 198.752 236.703 cv
214.959 237.695 224.22 237.695 229.181 228.434 cv
234.143 219.173 230.504 211.235 230.504 211.235 cv
230.504 211.235 227.527 222.15 222.235 227.442 cv
216.943 232.734 207.021 232.734 200.406 232.734 cv
193.791 232.734 186.845 225.788 184.53 218.512 cv
cp
.27451 .207843 .145098 rgb
f
219.258 363.078 mo
206.449 363.078 197.915 360.031 193.901 354.043 cv
190.552 349.044 190.545 342.333 193.874 334.088 cv
195.024 328.115 200.003 317.362 211.19 317.362 cv
212.141 317.385 li
220.595 317.83 238.204 318.76 240.757 339.194 cv
241.719 346.891 240.396 352.848 236.819 356.9 cv
233.15 361.055 227.41 363.078 219.258 363.078 cv
cp
f
196.768 334.936 mo
196.768 334.936 199.414 319.721 211.982 320.382 cv
224.551 321.044 235.796 323.69 237.781 339.567 cv
239.765 355.442 231.166 360.073 219.258 360.073 cv
207.352 360.073 187.507 357.427 196.768 334.936 cv
cp
1 1 1 rgb
f
198.535 336.042 mo
198.535 336.042 194.128 350.591 207.358 352.795 cv
220.589 355.005 236.451 358.53 237.781 339.567 cv
237.781 339.567 236.464 349.706 217.057 348.827 cv
197.65 347.949 198.535 336.042 198.535 336.042 cv
cp
.27451 .207843 .145098 rgb
f
229.191 261.207 mo
228.299 260.238 li
227.596 259.473 211.107 241.331 219.224 225.106 cv
224.434 214.684 232.096 208.947 240.806 208.947 cv
244.881 208.947 249.047 210.181 253.191 212.621 cv
259.104 216.093 262.511 224.042 262.304 233.878 cv
262.143 241.537 259.458 251.804 252.423 255.556 cv
241.956 261.137 230.969 261.207 230.504 261.207 cv
229.191 261.207 li
cp
f
232.933 256.217 mo
232.933 256.217 214.628 241.003 221.904 226.45 cv
229.181 211.896 240.427 208.589 251.672 215.205 cv
262.918 221.819 260.933 247.618 251.011 252.91 cv
241.088 258.202 232.933 256.217 232.933 256.217 cv
cp
1 1 1 rgb
f
227.204 222.264 mo
227.204 222.264 219.707 225.795 225.881 240.348 cv
232.047 254.901 235.583 257.103 245.726 255.78 cv
255.861 254.457 254.101 248.287 254.101 248.287 cv
254.101 248.287 248.806 252.255 239.986 250.047 cv
231.172 247.842 223.675 230.643 227.204 222.264 cv
cp
.27451 .207843 .145098 rgb
f
275.059 303.122 mo
270.311 303.122 265.901 300.166 259.328 292.58 cv
249.591 281.344 247.4 264.173 253.464 246.636 cv
256.292 238.481 259.927 230.932 267.355 230.932 cv
271.217 230.932 275.29 232.958 281.019 236.462 cv
292.423 243.428 297.026 258.057 293.65 276.6 cv
290.853 292.007 279.91 301.726 279.445 302.137 cv
278.804 302.698 li
277.96 302.838 li
276.985 302.998 276.034 303.122 275.059 303.122 cv
275.059 303.122 li
cp
f
277.471 299.876 mo
277.471 299.876 288.055 290.615 290.701 276.063 cv
293.347 261.509 291.362 246.294 279.455 239.019 cv
267.548 231.742 263.248 230.798 256.303 247.618 cv
253.664 254.016 265.571 256.217 269.54 272.093 cv
272.723 284.834 260.278 298.116 277.471 299.876 cv
cp
1 1 1 rgb
f
269.54 279.153 mo
269.54 279.153 271.745 287.091 277.478 287.091 cv
283.208 287.091 288.499 280.476 288.499 280.476 cv
288.499 280.476 285.409 292.379 277.029 292.824 cv
268.654 293.269 265.123 286.653 265.123 286.653 cv
265.123 286.653 268.657 276.507 269.54 279.153 cv
cp
.27451 .207843 .145098 rgb
f
239.076 308.487 mo
237.932 308.487 236.802 308.348 235.728 308.08 cv
219.617 304.051 218.314 295.128 218.246 292.879 cv
216.316 281.819 217.625 259.832 236.223 254.016 cv
239.61 252.958 242.9 252.421 246.001 252.421 cv
253.543 252.421 259.899 255.573 263.91 261.292 cv
268.196 267.411 269.126 275.542 266.401 283.039 cv
261.126 297.547 249.378 308.487 239.076 308.487 cv
cp
f
222.787 291.501 mo
222.787 291.501 215.951 263.494 237.119 256.878 cv
258.287 250.264 268.871 267.463 263.579 282.016 cv
258.287 296.569 245.774 307.604 236.458 305.167 cv
226.318 302.522 222.787 291.501 222.787 291.501 cv
cp
1 1 1 rgb
f
229.181 264.817 mo
229.181 264.817 213.305 298.553 239.765 302.522 cv
239.765 302.522 221.904 294.584 229.181 264.817 cv
cp
.27451 .207843 .145098 rgb
f
212.754 288.155 mo
211.348 288.155 210.459 288.093 210.459 288.093 cv
209.446 288.028 li
208.675 287.356 li
207.958 286.719 191.035 277.83 192.461 258.312 cv
193.315 246.646 204.323 232.658 215.51 232.658 cv
216.895 232.658 218.252 232.875 219.548 233.302 cv
229.208 236.527 235.011 245.372 236.788 259.594 cv
238.353 272.135 233.233 281.392 227.465 285 cv
223.29 287.607 217.161 288.155 212.754 288.155 cv
cp
f
211.765 281.354 mo
211.765 281.354 197.212 276.724 197.65 257.096 cv
197.918 245.117 208.896 235.708 218.818 239.015 cv
228.74 242.322 232.489 249.382 233.812 259.966 cv
235.135 270.55 231.166 279.149 225.874 282.457 cv
220.582 285.764 211.765 281.354 211.765 281.354 cv
cp
1 1 1 rgb
f
206.035 242.108 mo
206.035 242.108 198.09 246.963 201.181 259.308 cv
204.271 271.656 210.887 279.594 219.266 279.594 cv
227.641 279.594 231.176 275.184 234.701 265.922 cv
234.701 265.922 234.701 273.423 219.266 273.423 cv
203.827 273.423 202.504 246.078 206.035 242.108 cv
cp
.27451 .207843 .145098 rgb
f
191.634 268.234 mo
180.43 268.234 165.388 251.06 163.948 243.484 cv
163.827 242.87 li
163.972 242.253 li
164.513 239.928 169.584 219.473 179.865 216.806 cv
181.946 216.269 184.085 215.997 186.225 215.997 cv
194.218 215.997 203.558 220.083 205.791 231.556 cv
207.641 241.096 206.349 255.449 200.985 262.956 cv
198.855 265.93 196.141 267.718 193.129 268.131 cv
192.644 268.197 192.144 268.234 191.634 268.234 cv
cp
f
166.862 242.925 mo
166.862 242.925 171.769 221.974 180.613 219.687 cv
189.45 217.392 200.582 220.338 202.873 232.124 cv
205.167 243.907 201.887 260.606 192.396 261.919 cv
182.904 263.225 168.168 249.806 166.862 242.925 cv
cp
1 1 1 rgb
f
177.667 224.269 mo
177.667 224.269 167.187 237.365 173.409 246.529 cv
177.012 250.788 li
177.012 250.788 170.132 240.638 177.667 224.269 cv
cp
.27451 .207843 .145098 rgb
f
184.644 318.098 mo
183.751 317.133 li
183.048 316.369 166.559 298.222 174.676 282.002 cv
179.886 271.577 187.548 265.84 196.257 265.84 cv
200.333 265.84 204.499 267.077 208.644 269.517 cv
214.556 272.989 217.963 280.938 217.756 290.771 cv
217.595 298.429 214.911 308.7 207.875 312.453 cv
197.409 318.034 186.421 318.098 185.957 318.098 cv
184.644 318.098 li
cp
f
188.385 313.113 mo
188.385 313.113 170.08 297.899 177.356 283.346 cv
184.633 268.792 195.879 265.485 207.125 272.101 cv
218.37 278.715 216.385 304.514 206.463 309.806 cv
196.54 315.098 188.385 313.113 188.385 313.113 cv
cp
1 1 1 rgb
f
182.656 279.16 mo
182.656 279.16 175.159 282.688 181.333 297.241 cv
187.5 311.793 191.035 313.996 201.178 312.672 cv
211.313 311.349 209.553 305.178 209.553 305.178 cv
209.553 305.178 204.258 309.148 195.438 306.943 cv
186.625 304.734 179.127 287.535 182.656 279.16 cv
cp
.27451 .207843 .145098 rgb
f
168.599 293.995 mo
161.812 293.995 155.754 289.062 151.09 279.721 cv
146.855 271.263 146.053 249.361 156.096 242.791 cv
158.473 241.237 161.047 240.452 163.744 240.452 cv
171.754 240.452 178.983 247.449 181.987 254.364 cv
182.263 254.977 li
185.157 261.64 185.26 262.116 184.971 267.763 cv
184.867 269.892 li
184.792 270.188 li
183.427 275.556 178.328 293.134 169.929 293.933 cv
169.481 293.975 169.037 293.995 168.599 293.995 cv
cp
f
181.884 269.447 mo
181.884 269.447 176.592 290.285 169.646 290.946 cv
162.701 291.608 157.409 285.654 153.771 278.377 cv
150.132 271.101 150.462 252.579 159.062 246.956 cv
167.662 241.333 175.93 247.949 179.238 255.556 cv
182.545 263.163 182.215 262.171 181.884 269.447 cv
cp
1 1 1 rgb
f
153.553 254.016 mo
153.553 254.016 153.116 276.507 165.46 280.476 cv
177.805 284.445 180.898 274.747 180.898 274.747 cv
180.898 274.747 181.336 284.886 170.314 286.208 cv
159.29 287.532 149.584 275.184 153.553 254.016 cv
cp
.27451 .207843 .145098 rgb
f
312.151 394.233 mo
301.443 394.233 297.75 378.829 297.095 375.587 cv
293.791 368.617 291.521 353.789 305.646 344.961 cv
312.075 340.941 318.752 338.819 324.961 338.819 cv
332.947 338.819 339.838 342.357 342.949 348.051 cv
348.816 358.812 348.093 369.082 341.009 375.525 cv
339.783 376.641 338.508 377.857 337.206 379.101 cv
330.442 385.579 322.776 392.91 313.591 394.136 cv
313.099 394.202 312.62 394.233 312.151 394.233 cv
cp
f
299.961 374.626 mo
299.961 374.626 291.362 357.427 307.238 347.504 cv
323.114 337.582 336.344 342.212 340.313 349.49 cv
344.282 356.765 346.267 366.688 338.99 373.302 cv
331.714 379.918 323.114 389.84 313.191 391.164 cv
303.269 392.487 299.961 374.626 299.961 374.626 cv
cp
1 1 1 rgb
f
298.197 372.649 mo
298.197 372.649 302.608 380.142 309.667 379.701 cv
316.727 379.263 324.658 377.496 329.512 374.849 cv
334.367 372.204 340.096 359.418 340.096 359.418 cv
340.096 359.418 340.096 374.416 326.866 381.909 cv
313.636 389.402 303.931 388.083 300.844 383.232 cv
297.76 378.377 298.197 372.649 298.197 372.649 cv
cp
.27451 .207843 .145098 rgb
f
362.949 258.157 mo
358.556 258.157 351.187 257.113 348.885 254.24 cv
348.547 253.736 344.661 247.604 343.28 233.809 cv
341.602 216.972 350.925 211.949 359.042 210.698 cv
360.22 210.519 361.309 210.436 362.329 210.436 cv
371.494 210.436 374.932 217.32 376.399 220.259 cv
379.004 225.468 379.807 230.377 376.975 242.777 cv
376.417 245.23 li
374.305 254.622 373.739 257.144 366.111 257.992 cv
365.085 258.105 364.017 258.157 362.949 258.157 cv
cp
f
351.228 252.362 mo
351.228 252.362 347.59 246.739 346.267 233.509 cv
344.944 220.279 350.897 214.987 359.497 213.664 cv
368.096 212.341 371.404 216.972 373.719 221.603 cv
376.034 226.233 376.696 230.533 374.05 242.108 cv
371.404 253.685 371.734 254.347 365.781 255.008 cv
359.827 255.67 352.551 254.016 351.228 252.362 cv
cp
1 1 1 rgb
f
355.858 223.917 mo
355.858 223.917 353.874 216.641 362.143 217.633 cv
370.412 218.625 372.727 223.917 370.081 225.902 cv
367.435 227.887 361.481 228.548 355.858 223.917 cv
cp
.929412 .882353 .882353 rgb
f
348.034 221.83 mo
348.034 221.83 347.59 250.057 357.733 250.936 cv
367.879 251.814 370.528 252.255 372.733 243.876 cv
372.733 243.876 372.727 248.734 360.379 245.644 cv
348.034 242.553 348.034 221.83 348.034 221.83 cv
cp
.27451 .207843 .145098 rgb
f
397.399 322.605 mo
396.251 322.605 395.125 322.467 394.05 322.199 cv
377.936 318.17 376.634 309.248 376.565 306.998 cv
374.639 295.938 375.945 273.951 394.546 268.135 cv
397.933 267.077 401.223 266.54 404.324 266.54 cv
411.866 266.54 418.219 269.692 422.229 275.411 cv
426.515 281.53 427.445 289.661 424.724 297.158 cv
419.445 311.667 407.696 322.605 397.399 322.605 cv
cp
f
381.109 305.62 mo
381.109 305.62 374.271 277.613 395.438 270.998 cv
416.606 264.383 427.19 281.582 421.898 296.135 cv
416.606 310.687 404.096 321.723 394.776 319.287 cv
384.641 316.641 381.109 305.62 381.109 305.62 cv
cp
1 1 1 rgb
f
387.5 278.936 mo
387.5 278.936 371.624 312.672 398.084 316.641 cv
398.084 316.641 380.224 308.703 387.5 278.936 cv
cp
.27451 .207843 .145098 rgb
f
336.789 331.78 mo
335.896 330.812 li
335.193 330.047 318.704 311.904 326.821 295.68 cv
332.031 285.258 339.693 279.521 348.403 279.521 cv
352.479 279.521 356.644 280.755 360.789 283.194 cv
366.701 286.667 370.108 294.615 369.901 304.452 cv
369.74 312.111 367.056 322.377 360.02 326.129 cv
349.553 331.71 338.566 331.78 338.101 331.78 cv
336.789 331.78 li
cp
f
340.53 326.791 mo
340.53 326.791 322.226 311.577 329.502 297.023 cv
336.778 282.471 348.023 279.163 359.269 285.778 cv
370.515 292.393 368.53 318.192 358.608 323.484 cv
348.686 328.775 340.53 326.791 340.53 326.791 cv
cp
1 1 1 rgb
f
334.801 292.838 mo
334.801 292.838 327.304 296.369 333.478 310.922 cv
339.645 325.475 343.18 327.676 353.322 326.353 cv
363.459 325.031 361.698 318.86 361.698 318.86 cv
361.698 318.86 356.403 322.829 347.583 320.621 cv
338.77 318.416 331.272 301.216 334.801 292.838 cv
cp
.27451 .207843 .145098 rgb
f
338.876 375.473 mo
337.471 375.473 336.582 375.412 336.582 375.412 cv
335.569 375.346 li
334.801 374.673 li
334.081 374.038 317.161 365.148 318.587 345.63 cv
319.441 333.964 330.446 319.976 341.636 319.976 cv
343.021 319.976 344.375 320.194 345.674 320.621 cv
355.331 323.845 361.137 332.69 362.915 346.912 cv
364.479 359.453 359.359 368.71 353.591 372.318 cv
349.416 374.925 343.283 375.473 338.876 375.473 cv
cp
f
337.888 368.672 mo
337.888 368.672 323.334 364.042 323.776 344.414 cv
324.044 332.435 334.801 320.162 344.723 323.47 cv
354.646 326.777 358.615 336.7 359.938 347.284 cv
361.261 357.868 357.292 366.467 352 369.775 cv
346.708 373.083 337.888 368.672 337.888 368.672 cv
cp
1 1 1 rgb
f
331.272 332.514 mo
331.272 332.514 323.331 337.365 326.422 349.712 cv
329.512 362.058 336.127 369.996 344.502 369.996 cv
352.882 369.996 356.417 365.589 359.941 356.328 cv
359.941 356.328 359.941 363.825 344.502 363.825 cv
329.068 363.825 327.745 336.483 331.272 332.514 cv
cp
.27451 .207843 .145098 rgb
f
185.791 353.624 mo
173.646 353.624 162.401 343.804 160.189 331.266 cv
159.979 330.064 159.724 328.814 159.469 327.536 cv
157.967 320.058 156.265 311.583 160.664 305.562 cv
163.21 302.074 167.496 299.976 173.398 299.318 cv
174.952 299.149 176.489 299.06 177.984 299.06 cv
187.713 299.06 196.106 302.612 201.016 308.796 cv
205.016 313.847 206.349 320.359 204.761 327.128 cv
204.657 327.577 li
204.423 327.98 li
204.396 328.021 201.929 332.238 202.19 336.166 cv
202.535 341.333 201.305 345.665 198.635 348.69 cv
196.017 351.649 192.147 353.299 187.127 353.588 cv
186.68 353.613 186.235 353.624 185.791 353.624 cv
cp
f
201.843 326.446 mo
201.843 326.446 198.866 331.408 199.197 336.369 cv
199.527 341.331 199.09 347.284 187.514 347.945 cv
175.937 348.607 165.243 336.258 163.259 325.013 cv
161.274 313.768 164.141 303.401 173.729 302.302 cv
191.586 300.248 205.481 310.902 201.843 326.446 cv
cp
1 1 1 rgb
f
164.798 324.131 mo
164.798 324.131 171.204 348.39 193.247 344.42 cv
192.364 339.567 li
192.364 339.567 179.127 344.855 164.798 324.131 cv
cp
.27451 .207843 .145098 rgb
f
400.337 471.687 mo
398.453 471.687 396.396 471.48 394.218 471.07 cv
376.179 467.686 365.485 459.077 361.536 444.755 cv
360.613 442.963 356.878 434.984 359.71 428.059 cv
361.385 423.969 364.882 421.124 370.115 419.598 cv
372.809 418.812 375.714 418.416 378.749 418.416 cv
394.215 418.416 411.073 428.855 414.835 440.755 cv
416.386 445.671 419.376 457.945 413.664 465.744 cv
410.773 469.685 406.288 471.687 400.337 471.687 cv
cp
f
364.344 443.646 mo
364.344 443.646 355.083 427.108 370.959 422.477 cv
386.835 417.847 408.003 429.093 411.972 441.662 cv
415.941 454.23 413.74 470.105 392.572 466.136 cv
371.404 462.167 366.99 453.568 364.344 443.646 cv
cp
1 1 1 rgb
f
371.404 427.329 mo
371.404 427.329 363.465 428.652 368.758 443.206 cv
374.05 457.758 381.109 459.521 390.808 461.727 cv
400.51 463.935 406.68 458.203 410.211 451.586 cv
410.211 451.586 403.597 458.635 390.367 456.435 cv
377.136 454.234 366.994 434.823 371.404 427.329 cv
cp
.27451 .207843 .145098 rgb
f
358.277 502.925 mo
356.872 502.925 355.982 502.864 355.982 502.864 cv
354.97 502.798 li
354.198 502.127 li
353.481 501.489 336.562 492.6 337.988 473.083 cv
338.838 461.417 349.85 447.428 361.037 447.428 cv
362.422 447.428 363.776 447.646 365.071 448.073 cv
374.732 451.298 380.534 460.142 382.312 474.365 cv
383.879 486.905 378.756 496.163 372.988 499.77 cv
368.813 502.378 362.687 502.925 358.277 502.925 cv
cp
f
357.292 496.125 mo
357.292 496.125 342.739 491.495 343.176 471.867 cv
343.445 459.887 354.198 447.615 364.12 450.922 cv
374.042 454.23 378.012 464.152 379.334 474.737 cv
380.658 485.321 376.688 493.92 371.397 497.226 cv
366.105 500.535 357.292 496.125 357.292 496.125 cv
cp
1 1 1 rgb
f
350.677 459.966 mo
350.677 459.966 342.731 464.818 345.822 477.165 cv
348.913 489.509 355.528 497.448 363.907 497.448 cv
372.282 497.448 375.817 493.042 379.342 483.781 cv
379.342 483.781 379.342 491.278 363.907 491.278 cv
348.468 491.278 347.145 463.935 350.677 459.966 cv
cp
.27451 .207843 .145098 rgb
f
343.176 465.392 mo
330.363 465.392 321.833 462.346 317.815 456.359 cv
314.466 451.36 314.463 444.649 317.791 436.404 cv
318.945 430.429 323.92 419.677 335.111 419.677 cv
336.062 419.701 li
344.516 420.145 362.122 421.076 364.675 441.509 cv
365.636 449.207 364.313 455.164 360.737 459.215 cv
357.067 463.371 351.324 465.392 343.176 465.392 cv
cp
f
320.685 437.251 mo
320.685 437.251 323.331 422.037 335.9 422.699 cv
348.468 423.36 359.714 426.005 361.698 441.881 cv
363.683 457.758 355.083 462.388 343.176 462.388 cv
331.27 462.388 311.424 459.743 320.685 437.251 cv
cp
1 1 1 rgb
f
322.453 438.357 mo
322.453 438.357 318.043 452.907 331.272 455.111 cv
344.502 457.321 360.372 460.845 361.698 441.881 cv
361.698 441.881 360.379 452.021 340.975 451.143 cv
321.571 450.265 322.453 438.357 322.453 438.357 cv
cp
.27451 .207843 .145098 rgb
f
358.222 437.417 mo
346.074 437.417 334.828 427.598 332.616 415.06 cv
332.406 413.857 332.154 412.607 331.899 411.33 cv
330.397 403.852 328.695 395.377 333.092 389.355 cv
335.642 385.868 339.927 383.77 345.826 383.111 cv
347.383 382.942 348.919 382.853 350.412 382.853 cv
360.145 382.853 368.537 386.405 373.443 392.589 cv
377.447 397.641 378.776 404.152 377.192 410.922 cv
377.088 411.37 li
376.851 411.773 li
376.827 411.814 374.359 416.032 374.618 419.959 cv
374.966 425.127 373.733 429.458 371.063 432.483 cv
368.448 435.443 364.575 437.092 359.559 437.381 cv
359.111 437.407 358.663 437.417 358.222 437.417 cv
cp
f
374.271 410.24 mo
374.271 410.24 371.293 415.202 371.624 420.163 cv
371.955 425.124 371.517 431.078 359.941 431.739 cv
348.365 432.4 337.674 420.052 335.689 408.807 cv
333.705 397.561 336.571 387.195 346.156 386.096 cv
364.014 384.042 377.909 394.695 374.271 410.24 cv
cp
1 1 1 rgb
f
337.226 407.924 mo
337.226 407.924 343.631 432.183 365.678 428.214 cv
364.796 423.36 li
364.796 423.36 351.559 428.649 337.226 407.924 cv
cp
.27451 .207843 .145098 rgb
f
424.53 331.739 mo
419.858 331.739 416.041 329.417 413.182 324.837 cv
412.547 323.431 402.873 300.135 417.43 290.943 cv
423.528 287.091 428.747 285.22 433.385 285.22 cv
438.084 285.22 444.492 287.267 448.289 297.023 cv
453.854 311.336 451.775 320.847 442.115 325.31 cv
440.943 325.85 439.744 326.457 438.531 327.07 cv
433.984 329.364 429.278 331.739 424.53 331.739 cv
cp
f
415.724 323.246 mo
415.724 323.246 406.463 301.417 419.032 293.479 cv
431.601 285.54 440.86 286.202 445.491 298.109 cv
450.122 310.016 449.461 318.615 440.86 322.584 cv
432.262 326.553 422.339 333.83 415.724 323.246 cv
cp
1 1 1 rgb
f
417.047 297.447 mo
417.047 297.447 415.394 312.662 419.363 319.608 cv
423.332 326.553 434.576 326.553 442.185 318.615 cv
442.185 318.615 434.576 323.577 426.308 317.292 cv
418.04 311.008 417.047 297.447 417.047 297.447 cv
cp
.27451 .207843 .145098 rgb
f
462.354 446.916 mo
460.947 446.916 460.059 446.853 460.059 446.853 cv
459.045 446.788 li
458.277 446.117 li
457.558 445.478 440.641 436.59 442.066 417.072 cv
442.918 405.407 453.926 391.418 465.116 391.418 cv
466.501 391.418 467.852 391.634 469.15 392.063 cv
478.809 395.288 484.612 404.131 486.392 418.353 cv
487.959 430.895 482.835 440.152 477.068 443.759 cv
472.893 446.368 466.763 446.916 462.354 446.916 cv
cp
f
461.367 440.115 mo
461.367 440.115 446.814 435.483 447.256 415.856 cv
447.524 403.876 458.277 391.605 468.2 394.912 cv
478.123 398.219 482.091 408.142 483.414 418.726 cv
484.737 429.31 480.769 437.909 475.477 441.217 cv
470.185 444.524 461.367 440.115 461.367 440.115 cv
cp
1 1 1 rgb
f
454.753 403.956 mo
454.753 403.956 446.808 408.807 449.901 421.156 cv
452.988 433.499 459.604 441.437 467.982 441.437 cv
476.361 441.437 479.896 437.03 483.417 427.77 cv
483.417 427.77 483.417 435.267 467.982 435.267 cv
452.548 435.267 451.225 407.924 454.753 403.956 cv
cp
.27451 .207843 .145098 rgb
f
406.401 398.988 mo
401.922 398.988 398.884 395.266 396.2 391.986 cv
394.566 389.985 392.875 387.917 391.125 386.943 cv
389.884 386.254 li
389.629 384.858 li
389.46 383.915 385.522 361.634 393.471 350.798 cv
397.905 344.745 404.203 341.414 411.207 341.414 cv
415.738 341.414 420.365 342.788 424.581 345.385 cv
425.426 345.902 li
433.743 351.004 440.316 355.028 435.128 371.339 cv
430.614 385.541 418.542 394.767 409.574 398.353 cv
408.52 398.778 407.449 398.988 406.401 398.988 cv
cp
f
392.582 384.321 mo
392.582 384.321 388.837 367.122 396.113 357.199 cv
403.39 347.276 413.533 344.855 422.132 350.147 cv
430.732 355.439 436.902 355.876 432.271 370.429 cv
427.642 384.982 415.073 392.92 408.458 395.567 cv
401.843 398.212 398.536 387.628 392.582 384.321 cv
cp
1 1 1 rgb
f
400.52 346.946 mo
400.52 346.946 394.235 366.129 397.212 373.406 cv
400.189 380.683 406.474 383.66 413.75 383.329 cv
421.026 382.999 428.965 378.698 428.965 378.698 cv
428.965 378.698 417.058 396.558 404.82 398.542 cv
392.582 400.528 380.014 386.305 385.967 369.437 cv
391.92 352.569 400.52 346.946 400.52 346.946 cv
cp
.27451 .207843 .145098 rgb
f
443.609 394.957 mo
435.438 394.957 429.564 390.15 428.633 382.708 cv
428.609 381.133 428.769 352.803 442.576 344.08 cv
446.483 341.613 450.887 340.306 455.317 340.306 cv
466.205 340.306 475.286 347.77 476.906 358.053 cv
479.173 372.373 467.913 382.674 457.86 390.047 cv
453.543 393.216 448.482 394.957 443.609 394.957 cv
cp
f
431.611 382.335 mo
431.611 382.335 431.611 354.553 444.18 346.616 cv
456.748 338.677 471.962 345.955 473.946 358.523 cv
475.931 371.091 466.008 380.351 456.086 387.628 cv
446.164 394.905 432.933 392.92 431.611 382.335 cv
cp
1 1 1 rgb
f
432.271 370.429 mo
432.271 370.429 433.265 381.014 443.187 382.005 cv
453.109 382.999 460.055 377.375 465.347 370.429 cv
470.639 363.483 470.309 358.853 470.309 358.853 cv
470.309 358.853 474.276 368.776 462.701 377.706 cv
451.124 386.636 447.817 390.605 438.556 388.62 cv
429.295 386.636 430.618 373.406 432.271 370.429 cv
cp
.27451 .207843 .145098 rgb
f
414.525 429.175 mo
410.191 429.175 397.006 429.175 393.013 415.597 cv
392.806 414.884 li
392.951 414.161 li
393.095 413.433 396.644 396.217 406.97 390.316 cv
415.469 385.458 422.567 383.098 428.676 383.098 cv
434.215 383.098 438.836 385.051 442.404 388.896 cv
452.237 399.48 451.796 406.109 446.952 417.878 cv
442.453 428.814 432.523 428.838 424.552 428.858 cv
422.76 428.865 420.968 428.865 419.252 428.99 cv
417.702 429.102 416.11 429.175 414.525 429.175 cv
cp
f
395.89 414.75 mo
395.89 414.75 399.197 398.212 408.458 392.92 cv
417.719 387.628 431.611 381.675 440.21 390.936 cv
448.81 400.197 448.81 405.489 444.18 416.735 cv
439.549 427.98 428.303 425.333 419.042 425.996 cv
409.781 426.658 399.197 425.996 395.89 414.75 cv
cp
1 1 1 rgb
f
398.866 402.842 mo
398.866 402.842 396.882 420.042 413.088 421.034 cv
429.295 422.027 438.556 422.027 443.518 412.765 cv
448.479 403.504 444.84 395.567 444.84 395.567 cv
444.84 395.567 441.864 406.481 436.571 411.773 cv
431.279 417.065 421.357 417.065 414.742 417.065 cv
408.127 417.065 401.182 410.12 398.866 402.842 cv
cp
.27451 .207843 .145098 rgb
f
379.559 423.905 mo
374.887 423.905 371.066 421.583 368.21 417.003 cv
367.573 415.597 357.898 392.301 372.458 383.108 cv
378.556 379.256 383.776 377.386 388.41 377.386 cv
393.116 377.386 399.524 379.432 403.314 389.19 cv
408.882 403.5 406.804 413.013 397.147 417.474 cv
395.972 418.016 394.773 418.623 393.557 419.236 cv
389.009 421.53 384.31 423.905 379.559 423.905 cv
cp
f
370.752 415.411 mo
370.752 415.411 361.492 393.583 374.06 385.644 cv
386.628 377.706 395.89 378.368 400.52 390.274 cv
405.151 402.181 404.489 410.781 395.89 414.75 cv
387.29 418.719 377.368 425.996 370.752 415.411 cv
cp
1 1 1 rgb
f
372.076 389.613 mo
372.076 389.613 370.421 404.827 374.391 411.773 cv
378.36 418.719 389.605 418.719 397.212 410.781 cv
397.212 410.781 389.605 415.743 381.336 409.458 cv
373.067 403.174 372.076 389.613 372.076 389.613 cv
cp
.27451 .207843 .145098 rgb
f
405.192 352.142 mo
404.237 352.142 403.252 352.059 402.236 351.894 cv
389.378 349.748 383.941 339.66 382.201 335.418 cv
382.25 335.397 li
381.602 334.167 381.502 332.317 381.378 330.023 cv
380.716 317.836 385.839 309.557 395.431 307.314 cv
397.74 306.771 400.006 306.499 402.163 306.499 cv
414.566 306.499 422.318 315.666 424.499 324.751 cv
425.923 330.677 423.662 339.16 419.128 344.911 cv
415.4 349.64 410.583 352.142 405.192 352.142 cv
cp
f
384.868 334.047 mo
384.868 334.047 380.568 313.871 396.113 310.233 cv
411.659 306.595 419.597 317.179 421.581 325.448 cv
423.565 333.716 416.62 351.246 402.729 348.93 cv
388.837 346.616 384.868 333.716 384.868 334.047 cv
cp
1 1 1 rgb
f
389.058 313.541 mo
389.058 313.541 379.796 333.386 394.35 340 cv
408.902 346.616 415.077 345.298 420.369 336.917 cv
420.369 336.917 416.847 342.208 404.055 337.354 cv
391.262 332.503 385.967 322.808 394.35 310.458 cv
394.35 310.458 391.259 309.571 389.058 313.541 cv
cp
.27451 .207843 .145098 rgb
f
378.074 354.942 mo
365.933 354.942 354.687 345.123 352.475 332.586 cv
352.262 331.38 352.007 330.129 351.755 328.854 cv
350.25 321.375 348.551 312.9 352.951 306.88 cv
355.497 303.391 359.779 301.292 365.684 300.638 cv
367.238 300.466 368.771 300.379 370.267 300.379 cv
379.997 300.379 388.389 303.928 393.302 310.116 cv
397.298 315.163 398.635 321.674 397.047 328.445 cv
396.944 328.897 li
396.706 329.299 li
396.679 329.34 394.215 333.558 394.473 337.485 cv
394.818 342.653 393.591 346.985 390.917 350.006 cv
388.303 352.968 384.434 354.615 379.414 354.905 cv
378.963 354.932 378.521 354.942 378.074 354.942 cv
cp
f
394.129 327.763 mo
394.129 327.763 391.152 332.723 391.483 337.686 cv
391.814 342.646 391.373 348.6 379.796 349.261 cv
368.22 349.923 357.526 337.579 355.542 326.333 cv
353.557 315.087 356.427 304.72 366.015 303.618 cv
383.869 301.568 397.767 312.217 394.129 327.763 cv
cp
1 1 1 rgb
f
357.085 325.448 mo
357.085 325.448 363.486 349.706 385.533 345.737 cv
384.647 340.886 li
384.647 340.886 371.414 346.17 357.085 325.448 cv
cp
.27451 .207843 .145098 rgb
f
374.167 392.668 mo
372.761 392.668 371.872 392.607 371.872 392.607 cv
370.859 392.539 li
370.091 391.867 li
369.371 391.232 352.455 382.343 353.88 362.823 cv
354.732 351.16 365.74 337.168 376.93 337.168 cv
378.315 337.168 379.666 337.385 380.964 337.816 cv
390.622 341.042 396.427 349.881 398.205 364.104 cv
399.772 376.648 394.649 385.903 388.882 389.509 cv
384.706 392.122 378.577 392.668 374.167 392.668 cv
cp
f
373.181 385.868 mo
373.181 385.868 358.628 381.237 359.07 361.61 cv
359.338 349.63 370.091 337.354 380.014 340.662 cv
389.936 343.97 393.905 353.892 395.228 364.476 cv
396.551 375.06 392.582 383.66 387.29 386.967 cv
381.998 390.274 373.181 385.868 373.181 385.868 cv
cp
1 1 1 rgb
f
366.566 349.706 mo
366.566 349.706 358.622 354.561 361.716 366.905 cv
364.802 379.252 371.417 387.191 379.796 387.191 cv
388.175 387.191 391.71 382.781 395.231 373.52 cv
395.231 373.52 395.231 381.02 379.796 381.02 cv
364.361 381.02 363.039 353.674 366.566 349.706 cv
cp
.27451 .207843 .145098 rgb
f
432.559 364.239 mo
421.85 364.239 418.153 348.833 417.495 345.592 cv
414.195 338.623 411.928 323.793 426.049 314.967 cv
432.479 310.946 439.155 308.824 445.36 308.824 cv
453.354 308.824 460.24 312.363 463.352 318.057 cv
469.216 328.818 468.492 339.087 461.416 345.531 cv
460.183 346.647 458.915 347.863 457.612 349.106 cv
450.845 355.583 443.183 362.916 433.991 364.142 cv
433.502 364.208 433.019 364.239 432.559 364.239 cv
cp
f
420.365 344.63 mo
420.365 344.63 411.765 327.432 427.642 317.509 cv
443.518 307.586 456.748 312.217 460.717 319.494 cv
464.686 326.771 466.671 336.693 459.394 343.308 cv
452.117 349.923 443.518 359.845 433.596 361.168 cv
423.673 362.492 420.365 344.63 420.365 344.63 cv
cp
1 1 1 rgb
f
418.604 342.653 mo
418.604 342.653 423.011 350.147 430.07 349.706 cv
437.13 349.268 445.064 347.501 449.915 344.855 cv
454.767 342.208 460.499 329.424 460.499 329.424 cv
460.499 329.424 460.499 344.42 447.27 351.915 cv
434.039 359.408 424.334 358.088 421.25 353.237 cv
418.164 348.383 418.604 342.653 418.604 342.653 cv
cp
.27451 .207843 .145098 rgb
f
430.539 468.731 mo
418.397 468.731 407.152 458.912 404.94 446.375 cv
404.727 445.168 404.472 443.917 404.22 442.643 cv
402.715 435.164 401.016 426.688 405.416 420.668 cv
407.962 417.179 412.244 415.081 418.15 414.426 cv
419.704 414.254 421.236 414.168 422.732 414.168 cv
432.462 414.168 440.854 417.716 445.767 423.905 cv
449.764 428.952 451.101 435.463 449.513 442.233 cv
449.409 442.685 li
449.172 443.087 li
449.144 443.129 446.681 447.346 446.939 451.274 cv
447.283 456.442 446.057 460.773 443.383 463.794 cv
440.768 466.756 436.898 468.404 431.879 468.694 cv
431.428 468.72 430.987 468.731 430.539 468.731 cv
cp
f
446.595 441.551 mo
446.595 441.551 443.617 446.512 443.948 451.474 cv
444.278 456.435 443.838 462.388 432.262 463.049 cv
420.686 463.712 409.991 451.367 408.007 440.122 cv
406.022 428.875 408.892 418.508 418.48 417.406 cv
436.334 415.356 450.232 426.005 446.595 441.551 cv
cp
1 1 1 rgb
f
409.55 439.236 mo
409.55 439.236 415.952 463.494 437.998 459.525 cv
437.113 454.673 li
437.113 454.673 423.879 459.959 409.55 439.236 cv
cp
.27451 .207843 .145098 rgb
f
462.483 259.876 mo
461.589 258.912 li
460.886 258.147 444.402 240 452.513 223.78 cv
457.723 213.354 465.389 207.618 474.095 207.618 cv
478.174 207.618 482.34 208.855 486.483 211.294 cv
492.396 214.767 495.8 222.715 495.594 232.548 cv
495.436 240.207 492.755 250.478 485.712 254.229 cv
475.249 259.811 464.262 259.876 463.797 259.876 cv
462.483 259.876 li
cp
f
466.226 254.891 mo
466.226 254.891 447.92 239.676 455.197 225.124 cv
462.473 210.57 473.72 207.263 484.964 213.878 cv
496.211 220.493 494.226 246.292 484.303 251.583 cv
474.38 256.875 466.226 254.891 466.226 254.891 cv
cp
1 1 1 rgb
f
460.492 220.938 mo
460.492 220.938 453.002 224.465 459.17 239.019 cv
465.344 253.571 468.878 255.773 479.014 254.45 cv
489.157 253.127 487.394 246.956 487.394 246.956 cv
487.394 246.956 482.095 250.925 473.281 248.72 cv
464.461 246.512 456.971 229.313 460.492 220.938 cv
cp
.27451 .207843 .145098 rgb
f
439.559 199.483 mo
435.6 199.483 431.917 197.013 426.426 190.677 cv
418.294 181.299 416.461 166.956 421.533 152.317 cv
423.889 145.506 426.928 139.201 433.13 139.201 cv
436.354 139.201 439.755 140.889 444.541 143.814 cv
454.06 149.633 457.905 161.851 455.09 177.333 cv
452.747 190.202 443.617 198.322 443.229 198.656 cv
442.69 199.132 li
441.987 199.246 li
441.172 199.38 440.375 199.483 439.559 199.483 cv
439.559 199.483 li
cp
f
441.574 196.775 mo
441.574 196.775 450.418 189.041 452.624 176.889 cv
454.835 164.734 453.174 152.031 443.231 145.954 cv
433.288 139.876 429.698 139.087 423.899 153.137 cv
421.691 158.477 431.635 160.317 434.956 173.571 cv
437.608 184.214 427.218 195.304 441.574 196.775 cv
cp
1 1 1 rgb
f
434.956 179.469 mo
434.956 179.469 436.796 186.099 441.578 186.099 cv
446.366 186.099 450.783 180.576 450.783 180.576 cv
450.783 180.576 448.206 190.512 441.212 190.884 cv
434.215 191.256 431.27 185.733 431.27 185.733 cv
431.27 185.733 434.219 177.261 434.956 179.469 cv
cp
.27451 .207843 .145098 rgb
f
403.707 185.396 mo
402.301 185.396 401.412 185.333 401.412 185.333 cv
400.399 185.268 li
399.631 184.596 li
398.911 183.959 381.995 175.07 383.421 155.552 cv
384.272 143.886 395.28 129.898 406.47 129.898 cv
407.855 129.898 409.206 130.115 410.504 130.543 cv
420.162 133.768 425.967 142.612 427.745 156.834 cv
429.312 169.375 424.189 178.632 418.422 182.24 cv
414.246 184.848 408.117 185.396 403.707 185.396 cv
cp
f
402.721 178.594 mo
402.721 178.594 388.168 173.964 388.61 154.336 cv
388.878 142.357 399.855 132.948 409.778 136.255 cv
419.7 139.563 423.445 146.622 424.768 157.206 cv
426.092 167.79 422.122 176.389 416.83 179.697 cv
411.538 183.004 402.721 178.594 402.721 178.594 cv
cp
1 1 1 rgb
f
396.989 139.349 mo
396.989 139.349 389.047 144.203 392.138 156.548 cv
395.228 168.896 401.843 176.834 410.218 176.834 cv
418.598 176.834 422.132 172.424 425.657 163.163 cv
425.657 163.163 425.657 170.663 410.218 170.663 cv
394.784 170.663 393.46 143.318 396.989 139.349 cv
cp
.27451 .207843 .145098 rgb
f
382.146 169.888 mo
370.942 169.888 355.9 152.713 354.46 145.137 cv
354.339 144.523 li
354.483 143.907 li
355.024 141.582 360.096 121.127 370.377 118.46 cv
372.458 117.923 374.597 117.65 376.737 117.65 cv
384.73 117.65 394.07 121.736 396.303 133.209 cv
398.153 142.75 396.861 157.103 391.497 164.61 cv
389.367 167.583 386.653 169.371 383.641 169.785 cv
383.156 169.85 382.656 169.888 382.146 169.888 cv
cp
f
357.374 144.579 mo
357.374 144.579 362.28 123.628 371.125 121.34 cv
379.962 119.045 391.093 121.992 393.385 133.778 cv
395.679 145.561 392.399 162.26 382.907 163.573 cv
373.416 164.879 358.68 151.459 357.374 144.579 cv
cp
1 1 1 rgb
f
368.179 125.922 mo
368.179 125.922 357.698 139.018 363.92 148.183 cv
367.524 152.441 li
367.524 152.441 360.644 142.291 368.179 125.922 cv
cp
.27451 .207843 .145098 rgb
f
356.637 195.5 mo
355.745 194.533 li
355.042 193.768 338.556 175.625 346.669 159.4 cv
351.879 148.979 359.545 143.242 368.251 143.242 cv
372.327 143.242 376.496 144.475 380.637 146.915 cv
386.549 150.388 389.957 158.336 389.75 168.172 cv
389.588 175.831 386.908 186.099 379.869 189.85 cv
369.406 195.432 358.415 195.5 357.953 195.5 cv
356.637 195.5 li
cp
f
360.379 190.512 mo
360.379 190.512 342.077 175.297 349.354 160.744 cv
356.63 146.191 367.876 142.884 379.121 149.499 cv
390.367 156.114 388.382 181.912 378.459 187.204 cv
368.537 192.496 360.379 190.512 360.379 190.512 cv
cp
1 1 1 rgb
f
354.649 156.558 mo
354.649 156.558 347.156 160.089 353.326 174.643 cv
359.497 189.196 363.032 191.397 373.171 190.074 cv
383.311 188.751 381.547 182.581 381.547 182.581 cv
381.547 182.581 376.251 186.55 367.435 184.341 cv
358.618 182.136 351.125 164.937 354.649 156.558 cv
cp
.27451 .207843 .145098 rgb
f
352.062 166.984 mo
345.274 166.984 339.217 162.046 334.553 152.71 cv
330.318 144.248 329.516 122.346 339.559 115.779 cv
341.936 114.222 344.51 113.437 347.207 113.437 cv
355.217 113.437 362.446 120.434 365.45 127.349 cv
365.726 127.965 li
368.62 134.625 368.723 135.101 368.434 140.751 cv
368.33 142.88 li
368.255 143.173 li
366.89 148.544 361.791 166.119 353.392 166.922 cv
352.944 166.963 352.5 166.984 352.062 166.984 cv
cp
f
365.347 142.436 mo
365.347 142.436 360.055 163.273 353.109 163.935 cv
346.164 164.596 340.872 158.643 337.233 151.366 cv
333.595 144.089 333.925 125.568 342.525 119.945 cv
351.125 114.322 359.393 120.938 362.701 128.544 cv
366.008 136.152 365.678 135.159 365.347 142.436 cv
cp
1 1 1 rgb
f
337.016 127.004 mo
337.016 127.004 336.579 149.495 348.923 153.464 cv
361.268 157.434 364.361 147.731 364.361 147.731 cv
364.361 147.731 364.799 157.871 353.777 159.194 cv
342.752 160.517 333.047 148.172 337.016 127.004 cv
cp
.27451 .207843 .145098 rgb
f
337.268 183.687 mo
336.313 183.687 335.331 183.604 334.312 183.438 cv
321.453 181.292 316.017 171.204 314.277 166.963 cv
314.329 166.942 li
313.678 165.712 313.578 163.862 313.454 161.568 cv
312.792 149.382 317.916 141.103 327.507 138.859 cv
329.819 138.315 332.086 138.043 334.242 138.043 cv
346.646 138.043 354.397 147.211 356.575 156.296 cv
357.998 162.222 355.741 170.705 351.208 176.455 cv
347.476 181.186 342.66 183.687 337.268 183.687 cv
cp
f
316.944 165.592 mo
316.944 165.592 312.644 145.416 328.189 141.778 cv
343.734 138.14 351.672 148.724 353.657 156.992 cv
355.642 165.261 348.695 182.791 334.804 180.476 cv
320.913 178.16 316.944 165.261 316.944 165.592 cv
cp
1 1 1 rgb
f
321.137 145.085 mo
321.137 145.085 308.789 162.726 326.428 171.545 cv
340.727 178.698 347.156 176.844 352.448 168.462 cv
352.448 168.462 348.923 173.754 336.131 168.899 cv
323.342 164.048 318.043 154.354 326.428 142.001 cv
326.428 142.001 323.334 141.116 321.137 145.085 cv
cp
.27451 .207843 .145098 rgb
f
396.961 230.426 mo
395.81 230.426 394.687 230.285 393.612 230.016 cv
377.495 225.992 376.192 217.064 376.127 214.818 cv
374.201 203.759 375.507 181.768 394.108 175.956 cv
397.492 174.894 400.785 174.357 403.886 174.357 cv
411.424 174.357 417.781 177.509 421.792 183.232 cv
426.074 189.351 427.004 197.478 424.282 204.979 cv
419.004 219.483 407.259 230.426 396.961 230.426 cv
cp
f
380.671 213.437 mo
380.671 213.437 373.833 185.433 395 178.818 cv
416.168 172.204 426.752 189.402 421.46 203.955 cv
416.168 218.508 403.659 229.54 394.339 227.108 cv
384.199 224.462 380.671 213.437 380.671 213.437 cv
cp
1 1 1 rgb
f
387.063 186.756 mo
387.063 186.756 371.187 220.493 397.646 224.462 cv
397.646 224.462 379.786 216.524 387.063 186.756 cv
cp
.27451 .207843 .145098 rgb
f
365.12 227.469 mo
351.938 227.469 346.363 219.438 345.598 212.559 cv
345.326 210.615 342.966 192.586 347.576 183.721 cv
351.958 175.294 359.669 170.839 369.874 170.839 cv
371.183 170.863 li
376.641 171.066 382.081 173.964 385.74 178.625 cv
389.953 183.986 391.428 191.087 389.891 198.605 cv
386.301 216.141 376.582 227.469 365.12 227.469 cv
cp
f
348.582 212.228 mo
348.582 212.228 345.936 193.375 350.236 185.106 cv
354.535 176.837 362.143 173.53 371.073 173.861 cv
380.003 174.191 389.926 183.452 386.949 198.005 cv
383.972 212.559 376.034 224.465 365.12 224.465 cv
354.205 224.465 349.244 218.181 348.582 212.228 cv
cp
1 1 1 rgb
f
359.503 175.966 mo
359.503 175.966 355.086 183.015 357.295 190.074 cv
359.503 197.134 362.143 194.043 357.733 203.304 cv
353.326 212.565 364.796 227.122 378.025 218.302 cv
378.025 218.302 371.852 228.007 360.827 224.917 cv
349.794 221.826 345.392 214.767 346.273 203.304 cv
347.148 191.842 345.392 181.257 359.503 175.966 cv
cp
.27451 .207843 .145098 rgb
f
334.18 219.408 mo
333.223 219.408 332.241 219.325 331.225 219.16 cv
318.367 217.013 312.93 206.925 311.187 202.684 cv
311.238 202.663 li
310.587 201.433 310.491 199.583 310.366 197.289 cv
309.705 185.103 314.825 176.823 324.417 174.581 cv
326.725 174.037 328.995 173.764 331.148 173.764 cv
343.552 173.764 351.304 182.932 353.488 192.018 cv
354.908 197.943 352.647 206.426 348.117 212.176 cv
344.385 216.906 339.569 219.408 334.18 219.408 cv
cp
f
313.853 201.313 mo
313.853 201.313 309.553 181.137 325.099 177.499 cv
340.644 173.861 348.582 184.444 350.566 192.713 cv
352.551 200.982 345.605 218.512 331.714 216.197 cv
317.822 213.881 313.853 200.982 313.853 201.313 cv
cp
1 1 1 rgb
f
318.043 180.806 mo
318.043 180.806 305.698 198.446 323.334 207.266 cv
337.636 214.418 344.065 212.565 349.357 204.183 cv
349.357 204.183 345.833 209.475 333.043 204.62 cv
320.251 199.77 314.956 190.074 323.334 177.723 cv
323.334 177.723 320.248 176.837 318.043 180.806 cv
cp
.27451 .207843 .145098 rgb
f
439.217 227.201 mo
434.881 227.201 421.698 227.201 417.702 213.623 cv
417.495 212.91 li
417.64 212.186 li
417.785 211.459 421.336 194.243 431.662 188.341 cv
440.164 183.483 447.259 181.124 453.367 181.124 cv
458.908 181.124 463.527 183.077 467.102 186.922 cv
476.927 197.506 476.489 204.135 471.648 215.904 cv
467.146 226.839 457.219 226.863 449.243 226.884 cv
447.449 226.891 445.664 226.891 443.948 227.015 cv
442.397 227.128 440.806 227.201 439.217 227.201 cv
cp
f
420.582 212.775 mo
420.582 212.775 423.889 196.238 433.15 190.946 cv
442.411 185.654 456.303 179.701 464.902 188.961 cv
473.501 198.222 473.501 203.515 468.871 214.76 cv
464.241 226.005 452.996 223.359 443.734 224.021 cv
434.474 224.683 423.889 224.021 420.582 212.775 cv
cp
1 1 1 rgb
f
423.559 200.869 mo
423.559 200.869 421.574 218.067 437.781 219.06 cv
453.988 220.052 463.248 220.052 468.21 210.791 cv
473.171 201.53 469.533 193.592 469.533 193.592 cv
469.533 193.592 466.557 204.507 461.265 209.799 cv
455.973 215.091 446.05 215.091 439.435 215.091 cv
432.82 215.091 425.873 208.145 423.559 200.869 cv
cp
.27451 .207843 .145098 rgb
f
391.483 264.741 mo
390.587 263.773 li
389.884 263.008 373.398 244.865 381.512 228.641 cv
386.721 218.219 394.384 212.482 403.094 212.482 cv
407.173 212.482 411.334 213.716 415.483 216.155 cv
421.395 219.628 424.8 227.576 424.592 237.413 cv
424.434 245.072 421.75 255.339 414.711 259.091 cv
404.245 264.672 393.261 264.741 392.792 264.741 cv
391.483 264.741 li
cp
f
395.224 259.752 mo
395.224 259.752 376.917 244.538 384.193 229.984 cv
391.469 215.432 402.715 212.125 413.96 218.739 cv
425.205 225.354 423.221 251.152 413.299 256.445 cv
403.376 261.737 395.224 259.752 395.224 259.752 cv
cp
1 1 1 rgb
f
389.492 225.799 mo
389.492 225.799 381.998 229.33 388.168 243.883 cv
394.339 258.436 397.874 260.638 408.014 259.314 cv
418.153 257.992 416.393 251.821 416.393 251.821 cv
416.393 251.821 411.094 255.79 402.277 253.582 cv
393.46 251.376 385.967 234.178 389.492 225.799 cv
cp
.27451 .207843 .145098 rgb
f
375.483 298.306 mo
374.078 298.306 373.188 298.244 373.188 298.244 cv
372.175 298.178 li
371.404 297.506 li
370.687 296.869 353.764 287.979 355.19 268.462 cv
356.044 256.796 367.052 242.808 378.239 242.808 cv
379.624 242.808 380.981 243.025 382.277 243.453 cv
391.938 246.677 397.74 255.521 399.518 269.744 cv
401.082 282.285 395.962 291.542 390.194 295.149 cv
386.019 297.757 379.89 298.306 375.483 298.306 cv
cp
f
374.494 291.504 mo
374.494 291.504 359.941 286.874 360.379 267.246 cv
360.647 255.266 371.624 245.857 381.547 249.165 cv
391.469 252.472 395.218 259.532 396.541 270.116 cv
397.864 280.7 393.895 289.299 388.603 292.606 cv
383.311 295.915 374.494 291.504 374.494 291.504 cv
cp
1 1 1 rgb
f
368.765 252.259 mo
368.765 252.259 360.819 257.113 363.91 269.458 cv
367 281.806 373.616 289.744 381.995 289.744 cv
390.37 289.744 393.905 285.333 397.43 276.073 cv
397.43 276.073 397.43 283.573 381.995 283.573 cv
366.556 283.573 365.233 256.228 368.765 252.259 cv
cp
.27451 .207843 .145098 rgb
f
349.957 282.354 mo
338.752 282.354 321.247 272.404 322.294 256.373 cv
323.334 240.341 327.903 233.592 338.184 230.925 cv
340.265 230.388 342.408 230.116 344.544 230.116 cv
352.541 230.116 361.881 234.202 364.113 245.675 cv
365.96 255.215 364.671 269.568 359.304 277.076 cv
357.175 280.048 354.463 281.836 351.448 282.25 cv
350.966 282.315 350.463 282.354 349.957 282.354 cv
cp
f
338.935 233.806 mo
347.741 231.387 358.904 234.457 361.192 246.243 cv
363.486 258.026 360.003 273.665 350.718 276.039 cv
326.428 282.24 316.72 239.904 338.935 233.806 cv
cp
1 1 1 rgb
f
335.986 238.388 mo
335.986 238.388 325.505 251.483 331.728 260.648 cv
335.331 264.907 li
335.331 264.907 328.454 254.756 335.986 238.388 cv
cp
.27451 .207843 .145098 rgb
f
449.957 275.122 mo
437.813 275.122 426.566 265.303 424.354 252.765 cv
424.144 251.563 423.889 250.312 423.634 249.034 cv
422.132 241.558 420.431 233.082 424.83 227.06 cv
427.376 223.573 431.662 221.475 437.563 220.817 cv
439.118 220.648 440.655 220.558 442.149 220.558 cv
451.879 220.558 460.272 224.11 465.182 230.295 cv
469.182 235.345 470.515 241.857 468.927 248.627 cv
468.824 249.075 li
468.588 249.478 li
468.562 249.519 466.094 253.736 466.355 257.665 cv
466.7 262.833 465.471 267.163 462.801 270.188 cv
460.183 273.147 456.313 274.798 451.293 275.087 cv
450.845 275.111 450.401 275.122 449.957 275.122 cv
cp
f
466.008 247.945 mo
466.008 247.945 463.032 252.906 463.362 257.868 cv
463.692 262.829 463.255 268.783 451.68 269.444 cv
440.103 270.105 429.408 257.757 427.424 246.512 cv
425.439 235.266 428.307 224.899 437.896 223.801 cv
455.752 221.747 469.646 232.4 466.008 247.945 cv
cp
1 1 1 rgb
f
428.965 245.63 mo
428.965 245.63 435.369 269.888 457.412 265.919 cv
456.529 261.065 li
456.529 261.065 443.293 266.353 428.965 245.63 cv
cp
.27451 .207843 .145098 rgb
f
299.968 295.453 mo
299.968 295.453 318.925 323.232 302.167 337.344 cv
302.167 337.344 300.844 334.705 303.052 331.173 cv
305.26 327.645 304.813 328.083 305.698 321.468 cv
306.583 314.853 306.583 307.36 299.968 295.453 cv
cp
f
307.907 250.912 mo
307.907 250.912 303.497 264.586 306.583 278.253 cv
306.583 278.253 301.292 268.548 307.907 250.912 cv
cp
f
479.559 294.333 mo
478.152 294.333 477.265 294.271 477.265 294.271 cv
476.252 294.202 li
475.479 293.53 li
474.764 292.896 457.843 284.007 459.27 264.486 cv
460.121 252.824 471.132 238.833 482.318 238.833 cv
483.704 238.833 485.058 239.049 486.353 239.48 cv
496.014 242.705 501.815 251.545 503.594 265.768 cv
505.161 278.312 500.037 287.566 494.27 291.173 cv
490.095 293.785 483.969 294.333 479.559 294.333 cv
cp
f
478.573 287.532 mo
478.573 287.532 464.021 282.901 464.457 263.273 cv
464.727 251.294 475.704 241.881 485.626 245.189 cv
495.548 248.497 499.294 255.556 500.616 266.14 cv
501.939 276.724 497.97 285.324 492.679 288.631 cv
487.387 291.938 478.573 287.532 478.573 287.532 cv
cp
1 1 1 rgb
f
472.841 248.287 mo
472.841 248.287 464.896 253.137 467.989 265.485 cv
471.076 277.83 477.692 285.768 486.07 285.768 cv
494.449 285.768 497.984 281.361 501.505 272.101 cv
501.505 272.101 501.505 279.597 486.07 279.597 cv
470.636 279.597 469.313 252.255 472.841 248.287 cv
cp
.27451 .207843 .145098 rgb
f
437.274 297.344 mo
426.07 297.344 408.565 287.397 409.612 271.367 cv
410.653 255.335 415.221 248.586 425.502 245.919 cv
427.583 245.382 429.726 245.106 431.862 245.106 cv
439.858 245.106 449.199 249.196 451.432 260.668 cv
453.277 270.208 451.989 284.559 446.622 292.069 cv
444.492 295.039 441.781 296.827 438.767 297.241 cv
438.283 297.31 437.781 297.344 437.274 297.344 cv
cp
f
426.253 248.796 mo
435.06 246.377 446.222 249.447 448.51 261.237 cv
450.805 273.02 447.32 288.659 438.036 291.029 cv
413.747 297.23 404.038 254.895 426.253 248.796 cv
cp
1 1 1 rgb
f
423.304 253.382 mo
423.304 253.382 412.823 266.478 419.045 275.639 cv
422.649 279.897 li
422.649 279.897 415.772 269.747 423.304 253.382 cv
cp
.27451 .207843 .145098 rgb
f
451.004 315.459 mo
450.112 314.492 li
449.409 313.727 432.923 295.583 441.036 279.359 cv
446.246 268.937 453.912 263.201 462.619 263.201 cv
466.693 263.201 470.863 264.435 475.004 266.874 cv
480.916 270.347 484.324 278.295 484.117 288.131 cv
483.955 295.79 481.274 306.057 474.236 309.808 cv
463.771 315.39 452.782 315.459 452.319 315.459 cv
451.004 315.459 li
cp
f
454.745 310.471 mo
454.745 310.471 436.444 295.256 443.721 280.703 cv
450.997 266.15 462.242 262.843 473.488 269.458 cv
484.733 276.073 482.749 301.871 472.826 307.163 cv
462.903 312.456 454.745 310.471 454.745 310.471 cv
cp
1 1 1 rgb
f
449.016 276.517 mo
449.016 276.517 441.522 280.048 447.693 294.602 cv
453.863 309.155 457.398 311.356 467.538 310.034 cv
477.678 308.709 475.913 302.54 475.913 302.54 cv
475.913 302.54 470.618 306.509 461.802 304.299 cv
452.985 302.095 445.491 284.896 449.016 276.517 cv
cp
.27451 .207843 .145098 rgb
f
458.384 360.917 mo
456.978 360.917 456.09 360.855 456.09 360.855 cv
455.076 360.786 li
454.308 360.114 li
453.588 359.481 436.672 350.591 438.098 331.07 cv
438.949 319.408 449.957 305.416 461.147 305.416 cv
462.532 305.416 463.883 305.633 465.182 306.064 cv
474.839 309.29 480.645 318.13 482.422 332.352 cv
483.989 344.896 478.866 354.15 473.099 357.758 cv
468.923 360.369 462.795 360.917 458.384 360.917 cv
cp
f
457.398 354.116 mo
457.398 354.116 442.845 349.486 443.286 329.857 cv
443.556 317.878 454.308 305.602 464.23 308.911 cv
474.153 312.217 478.123 322.139 479.444 332.723 cv
480.769 343.308 476.799 351.908 471.507 355.214 cv
466.215 358.523 457.398 354.116 457.398 354.116 cv
cp
1 1 1 rgb
f
450.783 317.955 mo
450.783 317.955 442.838 322.808 445.933 335.153 cv
449.02 347.501 455.635 355.439 464.014 355.439 cv
472.393 355.439 475.927 351.029 479.448 341.767 cv
479.448 341.767 479.448 349.268 464.014 349.268 cv
448.579 349.268 447.256 321.923 450.783 317.955 cv
cp
.27451 .207843 .145098 rgb
f
507.673 421.662 mo
503.92 423.826 492.493 430.409 482.257 420.641 cv
481.719 420.131 li
481.481 419.429 li
481.244 418.726 475.725 402.037 481.719 391.77 cv
486.659 383.315 491.624 377.727 496.916 374.673 cv
501.72 371.908 506.694 371.294 511.715 372.837 cv
525.513 377.096 528.441 383.06 530.122 395.677 cv
531.687 407.397 523.101 412.379 516.199 416.379 cv
514.649 417.28 513.099 418.17 511.676 419.139 cv
510.391 420.011 509.048 420.869 507.673 421.662 cv
cp
f
484.324 418.471 mo
484.324 418.471 478.928 402.491 484.307 393.282 cv
489.688 384.073 498.752 371.976 510.825 375.708 cv
522.901 379.432 525.543 384.018 527.152 396.073 cv
528.758 408.125 517.688 411.453 509.998 416.652 cv
502.309 421.851 492.802 426.564 484.324 418.471 cv
cp
1 1 1 rgb
f
480.954 406.667 mo
480.954 406.667 487.827 422.56 502.366 415.325 cv
516.902 408.089 524.923 403.463 524.592 392.961 cv
524.272 382.46 517.15 377.403 517.15 377.403 cv
517.15 377.403 520.023 388.348 518.081 395.574 cv
516.137 402.802 507.541 407.759 501.813 411.06 cv
496.082 414.364 486.597 411.814 480.954 406.667 cv
cp
.27451 .207843 .145098 rgb
f
475.252 407.583 mo
470.58 407.583 466.763 405.261 463.903 400.682 cv
463.27 399.278 453.595 375.98 468.155 366.788 cv
474.253 362.936 479.469 361.065 484.106 361.065 cv
488.81 361.065 495.218 363.112 499.011 372.869 cv
504.579 387.18 502.498 396.694 492.841 401.155 cv
491.666 401.696 490.466 402.302 489.254 402.916 cv
484.706 405.21 480.004 407.583 475.252 407.583 cv
cp
f
466.445 399.091 mo
466.445 399.091 457.186 377.261 469.754 369.324 cv
482.322 361.385 491.583 362.047 496.214 373.955 cv
500.844 385.861 500.183 394.46 491.583 398.429 cv
482.983 402.399 473.062 409.675 466.445 399.091 cv
cp
1 1 1 rgb
f
467.77 373.292 mo
467.77 373.292 466.115 388.507 470.084 395.453 cv
474.054 402.399 485.298 402.399 492.906 394.46 cv
492.906 394.46 485.298 399.421 477.029 393.137 cv
468.761 386.853 467.77 373.292 467.77 373.292 cv
cp
.27451 .207843 .145098 rgb
f
522.051 367.574 mo
521.096 367.574 520.109 367.491 519.094 367.325 cv
506.235 365.179 500.8 355.091 499.06 350.85 cv
499.107 350.829 li
498.46 349.599 498.36 347.75 498.235 345.455 cv
497.574 333.268 502.697 324.989 512.289 322.746 cv
514.598 322.202 516.865 321.93 519.021 321.93 cv
531.425 321.93 539.177 331.097 541.357 340.183 cv
542.78 346.109 540.52 354.591 535.986 360.342 cv
532.258 365.073 527.441 367.574 522.051 367.574 cv
cp
f
501.727 349.479 mo
501.727 349.479 497.426 329.302 512.972 325.664 cv
528.517 322.026 536.455 332.611 538.439 340.879 cv
540.423 349.148 533.478 366.677 519.586 364.362 cv
505.695 362.047 501.727 349.148 501.727 349.479 cv
cp
1 1 1 rgb
f
505.915 328.972 mo
505.915 328.972 496.654 348.817 511.207 355.432 cv
525.761 362.047 531.935 360.731 537.227 352.348 cv
537.227 352.348 533.705 357.64 520.913 352.787 cv
508.121 347.935 502.825 338.24 511.207 325.889 cv
511.207 325.889 508.117 325.003 505.915 328.972 cv
cp
.27451 .207843 .145098 rgb
f
500.672 336.414 mo
488.523 336.414 477.278 326.595 475.065 314.057 cv
474.855 312.855 474.604 311.604 474.35 310.326 cv
472.848 302.849 471.146 294.374 475.542 288.352 cv
478.091 284.865 482.377 282.767 488.275 282.109 cv
489.833 281.94 491.369 281.851 492.861 281.851 cv
502.594 281.851 510.986 285.403 515.893 291.587 cv
519.897 296.638 521.226 303.15 519.643 309.919 cv
519.538 310.368 li
519.301 310.77 li
519.276 310.812 516.81 315.029 517.068 318.957 cv
517.416 324.125 516.183 328.456 513.513 331.481 cv
510.897 334.44 507.024 336.089 502.008 336.379 cv
501.561 336.404 501.113 336.414 500.672 336.414 cv
cp
f
516.72 309.237 mo
516.72 309.237 513.743 314.199 514.073 319.16 cv
514.405 324.121 513.967 330.075 502.391 330.736 cv
490.814 331.398 480.124 319.049 478.14 307.804 cv
476.155 296.559 479.021 286.191 488.606 285.092 cv
506.464 283.039 520.357 293.692 516.72 309.237 cv
cp
1 1 1 rgb
f
479.677 306.922 mo
479.677 306.922 486.08 331.18 508.127 327.21 cv
507.245 322.358 li
507.245 322.358 494.008 327.645 479.677 306.922 cv
cp
.27451 .207843 .145098 rgb
f
493.678 378.109 mo
492.272 378.109 491.384 378.046 491.384 378.046 cv
490.37 377.982 li
489.599 377.31 li
488.882 376.672 471.962 367.783 473.389 348.266 cv
474.239 336.599 485.251 322.613 496.438 322.613 cv
497.822 322.613 499.176 322.829 500.472 323.255 cv
510.133 326.481 515.935 335.325 517.712 349.547 cv
519.28 362.088 514.156 371.346 508.389 374.953 cv
504.214 377.562 498.088 378.109 493.678 378.109 cv
cp
f
492.692 371.307 mo
492.692 371.307 478.14 366.677 478.577 347.049 cv
478.845 335.07 489.599 322.798 499.521 326.105 cv
509.443 329.414 513.412 339.335 514.735 349.92 cv
516.058 360.503 512.089 369.103 506.798 372.411 cv
501.505 375.717 492.692 371.307 492.692 371.307 cv
cp
1 1 1 rgb
f
486.077 335.149 mo
486.077 335.149 478.133 340 481.224 352.348 cv
484.313 364.693 490.929 372.631 499.308 372.631 cv
507.683 372.631 511.218 368.224 514.742 358.964 cv
514.742 358.964 514.742 366.461 499.308 366.461 cv
483.869 366.461 482.545 339.119 486.077 335.149 cv
cp
.27451 .207843 .145098 rgb
f
gsave
140.761 247.842 mo
140.761 247.842 101.956 269.01 103.717 351.037 cv
103.276 392.048 li
103.276 392.048 121.364 351.915 134.146 340.452 cv
146.935 328.99 150.022 325.021 150.022 325.021 cv
150.022 325.021 131.948 277.827 140.761 247.842 cv
cp
clp
142.525 237.695 mo
142.525 237.695 124.002 278.708 154.432 344.859 cv
154.432 344.859 117.057 289.954 142.525 237.695 cv
cp
1 1 1 rgb
f
134.917 239.019 mo
134.917 239.019 112.427 291.938 149.47 351.474 cv
149.47 351.474 105.48 300.207 134.917 239.019 cv
cp
f
126.759 244.972 mo
126.759 244.972 105.04 296.352 142.083 355.887 cv
142.083 355.887 96.8813 304.507 126.759 244.972 cv
cp
f
118.38 253.351 mo
118.38 253.351 96.6641 304.73 133.708 364.265 cv
133.708 364.265 88.5024 312.886 118.38 253.351 cv
cp
f
110.001 257.764 mo
110.001 257.764 88.2886 309.144 125.333 368.679 cv
125.333 368.679 80.127 317.299 110.001 257.764 cv
cp
f
grestore
206.69 182.129 mo
206.69 182.129 231.827 178.822 234.473 188.083 cv
236.788 196.193 238.091 198.718 249.026 199.225 cv
250.587 199.297 252.34 199.328 254.318 199.328 cv
270.194 199.328 278.132 207.928 278.794 213.219 cv
279.455 218.512 280.117 208.589 266.225 205.943 cv
252.333 203.297 268.871 199.99 252.995 201.974 cv
237.119 203.959 232.489 199.328 231.166 191.391 cv
229.843 183.452 206.69 182.129 206.69 182.129 cv
cp
f
311.207 119.949 mo
311.207 119.949 299.961 128.548 298.639 140.455 cv
297.315 152.362 311.869 156.992 297.978 162.946 cv
284.086 168.899 286.732 192.713 286.732 192.713 cv
286.732 192.713 282.763 173.53 286.732 169.561 cv
290.701 165.592 294.008 159.638 297.315 157.654 cv
300.623 155.669 299.3 151.7 297.978 149.054 cv
296.654 146.409 292.023 131.855 311.207 119.949 cv
cp
f
510.979 241.665 mo
510.979 241.665 515.61 260.848 512.964 267.463 cv
510.318 274.078 527.518 282.677 527.518 296.569 cv
527.518 310.46 530.384 310.023 536.338 313.992 cv
542.292 317.961 553.095 327.221 550.009 354.126 cv
550.009 354.126 556.623 329.424 546.039 318.399 cv
535.455 307.376 531.045 309.579 529.723 299.439 cv
528.399 289.299 528.848 287.976 523.107 281.799 cv
517.375 275.625 520.896 274.747 517.375 270.777 cv
513.847 266.808 517.815 251.366 510.979 241.665 cv
cp
f
380.003 500.311 mo
380.003 500.311 436.892 498.988 456.076 465.913 cv
456.076 465.913 438.876 489.728 380.003 500.311 cv
cp
f
393.233 489.065 mo
393.233 489.065 425.398 486.151 443.383 463.794 cv
443.383 463.794 435.569 488.404 393.233 489.065 cv
cp
f
558.849 528.446 mo
470.907 503.151 411.479 459.347 382.228 398.261 cv
351.437 333.965 366.91 214.544 401.37 168.908 cv
445.257 110.789 504.994 91.9082 547.375 86.313 cv
557.35 84.9937 568.047 84.3286 579.169 84.3286 cv
613.563 84.3286 640.975 90.561 642.118 90.8301 cv
645.143 91.667 710.528 110.375 767.362 160.99 cv
827.872 214.882 837.195 262.792 833.747 337.735 cv
830.039 418.41 787.18 472.845 731.042 510.534 cv
703.438 529.067 657.16 537.673 621.805 537.673 cv
621.805 537.673 591.204 537.755 558.849 528.446 cv
cp
f
640.771 96.6729 mo
640.771 96.6729 594.904 86.0854 548.161 92.2593 cv
501.419 98.437 446.021 119.732 406.163 172.525 cv
373.525 215.743 357.649 333.045 387.641 395.67 cv
422.728 468.95 496.119 504.157 560.506 522.679 cv
624.895 541.201 691.924 528.412 727.204 505.92 cv
778.442 473.259 824.224 414.193 827.752 337.458 cv
831.283 260.725 819.82 215.743 763.373 165.469 cv
706.921 115.195 640.771 96.6729 640.771 96.6729 cv
cp
1 1 1 rgb
f
698.752 157.373 mo
692.22 157.373 687.552 154.864 684.875 149.914 cv
682.197 144.959 671.94 142.323 665.56 142.323 cv
663.872 142.323 662.797 142.513 662.391 142.675 cv
661.419 143.061 660.605 143.753 659.951 144.312 cv
659.11 145.021 658.249 145.758 656.92 145.758 cv
655.541 145.758 li
654.497 144.642 li
653.273 143.216 653.501 141.758 654.343 136.342 cv
655.162 131.088 644.034 121.655 638.683 117.124 cv
634.235 113.352 632.668 111.967 632.171 110.337 cv
631.121 106.916 630.06 91.729 633.643 74.4507 cv
636.926 58.6265 635.027 51.2432 635.014 51.1704 cv
633.567 45.7788 li
638.852 47.5225 li
657.595 53.7686 664.01 68.6421 666.166 76.9521 cv
666.808 79.4189 667.951 82.375 669.03 84.9106 cv
674.401 75.3359 682.697 69.0244 692.496 67.2637 cv
698.098 66.2544 704.147 64.6387 708.555 63.4604 cv
712.968 62.2813 717.392 61.7998 717.392 61.7998 cv
717.392 61.7998 719.568 67.3911 719.913 69.3345 cv
721.288 76.9834 723.594 89.7788 722.917 96.5283 cv
722.546 100.239 721.602 103.781 720.588 106.716 cv
727.552 104.287 735.222 103.877 742.17 103.877 cv
745.453 103.877 748.771 103.98 752.059 104.081 cv
754.394 104.153 756.72 104.226 758.997 104.26 cv
775.486 104.494 783.49 112.539 783.82 112.88 cv
785.577 114.689 li
784.106 116.731 li
783.966 116.917 780.699 121.373 773.898 124.528 cv
770.673 126.027 768.296 126.561 765.544 127.174 cv
762.591 127.836 758.914 128.659 752.502 131.019 cv
740.771 135.34 728.437 148.628 728.313 148.756 cv
727.862 149.249 li
727.245 149.5 li
725.795 150.1 712.898 155.381 707.662 156.297 cv
706.697 156.466 li
704.603 156.849 701.732 157.373 698.752 157.373 cv
698.752 157.373 li
cp
.27451 .207843 .145098 rgb
f
726.104 146.727 mo
726.104 146.727 738.896 132.835 751.465 128.205 cv
764.034 123.574 766.459 124.68 772.634 121.81 cv
778.801 118.943 781.671 114.975 781.671 114.975 cv
781.671 114.975 774.391 107.481 758.956 107.257 cv
743.527 107.037 726.321 105.052 714.636 112.99 cv
714.636 112.99 719.045 105.045 719.928 96.2285 cv
720.813 87.4121 715.958 65.8066 716.183 64.9209 cv
716.406 64.0391 704.051 68.2285 693.029 70.2129 cv
682.008 72.1978 673.401 80.5801 668.991 92.0425 cv
668.991 92.0425 664.81 83.6602 663.263 77.7065 cv
661.715 71.7534 656.423 56.5454 637.9 50.3682 cv
637.9 50.3682 640.106 58.0786 636.578 75.0605 cv
633.058 92.0425 634.159 106.592 635.042 109.458 cv
635.916 112.329 658.855 126.881 657.309 136.804 cv
655.762 146.727 656.871 141.651 661.278 139.887 cv
665.684 138.127 683.104 140.329 687.514 148.487 cv
691.931 156.649 702.073 154.224 707.146 153.342 cv
712.213 152.456 726.104 146.727 726.104 146.727 cv
cp
1 1 1 rgb
f
657.533 141.218 mo
657.533 141.218 657.966 119.608 646.501 112.993 cv
635.042 106.379 635.476 94.4683 642.532 97.9961 cv
649.595 101.527 647.823 92.7109 650.032 98.4404 cv
652.24 104.173 653.115 109.024 653.115 109.024 cv
653.115 109.024 653.115 89.6138 652.678 87.4121 cv
652.24 85.2104 657.085 90.0576 656.647 100.642 cv
656.209 111.226 662.825 96.6802 662.825 101.086 cv
662.825 105.496 665.911 97.1143 666.794 100.642 cv
667.669 104.173 672.521 95.7944 672.96 99.7637 cv
673.408 103.732 675.166 101.965 676.93 98.8818 cv
678.7 95.7944 685.753 88.2974 685.753 88.2974 cv
680.461 101.527 li
680.461 101.527 684.434 96.6802 683.992 101.086 cv
683.545 105.496 687.962 99.3188 691.045 104.173 cv
694.129 109.024 700.31 108.587 702.515 109.91 cv
704.713 111.233 710.445 110.344 708.682 114.757 cv
706.921 119.171 711.327 117.848 711.327 119.608 cv
711.327 121.373 713.974 120.05 719.266 118.286 cv
724.558 116.525 733.381 116.525 733.381 116.525 cv
715.745 121.817 li
715.745 121.817 727.651 119.605 723.683 122.696 cv
719.714 125.786 730.291 121.817 725.881 125.786 cv
721.475 129.755 732.503 127.102 728.975 130.633 cv
725.443 134.161 735.59 132.401 730.298 135.484 cv
725.006 138.571 731.173 137.249 724.558 141.218 cv
717.942 145.187 723.234 145.187 717.505 147.392 cv
711.775 149.6 716.179 153.125 710.005 154.007 cv
703.837 154.892 692.806 152.229 687.514 148.487 cv
682.222 144.746 669.881 130.633 657.533 141.218 cv
cp
.27451 .207843 .145098 rgb
f
600.42 136.143 mo
600.42 136.143 610.566 140.994 620.265 131.512 cv
629.964 122.027 630.849 108.36 630.849 108.36 cv
630.849 108.36 630.391 117.51 623.114 119.05 cv
615.838 120.591 606.373 118.943 606.373 118.943 cv
606.373 118.943 611.883 123.574 618.056 123.574 cv
618.056 123.574 613.212 124.235 605.712 121.589 cv
598.211 118.943 591.597 116.297 591.597 116.297 cv
591.597 116.297 601.305 121.807 607.921 123.35 cv
614.535 124.897 615.634 124.673 615.634 124.673 cv
615.634 124.673 611.221 125.776 600.857 122.027 cv
600.857 122.027 609.02 126.003 613.65 126.44 cv
618.28 126.881 616.733 127.98 613.426 127.98 cv
610.118 127.98 615.638 129.527 611.228 128.866 cv
606.811 128.205 599.758 125.559 599.758 125.559 cv
599.758 125.559 603.951 129.972 613.873 130.41 cv
613.873 130.41 617.618 131.512 610.342 131.512 cv
603.065 131.512 610.779 132.618 606.149 133.056 cv
601.519 133.497 593.581 131.95 593.581 131.95 cv
593.581 131.95 600.863 135.257 608.581 134.596 cv
608.581 134.596 609.02 137.466 600.42 136.143 cv
cp
f
722.573 156.876 mo
722.573 156.876 710.891 170.106 717.505 185.982 cv
717.505 185.982 721.25 190.833 727.428 193.92 cv
727.428 193.92 724.781 191.495 724.12 189.29 cv
723.459 187.082 723.234 186.427 721.25 185.321 cv
719.266 184.215 719.272 181.345 721.036 183.554 cv
722.797 185.758 723.896 185.758 726.104 187.082 cv
728.313 188.404 731.834 189.951 731.834 189.951 cv
731.834 189.951 726.99 187.078 724.781 183.554 cv
722.573 180.029 727.204 185.314 724.12 179.584 cv
721.036 173.852 722.797 176.938 721.475 172.969 cv
720.151 169 718.384 168.566 722.573 156.876 cv
cp
f
716.183 151.133 mo
715.111 151.843 li
708.244 156.425 li
708.244 156.425 709.344 156.649 718.828 157.311 cv
728.313 157.972 736.244 159.295 745.726 164.587 cv
755.21 169.879 774.929 178.695 778.896 170.979 cv
773.732 168.777 li
773.732 168.777 759.617 160.177 744.402 154.885 cv
729.188 149.593 716.183 151.133 716.183 151.133 cv
cp
f
773.646 171.774 mo
773.298 171.764 765.026 171.481 757.794 166.896 cv
751.583 162.958 746.959 161.262 734.232 158.244 cv
731.29 157.548 728.031 157.19 724.554 157.19 cv
716.097 157.19 709.191 159.274 709.123 159.295 cv
699.2 158.634 li
705.698 154.844 li
710.828 146.582 722.673 138.251 737.574 138.251 cv
738.896 138.251 740.244 138.313 741.611 138.447 cv
753.846 139.657 763.173 146.275 769.34 158.13 cv
771.903 163.057 775.7 166.509 775.738 166.544 cv
781.795 172.008 li
773.646 171.774 li
cp
f
708.244 156.425 mo
708.244 156.425 721.919 152.239 734.928 155.326 cv
747.934 158.41 752.789 160.173 759.403 164.363 cv
766.019 168.556 773.732 168.777 773.732 168.777 cv
773.732 168.777 769.547 165.032 766.68 159.516 cv
763.811 154.003 756.972 142.978 741.319 141.435 cv
725.667 139.887 713.312 148.267 708.244 156.425 cv
cp
1 1 1 rgb
f
656.037 144.081 mo
656.037 144.081 661.36 142.21 665.463 145.073 cv
669.567 147.936 672.63 152.684 672.402 158.854 cv
672.172 165.024 679.015 174.73 679.015 174.73 cv
679.015 174.73 686.77 172.745 694.977 164.587 cv
703.189 156.425 710.26 156.649 710.26 156.649 cv
710.26 156.649 709.805 150.916 701.364 154.885 cv
692.927 158.854 688.368 163.04 684.72 164.587 cv
681.063 166.131 680.844 162.162 676.74 152.239 cv
672.63 142.317 664.709 128.866 656.037 144.081 cv
cp
.27451 .207843 .145098 rgb
f
663.965 138.564 mo
663.965 138.564 668.306 135.04 675.372 136.804 cv
682.435 138.564 684.265 141.872 692.927 143.856 cv
701.588 145.841 712.313 152.463 710.941 156.208 cv
710.941 156.208 709.464 153.507 702.5 156.649 cv
695.548 159.791 681.525 168.777 681.525 168.777 cv
681.525 168.777 674.449 141.21 663.965 138.564 cv
cp
1 1 1 rgb
f
711.438 150.034 mo
711.438 150.034 727.646 142.757 738.56 147.057 cv
749.475 151.357 751.459 154.333 751.459 154.333 cv
751.459 154.333 735.914 141.435 710.445 151.688 cv
711.438 150.034 li
cp
.27451 .207843 .145098 rgb
f
721.029 125.559 mo
721.029 125.559 727.646 122.913 734.26 120.597 cv
740.874 118.282 746.498 116.959 749.805 116.959 cv
753.112 116.959 764.688 115.305 764.688 115.305 cv
764.688 115.305 746.166 112.329 721.36 121.92 cv
721.36 121.92 715.076 125.228 721.029 125.559 cv
cp
f
696.885 111.006 mo
696.885 111.006 695.893 109.021 698.87 101.414 cv
701.847 93.8062 702.508 86.1992 702.508 86.1992 cv
705.814 77.269 li
692.916 108.029 li
692.916 108.029 692.586 112.329 696.885 111.006 cv
cp
f
710.445 96.2871 mo
710.445 96.2871 709.949 93.6411 713.423 92.814 cv
716.896 91.9873 718.384 96.1221 715.242 97.2793 cv
712.1 98.437 710.445 97.4448 710.445 96.2871 cv
cp
1 1 1 rgb
f
683.655 94.7988 mo
683.655 94.7988 683.655 93.3101 686.632 94.6333 cv
689.608 95.9565 690.27 98.1064 687.459 97.9409 cv
684.647 97.7754 682.993 96.6182 683.655 94.7988 cv
cp
f
688.947 105.217 mo
688.947 105.217 687.128 102.075 690.767 102.241 cv
694.404 102.406 695.396 105.879 694.073 107.202 cv
692.751 108.525 690.767 108.194 688.947 105.217 cv
cp
f
688.616 112.163 mo
688.616 112.163 686.962 109.187 690.767 108.36 cv
694.57 107.533 696.554 110.51 696.058 111.998 cv
695.563 113.486 691.759 115.305 688.616 112.163 cv
cp
f
705.484 133.331 mo
705.484 133.331 702.839 131.512 705.98 130.52 cv
709.123 129.527 711.438 132.669 710.611 134.489 cv
709.784 136.308 705.484 133.331 705.484 133.331 cv
cp
f
703.169 114.809 mo
703.169 114.809 707.469 120.432 704.161 121.259 cv
700.854 122.085 697.381 117.951 699.035 115.14 cv
700.688 112.329 703.169 114.809 703.169 114.809 cv
cp
f
674.725 117.124 mo
674.725 117.124 675.056 122.085 671.087 122.085 cv
667.117 122.085 668.275 117.951 670.921 116.628 cv
673.566 115.305 674.394 115.305 674.725 117.124 cv
cp
f
668.605 99.2642 mo
668.605 99.2642 669.102 102.737 665.463 102.737 cv
661.825 102.737 660.172 100.917 662.817 99.2642 cv
665.463 97.6104 667.117 96.9482 668.605 99.2642 cv
cp
f
682.993 109.021 mo
682.993 109.021 683.159 112.659 678.858 111.502 cv
674.56 110.344 675.552 107.202 678.858 106.541 cv
682.167 105.879 682.993 107.202 682.993 109.021 cv
cp
f
692.751 118.613 mo
692.751 118.613 692.419 122.582 687.954 121.093 cv
683.489 119.605 686.632 117.455 689.443 116.463 cv
692.254 115.471 693.081 117.29 692.751 118.613 cv
cp
f
693.578 125.889 mo
693.578 125.889 693.743 128.205 689.112 128.205 cv
684.482 128.205 682.993 124.566 687.294 123.574 cv
691.593 122.582 693.412 124.897 693.578 125.889 cv
cp
f
685.97 139.781 mo
685.97 139.781 688.399 145.621 687.514 148.487 cv
686.632 151.357 684.316 157.641 684.316 157.641 cv
684.316 157.641 688.947 152.68 690.27 146.727 cv
691.593 140.773 691.593 140.773 691.593 140.773 cv
685.97 139.781 li
cp
.27451 .207843 .145098 rgb
f
791.148 205.6 mo
791.148 205.6 814.963 238.013 818.27 292.256 cv
821.577 346.5 810.993 423.233 750.797 475.492 cv
690.601 527.75 604.606 535.028 513.98 499.968 cv
513.98 499.968 594.684 522.458 656.202 511.213 cv
717.723 499.968 778.656 451.884 799.087 377.589 cv
828.192 271.75 791.148 205.6 791.148 205.6 cv
cp
f
608.581 134.596 mo
608.581 134.596 608.229 158.74 636.013 166.348 cv
636.013 166.348 615.879 159.402 608.581 134.596 cv
cp
f
612.551 131.288 mo
612.551 131.288 612.199 155.432 639.982 163.04 cv
639.982 163.04 619.848 156.094 612.551 131.288 cv
cp
f
616.52 126.658 mo
616.52 126.658 616.168 150.802 643.951 158.41 cv
643.951 158.41 623.816 151.464 616.52 126.658 cv
cp
f
620.819 122.357 mo
620.819 122.357 620.468 146.502 648.251 154.11 cv
648.251 154.11 628.117 147.164 620.819 122.357 cv
cp
f
625.119 118.058 mo
625.119 118.058 624.768 142.203 652.551 149.81 cv
652.551 149.81 632.416 142.864 625.119 118.058 cv
cp
f
630.411 114.75 mo
630.411 114.75 630.06 138.895 657.843 146.502 cv
657.843 146.502 637.708 139.557 630.411 114.75 cv
cp
f
649.453 150.685 mo
649.505 150.554 654.535 137.666 650.332 129.159 cv
648.692 125.848 645.877 123.667 641.719 122.492 cv
634.012 120.311 627.518 119.026 622.294 117.985 cv
613.309 116.205 607.368 115.026 603.724 111.047 cv
598.832 105.713 597.881 103.02 597.701 102.106 cv
596.908 98.1372 li
600.94 98.5337 li
601.643 98.5337 605.144 98.3647 610.518 95.0093 cv
615.056 92.1733 620.006 90.73 625.227 90.73 cv
628.075 90.73 631.055 91.1641 634.084 92.0181 cv
642.098 94.272 646.184 100.436 649.991 107.091 cv
650.531 108.042 651.255 109.19 652.068 110.489 cv
656.644 117.8 664.299 130.038 661.763 140.177 cv
658.904 151.605 654.343 154.141 653.46 154.541 cv
646.742 157.521 li
649.453 150.685 li
cp
f
652.24 151.794 mo
652.24 151.794 662.817 125.334 642.532 119.605 cv
622.249 113.872 610.786 114.313 605.936 109.021 cv
601.081 103.729 600.644 101.521 600.644 101.521 cv
600.644 101.521 605.047 101.962 612.103 97.5513 cv
619.165 93.145 626.425 92.98 633.271 94.9053 cv
640.334 96.8901 643.854 102.41 647.386 108.58 cv
650.917 114.75 661.501 128.866 658.855 139.45 cv
656.209 150.034 652.24 151.794 652.24 151.794 cv
cp
1 1 1 rgb
f
654.384 143.584 mo
654.384 143.584 657.085 124.239 639.225 120.27 cv
621.363 116.301 604.781 115.191 600.644 101.521 cv
600.644 101.521 606.756 107.533 614.363 108.69 cv
621.97 109.848 626.436 113.486 631.893 113.652 cv
637.35 113.817 662.817 118.778 654.384 143.584 cv
cp
.27451 .207843 .145098 rgb
f
652.675 115.419 mo
652.675 115.419 647.162 107.702 640.988 106.379 cv
634.814 105.056 626.656 104.173 626.656 104.173 cv
626.656 104.173 636.364 103.288 641.209 104.835 cv
646.06 106.379 647.383 106.162 648.706 107.702 cv
650.029 109.242 652.675 115.419 652.675 115.419 cv
cp
f
gsave
539.103 198.1 mo
539.103 198.1 551.671 168.994 579.455 163.04 cv
607.237 157.087 621.79 172.301 624.437 185.531 cv
627.083 198.761 623.954 234.592 596.653 249.697 cv
565.563 266.896 518.597 233.82 539.103 198.1 cv
cp
clp
602.218 144.969 mo
602.218 144.969 604.182 173.538 644.161 182.224 cv
644.161 182.224 599.548 181.128 602.218 144.969 cv
cp
f
591.934 147.556 mo
591.934 147.556 589.095 186.447 641.554 193.479 cv
641.554 193.479 602.711 187.268 591.934 147.556 cv
cp
f
579.293 151.936 mo
579.293 151.936 582.538 201.8 643.207 205.955 cv
643.207 205.955 593.229 197.786 579.293 151.936 cv
cp
f
569.615 157.779 mo
569.615 157.779 569.974 210.2 633.243 213.873 cv
633.243 213.873 585.704 207.939 569.615 157.779 cv
cp
f
561.202 166.751 mo
561.202 166.751 561.557 219.174 624.822 222.844 cv
624.822 222.844 577.288 216.911 561.202 166.751 cv
cp
f
551.354 175.319 mo
551.354 175.319 551.717 227.74 614.983 231.409 cv
614.983 231.409 567.444 225.476 551.354 175.319 cv
cp
f
540.62 182.706 mo
540.62 182.706 540.984 235.123 604.247 238.799 cv
604.247 238.799 556.709 232.859 540.62 182.706 cv
cp
f
532.202 191.677 mo
532.202 191.677 532.563 244.095 595.83 247.771 cv
595.83 247.771 548.288 241.838 532.202 191.677 cv
cp
f
524.31 199.877 mo
524.31 199.877 524.675 252.301 587.938 255.97 cv
587.938 255.97 540.405 250.038 524.31 199.877 cv
cp
f
515.24 208.973 mo
515.24 208.973 515.603 261.396 578.869 265.066 cv
578.869 265.066 531.331 259.133 515.24 208.973 cv
cp
f
grestore
572.854 93.145 mo
572.854 93.145 488.182 95.791 432.615 154.665 cv
377.05 213.538 367.127 319.378 392.264 388.173 cv
417.401 456.97 472.306 482.107 472.306 482.107 cv
472.306 482.107 390.28 435.14 389.618 315.409 cv
388.957 195.677 441.216 117.62 572.854 93.145 cv
cp
f
gsave
460.161 475.937 mo
460.161 475.937 387.841 419.486 385.194 326.875 cv
382.548 234.265 416.068 123.14 557.184 94.9126 cv
557.184 94.9126 566.001 115.202 573.939 121.373 cv
581.877 127.543 572.088 141.521 547.479 155.771 cv
497.205 184.876 447.758 220.608 428.409 306.592 cv
404.595 412.432 460.161 475.937 460.161 475.937 cv
cp
clp
545.483 97.8789 mo
545.483 97.8789 544.54 123.739 573.731 141.758 cv
573.731 141.758 549.061 120.907 545.483 97.8789 cv
cp
f
538.111 98.9849 mo
538.111 98.9849 537.78 136.69 575.155 152.236 cv
575.155 152.236 545.057 135.367 538.111 98.9849 cv
cp
f
529.843 101.631 mo
529.843 101.631 530.173 144.628 571.517 159.843 cv
571.517 159.843 537.45 140.66 529.843 101.631 cv
cp
f
520.912 105.269 mo
520.912 105.269 520.581 149.92 564.902 167.45 cv
564.902 167.45 528.85 145.621 520.912 105.269 cv
cp
f
513.306 107.144 mo
513.306 107.144 510.646 151.719 553.991 171.533 cv
553.991 171.533 519.12 147.853 513.306 107.144 cv
cp
f
504.043 111.443 mo
504.043 111.443 501.384 156.019 544.729 175.833 cv
544.729 175.833 509.86 152.153 504.043 111.443 cv
cp
f
495.473 115.846 mo
495.473 115.846 492.316 160.391 535.431 180.69 cv
535.431 180.69 500.84 156.618 495.473 115.846 cv
cp
f
485.88 120.477 mo
485.88 120.477 482.725 165.021 525.839 185.321 cv
525.839 185.321 491.248 161.249 485.88 120.477 cv
cp
f
477.28 125.769 mo
477.28 125.769 474.125 170.313 517.239 190.613 cv
517.239 190.613 482.649 166.541 477.28 125.769 cv
cp
f
468.351 131.392 mo
468.351 131.392 465.194 175.936 508.31 196.236 cv
508.31 196.236 473.718 172.163 468.351 131.392 cv
cp
f
459.42 137.014 mo
459.42 137.014 456.265 181.559 499.379 201.858 cv
499.379 201.858 464.788 177.786 459.42 137.014 cv
cp
f
451.482 143.629 mo
451.482 143.629 448.326 188.174 491.44 208.473 cv
491.44 208.473 456.85 184.401 451.482 143.629 cv
cp
f
442.552 149.252 mo
442.552 149.252 439.396 193.796 482.51 214.096 cv
482.51 214.096 447.92 190.024 442.552 149.252 cv
cp
f
434.982 158.943 mo
434.982 158.943 433.891 203.584 477.908 221.858 cv
477.908 221.858 442.235 199.419 434.982 158.943 cv
cp
f
426.321 164.973 mo
426.321 164.973 425.235 209.614 469.246 227.895 cv
469.246 227.895 433.573 205.449 426.321 164.973 cv
cp
f
419.186 178.861 mo
419.186 178.861 421.484 223.46 466.759 238.337 cv
466.759 238.337 429.487 218.675 419.186 178.861 cv
cp
f
411.003 185.538 mo
411.003 185.538 413.315 230.127 458.586 245.014 cv
458.586 245.014 421.308 225.342 411.003 185.538 cv
cp
f
405.901 203.599 mo
405.901 203.599 412.867 247.712 459.455 257.758 cv
459.455 257.758 420.326 242.117 405.901 203.599 cv
cp
f
398.466 211.099 mo
398.466 211.099 405.439 255.202 452.02 265.259 cv
452.02 265.259 412.888 249.6 398.466 211.099 cv
cp
f
395.954 227.843 mo
395.954 227.843 406.848 271.154 454.143 276.983 cv
454.143 276.983 413.77 264.911 395.954 227.843 cv
cp
f
389.219 235.978 mo
389.219 235.978 400.113 279.278 447.41 285.118 cv
447.41 285.118 407.038 273.032 389.219 235.978 cv
cp
f
388.943 255.599 mo
388.943 255.599 404.616 297.424 452.261 297.92 cv
452.261 297.92 410.793 290.441 388.943 255.599 cv
cp
f
383.158 264.436 mo
383.158 264.436 398.831 306.245 446.486 306.758 cv
446.486 306.758 405.012 299.264 383.158 264.436 cv
cp
f
384.729 283.96 mo
384.729 283.96 405.349 323.578 452.708 318.303 cv
452.708 318.303 410.642 315.898 384.729 283.96 cv
cp
f
380.058 293.435 mo
380.058 293.435 400.678 333.042 448.044 327.774 cv
448.044 327.774 405.97 325.356 380.058 293.435 cv
cp
f
385.391 313.973 mo
385.391 313.973 410.662 350.799 457.029 339.826 cv
457.029 339.826 414.982 342.534 385.391 313.973 cv
cp
f
381.9 323.94 mo
381.9 323.94 407.168 360.756 453.546 349.797 cv
453.546 349.797 411.489 352.488 381.9 323.94 cv
cp
f
385.759 340.732 mo
385.759 340.732 414.046 375.289 459.324 360.435 cv
459.324 360.435 417.656 366.69 385.759 340.732 cv
cp
f
383.121 350.958 mo
383.121 350.958 411.414 385.507 456.691 370.665 cv
456.691 370.665 415.017 376.901 383.121 350.958 cv
cp
f
389.825 368.477 mo
389.825 368.477 422.425 399 465.346 378.303 cv
465.346 378.303 424.871 389.997 389.825 368.477 cv
cp
f
388.557 378.964 mo
388.557 378.964 421.164 409.476 464.088 388.787 cv
464.088 388.787 423.603 400.467 388.557 378.964 cv
cp
f
387.624 389.641 mo
387.624 389.641 420.223 420.164 463.141 399.464 cv
463.141 399.464 422.666 411.161 387.624 389.641 cv
cp
f
386.359 400.125 mo
386.359 400.125 418.962 430.637 461.888 409.952 cv
461.888 409.952 421.401 421.631 386.359 400.125 cv
cp
f
387.624 409.924 mo
387.624 409.924 420.223 440.446 463.141 419.75 cv
463.141 419.75 422.666 431.444 387.624 409.924 cv
cp
f
386.359 420.412 mo
386.359 420.412 418.962 450.923 461.888 430.235 cv
461.888 430.235 421.401 441.914 386.359 420.412 cv
cp
f
391.823 432.556 mo
391.823 432.556 426.606 460.567 467.867 436.732 cv
467.867 436.732 428.371 451.409 391.823 432.556 cv
cp
f
391.341 443.11 mo
391.341 443.11 426.125 471.11 467.393 447.286 cv
467.393 447.286 427.889 461.942 391.341 443.11 cv
cp
f
395.706 457.325 mo
395.706 457.325 432.977 481.924 471.803 454.296 cv
471.803 454.296 433.87 472.643 395.706 457.325 cv
cp
f
396.219 467.878 mo
396.219 467.878 433.493 492.467 472.326 464.849 cv
472.326 464.849 434.383 483.172 396.219 467.878 cv
cp
f
grestore
gsave
551.011 510.334 mo
551.011 510.334 658.611 544.732 744.169 475.051 cv
829.722 405.373 822.663 255.44 793.557 208.69 cv
793.557 208.69 743.286 216.622 734.466 214.861 cv
725.646 213.097 745.044 258.079 748.575 318.054 cv
752.106 378.028 713.299 509.456 551.011 510.334 cv
cp
clp
728.254 217.438 mo
728.254 217.438 767.872 238.048 803.627 206.551 cv
803.627 206.551 767.8 228.725 728.254 217.438 cv
cp
f
729.856 227.884 mo
729.856 227.884 769.478 248.484 805.24 216.994 cv
805.24 216.994 769.402 239.144 729.856 227.884 cv
cp
f
733.547 238.606 mo
733.547 238.606 773.164 259.216 808.919 227.719 cv
808.919 227.719 773.092 249.893 733.547 238.606 cv
cp
f
735.148 249.052 mo
735.148 249.052 774.77 269.652 810.532 238.162 cv
810.532 238.162 774.693 260.312 735.148 249.052 cv
cp
f
736.192 261.097 mo
736.192 261.097 775.81 281.707 811.565 250.21 cv
811.565 250.21 775.738 272.384 736.192 261.097 cv
cp
f
737.795 271.543 mo
737.795 271.543 777.416 292.143 813.178 260.653 cv
813.178 260.653 777.34 282.802 737.795 271.543 cv
cp
f
740.823 282.927 mo
740.823 282.927 780.441 303.537 816.195 272.04 cv
816.195 272.04 780.368 294.213 740.823 282.927 cv
cp
f
742.425 293.373 mo
742.425 293.373 782.046 313.973 817.809 282.482 cv
817.809 282.482 781.971 304.631 742.425 293.373 cv
cp
f
742.807 305.417 mo
742.807 305.417 782.426 326.028 818.181 294.531 cv
818.181 294.531 782.353 316.705 742.807 305.417 cv
cp
f
744.409 315.864 mo
744.409 315.864 784.03 336.463 819.793 304.973 cv
819.793 304.973 783.955 327.123 744.409 315.864 cv
cp
f
744.792 326.585 mo
744.792 326.585 784.409 347.196 820.165 315.699 cv
820.165 315.699 784.337 337.872 744.792 326.585 cv
cp
f
746.394 337.032 mo
746.394 337.032 786.015 357.631 821.777 326.141 cv
821.777 326.141 785.939 348.291 746.394 337.032 cv
cp
f
744.83 346.541 mo
744.83 346.541 783.39 369.055 820.641 339.339 cv
820.641 339.339 783.775 359.739 744.83 346.541 cv
cp
f
745.918 357.046 mo
745.918 357.046 784.485 379.557 821.75 349.851 cv
821.75 349.851 784.871 370.224 745.918 357.046 cv
cp
f
743.7 366.448 mo
743.7 366.448 780.661 391.505 819.831 364.364 cv
819.831 364.364 781.674 382.234 743.7 366.448 cv
cp
f
744.086 377.004 mo
744.086 377.004 781.05 402.058 820.228 374.926 cv
820.228 374.926 782.063 392.774 744.086 377.004 cv
cp
f
739.441 385.697 mo
739.441 385.697 774.625 413.202 815.542 388.773 cv
815.542 388.773 776.266 404.018 739.441 385.697 cv
cp
f
739.11 396.257 mo
739.11 396.257 774.294 423.753 815.225 399.337 cv
815.225 399.337 775.941 414.555 739.11 396.257 cv
cp
f
734.156 403.857 mo
734.156 403.857 767.024 434.085 809.764 413.011 cv
809.764 413.011 769.395 425.063 734.156 403.857 cv
cp
f
732.985 414.354 mo
732.985 414.354 765.853 444.58 808.606 423.512 cv
808.606 423.512 768.23 435.543 732.985 414.354 cv
cp
f
724.537 419.522 mo
724.537 419.522 753.119 453.838 798.271 438.607 cv
798.271 438.607 756.661 445.208 724.537 419.522 cv
cp
f
721.987 429.769 mo
721.987 429.769 750.563 464.084 795.731 448.86 cv
795.731 448.86 754.115 455.441 721.987 429.769 cv
cp
f
711.307 432.804 mo
711.307 432.804 734.335 471.069 781.281 462.875 cv
781.281 462.875 739.151 463.072 711.307 432.804 cv
cp
f
707.229 442.544 mo
707.229 442.544 730.256 480.805 777.209 472.623 cv
777.209 472.623 735.08 472.798 707.229 442.544 cv
cp
f
697.863 444.157 mo
697.863 444.157 714.235 485.708 761.888 485.408 cv
761.888 485.408 720.313 478.624 697.863 444.157 cv
cp
f
692.224 453.087 mo
692.224 453.087 708.596 494.633 756.262 494.344 cv
756.262 494.344 714.677 487.537 692.224 453.087 cv
cp
f
681.573 453.765 mo
681.573 453.765 692.331 497.108 739.614 503.082 cv
739.614 503.082 699.29 490.882 681.573 453.765 cv
cp
f
674.807 461.873 mo
674.807 461.873 685.571 505.211 732.86 511.196 cv
732.86 511.196 692.533 498.979 674.807 461.873 cv
cp
f
664.747 459.248 mo
664.747 459.248 668.327 503.761 714.012 517.326 cv
714.012 517.326 676.199 498.748 664.747 459.248 cv
cp
f
656.751 466.152 mo
656.751 466.152 660.344 510.658 706.028 524.24 cv
706.028 524.24 668.223 505.642 656.751 466.152 cv
cp
f
648.23 468.95 mo
648.23 468.95 648.236 513.604 692.695 530.779 cv
692.695 530.779 656.481 509.232 648.23 468.95 cv
cp
f
639.7 475.192 mo
639.7 475.192 639.728 519.843 684.179 537.032 cv
684.179 537.032 647.981 515.472 639.7 475.192 cv
cp
f
630.231 470.43 mo
630.231 470.43 622.928 514.489 663.969 538.71 cv
663.969 538.71 631.775 511.526 630.231 470.43 cv
cp
f
620.799 475.196 mo
620.799 475.196 613.509 519.248 654.542 543.485 cv
654.542 543.485 622.37 516.289 620.799 475.196 cv
cp
f
612.633 474.583 mo
612.633 474.583 600.368 517.521 638.394 546.251 cv
638.394 546.251 609.494 515.585 612.633 474.583 cv
cp
f
602.714 478.242 mo
602.714 478.242 590.474 521.18 628.488 549.925 cv
628.488 549.925 599.61 519.248 602.714 478.242 cv
cp
f
594.181 478.583 mo
594.181 478.583 577.432 519.981 612.192 552.581 cv
612.192 552.581 586.711 519.02 594.181 478.583 cv
cp
f
583.935 481.169 mo
583.935 481.169 567.203 522.573 601.953 555.185 cv
601.953 555.185 576.491 521.615 583.935 481.169 cv
cp
f
574.27 485.476 mo
574.27 485.476 558.073 527.092 593.268 559.227 cv
593.268 559.227 567.342 526.007 574.27 485.476 cv
cp
f
564.936 484.67 mo
564.936 484.67 548.761 526.292 583.944 558.438 cv
583.944 558.438 558.039 525.21 564.936 484.67 cv
cp
f
grestore
721.678 158.854 mo
721.678 158.854 715.276 165.032 699.624 163.047 cv
699.624 163.047 715.283 168.339 721.678 158.854 cv
cp
f
719.032 165.032 mo
719.032 165.032 712.416 173.848 696.316 166.131 cv
696.316 166.131 709.109 169.882 719.032 165.032 cv
cp
f
718.591 169.221 mo
718.591 169.221 711.975 178.038 695.879 170.324 cv
695.879 170.324 708.668 174.076 718.591 169.221 cv
cp
f
717.929 173.852 mo
717.929 173.852 711.314 182.668 695.218 174.954 cv
695.218 174.954 708.007 178.706 717.929 173.852 cv
cp
f
719.032 178.261 mo
719.032 178.261 712.416 187.078 696.316 179.36 cv
696.316 179.36 709.109 183.112 719.032 178.261 cv
cp
f
719.906 182.23 mo
719.906 182.23 713.292 191.047 697.195 183.33 cv
697.195 183.33 709.984 187.082 719.906 182.23 cv
cp
f
721.01 186.861 mo
721.01 186.861 714.394 195.677 698.298 187.96 cv
698.298 187.96 711.087 191.712 721.01 186.861 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_pomegranate_bw.eps)
%%CreationDate: 3/11/2016 11:31 PM
%AI9_DataStream
%Gb",KBieNLZM+1+fBWCobTq_Fk5e,*_2saD+@&8*@dFO`G`%8ukBseSrN2tiHglR!3JXtYg:-P8#,*WJUme>`\p&(phPld_[Bm:;
%hb+jCG28,Fg0Ve'F<b:_RdoP_p[5^Cmg#u/N`k3//af/e?/N[MHIau2)rKm_fCW?rS?E_jeY(LMCY"D0X0l9;e=3S:bkeM0/[JA8
%UV@Ku++d+]r`<^6;CGku2n:O;GdCW]2XAV&Tq-2/)E4,*r:/MWI747rB@X^r.on^-@#r#48m><lH].p`*qM#i6+]iAVce/DB`Im3
%E\U3)NW5FDZlbg'>O?$r?*;en4@IfVQ6VS7"HA$2JHhlhkasm3@jW:f(-7_hX<nVTU*&,#1DjRbZeI`<Mna:G,+\b]e3EMnmR7TD
%5DqT%5OR,&'7MhpB#^!Zp@e'E_iP@gQEfX%kT@M,ZZr-'?6o760W6lZKm(8pCM90&[55D_qt-M`hnnf'5(X-EAn4WbpOEs,<jOQ9
%iO`75d:dF@d'CB\5)D!;pfS++>0=J`$DjDp%Qr?Z+-cdm#HQ<ir%I_urD"YP^9*[TlMP[,^7<;?]bFG_2BH84;SX_/pPJpPH5m]h
%B0i#+\R+OY8<u#;1s>2[Fh@,n!,<EeP2/T(4063WV<U*YKBN%Jfa'sgpl6)]Rd26E1)pqaj6LYhQg%q>&9>6_4tG6N_Nh[Pc^X#o
%N2<\>n`4&iqQ-%YT-+&./WrA:[t@ko%D$Pl^(ZPqkI,G^=Z:)lom.@b&'DDk7[RL,,,j#;e6h6CphquWVkN&,L?$m.qOh*2^jl@R
%>5mY)mo;F@a61]nVm05`XoJ4;>cq$j#r6j]p,UNA:b/ppAlP8tRZUCEFh@Q-Cs3[;NJAa54SVo>WE76EC,B>(-2KXH:l!:^Ol4=I
%SpV'+7&P+++o^`!;f2hSL>'Q=2f$#_J[jBISS&Guoh)S^eNs-_!hQVr^6t?[U<\B<TKc3>i9Q(hV0piF1sX:`6/rLNHSj+rhklg-
%8?WoL,Oqu0hc'G3'g``4e-<%bqbPTRrEi7<4?0:gEfHH3L']6aq0KFL]chH9?>,uL4Z=$;e#]0P/1CW,gu-bCg<ZEiD^5f8C+7M_
%7tkP"'kpYT[6c[eIu)*VcEpXqDV)e.\1JcQ4snRCjG]"T,C-/haWD&M4XV8J%Jf`XqDklM^V/OXISHPrJ'OC=OApqrY7Z7fcHQ5m
%XjlQqMfa-enk#`"&F3VpNk&c.d+bIC?ETN]6&g4.RE&M7C@k$oX8NFh7=UiVmQJcV5+j'U@<Qeh=f?FAT3mq,W>2G]K;SVoX-lou
%r_<L2hr=fi'VZ:,r)GAWcVjh<qFrk%k<\q1]U]+mYiE7/WO!M*0T\cAG08mk>&=TH]6]MGb1tQfY0o9_*:'B9/!j.!Kh`$?<]k(Y
%Z/',cOBGI3#,CoZ^)FO$dGSL8W)c,rQeTL&GXhh*(AEIWQNhNCHB/Fn@l./m:3F%u0)SBH<3l,J6s<Wt7tYq^BEamMi(&Q!23!R_
%ks$fY5[L4:CBgn9-&m9X4/QOHQ`XC4[cYsW5<'Y%1_ORF^@Php'PP=XJ0aNo=_QEV.1RZl3\DsFW-=]Li47Kh.:h.Dn9<!]g8%YA
%\TSiPm"WCp42%lgfOAnW"hFQ.<NtUCH3')K8Bi^39Y#u[@:mYV)DEsGDDFpHCM(_[2@H>(='jM%XdLn&"iadSPat-N/qm)4B$8G8
%\X>$.ZfPf-gru'/BGQRH@*PMM@aaX(lR(;+WIUBTH]BYJ[GY[o3B/[Vl@7&F=/kiT<kFS,I[3!V0pPn'lon_bJBcde+TG4eS]`;/
%'Pkt>$_:>!>c=c1%c([]c0:7"ij#P5HJ/_[6VcTi`3DmFCo&uR:hbmb:`:2!BLAW2a%ks4N+5dXjV?u1aQ>#DrIDZ.0=P/sUunjQ
%)W.4Q2qa@*i`TBa&JTFNQf6OQnuibl*3E!-Zqq/@MM6/>f%#1b(.AS?kV,)`6?BhHCUFPX1oJn(ak5P#dK@#LGGAIPXor/1acm\`
%Mn$ro@ZMkl<FMeW@`!O.Mak:qpeM5Nr\J^<A$94A[C=Vq+r5Xb1(G"tDC`D/.[?SE(D99@+j>&!IiP153brVFP[i-$5bV=uT3$Yg
%RK2&@EInlCkX?C(].bQN"u?\sk4i=TTm'aH#%n_\qIIK_R2;b/#&E#LpZ;V%/*/Zrbe-4Cnd<O_^J6a`UChkgO8Dr@D4CjB'/\#:
%m,V,\46`0Qbrh'E\r'XVcZT&!;Pdks]^%*P$kr%ge+Hk,cXkI^43?YmF(o-t?E^FfKA\sC_N?c?O/Z)J[Bc:aWQ:sHX55Clb+1A&
%)g34)SU".3Z;SIl2<JJ=o=/E3n_<]\HF%UOg3"j/TF!GBAo);Cg"9#,?GG_3etg/<@pTgi&ee%Y.3^9@6Q1kA+UL'OM+e;.:N70:
%lsfm7?&VRA5<=K7j&7@h;gL/^'q:\;l'Y#gT,-[Z#+0*:4B#RZi3H=J,`>Ee"[Cl9pR=J2.F)FLa?0V[=!@1Wj],C)%2fNjq^DT!
%lfWt*/Z9WlQ(XMi"4mLo\DYQ,#i8l.^A^pJ/8at><WeEOi.7#]6=VK6::3@)V$J):Kr#Htnrr>8;=F@$1r0$!)N,d*373\5i^I\k
%(XDZ/g+a9Yr*;E[hOGM(,UT"qV7D@ANJ0SpiRl(II1#GfoMBrC?uC::b%]!TS^VVUOtHj91.H-?1?kG'_?FSOW(ck'(FY![?\Mi9
%^`aV2(RceP9mVg-,Wc/hV)/@"Ut=878>1@]djX)Gn\L;R`h#*SeMIETh8TUg1LP9A1c0naWSB-+9OeXQ?,m+KX^4X&;R+lRG(sPh
%F9.Zj4>*ifj]YJOENc0?W"ec6C'q3)Y2]R5KdrNRZZ,Ke%)h@>lg?u<bG%f`=&U9s_XC[E9dn5/")NMINQOZZDEoO@RM2))pVeZs
%AWltt2`_Tu9gu-49LZM.&+69'F;$;lDc/2[)ITF2oLsN_8d\:)8oddH#+=AE>a.(\9RJHb.UG!U7@E83r$0X%QA[M,[a'[3Pae)!
%P)?M?]VrM8\L;0BR21d.QAa1h=\hF<8h(gMGcJMM\L;0BR22g;c7$pok1$1fb:?E@36uWVMs$qZn=#odoG+9kSqHg?Wu1",DH-SO
%gt$J:/)2+OZ_M:Sjk#KnoomB74"Z_HIUcgQYqjn2<LK9F[B&dSB?&P@,[X2aXu!dMj(gT7YAH+qAYuX/0c+4BDAZHEBkoN-p+PQC
%1M,rCEj_=<2WJQP9!4J=#T\sL^--17P%"guf=:BN"TW1GFEK?ZB4R69$YEp+,GQl]q:@aGZWI,fW9dLk^Q,MnG2RVF/nc+a7GakW
%rdLlsb=(5:jaYOJ>/.GA_5qn)fKcuu`EVska"mnL>P*lgChO^BVLNA!qVO(,9`JCq5@eY.??`q\$;SdPbFc',6Gl8hB]i;7?D?nu
%5arL:RA-E/XTlq^N!=*uMS>%t1B)tB?RAK)q?K^30tLY/b$0QIW?)tMRO%lSi;=PCprB04h6?ZO9)P-"W\;r(NI$L^e(mcVBC2UO
%qQCkN]?3k>EAE.=n@YW]$P]&kp3AN/V`Bs?iW^jeH5C9llsbp]%+;q1=Y<Me%-I=m8E#lI\.$Y8)"bq)iNf+f(C\m%Lm=s&OuKB"
%iY=&4J";[k`^%HWEHQ#ZJS$k>B(=dCO8iO-M8!-jG>`C*(B;&NP$.^,(B5Dl7h>\Z[,mN7AJXm.`I*.G<&ZYrHQsX/R)OI=PO@\+
%`I+T"Y;M76Nj,^!1#H,iZrB4PmA,"rA8:<R2+/,HMYIoc.eUPG"&^S?S[YT9@M)U:;ZPAF_:WS;ZtOZFni;9(h@g<__U8%&NNDMN
%)QN*"@Vg4)$JhW/4=(prm@eZH:FVVW9cVA>A2=bL5K-uIaSWCihNlKV5u:c4FXgKGf1P/2qXVsQ]b7]=RmCc!hCR//NChB"B/A/m
%b]PgbSL&eYTa9!BB4G#/F>$'>V!t!s[F;kV6--3=$%%[?n!k*M";UbbV)L*UGKarnI$r6=D%P9#F&VX=s(j1mT1ZK*+YKNj,:J`I
%C>Q%fHI=]iZDZe+0\aX4/s$,gKs4Wt\+G/*d3khm]CC)t[+-Z-(k4;^]Z_?K1WR\R_==8T/E1nO?5WCNbT&8la32]s13:+P*%s+g
%b>^H-.RX+HdhM&=3KPGJq-=@g:^56FH]W,MTnt;qP%L;jBugY[fA33m'q=ur$Ns.LZ&(:k9R<t#1^,[I`?tR5me^4[^DN0WhVKcI
%0D/1<UOZ%1EBFnp1Z:<o`&.G0EE7p115'.`@59]\nKq7D\tX?IY7lrF(iR.jT$F>hc)NFV$VgXYeX$ck$`3],fDY?e1ifH-eYd#g
%o#Iorr4ZD2itNZClg0gd?1l[q<m\i81kS[uP*m523lPU#V%g,TEi2K`iA+Ql"iK5-VtjW<[==q\nD@'qbqoVOm::,"A(`XGmD`:B
%Mn4=T1kqliB4DWgl$u;Ld/G(.&A"^7!912&.909=l8LV/bV[,*#O)lLU5i_^B`DXmN,($h4cS0\1\5*MJYbBu@n`["4S*&V^)t8)
%!Ifta0[0G3'/"!3IZ-j0j"ip>b`=J)IZ/c;L"7lPb,Du;p=X/d:i$ptYNt:,3PY.@aSgpL+4FN]K6Fe2]Ze(<AU1$-@C_QddXP?e
%E<2E'6qj^]h5*L;R0os)kA^O!AQ.*43@V=ec"?I?'@_nR'^D:hj+=CXc+.EG!@!4FCMGE/1r.mg[XY%Z%Gehb4?'&qO-WN1\kK`-
%7]!%Z\9L&OeuNL5KtE<PP$-V6=l#`Rh4WX.<#Pr5?W]5MG<(*^43`saL%]gRSUrf'qFN0EHI<7n=a?+d8$P"q;48gbB>W-2dXX%9
%a^3[q9(kj\bUhEtiH1HC:dV7>*+*m>s'OhiC6)99B&SDsaU'>jaS_FBBS(DK_[.HhS!U*5ZfNOWQ:m!E1M^kje2"AmB%Gb]R[[H$
%1McFQ>&u."aI@(lc-jM,bFV@(O^JO`\J.lbbdj-%2`'W/k1n1NS!e>=Mu!l:kgBJdkpDsLP>&Pe^s#K`8MfUklLiS.Z]IYXhfO2t
%KdJt%jVVm\_\0_f+N">7F5=e/]+h\V?&?ZGOrI\.@TFSWYHGe\OmM3aYNmX!0cjtLKbQOmQ$;Jg;CGj&B;DN`-kskl?V@@\Krt'P
%8fB@jl8L?.9DSAPeF9f/n4X3-D$'7)P)=.IG;Cg_c.&/$^7N4W&_F4Y#u&T@h,K1%V"(o5@bdc.LN.'25l-fn-_:283_smN\tWMD
%?Q:DdOtcQX0J<,u5ML?X/>U^j]6[7,<!l(Gla9d*E9U#C?)D?)(ZU*"7C#gldl]2rK=$Ebh*%T.RP\`ORjg7mn=Oa/P:?VKoc2R<
%1Q/d*!]K'f%%X,S<D]CH;T9jmIE/EQjibjT[aTp2(OkO6QoAk4WA;rb`b>?Vjmg]sdHGJZ*qTuae4J2D6A3%(.b+L?f\fCG>Jep.
%r8"='Jh$j=Ikjr[-:]MRksR=uB_4V$'FdjG;KUr(pfDiIIAZAUZEIodDAL[FEr3KfUafq><?*09,eQ[#@Md$p_f/btQnB6"M)H)$
%0'gsiK0IuOE*;0k(C\m)\aRd7E35AZH\M$eB%JjHaRo#)R;eZ&a5>.+-XA^/JRQu\@iE0='988%9P/<b_Th%hTkp5g&+](l_+@XQ
%ILe*%T(D`ZX-cM<R+:\oXr9J_nqjiF>a+hm]`gX+GgEHFdC;/][6VX+.+9jb4C$3GlCU@,74k:.jWDt@_6DrV:tERkM<FMRCIm%*
%'QXSpV6i%;eg?k\h!?4,2au$krel6cUnOckOn&<r)e/n]pEj6">te[29RO+(`G;WB0i%#+iZ]$p0":6UMV?!i1&0P?_[_0#g"`Q8
%cMtaHa`u%Z1ljjsV)j#^@[\e'OQ(lQ9VJ'"U&PGNhOb"sc#Rlarf9W4iHF0*c07uWGLFR.Lr(j]n'\ch]6]O+Rr!7_`VlcH,<#qN
%Z>N.TgiPB"5!uYrUR?T&RG$:rP=+!@_3NrrAtdd::%OOb"QK?=F+%:f9q)Kl;dpla:[ag6b:PO%a$4PpSFVuH<+ZokInP@!'[,Bt
%@elKoE5b>/mcCm!m<GC,MB5.E2B,B2YNrSZ)MQAe/?8EOi2g0VroMHj?8qlLDg_@bY1Z!(WTk6Bb,\_EY8[EFCmk/g$S;q'I3Fta
%e+srM%a*<k-&=TrR9f_@beLtYmgEg^Vgi7uhpY7`6U/)HXlI0nDs.]0i**_[iWn:]%GSl5L2K(:s'T&[k'[`7KGcrAJ)Rl'o[A#!
%q^Z/fFu#](BUR;@oXB7=*6h]^j`0iHFuQtV5.2g>kia&A.o_+D3tTd4:&p2fq3o-mGa?IU\=2f1oRj@3^([YkmaF?/ctYMm4\Jua
%+Q!,'gY)O\5QB@ddf7nXj[>;=mGt]id&tj_LKV4dQ\[t!b'uPK<B[<_0\$+q,&^9CAM^8RkNg)^Pr.<EThT3@n+^nT!+`sM?*'D3
%&q##@T.fARe2cN8s3raS1s9Isl/(r,nT+)CmXD9\r3Oad/WZ,Je/<`QBra\'Bm'G:oikE@K.G2!<U.P]?tA@@?:idl@3P\6.G+&C
%fB<W6l:X*X&@>e#1arE!G/$eJptn#AW!'kZS8Kk"E)*4'N&2nFG!ri$;crmaSh6W(A0="m/9Y4aH?B;Ahets2V,dUh(h>&B@<tWG
%-g9]#FQ1S1]q1]^b,s.--31fYJ<RGljl4Nnj19"D=^*i?biAYp:`0?/a@o$/`NKSVgUcd`=l&Y.O`6:R?BeG`#[Es8APH8#7Y6oj
%oibZmr-n&._6[uCCDa3<'"i>Tg%%`J0A;F.5_<gS?69C)8\Ij0`cc=ThJJS)7f2Iq1&W1gN*='q;V[K6WpaK^'dW2o@NF!l>ptiP
%FUa9!s6%AV.4MGl.\'0(QHqe_"Jp.:Rb83Toh%aMWM4ra>IpD_gbPZiFW-[m$DD$-$_!KsB$^n=R=t+^8"6@hEeQuV'\^H.85Ic&
%l_9`c>)dj?[pPh,%Oo3C1ppnk7QILf/_*h%=.1kF\ZJQ.e#m?W$a"U!/H7*]*B(CgB,ZI.6..5a4-_d^1.Dmu.5]d,og6!LM/.ok
%%7485mV:mY7YZE+e'=I@l^c&b^1H$g69E8MB$07],R(SpcS55kcoR4Qi$B_q._."u-bGpmK9e4N,KI5eqbf+(3ispL1*b2MNPKY2
%d)8Xm!jc.+h2CuMjIg/1+@:P3YRL!kc:2gX,Pte]i+D&>)7e\8X57uXN;Uqm609lr]:IV'Q.q"VEi%Rj'd("*[%E#[$am<9i@N(:
%eJf*df\mE+YLH>TQ2RB'WO05j17DLlS45nKXHX[2=;ZU=dpgYeMi^up(pL/=RZ&)A5D*F75btptI$&O71lW(%qTkhfJ3UM#!5"f?
%(PQ&)S0?$,KH4n__U?,jM-<+1o$?5S@F-`^i5X[A"CKTJXHlTCRU"p^2ER0r\<HAp"9Okf3dUFHkRq1=CR7:XPZoTgJkVZZ["l*j
%3>CesHJW`N3:+k4n2%#%fXl+P<kDMLLh1k(=j\hV%t_r^6CZohXqqH\0\I4c(p"'4]kO`;F"?.u2u328=MgFd>dS!eAcuVR^$CC+
%cU-q?-L>;[DR&%L"f27CcTHY^Dg24E\J[kkGk%rjKnHO6cn=X-(`u&fN)c3Q.&^c:p'sQNUAFKl1CBq>U`[X'g#MPoP:WsG0_.Dq
%h:o,!,YuYU/Eg56Dnjjl\T'r(H1>kK]M68VAh1Y(Rj3Yu3")!Db&/@=ClO)sm$WNB3F\*V^qHhACt2;HR3^'(-#ft-o9;qZ`k4uV
%3i#_P(b(3=-%3;5%]6e>R-+CE9U#@2(k)<W\E-mQ[nOqZl2J=u.$_X6$al-1hF#8iI'jDobr+T5Q7./gV,>cnenI'0H4S\crm$-f
%34WPI0E%2.s"!Q+I$S6jP+9@K`UI40n"<!Vi\ZI1o"QLM;U?nceI(,Rb!M:tMiC1^HQG?O5,-qA^&@e>7PAb#&#!ZY.S1mF'U$2$
%22sono!A_$JnO=Ns3dKEk4r7G32MfeAPR\cnkBb.ai&tk0,*Kh&GQnH)7#aR71@lqm`"JV82f&4XT">3c"sdo)SYcS.9g_^AVVpD
%FUB?>\oqdH^>T]a2R;Ah@E[h?NCr`m&8[J(`EI'@Q;XV=WO\/!1(ZIlWYa@`dISNP8/2G'UH0-Zou<)9T@V`L;Pj84#'Oa(:*S?7
%6'J^^Q#:GV:m[A$=N%F$\$EF"X8qX/GctSif&k'FYYGoRo!$L/B7i>fnLS_-$kgd2?oMbq[@l'j]9D(MDIiX'JjGr8H43q>or'g,
%ohdkU_fgQWPWJ%s@*aTQBUX#Yg5\q130ZFBY<o?,3@0E%)p+2"eKbs!H^d1>Ar_HVP/!eVQ85)q%ZY`,5!R9h1bO?:#&#jZVr^OS
%@G]Ii<2lN1=Z_6s7G?UTo'[#&EniH2n'I)Kek*DX/I]N+oT`1r!?uk5s!;\/dF*c!B\7@Q2:<jDM_5LgU4jUTodGc&!VJQ$Hp=en
%rt?@<"1ti33_CF.`3dZZTohZLW/ebt4EJZ<#32jC'N9^^18ZDDF%BY!WckonT7#4o#P&Z&-#E_k@ZUF.]NA9'AMOZ`okPmPj[P+7
%3,MCtc.9*NN?o+7=iBl,LFQij^"`3LqTd?'rFAlOM$J]_WD!+i$dFT1ccT2YN`VgHF)p@k\p(:S1@\SK1n(?8g/-d?WE9="BT4ug
%&pQ^S8!q90i>tS;lsheeKad6mQAQbMp^'#spH'2rG805d.!a<:_#oD$a=Uua[9>pEB5&N,]41Hb:d,`jXLHN2H5!l0[aPT)W*7*B
%_p4OU!U`5H#0+5a='"iVEEB>C!k-7_D:lSm>O>$rkqM"U+;d3n\uU8d-"0@%7L=+I;G4c^`c*PhY/5kPSqC/KR5!_PZ-(IQ.d@n8
%qJ^dWH7*ET\CDu*]84/TeWUC<-_3D%G(bVlfBko*SQ"sQXaH`WcgMmU;5cq+Hc#28./XKskX`jU8s&B/CIKk9?C11J/Q,qF3<kuS
%QiL7_nsd[u<3RE"Zrc?mBaF]k?ZFW3I/U7;jE;i`\kMmR?QM,KeK*Yl7nM0S0F#DcKMNjqZsKr$aogX1QN8s_Fi,TL#H`/P*$qeD
%CZaSDHU=G,kV/$R)YUBUkIj79jb'^dhk9rn*<3pM;$m08&tfZ=.H>!ULb![<M"H8X.fA:VXOWuW8HNrTH^5"`S4kur\\%DH*[Ur7
%_nR*.hRV\dhQ=8hJ.M6*krKZ=A!hn-U;QRtoqYV:=,+i-!>r7HYEXfg42QhVFD[A"qV&j$FQUBX&HE4(&l[PBQ.t9I0)U9FdkLLP
%[G\G<%j&/*#OOj[6jt`fP!e(\<-Rce[P!DYko'iB)NCG.ShB#.Mq.Q1gD34r6=o0GS.q>!TlGfDR#I3G)58;04DAC+3Y,tn<oGDS
%\kpRd<@XPpr#ON-ok"EZ:o;UV+*4:T$-B"@Ae_>mAdF)F0`AU0hfTD+X5:rT.eIGgQ3k>uBbi6e#!FK$CRK3;^>l3CU^J'/3#\GZ
%H^\[#0i0UGPW9X[aA`N;h(PQ=cqY3_916PF.@t%c>I?TjT]<k!Ai1YN+_bYYqJ!U8E\#V<?/UH=p(GV#5uP[6\M;6sm6Z`KqCp)W
%@Ql'nO+NR>jl!>l,O["Ug*O7;nZ%jH)X3ZH/^O>R3p/aI.)JAqeo*J4<?gD:lHP4i>pQ-bh4LQ;lki4G9J#LG>dSf;hA%#A4i2aK
%/n(LXo[Z9;.K"._?E;-3^_V%1ge%J-0L\!M$H#D35?PP/P01+2+p'EiQ=I76.(nC$:OcQmPu&c`d=sBsUND>jR!,),mZ^=M82Y<E
%\6#+W9TdF3S+Vt3Hb8btBFYQlFIs+B)/AP%EHii#E<J08cY8#a_3f5Mj#J(tGmIKP<k)-[&sl1hI#Q>]\_9[)BEWr]P&=7/,eT4&
%WGL52n^.cP*emU!&,Hfs%ps&9^**^#6EZV8FX`2QK$^LIe<#n-Jo!g(N:fM)'$n]4k)`G8hZt0.O2P0nF&pJq"#5j9j@ZJDV>oa^
%@[O9N*KtW$IphttTOmd.;]*2TN*9)PdOnRh<k@^rl>BjDFCWBP-$q$1G6d);gf;O`>MY=M1oiN%),GKV,U1P#&500KAKtQjZ;JI4
%I[Kf/FZ378D1k+#Pe3/Zo1/IJDLU.SkWhjc^CluL=$nd=+3fNkh<Y;$c-YV':rhiiSb6?Dg.8m(7R^4=lUh4e%J3YCm:Yg&BLjia
%_GtQpkbG5Q'RLQM1j\k9'TcoCOJ@-f]j$X(+&`fOFu?_+>n+i5T#D*F3[]8]JP0>2jRoR8OkI)';5[o/$":HM.O)D66)@KZCF%:F
%l%r1(fq:W[aQ0pq[n+D:X\#15`1kK:U7@@8HeS.cg?8tj]r!ORo#kSd+;\Er#"N]0HTi9W8G"M_R9_l]A??C'iOXWl2oA2VG-rpM
%H6F>`8QQm=mi?m;ea$;n;>lACAFr2BS/@280?E?]ck%HPeiOHo$6s+d[>PGcj<R*'Y1oLir3Cd7fk%'c/!KJa5@,jqC4#AVI;@$4
%o;&sa\/<[Xle1_):\-),:ED&'hClMun*_m3XYueQc^2pl[pEt/>*sZ@?7obmGFc2r2Olj%X)FUph6EP'D1@#=ZeFa[h9?C=a1J6R
%ef@J#jhL!)(::]Sb?qT:<`^%TXjtuQj"X97]"EHl)>8C0?9<N(Ap\[>$4bY1:S&?ng$F?t^:C[F+)!u"^Njb>rV4$rs8HTSqRF%s
%X4Faa\ZLMXq>=1S:1lA$h*"s=??pKXe)X<4QR;l*]Bf<km^kEM53EF-ZgTN=2;)p4bNd6hk*OVp<jk&]?b"_@S9nR'V.k1h2SYB"
%Q9Y=gjK;K`/+8g"f?W.:kO(jRCIc+pcPQ9A+0-p<*ZW9e[-6*;f<_Z'qW\!?r)ROtf%QkmrGM%2nP2don\.ibcntar\bY5Sd=*m\
%IVp/ZYN5,>pZL.70796r?%;?eF$8_LHM['kSb(rPZ#G8db4?RMgZL?"Y!"DIc19\/9BE?195Bf>cQ4Vqk<F02gB[J&!.]j*b:h19
%R`8KZpLQ3`.mBoW5M91glrH>8.D,$.eu>'Q(:Wr3M^:M)ZC$-pH:L'[4p]pg;_'Gbf,kgmOS,.lF,LFB>/f<u$4J#bn#`a2XkYqj
%=R^0,bfXjPEpc&4fBZf,=5K3+/K#p[^@8X.C\J+1Vp;&!30m@cOn5H)Xa7R%n^(E<#l:^2Xm'3\m,T6)<pjn_RfD$Y1_0NSPt0dc
%1lZ[!HctDUk+?OoW1R+N2I8uTonABD17IaLfHL`QYK]:[]!5Z(T:J,B"!'O-=Y>,PrKU/7=tu#G]4QiI:p79nd1X139@2jnm%[Wi
%ELVAl/Uu"!SI\oM/E`f"]pLn*J"P&Z5(<07UJQ2SGKi-nqo7O*p\o#IGC=<]IsOrjZ23M(dMYccAplX$Q4<fVPWit)lgsSrXS99]
%c2@=2j7VtekOJ+Wp"nBaqWT5qp@.<*fA/+1isEDO+4XH'h<d_92Y.GPY@Mjo]bV4\$FCc*2tPAP'n-EZ:E?XC\pW/ESND5PmdpV5
%Zakp`#S5sDo2[j#!E%533i[sPHn=)81VTtRbA3T>=&$\eQ#A1BH,>\6$hJ.Vs(h(KF`20gE5TR)oQbW:lL6t<RcIM_gjYhVI]5-[
%XNWVh^MV8e^<5TFQ,A[&_n08WA0p%nicOnm?utabj5KjFZ[]57^Ra2>nWi=r6_0Xi_+"`e\k:IP]hcH"H+8<H^<ptfMf8?2mRQ<9
%pDim5<8Ma,If&r\ikgO:kZIb@i70k_P<7PKbnIF/lK?d-5?nV#06^._HiCiE-0!T31ul-SduQ][^!2=ZQ0$9'rR%!^qYV;tX2U_D
%>fG1:NP+Y]3K(N<R.k.a([i,af)4QHNCRdAgSO1=V=q'`4$8"BQc=8-*t?TL=K&tm2X`<1T5sh,k7?d_0DF(gq<`7B3ZmK[+1uQ+
%^%HGTM&Yp?^Bch\c1(#ATt.^[p>eC3rO;]]FafR%H`u)emWUn)J,$#&IBP3)0R&H:!iCf9e6cr@CDV&Oo&e)9I4iA$5OL`c,e&J<
%97h<Pg.>pem`CNb=Ru+^'aQtSG0aiQ_*ME5n([d2<pQ"FGO^^,VKXM^EX1K.Y,f>6\SnN!0@mJZjkDlV#M]")oT,R'gd1,MMZ:hi
%_:,?Z]%S\fh3T?Z''eKf/'iCjC[V2dfpmN^oki!eJ*ZM,:jZJt^:q:<T:TdNTBf:[i+2)?^+d%q/8BMMImMQ%?+CifY(87/o9]BU
%F0KMo_-`hUkMZj8BNp\JE\!';Y.^4[2i^*\2UH#h46+pT9bT*t%D?)g"3EBeY^;>ZB_bH!0:'-VQF"VIM?(rl8n],t<+*_Ogq=Lc
%LM0oSdGekbN8@hI(Yq/'ru-l@&5Emec6"X5!sA*FhG*Fa$^?XPSLqU52W91q1n&$QkP0Q/h5<-gI/f,BkW+K=)Yj[9'bAT?n5a]#
%a:j:Yrfp!3VLC^:&Z^PXGrke(AC:<R1o/@LrN"i\"Mn[5E@Gduo6(7<N%Y;-MuNd1mbb2q!\RDJ\0FdYW6om7d(]48Cp\sne>Dn(
%b1j5O4iXhrjfCsN$YoF[b+3&-"%($ueoe>qA)ubNfSnScP$*g2\/2C^5umnOa9?hDX)I`OUu>VBNT?3h9H1nZ)7YJlYD/!V/.jH_
%f#auJG<Gi_0)m1e!'kf)pt*Q(Sa]MEnD1/!k3@TWOR.Kr,:PkT>`GQBg%OR;SI\A_[iT*(ec;-TC&j098Y=+3X<-2CHa[8[HG$gd
%]_HJRA6VC@YhOMkRla2IAH%D0*E[+5((W&UJ%#.ARHT<N>7Ws=6EeQRe*a<OHSFWdT6Kunk$PguZ'GN,m5W2SfCHPS#@ErJ:i7ea
%<P<aJGr@7??>GhdQ,R[2p"mGI^A[O7)63-D)o[NKa(rtPZ'[3sosL!iI.1h07BCO7!qikZa*XSgZd7KG_R`BT(1b1s!;7q4oi"`B
%q?D1_d:\C1a#j0jF''7n.+75EO8k..P/;6J"mURo?;alXTfO#6l6:`l_n+#Xrd#/\0O?'[I%ejEmC`n(2SFUN`Yra-<UimEcL>4g
%41)M(I*TK1Eur[:%o:d5XF>K&p?(4u2QP!Y)X`-X8t%5grD/tcg&0EF[h/!J$kI0G3eCW(L&8$YI@/c;qhialaAd+8?HHb:LMZ3R
%a*ABH_=P'lF7tH-".CPp&,MV2m,jpIg^Aq`hQ4Nk;5Bg"g<U_I:OIY@fm;I;me.qbbfU%,CnBf".]`15q:Q:l\GpBs=FGP>=6Al.
%UO`((_A_AQ0Krgu=[2q6CPc)>HlSlrQRi0-"W(:QfU4*SAae-+#\=<c_q2:(j2nFu%h[*&9;QAl_bn,6ZD=&!c'=:7fk;(DoBV`5
%G;_Bp*K[1=c`_YH?OM'"J+DCSp<0j&H`JDT5#bmiV05&XbIr1Ln.$djpkPX5VV:2/IEfIhSEstENGR^%CH#r#9HB:/cg97H2,+`m
%k2pEbH2cAug,XK!1G!=fQG:69>h;aLorZ0j]8a37CK>(BdhglLDKVMfVlr+1q:/sHLI:At[[\"HD.@"^H2H]]bsr9\/7MmTA,n3G
%C*]tU2`Hd>hDtnCk3C+2f@oN;S,)qSkOSpiP(rs[7e[%hmW3N`=NnNr55M-1XWMJ!D*4)d&LDX\QB$n5-[21O,5Z1G;6h):.>O+,
%@O3.,Z52c(lfD1#@J@\!Vg[so`fKea+]EUf''$^:7D_/4A!<.G<u(//UjKRY&SsZ/Yh.16qOj29/>'S$?-8M6r^)EmF198]J#;>Z
%?ec7PZrk*91b0%<n[9H$Z'U&\pB.g'0D6Hj<O2K_%=1i\?%f);3FBPo^2+d=^%[ALIs,W#a4f.U8;*O(fLJ'V\U0Aq_r$%S3nlW>
%r3>%ZfeEI*`$W22iS/!AT\Q<5`^.'rQ`fb6\IiY*h*!bFNFa!?kOd_&EF/O4Zf_0E`!VPfd1=b)k+1%fB5d8%\#SOcC\GC7g"`&e
%HY9nf_g*(?cgO$siiZSNV.NVV&HVLaEIR6&p*45nqqQmMoub+Dja2dWmiH9dhmrb1InEqR<q5T1jBp1qS7@g3joVVjSDCe"bj]O(
%TAD^j+#'`a@WfGn1&o<T:!,Pf=6"Pmlfu*om<1>Z2BDDB/Z6:q\IXA%&$q1"IsZ--g\UPi7?%n9>k[LOHp9c".R/0a6b;,@DDV=O
%`M5`7FnN*(Bq"-:ohV38om6ARI9g+7mHLnrI!p7UI^c0*B?TCrL&+<1fVGY4%d_Fnc`?G'&('cl`,,9hkt[.IbKdYs2p\#gcduO-
%^O+Oa+=d*4]_.+\l6#nFd]5SFC82\>bL-kBiRJ$jT+!]7/.q.ta*Fudj2FX)Z>IVhZ9$(1GAcM<&&-TGbI?roK\t?uY4ct<4p[;G
%Ck-lEojYhr3IS!lG*b*nXY-e7P%qO2gWJ;dF4'H,6a,Y-0;[:r;ubV4NK6C&Ia=>VhjY,d8Jh0u+]gncI=t>\7[Zf*ia4pjbGSo7
%gIe-]djL/9#YY)Rgr<dJp%MU]4O0S5BgG8tf21d]EG'>UpZ644IJ%FV`SDp<<mH2BOW3(%pZVM>]>Lbfk"<@Y=:Xl_41A:XNe4T;
%YL,IE=6>$IaQ@ifk=)nfGFfRNdJpdJ=a=?,WQm_NT>,ohq=/J#6ZcKYEQsIY>l8LG8&!kfI<U"i8IYUJH.g;PpIgFF9<Z*;,W'`A
%f:d84ZaR#'2\FmFaK^T6<[E%DFT`4)O3`H^hnnajXQ5DSf^7a,Hu6:^$R_D_.hD+*HV54OiQ#,EpSlu01iI8q34nt,$Il@F7nh7?
%7loGaj8A.MPO(U&[$i,VXk&hWcgP`-HF;J>o<k,RXZ*QgnCAsIHM.odU%b&BVpESSN'dCG)M8FlXf,QqGMdm'CPI7WSq$b3?9igl
%mtg/8q!MWB)L$IJDQ@j^"8"CZ`VY%eneHmIB0Na9UG.i+B^VR,2j]Rr=aL'1\#Z^#A;rgc=C$4+\<A2\:ckDD8rjW)WO3L*3`"X:
%)``98eJk_$ID@\pMjO9_dl8<qUi(*gf/AM0NM^%+4rge6%s%*Sc6f+"LV6qUG<0ri1pm.`]Z\<^,Ge!o>M>K(8[]\s^Qj[e]<GY5
%c"."hq<bRJOn3!5V]!f=h[jONdl*(*RWa/Q7H6njH(b^:cOju>raE4OiQ"dVR"+\tj3,@FOVmr#<cM40ZDF5rU(/@\m\:7oa8XNH
%kt3a`2<h0oH1=^8X&L"pHL1P4VBnY+ai91GnfXphX!&MZ6`s;m&C\.A@#pW.YA^oA$bJVqT`TAaM3csDDg7`J)o^RW(UA.#2)dJ,
%r>3-caH%/7gMBV<T2tF<-gUcD'<=Y+["9=Xh]#]^E(i&Ud9&TdR,<<G:ODkZEEKuR4%,.5maBUSfg/Qc1stY[X"0I[LIhZ_GI3"G
%#nXKAA,Z(Ts,@3+r6s4e5A$-fSUg"Igma'@@)9L)>e[POU3,4qfB.)7YsSrKWN<]"cSfh#o2Zf]oYo(cQ](=`os`K&Ej0Z#8l4t@
%9MYQY8!VUtk0VG35r\,rjLg\r=[GG/qu-;en:Hn?]!d"?$(APd\GdoV3:TEO@qNr9QfEkh+-87,Ydq;j7`^&*3@p.Z@tuXGh?d9j
%4+osk"t:uO41Tut<B?VU8%#L6(e6NBS_M1FD_ZSXWhRspA0dd^_4#LD.QQtSIX1+ecdlI)T78?HL'`$MFleVY2?2slb3^VFh"qu]
%[*?JdNRd,DDb20rhoolU_N,lqrJqa?L//c!rJH$Q`KCVt='H3mhp/u_BbL-s=_eH*Y$hsYhFI>0\5S%7mblCePPgj9gg4.IHnIKV
%IluF-1[3;Jc'?PJ6HY*c7;OGa:Pu'XPg-IWJ,[QiHTTQq#dfaJlg@'<^&h<JEVJd.lk*MQQ&:>i7cDbO>%LPqI/a-*q\l#"HS+sk
%8XJ%9:HG!&^3%Y__=<&8Vo@B,TuDeL4E-:PWKIoTICsemVuLom=$&EX7=;7RaKJ'uV.(WeUMJY/Ut:(_clRYG7kF(&-iU0`[%lF8
%>PBi.56#*bq_eI^4mI'/@]-s]Oj%QRXdlij\rgs-np[](=?4Si.R,Pg/:;]MQLbm#0])a`TOFj[oVBZR5<L'bqJD=S[8tN=^3Y@?
%le)O0K[I3)2n)@Z"J:tf8+l=)E?B+H^ULc4f?5+?hk.Y0hQuuc5lYcJgYGZ_'slTMr-[beRh+8soo5^;csGIPpos,9[bf67_;=Lt
%IRC]^cK55GlFS,s(-d%VCY"WYQp?5nf7gQd@D;EUq=1KSlj6hAF(B^$khQnAUHCm@B)-!%i^s,Bq88a+\jZ_+q+icEHJ'.tS+ZC'
%dUI[+Z@:;u#&)#GcZ_;1?EJK4S%Xjjou%VfH-i+<8!IGWg)DDp)g9FP];GQ5A`?.84l)efjeL/i(Ug,6Xjla1=kY9OqnA/m4hJ,2
%q/,PX!M]@ZIsL?ZM\d3?If+>6C\Pf^Zh47a#sf5@.c$3u:@X=1)B?]BruTSsT9F_QBBd^.<*;l&IltKN1[c"MbqBV[*O[k`:LDIF
%DsoXQqJS;Vh=]*S?qJi$?GNJ2rL,f10=J..s*G[Ihf\,5jgg2ZAAZ?1Ic]Ptl5nKP?Z3@"j:L.D$ke8U;4o\"47]rMU*nd1:nrD'
%Vr[pqEt[pXp:Qo>%r^p1"NI'jp\X`oS\0]UX1&c8N0/,Y%,P*^s(E8hNS>h1r\:>8%l;rtc8!O#gOn?EH+T?f/7mt(s#.8pl7BQH
%*E2F9;/HfEn/1U>np?Abs8)>J:AFk[2ItAsnULK3UMd[<_0%l\E9RTHcU6\h774a!BkV`s&W]1\[cVr%/]l1BJ^h*aB-85#iEa@E
%kalR$2:'EEd:hiK7lO,KC0B$6l0jXDATc5!H]Cak\98'FOgC)2fk@^uSj?]tn[W@HI7*bVCh5bo%];3@l[$8tD7]-PBJZrkY;p8P
%ZaQ]Cf($.C_eT_d[G@pd>>Ae"S'A$HH5OH+ZaT>OB9)+eFkansD25!qYtiQclE3g`B._0nAPF(kA=2.gA1c!/1>HJL)nF4g*CQAc
%Zb*ZI8b3sh5IZ&meDNbU:=dp/USuG6>r$\lBYRfrNdd:.![JS7HNK@"#A"bUZEG3(W9r#$\kT6#e(&m#7EaYt>CP-WBg"Z)D/,rl
%mFYIj2`5tW4)\mEH4k&&B$r/VR[^Ma,<B/^[1.#k(>FRkmaE%u3[XF]-`koWF?10V/LH3qd:?d9T9i)ce6c8E)GX=S%9&^HL3sh[
%r:Go*Q$P:#Y?TFK#Ht`\YLLlRR',]%&`G]s3[.Ld2D]-r&Cb=V=Vm@2M`dq.OJ%5E&>o??3`jq>`(gUcc_n,#*#tHOAI7ONZ^s[?
%T\BMqXb<nk-VR1`%3f-7_<+jICp'*^D',DE@f6'F1*CO20;J/"U'].)m:>2K[C'8%fZelYX%$D`lb1WXnp\1\G2@FKg2B$fWWL$^
%#\@L/_ZlO]AsTq=cBVGpl%Yc)M6;SuFaQIt5O8/pM#8U.`[>dME*^:ndq=UdfF1h[gSN;KgV>;c\AoF\lQLlOQlp+TI+g3E#tXBM
%MTgKE".eX@45UW*1GsQu.*Y0$[,]MAnOttq:QO-/\-+CT&DXTS78F-Og+eGB#sAmoBK1M#-4V%T0?OIPlBo]eC!SVCcIK59!f.F#
%W`Ws+$$P'C"KQVL&**fF254Lapd\HLG_Q=u,Gamd_[JSeijGMrs30#9QVPc01g[UXPYS1&-t<g`EGRII"Ll8RWT-Zo:\N!82=j*H
%_^1oA8ls7[ar*&$cg(_H_]6mtOWC)EE?<ADPaEW6B7#Ti7/@$Hb65[4gB@s.cCrXRaiZ3.0%5LTL4ZZMk5!5<^q@HZ\1=A0!?;7^
%+dNGGk[2,%+GmXt1q]:n8ERtb08r]V7`ZkU>/X`1/ANX;'T!G`b=X=F7"qClR1Rd9Hn:_b_",<F*>1uAV=C9G,K.I0.lI3Yn#Ep?
%QEGYb?T33t7#kp'8[6VUpcO/S@JEAg=:hYG&XVnSU!f>hXrEr>\.oB!e&#VG3,9.>VIc1tZu+Qt.lI2NP:''oigjXbhZBqu6DbES
%f4'P\WN'MKR\S&G&UAu<5URU4ZOchR6WXh^aO@tr+OCuHBiG2)aA>\HUR&&8#q4!'A2;bHmao4(CPIq83YID`%>7I7$.?+M^+ruV
%I(,MG#hs/k[q-k_D^uNUPgMUe2Tpj/jOf2"Wl1uQG?fiqeEete``+L^qe*\3j+DT3a9O%);\A4Y(9VQ]/nu;h"%ZABB'=&M5$($?
%#Y('$BM1ji=aVJYE=uWXB`&NfocU0"Mde:Z<80Y;28eTcrK\aS82D\)MH(US?^@bbCZ$A!W^YsRF?d](6:JdJL!PrFAW[:INDH0s
%2RSY";R>\n/dS9IH/&03E6SsjGhSbZhm,[:YGu.I#!-d0UqqQt5a?!$LUCM?"HXIQbl\N[frVPA4qSMD-Jfi.//RPCc*UQ`b[n((
%0jsur#*=QcH"MpG^f2K:RlJ1%CEYitj?9`(jdC!7BkKjK83FhEL?%T-Oc4O,R(<IEKp6OSeP/EQ'8Lh9DQ1a"Ll29A\8DRDVm2Xr
%8<J"2.ooJ?NMR:?d1O?fp]YflKq!%N5Y/c<dO`dQ/[cfG:ct;\P.AVZSNmJFkdiO;j"imn0Ar9B1h!aWbX$ehJe87tU*F8pZp`AT
%.u!a<0l^DWSu&Jf1N2r6d7+jb&]ZRCSOlcS#lE+PJ@%IFVBW.2Fbd]qY8]Z"Yq_:J=e#%_JWJ1&nG!.>4SD4],X0N_>pjN..T:oJ
%.lpBt<_1.(U='pFHqcFe"KMNuY!/<T0UcFK&"<Ne!Q=tAXsHO=1&);F=JQN"0Jc;rpVdsne%cN*dZqtkHQa.CQK\2?M'*#Ci&6g_
%ePoTPQ3::s:WB:!J-B1:KXroD#gKXZ8mr'[Ug^g<#78:7Mb,./c=)j.Bqf8IK^eVIC5L/30rXPnhfq<lL4lQTiP"LFTJRIs!=$eu
%blI%5)Bc"BP#E:;0*;L&F+$]o!jl!6!$j'qR=pUZq2mgUZ/NJ."<g*@^4sY1/<<b53\8f=;upZ%dWJ^mlX.H86MU9#5Q&a\_p&"Q
%5QCNKk9!`:k>+8TQPCrOk.2QO(kc>3+<G&O.p-m7MQV=^m53"BP\Q-$IAgm-b>C5m/5,6\VEps:(JB7p:lRd7?'4ao(9\W*!0/KI
%7+8\UJMFEUi4FjuRnt/KnM\`p6-o",4ABqsk8sibV=)k5`mD@Fs!bUVJ$MX8gY`AgoAS14Mh!dj`I:A7EY_L^NQft\kL/56*[j1=
%N,4i/,c#Ajebc'G;bp2o;TmT8qp/e#LJKm&)Q&uA["+ipB&H[&gX334&VQg]CBR[^2)Lubpgdi8Y#:#jlS&D`XKfH8?;jqSA5_of
%co`LVgVQs=(5=BC_Td$V[buuWOi!l+"tecE+nQn'D,GR@PI-.G182fJd"N>u)S;4R@f3)IC/Q7gaOk)h(pcb1:&)(i4t@Xi4]EnJ
%\<ebCk1D;UnGVrc1OsGAMpGA3`<Rsp&j^m6U4@uTfs<P'C9tg0bO`Zcs&4'j%8Z4&L<hb?R2#q\JulS/?J*e+rd*e#QL=R:5mt27
%#`567NiBAjK9SFYH>o.Wm<QS1)"BH/@O`Wo1d+flM'%TcfRl<[PUc$GCuK%gIAH0@o26nt==8G^#L%\R7gR3]SCn_!6<3ge/5+VT
%4=]^[+[53//;4O6_]i`FbFTHs;bZ)RPqt_8rIc^"Vj`Kt1rKi8)n)"L2#T;LkM"q>A`jbS]ECFXGc&C%->X?J]3k4.<*_A:NGEd5
%Ko`etGW,gqS0^"=BJ/CD1(XZL:eC]bf*idmMT>QTR;s&_=&ig"lR%BmFKg.t1!/kS76?7d'TsTu16/R%MX4KIg,"s+"5d5EnjfoQ
%`e9hG,>S3D?SceCICLis6;<@h0<nsDI(*D+<08\t;:B)*)\Nj9WV`:*A3<NV`(73d_.![H2tTgk=c^Hf&1(jRWVBpbpN=ABZH(pS
%,_WMg.a_Y8@5Hl%Y-F](k7R&U%XmW9T,EbCNMDh^"K'Atd"M8AJQ!Pr*P*Rk-q1cXUke4R]BK.T^LdI;WRFO<`3JUSk7.TRK.0:R
%*%+!f>?A'Hbmgckl:J&9SKMh=1P$1!\IM,'Bh[-;X?KOW9j?l=QAjNVrH3a*_QRC(7RDiuZK-i0I3Kmr/&G1S[T_;9%Wc_Paj:fI
%2+*_D&75KjC-I"%+]^-MoXrO]QHibJ>84s??beNd#YWXO%64E-Y\KMYN?F^/bH]E&=DY_*f^$mFUB@mU3[5M\)9`MGa-/25'^]WY
%nW?P=ffFnoM3'a_fJi]86C0NLhB[PF[WeW?N$11_5s_f!+Z`.dRZ9!qF#%;tQXf:F+;A3%_V-l<q)/)Rm.^T['YO#\UZ(uM=%naq
%SI]Gr)4onJ&E[u<"0kL<FH3V@cmUosDC_ag8I%k@':[LeN$LX(JPV`(_3Ub3fHaL"T-Nk9U-K^;VW5&m,">IkLu/gsbNCJ\Y>22F
%9o46+oX(i5I#ZbgLD<DL-`Ke.#fJUbKpDjdM7$nd!Q!q763BJ@dQ*,KOBP+j"IKK=@J_$nj>M\ZFS30Ta!KtReEf!bl?JGHF]F'u
%12CU$9!-H6*YIoGQpY:oL'tnORYdfF<u:ZJKY&kjT\kYh#8'A23"kbCcnpR#^rkokQkt9'(pmGq`(:dih3@eh\p7+1<<sTG0$iU^
%iMJIQZ+_e[VIA@DWMLL7*rIa,a@)<a0lf9ZdhNFN5MG+LAhp/F-`B"7K]CZJ,8$KOj4!_(.i]gSMU)mWFbun?0n[3hfQ0_Kc-lr-
%Bf=(0BCA!?B,qP=c%a?V86A*40FktqGJ?9W6DNpZ("BXF;),!/S/Y2!_^Jk9D'kr58<<N^o;BrR/<2,TMC"j6g*(W(;4Fc),Z@Jo
%IV@>h[VR=g*n!$q8k>\oT45-HD_e#jqSq_p>N>Ur5cDi.k:,CV().8d5DfVKKNJi.<5pj18N4'hO5X6sj@X;ZK`-__')%++:S>J]
%0chJ'b$f&YOdk;bOl7Z^j]Wh>6WY\7r!(71EVO=:T1k8A\hr;eKm6-f.h&9bVPuRBObVtQ7Kt\^RE1[N*;Z1AA_B"?oMi\&hml`6
%/8##D`;UTKld2:tL+99u1Q9B[YagM8n;4JdVSsSV=3d>;#F@%,r]u$$b(M,;-o<Rt/2D(BWnDE\_'!K#1Y3bX@ec6BLZfkP-iOD2
%D5I=N9pgp'2ab60bT[qTF>YH2C)I'uKF/*orWQOWOR,)?"d+!e:-Bl6Z^B8e2"%\?'+Pgh'+ocAjBP.GaT$d(TL5MbE$W"&LFr[<
%,,<JFHFfQ\!Wg9W[;YnW#*2_Xht@caE;V[>m5Q04MH";^"95/a=NJ,g#,$\4"]>sB#AY[2^gMAp"7Ds8Sj\fV7m/jkOba\)SSr$C
%b^SBpO\Y*oYoo&AL&.a9;a+mBF>sa`K`hul&'XbVcdO,R'?O!R85QR(&l'FIUetiRch=*9A6G=pa:K]aR6_4jAdBR82+r2-#;*'X
%>"tQ%%CW5Xg:eg]Qsk#!8/S#,--ME*flP+*,s_XB#*8'5@49>d$C<D<R:5oZ!OH,hF@ZQl2-\Rc.,0I*<8V/U%pAst;+/r?7i2`,
%UD(3?fr;hLRu2)]'3p6cDOR)ToM\IPQ7o_1=OK/RZ#B4!#0qu9#K`$?Su'q[1qO%`n2>@!&\D@c;g1ZRHZ&$QKF1Ir,n.[I%-<U[
%1;oiU?4cgP34;CF_;I-;TDb4pK0='mOIYqY1HIXOAUn@!Ai^n4cUXiWT,rUR0mK:72jn0CS3TD78L`A0=?)m=:&%Bkp@"0=_ERAd
%l)tsg'=k$X,?<$/Qn:iiTMh!o:,@VEB1Yd3N@'O.R&\)B(d_Cfba:l2S]f0e@7i4#F?@mtfn/c7;BN8rl\5s%O`c.7(:)uN$)1SS
%Po\ttL.VsF*TlE@82?F^8>.qDp9?A%q6QB?G^7e8@Z0tJ'B9T%HZk5;c%!t<_MAi-!O<&\p./\H2j!.2AVU;9T+t!Em<E'Z1"'B5
%5$'d;iY&tG.!a#u%Ae#6?5u`h(cu0)%(>TgY8KI$s$#2--3AOc@PFSgCQ?18,L\HfTd3frX`Eu^Wh+$SZQ\^T68e[%2B-`b9\qJ'
%A3_LRWrYGq:1hlFf*rfN:Boj7M*,3Ri?o6?1fFebbCcE.N[#It:r]UQqL,?@NuTu?C!Dip(^)a&V:g-CQk;\k:"*+X\DjaYTDt>\
%e.g;dErubf<AjZ^*"..#R\:@"bfH-DL\\"i`'4nX;NiD^!7t'fp*S]%N,C[R=&QpEDU&ZZqmq>7,aQRd\-b/POM%k236Ret,ClQ5
%=U`Ud<sobtfB)39%Y7Ij0aUb_,SDo.T'Uu:E(O3m)[&<F?Rodl1F$kbL<Ti<TcA[j/Nho*GFBCUY;+N-Z:D\<UJ"c)lpM8OUOkCP
%@l*teK1L(%+lKncOrpR(Y#3im+>HuIcmB$rJk9lbXP]D*1>agEidF584sJ7jd.-Du8jFp"#l0GqCW79o"i`kFRF[nSL[5d,r7jdh
%$TF:C72!qg%,-fBaL3ch-OM70iLaj%`:3TDi1lF8AF+R(J1'?1G!aIl->,.1d&g#bC!AJ'q]lhPf+dbLfeo&6UiA$5J-CnQlCem_
%r2X?uHK$Ge.u'mIR";C:S.O]7Y[T0jZ^?pHkZO#L,&3+V3Hr3<gi_rp?quR%Ch0OrK/[fa+==1[R!nR51P!Cc?'Cg/RO,L26A\m5
%+i*&4>K+]T5kAhK"-PFPjT3+4#=@Ia^pPnX)(er-'%]I6*qp:m/j_kt=S0jfh#P=XkF1B6A!_=<XVs-nKJrZ""TrT[*-<OMNRMq,
%$g&k9n*ApQ2-a':fk&>eO01N[^:hTM#d-coh0S@Ss-`u,PoGoU'Ce3r+jD^SPuD%7?Fa<tn;t6D_7\9WoJZDZnmV>@F2%.,-k32m
%<uL;eKT69&j7(00B%__1Y8KS13@`66I-$7ln%3=PkWW%H4%QIHI3W9tIZ/K*+nm7qciJoK/989%&T-"&U6Ia"Q6aS[If\.0+`9Dg
%@]#=D6O#hV/R,k&\6%n2c,ieo3bL%V]%dPs&^Q_iA/N@-W<^6BP:oWAhX\47EGpZ$bf1fsR@>)$JEqs:;\rbkGn-!4`UsA7cM,7+
%X"GhF,tkQ%iL'1qn6eA$_ZQSjcG:1WJ?R/$l=Q8bj/Yh?^(8g0#IaNm^MYM(4g=I/+HPuE)8%Y<D&&lY*7[(L<:DNOSmn(\&f^Fk
%P)Z'#=`APQ^)i,)?Y?K;7k1b)AHpD.c/?PFS*l1Y'rGA[(;Ipt\K_RP"=H&%iU,MV>-/u`\:pqUL,(A()8<V]8X]83bQOP<1!XZW
%<.qGf!S7c(?f?(EVdP1E":,hH$P8qnXY-8fKM/,.&Z/LR<Z"m$aK]hu*V0.p)H'6'(qJ<rh@%WP*\dIK6\dXW_:F-FMj7UKepujA
%C=TKGEY'(s^mW4V.N5#N$ab"XU?e=PTRq<h_+nsePl,j\$!Y974;WcG#L.bC!,B$]Y:K&BZ\L"8l<O+*<V4VeTQ6+tL_L7fA=I4d
%$0E.(B6XD]:uVSQdoYBR(Oig>K_!#/UZ!`,g48Fk)a6XQ90<Y/Rh^<AFL5mF!]K/>%8_'*KbHb+f1EX)ns%ZKM(pu>cBAr4Kb:1%
%U=h;l0(Zf,!S7]&Nf*LBp)dD@Q5Dru3$liXrt<1&eE4i#%mDMh',:c^gf[K/?+F!j9EUFXb+\8P:Ro[Y?UrA[3':mRCBZCdo#rD:
%1h4V$6->Es4`D!N-8rlAiCU]4=3ZP@&2AqU!qh_71n4PSZB@M@.*9QLd)dq07S%"#El/?sbduk*3am3$lUY.Y[ZJR^<5g%\%O5V3
%Y]cqVr-'JMcVtdOW.3d\L`G]5aK4)ejI7JTiQKX]OlDHAJHGj&*BHb;+qJ>rW&-c:55HFYC8d9u#X(M)P=gZ/8Bd(k8^qu-@ieKA
%T%bH+(j`N+.g;>*7Z<]*E_(<tF+JC#&A2X1TYnsofco4+1+M(6kh3P9RUdW)EE'0)'1(9[m.6mQ,aiJ(]cD!fh?KY9Ali9NLD;G5
%,AJ"7L;PBjlrIfgghbV8209Eh7jSKNiZkFhV')2#i^`"0<m*dt8q\XF4a`DigNnZT:4tcM<t=Zl[WNace9.GAFfAEX0QX[E<AjXn
%`mS:@E]+02a)Su0jF!\ogm,6!'1_2adNkutXp`Y!_Sb^:K$t@ReY2!T;=[-9n&9-C6UE;PR%AnkV^l=1FBm8b"FkQ)I2>l`:?U%e
%^A+/16s!,>2>J"l1efq%\1$(I2_SE@Eoq*t\CY6-_hDoI>TkkV.FLd2=Vj!(X(ocgo#_\q_>m;NYptC8<"_O]A8Sk+:S6@8a^DGp
%n]:;Y/()S?l&nsM4OZ<e"ZInnjJ`FQL$gTnrNRnM^'fg`nj3n`Hu$aN<LOba62Se`ofS7spl^6jiSl7es1mKY>^6GU<4L_BM/4un
%Lt)3W#_jZ5kA)<T"itfI.mHnq+`*ucRWCb;%-*N,@JIFF3+kXUD@jqajdr64'o(mjDRUup&:KIN(rU+Pl;eHt*>0+f?L4``!TNcn
%EQQX@WsqN/k9Y2;+4a@7GD]?fJMH=:V*hCT\2rM'#3)W[@,c<L#FY&p`K>PUEnV>I@2%H-"5r*X#a$m''Mf!KATE'Zg=uhd?s29B
%?lR^f!>4jU0l"%7<Q,R,7D&XXL`74\=NUg&&e6H5'l,@-QY\On>>/nDA^&Z()\P4[L-n#,V5D6Q.bnSZbp7<8qlF2aCWI&9<8a5q
%R?9`=]2J:`.i/4D43AT(_+t?->_dI]nAPe1&(lMCi78)FMaZ?f7&/ZJ#&:O7jWR$PD&7T9!+F&692r7F5X5P7$:J#og"A928;;\2
%S@Yg8+NR6_d>#">8X+e<),4omcqiuMl!YM:(E%2Q(q0!&&>R)&#(enM](JEQ*0VUr(i^H!\Y1tk6ZP4S5mt*Pi%,Y+ZcFLQX@/O/
%*K_HILlu%,C'3WeRiU(%o"gi@DU8&Ds#+S-*1\tFFI*,!gr@lhDW5*G>,;lkV2bR65qC<0Pp;,:);>cHV)FPGLTbTposd]](m,1K
%JWp]HE#$CN"ue6P!&j^_l5/XKdk^<p(_PIESu%EG#+;%*%In/b\B<&9NS>RPUUGBZ:_diAAlj81J]3#7:e&utna0e(>[+TRG(M'[
%TJbX/AJN_&M+@?R,tOHb,X*/+I1V;nf`,gC8gQ_HNh^oXo8C67R]R@$iO/rK%#7Uf#tJ$pb]$GmXAsmO95RnCStmAD8.=Q_'<V_0
%1bY"t/W);+r+TroeMAN<6#FR-OhYT!I3=jSm"8dfL5^4AIY,4D4ud(9F06p."S$'C%j*5e@#9sTQL7t62IYRIphu=$I6Hk18NmNi
%&Uc]&,^mL/0_f_HQ7<N's1hKDMi,DAYi-bsK(#VR)!"tX?](p*-$u^)'3l1eTic/P-/Y28(n'DhNsqGC*$@"mA51O>\niEa)f\_i
%-DGTbb3@9a&4n/P9iqa/kclW=)?ilk0*:_2+F5,%,bUs.Jon?o=shL)Jp$T`BO'*(rc8`%\?8L8HpdTXIB>74\"dO^2d_c[*8JQ#
%dqF2+EA!&E'B*:&'6YKO$,Y4N4^#JD'eqDWAiZ/B8XqnJVTT6tq[_%4q/]XJK#Esqfm+?hJRR_W8DJk:EP-.)L+?Pg=,rbg`'74O
%PIo7$)8b2M/n*r5<C2uP8?qj;auTJ0Ym;AQE2dRV8&**eTr6*93(9[0S[<)\M]C!=K:FqYCS'`(fPX3-Y.:Wh5Xu&N7SWG2(l$f$
%'@k\s2C;O@8R4DPI(:fZ*6hNJj1[:OFAaot]s@4m=`TRdg?9f0^*lc<!*=IjaT=u2;S`'B+u4hN=XB$c:+TXdBL4:#>?*E*f\25:
%phS%cEKohTke]Z3,%%@&Oef>mO8#32B(4F3kMmO6aE^Mrj=DG0?tBD>+^8WKCFWm2$3k9\r&O>I/_6tr*8,;tk\r*<S;RB@B<_YM
%WbR0&h\_sG>nb8r9H7G--4V,i%HbGbp+-MCZGpgn;)q0KNh#H/0._Kb_1B^r8e@5a.&3Zp9;5EgEZ`.S<&kWk)MX1[4ps-STp&,m
%M'm.pfX#spJd\Lh(N?\FV?m&OM!'=figu^aRuYZs2RBts%I_p$f3+F^Pe\C,rQ$TFF_+/g22Q6fd#TZ$RkUf">M!!2Yaa*Pe4*W8
%;U;&Akp@?E^8CTSQF4M&hrfC]aD-=TA=tJbj<.htcHo;)StVr.L4V#Ir9cJ\O:Zea5D,bo/S^?(R)CcuW+=mZe;Nu.ed^Z-@Q:'e
%Z.8_E8UAWh4\,7CA/gaLf3mQU\oIfo*)s3Y%1BYSfLUT`_RO9PMu_f=NsR0X1G?o^/J0CM#)`OB(*$<W!fB$?%HT;bf%nHPf*l9F
%\E(O'RHsWGmY/&$<g?%AdG\&L"$R!nJE=*/JX'Uc8R#-Fjrr934gVB%:lWU1lc=-9MW1@_/[Cg^2/;\AJ0ABi1`sFD@3?`2A>'M)
%`"hP*kZgLiQ]?IEIu.O#L+8MS+sR0`5?Q/QA-__S4I*9hTPgRTP12@3bm.IpaqsY:?'R&&Xph%[S6XNS_#u&O*/#Ar#Xn_<'pe/p
%E5FXd9g7H4iR:(ChlgZ!BY#`$i"`VY:s`u-lcnJd:4*iI3__iG#V91PWd:TFA;ZiE8^0.*@_*8<-.Dutp@[Lu0R@!'NbW@'"3FL9
%,5H:6?CuWc\G=2l")s<m<'Ia0%+,pF[G^$#.MB.cVAf&H?)a')prF1;T;=+IA^+'F0#HT6f41!poP/Bi^uRmY6;k?!a-fP)B9"sP
%Y1<Wg#jG0_=HJ7XIL`JS\@o(`g<h7O)/'BsFkK3a)lhha>h)\B6WEBOP(Xh3jA<;qmi/1r^amBL;S)"i.R(@)a[ub5Ni[@uPk%Z+
%7kQ:,]4Q$l%5Z9>`s!*8;9G6ZX8Fu8*-.lV:P0UP1P]92,M6=BfsN3h'eH4Wg^F_,JKF_d9(.K"M6BpsWPZ1NO9IOTc[Z.3:mO(3
%Bsj5smeQ-73D-VMd7(9dcJ;F51Kt[Q)2TV^7%h\rXo&`-&RmA$`EiX:h*so6>$JWN.$La5r$kI3(,#fd(alr4M;bdtJRh>DFsI`R
%p(1.id!C(`"54JBpI@DHRgjl/=X@Bb/*X0kan:93PB-[h1NrP>2[Gph"0koGXp;*N$J$O?[!`d!L@9r!OqWbA>Z$iS]h7eN_H+ni
%)YL"s04[EI';K&;l)gE0Z#Url\Bon[,10Yo3Eu[4#Ar+%4#!80IoJ9I*9]"^)25'+as>;'8dl"7><'CIn3A9<1.<ctK,01b)3:S"
%2#Cdabb.8>krb:$$I`D<=-\Q#"+UddkK,GW+`YR.L7"gKc/ZVH_R4+:,VkKZ118J&@?a3J8u)OBs54&:#Rl?l-!<**Yr)/%lCqP#
%s1st&kkKO`;e8PDM'>ZiBYu&$IKuV1\k:c.k*V=T,na>Y\&.?mWsa6,Cg6M<aCWT<3m9f[n#'H84OHBq0R?<*.UN5=cWRZae_Ls3
%<Q'$'f92Bnn32uT3Zppi$nc^r5'PKc#8N)>e\-<8jnl!7XXj]s%>at;M#Qoj(Tt!XIX`"!^8l;+E8B=2;A-Js/K!c,C'O2C:[T4D
%R*]eTK8%k=9;1h<F4A^i<&m)Y3oVX_q$N1IWds(S5#Vn&%9JE%BI;`_(m9dq0VH,pB&oXHP14SpjH*hWpT(nRr#m&>Jk+GOgVp[f
%9=QWY&e$?XFC^QU=GbAg,:Ljm2'PoCNZ^>iMl!8UplRj2G(s1N(LH)eXTuQubBB=%2s;g'*831umPTp)&;%mB_\fM5(E$[Tq2TK(
%TTGPd+*21uPR57o#5\T]^9]GggEXTP7?i`BI$F57,1/8j0d/TS33FAC'd>X`[Ddq5*>GoD.],f-Z:%KQJ)K%!n=B/fT3/R1i1o[L
%MqFAJY'c/b8Q[1le`8gsea0U$9GSpGrQpYR'q,^Ab!*fIE:/kL,t;JXGBGd"HI>\#F\*U1=>%5LFO2^U\dT<OQlVa0Jn2Bm%4>)K
%qA=?t`0's2g'"Rm,KGhh;4kOI82[_2[f)<jW]Pe\5VNZR8Q<lulXm!saf%p$U6$UpOppN*Teo)Xmi4V;#m'S@.7Sft(<=S0DCX6[
%-e%[F&(K-d8cnRC!>[!b"rtg6Tts'H&^Dgq;+UKJGuTIV,YF-p8<S]J\"V6?+W$HURUORIZKL0^2,#P13eG9Fl!+]k;qDWVF@DBm
%7Hii2WQ#s?2k\T$<.G',!LYgo8WkQOmbf)d>FZI6Y(4,&[Tin.q0<!H"c9'&N6fmU1&ImeNa6XmLb4]*'%b\KqSqePj1"6jLg+(]
%ma)ON/FSB2<o!ukju[H#k0_hf$?9n"9TmXfO;lah>[?\jU*Hq\^_Ee\$1*$O5`@45iclY!%.H0(Tu00b.%d&bEk4$'UC+aZ23@$P
%AX+k$09ZO?5h'hKAegl>0VTcI7%A:4<Lip1WG<bp?,:b/.S!dYKD#r?"(F.3Z;EL$=*tXf-7-j/[$dqc#:,U[D,KL_h&f*P@EA[A
%A6W:c(;ClaJr?.k^k7AHJ_e',[,Sqr-C8q.ZG</Q*]2I=I$L*O'lFIRBj+s)84(hA7$(5$=!N?S*Cj^kKb>7@#Or't$&8U/YZeT%
%/<>ZI>9)$LgrOW:KK"%-).4n]K$,-==;Rim$FIZ)VFb)`iWS2'nn^Ys7STI=1j9fl2!@[s.)/&UW0^\tXr2D7oF4<$Z__PW;7!5/
%;KH+tZ)_hj75-\hG'8Uj`Oh]kfB1_[73`>k:aOD#[E?B"\iuLrX4In*i,keAnGNq?'LGa@76;u&)k0$IE.n$lLrAL,M%Kbb<amXJ
%Ei(/):D9&6.3r/0O`.!uP4:gtl^Jmoa0e<0WQ$RR2KG*#C<MG)%^n7lBOKY20YV(o./1bSU9BFY,F0RO2;F5i14m#L@%=R_MTXnH
%Qh8Wmba1.]>Ief4hbP)LW!pe)D`S]]'B9(DHa_e@1_&JWT6abTe;8u(S#?FF`i';sU`[hsig$/iq[a=jZd^RH\CUE]"_)U$&qZ'1
%mLY-RHk*49(+[GEPWqTq;*m]r9\;'H8HT76BhfK]A&]kY(/:rZE#b4163KI.2H._!_f@'i^cjS9D\Z2=i=<k&\]Kl!"KYXD[_X-,
%!A?hJ+^R0^-I)oWgH8+Dl2o7gEbF<Y'eM7AIEj"tBF9\LM4l)I6hBNO"/][N;<<H/LBsUNQIoKO`W7-b=dRTM@#LGe'mmF.JH2`=
%;rKLK=LQqVTs@$!!B/&<_W>3q_/WbCcOpE1OmqhX^,:a`M)3\*<LF:lQODpFredo)<Z7?6Br^ePpbV3Y.^(A7fF]0[H\V(5EEj7S
%^_K:.[j7Wm%j!H"E&CI8@e!qs^BS/EA@5Ztq1q(q*-9a%Zk!#YN:j,l`!R/!Q&'L]**q[W3(dX(?\MEVW"n8WNg_,lQtoB7#*U2c
%_M.$e9DHqmask/E+a/p&T@Up)%[SP%_n\(<52Y#RN&<L\-&cMj3G'gZ2&3^>O`N8`a.@`/[f_trB6Of_V^EIbUgCjmWCJ(&9cE5a
%*->_Q\BZYg_QiPHP0fGtM^&Os@8'_7p;g@"l=c8#P#/2(<pf+R&jLeK?b&;7@A#(VJF_apCCp?.&l(JhSRXG>9A99r`U%`[0#Yo"
%$RZ\HEK2'BE?l\_1aE]#*F/;kH=88H6lX?#`38s80?HsSFMoHa<S8`*C,0u8C2!O`JEs-`56f`ccrD?Eh``:M6&?a0N.cHH867PZ
%!gT6b1C+S3JWW?t=qht`_`09ugGfh/jOMZEquW;,d<JCI(DaW9?bH0dX+qgk4Fr,i.:p%8*6[]r!f7OX.'qpf8VRV"9^\p6Eh?4I
%p?XIn+V]a*/e0Tk]B&8/Z%^,5#`8VG@4HpsdZp_Z@LJ#q\-%51jL4u_34R0B@!,o8Ek>FDBKCN"-CK%T3[T6Gb(^PZ#)XaSfje)s
%'^:1._,!fs&u3LtkbqK_=-NKcrKm(`7^S0%,*JGJfnC\qM4[s[&j,/<)_GOj+qs=@;Y`k_oE7H?^m\qpY`?g=)/5rNLQNkCqVkl/
%e2o^EGIV=^W?___n&`Cq+15^0.dgi@<Y\,2Lt1aVa(S/W*1@.76072`V(@DsXbt1+b;9a',@Z:("h4gS1_4/4EO?-KfqRlm]9pPk
%`$;6B\1DNN#)nE^H^9=>=Aee2&HZ*O)bT2M\IsaEPBlDnYZ(J1(Hib6(;N6"E.gNLs&@%]GQH490*T?l'!Fg"OV`:r-)ACA&,+S[
%rTA0,!]3NP,TQ8Ye5kr34R.er(T`\^>YC2PDj&n<9B=<b[7K">T>Si]E'74^H&DZTf@UT)/@r*nG[9=_L&XR37j*r,YTP4S;lN,A
%-0c*,kMUYsrAZqEJct=?lfdW6(o.K$NA"IRoF`Ei1AO*Q7up5Uod*D_Z8lWTX80$C+88,tAXG*.B!-X.R\lmfTT-2,QSqXfIrW/Q
%]AZmFh$^PBFd:ho/D"%\8nbq(Cs>kGW*qpCkUP[",*:\pTOqQAMI!qZ_O;YiJqQ#)lnGNBb9QL6%IB3qE=b#J<)dZr5emt1Ht,dQ
%_@o&kY+0OPfl6lS#-U24IK?3"2:fbZ(,;5lKA*k@$5*JAdK6`3q)/LO5UXcG7>WYS:g;82+B`W,3#MugOGO9K>I-?O&5Sc6^7*hW
%DiSc<-g/ruS'm(3)1h,A,X08D0>9aV4H\hu7]E7knJHeI^Uc6?Pj<Bu1\^pr*R$4iTr`qa2,)*pOWAF$[i1.!-^b*V/h3V/9!p#A
%5X_>OXbNB!U(qY/K$[."n!`XDZoCcZa3\tE3H;cZ%M!<FTBY>L2U;j2(i4<b4Hcbbp\T&tSnRpC_o9;8^3F5A@=]Y(rL&A77%V^W
%MG#K/?(TL(N!E-.*-4OSh[4@(ijlWg-5j9QoH#=mn4OsFAqt3-`5E70p,NVWita,&+$?32H(f529QjIaLs0[aV9S&C.'C_*j[;NY
%P-aO$GLlBF`<6#HkI$\c+3r_c^q[%sOr:>?JE=;8\>uP@+1'p/b.?O>W]rj.Jnl%bNiq6%^nL%`'F:#NRDK:%"=CFRl>U.;\DA3^
%2E_bULtAt6k2DRg1DpG\N!@O)WLW=mdp,%Eq";"nU<1L'[/$Bj6DM\*nX*B$80[mqA?CB/gSB6GN<\?:8J=u.)O7*;/@,9\-)^Z?
%\rUQ^2Zrf&)''r3%nOPtr]d.m61]Ur?0O+g%'HQQi91e[An?^]@him<Xn$GT6(e2D=Zg`TfN:N["8@IPA[=0NDGj''Z>F##5:=Yu
%@5tknjqaho;:a8%p(A94M.TJPl>6Gkc4n3Zc=oe2obVl[jD/&O;Fi&h`@456'(/m^HYumF%cVrII3<EgcmokdS"qP;!?VSh(1pG/
%&q#HMH_o_ITVP_jJ4Ur-$*!0t8k-6U%Nl"-?MkED;`f%_JVUZ<`NNB$i+q)hcg_nTk?oRn2KUD;*2ZGM?2?ru*.3,`.i&pm&9LQ%
%+o"R^+*dt+Alt^RP#+V*/SPY@p*+3X@P]Un<*r9]J])0c:7+T3iE],9bgJ?_jWfUU?#POccLq&CAQ(9!A8@,sfV0h?,DdFPLot^F
%EbqPV%#;/BF=mBYmj?,eU?&gmgKf)Z$1D0Pok2\iNSmT7C,e.am5u0t5?N9QTFs^gUud/e)i?-kEp[tZLD)bc=eh58RL(nt=J]X(
%>Qb]rbN0*gcs[@)j\cDMChS\mMJ/1k.R5.>Z"Zt5P3@o<,K1*6NSTfrjKq65bEo.=kPiU[l;7'$2%DJMk7]<#8,3HX<E*ZX\ge.^
%D48&`fq!)=R\O]V@Ka1F3MVDJ8b!^K.OAC=1@2(8<T8r#QgjoEQ9MZ,'r+N]&AE*,H#8RfL>Cr(\fuY]UsLSRij/(?GQPKDgnCI,
%;%4$dnbeD#ktC:F.J=!LL9HnX,N?VT5hAjLRA%*qk9mPYA&gg.`Z4[X:L%/O#a%d!V!)o/R.:-O":Conm=`TLYlhlMDi#jS'iE=@
%7R9Rd7uo84L+\V0?0T3ckCB[p'B%K*&oH!OlnAN!ap^][!/W.'8=^uf>nLinJVuX2FIf&$9fU;7rab^D166<$&b4u+9RtRS])r1p
%7&6d+=7>tpE%Qfr:&--L0S-+IIJZ[Z0[4a(hi$]Q\msC8m/okfDocZ50go,"P43V,_>tQS;5r8!NuDqUfohU;q-udAE$A5GF!$tB
%IKBjUEC=&eXU^n`I1H1>.%_AaeRP5&Er"Xe;,kLMQN^:aH$2io/i#[nr"UQ\JQm0K4]:1rULO,S;\)8O+ZZ^'El/m";b+,T/t:pB
%]irEn?`lOJ.^JWiXG0ZUP=uqWpq0]Gkb?qMBXd'ZOs:/%@uL;P6=e]s<*.+OroL_kJc^!DbN_Mb2X5CMij^%_f4L4^9!jGD*f;mj
%`B=p]d8^OPiA2\<L'GEd!/[]C2u7c^bD>UHfnuiWOn1q@^cHTESD?/f@2GXh1)+-'KX[3@8f'#4X<=ggaY-IE2R<%n5'ro;=Gpt7
%$.WcdZiNWo3dP)CMCG]LZq:t<Tq65S/ZN-NArqB]#;SCeA(t8r]PXYRUc^8Vbpu+,6W:t$@P&KXc8iCNqJkUh69Um'Q@oYQ%;g94
%L%E?YBP&BaVhLgX=6b#1,(k_\!7D38G:n^uR&\@11_.h.W@FKWl_4R9ibqTu&9.f+!C)[D*dS;YIXmmi^Q.)mE5ct@TC]CL8gdSU
%3%P%YBqj49+"a`GjS(ZC*bN_bM]nMJ<jV!:R]g`pUR_FV\;mTJ+:16)&[$m-RMW-()$r&1o^`4[*QdVBTIFPR2oC.GXs:9J+.m>'
%gs@k=XX;mQ?ZMHZ(E"S!U*>F1DCX'I`6"]>A[6^*Pik,&HBRnf'_(5P/2`o%((9E:ASOhmAHu%55=_a/L+uKIAHa,9[,a"7/h,k:
%.0!q!A,mpo>kRGBa'pX23Xh>d'/eWYEPr/t8>buSV4)bFn0A,&f+Ta-ZS:$U`##)Ypk0#2`/f"]0m"VB12'PDEoEZG3Vs:(O/dpZ
%1^VKk94GK4(*ehl[MUj_:D$VF##`gl+A/-kWb^2Pkt\I)$$:mF%X$"bH4@&O*mEkU;n,pT.H)`_ZX@-'FUY'If1/3(MmM<O/UFi7
%g99sL:+Sb7S!UL<E(j;g3A/TOr-k:M@Ao^T#c1^9s,*P!<Hf$CA&S'%WY,b]I0Q.=>['mTV[sWN_@2l8*Q($k8-Et%DmY:P-An`K
%oR)=4[2Leq7o*Lo;Z`lf7IheLi%]@7Y\:#+eg37HOJ*CY,9f_Os&j]X*Efi;3p`D&s209tcigGfFbt7)Ssil4TWn[<1(:Bq(_+&)
%a>CJ30L;"Prn]@^F%+U(bQA]^Qfd8\;4/<f1=s0t3<ikgE]8McQeN?Qrq\'0L>SfPji?7-aS7,DS?IHk,O*>T>,6S$G5@J+KOH:q
%l+$;F!:G"d.&$@*no.1//[Ziu[3"-$"LrQd(pP<G<MC,3gNQ5scX[j5[2CCn/@Jg96JOf5F%`mt?=bk[ZM6_-XKF_3hbKH6CP+jN
%b3>oHmW%)`NQ2pj7DpMW%osZAN6Jiue_1NQ3'`/dGoh]*8ibY8hlq%mrNM+g>13gn2TSJ>)XKFZ."Kq53^pcQ?)IZl[['UtdFE7t
%9L29-+7?'!kn=>7<g37F8'u5fQMkP`HM4)%Jie96TSMtQ#2WbpOluum@V<`KGOQgHQ[t?3!DS,%(t>Bi/Y&[V7CA<K&0\47THo*I
%XZ,J_]C;>TC#E(5R$q*7K$!nbLkA+8oEkB)nYk!,!ETBT:[\CG,2QfcoK4eRYnF'pY67fKjj.mY*\K'^/FnM+HoB$M!@Jgn$oau#
%:G*PjE3L\-FdR1bH8>g)c?^lB09C<HXP`C8BC:\u:Q<Yl.#P6S@0GgC%LA2m@)Lp)[X/@<O(D'6WijKUJfo5riqQ4L;7of[,6?nC
%SI1aF)W;Vnd)r5<'[merJ4Mqj86I"lq<`it?WJW8`uk<nc7RZ+r4VH9B_#-[_o'TtrPYr8]P,\no/j`P_Z'nX\M7NF0o=th=/:Nn
%@!G4")blPkMf_L%!sKlJEPD<JDY.tJp.CKogpNX_iqlFs71!WcXHS\&`b&))JHM':I29no9om+^SDh3_F+92ZH-,pMG[FqJd9p2?
%^MFN\7([T/UuDf<qJGTDSg>%X[n!t/PqPPE)/^/<&XQL8q<B`PCQ%(^"fF3NAChX)=I]f1>F9id'/pUV'DhZe&DLW$Z.kgflhG#4
%?ak_"EDpp-13ec7SUY*nYY]B`rYNCmVf)lD21OA9F7a!m@=O=$Jl(!tRI;1.=lr3e.A3[:gRR!9PpY[[XW@\UFbp\!25PIj5=G(S
%a9S$%W^:!Sm4U.X8jNtGcWfG![*DJ(o'>3<E-","m\Cf+Ho[A-'`[)2%(.4<:$.B)g0kDK*'1Mf-'Qm-Ij_IcK$gWrn]_>T2p9RY
%J+NJJ9/3ijRr6pc[eYcBN)K>59rbOd>nuu(MF0IZdTSrsZZmkO`$'u8p7oTKGB4S3+uu/sFa-*qa4l5jpTJ`eCq$1uMM?s#mIsK6
%=!_%2Ght`nZ"Rt/+Q`dcUm:f:<;/h:)3l-iDbLX"fNVh)f\Ub>65-f#b#FStjValln?A^@_7iCZ4ba9EP\,2Pc.`XSk7m<t1'!Lo
%]7J<]Fc9O'E21D2>sT_]Rs2]mWV24CQBsbQ^LN0CQ[:qVL2th?C*PGF?=-/5Vl_0?^__Y`+u@VCjIV-<9gO+q^Qh$'*6B?&`2#QW
%jkW]>7MR]0_*:#U4>EaV^c=VW#q)"XPVOi;5?qfrU.?*BT(Ng57\in.\&>HU+joP59D?mfGhar*XVqs\muJR2F/VQ7pMmL>NhW9'
%8[I)R[-/jQHK88hMUIPP&,A-J"th\<4qH=f>5jm%2M,H0aF2("r-n-,*^I/HKL[SoQ6R]bHO_d(Fs3Umn*4]?b^$es%Ir2M<-k^]
%+Wd=$fGLW3R;Tq&,^l(\"QbUY(%XqP5TOb3`FR^W4(Sj\&ftf+\C(+<b.am6/M#:u`?4.SPogIY^:8M\p?+TH)b`gcH:TS*X_^,U
%k>F];Rr^D"YL4"$!U+Y<EBa@:Xdd<FmKl6tJqs3RFgG(B2dT5lo$@K%QY3TY[^\l$qT1kuqUA^.`)V@=R+2ZO'fBFUPqahM8@GG5
%%%+J22Bf]>kKjegK7I14R/0Y7e/2th\doZu!3]og]iNSb"h"aS:9c*CpDGTa:4sEt6KnWU*&I\CN.26aEFZWModD<R7450k1^q0-
%Xng]0mDqL>ohG0V,:!aTfR&U!V%tmuqN<K7Ei,ie2HdqL$JS"Y-TWmt*poAC1?ku:%]'B@BD=G20J1Wm?3n_W1#1/.c#>QA_:@np
%G8?+PU/pd5PN'<3;!=W7!NtD@F9D!h1!72-$<'Vf+s%n]DUBeYf`A3c&He]IVCH#DTQ-+[Ip&;^Qi&n.nRr?gI6"S-cMqqF,M4qj
%XRrGA>,;6(CnFHc$nrh7lIm"T`9upfA9P5c/#`rE;kWkM<ii19?pQ=j*C)P]fNO#tlY=4A6?;Rb2LdrO7/.Zp4>OQt)X99:Q<A(T
%X187ko(BWh^RJO.qJ4rslF@4Rq;N`Hk&mZ"bZ:a;e>LMc%j':=VI:OJHl>=DUX:d(Y1r``%3m1E36]tH+!*=^&&=]\lqupmOSd,Y
%;M.>ulo=2o_V!W3QqeKO"!f3fH5co1Ntla;Esd^OF%k8`4ne%*`0AmPd7&B1VN:@&#$n/e":/_0@IbaLeG(O.R\G8NkEqj7L/'Ka
%(uL6Z)1D18%b2eW=!j=JM&O="6Da9rc%HI.in<A2SJ:4br)$^?@\1)hJSI.[QmuSACI!ufs'15bCc,g9lF+Qjqr>*+"6HhuG&URd
%e,Okm*o?jVS#^".ne&WoOqp!cjK^Kj#sWcTXp&PGTGt"f=TeH*=hhY2p$Q/LbM_gN<\6k/..]m;_ejHai1/6ZKI3sYY#]-$hL&d9
%d4,1Det#q7S*Rn';tPc-(0i8b%f;gC"TX.Ko9H)D]/u&3JIT([>dagV>%d-+6@8(M`S@>XVIT0)`E)O%7FY#I@<$Rg6$L_u?Roc]
%T,#n2o2D!]9cq)&;\98cEP$^B"5JX:qDPN3/IJ/P1p#<(i)hBi=OG"`AEI3#b;s)bd59?3F\IYZ(rP@?B$?68P9HC\/tNN-ONC66
%Lu5]XbSppWMhG=*M^`:ioV"4r9JSMXH?92&5'c]I`.ahm1b[LqZQ-HZLld=u]0/dPX?41sH^/YP-Sp,P["\&;h6"Cr274X`-QW37
%FC*eA,"E<p/#(nQE\1$H!\cD8*'Q232faR45*7-Kod8QtD*=B[lro7d7=/mg/flXD8bR\`#BGSI7uJ8+)d-HsBG;*[#KH6EN'WEp
%Y(-_r7/=Jk0j34MiYBgjeUXWkdfu<HCcXCi,(-pb&jZX%f/LaVkBoA90*R<Z4ND_D\`!!(^Wm)g8;SuXRTmZ!Q,cM*)%<Q+K1o(8
%Q"`[X#\i]>9hKj<:q2AkiYoE1fU.rV'Ck9?Oj5<'e$K;A!D45PR('s,nDfRZ*dqI>aB&m"Y:&X;120)fX$+Z]?,%?mh.PKZOMHoH
%+rVh.&r@b#?c0gmI?WFlZ;mkMa[BU)%Q'.N23F4q6"1Dt^6OF\J_+tASSh?)Le2\$qhXd/h[EGk1PodC,:!3)]VQLK*tsKZ#FaS\
%jclrD5fMAGqdB.EL)%>Zc=9S9S3'/J3$ol4j=/+*m$GkK]02#i+t_oN)TQkhX*cjO*`f)UAl7+jDkta:`?)_r-F7DA!O>Z/X0>`;
%]9FKl7V&0d&[H>_Y]t+kgRi]+D^;!]><9##I>qWX)^5sr6e*/brKr%#c6:4[Lg!E6-sDO,-2@`_4og>eFj$3snKOoWF7kJT;bTB=
%bOjeNA<K_'5BPY9Ym[Y5i("-Ti[e5cVk;gYJ)]KMI[sWXXW^i#2WZq'B,d<Uq(o$u=-QZU\r!A%6rolH\FOLg>9Jbl-$:b'FXiqF
%-,CDo?qN[.M*mQZ`H`8]63q4.Yp:A:g$ORd3f+b.3+6i\DCH]k<V6"LLB@<42u%FiP2I4!0_"T.Nt;UtpH[ZTmt"Y-eFjBY[s='(
%!X]re6jAnjD_Vq@-@fjC1;kB40ksS8K2h6=!q-pAmN<!3pOJMlJ:G\mK44asMU@rLG"OP)eRh[&+@E=CLf?*;PkoDCS]2+E.2J=o
%'cUde-O[K96kKQ\h[lJ'o/jQl2r,39r@d:$OP!-o'2Ku>"YOJLWBpd`hH6Bk75ZkuP:s`t"OAm9QHB!BR1g")ZO*.,8?0C&qiB;4
%8eT:M+a:^W)p%3@`2W3C^F6S,`dmD>1ps;iC\uQrG[9X)`bBK3#Q]3p@:qLIA=n<q;n7n]8,@m%gAGt,4$Mgobc@P1fEGu5]:g$0
%W>=PB>7Qa90MLO(h1l13$7SO^aofdT;RBW/IA6"fXf2\;=If2b(G\4rj%G,,8r`U<oDg^ii1YW=s.umAe)ALf49#KBRJe5i!(e>S
%LU'!(\\M-!29gIHa<CWkPiA:\!/S*u_<>kmVk4D@-YVGb2TgS*#GY=ac_M.<"p_pRUd;]U$*HdjrQ_UIFAC>g8Qc?XX6(,g#4tKS
%Pud&,X9I;/-p=$MWZ!/.Kj@SLi?Zp8c+?M1Z#cZcB6(i8ep$Tq^a9[T)2](*G'oOIPUK26`WRDErhaO%BbI$r6%P/;aWerK"7!(R
%FY6UL=8M1K?^PBn$]pL)p,ote*)W>kZ$Vl,3LTTX7X&FM,Zh_ek%G>_-:!=sc!599%5?_g4IlUfE#8bjK6q/<<B%IjPjG,pHD+s]
%:>`L]>1HR@L"<63;nbA`OI.,`?70T'S#UVV/J76P2ckI0N.*qDh2JK]+d<nnHciWIlNfu`mi*=<7u%^..j,Wk?kF*O8>9ui5ZR"/
%_bTU'@X9S''bKMIS,()nqMc>sWn+PUcO`):G53mL]Lp\/;6/oD1:P\,O:\am6L)R6cuVPc;Pk>PW6`Jg\3b][#T495h4'd'_.#E!
%rMKW192E,g3Vq/-+B_I`BNaU7jf>u4oC,@Zf40c2B3e$n:h;3[640@S5`VOEnfaD<SR(K?ABTDKE9&qOStp!H7R3gE_#>[N#LjtP
%QbUNM+T35)O(!<*NBL0:7PkhWnD6NGW)3I,?qs1!f+j#/9T]c@(lfj5=dh*'>jTq6Rq7XU-fJ^^,6kK;Pmfr=Vr[U44MA$JLR!]q
%b:#*=./4eR2QU50fiN]aMO:9,7?QQ"jqaNNTT'QI">]0j-No*h;3\,f88g#MAMSR#>;1Z4%Js![)[X@"-&,[P&ImHBl0'0t$Blck
%F=.Y*i!Q>W0\J-PDhg)-jc4uT_QeG1*/QP66c6pe'qt1Y,b5S=(Po^``Zg$n8.0]ioE]&EqRp$gWMJ*2qWlpE<t:/#(4tAkeTFIZ
%@5cP64]t';]0[/:ak=ctqf#]sLPL;rM#qPe)CFg4__T1_M%bjlOR(G)\RQNaJI*b/,M,H\04Pht#@k;hO2,*[6H50X_PG^qQq(=a
%fIDEY#,d.1TA1U"M\T4A/pO*K@ZBGpD3jVLYc9LeM7DNYB-4VWD\O2"o*`gRBj#GmGo#uSRj8WUPK`#q6i+B'[FPV9ifk#'%9@>:
%q,/FZF9S,cJhu>3"b_!Rn3+n4dpll@$GK+,.oSD=.`Z-.D>Icoa<DYY0^^g$2Q2Wi)9fDR0Usp[YaHEP9^RA:H3b@18C->o`"cji
%a#X"-W'$G!Y&qRnr=B3iW3"Pb81<W7@>Yo9I5ilX[8E-&:Oi*"i%7>'kto@ql+:9T8*f@f?Nf)>GMbb>/#DZBYnMsTQ2oM-AGqXO
%JkecAJgI,K*tI,(7)-et2V0"YZ]2EE>\rPU93,=\RinFA7Q^+78r-lk7M?;d4H+<lggVHf4[be`=$diN`o9sSY2T@nQc^V\'$?&]
%\&>86.b=75QJ0rf`5(=EV0=&W[d'<=Yo.8s5F+Isd@Ys7PJuee&9k08fc<Z[((#4r!B*1>Oel^3q<[(/On/"U8<<*4)m7j$>W2E&
%I5NdU3/hT4,Oq`eKCfF;k1/r$E]5KP1OiB'^Qs:\H#>%&&/pB.DP)NPQjNUeDP;b`[#6q*n&;Bm,gYSAXh3o3_2eC!P8+?NFRRdm
%Yi5pk]uq^2H!J=`L["S#\#r2L2U;(TeXSmf3#q@K0b,0Ab:/s`*"6K<cre9M;9a7MnmGU>)r<aOjt_iok\lNVae+qlbgiH70W1Ag
%#EJZoJ`AVFro_isI8>g@Y;A^b58g7c]E_`'I[lD<!hq/\Q,.^d5mYj>P$F1@UW@$];fI(/Ut;Y/=UFCBP]VGf+G+>b[gZsU"T?L1
%cU/1/"n&+(K,VR'G==>VSK;;eC1%+r4%cu)A.t!mcPmg8!'K]N_@[SQ&mn5dA_UH=S5J)I:7R3O?SOGBgUl=_N=H!3&2spjk'JaN
%rOI[gW^jJL`;DHcDc`\9A:[-K9jTG2i!Jnh-m49?1WVW'Ys;Sg?g[?";b5iNN_NdoGesr\_65PWNLKt;6m5]p%LDnNe,EZ4?3Go5
%3^5`/og5KYb)J9#hOuD0du*2^f=b.<,d.mmNW9t0@EhdN.+5ZVW=Y;PBOASP@$KZ1jrs"seUeTE)*$)+h"L1l.`c$B_9O3(rAQ]I
%57-,14@PQGPp$CYM$%TeNs^)4n2mLR8/10ia-F6<R*:tC[o)78Re)FM6@i%@&e[6!R)gZ.GWsiZjaGnjYAXsP7q<PM<9+V)V^AcW
%l#>3[5bRBt.WslBr-nX2\NHL=+u0Bo<[BFP&>[7I(tJmfNXEci64k#^C\.bV>H$t#^d]<tEE"l!E\rU/eD:>ceqf?E-HG7p++<"0
%2uG^ln:lmAT3:dmZ9=VBl'U;9<)PU[c0sJIhuoR/&Xi#;IjnTEOE=a`^euV(^d=rb@Q1$FM"?R[r$JFh)\]'rno"FG.MqZ+fg6k8
%::g!f$BnIRrD'Z\76#oaQOQ==9-2F>gHTmZdGZ7S0dpD5eQ\Hj)X8%lX?J$I0lCJqN2;anA#Cf7/\;`8erZ$P%hI,i93_Rqeef0V
%CVj;^&rnUY'E)/KEC*%5R-KfM>L&E1;9Vm7:kLMN9XK^/1*bJk^*Ik(8Zj>YhBG[#4q4h!9rSc2e*#g;N)ipPP)c(b5U=K]%p>&o
%,W&MQ)9W%8%L6_Fd(m^Ap<=m=6EI/d,lMkMMQ#")Z-!7u_CB>["Tf@@8^"6pV!:kf(B)u)@*Vqcj&Fl?>\Rr!"TV5ED<rUF!l;:a
%O'C[f*@I5)&rY_r'u*nOW4t[jGnUa.a(oefLlUYq+TQP9_Og*GoWri'YSZLZ7f_!GeHW*(FJBV&%__.Z(R`SJQ*D(VC7W^46s>K[
%NhEm_ln&@KDY5;?K6C[bj6mK9)r]B@JIg6$FX<,$YDK\j">8[Y5a"bl\fo,$(&HRkH^a;Z5L,9-,U&O\\etG7@mR=/3@FB)`S;8X
%I0g1pDPg3-F?\J-HC-c6k<kMNp34e,g4k`idr,Rs3_U^9fPfP_\$7MOYfF+#Tm1O'FOMl/"ai(LcS9XD4fTVhjU;?cL9@dEbXj]X
%"@/:6*kS5&2Pdb3VALDRMr@$SaBZ#n6d*L9$/*Dmk9][RCs\oU"[Z`2qS?FC%r?-"J!c"p0Q8-PU(Ln8MQ^C^OVhnic1GHtfemd?
%7k0sJJ[>\sWS90son%;@g'JGXefh)+]i7s)Qq'-5_!6$7N),3ob0J99mgdg]N]iRPOmb+(\/;Eodai!orCZtmRi#MSA<Br9&:J;1
%"<XL$B2nQa)JuTX(<[B!K#HT/!gJAn`LC@_f)m4*PV;8iB!g7VHbGPsA>WpWDU3Gjc]ehK0tPCar&W"&!@/CD!*fiGO:4*iJT01C
%qpB?D(pG=,;/`O+bY(l(o<A*Cr\nG_o5@</&=h[+:_Sb15n/hk]D.o:+eCg5`!FM3o&F*8k[;sO@PNlgWm5fqdA![6eEh24-!7Vd
%!Ya3eg!*Vjjrpb6.aApu9Wu\W8<$LiZ,jWh>r%:LC#2cuPrN.<e(C/5.n5M'O!<SKEY&Vsdf)u27bH6OBS@sOc-eJUO<dJb^!!8`
%2'WF.8Cb;)\jOf+4C>Pg@'ul1.ri=]d30Yb)?po'Bt+0iS5GY?G8Z2X3Q[#Y-0MeAM8.pf1%tSA)Z=mu4b5D(')qsY==GDQ&d5*,
%rRBB0nTXBDqm2I,VWt\=#N(=u!lOl&-tMYGapk-J2_nnB;:+?&^,IgkeBk!fCfjQVRt*poUl%t)l0GWg8UNJp[3QN;pPgO#%PGpl
%V)WEId@#n4O_-,rF:u]uVtm&Y,t6W\3VM+=F8-L0?+5=cF"^J2Qd`T(73GV,-DI;ME@*pO3b:p8<@3ij]=:S!OZ:qr]e6b)^f_[^
%#.5DOo(gO;+R[&UVp[Dj#'.)uOZG'7[pak$Gh!I*j/Tp?CIXu$`844&<-l"W5QglUJBG1L*f%:!=Ko1bo0d:LZ+"gJZ\_q,:`0\s
%<Crn`@?0e>(AL(U/)D=aU_-Y'6ELRR@WNn^#QWKh*US9InZ,k$M#>Z5C\q(H]\,qL^VZ;B2lE*8j+ce8atFo#Bb[lW6q@quaQtR2
%)&=/<<NL#aJW@X+)T*'r]8mD+-Ra.O(g)4GJjBa?H8oX*oEflt*`r.6o7_[2G!]&q/'jZ<dLL.M\l<N">s6I@4!^(#E8*(+*#ZmN
%a\*tSecHkL8t?..TpCkZlkoDF73/U#k.dTWS;dc9LA\JJDm!3!(^>8]Ek#@DL<7X&\@b'ehk_hk?bJd2PL-l&h'dO\i!WLeH(:T^
%"R#1p#%2T#a</P@SmMi+d>Sh^jc;P=^%Ko`UA\VqFg"KHPS2d[_>RSbns`cm)0N?kN.IA(phkV$8YUo4GFI?M&YEUP#TBHf]^=$`
%oV0p(HW69HrdtSBWZ^S#fu%jCRt,lDZM\7dnk]kW7$;Y<2\:Ndper)6Ul%Q0?D&;c/QU=>Ss-)]1[/a<NBrRDO@jCXC%`N;I]CCC
%Cl_j<?8F*9]GOZ35i.I&2U-_O@p#_H%M`KYQ+LcKf;$ll/94BOjoJSuN6[Q]K,b_\H8)-_Xf\NAhaPAZ$A3Y?E'"Gh#:r3!Sc^+,
%oI*7,QdY%[3kB6FnZZi5UR3@r8g*,.[$Sial)(\UU>(s!B\b&Pk1tR*Mt3NuqGs]\HW"&l?X16G\8+C55DRrRK3DOCX&L;[Zhb!;
%MEMN!D:^9j3g^JkII^!;kg4/?%@Srh#NCo<ghOLrq!>/PIIdht^haXdJ,%M0M,b71&he&DlXmA(JdMRl;qE_PHS"`/N99bnHk\MH
%M]*BC]K_qZA)VqrMF:r//.PUI'WHFR\_cLmXmU!k;Mq"W]V&u,,?)Hs='dT3Q"BKO2A4],.AB_)8QNB]]g\OT30)=G2QNIcPE6D%
%3E^bjc&6OlP:@]%hp$GWKNej&_B+G@<B6-(M[<1ir?AO/>Xl@Y1UXKgI4FN\1@%@$J4'r`\6hLU<uZN#P_OqhV^6Xkc/6=B:[KKW
%q[BdR?lu+_VbHk#Yf]6Aq).;p3$#Nh7@Mr,-`fEO)j`:qX"0FN'n)i?-5b$KYG+/iMW7)*`$fAV@1eh#%#H1`/s]R1<(L6f>_Of(
%Pp-W5$C7-pjl[m=qaNrqiMZMHZ9sZ%)b^'U=c.pIInn%m_Z2Ee[XE1I=KB0,\]]nGeqgI=rEr[3pq$8TkI$DhjgO]Bq^Sc3'Q`cf
%_Upeei8sJ"64l!dVW%MKnKQc'`^>k&(MWR08`3QO_un;@4\j"T4=4?\)R^!Pf&i9L2Ul#T%9%^XRZIi@>.-"MB]1cp7?0TXd!=Fh
%qe#t@#t+b&dm6jtm/72]pDE&=<Y:nM"8*9VQ&=a"Wurb9mK#b%%IJt[8Nahd5c4s'genYq2?oG^WA1+CN/-8[]+Wlgm7E*b:qdRa
%H1B[bEoI3WODU-"+GI'9*dSP8ga6)KY=thg;U^Y9fYO&F'E7.$@o>##r?)Q&9"&Hh_<c.`A9=QD6HQJM]"Z[CnHp9hM\W8.g_T9s
%I:$2/'TjD>9Qf&\P7EB!3I3VB5pAYG&EHKR)Zi;Qa.?EdOGkbHd'<`%&m4.,/&!uF)q7OsChT9K@42;f2QIHI9NG^lX==$JTlUi0
%@;'@le_#nZUO%Tj-(LK*-$T=WP$aOs7?T_GaYJUt:0Z3Y[%T%A=A^;3aM8khW-KP$kdg#8/HfW!oO'-o43s(4UHa4Z$h'kZ(:G\b
%NH\1M9$'MP%TSc9*gSUoAmhJY>!.t:Ju\GTW1,hZgu&rKk5ffoX#ss62J8qd([i^;EGKlN7ZlAY(t3IA6CZjSSPasWJ`pS3Rk;'4
%jD/r;(7Fu1gGm.,IX4=@DLY4\%*D4%GD&fW/,U/,ebGHnV/I0jUei>sdPiO2/YZLU]D"RJc#.c"nc1T>c6!r<cS<k9m\0)F=6O3j
%!EI$<M6@(;9Sj2_ZLd/m,+)(S!/[0Tn=Q@Ba&f6\%X*XQ`(X/):<WqbcJFmb,HS(qP/+ZJ01'T31s8s[T*-@^&uB5<=.i(EZIGXA
%XI"p$0dT'!dFWXH5UduH7L%(&HF^F%Z$3$g$t=DN:bY@+hm$cD,(H]&aG./OIJ$aaT.'!b>0?KOKnJ:54HYTMK_Iq?GQgL5os;(C
%N8nlL:0Z-Xa,a9fFGQGCaPuHYEP<*Pq#'sD>(H*JMpsO)hu8<;!#?FJqoQf@c4X=TjV,Z'9r'QGnhNaM&,kFdPb(N\I.q[JRk6)B
%H&dHQ:5L;U,@R>JH)4sT>4.H5H:BiXb4cqL@M]!Qib=:qA192]C:na@o?,Jl]cI=n<2D0[LOei\,3dc+@ZGjVkpu@<*[We0BuIGg
%^)uV;V7Ji/*p?j0K7u%E9=!`fnD`>T(Us_,A0FhL_rl"gCKo&-*bMo2EEc[(+Z+q8Ch?_ZUg]&>EO\J3([:>3&?;Sm["PNooM;O`
%YjS\X"1VH5QReL/U4S!Fg-HtmnDZ%684$B3YF"0(mV9;B3I(=l)!ahV#\WR9ii7j&.92nug.o9]LUL,o%h-I(c;"@Nbm5k&(5M^*
%o<XPTT\mk;*7+-j`(IX,M!/m-RCu\%DSQR'(?B5E6l3)sNMYqgPOs!h"d/;Hnm_&/0"j8`CkU0?gV+n()6O-Clp4!W67F@,1V,-7
%WLtu?1"6i1k&Yp^M8F'kY#_r;+gY^`b4aS6eFVbA^F6-VX*>7K7n>`UQ_6QJA_r/E?'n81YpfL,!UHrqN7aVX$NpM/@%4tZ<,tq.
%1#,.si$:66)db3#47;p=Wc8[GV3o<fb+_#38hu68<\m+%"`dMKV;%cd0o6negLpfI71sQmbuZ^r-_!qgm&^n8IZ`6rQnkIqp]LXP
%qCf;JD^[+Ao7[('#%J4VWiZMc6rW!'oMID@S>T#i`Smj'T6'k*"?[oW)uSs_'4+_1<?oNG,Zr0Q0)-Dd/a&;XjF&<r(]?:3YSW/c
%OI"P2lUS%5ge\Ou4Y<<SD!qq_@F0\$e^%0;;-NAl,r>u(mRG;G<[0,!_!a#LB;m.u-.f'jm4hgFe0MNQ(+60gX1I#jDEe@dJ@,gN
%B5*j)kA%$MZ2g]D<m(2W5/&X`MXGWPk3TfE*C_eeq^p#9&&r>G,'K`4:p]?a$=<[@Y]d6:Z^Y3i0]_)sO"D6-[<Fno,LY9'2SlC-
%2+7Sa?)1,A*sOg(qOQ%6Sjf%U>.GWf.<)bHGm>p4J8%U38iY'!`*H@6N'_/*GB2LkM=EQ&:N7[+a?=pp<Q^rJ8?m@Y]#6;sNhaUH
%RM8I07+_l!WG!l'ZFd1).&0ga29hWm>TgaN2!5g\@Bt&N1Lm8YR%8hQr9?-620/qpCDZRY;'j>ietCNlSX8Q_!lYe(FbiBdI'-%?
%YtNf[H\d.\QEZ"PJa5mB=7W@\#=,/G7VB;)23U)>qJ5kI8pcQsMqW*=#oHgnfBOp<1_9JM>t#KVA8fboEmt'H0\dLOP/ep)6*&uZ
%.-48@?8s5gN?C1jCPtek4e,@;W\PZ!`MNIS5&Pt=(2lW3\k6&Ac&D"IQ.Ja58G:]j&i$**@PJ<ud)]tmKMK>ZWoI\aN+.?,IXm[G
%BX's"-]:'[Y%cNp;l8[10pnc^XR]%o0RNCJZa*?QM!R:EVQ+@[cK#[PELhO#<o1Rs41d4<7/b\o.`3hU]GbRkhaWie2J8'r,RRa=
%BTf/.G?)&C9QBiEruG>qA4KDMoAI)+k.TQ?]M(9\7c$*Si)u7B]o1qX4:'J3Iu@>"IeuZ"--Z<^Qkd)/A'/=]+m+W>XGl;e+dg2d
%c[OiJ>P84:$(7p.$'m9@5B#LsHjIir<3<ukJslH(/p)j-=@#PR:-I`V2u8=$1Q0*>Ze%1'0l?FU;_o4ldjKaS/O[Zu58BmNPg+XO
%q(Kh8OT\S*rNI1QhikT'qL((l&t,I2IZRa",SrWI*,A&H3U2\J8e)Hm017&LZ.EkkjB+Si=TJ3c]+#[J5:#>XSQe4FemVj[U&LpO
%Kk5CefcCO$:XaH)V;;2kXTE[=:#8.fCh9n8`kNkTF8Pk`ciLEci!pG;mdd>eaM@BC)l8[3[+:pl4"7jcLanu&LbogmJs`D2+/97d
%m)i4,.[d=OR8+>XgfNKDd9bR:Q8h:Wdk;:J?5a;VWEcY"Pm/GLeMBTo%#-;W\W2O/1:e_OdGuHnF2OIeQUq\AYN3H1;N47l:;&e4
%,h433Jqb2Skhn[@:6.#>)8G"+L7Z'(Q[+XMWA=TmJFZA$F+j?1K.]c,b.,VC[<hd.:0'_S`Wul"(d7]Ak;i"Ml7faTcuu1f7["nJ
%dn%_`9L_T4n0g*<!"7)QD$hulNr5YO7=Hc8Pd\])@4-;n5bHC#RGG1,pmEFLL-Z^(9"Bp1U0).s^HYoDajII?c:to]YEff>o7GRI
%&fr?c=J^,[$_\$-FTaA8R+i(3U5^]A&D310JTsmeL[aSZ6.U=c$O+e_^:[E.&;P3oS]Vp$'G8^MQJ4:g*$KP_7_V)iT9o@kGkPso
%i'BL8H*kaIePXnT1'=;-QCYi4fc#tM-@sH=RqBQ#$p)AdR2D4_(>/usF(li'Hh/7o)[']<S:'f1YkUeJ//)&g"@^4>d"pO+[h1K-
%7"b+#6=4s!5^XsS"$*WlI77\R>P0"5an!2;qdAa23qS3V"_3CoV?_0)l+8kP&G6#=;n@ps&c2_*4.A'/2CC'hY<;GVZOR7F7'YQT
%m2W+MSsjd^4!572'1RruFo<Yn6ufd_[[Rm9,WN/&io'@gT-p&rP2bnAWW\SuR0Q%jqe_^i7p6D'=Kh+Q2AsE1\r5P7a*mf\a3\*i
%M]QB608OO2:aOn?b-4\EXi`lr!j4#.'!6iNoFZA$dPB&`mr7t#AR=0p*n(<e#%ua5/JbAL=Hc1,3>Fnsbe6,PoZ<rfBJXoCROgmS
%\D6DeJ>Sh-Fd&#p8VI9d%#i\BN#,5tj_Qa<:*5%(.O[hA\#gagK$3Rr`iulKZq(_nq>(;n^70S-`Co'Y'KUXBgKF4'hW.Jd:`Hn7
%7ombIRiNpfD[VUD*Rc9&F+hS%;T(N+s+@j`*e,K'.cp-Om*^=hVHS!4@mZ7-@l^2&`:&99<tG&iR?7`8+(J*POFW=#=a!:KMVB?I
%>+>YAS<0p17r_-Sp:"hCFWn75Xp/V9VU3m3Tp2hr6`@/L&"[es"S$:L?-`+WqU]RXdrk(N2/li^<lb/2BXBqW">YBL6FmWdng/2I
%p-iJ4G2m3B_K\3L:6B*sjA:&FR#P1'S.b($;EgKtL^NR.^H@6R<$C1aHW1EWUUilq"D&fMYIMJm(uaURed:#VV4hllPo-g$j#@0?
%O)gc)&j'>KJ]aN4lu38(BYBGiNe^+b!`B<RH!C"8HfsiCb,kit-qt@P&Se!Dc#(RrE/f$?Ai<Opc;;50N%L:p,6@@BRHfS_+[^d,
%AQ3n;$BU6qkp;?r@<D;!&6;XO,B,(WqE_f=Y0q4o+12<uA=S8J,;F8q>`BpB(7c6;+lK@'f.bUV$kLJE^5(5XM;bNWh5)<fkX[#0
%]bE8Y.!Zd5AQl^^D3qfKhV/OhGpOs%:g8#_NZ)WKUH5RYU4n>r&4PEEmbk7dFI!MKRl2'ol"N15nUV!c237QIb<G@^f2Y?9#)[:1
%,+t/;]pam1\\kJ41OJVlG/I?Er$:$T4X&"0Z<ht4<n7$-7C![GHif\+fhF=WTflB,W:;>YA,?)ThWAbf*a'MPWFg;@*9p$-l;gTT
%>M0iNaFqS)$;pX<BVtAbYJQ6^\CLpB#sZjPA*Wp4'Ra93&ZC*A"-+PF0&U-3[tPgM_(te)]+V<i]L(-igh&D\:#U(*bS4._m`<NK
%n`6`W"Em0=8KAp&#(Ccj_C^EqbS-eYKJ?BGRS$G/eO^Lk85ku'MDT_2>_Yl0;Mn#W"'II=-$4,gIeQQ&1`Y8FL2WtW(E(1_*4EcA
%2A+o@`YTM;<0c.[.RCj\)Tu[B,BS9PCEp-KF=p6bW!FTZ'g`tR6jUMUOec8X1\`tt^tiMCn`1hD]H0NAC>fOdHq?gF5T[q>&sPA9
%SWp@K3UBD2!VMd?c;DL8=m@>CkJ19[dGSCHENGGHn</0IHsXsN<IaDqJ\Q&U%M1(5hsJRtM[&<H3e56Zeg+eb\l"EZl4n4b[9.S(
%ak&*O\Dg9:7B5fm8mIhKQkB-'S!lca0D6D_a"$Z`r+6Pk::mO'46b#`>-UjV$I#SZJL%5DPP>!\PCNH=OM4&+p)``EaW2f@1Zd>/
%C9$E5r8F/JW//uc("qgu[QNYG))%T:,SnlgTCOV+)`SN\[KSa%eRg%uQ"2:/(s6<LFqk&c2SVM"4Y^t:^IZmCG4XW:ofG+70c-lN
%"X9WLl3Ls&*IaH=(VqEo@L=dFFbA&`)W]YOYR#is?u0q=QI,*Bb>/`goYY*)4\1;0#7;<&+80Y*"e87\b`F\0P;'NSSQgomK]E(J
%OnB^A'j*frqRhTP)VEQ\Ba32DOK@$=c[L63\.m-sm7G9GU5+?D(9%An7qX4\93qUb8"Z=G,:^mt]T<[G._APLmlAl\TR/qRPJfc3
%"DWp@1\`\-g-Q?9kj,6_/Rc&K7Zn*8i(6qYqeLm,f(-6!fjWMAa]Ki(:lnMg8d\"Sc%h>)p_g=HBK"Pu9%g-iooN9uFqYWILkoK3
%%'%]?T]=%(cHG@c)]!#f`=AHiefEt;FZ>Yrs2LqA@NN`^=*$V/>:-%c*!6e*,M/N2*OcqFMKsC=n8Ue/0!HnE!\%(8.`ZD3PKA8"
%@mP&F4YLtVNtujZgf6eF7I$qeUe1)oKc)q["8:JGgp[?9>RuF3Jdc%#q@I9@Vj`2>ibjR?^.-L^'pdW^'4XmtlE!8.*X-5/$+cU7
%I%604[cuLjTuNmQHiuZM%$N8<$HQb^(QSZ;dqiur"eD-30aklPdcNjiL1A.kZk8PJpiDA%2$"Z142I1-r_%+)A7d]aCFAAH\FHh#
%f#[Md,a+)0h)+\UL(Su_(Z0"a$a[u*bt,?DU6<N!',t;&K67n!Pte$4=0:<fd[`^oUc<5Mps%LJ`64t1RuK_t0$gZ^3YdV2B)0Q#
%]LG)e&_`&fZN>L,k@=p>3L!B?TnD]4K+7?8D^Uk?6C#`3,!nVZZ!8/NC?IHuS%uC(OnZH50:*$8UuhUOProi/-^g7c;(sr#m`j+m
%[BeHF>CMu=1W^LW.DRF_h'\dm[>%=m2c;O"\DGBK48VAh4]tA-OgD4;.ma#J!i+bFDjlsE$>2=Z%4K&cC1N[Ea=F)apA!ZT'VR&;
%hl[jXV>fo<*ucN/@APQPH&pI.5\qlQHmg`h.231pXqXG=@0TR@OX)rTP%)WTS*7!!;$g!%,QeE*<$(>P&qNEnV[?/2,]eLBk)GI$
%+=,;Y/+&bLCr-/2eS\SE-YQg[pop0LG@cqbKs"VEYlkcEV&aD9hhGUn(foOd6j6-6J4rlg=!Jif96nK8]9dC-J>9[?g72usAAl0?
%G,]<?>$gOP_`Otd(J/=9Tp-$]3q&R\%UdoP7Td7s$XWcWNmqZdDP."kWBF&f300&K-(I`ME8n=,hi)jo]FDu0c6(^([9o%4C40uL
%W\%p#p73gfADc?_BMB;i;tDKS(;.p]&&XE9WNqusqmKQJ\+O[(l!9A54k+Z2q)H=egC6WcC=0[>L';40^FNpCCimF;(I\=+Fh9Et
%OWVSFZEOc']^#O`4%Yc+4Fm:r1\BhSN.YXcC)R*hT'^J(R04.Cl%P>DLK,g\5"pVb!7#r@a9CWQLZYi^OX;4od?EkAJ"!+8M]D=#
%8uDZ=B"*u`>2XQ;;iIL]^_L.NTNI=0#hW'6QeK0Orle0B`4V=+;h1/uJ(N/F&Q<AGfQsChS(Km!S<HD[\msa78``N*%jt.fLndUs
%QU_](F)pLY&X-fl0M6=W>IlcZO@5VN+o3t&--=iQa@-6Y=[WTp@mkgpK_En$s"kB@ESMVQ]d2NC4p$NBp=MF\XW#JL#5Tl>8(+(`
%p&^g]AgAM([YWCFXZQ`(.+Y-]T&O-g_TeY5!'AOnA-R'T1RTr1V-LOZCuW(+ebH%76rrTH*TBM4Z<FG-3]-2X$LH\KE*'tUpXrMk
%=Np`F8'L>jE&mq9Rt^mgn<@EQ#[fscD0J&1<rs+TrN.Oh*T)Xp5U'0Y\KaQPOu@%W!,R^c+[/a7UXm'nBj%tc'5+Ba;SZ6nAn"0i
%KZBGW]&O-l%Uk,-bLg!]Oe%?p?$eh3:\'XS-une9NI8tI4)gJ(8UhgdeoUAW`--qAVp#q><sUCNIuakqiM0-9=r66AJ,*#u8GtR(
%nrq%,!Kk;mDf(:T82P;;/":YEWrF<9`7?o<e6l)?%h?(qWC>FP1,9!T8`TkSm`pQ`dh31T#A&IQE4Q=<+f2lT;1a4t#n*au*_dX+
%+g?8*gtaN6Xl%.nf0C=VS9]IgfrjGD\b:?JDh/.&`-7D4CW[GL(DPe:Pk]m#d`hu##u"<ufIden3[0QPjO4])ko;/e@g.R=2a`QP
%MOi)SD*S,so$.#!`N\Qk`<h#GcGM]WZ4$(#(ZE'Ge@FXJ5*>gGr054GF#o(W/-;.FJAp<p"h_4m4rQeagOa?`%aM:N+IKZ(5,bB+
%"AO1UV+q,n,JAE!bSMEoB_*IC"r!Gq:D!td<R$H'0*/0VMP/6qZ^WA"a[GJf1+mEsTqaNf&)EssmF-0)<@W_bP]n<!MFGKIeI382
%\Y68B#*"3kWplr]>U_^af%!Da)3a>X"18n)dE7dC0hla!q4-bJU`;cihf8>.1eW\8mQBEU\G)Z*\UBOZZl`=FY[<G(2LaGoO(Yfh
%1_oVc^8,#GLG2pX$sDrA[o)"t8LXobcCq;)V75fAXdQBs[2bt1?sBJf88K=lHYO;C\]7q_I[o4s9V2OK::8fTA-X60Mp?K*2`=NM
%/r&%l-k2TmbgtKRT!6>q%j8n3@g]*?2n$4:dC$4r[uk?*o%M46$)g;C`faMa]uAMd$":@c76Dma-M2W*Mud1V"<Y3:S!(8_&nlT\
%Jb(_U3CUahE!mCgfa4Mk]IrUuU6!J7"tpugiL\e@21[p+ge]a<hB)UT6`AfnG<mtk44XN@X)O@=B&k%b7TY"hHUBp^SC\5`C.u2l
%nJ8W%\]_cO504]O@(5YI<@'>A%n,!),ja<"W0[2C9A"h_]7<P[XI7nf_+6O47.Q"u4)/Z[8TgXF3::<]i<uVDZ8rAl5<g@]miaTt
%:eorp6p"ZaD.\ujV1,ZQYH'QV.kIJ(4B(>I%]aD0RA@$-YY`I,+br5__SDnH-EafH(I\\M-C%.9ro"A!:gd-uU'Gssng-(1f8qmu
%pE7JM5Xh%@3B3<$OEnebWLX/3%Yo@Z(MT,)QcXh_bq+/Lc6"s#bG0EqOR8s70FA'tG9ZMf#,MN9W0V;+Kc3oD%L#e])"B:Q0:Y&@
%O_rfL@1NLERqt:,CY0OkZ>j$snrc4<.Kdm*<>Z_clVjLrOk:M9RdSq4N,A^0Asbps,P&#'b'm2>eQ5+9_]i&W.g#l].A[XiA)Xms
%"oQuIjB\VLCqd+:4Gb,*O\N6=o)r<ui2*A`%<HS[dN!>1S#JgbP)XL3oCXWT4&/^Q?P4!jWfLMNq)IiHSM,Xq?0M\-efRn-F:G"Q
%:1:uLV2[&rZ)WIQ5`4Eq/S*gTlkQ'l#_uN9Be._t2LPD-2%BfH:=M"s"2!_6-Z>FaM/C(q.>[)e(3o)F/b2pR]I-CuZ^:S>S+4]>
%^ADe'hQBuR9.Xgm:EU+mEHtPn!59J#"uh<gf&eRbqq9smrFC*!)E1%%^lC/U!2:!pcKVO&lRYIBT(++Y!&6WYI8MaDJ7kUTo)n+<
%V#H+dFgK':^u;5=UaTf0[($_P,b;[J3Nq2b08oYc,'fJ%V`remr+>7lW!B'T8G?NnpKIH./;7ihH'd\M0!GQa/5E"ec[\Ji`-aU;
%N,^6f'Z8o\5V9pKS&<Jm1rQ-@Kb#;&^nPpg['bI8;2V#S%[C=(9A(BJ^m,Y/]MpDjYmA)Jr4+s_83h5,$X!aKp*=4iS>?g4FG['H
%iFsfa,F,([*VJ/boL'u?I&cs3p$F7@>6-qLi^lk-@jrAr7]CW"O`J)r8/PD:%hg_]4?a9u;iY97^]P-'[L*`qL<O`iK\1-u+*YeA
%57:%S.>gk[ZdIcW_%JC3jQ<PrRXE&Wl>ta^dG;kt2aDuX4KP-r<,meWO^.*CGB,dh/BJK7'8e2)_V-3b,rq#eU'Jqm5Z,('XDNpo
%+-EACTIhW1Tieg%ep(Uq2,&3%hHkOnq.tf"d)kQjoge8*=,1DffGM1>a`)2sW1lV=^Rh"9$L>PaC+egiLi-_l%jV<=`W$L5D^A9E
%3@\d:*&kR[n4A-&[PsWMC9l6]FPR"5["jd44J7P2/<N?-fA*GFf2rLtPo,Ee69tA$UZB*&NCT#%luDT&=NhQB)t\_]cS9Q%=EsD8
%X$k4Z7Gk\tP=Y9[/`X6#M1.o46TDufU8$$pF?Z"2f^ol+AmhWR(kH;MKM2<35+((_aq6Bd!(jYbDe!]oIXB81*[P9_.I$u4FZ?Ml
%a9R0+^nn=+]tMu*823MQa@2.!66rdcoIC]/WOk*Y%&4%n)5h/0SX[U>6Q%]Xb!CFh+<8\2cbW=Gqgru]U1Oc2a0tCdnahY:#&&%E
%ciskD,9b\X08;#^je[WfG9V_K)K4P`"__pI![_g`gR2]b8ql$Ce]1sM\6>)!9EKi=[mWmAC/AW3TT6"sc"C(1N?h#"O[go/pOQ.=
%H"e4ka4L5UbTse]Z?AeL?o$YB>(bA%:88*jpjCf+Qd62CT3d)ii;fTuCe'=:.BsiOa_!*C&rY4<&ruUHqP"\^'H!%jgc,9/\%_nZ
%@$Oik`a:ET.AnVM.hKTZ1nmOXiH6kgM=Xdhq+#BtoZ`("Q;0m85kq>S#/k4rk<YCZa0Koc\5ae%0u`];>'X*\2[:UjT5(cI;_=a9
%dgc[t!O_4B!0UtldjBQ01[^KLcQ[=sdn,?H_?)WAo/A7Z/&(iEEG$k#;q&g2&VhSWA=*I27)6MRHa@eY4Po`Z8jcn.S3>M-6Cgr\
%8],+A6qM8KaUpd(m6i)ADDjc:kg!W\O]/"?DqW:T\s)?<>_g8ogm@eE2uH,h$M8P[bJB;3h:"Kl?4%@[lmXn+L"^X+!s51JUf%m6
%.>Rj`!I^@_F2`8k_@N1YX6bH(aF[\n&TF\@?=[$NTJ!c(J7K/=50XdIhH.S<Ja0-lg7S08Q="93:p](/Jr&r;,;aJ>MTbkOG??2E
%V)nTk31/>U9"XIl?nSQCO_54XF/\@^3]8DmkN\T)Y#Eu]/=IeU?o$lY$(-8.3b>..eui9)#R05RB7`/MdE>blFeTt:6e::&It%&,
%bonLI'J[IH+ammRX8UH`AT0'-0AaA-U1GkSiC<JJ9O=kWD$nl6%@0mt6Si!X:7[X[GLOeS`XT.`=f9^mf$5tNZn3F[V09ma75bDP
%n];,[%(ctUXm7.=(k>he/4,JV#g-p?npo]MS,FjXTQ/U%J"WE&E_]%n[:1<Jg"U?pN1fCCY:%HCb+F7%Qja>u%':\98V.g,cp&"r
%)Zd7pGin<8l0]EAjQbZu=laohn'iE:FDe-S6C[,'H8_SdiM&@iqQn+?YiAqc[`4m`XXLYp$/o"_>s/Jhgj(u)=#+fZWhnXLpMKs?
%Bb&$A-s@7Z-p*pMljjV:[p+'aO2MFbKqdC-O=Q:4j$Z==RF,fn5&TfG#Y2/Re(o`=5^N1XW[YRS`+1$!6EDXD\b.B]nTedYc\NO3
%EE0Scd%(?,q*E;H"D]19rN6BG0Z0U40UfaI^i]#4V$q;Vs/e2-\@eUDQ@'tsG=PVX,fGUnSbMBiV-HD98Rf+W7CN]:X`JUO33Da2
%94)>6!<K?m8Kk/m)JDOY[e1#216XAB#-)4Q19n6+X7[_nP!9o+juq3tciH:Wf.6HKN0ob2Xtm`GEEscb::p:GNh$c`\H[oXr1h"i
%V%?Qqg0LTeNG7O)<(DR1]1UtT0bi&nZ5duciO!_d3Lh`s'0+Z^UFd&U+[fAR?")lX:/sN%^\@gFf6eNqaRC<QrVe3J"I?5AjkM"l
%-:(3[II55s\JDL5hMHk^K.7".\kTN)e6nL"]"U0D&^:QRZcVVs*,@T^H/:Zte_H`;9aJ"ND;gQdb5pRC0R57tj(ePt+u2aYi^2"0
%ej7>mal!NC0seG5:sC[-2Yg54n3OOdg9p9es5+2M3/+sl%[CVe'r`1WI/JTFD$3E9EFHa`=uM?D&lVAYYTD`,>LdUm_0-g>](QE`
%:2kIbJf6B,ZRP^]rY0H;k-0_*k1=]:$oPC*=E4-><K0Zk!iZQmH&WE<2nF;@!p(T<XDa':F]?O=5!98/*Hg<')6n:'lT/:;F3S3t
%Y@74MSEoL!@Ouu+ckj/]Z"p6&B"m4GVrMKG8a:dnFoj2/@@GXcBe_(MYuGO/Qa;kic1*[7ec+u-l84L^RpAiOH3CVb-R6^t/cd@@
%FO]GCJ8*F=$Bo$VCZ\:7qZ1Y/2Eif54Z*qm2'8js+NPFt!\0A)I?T%-heH=@;'hSNc6C`t'$b=UbibPEMUb*7_ZOin^dN3."SPok
%fsQS@2&a+%c+p@PXYsI/@NWglLE2@*);F.?HYuq9:-n-2#70Y$7R0@?`7PomIQR$srO/ki/,^CucO82VA9crO%9fV:$'?JaBqPWk
%B/BSLQ*M]F:jes<JMEYq:>,!ipdRlRBcV4J3'!"3/TDQ&-BP5QM&U,F%]:/r*#9h5F4>j^FSe)njE7uF37Jk&]eH0I6@I;Ak!T5l
%+"-+7N"u\TLq;;(n@O/R[C7br#O?9HL8!BPI,G!kNWkt>Jfi*L<o)b3.N'&ENYG!+]$!J!WI0a\\L<TtJ2g4aPXN9@K5X"?5%-jA
%>:M4R'83E`46f8[%RL?\MM[a#e-h+lAPS/lq]]H^Jhk^rUrR1qb`t=0[STYn]PXrZ+$Rkb0ek6PFo(<cpipM1+9f1^25OH#F4tJ'
%VmV;@K9U(YK"l/W:h8bQN).%U!B*9A6[eu_pTn]@'\7;h/XXL69Vb8:*Yo[RZ\g7poeL`p+T;"a5=r^4V,%lX27$T,U_l8U).3nc
%oGICPequBE(u&X_Ii:5f=reYS:okGch44PtWJj4rMh3.n`!t?-$m"0jp$2.aX9C,b8aU.a-JXq0*bIa%?19\q0hdHTN_4$s,YVZA
%8'd6l/!)KXOs3U^-a#$qZ7@b:;C\8f?;c!b)7.@?.;Efg;^gt8ZG],Tleo-PZWcs"S=A/M-C9J]W4oWRK#BTLT+nY*OZ=+=.@5&A
%f4S=b2):t,-fT^.jKX(C:_1h3A;iU/$q]FoDb3A2)>!3<J_e:`P!ib8UUT`IX[`V.?]i];Y)H2)gZ@)HCJ=,rY0\Z16b"[0E:*FX
%@.J8b=d]G.nRWLXMNR/%#"G`<3<BulA9D"#&;)]X6U\u^p<.)ioQ<GK:*l>KUfa)fN(2@EQn2Ql/:P`Q(0AC.0,)[e/GdR^EVF*)
%fQ[oImONYXAM:W9_!P-u&"c;E)Z]i1q]ZI-O21-U@1"h&\rV`F;Zp9jfH2;3C!+96$]jW[<T6#=MVtD=+7+*@%OD\mCFR\`MQq\S
%ZRP+eUZg@g%CAfo6C>FC#[K>YS7`1qn][\OV*5oEG6b[NJc%+T!\d8;[6>M`qYB;*2)N#-H/:-madf,TYlra+&^!ESnN#8@5]LEC
%$\]cL^Ci-CR8EIAH+KboM.>oLo0muEfdTJHE3mAKcLTd[o$j!P.`io,9H6V]8`@rq]8u_Bc0i_`*Yfc=?XAm_[,.GjOq9[T#MJ\W
%E-/"_,s1N#5'[&RMIr&2N:kV.3Q'XHRfRD%#p%<*SCGl'oS!;A&_NReKsLHg`J_u_TZN#e!_qZ7ArtLsS1T?&JgK74lr<NrmK)i8
%J[e6F2@/*OWDG@6bVWKCeMMuEa^L_c9'?QG[GjlAH%MV<Y,b/igu_8h_bROV3u[aj=<gK&Rk5*I6'&5K+th*>A!]lb;6Lr28bM:1
%Wk/[/$%dKGQq4On+R.?,E\T+M])u04EuIt2-pmA`o8BX+S6cMsZI9#hB)!,WO&dJMm]+f2cAX8HL;g4@ogbYL)N3@#-LoQ[h1n!H
%j2Z=![.`JP3ko84,o*R<;tud&QlZ6'\0LLOPpV\'&K0.UgK^HZ&@<Zu1rP@*p;J&"c<QW4XF`Y,EapX<5X5S_CDNH8Si1[S['VO2
%C>'3-%&t6Q_^qG,1Efo<IH_g(q"rO*Ir0=YFCYb#et,8EmuD!!\uO&B7C%2A*12`#S/9KC7g'ru5H@siNTX+b+3SR;6qZ'GqGGRp
%:_EIr>)D%D2$JXIR4YSJ6[!8dW``jP\`gj6pu^M8*j0u"s$cnB$qjm)@Y"SD>Ii%cWmgt0MjXS@o/2<E\&9gm6uW@CWAaJpr\R8T
%LKhIj1pfbhghN*QHN(8u3/N+hk:4J8ll\2oOm\8S*Pi5[>]:Q#=luY*pY*9:m5/:Un`n;6U[C2H'\jFuAA8_b$IRinL890g7V?;=
%e+:?`_&jcUl:$#IniIA1-Bh3Pd;r(2\.(7>U@]PJGVK/2XM8jP3/dk6LD.h.:Z]"/8'h\I\:qGN_gK7f:2]D>!`tVLK.)/FW7d.s
%M$0<T/1*G[[i&M%5bfqNdF<_1]uD8o487@sq9_qL.1WnO$9@]I.nb#;5Z]LiJi&]77\ne%>Tl:\cOs/*2m?1*q64JoL&t;A0Z/D(
%bs=MI,gJ?P&jKHB4gZ6\04FS#k>q2uT2m_jh_29`f*XYnk&45R;"R<7h[N?0BX4V*k-L/\Gq!6FrWa6LW;l_3[Jb0=:VFCE_8_9K
%"rH?@C2t%1BQ?m<ob+MdRLj1DZJ*H"Z;:U='SU?_7gKA\S#lm81fa;+A`sjM9^=6.jd\QK"m-!pJ?aJ3:8buC$IR.uPAJCaB+siY
%Be#@*anps^V5EC%^u;4$M=')5&,=!%I>k>C'td.9A)R'Kq`kd=`.QC,Ao]ocmW.\Y-%P2XhB%[EVfQZ':W3f"'#1#FA(A@R2kJ!-
%%LSEcRpt_/WmVUlg[.ipdo"mR\'6;u3$ka>S7$DTLH^e:khsH?*US.l()un>NJb4k#a[VnNq@T&hYuq@*IH?tod0@D.I.[&jH+H^
%@6ap^;<?nAm\3n!X(7B!L5\DK4Fi6ha1A'OL]li/be"X?E(Z8g&aqK<glpkG`cc?=n.i)r;$KKJPM^9V/82IG2Se9e2(n.0_F)`;
%'7M@&6C*$'Z(tP9V`5mb8[+#ZJSnV+Ijj;a=^pY@C!9ZoU<k#74'WE>C?j-mi_!"4e^<J`l+G#>jA18/k1@$L&tI12AQJ6Y3'ja+
%IE*3S_&SG2Op&ce&RuD.*J1>)nC+N?>a2#Qcdsh)*XA#8D>k;Q(l[jop/I?GA":bYOKr<<rLdtUj(Y6\esd&:9MV1sTX%2XW$>1#
%q2qQedCo>MRU6?uCa+p'?abg'-R^&ifC+[LSF^C^)t;7i['gibghk?S<_t/UXWOpU4G(X/*7N,!5CM,kB*9+sn4`*D0aJ%#eB.*=
%'RgtPOef?'7X6"Ia+Jtcn0CC37/ls4`tc/W3)dd&6q/Dr9*;>4/'(C9Jm(FBSeT@m/5ERhq:hZPMWDJ.K(>4Mj/L'/jnEmE.LPg\
%kL_k4ls8c@F$P"BebuZE87$<g"I]Xd`M2sq>CrCX#"/8/4t+19b/SN]H1KeniR"#6lmcs`D<_kH-D"]bk40Gfrd9]3l_&(-WpT3Y
%j^DSbMe+rQ1'5iGZ,"&5>g@)Me%rL&mCa9u8(?((?4t@MOI_fJ#J-6@OW*kk]M!V@?`Qj&pM-!'>Y=RfiF<#A4UAAZeTZJ@,QT"D
%kj+`AW[qh]\skPka)"#'TeQ:,8Fj19LT2SMGG#j\-KMp27lqT!&4]hX#W^ohfA)=;@B&:JN>P+c5lM)LjL3idgT1k(bm*P3\%K]7
%i79\qpCZ>7Y&1_f(9G*\/2F<!.cQMmrk]O<EAG^q5"&5L3@a;J]7pXaYJ!$,cr\;j:sHog6JTn$#c5b?/)G<g3&FnFWXl3Pf)r1i
%nV1_;U$ckh=XU8V0<:6=^0pHTd1@=u`a*)*Q1WD8*X-?#if^&F-H7TIHl"FAe;iK@nMhTT)M=9lGu>+s$R(\hQ`dGeiG4VM36/V<
%W6'V1B$j:qCm@:soAhb"J?A-)Ntg`]D5EU%SJ/TF!(R=R514&7F5L6W_k*\q-'i6,&H)\g2ME3_Eai-@(7a_h\(,k2pt+q"1l*V8
%6+>OZXV$]1]T#_=b<uVHGG`\RT1#K3Co=ZgFD14-0A\]H[#mZ92<?A9Z>+&;,jCJ51BkB">[[gpUBe:>-Xq$UB>3U,DoVrK`Z,t?
%m@YngS>3TD#tr@h7LVdo4i=qJ>O_7gB,R&m_#MG8qE!L8]msBCoqCS!Us+R*X5"DmPK)ga"e-DV@iY);^&C@cn0Uj@j7tPt7nekO
%=U`9)(cufH\FE_6q!^:T)\)25fbf80Duf#>p=ZX!@>hp*`a=S)Yt=mk1'='A)CAFDI&@sjYUr.H184o]>.>N>>MZm7n?PBjWmt3-
%c;7Nq>8GKTF`+qn:;"$"XQA[1jn":kSl$H"p)s,81rs//d$d=3>sX#bW;K6Npc4R\5r)CkK;a^TKa$+*nO#>_6VQBWcEN?P&Eu;d
%VqZ9!p?XD:mPrF4Kqb!H&oY.thL$#_3:;jY/-l;9_g*>"`I:cUjV;fh%LTn:K*DrX<S!T;A;Y'/b"\Cl2M>"/ApA'`<%?/9dDYqa
%a!!1JFBd^rpVKSh"A7XWGf5!o$DY[%p%'rl&ZStcS0%ege]"e`X<u+>&cTKEifri+-Rhkn(^l(^BN[I7GHE&9jnCQ:.*4DG@,^i5
%H0s+:@N]#SVR,gp2Q/eQC!X'.Z$a6I54Qa!I[PUmkFu3XK_4Z9SiUcNl2WBs,8urikW1`b6^&r9P#fii'"L),8?T..5q4XCdete.
%`.m&*$VB2(,\'9e`j\B[-A<.5&oT\S=B?G^0_[>j<bMI11YYh+pauJmei72o(kBYNJ#,/WL2<0^85X4CN65u^/Ae1+,d=>&6UqN@
%)TG/bj0;M?C:GIAHPI]&:5)^7\Y8Sr"s/K/^Dsnj=]r:u(+,%b8dU[^l`;3=R>i!@:!cc-I?[r+ck(f-aKcn2K:RR`518%bAGjO'
%I")i9DCbp"dFG'YrIV8r+eYu[UC%R.pglT8"YpTW$+&apV,^Y<7$C[_Xd$4^^S`SKU'aS1Lq-RGk9^!7Cc$Z?,UT8;(mbcCWb-F.
%+Li:3]>EW5.9_^-FcAemL$JK&+u%*$R5_oQ\[s,1Y^!#>o5nD3kaY>591_gVI]5o_9dlAs8rJZpXqV8=rU<Qh.dTb?@"rpE'h&b_
%J>+I'Etp*+G5X7/N4QC=."P[*(AdO"0+K5k&!nUdC.uc99F?Qo0X&)83Z^0qZU@ZJX>f7b)9oi`d)-ufJ:eJ4K?SZrB$IHh[<[j,
%JX9<,I:kfcdK\pPH\big1Q6r"-2hIaAsA",Z1!&)MOfpZR^UK*bg-EMc)>MT.eVPoH@f?FP\JH6h9ieI%O_cDod1U(`UMDP21Xd1
%oVPH6WBhO)mt)i9/5S-<[A>SG1]4HmY>6#EOT$5]gKZ@7En4326Kp,`%"uj@_<WsN,Y0:Y)5tFuHWrEl'>X#MALY&iF3I;6,.ErM
%!5oCFCN:j3EKj/qXQ^ognQ9eJfVs@;RX>p[2a67c*?KOu%i6J/oq58O/a_t<pW!U:\gX;YMe`)0(kMQ.4J5DCJ_7O[gMo2'_h?%M
%k>-VD.b&Z94qN5paQ0GZ^8;7_&X`E:@K(B%"j=62g$Wn>^N*LE$&u&X!fkcD5mGPQd**!l/XO":4Vf1]&o+TsL1$sm+]mH?`,Y_I
%.k.SDZife0A)7-Q&]A4'm;Xbd:5WQ&YgRB/JpSU(,,<G@@J&L'?cbZj)QcCTaUpEna[^0m]>5pm&(%,FGsJ(!<C6g2R9sW_K.)[E
%$t4$)ra?Wi,XsNTk,,HbJn/2*)!_F%i)EsO+M(VHG\RN=>`.;"BQ6G^\H@,]EC<r'X`iWsJ_2<q*KsfM`mB7O5GocEW&M&\>HZml
%.M>.o.gi3pHaD$n7\KXR:tLea%@2H#;,SBjnN4;k9"D5qcL9bSPF)FVSBZ4"[]g!6=;9%EO$.O>!6c!s$8$O#s!*kqB>#te_`mjT
%(l"")LR*P-W-;#l[C*R<7$L*2V.86"6K;'ji/Vutk1tt&lp#8OOrl"kCeh.s`SJL>A:D9R(3*!AiDgqU<"3G92<%4f,/c[@Xs3of
%S)QWHO?W0U97C:TZ_IL#JO,s,#qSr&J]DIoXc<?'L9N]p%d_E(I2[i[A"a9m'K;N#`&a#rkeh)IDs'EX+qUCoP[QJGf[W&Hnnr$"
%&LA"<ieQ0:M(cCWgj?C0A2jhuhYc!D[U(oNPF$c@S"@I\.U$+kHeHXaGe/Q#k;@'T'(*_VbktUc/l)j/ghF/@)E,!Y<lMr:/fT<2
%LrJk/?-n<P"ap5'&si#Z3L8$=;dJPKoMfD>"5D+-!o;`$;*(MiW?Xb]$!XW5EK)^3kJ2d*qPQj2Rle3"_eu..nVc5:/(#gr`kfG2
%iJOjhP+s%$E2%@QW#Pm+:WgKMYE)%Vm[V_Eh#MPmE(:b?#H3piOmuq_78)#OLJ4HJDZPZ<F#*/n`m8^b53n\(H:mq-&?/[%5U/Qs
%XRWVKo%LK=0OrF?hLKed64u\0.D+&cm,R_(fhV8R^WK*E%Y'SU]3Tt@(3UnMPt`\9Wl>=UPEqFQk##c#l8FAi^52fJTNEfUS:S3i
%]N>53+>+(O9gYtthuN'*^+EoRi5^fs]HT>BoQUAfiO*^>pjVee*.8jo%VA`Y8OO*bC7DRS!>&M2\G\cl3j,;C;q\\$XBri,-fJd<
%MuRo=CB<>roak#*1&\L*3toRHD9OOl7Lk^WLnZ6V)UA\SUBp$1W?icBjpQbBeG+?s&P*uG&WZ@Mf,,bek&D>dF*j!O;m.PL@9'3I
%l.6I;B7-;]([:2B8>+p,S(P?*XRccROSP(!#nh*!0M'lY]%45%h:.*+#^0BK$CX@2#ri3a;[a+/q32'7U'YBtLC&R,*e>/,DWVKN
%m&*?dgj5/P2/YtX)rWiM8"en8ms!Cj-1"!t0m>$B^tO/YAeh-\cNoP+EaIr]7I*N;3Gt7[X3rH2]$B@>KQW=]dSQRrP5sL?IP@iH
%[HCfuS'7PGd.aFGoX^,ZoG<K564ibu]fR=&kc04u*]EPX1FkNA?rN,L$GJ&emk.]?UR@/6h?B62.Y2Of/EOFoU8>AUI"9$@)r;i=
%U/`SqJ[.]n)AUp''h'\cEjK;;,AJfsa*7BsFAEDimV*bg5W)ndW>D-jW?XV-O,8tHIV]jjo2]P"TOJb[hpnG+`M+&#bihhf%Cu]s
%\nqn,l:`X%0RJmQ>qqZQ=:d(8O[.6FJ;aKcWnDo+jWfk0JYJq0lLdnLFREj.`X,%ZGkY:T\p^*!T!+hTdg0d2[pek<$sP".%KGW?
%QTb62<rb/RLJpRiSX%>(>`Bl]E2"3]fb$Y][P`q<P)<GEM#1"K;10krJgFF+c_6Gg[:aCSF%S>X'De9<PoO:PcJJplIt&0_33imB
%G:anKNq)2>.3tcaSGQpO*Fbc.i(K8!8JWaJB;`+Uq-,S"9]h]+1dm57#%9";mbuAj4T^5m<WMp!a:aJ`MICK4Z/(>m,!E$jDrctc
%oXEo;+J08mEY@$pehr`JL:k=\@uJ9\+*I4$Ck7Ag-K?@SE,T5Wd*1$0jGts@"SA)VOC8_p#%"*>ZR@iZ4^[Y/9auKG<fp!,@\fc&
%jF@Y3L+RH_U<+XIZ&E_6nI%S,`>=\PJ<6=n!YAitmqIfjI+/tE20)W"k$0:?=J5#F]uS],q_X=.k:h7H>o<E$F9/%8qt+DQR*Z?u
%9CCGa?XSTDc.83iR,Nttn+"b[;$R0Zh4=c):3e_49QE&LjR[K+K)$5l7gUNlaHVj&Y2JbWf#%bW+gZ5)Fmr<-=2&#PI\nWU`YD'>
%Gna@`XZa_%Wg$OSjSe>'Yr=$]%ag0-2C$9m3MrQKY7&@9"Z>"$Ofn1+h@H>MWON[Y</!3Rd6g9$qRAX:#JPT6=uiZ`kZS:dak7q!
%8gdIAW(55F@@G7jpu?CFU,1DUW!H]UAVRurAp7ob_'*'$0s'sE\NJK9]8$-cA?Ut'j!?`"I:uC]ctthB!G>]g.ja!skEG)&0`)7b
%*7Ye7,,#T"<P!1hhG>GN:2L*tO<EF+,==f0I&6R:Jn817d"P[_HWD9em"^'6BEkjQk*D^+g4J\th.l@n9Mmi=H9j)5=]A*f#R/9P
%mNa&d$-.a[[<UkqXqK9kYBnUWX>LGr!T^lMh6oa+_DTOfB3;VLD-JWIWa-0Rbf)XQ;SV<0MS>,lHoAIV/'OFZ)ut(ZjAC-M6=QiQ
%I5!.61,%I_'H_0:@l_6<W)6oNKHj+?#ktAK=bDH(ic`k>-LU4,0N#AOa*CZ>^?!Ko&M_ha5I7#@P"HshEK@fDKi+5tgS<pI4[bM:
%No?_2UPSDC(&9)Q7_l1%@J%<lL#j.4l0NM7)$:`YApTQr+\U^:rcpj__+G^gn+jl=65*jrAaDRMjVi\g1\kF4Y<(3TTRQUQ`"6m<
%,P3%.`]A42JRL;dor`19!8E:A,Y/Fo=E6M$gPlPrkI.L%qO=5rDn=Es/c@3Y_qKpK7'!8sJ2CLJC86O7BJ?VQqma=HfrRi)K9Jnm
%&s%Y&[I-F@R3hWIEqY0kF8s.=:*CoS)5du<A4S#jphEi<+fVUAJ/&AMUr8bcWE9'*Hpm*!WB<+t4mOnQ0&LgcF$sq`183(^X-kMg
%Q_P$NI8*V?U*$>MbHtgi:n_'MC3gT96SS5e'RaE$aRVQ1#Z#5A&it]UVe@!rk$jfh@S_]^38?`H9QO9t=oQaEnaI<G=RVJCGkeR7
%qabmrBMn(&'VrriSn%FdP!EuL0Y%@Dhf=,XT<K)(020,Wb8<-.Jc)b!gP6.=N`Se,9'LUN*G#nCGOh9m!ePGEk_<%'CKDZV"d;R9
%27<ufX$:kW/YU*!RZ'iOZ%WN#8VluVX1$U6k;)dSJ:CZS44UR<1mtREO!"31AP(01o3<DR3Si2Y'h<A4npQn)D5ZD"jIT9_R"VG3
%Nao"tr.d9Y\iVcPJH''W"NR4G%MXPHJS'`GN',P6hl$^Fau$5,e7Io0i)LTeJFqsa4g5*+B#D@&pt*?IH%32f?Y"8*EAKb#/5uIN
%>8M42'+j*q;42>V>s!JT/u<ejn8m*VqA9/OV*7q#\6?Iia-Jaf(3V*USE%SppSE?8#^ur!iA>EU+:mfQ>YF_\@_T:XUlD14!H1Ud
%YmN@_'aMS%"t,4LY6*&k6k2$$l,9uKbrrt<DD+&.6!"%[<4En(9NXX/7.).(GE<JX7"K7:,LYYD+V,^`.277sLa#b*l4B8TOb]VC
%NZp+DNkVmXRJ4cOEkig&0GFm;;ss74q=luh%qMD8ZGgGBn8<+R?NWfkOX2_2"Y(q,KOtn&.hZt+Ft?%rI*q$kQ.B9tY.2M/><*$X
%f;"_8>"oT/a0`0b0,UB^NB5'r\4DJ:r_5,E+$)`=lZs8%$i.&d7N'c@:<CrrQ&D?%'/C=SQQsuYG)nCG3#j[q9$N6r;>A9`r[)2J
%LV#%$G@me]b"f6C!P3NHGL<M!VD']O>?`P67`rXuF0FZ5Aeg#A\L0*I%L.X+muO33-^7qY6]jL:)>$")PFL+0#uYdTi;mAa4Tc#k
%ku\&5bpI;l-A;ZcV$7F/[Zmk-mD9B9+**3TP"hEjCk_:(at\n,A;0U?O-Ll5=L$I9#RRk;lkHXu*o#K^#rrmj'Nfrt-\Q?9kc>ar
%>;"71'XDk8(=L-<_g<*oPWBT\Q/uDYROpK7F,G]tLaDmD-+^>u7bA_Cj&3p+5Q1.+Xk>_N!:X>'VY[j!&5#Sd4t"N+*Ss0El2#Ak
%VEQXa3;Lr>UoqrXb,f:`ReY39p*rV(p,m;o=Hj='Pp2gH3J]p,DS+80!>\RF2+`$ZNh;/6Aun9I.]0qJl9drJE/LP+r9,<.^H&&%
%I>0VHgtUHr'p\UZd:<1d"?f<pJRt$o*[:AYc#R]1`#MlA0Oi+sa8LE+jqACc"?$u`Y][LLBYgW%\^\EUjI$P[*6XuDL!5I6lK744
%7:2o[l;0c-,3e5hHH\Om%V^^:f_=RPoU6MmRUoGJ$[lMJ:]l^L\8uqoE/t^k!Dk1tDI7!/48*3SW[98UQsfWc?9ce;46[Y>`U*7m
%LWXO3c4K?&4YkVYEih\_eX.b/KqOqr%nCJ$^!YHfi](B&G)(K?mq*?0W:?/HUUBXk45DTr0177[>>QLnjGuS<FTdE&M>r[<[R+8#
%9g!qPCbB1Nb;mgJUIMPTOPmmn-*1'1#W?JhTiirdDSXKp-*\I7]nY_b<*kcN*d5sR?N.odNGTf*)rg?")Q[KE)RiQoCsot*%,?)W
%F;.uUUPa]NJgh$h'$X_QkV3"p+$[]dLdK,49:I4ed'Ej=F5*AZ,j(Re1F;"HB@+C_We-Pel!3^!MJPMsF;#nPbVON-MQ==+_^qE?
%Z:m=U,C!r7$-d29j&!P=L2\diekp]0"J[3+L^D\g7RkY!D6HeEYr;/_8CSF.9OV[u]?&#fEENAL#T)<t8.eE\o<q+!X82TE^U>n\
%AL4MM'n"E=[p.Jt/(b=NJDanF[V'8>hNf2R=X+fb.%2XC,tQKm9iG-rdl&F01K6\/>I<1t0&q,s>j0Lh'n(_0R>6\`O!5$nHsB`j
%QmI?-m/+e3,,$mkA3.HO&=N0J'1Hhd:UTEE6UlitQ.0['OkL8;iF/=MH'cp\2@g2S=H&`c@&Ss%m*4K_qrpZh,-_9[ZkJlk[%NjN
%QT+(H@X&PP?XFLW+/\QHKoL.4c=d4R=L8(0_R.u,'Cs"$9rf$aTgAb]cJ6WQT2_g].?4mZ8:FhYU6H0X?@demZ5kS!hfu]X:+86>
%U#61Rn1[j;R4Vn;+2bpI>UB-C\65Ar9:4nsLTUV.l.gn'B"Ck9..T`1%[O\tS=FR%_1"*TCIE42hCZ"1ES+7PYDhM0`0eAL9Aq'B
%HqEQmg10hl*b(!o'1fEt0\$uX+!RDJe2OEPnQs\@_a>CM6A7;=h3jQB*Db0?6J<pML55i)92"8Lk!,/+)s4D^4;>QB1ahL3i0A[-
%f$qms:B]hd$\43jAH3f2LQ('(q:"7!iLg/35Q'!b^\lQ1rQ@G'o<7'N*QEO=W(f92nm?nDS,`.grqW2cnmB-0rbqi1%rZCdqYm,d
%lbE?"T)Itnrr\kjp\:BD2D`!<0a)D"%#/$Zasb.IY,*n5bc2A?/Nb.`/ubkJ%QdL^.>obHG-AnmZS&&Nb%gYYF.ZXIb?8S:V>6*]
%>[agQ$J'2t\]e'-KkCmT,s7oje8dhQP"FRaCUW;#-<W%NO>Cj]AA3-5Fp^`+IH53U==VcaS"[;E?'Hura$@*Z22sM"X7+=g;)X5K
%R!CCTdOg4U1cd_.MWj#9;JiKSXBL!=ZP.J'_nq2irkSIL#ZhG(lO3Bi+hHW"=B]k&eo$%Ai6A6p]Ejm*#Gk]o[98/m&'a-+.WMh1
%MVf2?Vaus@G:qE2R0(W>E?>/$QE")M`9tML,K]J\d9W3dO&PeLX8?<)EK)6O#9O:=hnreRX5/M1lcGrI?Tm$_M&i:NJP%D,6Jif>
%=BtpfVTO#2'XFI0Kl1q8OqT@M>.Hb^__#Y&U<UgiWUD:9-jhn%dLg!#&OP:KH85IadV)Vn*eYAnC-^n(GZJ.!^1+q#,@CqM,q7gR
%[rFh3acpB[%h)oE#fgK419`&s>X@/,(e4WqZu]%R,PlsH_V9e$C.=S#o.%4Ti4.@tES5fIJ4K[D9)A&W,61S.cGeUr6G4KZ[4kn1
%NK6/MA;;YS@cE!A!@ORd1ll`98gA]n(%bI@U2nV&OjB"m,L5KFM5bA=HI^_8MoWB/7g]bjdu@HUFM8i(o'<SW5lGCUZg8W=";9&O
%%RCcBnt2S4Y&le#N:l-=?.cZ0H])2gbJkSB8^1r#`+TeC;7p.FRk0.uM]sIFb*?g5RZb8q3'(%S++O;h]im>-'aZH93pjY.@;_pN
%i_]a)gGDj!Y%*9_*n>aeA1uhc7Fc[n_,j>=g^qN3\(h^Z%]T!F=XIPobm6dC2fTN>fCTkL;^a&6XWtCh/1H5p7<s"%&*h?SdWKEJ
%,P7`ST'=`h"Eqa$fr9TsA?t=(a`_sjbNj30]P^F<am(o[.]Aku/5<tu$]hL%8/mVqA%m&C=4>,H#ln<Qo_!*n&m7M_PY@8oc(;>G
%fEFTELUaR'Ye@8L@t_V-,TE\rb\gM%hWhM[5Au0U[cR;X++GXK>&7f$E?o1J#iQ.[-6'W%M)8q!)Cb5c^Ib^q'TQfN(Xn.D>dR1'
%IM#3qM8+"^8`4Eu@LuON\'%;T\$ck?"YISlT-I-U<$B@Jo#[!L?:Z15pl8\c^Ik"`"?t9/JXQTp<UY)LV@_\,WN-DNcHt-NYW99B
%Z,FK90>c"'Ae&fT-SZnh^DQP)S>>:$WC'[U>"]fZ7OAS0AL,3.@),($G'7hZ$@`2#L:h5"MEh&/n1M-iFgM^)_C8tbm?9JYO_ok#
%NRCoCD!SOH*@[eiDSmsIQXSgbqIE_SOeOQkGIMN.'U]SbNJNgp7fe3@Bbk-p$JO*LlFSVC8)/%UE-?,p.)2fk/V0h.3LY(7'OKos
%=Wn`*W+a]:j3-d)M-O2;P3N57M\Xlr\uV]$N54A@N9Wl;UW0.kc"iAE-)Y`%Mg3-^q<QEgj+Up+Wd9%]<?o"u$Y0cY7F`<CRT^?6
%Aa6Lu['OU/G0B7nKZ)6AYC9..ZJ#,1LRIns`&#9f_aVM[W!'%`]@t:m5uZGOGk`&p7cpTE23B&kFRIdY=ge81Y?Z?n39uI_8(-Lr
%/N`Wo7*;GG%phK*$/BQ=RmTTm6tUe,d0JrR*`Tm7!;Wopf7&/'g983#[FrQ]1.O]i/nri!MP\?tFGQ?$/6_+!I"=0>89-n[*t>pJ
%/Fl(2Aq=krJMnYfD7/0&fltdCUg2*uJ.ZVa\X]'pjpYWmbT]HS79Pp3)hM.YB9W4`7!m^CFM,MZkgD*b!J="P5[^V63),5e4e&1L
%o*),khQ9a!m'WklQXt;P#7\&)h=Nc#jZf8TX")0jS-;&#_SJM4Xpl()X(Pf5au6,qKTmqgTjP2O%ZXs8#jm&!!AXRDYABCp0^@_4
%6iUR.j(@^H%*();.9<Iu%)Wl,E/&NR!=I5E<Q2CGQ*]+gkrF.nm(U<R:!$r0cIZ(XBD54^DbIpfocW%f(:<.S2\OOg:La`>&SWoL
%g3>?^49G,o9<p&KTq"j'p*fKh.QYi$$<KMILp^A@!N2#Afkg34"\JpXMCTo6K)HN]9biq/Xp',VbLa`6@%JT5V@j3mJ?&G??2i0H
%M;+Q-q!b&]7W_9Gg_Lq%WU@U-ob$,0f8-dW<PCl9?c&24,SVNWG)S/0n[BkUA]KUBOA\Yn;N'@^V=_C<XsoHaF2&FgT[dN'2ZeW,
%*1lF7Nt_),70]?'1$*WTbh$BH:J"9].Z<=:S@u"baDLWYAF\afM=`NnIa0Bo+dI:]kUeR_3k+uP\67*lKG"Qg>.TfN@:g+[GSj86
%5r6-f-\gV^P,ddGA6YP']]``dRuYN%_uHJK+V0Ir"h9D*0`Z07SDb0\##&,ho""4p8Wq]I@CA-fjVb38i#<\c7]oUMU(J687paWG
%56#C*g6i17""fK=cXWWP3O353#Dft=(-1;/Y@55.KFa^QqXYs3YM]</q1aBm"]!tSkGJb:8M;05X2ogg6QQ3i2o4Kd_c:8D#9Z]=
%*85qdWkTL9?B?m`2\eogT7*^lL\"l7(")HTn.d;i<C!8L"6+N"!jZQM`kQTtcUY7_Zj"S2C!St#^5q>le!KlUWj9CCJ>1_qO43))
%rTGHh03EdpZ52Ue!0_?,A1LS-cT]n:f0St;ag!9i4DgrF?3a'Y1Dqk`fRuN`JJa*u8&$X2f2"8j-_D=7LO?eJ4JY5n]6O(*W(I1G
%"#o*4S'_P;QDc:@)1ET3,^KNje?DI4abN(:mJdPP<VEltqd8mnrD2U+rSQejJ,=uFp$I8/5LR#jr8%10s%3+Vn,Mp%J(<T*e$hR"
%J,]G^`<Q;0O&cL#@r.8RY;S?BM8i:hWI7YB0lp-j#N[]L&gnS:nj\dj8sFBc%PpTp7-1L:JOiaN8$eKr<IBWN0,G@%0n]?SmMaPV
%VLg8>jF,P4)#sMi51ePa1uPI;_f94p"h146[pX,*es`5\nIT>kM1-chpI3M,[@l]L!1CmJ+F^Ui*Mf=<M6up(2oc+q)3iiK&[A)$
%g"h'5W?aKpH]rd'KIN.Ian7E^`QBI.-0tC_(CmB_-.oNfgR]tXY5u2+RkQsgZ1WOS*K^;P][&-KJ-:OgYaNM^/CnG^Hd;V!Ka&l.
%=Q;AX%V]t.$*1'AFYCQ/i3j0=Lmk(t3).`(.V7@mNp0WJaAP`AF5#FkA:NT<$iB988?7@XQ=Xkg<Z`G!P4J#5b7ATn]_UB_E_]W5
%2#*8jc/uGrD't1]D_Hd"J!qm)7N.%c!eS-[jL()Y3+i`K2jK(=k$9pG_XaEZR\X7;"asqu;NfOtP[hmfi%$#P%Prq'!=]U(#.a!0
%dfT(QY9=$^_hj*b'nf7!)f0>h%dZ\$&J2N+67"Oi1"]aO+dUER)BCgVMeYN`N?f6)c8-2[L>k>p3HZ0ro0^q5,'fq_Wf^XXlC9:W
%.+Th]Lh_5P6g@Vi!j2+*8M)#m=];-F"2l@0,fGp/\Q.'`A$Z;W%9]@mcGg"3Jas3^,c(VL"$#AgKP*g@fEs3056hOI^8$U^2JI;`
%R*,*3F]4[5ic-KY;.e98Su3V%cP^[aGR)l@WOOH!3&:WY-Ms%%8-/3]+Y!In^"T>*5LYrC'*.C*a4%,q$&2apnsPWCI3uJ*mjiFj
%GUKGBqT5X!hMOPsp32#ZDuT6Mm8*cB?iKT95Q(AMs7tRO>7^Z!J,V,$oG8".^X.Fs4L4MeR=XrlT)U0dCDd!>J,\l>I\4biJ,Ac&
%=67uIq>:3ej+$s<s7#F5IJ`u8rnj1DF?]Wk^]"-BJ!\WVcDT!<q&.M_n(W?jZ7G\LLBBfd"4k!&+Gj=0$;QEYjh\Ub[,8e#6ja]2
%AWGK-dMGPq/.'&$&,QdR&#I'r\N>l1%"KG+R\N<Zr6oIPq@-]7M&/'nG[o#(Sft?o"eKCmE`sH@!`6Qjn&QhO&qU2=^`sOn7%I];
%)P9_qXh*.+j'RFRT&$d*UBLY`_C)\XL\&8S"EFEB;D/@U\s+D]c6AePGn(4&`sgeqb$na1'`oX`U&eZkj51oV':3NCc"'Jc_(L\a
%<(Dm\c`na8;6d)I[4['5ck[*6Ns^'?1Hmu:r19Lu[*W0VH%U)W0[50-/MgO\@A'TUf1\KD(\OXfn4f'o"d/o._J9SE=bq<&3lS#9
%gDZ\KDlo(%=UE;0n_30s2T6*WL?EE/QMR9i<qd$qo%4)"S\QTC%u9kVKuG70(bE$UN;d5$CDJddaS^tMEf#:-)n)T!N'PV$\qsSo
%Q6Q?a@p+b=1F-`>J'MM]qe<+R07jKIAHT`j03b]V2ajDC9ip/Yl2lVG[;Q7;,Y=.s!3&@j/E]`2<#+U?:%)gu2P`ZP8?ObkZilR4
%ctO1BCRBtH5YI!m9H\nXDM'qLJl4*+MEN5D3*h\Am,a'`G<mu"'TQ!d;&.0a8bE]F*F;lEQLW.=.4$ZN'&#S\"'Yo7<CqVCLX34M
%pe).+'Oe=5&mL7'a<q_3.23UQl=7^Q8-?5L%sKXA734j5(M$"`\de250lK1[[jMI_mM6NN3>'9,!OXgc`]4kt((rKQctn62L:j0Y
%,G$_pkZ0"rQ@_>4qNnOr9u#,uLi]Y#JfJ)AOiff);?brfhtcGHlQ1EJ#D[Bal@H>J&5s#c1\t!E#7P5b1X6=[[D*,-Y@@IS>su]!
%<H1^,>g5BEJ^uCJSLFmO0F84LiKTE6m,7El++rjD<OTQNG'OC)M%i9jR+;V'^LG;h"p=+Gc&g[HP.&`+:n)=T9XE#E8=,,Y5VLE)
%_Q[SB"Ir+jm3ELheWRqXTP'HYKO\h7/_%t-rg5l+lVXZ98]\G=&XO$7r_u&$LX8fZG6)HGq5mf$^?<73dnShgaJga69:o,)i%T69
%\:^TE<H.>FkMWr"ePhKG*$'J3Ol-)5ct"Nc5Ug!%DEJk+3,ngc#,np@dE;Vl.2))p)K$&C(-JNL<PVL.dO"9ghPB?gUoY/Os$j%'
%7Nah)Q&%nW5+LKILZc<4(5iY+`BdJiF?-V`Y98&,=9QC&\E4;c3Xm:k4:q]r;`#8"=)gMcVRm:,$fu:+-=dS]cK#2gN<@<nZB[`j
%!nF/7g.<V#Q3l.sSZp_S5\LjG0X;EK"U)qVCpG:h@U1BA^W1$>d6&Urq<LoAk=LgVhar[ZME?dU2(2>Hrd=-u/9Ud4gBT6JRU-ZG
%E"%%;k?)r_&V&j5NDdtoK>BnCWDYU/YS3hdq-"Wa4cu-B'2@CF>V$3m5q(`%IrO&=40"E?&1N>c!"cBno*:d=b[mUT-LH(qflak7
%LA+fD$B@%D&Yp?,ZrQDU1loa[X5NOkcOiR.=P2.\TpX(=dQlY#>97j+HCgEN92M8?,g0`7G`<mma16;3f4?_-/8ca:0RQ[%R@r2h
%0l_ae^gCaXdgg*[CrJ)^=+5DSLb4=t;q:!9$E/\Mj%05?irP<`bmI8flk@F9Cbf?m7'X!E4Irr$Qjuu>V8YaCTNQ;*:kSo"b09J+
%Fo$@SIXcei^MK(6BJjDZ$>pg2TtPLW]:kAV+4&[Io2S&a``GShY:;bY0&jSt8;73[<"F0]EaL6)W">*C,r,mV$;X7K/T:l]?it\C
%n-/Gl85f.3+3hBuO[3WnO!d?tj^>J#IY'e`Cd)?*0XKf41(9mN$NUVh<605VmID.?ISnF*olKI`V&c=[":WZq*u*HaX1@dZWeEaZ
%Z33,RXX&j`&IS.=W$85pK)Pf>"o&k7JC?9;Oh@n(`1(A7#]3s5TX#..Oa'br;8\9/3+!E5S`3[Y=gkQe1@"RoA0rJ^!WAj9#WQ1%
%;IGb'Idi,`+jkYrHc#<PJnaHnj(oI9^+A,9CqB3!8&cEq'D=gqe-;$eg&E])lGIg$aX[!;Q%tK8F&j].nOAjU.lbSeB?#_,XVJ:k
%i?=-aBn\<fUo1mYZ8lG<fE9BKqe8(e$s#XiB?KB]4#?Q]e+=EDkhZs?Ag(6AUpMnPbDsf0Ee6<#:I!(+%4cQ"X"Q<867.K*BlO<s
%'&\BD:Qe"o%1sKb3d5]ap/]gN6>HrA7'^)]3S%R#n(/d4N]Z83\bhIZo9F;J&6nm%fmnPlYf#]%q[*sC1UX7R'V`3oXq=kL)*!YO
%7O6m/)^FNdZ+m-tn\U5?:Nm['<@VOq&!$p+B6M)^_NfIFK<bkhMZ2,/p8p3r?]6q`?V:K>+8Lsn*t$n"Pp]7(WJ?ZNII^q!C:['J
%0(^'iql6h+,WQd4VW_7oIQ?Wrq;Je;GjA,*?Gfp]?2L?)B$Wt7I#a48.j:P"*I!J'HEJ-:ei3[5KjER-[_Ms^Y0B::[.#b`FkBuP
%$u+_3D*,Fh_T-$i9'UZ@dEmG_Z$Sc#_)Cf;2j(n1p'#0o6g]TjUI1l;CZYT?j(%B9gI/l-3V%Tm\4lCY[Vbb,!OkB"<W&pc_+1-p
%%N$!V9nB1/Eo(TDh#gt/ID76s*KRAUe1u#a7LR,Bb@0HU'Bb#_Pk_bVK&TQR@6Q9j1aMSRTY;O0j^6>qO+nUiI[Br!O.lRN)@kr4
%;"'75Qq],gbE&kFI,ND2N3"F?n`HWZ'n$,0pJh)2O)]kSEAC12r+Z00Cu8qRC#0U_ACJ*Hh>f>`+230"[/hpX4;Tl7aPb*od_;\P
%Hp@Afa?lnp"9$7FT3UAtiuOdNrJFXKG`7'pDg(4JJ>(h:)q1L3?m(jGATPiZ@:[atl*p!)F)/Jm::J=o4`QYF[ZQC'24M%GqVf[m
%J=/5\[:k<E1OkB-p2[UD1!7XcH'e/#KVB!\6[J"\l_S;J/6)5eO!/tS829CAB3L%a(PV6k%&qSb.p(fNrP`#_Ui+/>LIaE@aE.:?
%ic%Ht:81o3.6"l/5shAVfp83R@D%=t]&<0areQnqEWDN3F5@4rP%#3hs(h%+=tM\alhlA76Vfgd,Lo^2-?'%f6P@I&QqlZ\nF96,
%\NBGuO4N?lXg9=#T*+A?M6Z/j8l_^6I#ms&Ko&&doiM/k7R@^.:M5NI5u\%j't2$rB>$%/a"/BBo$U/sf='sGp2a6eiQ_MEbm&:F
%mb,iNm*+1%Nd5*d$a=b:>:-2;q9s6Jl-:u;1%'<hlMY,/.uM96YX<)Gd\#!>5p;$6d.2<mM35"q`G+JJk\=91$c"-("'7cWg"+*:
%CJ6Qh?!MD%LG-jC7bi_?!&9;[O@`+SO`rmV$suP!):Y:]CE/N.J`>?1Y6fpWpHMB(jtSE(.6Vjgld=-d?3'Itg\ELm"Au!m;Ajuc
%%=O8X*pE(c4p^uJj0N:M&6sMumZ83[,aTh0\Qbj(\2l`ZrGY1HNi.eWf$HplIc=kH`?uTO^,8+iT,=-U/Gg-CnZ`d-,E9T4&-XV=
%pgGQ=o#!CRlrdfFa,R%A!.uo[p1VhcrSiH"!o:3TlLlUT%-2?Aa*dG-J-+.SXXeR4=h\`S13S-<F^m_^H'6*%T5>qgAQ"[Hp%mne
%IccU@0!C=1E%plqhn@ghHf=8S[R8^S/"cTm*(!KBOhZsl(5i]GQd*C"$#qeINef<6Bs2gVCfo]E`D;LL3;B/"C!gc`DI)NNogSL*
%S>KFd*ji_)s*g!XVq^NuP\)0)7tO';B4:(C2Noer\32uOcl3)J[3$`/?`'2ch6LF]lB*fP7$B8!*1&"T2'NEqqObA8aC-BC)K^tV
%<<`l,:!PYneV-&sM\_(S?muDY$b(sX)4H2V4_Akdk=r):Kd0En&Gth@`Vh$3m?tRGZZK<O-;u'2lF0=_\_jG711KFrKYcqd%25LY
%KRd5?\FA1-V.9tn.e#/]5R5SI$X5&)i^$3H@c`Q.-Bm0KH:Db4HJ^9OTM(n;Nl1e:mGlqh[>OV1g-jK;a0oRKR)4H2ar.=HV\*Sk
%Frc[_?&D9[&J>^Z*'leSc3!KJ81RT:KsRA=.F8@%r1Hc75k+'b,*t!iRUG^WW/N.GABON3=[Z)Le&_(.6rkb>6@?L:)]_mT#5n7[
%.SLT\<&;)4Roe,O:W$_Hn[-=<Jl6*<Xl1ZU6piEpO_<8jhOf4B#cHL.g1-gRdCf#&,/%>I,7g;F)Xo"/-BKd2#D1Ht/PGT"2_HrV
%r@L.FM[=P@NEo7SO,kOg%-pl!(NR@O:uX8XEU\oH!6.ALFJ/sf-l92\;'ub:GCti%48$S5eYG;H9M>Z]@;maHL?YV4Vhe[0\1ob:
%d)d1q!EF"O"qFLtlCkL;ht'o#IDJj<Z-&9da0QO]XMc>+UIq[dr3<2bZ$HsAF4bPs/Q"hA.?ap-AhZCn6HJqpUbSVN94#'r'h%IF
%_FTV(QSpil?!&Y$13#fhp>7K[l=AAO,/;3``J_W`r"4",20"[#CbO,>Wq)C@&'17ub;CD_#U=G"bd[p_d^(pXYi$^n8/7LPAmWb?
%l\QmgBbW7<GQ8W&,)ZhB]@RoAGD'QJd5O-FEn\P2E@[Aih;8`MI;R'_SB2u!mLobfj"-"=(D0f.i5Gs=7ZdNd2qc@+/&&-+48X@L
%5nSi3OdV`C$\KZVXJbE4jUIA,NJ^]Sp5"RrS5NmP)-2jLb*9?FHhKTerU0YQ#[`^B\?:p#kI3sY67sDG8MhcYd42CBn^Et55eTB#
%i99R-+^Ndb<8M6tfq]nq=K&<"Xq&jP<=+k3gs)n(O0UZF*UYU4bl<PrVckj#\e8(S&>nr;Nj#N[(VIC:<HoB^B9L"l*X,6M8eIKJ
%.d`Ya6ldFf=):>KPo!`nZXaGMC^G7gJ8m!D>Vs@@eu<*H>3BJ'M,k)&;u4N.EYj[m-Q_=1\aE4kI9<M4L!TksA$:=fmpL-q@^o8G
%rC-F;EDr5+hL>*tUVl[9qVVcFd:trAQna)8l[jXp@,@dN/8e#LFRFX99d0B>-K0-TCVVC)oXdN-3_h]`DQVm)R&uFeU+l8n:r>_2
%iBq$g)4m6.H`=X<<^B(WmSGW&8+;)+<]=q!_+#<Sa9:%%*@oCPP00d#ZqC&5',a"mPMqifR?RhWZQ+L&S7(RV@E?LG%bC:$.m0+c
%,3?S?e*pJFiBVJZhrqU,H4,KTREZ%uU%#CEdJ(d#c0u7jC*R@R-=,CiLg6:F^;Y@?(N#hdp3hhBa@ST:A4#ce-12'>HE4TiHFu3m
%JIA>.M@#b,;;pQ4C.bq:Le2@;N99>j?!r?-VEhd+WV4GRl3RB%$"<DlU6.p/M?'/gF:827Nm0RX7\V_m,(VO>gRBr6W:"4Z!Al[7
%UT5N[->F&e1Nb$`,$%4<X2PA_ka%.8(=bW=Sk>`Z=C$eqm,!r^c:KZZs/XhuB@S[.d=6l.YsfYrgpbJj>mru_a34Q?=bnbnHip#g
%Z^rFrX+;LO9*1r!1Hg)@jj>;Kb\a]M,#3s#5"=uQ*[IL<@PF:4iSGg?[a6pl\.5h@1J=l_cK#]&kO:i.S8*8F&m[J.Xl8aNqT$sd
%V1Ffk03",pSoj44FETEqQ>)"g-BGN9ELs)38C<Nd&8i.)WhS2u*_*4GkE2^!:8/l6UAe9r$D(h8!fANONGJjBi-kB\,Nm^WkUhmG
%h-jIGbLfqt/K@+u?/Q1Lo'Vp)cXO3>rD/&[@Fn`!VgIJV\EG,lj[euk+k-MX]R'4]S$=fCF&R3BJ]cC72,%In.)XN%A>p$m3M&[*
%4]6ObVqHs_]HuWQ1=aE)i-8,[T@GDd_O:6bpF/\HL7(q&p2bF=l6%"s<1JtD^b;`s2mCHDnW')Kl_VpOg'$_s>q1bq9>Xm.(jYep
%<LU?@Kcl07IL>JR2#dF*bqX`g3-"]c!CAZ.PGA]\gQD$$R+3bDOa9e5P%XccUq0n9bSMfmPZs&&O[oN(EB'*aN9_e[R)aKF\1:2U
%f1;sTl=T[\&1/;W6*p.Aa5hj)"g-/S)`rBh%do\.i*9UgFNbON^3X$[d\.MW#n6mFKp5n<<HnE9/mE;CdG^:\<%VES2o-"JnI%>#
%#Wo]o5#IRU*)Z\7P8r,t%JWR+MjPPXX&0tI3o7H[^BtS3oDY1#G`(8A3@!mN)tWjklfe[k4(e]gV3Odk?u&#<PW25T%p^Q)0-bZb
%q%P%>Zf+[/]5CY$<UjWiBor^.bs&O<^0S!K(1a9TAk?&526_7]*YEg$M1'<V1s%51W:#:GS0``2^VPgQG[?)j!]/'=fMA6V$1j43
%>5&5WrE@:PYTU)Q#os+D=DgF,:i63*#/_E,KHXbWS]mVmP@MVm`D:PV1a#(6R33/rL0/OgLj"ZW::A6t9S2U0HYF2-%CER-;_m)W
%mXEu,*:+[+:4u!Zg7o6,d-I,ne)7>8`d?-K]FR,n,MP,E_N'A6OOkUW1VS%nYp+(_FQoTW*IkZfA`FS52`fe218?Wc:.tX[?n7AU
%fF]CCfNqXur';-_7H\u&NQ\kq8B`4-LK;<PRZa^]EC(9<`4_1iLJXD3C24%6G_SIBSiiE[0<1Nbi!<=nE,9X/Y+*U0G`1+WNrYn!
%i_!*'VQX9L)^?,eWMhA=5FiT.o7oejF7hJ)3oH\>8R*jDq@\j)i(92n+nT+g(+OZW0c7VUZQhYV0e4'SJ5gT733Rr*AJNlJ3N1Z0
%g&0$`r_rs!N\W*7<A#m9'Rm"V>3p;gW5gh&/?<MT(752Uer_g9i56%_OkWHW"&<='GhZsA!cuR(&@Bd=h\mU=*c]mB7@0%)*F(*G
%F+QJH'GC?u9^Iht3??8"&V@ep;\b?n;\2_b3lQ@%?Rk8IdUBXoh"Vdu(o:DKc+#2g5;7YI;f]igD0\AB'O)`GpA1-10dc,_4F);3
%s,q_,c>j7>AmPSa5=H#85-Na:e/(ia3!B)2jV.idI,'ri_.FM#''2\`$/\B9'Gb)u7[rlG#I/'Qr<`@63(uC#9Tr8ojTD[F"thFY
%Z'."H*E'1cFg"@;`c:,5SL7&4i#1oLk%[coS8_K'Y=ctX2pq(A+n!-10YN_WEXn!G-4Xf*G0%R0$L3j^UPNRINbC2%T<"<:Z8e3o
%QHec5<3A5cK>>U6[KT-'?Z"bC<'hZP(I\Zoa"N#5#;%tRpo#NuHR$j1;M0nUEK;YO8j60F3>PY`"m5ucG,YS69.PUr)MOO?nG=%I
%Qja8oIO<3Se5S%tHPiY#5JJA6pIOpAiBhR&#nQP9HAlOsff-JR[Q6o2)SF::I/e_2$B`5CfYI=@6a2P3)TdM?(gKr#Bc1W0QJ*qd
%m$eLK#oD3L>[VW`6*g%jJBSpd,'eXIWUNXT_@aB[d'X_&5'Y+f)6q+\ck<mO@t?FL(tE")F)fDS)=1NH*m#S"LXk=O0nf2[QN;d_
%]M1Y;Dn]!U*$XU\GUt]Jmbg^ka,oC[Xp*oQ0R)/ai*r1U&8jZ?>]2FV_d&lt8e=m"rWIFRXo!Re.HgaaUe0R]HPkt/<;2%QM3&)4
%8oU?*pk,G@)W_>l67>2akXJktINX_VR^:h0pe_gt.P%)a>H:@DeZ[nrdh5Z\`FQr`%.+67bIa=6WTiXX>%Xe?XAqn+Q'7@YNh!gS
%:=s"'"3uIcGs05EB7rhmZ)?"iCpGQ1qukd&Ti+0oOGU"_NOT_A[K2L,DQZEc#A#%L*&cr[7W3cM`4gYdD)8qlLg@9t`McHWR+Z3K
%ksVNR%O>&`7(,IoVmuGiF_-ta&D.LT\BB;JD"Q^^f4NE6U2#doAZro\-FLU2NJeic.$C!;JX@@1Nenc+7'nIsPK-]WmPaX[!p]s7
%hAjS6\Nk@a<L"-`4E;U,epq5sluO*iSj4;kP>SLo9jZUfW6J7B)"<r9EHI25)-WXG6/?Zklc!AIHlT@bYi$"Z!lGV1NF(CUO@@5)
%5j<!Ob5HR#i];2s%U%W0G0!D#*WqQMR5K6]!n\P5]XZ!Yoe9&NR+tfl]Ud[k,dM'.1Q544;4t%b(^>Xa.(c53:0[;9lG_RKJ[E-:
%b+>*o3dBun)CbUD`.8*V6&j_0A-;LVQNo"S-`/naNF(H,fqf2m.iZ-unK4&)Mq\UGMi$Pu'SLB*Ym0R#MB"M/LL[+2FrE21Z7nk[
%e-7RTnEBpS<O/k]P?#FrV3^KO9YomW-$kE@*?2]!fDi$gjFe+A`Zgq7+S40LXhl,oi*]"NT^Ac:^QITPaOML[P(h);)6Y;mf0U^b
%bh4HT;3rN`6n8-d?mF],jl-AcA_ZAR'-o;!K(XlfcgAV2>=H\-lNtH)bFp]F6K;qnR4!"ik8&W.H)@K[*567R0G:A+#s2_)^T6]T
%$D%;`6d64A3@/[0Db!Y?%jAe0:"_+]q.qD&,-.g;C,0BV'F5U@M%6XU.%gla+Zn"\G&gItPb>Y$W2@E(5W@U!&UM8@U"9;>NPIP&
%BdA30=C;H=+C<0"#]Bd<Y;A[U1THH?MImVK#Mp[uFM3EXC6Wl34!O)$\@;+9(be+@]W^5@qF#`r0/L0gbq9Obe>s'u!<eBW+p`gH
%KV9n:`U+l\ZA%sG``PI4q;cYM%\]-@4)V`HG]Y,]R,O=7,ZduLZmu*=87AcH$WH2n.s00I0U0e*0g-R]NJR'H+G>YGfl<S\I6^\W
%,kOr['O^&LS/uA6:mV/*,$2K"g[s6r>p+?t$0n5u]14\a1rKS4:4a7uX7t7;qmLt+jbQ[#*&!c_nqKMC%:K<Kj:/bj53elbF2Z_:
%lBY"b['i6N'>6p4]jmO]q#,[bjD)<6hgVP5B1XBN);3QEGqq&75f/`HPq-"K4g5g60nWA#d7CDJh:9PHYO4?rGU^1,Bj'g^Om:_I
%\QQS3/GlAL.0ra=Y_;j/L-,Q&6R'<UX&&W+*EDEpFgma#Ro6')2VZf`"?8o?`&W'lk`uSr&sXj2G$Do$,E+a#Kh`Q"]%aWOd]4i=
%)g**2Xi5DkQ<sm],%^(:MR&dek45OG]Ieq!YO#c"=8*YAcO]S)98Hc;']cI1(MIb3/goDYhTn+,/M?VmP6!h%(9d-[ooW:AIJ.22
%#e1e4LeUf=-3./h6mK?]P+Ao-5c6(>!Tn-25TF"A]&/$o.Q`KkTF$/u<(a4tCR$e:Fd7.bWZYHt]pjeU_\Uc3=cAJu7^)5<'N9Z@
%!Fs;r]U:=W"gSSV8l5T+P,bfE]/2]i*hfRC:jGJTcq1:ip7#M%F,G?aEKR015(Af#W2$\0VH85)nlB7kJ>PjO>Z6_WS[A4"j&#,F
%h`g"C/eqD;3ClXE<iPMg7cQjic;OCm5o']cTK]+h0OC-ZPE0QegZsWX$0bV$'[-&"=YZ/Q&WDq=0%.'VK>&>%3`GV1D`5dEeU[:3
%B<=?Rp9nhFf!gZkA=qj!:aA$Fme11o@u-0O$O2#p_1'M;mK8(d'Yp/P)f%BdkX2D;G5EuhR'92FG:`8>ha]Cm[g['bM(VRF7,9$W
%X\j0^9&.lEoT:5!IHH<oZ5jEnT6poV=EOnrZ04)'Go/@fiF)baU@MIr^mBuaR)qXQRQ^48T/:k.Y7G[b`c#DoYU:"bHgrK:-FJ]R
%=NLaQP`mtI$DOsGK^*J0ZmF+^4#ZqG&=^_PjEF9\*0[6_L_u:gB;g0An/ijPPr`Ut>+^lr9$),bQ^ptZ<%V"@i7R1gSNb7[O_*=:
%Uh(IfB,8V>G+o]&-=HW`a]-&iF@?8Q\C\TZ+Jge.O5ck`-_nbb9lKbZ.FGWr`aNYrGV`/CQX5&JIH!Y_)bJbMh.BrEYBpW3kuk'R
%G5F8piV?0'kB6lSfX8#>1o-dPR!^DYTGStj0oH@/8j#`UAX[,(:Bghtp&=)HMko1Q(./^mSpRPblO&aTQV0<S,,]T#OF0c6(E<Ih
%?:pus0`Ilq907Qlq'>bjin>,ejaW@':O8\pG<m:u3iKhb](f3?n!VW6imrrIiK%h>)+!$D^&!a8O$Hg@"=_gqlf(ZLIs0!IX&^=?
%-0ZhWLU<?]97E"r"6F>EBm"7adU&Qjq`;]<&p:<L(4L\>el!*<2sr($O],c>90uNf;of<Vn&JJ$NFL/CVfs.?<4W/[Iu/4fFV7)r
%_EO)G02aYrC8^YUQqV@IAhi?mLWJ\[-84cVfeL6b.O'D6^I>q^>sg4[!B"R[U*+ld('oh^L8Q;rkI0?pi^H"GouSVJ<-s)7;1grL
%d_o:*.L]eO)(fB-TRJgG^*jJrq&4H;;/j$cTn?]=3Y07h0CACOlAJ2gfeYt+?Yh8KW]>!h;[=`c"L[kVOuk#1E0LZ-n@e+o5IPk1
%`,AuT7%L]!(<,Eo*>GLB;;?gY[jeMd+1M6o;JQT&hAMDd')TOKX8b[gO02>=rF,!-27laSh,BAq&`D=?e>$nJJtU.B^X^i/0;Qd;
%R!M/]=I?C`HBcfOMMLYu*oT=44<@`*``'X.r_Q3DJNn_I-li8=\n,o%,P"86$ansRoN"G9#7^qh<L]1QT8[78cE4R2IjNdM$lDU@
%!>gf71EK-d,YOJdi.JcqU:Q4g'A'Yj&qNV\bf<1+mIekr8j\q#q$9$T(C)p3/pbV/b+bg)1(,4$IpH<l_,(Z]3h\"A\s&=9T+,3\
%96tY?R0M[5pJ;\MMgI!9h,H0cXfbW6*jnXJVMU0iH>ON:LmtkkZh'm@9=t.L@(_!BfA>E6g]-q:M=P[`>=gOJZ"uH]l3BAWWYBOB
%@,5JS=siZrE[uu?_Rd&]Q&$gnKc#pHZ$E3\*h*n"1[:m8:`3ai6W?+n\7DCoQ&2<B!cb._!tZO<MsGe!5*1'ol#LL^K;+1Q5GKKn
%UXV\*hG\E%,S[>u:!R7"nus\6+o+[&WZOfTM1n&eaTM&$lKg%sQrl^G@9ofMZ4s;Ir>!]F6EDa"m@NW,&8;4X%K2U;hG+DF=?5Eo
%l6!0%:noXc?JZY3"X2rM'WmCD@,n9ANPb@AlA,O&0*<U(RY&t>9;\*i"^!$^#gXF&[+CAE_dN*No*m%7BW3,1b&]JrV37Mq0?q-m
%8GG8IaBteg)<fbLjsQ-p4S<cQ&ho3MF\b._0h81*d*Z($]0ZDZ9C8VEc0R"?CLrffa'#J#Gj]Ve[hU"$)FY912ak,%#^<SUYKnA.
%:HG):IjsY0KJ%9S*jaI8?9Ru#]MS*JM%rmcc/_[):LtPX#4!Sg5H&5$=N:n9'jh\p2+i(`[/,c[^7.,$I9:k16L0.O\2<Z;#inii
%-cN!^41iI-=lD32k_nAeA#!+$]fepjE12%d1+;,CfLJnOlh*0.Oj6S,a*IdBj>9M9<GZM"NIKoU#Jhs$3Og_@b$tu_?6lp'Gh<,]
%cUsGDAU-!9#R<%'2mGL,Us4g1SlC(GGU!FF]hq'Sh,gYM;]Snb:"0>8=!C&/T1[]HFMo`'4?!%Q-U,dQ!p9uU%QF[O?=4.nOVoVb
%W\5PQD@5Ybe4hS)`^$2\!VDRFYFbRfYn!T`j0CG.Q5L>b_)dBekS53Ep8$DJk>*JIjag`t2Su04Da3^+m]oNUi!GCZqI3>o?R5?q
%V.N3IF[M@lm#id0%\/_Bn.&/V)a[^)o]EM$B5!HNO89P-R'B[?*7(jLC0iX`$V4<p$bn6iBPeuYKq]gWR\-s5Bt'-Z5H24g1?^I_
%THK^=A=Hg+`a,X8L'Rp1d\*7g5r]jI[*"DG5'(nU(7+^=]S1DE`ag"^`EhGHhQ31p;WKIt?1D1"B#jF4R^m\I%2882-]MHdlf/l?
%iZ9BJAffNkUaI=K.q0%9*Dd)L+iW$lU<<+X\']Aa_4J%0C^?LH0[K3t>V4jAc!-I19QZ^u48"6FQB"^QBl'Y./-()Fi>dRN`/Sid
%kbYsV:->9GA6+4UeWRe56@o@i+D<1(c5bF53p0XQUSm'B2-g:57[BLg8ZU1s>+=uHh@;)f^VFko:0h1""9](W8KjWWQP>?5@U"@s
%U`R4P@Z)GE>=GnHNF(?)_qZKl$KabX]4]$D6rAa:(%EC11MnJBl>e=rbpjWl!q?qTT#(?N]#Kq7T8]KH+&h#YpL%L%JS&><Et+Wk
%84.'E;=KoER9R.aT[-jB!-0g?"6@_*QU3-COdMcJH>0i1-_E^AZiCnq06?pJ?l`KA9T_G+3(aR9GIM5.!8DRqP/j#P7Hni/oZ84j
%=f:tR\OU$ob3EEQ^GrI5\BB'5K$o9!$$78hU/.hsq/5-s-\W-K=^l$G?J=eagk2b<B#(oK>u`Gj<f)JHO*)*+4dM,]c?DE';LWLn
%5gl*;Z%k60JHRl@UqHZETh6b&=b0PU.;8*G#0Z:o+9:K",``h8&_)!qn.bP&k$hE^f]]0&50Q+PL(ia+qNRfcmOM<fD&k6`?t++S
%q4.$'A>A<15^ea)HD"\?2Ns>*T7UR'TmZae,=nS8Pug7nea4V6^TEEFNPuK)Ge,kgL0>!B0,FenP:?)u>.q;tLWO1;"4(Q@E^L<E
%jE&";BmB"Xc8</UG'K?8[l&DZaV2Ti\-V*Hl8(QZAsUYZa39-`JNRJmN@+h%in[o$q2G+^njkN'aCO<Q+2-l`bp&L*De/Oi@uH[s
%q(V>Q>kM!=IYiiiiO:7*c"Aoq)B!q2!DK9"Qi1b=QP`'GFV:%`6^uCk0_P,LTJD4,kqaH':ePmKO#b%7^H/@9QoCh.G7Q_<5^_'m
%Em0AHk0W7eSN]_/%R8eJH'S`HplZuo[KF8hdR0-C1T(e\%33;sXWm1En6LN'C\/M>GB5%=FnYMI.I9AJ3&F>Vk9U:/AKM`W1XRdG
%LE0(E/pnir7qJEtZd'[MA05!g[bm.P:K"ENGrO)Pe5/d&%RT_s;2q1BJjIWcJUh;dd/^\^!INuBZ51rpd:]4FI;84iAjpX"ZYoKB
%\uH6(84!h1EF2'8NZ)2-YEA<5j#T.?aCMXS9ZK&pmIXiP6hNt#ad@AWb8),`TZp\7f#-/;grh18BT@\l17XGs<*H;i3OJX!(u+[V
%l0Uo?Wj+([+Y1&u7@+!110$('W?ND`1@YtJ;8q(3Q)l'%T8C\6A!>O<q(VL2]ogU6\O[-lkS't0MRP=)?j[-?*pSMBdT(AZ(lHkq
%[U7T^/3,WbF;-=9p3,2RjbO;(Wikn*eWSM.hk&Vi&<]D"0lt1lOePg;'iLOU:IA1Rf]]`VIV4uFUAXIA9%qD&/hZrC^CVSTOuF<-
%*AD8Uc^(IPe_Da*R3`W"EXk]**ZMcr[sbTCBXB9#@?:ma.nP-M4\+=;#WqNu\>sa)5UT+BoqBe'[MmlO)%1[0Dj.7?1A9^1l[tlD
%<I;%eTTDDM#pdUKW1@pEEqc^J/$e#1BR1DU2M(:jc^`)k"?MWO?0_B2F-Sdc(,Ns5X2gXHM%,sL@4I&HeSZiM@Vfh*SB;`-Sqj;(
%<lb*14\_e&L2DRsO][Cl;Ikb%Y$e\=EXrTmGd$ja'8PB9`D0SWmosndo@Hi:7'g7pm,/IHpRMgHjM$@RaWS'I_o)&3P=BHqDQ4fY
%IbVMbpQ,")rqu)ss7k'pcX2.r@=.MB5QCBIkC<I$dsq;dq9*u3qY@UmDP'/ko]r^5p7MA+qd1Forpolos8M>NcQ@W5b?t8S:[gm7
%&&/)Cci<VJhu2eh!PpmL])~>
%AI9_PrivateDataEnd
