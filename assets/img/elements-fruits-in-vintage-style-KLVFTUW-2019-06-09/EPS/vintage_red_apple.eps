%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_red_apple.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_red_apple</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T01:13:17+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T01:13:18+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T01:13:18+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6xnNu4dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:0495522BD6E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:0595522BD6E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:39e56c08-7036-6345-b677-a26f764c591b</stRef:instanceID>
            <stRef:documentID>xmp.did:4932F49441206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.878431 .745098 .545098 rgb
f
353.909 600.168 mo
353.909 600.168 348.866 609 346.881 630.203 cv
344.901 651.402 337.952 662.059 333.612 672.395 cv
332.631 666.41 li
332.631 666.41 325.502 684.512 312.561 696.145 cv
314.553 690.594 li
314.553 690.594 302.639 706.348 290.135 715.012 cv
290.225 711.281 li
290.225 711.281 273.116 725.797 258.834 730.691 cv
262.295 726.297 li
262.295 726.297 243.405 737.047 222.206 735.07 cv
228.987 731.867 li
228.987 731.867 203.522 734.676 183.85 728.73 cv
182.881 728.441 181.928 728.121 180.991 727.785 cv
180.991 727.785 161.381 721.371 144.784 713.531 cv
128.194 705.695 92.6548 694.813 69.9751 676.027 cv
47.2954 657.238 32.3774 641.242 19.0649 636.461 cv
19.0649 636.461 24.4673 628.387 39.9009 622.027 cv
55.3345 615.676 59.9829 607.949 77.8462 593.078 cv
91.522 581.691 112.323 573.961 121.323 570.957 cv
124.077 570.047 125.725 569.574 125.725 569.574 cv
125.725 569.574 131.838 563.012 150.956 558.602 cv
150.956 558.602 175.834 546.867 185.19 545.223 cv
194.545 543.57 196.366 545.48 208.026 540.902 cv
219.686 536.32 241.413 531.605 241.413 531.605 cv
238.131 528.543 li
260.842 529.813 li
256.448 526.355 li
256.448 526.355 279.913 527.27 290.956 533.113 cv
288.077 528.941 li
288.077 528.941 312.514 535.852 325.659 548.078 cv
338.795 560.305 355.084 581.18 359.881 583.527 cv
359.881 583.527 355.897 594.621 353.909 600.168 cv
cp
.27451 .207843 .145098 rgb
f
102.858 584.426 mo
110.795 580.68 118.256 577.961 123.12 576.34 cv
125.667 575.496 127.221 575.047 127.284 575.027 cv
128.795 574.59 li
129.877 573.441 li
129.881 573.434 131.85 571.566 136.694 569.277 cv
141.014 567.238 146.245 565.504 152.229 564.129 cv
152.819 563.988 li
153.374 563.727 li
160.108 560.555 179.116 552.047 186.17 550.801 cv
189.081 550.289 191.19 550.16 193.241 550.031 cv
197.553 549.758 201.631 549.504 210.1 546.18 cv
221.194 541.816 242.401 537.191 242.616 537.141 cv
252.389 535.02 li
278.483 536.477 li
275.67 534.27 li
280.514 535.191 289.295 539.488 292.456 541.164 cv
290.499 535.656 li
297.659 538.082 312.842 543.898 321.795 552.223 cv
327.834 557.848 334.655 565.461 340.678 572.176 cv
346.366 578.523 350.233 582.793 353.159 585.484 cv
348.713 597.863 li
347.483 600.23 343.088 609.902 341.241 629.676 cv
340.346 639.238 338.389 646.512 336.112 652.609 cv
334.905 645.266 li
327.358 664.328 li
327.299 664.473 320.815 681.887 307.85 692.492 cv
310.034 687.168 li
309.952 687.277 303.862 695.277 296.084 702.711 cv
296.174 698.809 li
286.557 706.961 li
286.428 707.063 273.846 717.672 261.866 723.324 cv
261.698 723.402 261.538 723.48 261.37 723.559 cv
259.487 721.371 li
259.405 721.418 258.499 721.922 256.948 722.652 cv
252.428 724.781 240.186 731.199 223.467 728.953 cv
228.366 726.23 li
228.124 726.262 203.788 728.836 185.491 723.309 cv
184.612 723.039 183.749 722.754 182.909 722.453 cv
182.557 722.336 163.272 715.996 147.206 708.41 cv
142.768 706.305 137.217 704.078 130.78 701.496 cv
113.456 694.547 89.7251 685.02 73.5923 671.656 cv
67.0337 666.227 60.9985 660.914 55.6782 656.227 cv
45.436 647.215 36.8267 639.629 28.7251 634.848 cv
31.1118 632.973 34.4517 630.762 38.9282 628.652 cv
39.9165 628.184 40.9595 627.723 42.061 627.273 cv
43.2876 626.766 44.4595 626.254 45.5767 625.723 cv
55.0142 621.27 60.5845 616.16 68.2954 609.074 cv
71.9556 605.715 76.1079 601.906 81.4751 597.434 cv
86.854 592.957 94.0454 588.582 102.858 584.426 cv
cp
.576471 .737255 .380392 rgb
f
355.428 582.871 mo
355.428 582.871 348.764 604.895 321.03 611.527 cv
293.295 618.16 274.042 620.332 262.112 620.426 cv
253.573 620.5 237.034 623.637 224.221 625.316 cv
219.139 625.984 214.647 626.418 211.467 626.344 cv
200.292 626.09 163.858 629.902 137.377 630.418 cv
110.897 630.934 27.2954 635.344 27.2954 635.344 cv
27.2954 635.344 86.0376 633.902 105.999 633.246 cv
125.956 632.582 162.17 630.246 178.959 629.699 cv
195.741 629.152 216.502 626.277 234.42 625.199 cv
252.338 624.113 265.569 623.859 269.12 623.566 cv
272.67 623.277 290.475 619.031 303.182 617.645 cv
315.889 616.258 350.159 617.605 355.428 582.871 cv
cp
.27451 .207843 .145098 rgb
f
347.803 590.148 mo
347.803 590.148 326.014 556.656 296.487 543.863 cv
296.487 543.863 318.35 557.977 328.295 571.254 cv
338.241 584.523 345.28 594.563 347.803 590.148 cv
cp
f
273.495 539.051 mo
273.495 539.051 308.467 550.199 340.405 595.945 cv
340.405 595.945 341.307 599.715 335.678 594.719 cv
332.116 591.559 320.944 576.816 313.069 568.758 cv
301.053 556.457 273.495 539.051 273.495 539.051 cv
cp
f
254.631 538.613 mo
254.631 538.613 292.963 549.563 332.026 601.621 cv
332.026 601.621 330.178 602.84 324.706 597.82 cv
319.225 592.805 314.53 584.309 307.952 578.426 cv
301.381 572.543 280.803 549.422 254.631 538.613 cv
cp
f
246.538 544.16 mo
246.538 544.16 284.866 555.109 323.928 607.168 cv
323.928 607.168 322.084 608.387 316.608 603.367 cv
311.131 598.348 306.436 589.852 299.858 583.973 cv
293.284 578.09 272.709 554.969 246.538 544.16 cv
cp
f
199.901 547.844 mo
199.901 547.844 209.178 545.539 226.463 547.754 cv
231.721 548.426 233.116 548.348 229.139 546.84 cv
217.776 542.52 213.834 543.688 199.901 547.844 cv
cp
f
226.975 543.715 mo
226.975 543.715 261.721 546.332 313.401 609.027 cv
313.401 609.027 311.557 610.242 306.084 605.223 cv
300.604 600.203 295.905 591.707 289.334 585.824 cv
282.756 579.941 252.663 551.293 226.975 543.715 cv
cp
f
217.499 548.527 mo
217.499 548.527 252.592 550.551 303.842 611.461 cv
303.842 611.461 301.956 612.688 296.499 607.832 cv
291.045 602.98 286.428 594.691 279.877 589 cv
273.323 583.313 243.35 555.582 217.499 548.527 cv
cp
f
206.936 551.777 mo
206.936 551.777 242.03 553.801 293.28 614.715 cv
293.28 614.715 291.401 615.941 285.94 611.086 cv
280.483 606.23 275.866 597.941 269.315 592.254 cv
262.764 586.566 232.792 558.836 206.936 551.777 cv
cp
f
190.409 553.355 mo
190.409 553.355 227.596 554.512 280.409 615.254 cv
280.409 615.254 278.377 616.551 272.713 611.75 cv
267.045 606.945 262.362 598.613 255.553 592.984 cv
248.749 587.359 217.655 559.887 190.409 553.355 cv
cp
f
176.37 555.832 mo
176.37 555.832 214.553 556.457 267.932 616.648 cv
267.932 616.648 265.827 617.98 260.081 613.234 cv
254.327 608.496 249.639 600.203 242.725 594.66 cv
235.811 589.109 204.264 561.984 176.37 555.832 cv
cp
f
167.444 561.074 mo
167.444 561.074 204.026 561.41 254.764 618.02 cv
254.764 618.02 252.737 619.301 247.26 614.848 cv
241.776 610.402 237.342 602.582 230.76 597.379 cv
224.17 592.176 194.135 566.711 167.444 561.074 cv
cp
f
155.788 564.684 mo
155.788 564.684 191.772 564.77 241.307 619.527 cv
241.307 619.527 239.311 620.785 233.948 616.48 cv
228.584 612.199 224.276 604.621 217.831 599.602 cv
211.385 594.578 182.006 569.996 155.788 564.684 cv
cp
f
141.538 569.148 mo
141.538 569.148 178.131 568.172 226.905 619.758 cv
226.905 619.758 224.834 621.031 219.51 617.023 cv
214.178 613.027 210.018 605.813 203.612 601.148 cv
197.206 596.473 168.045 573.523 141.538 569.148 cv
cp
f
131.049 575.477 mo
131.049 575.477 165.944 574 211.639 621.086 cv
211.639 621.086 209.643 622.301 204.631 618.664 cv
199.608 615.043 195.756 608.414 189.725 604.188 cv
183.69 599.953 156.249 579.117 131.049 575.477 cv
cp
f
118.495 580.363 mo
118.495 580.363 153.061 578.172 197.217 622.008 cv
197.217 622.008 195.213 623.215 190.342 619.859 cv
185.452 616.527 181.788 610.293 175.913 606.402 cv
170.034 602.504 143.35 583.27 118.495 580.363 cv
cp
f
107.038 586.109 mo
107.038 586.109 141.659 583.152 184.725 624.098 cv
184.725 624.098 182.694 625.305 177.905 622.207 cv
173.1 619.133 169.588 613.246 163.811 609.66 cv
158.03 606.066 131.819 588.277 107.038 586.109 cv
cp
f
94.604 591.973 mo
94.604 591.973 129.522 587.883 171.288 624.91 cv
171.288 624.91 169.202 626.125 164.499 623.379 cv
159.784 620.656 156.475 615.238 150.803 612.066 cv
145.12 608.887 119.444 593.094 94.604 591.973 cv
cp
f
86.9087 598.367 mo
86.9087 598.367 119.014 594.055 156.584 625.969 cv
156.584 625.969 154.647 627.09 150.389 624.758 cv
146.116 622.438 143.194 617.711 138.049 615.02 cv
132.905 612.324 109.663 598.863 86.9087 598.367 cv
cp
f
79.9126 604.777 mo
79.9126 604.777 109.081 600.422 142.569 627.746 cv
142.569 627.746 140.788 628.762 136.971 626.793 cv
133.139 624.832 130.577 620.738 125.959 618.473 cv
121.346 616.199 100.526 604.809 79.9126 604.777 cv
cp
f
69.4165 611.105 mo
69.4165 611.105 96.2446 606.191 125.655 627.777 cv
125.655 627.777 123.983 628.707 120.581 627.215 cv
117.167 625.723 114.999 622.391 110.889 620.676 cv
106.772 618.957 88.2446 610.25 69.4165 611.105 cv
cp
f
58.1821 619.512 mo
58.1821 619.512 83.6548 613.504 109.549 628.801 cv
109.549 628.801 107.92 629.684 104.846 628.73 cv
101.764 627.777 99.9907 625.238 96.2642 624.152 cv
92.5454 623.066 75.8618 617.398 58.1821 619.512 cv
cp
f
46.2798 626.512 mo
46.2798 626.512 69.354 620.27 91.604 631.047 cv
91.604 631.047 90.1079 631.844 87.4126 631.254 cv
84.7173 630.66 83.272 628.73 80.0063 628.078 cv
76.7524 627.418 62.1821 623.824 46.2798 626.512 cv
cp
f
339.002 614.227 mo
339.002 614.227 331.795 666.34 295.061 695.41 cv
295.061 695.41 312.87 676.574 320.745 660.496 cv
327.788 646.121 334.823 625.871 335.038 622.664 cv
335.249 619.449 335.311 616.656 339.002 614.227 cv
cp
f
330.057 618.293 mo
330.057 618.293 319.651 683.816 250.604 719.836 cv
250.604 719.836 286.401 701.223 309.327 663.508 cv
317.639 649.832 325.256 629.699 325.643 626.504 cv
326.03 623.309 326.245 620.523 330.057 618.293 cv
cp
f
321.698 620.668 mo
321.698 620.668 308.678 685.719 238.245 718.941 cv
238.245 718.941 274.756 701.785 299.174 665.012 cv
308.026 651.684 316.444 631.867 316.952 628.688 cv
317.467 625.516 317.795 622.742 321.698 620.668 cv
cp
f
312.483 621.52 mo
312.483 621.52 297.776 686.219 226.502 717.598 cv
226.502 717.598 263.444 701.395 288.811 665.277 cv
298.006 652.176 306.936 632.59 307.53 629.426 cv
308.127 626.266 308.53 623.496 312.483 621.52 cv
cp
f
302.69 621.996 mo
302.69 621.996 290.151 690.129 200.346 723.152 cv
200.346 723.152 252.342 702.059 277.702 665.941 cv
286.905 652.84 297.143 633.059 297.733 629.898 cv
298.334 626.738 298.733 623.977 302.69 621.996 cv
cp
f
293.026 622.75 mo
293.026 622.75 279.667 688.668 189.616 721.648 cv
189.616 721.648 238.702 702.645 267.545 665.473 cv
279.667 649.855 287.35 633.496 287.983 630.441 cv
288.616 627.387 289.057 624.707 293.026 622.75 cv
cp
f
282.112 623.059 mo
282.112 623.059 267.803 686.145 177.655 718.996 cv
177.655 718.996 226.803 700.113 256.092 664.207 cv
268.397 649.121 276.295 633.402 276.983 630.477 cv
277.655 627.551 278.131 624.992 282.112 623.059 cv
cp
f
270.92 626.645 mo
270.92 626.645 254.448 682.395 164.889 714.652 cv
164.889 714.652 213.756 696.215 243.834 663.652 cv
256.475 649.973 264.819 635.91 265.604 633.328 cv
266.374 630.746 266.948 628.488 270.92 626.645 cv
cp
f
259.377 626.871 mo
259.377 626.871 242.78 679.066 155.905 710.246 cv
155.905 710.246 203.327 692.453 232.768 661.723 cv
245.139 648.809 253.377 635.594 254.159 633.172 cv
254.94 630.754 255.514 628.645 259.377 626.871 cv
cp
f
245.491 628.926 mo
245.491 628.926 230.913 676.605 149.483 703.949 cv
149.483 703.949 193.221 687.621 220.627 660.082 cv
232.155 648.508 239.874 636.715 240.624 634.566 cv
241.37 632.414 241.928 630.551 245.491 628.926 cv
cp
f
231.987 629.797 mo
231.987 629.797 217.85 673.09 142.495 697.918 cv
142.495 697.918 183.495 683.066 208.69 658.059 cv
219.28 647.551 225.487 636.77 226.178 634.824 cv
226.874 632.871 228.713 631.277 231.987 629.797 cv
cp
f
220.542 628.977 mo
220.542 628.977 206.209 671.266 131.213 695.98 cv
131.213 695.98 172.78 680.402 197.975 655.855 cv
208.561 645.543 214.038 635.813 214.741 633.918 cv
215.436 632.008 217.284 630.438 220.542 628.977 cv
cp
f
208.651 629.402 mo
208.651 629.402 194.342 668.504 122.209 692.277 cv
122.209 692.277 162.221 677.375 186.674 654.445 cv
196.956 644.809 202.327 635.777 203.026 634.027 cv
203.725 632.262 205.51 630.793 208.651 629.402 cv
cp
f
197.608 629.426 mo
197.608 629.426 183.94 666.332 115.436 688.91 cv
115.436 688.91 153.44 674.762 176.702 653.09 cv
186.475 643.977 191.596 635.449 192.264 633.797 cv
192.928 632.141 194.616 630.746 197.608 629.426 cv
cp
f
183.834 632.469 mo
183.834 632.469 171.174 664.434 109.667 684.719 cv
109.667 684.719 143.807 672.066 164.862 653.105 cv
173.713 645.145 178.393 637.738 179.006 636.297 cv
179.627 634.855 181.151 633.637 183.834 632.469 cv
cp
f
172.245 632.063 mo
172.245 632.063 159.569 661.668 100.096 681.285 cv
100.096 681.285 133.131 669.117 153.67 651.344 cv
162.311 643.879 166.92 636.996 167.542 635.66 cv
168.163 634.328 169.643 633.176 172.245 632.063 cv
cp
f
157.272 632.555 mo
157.272 632.555 149.002 659.043 89.5337 678.668 cv
89.5337 678.668 119.417 667.824 139.959 650.051 cv
148.6 642.586 151.956 637.488 152.577 636.152 cv
153.194 634.82 154.678 633.676 157.272 632.555 cv
cp
f
144.135 632.531 mo
144.135 632.531 136.139 655.395 81.8306 673.316 cv
81.8306 673.316 109.139 663.469 128.104 647.855 cv
136.084 641.293 139.217 636.863 139.807 635.707 cv
140.389 634.551 141.756 633.535 144.135 632.531 cv
cp
f
126.772 633.809 mo
126.772 633.809 116.077 655.094 77.147 664.121 cv
77.147 664.121 95.3188 658.664 112.323 646.066 cv
119.467 640.773 122.35 637.285 122.909 636.387 cv
123.459 635.488 124.682 634.668 126.772 633.809 cv
cp
f
110.772 636.52 mo
110.772 636.52 103.038 650.879 64.8501 657.828 cv
64.8501 657.828 82.4985 654.316 95.8774 645.965 cv
101.499 642.453 106.088 638.375 106.553 637.82 cv
107.014 637.27 109.092 636.621 110.772 636.52 cv
cp
f
93.729 635.535 mo
93.729 635.535 86.9829 646.207 58.186 648.004 cv
58.186 648.004 72.8813 645.875 84.0532 640.754 cv
88.7485 638.598 90.7993 636.984 91.2173 636.543 cv
91.6392 636.109 92.436 635.789 93.729 635.535 cv
cp
f
75.2642 636.684 mo
75.2642 636.684 58.4204 645.66 37.6079 638.895 cv
37.6079 638.895 52.229 641.324 60.5103 639.836 cv
68.7915 638.352 75.9946 635.301 75.2642 636.684 cv
cp
f
398.297 734.405 mo
373.539 734.405 340.461 730.108 312.699 721.503 cv
241.844 699.534 183.453 646.519 160.156 563.155 cv
135.664 475.534 168.57 399.495 193.867 368.894 cv
196.809 364.187 220.184 328.194 260.965 303.526 cv
288.621 286.792 332.023 277.737 368.867 277.737 cv
394.934 277.737 428.566 283.382 456.277 292.011 cv
527.953 314.343 579.988 392.991 601.301 441.933 cv
636.266 522.198 624.031 617.464 560.633 679.108 cv
518.637 719.956 465.559 734.405 398.297 734.405 cv
cp
f
199.578 373.003 mo
199.578 373.003 222.801 334.815 264.598 309.526 cv
306.406 284.245 371.688 273.394 442.898 295.577 cv
514.113 317.769 575.668 400.667 594.871 444.737 cv
631.512 528.854 610.633 618.167 554.387 672.862 cv
498.137 727.562 408.113 739.757 314.145 714.636 cv
246.762 696.624 187.195 642.909 163.969 559.815 cv
140.75 476.729 173.773 403.956 199.578 373.003 cv
cp
1 .658824 .180392 rgb
f
369.305 394.815 mo
369.305 394.815 380.648 385.296 398.398 393.468 cv
398.398 393.468 382.723 389.151 369.305 394.815 cv
cp
1 1 1 rgb
f
355.43 406.003 mo
355.43 406.003 377.57 388.823 411.82 399.929 cv
411.82 399.929 383.359 393.796 355.43 406.003 cv
cp
f
351.488 414.655 mo
351.488 414.655 378.93 390.569 418.883 408.253 cv
418.883 408.253 382.781 396.585 351.488 414.655 cv
cp
f
351.742 419.737 mo
351.742 419.737 379.855 396.429 419.297 415.214 cv
419.297 415.214 383.539 402.546 351.742 419.737 cv
cp
f
346.867 426.882 mo
346.867 426.882 378.348 404.308 424.246 421.69 cv
424.246 421.69 384.93 410.722 346.867 426.882 cv
cp
f
354.328 429.511 mo
354.328 429.511 387.758 416.124 415.047 426.128 cv
415.047 426.128 391.004 422.019 354.328 429.511 cv
cp
f
356.848 434.851 mo
356.848 434.851 390.633 422.417 417.629 433.183 cv
417.629 433.183 393.715 428.394 356.848 434.851 cv
cp
f
349.586 441.335 mo
349.586 441.335 379 426.894 420.809 441.847 cv
420.809 441.847 387.258 432.562 349.586 441.335 cv
cp
f
355.785 444.948 mo
355.785 444.948 378.484 435.144 420.285 448.042 cv
420.285 448.042 385.719 441.847 355.785 444.948 cv
cp
f
348.047 451.14 mo
348.047 451.14 384.676 441.847 434.219 456.815 cv
434.219 456.815 398.617 448.562 348.047 451.14 cv
cp
f
354.75 457.366 mo
354.75 457.366 377.438 447.542 419.25 460.401 cv
419.25 460.401 384.688 454.245 354.75 457.366 cv
cp
f
354.75 463.558 mo
354.75 463.558 377.438 453.733 419.25 466.589 cv
419.25 466.589 384.688 460.433 354.75 463.558 cv
cp
f
354.234 468.175 mo
354.234 468.175 388.805 463.019 416.672 474.366 cv
416.672 474.366 388.293 468.175 354.234 468.175 cv
cp
f
340.301 473.339 mo
340.301 473.339 390.871 468.694 429.57 486.237 cv
429.57 486.237 399.648 475.401 340.301 473.339 cv
cp
f
348.555 479.011 mo
348.555 479.011 393.461 478.499 422.352 490.886 cv
422.352 490.886 386.742 484.167 348.555 479.011 cv
cp
f
354.234 486.749 mo
354.234 486.749 389.844 485.714 415.637 498.624 cv
415.637 498.624 395.52 491.909 354.234 486.749 cv
cp
f
349.586 490.886 mo
349.586 490.886 391.383 491.909 418.738 507.394 cv
418.738 507.394 388.293 497.077 349.586 490.886 cv
cp
f
354.234 496.554 mo
354.234 496.554 392.422 501.714 411 513.585 cv
411 513.585 370.238 501.202 354.234 496.554 cv
cp
f
349.586 500.687 mo
349.586 500.687 384.676 504.815 414.613 523.394 cv
414.613 523.394 375.395 508.94 349.586 500.687 cv
cp
f
352.164 507.394 mo
352.164 507.394 395.52 518.745 413.059 532.159 cv
413.059 532.159 369.711 514.612 352.164 507.394 cv
cp
f
345.461 509.979 mo
345.461 509.979 394.688 525.354 420.809 547.644 cv
420.809 547.644 381.066 526.491 345.461 509.979 cv
cp
f
347.523 517.206 mo
347.523 517.206 382.098 534.749 401.707 542.487 cv
401.707 542.487 373.328 536.808 347.523 517.206 cv
cp
f
342.875 517.718 mo
342.875 517.718 361.453 540.421 407.898 548.159 cv
407.898 548.159 365.066 549.71 342.875 517.718 cv
cp
f
343.91 527.003 mo
343.91 527.003 358.871 546.101 387.773 551.776 cv
387.773 551.776 354.234 548.679 343.91 527.003 cv
cp
f
334.754 528.706 mo
334.754 528.706 346.359 553.011 383.516 556.784 cv
383.516 556.784 357.813 553.499 334.754 528.706 cv
cp
f
331.523 534.229 mo
331.523 534.229 343.391 556.425 381.578 561.581 cv
381.578 561.581 348.047 564.163 331.523 534.229 cv
cp
f
327.398 538.878 mo
327.398 538.878 339.27 561.062 377.453 566.218 cv
377.453 566.218 343.918 568.8 327.398 538.878 cv
cp
f
327.555 467.44 mo
327.555 467.44 335.172 491.589 314.012 502.948 cv
292.852 514.304 312.078 503.565 301.238 503.565 cv
290.406 503.565 294.531 499.952 289.375 499.952 cv
284.211 499.952 283.426 495.296 268.973 495.812 cv
260.703 496.104 256.551 495.218 248.102 495.269 cv
241.785 495.304 237.25 495.304 237.25 495.304 cv
237.25 495.304 242.414 492.218 238.285 492.729 cv
234.152 493.249 234.156 491.702 242.414 492.218 cv
250.668 492.729 233.637 489.636 246.535 490.147 cv
259.441 490.659 222.148 482.433 222.148 482.433 cv
269.859 487.784 li
269.859 487.784 248.602 481.886 243.441 481.374 cv
238.285 480.862 252.734 479.831 244.469 478.796 cv
236.219 477.761 262.023 475.698 242.414 473.116 cv
222.801 470.534 213.672 465.487 213.672 465.487 cv
213.672 465.487 227.957 466.933 246.535 471.058 cv
246.535 471.058 220.219 459.19 198.035 458.667 cv
198.035 458.667 216.613 455.058 242.414 462.284 cv
242.414 462.284 236.727 457.628 243.441 458.151 cv
250.156 458.667 241.383 452.479 243.961 451.44 cv
246.535 450.413 239.836 442.667 245.508 442.667 cv
251.184 442.667 243.449 430.292 250.156 429.261 cv
256.859 428.226 252.203 422.034 257.375 421.519 cv
262.539 420.995 252.219 415.831 244.469 388.483 cv
244.469 388.483 256.34 410.167 268.211 423.065 cv
268.211 423.065 253.773 406.554 253.25 395.198 cv
253.25 395.198 263.566 412.222 273.891 420.487 cv
273.891 420.487 258.406 397.776 259.961 376.097 cv
259.961 376.097 263.566 396.233 270.793 404.483 cv
270.793 395.198 li
270.793 395.198 267.695 378.69 271.305 361.14 cv
271.305 361.14 269.77 391.077 287.309 418.421 cv
287.309 418.421 287.824 408.612 292.469 404.995 cv
292.469 404.995 289.883 419.968 303.82 438.542 cv
303.82 438.542 298.648 423.058 306.918 408.612 cv
306.918 408.612 301.238 429.253 312.59 442.667 cv
312.59 442.667 308.984 436.476 309.496 431.831 cv
309.496 431.831 311.047 434.929 316.727 442.155 cv
322.395 449.382 320.324 442.159 322.395 449.382 cv
324.465 456.597 322.398 435.452 333.754 429.261 cv
333.754 429.261 320.852 438.03 327.555 467.44 cv
cp
.27451 .207843 .145098 rgb
f
295.949 462.815 mo
295.949 462.815 302.352 455.729 310.891 458.354 cv
315.926 459.905 320.719 462.284 322.656 473.507 cv
322.656 473.507 317.234 457.011 295.949 462.815 cv
cp
.741176 .580392 .403922 rgb
f
282.664 403.968 mo
282.664 403.968 263.566 368.354 282.141 334.3 cv
282.141 334.3 268.215 358.546 282.664 403.968 cv
cp
.27451 .207843 .145098 rgb
f
365.227 448.858 mo
365.227 448.858 364.191 435.628 381.801 435.163 cv
398.75 434.714 398.777 444.214 398.258 450.413 cv
397.734 456.597 391.105 459.183 384.32 459.183 cv
371.938 459.183 364.715 454.538 365.227 448.858 cv
cp
1 1 1 rgb
f
167.113 453.901 mo
167.113 453.901 149.055 537.116 187.055 601.229 cv
187.055 601.229 157.258 538.269 167.113 453.901 cv
cp
.27451 .207843 .145098 rgb
f
454.789 546.608 mo
454.789 546.608 443.438 581.808 380.523 598.769 cv
380.523 598.769 441.18 590.628 454.789 546.608 cv
cp
f
370.047 606.491 mo
370.047 606.491 432.66 599.562 455.633 559.577 cv
455.633 559.577 441.723 602.077 370.047 606.491 cv
cp
f
373.559 612.667 mo
373.559 612.667 434.102 609.792 456.523 569.913 cv
456.523 569.913 445.727 610.788 373.559 612.667 cv
cp
f
378.359 619.644 mo
378.359 619.644 438.914 616.776 461.332 576.901 cv
461.332 576.901 450.523 617.765 378.359 619.644 cv
cp
f
393.461 638.366 mo
393.461 638.366 454.012 635.491 476.43 595.612 cv
476.43 595.612 465.629 636.487 393.461 638.366 cv
cp
f
384.164 625.925 mo
384.164 625.925 444.703 623.05 467.133 583.167 cv
467.133 583.167 456.332 624.042 384.164 625.925 cv
cp
f
388.859 632.401 mo
388.859 632.401 449.418 629.526 471.836 589.64 cv
471.836 589.64 461.031 630.511 388.859 632.401 cv
cp
f
398.168 644.847 mo
398.168 644.847 458.715 641.979 481.125 602.093 cv
481.125 602.093 470.328 642.96 398.168 644.847 cv
cp
f
403.422 651.218 mo
403.422 651.218 463.973 648.347 486.391 608.464 cv
486.391 608.464 475.594 649.327 403.422 651.218 cv
cp
f
408.227 658.198 mo
408.227 658.198 468.777 655.331 491.203 615.452 cv
491.203 615.452 480.398 656.315 408.227 658.198 cv
cp
f
410.754 665.19 mo
410.754 665.19 470.844 661.956 493.441 623.952 cv
493.441 623.952 482.367 662.792 410.754 665.19 cv
cp
f
414.348 671.878 mo
414.348 671.878 474.43 668.644 497.047 630.636 cv
497.047 630.636 485.965 669.472 414.348 671.878 cv
cp
f
419.508 677.741 mo
419.508 677.741 479.598 674.503 502.199 636.495 cv
502.199 636.495 491.121 675.339 419.508 677.741 cv
cp
f
450.941 541.546 mo
450.941 541.546 440.496 575.519 389.301 588.21 cv
389.301 588.21 428.523 575.655 450.941 541.546 cv
cp
f
423.656 684.319 mo
423.656 684.319 483.742 681.089 506.352 643.077 cv
506.352 643.077 495.266 681.921 423.656 684.319 cv
cp
f
428.816 690.183 mo
428.816 690.183 488.906 686.948 511.508 648.937 cv
511.508 648.937 500.422 687.78 428.816 690.183 cv
cp
f
435.164 696.354 mo
435.164 696.354 495.262 693.12 517.863 655.108 cv
517.863 655.108 506.773 693.952 435.164 696.354 cv
cp
f
440.32 702.214 mo
440.32 702.214 500.414 698.979 523.012 660.972 cv
523.012 660.972 511.941 699.823 440.32 702.214 cv
cp
f
453.359 707.116 mo
453.359 707.116 513.195 700.569 533.32 661.425 cv
533.32 661.425 524.766 700.753 453.359 707.116 cv
cp
f
458.891 712.683 mo
458.891 712.683 518.727 706.128 538.855 666.979 cv
538.855 666.979 530.305 706.315 458.891 712.683 cv
cp
f
278.895 477.753 mo
278.895 477.753 252.137 463.702 219.023 457.351 cv
219.023 457.351 252.469 457.683 278.895 477.753 cv
cp
1 .658824 .180392 rgb
f
251.801 422.897 mo
251.801 422.897 269.191 443.972 294.281 459.69 cv
294.281 459.69 253.477 436.944 246.785 430.593 cv
240.094 424.237 251.801 422.897 251.801 422.897 cv
cp
f
267.855 366.038 mo
267.855 366.038 265.516 411.862 293.273 438.62 cv
293.273 438.62 269.859 417.546 263.172 382.761 cv
263.172 382.761 265.516 367.714 267.855 366.038 cv
cp
f
295.617 474.745 mo
295.617 474.745 257.488 454.003 240.43 447.987 cv
228.605 443.812 239.426 435.944 239.426 435.944 cv
239.426 435.944 286.586 464.37 295.617 474.745 cv
cp
f
290.824 472.624 mo
290.824 472.624 286.359 479.757 291.043 488.679 cv
295.727 497.601 303.977 497.601 303.977 497.601 cv
303.977 497.601 292.387 490.909 297.957 474.854 cv
297.957 474.854 295.73 470.839 290.824 472.624 cv
cp
.741176 .580392 .403922 rgb
f
287.477 469.503 mo
287.477 469.503 280.34 489.128 295.949 496.487 cv
295.949 496.487 277.445 492.245 283.242 465.933 cv
287.477 469.503 li
cp
1 .658824 .180392 rgb
f
gsave
222.59 609.538 mo
222.59 609.538 194.047 580.995 226.156 544.425 cv
239.117 529.659 278.781 531.042 289.484 543.534 cv
300.188 556.022 323.867 572.448 301.043 611.382 cv
290.418 629.507 237.918 632.632 222.59 609.538 cv
cp
clp
226.133 538.343 mo
226.133 538.343 208.328 553.05 215.297 596.394 cv
215.297 596.394 210.648 568.526 226.133 538.343 cv
cp
1 1 1 rgb
f
233.871 531.894 mo
233.871 531.894 210.652 572.144 224.07 615.495 cv
224.07 615.495 215.809 576.276 233.871 531.894 cv
cp
f
238.516 536.542 mo
238.516 536.542 213.75 580.397 235.422 628.394 cv
235.422 628.394 220.969 585.565 238.516 536.542 cv
cp
f
244.195 534.472 mo
244.195 534.472 219.422 578.331 241.098 626.323 cv
241.098 626.323 226.652 583.499 244.195 534.472 cv
cp
f
249.156 534.948 mo
249.156 534.948 225.086 579.198 247.512 626.839 cv
247.512 626.839 232.391 584.245 249.156 534.948 cv
cp
f
254.797 532.792 mo
254.797 532.792 230.73 577.038 253.156 624.679 cv
253.156 624.679 238.035 582.089 254.797 532.792 cv
cp
f
261.023 533.401 mo
261.023 533.401 236.957 577.647 259.383 625.292 cv
259.383 625.292 244.262 582.698 261.023 533.401 cv
cp
f
266.672 531.241 mo
266.672 531.241 242.594 575.491 265.027 623.132 cv
265.027 623.132 249.898 580.538 266.672 531.241 cv
cp
f
270.023 535.401 mo
270.023 535.401 248.828 581.101 274.258 627.214 cv
274.258 627.214 256.445 585.675 270.023 535.401 cv
cp
f
275.52 532.886 mo
275.52 532.886 254.324 578.585 279.75 624.698 cv
279.75 624.698 261.93 583.155 275.52 532.886 cv
cp
f
280.516 532.843 mo
280.516 532.843 257.605 584.015 294.25 641.296 cv
294.25 641.296 264.324 589.175 280.516 532.843 cv
cp
f
285.965 530.226 mo
285.965 530.226 265.641 576.319 291.941 621.937 cv
291.941 621.937 273.336 580.745 285.965 530.226 cv
cp
f
214.777 546.347 mo
214.777 546.347 208.07 558.722 209.105 582.987 cv
209.105 582.987 203.945 560.276 214.777 546.347 cv
cp
f
291.645 530.226 mo
291.645 530.226 271.328 576.319 297.617 621.937 cv
297.617 621.937 279.016 580.745 291.645 530.226 cv
cp
f
297.84 529.71 mo
297.84 529.71 277.516 575.804 303.813 621.425 cv
303.813 621.425 285.211 580.229 297.84 529.71 cv
cp
f
304.031 528.683 mo
304.031 528.683 283.711 574.772 310.004 620.394 cv
310.004 620.394 291.398 579.202 304.031 528.683 cv
cp
f
305.602 541.179 mo
305.602 541.179 298.895 576.792 312.824 612.401 cv
312.824 612.401 303.539 576.792 305.602 541.179 cv
cp
f
310.242 549.956 mo
310.242 549.956 306.121 573.183 316.961 604.147 cv
316.961 604.147 311.277 572.659 310.242 549.956 cv
cp
f
grestore
292.16 461.476 mo
292.16 461.476 299.738 453.003 315.352 454.788 cv
315.352 454.788 300.188 447.647 285.914 461.026 cv
292.16 461.476 li
cp
f
327.043 471.058 mo
327.043 471.058 288.867 458.667 246.539 427.714 cv
204.223 396.745 205.262 383.315 203.195 376.097 cv
201.125 368.878 185.648 367.847 180.492 378.167 cv
175.328 388.483 174.188 398.194 187.711 402.937 cv
206.805 409.64 225.383 431.831 259.441 453.507 cv
293.5 475.179 307.445 484.464 311.566 494.792 cv
311.566 494.792 329.113 494.796 327.043 471.058 cv
cp
.27451 .207843 .145098 rgb
f
197 375.073 mo
197 375.073 206.648 403.835 243.773 427.581 cv
243.773 427.581 212.625 407.683 204.641 395.472 cv
195.867 382.05 194.93 378.69 197 375.073 cv
cp
.741176 .580392 .403922 rgb
f
181.512 396.241 mo
181.512 396.241 178.938 391.085 182.039 391.597 cv
185.129 392.112 180.492 389.019 187.195 387.987 cv
193.898 386.96 192.867 377.155 192.867 377.155 cv
192.867 377.155 194.938 387.468 189.777 390.565 cv
184.613 393.663 181.512 396.241 181.512 396.241 cv
cp
f
325.047 472.401 mo
325.047 472.401 326.18 491.101 311.566 494.792 cv
311.566 494.792 322.605 488.663 322.656 473.507 cv
322.656 473.507 322.707 471.062 325.047 472.401 cv
cp
f
223.703 413.198 mo
223.703 413.198 265.848 445.308 284.914 454.675 cv
303.977 464.042 319.031 470.058 319.031 470.058 cv
319.031 470.058 324.047 474.405 318.695 483.104 cv
318.695 483.104 319.695 475.409 316.02 474.069 cv
312.344 472.729 310.328 469.722 305.652 468.054 cv
300.969 466.378 287.922 457.683 276.887 452.331 cv
265.848 446.979 228.723 418.886 223.703 413.198 cv
cp
f
317.996 472.718 mo
317.996 472.718 319.781 484.694 310.023 492.464 cv
310.023 492.464 317.082 484.722 315.82 471.882 cv
315.82 471.882 316.828 470.397 317.996 472.718 cv
cp
f
314.898 470.542 mo
314.898 470.542 316.102 481.007 308.801 487.897 cv
308.801 487.897 314.105 481.05 313.297 469.839 cv
313.297 469.839 314.063 468.526 314.898 470.542 cv
cp
f
190.258 403.054 mo
190.258 403.054 197.391 405.065 206.313 412.198 cv
215.234 419.331 232.176 432.937 232.176 432.937 cv
232.176 432.937 218.348 420.226 214.113 416.659 cv
209.883 413.089 205.641 409.964 200.961 407.065 cv
196.277 404.171 190.258 403.054 190.258 403.054 cv
cp
f
312.254 469.401 mo
312.254 469.401 313.289 479.522 306.652 486.229 cv
306.652 486.229 311.484 479.577 310.809 468.729 cv
310.809 468.729 311.5 467.448 312.254 469.401 cv
cp
f
gsave
328.203 709.433 mo
390.637 727.272 473.586 712.104 511.047 704.968 cv
511.047 704.968 483.141 720.175 400.445 695.159 cv
362.473 683.667 362.109 639.94 272.902 638.968 cv
190.848 638.073 162.953 536.362 172.293 563.257 cv
192.918 622.632 234.727 682.722 328.203 709.433 cv
cp
clp
160.848 442.003 mo
160.848 442.003 182.883 446.897 206.996 433.226 cv
206.996 433.226 184.086 450.62 160.848 442.003 cv
cp
.27451 .207843 .145098 rgb
f
158.477 447.663 mo
158.477 447.663 180.508 452.562 204.613 438.89 cv
204.613 438.89 181.711 456.284 158.477 447.663 cv
cp
f
157.098 452.979 mo
157.098 452.979 179.129 457.878 203.242 444.202 cv
203.242 444.202 180.336 461.604 157.098 452.979 cv
cp
f
154.66 459.104 mo
154.66 459.104 176.695 464.003 200.809 450.331 cv
200.809 450.331 177.898 467.726 154.66 459.104 cv
cp
f
152.289 464.769 mo
152.289 464.769 174.324 469.667 198.43 455.995 cv
198.43 455.995 175.523 473.39 152.289 464.769 cv
cp
f
150.91 470.073 mo
150.91 470.073 172.938 474.972 197.059 461.3 cv
197.059 461.3 174.145 478.698 150.91 470.073 cv
cp
f
152.086 475.948 mo
152.086 475.948 173.973 483.917 205.559 461.894 cv
205.559 461.894 177.984 487.995 152.086 475.948 cv
cp
f
151.063 482.253 mo
151.063 482.253 171.359 491.464 199.051 472.038 cv
199.051 472.038 174.063 496.565 151.063 482.253 cv
cp
f
151.027 488.21 mo
151.027 488.21 170.539 501.843 205.977 473.858 cv
205.977 473.858 175.613 505.101 151.027 488.21 cv
cp
f
150.324 493.847 mo
150.324 493.847 170.828 508.386 207.395 479.487 cv
207.395 479.487 176.16 511.866 150.324 493.847 cv
cp
f
149.773 500.206 mo
149.773 500.206 170.273 514.753 206.836 485.854 cv
206.836 485.854 175.602 518.237 149.773 500.206 cv
cp
f
150.414 506.487 mo
150.414 506.487 170.922 521.026 207.477 492.136 cv
207.477 492.136 176.254 524.515 150.414 506.487 cv
cp
f
149.859 512.847 mo
149.859 512.847 170.359 527.401 206.922 498.503 cv
206.922 498.503 175.688 530.882 149.859 512.847 cv
cp
f
150.508 519.128 mo
150.508 519.128 171.008 533.675 207.57 504.784 cv
207.57 504.784 176.34 537.155 150.508 519.128 cv
cp
f
149.949 525.491 mo
149.949 525.491 170.453 540.042 207.016 511.144 cv
207.016 511.144 175.781 543.522 149.949 525.491 cv
cp
f
150.125 531.71 mo
150.125 531.71 170.629 546.261 207.191 517.366 cv
207.191 517.366 175.953 549.745 150.125 531.71 cv
cp
f
149.574 538.081 mo
149.574 538.081 170.066 552.624 206.641 523.729 cv
206.641 523.729 175.398 556.104 149.574 538.081 cv
cp
f
150.211 544.358 mo
150.211 544.358 170.715 558.901 207.277 530.011 cv
207.277 530.011 176.047 562.386 150.211 544.358 cv
cp
f
149.656 550.722 mo
149.656 550.722 170.16 565.269 206.727 536.374 cv
206.727 536.374 175.484 568.745 149.656 550.722 cv
cp
f
155.012 559.464 mo
155.012 559.464 176.688 572.214 210.641 540.308 cv
210.641 540.308 182.289 575.229 155.012 559.464 cv
cp
f
155 565.854 mo
155 565.854 176.668 578.604 210.633 546.698 cv
210.633 546.698 182.277 581.612 155 565.854 cv
cp
f
158.734 571.683 mo
158.734 571.683 180.977 583.405 213.414 549.944 cv
213.414 549.944 186.719 586.151 158.734 571.683 cv
cp
f
162.891 578.073 mo
162.891 578.073 185.551 588.964 216.73 554.327 cv
216.73 554.327 191.395 591.495 162.891 578.073 cv
cp
f
163.488 583.237 mo
163.488 583.237 185.73 594.956 218.168 561.503 cv
218.168 561.503 191.473 597.706 163.488 583.237 cv
cp
f
167.645 589.628 mo
167.645 589.628 190.305 600.526 221.484 565.89 cv
221.484 565.89 196.145 603.058 167.645 589.628 cv
cp
f
170.121 595.03 mo
170.121 595.03 192.359 606.745 224.797 573.288 cv
224.797 573.288 198.102 609.503 170.121 595.03 cv
cp
f
174.273 601.417 mo
174.273 601.417 196.93 612.308 228.113 577.675 cv
228.113 577.675 202.781 614.839 174.273 601.417 cv
cp
f
178.891 606.702 mo
178.891 606.702 201.355 617.979 233.133 583.894 cv
233.133 583.894 207.148 620.62 178.891 606.702 cv
cp
f
183.172 613.011 mo
183.172 613.011 206.031 623.456 236.547 588.214 cv
236.547 588.214 211.93 625.878 183.172 613.011 cv
cp
f
186.371 619.241 mo
186.371 619.241 209.258 629.632 239.68 594.331 cv
239.68 594.331 215.148 632.042 186.371 619.241 cv
cp
f
190.891 625.37 mo
190.891 625.37 214.141 634.917 243.254 598.522 cv
243.254 598.522 220.125 637.112 190.891 625.37 cv
cp
f
195.836 632.073 mo
195.836 632.073 219.57 640.374 246.707 602.495 cv
246.707 602.495 225.648 642.253 195.836 632.073 cv
cp
f
200.898 637.78 mo
200.898 637.78 224.91 645.202 250.641 606.351 cv
250.641 606.351 231.063 646.854 200.898 637.78 cv
cp
f
204.871 643.55 mo
204.871 643.55 228.895 650.917 254.539 612.011 cv
254.539 612.011 235.051 652.558 204.871 643.55 cv
cp
f
210.133 649.05 mo
210.133 649.05 234.418 655.53 258.621 615.698 cv
258.621 615.698 240.641 656.94 210.133 649.05 cv
cp
f
216.473 654.343 mo
216.473 654.343 240.129 659.417 264.402 620.206 cv
264.402 620.206 246.18 660.487 216.473 654.343 cv
cp
f
221.746 659.163 mo
221.746 659.163 245.629 663.378 268.477 623.405 cv
268.477 623.405 251.734 664.222 221.746 659.163 cv
cp
f
225.965 664.175 mo
225.965 664.175 249.852 668.343 272.605 628.327 cv
272.605 628.327 255.953 669.163 225.965 664.175 cv
cp
f
231.43 668.78 mo
231.43 668.78 255.516 672.065 276.82 631.354 cv
276.82 631.354 261.68 672.675 231.43 668.78 cv
cp
f
236.98 672.87 mo
236.98 672.87 262.156 677.3 281.469 634.331 cv
281.469 634.331 268.563 678.187 236.98 672.87 cv
cp
f
243.137 677.796 mo
243.137 677.796 268.414 681.296 286.141 637.581 cv
286.141 637.581 274.852 681.937 243.137 677.796 cv
cp
f
248.23 682.987 mo
248.23 682.987 273.508 686.425 291.133 642.663 cv
291.133 642.663 279.93 687.042 248.23 682.987 cv
cp
f
254.543 687.679 mo
254.543 687.679 279.906 690.175 295.926 645.726 cv
295.926 645.726 286.352 690.558 254.543 687.679 cv
cp
f
262.859 691.159 mo
262.859 691.159 288.402 692.257 301.922 647.14 cv
301.922 647.14 294.871 692.308 262.859 691.159 cv
cp
f
269.613 695.253 mo
269.613 695.253 295.129 695.409 306.992 649.749 cv
306.992 649.749 301.594 695.206 269.613 695.253 cv
cp
f
275.34 699.722 mo
275.34 699.722 300.848 699.827 312.602 654.136 cv
312.602 654.136 307.297 699.601 275.34 699.722 cv
cp
f
282.215 703.55 mo
282.215 703.55 307.68 702.702 317.746 656.55 cv
317.746 656.55 314.125 702.245 282.215 703.55 cv
cp
f
287.297 705.808 mo
287.297 705.808 312.859 705.472 323.844 659.679 cv
323.844 659.679 319.313 705.151 287.297 705.808 cv
cp
f
294.266 709.511 mo
294.266 709.511 319.75 708.249 329.051 661.995 cv
329.051 661.995 326.195 707.683 294.266 709.511 cv
cp
f
300.234 713.655 mo
300.234 713.655 325.703 712.339 334.895 666.065 cv
334.895 666.065 332.137 711.749 300.234 713.655 cv
cp
f
307.309 717.093 mo
307.309 717.093 332.695 714.835 340.168 668.187 cv
340.168 668.187 339.105 714.019 307.309 717.093 cv
cp
f
312.082 720.589 mo
312.082 720.589 338.387 719.487 347.133 671.651 cv
347.133 671.651 345.012 718.979 312.082 720.589 cv
cp
f
319.469 724.229 mo
319.469 724.229 345.637 722.175 352.629 673.909 cv
352.629 673.909 352.234 721.397 319.469 724.229 cv
cp
f
325.844 728.354 mo
325.844 728.354 352 726.257 358.879 677.96 cv
358.879 677.96 358.586 725.46 325.844 728.354 cv
cp
f
333.32 731.714 mo
333.32 731.714 359.336 728.636 364.422 680.003 cv
364.422 680.003 365.891 727.604 333.32 731.714 cv
cp
f
338.539 734.265 mo
338.539 734.265 364.703 731.358 370.133 683.038 cv
370.133 683.038 371.281 730.397 338.539 734.265 cv
cp
f
346.16 737.394 mo
346.16 737.394 372.125 733.538 375.77 684.905 cv
375.77 684.905 378.656 732.312 346.16 737.394 cv
cp
f
352.801 741.073 mo
352.801 741.073 378.75 737.175 382.293 688.511 cv
382.293 688.511 385.273 735.921 352.801 741.073 cv
cp
f
360.496 743.909 mo
360.496 743.909 386.227 739.042 387.961 690.179 cv
387.961 690.179 392.703 737.565 360.496 743.909 cv
cp
f
363.531 747.878 mo
363.531 747.878 389.703 744.968 395.141 696.644 cv
395.141 696.644 396.277 744.007 363.531 747.878 cv
cp
f
371.156 751.003 mo
371.156 751.003 397.121 747.144 400.77 698.511 cv
400.77 698.511 403.648 745.925 371.156 751.003 cv
cp
f
377.797 754.675 mo
377.797 754.675 403.738 750.784 407.281 702.128 cv
407.281 702.128 410.262 749.526 377.797 754.675 cv
cp
f
385.492 757.519 mo
385.492 757.519 411.223 752.651 412.957 703.784 cv
412.957 703.784 417.699 751.175 385.492 757.519 cv
cp
f
390.055 759.542 mo
390.055 759.542 416.004 755.651 419.547 706.987 cv
419.547 706.987 422.523 754.401 390.055 759.542 cv
cp
f
397.75 762.378 mo
397.75 762.378 423.484 757.522 425.219 708.659 cv
425.219 708.659 429.961 756.038 397.75 762.378 cv
cp
f
400.793 766.351 mo
400.793 766.351 426.961 763.448 432.395 715.124 cv
432.395 715.124 433.539 762.483 400.793 766.351 cv
cp
f
408.41 769.479 mo
408.41 769.479 434.383 765.628 438.031 716.995 cv
438.031 716.995 440.906 764.401 408.41 769.479 cv
cp
f
415.055 773.151 mo
415.055 773.151 441.004 769.261 444.539 720.597 cv
444.539 720.597 447.523 768.011 415.055 773.151 cv
cp
f
422.746 775.995 mo
422.746 775.995 448.48 771.128 450.219 722.269 cv
450.219 722.269 454.953 769.651 422.746 775.995 cv
cp
f
428.781 777.726 mo
428.781 777.726 454.73 773.835 458.27 725.179 cv
458.27 725.179 461.254 772.585 428.781 777.726 cv
cp
f
436.477 780.569 mo
436.477 780.569 462.211 775.706 463.945 726.839 cv
463.945 726.839 468.684 774.226 436.477 780.569 cv
cp
f
441.805 780.308 mo
441.805 780.308 467.758 776.413 471.293 727.753 cv
471.293 727.753 474.273 775.159 441.805 780.308 cv
cp
f
449.5 783.151 mo
449.5 783.151 475.234 778.284 476.969 729.421 cv
476.969 729.421 481.711 776.8 449.5 783.151 cv
cp
f
455.539 784.886 mo
455.539 784.886 481.484 780.987 485.027 732.327 cv
485.027 732.327 488.008 779.737 455.539 784.886 cv
cp
f
463.234 787.722 mo
463.234 787.722 488.961 782.858 490.695 733.991 cv
490.695 733.991 495.441 781.374 463.234 787.722 cv
cp
f
468.68 786.519 mo
468.68 786.519 494.633 782.636 498.172 733.972 cv
498.172 733.972 501.145 781.374 468.68 786.519 cv
cp
f
grestore
272.539 505.179 mo
272.539 505.179 300.324 511.3 318.477 498.487 cv
333.637 487.784 324.715 456.12 324.715 456.12 cv
324.715 456.12 341.219 479.659 325.609 498.042 cv
305.539 521.675 272.539 505.179 272.539 505.179 cv
cp
.27451 .207843 .145098 rgb
f
263.543 505.237 mo
263.543 505.237 303.871 519.894 319.793 506.487 cv
331.668 496.487 337.918 481.487 332.918 463.987 cv
332.918 463.987 347.293 496.487 319.793 513.362 cv
293.816 529.304 263.543 505.237 263.543 505.237 cv
cp
1 1 1 rgb
f
292.918 303.573 mo
292.918 303.573 385.418 271.905 469.582 316.073 cv
469.582 316.073 449.582 294.405 396.254 286.905 cv
344.766 279.667 292.918 303.573 292.918 303.573 cv
cp
f
281.625 312.374 mo
281.625 312.374 345.609 275.729 433.344 302.565 cv
521.07 329.405 576.043 416.382 576.043 416.382 cv
576.043 416.382 466.668 250.757 281.625 312.374 cv
cp
.27451 .207843 .145098 rgb
f
220.961 367.022 mo
220.961 367.022 257.078 300.128 351.625 294.776 cv
312.383 304.589 li
312.383 304.589 258.871 313.507 220.961 367.022 cv
cp
f
gsave
285.18 311.726 mo
285.18 311.726 351.527 282.667 436.359 305.925 cv
497.293 322.632 530.418 365.757 530.418 365.757 cv
554.168 388.257 li
554.168 388.257 514.793 331.382 377.492 337.144 cv
330.906 339.101 285.18 311.726 285.18 311.726 cv
cp
clp
295.043 307.206 mo
295.043 307.206 333.742 295.854 362.125 327.331 cv
362.125 327.331 342.512 303.073 295.043 307.206 cv
cp
f
370.902 328.366 mo
370.902 328.366 351.293 304.632 316.195 302.562 cv
316.195 302.562 344.063 295.339 370.902 328.366 cv
cp
f
379.828 329.526 mo
379.828 329.526 361.742 304.604 326.848 300.354 cv
326.848 300.354 355.105 294.894 379.828 329.526 cv
cp
f
389.152 332.452 mo
389.152 332.452 373.48 305.956 339.129 298.464 cv
339.129 298.464 367.777 295.659 389.152 332.452 cv
cp
f
398.93 337.78 mo
398.93 337.78 387.035 309.382 354.035 297.249 cv
354.035 297.249 382.797 298.405 398.93 337.78 cv
cp
f
406.148 339.862 mo
406.148 339.862 396.352 310.683 364.32 296.183 cv
364.32 296.183 392.922 299.409 406.148 339.862 cv
cp
f
412.371 342.112 mo
412.371 342.112 405.188 312.183 374.535 294.933 cv
374.535 294.933 402.75 300.659 412.371 342.112 cv
cp
f
417.938 344.698 mo
417.938 344.698 413.406 314.253 384.398 294.37 cv
384.398 294.37 412.004 302.562 417.938 344.698 cv
cp
f
423.18 347.429 mo
423.18 347.429 420.98 316.729 393.563 294.706 cv
393.563 294.706 420.473 304.968 423.18 347.429 cv
cp
f
427.938 349.44 mo
427.938 349.44 427.945 318.667 402.176 294.729 cv
402.176 294.729 428.285 306.897 427.938 349.44 cv
cp
f
432.855 351.425 mo
432.855 351.425 435.395 320.749 411.672 294.772 cv
411.672 294.772 436.691 309.042 432.855 351.425 cv
cp
f
436.492 357.116 mo
436.492 357.116 442.766 326.983 422.414 298.292 cv
422.414 298.292 445.496 315.526 436.492 357.116 cv
cp
f
442.113 361.39 mo
442.113 361.39 449.855 331.229 430.727 299.913 cv
430.727 299.913 453.141 319.792 442.113 361.39 cv
cp
f
446.238 365.519 mo
446.238 365.519 457.031 334.464 439.516 300.636 cv
439.516 300.636 461.496 322.698 446.238 365.519 cv
cp
f
452.117 367.679 mo
452.117 367.679 464.18 337.093 448.074 302.569 cv
448.074 302.569 469.129 325.526 452.117 367.679 cv
cp
f
457.914 370.815 mo
457.914 370.815 471.297 340.792 456.719 305.597 cv
456.719 305.597 476.75 329.448 457.914 370.815 cv
cp
f
463.215 373.894 mo
463.215 373.894 477.875 344.472 464.809 308.679 cv
464.809 308.679 483.813 333.362 463.215 373.894 cv
cp
f
466.574 377.804 mo
466.574 377.804 483.727 349.769 473.813 312.976 cv
473.813 312.976 490.598 339.206 466.574 377.804 cv
cp
f
471.008 381.515 mo
471.008 381.515 489.703 354.655 482.293 316.901 cv
482.293 316.901 497.148 344.565 471.008 381.515 cv
cp
f
477.719 384.097 mo
477.719 384.097 496.41 357.233 489 319.479 cv
489 319.479 503.855 347.151 477.719 384.097 cv
cp
f
481.898 389.854 mo
481.898 389.854 502.234 364.21 497.199 326.065 cv
497.199 326.065 510.297 354.612 481.898 389.854 cv
cp
f
486.828 394.151 mo
486.828 394.151 508.168 369.339 504.641 331.026 cv
504.641 331.026 516.605 360.062 486.828 394.151 cv
cp
f
492.453 397.948 mo
492.453 397.948 514.633 373.878 512.426 335.464 cv
512.426 335.464 523.383 364.901 492.453 397.948 cv
cp
f
499.164 402.077 mo
499.164 402.077 521.336 378.015 519.141 339.601 cv
519.141 339.601 530.086 369.03 499.164 402.077 cv
cp
f
grestore
175.418 575.132 mo
175.418 575.132 221.172 667.245 305.418 695.132 cv
396.043 725.132 444.168 715.132 444.168 715.132 cv
444.168 715.132 379.168 730.757 297.293 700.132 cv
203.766 665.147 175.418 575.132 175.418 575.132 cv
cp
f
607.027 284.194 mo
607.027 284.194 532.859 260.862 466.191 307.526 cv
401.426 352.866 382.441 450.022 419.941 537.522 cv
447.762 602.429 494.266 677.476 554.441 710.163 cv
575.383 721.542 593.691 734.194 622.027 726.694 cv
639.773 721.995 644.508 730.862 662.027 730.862 cv
687.859 730.862 731.191 726.694 799.941 662.522 cv
845.863 619.667 889.527 536.694 882.027 428.358 cv
875.973 340.925 791.609 287.343 702.863 290.026 cv
647.863 291.694 607.027 284.194 607.027 284.194 cv
cp
f
662.863 723.522 mo
655.227 723.522 650.012 722.851 644.969 722.202 cv
639.98 721.554 637.504 715.858 630.359 715.858 cv
628.535 715.858 618.328 721.147 616.609 721.147 cv
512.867 721.147 443.84 578.89 425.152 535.292 cv
389.898 453.026 412.98 354.312 477.703 310.554 cv
509.254 289.226 546.488 284.749 572.16 284.749 cv
594.227 284.749 609.852 288.03 610.008 288.065 cv
611.105 288.343 641.855 295.897 689.523 295.897 cv
693.887 295.897 698.402 295.835 703.035 295.694 cv
704.969 295.64 706.887 295.608 708.809 295.608 cv
798.676 295.608 865.996 354.921 874.285 432.843 cv
884.527 529.194 837.492 613.28 795.77 658.687 cv
754.184 703.944 687.633 723.522 662.863 723.522 cv
cp
.87451 .294118 .223529 rgb
f
656.559 308.147 mo
656.559 308.147 671.559 330.913 659 325.069 cv
623.098 308.386 600.59 310.046 588.973 310.374 cv
570.188 310.901 561.832 306.667 561.832 306.667 cv
561.832 306.667 577.117 308.983 581.723 308.968 cv
574.238 305.077 li
574.238 305.077 578.082 305.964 584.012 306.659 cv
589.938 307.351 583.66 302.929 590.113 304.827 cv
596.574 306.726 592.027 302.972 594.977 303.108 cv
597.922 303.249 597.688 300.765 605.23 300.882 cv
612.777 300.999 609.676 299.202 623.938 299.522 cv
638.195 299.847 665.652 298.077 665.652 298.077 cv
665.652 298.077 665.289 303.132 656.559 308.147 cv
cp
.27451 .207843 .145098 rgb
f
867.859 413.358 mo
867.859 413.358 899.527 550.862 778.691 671.272 cv
778.691 671.272 866.609 570.851 851.191 412.522 cv
867.859 413.358 li
cp
f
589.316 720.647 mo
589.316 720.647 616.191 724.397 627.027 715.858 cv
631.219 712.558 634.527 711.694 644.527 718.358 cv
654.527 725.022 665.363 724.194 665.363 724.194 cv
665.363 724.194 644.535 725.022 637.863 723.358 cv
631.191 721.694 597.648 721.483 589.316 720.647 cv
cp
f
659.527 295.026 mo
659.527 295.026 667.859 289.187 678.691 270.858 cv
689.527 252.526 700.359 245.858 708.691 238.358 cv
707.027 244.194 li
707.027 244.194 721.199 230.858 737.863 225.858 cv
733.691 230.026 li
733.691 230.026 751.191 220.858 766.191 218.358 cv
764.527 221.694 li
764.527 221.694 786.191 215.862 801.191 217.526 cv
796.191 220.026 li
796.191 220.026 817.859 218.358 836.191 229.194 cv
828.691 229.194 li
828.691 229.194 852.922 237.519 868.18 251.28 cv
868.934 251.96 869.66 252.655 870.363 253.358 cv
870.363 253.358 885.363 267.526 897.027 281.694 cv
908.691 295.858 936.191 320.862 948.691 347.526 cv
961.191 374.194 967.863 395.026 977.863 405.026 cv
977.863 405.026 969.535 410.026 952.863 409.194 cv
936.191 408.358 928.691 413.358 906.191 419.194 cv
888.965 423.659 866.855 421.776 857.438 420.651 cv
854.559 420.304 852.863 420.026 852.863 420.026 cv
852.863 420.026 844.535 423.358 825.363 419.194 cv
825.363 419.194 797.859 419.194 788.691 416.694 cv
779.527 414.194 778.691 411.687 766.191 410.858 cv
753.691 410.026 732.027 405.026 732.027 405.026 cv
733.691 409.194 li
713.691 398.358 li
716.191 403.358 li
716.191 403.358 695.363 392.526 687.863 382.526 cv
688.691 387.526 li
688.691 387.526 669.535 370.858 662.863 354.194 cv
656.191 337.526 650.363 311.698 647.027 307.526 cv
647.027 307.526 655.363 299.198 659.527 295.026 cv
cp
f
879.879 416.351 mo
871.105 416.351 863.199 415.628 858.105 415.022 cv
855.441 414.702 853.844 414.44 853.781 414.433 cv
852.223 414.179 li
850.758 414.765 li
850.75 414.765 848.172 415.616 842.82 415.616 cv
838.039 415.616 832.57 414.96 826.57 413.651 cv
825.973 413.522 li
825.363 413.522 li
817.922 413.522 797.098 413.108 790.188 411.226 cv
787.336 410.448 785.367 409.667 783.465 408.909 cv
779.445 407.312 775.652 405.804 766.57 405.198 cv
754.676 404.413 733.52 399.554 733.301 399.507 cv
723.563 397.253 li
700.578 384.804 li
702.18 387.999 li
698.195 385.101 692.086 377.468 689.941 374.608 cv
689.367 380.421 li
683.922 375.175 672.672 363.44 668.129 352.089 cv
665.059 344.429 662.137 334.632 659.559 325.991 cv
657.117 317.819 655.445 312.308 653.949 308.624 cv
663.246 299.327 li
665.367 297.71 673.469 290.839 683.574 273.741 cv
688.465 265.472 693.336 259.733 697.996 255.183 cv
695.953 262.343 li
710.91 248.323 li
711.027 248.218 724.316 235.233 740.566 231.171 cv
736.324 235.054 li
736.449 234.987 745.363 230.354 755.566 226.944 cv
753.824 230.433 li
765.996 227.167 li
766.16 227.128 782.063 222.897 795.316 222.897 cv
795.496 222.897 795.676 222.897 795.855 222.897 cv
796.629 225.683 li
796.727 225.671 797.754 225.604 799.473 225.604 cv
804.465 225.604 818.277 225.022 832.441 234.187 cv
826.848 234.554 li
827.082 234.632 850.191 242.687 864.383 255.491 cv
865.059 256.108 865.719 256.733 866.355 257.366 cv
866.617 257.62 881.359 271.581 892.652 285.296 cv
895.773 289.089 899.848 293.476 904.563 298.554 cv
917.27 312.229 934.668 330.964 943.563 349.937 cv
947.176 357.644 950.367 365.022 953.18 371.53 cv
958.598 384.05 963.152 394.585 968.441 402.37 cv
965.48 403.046 961.516 403.616 956.57 403.616 cv
955.477 403.616 954.332 403.593 953.145 403.53 cv
951.816 403.464 950.539 403.429 949.309 403.429 cv
938.875 403.429 931.652 405.683 921.656 408.796 cv
916.91 410.276 911.531 411.952 904.773 413.702 cv
897.996 415.46 889.621 416.351 879.879 416.351 cv
cp
.576471 .737255 .380392 rgb
f
650.777 310.022 mo
650.777 310.022 666.199 292.948 694.113 298.776 cv
722.027 304.608 740.367 310.858 751.199 315.858 cv
758.953 319.437 775.246 323.655 787.551 327.601 cv
792.434 329.163 796.688 330.687 799.527 332.108 cv
809.527 337.108 844.109 349.198 868.277 360.026 cv
892.449 370.858 969.949 402.526 969.949 402.526 cv
969.949 402.526 916.199 378.772 897.863 370.858 cv
879.527 362.944 845.777 349.608 830.363 342.944 cv
814.949 336.276 794.941 330.022 778.277 323.358 cv
761.613 316.694 749.535 311.276 746.199 310.026 cv
742.863 308.776 724.949 305.022 712.863 300.858 cv
700.777 296.694 670.359 280.858 650.777 310.022 cv
cp
.27451 .207843 .145098 rgb
f
gsave
857.438 420.651 mo
857.438 420.651 874.527 666.687 692.027 720.858 cv
692.027 720.858 782.859 659.194 773.691 413.358 cv
857.438 420.651 li
cp
clp
774.941 420.851 mo
774.941 420.851 817.859 430.022 857.438 420.651 cv
857.438 420.651 821.609 436.683 774.941 420.851 cv
cp
f
766.609 427.101 mo
766.609 427.101 814.523 443.351 859.109 427.101 cv
859.109 427.101 817.859 450.851 766.609 427.101 cv
cp
f
760.777 435.022 mo
760.777 435.022 809.109 453.772 857.027 435.851 cv
857.027 435.851 816.609 461.687 760.777 435.022 cv
cp
f
758.277 442.937 mo
758.277 442.937 806.609 463.772 855.359 443.772 cv
855.359 443.772 810.359 470.851 758.277 442.937 cv
cp
f
757.859 451.694 mo
757.859 451.694 801.191 474.608 856.609 452.944 cv
856.609 452.944 806.191 482.108 757.859 451.694 cv
cp
f
757.023 459.608 mo
757.023 459.608 800.777 485.022 858.273 460.022 cv
858.273 460.022 810.777 491.694 757.023 459.608 cv
cp
f
756.188 467.108 mo
756.188 467.108 799.941 492.522 857.438 467.522 cv
857.438 467.522 809.941 499.194 756.188 467.108 cv
cp
f
755.355 474.608 mo
755.355 474.608 799.109 500.022 856.605 475.022 cv
856.605 475.022 809.109 506.694 755.355 474.608 cv
cp
f
756.184 482.108 mo
756.184 482.108 799.938 507.522 857.434 482.522 cv
857.434 482.522 809.938 514.194 756.184 482.108 cv
cp
f
755.77 489.608 mo
755.77 489.608 799.523 515.022 857.02 490.022 cv
857.02 490.022 809.523 521.694 755.77 489.608 cv
cp
f
754.52 497.108 mo
754.52 497.108 798.273 522.522 855.77 497.522 cv
855.77 497.522 808.273 529.194 754.52 497.108 cv
cp
f
755.348 504.608 mo
755.348 504.608 799.105 530.022 856.598 505.022 cv
856.598 505.022 809.105 536.694 755.348 504.608 cv
cp
f
747.129 509.71 mo
747.129 509.71 805.359 538.772 856.184 512.522 cv
856.184 512.522 812.129 543.46 747.129 509.71 cv
cp
f
752.855 518.772 mo
752.855 518.772 796.609 544.187 854.105 519.187 cv
854.105 519.187 806.609 550.858 752.855 518.772 cv
cp
f
753.684 526.272 mo
753.684 526.272 797.438 551.687 854.934 526.687 cv
854.934 526.687 807.438 558.358 753.684 526.272 cv
cp
f
753.27 533.772 mo
753.27 533.772 797.023 559.187 854.52 534.187 cv
854.52 534.187 807.023 565.858 753.27 533.772 cv
cp
f
750.762 540.022 mo
750.762 540.022 794.52 565.437 852.012 540.437 cv
852.012 540.437 804.52 572.108 750.762 540.022 cv
cp
f
748.684 546.687 mo
748.684 546.687 792.438 572.101 849.934 547.101 cv
849.934 547.101 802.438 578.772 748.684 546.687 cv
cp
f
749.512 554.187 mo
749.512 554.187 793.27 579.601 850.762 554.601 cv
850.762 554.601 803.27 586.272 749.512 554.187 cv
cp
f
749.098 561.687 mo
749.098 561.687 792.855 587.101 850.348 562.101 cv
850.348 562.101 802.855 593.772 749.098 561.687 cv
cp
f
741.152 566.554 mo
741.152 566.554 785.91 594.21 847.609 572.229 cv
847.609 572.229 796.098 601.39 741.152 566.554 cv
cp
f
741.656 574.085 mo
741.656 574.085 786.418 601.745 848.113 579.765 cv
848.113 579.765 796.605 608.929 741.656 574.085 cv
cp
f
740.852 581.554 mo
740.852 581.554 785.605 609.21 847.301 587.229 cv
847.301 587.229 795.797 616.394 740.852 581.554 cv
cp
f
734.156 586.046 mo
734.156 586.046 777.496 615.878 840.203 596.96 cv
840.203 596.96 787.316 623.546 734.156 586.046 cv
cp
f
734.289 593.593 mo
734.289 593.593 777.629 623.425 840.332 604.511 cv
840.332 604.511 787.453 631.101 734.289 593.593 cv
cp
f
727.129 598.46 mo
727.129 598.46 779.629 632.21 839.156 611.929 cv
839.156 611.929 782.441 637.835 727.129 598.46 cv
cp
f
722.441 603.46 mo
722.441 603.46 767.434 637.522 830.992 621.71 cv
830.992 621.71 773.699 643.53 722.441 603.46 cv
cp
f
718.066 608.772 mo
718.066 608.772 766.504 646.897 830.754 629.261 cv
830.754 629.261 771.816 652.522 718.066 608.772 cv
cp
f
714.941 614.71 mo
714.941 614.71 765.566 655.022 829.215 636.608 cv
829.215 636.608 770.566 660.96 714.941 614.71 cv
cp
f
715.445 622.034 mo
715.445 622.034 755.188 656.515 819.613 644.714 cv
819.613 644.714 764.094 665.233 715.445 622.034 cv
cp
f
714.738 629.546 mo
714.738 629.546 754.473 664.038 818.902 652.233 cv
818.902 652.233 763.387 672.753 714.738 629.546 cv
cp
f
712.746 636.788 mo
712.746 636.788 752.48 671.272 816.906 659.472 cv
816.906 659.472 761.387 679.991 712.746 636.788 cv
cp
f
713.129 645.417 mo
713.129 645.417 753.754 678.851 817.848 665.374 cv
817.848 665.374 762.883 687.331 713.129 645.417 cv
cp
f
712.613 652.944 mo
712.613 652.944 753.234 686.39 817.336 672.913 cv
817.336 672.913 762.371 694.866 712.613 652.944 cv
cp
f
710.813 660.237 mo
710.813 660.237 751.434 693.675 815.527 680.198 cv
815.527 680.198 760.563 702.163 710.813 660.237 cv
cp
f
711.879 667.085 mo
711.879 667.085 752.504 700.515 816.598 687.038 cv
816.598 687.038 761.633 708.999 711.879 667.085 cv
cp
f
711.363 674.608 mo
711.363 674.608 751.984 708.054 816.086 694.577 cv
816.086 694.577 761.121 716.53 711.363 674.608 cv
cp
f
709.563 681.901 mo
709.563 681.901 750.184 715.339 814.277 701.862 cv
814.277 701.862 759.313 723.827 709.563 681.901 cv
cp
f
706.164 687.249 mo
706.164 687.249 746.059 721.554 810.434 709.476 cv
810.434 709.476 755.004 730.233 706.164 687.249 cv
cp
f
705.488 694.765 mo
705.488 694.765 745.371 729.085 809.754 716.999 cv
809.754 716.999 754.324 737.757 705.488 694.765 cv
cp
f
703.531 702.015 mo
703.531 702.015 743.414 736.327 807.789 724.245 cv
807.789 724.245 752.359 745.007 703.531 702.015 cv
cp
f
700.461 706.28 mo
700.461 706.28 739.07 742.022 803.844 732.312 cv
803.844 732.312 747.699 751.022 700.461 706.28 cv
cp
f
699.512 713.769 mo
699.512 713.769 738.113 749.522 802.895 739.796 cv
802.895 739.796 746.738 758.519 699.512 713.769 cv
cp
f
697.285 720.944 mo
697.285 720.944 735.891 756.687 800.668 746.972 cv
800.668 746.972 744.512 765.69 697.285 720.944 cv
cp
f
grestore
gsave
513.105 300.687 mo
513.105 300.687 467.277 311.526 437.277 374.858 cv
407.277 438.187 409.777 519.851 459.777 595.687 cv
509.777 671.522 554.777 712.358 594.777 722.358 cv
594.777 722.358 483.941 614.026 473.941 494.858 cv
463.941 375.687 529.777 307.358 529.777 307.358 cv
529.777 307.358 519.773 294.015 513.105 300.687 cv
cp
clp
501.652 300.585 mo
501.652 300.585 515.09 316.835 540.715 320.585 cv
540.715 320.585 513.84 320.272 501.652 300.585 cv
cp
f
496.652 303.397 mo
496.652 303.397 510.09 319.647 535.715 323.397 cv
535.715 323.397 508.84 323.085 496.652 303.397 cv
cp
f
492.59 306.522 mo
492.59 306.522 506.027 322.772 531.652 326.522 cv
531.652 326.522 504.777 326.21 492.59 306.522 cv
cp
f
487.277 309.647 mo
487.277 309.647 500.715 325.897 526.34 329.647 cv
526.34 329.647 499.465 329.335 487.277 309.647 cv
cp
f
482.277 312.46 mo
482.277 312.46 495.715 328.71 521.34 332.46 cv
521.34 332.46 494.465 332.147 482.277 312.46 cv
cp
f
478.215 315.585 mo
478.215 315.585 491.652 331.835 517.277 335.585 cv
517.277 335.585 490.402 335.272 478.215 315.585 cv
cp
f
475.715 320.585 mo
475.715 320.585 487.277 339.022 523.215 340.897 cv
523.215 340.897 487.902 344.335 475.715 320.585 cv
cp
f
471.34 324.647 mo
471.34 324.647 481.027 343.085 512.59 344.647 cv
512.59 344.647 480.09 348.397 471.34 324.647 cv
cp
f
467.902 329.022 mo
467.902 329.022 474.465 350.272 516.652 349.96 cv
516.652 349.96 476.34 355.585 467.902 329.022 cv
cp
f
464.152 332.772 mo
464.152 332.772 470.926 355.261 514.465 354.929 cv
514.465 354.929 472.859 360.886 464.152 332.772 cv
cp
f
460.09 337.147 mo
460.09 337.147 466.863 359.636 510.402 359.304 cv
510.402 359.304 468.797 365.261 460.09 337.147 cv
cp
f
456.965 342.147 mo
456.965 342.147 463.738 364.636 507.277 364.304 cv
507.277 364.304 465.672 370.261 456.965 342.147 cv
cp
f
452.902 346.522 mo
452.902 346.522 459.676 369.011 503.215 368.679 cv
503.215 368.679 461.609 374.636 452.902 346.522 cv
cp
f
449.777 351.522 mo
449.777 351.522 456.551 374.011 500.09 373.679 cv
500.09 373.679 458.484 379.636 449.777 351.522 cv
cp
f
445.715 355.897 mo
445.715 355.897 452.488 378.386 496.027 378.054 cv
496.027 378.054 454.422 384.011 445.715 355.897 cv
cp
f
442.277 360.585 mo
442.277 360.585 449.051 383.073 492.59 382.741 cv
492.59 382.741 450.984 388.698 442.277 360.585 cv
cp
f
438.215 364.96 mo
438.215 364.96 444.988 387.448 488.527 387.116 cv
488.527 387.116 446.922 393.073 438.215 364.96 cv
cp
f
435.09 369.96 mo
435.09 369.96 441.863 392.448 485.402 392.116 cv
485.402 392.116 443.797 398.073 435.09 369.96 cv
cp
f
431.027 374.335 mo
431.027 374.335 437.801 396.823 481.34 396.491 cv
481.34 396.491 439.734 402.448 431.027 374.335 cv
cp
f
429.957 383.854 mo
429.957 383.854 438.625 405.687 481.973 401.644 cv
481.973 401.644 441.027 411.124 429.957 383.854 cv
cp
f
426.281 388.558 mo
426.281 388.558 434.949 410.39 478.301 406.347 cv
478.301 406.347 437.355 415.827 426.281 388.558 cv
cp
f
425.695 394.999 mo
425.695 394.999 435.371 416.397 478.488 410.335 cv
478.488 410.335 438.027 421.722 425.695 394.999 cv
cp
f
425.094 402.093 mo
425.094 402.093 435.555 423.124 478.418 415.476 cv
478.418 415.476 438.41 428.347 425.094 402.093 cv
cp
f
422.57 406.249 mo
422.57 406.249 432.246 427.647 475.363 421.585 cv
475.363 421.585 434.902 432.972 422.57 406.249 cv
cp
f
421.969 413.343 mo
421.969 413.343 432.43 434.374 475.293 426.726 cv
475.293 426.726 435.285 439.597 421.969 413.343 cv
cp
f
420.695 418.749 mo
420.695 418.749 430.371 440.147 473.488 434.085 cv
473.488 434.085 433.027 445.472 420.695 418.749 cv
cp
f
420.094 425.843 mo
420.094 425.843 430.555 446.874 473.418 439.226 cv
473.418 439.226 433.41 452.097 420.094 425.843 cv
cp
f
420.473 432.386 mo
420.473 432.386 430.563 453.593 473.551 446.687 cv
473.551 446.687 433.324 458.858 420.473 432.386 cv
cp
f
420.008 439.491 mo
420.008 439.491 430.875 460.312 473.586 451.827 cv
473.586 451.827 433.832 465.483 420.008 439.491 cv
cp
f
418.793 445.921 mo
418.793 445.921 429.703 466.718 472.391 458.144 cv
472.391 458.144 432.668 471.874 418.793 445.921 cv
cp
f
418.605 453.034 mo
418.605 453.034 430.277 473.417 472.625 463.28 cv
472.625 463.28 433.43 478.468 418.605 453.034 cv
cp
f
418.41 460.819 mo
418.41 460.819 431.145 480.554 472.887 468.19 cv
472.887 468.19 434.551 485.429 418.41 460.819 cv
cp
f
418.863 467.929 mo
418.863 467.929 432.316 487.179 473.582 473.288 cv
473.582 473.288 435.91 491.929 418.863 467.929 cv
cp
f
418.484 474.46 mo
418.484 474.46 431.973 493.679 473.207 479.702 cv
473.207 479.702 435.574 498.417 418.484 474.46 cv
cp
f
419.211 481.538 mo
419.211 481.538 433.402 500.253 474.098 484.765 cv
474.098 484.765 437.18 504.862 419.211 481.538 cv
cp
f
420.852 489.077 mo
420.852 489.077 435.383 506.394 475.777 491.405 cv
475.777 491.405 439.23 510.651 420.852 489.077 cv
cp
f
421.973 495.655 mo
421.973 495.655 437.164 512.468 476.945 496.097 cv
476.945 496.097 441.188 516.593 421.973 495.655 cv
cp
f
422.207 501.776 mo
422.207 501.776 437.434 518.554 477.168 502.097 cv
477.168 502.097 441.461 522.659 422.207 501.776 cv
cp
f
423.598 508.308 mo
423.598 508.308 439.469 524.55 478.535 506.745 cv
478.535 506.745 443.664 528.534 423.598 508.308 cv
cp
f
425.344 514.507 mo
425.344 514.507 441.371 532.214 480.254 511.608 cv
480.254 511.608 445.582 536.542 425.344 514.507 cv
cp
f
427.051 521.671 mo
427.051 521.671 443.691 538.753 481.844 516.687 cv
481.844 516.687 448.066 542.917 427.051 521.671 cv
cp
f
427.832 528.421 mo
427.832 528.421 444.504 545.456 482.605 523.3 cv
482.605 523.3 448.883 549.597 427.832 528.421 cv
cp
f
429.801 535.507 mo
429.801 535.507 447.074 551.89 484.383 528.304 cv
484.383 528.304 451.605 555.878 429.801 535.507 cv
cp
f
433.934 542.843 mo
433.934 542.843 452.141 558.304 487.996 532.792 cv
487.996 532.792 456.883 562.046 433.934 542.843 cv
cp
f
436.566 549.729 mo
436.566 549.729 455.293 564.483 490.238 537.62 cv
490.238 537.62 460.176 568.046 436.566 549.729 cv
cp
f
438.223 556.315 mo
438.223 556.315 456.973 571.022 491.852 544.077 cv
491.852 544.077 461.863 574.558 438.223 556.315 cv
cp
f
441.102 563.077 mo
441.102 563.077 460.363 577.069 494.27 548.808 cv
494.27 548.808 465.379 580.429 441.102 563.077 cv
cp
f
443.551 567.663 mo
443.551 567.663 462.594 582.077 496.969 554.612 cv
496.969 554.612 467.535 585.55 443.551 567.663 cv
cp
f
446.566 574.394 mo
446.566 574.394 466.086 588.077 499.48 559.312 cv
499.48 559.312 471.16 591.358 446.566 574.394 cv
cp
f
448.59 580.874 mo
448.59 580.874 468.129 594.515 501.457 565.663 cv
501.457 565.663 473.207 597.772 448.59 580.874 cv
cp
f
451.84 587.464 mo
451.84 587.464 471.848 600.358 504.129 570.253 cv
504.129 570.253 477.043 603.437 451.84 587.464 cv
cp
f
453.352 592.78 mo
453.352 592.78 473.375 607.062 507.273 576.804 cv
507.273 576.804 478.559 610.491 453.352 592.78 cv
cp
f
456.707 599.706 mo
456.707 599.706 477.184 613.206 510.031 581.62 cv
510.031 581.62 482.496 616.421 456.707 599.706 cv
cp
f
459.043 606.405 mo
459.043 606.405 479.535 619.862 512.316 588.19 cv
512.316 588.19 484.852 623.054 459.043 606.405 cv
cp
f
462.629 613.171 mo
462.629 613.171 483.574 625.823 515.23 592.882 cv
515.23 592.882 489.004 628.827 462.629 613.171 cv
cp
f
465.012 618.046 mo
465.012 618.046 485.973 630.917 517.707 598.397 cv
517.707 598.397 491.379 633.976 465.012 618.046 cv
cp
f
468.836 624.726 mo
468.836 624.726 490.199 636.78 520.789 603.007 cv
520.789 603.007 495.715 639.624 468.836 624.726 cv
cp
f
471.629 631.241 mo
471.629 631.241 492.996 643.261 523.523 609.405 cv
523.523 609.405 498.523 646.077 471.629 631.241 cv
cp
f
475.672 637.753 mo
475.672 637.753 497.438 648.929 526.75 613.89 cv
526.75 613.89 503.063 651.55 475.672 637.753 cv
cp
f
475.637 642.421 mo
475.637 642.421 496.598 655.292 528.332 622.772 cv
528.332 622.772 502.004 658.351 475.637 642.421 cv
cp
f
479.461 649.101 mo
479.461 649.101 500.824 661.155 531.414 627.382 cv
531.414 627.382 506.34 663.999 479.461 649.101 cv
cp
f
482.254 655.616 mo
482.254 655.616 503.621 667.636 534.148 633.78 cv
534.148 633.78 509.148 670.452 482.254 655.616 cv
cp
f
486.297 662.128 mo
486.297 662.128 508.063 673.304 537.375 638.265 cv
537.375 638.265 513.688 675.925 486.297 662.128 cv
cp
f
488.504 666.241 mo
488.504 666.241 509.871 678.261 540.398 644.405 cv
540.398 644.405 515.398 681.077 488.504 666.241 cv
cp
f
492.547 672.753 mo
492.547 672.753 514.313 683.929 543.625 648.89 cv
543.625 648.89 519.938 686.55 492.547 672.753 cv
cp
f
492.512 677.421 mo
492.512 677.421 513.473 690.292 545.207 657.772 cv
545.207 657.772 518.879 693.351 492.512 677.421 cv
cp
f
496.336 684.101 mo
496.336 684.101 517.699 696.155 548.289 662.382 cv
548.289 662.382 523.215 698.999 496.336 684.101 cv
cp
f
499.129 690.616 mo
499.129 690.616 520.496 702.636 551.023 668.78 cv
551.023 668.78 526.023 705.452 499.129 690.616 cv
cp
f
503.172 697.128 mo
503.172 697.128 524.938 708.304 554.25 673.265 cv
554.25 673.265 530.563 710.925 503.172 697.128 cv
cp
f
506.629 701.866 mo
506.629 701.866 527.996 713.886 558.523 680.03 cv
558.523 680.03 533.523 716.702 506.629 701.866 cv
cp
f
510.672 708.378 mo
510.672 708.378 532.438 719.554 561.75 684.515 cv
561.75 684.515 538.063 722.175 510.672 708.378 cv
cp
f
514.754 711.241 mo
514.754 711.241 536.121 723.261 566.648 689.405 cv
566.648 689.405 541.648 726.077 514.754 711.241 cv
cp
f
518.797 717.753 mo
518.797 717.753 540.563 728.929 569.875 693.89 cv
569.875 693.89 546.188 731.55 518.797 717.753 cv
cp
f
522.254 722.491 mo
522.254 722.491 543.621 734.511 574.148 700.655 cv
574.148 700.655 549.148 737.327 522.254 722.491 cv
cp
f
526.297 729.003 mo
526.297 729.003 548.063 740.179 577.375 705.14 cv
577.375 705.14 553.688 742.8 526.297 729.003 cv
cp
f
531.004 731.241 mo
531.004 731.241 552.371 743.261 582.898 709.405 cv
582.898 709.405 557.898 746.077 531.004 731.241 cv
cp
f
535.047 737.753 mo
535.047 737.753 556.813 748.929 586.125 713.89 cv
586.125 713.89 562.438 751.55 535.047 737.753 cv
cp
f
grestore
613.691 715.647 mo
613.691 715.647 628.066 698.772 639.941 706.272 cv
651.816 713.772 659.941 718.772 659.941 718.772 cv
659.941 718.772 648.066 714.397 640.566 710.647 cv
633.066 706.897 623.691 708.772 613.691 715.647 cv
cp
f
610.254 290.96 mo
610.254 290.96 583.691 282.522 552.598 288.46 cv
552.598 288.46 589.629 285.491 610.254 290.96 cv
cp
f
862.859 429.194 mo
862.859 429.194 869.527 518.362 827.859 600.862 cv
827.859 600.862 877.027 519.198 862.859 429.194 cv
cp
1 1 1 rgb
f
gsave
493.691 452.526 mo
493.691 452.526 485.441 410.632 499.527 387.526 cv
520.359 353.362 544.707 352.101 556.191 354.194 cv
592.859 360.858 596.277 376.604 587.859 415.026 cv
579.441 453.452 567.922 462.265 561.816 473.253 cv
545.152 503.253 537.117 504.89 530.566 506.378 cv
516.816 509.503 498.215 479.104 493.691 452.526 cv
cp
clp
533.078 358.729 mo
533.078 358.729 553.336 367.546 591.137 362.214 cv
591.137 362.214 556.34 372.921 533.078 358.729 cv
cp
f
519.074 360.003 mo
521.684 361.741 549.332 381.296 606.527 365.827 cv
606.527 365.827 548 388.116 519.074 360.003 cv
cp
f
505.406 361.565 mo
505.406 361.565 537.645 393.3 612.301 370.64 cv
612.301 370.64 541.496 399.382 505.406 361.565 cv
cp
f
508.496 371.327 mo
508.496 371.327 535.75 396.608 601.777 379.128 cv
601.777 379.128 543.957 402.292 508.496 371.327 cv
cp
f
507.762 377.038 mo
507.762 377.038 534.703 402.351 601.047 384.847 cv
601.047 384.847 543.223 408.007 507.762 377.038 cv
cp
f
501.996 379.14 mo
501.996 379.14 534.129 411.507 608.883 388.21 cv
608.883 388.21 538.078 416.952 501.996 379.14 cv
cp
f
498.457 385.104 mo
498.457 385.104 530.863 416.979 605.348 394.179 cv
605.348 394.179 535.563 422.046 498.457 385.104 cv
cp
f
502.52 393.522 mo
502.52 393.522 530.285 419.233 595.801 401.327 cv
595.801 401.327 537.98 424.491 502.52 393.522 cv
cp
f
496.75 395.616 mo
496.75 395.616 528.406 427.874 603.641 404.69 cv
603.641 404.69 532.832 433.437 496.75 395.616 cv
cp
f
493.215 401.589 mo
493.215 401.589 525.875 432.812 600.105 410.663 cv
600.105 410.663 529.301 439.401 493.215 401.589 cv
cp
f
496.387 410.554 mo
496.387 410.554 523.727 435.046 589.668 418.362 cv
589.668 418.362 531.848 441.526 496.387 410.554 cv
cp
f
490.617 412.655 mo
490.617 412.655 523.277 443.874 597.508 421.726 cv
597.508 421.726 526.699 450.468 490.617 412.655 cv
cp
f
487.082 418.62 mo
487.082 418.62 519.742 449.847 593.973 427.698 cv
593.973 427.698 523.168 456.437 487.082 418.62 cv
cp
f
491.441 428.581 mo
491.441 428.581 518.781 453.073 584.723 436.386 cv
584.723 436.386 526.902 459.55 491.441 428.581 cv
cp
f
485.672 430.679 mo
485.672 430.679 518.332 461.901 592.559 439.749 cv
592.559 439.749 521.754 468.491 485.672 430.679 cv
cp
f
482.137 436.647 mo
482.137 436.647 514.418 468.847 589.031 445.722 cv
589.031 445.722 518.223 474.46 482.137 436.647 cv
cp
f
481.73 442.487 mo
481.73 442.487 514.289 474.351 588.621 451.562 cv
588.621 451.562 517.816 480.304 481.73 442.487 cv
cp
f
478.195 448.46 mo
478.195 448.46 510.785 480.632 585.086 457.53 cv
585.086 457.53 514.277 486.276 478.195 448.46 cv
cp
f
481.496 458.89 mo
481.496 458.89 516.023 488.03 588.742 461.327 cv
588.742 461.327 519.852 494.397 481.496 458.89 cv
cp
f
478.336 465.065 mo
478.336 465.065 512.547 495.202 585.582 467.507 cv
585.582 467.507 516.691 500.573 478.336 465.065 cv
cp
f
478.293 470.917 mo
478.293 470.917 512.766 500.706 585.539 473.362 cv
585.539 473.362 516.648 506.433 478.293 470.917 cv
cp
f
475.133 477.097 mo
475.133 477.097 509.652 507.194 582.387 479.538 cv
582.387 479.538 513.488 512.608 475.133 477.097 cv
cp
f
483.445 488.542 mo
483.445 488.542 520.402 514.558 590.496 481.585 cv
590.496 481.585 524.77 520.565 483.445 488.542 cv
cp
f
480.84 494.976 mo
480.84 494.976 517.566 522.007 587.895 488.022 cv
587.895 488.022 522.164 526.991 480.84 494.976 cv
cp
f
481.316 500.819 mo
481.316 500.819 518.258 527.468 588.363 493.854 cv
588.363 493.854 522.633 532.835 481.316 500.819 cv
cp
f
478.703 507.249 mo
478.703 507.249 515.723 534.202 585.754 500.288 cv
585.754 500.288 520.016 539.265 478.703 507.249 cv
cp
f
grestore
522.027 292.526 mo
522.027 292.526 384.527 316.694 417.027 489.194 cv
417.027 489.194 401.199 343.362 522.027 292.526 cv
cp
f
501.504 303.147 mo
501.504 303.147 430.266 327.632 416.418 428.905 cv
401.922 534.937 481.34 631.718 513.484 663.772 cv
513.484 663.772 453.605 594.729 432.805 523.835 cv
412.004 452.948 417.047 359.245 501.504 303.147 cv
cp
.27451 .207843 .145098 rgb
f
648.379 325.858 mo
648.379 325.858 624.316 306.796 582.441 315.858 cv
582.441 315.858 618.379 311.483 648.379 325.858 cv
cp
f
599.629 309.921 mo
599.629 309.921 581.816 313.671 562.754 308.983 cv
543.691 304.296 533.691 310.233 533.691 310.233 cv
533.691 310.233 544.629 303.983 557.129 305.546 cv
569.629 307.108 573.379 309.296 587.754 307.421 cv
602.129 305.546 599.629 309.921 599.629 309.921 cv
cp
f
647.387 302.249 mo
647.387 302.249 632.824 291.46 598.434 298.546 cv
598.434 298.546 619.797 295.589 625.875 301.448 cv
631.957 307.308 646.801 307.675 647.387 302.249 cv
cp
f
626.191 308.358 mo
626.191 308.358 625.363 283.358 622.027 274.194 cv
618.691 265.026 614.527 253.358 621.199 250.858 cv
625.945 249.081 629.523 254.198 633.691 255.026 cv
637.863 255.858 647.035 262.522 645.363 270.858 cv
643.691 279.194 637.547 294.71 640.879 309.71 cv
640.879 309.71 631.816 313.147 626.191 308.358 cv
cp
f
619.949 255.026 mo
619.949 255.026 619.535 260.437 628.285 259.608 cv
637.035 258.776 639.629 260.491 639.629 260.491 cv
639.629 260.491 631.203 256.272 628.285 254.608 cv
625.363 252.944 620.785 251.698 619.949 255.026 cv
cp
.741176 .580392 .403922 rgb
f
635.723 258.616 mo
635.723 258.616 646.504 261.272 643.691 272.835 cv
643.691 272.835 644.316 267.21 641.504 264.71 cv
638.691 262.21 638.848 261.585 636.973 261.116 cv
635.098 260.647 634.629 259.397 631.035 259.085 cv
627.441 258.772 634.473 257.835 635.723 258.616 cv
cp
f
619.316 259.71 mo
619.316 259.71 619.941 265.804 622.754 271.741 cv
625.566 277.679 628.379 300.491 627.441 309.554 cv
627.441 309.554 628.379 307.835 628.379 300.647 cv
628.379 295.022 626.973 288.46 626.973 284.71 cv
626.973 280.96 625.098 274.085 624.16 272.054 cv
623.223 270.022 620.098 263.616 619.316 259.71 cv
cp
f
627.754 307.835 mo
627.754 307.835 630.098 310.96 639.473 309.397 cv
639.473 309.397 633.691 312.679 627.129 309.554 cv
627.754 307.835 li
cp
f
619.316 259.71 mo
619.316 259.71 619.629 264.296 626.816 264.296 cv
626.816 264.296 626.191 265.233 623.066 265.546 cv
619.941 265.858 619.629 264.187 619.316 259.71 cv
cp
f
660.777 306.694 mo
660.777 306.694 666.199 346.276 687.449 370.444 cv
687.449 370.444 673.699 348.358 670.363 332.108 cv
667.027 315.858 664.941 303.776 660.777 306.694 cv
cp
.27451 .207843 .145098 rgb
f
706.191 384.608 mo
706.191 384.608 679.316 359.608 669.941 304.608 cv
669.941 304.608 670.73 300.812 673.691 307.733 cv
675.566 312.108 679.383 330.21 683.066 340.858 cv
688.691 357.108 706.191 384.608 706.191 384.608 cv
cp
f
723.066 393.046 mo
723.066 393.046 693.066 366.796 679.941 303.046 cv
679.941 303.046 682.129 302.733 684.941 309.608 cv
687.754 316.483 688.379 326.171 691.816 334.296 cv
695.254 342.421 704.004 372.108 723.066 393.046 cv
cp
f
732.754 391.483 mo
732.754 391.483 702.754 365.233 689.629 301.483 cv
689.629 301.483 691.816 301.171 694.629 308.046 cv
697.441 314.921 698.066 324.608 701.504 332.733 cv
704.941 340.858 713.691 370.546 732.754 391.483 cv
cp
f
776.504 408.046 mo
776.504 408.046 767.129 406.171 752.441 396.796 cv
747.973 393.944 746.684 393.421 749.629 396.483 cv
758.066 405.233 762.129 405.858 776.504 408.046 cv
cp
f
750.254 400.233 mo
750.254 400.233 719.941 383.046 699.941 304.296 cv
699.941 304.296 702.129 303.983 704.941 310.858 cv
707.754 317.733 708.379 327.421 711.816 335.546 cv
715.254 343.671 730.254 382.421 750.254 400.233 cv
cp
f
760.879 399.921 mo
760.879 399.921 730.004 383.124 709.629 306.171 cv
709.629 306.171 711.855 305.862 714.723 312.581 cv
717.59 319.3 718.223 328.769 721.727 336.706 cv
725.227 344.647 740.512 382.515 760.879 399.921 cv
cp
f
771.816 401.483 mo
771.816 401.483 740.941 384.687 720.566 307.733 cv
720.566 307.733 722.793 307.425 725.66 314.144 cv
728.527 320.862 729.16 330.331 732.664 338.269 cv
736.164 346.21 751.449 384.077 771.816 401.483 cv
cp
f
787.441 407.108 mo
787.441 407.108 754.305 390.198 732.441 312.733 cv
732.441 312.733 734.832 312.425 737.906 319.187 cv
740.984 325.952 741.668 335.483 745.422 343.476 cv
749.184 351.468 765.582 389.585 787.441 407.108 cv
cp
f
801.191 410.858 mo
801.191 410.858 766.926 394.003 744.316 316.796 cv
744.316 316.796 746.789 316.487 749.969 323.229 cv
753.152 329.968 753.855 339.472 757.742 347.437 cv
761.629 355.405 778.586 393.39 801.191 410.858 cv
cp
f
811.504 409.921 mo
811.504 409.921 778.559 394.015 756.816 321.171 cv
756.816 321.171 759.195 320.878 762.246 327.245 cv
765.316 333.601 765.988 342.565 769.723 350.077 cv
773.465 357.597 789.77 393.44 811.504 409.921 cv
cp
f
823.586 411.628 mo
823.586 411.628 791.074 396.202 769.629 325.546 cv
769.629 325.546 771.973 325.261 774.988 331.437 cv
778.016 337.604 778.68 346.296 782.363 353.581 cv
786.051 360.878 802.141 395.644 823.586 411.628 cv
cp
f
838.379 413.671 mo
838.379 413.671 804.863 398.944 782.754 331.483 cv
782.754 331.483 785.172 331.214 788.277 337.108 cv
791.398 342.995 792.082 351.296 795.887 358.249 cv
799.684 365.214 816.27 398.405 838.379 413.671 cv
cp
f
850.566 412.421 mo
850.566 412.421 818.371 398.87 797.129 336.796 cv
797.129 336.796 799.457 336.546 802.434 341.972 cv
805.434 347.39 806.09 355.026 809.742 361.425 cv
813.395 367.831 829.328 398.378 850.566 412.421 cv
cp
f
864.004 413.358 mo
864.004 413.358 831.809 400.593 810.566 342.108 cv
810.566 342.108 812.895 341.874 815.871 346.983 cv
818.871 352.089 819.527 359.284 823.18 365.312 cv
826.832 371.347 842.766 400.124 864.004 413.358 cv
cp
f
876.816 413.046 mo
876.816 413.046 844.246 400.956 822.754 345.546 cv
822.754 345.546 825.109 345.319 828.121 350.163 cv
831.152 354.999 831.816 361.819 835.516 367.526 cv
839.211 373.245 855.328 400.511 876.816 413.046 cv
cp
f
890.566 413.046 mo
890.566 413.046 857.242 401.851 835.254 350.546 cv
835.254 350.546 837.664 350.335 840.746 354.823 cv
843.848 359.3 844.527 365.612 848.309 370.897 cv
852.09 376.194 868.582 401.437 890.566 413.046 cv
cp
f
900.254 410.546 mo
900.254 410.546 869.379 400.749 849.004 355.858 cv
849.004 355.858 851.238 355.671 854.094 359.597 cv
856.969 363.519 857.598 369.042 861.102 373.663 cv
864.605 378.3 879.887 400.39 900.254 410.546 cv
cp
f
909.316 407.733 mo
909.316 407.733 881.074 399.226 862.441 360.233 cv
862.441 360.233 864.484 360.069 867.098 363.479 cv
869.73 366.89 870.305 371.683 873.508 375.702 cv
876.711 379.726 890.684 398.909 909.316 407.733 cv
cp
f
921.504 406.483 mo
921.504 406.483 895.148 399.483 877.754 367.421 cv
877.754 367.421 879.66 367.288 882.102 370.093 cv
884.551 372.894 885.094 376.835 888.082 380.14 cv
891.07 383.452 904.113 399.226 921.504 406.483 cv
cp
f
935.254 403.671 mo
935.254 403.671 909.652 398.241 892.754 373.358 cv
892.754 373.358 894.605 373.257 896.98 375.429 cv
899.355 377.604 899.887 380.663 902.789 383.229 cv
905.691 385.8 918.363 398.038 935.254 403.671 cv
cp
f
949.004 402.421 mo
949.004 402.421 925.473 398.222 909.941 378.983 cv
909.941 378.983 911.645 378.905 913.824 380.585 cv
916.012 382.269 916.496 384.632 919.168 386.616 cv
921.832 388.601 933.48 398.065 949.004 402.421 cv
cp
f
679.004 288.671 mo
679.004 288.671 707.754 244.608 753.379 233.983 cv
753.379 233.983 729.234 243.425 715.254 254.608 cv
702.754 264.608 687.754 279.921 686.191 282.733 cv
684.629 285.546 683.379 288.046 679.004 288.671 cv
cp
f
688.832 288.808 mo
688.832 288.808 726.191 233.983 804.004 230.858 cv
804.004 230.858 763.691 232.421 726.871 256.757 cv
713.52 265.577 698.039 280.538 696.332 283.265 cv
694.617 285.991 693.234 288.417 688.832 288.808 cv
cp
f
697.402 290.226 mo
697.402 290.226 736.93 236.94 814.809 236.937 cv
814.809 236.937 774.465 236.882 736.695 259.726 cv
723 268.007 706.934 282.335 705.121 284.991 cv
703.297 287.644 701.816 290.015 697.402 290.226 cv
cp
f
706.105 293.382 mo
706.105 293.382 747.004 241.14 824.855 243.155 cv
824.855 243.155 784.527 242.058 746.18 263.909 cv
732.273 271.835 715.84 285.741 713.957 288.347 cv
712.066 290.952 710.523 293.28 706.105 293.382 cv
cp
f
715.168 297.132 mo
715.168 297.132 755.566 240.858 850.879 249.296 cv
850.879 249.296 794.855 246.194 756.504 268.046 cv
742.598 275.968 724.902 289.491 723.02 292.097 cv
721.129 294.702 719.586 297.03 715.168 297.132 cv
cp
f
724.23 300.569 mo
724.23 300.569 764.426 246.647 859.941 255.233 cv
859.941 255.233 807.441 251.483 765.496 272.8 cv
747.871 281.757 733.949 293.269 732.074 295.765 cv
730.191 298.261 728.652 300.491 724.23 300.569 cv
cp
f
734.23 304.944 mo
734.23 304.944 774.082 253.991 869.629 262.733 cv
869.629 262.733 817.121 258.847 775.316 278.831 cv
757.75 287.226 743.898 298.073 742.039 300.429 cv
740.176 302.788 738.652 304.897 734.23 304.944 cv
cp
f
745.879 306.483 mo
745.879 306.483 784.563 263.077 879.316 272.108 cv
879.316 272.108 827.258 267.937 786.164 284.558 cv
768.902 291.542 755.355 300.702 753.543 302.702 cv
751.738 304.71 750.262 306.507 745.879 306.483 cv
cp
f
756.418 311.194 mo
756.418 311.194 793.691 271.069 885.566 279.921 cv
885.566 279.921 835.09 275.788 795.355 291.03 cv
778.652 297.425 765.566 305.866 763.824 307.722 cv
762.086 309.577 760.668 311.237 756.418 311.194 cv
cp
f
769.855 315.257 mo
769.855 315.257 803.379 278.358 888.691 288.358 cv
888.691 288.358 842.168 284.472 805.633 297.687 cv
790.27 303.241 778.258 310.612 776.668 312.233 cv
775.07 313.866 773.77 315.315 769.855 315.257 cv
cp
f
782.441 320.233 mo
782.441 320.233 813.691 287.108 892.441 296.796 cv
892.441 296.796 849.027 292.737 815.566 304.608 cv
801.504 309.593 791.297 316.702 789.84 318.163 cv
788.379 319.632 786.031 320.292 782.441 320.233 cv
cp
f
792.441 325.858 mo
792.441 325.858 823.445 293.718 901.816 303.358 cv
901.816 303.358 857.574 299.714 824.316 311.171 cv
810.344 315.983 801.242 322.448 799.797 323.866 cv
798.352 325.292 796.012 325.925 792.441 325.858 cv
cp
f
803.379 330.546 mo
803.379 330.546 833 301.28 908.379 310.546 cv
908.379 310.546 865.836 306.96 833.938 317.269 cv
820.527 321.601 811.816 327.476 810.438 328.765 cv
809.055 330.058 806.813 330.628 803.379 330.546 cv
cp
f
813.379 335.233 mo
813.379 335.233 841.48 307.687 913.066 316.483 cv
913.066 316.483 872.664 313.069 842.379 322.753 cv
829.656 326.819 821.387 332.347 820.074 333.562 cv
818.766 334.772 816.645 335.315 813.379 335.233 cv
cp
f
827.129 338.358 mo
827.129 338.358 852.219 314.843 916.504 322.733 cv
916.504 322.733 880.227 319.612 853.098 327.78 cv
841.691 331.21 834.305 335.917 833.133 336.956 cv
831.961 337.991 830.059 338.444 827.129 338.358 cv
cp
f
837.441 343.671 mo
837.441 343.671 861.535 322.296 923.691 329.921 cv
923.691 329.921 888.625 326.835 862.469 334.147 cv
851.465 337.214 844.355 341.476 843.23 342.421 cv
842.102 343.362 840.27 343.769 837.441 343.671 cv
cp
f
851.191 349.608 mo
851.191 349.608 869.973 329.171 932.129 336.796 cv
932.129 336.796 900.477 333.854 874.316 341.171 cv
863.316 344.237 858.105 347.413 856.98 348.358 cv
855.852 349.3 854.02 349.706 851.191 349.608 cv
cp
f
863.066 355.233 mo
863.066 355.233 880.051 337.968 936.816 344.921 cv
936.816 344.921 907.918 342.179 884.105 348.218 cv
874.09 350.745 869.363 353.417 868.336 354.206 cv
867.316 355.003 865.645 355.335 863.066 355.233 cv
cp
f
879.316 361.483 mo
879.316 361.483 898.066 346.796 937.129 355.233 cv
937.129 355.233 918.363 352.421 897.613 356.562 cv
888.895 358.3 884.797 360.222 883.914 360.8 cv
883.027 361.374 881.574 361.601 879.316 361.483 cv
cp
f
894.941 365.858 mo
894.941 365.858 908.066 356.171 945.566 366.171 cv
945.566 366.171 928.105 361.819 912.441 363.671 cv
905.863 364.444 899.973 366.175 899.316 366.483 cv
898.66 366.784 896.504 366.483 894.941 365.858 cv
cp
f
909.938 374.015 mo
909.938 374.015 920.594 367.245 947.402 377.897 cv
947.402 377.897 933.211 373.558 920.918 373.425 cv
915.75 373.374 913.207 373.96 912.637 374.171 cv
912.074 374.39 911.219 374.339 909.938 374.015 cv
cp
f
927.129 380.858 mo
927.129 380.858 946.191 379.921 962.129 394.921 cv
962.129 394.921 949.941 386.483 941.816 384.296 cv
933.691 382.108 925.879 381.796 927.129 380.858 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_red_apple.eps)
%%CreationDate: 3/12/2016 1:13 AM
%AI9_DataStream
%Gb",KBj2KIfC8Z_Y&""=fhGGoqk>DL6kU/m7SV*E&6^A(&=1Q$rp]jZpMAA:cpBgW@2YY^mMYAoY,ZR.eCj0;]mJF9]36[cca'sn
%=&QW3C&BVOrThcombN4eh@H&H)WkeRp17';m58XtT\8,!<GINU8o!BfTpj[aSAC[]l9eCIeG`'O.tusdI$<6hO7VI*OKUMo$a#YW
%f'&fQ9HV#d_H5(brg)_OeRG@\$MNETTX8hJn!ish4f1FRJlW7k$)?cFU]'B/k[[^l)Z@#3Bg4R-2d;8.X'D]SH&,0N>7M0i&C_*c
%!]ks_i1C0tRE>]2Km'<3ZUo:C_9^]M'R$aKg9'D!-@P!k5W\k=aZo]imY)2$5Kc+eJ#?HL0Do[_b`p*,m-WnR%"fKY>0=/0[36XU
%I08Dk"e$^rn1_AR<sl'[f$_o%/T%D-htQ(o?%8j9YWf_dY%FJ(e+[8;>sGGo.DtZ2[,YgR[Uj,dhiU\qPS!aD#CikO?3Gs[d#\FW
%1g1.Gs1uS;)UabFC%>`J>mVEfX6#YK?Y7LE2;+soJr4kD*TS^S>idB*khjhJYg>?;>!TR)8fO+--09iU]P_(o(OcNYR[+Af>7[`h
%[<FH-?*i=NiSs\7BT<JA0XR)5=Ik^uS]H,WDQs`=61sW^s5@_[!EnhKb%Ki$MOL/ar4GlZF_K;_;BGjr?q>X,s7tr010"=eeI&;`
%)7jh#Z.%qD<c@.$8):842JSSg#.QncAV&^=YSAXq1O7aNKAJm1mCGPL%ut#Ki.H%b49"i4fDNoUhQ+$BjmtsD?/MZRf)GSW+]GD3
%"KB($lPt(j:b=OHVW8WpRGq$#l#um#HC-=LlOSbmH1:.jUfJp'0>e9p:Vu!\\iOXAM?$.]pZ-ZtK\a3^%m%H8g>u@sUoQXHJ"sSZ
%AV_;mk'?6r<i^n;PQp\."<M6B^R:HT_T$Qt^rsjeI%sN;Pg:8%qK]Ugf72$AE1e_q9en89]ggB5M>i2.T&P55&Tj.9/T/SaYJMIZ
%^R0t"E1p%M<FG&?g,L+sf.QBf.ARI!$[$iU/b>*j8`gPH(=[m@D:$bVlHc,$X%*pJHr>IqNs^kmU9.EE<""["]a4K^cEpXQDV)e.
%kZOffq\V;*PVXpF&*94j`\.kZ4U4]ZKi7D[pcGkbJ%aamILQ@=IcnjBPZNRYY9C)M;[\(^<iYY0):krf5&%J-@(f4[0[j\LHJ9.[
%bEYsMW)=!Jolpj0%:A,0>/,$ii8oQ6mpYMO!H\VVZ`D3o6DZ8NIU1?s>.EW/0_@#ic(os\G6/?T*ZkZ\(*rt?YB$UbScB=92qc!:
%#N`;`<WZr6_f:6+,;gZS&e0W`PdW[<[Kus#C-=0t1L%nf9)ZDAX:GQ>>Y4u22Hi^2j%89fX`i_-N0A!2(lf"'C+)!WcGou_[<BnH
%[u+8WNX.U=C558d'$BTV4YGZOiD<P/Qb14;iFa@-U5d2?daFRI*3>>j1WVM,+)N.N,Vls/rO@Bqm55ln7aPsQP/mmY0Hmd5C<l[K
%3=k<J_;R)F&Xi5ub`?=4:^\<K,\Z(p6EA[.YUH'>j.`i3>.[W?T!RgN5c.fjJ!Wj0:AV+B=0H(gh/F3@h_/M&2T_I_Y[)_,/4f@N
%5(Ua^Uo%2UVVFRi0K8)?%@F[T2jpP52)jVl)[4UM/$EaMk1l>n!b3h`a\JNaQb]LS\)lb\gt\3bgN%@>DJmVu1s<lI=EDT7Qum]#
%RO*;5&MR-nc[hpV%=SMHKC_F/p=DEKPt6CB[S"*gB:70c':B$Ok2XtlaK1p5q0u:V?R;\K=DN@lBK)FB68a*IFH`gc-X2mnVlnb<
%BesE3=G7^BfVC:2;A+,N1e)mA#n0D4U!hh.hs7mB@oKq]/#]d^2IDSA$2epp[GB7W21JVhp]dSNA4r5FB49&2:u#np7:4Nb^Cm>`
%1u"#=68:GJ(6VNu=7`\"'FE]L`GAT_NK%,Lfd]sbXB,?K@tRQM%cHL,oia5_(4_rOVUXO+`Y1KAE&?g^$9Jh6'CMo'2NfZ3rt9kP
%^Tm)AHaRn%[@PMVZ1RpjE?JJ.>P*ZL<-i./,`l+qR-Qg53^hSAf$%`jA(!>%Ti#]u?O!VX!OSic":6p3M^0Qk@8&QfAeGs)n\L;P
%n$ok7c7Tt+abJb(02<;lf!r9ZlibK^jVAl\S07oY%HZ\9-QK&3#el>>rAsgmS-unA1sQ0@jA]kUadL.bY/bIO`B;=V<;r=Sknk*&
%3_KIjKKIJ$I@fM@'f=rGo(gTOg=W@S.bR9&r%C>qEn9iL8nG),2J\nAFFpjaNC'W":-uChiHXb6=\6_-!5m<RQV#b<`;JZ)l'o(M
%r>]V),uB1?cjZ>KZ&*+'ZbX5&dh/ZQKk8QB->"PNIV0p^XA$mi=It3lfH_t&/K9(pZXDr$j/;3NI"M:D.6JH>5`qSbKCOfNgr)k3
%,`;T.8C&Qs9T.hsncAtrV6WKlFOD`8nYX(I`\pVs*n.I?'***ED*GMCl<:_A@f^((6""Zl]MP^7Q%P_B'U*gXqEGi6I$k,RgZuc/
%s2gY)9s39QitX\$_8oBF5*[>TZ2i],#TZZoV:3!@-e7rin+o$a@/?;0@SdL]R^#Z$W(l3eR3#3eL'!"BMoYA4;hLIUAFm8Uk:ig=
%n4+Z@S+p9]^j@k#]066LZ_!b/RP7J!Zs9RUb<W(d;4G'fqFA5<_-*L<-LJeV8tkfWiE$)"?k9XPNJ+p'>E0(:3rq=;,R&D%e_%Z.
%TR,4Q.,MB%_2pq%Si1>M8N&[g)]'KRJBYR_ckK*KEi]*oM*]X*3\IA2[;$>9MT,:#HU(V,(Jp76irZ8ZXp0R_k=UVc8eGu:9`S4l
%l*u79TSc4j9F^uiJ/H":h<i6t=VRmtb=':WoXe]h$\d8G^]l44<$mJ]".:Q/<b,Ch(\:=b8b13QF='VCMHEfEMDE'cmNl=a'/)R_
%.2O9:0[h4lVE>Y@JL30!\L=ehc"AIA,mc7=T8Skg=3Ye`k.)o?MR8f7U.grV1F*!42KM_.1%pG?[Bl*UOp%.ddAZ6=.".QW7-('f
%U9TR4os9m@Op%.dg%D,!dS+.G9qo&.`pOc.>#';3]L3WDo9G]WiY9kJ&AN?'j.*qZeM#-_*TsB<c1-T1?.14:B!Tu`&o[-D<;QEM
%KsA\@=Kbe;B$T#2_q1D=?^jX$Q=+"]Hu70\Arj-42W2\^?2J+T5X`g5=.<u@F0>3Yk%\sKD'lgI>Z[D9[JqLRMaiA[`t7."1mB7N
%_+it4;\];&DklW:,Bpk]&tiXHNTSuoMe;rEQgj@,rsgN*Q,9`b&YBOQ:XoV#ALGR2AE<2,9"g1jSPoI=#VKmoehia1D]'KB1K_:Y
%:U3)]:q]:nl)TQ)dV\cgQ@f.=_Jf5<._J<s:gS@V=pe$JeZ5mYm39Go:h\r'/RG7?\3QN"I@6h(0?lPDI2NOI<#'g!VIfZ1/&"]G
%C@j0HL1>>;cH9FH-]'GoT:.&)ADmA%e+gtZ"3jsG-m="5qQ;L&0'fnlW2@2o"P;@'c0i>i7-lr^c,[p32Um%I,o7sdb,t9YTTs%^
%VMZ<<E9gdT+gHq[ehTbt_c=64>qhZ+K->eMo&;,Y]3ru5)htDFQ<c1Hdiqhi8kRB,`PlUr0`O-V3K8TGCXVLt,Ql:eqT\'8di\T1
%EJ_DTr-)%PGom"!!g7j,G96c)^dg'[ChTjUH-/834-04:*iN[-ju\bCIEZ38[7U,bc==T;i7FF<I#$?Uo9eu/6s;(4T!jj<+u2%Q
%,V_\#mu$lT<%>;jL'(=&T:NHa_/^-gTI'Z=pOfa(H:c6H+Q7GE?*,Ik.\Y7L=r".+C6DlQpVkeOg'"u_]5\09<745$DOsZW9q"&/
%HcY=jZ@@eIbfKak/DaFR)F72*"a):s/QYU,ZeF]jEift]<Z=>=[FQa*YDc&t?"\61g"^^.GF_0Q8tZI9rF]VAQ?4cG1o0WUnn#FU
%eV0)jbG&1#Msd)<hujei/"nmUdWWiPRTu9)NG[HQA'I`iZ2M!\4+&O"IR[R3c$E1hl.)0'UjCBGBA(c)0:;-:8f("uQk8UAgb&Js
%9_?KLCcDBsK=6(X!'?gs*A;KSbM;XY?Z<Z6RtVk9ie8QUbM;VCGJ)-?06>1Wh!m.D]M+%>V)#h>0hmf0\H=;91;@TK#@d0r[0LF.
%$;FdKQSeGq9g_tFJ*n<D]\(0;>p*P'MbPIJ@FC'.,Uo*80/i?=ESoYorPb.'p=<QDI&2mM)?j[BN8qHfS.!A_-)ToCNq5k:P9Cp0
%$^7QPMmHB6l'g3%InhsuA%_aYF?6V>1p=VM/i*CO<*q[G09g4$NV_q2C#hqoW_^l8jc<]nq0f13a!j@;a4Vhm\n\.@c(Kckcj35M
%\'3@#dg7Yu/1%f#Q5WIQ$s1R9/f=R/qju[k>5Ku,!<6Src)*3LBe)!?QY"Jp[$e8IQ?E)]E!f;`cc.BYOo^\5T`%#;+EU7L!5r7+
%;PKsPBf@qXbTsuo#K[V,_M2Q!B`DRkN"MD<Sjr+iRJS_9^s\bM0d]d!T)15hhiHa@J0-!B%!+YQKM1%0+(J4%ptUobpL?mR+61+G
%TsY5a1+Hqm5!*TqMQK5,Ffh/ZkEiq&MN>"=0qG^9BU)f@X5#dBQ7'+&/6<H)qX8/^0&VnWLoIg9G@=?u-A!`$G[*LJklc-;:(#5g
%h["\<K5*,t6J^+>>d+r5S6Ilm+;/q)VT*(<!mIaPrL#,l1kX>(Au%DIQ;2D29WOIIV5R+uGWK]k/sGW9C,R\8k&l==FbAh!K74J1
%8JK\S@+h41jnLiP2br'A_"De1"_Y"78KtQgdLDamH'$pm@qWq]RNsP!_UH2]J2$60?J6qVHR/`*T'R233_VpiTqdD`?Zjlu5NGs^
%%9(I4iIn&L#q%">r0Y?7Ji:7""Pd=iQ`2pQjX/0:91EK6CMl8HAT#c;Xgtu"2n.r3f%f`%jq;?iZYn%4e&/'+SkDnB?jc;3"Am@f
%\[a^Z2s9>cgt\EhRr\t\q@"3_aafb#PKoaGP:dG$F-CLi9Y.!&X`W,B,SB@KDU0WUUo1^B_sCVZnbWYK9JAH$hL*(2@@Pl6R#F`p
%drcu!oeH@/8rSnRAqtYkVEi.GSC&'JjS2d4Q'4h6Gd3^s8%!Z:=Dn(@8`V=:[XM5>Gc@Oq\EGR(jhk$7cP")N/__\7KK#1.B]css
%8L\GXcA_Ag*3+h)0mY0#2+og-%d?RFD_kkX,ef%RC03alRjBG1qu:f1kQH#sDJ*;t,b^qdomSSIp_$rgG#0_8d\XQZ:G>a7U)ULT
%ZW4O+-GD+][.fJu6'i]sWS)0Z(5bE+7I+i_:aSo*1sjJMLai8*I+_7/JI5VACRL#JN4=D_GR?ec-tF&li3.fRLe-8TX&$8]Z%D@R
%@DJ_s3>(7FgEKY[g>!OiTBf`'3].i3XQr1PJkV_79h5l_2,p:K:W<TG!nj;[]D6Za<Xl28@-<`a;D^C+d9J&flU8W<EZf^RWg0<H
%F5^KtDY:QG2p]4041e'T2p/8ob90Y2o;U^T#peIu&e_f1-6%]?.`QSH?r").E,emI/f=6&?AGQo8%N*4`m&pE-c*2gDXA1]=.3FD
%-m4_o\)tPI/f]@";kA*iQir.8(QM&ib?R#%Ot`<I`<eJYs+@Us)El15b6B=ol1mKTE-g*q\'AG4.:QW$B=_jQbiBLWZWr]:[dJ_h
%>.eKSQtT`pr3?=Y,q.4r'g,_sC%>'TYOKYQB^'.B5,]Ap_p4]q2Xqd$D@Xa6RURm8Vj)?/mBt&J'=2!*@oh[Wmm$"pc94#W2)9WQ
%Ddt?Vm*>1\dcCV?`P`S9=<;IiN,e:b.5!A1F1HGF:t-h`MkSH;H._(o/"8UXbkXI?-lJ)6RcO&&WDoe!\!a+N2^C@*3EN0BEp-!"
%pAQm^jNEN;qEH<DKj07p,ca!AhFSrW+::I9^J!j@ltS[qDN\p>Mu-Gp7V7LudV_ZMbrV7UT9Is<a\8=TAsOHQEX8'mGU3'g;5cBK
%PMDrfJM]T4Y)hnJBiC^JEX_%'l(-:C\7P+)pc"Lm;Vj0ob1sl0V`Sjh@ek@K/:Z+WY'C?%^!)eF*H+tOiFPRPbf3/nYA;ZOk_713
%/BdX$E)s,2hu*;jlhWjF`ohQ67dC%I<B#J*?<(cj<Tu04QA&"tgl\dKl:a^P97@*(qo?XHg=9*a-DuQWo0U!Vi[/re#Nju-Q8VD+
%T,k9G`Ja&3Q=R@=Tij!k%FqC_"G8ook`<l(6Q.WNn-Hg$XgK5bCQ24gU:8oS:_Ur=HN3<W5IAp5q"5Z!rKXZd4/l"_ZrH9cGdib&
%i4gT)*bcf%<43A&.O5iJ)_!-,Gd#J-`IaAW"P(p3<"&t^HK^+!8,tqdk+*QrT(l\A2JUc?]A0t)K'n[i6kHlV2aSL-d)"Hh/Sa#3
%*R498LTd2M@5C7!NpV+H"[@*)1OUM@^4<>L'8t^?/E,67EL:mW<i`#3hDU#2T0[V/<17qBRMh4FS'A^#@N4LI0@a?R0jH`8>PajG
%cT1Te1LH>%V_qNX*Xj%@6WS$O&'`-")XqO#*k7MqbhDP<?,nmY@G6H#B@_-9rD/ih0k]'YAj'eXf4EO!@b/JdOXH@HN;1oN[d.$J
%5''T;[Sc4Z/(J])I3UpmcM@+&:XAk/[G;iP5(/4dbdm24qu/tNCX'EYSGUUBmkqWD%9@r'AnM:Cl`sZ?c=Z6UG0X^'l\mN6bLZ`@
%BhR&`a&^SMoGDB1+P+sn]gLrc]-<n&4"TMtnXNllQX,)mkCn)Uod.ba&'C738r$b\Bn.?AV&^Z"&1LUG)@d=RmR.@]=3`VXcu$h$
%+$f%hpR1=YXKDhpC<(H_7@>KleP[[=A9bu6?D/"==oj8aGCm'/ZMPX'$?VMRd+<Bs;);MQZk"06>7EV6pZ3Qljo,2jS_Ysur*uo9
%s3#S_'+T?%`0kK+Ztm)G@HJp:0Mb3jpuT>qbEH*5]D@$)gnC=;=,e>dcIIg>bFmS3'j<jLpPp>r#=qP`B3-E"4G]fT`OroGkmSJc
%BkRHH2^97&WpHs:`ri[FmN!t9Y;VGk()kHJTrEIe(gd\GPn.NVm/D(k;$Eu`n,u9q=/cofJtWu6d7dNgV253AUg,LfKSLA:K!mp#
%#=7Z56'D;qB_,(6`QaN#0S/fOEACLXnSCajSWRHZa%colB*p.RPHtF/3uJ0^E#.3Q<pao/f\^Tnd?S;EPq\GrYRcprlG'TB%YiS0
%q7#NC>?eX`qUYkspCqT;Au/b&*B((T)H`4#6(p%6jInH*BEGpqKOZA2BkYI6T"q.PUa6$*YB"@P]qdIkBfS>LSHh`(aJ;t;VNV%N
%nn257fh&:LR`0Ghg=gD.c\<O#U<3%W1bhT*ECW2#Q:6SlA7uPtga6JOQU.ZK!qg:2POWQRR6)_bOX-[388J5&dnW^h[kC\W6*jU+
%McVCp.'oc9WR(qRg/>PSb#a*EK5/b(m59K-cq6`#]tV0o3f5H;$RKB_LAp/T6M$pqO#?72<c>T:V6"ijM0t%S<iVM8o$EOi`EK+c
%JMjd!b-YB\e:++E$6&%+"hi`([es+<:^9O[ji_hD;mE>i,hSp>BV!W[NDcct@=)''J0K]te3t+rr*$^t3c!7!otbLgJFPrV8=cDd
%[Z%]g.`&$%L842?c1;JLRUTg0U.FNrZJ09I@1#@cEbsL;Y66YX_n8;c1Eu3i=9Y@(BOFth!4,o3m"Mqig?D`b#`7Fs/Ao*2Yn<PC
%d'hQk\.O$rL/,8-<:=![,6#U.+E\P!h+DOMb,rNP\Pd>Dl7BMgg:r?M$e;S,i@IOee`n<CfP1_b=)'+:b'm0*=.3D/)31kr:;]e.
%XH`$)=Z#sRL<6%'(M^.`*Pf6MBb4](rsXc:!"m4#:t=ub_pfF2[@]a[No&N&%!=Xo0+-613<_LRTGlNj8>UZ!"#!Edi9kZZTOS[f
%Rt%mkHqAP1=uoj>j!(gpDc\CqPOG.L!#=?#msQ:#M6?9S/"hQd>:EX+<"%9aLUSCG#j]D(]P/1$YuBDnc_*#rGH07A`E>Q2hIf5u
%$ho:HntOJ4GdhJ-63WcnP8_B?!b#l3Cs^hWFg[4C5=E+"LK9U^9[=,U<9W-d<.>[P#G$jfMTG/fUjAoq(U30oL62OD]IR)Dke_pp
%<O9Tg&p0MG1`8]5H>7Ni?q;s!VRN%'+K6sk\>,BRra%ZX"04[VhC#XVgXT`U"7nV_H=k[]Y'EmIT>7>:GW9s'#1-\O);koB6b4O&
%$^F?$Ar6sSLVfij7c@M[=X8aV?Ihl[Wi*7(Pie\Q\6A4fPZ51c]M-I?,ZIWs-jHXsIC-M89QNRgk5LW>PM3;ZIJf,9A[\(47V+G9
%J)2T<b/iiUeWL4,J`<-5g.#Pr2#&Sa.",GK;:Uc0P9PT_&&:S_j7k2G`>H'WN\YL%D4L-/$'5qa%!G,Ln!3n_.Ng'5K9.G[l/jW&
%c15#Fcoi^O1to<=Y;anm2(9P/UtoCkmJ9;l<p\*QYbSI#M;u<B8G[M`1ucNO@3Z6ccdL;APqBVlo7^Fg$7etGSbu+A)Ba-s<@3%,
%N0kgli/^QB!&gU9LdMf_,'A#V)sa(rInu>!qQa-?4S)#k?#,t,#>\SCWORbe?.k1ZM2&\QD>82!oVkj(;Z&D&>.@G7g)PoHB[d)@
%2mcUpM=^*),2EZ+9a3EU<?rt%CK,-"l3$0s>&C*/Q1!1ZD:EBoKWpkaK/M,CDJ_#/a[m@Q`1T+Le(*BXJD02E<lJ7M7<.HUN@I!3
%_a:Dr%JDVpSejX$#U7JS[M`hVeY(U9];*XMY,D/UK"+9`H460([&DN5[:(YUK.oPB9'p.5YiinIHQ$uA5Y&Fi*69+u<M<S*SIu$n
%%;!W"b:"00GaglfViH?BOM@GPQ;X=k%ZY`,5!Ma>1p2?93iFuPVr^OS@G]H=<2lN1>!$_`6>c0Zr-JO"*4:`c40W.eGuANc('`.j
%[cKu<(m,i^Ipos>BPF/iB[Ck+BrFgZ(0qoU75I"peY=g7#12oTkl&0Fpg;'LO)7A?lS*G]#DQA^$M=N'6Q-GDn\cl/.N3N-JX";.
%PpeMqScd]`;ROZLcH<$o4-m?`>L59)60s`knWQCWW!nEsY]c!s@badWJPM\u6DHOHV&dY[C)4&Odt%j/GO&;3T"K'<><a"VSDsXm
%06Lk'b<k6`fe`4&XZJ=7co=)X"O4PjI[0[[<U,Rm>'8cc-)l-G4J=cG[6`^SXWCp%nI>4`JjpiG+Y+h@kuf3ZKYif';6/Tj&DrS?
%5JuPZpC<2ui[hRWaD3[=$r56&h0-c\?N^+3Ve)uQ51#eG9sa5!!(Ks(ruADKJ-L*#OuKV?4*K]sa,7K4V%Skienr=up"sRcPbg`p
%5D1/n?Yh@^,"f_&[e19Um7K83/F%ku0K*Jhgh@YP,/Aj\?NR8JcD\UGSZP*.hW*27]ft*6j7ZcJ^"_)$;=1.(SngF)Q,e$Zctm:3
%]sO'joA]SZS^e+u:jJ,Sr<J%K_%&"f\R#Rt4asN[`R4!,5,a5$b:pte'13'3lWu2nN7UC4F;W`4Ej[`SIahG@7:WLo=-YSP,%"V%
%I+=R=NUl0@E93jnBcKp"k]t$@3*:jS@*14oYH*22S_`4TE^@$3Ak0u/_4%nQBTKVN!d*(OM&Q(1N"bXKNpD>#J6uRY+ccT=cq(bI
%Y6ZOr2J$N)BZ-1J,"-aY\5HZRJ@-<&nfTX\&SHrNa-B4#4#IgMiF+")2u'G)iLML5+`+i/#.0bQ;:iWL)T+;F-osJ/?_14)jiS]+
%(IMVX[7Y_;[mLTmU2.A'd+>GS_O;]$%KVqg(RWoW8%BYQgR18+D]6RN]-a&-o&)e^3G9/--"(s(VQ>$_5i&siD-[e=auKHMea!=n
%4C+F8gJQi5Te25[-tVE-*#+bSODtUaR$>\N'^Qu*B@9KPFWOL\c,*93d=l=MX&<XrV!lC5W&7Id%AaD+I$lG6:-^/fnmSadSH9GD
%NoAkiriW<^?aY'W?@bmfePq'h'LooQE2R>n7^-.Zmq?APF=@@qLE0=pVl<]+4":H61.=P;WCh`Vqh8_fJ4Ul"Np&FV`H.R=<]*B2
%kY>bQZA]#]#[1E3G1r?\\X@260CV)*q?kItZDEG<Eda<8gI2m5[6^+.aF$7a*sF%\b/%GAHesfS[4>q.U03CH)X<_&Pc+M;c5CC"
%Kp5-RqL#&]$![2.>2pg40-\f(mSB#mFq!*YZro<.\7kSV]PBLLH@u=3kHIedH7RQK;BP>VWjRjJY_>,Ik+q]lOJ87-KjgpYO4UP;
%V=JGf@"XeAb8mp%+M?Oq:OcQm[7DT9d=r7r;7](C9T&"89M+eAU2df]^"0D;74(rLe4p@QmD?'"0fTlr]gA+/:i5U)__XoG6`@87
%%L<R(.H>`tF#YlETOo]1go;-@b9U%NL?F=sDl-)_JiJsiRhW"20-j=C)`2SJBk"3"_7Qk*r8ZhTf,D6(MqD.Qohq]j,`sS_3jG-R
%[SfMTD6fV8;5eQq=ZN8t0Zr>nB&ai(3(mr1C2#Vmnj#XH1g=\hO.HQ1fo4Q<Bm9%OB$U]c=s#MQdJLne)&4X'@\mKZCMlacj*JBX
%"4epT3g.5s8!BL@>.WMUG0D8#[Ad\!cqtB5EG>_\Ej[D:q5Thl$blAQXC&0AR0[[tq*Ym*.B;M@CE#]kg50sF7[mbCbd?\uRF+fB
%"/]u0JsiEMo6R3BoodV?Y<m@[h.X\MWR5u[JZrU3<F,C$Sdc)W7R=NobntjjCZ(5dc8IM*E&e=tZO=i_Xn?"b,b`83RoI!@gXE;q
%@n+dTie#J'f%8iCf3*Ct3nqaBRIdZ50s3sL>uVPV\IV!&;Yt7nVDFBR3kYbaEIQ!m]V9%.eZ?%r-m(2n1HHst-ur*&_2n:$Y@?,%
%)MNM(iKpT/^g)D`)&uMDp3[Ea8G#Y*RU%u`A??C'_7G6L2o8D]G!-OR]at^LUhf\-p\$grfB_&.W.%Gb13t)\]GZZD:WVahci>7>
%f%M8t;N\8el9u$fi^?.EY1oLir3CL/g*NY$1DTHA5L,R[g7C=Wf\5o_*2r9O._TrMHFA2#e)K*/P6\.BpId0aqn(&)ou?UHo9HZI
%XdAif9+)7gb(Xs/Y4MA+VK6B]rU'3S44^a'mEZ;def4"NS)6&G]R.5$h9iTAmX+A<8\;UKqDJ4bI;Pt?>]7>3*lB\tX4t*%Wn#9n
%p?]bfmI`=e37oWDH!8Fgdgsb#`nE%nJ-"J2rn`P0nTcYZrCb`<\@e':XDKmP>6h;%`M_"PG!9Qp4j&5W4?.q$Ei7X7PM"a[])J]+
%m`hZURDY$V];nG][TiR5^35Y=ZG+a\?S:K,m^;WocV(/i%,i`:%Eu06l'EVR>?S/B?THB&[l2OfO*VU3^>7*Mp$EjeCX4%AECV_I
%k/Q#ZY;Q)ts$pt-Zumn2m!ZX<3EX!oj[m*<PhIgMs*\=\\662r/8Uh\a/a!DHfk:Gm-CKdMsD;mhW?bKp7nPS?J[\L/J\^1poD';
%H+JFL6gNIdK%h^2rO,W'qQc?fgjAa&\Ztq?S_63:rrW:H\A%h1gk9++eTYBO1Y(K;bJbhjX,l)[cVM]dqm^odAfAW?IIUc8&%aCT
%?8g[Ak1g2mHXplfQ1DrT!\CXko429T.EGQF]h=+=_tLe:NNKTM8"3/cNV0Ps>G%EI:Yh#af>Y.AV,&V]adk*7n'gPb!9pKSkRK5g
%-g/Qr;ajYKc!EMSQA%T]Q*rRKbFP3Zj20OKr2mr!%33C((LO-XC'):d-b$Q9qIB&0ISG9n*GrOMp)?YohmbW*K<YRor*ETTqK-f#
%a?;V3+rq[e=^*J+J,PX51Rp2l\!seU0[M<H17Z4Jc4oo)-i;OGYiqL'/"8UIFQ\8<1X#UXHnT(AF5IdTViP3`fIR^Xgs%l-Dr:>:
%pYN[0lu$A.Ei00(+6u/*XIR*\=mNua0dH=c;u4"LX=q<2>448Zq:t_>j,NVRkOIj%jh8"u`p"]gE;9'plgC*SSH6EV+.'/d]A&BQ
%j`:r*Y8B>.f=V9K"BtKjS&K%/$9oB'ViFh\?Ti5]c5aQ7[JPO@6#Hf=C,+R(DQ0cK?jH(:@'-ZXO/729`j`?g3A(8Vh'>$`qmMg:
%!KB3F>0PRqYJ'8PNSNaWWl8B:H$8%\':oc(.&pTk5L1=ae;8(o(@/$YndDA!dMZohn>#OCmaj=f8N0,/p:_X0([flsDO`fc(Rp?;
%l$S7m@39lq&[OLM/0U^i_sY+K&&@"H\8c]+flU;RDtc'U8)pOl*VNf=hK<siqt]CFdYT'T/H/*-C'044*:B%,J_<0YF4opk(NK&C
%VNH&J5IdVqGr?,VG])p@P>>sIs)>0IRa9Y/NQ%gA^L9"-%VPiDnMJ"KZe_^h]_d_6:Ki8<DM^j-4oSK3Pl9Gg?"PV;GI>ZRq>7eN
%a/d1`KDO_.mBr(k^[-Elm%9k6JBtsbcT7!=kJB8%k"[#2E+$DfF(U8un(tfU*$%Lnp#XQEYFdt'O8Su]m_h.Nb.PDhCj*;"T@lI,
%<:R\(QIgr)FlWT6dqMX*WNB_b(@(#Zg2hZc_WjAR5:T(K!jX,h\omD9]t*Xna&,@toXmVE?>-l^0Yu\?YCZFbEHS=-$N.M\a3Nu;
%b,<J"\!J')f$A_J?[K&?L*kg7!C,5NT@H07O#%%.6`]gE)C&%1-^X.YilZ[UZKOc+r*f!GmRGa_5<W5t:VOQfR.kOTh*f]Jd%>5m
%YN)gag<8[U'.l1HH)<5HCci)t4mdUt_fV?qA,J-@HuXeQUd(E&D;u)>IDVVW&N9,]Q@$fV/a$Dd3O`oHJ#mQtP;R*6J*(.+E.V5/
%ot&Ta%tat-pTYc7s(V8I.Q,',m*V=iJ29"q(ks/EQuQ<thM[plI'uY\FbZSRHEj7mh)d+b)>89IL'^)BO&iLd!V3=E9kmH;A40JE
%<o8R$3$=H?_lWM^+-Jn`C;m:C5?Nl9Pu,Bf7u4?Dk6)'aWZ*0Y#d2IFe6=p)o9`+Na$]H?pp0CbkuZL`O4sO[dfp/2X2s<ng;(__
%+^?%6M8^:E5_AFEf+S@TG*'S^P7H*pGW-,94^0h_i=eL\&#=lEQ0pi-F\cWp*1BI2B2iX$fmQE<SL*T*g8>tNV=o_(9[&f*%B$]P
%Z4SE`HD.hKom;+/%ji433['Z4<g4B?%10O`O'[kaH!/"t,cm2A\aOe>_d3,X97VQ>o^Q91]61t\RDX6PWql;m_'.G3VaaX7pmEU&
%ca3$:\"+$[q-/p..+Sqd:MBgPG<qkC?*#.(H$ctsrd)5k=hONLT4M4pa08cp=.;9K?"EJ]bT4(A\h+tlC@5p6iA9$kpU2,lmKgKY
%HVD&XrpIUS^N&,es-S0+l:3`>;YE)klrS8?lN^c9-`Gg$eh?^a@2?tl=F%#KNn9T3j_MPJ+5_PB#n5@.p!)LEiT%#GA1U5E90IWB
%Q4"aN^?DM#Ud2V0q]4IJG4sVDNECC%bl[651k>Ns^37Y6>@.X(/bj.mp3:6MEs="H$5D^pp;`X>0*s0G;P7o@]Hj^dPWBWol7rF]
%L38i:r:Qdo_0D5ej+XSPgNsa22SFU.,n7>9W_QVOB6]NOXXpUkT6%3Ac3"pBiCWafqPQj:2tt%n86&-^iPqN?C8qj<5BU;/F'IPX
%63hRFGTcQf#r:$Im^pX8@:o9$.j02kVG*bUR9X<E0M7rucD,>#4O7&uZVP*N^b?f#TRWuXDXR>>]`@cZRl,;;']IYAlZrI&M=3+#
%>-GR8h7ga\=aM:8k'?*^ZG$U:TDd,pqp0GFos_DX0kV"="b<caCP[&Ipipdkj8AMN'q"O]Yp+`PB`L,P>TeBuZNu<.hPh6-PSLPE
%^1K$W-au,i6CQM,8s^8%Qg/.K-1,77CR^sF@4uNtl^(+cnse/fDGT;aJ*A\9/_tjQa`EBp0=,Tjej4V0\9ol,D1B'^H1Umj*Lc'S
%`R/m.cs42d\JOXs4`.g&XupXj#*#4Jeb8>IIFLX%0Hk#if,K_@\(8^Id5)\L<I;1N%1U)^mF:%GMKHR:cb@J(mB!0<]kuWk>),m\
%1]H[?jm^6_ocmbfYdLpM[,/=knjWQ*_^,[mf+Aib9;O+oX8RGFpu/>rK[j=748E&c5C0Y\J)u(JTFB8qs%_VriRN@ZNYfmLQ]4Mm
%K[T_]k18ZnDAqs(Y25=YA&HFD-]pq`RpeD3m.`"7Dr\o4E#XG;=?G=e2p2]A+-o.YCG.VrD"Mh;^`*jLpWY9$k%Yj)T[^WS:m2XM
%]7h"dro&XG<p%p;]u4^^jONQoY&rn].2#mq%HdRE/[t90%L]2rg9%8eFr7HmmHBD?&q%;5#c_4t4jI*Vq`8hF:aKBML>ajo^\,<W
%*e1lt$)W2qC]-cslU!#:c9pk!*ph[q#KZDD:^3J-Sim!Smac31It&XU?UX\_)(JJNd8'Y5>Fon7GKnnO2S\[O*.u8:MS/-EiF[(,
%qjao,r&;CuO$(u(A:4!oqV&9bpN'Q*j\K%Vh>;<Vc(htYbl6QF)BR5n4oaMR0D&-eWkbihH1Er(okF:8C*<E'"F0Un6/;+G_u"Wg
%o#GtBJ&n/^b-DcNmS`K7_SZOTGrf2\e;LY[(I/l;mFB[t#Nmh:=s-l?S"#=sSC=FL_tC#OB>:Ua]A%(S6Z9jtTA=Nkg\H7CB_sKs
%h"C*O/T'h&o/5bW'Y3;Vh>)MG\l+"HAd<FkV+a)IiPhQOi4@XqM_NB?QeJ@`K3Gs8jM!7Lme/J?%DG$=+MZ[Rla,.4k#1TA%W'SE
%1C&+&bO`p.UBfH>HcU%"B^&8*ABW7YX#J@ppWkd)DnLGJ6Qd$=B\`Fe.eSjN=R#K#&[bKIdaE[),J<&ei[6JHOG8bkb&O$6J%Sn,
%<OV:TJh.<*p!0\pl+sj_7eua`)sH&1buC<Qe`$jkecoi,[oTU-4/\/4bjNX9X7b"Z4fXgkgt!7l)p<[L3V7X;rDIs448$?OhY\4t
%me<C(s5&!>#eIh'&"2/ImNY,'2p$_V'`Ij<1OYYAZ`OM44FQ4VEE(q)A2XrSY.md/jDjV[9bW4;Et+Q+M`^`oba5[6`qnBfMn;dW
%Xc3;T+qriZoB?)J]>La;IP'0/9F(@`S_NH\8&<li=)T(B.l1cSYk]?fH3#VbSL9,VotTp$et,rd/f1.kcX3?Xq=/It6b$;HE6ZWS
%](k._NI8LUrpKE_*U3L$o<Oo[n!B?l='gBkLhQ5GY=%Jr^:GJ]RrI9aaH27J]``W5[0.!iO3`H^h\<X(.uKH*]C"C3YK^Zskp4$S
%p@.L`[m6&tIUk*UTA'63oB%reZ\sm?5cs;Z_"=^TTYhd6cCH"7^`M!#0-a\@X81l3o6^:;YLXY:^:&'[[7333DLIVAB+H^VoKL$0
%qTS;B,A#c*`o*TgQ;t-dh=ogMRUKQnkFOoO(P(B$47'L0^AHOkqd%H"CmC%-!<%l3idEF]qhg+rHa.'*L1):tdDA8sDQFn1ZLn'A
%Alm<I@#[C_=C6DY^D#Ff8iqW3V8j09C<`T9cI98RB#\/+o`eQR*]"54U8`Ud)i([bl?7Wg\llD@0_BD^@19jkADDg.4KQGU]hC#!
%\o>VBJGiR+<IHEK;Pfqdln"SJ>7^2[9!i0AW*e-<WXTO9mBm^GkJM%(1S3^c!,6l12N&XqG&I7IrJ,.#<'s+#@;:,f@D,"d8#:5W
%5'ctoAHY:AL;%1KmeU4p1aF4/?t@-&e4/#o^Tr6ued,]DqC6Yp4Og[%9)VtTSKFQ4LaYL@4OM_$7.kokdbu"18g2!;`Z5K]BUShQ
%Ft:&/qkKr$W/GgYm4NZO_qa-#hKHV`V/r]"ht6VLoP,L5?L2To3PB`bH2g'1pYVO%MA2g#li@(B9[eUR0EW#KeYCC.h$8jg_lq79
%g-+8CrV5Y1%%U27%1U4.UE?VA<UpZq$@6W/#?Ph/grho??>o\t8AHc?D1;+=N"T8@6M4mJc,1'*_7Y5%^9b*l\uoe55H[+lJ71L(
%FnbjfB#]2SCgeH73PY'(q;$f)p9M4IXPCPnW:qB'LOT*[P13.ad*IS82sY9m]T`1p6p_I^rV38Z!gLKh[X-X;)SM*>p*fYpnjOC*
%-H\V-`t-uj!+l'NT3jeb@R"NJQA1U.6^BH8!j.+rTV3S4Pa&SHbe_^gXNfFnC=b.-URT6rmGj/7SA'u_U=2J?+J5Z"f"*8pS9Jnd
%]^sok)_X+p5F$,]$$LZDm>^p!pZg;_m4dt`q\e[5q83*Tp!k^65pLO0/8E2QO!6:VNu&pn:[=GIMLF!nOpga1Rh+E6cFnO<!qkHm
%f&O9@8cmZBkT1eSX6?uR\?k]NG@iqGf9Y-_bKeQYO#FgJHLrGsQ7iSBL:f!H;i3^E:MYj4Z$1]fagug\8')#jP:mmC6)h;IWd=X3
%fB&#_FJVqd*j-?67siq3Z@;THrQ"Y4=IW@"j8\-dYJ6[9oA@9hcS:(4!?"\VeYPWk(*gEK)I5tS.rtK2q$:%$m6[[rEn1Zp>Z[8!
%ND#FlOh?[VIc#]_qm?kmr,<0Kgm`KMX\d_Kk4#L"fKl-ZZ2T.jJA453EcWG%^E%mLWb]k<[e@9REMO5]Z4GLrF-"J)Mebs-?=bqL
%dMDP#^PpOdXpt'"X0AcC86!>ud'9mqbjMMJ(jA.?J=&%%k4IdoaGSp)C>l,b*DP>0S)<\r2uQp*oBZ;F\%m?V5K'r/k.KOKoNdj/
%G5h)uS`_*'<bn0nkFnI&H2+W1<k$p:P/6#@`dS$$^eXk0;"`Y*S')ndZ`J:[/k8I*r,q6TF-p`,EdkYN4F7,FoE&-%CO5`*@5!Zq
%I^=@+Eq(FLV>T:IK\XG)aSZ8\FEpk.k*qA%p!RkuX0Q`pUBYDOS'Q<L$a6iWY0GhDV-4!*>on)8j:Pt1;=2Vl_bIb\-G,$3Ls!Yo
%&p_'R1ZbB-mME1)9s)q4T39huI/CXBWBRr%QiFM``P>4<3VW*qWRdK1lMUGClIPB]I:q[?gCo)aaG]Hl"=JTWV1oIheGgT,#bRl@
%IV7cfQUFtL[XYs"\[1M;mTWqJ]l_o^/3\I_?+mpY^[&Yjr,gOT4$lRYk4Sk)qWY2O_t.=FBDI$Q48F*V\TKn^im*srSMS$.E!GVL
%e[Sn'[F&Y(h5(N(KoiQ)AHpK%B=a"mFLT+*jY;`q@h.WhDCb(a-gr,5["fq]rf#X`8#PbLmR(8t9%6d/b4S\XUE]V+9A0)ZqrH'f
%(/>4U$`mHjLU":gP\ZY#[,Ps`H+T>7Xe`Nl@*EB+nAX.d:'])<(iMs@Ri:2aKepj#eWl5eq]$'ge4gbJ,Rs369RH%;7G"h&+"pKu
%q8`0r.5gT!&\:Hm&k3E3fTn`1q8;Fn6T$t(o8i:[%?,tfmOJlZO_c4b"j^$kCM#oo*rg(la(Af![cst*DJ^'eO7(I"eD_"jnJoH+
%?MnQZQ(*M_\AikQP@.MEH>hC,CbtHoSt".khbSTr6+HV>0C:bX4U&KCQBV#)h1T-qT6>Wbpn-'YJo<M27I=sL`V-0up2++6Z?-J(
%R;#1C4nrTuBh&94(@cIp+:,N/mD8->pt2g%Q43[d\'pZ+@0>=VgCDLs1Xhp)*ROSmQ*tOs1-G9ZQKFRiJS*8'Uab-m@:7hDnJC%N
%C?$rX-B4R*&,=d2!0Qd'9=qdU;fH"uXm68,lWSgJ'-#SS'%=/F(Z<*Y4GS9&N3qQu<f0(]Ypo?RR4of-92PfKVB-.ZWn@kGK/jd_
%b<6[`9ZWp)*_b"D3<5k`JNu1s!m#t#NebDcfTiM8%EE*<31_:oK9'jgAd6Sc%Zk>m1Y@aP51@roY7X_f'-1\?bMY@+g6BpsZsup2
%=BQFU&FnbU/I1c3,Jd?%ho)Mj(>uu[#.>&p[LlD5ZdZMK!eu4]UjX',l5;in/s%]GA6Z4pb-MMLBquAD^9e2KL1c$Ef63i4>PHU8
%@j,,<J-6NVO?PTSR#6g_!&-DoC_?Ht=!["@4;(C'-mWZX@X535N'5pMVOi?5@EP%@iCNGM&3%8p2$X\iq`L%F1[]\Ij/(<ITKptV
%[F'E?8S^:55_gCEK,MQb,^dHc2:ljD.5/@:2!kpHq50Id%,4GR_PSZ]NTjU@fO:f0*?/&$7Oiu6P;[i69;m&O+[>1QW<<tN&aoPk
%%+YdlOIO,@!5HKZD-/or1O/&X:"mtH'G-4FXEeM6s6+Nk5&O_t^C/\<&7clEn$r/#$T#&0K:W*1I$b+5h_gO&O`GhO&.<e3_KA*D
%=9^q=QltTIcGdZ^ojOTqJ]VC<E5Z#a;7`W:o4A^O366=afdO'n"gKbOL3-2F*I39t/*t0^!ie^n!dm)<8)W[FY/E#%_CcFn%s.pN
%#AFK87IpeiYh1"5G'rGqNq.=[[A%#El6/?=TQHCk<'U9X8Ra&R6nBkkLd8(3o\.T,2H'`q@)(8m_G[04M?]Gu>Xb_C\a&^mh^E8W
%?m[MJ>'8B$aYKS8$.MDm\c\JMZX$gU@'-kQ0t2@K9q_aAhBWdpJ.0>=&-]kX'YP_qoPn0pQNOo-_#pt`#;HL[Dr[,0n-lb:Tc<o'
%D$"rO9SK&]<]>]2aQV!5V*hH@oGI'hMubjWEOG9j0+C*g*,%UlM"i0u]X27=\6iZ33Q.q:`rYMf-$4[#2's);Yoj:IRpfG*Q3eN8
%Po//-^`ehApa3)QX6VlJGj:uaT`(nTn28GsL]HMCc&W=c[.l@l"C36g"180G,?fZR=gIggX7-0A(,dC(C;F-3(USLm.6Yr7a0(Fr
%c2kp145N;Eo8sE2O>AH4j_$dJCAQ_076(-%C2"qc1gM@Z5%@-WA!ePc&&9=a-S>D3NENq*Hl7);MCmc?(,9#8KUPDY&YD&l&3dFK
%M_O5oVG,=&:$I:D+I&OPZ%rW0ErjC!a^Z:YgI;U%YTkJ[O$R/rG.*>7=CE*,489R-cinl90u"hS%4l?`KY->m2LfUJ!"AN-L_8JD
%P0YM`"B^Ja/DsF;#'rG:&7(DEX;!BjiW2<__M8/4SWjNW>=9SH&BQGaE-.F+D#j>4,nPKBKmXa6[p0/._Y#Vi.CtEE*O?KOkD2//
%#ZQB]eLXc\EDEa%Fjjdqo3d0982d+Te-k3&$.M>T&C@)TD?e&*Pi;^V2EPu35=c'+N[B)S3@1jN:.:C$+E!b#3#L!FM91r:;%"WQ
%!2YcknX:Yr9]@q6+Fjf,_<S;aq^+P9%2.h.E&=-H4`DF4"M:SBZD[5Z%@iIa")?@[j<:mB-M%RDs$Z+)VmP,[;fl]]RO-9FEtr#B
%6su[*bCkHdd%XC"l?/dm&,D6dZQ;[h:d)6h[0!r29iQ@6pL?>fQ5hUEiC?.=X@'TPn064$H"4[#fUEpHAu-B;fr")V1R?=bQ8uZA
%ZVZeHN<QD:[7-poD6(^YDo-"RAd<[6aWDT*!_J4P28eFi@<jCMnmT!78?`a:ic)&S_V8M$eC.5uEe3P_!es=DAi[0CJE`L(W6+,0
%/WY%l'^W>S8I[,VY/c%oVL]\m(1W2)MEDgXAbKbnd=@9dZhpg(],$#%lXpg-#)';c`b.2)W[LKE/06osGU23-L24"&TWt"RQ'?E3
%eG7Gq@53>M_3:^.7DT"O`m>$<he&D\T#$/$I8Yka(4GhcD@/`tS_,,=%t0?CLh7$76suM""FX`&LdU6"UjbA-,'#Ar>a-W*%$c#>
%*On9E0rf)hjYDn5h+m?>c%[rI@OqK_r!V%cd%_"KST'LV.*mEdH"o[]FGZ4?C;ON30#q\Q#.7;\o)8^8hOp^PJO?YqJ_G?>8u.R7
%W!qTo:Ik4s>H#j[=$jgBV(Med)Hh0\p)1XNH0VV#6m!JC`^!i3cZ!k&)ODO164e!3"[+]h'QZ`sY]L,.8!HS5SF*R1@#E%4JY^6r
%5ulBqXU4&4HD^ut[)&,N*>.9r)o+s@,2+*DDURZ)K67b%*#O;u!WtCt=p&/&!1gAAY+l2\d^ichgE;LGmHBd(5IKu7oc?n;*abW3
%iJSX(IFuAqe3<.?:@Y(qEN5XWnW/r"m,05U++><4!7Hcb'bFa-8.!3EDPRJG#<,N`TnAi6K%NAj15ISmeNnKnV\%jG)l\MC6**sT
%05dEu_Y5uf%'bGSW.sqmS8q.RDPA1M#<,KkZ%H-n;39A4,g)$pXsRT_EJbr(^QGNeF:tK&&o#@bMt5l".u`,sNDrC$J8n2VHLXe]
%7bQJp=E,V;&uRe5Mgqll'&1'UqFDX^5_11XEt]:O"S>EQ81_f*,;g)q\;;DdhqptiU^h:89G.=a;(&W$)_%$(_2VDdm,4KdQ1p<B
%N)a.jVpnWQR;/jm!bANQfcGR;MB&_A:/Ka1aJVuob&qA4@,'l^59`+h)2NXco@QLT!?G)jKW!#Q?joQ3FBWZ+G-V6^KJMKu+cPer
%fLi<?*^`"Fgd3VcB,!?YBX+Z!,-a,+%Onlt:/NBdXQdY9@$<X;bG</5'phU'(`8`_`7q-iIXGFWdRR<)Qjk\uMIRFLa?V"S!kS\a
%/;jInr6k@:,H]TV_GH/#nMn;%7+"P?G`JQq"R[Hb!M0<!I#7OKMK3.s179<:81UGhTM>=pp4_4\^^uU`ZhG'][SW=[/.u*sUB5eP
%o2s3\4#!U+f4&Hf*"jS%7QcWV?j)#>?oG$mZkg6L3?3odirl!:nkYk[)dr=N+"MoFaU[nr%`TN?6pXG^B/$!\!g>[*8P;Vf__>1+
%A$q5`qR$;"agF*+n,M-u/_:b.+3^.i<M9*@TTIV$^k`[T`PCt6!g&kf,+isY;dq/R3LO\8+jWQ9S&C'FccF4j,H>..(_dgBAUP70
%V*Vs*6Qd/D1,4t2/J^k\Y^Eb':jcE["K=7Sp(CLoUhQL%apJUARq^-U"DeLCBeHYl:"V.8S@!SBMh,L%:Ph]%EJFF5!8G:taT=eE
%Qn0@n%ss:16(Q7MU)a\1;l6XMD4.B5l2MYVJj?@PF,kj_Yh5;\$ph@Ba<El"O&sL],j:$#LOrV:239c_!2/bS5XD>7)(*mg$jtTf
%,ihVB*(?%95r:DeL`7S@O;^Rq3G[>^c\+Cr&S-b.mo%MoN&mXT)Zs9FEqY&@C8q>^M`#/ij*E+'#\fscYnlb[VVn-[_bk5N:jbW!
%q;A4q-3@9S&s!5;-1-M)LL1mqAXr!7;Mpc!)i'm"g6I_R2h`hhN$4&uG?A9'.\S11'O@L:Z8bqWakR">L&-g\BZ)lOHkgPnD)?9!
%X:WZbj"p@9FP.jL)q6S:`PcDnZ:tB=2N,a",$UuISuHf>HmT.=L(^BumoH\_=%B$TA(G>D;Rfgf_pC@KC#-!lE>'?Mq#Gf4j+*m;
%9=Yc2^4O[AAHOprqasC><2p;R"</1!CA!heJ2Erj.MC,6h?HqjM#i\%2f(_bUI4`lZ6+a`*mc^9LB.XA=0=OU1_-"=Hj+4Z:*j<D
%A3]b)1MVlbg55.7elcRr'NrcU$aOcq,.WUI3I+q-]-GA<:Z3=gPBa731^Q3D?XRf(fd;$</kRni1QBZ>cjluK4o:8pd+,)\U-"_l
%W<;lMjg/>QO-5qIlU!>AN#GuhO^cHG)2?!DM/D7ZYhR8qaS`kc?.e;9;`G?"6Z\M/*ZFgNmk\F(:1RE-#?EH$Z,=\X(Ik>@l>oXI
%+r:[YISpo<Op&`2\rX3n5$/UAXJF9R*Xc3<r?.)i5G@j"k87T^P"Z-q+DGYadX3U2;FVdMjp#3@e9]L++W<9&IS>a>CWWo;82G'R
%r,P.31Ki0L4IG2#nhh"_5i/qi^S1meFoe9FpDs&RHl_o)CU:UQgkFrZ+b:7.dAV%SQ45kLJ[f\%&^%uG\rIg6&GmeibIAX9PlYMJ
%QN1tCfkR2DYgXM4G9@?!RbF-fj`"CsKFD,<oUN$"@;b9j&JYB]\KiZfU,*iR%R(amKJLpF%&Q-`=4um(#ADU(6\C3F61S:5Jhkh8
%3M4IdfG-dcMs6*:GpokF$I<cf&e70]%e!m!,WV*<jG=h0R_nK$M2,P,S:>2V14/Z42KR9*6sntlFUZ76$ql9h2"<J&IMh67qPMB;
%brCeSNAT8mm(L<(MM]%eb!#;-4G07ESGj6Ql\M'kBl>3adFgFUlpXelfIr'q8PW*I;5lZ7DWl[?`t%FK.X;Er)^rE1>6U7+a#XFm
%?,@*j3UES0dagsF!i![,f+69-EFpXI09-t)HY@JY2Mo7'FrmFRAf&',;4aDcri@'4",j9foMjI(',h\nB\<9J*A8aikHLCA0d093
%r_XcrjA'g78iA>)&B`k)0U![2Jghaf:k+_1$FN/T+_+mu2:bHcrB;Ym(.XVqCVZj4&a-AG7ehu_Q%YgQ3gaGJ$)Op`2._^(-8mTG
%oM^u_dIf5lfVUJu>BDH+E9(>J3^-aiq3PM_Jc_U-@sC7dj:_cU_GDKa"cRSKPiUL.c)C0/HceOke5'#E7gs*p;\b9%-8Jb7S\8)I
%$[a*QK\Bi0M!c%aY#0'CMt/^ueo7dtXk^Z>?AZ`W=./dp.Di$B@^[e"Kq`Oo<GJPoL-Zj@HQ9'Qk[pKkZ&:LEU/BqZAN<[D=s#/N
%/nMpm&.p8,DD-r:aSI,\RdbI\-lf!/2^69I&?EI#i>8G8P58rd?kuTG8d.3[dJZQF1=&h#3-5uMK1+KFTaB1FN`&-=0Ca$fKs>c+
%r*qGmN>Q<l\9:sgH#27Kb.uAf>\eGo&9+#m/oH#0cLiL\*!6D60()]u7?1k,jWDB)..sO8m7[::apN<JiSIK35>-_0D<6"-6/a?g
%T`[o]GSMs[c?blG.fkK!/;\t-J4>MQAAkSI;8D&X,[]/)r]]u1E_ZXc-Sc4gc_brn*'<dX)p5@#CFX@_0fp[10F`VnE25YO+Y+K)
%(.\@$;M_3#H5?#qid.QN&C*roPWpc*07fpHAS#>L'XqKj8>AXXQr/nA2DgqC189s.^,VN77]0M6!+4sd#45V3&lKpmW%b'dGM2;#
%;C%i;U?BBm\3s>\id!#>"SBiY7_WtbP']757S]K)<EpOh8Yi7D+:N'Rkp[<QNe;#p3.n>EEM*al*7#G5$#Cq[NBuF;fbThG_rj/o
%B81)4QmO)V.hH>a+-&Wa+GX14at.\^=7/%7W>r]p0UaHf(f(G5R+R$`^<ik:a]<OlqiSaOW8rIG)J)$(EhoMj^_o#H-kjTs3\"<t
%KJ4,*N#ZptY^celZ['GrfGZW)T-?RKM0s!<4i0!JZ3%\A"$Wqf`/%5<LSaP&0FqVicI1Wk8NWE<&"dGgj?*]'8X9?7)>C`/Ckknm
%@UL*3ehGX3*>P^p_&@V7G^d@6ZD'jS,>B4l8C=[`?R8Y0A+Jnn9Ld=)i3Udj[une=We.p*Ph)&fI>D0RUkrE=cT2;]:lhkA<+U%0
%cGncY@gBnI`8G+_q98p_%,,b.%2:5uePda3<(TZ'e;h39kTJrR3"V@WA1/bAODTq?D*!J@d1)H:%s1TJ3P2b+`<@t<N/tT<5bNiT
%8de)#.#oK+78+1Wm?g]DfqQY62;**,as/u>3=n`M`]u@iU;P?4-@T!deB:LA@Xo`"A0OMi[FsPO7GeZ%XOoJoL`6d:1rq%;=[_8j
%0QE_C%/%tu_r:[6Kk0'C]B#4!0L!XWPJkHpR7e5o(lpO3Q-2M?KX\eSO<@dM5XR71k]`QX(c,.*&TM-`'5j!j&`)Gk)4^cfl+*B*
%a^QWd-"[^_9Pek/=*[_Vj92=r*^[am5I3X\&_=?PFX!!?8_t6FLaXb\0s9O#TF,u\II=,kJ8%46=RQ?+.*d2_=[+pl?t5#uQ'*%C
%nN?Xt?@brRQ]YmY3&nM3/S,L'N[[dLdccoH*I2.[hNYr8G3jO4Bj&TXj!iS08*_UQLDb(u:KfRTLT+:V$H#e?$pM!bdUU=&$q/!P
%#$BG]00.>);ai#eN^->S`YjNbBkq0CR<"6?6%W)_9]mVIVYk+DAKmlEZn\Fn\SNU[<eMg5cp;-?#Ub(so1!gAof91BBh6q]-%-O4
%kAm:2ofn4q9YI[0UOqb/0T?obP[2?lL<,j(7[Yj(nY#X!1t_9Ta<>.Kii^6VO;^pPjdZSHm#$OJH)cUPSKaUK40p=S&d'eWE9ScC
%_.TM>Tim6ikJ39/'0m_`nPP6B$1C4@K>L[&n;J8m?74>p(AUl+pL=$aEi,AnDcYbOSLI-d)jZskJ6(J%Qp5(OJuUTV>rj%m1;[.(
%,/(!MS1o4%-dk;JpiJLC0N>/Slp:IDa;3>T$*t_J;<,mN6KQ^-,.SEf4eL[Z8Ok<=9lO.^0t(VI3tp9fb<8JPZjdM?M),d?AuB@`
%1'an#RNS2`B+G1.059cGGAO)h3h._EYpW$smjXrl4<^l&nl8Oh84Ihg8>AYCmAnSGH>HRS)?hp!8]3FuG/2`[HL#m+-g(hBX.iX.
%P)RP'1s.&>KH(^>G0rf'WeR;m;u2s*%^WYd!\Ki$/`BiIFQ4*I,pa%W=JIE<MH!0QUTQRD5>7ilR\_caEE#Z'8]H"0fY!lUEk[fk
%nR:-0Pb!d`-+b6nQ&pcVoQf$hWZ;jqPX?ot@Ee,t%>I/QT8l7*-tAWn9M#]1'P>DDB6GQ&bYn8e-tM#CMpEY+`)4qJ(m%4H1fKa0
%&LaHR5QqD[_JFH*#I(fF:MPtE'Le5JM=p,4S0V"63+@dQ*fDWR$J>dTA7$37G0#s<^^cEd8E6q6iMcMPV?)J:#KT"2^QKj4!?)9C
%U<P$QJ:/Q")JSDrO??@1`ANG<J3d*\%48rs5(jDDnRuE/:Bd%(2r)QeMT)8b>\[PPZk8!;De2]oQ6=L!.BH`^mU[5.d4LV1M><O1
%8oddSf8b+/Bk9:.La31Mk@3?e29(_%=;+%2'&hr>SY^`2VQRQO<8</2Lm\:;>6rEInD5uU/8=]I-\i-39Y4=SH<?k-E]\+!pi85Z
%nO(>0`s;0+;&:pZUM;U3i;cG9GJaLb[L.,=le"qN5r<&@+[&@q886nHZJgJqRZ\KJKZacR>K=pHa(`%,RZ?`^7!Ad7[$L&ohS^GN
%WUruFVfJd>U5[?7a#B5iaDo)!7?82LEr!?`/Zn5QTeqa[B[f$56H&pB/#kZNkL;k_d8n<d[#Uk"akB-Y[Dt"3_c9#=FU7\\@JqD-
%;Oc<<bQkSR;Z'@0@me%.:0Z=O<gFtqI5hGm/'3BZNg+"3@#;k^W&4#]Qq!&mF9]$hJ2/oc>N0h?EbaVP/M[J`_T5-=,NlJIM"d>G
%0SSITbZa&VC!5PTEOCk\F+`/a(h\CiN`)eU58"SV6\8DQSurH2:h[j1m%]bS?51Y(6JG-g'D`jj29p#>>_&(.?jiZ2TbE;YQahFk
%`o^*m_$8FcM7eXS)-%!'EhJ$#c@%g"Bds'7U5u'mR&R%5q&qiD?ZQY'9CYQP`!\8JVjt3*%MF(2BhCgA0UO'tekn;uq>_Ek`[mB,
%66dU]&^'UE+7#Pb-)Q2e7kQc0f&;f)5:,kE9hgCe!`tO/g;3DT,rDl*8Un)n/J56<+_Si[(_T#rc&Q8LQY;6k`jJWW,<Z4jZ!rDH
%R#['(?OT2p7[]r:'TU(oN2(QVPV;%-C#lpMd/i2]KC`%t[Z).SD#@CuD\/m474!^_Kj,fnp4(b_Q;&54L(Tm<#4H_]-?Y3MWY=+G
%7>]a>@47?U9TTIMC,+d/(\<\OJ4>MQ4H.PfQlY@XK;+qp-9Mr9>fT=2cG8Bn>?<:9g#u#f!"p[p7!aMU:J-P=lD<K9R]`+5b/eTO
%n!:iTGh/&-'[9LojW)Bk01skd:4tX-?58/0fb`S6@Y")<1h)^&R&J+Z"H+`+;FQPtZN+NfD@$X83,J3]^5@u]Wb<@rLGER\aq?"V
%D82:>NSub?<(,N']934M/g&D.hG7j0(p`Dm<)e-'p_9UY30I<-!@cE7@JeK0p3pZZUC.;1;.NoV.Vsl$OP*2i6fc>a,MQ+)+u@_m
%!+7j*`\lkR-33T`%WKlo5Z'3[&Hb-)aJl@29pF@mj83Y3iINQ&.uKbDmgC4+J,b_,Qrd9/eb&/A`RM(m'_C38LPbO.c9]G0B"fS=
%,$4%@Frp6P,<kAmWf6+>FTBYIop+F[nm+D#*-`IMd-r8X)peYa6bRkt*pjst(;[!HGg=mGK]h8b,pY*1UCrCT3RF-&8neY+&(Y'p
%HnGFcks8^g,2kRf1'fH^MVZ0[9L(DQG,1cIlr]XE7Kt?6:;X,Gka5<;RLqJ2nm8Q\0_<+RaWVj)Ttr!AFdW`ej(WEM4FBWG#2`m(
%'krQGbXe4Y*^NTKq;@(Hc7QrL^pqEO*<;B,)$Z`?e5>R>_fQ0C+!JN)^!4G4A%jf)f*i,[S\Vt8cZLeYiD<Dr<dFn?!DO$FO.jq0
%D*!JS8)mhg/i)@ke),]LS39=R6-V0a;M?\[2C#$E:Gj)uObnlK[F@L_/UFe.80@4H%26]Gm6t3l\mV.&<In9T@n1k)I!1.k70%g>
%!g3V(.)=6%L"4Xsof0\JYU:!$NOan3A8'?+#$;L#Y2i]4*72S3=MR-BaY\C]JAhgkJ:CZb';uW7Dj(20k!"OJ9`/==S-H39LMK[b
%a>sJ?CkNf8,O0T2C!mdeCZN.h<(G[P0Z949qk!"uR"#XYa6#c?cGr7\2(V\#OX`6iqMHM/3:S\ePc@!P.V]OqZT>8oP$dh&2?qIM
%BsEnDO/Q%#,U*Mm*6=:r]IRXT!Er!,+_H"WWgHR`&Y@WdUbW0H(QqBlgghl&*T(NbiU\!?-d;U&$]<TJac]OnL4?q9FI6AE_06C)
%Md0[N)0_aE8d/G/QC=m.M%`SZ8$r?dLM&.iSTtL;TL2YbP#P&)-WNbEeR4S&WOQ7><uo8tjf"UoO3H%oAl*aR04p".:hCgX*B_^4
%3g)d$`I^VlJQ4%:I6&S3$TJ?Cf\c#9kH/eD%YuPB7YTjVj*JnIC]`_gTk9?k*\\Hc&hR2Ri#D>uBF84:Pdp]fJ&AYXQoU+unWr3L
%qs9rL\_&MNV"Im?5Z=c3X:B#mU7_KCGcI(Wh:LtsH(0Pcl.8IP5eic*1)Z-lH:E^.MXI0*)"\uhioG5;.8WA6lLdS.Gu=qfk(mFM
%.O3I#l`bX:NVS<U%=DAbEsG1M9K1jnD<^UO9UH6#4?7eZR<%n5/tQha\pXkq_dh1sFCd^ZG<0Qo^s"D-)Yk#SUcs=CK!%UNZG1eG
%_)*%a,:[]DbR_(6Dh)oOZq^6!5YGCY780UHVsU7)HOVIp3ESb^)>\6)\7L4oBVF9O8h)_#)bdLKal%a'\KWj+qr7trJ"]Ch8M89=
%]oX3_1C3hBkCFPsOJ_6*PO(8&5sr[cB+f3TWo5L)d0>lZf46nGndq7FO\W.YQba\P9!rVSiq\W&at+6KID(Bn=Y.:kcC/Hn+\S\r
%rQk_64S+4phuh3co=`F=@mr\i6KOoM_gr2VM3=NDgXk.je30\M=bbHg?VI&5*%*dUjLDeX4(3f[;1>%<*_/G'.M@CX&eJeuUmlC\
%8_e&[V-URkCbRoB5aeiDjRN%Bhi)Xgf4dc?R^-'mGB7jhgs2XDR:t)h76"WWYD.<;N]KLe-]gl[5f8]73j.'?]i)?LhIp_7>maLQ
%3u/mtThIN;@rT9rL]]34@]@W9."Qsb;J::HpDKZ*JK)j'>CZf.:R3[`UP;;%Mm-^pl@gX68?HCSCd-5O:Hd+lqYL[e$X&(Mn>3@'
%P@]-o#KhH)&,LNl!A^;8Q.%E:7Xgs.:A\He-,FWOE/#>K6rd:hL]>4VSM$70@!#Vm7lQRrVrIR="UnSpnOM'rjtZ@-faW2iT9H@(
%f80J3$9k@`paELchatf[)FA&W=mZb^QdNbP:inrbSH-\3-oPEHJ@?pt2?oEN,+kHfg6+sk"oEWUiNpL[iaWuq6Ti-I2;k8(4s#_N
%;kkQ\W2,&[LC:"Qbp0l&^t..ThUcO&T$-q10K[MKPa"Nr\P1t02"0Pe1$@+cTa=q)4-$<C?oAKqXOMZY)>3Y?Nb7c@-(g4D(rB(q
%NCoca]Q_28I4;!Z2B.npL`k/I^gSN[58DXY30l$6Kbl1[<-BgB8L]m'e^O7Ae(U(-E-r.&\I'#cdMtr5>U99]WpqbfQ/]\F+8A[?
%\fB;ul+B&3"?E!q='EDJeWmKF`6rWrC<Aa=r_A6RGi(@VCM9e__t$u>@8U+R)]g3q24:0*g2ao\NsXd-BM2ElEg1t6g9@GA+oT,]
%'pc)>-*JiqP/21*KRI2;+OG+D;k8:JZG:L/Sh^:["]Um5N=5@MFo#%I*Q[k(rV;5Dg^bWMU=,^OktS7<k_gm*g)Pei(/*)F%![aP
%"^$/i<nUPV3sVShE<aI]YafT%NCb4?N[Ep<kokhHB:OOR8PWKf.:,A/!C[hG*H\G;APboj:lj7e.A;L!Q?!*0SgcH81H6h_KV"l,
%-s;9CVZ79`#'O[$$7I3&nE1kSku]"i%.c8RMODp:IT@Z_/2;^9L\OI,;,?CJ(!P7Wajl;`1u'J@rQ3)44"`L\c/L2Rn/+s%i8j-b
%A+F(G,[4`(j9._Br'%,V3__8J=P)3o+shqfCc"U-m@NTt>3%obP7SM%YW'(N&Y@B\KoI3Ak;YI'1u7*7cPIjPI-cZZX<_'HdNn5q
%*Nqp[@9LCD&poj.9D&rh?lF.6JcN2<RS.r8GoX>-KVMLbF?l=[EpP4S2<mo57KjJeGf#CscW'.Eb!W'E^A-P>[oJYW9UA6%5`h/4
%g1<F5>gQ@?i@Rj"ZBFrfR0+ke:aS8keB^i<kUUA=j<,hZ)?u0Q3]59P.?KXlfI6ko[4b+D2pkTa@['1j.Mpsm'V3<ISD2,b&rAD=
%b22op)3UHO4/$:eJ0I..ZW)@UZ4%hdW^iNdnqN3mEc_UM6lJ[k'sQ$Rr3r#M:=-tLD1)#]UM.cgZ4WDAUgW];6rTTl#eME!5c11-
%KU?hs4q^KT5p_9"k*>G;5!hRh(GIBf*1R(`jJq_%BB^kB67;(ML#.hk;:IUPArnC\i])TPo"fkgNC:'"e`%uN9!\p@%k>aqc<l[Q
%/@0%,o(qQpqGK,oSmKf]jH>@Rg!;:M\"q-FOq6hl3%M_YalW-Xd&kTr)QL:t/k<6XQ."flC-g4!-YbH.&7A/&,cIo,;9;ZMo!bl1
%86*6HbMm4n>S1l=/(Ybq>tdUcKH`@M7d?0M.@r;F-ki3%0g#c;H]`;-%O+5n.E\CO&\L-Ho-4sL:*fYp0#0dhHp5R54@aYY0q%NV
%04!8rW2Pi2%eFCG)kqdkW="<5</lROR`)imempO.Csep9g@<iM$&auL_:$EuU8FOW2/LI$j?cb;\i1*f[Fh.iioZ7ShYA4Dr\Fsd
%OcHW=;?.osF_heq6EL5IVeu3N]-G%JC(M0<9,/,^U3^C`aan/K4Q0IWBj-hD+\u,4+mqb@59nqF_DK1f2%I:Xd7)p+MA:0+.J"$#
%3oZVuGZ%4O/7=O?R)VhbB3b?]Ie"298NM8L8U_<QW.Ulg7&(JGd,IG.*-Jr$4GY24BagW$L8oe@1*BLL^h6]P$4')3>YS*uR=eD]
%)=Nq;^NE5R]INm=(,Cs[fkhRi;AE%`_qN^RCTo@c!#8.IF9@us&kfUKD;N*FZ?tl(-[GXFn<s%pQ-A:P[]B%^cF3?kBnV2PcF(SA
%^1*l/N'>9<a5RL8RlZl+d?56F9;Zb@PT4<UJR4BdS%<8MGbiG[PtZQSC.=OMGZ7#IF6+:78/+on6)7GFBTA2")qXE&R#.\E<ar6f
%Sqa+H&#gr\g:!k3MiT2)(HY&mO4`Z@#+7&"&d36`JP+D%I&3GgF;!'g&/u<hG4mef4g(gZ6cEn!af*,s8bhL-('Kfi.$eJCn1'/J
%.?pm1/QWbHklX;D<p]'neC-<%nUZQNR\n<_;E&+D?)j>-*#;f>8S-4FPI=UJOqSCK/"1QuT;/!a-f,+S!:h#tUo!&a\L(FHU,'&S
%mgaFg7Bg$YQ4J.:aIH$@pN8OV=Y#OakDq&n58#<4eWd.,Sh>-XnI;*mml8g?cjdfM\^Cqe3g30CY9TVsC!_N5/4&<Rq](O`Om1)f
%'lB[aA.POeZK[5.7HI`J.:;%t..$DCe8t?Ej9&uX/+,om89HqN6n&u6O<P'fWXkOj"%KSYCa)"A-2t']:.J#$Sl?NAUGB:3MRMU>
%PLGT*T&d%#(E5(9c"3m?e,:njjJI!,g"mc?4(G>ua0'D3k-&$`kX=N)Eun?\-1A8)LbFd'W0n:Wp0GnDU)Z3nN%%mdVUn[@gQSFJ
%beth9M5M@0K#$GkZ5V-&c8S0:d?6C_e+TTC+?B!4p=/j23oXj`nhI[PWF1K.^,hlYnXFPS7+0b9;\_=51[LZH@jP'r?Ucsh#>Y+V
%*VHKc:)fjYGbM;T,65sId*6<Gp_Ngc/F5&,`fU69q@tH3OUebN#)C(mH6)[cIJ.`DibmC@S@e'>+J.Vf<)AH(EQMNrbKA[1dc'P9
%2"N,+(Y@u/ViCFEe&!?e+O-B9T=POA1H%3E($.;S/tm<*120GAA1<R'1lG>Pr]Wh7BgXMt+CiRaUmR(t\Y_Y_a\KZNc!f([1*$3g
%Fi"JhPS&dI2%I@mpH%SRHZFHB<O>"ST;V(u3=rbq^a>r_\t"$$D%(6#BTAV6_Wf."l:W%4:Tl"72Z!,MqI7]F9<%tG$98P+ch@3!
%]6lc^'TVC6d`e:sf+bCsHei1X*V$Kg:$sg5=rq@l>q-PodYE$'TQm8+5Z+Mb%["RrBkS*GN\OmFo%a(g*VG/ON&_B4Gc^R8Umj.[
%Z1nI`Y*"@)kCSZJ(:Asgfi2aTRMt8IMWo9)Zjk41NT:[/\mLM60iLeiVJYn^ZaPqf4Xb:W-LAj"96=+3YUhoffXJp\A[.'XmrbGT
%Nf0-U-Ot$WZ&O&/*rGDfDd+]$gQjAc.#1271K_YZUC`fC,FMV\V]%Wcd>q'uJXBd(*EBA>b=-9i``KX\-(7,9<\4(A`RBG%gGDp*
%"u#:NV[OSI-?$@HV5207&uGi,\"&=]OUkL!l$.gAW#-Ffg.I]Sad5I7-(lDZC/!CcI`8$3G+s*=?IGfN01dNa3Qt'mHNe<OW&Eaj
%@e"5U%l%s=%^CYdk,BI@>mip`Mmb5.C#u[f+:90YA!\,]1JgJ4-Qci#c:7I6`gV.m@O;X^MQmhk(J1MS$^#82>s/^fmM37NCfO6N
%UT/0si0J7!U!S@%Et/=)USK["=S,ogBagur7<CoE@g\2ePSm-I+F13[e5=mfGeD)dj\h/2$!c_Um[kni@a_6u*K/#dX)>C?1u3W9
%N\$XGEBI`k*(NaX(W(=Ul5n&1Tr9Xe-K'eI9NJ5CVrahXZik*iK?m[TR`WOq43r."K9%fbW1.kLW7VqUH4?>S6A1nuXB#>u+>pl_
%U7E.ENPl6+^#[;()I"#:!DUN]0ab`Oi(eqj1Euoh=3c_F?3$gD@7#X`$%>u;c&oBlR)(8WA/RHX\[=BLZq,otSQPfOPrKESd7Zf,
%C?JA"mdiRNke+8:1Nho978!*t_a#qW\)F*-==2-iGH@1G'Wi^S$7A0u<KV[H'brBe.Sj<>&:IfJ7DPbp1arQ[5&2hfW<eJ'ihQCU
%Cn%W)Pu>(4PuL[n@W9VdPKG7f#@lRk(N,ZOh)O$t,CFn<k9#5>C7!At)dC],7?6rgU"9hdi,R-a:Z]Dqb,L/-C\SS`qIRMH7(bm;
%cbNuo'0FZPHBj.49L=kh22noB"@VO./r$*)PK=,]G8k4u-C(MsCDs)oH%H5A.d"ofqK`Uko2KTGSQ]('T9s=&+CL%U.^iieWusNi
%3j1;!jK+J]WMH?(0%F'+H%8k>3^dXPq-2@d,]+6r<([XPY&7gjHQla<XV%H&1)b7+R>^;d*6qV2lU91[Z$$dfr5onBSG_Bhd4Qp?
%,tZ!R02'aQ_@pQ:]ad]__ns%-%qj7S.832@]:Mtb0Ks?7aiPgK8b(6*[]1?Vm\XOCcnPgs#/kUEi^l40JI20s3dtV`amhBB)["'6
%Wi5'Z'"Y4kHK$E[9oX4[N26G:7m1QX@V:Innm#UP&UR^G`X.MYTPDH2q9Vk"3M'-_I?h65Kd_$l^=Uj"Lo9WT+^V5UY49")ZQqZe
%75>kkd7OFA.RC3iGsWiOAb4#*89t%d]agMiVubIlVB+eq;fG]VeG2ib.cufD^?]n4(7-a'Wp\pTl$QB$Y*L2W\\H<"cPaWt_TH8:
%OSde4qBPP7TC+'Ro-g]qU1u&;+`Jk)):AD2%aFMIh))Ye`=9Mr5,K]9QC'Fipms).pN]^JbRY^W=KPT9D0uSY`-Qf&GE;!2`7*<!
%`]q0t:doM'd^#+TW%Xd)U\bf1s),dO5Rj%$g@UZklgIi1#HZ-8a)&B8KUH/ZN?W%V=jc\,P:s=.,&$91Fi7ta?+JQ)2(h6i1d(QQ
%1VjI&HrYBTe&uaZ*K:N3aQ)ju]$EqVrI']Lb#C`imq\ZOe`-QsV,g>`T_W-.P!$[Z[-4[X:sHdT2Wh?50Z8`9qKj7UZu*>kJ@olV
%<+Wt;4-'o:(oeV[<gDi'e=IU>F/Gq:)4d)lI0qtYjJ:d6'S1j7S04]oNStUMOs5N).licP-%9Yt-&Cf+SHS56XGb-k)HtX=%_t$T
%WYH/1C#<:1j@2$Kh.N])lo:h07)m!f#FHpIL2D<s>GsY@Rr^*/7dUR=rC-`O4snt#R-H;Z5@OhT\+*oT75'g!Mt6"n:+Uk8=<"HG
%rdXS7dMo>K&QBN)mpB)b,a(U`KIOq#JRZVMeLN'n<u@b\;%u9R,@5;!i4<IU8jY2_[cAPpQZ^+M-JbFC'a1J4/QWqA\>Ck>m<YeN
%(TGDRc9Pqs__W`,8p+(Bq?nWo\X^j%_,]Rd4LV!p5PgQ:5Sf%6MQ:RGk_T9iP')VA4`Z?\]\08FW*&dZ*#.5lRrC@s)Nc4f^jG95
%i=n%nC.WEcmY1Fq.B<pn$o%1$]"/SSF&]`U%rB@M*-o[!`hF76P`Vqe[8U`UHI22P#A6<]N>uE+dH,(?Zj3]JZD>kK+nZ2Z%.*E8
%>Z#+/B>V0(P"lnL-CluQoadr@T:1Z*=0/,f7O[H%.rti/F)mEhjd>ABgr;n>$m/V%nJsOl'c<gb5b?$*YD&H4fAuF==>U/PM+<fr
%Tpek<7E9AK`J%4o83@*.3qk;t&'9baK:MM]l'=P+)W_SFQFcN[%V8NU%$OGE`P<?1SVY;k^.=+nlJs9OTnQ6r'l'0O0/Tr0R#.`.
%^8l74YYp)calN#k.Q)Ld2.[Nro,Esg0CEej6@lF8qGXY!;jRQj7X06_J,!-tIJbqd7DamZgS@c5`ec$(*7)<)Gf*L9i]O-&*CUbG
%F%$Bd=R,KP-^GD5QH^2SdLaC\DQ8pcFLgt)5/V"ScQ_!KV];#Y_Gao-b7]R@jfoljX2f<3?Ba\b1d4WoGHmR)\qAhsH\_q>Sc!o8
%j'c]&,RLKQI+AeNPZs.cqJUclPiC@VP0A"cL-^U4,/I35YDo3m<TN*hp)lueiER:l<!>BI,Nn(_nQ]$cZcaX8H2cb/A$g&3</DM1
%a`k$A380:7$`LEnliHF4;bI-,*N5L0NYtbnIt^__0jY:M'oa)\=IQ_]Jduf1,=K"orQt@%n^#XS:#Y>&T7#O@DF^G"Ga"p==p:3a
%a2b&&W%d$sMWgF2a5'>M<`oEWT'H=F7gpMHPU\$gYQDD9-%JFn9g2!4>a<i,LMoANj'nQXA@QZ-#f4uSs&bO6VRe4Pc-_R%_ob*E
%Y7Ap5<P^N'PtQBJ[E]pH7sRrhEM8ILW0-Z5dN2f0dGTke0NIfDn7WX%EdB2Fe6e)njn_DLO:Lm5jaLqOkZJlId2]P/d7LMO+X!hM
%+tn[]b4A1E5)G#,VkZt#N=?V/koY>\M]CiP5:#rUfnc.OMK'Us0&%i;UPbkX#1l*oeSPu0m_30.*2B6dhFor\Mj\NF?RCiQUWDC`
%`sKg=jO*pX@;Q$40&X_)7-4kW]%&c[=d*#$3"<I+QI<djJT*4:ITqjQP>omM554jU3u/^2a?Gm]p8+L[CROI'6fM'_(oO)IXsb_7
%U\`2kqJd4/?!Z^Y^_BBgZ'TNRPt!cEL/g>N>B`/o(f3Yb%>Ad0N[j!j76+H5K\eK4NAM-R><\rP`:Z10h/b_1cpbb`8k#3hPmX+k
%VN11MWWEi:"jAa+!.h;PC$Wop6kb1_Zc2Ptl=mjM.AQ]m'h#9"5O6!2L=p60o3.m0Gd,AX9NHqCe"#-B2>HB%JGrkF4`-*Qqs_ud
%hcA3LPjW"8#om-i`[mbX4&+IPQ"7aJ(ZOO2]oIEmL>p:!^S@cCS%FtIabn2fjGiXlQ$-V>S[6#nNj.X/4W\J?s4)P>XsM2Ph7eI>
%LYNI!L6PIg8ZV8W$Qr8tZk*9*$<22"C4OElfW(2$n)\19O*E=0Fml@I8Q:9AR>_s6_gF3u\)A<5.*dh//Th\`M/:>Ec9jP$r!ioc
%Zb0lo<p7b0pGt`h9UaDeZK$!BXkl:p<WfRT,Cg0K8jcRnWZ=b\6gBJGMbdT5+te!>#sL:o\(!F>-kJ+&#38HQ.445.)Mba'TJhuF
%1k;.Tj=CeL><m`ED4c_e^OXsJEMh)ljTiX9H*C-gK3/l/g34<;fp[3ZYcnSO"9;HYhbJ%F^T>-7i$FG?&VP<M'YtVl+jq!7j^8OT
%L_8-rW":oMi`.Yt=0:=1G2!(I#X796%YE>%NtJ+#;LNW%8e;\[ReF!e'EL]6P:/(f]iFD@4Q&gT8(e;@0dPY@^p2O5blRRL#JWo2
%W*mE!!KKF=273rrXkl;#W^kh%jZ0IW6T'GUR-8NH89B2)9nH5>3T*M/6=qdr$SGVr<U?>OdCu=BH*U_n&hW7AKpiXti^SqC7]_e^
%DcQWFJ1I![0a=jMRM#@R<puYRVTl@uC(q1g/pBuDjd_I4Jh^-R,E=QgMX31j/hSL%He%?32O2,k".I$.9iM.O\G%3"T<stf%-;=.
%ZuK]cWQ$PN3qKr)q^7Lg>"jG#o"*"\['uoC;7l:bZiJ?*9(!#Na*;P233%m+^U?^U>TQ?&J`M>9;,QZ!Pdo8TeUcS&)k`DMO+GN`
%ptWJpp&:pim20SmH#4"qIBZc4J8m2a_r^R$lun"[6Yeq;?8VM$:$!)aD_9)\)g<5A,/k9r:(HC^Si6D%5PqTgKY`2--=O<S>CA1R
%9C'Uco/O]F'5FQ7N$0p6^L6[AoPFTbZa)'.E"lDI&hZ(r=^JIZX/oZU!eUal223>a"W(`R^</X9%j%.E2I;JQJV!o^a"1I7_Lr9)
%rh@q5K<jG9IXV?<$nGVkjMNinSP4]mnl:#gJ^U?9;Xd+,Xq%"jB@BOJ?riP6Wt3-T;(VU1c1iKE23T_/FcPo'@.<B6,u0Y^\)GVD
%eNOQpLU":!48-*^"JU1lkhTa`7,Aa>-c;J.U:(S7`KC(hLW4*7mh+R.Cgl-$bNknQ00Al(gWDEH9fQ:Jm&i2)a#<KIb/bt84'JH8
%_!SDeTl<c0>.o4NOliZ!g]%!tc6*Oj$Kp"eic$4=2OKUHEB"N3as[Aq\k6&LNIKi[O,?_nn`CcMEaM4'9oRpA5a=EWaRFB"]ORW9
%Ep)dH4h(9d(]F=j[l70NZ5ASbfE5(lB>%_>qAD&&[t=S*AL7/6N1;,t(CB&_hK*H)Ok?cXTPl9/I6%)$S76mL+DpgGn?e2Ikqr>1
%rL>cVd^4?G&VT`5K=Xti=/SM0F^d[Xb*t_1Sm7pVUF&_.'[8?D_C)OAR.Rd*f32F*U3]0EU;XPSSb&i*7mcr%o/psKC#fjHX.hCV
%%[ff>JFDRY,BYJ/8s;!%p1frR6ngs<#hSR?bm/Y^%Wm+,06D6g5O!3peKe+g^nM.bY9N!U$p8@A]u[b<SO`C[/;UfWX,k2*f((rJ
%b3P`k'LP;T5_s*0%'(2,h[5`m/YB#q%1#Zh/f^erUAL)bi(`.2k=-P9@SJGh+XOlFKMm97_:aRmr?tZ#(stu8Q5,n!:%33K>hm>X
%Zl26EF/(rKFe:dt]VeQ(e'R8<@ZP@e<0`$<8[)2KnN$7"K2hVcg"gu0$j(;KE.\.n/fK/fM;%Xjr!!4J&F(rZ&^cl"O9+Rr?s?pS
%3t#SBfLu'jCOtK6D#seugOQKj<Zd1SNK!eA80EDd`X%ZrBkOta.?EsrW_;n"qc00lMr)<C?D_\/O>iWm7i/9klG\?:q=B6"P`,VF
%[-O7(2;]b[AtB.RD$5nSY<.7_.VNpE&O9X)]lU4b`6R2Yg"paHHTCk3&7M">aO/"iKtt;MfpJn\Elp6IKgDNfj.HSGUGO@(I)Y5m
%DY6j[8m0=V<dkGEAYKb_K*?7[$W8:S!MI0Pj7GJ]`%EX-=*=nl<ND2!mb2E)bKBjJ[q$2CQ("3IPp.-NOG8?V;[tD\e8L"h>t,Nu
%3>sgSEj=6igutLfR?=*7VXhm/)1'&XU(0^<.&%E$,HT6E;t-qXEe:=X3KqPJe>[Y,oT@MT3^4/Kq5#GOet9*ha<>=rEk8DnoUlb$
%gk7+<e,rI0*=$p1Vg]OcX`LNR"pGe-)uN^O`_aScGs*D!MJ;Z*RR[,uo1TFO72NH)h0N]BWJ:]A.(Es_OjmT=T%E"0H7IkjB1rN?
%RDU&'s5RoA!]h%uBdniDF(%K#0S-65a/da%Uo.68%SE@Ek<Y=4Gt](95'mN5P`(AG(+Rgeg9WR4/T[Tq"&ioo`O0L_RW*$6J^cB/
%lI0t700PS99E]MT@=4=R(u'r/+%:Ha21Q-mdM3adGuMGQp*ZDm(Tfk>PdJ^.%D*6qYQj&IEXQL0o\q,=<sQlPI!IujHJI\N#&^rS
%OZn/1nr_.5DY#Mm:NFe.kiL2H83+k(>Zf4,:_/C6WOitnHD68uI+)\f"\fegn(d-E1$S!"%89(01^;`*KMMJV;.e&`4_9i.S?Pqm
%%5Q$F27b>T'9M4abst+pUUU2"FsP1UkQ>!H;>k/r<qH9iZ<J-L_"U8)B+<]0-sD=D@,/nmGAd'#OEBN_]jVrg9L'#=jTX\n2"GIL
%6.K&r,$/ABrD77)VeN+^lUZCf[JFhhqgJAY1QuCU_F1s/5^$B9KM]S=+a;T(iY%_AGj&[Kj9f9pT,W,:(>DaD^jA-#%S7IE5Y$.?
%<2Ip0Fn-7J)*;dm[uhu[)jK:aQf:Qm7B6s;DG\2gEAr<n.7>a=I8VI<=b'0ebQl_!]_g-k=b_-UQ.&SN%#Qo'rFtn<?(Y>L1ap/_
%Gf*dpa>eg#]Ft]+`TG?+#O)9ZnMY9n8TYi5H?F%o4>j0!;brB:P'ZC[s'hjG1<1)7G/FQDT$h/b77%>rFY^Y1*O_X&S/eJYZV6Ih
%(JR(5&]jnJ4O/Kk$nrF]9$5p"@mO=O1!LR'92t6KC)P%E<lRHX_>JIooT@YXeE46M+i!5'!n<W(+2Vk)Z9OR=Wi+;[F@Nd9a\)[b
%qa"g3<AX3NWNPL@lHNORa`]kaq62YFDMt9Upo\=p;i3`+%P*Wc?OT9:&WfDQG]*2Tg6:>B:j@2@K#LORWRt_>04cUU\N?o`JKkdI
%iJ:SDdKqW>=-K1Z]m3hbP=g2@'"9nd*s"k5&.n)ap/lfFKM@0TiCI]/F#Y>cKr63(F)(?Jg6S[;,Adm`0O7#$d'8[5J@u[bZ8k5Z
%gk(*XK2B+OcH0cJRcRJC2bt^&nK3SN2\.>7;OohaM--!822T.E+>HaL"ib4i?*X1p7"*nRf//Cb4j;oeN[&:,!Xa\0ogqQNVGLdQ
%nS17%OK.$?WJbaMc>DF==Z96QdOl[bJaXXNHP$B#U3:,h,%r!^aBEe3!)hY6QUS,U9CJV*Y=Z&%1<_fbLd#ZPY2n5re]`03Nq&Xu
%EYpbHgE9`jpdRAZ(TlQ++e]&"G9cNd1,ps)PhR+AgT)3f;J\qgqa!-jcUNW5cpMT=F/rZuVCVaj$CK3R(h0;fWYuS(NWAK=N5pk[
%Kb]DCAL1r=4dG5T(N&"kPBD%bQH5OQ80jREOIY%$ZoR^+Y]P%KiaO)\HsW)]2S"eCU=HG^-HSZNN(tb[C/Ak[/>W$Bk'AmB\*h[q
%"OG3kha34$N3=/5Gq+sJrdg43?'-[:\8)XYQ\bq/.D'BDc:PT9_('dZEp_IQIT;Sf@(>hTd]ij_'&BqJ!,rBnkYPb85Yk^],IEM0
%&XC+mUR7<H(TlOVMg^q;`__L65o\7Ik\SS'$LRD=np%]PB@q.'Xdsp3&rY.Hk3/j8^T+8dMG`RB):l]ehjW$?0dcI:Yr$G,kgc6B
%"K5bQSNVqRWR72J&g^Du8<[Br1Tpq_!#?,BMoDF9L`.F'N@1dT:ca6fW1qW9guK9D`kR*7G_!UJ5^t^epD[KFWHFs_[I(2WN)g:#
%F`lXu;_=^L1%/,7l[e9UPjH??$/3cV;BNdD!-?ZVl%*a_J+&n,ad_PT;;="8"H"<(;thQ;!'`*_`^q*'>Wt6Th?i0ji9iHOeQ8G$
%g3eZr8S'K1d!dYi)@`7Y0Cc"9;4Vpl08(h_fs1;/NfU:5=E`]0+ls>e6K_'\aOc%D(]^W9<^uk,GkH$D`m`B'*0C5rM@$>t%s/i+
%3ZUV5>1*C5g0?ep05pOA&oHe0l#"$.rqu.*GG)Sf6F0f[E>anN1@Gei/rNVZ$Q59`i@FR%)sCY1TdQ^SaZ,;>_@*Yqb:#3c\Gq\+
%:_bt'aXn>M?@VmZLV![#%3Q5hVB8pZ]am@tgGU#7,TB,b(g>@;IWfs/Y_F%9#sqLb6Y@)9P[\p/")%Z3/P-Q</dr4&bpt#J)29k0
%4L$$AAFZ5=DH'nhhKFcL1>Hk@k!2HL_ZAr-h\nKj5@Q/ko%"3*O`?jTOaa9tfmR1ZD&g1q6@G?H?4Vo-^.lQ:5T!A4_ccgXY;cW%
%!_abh%Al>,-QMg;UbX<$7or8W&LKaPk8p%JK8(CsjarJ%ahpebaQkat9FqUUSkX.`5d$!4d<PC-.asq2;hDsBN-l8M/U@!l>MhlE
%j)^\eZZ8m!.SQ&^3IXa).:-8G74WND4U32Z!N`M/XTHhNroC$a`1emTp(h+:_#1N/i%T"#`rJ7&YIdu?9luHt[8PG(YS4S16N4k^
%q<0fIqFL$:c2%07#1fdkKCYCuNZ\Hb!W%uo)Zm`g4tA%2M57)Xa@3/dCdE:DWmO=GpU.@jDhW;,AsH/2(M6lH<;6OAc/;tL"QA>Q
%01<<V,'6Xd\_g1;VgVjXqFL$8cfOs:+?GXcPiH;!8\)s@!13q!Q/kEEfY]l>j>%[p?>El*jJ'mh;M,hO%6=(AKb.)BA;GZEKYcVB
%<JY*Gel"2ESgZ[^3pK!Z,J@*hDRaHSOk`l:!H1LoL]>tPH0QktZ0;Ken4fAb4?5__KPe)gEKN2p&P%gO_uUg#e`nBiB@p7'iP4/<
%VK[=n5$C&q(3%m54q1HKekte4GDAtmXP1C>STW?D6a;"0lPkSjQJ`6g7Z`u6Fu#@U+#RUS+hg:g$X4=J0>cC+P=?$cLXFJ,2BPNH
%Xm#H_btU]mcM=p?89T,]CaA-HZ&RGn8*4_gf*)rs.Uj9LmF0L8rVG=5,I,jL&'Jn<,_5+l*c,*c%/%_CYfDZtbH`U]ft3pBG(TP3
%fQUWhTV=Y0qFKsimY9t14AaiZ-gWjpZMg@)X-4s/Gn-5-NKku`JaH!34QdRL-)b0'>5`0G;9L`.-,"._/=G:1Y[BsB34Mbc$YF%M
%dD_XV/7DhNJn%!)rOe)#Ec1QDgtcFeM[BU^*LCRH4ucs!jn-_coZYeH\Y!,Y:/b^7*qXd`Pm2+IMAMhQHmEe<#iG56U%CeDEh1Cd
%P?MhE4H&gJCt3S_em$u@I!'s^>\3]U^5cMWqG?NrRAMn[-(l:,`0VZKNDC<ZgCK1.E,C9,[",BfMJECRXs462%?SOmoi%oPj=XBG
%cb)OG#)5pg'<M==P2+@#kbC$>A$n+-G]KZ(Y/'/BG#P"Njec9>qFKsjV/>N;U4ijgBu,C$-Q/dq_[W1kF."MJMOW@<h4oI?W(Bc/
%>=66'F+\[pgs>?f#>YF\K+:*hdUn`SO_0%So/TU=D)_TY,GAt4.:EDJ7@Oga?L(R_/dnCHa1%s'NPGRcO1Ina!NNpW1uRicSWeZ8
%Hc"[c?)J'/qkDJ.@Q3YE2f-O:#ihn6TaWnG?M3OqQ6%Gb>41OPBKS)lXF)<=h6fBc-s]h0q:t7&\\$PcHoRO=CaAp*ZNQ]K5M6>g
%fM/RRO@6+l]u:RI]D1Bl)5;gfLoDPJ_H!Z2b5KBhr;0i[8!jiSfmIYtAlB^k%Ldnl>S7)cXf@%QgKE<Nb9XbH6aQE5+S*gJG,A*[
%p;Xr9TVqDN`n=-Vrg0/l%V\hB=C=T_q-D9DSllT<rPq+qs7!Yb]79\K5C`Qc+2@j!Dgp^Os7lO7s5hRSe=3r)=<?PoTduMY2e2l[
%oO5VSDu[l8s4skud!bdm;1ei(J,djPrr.-An\`-AnE]QB?VTGNQiFsY?iS%4Er)rRh>d%d0jJ_qr%7*!lj_(._b$(EgdK]C0VuPm
%A&D\4Gr9tVi>`L$JTLt"o3![J;J!2CCaL8n&sPB'[b45A+.[MY0V+3u"&$)C>D4LV;l#4+3jf74p%+Kg_&jia1.BL3Z8,den(Xks
%OaurK-(4rH97hd*cgY_K=b/Zof1_Cl]kFRT,[5IuCpZZ2e'If13$D6W1gVclda?\,93m<@f+C'"Y4n+gojOqY>NK5\[eV7?0$Q*K
%\um@+5+)YJBDib<Ek6:8e!(@!rh1=GE`Aa+fU>P`I\m'[dof&kgG0hRrmJbp34S]]^Efp(S6CREB'#1KZsU<Kf3"<O[i'ZE,02dN
%i5f'FcD.JPfr\#eaGIY$R-('b42>@_kgXKe7,A_g6H"PW@[YE5dHQ7q/7eg`:%;QTHQhj:BDd$Xj\%YKRY-ch>kJbi;'+4k4$;P4
%b[rQ^*t(V8BTC'!f$(8>U0F2-ebRUq;$/J(kt2a6,ZDhhK.mS;dV40Ph?<e\8L$bN*C63kj:QAYOgc8C$C:h)H,P"DO8*5O3*gsm
%7I[=]ZFW9C3ZMioa]RX\KCUfd?rqAlNIR9RgMisX4irH9%+780n`P^WOiHDMlK09n4e!h0-,Zq?p,uZD=+VKgFLM3b5."ENp4>C:
%l[3rsT5TNk:[@Q$3_tK+a/Cfc]l1Al=&B<N8a\oA"DbmV*`j;h3[2GJo`]6hrg?W+!)g!O)QZgJAPpGX%a0^@&Fh-eiqG$DhC[Vi
%d(oRE?%kMUCL<cdGO6q<n?0IT)gL!&!b'?cp(mjV`t$#5hm:?WJFD3'B])&NXT/9J3t2Y3CTmC8hRD5^_7TEq.jh$-,Q25,Xfmc<
%W9\ERE1ul:m&.T?c^W^R3;V_a$gJljr/"i)#>02IAk?7p>T<1)+rn=Oq61249'0(k!L?G=3H?ir;dV_/oTS6BBFK1I[Oem@R>&R6
%`+QJ;q$+/SV^%&R\imi*1+Y%i-QqDM8QGk@$3sg[b*`0Q$]fZo4IK!IBKe?mS;1f%.FFHu.uQ/"jIYUP)ic(L[;"B5@8l^ZL&@*q
%N`dq>pTAL$kSfgI4^KJm%-KLB9*Nj^]U]^DK?jg7XeW-(:DlF^P;dpV!gBdEQ]YRlZXG#o]<"g`*YSpNNaECK'S8dgB%6=Ta:9U]
%,Pr8bkpPr*TQ4nuoC,D$o@a0kR88A!p++%b@b\,F;-ui*GU4)i65dIjd.XChcl#e1S'^4@$<4F6O,6Jn$`#P+#5R%sCm[<q;g_Id
%@NXe[/GV8Z\8,i>eEYSG>BH!'IW\c6D1?`5`Ubo-@kV#>+Q+mfZ5_8-6-%p_C0_>'Aj-P:nqR3MH7FaQqlohNWVb]Fim#8a+jf&j
%&n$gV[l[D(5s9B;iqY$W'+m"$UBP%fT`qSfV3XrK[a=jLq0X$HZJR&W%g)HR_-p'I?(&08ToKN&EgW7mlY+r&(Uc$K86JCij+:HD
%EnJ7aU'i]7Cgl/WDI0+rNE4[0MVAAH5(%1f;"GODpg0;1J(5n\f5;JD'9Ch`1kP&"/"l_o?QCUFD:Np/eIRs/%R8r"HuZJ"/1eM%
%[SnKD+pYBtLV)P,`T-64ohE#)p,jo$:>7-O`T4JT.7>L?<3=,dE"'4c<jk"X0UK:s[lJ%Ya"$Ega"s^Nnak#AHn'QX3gK7#@7YU9
%dMAV8`\7o<d5s2A>Q&UPaXU[QAr,uYTe_cgKu8`R>^_J@Rj+7.2Ac:pr&Jr5Qr-,ING&E,dt5Rpq2s;,85Mj^]DF.tKFFQ]cup-?
%p.\]a51P(QYS+@Ddi&<OF=^43RQZF#JIrn]h(mONC()rML)g^X-U5>tJReVgIr[XUfl*hLrck'$>t[9X8S]I@#i-kSQC!$/jj@KV
%Sh5+i*_R`5K%eI+)NSAFEUJ)acEZ/Efs(P,k1L6FYQ>;MQt[=ZN?n&Q?"qa5]5+3rCP9\Jbe-sJ^EDg5Q5M+n-pChm:[E-"2/_ir
%IlBY<aM;dU>(7Nhs*3<8B=/5'fu.X/^&lpVSduVheg]BoW9L1u;(#l.n/9[pprrYrG_T1dDlfdm\K`JugO@>d8MqK&'ir]\q!bM+
%!%3q&;?ZgmZP$f1nViX:>]%Y;?3R%ZOt7>*?^\ru=aQ<PQLK^h1$s^6rAaN)nSoV'RdldBch(JC9u-aEE/Gk@)Wi8'd(0@l(QQRn
%WOGj5AFA=@d-I"ZDk#5bCuS0u;=7c><PtWO]bB'>_*CNs+fLV\O.IQEfbBu>G@a*m"d.n&gnkaa82H+upiGN<P.Qn'OCS+rO5ELf
%6#;8^8`0*C`aT[ZpETe3\4#\Tfh$K-(WRZl2(oPcOlIn07(p0OZoAVAkPN8B75`E_VTKdbb"Q@bgSFQ*G"5:SQVV3Fk2rn9P6BS`
%(<MUqK#P%7d.a8&$%r0.,*QHJKjbBb.$T'lj,Zi-5Q1\aUP>5$M%%5OT2kEM.%7l[9*h&_k)KPcd[+l(PBpC<S,Ru4b3"'CVWogX
%>aL[=kJ&TI8-H"R/tZ%$9''h*7_,..^Fcd0/4#ZW%q[--I:KD&dQgu;F;]$eF"iQhN10WTeW9;Uec6u?*8*LbZn5u]0hT[9ME\Po
%X#N)LWfV3oJg\3')U<:"\2DrcPB,]1$U_hW:._:5kZ3g:KWFo-5,_Mk\k+9Se_rD7I<g@-?;Ka'^#1>^+tPb;e`+ls>6+R'mSuB5
%0/,/G?G>^Zg5BV;]#:pnCaRG"=9WVK%T0\qdY^S.#OPPo10rp?;K!<pflMDt)-(-\Ylr(I26UUX/`RHE2(9i4Z(Y#JV&7n#Ghcb/
%C,%qk)4L\bgSQL:,\]Ekfd4UB=&Wq"3qc]":J<`gPSJ^]>*^k@WWoJk)<YL7qRFl@R#(%`*Xa#J'JL*UZ^[m>Y.D\9#EU<_%dsma
%k-^;UIrOLk2nQc$OAQ*TTlUt?mO3#3!M)14PVDd29AEJW5h?@6&ZlKg#s[ZjO)77GCJhUB#[sL3jqPt>`cSS%A3ZeQE:*2YJ2rd>
%#.YBIcg*We7eSUtW;&4]:j$7-_M@d1DeL1f:6R$R/KHjU\<[&IB0%g&Zl^7YI_%H$1=bb3?L9ORM]O`$Ak@*,'&qRsH<-/c4=V8F
%a[C=GZ9[A,E/TTT17n%!F]DJjiCtKta,.hGdhbC^^@A@19?_ZKiKd"HO`!P8]Rb$'PhmfA7+O<[>\aEhG_rq,*Vp@k"cX.@]pOb`
%RoF%dldEt*D5Hb5n$1?g^q2-T2K36.nIJ^PgA&S3Ze+^<G?A\Vq5)?u5Fei6r8Cq))goHiZ/"jGGM-kW6N;H!%1QRrDtMC`=`F;V
%Kal(a^jE.B1iR0LnIP)nj;?$cO"JD6f/p&o$?0S&=gFZ8d;`^RA(,GGY,j\.ntfX45J5%B6N`[`ScA3NXZLET/,Kg+\?bW!r&lqZ
%UJUEao%:aCS``68HqP!]m9R.A[H<a^a$75ShS\g>Ab!$VpXjk,i*BAjDr=oE++F5Bb7>&pa7dF>hdua`J9TXqr;Csn5W%sO)j""n
%*\3>1ki^]OYG/dCa(DhG!1Y6H\8J)&QoY#'RNS[eA_/%Qk)%V0291,0mIAFM_X_QFeTHO=V?k-$@ieSM\>,42OUOETRlEG=o3u6@
%RSorsj3c/b>2>s)]L]6l@Nl=39uTfh/UZ"Z-WEJ`,-EfjO%\[T,`XXd%>,mt/4(Q/N(ctQpFS4XNhkK.N4=JbGjMCFY3hNb7$0"D
%qC4*0qim.mYWD^LLt4"r!""%E-g1R;>)/_qnp;'#[kKT"lBPT3AX?7OH^a39GFt0g!/EitKsoTq<S3$n*!WR7CnjA`@7[&3h5AMu
%K]diP4e]GZhVUC!$W7lh\+0.(N$)LLmeHCbrHPn<\Wm%BYTd.mKMi,PX4ZLAB5\ig"K/u%&DDr+/G4,gLpM=)fUol_jge-$WURl(
%m8#A:L1s?VKk(N-7ODb7+t2"$7B;;3cmJ><Y_fgY^#i"]1sM`KVTg&o]__H#BJ&65(Ti_d`C-W7m0X1>f57;0X@3(.<'h$r)rDTO
%f0*)UC,N^a`NDaF%f/`RgDeh\2gJ]'cXl/TjB/R!j;D403ki(aL1@"ThFL=r>>Y@VOJ+7YW0F%Pe\&h[o\A`jHV"n$X@Vus0d(b/
%IMA6Senkg.qr_$N3q#M<j*Pk&NN4r'-gL*/je_%VMrXZ8jcGF`p/f;k41@8b2q]Z#!uKi.J.JY4U46#BP=dq/0C>qQ"aFqX7K9%B
%`orK_&bLk/.>RoAX"X@J=824L\^a(IQuC!eUDNkBT]!8e_gYCokbkf$m%7WjejKID[5u%Rln(Ioe=h@u)pD`Lrf'CqMtu+7h<47V
%l>cgEF0]Y\q'-pMI%3D>\]j&_21KrF`VdDc280;o>:f)E1A*\kX.3<bFMAGq;a0+4,#p%XpcZR3?@UejkaCb6=WbXQ5D:UpbAHeR
%M]mRo@82B9@95cfG-Y7nC3=p-)WD:(NQ_;amkRq_f'tn8I.5[tIrBfonfBDe4a^'#La_./a6t<+\!@O&j7N(IVdobHX*%tMS6I#k
%9.oB-nb+p[@-Y7=pcN/:Y6=AR>WD?MhKZHpRe,%o==F9=8D`]<j*N'VM2h#c6RbWeEoR&Y9DbcpX=dZshqNej_fGHns5"TSiW:nr
%<p+_8mb\teB$]"-X,$-iD5T?@UOQTX\O?I*K5*Kuj^nJiC77Zm:9BOmLAo45q:".$irtmD"Pj@B@=c9]a)p3;Oh8(2Z3p"?2%G!I
%(<9diq%-Z*D=r1M'7RdQp2DHnNtYd:/51\27'2ojgSQGqnp#X*4.^[W>BW?t\]rl_:1g[3^&*_]%U%3sC:]!WhhRnsN;L<JU71<5
%3k'C<e??@el,=>\3u0[/''oa@Tk7f*W.)+j\Ojkg!1kR!4T+_Pn3\uT=$Blsq61Oe3mUS(/FX%kQfYYhk2E#`k%Xq5-EF-hFfe-b
%%rciPh8E>#?g4Fs\Po8IMd==_"rO%GTskROi(-s'W7hpT,Ffst?;Xau$IRd'B=@j+#4E<%ZrkJ4@%2rLZY_C945.ZAJm&Xcilt&5
%eL:!!_.C<uWPsY6:Mj74Vos4N*LULlcg>Bh+M,JE(GZHK@gndilQpKdZ)/hTh.G[<ohG>5lKrW$-otled8J^.:Ui,`Ch5Dp)^llH
%$tH$3?gWc.9)NgipI]g:.bV'F6HjSA7!7au)L9L;;'"u7CEDhoW,j`W%V$5F7"f]936nWi`8'WY?[<Up5^mKh3FET/Tat#9.N78,
%#s"WlrCp7Q/;'K<A%A')$G<Em6G@4-G.@]2HmJndp6%^fY=W,m\BipABg!%_$><OdWC$$K:u#'OpW@nj2Do_/@F2/@;@tV7ejSr:
%>TpVrM7jL0J.dJF+<n'/)%?#/c%es,n#toBcW.-K"WUj%OBQ&0i-^e=<O9Tp>TA;m7'Wel678%,?aY3lge%8l<"]589"2)@HC>#k
%g?"pCZ.F3cC)A`fIDe3@Q4s(Oc`Q%SpNb$E?mHtYlSMYVb8V%tZ_iTF/ZEm;GpWKlC<0dG->qJfD;IJMf``_g$`D,Me-c=WG>T3W
%V:5q<$`Tha?#!=.0\M#tl+,?VjbBg'9[bs([l*5A;4=s4s,mjco+iKH_*EYOeNq!]bUW7rC@qt<)0kpgO]2_NOhGG7ihV>b=nq-d
%)o/d?)8q=9R@,Md/P`3BUCWW$l9"nQ8fmT=neasDpQ=*l[0M6KYup7qOiA)VLlYMg$OI%IH7`TK>d\jhe:Xe/!PEPG?-O#mY[h?Z
%cs<oXiqA`B:\*1cfk&9EX)*sreEX_fT9i5Y#XY-?W_.Wj%G4_i)$9mW-DN*qp$A?HqeX=*:8?mCc+2A[h.U(+5<o&O##473S;#05
%\`5"g-7[,Cbd7_O[btKT[Kq>_lp@V.<c==O;&qCO7f0/g#A[h-&//=91EgH.OZTf8R04ZF_5NPUVrbR+oNnePrt5b(=igC<rDUKb
%m5=<)Jjgo_WGNT'-1Z(9r.lmM@l03YW2t26:%VtVesN)<5MHm+&?L2A"*H^nd<?]TV"#qY8hD)l]]^64Hg,95<e-eob6Wn:/8i4\
%\<qcF,:7CEFKQj4blTR)'P4gDXg4reDinOmVL]b1)QD%i0Q[TeHf[WQF3URQ!Y(8B\>q7MM!51J5;.?QZfdU(#^e+;rS41a/0Ws2
%&$lURos$>;Q;gZ6<TQ'Ok#_@=Pkt8u1XD&]7`X[aPbE:i2'?7(RNkn-c`eCRBk2oO[4_CR.CGO$ppmjE=)Gt/f!0&#Zkilj>SS7c
%&;4"pnZY*T>n"&sd@-OHc_ML@2`a-(`m._9)pj,i5&-LRJjLjFVhe=>%n53=.W^G_n[cF/%_Ns"&h'd5qfWq=KmZLqO$#h$>Kf.'
%+2WB?;m)1>-HETm=%ho/bCKg5VflqqTTP0d`s@9l;d\k1N^iNfk4mRG).5LN^)0-*lBnrq#R'-IT;KMJX^g$.qb^b8k=4KQo+5b1
%401[1L--2fm%6C@1bup1B?OC5XdNV_guS6445c<X%uI!hc-TTfrZXgX6\&lqmeWsbaG!k8P3#rV3kdP-JscHjQDe_E\RZ=N/2t0W
%6o4LhPic_jE[8)]2XT;bL`.toVKuF?C[[lPYpH(ErQ0&"i7[(Q;e-,#46r*n<hkR$SbCLcPmL5*-#sXHD[lCL0@"kH5Fj%<JiV*8
%]K*It3AO^N/5=\TO4npHboHOZ#XGmY@ht`G7W5/(A5)rAMVak-NR;NO(H-'F:EEK/fcVAOegfF/H7lp-l?d-]<\gGko$4B:NCL)k
%'#B<o6BFimQ\3$2E*PXk:;QNY-/FsqZ4g?^Y8`J+X$^/n<]B5PrDoVSK6@k-E&XJ\17!-'CP"6%1Hl8Y?FTa>)7MZ.MOO71jAE%o
%N1N_:,gp`"8IZt3-kc46<L[LJL)r!/$A<]=LekUkJ?2n^YR[4`$ejOuJh*cXVo8idkNbV;2WFuS<$oF)IkY!m0o*sl<[)=%o\\1N
%gUbigPEXG&q^\(&0:Mg\9*K<.lgqi5&t4tWQn+[,-UAX8]L_,"$9sFT-n15lVZ=6p;rqg7`:Is$^2!=AZ+p&r:1AW]nhjYl",D@D
%)8Wa+<\$Y"di:@FlTf&e`<CJ5k(=8f'ie.MR)hiR%07,&DFpP".0u!AUm>#n5"p)?d+Qr#Y<nGCWb$Y0js-S_FXp5iQ+umBM"oU/
%l8;gZUbGVs1"$N3XPdYhJ[%-gm`hXdnA18!c;/<64mq"]B1skI`jc*_)33/Ko7_"*b@K2-V%0(o:/G>e-,IT.[J>Nsh(4>7l7-<!
%;lo_-Mq\L4GduVnOnlfJ%BoN*"g\'*c+D"Z`S/7YD'/KdlQ+s9ip4A1qeUAgOP/q?ojoQb5@1bn`Q)9W5$5#[i6SJ7I0`8<U^4XI
%ZM;iko14OIXHH2sU_.8$\^a3`R/64:/_%^i7#2H:5oa>qbB"VaM'-eL8L8.BKCuQO+iblSI@2#7eE/!Lf<2W5DK6)*?q=CS'h`Yb
%:HlPtn^uG\hj1(=@0H`e_@o3Mj/fE&r-r;N3]f4pW!?OqhEjX3>"rSD_GZo%IG!q*6SU1e*pP39SXG8n="@T,WFXOt?FBSoBOmUq
%TBk`BlB-61Y,c>W+kI^!7G6%V]%I]^&l,&VD=c-Eh?_23(G>?jeOR;T]=rRnJq*fN&Y+B*1l.5Y3hj25)"NBdE6/p@`o=3\[Ccm3
%P4NRo)LW`N"Y&]b$g)KrH'ps%FEjPFYXF[nNU/u'>UN*3;UGZuXchI\NH%1kpe^s-;7qJ",]@/5-D>%@ZRO8+NgUjf8"=8!i1=q^
%GMY\]ZqX\D7us.ub0R1R&pp))E&(]JH""8#V%RkQZ6ku7JAcT-kfF&fP4ba2gVaPV&<`h'#pT+BX,hS3oSrAF_Oe%dN2En`\<n]V
%#p5b(#[G"lI.%lXD(sl*6s>j*?fMtb\,&AVekMh21p,5l7>[j7dULcd74/do,uqA'bp'<AD-L??5qt4oh0a4?2BR(8?]O#1Ee5ci
%B?KB>2*/AZ6t""iBbN:?QbZA9+t=(;o):dfOqu,7,-Z-hO2PqZ>^gRV(@Ma/@[3,WJ^s66.%j86pN8CE0(G.i)2ZiEHAtJ@$t!FA
%+&6Z:l3#*Ihm2G^\V<d-*+hJEjoAF!8E54Y`j-QnZ537_Uu[[bHtr;9eD&]c\#fBYHPp.'XDogd_bsq]39L\sJ(*a!V^I]#$C&ml
%,YFSY4"Y>0Y8_mD,Z?q!T$PNO+h&pS)F9C3odumRUJQ[K?X"pf>^V=YRBZg:VE%BHWmsUKf7#p^@b_m0N^AN_E+K*-)G"gH3'rdB
%#&'C"c,afWohBMO,cIjnC7'(;O2dtkr`_KaJ->D&8tp!`e@JAt0$t[@'g,L'Aqgrnm%=ULo4@8jl;OGgUn5af4g2f=pe7hWo9!c+
%XE98U0U3=TQDR_,_DCY7IDj!!THY&V0U+%MFB>S.)O,-%5(<g$7?FhN*HtFqG%ido<[*j!l@mbB/4D4/`.BJ&k;L3"cs/`CqFKt`
%?fU"+Wr?R^'Y`8d3e9[h%8,kHL$))eh\8F1,%9,U^?i0nQF6i+,a;kZDY;DMFA%(3_mXAk#Jm`,3!SQe-j3%SLqPfI(e&"uZUAq/
%^m9E[?Bo;Ge`nBaf;WT$R!f:$eWmKT."4*Rr>&4!XH6>o..0oK@\Hd@dkblJjJ=FSlMb*Jq/ATbp(irQ@!@DU!s'lZG6GaYF.c)7
%cC5#gT@K"^MjK*'7-DNMMn+/[^2!:ke-g;jIPG%>/iMrfKVX7MS)oqe0ECi)=SNlAAe?:jNJI$(]:@QG+;^_1l`/?f1YIhZ\'-+V
%/hW_@#3I',<;J.[0^r2$4>hKtqa$&g+BN/T=_/D/5+K^.=FN7D\]*!u\kd*4%$3c(/]!ajJYQ[1kcN[q"?JS=g<*&@D51%)%u6r&
%2fEXnbpBBuaRL)_GMn4<fpj3_4$0BDdirf=8\I-:G_M/X8FG9u,I-E\-[Uc\l&3h4;8c!1\)pO]aEsR2SsA(Y<V]?qZ$E.5d0u2s
%Yi:=&eEa-Z7mf&6D10T$+q'Fqon`PhoUr"],VU"#^2.u#.6SPPFS"$l:DE,u-=Y>-2>TjY5kb+b-5)Xrf-IL9:j]I@;Pe`5EKp"s
%QN\n`=7Z3B4)A-]0bF1l@[pYN3%.Fhhr'DtS:ngY7(N@DFqibV/J3(\KoF@5BA"!WoSb)]+X#mdhO@H5%tn8)ldq5*bY33M/$$7Y
%jkq$/7O:_Abn`Yl.[5o\:(9c$/OdI,boY55D;MoOO^(G4h?poo5f=gJ$-O,c5`lYs$=O0>&Zged=LlRM:>;Y<WXRrq2>U<i8YhTN
%#-JiDook^n&^XXYj:jaD4fh@m1lN7uD>S=^%&^Pd)t^/\S$sXdgfWWtC`rdB#-G1T>2P-Fi(1pdiL]DfhBbekOV9mY@^IsHAR77j
%<UEARQ>'.F3j^F#B2oOOae<!srPLVt#,ejZ9aX*S&ZW5(\^d1I''XUWh@>7A5rGcjXqcY*d]RO`'J%sE^#jk,5s_<slabEHC+:C@
%X:qJ8Cb[7ob(W\A61rqYh&=mG%dFef79M`e%eY-co4IY&r(%\Q@#>ui2+Mr?b5*Eaf7"2:'*113=0I`@hI"N.YNJBi.eO-*,hXMm
%`ch$41_!VNW%t]*Kb5KWL;[Sq?H_]U$h/24?I,b1\gOKVc0(Y?6+m>JM`Ye/Ei@ThrAGAXY$E91KuD3p+hhX]/)$.KqIO6<lu^H^
%36N,,I%&/cUd?r`0p=Ig=qja>a8Ma_RqFK(gR4S;&i3Ymi+Q6q=r\hmd\:na8a&-2;/.DumYa!<WgO!)Jr<a__`8%k0GQc)it_^'
%6eO@X*R771XK200Gtq\RHM:+EqP&J4*6uYa[b<KS+nPD3ff&)>%;CRVKE"4"jAhs^ePqj=1U/tc)pNO-VfF[VO0\U=B.2GK@k,BB
%7I@D'KeHWCGq)H(R]NUI``.u3L8<#0WEa8Q6Mms-9]Zu>/#n5AS,.*SkZ9X,8DA@Mqf,\4!F`8"^&_WSDOS`.Y!b./*`$9ISm/mR
%.Tr4V;4io]'%'UN&a[44*"Y.EO1TERR^e>_H#E84:ZWOqMJnsS^L!=eWn3T6aZ5.\#m@N>\X%f6PQIbD\Bh5XB'FZ0`&VeZ<EZJ+
%Vt"Le15_)L>$]^q&K<8,ZtQ1IY^`aoX'6]1J[a7:DF:A/r'AAl;\4b_c1NtE1(XkD!0D4K#Upg6*-"*E>L3jjA+Q<sr&dLV4l2V,
%\Y:"4US9FG![po(kJ>s^;H(u;Q6h'I[r$oZW(V*o&eNNZgo"1C8^7\NS]e5.&'o]sHooYHn-ZhA%P6n3.hg"R9%4MtDfFQf%m%4G
%2K:.l3o<TC#)+@>I\@3`d',"j5VF!8KEI>lm6$Y"?Ra"Z(U]heK:bXGIPinafTCe<oY@/haA8"Z_TZ3e1W3"Vdk>.:h-IJ8XB+!F
%coh5O(WB41Rih5lUf('=-#n`OpWl=iV.I`?kLk3CV8aHqW4&XB_n`>mZYe!?r:*Tart>gk\_Eq+C;1i#kLO?7\DSF_>+@V/e;LsQ
%V;IK!-,Y0IB6rIqVOsh_CA[?"^]eLE!@*<s7B;J!UYaKTH:!csc(P8q?%KR]@MFGVS-=q[HV![g@0$FmK9_4CB&=(tl)[-<@#WkP
%(Z2a5'8VhS7uYm)Wr*Vb\!^siOHTu_gg;Bq.bK0ed*3nY!Cmd9$WjIe/bU))"l\r[E'7YU9Ia6\3&o&)?%@iems?a*eh,Oejk;`(
%GdkbP^h?=)ZoQ0qIU3gWOB?ldSM)Q-O\!%^O$]==%(K2'd(*i_DR$PD3]MY2S=.nF$7qi\JmK8Jl%`NZ8nQ\?QJ2tkXN3[[g:UF!
%Wk5-3c6dE&aaOkh!C2m4-C"iLZBtSp?-CKHjMIR$jPQLH]mHQu+<[-ai#J[V;;'Zl$rR8[ZIK,QqdSZih*b&F9X[_L>.o9aBCEB@
%6j&6#;uijB6nSrCjP5opYE&JfW1GMb*]YgU>J+1u!$f;;2:*13jN0hj1\*M+'>XiDi&5V2#[QK]>Z=O:X:dKOHN,[#($VgS%TEia
%XpD5PfUtTp"gY4D[/K^O=$A>r_..(bTlZuQ9:a9e"]Hjb)ru<'n&)6g_3/i(V6Q38&8d8d-'h&bCkYk#k=0BUH8S\=#*;D<T)tI[
%J[d94-uZ,gFENiPMUqo-&cKnC!E*'#j4:kZoBqad@<8.U!DHgl_N-"3b%@RSg8^(V&V.=#Clq*PRbj?"AEVJ-h*W3E,B0E_.Or@P
%-WW*h+Dl/($t@i!ba$bFaPF)7Sc<hMo5:7S"Hh1f"5!l>Te([^Oe(&.*:fiDK'.S;WYrD2P?d3S=&%O'1W#8:)\DJa`X.@CN"&Vs
%R3+E99umJc8R3Rb[DZnc@)'un5IGgDfLsS$,%<>sO:*L"EfU#<.%X?R^_S)-IZFDq^r<BNk;I5nq$.G=N(Fcmk:i@q*-<l*fd5?"
%WDTKllL?8-6E@-3dM*5uk>iZqhJ\O)8&&cBc-)"@rc&gs%dsc'9;.SmEq(IDAko'5:6WhEOGPMJP&mDm9<Dt/U;XF#H'tR5Oq]3P
%6=phkQ2,AQjp4',&1@M>\]q`T7ZCq]jo&d#>U0j(^A&LC_SH-8,J'[J7&f*$&O19>n?-i_lE+Nf$I;ObW+n_.O%b=BX,9AJf/o)B
%f./e`4&TC!,0!J`%p$\=Rh*),>+2lY,h'Y(78EsX'sePuCi3;]m!W0Ai8!!b.\1c)*K7,d1;TaN'Bdm1h.#P<Rbd[PDOi#FP\(B6
%Lk;<s%+p\c+<-1iHt3pGjOsCj<MMKG]r\g"E]jXm0CiEb'u,:5FJoklo2o^sA!I.s+EJ>$;5-hBRP,Vn<TmN:T9oTWeTX7)q0DA;
%_B5@m?1I#hSQET&m_30<+22i)i=GBs@H$t,33ho>bbZPBPOtq,Mip<jbdq*X.u+nZJ'OlZiLb1+h(JPh@uI'Gle8Z6cT/IP(]VXo
%AauC4EUhRlSQtmrJ*lHo5gR$Q]YpC^G25@Q<t6lVs.%9UqtiCOfBm'tG'm/453_p<lq]XVDAW5n!CkJ/FFiu<B:WF;@+`ec0M:u5
%.uXT1X>B3dl)u(9QMr>"(uKbm.<`2m=,o">'$n,.gs]o+A%.NsQ%P%45O0Nbcp-\=]7&nH*+]oc)-<6n]'#Sp[gR]I0Ve,5]$/sW
%B:NSCbC8P4Zg?#KcM6t:cEk.%^MoiCSnD>BdF0J5B_RD`_\iBZ.uckYlV+X:HHr)TdsZJ1_o0HBG,\?5-_5#?l>pjN0-L4/f:$9#
%cFF_-5N,q\?1]W`)m.CuSST#>=Z>*Kir:)"p"J;Bm;Sh,J(!GuGFrugrH*hOk#A&@=,o4T`ogTFPl=hKg[4!-3T/mrHHHD(nXjj=
%h(ASj,EBW*l\b9`Hcd4MYOJa)_XEOgK^FWGftW])q-5C#Ak[`e,on`Q<rtF@)oQ:P7#s&\Dr/qa=WGa+FOFe]'CjkXS=$dMc=E1O
%P5SsiJ\[fp3kJpij3!q:Z`Pkp1Q8>P,0B#mAc$PaW4Naf?3Sqqh+2;!l5\]BL@d0i(V%O%@OC$)Ri2J;FE%?<SR%Q*"N2QJGmpGF
%6X\Lh?h?dJ,+TNLmARZ2PtWt7T3-h[10dgV?r=nd8-d++:_V6Gkn[*A$$<5K<])sEWC?qCaCir"'O2lDZO`+9kEos9><@Iu0Ul0$
%"i+Dn4P>c&B<Rr0VP,4L;JY<&ZWa#qR/O)q%T8b`nS0dgHQn2:aQbF$]c'5J.M57-3L/3u??Pq])"be&-&B(JWt.]ZlaltV?@U/b
%<qlZF=4X#)?.OtH+t3nG&*5&ZG5rWo)2JBYZR@Rp`"iYP*(;4GR]W5I'<UA!SrXDV?DVH%V[m8`Y`e:hRDLAig6Z!YUDMWEFO9Hf
%]1bR(E2bkB]K02_hDOO0n?^*[6Xc5AjPu=#P-@0ee%"Mi1bC8!,CQ5jYObjjV&aT>&Tj+)&<E+)N0-b`BB^$ti]H_(h4\leqH15'
%=Lk\.RBYW7.c.Mt=E@5O`AI"pKA6-82#"Y._J:JH]"U5:SI&jeX_WKblW-b>V4\S!\"cu?ptp+WBTFGeNeK25TDWqSpG[@AkU2__
%Z*7t)e3k<%Km69gCh-KI<'q2pkjFUBS`GUd006O&*Eq88:U%ab=hOO[<Gn!Nq*/2^oO%@AIsA,oGkpU<o&XM2MjN>OhcBsa;]PPP
%_jod>EniqTOcKd]Td'])M&,]eUmF'*aIAs2UMC/k\K_.l^CAV.L4WkjMsrkCc@QcU<<dYsA<]>C@PI/DAJBeQ##jl+\V@E1Cq'fV
%j]"*L#S[9e",d[F:!_g+$])N4@$-LU%)f)qfqO6R"YI9>4HpN<[A_,f>*Q<&WZKG0%<`B!dpp<FO2GRfb*X>#PQC`^+'h;LYD0,3
%I_D*FN5mn,6urROi?;3,cAO(!coHl:U/'$G%!iMX!mLkbic,!8]7:KMJd.1[VD2Yg7e8a&0tuaoaQD0p;`.ao+eN"CU.N8t$pq^V
%YQgCJ]_et+L26YF97K"%Kc_qTiT:!X"qS<KK=H4Xpt=gH-Xdm_mMN:+2,W,OZi72/FQgC4&m6abg/)+S\(?6/nT1F'"[+C6d&0*(
%r+g0BH=h%IlQ[KZY\O#@_V(LCE<i`NO/o<YajQ'6_Fdt2@ghAe;kFlDL5I!k*+*blG_Sda:.%s.U0^H!3Xb&O6F(1)om@n/"tu\;
%pGeUf,MQo,G_@]k51IgB1LjJ/DI]#^l'^S^cs(d<0D$R0F27jikru#a5T[mQs/_p_EsiBQ6@,-BAZR9mN#>!Bh=oqJpC^$$&(id`
%cFTM+Mu(4dhM+AQLL<(+!F2NQbdq.iW\EXMC"Wuc]dMI=5+F*1bQ.i8IB/hT</c0NmSh>=*ESfm44GWQmWcB_[<95apf2KG(Tfn3
%EVJcp4q,Xn:)1:>(VRD7BT"6iG7IsuB+Noj$8ogWVRIWZA%hN*T^0omT;&efQkF,fnaT5>6U`6hV(R;hg9RT%UgdYX3+4(D#1<?M
%apkXk1^e./<iSNAhJ2\Kbe.C:T?I"UCrHcJUC1#MXQ#Pd(>+>7mRYsMEPSa2\(s"Gb2L>WGLOIVY1nECL5.">VfsAhLp9'8oJZ0]
%dor-Pc27'j]61(r5<&fEo5gOu\+@+oUr0#LNHgFqnTD*g2jR\haGl@!')uo,MBrU[AR85p3p+Haib8tu.bUbZ\.pH+X";Q_=EOg%
%+["uTCc>(G*XAkuNt`cEZ*V<S^$*mHSYN!&475NSODUpGSm&YF=W\^8,`FdIlc;L[o97[Q9UtBp/r4dd("ru&Cb[QP2!WVZU%_9.
%M'NE+)'WBm%!EBt+F6/49"9?ta,uUGTRG@akis(T+GJ9s?(JbEhRL0Uhh`LB.#m?8eZP7+IR/SC,qd'(P.fdS2VEW#:\9n05@K-S
%ltYYu@(f2"ikAnp:@O"T(!W?0*j<ftN+)R=bNr=A$HRKs\EK!#>3SA4]'&&7lMV"Z>&\$tYDsDG+._^*Pqrg?dV"7$"e3'K^`:$I
%a0:V3%8PX]i3a9-5P#@MZ3P'`qQn/G[Z"DcfrX1EcEW-i>QC[2T>T4?<)@Jn35"NToJYm+[uU>COFG_am=Qk3]Y(>$%1C]=#!a_5
%'Ll"gMVAUjB/+rBVnqED8$fKL*7)hS3\:]$oOhCpG77^G4emPtbZqtQN!k%T2apiEasU$:?h>dn>6]'`cYPrQ'fZYf1RY7+o4@[e
%/I*L>42f1]&fepIA;i.bX![#9a,hp$ncu4M*RA=OpLkMo-n0t-RAP4pG%5IB3VZipN,)/M1f21)FMh+NU:2uoIgSt#+V.HiN2J[2
%`-%Tco>+BS>m"YX'E_hJBsdil3r#r&DP(AH$*_Hq9F8God^KuJ9s>;e=_*i?J(Sf:&,XgmjM3['V_8`Mj\njTm>E#S?`28SC#)WJ
%HR#T5rm43F3%3=ehp'2IMeFc7,iiNN*c<u<1X(C/Jte,B<Bi*GLX!X;)d\d.//!*`Y+Wr78=>QEarK)<8@=4E6orD(3G2([\P(?'
%3@mW4.>E_[,SX0PasL_pripJ29S_@j"gOD)R)JUI+&)f8jO,#3oLcbZ5)(@P%s#ns"p/ds%'>=sR'j6Y?,>?IS]0EH=s#c0bW2ZI
%!H!]c>Mu5CdFBP-%fS3l^tK%HjI$rqX#YoE%8Va">Pi]7`Hsa6YXF/(<Ie1N0Pf1,<p%AW**d$O)H3W:5)3:U-8c#eFtEg>Tg'"k
%Y"Yd!m!oGdK(I,6+^EJbQ_Lh@53']/!XMAS(-kc-mL*R0<S"TGB9@\GA%mf0[1=#M\(&BI\cBN(he^ga1sR8(-]I>^@nn5&rX=fR
%Scm#3p[%6G"tb&,Mn25tX;4``c\ijTY:U1sEchTgO2X1#fa\[mTP\+![R2aJ:0FqPnflL_Xe7'fdj7'*S1W)0cZ/`'1T7E8#Vi9p
%S0;r7Qgeh2%8i*p<IFFV':Btp"WjXle="9o1Qh0,O%*L:MOhWZ@pdjdfJ/(-iEU1]<En%H/VE<5Ok!gL%,he;%q,FiUqd94P2>Z@
%!\^PB.EG28S$*o>GZLC)#hL%Nq`]>D/RHCfH'"Q8\1]"KM*pO%:XRq&+2;s-MCY?!)@qXgCr-5"->oqIE$n0--89=lLl1rC.V!M-
%6/('8[m:nheU$53\-B]dB(dJ#@6_,@&g91?l/CtZci$gc.hQks!ujYZknoV)dA,pkfS2Ym)+SM$Zkq7'Ybn156Tp][6t,rPI<>R?
%#.h+W3Pd7^9[.)T`Vt*<,rM431+;Y9k@o+^E;t4jq_R!Xr(*NY\9T=<N9e"88=gs#3HB,Bq@pU`4-A4%EQC%7mJ)QuC'j5uN.C@^
%jUdPk3CeKgE>6&MWt&a9$W4+YOE!0r@_BbNR4Bh-Z!nb["+:G."uoZ$l]2q4YlfT))O_-5MAfH9Q%nEiLX+2l+7(9%Mn#C>H/>aZ
%AK&:E.71k\15qgbY#`X,%QiD=T5i\9&ZOK43Uh@K,<,Nq\4PBfZOZ_E5'UAk\_;V@AB?NF6:0cRhM-*D_Pn$6p0.*DCo4rGiUOJB
%(i;jR0d#3_o8*+a_e/sBJ;+2Y=/EHb(&f=U&'uEBCFEI^<ITg").I]9<68Z-<r(45'=#s:Ueh?F&2_g<N1Lh+qT5]/Du'b6+_jfJ
%cH/r'9P(^k(/lFHf"I38(*eui4)).Oph[\s1gb.iR%+uj\]CZ4l4029_XGu&gjs*[;s5<J`)(X`&^.o)''$4;+'4/kfH1o:+5j`:
%o,_,%2nb.+4<1Q=g#o:/MWE$YegnD/Y/Qur-'m#e8l'Y8Xnb$%$YZ2;QB;l7]CElt4C#O1K4<nd:49RoP\`7"U@::\YUGJ?lUF<e
%=Gb7P^`oJO.[O7oGQf8RGW1:QX\=7U-K;'I4W:YcPd%&GALK>l*V@61a,j"?5WF.m\2hW?"\7D:8)3g#%%E7!aRRi6itmhP,Otk&
%?@I_D2"^-!pDX"[g:bW+U2mAI?a5isTL%=[:PJ^=+[1,7mP0?.1EmU:\s0\>S>%fpg7#1Z3fWo5CBr$5m1J9t=b=sdk7D*j`Jfm`
%^"./l6LlNXi"8q1*D8j#8FdrTH`)_NpS3/4eupOLljI`+1aGPhpS(H-O':AS0Zc]OaXW0;'_[r:D4UD$h8.^p/^2R+/P6Jp'$_T%
%N]EW>n8(hI8@#[C4:pkDj.I"sX@Jfe*!]S6+71L&#GM8Y1_^Q#O!1!O>C"Vi]8$eD5tcI/G?6K*e1;2*i^`;m#3'kRa&56AX4@NZ
%:[eD,CQ"b#>[neXC[=I=S8''?@2gsp>TV`/$<%I1)#3Ut0"NuY8gL,i?^76hG1Bo*o]PWSS"(#2_`<=HA_ZfEf!sqFHO`F^'_K$>
%lO(cTTul2$(bd]IT:Bf.8HUmKm.6$01=/jGo\("uV$<6egoSK&)U&JKX*dZc8>?T&0%QjPHZ]"D!W6,bN0:.eqU`HcLN-B>MHiXW
%Q)E<FD(oI2eU!Bo);ZpA8TS_5E5Eit9^XhT8Q,.2:;:Df8cA_n^,unKL]h_(qdtO.XMO9?::k7LTs!A=IFY+)a)"O?>n5i&RWfV&
%#Vk@oAlX>>+O^9DnqRUN)U>Wj49s'C*g10"4`GA!b36tM)]rC%R3*="XPmkAHQ[T.^>I9HbR,rEO.5Q+QgPp%D?%HreJCD5PqLuK
%;dsc?HSkPCX^u`]B,p2pl-\<CL"AZl!A7!m?ZQ[p]cu4mQ%;jt0s7lP/h97:>Z:26Y9G*R8"KgiNP"4[#+V_Hh)oBJ2FKB>pLs)?
%h1_)af_0"FH?@rePN^>W[m1I2'dElL\[3>u9V`7*>^a#^HScNNhEmhD,$k%*"/.V.i03SQS)o9D4GnR=7.fUt7M)^`F8'Y8r<r"s
%0`_WTC\hXc6k=iI%O1.(DP@a.KQC"'74TV8]sHbG^HPGP1j1H]2f?a"b1nYLp.b./i;q<o\1B*,BIC;pf#ZuM)IR+`10kc=W3_CG
%h*#M"EnYo^N.sD0]BTKN`h]Z4\&?F&3SJ)<V,u:g8k)Q^Gl6Yq>fogg;G!D'4bN57CmR3B]l;Zrr.(-=.]]Ji(&u[qoPLHI&Z;P.
%7:ZEIWn<#<(=Z?>mN/YpP$"Sk(^qTBi=j,(kYs&W3Ft3S)D!^fZBP3CE7;t)N/\cJPjh7+6A^R&Bg$^=Fi9D)Kpr_s&D<i-mW[+D
%/0F&R?@i"1kAYpJKSGC+h*#@K"H;r:p09>>q[rd#cF[eu>_UYb%<%/f/mO^m2s`L(VW.]-H=B+1CeIc]V;rC\^jDUi9Gq`qBjW?K
%Z)HG7:Eu$R5_(O;-54$up$(mARtmSM8!UN[Lu`"qn1rhb#c:DH^=!p;d53!YX^aCA4PVY(h/^Q0/*5AP^i<is^M[P.,ak5W`+0::
%e0a_H.]0J0Uqc&."rop0BIJV_1-]pFmNL>k&*nNM(5sNF.?aF/*Lbu45sMl`>PK*e+E6D[mlPB:.UjJ]lIeWP#Bm#H$3XVt]^E8(
%4psJT&C\OD*&OD%/B0$*))UaCgLR[fE>kI]FSDGF,PeA]bd3VTTXDjulgl!KC-?*1[5,2B#]$l]LRtSI5!*T=F90<CV6m_*#MA<@
%oIRS%8>*jo7P"dp,n..tj(+$KYPNA4W%fP@Ml8V57F@#=7X>6-\<0r&#:LcJ3O6UCHOpcqQ2]e+g9JV7I4\%n8KlT9K`VpbO:D;e
%B2,-a$_[uO9@i'LC]afc?j\II*/?Us_r+V,kffg\WnhK/:NPBD\3.3(53,#;2Y(fW+JOjK87W+qb,jtZN\Se,JVDt(LD7e;kMbUF
%JSeu.+Q-#d!IYUG*3_I&qqHVeh>)i`:#GouTE"`A5Q(<T?[hU9rnplXoacQMrkJEn&-)3un,MtQJ+q!5qnqUc5Q'KdJ&Xa$s1eE&
%55aq(huDI2q:EB/s5Dl7kJ."'4Md)u%t=2PJ,1hul0nZ?rr[jjm5"~>
%AI9_PrivateDataEnd
