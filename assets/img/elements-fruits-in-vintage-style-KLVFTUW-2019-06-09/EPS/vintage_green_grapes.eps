%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_green_grapes.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/11/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_green_vinograd</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-11T23:22:16+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-11T23:22:17+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-11T23:22:17+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6xnNu4dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVSXzT5r0zy3a29zflvTuJ1gATdgGqWencKBU5ZDGZcmM&#xA;pUnEUscsSSxMHjkUMjjcFWFQRkGS7ArsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVeGea72417UdVur9qjTJpreG06CKGAluh/bkZByOZsfTQHVqq7&#xA;L1zydC8PlPR43bky2cFSNxvGDmLk+os48k3yDJ2KuxVCarq+m6TZPe6jcLbW0f2pH7k9AoG7E+Ay&#xA;UYkmggmmP/8AKw7JYBeS6RqkWmnf6+1sPSC/zkBzIE9+OWeCeVi2PGyazvLW8tYrq1lWa3mUPFKh&#xA;qrKe4yoimYKrgV2KuxVI/MPnPQ9AubW21CVhLdEbIOXpxluPqyfyoDtXLIYzLkxlMDmxbzJ+YOt3&#xA;P1iHypCjQwMIm1GQcvUkLBSIEPwkKTu7bfry7HgH8Ti5tZGJpLL7VvPtwUnm1uOyij+KeG1hUhCK&#xA;EKCwLOT3qfoywY4Do4h7RJOwTr8uri/XXNatLu8nvaRWsyPcvzZS3qBgOwHyyrOBQpy9HlM42WUa&#xA;z5s8vaNLFDqN7HBNMQEiJ+IA/tMP2V9z+vKY4zLk5ZkApRed/KMtvJcJq9r6UX2yZAp8dg1Cfow+&#xA;FLuRxhLtO/MTTtU8wWmlWFrM8F0JSt/KpijYRJyPpqw5MOm5pkpYSI2WEc0ZGgyzKW12KuxV2Kux&#xA;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&#xA;OAiJ5xj8ms4YorS/JWg6fdi+9OS81EdL69ke4mHyLkhT7gZLj2obDyZRxgJ7kGbsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVf//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:74BBE47CC6E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:75BBE47CC6E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:34e57cf9-5286-9347-b888-6f98fb4e98bf</stRef:instanceID>
            <stRef:documentID>xmp.did:85C4BA9779206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.878431 .745098 .545098 rgb
f
772.249 307.15 mo
772.104 316.412 765.71 329.33 763.269 333.935 cv
763.226 335.107 763.147 336.232 763.03 337.322 cv
763.077 337.298 li
762.733 347.158 li
762.444 356.044 760.452 362.791 758.421 367.435 cv
759.796 368.373 760.718 369.181 760.882 369.322 cv
763.077 371.248 li
763.187 374.166 li
763.476 381.638 762.327 387.333 760.874 391.462 cv
764.663 393.462 767.671 395.822 768.022 396.111 cv
773.062 400.13 li
769.312 405.38 li
767.132 408.431 764.038 411.322 760.913 413.818 cv
763.718 414.982 766.175 416.13 767.952 417.005 cv
769.714 417.865 770.765 418.427 770.765 418.427 cv
778.757 422.72 li
776.229 425.294 li
781.69 426.888 786.425 428.447 786.765 428.56 cv
795.097 431.302 li
790.358 438.685 li
790.022 439.212 781.999 451.556 769.702 456.654 cv
768.343 457.212 767.991 457.658 767.991 457.662 cv
768.003 457.646 768.026 457.646 768.054 457.658 cv
768.249 457.751 768.593 458.455 768.921 458.884 cv
772.069 462.947 li
769.101 467.181 li
766.499 470.708 763.671 473.611 761.085 475.9 cv
764.046 477.673 li
759.265 483.755 li
753.78 490.728 746.343 495.501 740.601 498.427 cv
748.14 508.307 li
739.972 511.692 li
734.397 513.997 727.897 514.95 722.487 515.294 cv
724.749 520.235 li
715.976 521.692 li
713.14 522.161 710.179 522.149 707.319 521.86 cv
709.718 526.95 li
703.429 529.798 li
695.21 533.517 687.21 534.638 681.476 534.872 cv
681.991 540.806 li
674.241 540.458 li
669.726 540.247 665.757 539.505 662.421 538.567 cv
662.37 538.931 661.241 545.286 661.241 545.286 cv
655.343 545.087 li
648.983 544.876 642.749 543.298 636.843 540.407 cv
636.05 540.021 635.296 539.622 634.573 539.224 cv
633.882 541.181 633.237 542.532 633.077 542.864 cv
630.28 548.579 li
624.382 546.165 li
622.694 545.474 621.101 544.751 619.597 544.017 cv
615.038 541.786 611.347 539.431 608.499 537.345 cv
606.093 542.278 li
599.366 535.79 li
594.905 531.497 592.077 527.067 590.296 523.001 cv
588.249 525.423 li
583.999 515.032 li
578.843 502.463 584.163 491.099 591.546 475.38 cv
594.495 469.048 li
599.511 458.134 598.104 452.642 597.374 450.931 cv
595.937 450.287 593.21 449.279 587.843 447.958 cv
584.64 447.169 579.331 446.462 573.179 445.646 cv
558.843 443.732 540.999 441.357 528.968 435.462 cv
527.839 434.892 li
509.327 425.185 508.03 414.326 507.96 412.248 cv
507.499 399.126 li
518.483 406.322 li
519.21 406.794 519.897 407.189 520.577 407.525 cv
521.89 408.162 523.007 408.498 523.929 408.642 cv
524.608 400.529 530.272 395.767 533.843 394.197 cv
538.062 392.349 li
540.694 394.931 li
540.882 394.435 541.081 393.759 541.272 392.876 cv
543.538 382.24 548.253 371.396 548.46 370.939 cv
552.28 362.166 li
553.854 363.619 li
555.491 355.673 558.147 348.13 558.589 346.904 cv
564.14 331.451 li
566.101 335.619 li
567.71 333.013 569.155 331.642 569.491 331.33 cv
569.671 331.177 li
571.479 311.994 579.124 305.568 580.874 304.337 cv
586.358 300.478 li
594.397 311.564 li
602.862 298.662 614.366 293.755 614.96 293.505 cv
625.339 289.193 li
624.753 295.814 li
632.249 291.181 639.147 289.673 639.632 289.58 cv
652.343 286.927 li
650.96 290.185 li
656.671 287.97 661.499 286.478 662.499 286.177 cv
669.983 283.908 li
671.187 291.63 li
672.405 299.353 672.851 310.533 673.03 318.134 cv
682.647 316.177 li
681.565 322.853 li
688.714 317.595 696.284 312.994 696.718 312.732 cv
713.421 302.619 li
711.124 308.791 li
716.437 307.501 720.819 307.341 721.749 307.322 cv
731.507 307.107 li
730.382 310.392 li
734.983 309.662 738.937 309.611 740.296 309.623 cv
743.327 309.642 li
750.437 306.443 762.608 300.861 762.608 300.861 cv
772.413 296.373 li
772.249 307.15 li
cp
.27451 .207843 .145098 rgb
f
602.257 445.939 mo
602.257 445.939 609.237 453.259 600.683 471.888 cv
592.124 490.521 585.726 501.307 590.288 512.45 cv
594.272 507.721 li
594.272 507.721 592.362 519.591 604.085 530.896 cv
606.284 526.411 li
606.284 526.411 613.058 534.177 626.968 539.872 cv
626.968 539.872 630.265 533.138 629.769 527.325 cv
629.769 527.325 639.702 537.759 655.577 538.294 cv
655.577 538.294 656.858 531.126 654.593 527.79 cv
654.593 527.79 662.022 533.095 674.546 533.657 cv
674.046 527.853 li
674.046 527.853 687.03 529.751 700.624 523.599 cv
695.159 512.017 li
695.159 512.017 706.382 516.392 714.866 514.985 cv
711.897 508.525 li
711.897 508.525 726.894 509.744 737.366 505.4 cv
729.913 495.626 li
729.913 495.626 745.077 490.806 753.917 479.548 cv
748.757 476.458 li
748.757 476.458 756.983 472.142 763.62 463.142 cv
763.62 463.142 756.624 454.705 767.093 450.369 cv
777.565 446.033 784.632 435.017 784.632 435.017 cv
784.632 435.017 770.726 430.435 763.108 428.935 cv
767.546 424.423 li
767.546 424.423 755.64 418.041 745.562 415.892 cv
745.562 415.892 758.468 408.849 763.772 401.423 cv
763.772 401.423 756.569 395.673 751.202 395.267 cv
751.202 395.267 756.964 389.185 756.39 374.427 cv
756.39 374.427 752.108 370.662 748.761 370.693 cv
748.761 370.693 755.413 362.81 755.937 346.927 cv
753.265 347.845 li
753.265 347.845 756.562 341.115 756.491 332.166 cv
756.491 332.166 765.304 316.439 765.444 307.048 cv
765.444 307.048 746.065 315.931 741.835 317.751 cv
737.601 319.58 737.601 319.58 737.601 319.58 cv
740.253 316.423 li
740.253 316.423 725.272 316.322 719.28 321.744 cv
721.897 314.119 li
721.897 314.119 705.569 314.474 698.491 323.259 cv
700.245 318.552 li
700.245 318.552 686.015 327.169 678.905 333.712 cv
671.796 340.251 674.351 324.802 674.351 324.802 cv
666.327 326.435 li
666.327 326.435 666.358 304.748 664.476 292.685 cv
664.476 292.685 645.515 298.439 637.515 304.541 cv
641.022 296.24 li
641.022 296.24 624.272 299.728 616.343 313.662 cv
617.577 299.787 li
617.577 299.787 602.202 306.181 595.421 324.572 cv
584.788 309.904 li
584.788 309.904 575.452 316.466 576.116 342.4 cv
574.054 336.38 li
574.054 336.38 568.058 341.798 567.726 354.994 cv
564.987 349.201 li
564.987 349.201 558.874 366.248 559.39 375.408 cv
559.921 384.572 558.515 377.208 558.515 377.208 cv
554.687 373.662 li
554.687 373.662 550.077 384.212 547.929 394.291 cv
545.772 404.376 539.956 403.751 536.577 400.427 cv
536.577 400.427 528.78 403.845 531.101 413.888 cv
531.101 413.888 524.874 418.634 514.757 412.009 cv
514.757 412.009 515.054 420.505 531.003 428.873 cv
546.944 437.236 578.046 438.544 589.468 441.349 cv
600.897 444.158 602.257 445.939 602.257 445.939 cv
cp
.45098 .623529 .427451 rgb
f
602.647 439.451 mo
602.647 439.451 661.866 408.318 750.616 325.955 cv
750.616 325.955 728.483 352.974 690.71 382.361 cv
652.948 411.744 614.038 437.794 608.249 440.525 cv
602.46 443.251 599.983 442.607 602.647 439.451 cv
cp
.27451 .207843 .145098 rgb
f
769.71 442.744 mo
769.71 442.744 678.108 452.458 602.647 439.451 cv
602.647 439.451 598.882 443.728 606.491 444.115 cv
611.413 444.365 696.007 457.662 769.71 442.744 cv
cp
f
658.054 300.119 mo
658.054 300.119 616.69 381.193 602.647 439.451 cv
602.647 439.451 600.003 444.837 600.616 437.9 cv
601.226 430.962 619.882 362.154 658.054 300.119 cv
cp
f
gsave
548.569 407.619 mo
548.569 407.619 548.819 396.361 554.257 389.572 cv
559.405 390.501 li
559.405 390.501 558.097 381.814 565.851 375.552 cv
574.765 379.65 li
574.765 379.65 574.202 363.955 583.202 352.751 cv
587.233 356.951 li
587.233 356.951 594.819 334.353 612.835 319.849 cv
630.858 305.349 629.163 309.58 636.237 309.49 cv
643.312 309.4 659.702 298.298 659.702 298.298 cv
671.218 334.244 li
671.218 334.244 701.042 313.306 723.069 319.662 cv
745.093 326.021 752.515 321.748 752.515 321.748 cv
752.515 321.748 753.687 366.775 751.663 385.287 cv
749.632 403.798 748.351 427.587 754.874 434.181 cv
761.397 440.775 774.194 436.685 767.093 450.369 cv
759.991 464.048 713.562 523.165 681.749 531.485 cv
649.929 539.806 583.218 520.349 583.96 501.057 cv
584.702 481.767 624.585 445.001 599.651 441.267 cv
574.718 437.533 564.327 432.978 558.999 430.181 cv
553.671 427.388 548.569 407.619 548.569 407.619 cv
cp
clp
719.374 360.419 mo
719.374 360.419 737.015 358.837 750.577 347.337 cv
750.577 347.337 746.616 354.58 733.085 359.525 cv
719.554 364.47 717.116 363.431 719.374 360.419 cv
cp
f
706.831 373.857 mo
706.831 373.857 730.812 374.822 748.573 361.474 cv
748.573 361.474 741.187 371.47 724.382 375.302 cv
707.577 379.134 705.538 375.267 706.831 373.857 cv
cp
f
698.022 384.744 mo
698.022 384.744 720.819 392.001 745.288 374.833 cv
745.288 374.833 738.288 384.185 722.64 388.283 cv
706.991 392.38 696.21 388.462 698.022 384.744 cv
cp
f
745.468 388.986 mo
745.468 388.986 719.577 406.287 684.073 394.72 cv
684.073 394.72 682.616 398.611 692.944 400.974 cv
703.272 403.337 727.21 402.662 745.468 388.986 cv
cp
f
745.202 402.423 mo
745.202 402.423 715.175 425.869 675.015 406.744 cv
675.015 406.744 678.749 406.376 683.374 407.431 cv
687.991 408.486 713.616 416.15 745.202 402.423 cv
cp
f
741.343 414.556 mo
741.343 414.556 702.546 442.33 652.655 414.666 cv
652.655 414.666 664.733 417.173 675.073 420.38 cv
679.601 421.783 706.53 430.708 741.343 414.556 cv
cp
f
749.37 429.521 mo
749.37 429.521 700.175 452.736 643.772 428.572 cv
643.772 428.572 646.538 426.697 659.46 430.201 cv
679.038 435.513 696.753 443.197 749.37 429.521 cv
cp
f
713.233 355.369 mo
713.233 355.369 711.585 338.576 729.425 322.205 cv
729.425 322.205 719.726 331.673 717.538 343.943 cv
715.351 356.216 713.233 355.369 713.233 355.369 cv
cp
f
710.452 321.654 mo
710.452 321.654 694.194 343.369 697.874 366.22 cv
697.874 366.22 700.569 366.107 700.804 359.224 cv
701.03 352.345 699.944 338.962 710.452 321.654 cv
cp
f
691.054 330.49 mo
691.054 330.49 679.569 349.4 686.569 374.712 cv
686.569 374.712 682.835 375.08 681.726 366.068 cv
680.616 357.064 681.593 343.177 691.054 330.49 cv
cp
f
673.108 341.97 mo
673.108 341.97 664.007 360.572 674.171 384.294 cv
674.171 384.294 671.257 386.916 668.538 379.119 cv
665.815 371.326 666.296 353.189 673.108 341.97 cv
cp
f
661.479 327.888 mo
661.479 327.888 643.593 353.005 660.812 393.291 cv
660.812 393.291 654.069 391.392 652.522 379.486 cv
650.976 367.58 647.749 345.439 661.479 327.888 cv
cp
f
646.272 332.697 mo
646.272 332.697 628.995 364.763 644.155 405.552 cv
644.155 405.552 639.401 403.986 636.894 391.494 cv
634.386 379.001 631.343 358.728 646.272 332.697 cv
cp
f
636.237 309.49 mo
636.237 309.49 611.608 369.556 631.296 416.611 cv
631.296 416.611 627.702 415.306 625.108 405.837 cv
622.526 396.369 610.085 365.564 636.237 309.49 cv
cp
f
631.616 433.181 mo
631.616 433.181 646.03 448.955 685.312 445.904 cv
685.312 445.904 642.655 454.505 631.616 433.181 cv
cp
f
757.714 456.962 mo
757.714 456.962 683.929 484.544 617.819 447.474 cv
617.819 447.474 626.179 448.158 640.749 453.064 cv
655.319 457.962 691.46 470.693 757.714 456.962 cv
cp
f
745.78 474.791 mo
745.78 474.791 676.972 496.583 617.694 459.619 cv
617.694 459.619 625.343 460.634 638.534 465.791 cv
651.733 470.951 684.425 484.275 745.78 474.791 cv
cp
f
732.397 488.537 mo
732.397 488.537 662.022 508.197 605.905 466.595 cv
605.905 466.595 613.452 468.228 626.187 474.419 cv
638.921 480.619 668.421 497.072 732.397 488.537 cv
cp
f
723.968 500.966 mo
723.968 500.966 656.726 519.958 603.257 480.345 cv
603.257 480.345 610.456 481.88 622.601 487.771 cv
634.741 493.658 662.866 509.307 723.968 500.966 cv
cp
f
693.147 515.595 mo
693.147 515.595 642.358 525.548 599.522 492.994 cv
599.522 492.994 606.726 494.529 618.87 500.423 cv
631.015 506.311 654.421 517.962 693.147 515.595 cv
cp
f
689.366 526.892 mo
689.366 526.892 638.562 536.849 595.733 504.295 cv
595.733 504.295 602.933 505.83 615.077 511.72 cv
627.226 517.61 650.632 529.259 689.366 526.892 cv
cp
f
618.706 317.537 mo
618.706 317.537 597.937 379.044 620.569 424.751 cv
620.569 424.751 616.901 423.673 613.718 414.392 cv
610.53 405.111 596.163 375.15 618.706 317.537 cv
cp
f
604.265 311.572 mo
604.265 311.572 581.272 378.337 611.163 430.595 cv
611.163 430.595 607.421 429.826 603.491 420.83 cv
599.558 411.841 580.554 378.783 604.265 311.572 cv
cp
f
589.999 315.208 mo
589.999 315.208 567.757 382.224 598.257 434.15 cv
598.257 434.15 594.499 433.416 590.464 424.47 cv
586.429 415.525 567.062 382.685 589.999 315.208 cv
cp
f
575.991 313.72 mo
575.991 313.72 553.749 380.736 584.249 432.658 cv
584.249 432.658 580.483 431.927 576.452 422.986 cv
572.417 414.033 553.054 381.197 575.991 313.72 cv
cp
f
562.925 315.001 mo
562.925 315.001 540.687 382.017 571.179 433.939 cv
571.179 433.939 567.421 433.212 563.39 424.263 cv
559.358 415.318 539.991 382.474 562.925 315.001 cv
cp
f
grestore
333.918 412.977 mo
333.918 412.977 348.996 376.766 363.918 363.977 cv
384.918 345.977 404.773 348.16 399.848 378.07 cv
391.418 381.977 li
391.418 381.977 400.414 365.477 392.418 359.477 cv
384.418 353.477 359.914 368.477 333.918 412.977 cv
cp
f
193.977 699.938 mo
166.277 702.445 143.395 692.047 134.246 672.785 cv
127.578 658.781 128.988 642.152 138.223 625.961 cv
147.004 610.563 161.957 597.266 180.324 588.531 cv
191.473 583.234 203.473 579.875 215.027 578.828 cv
242.727 576.313 265.613 586.715 274.762 605.973 cv
281.426 619.98 280.016 636.609 270.781 652.805 cv
262.004 668.203 247.059 681.492 228.684 690.227 cv
217.535 695.531 205.531 698.883 193.977 699.938 cv
cp
f
268.293 609.656 mo
280.785 635.93 262.199 670.875 226.789 687.715 cv
191.379 704.555 152.543 696.902 140.059 670.629 cv
127.559 644.359 146.141 609.41 181.551 592.574 cv
216.965 575.734 255.801 583.383 268.293 609.656 cv
cp
.796078 .854902 .352941 rgb
f
148.91 671.227 mo
148.91 671.227 166.91 696.727 214.16 682.477 cv
261.41 668.227 271.91 627.73 264.41 610.48 cv
264.41 610.48 263.465 654.492 223.16 671.227 cv
174.41 691.477 148.91 671.227 148.91 671.227 cv
cp
.27451 .207843 .145098 rgb
f
144.41 659.477 mo
144.41 659.477 140.41 656.484 142.91 654.48 cv
145.414 652.477 144.41 659.477 144.41 659.477 cv
cp
f
138.41 640.98 mo
138.41 640.98 154.91 588.98 208.91 589.98 cv
208.91 589.98 164.41 592.98 138.41 640.98 cv
cp
1 1 1 rgb
f
gsave
145.91 669.48 mo
145.91 669.48 169.918 691.484 208.414 679.98 cv
246.91 668.477 269.41 644.977 262.91 602.477 cv
262.91 602.477 256.414 589.98 253.91 597.48 cv
251.41 604.98 227.91 639.977 201.91 650.477 cv
175.91 660.977 156.418 658.98 152.914 658.477 cv
149.41 657.977 139.414 662.484 145.91 669.48 cv
cp
clp
252.832 595.324 mo
252.832 595.324 274.723 620.289 259.676 653.426 cv
259.676 653.426 266.797 631.414 252.832 595.324 cv
cp
.27451 .207843 .145098 rgb
f
248.113 604.633 mo
248.113 604.633 268.855 630.563 252.324 662.988 cv
252.324 662.988 260.434 641.32 248.113 604.633 cv
cp
f
242.355 613.68 mo
242.355 613.68 261.496 640.813 243.043 672.176 cv
243.043 672.176 252.449 651.035 242.355 613.68 cv
cp
f
237.246 622.281 mo
237.246 622.281 253.73 651.105 232.391 680.586 cv
232.391 680.586 243.754 660.43 237.246 622.281 cv
cp
f
230.559 628.313 mo
230.559 628.313 244.859 658.277 221.398 686.098 cv
221.398 686.098 234.219 666.832 230.559 628.313 cv
cp
f
222.793 634.793 mo
222.793 634.793 234.805 665.75 209.324 691.734 cv
209.324 691.734 223.559 673.488 222.793 634.793 cv
cp
f
214.621 638.777 mo
214.621 638.777 224.707 670.406 197.699 694.789 cv
197.699 694.789 213.012 677.449 214.621 638.777 cv
cp
f
205.355 641.66 mo
205.355 641.66 213.262 673.91 184.629 696.375 cv
184.629 696.375 201.113 680.121 205.355 641.66 cv
cp
f
196.789 644.238 mo
196.789 644.238 202.863 676.887 173.02 697.699 cv
173.02 697.699 190.387 682.406 196.789 644.238 cv
cp
f
188.566 645.48 mo
188.566 645.48 192.699 678.422 161.668 697.43 cv
161.668 697.43 179.914 683.195 188.566 645.48 cv
cp
f
178.766 647.93 mo
178.766 647.93 181.27 681.035 149.34 698.496 cv
149.34 698.496 168.262 685.172 178.766 647.93 cv
cp
f
169.441 648.551 mo
169.441 648.551 171.949 681.664 140.02 699.117 cv
140.02 699.117 158.938 685.793 169.441 648.551 cv
cp
f
grestore
244.887 652.969 mo
231.715 612.137 246.098 570.824 276.957 560.855 cv
307.809 550.902 343.625 576.016 356.801 616.836 cv
369.992 657.668 355.613 698.984 324.746 708.949 cv
293.895 718.91 258.074 693.797 244.887 652.969 cv
cp
.27451 .207843 .145098 rgb
f
322.668 702.48 mo
295.332 711.293 263.402 688.195 251.371 650.883 cv
239.324 613.555 251.707 576.156 279.043 567.336 cv
306.371 558.512 341.535 581.074 353.582 618.402 cv
365.633 655.711 349.996 693.656 322.668 702.48 cv
cp
.796078 .854902 .352941 rgb
f
309.402 571.477 mo
309.402 571.477 364.691 593.867 355.145 665.215 cv
355.145 665.215 360.176 610.254 309.402 571.477 cv
cp
1 1 1 rgb
f
gsave
269.563 578.918 mo
269.563 578.918 244.32 605.629 265.297 653.18 cv
286.273 700.734 322.051 695.742 322.051 695.742 cv
322.051 695.742 312.262 688.723 308.309 671.156 cv
304.344 653.602 286.227 634.617 280.227 605.734 cv
274.227 576.852 279.801 572 279.801 572 cv
279.801 572 274.262 570.176 269.563 578.918 cv
cp
clp
281.094 584.27 mo
281.094 584.27 260.152 582.883 249.926 602.473 cv
249.926 602.473 261.988 589.379 281.094 584.27 cv
cp
.27451 .207843 .145098 rgb
f
287.371 589.871 mo
287.371 589.871 254.66 594.371 248.004 614.398 cv
248.004 614.398 260.082 598.938 287.371 589.871 cv
cp
f
284.441 598.922 mo
284.441 598.922 252.289 606.402 247.48 626.945 cv
247.48 626.945 258.102 610.438 284.441 598.922 cv
cp
f
288.004 606.703 mo
288.004 606.703 255.863 614.184 251.035 634.727 cv
251.035 634.727 261.664 618.227 288.004 606.703 cv
cp
f
289.813 615.578 mo
289.813 615.578 257.668 623.055 252.852 643.605 cv
252.852 643.605 263.473 627.094 289.813 615.578 cv
cp
f
292.582 624.145 mo
292.582 624.145 260.434 631.621 255.617 652.164 cv
255.617 652.164 266.238 635.66 292.582 624.145 cv
cp
f
295.344 632.707 mo
295.344 632.707 263.207 640.184 258.383 660.734 cv
258.383 660.734 269.004 644.227 295.344 632.707 cv
cp
f
299.863 640.18 mo
299.863 640.18 267.711 647.66 262.902 668.203 cv
262.902 668.203 273.523 651.703 299.863 640.18 cv
cp
f
303.574 648.445 mo
303.574 648.445 271.434 655.922 266.613 676.465 cv
266.613 676.465 277.238 659.953 303.574 648.445 cv
cp
f
307.461 655.582 mo
307.461 655.582 275.309 663.059 270.496 683.613 cv
270.496 683.613 281.121 667.113 307.461 655.582 cv
cp
f
313.574 661.5 mo
313.574 661.5 281.426 668.977 276.613 689.531 cv
276.613 689.531 287.23 673.02 313.574 661.5 cv
cp
f
316.652 669.434 mo
316.652 669.434 284.512 676.91 279.691 697.465 cv
279.691 697.465 290.309 680.953 316.652 669.434 cv
cp
f
319.438 676.422 mo
319.438 676.422 287.293 683.898 282.473 704.449 cv
282.473 704.449 293.094 687.938 319.438 676.422 cv
cp
f
grestore
272.738 578.914 mo
272.738 578.914 245.824 599.688 256.012 642.633 cv
266.191 685.57 299.113 699.656 313.66 699.156 cv
313.66 699.156 276.453 688.055 264.066 643.18 cv
251.684 598.316 272.738 578.914 272.738 578.914 cv
cp
.27451 .207843 .145098 rgb
f
220.371 642.703 mo
215.691 634.711 214.457 620.352 214.152 615.145 cv
213.574 614.121 213.059 613.117 212.598 612.125 cv
212.566 612.168 li
207.738 603.566 li
203.379 595.816 201.582 589.016 200.902 584 cv
199.246 583.906 198.031 583.695 197.82 583.66 cv
194.941 583.152 li
193.34 580.719 li
189.215 574.48 187.238 569.012 186.34 564.73 cv
182.059 564.988 178.27 564.527 177.816 564.465 cv
171.426 563.645 li
171.902 557.211 li
172.184 553.473 173.324 549.395 174.699 545.645 cv
171.691 546.102 168.996 546.395 167.027 546.57 cv
165.078 546.75 163.887 546.813 163.887 546.813 cv
154.832 547.293 li
155.652 543.781 li
150.152 545.258 145.301 546.383 144.949 546.461 cv
136.41 548.441 li
136.625 539.668 li
136.637 539.047 137.09 524.328 144.949 513.59 cv
145.824 512.406 145.895 511.844 145.895 511.84 cv
145.887 511.859 145.871 511.871 145.836 511.879 cv
145.625 511.895 144.969 511.477 144.457 511.281 cv
139.668 509.441 li
140.004 504.277 li
140.398 499.914 141.309 495.969 142.332 492.664 cv
138.875 492.688 li
139.809 485.008 li
140.871 476.199 144.758 468.258 148.145 462.781 cv
136.574 458.246 li
141.801 451.117 li
145.363 446.254 150.43 442.063 154.871 438.957 cv
150.379 435.91 li
157.113 430.109 li
159.293 428.242 161.84 426.711 164.426 425.477 cv
159.734 422.375 li
163.637 416.668 li
168.73 409.23 174.988 404.117 179.762 400.941 cv
176.246 396.133 li
183.051 392.41 li
187.02 390.242 190.793 388.82 194.137 387.891 cv
193.988 387.555 191.656 381.535 191.656 381.535 cv
196.793 378.645 li
202.348 375.52 208.496 373.633 215.047 373.039 cv
215.918 372.961 216.777 372.906 217.598 372.875 cv
217.176 370.844 217.02 369.355 216.988 368.988 cv
216.41 362.652 li
222.699 361.656 li
224.504 361.367 226.246 361.156 227.91 361.004 cv
232.965 360.547 237.34 360.641 240.855 360.949 cv
240.359 355.48 li
249.477 357.531 li
255.512 358.891 260.23 361.211 263.863 363.762 cv
264.355 360.625 li
273.383 367.305 li
284.309 375.371 285.66 387.848 287.512 405.109 cv
288.277 412.055 li
289.652 423.988 293.707 427.953 295.223 429.039 cv
296.785 428.84 299.633 428.289 304.906 426.629 cv
308.059 425.641 312.965 423.488 318.645 420.996 cv
331.895 415.188 348.379 407.961 361.719 406.75 cv
362.98 406.652 li
383.84 405.344 390.59 413.949 391.723 415.691 cv
398.934 426.664 li
385.809 426.219 li
384.941 426.191 384.145 426.211 383.395 426.277 cv
381.941 426.41 380.816 426.707 379.949 427.063 cv
383.574 434.352 381.215 441.355 378.969 444.555 cv
376.324 448.324 li
372.734 447.48 li
372.832 448.004 373.012 448.684 373.301 449.539 cv
376.887 459.805 378.488 471.523 378.551 472.016 cv
379.836 481.504 li
377.738 481.074 li
380.465 488.715 382.105 496.547 382.367 497.82 cv
385.645 513.91 li
381.805 511.367 li
381.781 514.426 381.262 516.348 381.129 516.793 cv
381.059 517.016 li
389.469 534.352 386.27 543.813 385.414 545.773 cv
382.73 551.914 li
370.105 546.613 li
369.566 562.035 362.281 572.195 361.902 572.723 cv
355.27 581.797 li
352.332 575.828 li
348.332 583.684 343.207 588.555 342.852 588.883 cv
333.359 597.75 li
332.848 594.25 li
329.121 599.102 325.77 602.883 325.066 603.664 cv
319.855 609.484 li
314.809 603.508 li
309.762 597.543 303.574 588.219 299.488 581.809 cv
292.273 588.48 li
289.738 582.207 li
286.355 590.41 282.27 598.273 282.035 598.727 cv
273.008 616.043 li
271.766 609.574 li
267.898 613.43 264.238 615.844 263.449 616.344 cv
255.223 621.59 li
254.48 618.195 li
250.926 621.211 247.574 623.305 246.406 624 cv
243.801 625.559 li
239.387 631.984 231.879 643.07 231.879 643.07 cv
225.828 651.996 li
220.371 642.703 li
cp
f
293.637 435.836 mo
293.637 435.836 283.871 433.203 281.516 412.836 cv
279.16 392.469 279.031 379.93 269.348 372.773 cv
268.395 378.883 li
268.395 378.883 263.867 367.75 247.977 364.168 cv
248.426 369.148 li
248.426 369.148 238.605 366.02 223.762 368.375 cv
223.762 368.375 224.441 375.84 227.879 380.551 cv
227.879 380.551 213.973 376.789 200.121 384.578 cv
200.121 384.578 202.754 391.367 206.418 393.039 cv
206.418 393.039 197.316 392.363 186.316 398.383 cv
189.758 403.086 li
189.758 403.086 177.676 408.203 169.25 420.512 cv
179.934 427.578 li
179.934 427.578 168.074 429.66 161.551 435.27 cv
167.434 439.254 li
167.434 439.254 153.988 445.992 147.289 455.141 cv
158.738 459.625 li
158.738 459.625 148.277 471.617 146.563 485.828 cv
152.582 485.785 li
152.582 485.785 147.785 493.75 146.785 504.887 cv
146.785 504.887 157.145 508.469 150.449 517.609 cv
143.746 526.75 143.422 539.832 143.422 539.832 cv
143.422 539.832 157.684 536.535 164.973 533.863 cv
163.527 540.016 li
163.527 540.016 177.012 539.293 186.746 535.902 cv
186.746 535.902 179.371 548.621 178.691 557.723 cv
178.691 557.723 187.832 558.898 192.629 556.457 cv
192.629 556.457 190.859 564.648 199.012 576.965 cv
199.012 576.965 204.621 577.961 207.473 576.195 cv
207.473 576.195 205.879 586.383 213.668 600.234 cv
215.48 598.063 li
215.48 598.063 216.152 605.527 220.863 613.137 cv
220.863 613.137 221.492 631.152 226.246 639.258 cv
226.246 639.258 238.199 621.605 240.871 617.852 cv
243.543 614.094 243.543 614.094 243.543 614.094 cv
242.91 618.164 li
242.91 618.164 255.77 610.473 258.078 602.734 cv
259.793 610.609 li
259.793 610.609 273.566 601.832 275.059 590.648 cv
276.004 595.582 li
276.004 595.582 283.695 580.828 286.371 571.551 cv
289.051 562.27 294.887 576.801 294.887 576.801 cv
300.902 571.234 li
300.902 571.234 312.129 589.793 320.004 599.121 cv
320.004 599.121 333.223 584.363 336.895 574.996 cv
338.207 583.914 li
338.207 583.914 350.707 572.234 350.254 556.211 cv
356.402 568.707 li
356.402 568.707 366.223 555.266 362.473 536.027 cv
379.18 543.043 li
379.18 543.043 383.75 532.59 369.723 510.766 cv
374.609 514.844 li
374.609 514.844 376.926 507.102 370.363 495.648 cv
375.707 499.18 li
375.707 499.18 372.082 481.438 366.879 473.875 cv
361.676 466.313 366.699 471.883 366.699 471.883 cv
371.816 472.926 li
371.816 472.926 370.277 461.516 366.879 451.785 cv
363.488 442.047 368.785 439.563 373.402 440.645 cv
373.402 440.645 378.289 433.68 371.094 426.297 cv
371.094 426.297 373.953 419.012 386.043 419.422 cv
386.043 419.422 381.379 412.313 363.402 413.441 cv
345.434 414.57 318.172 429.594 306.949 433.121 cv
295.723 436.652 293.637 435.836 293.637 435.836 cv
cp
.45098 .623529 .427451 rgb
f
296.676 441.582 mo
296.676 441.582 262.215 498.93 229.105 615.402 cv
229.105 615.402 234.004 580.816 251.027 536.094 cv
268.059 491.375 287.797 448.914 291.332 443.574 cv
294.863 438.238 297.309 437.508 296.676 441.582 cv
cp
.27451 .207843 .145098 rgb
f
152.164 525.484 mo
152.164 525.484 225.418 469.633 296.676 441.582 cv
296.676 441.582 297.668 435.973 290.965 439.59 cv
286.629 441.934 207.418 474.477 152.164 525.484 cv
cp
f
321.637 589.438 mo
321.637 589.438 314.91 498.672 296.676 441.582 cv
296.676 441.582 296.137 435.605 299.211 441.859 cv
302.285 448.105 322.059 516.602 321.637 589.438 cv
cp
f
gsave
359.418 440.727 mo
359.418 440.727 365.043 450.477 363.918 459.102 cv
359.043 460.977 li
359.043 460.977 364.668 467.727 361.293 477.102 cv
351.543 478.227 li
351.543 478.227 360.168 491.352 358.293 505.602 cv
352.668 504.102 li
352.668 504.102 357.918 527.352 350.043 549.102 cv
342.168 570.852 341.418 566.352 335.418 570.102 cv
329.418 573.852 321.168 591.852 321.168 591.852 cv
292.668 567.102 li
292.668 567.102 278.043 600.477 255.918 606.477 cv
233.793 612.477 229.668 619.977 229.668 619.977 cv
229.668 619.977 205.293 582.102 197.418 565.227 cv
189.543 548.352 178.293 527.352 169.293 525.102 cv
160.293 522.852 151.48 532.988 150.449 517.609 cv
149.418 502.227 158.418 427.602 181.293 403.977 cv
204.168 380.352 271.293 362.352 280.668 379.227 cv
290.043 396.102 275.043 448.227 298.293 438.477 cv
321.543 428.727 332.793 427.227 338.793 426.852 cv
344.793 426.477 359.418 440.727 359.418 440.727 cv
cp
clp
237.918 569.727 mo
237.918 569.727 223.668 580.227 218.043 597.102 cv
218.043 597.102 217.668 588.852 226.668 577.602 cv
235.668 566.352 238.293 565.977 237.918 569.727 cv
cp
f
241.668 551.727 mo
241.668 551.727 220.668 563.352 212.418 583.977 cv
212.418 583.977 213.543 571.602 225.918 559.602 cv
238.293 547.602 242.043 549.852 241.668 551.727 cv
cp
f
243.543 537.852 mo
243.543 537.852 220.293 543.477 208.293 570.852 cv
208.293 570.852 209.418 559.227 220.668 547.602 cv
231.918 535.977 243.168 533.727 243.543 537.852 cv
cp
f
200.793 558.852 mo
200.793 558.852 213.941 530.625 250.293 522.082 cv
250.293 522.082 249.52 518 239.465 521.34 cv
229.41 524.68 209.301 537.684 200.793 558.852 cv
cp
f
194.043 547.227 mo
194.043 547.227 207.543 511.602 251.793 507.102 cv
251.793 507.102 248.793 509.352 244.293 510.852 cv
239.793 512.352 213.918 519.102 194.043 547.227 cv
cp
f
191.043 534.852 mo
191.043 534.852 209.793 490.977 266.793 488.727 cv
266.793 488.727 255.168 492.852 244.668 495.477 cv
240.066 496.629 212.418 502.977 191.043 534.852 cv
cp
f
176.418 526.227 mo
176.418 526.227 206.418 480.852 267.168 472.227 cv
267.168 472.227 265.777 475.27 252.918 478.977 cv
233.418 484.602 214.293 487.227 176.418 526.227 cv
cp
f
245.793 570.852 mo
245.793 570.852 255.918 584.352 249.168 607.602 cv
249.168 607.602 252.543 594.477 248.043 582.852 cv
243.543 571.227 245.793 570.852 245.793 570.852 cv
cp
f
265.668 598.227 mo
265.668 598.227 268.293 571.227 253.293 553.602 cv
253.293 553.602 251.043 555.102 254.418 561.102 cv
257.793 567.102 265.668 577.977 265.668 598.227 cv
cp
f
277.668 580.602 mo
277.668 580.602 277.668 558.477 258.543 540.477 cv
258.543 540.477 261.543 538.227 267.168 545.352 cv
272.793 552.477 279.168 564.852 277.668 580.602 cv
cp
f
287.043 561.477 mo
287.043 561.477 285.168 540.852 264.168 525.852 cv
264.168 525.852 265.293 522.102 271.668 527.352 cv
278.043 532.602 287.043 548.352 287.043 561.477 cv
cp
f
304.293 567.477 mo
304.293 567.477 306.543 536.727 270.918 511.227 cv
270.918 511.227 277.668 509.352 285.168 518.727 cv
292.668 528.102 306.918 545.352 304.293 567.477 cv
cp
f
314.793 555.477 mo
314.793 555.477 312.918 519.102 278.793 492.102 cv
278.793 492.102 283.668 490.977 292.293 500.352 cv
300.918 509.727 314.043 525.477 314.793 555.477 cv
cp
f
335.418 570.102 mo
335.418 570.102 325.293 505.977 284.043 475.977 cv
284.043 475.977 287.793 475.227 294.918 481.977 cv
302.043 488.727 328.668 508.602 335.418 570.102 cv
cp
f
275.164 461.98 mo
275.164 461.98 254.66 455.977 222.664 478.977 cv
222.664 478.977 254.66 449.48 275.164 461.98 cv
cp
f
155.043 507.102 mo
155.043 507.102 203.793 445.227 279.543 442.602 cv
279.543 442.602 272.043 446.352 257.043 449.727 cv
242.043 453.102 204.543 460.977 155.043 507.102 cv
cp
f
155.988 485.668 mo
155.988 485.668 203.488 431.328 273.34 432.156 cv
273.34 432.156 266.277 435.258 252.324 437.699 cv
238.367 440.141 203.512 445.719 155.988 485.668 cv
cp
f
160.293 466.977 mo
160.293 466.977 210.238 413.645 279.801 420.074 cv
279.801 420.074 272.504 422.594 258.402 423.91 cv
244.297 425.223 210.543 426.477 160.293 466.977 cv
cp
f
161.043 451.977 mo
161.043 451.977 208.66 400.84 274.926 406.949 cv
274.926 406.949 267.973 409.371 254.535 410.641 cv
241.098 411.91 208.941 413.137 161.043 451.977 cv
cp
f
179.793 423.477 mo
179.793 423.477 218.043 388.602 271.551 394.199 cv
271.551 394.199 264.598 396.621 251.16 397.891 cv
237.723 399.16 211.668 401.352 179.793 423.477 cv
cp
f
177.168 411.852 mo
177.168 411.852 215.418 376.977 268.926 382.574 cv
268.926 382.574 261.973 384.996 248.535 386.266 cv
235.098 387.535 209.043 389.727 177.168 411.852 cv
cp
f
346.227 554.125 mo
346.227 554.125 332.051 490.773 288.98 463.449 cv
288.98 463.449 292.676 462.465 300.215 468.75 cv
307.754 475.035 335.586 493.18 346.227 554.125 cv
cp
f
361.668 551.727 mo
361.668 551.727 346.668 482.727 293.984 453.578 cv
293.984 453.578 297.59 452.289 305.613 457.938 cv
313.645 463.578 347.043 481.977 361.668 551.727 cv
cp
f
371.965 541.215 mo
371.965 541.215 356.191 472.391 303.176 443.84 cv
303.176 443.84 306.77 442.512 314.863 448.063 cv
322.953 453.617 356.551 471.637 371.965 541.215 cv
cp
f
384.715 535.215 mo
384.715 535.215 368.941 466.391 315.926 437.84 cv
315.926 437.84 319.52 436.512 327.613 442.063 cv
335.703 447.617 369.301 465.637 384.715 535.215 cv
cp
f
395.215 527.34 mo
395.215 527.34 379.441 458.516 326.426 429.965 cv
326.426 429.965 330.02 428.637 338.113 434.188 cv
346.203 439.742 379.801 457.762 395.215 527.34 cv
cp
f
grestore
348.004 440.02 mo
335.965 442.211 357.613 460.391 355.414 457.977 cv
338.418 438.977 li
308.848 385.051 266.645 341.758 247.816 344.219 cv
240.121 345.227 232.887 350.285 228.27 345.586 cv
223.766 340.996 224.691 334.848 225.66 328.344 cv
225.879 326.914 226.105 325.375 226.301 323.734 cv
226.793 319.563 225.52 316.129 224.152 312.496 cv
222.098 306.977 218.98 298.641 227.496 291.164 cv
234.816 284.738 237.898 277.344 237.926 277.273 cv
242.258 266.715 li
249.5 275.508 li
252.852 279.59 257.355 289.578 253.02 301.094 cv
251.512 305.098 251.82 309.965 253.848 313.789 cv
255.176 316.32 257.121 318.063 259.176 318.555 cv
272.164 321.715 303.887 354.695 321.785 376.508 cv
340.676 399.543 352.27 404.82 352.457 404.961 cv
353.469 405.754 li
354.113 406.859 li
355.457 409.121 361.977 420.887 359.281 430.141 cv
358.199 433.887 355.785 436.801 352.332 438.559 cv
350.965 439.25 349.512 439.742 348.004 440.02 cv
348.004 440.02 li
cp
f
348.262 410.316 mo
348.262 410.316 329.301 395.469 309.711 371.586 cv
290.121 347.711 267.137 327.496 257.563 325.168 cv
247.996 322.84 242.543 309.602 246.652 298.691 cv
250.762 287.781 244.238 279.82 244.238 279.82 cv
244.238 279.82 240.754 288.586 231.98 296.281 cv
223.223 303.969 234.668 311.035 233.051 324.543 cv
231.441 338.047 227.652 345.188 247.457 342.25 cv
272.914 338.477 307.449 375.207 342.418 438.977 cv
342.418 438.977 339.941 437.242 349.238 432.5 cv
358.543 427.758 348.262 410.316 348.262 410.316 cv
cp
.607843 .454902 .298039 rgb
f
230.371 314.613 mo
230.371 314.613 232.156 318.859 229.387 325.973 cv
226.605 333.086 225.098 341.492 239.535 339.883 cv
253.977 338.27 262.957 340.195 270.969 347.887 cv
270.969 347.887 260.281 336.617 253.527 335.813 cv
246.777 335.008 248.07 333.754 243.465 333.574 cv
238.859 333.395 233.891 331.246 236.98 328.656 cv
240.074 326.063 242.16 321.617 237.535 316.355 cv
231.77 309.781 224.773 303.434 227.051 296.414 cv
227.051 296.414 223.793 303.609 230.371 314.613 cv
cp
.27451 .207843 .145098 rgb
f
275.324 341.758 mo
275.324 341.758 300.668 361.031 321.738 390.238 cv
321.738 390.238 314.543 386.973 309.402 378.254 cv
304.254 369.531 280.91 347.352 275.324 341.758 cv
cp
f
241.473 278.258 mo
241.473 278.258 244.25 284.031 240.707 294.891 cv
237.16 305.75 237.707 303.441 237.707 303.441 cv
237.707 303.441 252.945 280.238 249.5 275.508 cv
241.473 278.258 li
cp
f
557.441 430.18 mo
564.402 407.953 559.809 387.133 545.441 375.859 cv
535.004 367.637 520.957 365.539 505.902 369.945 cv
491.582 374.129 477.918 383.793 467.434 397.156 cv
461.074 405.27 456.172 414.453 453.27 423.73 cv
446.305 445.965 450.895 466.785 465.266 478.059 cv
475.707 486.27 489.754 488.375 504.809 483.969 cv
519.125 479.785 532.785 470.129 543.27 456.758 cv
549.637 448.656 554.535 439.461 557.441 430.18 cv
cp
f
469.457 473.477 mo
489.055 488.871 521.309 480.469 541.52 454.715 cv
561.73 428.957 562.223 395.598 542.633 380.199 cv
523.039 364.801 490.777 373.199 470.574 398.949 cv
450.359 424.715 449.863 458.078 469.457 473.477 cv
cp
.796078 .854902 .352941 rgb
f
541.574 387.582 mo
541.574 387.582 559.551 407.352 539.398 443.332 cv
519.254 479.309 483.809 479.988 470.824 470.453 cv
470.824 470.453 507.496 478.297 528.48 448.508 cv
553.871 412.473 541.574 387.582 541.574 387.582 cv
cp
.27451 .207843 .145098 rgb
f
532.621 381.586 mo
532.621 381.586 530.84 377.719 528.734 379.379 cv
526.629 381.043 532.621 381.586 532.621 381.586 cv
cp
f
518.324 373.043 mo
518.324 373.043 472.285 376.391 463.598 420.902 cv
463.598 420.902 473.934 384.969 518.324 373.043 cv
cp
1 1 1 rgb
f
gsave
540.645 384.777 mo
540.645 384.777 554.66 408.793 538.344 438.121 cv
522.012 467.453 498.559 481.313 464.449 467.656 cv
464.449 467.656 455.23 459.875 461.891 459.289 cv
468.551 458.707 501.73 446.281 515.02 427 cv
528.309 407.73 530.082 391.352 530.285 388.375 cv
530.492 385.391 535.988 378.074 540.645 384.777 cv
cp
clp
460.293 457.984 mo
460.293 457.984 477.145 480.836 507.285 474.977 cv
507.285 474.977 487.77 476.512 460.293 457.984 cv
cp
.27451 .207843 .145098 rgb
f
468.852 455.926 mo
468.852 455.926 486.699 478.027 516.504 470.82 cv
516.504 470.82 497.105 473.23 468.852 455.926 cv
cp
f
477.363 452.988 mo
477.363 452.988 496.504 473.996 525.77 465.004 cv
525.77 465.004 506.574 468.582 477.363 452.988 cv
cp
f
485.402 450.473 mo
485.402 450.473 506.402 469.648 534.621 457.914 cv
534.621 457.914 515.895 463.285 485.402 450.473 cv
cp
f
491.582 446.172 mo
491.582 446.172 513.918 463.773 541.121 449.98 cv
541.121 449.98 522.887 456.723 491.582 446.172 cv
cp
f
498.332 441.066 mo
498.332 441.066 521.887 456.992 547.926 441.168 cv
547.926 441.168 530.285 449.281 498.332 441.066 cv
cp
f
503.07 435.145 mo
503.07 435.145 527.535 449.613 552.512 432.234 cv
552.512 432.234 535.434 441.395 503.07 435.145 cv
cp
f
507.102 428.094 mo
507.102 428.094 532.449 440.91 556.129 421.82 cv
556.129 421.82 539.746 432.16 507.102 428.094 cv
cp
f
510.746 421.582 mo
510.746 421.582 536.754 432.961 559.273 412.555 cv
559.273 412.555 543.527 423.801 510.746 421.582 cv
cp
f
513.219 415.074 mo
513.219 415.074 539.82 424.918 561.051 403.188 cv
561.051 403.188 546.031 415.367 513.219 415.074 cv
cp
f
516.98 407.516 mo
516.98 407.516 543.996 416.055 564.105 393.277 cv
564.105 393.277 549.723 406.191 516.98 407.516 cv
cp
f
519.137 399.988 mo
519.137 399.988 546.16 408.535 566.262 385.75 cv
566.262 385.75 551.887 398.664 519.137 399.988 cv
cp
f
grestore
796.91 694.887 mo
788.277 695.672 779.426 695.215 770.609 693.539 cv
751.332 689.871 734.211 680.719 722.41 667.77 cv
710.117 654.289 704.973 638.305 707.938 622.766 cv
712.438 599.102 735.734 581.359 765.918 578.617 cv
774.551 577.836 783.406 578.289 792.223 579.969 cv
811.508 583.645 828.629 592.789 840.426 605.734 cv
852.715 619.223 857.863 635.203 854.902 650.742 cv
850.395 674.402 827.094 692.148 796.91 694.887 cv
cp
.27451 .207843 .145098 rgb
f
848.215 649.465 mo
842.949 677.141 808.059 697.492 771.168 690.469 cv
734.277 683.449 706.402 651.141 711.668 623.473 cv
716.934 595.805 753.77 576.93 790.672 583.953 cv
827.566 590.973 853.484 621.801 848.215 649.465 cv
cp
.796078 .854902 .352941 rgb
f
726.168 607.977 mo
726.168 607.977 738.668 584.977 779.668 587.477 cv
820.668 589.977 834.668 612.477 840.668 621.977 cv
840.668 621.977 825.168 599.477 784.668 593.973 cv
744.168 588.473 726.168 607.977 726.168 607.977 cv
cp
1 1 1 rgb
f
840.168 636.469 mo
840.168 636.469 840.168 641.473 838.668 639.973 cv
837.168 638.473 839.66 635.473 840.168 636.469 cv
cp
.27451 .207843 .145098 rgb
f
720.668 656.473 mo
720.668 656.473 737.668 686.977 777.668 691.477 cv
817.672 695.977 835.168 672.469 835.168 672.469 cv
835.168 672.469 812.168 695.977 771.168 685.969 cv
730.16 675.973 720.668 656.473 720.668 656.473 cv
cp
1 1 1 rgb
f
719.168 635.473 mo
719.168 635.473 722.668 670.477 768.668 679.969 cv
830.168 692.672 842.668 652.969 842.668 652.969 cv
842.668 652.969 828.137 683.66 773.668 674.473 cv
732.168 667.477 719.168 635.473 719.168 635.473 cv
cp
.27451 .207843 .145098 rgb
f
gsave
720.168 640.969 mo
720.168 640.969 730.668 671.473 773.668 677.473 cv
816.668 683.473 837.668 667.977 844.168 646.477 cv
844.168 646.477 825.664 665.977 783.168 656.977 cv
740.668 647.977 728.168 622.473 728.168 622.473 cv
728.168 622.473 719.164 629.969 720.168 640.969 cv
cp
clp
730.512 630.445 mo
730.512 630.445 719.652 648.398 732.34 666.492 cv
732.34 666.492 726.262 649.766 730.512 630.445 cv
cp
f
738.379 627.453 mo
738.379 627.453 727.332 658.559 742.043 673.688 cv
742.043 673.688 733.871 655.852 738.379 627.453 cv
cp
f
745.063 634.219 mo
745.063 634.219 736.918 666.199 752.941 679.922 cv
752.941 679.922 743.184 662.895 745.063 634.219 cv
cp
f
753.605 634.629 mo
753.605 634.629 745.465 666.609 761.496 680.344 cv
761.496 680.344 751.723 663.316 753.605 634.629 cv
cp
f
762.332 637.102 mo
762.332 637.102 754.18 669.082 770.211 682.805 cv
770.211 682.805 760.441 665.789 762.332 637.102 cv
cp
f
771.207 638.578 mo
771.207 638.578 763.059 670.57 779.09 684.293 cv
779.09 684.293 769.316 667.277 771.207 638.578 cv
cp
f
780.078 640.07 mo
780.078 640.07 771.926 672.047 787.965 685.781 cv
787.965 685.781 778.184 668.754 780.078 640.07 cv
cp
f
788.797 639.492 mo
788.797 639.492 780.645 671.484 796.676 685.207 cv
796.676 685.207 786.902 668.191 788.797 639.492 cv
cp
f
797.84 639.996 mo
797.84 639.996 789.691 671.977 805.723 685.711 cv
805.723 685.711 795.949 668.684 797.84 639.996 cv
cp
f
805.973 639.844 mo
805.973 639.844 797.824 671.813 813.855 685.547 cv
813.855 685.547 804.082 668.52 805.973 639.844 cv
cp
f
814.035 637.125 mo
814.035 637.125 805.883 669.117 821.918 682.84 cv
821.918 682.84 812.141 665.813 814.035 637.125 cv
cp
f
822.496 638.039 mo
822.496 638.039 814.348 670.02 830.379 683.754 cv
830.379 683.754 820.613 666.727 822.496 638.039 cv
cp
f
829.98 638.789 mo
829.98 638.789 821.832 670.77 837.855 684.492 cv
837.855 684.492 828.082 667.477 829.98 638.789 cv
cp
f
grestore
576.816 511.094 mo
561.395 505.648 550.203 494.594 546.129 480.766 cv
538.203 453.93 558.863 424.102 592.168 414.273 cv
607.121 409.859 622.766 410.047 636.219 414.797 cv
651.652 420.246 662.844 431.297 666.91 445.121 cv
670.836 458.398 668.027 472.691 659 485.375 cv
650.305 497.617 636.762 506.938 620.891 511.621 cv
605.918 516.035 590.27 515.848 576.816 511.094 cv
cp
f
660.738 445.629 mo
667.934 469.965 649.32 496.914 619.18 505.805 cv
589.02 514.703 558.77 502.18 551.586 477.836 cv
544.402 453.492 563.012 426.547 593.164 417.648 cv
623.309 408.758 653.559 421.281 660.738 445.629 cv
cp
.796078 .854902 .352941 rgb
f
565.789 435.43 mo
565.789 435.43 592.859 415.492 619.719 419.57 cv
646.574 423.652 659.309 442.926 661.086 455.008 cv
661.086 455.008 650.855 429.078 620.258 424.848 cv
589.648 420.621 565.789 435.43 565.789 435.43 cv
cp
1 1 1 rgb
f
651.598 446.688 mo
651.598 446.688 651.91 455.805 650.07 452.539 cv
648.23 449.27 648.363 442.48 651.598 446.688 cv
cp
.27451 .207843 .145098 rgb
f
547.285 481.703 mo
547.285 481.703 558.66 508.668 595.48 509.832 cv
632.301 510.996 657.918 486.695 659.855 466.887 cv
659.855 466.887 650.398 496.535 608.727 501.906 cv
567.055 507.273 549.688 485.473 547.285 481.703 cv
cp
f
gsave
547.285 481.703 mo
547.285 481.703 563.199 507.684 594.242 505.188 cv
625.277 502.691 648.832 497.199 660.84 464.266 cv
660.84 464.266 662.566 451.156 652.027 457.219 cv
641.504 463.281 630.988 470.793 602.754 474.883 cv
574.531 478.977 571.371 474.027 557.516 471.328 cv
543.652 468.637 543.527 478.199 547.285 481.703 cv
cp
clp
553.953 475.723 mo
553.953 475.723 548.277 495.922 565.34 509.973 cv
565.34 509.973 555.02 495.473 553.953 475.723 cv
cp
f
560.727 470.742 mo
560.727 470.742 558.387 503.66 576.605 514.324 cv
576.605 514.324 563.973 499.305 560.727 470.742 cv
cp
f
568.977 475.469 mo
568.977 475.469 569.668 508.469 588.77 517.418 cv
588.77 517.418 574.816 503.621 568.977 475.469 cv
cp
f
577.332 473.59 mo
577.332 473.59 578.023 506.586 597.125 515.539 cv
597.125 515.539 583.156 501.742 577.332 473.59 cv
cp
f
586.387 473.641 mo
586.387 473.641 587.07 506.641 606.176 515.594 cv
606.176 515.594 592.227 501.801 586.387 473.641 cv
cp
f
595.34 472.703 mo
595.34 472.703 596.02 505.703 615.137 514.66 cv
615.137 514.66 601.176 500.855 595.34 472.703 cv
cp
f
604.285 471.766 mo
604.285 471.766 604.973 504.762 624.078 513.719 cv
624.078 513.719 610.121 499.914 604.285 471.766 cv
cp
f
612.535 468.891 mo
612.535 468.891 613.223 501.891 632.332 510.84 cv
632.332 510.84 618.371 497.043 612.535 468.891 cv
cp
f
621.383 466.961 mo
621.383 466.961 622.063 499.961 641.176 508.91 cv
641.176 508.91 627.219 495.113 621.383 466.961 cv
cp
f
629.184 464.641 mo
629.184 464.641 629.867 497.633 648.988 506.586 cv
648.988 506.586 635.02 492.785 629.184 464.641 cv
cp
f
636.223 459.879 mo
636.223 459.879 636.91 492.875 656.012 501.828 cv
656.012 501.828 642.055 488.027 636.223 459.879 cv
cp
f
644.629 458.492 mo
644.629 458.492 645.313 491.492 664.418 500.445 cv
664.418 500.445 650.469 486.648 644.629 458.492 cv
cp
f
652.027 457.219 mo
652.027 457.219 652.719 490.215 671.832 499.172 cv
671.832 499.172 657.875 485.371 652.027 457.219 cv
cp
f
grestore
567.871 711.879 mo
549.387 713.555 535.93 707.625 524.914 696.977 cv
516.574 688.914 511.035 677.215 511.414 666.977 cv
510.91 661.676 511.918 629.977 543.723 611.703 cv
556.684 604.254 570.465 599.879 583.402 598.703 cv
605.723 596.68 624.613 604.453 633.918 619.496 cv
637.254 624.895 647.59 644.203 640.285 665.906 cv
634.602 682.781 619.953 695.871 596.746 704.789 cv
586.648 708.668 576.934 711.059 567.871 711.879 cv
cp
f
516.184 667.367 mo
516.184 667.367 511.723 635.168 547.465 614.852 cv
583.207 594.531 617.449 599.961 630.059 620.547 cv
640.16 637.047 645.918 682.23 596.793 701.355 cv
541.996 722.684 515.027 688.43 516.184 667.367 cv
cp
.796078 .854902 .352941 rgb
f
531.121 690.668 mo
531.121 690.668 550.184 709.465 589.648 696.656 cv
637.93 680.977 633.996 645.938 633.996 645.938 cv
633.996 645.938 630.074 673.957 593.387 688.031 cv
554.816 702.828 531.121 690.668 531.121 690.668 cv
cp
.27451 .207843 .145098 rgb
f
522.168 677.73 mo
522.168 677.73 516.918 671.73 522.168 670.98 cv
527.418 670.23 526.668 681.48 522.168 677.73 cv
cp
f
gsave
529.918 688.477 mo
529.918 688.477 546.918 703.477 582.918 693.48 cv
618.918 683.477 632.914 664.477 635.418 636.48 cv
637.918 608.477 623.422 600.48 615.418 614.477 cv
607.414 628.477 607.918 655.477 579.418 672.48 cv
550.918 689.477 529.918 688.477 529.918 688.477 cv
cp
clp
614.418 611.477 mo
614.418 611.477 640.918 631.477 632.914 666.977 cv
632.914 666.977 636.418 640.98 614.418 611.477 cv
cp
f
611.684 621.555 mo
611.684 621.555 637.254 642.727 627.66 677.836 cv
627.66 677.836 632.418 651.977 611.684 621.555 cv
cp
f
607.887 631.578 mo
607.887 631.578 632.137 654.258 620.441 688.723 cv
620.441 688.723 625.348 666.109 607.887 631.578 cv
cp
f
604.629 641.039 mo
604.629 641.039 626.621 665.918 611.715 699.117 cv
611.715 699.117 618.746 677.074 604.629 641.039 cv
cp
f
599.301 648.305 mo
599.301 648.305 619.391 674.734 602.07 706.746 cv
602.07 706.746 612.418 683.977 599.301 648.305 cv
cp
f
593.02 656.227 mo
593.02 656.227 611.066 684.094 591.395 714.715 cv
591.395 714.715 602.914 690.977 593.02 656.227 cv
cp
f
585.824 661.793 mo
585.824 661.793 602.129 690.715 580.629 720.07 cv
580.629 720.07 592.414 697.477 585.824 661.793 cv
cp
f
577.34 666.492 mo
577.34 666.492 591.629 696.461 568.156 724.273 cv
568.156 724.273 580.996 705.016 577.34 666.492 cv
cp
f
569.473 670.758 mo
569.473 670.758 582.055 701.484 557.051 727.934 cv
557.051 727.934 570.949 709.43 569.473 670.758 cv
cp
f
561.676 673.641 mo
561.676 673.641 572.41 705.059 545.891 729.973 cv
545.891 729.973 560.863 712.328 561.676 673.641 cv
cp
f
552.574 678.035 mo
552.574 678.035 561.754 709.945 534.031 733.523 cv
534.031 733.523 549.852 716.637 552.574 678.035 cv
cp
f
543.574 680.531 mo
543.574 680.531 552.754 712.441 525.031 736.02 cv
525.031 736.02 540.852 719.133 543.574 680.531 cv
cp
f
grestore
517.414 662.977 mo
517.414 662.977 518.418 621.977 563.418 610.477 cv
563.418 610.477 526.91 630.477 517.414 662.977 cv
cp
1 1 1 rgb
f
696.363 582.73 mo
693.301 582.965 690.145 583.043 686.98 582.969 cv
645.934 581.934 633.926 551.148 633.449 549.836 cv
627.566 532.453 627.289 496.273 667.676 482.301 cv
675.465 479.598 683.309 477.938 690.98 477.352 cv
725.395 474.711 749.324 493.332 755.168 513.098 cv
759.477 527.656 757.02 542.676 748.262 555.395 cv
737.465 571.063 718.543 581.027 696.363 582.73 cv
cp
.27451 .207843 .145098 rgb
f
639.758 546.383 mo
639.758 546.383 621.684 502.977 670.629 485.758 cv
711.871 471.25 744.871 490.563 751.473 512.953 cv
760.863 544.859 733.035 579.063 688.152 577.91 cv
650.246 576.938 639.758 546.383 639.758 546.383 cv
cp
.796078 .854902 .352941 rgb
f
654.199 499.715 mo
654.199 499.715 670.949 484.469 702.754 485.457 cv
730.652 486.32 748.707 505.996 749.863 520.953 cv
749.863 520.953 747.5 500.07 710.059 492.418 cv
672.605 484.758 654.199 499.715 654.199 499.715 cv
cp
1 1 1 rgb
f
647.117 544.633 mo
647.117 544.633 658.215 571.617 697.156 569.379 cv
736.09 567.145 746.52 536.254 746.52 536.254 cv
746.52 536.254 729.598 560.871 698.199 563.281 cv
666.785 565.695 647.117 544.633 647.117 544.633 cv
cp
.27451 .207843 .145098 rgb
f
738.512 520.395 mo
738.512 520.395 740.066 512.621 741.988 518.652 cv
743.902 524.68 737 525.156 738.512 520.395 cv
cp
f
gsave
641.191 538.754 mo
641.191 538.754 654.852 562.938 684.316 565.859 cv
713.785 568.766 742.551 549.664 749.348 528.262 cv
756.145 506.848 744.785 515.293 730.066 521.539 cv
715.348 527.785 704.73 536.137 679.738 535.789 cv
654.734 535.438 630.387 524.602 641.191 538.754 cv
cp
clp
647.395 535.086 mo
647.395 535.086 641.152 555.125 657.809 569.641 cv
657.809 569.641 647.91 554.855 647.395 535.086 cv
cp
f
654.293 530.293 mo
654.293 530.293 651.051 563.145 668.949 574.301 cv
668.949 574.301 656.746 558.945 654.293 530.293 cv
cp
f
662.418 535.254 mo
662.418 535.254 662.184 568.258 681.035 577.734 cv
681.035 577.734 667.465 563.551 662.418 535.254 cv
cp
f
670.816 533.609 mo
670.816 533.609 670.582 566.609 689.434 576.086 cv
689.434 576.086 675.855 561.906 670.816 533.609 cv
cp
f
679.863 533.914 mo
679.863 533.914 679.637 566.922 698.488 576.398 cv
698.488 576.398 684.922 562.215 679.863 533.914 cv
cp
f
688.836 533.223 mo
688.836 533.223 688.602 566.23 707.465 575.711 cv
707.465 575.711 693.898 561.531 688.836 533.223 cv
cp
f
697.813 532.535 mo
697.813 532.535 697.582 565.539 716.441 575.02 cv
716.441 575.02 702.871 560.84 697.813 532.535 cv
cp
f
706.133 529.891 mo
706.133 529.891 705.902 562.898 724.762 572.375 cv
724.762 572.375 711.191 558.195 706.133 529.891 cv
cp
f
715.027 528.203 mo
715.027 528.203 714.793 561.207 733.652 570.688 cv
733.652 570.688 720.082 556.508 715.027 528.203 cv
cp
f
722.891 526.098 mo
722.891 526.098 722.66 559.105 741.523 568.582 cv
741.523 568.582 727.949 554.398 722.891 526.098 cv
cp
f
730.066 521.539 mo
730.066 521.539 729.828 554.547 748.676 564.02 cv
748.676 564.02 735.121 549.844 730.066 521.539 cv
cp
f
738.512 520.395 mo
738.512 520.395 738.266 553.391 757.129 562.879 cv
757.129 562.879 743.559 548.691 738.512 520.395 cv
cp
f
745.949 519.32 mo
745.949 519.32 745.715 552.32 764.566 561.809 cv
764.566 561.809 750.996 547.621 745.949 519.32 cv
cp
f
grestore
654.816 565.445 mo
654.816 565.445 669.613 580.156 699.66 577.07 cv
729.707 573.988 742.496 553.66 742.496 553.66 cv
742.496 553.66 727.25 570.953 696.723 572.527 cv
666.199 574.105 654.816 565.445 654.816 565.445 cv
cp
1 1 1 rgb
f
336.887 449.762 mo
336.887 449.762 354.441 404.961 389.773 388.176 cv
433.215 367.535 454.223 349.422 449.762 326.164 cv
444.598 299.148 415.488 293.039 396.84 311.016 cv
378.184 328.988 398.957 358.641 423.734 347.906 cv
423.734 347.906 425.402 348.043 430.418 340.379 cv
435.426 332.715 427.625 333.414 427.625 333.414 cv
427.625 333.414 424.414 344.297 414.125 346.102 cv
399.781 348.617 386.598 328.391 405.473 312.402 cv
419.949 300.137 437.215 306.953 443.504 324.637 cv
449.773 342.32 431.402 365.031 406.344 375.07 cv
381.277 385.113 348.008 408.949 336.887 449.762 cv
cp
.27451 .207843 .145098 rgb
f
405.816 711.68 mo
374.844 711.68 348.082 684.078 344.887 648.844 cv
343.25 630.859 347.785 613.352 357.66 599.555 cv
367.746 585.449 382.176 576.875 398.277 575.41 cv
399.887 575.266 401.488 575.195 403.082 575.195 cv
434.047 575.195 460.809 602.797 464 638.027 cv
467.402 675.539 443.457 708.48 410.621 711.457 cv
409.012 711.609 407.402 711.68 405.816 711.68 cv
cp
f
460.668 638.332 mo
463.738 672.164 441.824 701.801 411.73 704.531 cv
381.621 707.262 354.73 682.055 351.66 648.223 cv
348.59 614.398 370.508 584.762 400.613 582.031 cv
430.707 579.301 457.602 604.512 460.668 638.332 cv
cp
.796078 .854902 .352941 rgb
f
467.582 703.969 mo
458.785 704.766 451.16 704.242 441.691 700.641 cv
440.516 700.184 414.332 689.555 414.863 657.055 cv
415.156 638.859 420.418 605.434 452.363 585.988 cv
462.559 579.781 472.746 576.18 482.645 575.281 cv
499.957 573.711 515.465 580.328 527.48 594.414 cv
535.48 603.793 539.141 618.406 537.523 634.512 cv
535.465 654.984 525.828 673.797 511.738 684.852 cv
495.922 697.242 481.039 702.742 467.582 703.969 cv
cp
.27451 .207843 .145098 rgb
f
443.363 693.539 mo
443.363 693.539 420.457 684.57 420.918 656.414 cv
421.316 631.867 430.645 605.969 455.152 591.051 cv
481.316 575.121 505.254 578.977 521.559 598.082 cv
537.848 617.188 535.012 657.867 506.215 680.813 cv
489.91 693.809 464.684 701.641 443.363 693.539 cv
cp
.796078 .854902 .352941 rgb
f
368.605 424.469 mo
368.605 424.469 334.41 399.695 331.91 378.191 cv
329.41 356.688 336.059 344.563 332.961 332.102 cv
329.867 319.645 317.41 322.738 314.613 330.203 cv
311.816 337.676 315.262 346.797 323.941 344.32 cv
323.941 344.32 314.402 351.125 309.559 342.523 cv
304.715 333.934 309.078 328.285 316.973 323.707 cv
324.855 319.129 332.234 319.551 335.504 330.344 cv
338.777 341.133 328.723 363.359 340.887 389.234 cv
353.051 415.105 368.605 424.469 368.605 424.469 cv
cp
.27451 .207843 .145098 rgb
f
572.434 653.336 mo
540.969 656.191 513.051 632.918 510.191 601.445 cv
507.336 569.98 530.613 542.055 562.082 539.199 cv
593.543 536.348 621.473 559.625 624.332 591.09 cv
627.184 622.563 603.902 650.484 572.434 653.336 cv
cp
f
617.551 591.707 mo
620.07 619.484 601.09 646.664 573.309 649.184 cv
545.539 651.703 519.488 628.609 516.969 600.828 cv
514.441 573.055 534.922 548.496 562.695 545.977 cv
590.473 543.453 615.031 563.93 617.551 591.707 cv
cp
.796078 .854902 .352941 rgb
f
285.949 428.5 mo
285.949 428.5 290.539 434.859 299.16 433.074 cv
307.785 431.289 315.465 430.09 315.465 430.09 cv
315.465 430.09 307.223 436.109 303.574 437.445 cv
299.934 438.781 299.957 444.547 300.199 447.289 cv
300.453 450.031 299.023 448.152 298.348 446.203 cv
297.668 444.254 294.523 442.785 292.578 446.223 cv
290.629 449.664 290.473 442.398 286.582 443.758 cv
282.688 445.113 282.688 445.113 282.688 445.113 cv
282.688 445.113 292.223 442.238 285.949 428.5 cv
cp
.27451 .207843 .145098 rgb
f
679.246 644.098 mo
641.863 634.93 617.629 602.289 625.223 571.336 cv
632.809 540.379 669.395 522.648 706.777 531.82 cv
744.16 540.984 768.395 573.625 760.809 604.582 cv
753.219 635.539 716.629 653.262 679.246 644.098 cv
cp
f
754.676 601.02 mo
747.707 629.445 714.66 645.781 680.867 637.488 cv
647.074 629.203 625.332 599.438 632.301 571.016 cv
639.27 542.586 672.316 526.254 706.113 534.539 cv
739.902 542.824 761.652 572.59 754.676 601.02 cv
cp
.796078 .854902 .352941 rgb
f
635.77 588.336 mo
635.77 588.336 653.051 629.125 695.633 631.844 cv
738.215 634.563 749.707 604.438 749.707 604.438 cv
749.707 604.438 726.574 631.586 692.449 625.914 cv
653.371 619.422 635.77 588.336 635.77 588.336 cv
cp
.27451 .207843 .145098 rgb
f
655.203 540.586 mo
655.203 540.586 680.629 531.383 708.125 538.895 cv
735.629 546.41 748.645 568.906 749.965 579.27 cv
749.965 579.27 733.957 537.504 655.203 540.586 cv
cp
1 1 1 rgb
f
gsave
632.762 582.211 mo
632.762 582.211 644.305 616.305 684.691 626.484 cv
725.074 636.664 739.02 616.074 749.586 602.258 cv
760.152 588.438 761.613 601.105 734.16 594.844 cv
706.699 588.578 665.914 587.254 655.25 578.305 cv
644.582 569.355 630.336 570.805 632.762 582.211 cv
cp
clp
646.457 577.313 mo
646.457 577.313 634.277 594.406 645.59 613.398 cv
645.59 613.398 640.777 596.258 646.457 577.313 cv
cp
.27451 .207843 .145098 rgb
f
654.512 574.914 mo
654.512 574.914 641.184 605.109 654.715 621.297 cv
654.715 621.297 647.902 602.895 654.512 574.914 cv
cp
f
660.684 582.156 mo
660.684 582.156 650.168 613.441 665.129 628.328 cv
665.129 628.328 656.652 610.625 660.684 582.156 cv
cp
f
669.176 583.211 mo
669.176 583.211 658.668 614.496 673.625 629.383 cv
673.625 629.383 665.152 611.68 669.176 583.211 cv
cp
f
677.676 586.324 mo
677.676 586.324 667.16 617.609 682.129 632.496 cv
682.129 632.496 673.66 614.793 677.676 586.324 cv
cp
f
686.422 588.469 mo
686.422 588.469 675.902 619.75 690.871 634.641 cv
690.871 634.641 682.395 616.934 686.422 588.469 cv
cp
f
695.164 590.613 mo
695.164 590.613 684.645 621.898 699.613 636.785 cv
699.613 636.785 691.137 619.078 695.164 590.613 cv
cp
f
703.895 590.691 mo
703.895 590.691 693.383 621.977 708.34 636.867 cv
708.34 636.867 699.871 619.16 703.895 590.691 cv
cp
f
712.879 591.867 mo
712.879 591.867 702.359 623.148 717.324 638.039 cv
717.324 638.039 708.848 620.332 712.879 591.867 cv
cp
f
720.996 592.313 mo
720.996 592.313 710.48 623.602 725.449 638.484 cv
725.449 638.484 716.98 620.781 720.996 592.313 cv
cp
f
729.238 590.219 mo
729.238 590.219 718.723 621.504 733.684 636.387 cv
733.684 636.387 725.215 618.684 729.238 590.219 cv
cp
f
737.613 591.758 mo
737.613 591.758 727.098 623.039 742.063 637.934 cv
742.063 637.934 733.582 620.227 737.613 591.758 cv
cp
f
745.012 593.063 mo
745.012 593.063 734.496 624.344 749.465 639.227 cv
749.465 639.227 740.988 621.527 745.012 593.063 cv
cp
f
grestore
658.559 713.047 mo
622.977 689.074 608.762 647.703 626.871 620.805 cv
644.984 593.914 688.672 591.535 724.25 615.5 cv
759.84 639.461 774.055 680.836 755.938 707.73 cv
737.824 734.625 694.145 737.008 658.559 713.047 cv
cp
.27451 .207843 .145098 rgb
f
750.301 703.934 mo
734.254 727.75 694.883 729.305 662.363 707.402 cv
629.832 685.492 616.473 648.43 632.516 624.609 cv
648.559 600.789 690.148 596.813 722.68 618.723 cv
755.199 640.617 766.344 680.109 750.301 703.934 cv
cp
.796078 .854902 .352941 rgb
f
658.953 609.109 mo
658.953 609.109 716.258 592.566 752.824 654.57 cv
752.824 654.57 722.832 608.242 658.953 609.109 cv
cp
1 1 1 rgb
f
gsave
632.223 639.574 mo
632.223 639.574 628.871 676.164 674.738 700.605 cv
720.605 725.047 745.66 699.023 745.66 699.023 cv
745.66 699.023 733.625 699.539 719.668 688.18 cv
705.707 676.816 679.73 673.078 657.172 654.07 cv
634.605 635.063 635.996 627.813 635.996 627.813 cv
635.996 627.813 630.512 629.797 632.223 639.574 cv
cp
clp
644.59 636.656 mo
644.59 636.656 627.266 648.504 631.324 670.227 cv
631.324 670.227 632.727 652.477 644.59 636.656 cv
cp
.27451 .207843 .145098 rgb
f
652.98 637.184 mo
652.98 637.184 630.051 660.926 637.18 680.797 cv
637.18 680.797 637.129 661.172 652.98 637.184 cv
cp
f
656.27 646.113 mo
656.27 646.113 635.609 671.848 644.516 690.984 cv
644.516 690.984 642.676 671.438 656.27 646.113 cv
cp
f
663.879 650.027 mo
663.879 650.027 643.227 675.773 652.129 694.906 cv
652.129 694.906 650.285 675.363 663.879 650.027 cv
cp
f
670.789 655.887 mo
670.789 655.887 650.129 681.625 659.035 700.758 cv
659.035 700.758 657.191 681.223 670.789 655.887 cv
cp
f
678.262 660.914 mo
678.262 660.914 657.594 686.66 666.5 705.785 cv
666.5 705.785 664.652 686.242 678.262 660.914 cv
cp
f
685.719 665.941 mo
685.719 665.941 665.059 691.676 673.965 710.813 cv
673.965 710.813 672.121 691.273 685.719 665.941 cv
cp
f
693.887 669.035 mo
693.887 669.035 673.227 694.77 682.133 713.906 cv
682.133 713.906 680.293 694.359 693.887 669.035 cv
cp
f
701.914 673.23 mo
701.914 673.23 681.254 698.965 690.16 718.102 cv
690.16 718.102 688.316 698.566 701.914 673.23 cv
cp
f
709.379 676.453 mo
709.379 676.453 688.719 702.195 697.625 721.324 cv
697.625 721.324 695.785 701.789 709.379 676.453 cv
cp
f
717.84 677.332 mo
717.84 677.332 697.18 703.066 706.086 722.203 cv
706.086 722.203 704.238 702.656 717.84 677.332 cv
cp
f
725.164 681.664 mo
725.164 681.664 704.504 707.402 713.418 726.539 cv
713.418 726.539 711.57 706.992 725.164 681.664 cv
cp
f
731.668 685.441 mo
731.668 685.441 711.008 711.176 719.914 730.313 cv
719.914 730.313 718.066 710.766 731.668 685.441 cv
cp
f
grestore
634.715 637.605 mo
634.715 637.605 626.379 670.57 660.918 698.051 cv
695.449 725.531 730.039 716.262 741.172 706.887 cv
741.172 706.887 705.051 721.137 667.59 693.504 cv
630.145 665.871 634.715 637.605 634.715 637.605 cv
cp
.27451 .207843 .145098 rgb
f
502.988 615.379 mo
470.145 618.359 440.539 588.93 436.98 549.77 cv
433.434 510.617 457.262 476.336 490.105 473.355 cv
522.945 470.375 552.547 499.809 556.105 538.961 cv
559.652 578.117 535.832 612.398 502.988 615.379 cv
cp
f
552.313 539.309 mo
555.527 574.789 533.84 605.75 503.863 608.469 cv
473.887 611.188 446.98 584.633 443.762 549.156 cv
440.539 513.676 462.23 482.715 492.207 479.996 cv
522.184 477.273 549.09 503.828 552.313 539.309 cv
cp
.796078 .854902 .352941 rgb
f
449.914 527.98 mo
449.914 527.98 443.164 604.48 509.164 602.98 cv
509.164 602.98 455.914 599.98 457.414 530.98 cv
457.414 530.98 452.164 525.73 449.914 527.98 cv
cp
.27451 .207843 .145098 rgb
f
gsave
455.164 502.48 mo
455.164 502.48 446.914 539.23 461.914 572.23 cv
476.914 605.23 503.914 601.48 515.164 601.48 cv
515.164 601.48 485.164 579.73 486.664 537.73 cv
488.164 495.73 459.664 497.98 455.164 502.48 cv
cp
clp
477.641 501.309 mo
477.641 501.309 456.652 501.523 447.957 521.836 cv
447.957 521.836 458.984 507.859 477.641 501.309 cv
cp
f
484.32 506.406 mo
484.32 506.406 452.066 513.395 446.938 533.867 cv
446.938 533.867 457.801 517.527 484.32 506.406 cv
cp
f
482.094 515.66 mo
482.094 515.66 450.617 525.566 447.379 546.422 cv
447.379 546.422 456.711 529.152 482.094 515.66 cv
cp
f
486.238 523.145 mo
486.238 523.145 454.754 533.055 451.527 553.914 cv
451.527 553.914 460.855 536.641 486.238 523.145 cv
cp
f
488.727 531.852 mo
488.727 531.852 457.246 541.762 454.012 562.621 cv
454.012 562.621 463.344 545.352 488.727 531.852 cv
cp
f
492.137 540.184 mo
492.137 540.184 460.652 550.09 457.414 570.945 cv
457.414 570.945 466.746 553.68 492.137 540.184 cv
cp
f
495.547 548.516 mo
495.547 548.516 464.066 558.418 460.832 579.273 cv
460.832 579.273 470.164 562.012 495.547 548.516 cv
cp
f
500.621 555.621 mo
500.621 555.621 469.137 565.531 465.898 586.387 cv
465.898 586.387 475.23 569.117 500.621 555.621 cv
cp
f
504.957 563.57 mo
504.957 563.57 473.469 573.477 470.238 594.336 cv
470.238 594.336 479.566 577.063 504.957 563.57 cv
cp
f
509.375 570.402 mo
509.375 570.402 477.887 580.309 474.652 601.168 cv
474.652 601.168 483.992 583.902 509.375 570.402 cv
cp
f
515.914 575.832 mo
515.914 575.832 484.434 585.742 481.203 606.594 cv
481.203 606.594 490.531 589.328 515.914 575.832 cv
cp
f
519.594 583.508 mo
519.594 583.508 488.117 593.418 484.883 614.277 cv
484.883 614.277 494.211 597.008 519.594 583.508 cv
cp
f
522.898 590.262 mo
522.898 590.262 491.422 600.168 488.184 621.023 cv
488.184 621.023 497.516 603.758 522.898 590.262 cv
cp
f
grestore
512.164 591.73 mo
512.164 591.73 522.664 590.23 517.414 587.98 cv
512.164 585.73 506.914 590.98 512.164 591.73 cv
cp
f
598.883 585.602 mo
561.027 580.414 533.355 553.391 537.199 525.359 cv
541.043 497.336 574.977 478.762 612.828 483.953 cv
650.691 489.145 678.359 516.172 674.516 544.195 cv
670.672 572.223 636.738 590.797 598.883 585.602 cv
cp
f
668.047 541.293 mo
664.559 566.734 634.012 583.559 599.809 578.867 cv
565.621 574.18 540.418 556.977 544.207 524.305 cv
547.168 498.789 578.254 482.035 612.449 486.73 cv
646.648 491.418 671.539 515.848 668.047 541.293 cv
cp
.796078 .854902 .352941 rgb
f
558.27 504.531 mo
558.27 504.531 569.434 489.41 605.574 490.832 cv
641.715 492.254 658.676 515.781 661.043 520.648 cv
661.043 520.648 644.59 500.727 609.852 496.469 cv
575.113 492.207 558.27 504.531 558.27 504.531 cv
cp
1 1 1 rgb
f
552.816 546.18 mo
552.816 546.18 565.32 569.09 605.145 573.039 cv
641.004 576.594 659.773 553.785 659.773 553.785 cv
659.773 553.785 637.672 571.441 600.512 566.348 cv
563.363 561.25 552.816 546.18 552.816 546.18 cv
cp
.27451 .207843 .145098 rgb
f
gsave
547.652 539.664 mo
547.652 539.664 557.332 562.945 598.199 568.551 cv
639.059 574.156 658.598 558.672 663.848 548.031 cv
669.09 537.395 669.801 532.195 645.949 534.98 cv
622.098 537.766 592.918 535.273 584.309 531.824 cv
575.699 528.371 544.793 521.863 547.652 539.664 cv
cp
clp
558.527 532.074 mo
558.527 532.074 548.207 550.344 561.426 568.051 cv
561.426 568.051 554.863 551.504 558.527 532.074 cv
cp
f
566.301 528.848 mo
566.301 528.848 556.18 560.266 571.324 574.961 cv
571.324 574.961 562.637 557.371 566.301 528.848 cv
cp
f
573.191 535.41 mo
573.191 535.41 565.98 567.617 582.41 580.871 cv
582.41 580.871 572.141 564.145 573.191 535.41 cv
cp
f
581.746 535.578 mo
581.746 535.578 574.543 567.785 590.973 581.035 cv
590.973 581.035 580.707 564.309 581.746 535.578 cv
cp
f
590.527 537.789 mo
590.527 537.789 583.32 569.996 599.75 583.25 cv
599.75 583.25 589.484 566.52 590.527 537.789 cv
cp
f
599.445 539.012 mo
599.445 539.012 592.246 571.223 608.676 584.469 cv
608.676 584.469 598.395 567.742 599.445 539.012 cv
cp
f
608.363 540.234 mo
608.363 540.234 601.152 572.441 617.582 585.695 cv
617.582 585.695 607.316 568.965 608.363 540.234 cv
cp
f
617.051 539.406 mo
617.051 539.406 609.852 571.617 626.281 584.867 cv
626.281 584.867 616.012 568.141 617.051 539.406 cv
cp
f
626.105 539.641 mo
626.105 539.641 618.902 571.848 635.332 585.102 cv
635.332 585.102 625.066 568.375 626.105 539.641 cv
cp
f
634.238 539.242 mo
634.238 539.242 627.031 571.449 643.461 584.703 cv
643.461 584.703 633.191 567.973 634.238 539.242 cv
cp
f
642.215 536.301 mo
642.215 536.301 635.004 568.508 651.434 581.758 cv
651.434 581.758 641.164 565.027 642.215 536.301 cv
cp
f
650.699 536.961 mo
650.699 536.961 643.496 569.172 659.918 582.422 cv
659.918 582.422 649.652 565.695 650.699 536.961 cv
cp
f
658.199 537.484 mo
658.199 537.484 650.996 569.695 667.426 582.945 cv
667.426 582.945 657.152 566.219 658.199 537.484 cv
cp
f
grestore
663.453 534.352 mo
663.453 534.352 664.527 537.527 662.301 537.219 cv
660.074 536.914 661.832 529.586 663.453 534.352 cv
cp
f
440.914 553.48 mo
440.914 553.48 444.41 578.977 455.914 588.477 cv
440.914 602.477 li
440.914 602.477 439.414 577.977 419.418 571.977 cv
419.418 571.977 435.41 562.48 440.914 553.48 cv
cp
f
432.168 677.73 mo
432.168 677.73 444.918 700.23 483.918 687.48 cv
522.918 674.73 526.668 637.98 528.168 632.73 cv
521.418 624.477 li
521.418 624.477 516.918 664.98 488.418 679.23 cv
452.418 697.23 432.168 677.73 432.168 677.73 cv
cp
f
375.871 675.879 mo
357.387 677.555 343.93 671.625 332.914 660.977 cv
324.574 652.914 319.035 641.215 319.414 630.977 cv
318.91 625.672 319.918 593.977 351.723 575.703 cv
364.684 568.254 378.465 563.879 391.402 562.703 cv
413.723 560.68 432.613 568.453 441.918 583.496 cv
445.254 588.895 455.59 608.199 448.285 629.902 cv
442.602 646.781 427.953 659.871 404.746 668.789 cv
394.648 672.668 384.934 675.059 375.871 675.879 cv
cp
f
324.184 631.367 mo
324.184 631.367 319.723 599.172 355.465 578.852 cv
391.207 558.531 425.449 563.961 438.059 584.547 cv
448.16 601.047 453.918 646.23 404.793 665.355 cv
349.996 686.684 323.027 652.43 324.184 631.367 cv
cp
.796078 .854902 .352941 rgb
f
339.121 654.668 mo
339.121 654.668 358.184 673.465 397.648 660.656 cv
445.93 644.977 441.996 609.938 441.996 609.938 cv
441.996 609.938 438.074 637.957 401.387 652.031 cv
362.816 666.828 339.121 654.668 339.121 654.668 cv
cp
.27451 .207843 .145098 rgb
f
330.168 641.73 mo
330.168 641.73 324.918 635.73 330.168 634.98 cv
335.418 634.23 334.668 645.48 330.168 641.73 cv
cp
f
gsave
337.918 652.477 mo
337.918 652.477 354.918 667.477 390.918 657.48 cv
426.918 647.477 440.914 628.477 443.418 600.477 cv
445.918 572.477 431.422 564.48 423.418 578.477 cv
415.414 592.477 415.918 619.477 387.418 636.48 cv
358.918 653.477 337.918 652.477 337.918 652.477 cv
cp
clp
422.418 575.477 mo
422.418 575.477 448.918 595.477 440.914 630.977 cv
440.914 630.977 444.418 604.977 422.418 575.477 cv
cp
f
419.684 585.555 mo
419.684 585.555 445.254 606.73 435.66 641.836 cv
435.66 641.836 440.418 615.977 419.684 585.555 cv
cp
f
415.887 595.578 mo
415.887 595.578 440.137 618.258 428.441 652.723 cv
428.441 652.723 433.348 630.109 415.887 595.578 cv
cp
f
412.629 605.043 mo
412.629 605.043 434.621 629.914 419.715 663.117 cv
419.715 663.117 426.746 641.074 412.629 605.043 cv
cp
f
407.301 612.305 mo
407.301 612.305 427.391 638.734 410.07 670.746 cv
410.07 670.746 420.418 647.977 407.301 612.305 cv
cp
f
401.02 620.23 mo
401.02 620.23 419.066 648.094 399.395 678.715 cv
399.395 678.715 410.914 654.977 401.02 620.23 cv
cp
f
393.824 625.793 mo
393.824 625.793 410.129 654.715 388.629 684.07 cv
388.629 684.07 400.414 661.477 393.824 625.793 cv
cp
f
385.34 630.492 mo
385.34 630.492 399.629 660.461 376.156 688.273 cv
376.156 688.273 388.996 669.016 385.34 630.492 cv
cp
f
377.473 634.758 mo
377.473 634.758 390.055 665.484 365.051 691.934 cv
365.051 691.934 378.949 673.43 377.473 634.758 cv
cp
f
369.676 637.641 mo
369.676 637.641 380.41 669.059 353.891 693.973 cv
353.891 693.973 368.863 676.328 369.676 637.641 cv
cp
f
360.574 642.035 mo
360.574 642.035 369.754 673.945 342.031 697.523 cv
342.031 697.523 357.852 680.637 360.574 642.035 cv
cp
f
351.574 644.531 mo
351.574 644.531 360.754 676.441 333.031 700.02 cv
333.031 700.02 348.852 683.133 351.574 644.531 cv
cp
f
grestore
325.414 626.977 mo
325.414 626.977 326.418 585.977 371.418 574.477 cv
371.418 574.477 334.91 594.477 325.414 626.977 cv
cp
1 1 1 rgb
f
385.742 585.285 mo
365.379 587.133 348.332 578.441 337.742 560.809 cv
337.254 559.867 316.531 516.289 355.809 481.891 cv
368.746 470.563 383.301 464.094 399.066 462.664 cv
417.004 461.035 433.039 466.527 440.965 472.684 cv
452.277 481.469 459.805 497.203 460.156 512.773 cv
460.441 525.301 456.434 543.93 435.758 561.547 cv
419.262 575.605 401.973 583.813 385.742 585.285 cv
cp
.27451 .207843 .145098 rgb
f
343.512 556.613 mo
343.512 556.613 324.316 516.555 360.055 484.41 cv
391.605 456.031 426.34 467.242 436.555 475.402 cv
452.797 488.383 466.184 525.355 431.305 555.875 cv
396.418 586.391 360.738 586.016 343.512 556.613 cv
cp
.796078 .854902 .352941 rgb
f
350.254 556.211 mo
350.254 556.211 345.918 550.227 349.668 550.977 cv
353.418 551.727 359.84 562.949 350.254 556.211 cv
cp
.27451 .207843 .145098 rgb
f
342.918 538.977 mo
342.918 538.977 332.418 494.727 380.418 475.227 cv
380.418 475.227 343.668 493.977 342.918 538.977 cv
cp
1 1 1 rgb
f
367.918 569.477 mo
367.918 569.477 432.41 579.977 457.414 504.477 cv
457.414 504.477 427.418 563.98 367.918 569.477 cv
cp
.27451 .207843 .145098 rgb
f
gsave
355.414 566.477 mo
355.414 566.477 393.418 574.977 418.918 554.477 cv
444.418 533.98 453.922 514.977 456.418 490.977 cv
436.918 460.48 li
436.918 460.48 430.918 525.98 398.914 545.98 cv
366.91 565.977 355.414 566.477 355.414 566.477 cv
cp
clp
440.258 489.836 mo
440.258 489.836 459.102 499.086 458.184 521.168 cv
458.184 521.168 454.262 503.805 440.258 489.836 cv
cp
f
432.035 491.563 mo
432.035 491.563 458.117 511.777 453.91 532.465 cv
453.91 532.465 451.16 513.031 432.035 491.563 cv
cp
f
430.043 500.871 mo
430.043 500.871 454.168 523.387 448.09 543.602 cv
448.09 543.602 447.125 523.992 430.043 500.871 cv
cp
f
423.078 505.836 mo
423.078 505.836 447.207 528.352 441.121 548.566 cv
441.121 548.566 440.164 528.961 423.078 505.836 cv
cp
f
417.078 512.609 mo
417.078 512.609 441.199 535.141 435.121 555.348 cv
435.121 555.348 434.152 535.746 417.078 512.609 cv
cp
f
410.402 518.656 mo
410.402 518.656 434.535 541.184 428.457 561.391 cv
428.457 561.391 427.484 541.785 410.402 518.656 cv
cp
f
403.738 524.703 mo
403.738 524.703 427.859 547.227 421.785 567.43 cv
421.785 567.43 420.805 547.836 403.738 524.703 cv
cp
f
396.09 528.926 mo
396.09 528.926 420.219 551.445 414.145 571.656 cv
414.145 571.656 413.168 552.051 396.09 528.926 cv
cp
f
388.754 534.223 mo
388.754 534.223 412.879 556.75 406.789 576.961 cv
406.789 576.961 405.832 557.344 388.754 534.223 cv
cp
f
381.816 538.477 mo
381.816 538.477 405.949 561.004 399.863 581.219 cv
399.863 581.219 398.891 561.609 381.816 538.477 cv
cp
f
373.578 540.559 mo
373.578 540.559 397.699 563.078 391.613 583.289 cv
391.613 583.289 390.652 563.688 373.578 540.559 cv
cp
f
366.941 545.895 mo
366.941 545.895 391.063 568.414 384.98 588.625 cv
384.98 588.625 384.02 569.027 366.941 545.895 cv
cp
f
361.051 550.563 mo
361.051 550.563 385.168 573.074 379.09 593.285 cv
379.09 593.285 378.125 573.688 361.051 550.563 cv
cp
f
grestore
gsave
357.168 517.227 mo
357.168 517.227 360.168 493.227 377.418 488.727 cv
394.668 484.227 391.668 506.727 374.418 518.727 cv
357.168 530.727 357.168 517.227 357.168 517.227 cv
cp
clp
352.168 520.727 mo
352.168 520.727 362.676 517.477 374.422 525.727 cv
374.422 525.727 364.414 513.48 352.168 520.727 cv
cp
1 1 1 rgb
f
352.418 515.227 mo
352.418 515.227 364.672 509.227 379.672 520.977 cv
379.672 520.977 367.672 504.977 352.418 515.227 cv
cp
f
384.172 516.227 mo
384.172 516.227 374.668 502.23 355.418 507.977 cv
355.418 507.977 368.676 504.977 384.172 516.227 cv
cp
f
388.168 509.227 mo
388.168 509.227 378.172 494.727 358.918 502.227 cv
358.918 502.227 375.664 498.727 388.168 509.227 cv
cp
f
391.168 502.477 mo
391.168 502.477 383.926 489.227 362.422 496.227 cv
362.422 496.227 378.168 491.977 391.168 502.477 cv
cp
f
392.422 493.977 mo
392.422 493.977 383.168 483.477 368.422 490.227 cv
368.422 490.227 380.676 487.477 392.422 493.977 cv
cp
f
grestore
624.418 628.492 mo
623.449 625.406 619.988 616.563 615.676 612.789 cv
616.168 613.227 li
626.285 585.879 li
628.02 596.164 li
628.816 600.914 632.105 611.328 636.664 611.328 cv
643.227 611.328 li
643.227 611.328 644.168 618.977 637.918 627.227 cv
631.668 635.477 626.48 635.055 626.48 635.055 cv
624.418 628.492 li
cp
f
626.418 604.48 mo
626.418 604.48 627.664 614.727 636.664 614.727 cv
636.664 614.727 640.418 615.48 635.168 623.23 cv
629.918 630.977 627.664 627.477 627.664 627.477 cv
627.664 627.477 626.918 618.73 620.918 613.48 cv
626.418 604.48 li
cp
.607843 .454902 .298039 rgb
f
529.168 621.73 mo
529.168 621.73 545.168 647.977 578.918 642.227 cv
612.668 636.48 613.672 593.98 611.168 584.23 cv
603.922 581.98 li
603.922 581.98 610.203 617.602 587.918 630.73 cv
555.668 649.727 529.168 621.73 529.168 621.73 cv
cp
.27451 .207843 .145098 rgb
f
537.477 537.18 mo
534.848 535.289 533.668 533.23 524.668 530.477 cv
515.668 527.727 510.168 528.73 510.168 528.73 cv
513.441 501.941 li
520.996 509.141 li
524.473 512.465 533.348 518.828 536.996 516.102 cv
542.254 512.164 li
542.254 512.164 546.488 516.129 546.418 526.48 cv
546.359 536.828 540.664 540.227 540.664 540.227 cv
537.477 537.18 li
cp
f
524.684 516.758 mo
524.684 516.758 531.824 524.215 539.027 518.824 cv
539.027 518.824 542.492 517.18 542.934 526.523 cv
543.379 535.875 539.465 534.426 539.465 534.426 cv
539.465 534.426 534.168 528.227 517.168 525.227 cv
524.684 516.758 li
cp
.607843 .454902 .298039 rgb
f
494.84 534.133 mo
456.777 537.586 423.57 515.688 420.816 485.316 cv
418.063 454.949 446.777 427.434 484.84 423.977 cv
522.898 420.523 556.105 442.422 558.855 472.793 cv
561.613 503.164 532.895 530.68 494.84 534.133 cv
cp
.27451 .207843 .145098 rgb
f
551.926 471.664 mo
554.434 499.305 529.793 525.855 495.418 528.977 cv
461.043 532.094 429.941 510.602 427.434 482.961 cv
424.926 455.324 450.762 430.391 485.141 427.27 cv
519.52 424.152 549.418 444.027 551.926 471.664 cv
cp
.796078 .854902 .352941 rgb
f
434.746 463.973 mo
434.746 463.973 437.652 440.617 477.535 431.973 cv
517.418 423.336 536.652 447.195 536.652 447.195 cv
536.652 447.195 516.145 431.488 480.473 436.73 cv
444.801 441.973 434.746 463.973 434.746 463.973 cv
cp
1 1 1 rgb
f
545.262 462.719 mo
545.262 462.719 546.266 468.086 545.094 466.578 cv
543.922 465.066 542.914 460.539 545.262 462.719 cv
cp
.27451 .207843 .145098 rgb
f
434.785 492.086 mo
434.785 492.086 445.785 519.203 482.582 520.883 cv
519.383 522.563 545.332 498.625 547.551 478.84 cv
547.551 478.84 537.676 508.352 495.941 513.145 cv
454.199 517.934 437.137 495.887 434.785 492.086 cv
cp
f
gsave
434.785 492.086 mo
434.785 492.086 450.34 518.281 481.41 516.219 cv
512.473 514.156 536.105 508.996 548.566 476.234 cv
548.566 476.234 550.48 463.148 539.863 469.063 cv
529.25 474.977 518.629 482.34 490.344 486.039 cv
462.059 489.734 458.973 484.742 445.156 481.855 cv
431.332 478.965 431.074 488.531 434.785 492.086 cv
cp
clp
441.535 486.195 mo
441.535 486.195 435.574 506.316 452.441 520.602 cv
452.441 520.602 442.324 505.961 441.535 486.195 cv
cp
f
448.371 481.313 mo
448.371 481.313 445.582 514.199 463.645 525.109 cv
463.645 525.109 451.223 509.922 448.371 481.313 cv
cp
f
456.566 486.156 mo
456.566 486.156 456.785 519.156 475.77 528.375 cv
475.77 528.375 462.008 514.387 456.566 486.156 cv
cp
f
464.941 484.391 mo
464.941 484.391 465.168 517.398 484.152 526.613 cv
484.152 526.613 470.379 512.621 464.941 484.391 cv
cp
f
473.996 484.574 mo
473.996 484.574 474.219 517.578 493.203 526.797 cv
493.203 526.797 479.441 512.805 473.996 484.574 cv
cp
f
482.957 483.758 mo
482.957 483.758 483.176 516.766 502.168 525.98 cv
502.168 525.98 488.402 511.988 482.957 483.758 cv
cp
f
491.918 482.945 mo
491.918 482.945 492.145 515.949 511.129 525.168 cv
511.129 525.168 497.363 511.176 491.918 482.945 cv
cp
f
500.207 480.184 mo
500.207 480.184 500.426 513.191 519.418 522.406 cv
519.418 522.406 505.652 508.414 500.207 480.184 cv
cp
f
509.082 478.375 mo
509.082 478.375 509.305 511.379 528.289 520.602 cv
528.289 520.602 514.527 506.609 509.082 478.375 cv
cp
f
516.91 476.164 mo
516.91 476.164 517.133 509.164 536.121 518.383 cv
536.121 518.383 522.355 504.391 516.91 476.164 cv
cp
f
524.02 471.5 mo
524.02 471.5 524.238 504.504 543.223 513.723 cv
543.223 513.723 529.461 499.73 524.02 471.5 cv
cp
f
532.441 470.234 mo
532.441 470.234 532.668 503.242 551.652 512.457 cv
551.652 512.457 537.879 498.465 532.441 470.234 cv
cp
f
539.863 469.063 mo
539.863 469.063 540.09 502.066 559.074 511.285 cv
559.074 511.285 545.309 497.293 539.863 469.063 cv
cp
f
grestore
454.449 517.914 mo
454.449 517.914 469.691 532.344 499.672 526.609 cv
529.652 520.879 537.395 506.621 537.395 506.621 cv
537.395 506.621 497.77 534.691 454.449 517.914 cv
cp
1 1 1 rgb
f
386.441 475.328 mo
383.395 474.922 380.285 474.344 377.207 473.605 cv
337.277 464.051 331.949 431.441 331.746 430.059 cv
329.613 411.828 336.871 376.391 379.293 371.125 cv
387.477 370.113 395.492 370.117 403.113 371.137 cv
437.324 375.719 456.848 398.918 458.457 419.469 cv
459.641 434.598 454.109 448.781 442.887 459.398 cv
429.074 472.477 408.488 478.281 386.441 475.328 cv
cp
.27451 .207843 .145098 rgb
f
338.637 428 mo
338.637 428 330.004 381.781 381.457 375.125 cv
424.809 369.52 453.074 395.281 454.871 418.555 cv
457.418 451.719 423.066 479.375 379.41 468.906 cv
342.543 460.063 338.637 428 338.637 428 cv
cp
.796078 .854902 .352941 rgb
f
362.488 385.352 mo
362.488 385.352 382.035 373.93 412.934 381.516 cv
440.047 388.176 453.613 411.176 451.621 426.043 cv
451.621 426.043 453.664 405.133 418.629 389.844 cv
383.605 374.563 362.488 385.352 362.488 385.352 cv
cp
1 1 1 rgb
f
346.203 427.82 mo
346.203 427.82 351.441 456.52 389.988 462.438 cv
428.551 468.359 445.168 440.313 445.168 440.313 cv
445.168 440.313 423.5 460.867 392.281 456.688 cv
361.059 452.508 346.203 427.82 346.203 427.82 cv
cp
.27451 .207843 .145098 rgb
f
440.637 423.133 mo
440.637 423.133 443.785 415.859 444.402 422.152 cv
445.02 428.445 438.168 427.48 440.637 423.133 cv
cp
f
gsave
341.629 420.832 mo
341.629 420.832 349.957 447.336 378.172 456.32 cv
406.387 465.297 438.5 452.605 449.605 433.082 cv
460.707 413.555 447.84 419.453 432.145 422.496 cv
416.445 425.539 404.328 431.5 379.949 425.957 cv
355.574 420.414 334.012 404.742 341.629 420.832 cv
cp
clp
348.453 418.535 mo
348.453 418.535 338.184 436.836 351.457 454.504 cv
351.457 454.504 344.84 437.98 348.453 418.535 cv
cp
f
356.207 415.285 mo
356.207 415.285 346.191 446.738 361.387 461.383 cv
361.387 461.383 352.645 443.82 356.207 415.285 cv
cp
f
363.121 421.828 mo
363.121 421.828 356.02 454.059 372.488 467.258 cv
372.488 467.258 362.168 450.559 363.121 421.828 cv
cp
f
371.68 421.965 mo
371.68 421.965 364.582 454.199 381.051 467.395 cv
381.051 467.395 370.723 450.695 371.68 421.965 cv
cp
f
380.469 424.152 mo
380.469 424.152 373.367 456.383 389.84 469.578 cv
389.84 469.578 379.512 452.883 380.469 424.152 cv
cp
f
389.387 425.344 mo
389.387 425.344 382.277 457.578 398.754 470.773 cv
398.754 470.773 388.438 454.082 389.387 425.344 cv
cp
f
398.309 426.535 mo
398.309 426.535 391.203 458.773 407.676 471.969 cv
407.676 471.969 397.355 455.27 398.309 426.535 cv
cp
f
407 425.684 mo
407 425.684 399.895 457.918 416.371 471.113 cv
416.371 471.113 406.051 454.422 407 425.684 cv
cp
f
416.047 425.891 mo
416.047 425.891 408.949 458.117 425.422 471.32 cv
425.422 471.32 415.105 454.621 416.047 425.891 cv
cp
f
424.18 425.465 mo
424.18 425.465 417.078 457.695 433.551 470.895 cv
433.551 470.895 423.223 454.199 424.18 425.465 cv
cp
f
432.145 422.496 mo
432.145 422.496 425.043 454.727 441.512 467.922 cv
441.512 467.922 431.191 451.227 432.145 422.496 cv
cp
f
440.637 423.133 mo
440.637 423.133 433.531 455.359 450.008 468.563 cv
450.008 468.563 439.684 451.867 440.637 423.133 cv
cp
f
448.133 423.633 mo
448.133 423.633 441.035 455.867 457.508 469.063 cv
457.508 469.063 447.191 452.363 448.133 423.633 cv
cp
f
grestore
349.402 449.773 mo
349.402 449.773 360.816 467.242 390.848 470.48 cv
420.875 473.723 437.613 456.504 437.613 456.504 cv
437.613 456.504 419.098 470.242 388.918 465.43 cv
358.738 460.617 349.402 449.773 349.402 449.773 cv
cp
1 1 1 rgb
f
434.418 671.73 mo
434.418 671.73 426.918 667.23 434.418 667.98 cv
441.918 668.73 439.668 678.48 434.418 671.73 cv
cp
.27451 .207843 .145098 rgb
f
573.168 570.477 mo
573.168 570.477 612.168 594.477 651.918 568.227 cv
651.918 568.227 618.918 585.477 573.168 570.477 cv
cp
1 1 1 rgb
f
448.668 567.477 mo
448.668 567.477 459.168 611.727 507.168 608.727 cv
507.168 608.727 470.418 610.227 448.668 567.477 cv
cp
f
gsave
433.668 676.98 mo
433.668 676.98 444.918 694.98 471.168 688.23 cv
507.355 678.926 521.164 659.227 523.668 631.227 cv
526.168 603.227 512.918 602.98 504.918 616.977 cv
496.91 630.977 496.168 650.227 467.668 667.23 cv
439.168 684.227 433.668 676.98 433.668 676.98 cv
cp
clp
502.668 606.227 mo
502.668 606.227 529.168 626.227 521.164 661.727 cv
521.164 661.727 524.668 635.73 502.668 606.227 cv
cp
.27451 .207843 .145098 rgb
f
499.934 616.305 mo
499.934 616.305 525.504 637.477 515.91 672.586 cv
515.91 672.586 520.668 646.727 499.934 616.305 cv
cp
f
496.137 626.328 mo
496.137 626.328 520.387 649.008 508.691 683.473 cv
508.691 683.473 513.598 660.859 496.137 626.328 cv
cp
f
492.879 635.789 mo
492.879 635.789 514.871 660.668 499.965 693.867 cv
499.965 693.867 506.996 671.824 492.879 635.789 cv
cp
f
487.551 643.055 mo
487.551 643.055 507.641 669.484 490.32 701.496 cv
490.32 701.496 500.668 678.727 487.551 643.055 cv
cp
f
481.27 650.977 mo
481.27 650.977 499.316 678.844 479.645 709.465 cv
479.645 709.465 491.164 685.727 481.27 650.977 cv
cp
f
474.074 656.543 mo
474.074 656.543 490.379 685.465 468.879 714.82 cv
468.879 714.82 480.664 692.227 474.074 656.543 cv
cp
f
465.59 661.242 mo
465.59 661.242 479.879 691.211 456.406 719.023 cv
456.406 719.023 469.246 699.766 465.59 661.242 cv
cp
f
457.723 665.508 mo
457.723 665.508 470.305 696.234 445.301 722.684 cv
445.301 722.684 459.199 704.18 457.723 665.508 cv
cp
f
449.926 668.391 mo
449.926 668.391 460.66 699.809 434.141 724.723 cv
434.141 724.723 449.113 707.078 449.926 668.391 cv
cp
f
440.824 672.785 mo
440.824 672.785 450.004 704.695 422.281 728.273 cv
422.281 728.273 438.102 711.387 440.824 672.785 cv
cp
f
431.824 675.281 mo
431.824 675.281 441.004 707.191 413.281 730.77 cv
413.281 730.77 429.102 713.883 431.824 675.281 cv
cp
f
grestore
gsave
590.043 502.391 mo
590.043 502.391 613.016 494.84 624.465 508.508 cv
635.91 522.184 614.281 529.09 596.059 518.621 cv
577.836 508.156 590.043 502.391 590.043 502.391 cv
cp
clp
584.738 499.367 mo
584.738 499.367 592.168 507.477 589.738 521.621 cv
589.738 521.621 596.527 507.336 584.738 499.367 cv
cp
f
589.824 497.242 mo
589.824 497.242 600.488 505.754 596.277 524.336 cv
596.277 524.336 605.609 506.652 589.824 497.242 cv
cp
f
602.488 526.379 mo
602.488 526.379 611.082 511.801 597.652 496.855 cv
597.652 496.855 606.031 507.555 602.488 526.379 cv
cp
f
610.531 527 mo
610.531 527 619.363 511.762 604.344 497.559 cv
604.344 497.559 614.68 511.203 610.531 527 cv
cp
f
617.914 526.82 mo
617.914 526.82 626.797 514.609 611.27 498.164 cv
611.27 498.164 621.84 510.578 617.914 526.82 cv
cp
f
626.129 524.324 mo
626.129 524.324 631.66 511.469 619.262 501.02 cv
619.262 501.02 626.988 510.922 626.129 524.324 cv
cp
f
grestore
gsave
679.906 498.18 mo
679.906 498.18 698.184 482.551 722.676 506.43 cv
735.434 518.879 704.445 524.609 686.098 514.348 cv
667.766 504.086 679.906 498.18 679.906 498.18 cv
cp
clp
674.566 495.219 mo
674.566 495.219 682.086 503.242 679.813 517.414 cv
679.813 517.414 686.445 503.055 674.566 495.219 cv
cp
f
679.629 493.039 mo
679.629 493.039 690.395 501.43 686.375 520.059 cv
686.375 520.059 695.52 502.27 679.629 493.039 cv
cp
f
692.613 522.031 mo
692.613 522.031 701.047 507.359 687.453 492.559 cv
687.453 492.559 695.949 503.164 692.613 522.031 cv
cp
f
700.672 522.559 mo
700.672 522.559 709.324 507.227 694.156 493.188 cv
694.156 493.188 704.637 506.715 700.672 522.559 cv
cp
f
708.051 522.297 mo
708.051 522.297 716.797 509.988 701.082 493.719 cv
701.082 493.719 711.793 506.016 708.051 522.297 cv
cp
f
716.234 519.711 mo
716.234 519.711 721.625 506.797 709.109 496.484 cv
709.109 496.484 716.941 506.301 716.234 519.711 cv
cp
f
grestore
gsave
476.258 447.602 mo
476.258 447.602 490.098 427.93 519.738 445 cv
535.191 453.898 506.586 467.125 486.266 461.73 cv
465.965 456.332 476.258 447.602 476.258 447.602 cv
cp
clp
470.355 446.055 mo
470.355 446.055 479.629 451.961 480.934 466.258 cv
480.934 466.258 483.805 450.707 470.355 446.055 cv
cp
f
474.723 442.684 mo
474.723 442.684 487.227 448.148 487.953 467.195 cv
487.953 467.195 492.406 447.695 474.723 442.684 cv
cp
f
494.488 467.559 mo
494.488 467.559 499.016 451.254 482.184 440.285 cv
482.184 440.285 493.039 448.457 494.488 467.559 cv
cp
f
502.418 466.074 mo
502.418 466.074 507.008 449.074 488.832 439.234 cv
488.832 439.234 502.34 449.742 502.418 466.074 cv
cp
f
509.504 463.996 mo
509.504 463.996 514.93 449.898 495.676 438.031 cv
495.676 438.031 509.094 447.289 509.504 463.996 cv
cp
f
516.793 459.457 mo
516.793 459.457 518.816 445.613 504.137 438.723 cv
504.137 438.723 514.156 446.289 516.793 459.457 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_green_grapes.eps)
%%CreationDate: 3/11/2016 11:22 PM
%AI9_DataStream
%Gb",KBj2Osde<Puf9Q@Y`uDHQSp^WU,;pJ[gDKE$)[f5fN0(7Z&t]]\Dh%)UWZI-b8AdGI8467FP<dUG;q5/ZFk>&)[r3oX3q[O$
%^;&=qHT#O6Q6lQObeJW,mIop[e]g]:9?6-`WH2%<[l9b8;PhoIC=F0Henf6gB<e%T=kopi'QY?H[9DUogg[Bf3i$BqC];Uo[8pFI
%1lmO]>`cG)dG<c:hmV_t)?<!;qc^[4l]`n=oR*LJG!pgunR'-Rrai.YDA/<-<Z;`i5$^hq1Rk`GT;g/+Q2PHuh(6"8NV\ugkZV'r
%jJ?(Gj.cI&#,?2%T.0VHDRm&Sm*s`U9s36/IVdob@>G0!f>hQ=nP]J%aQ@t'rC;=CUSPa(1LoJF]A:d3KV+g*S+G]()]QtFLEdf@
%/*Ha#B1F&Jcb'60;bSJ!E4^.4>V!65]U"Rh=a<5Ea)OfQl1rSGVtH0`%kT0t\oC,R+3&TLb;i<;k(CIDGC,@8Nrsg+.g_K)C?;YP
%gp9VX>\WJT(Rj`nl@3JUD$tAp=dK%qZW!n]hq"iF?,+6[/8Og^;6JDB)\9/V.q4dmo>L[[*o"ZrI\fbZgSf8!,dY$0H-<86d<b=q
%"et8H93r]AlJ%;B9^7RH`AuOnBX#,gHc0_o5KA?,?+DX[Xf!$P@pfEqFr5s9X::?8f?NT0[6ABI$[81#X6$L_L/'@aIk_?,..t@-
%r(eaf^>&$Ih9:T?ln#j:N^Sg"EXQekWL&qi7p#h/O5#R<mWI4i[Dor[[JL@3NJ?X:.jNiRo;Y(e<9kCrpYT<!hkH[$>)3+P[+XX_
%YLW@c^]-2l-oZ<"\W((qJ2VPH?>eTBBq,$hP=MQo]m=-+o>U"b]cfa\rB/eNe>fXGAAE:[noL+j[[Y5KnWA13qn5n%brV[1h4M,:
%eTN7^:`Gf$B)QjX3,WnC#J'4kUQuIj*V<,6o-CX4bfIFBl.k_2oZ,?"I&U5K<VN!%j+D*GhtVX!T"O9WB=#7:[U-;g*Jo9Bs6ej\
%R0:+>X4E?khEN<i3;^X-]E\hP=07ZUcgf$>c@"[9(dK7RF\k1i1O?4$H=ikC$n\0(P\b=)9)YP`CE05f+DE:Q$f;bia-jA:X]R57
%F8Uf(Ct;9!7FH@WZk^&mL\5j^F/ChTbfinSBj:/KX`mPIkd4b$+!s58B'Hc80@sQnIH-rdX!O.6@e8cE5L&;er][@4l&RX-G0T;i
%Vd1Ir4&$_'c"?KfT@-$5<c1t'gr%5s>U*:55N6&;T3*cCj-4]`?LHbf%7po5VoqZ:f$QZGcfn=\*_?lgohV8n<*AuX!t0Tc*=IOX
%1,/6"[G3se^kh\'D.X8-ebt,D#&[,TX(&!C0I#Tj%HhSh[lZt3$k2k%^+(`CCHI7(nNh08*mS*"S:N24Ra+CmW9M6DVn#I78\J(@
%4r<e>d+Lqo^Cl:dNNIB3>rkc*UtBC$5PTb3,e']G<AEYFkGmB!H<k8%:GOYimX/Rm/T:I&g"J$d.]^h:Nt."]()q\%s&Ce/m5:EE
%Au4%WA[)cC@n($N*mOC$RYP\Vb4[NcOeR-jb[8Jd!!NmCP0eEZfPWN%/5!D;<CtkEUXLboSr3!'_5<dDIud=)O8?#Yf$@9M]mMe@
%^0fN<Cp?'i@CuF].N!F?-f?..WO]Qr.lS(l9O,,*@qO`CNM\5h9jG6BAs'<Fm8]q8RQ,@ui65aDfeIU21;m-=^>-YnS+q";?Z+lH
%9met\B#_@chHVrc7bs^.Y*2):M4(X=kK)+TXIN7)>6i,fj0)&>.MI8K[EHaYP:BWiAo\:-h6.RpYZlG`m/Lt*F.T3HA(:F`fP.an
%`VSTigl440cF,8K03sRN]iLsm?krZ2)&lSp<mCc%b#aCSZLEqZ%@-t-o"G$kAS`oAGn$,EeU/Z,,k0F%q0kttebiRn&f]>LUMX.'
%?A5eI/#CjgoAj[,oiHlgN`N'g="I@[9#YV0f$jT?4GjPpd:.96`TC'nhJ*km=]XkT,?MmWQ(>aV^Q0?,b(U]!4u/uF`s`IMA=0,h
%%orCm\/=a<`Jg!t1&dAfNW36D`n4s(lg=@]Tnqr?8&gj4eTJh?@gRIa>tQ4q6C;/OJ"38A#&CASQ=JE$5d=I/*un;7=V>CXV$Sn"
%d).CYG3FlC%rN.(goKHY"7A-2O3\jgm*XtS]I6Mc&)L<%hs6IWY>s>)0_62#a:!NbJ":R!7jn'U&bh4M\#Wc\Q^-]^"Z&0)BICF?
%\=W$V9<":Xq-6t5-;uqEaG8%rn1`jQ1Y\K8q4,LM<>YK/CCY242&`mAAu5'j%-bk!?H6$Jil\Rm(9,Af331meQE-Q-@V\#2Xe0lE
%9!U5A0K/?1QM%aurUJ)#AtsX!J@k,&J=mKr6RHPajOMn*:gUp##hGsF1/V@&ZP"Lt1GWKA`b'#1>_aNU/1WJ.)gmUF?mc3>a6R,\
%LAK:P4;a[k8<2rNpe5F?jK3&1TKb'[1CH#!@X,ojJqESd=jec\CDHctQG6dfD4Y0!`b1cR@-/ZfHusM]Kk`uXKT44bM8?$@@_H*I
%D,k>9;RQk`fgi3&^I!\9mD\l_qoBLVS)nDN(gl4;#=`#8O2o]0*#31t%&q.Ln8u76qT5<(dI-gM35bZ((6?:R*,3AUntn<4#\SNY
%m1ik[poAM,I!BCfOr/'7QK9+K3*uNF8]F5Kf4TorN6eZQ^s$pS:YEonVR'@+eZr0teZKHXS7hfL;7ObtVHp(tY)8KRmB>Nq%.)=^
%C)<?WGFS6;.[Ku@m$+h]\0J\iN/\7m]9*8A2m/0r$oW:4ff7-[iOR]Cn^4GB4#`\!@_#`\=&6+]7,>"I`DsTKcb`SZe2ce&W64@5
%.b4?pfW%s;Q"#Jh-)G(QKFatm@&r&TWgLp/7FQ$a?N,hM(qsh"rNF_W.+YFhR=oGR=&EoW/nV^"5!\@9<MDn5TFrQoMMt4'@T&%<
%9(CSM?&=a+7]\<q7CgD[grlMW7c&T#Vco<9b`%JE)=q$r$qOu(C/M.S2SW"p-s;oTq-'"V\nY-$19!_<8$'t2(1kF3SKS.bf<Z5=
%P@>VZ;gY'M;6hl3/r4gOMfK#)O$kQl-5dcu?%8D[;6hl30"_*<ZS^]E;j1oI0<i'kE\5?/o"7X2?B^Wk^WS(GB-D^Q'j!uC[CX,W
%YdUm^2r*b)EhI1fmFSbYlR,=^G$Jq]q1TVp?`@MJfI\lm]lk"$(/4AS[FAt0eod_=-@5(Ul*Zd'[7oN4Dc7BE`&6"Y'=9[FCB%bF
%2?@UF;QENrg-i"?/%&PA,IDLqq<_%KOpk:Y^ZLg%.KMN^7MjrOiFEm=R"EF<RV\`?RJGH^KP.(VGGV`F/,n>7jO8Z]F6eFCo/"m%
%b2dJQ._SOK*E2pgX;j+C^!gA0H-;JXEXa[?Z*Q"-(u3tWkNk4Lb1SuWgWIqDk3-ISmi;9LGE(n!X7^LEY?F0j1U]GUG[)]+QSU4"
%Wp`rm2S&HkN%TNm*TPk?iJ`cHV(]__`kV#_QViB)s+"m0KjiU!nu]db9HP/pRj.iJm/.gGpoar*?*jH+7emtq?!h=d*B..)9j`*"
%I+Ea_G5m7P@M_%=I[,duafO)rC4Tj#g-.Kr['QjU=D<Br@D0Q0,'J3bG8XrMiOi?e*Zj+;iupclo'eb*H[)bbRtpTuQ9@?Tj'l'/
%b"?!<)](0k_>NVXj>\J1/h!c1;[bKCkr6`aNdq'&P-=)=jF9ZgQ7)LcF#]TKIjb'L!I=kd@)n_ZW)G$'hau,ff5Pk,F2$8s6Q_M^
%De%9A]p"uT35i3O3Su"ZeKj<>8Wf=>H[D;7?P+0FI?L"nOUjnYXOM!E^P4OBX6q(:WP_C9\"I>@lLY0[k3HRn]<.$a'Bn[D_Ha(!
%/iDqTD:c,\W\[FUR9uEaqfJ9Rj?mKa[,13gmF%r$K1U`4&g@.MoZK,f^9*d3\c$-:;P,0n<LKo=bLQR2ge"nNX0h&YQ1A1T=fe6b
%PF@0M-D@b;k\Lkm9/2\4#Z'Gm<t:P_-pongpn-hKVg[D,+a]NooXlZa$SnqbWR5W%UOfDY<ue)?Y-P[ENfA1X[40;Ys/bMr+%rlR
%-6]/8EMZ(SX*MC9l3V<6k=Ec\i3lui\NgA=<+%?jDE7U88?\O]]CP\NU"'N*fR79CGaS\@-@qM56f:DN//!3T-k+.'-@qLTi+3OG
%R06hCJX8sdALmm9[/k9(EQ[oL!_CG!q,N)aWP^OC&Ys2ddDU`J8X%6J3)kV2ld!mQ/t;X60*iEfb9jOa0^>!!A@XC(EnSAqV1!j8
%k:`tDZF;cMeT56Mj(KRA<ub"pj2<oPDION6j#FT+Bf(cYG%39cG4@WL^iVm2ra0:Xa"cJ#!BH_+^,3BKl)M\o?ZZ+mej6Rrq!54M
%]eb\;.DtOOP>h9YNcT[*WVieR+d:sQUENp&]tIICNE'Xmar.\4fYH_[+7h$rpmNaX)J'u8Zdh3$r-d[Rr\_mQ^X3;]Dg'h,F9Y3O
%AZk@>Z6p^I[I_aWD#a3J$-cr*Y0`\M@j6gsqtoZGYWXK='7X$*R>M'Rhj#qVAmshpP-#iYl$-cip0STU\E#09`t;S\P;pQ!GaagU
%`^g0h8K;74iu$0$LgsuS@1pTtED&BM@uRE+T>WH2EJuW/A,L[9[!"0&7HJ[dch<gH;S-%XeYm)Zq3C,tc:9Yf'qMbhC00/do>3RP
%SgXAO=)436rV,ru.d"$A&QA-<]r"4]ai%2jo2RMVjYP["ZWh6G<h#?rSP$S["]1iVIoX.H0"JFWC7*'RaVl+Z/IOAd?0u""Mh\Cn
%m6'"]EZQa'iTi8d7M\PB(if/Sf5)F<fdY_DW]6F%)`5)aBQA%<04HC=5lDL*)t^045MMakDPosF4e=sUCNoYI-<NFrNm?^3OC,J,
%Y>q5P93oi!Q[<:P@FU4KXQrjPQ&1o#Yu`F=0G:@</eH\rn#69$.'h>D#0S@XK^$lU-Y01R(rL0AFa_^FfO!15;K(R<NKu5a:!+g>
%gstbWM)RB`jsJs?`1*6@F2-:qbCCe?]/MYt%i[0O0#NYOA*D6Mi+h8s:#*:94#_0B-LT[-SXZ(QYCT'-NJUMVl29l.dUcm"imNgT
%9D?0J..9*Q=j6_bpZF:SkqTo4iVIq(in%JW0Z*0]p?)6PJ8K>1`+WtMCOND)jF5</pI\\aOBisiFZC7K>YQo`7R0__aud4>/!^\.
%EmiGs/s`O)T<jq0Krt'p>*^SEp:DfbbP:VdZ-d2%q&,N9ZjOVgb?]5WU75:3CBA.Oo'8;`,N@/5.tOs.Wp:Rb*]<n>9q7]shdIKD
%'p/C;P,#bis#S5CK"@gdB:g&PU!c&oIc.7$bP^&%X\pkeQL=!#_Ha'r/iDprG4F?@nb'DhVk:IKmP5J,[5uRG@]>N5d<`E;Zq7$)
%%;[u@`"`5M4mHS#5UARsC7/3n>k/%V=*$*<L5W,_2>Sn7*[9//MW*$)PuYYH[PZq7Y9\dDe%/_J$(AImpZE_B%ilTWGMR8c5@@D[
%'aYb/]`8a-qoG&mQbg*IC01BuDU^0Q@^,aN";Hh*.%4P<#ppQcaHl8QYm*YK/qe_jDlZ[LhPC!o''s3Th5n$qN[gI"1*8$+OMMPN
%AeD:8B=)qDn&C_9*o)m$'b8RUe&-f$g?W]aiCFIihGn@KlVl_FX0ssEeT9QLEAWd1o32mg3&-H.=t,NDEQl;;W#Nc.L1Og68'.,l
%m,Ei5_uE'X30"U3ai=TU(%hDB>rY%6nOohu98T%kiA4eapfu!<]Ns\^=g-Gdi.kXq1V&n:W\jNKObV%u9uC)sE'%^s5Q-%'>)%+A
%5A&;qVW0Z&XH?Qt:[.,pJ?#M%ee3@&l/eSO2VMp*H=-5_?0pp]5Nm<VHYDd7aS9n_N@SH#olWH'3g7Ch)#;?1AhNnfN2tb4@slD:
%[B$FA!)OV[/V]WSFP-:?]/FkLPk2XD;0"O3C6joFO!U=1fOc$Ph2pTGj9/:Tm*PbXCEN7"c.-S#$KE5'[_hFkDO/fnMs-t#bE.Ed
%L>QPO5PF``@VrF)WL#N`;N4p/+j5X$.sKggm--p^Y$0'9l`\MJYI$9B>oXgjhJO+pXh?8m;A_]f^NQ<3Mnud*5b4&?q/s2g4:\ho
%66H6GZ>doiTiRY-3</@US<R.TRM*eN7)9$kJonW/Am7>IolBUX,]<5$[.C:phk3jA)OhU]?``Tqlfl1^rnFL6s8&-cr`3^@[r>>i
%MZi-1^%#0pItP+%I3q:=[,8S/:ToS'(8e5!d;c:OFL#qjnLmgjK7?'!dBZ@Dap2os\T*XY#X.(bJ)/b^"8X25CcfQG[Mq9ANuo@r
%%q>OSpYst`!_+mZ4Wf.4\**D4GA@"*kN-%45(BhXjko<@Roh[sDje],iap>OHCA>;:Q!QY1U^/^<SHhtYdUeE?:$<R*+gMf>im?>
%r$\9]@`sc66g<+`9cB\TDK9ufV@H:Ip^a7.pCG%=[S`e!/U#6-?@&lA>Gjc6<pM<_dcJ4X'G==Cj4;POh*qi@rP,`/Sn^FW%8-85
%UXV:JUq9lJPF1.^H"\*=9_c"c'iRIl:\X\Vq-&h?-[P6R)Wm4>Eh7Tg]ee$JgtnI1;fD&n'Uu58TsfY9it"M*[=juLn#p4c<HW>l
%ZHQ4K;*(ce^%mF40jU\IK#-8X*?XD^?3*WG8S5C\m8qM+#"I(t02j:upIQ69_/JdQRu/\I':F#5QBf1)6+FF&Qp&Qo(=77^"<MrV
%3j!ScBEZiB0,;mf<Y6G_2O*oDG"MW[p<D1X_OZ1FT'NeL>C1jZJ:*E/-?%G7V<anrD;VX>%lZ#Xg&RFo(+D!>5=\+OB4>RgaeB>#
%.P+^?=N^9L=sg!@`S*%T/_elmR>TMgCI`ocgr%*#@h<:bNA_r<ou^V<FgJYD4>OsqS:,']5Qkjm#tFJEHq+9-ODu3G3fY]W@[Z0)
%,nLaicc"TiCQ'O&bb]X/j.B[Zb14d7DR7c+e2eM58d6cHfletS_@To9*9U@<,aO^AV4$(O<a(c30'2Ahfpcke[)-gfCqO,um&-Uf
%lgXNfCE5@fVu%3E<O2d4kS]ttno6OjNLi%n)RX1Df>:^octPFZS&JF?d]EGGEdHBT>+@Z,*YTp'l;=J1/Xbr4$+^h?mG17:=jD/.
%%.>'eVT?trm]]H(I\YB;m5GuTj2$/E1ulPu,tBqZSailA1NS;[^T=dP&f-kQe68[rV>J@":A^DL)"LM]qlYE$RlQu%8u0[&okPc]
%I9^UJ>Vr]g/^s&4F$"KjrFR>fIc'[ckkr_$RY%5]0/RW(M8TfK\D,R%=[j2+k"-l.?2;+'>:EY.`SG:2gA]c2F<1#?(0WBBpH-@m
%8oCDDS4JKTQLJUjZ!4;H<fT8L<f]WqDmsb6aX/RhWlILY>e[t0fR8(_m$4fu=O/3d(6"ZF8uYN9d^tBaCinTNNX`U[P=kE`dG%\D
%kmgTe'^P.$Nco<fFS)=r8iJ4ogt^A]SlD;E"RWu1Y5I*Nkp8F4>PWAPa^JUp[8X,oR=%LL&?GHTiM1;m9CrX2S\lc@gfh*lagGhW
%:[&W#LT3Pbo;5I)@cu;m-^EDI\ML"hg<IWGf9W%K,'o7G<i,MkfHu(!)l7!Q9")\ZqEoh02\B8.XtBD?:&fV\IP5#EL^r4]9mAMD
%]2Yl('O+etNBN'=/N'!Y9">K.\VI@,mG>UU-c=&g/q0q/YgkN;ep6)[]1^LN`nG!c#hlhSNNFA!BV3bk$tICql%`PLp@*E=2c$FT
%MYrFX52G[p[QH"brQ6RH:A8NE<f_H=;]ad7r8&dB?F*W4L!:c.17uNh/Rp`7"^=?>1-O*6bp=hPl*fc7h6m)c,F=_,Zj!Tk\iM-=
%Xg9Y/\qZ.TKnWtI/3+r592M'MW\cZ\<LV]EbilrgU+I1.[:S&m9D>@/@^uhG?`]UEGRlX_o$f^R[Et/9fV4m].LT4.=D+01kriE$
%c?AWjL!qh)rN]4eoY9mca^Z28/ZfogXr6)pr`uLcRFnPc1ATgFrc4i8h6.WAh^O5U]9\J<S,!0X_=&QGr]8m(ba[!Q_V#$71cgmJ
%mq[kmm,qZPhg>1,WIR=rg%kEuSiuN;e8f,]<hc,=rL$l-P0m!j3LkORjc0c-5=NYDfh<(,Dj%UH_ptGqXI$#p,Lr7YUIKM_jiqh[
%dG3%Y-<rX#]SLEqgPsOc,bkh9GVY)&mWDbbr>Zq3d]$2a%@g>]e0^QPGUn2rF8tGXhu1LhJ5-59.ck*09$PBG!4qpim<lIq]/k@%
%[5to+Df3=V[IU_31tSqSDA=X1&C%>)]s:uJqAe:ke>Ti:cTJ.)c%\A4[a1ti;]YB?j@ZbA;Vli6!L;4dXY[OMh<j[kr#)E*?RN?)
%"/r+=NT3oH=HD%+);lRt:,Wc1lG4WjRP5+D8#KZ3W#W<KZ!L4X&d,]S<QM#3Zkf'US);BOhH+mBrXsT0kPh"*HN/<Oc[329k8^X<
%JE(6OY?F$TR%NY3:o[Df]UaMB'"#-Kn\'KCNdIY\40W5"[9IJi'aMhbqF[Yt+-YM^s3c'6e'^^5BFq`<Rc$b(dA9,W>1>:"7r]@L
%e8p]3rLhR9:Y0%DgPsVH0K=S!':#ubE<_&h*=&Qges)F\S@e>W8JRN5P+#S#!I\[]g=:@jjn"Mi=1=hUTa_"?;tdgfZ1*LJj;8<k
%f1Zq!%5ek+g?]TEX[,n>[6+Su8EK:L"D#3ZgPt7[SX[=fA6=&t#FN$N\c%SHc,8*]atr\X;P'S'RdpmCHRM,)r0D-=c+QSpi9"UO
%GQaSa)RA(-n1*g(`iL*u5%P%hB9WgO+oT"?B@9:(I\MkVB*/S@4%f!TQp'`j_0q<QfI_7:>-.fYB58Z!]@,*QJU4QTZdCrR(es4Z
%fhSS7:=UP;*OMt+%1!2Z1pDlYHYSB6R_)%k<ai25f7uLFI]Ha1Sdt)bKS09aU:^+lJV4&PO3=c^[<d!GNX'?.F;6+WmFbi8O:+uM
%,#pX.;'eB;>CE`j-b[uUIB_<NrHgGLDlBRAqPSs/s%OW++':2)g'%p=XY$0%il.f#4"f(tn=K4J[u)PuQaA$gj'&9u.^#%i3)56f
%\*=9I)&=%pqFC[4h,n">_7]tE?%r!H=t^DJ+7g3(&\-WkX"KZBWMe#t^?3Q)B(b@6C$#)'f=8Qu,4^CW,[%M(W0aQ5nmCQ7eX*k`
%03YNcg/SHD]GcaQc&4JjMh7YiDGJ^O#L,6S*A1LOl:LdDlTZZa5F<BAfDh7JV4UQ:,n!IQ[3n=PpGH%7M(S:!/+$=lR%'JL9[%!X
%ZLQ5r2,^rT9'?_5C1)ANS7d)ThR4oHR+plP_*AmU43/l)53O!Rer/)4+?S1F_DW=?lG.(gGnHOKp$0=p]BMt(%TsdgY_Xn\[C%Ws
%*PC,q5EKb$Uu$G(?;0\C5uY)>0%S4An1p)AFN6Z5gcK@9(?o'B8A:+F#DRMM2Xb)k^(6[@,^X%:`:a34QlLs&NY"lZm;S*Z&C-]N
%Edo*/lFBsc"?X1sc`P`4SU:8Sq\G0'%c1$bfYS^<ji/q+Uug,P=eF$&#\.9=G>"On)>Ij>P<5qpUQ'T&!_l:*!?!ZVI^*)&<U92q
%^KOu*SYHuK"4V$[F6s/9.TLLhcA!$S[A#eX'4h>(P9eeDd;O/"#9\8n^<A=qmU5TtI31$aTsS'7Y=h^"Q0Zp1ELn\1%e<5/WD^'K
%4NsA`&W?%r+O<8L5%NL,=*EJ$.t;+OGr'$^cB/QsWE)QYi69]8kPcFEg"-I$,a!`PX3JWrD;i5Jc,8&F87al/+3dj=0kb@oAm&U+
%U30Z">p)sear&L_-#Jn+hWsJYR0R(WlA[D9=9D#Dlo%TC!TiYo$q!a;IrofVaKnpE%:7kkG28a@r:\""ZXl!1&s]gl4&3PHdQ*sS
%lTFp4.4nlIo\Nnt0D&FH,#]mI)nX)_HLYXE3B.c&]0[oWW4+]2i0fnO+jsIRTF%dnQ]-hSch>/uK:u<p>cX2^b@C_t_s9ZB7VNW+
%d*F$&'np_W$e^H\#/.RZ1k!&m_7T-"q"N)F?g-$QL?P*7\QJ+G\KZ'S5\GhNAh0\dfo!S(V;e`oSlHHG+fCj%&N.:eR'Vb>XHa=n
%8fg:Z>-"3ls4DTpR&uSpP7Im_i1>81b1f9iiLG@+(e)DI]2WQlft+fLh7;2%c@C%0pJ09-p63U9="@Wpo`jQa;!f/?:NBF/9q6Q%
%._4D7NI2dY_ijJ$H+#BWh9EmI@q)/MB.4;]L\4A;IQls75YZI;OI0/e'/SgQQjk1o4j@T)U"tW`Nd"ZKQ@9V86fl<+Q:Xg"Q"Io!
%)lr7lchdXVP[^)8Mo^iuAnMS.Ynu)JcDe>o`h_A,jKRM7kpa^uNu9mUFYU::>ti8.;oJ<$3i@=35YGEojm@tB,PMns_cFggOMLQ\
%<O1^M<bf%^?UHcCPC:p5V^A?L*&:5iqTPn3C/GW*6\od36j5q*GH^3$Bu;<WE6WC[__:19J6IJs'ccHu4nV')8)c?kl0?u2/6cah
%*fLi81N++FhC^]TenL/"8^[d_[ni&LGh:[dSl,B:6KF[!@.7cI/kh@JL7eQ6<,-Lf<FdjrC\>Rb0#U>ZaMP0jlM,X72trbnDQR.n
%QN(p/C1)BsCM@W;ns9ZoQhfpCgYS.GG<S6YJ,ea#>k,`(F8*uGRDjmBe"_QKrVDN:X#HoRmOhLtq:;\+mB`)9k3Tt>ViP22:M/5Y
%]_c`CfdVWU/'c?%[dA?!/ZZ;WI<g=r]!X6d21L*aIepR^d!FY5Ut70AXl!f\?I.Aaqp4-#0?ed.Xek<Xa/.mFrpKcRGHI2rdL3tS
%e_@FhVl/qDmp?jD:G^IRUW.V\YdW(GGjm]&fi_VSDS9ET?G$*+?F.:W4l>Wgg9!'c$fAYnr+BGb.KAi6\#0&IIT`%&>lCr^gWCU$
%=J!7_=e0kBhP8]lI'%iBpM>-DbPQ7`[SZiT]=3%3?9/?Vff_.^mETao?N78as5`Tp)2O)d/UcITg7Y)+r)d8UYME<NM8%jsCsCb:
%$P=J<jUSsNr]^"JZr6JP9J%904*1"Ig[:U;Mm'"m4]kgtqf[+]d^fDQh=I*@F/;e)&3j/:XR*&2aK'1D@52S!Dge+WIXPO/XPJ>G
%GGb2ocV@nslcp"pE,T1Qq122B$0L)m=X_cmGE3e-H9(^R4SnYH2%1S8p=r!@Zt;N^S@+P(9?YXcmqCk#]9Vm!CR&P59+QrfaS*eI
%;_umf`EKck,WpHZ^V-kY2Lk>sb&m"1I]VY=cb[lHiDS_%KDB`Qca1pbbqD3Ij8*V%l#C\B-C3b7n32(qa&G3.4M2KSW.;T4Y?U^e
%RkL*M(?b.fhK\OhM:Vn*_cIn5]?k>ph*9IQroLuVeTq+-rr'tIl+]'gnkDSp5!!I)_&o``NutQ!43LFn+6c&Z+3i,s^VBWfX-ldX
%j1Sdkc"j90iq%hV03o4WWCNHA<UmTD^Tk;]_pc;(Bg)!<:Vld'@=.hIKB9e%07Ku:Mg'(k#.ng2`#H0M]Igd&>236:gT(6Tq!hp=
%T3ekfIGE\A$2kR&5HX;)&)Jma*t#2QQbU;m=fQo]*mX-nh;2LEg:M:P*'X?;L7@9opP%#GO/!MFfB`0<X=iB\^Q@,'F"LSr,1&O!
%^No>0?1E]SoJhYa$Zk(i576/kgRY[pSXS?`9UNfod(EeAg7fV[H3neLXaDVUhKQ]Y5?YEqs'0MG%d(ONY:c#tgn0&"fSI;6?E`5-
%9eWYP$k]*Z#H\K^'=^V0earI3Kq7BbbK]s;j10*/;gU1g"`&SaPB63Df6O'cG=I20AmAK0\oW7;koeV@>^<QF?gYudm=UH/<]4/4
%AI.Q&mB33G`8&Ua9D\rEX`1H8G-_a/Eo*EpLQ,rSG<LTYnT8>SH8k9$/Fd01`=fk]Yl1m*J<\==G^4<-j'b/u\SJ5&duWH/D4VK_
%Eh7S1c\bMFA+e\JD/OLLs5Z:er:CqG;sU_YI$OD+=-if(0pm7bNce.SIeIZJhn&aTg[Y6]n*T\n@]fX4;:n)-E/V_\nK8_-G\+JV
%b#uD6'7MQMmN()Za1g>3$m)JlW9V%)]Qa*Q5kHrE6m]"Kqs_gCFF(i_0AGp[_Z$;@d.cF`GJ/Y'Kt"NaXknMN$CfeBCXMn1bWK[M
%Y$JhY\fD^8XnfrRWT3:/r)7qlV<U9^hCkb(KksCSFkbJbB4^AUO7ur'F6]q?kc&a8:BX_,c?+lV4d]Ghm?.B#h=MNN:@3+2leD"W
%rG,[5[P7_t.8O6`]d%s0IV7(-eCc9eFgf!O?b%t7)RUP:1eY0!ABE7=p#3se-a/m%iTB"rPeHteD8Eo,j44Q*Hc^`J[(_'_*a?s_
%g5i>Xmd(U6H>;\9de:3J"ML\eQ(.=0,4sk-5KUYE>O0QRr:Q17DVhUN[RD(90L)l^qD6<acH`?J'm,l,cM2OM?BYr1LgI9r"3G?J
%_VR!_'(R+l:X!epOL)b[,n(TW&pb"..Qi?bE9#WpD7%RXB\h;0(oM#g&:ODWr+e(EQ?c3q3'T6T%a<"XmVHon-;Z%p^-D?=R=m/`
%dc<:WVj7i;d(<J0f(Zp]N)M68?6]th^:JqQ,<Su>1\-@tlMer$-*MdOLPUZ`gcQXl/4)2nPRK!ZmJU$q",>_rnMjT.d!7e5X",iO
%kDT??JNc/&O+^fq6"WS-Fh(!)fDXk)e<Whkn<$K".8G.lAp_RCdS%k`nnJd(;fCdCh;&<emOhYgdQ[(+0DELt'`)X6\V.n\7#d#$
%nfNf+i,LD6h1LE9B:UE57lHO]:E)'1aWA-_0Zp[HHV%3b;n3c6p:])UP:Q_O@Iirl:VE.bIUW-0Mu)_Uh9%YO!IISqI`-q$=jR'>
%eSd**cE?$6T8-POCQUm_1UdY9/0?LW^\N&&WVUaM@AS)@j,Vd#'ZTXs)s=gpBe8i54hEfFep9J#-?XT`k2$cfKH"_$rp1Q:*e2DF
%\a]%T<4m>"g&/5Til-tt1eW`gQ,7-]q=VVUfB+^$D/J7QmX<=^FtI<5=gagrR;]-cdslf@a1]g[W4k?".8=_F>R[L#R?VK$0CJ6]
%=737SlU!3.:sV4CGA\+cr>E:DH$<t562iASi4-5LfFun\Aq1C54Z:c6pi>uP!XJmY+tW24qHobZ%%[h/W;k7jal']H31(!:%%%^K
%]#R2;HJ%muU0>;,9\87jm6cS%+.b,@_X1)uGGo<?Gd+r"4K`=H0#(Ksma<'Bm4Q+Upj@S]c0[0$L<@j]@@sMk].,B1O+S8EjgFPc
%Yrd#G4>;&l"GQ]Yn6KmZ]C>[a$PIg?VBVd@9$[#gA4dpK_>Rmd4C,#lqk)P#T\";AK<q@S?8"N+]Nq4Zp1>B)NtVCJh0s\Ja)2k]
%R.FYWNk9b#%l8]:Q-Idp<c-dr4hgs6/o<dtm4>o`&Z\"*ID8,?Fm'8@%QL'jD_<(.H"3-ghUsV-n0Lj=kFi%p%pqLC7qH2V9/apD
%r._D5LX)Y6h*3/?Dp=T/C)3-#H&j<n/?[:%r0^>M$!4lj\US[CV;B&^FDf,hOiZ/HXbWODYdFCWn]f&T=c\V6YE[P^a4l;,YI<<(
%,r^<us4u4>DVVM6_p7\)[=4XL4`.m81f(g=CsQ$u^[,%NCD+`o?"c,,hKlL]h`p'YbZRa(^;0hTZM*:S[FF-<Nu+E?HC[LJSpoG*
%dBa=T^D>h>(Gj/T[_3dYC-fM?Q0F"b+4$R]hS2#:Om76g%a]=.:?H;4F`lm(N<A\80$Nd5XY7>:oAIp\_1Sj>=i:"rMgJ&tT*]X&
%Rot3s]`1\PmB#*u=EuH'PF^Jb>./;7"GJpR&ijP[CaZjN39B(8S>$/@R(UDXhGUa]%648>o6Jf2^@Gdue;tQB!NC(rg`U*E[]rJu
%k!b9AbhCGRGQb)A5&R_800\*$=j';g?Bpl#8+Equ_5TZ?SUY*#00Qor`bD;ij)JB,"qkd"s2^h7I(N>)WHu#CE3Y_dZt[mh3b&bJ
%NP+l5gZZi'cI^gCM>[;k$U5EA:*h7R+H\k9_838.1`>g%Cs`1(m__iN?=^tMq_PkZC;STs!MI=(09<SgmC@<JkM;EGb1G7W4+p_u
%TR6D#Xcsl/Iho\rp^O4>pQ=A9ID:,M@K+C'43MD0e^'0Q]+=_SS,40%L!AuiE'0`KIek?q4LE;V1k6/?oB>0(g?8/+5TlQOKlm"c
%<^6/Mm5qec<d/H<q7+(-;moedDG;cKT=Qu#OJf,_(gcRd4s\7+s-VQQ[<9jZXWEn\c.:$iqnZUmhI4*XG8@qG]Xu^3-a-jSA_t06
%[+AA<+jg43I\u:HGAgT!T:aEp(l?Ar\F.Q/H[E*L]5M!gese:n/q87l^E7M[rVQomR^k)2c[QGip$R;(W\jJH<0t/<f6`8mGFO#g
%5?D-YDLA`]:&9$Ab?t5=oVd3<0)BulPg((K]%J:^o(#'(c'.)'e"p,=n"-$^&C#V[DgWm&rF;$lHJq@$2X4+>Sn@a\^2^saP<S;o
%ViCNs#Tg,IGW*<A>PG`0=VpYpbo=iQ>Mg>leN[sI,i@JE6N-FXURr\!g-G@<2bM-\bIr[SiUuQ[MhS^\j"r;gg?,:KRPSpg)LA(g
%IOW$8hM]-3>kq?5h`3Qjnb;2%D8H?]58G.BYO>uLH:9/H;>faP?1NiR-Yk/.H2K(0qajA,=BO6/K^gDLadqP,2_>k\d2GXGZ^\!g
%KeN>(9+1WdcYbnOf*_&c_a=AUL&9aDhJKG2=6Gq).<7s4hu$tmp3gM%+ZaN/E%&'=CWP\Ncg+$*ZuM1m=2BC"UWbs)]f^W13.1Q2
%p?'Dn\W=jI\YM)a=pXZ5+W:*)BAq\'Fsf0Bj5>2q3PS^g=dXX1r@ir\l!N2]+05&\:#.)lp.'[>gr1MDLHS:L\+]<ao(AK?mY[@&
%O_:jZbKmo2>0GC,X"3f9DV]b7')D(<imI)4r`Pq?o*:\i_bU]6k3ONpHJWMUE8(nipU6RP%pF<MWNE\]qXX%<mF<./(7I1s[[6_,
%c$UVDNQI4Kha;GJ_s5\,'=YT5N.1rJ&0cKPcti=*L[S6dnIH.rT0Btp+l!Y7'"KU-qp\6XSQhXg/&-iAqBrYhLZQ\V=#^h`#@/E+
%8JAZ/Vs[!&F7)2BV5N2YYO+cF]^[A)$hKF?Dl,Ii5tCQGq-e"^Xk*-Bi:1#iV;T\4GQX4>pN[5B@T'tD3no(Be/taWop(\IVcV4*
%n+E*P]7k4ijXRCMa,NE\YW$^MCM<EK7-BOa7A.fWT7-ON-/6"Zk=2=#gEZ[.2Wnq-,]7P.Bfg7b$^UBpoaQc/2f#8^Z0<np4?NON
%3_q[7oE(/PV]Q^iS:3;Vj2%MRT:Vr-Ls454`EKcjM`hMDL^(poK_IQ)*LjAkHh5L8f6"+Rjg0<b@]ahOm?F68P-gH&hd+pCk3o2;
%]abq$*t#Db"Z_R38G6/>c,P'VH2@2pZ2mdWSV6>NHc*%tZVpWEpd1RtNTTLu[/'&F!r;A&F.M.O\\4b"GK@Dr*crQ'+&q`mo_1tL
%(EBUr!&WipY<7&XpArOtf9nr'*l"NLpu3(&H8XUKeb#<kmI(kRCTI3X!<)P'>N]oim,]<^Y?'Y$Cg\;HDLIDSM@up&>WnO%F71>9
%Qrag!2eV:gl^D.\410hE.EnHn&:W8=.7?s9D'[PB<i;P8]N_]!*jt,[ZZhFclcje@=$Q\(`:/pIoTN1L=*8ZndI-ORb!N?/rUcu^
%N'LdgRbR.-R\pm?j8SVee.YE6R3`)8NZWGW7::LYF`h,bKRKo->okW<!IMgK'CZW@Opo$J#c,\Z/8S$6d+[jDYP5\aATXcuq.$<6
%c/em)<")M.);1p6A^NRjQ\0L#^V#KA-VMdO%R-6ZJ.)(k_YbAIlgfrMo7&$2kL5ImVl^a'X=VSDGtWrMI.P-oVLOh$l$k`>1V@p:
%fW=o;HW5%U_a<\GLHh)34EjBnD_<+*e#oPR@,k1q^!ir*Cq"P.l-](9+8diXh>+Aq4T9>ML"rL$5??rK9.H0_Y"I3.;,=4@>3^0F
%gj/C&+oGi<M\1c.02(8)\M4VnIXLJI9K+.V>:u8NB:\&\NQ'V1^&@T@V[moRS+^;Mr[1uXIGO:lIf%PR5R#26G+N=2e(Yos7XDm&
%r[=&5aPOh&pU'd8V[E+QrDoZUHA;@_*3iL;eSXr;qi5X_f+-'aa4mELhK6>Y<CqOEfR=cWGGd)X>kl$.bTFOe$$0RQ^V)"aF_nGm
%f)2T/<$7IhC[pijp@A1I_p\JT`tsYfBR1-Jh5PuFhR*Yb3cF`:!\*bG+cNg2._L6#%!gJ'O-g6OLSd"[OKGI/Sh%NnI#!XWE96ua
%eWmXA?2=?Ui%=2bR?)dmIgb,Irqp&ec2-^tk754PY<CK>.0]JD`L$>e<Q"[eRg8;aT+5AG+Y<,'oe&i/X\UH'+/Ad'n%CfH&qT?"
%l2AKmEpJ2Dj$iL[,P%M*aSVF8HXE/!EZb+H\_YrV8'>8>+)e$p/K'B#J$M@1kDeH7=ZTY5cRc9MQJS6c!LE?>c^Ut60,>e6c,Q[G
%7VW9V,3V=e,HC61rKZ4+'u-drHX?XW@,b=W,Ma]6ngW_j$[^=)<UPjmbcVYpI@i.ATA8($rAO>f_5@!Kq>$"5X%T*'I-9hNg?WC@
%_<crd]>RET<O!bTSEc*s(';FiJ+r.9J#;9(_<fE"RAuSNGiuocb6Kch^'E,oQaU*KV8pnqW4-u2DoHWr52V7lhntX)g7BIbTDr*I
%4t*g)jo7L3f&-/Oeh-J>mSXAG4nC0/B5m<:6i*@fD)=CDmo9RkMi_pEAH?H)$b_muo_--BjaB27of8D'qHDjWn)W<EQhGA%`p]n1
%p$l`Xq=^Ma?V7\H:+hKHpnAu2a3+3k>i5MY\#J1mkn#e>j"T&1SSJZBc$$k*S@i-3cHYKt*fuetG3FdlaZUZ;FpDAFj=`B>p^<<#
%Nm/pp]AI[O4P+aDqS>tAPF.ET7he>:[pj_Qd?bs9j,mJ/qrlrG,5`=@,C4_-bI[]4kV(5L?VIrBhg\j+I=[Mn[.fc?(RemXc8`?r
%J%O9lSU"[+r*+A_I2Dq(hp\C#`=HAg"V+<`^:9$g<''lt9uk+Uj1Ca_B%XOe:U(Qo["QB#*BX(QeduoIXg[?ee/Z$kd`BTl:>k;&
%RN+EMO(33gRs0ZDC(#X+(!nX-GSn]8kCT/9Hk_biE1?6K(m'1jG-oM7/Ji765.p,*O'<dBM4-fT%XD>#r8P<[>2(Ds4i^9c4jV"g
%Sstdh][dCj]]V?n_$t+5@X>0:7sU/E7%9D7'3b>o+3$K'gNf5t:EC&60L?`#Z5lB^(=A2kerNiZb(m^k.8e$#'S'E.cUTT^UhQ\d
%^r4l&h@49BfZC`8O'pE^"F,`0#"i\^,%1`ZI@!HRa(3n)+O/CO@P'jZjlL?@7;YoY_NA5@F,B*_8I^O+^nt]oNq6*Z#>.pbGAV&k
%na3,4bgVM=BXVWdA.C_*0<CZY75>*AC2CN;((eeKl"474$E_Cq>IH(AFU1-JF+jUC:!>,!78?%,]c^BSU-dUoV:g$?>$`Sp2P:Q0
%7MLPOPl&O<@GV*F)U_fEZiuir0H_7O_HW^(6KBY$oOne'FtK-mgZB4n_EE\=$>Eo*Feh`=7W"_9X0fg`9H8`89TpI7TtW(dnue$:
%65*&!8[;orAK`Tq<5]/6"N3#3o10ocQ`$+9[<N0PJmC$KF:Li0n.c(@G0JF&Y*]V7\%1,nVqYH#@n@ai@ioKmmhrqI][KS#8uVj9
%]3-SUQ);QfSpi6OfMLc-FNf(=D'VNC8t&,1()(O#D*JCAC*_'4/BfR15i,Pi9[h<Dil$*i[XD!],1T)!hLu)2S"7#RLuiju`_Q41
%W@@7lI2&W_TO$s+o%>8nSu8XXP>k"J30luR64E/`AsR-5GqlYjd1-sZ/X8/A(TeOrA<=-3\nU\?h<SsKO%Ip%R<F:"L&*FRbI]JX
%4DG@J-"pm]*D.7W'"n`kUq\*Oo$dk0%?rU,18GYhj"M6?j?[XThW9BC0`<WY23cK0LhOY=>haio#dqn^4!`#qSZs]+o+V$S/!eFP
%c*!/IUQY>DRGe`cB1PA:CssGu+%]>V\j`]]UJP0B;JM:bg@(d"\BUmVaY0r&pdnG!%$H=s',=87J_%n!qjrV%NG[YD(spYo-I@JR
%_If]c8]A`a)@9I25Td@5*FT<"/f>16(3-_G-hANX'F[rsmJA(0gs"K2$)$sO_&tUf$#kcmaK+;*\n>k=J2)qGGjH".+>i[`E\f9k
%e?MY&#@#*q]4&c]a!1n3*GGmqV1j6I'lua'8$l?bH>7M+Q4uR-H\!"^[6NG90*q5j=tg4C2;9lJbRk/HX/",<Y-4s<GH_k,^<[.<
%d%0N'k$@J-%JGBMRWr;/;%cGY$;@G:8t5H&oN3M8q(h\Tb-9-iM-`\U<X:!EB#QNP+YC1WH<;RS#^BC_]F#_H;bYmJNMMJ#[h3:N
%r^l@m=F=kibVYLqLfJT8A3$rh0]Sje8X:c:WbD"CJa.<.<+\kb&=/XL'<*"\^(t]$>HFB)eqC:V-+9@;8uTfXTc5b*.AhLI$:S/3
%3l"O2Uc?QgBQ*_jO%MWjXJKD>gaLT:C!thQQY)CdFGSa8gC<&Wgqa-?<fBG;&P/Yjpq0-?5/;@)k/_,i7Z,/2bE"P_i<1)g-k0q_
%fL#)VIZt6Z!:[7mZIFo^*s7SeKb+ek+dkEq$X51&W$Db^J6jb45tXXd%h*PjZaHKp'gN&S&;2*?C,0^YE5q[1a.u25)'ku1PZ3_N
%AuJ29`%XB;k#c4%ZNVJe/Za_1INk?c`tGB0-IQ2.YYP(G&6'cf*P$"H*SPR8@%`YDBNsim`).JWU[V%MDXg*$pg2$7KY8614<rO&
%=cBWAH%p0on06OUH/+AnZI-&,VU97>\`XFF]idZqZU.W+Aq\?jAheqjBk5jqq@!D#1E9J-`.Jal$q+g0"'u10JW=DM>24XJ'6"<j
%X97Dq@g/Q8Fi/GcJ\.#EaCcm;Kc.@*D>%]60GV%ZM9TW];YRu9'cWm,4:f)p"sV]rP=!.*VMiqaFmri\($Lg?2Oofqb6T,F.m^0X
%i^EqXJc=WkFj!XOOp#"pk=/bm)g"g!&V2l@&$TrQd3F1C^m3_$-3B[o'guh64DeA%B"Aug%1$"ATaq,6NH/O=^gh\n(j=XXnRRPM
%1+V";<lYm088X6$\;fIS"YAc7"XM^;9s?lnWQKi*&8URHAVftQY.B0PTXm6BagrgD?IfF"!P8MK,K$8<b'+Og!K(!Q:)(7t8ldK)
%>T*^8<$I%c-pS=P1[es=mYgN8ZYl4VlB`2!Yj%in[N#K;f]mC+I+S-O2VA5Z@cr=76m2%83f8[Y.#&Ij+G>Rr)Q@<a\Dim2,.G2^
%ki2o`^G[5cSfqg.e7ZU=Scsn$/-9YscOl*]P(GUb/qKLb9pZR3WIG9RDrd7Nf#X+.Suf:'O:bj4G"&NnAUm)U$O^N6*>u%O;rY0q
%:g65]5(BYYa!&F_MZ09:$&kS_OHh9(iT@?Q3i&-PID9=n\u0.Ag;6\b&GS*Ahm/SZ7O?G9*70lGTe3FOBM3.N)f^n!l:uTj@KM[t
%Mn\%,E$57SrkY#%)&MK_o"n?WE,i-Z.Wpb0)a0P.S+mE-**eq3N.q2N-pmRF1>s#_hkEi&4bZ&8ImFp+\$%$j.@F+Jb9Lna"io$Y
%+]2X<$p,4mN*]'&Z<qpp>/??OLUHbV;itKf<#eEfKF$Lm(kRl<q*:Js<@P$4WN--IfZhrg9Le9rS&i"AG-FARY"1H\_':<7c<,DG
%047dbA&LmL`=E^=7h5H.S,>+OrJ^Lgn=LO;$Km,V"jpj7*!g0`A.&q[OKRjP1I,K8cG83OF@Q[iIA7J++;%R$"$oeh5d#\`+Vrcb
%E5_e=[ki,:?\9L@\$=4>;&@06AjjA;VjUQO>*j4c>ThFT=DUdKV.\JQ4ARH`-3@]aGe;JXKaJ7H-4M0)9id<eK!?n_7VHs?FJGmT
%(rO!_1QOd7908Bi)g;NsJ!'4;F<#r#=@]$@ePHZ+V[HJB,C$qWW$"L8gRtCbTZ2.'Yf?i24])Gc6R`.NI"4^.^^jBF0U-("aW<Lr
%,X@\]g.o"j_"-cqX5ccr_U>ppgC@;2P3N`-$Bu+.)Klsog'St_M"]:nmV7U"ZTT(/_Z;Xr<hV+-`tOG9.3K-E3b5OL"5gn$Gb@7@
%"$L$;NdCf[>6tOs\lJfO[VtER63^,6lTD1Uf(_--a#LdbShdd/!-b;U*/JB@.G.(YbKplVR\L;>ePXVr;,l@\@05!nBS.Tq;78kI
%!d9^Sk#%,-^n@YgWiH.4Qtk>,;6mPa#rXJd`2:rn&hKhd:8X?(KS;r/7t^tK!l>k%-(PZm`<`_V[Z?Oun<DXCp,CY_E^5J.'%mn2
%Yp2[NrRt?Z?sNnliq:F9daT_3NEd-["PsqO)?RVW.WLJd0^@p*.(d&ZIC"g\loS[l+u9CrC1n[)Je$_+"6(8+(o`Z(A/bob@-7l8
%<eV2PM2$S]);@QK&_#[R)H;bJJ:qGKOVqaJc`,`RnqDbK9XDT++#Dm_i0COP"F,#EfT:'L$fI.K%!!OdGhU&)OIilb.Uca'qUZE1
%b2b>@1<m7aQ[ruh:EG'l#'$9FX0)5Z%A7MBZLS&IiQ*Lq$1SZ\fnm;=@2(.c@'n82$@O1aO*,Y,<(W!7FKg=(@?KpW5>ksY827>-
%c6I:a1CQ[k*K/Gh]E62O5W`.!,,05t&]1<'NQ(OLPp&)GI8F[9PKh::7gD;\7sMA*2fW><c5hZEV;:j/]99JK'S0#T]ZW&:"WB\$
%^'G1(Es]l>Zujik@uX[_)1Xsk'*5bq(8*#_(c8U>D.?F"in?jK(eS(:,u@[tKP1tB:LFIua:eRHkt9mNp5H,(_2EGo=GR/Q4?8A>
%(#_G9&e13<r$LKg:1Wa#+gVg^,pVoRiEUU1SBS5@VFMP>J4A\2'0Ld7iCW-N3iESGqK^bUn:/[+0o=mg+=Ft].q?H3(/VeY-U8T(
%+`\]70'L5P4_CE."B0!g)T3Yrk8o/2'6VH,O$ta#4iiYXVJq'k3#[CiS-8`f\/Y5DTtG]-FG_'W`qQ4p7*_fCU<]uA]$r1\<04bV
%H/RpRpfbnV(CF()7uBRq8>@@K][F<F0l\a+0RKP4Cpg/V!sW,G2%B8Hm)iIo/t$;7.90p"eA5$;e"h:9GD5B,qt&u*NQn/$%\[[V
%*lQ$*EPg/Y7Vg^g)k7%:=W@W6W7N:V&Pj*@H\SKBAc'O:^NmAV^N4os$o3/ZL3kbXHODJ<6I*2Jp:JSs#\-ILa'sGT2ShI5C0ZpG
%Qp1^;3$P?<!)dfQd>]H7m%<[\B;MT-BsX!+rHUbN!*S&I&eedXV<CIUg>eETn\%'&"MIrJ$asQ<OX5P,GYXCTGu(dgK0KZ.A%rCV
%![Zi"U<TUHOkgDKS$T\>AeQVTK1Q4fi4Sn^`?^J^,:'m1E"Qf$M-N=4fP<b1;k]B)[JfH"0Z"&mM:k$7eY>$`+df#IN_l\.4I8\D
%CdH:6e[@VtCWi@td):ZtXYsRk+=2q5!g%0;2l6mS$%O2p93\0*O9L%EXWFC1W2hEsWLn7KO2Hp7IW0]9[M"u0<+a0H(X1HH:nT.A
%VEPc2/Zu=j&Q5>@2L5o,Q*sfnGj=?9JU5QEPDi+QQk9NQ?t?0EUPa1.&o)SG8k*\El]10H4&s'Q)J9;]P)cDp,^:ELh+<5DVHHt[
%k+!CZZPdI#%t=QGrU7Ll>6okp*tXBOJuj=6F(qI(-uf!Q>l[q;>E%_H.;D.,>,2eql9OFN`;O*s3D+(7(q%&KT6M]cA>!f17G(@m
%h]AP)J7GAD+#p/kAlo'`Ya9T"B1Nr<4tegJ*,C?iT*%>m,:.E,;8#LW!Vo>k+bE]'3H!kHiq!H)G#G^\)-0GRON!;3*lJdKGTRi%
%E`qa#8HQ_*hmX\)Qcq@826D&,r@UE-7732&d_*:IEAEphPhLp0)OY3l2pOF(U69%0:dBA"I7Pkb`P;ctRl`l"g!Wa'BRNF_m'VRE
%8ckC:8i#c>du[!eqQArdfa!kO[X>'83AIdU&Q*'S3.f=[]HD7C03084A8`L]1BQ5R>fe*K[4mG7S0@,50J0.;DrhO\0^Y@8,%u5b
%E:thoVfU;4KE,D=3#p6>6-%N[JL"H07s=0S`r4Be+N4RtfDm=K68eh:TH?alcEqHR;^,QUL6u\lI2_>?6`n@<"icBNFEL=9#13IN
%RmSc-,\\7B%grQr1mVX>T@ajl^hhaFPiGq'Fq]M(53FIoQd0b*eJgo5`KBU6%D_1*")P6c#c+5%0[atG"4H201."aj[<McR(FmdC
%kMG]E4<fB-;4qVB8Wgi%i,icWMCtB0gJ&fc-WoG#j2,X23Ci4>G9YBa"`$XoKs>V+mFVP!OP#eB,iUSRPDKsr2j$J]1E(>OoL5na
%S5\kujum(=_k\gseOsj3fWU,@0]UZUCgbslh2mOl>$-96eKJ?RKr'S-86jS1!DT;qCm3<=O?/_E>cdc2F"+7e+.=h<5hS_2.Md\d
%UiNBGp^'9JP)(mQRRu!_1*-MMeQ?3DTVnkKbs^oeN(9+c$p9cl"O^66p,HpKn5![g\nn62';&pP&Q%IXFcgpt5X?#)6ZBpQ:!APH
%2,1%!piaGY>Xe^`XU)fW+&k':bVf]r;5FhM-L<4E<mh+K!HFF&bN:iV$3QAY!eNU6B2"Wl0eX#ofg,\_XIpN]ZT2o7lD6HFbBdH8
%i[@]U0p8]*e,j[Y?G/XfFijA%+3"oMZQrg7dp<Yf+U<WW/MiB$+=YZ)fpg/88W#r/0=XEm\D&PB(4.iW+OEEsl9p/"")T6h.$o!"
%5Er\i=GOb1%7tao>L!k(fkd:']T4n(UcE5mhGW8>!_!lU*#NHG08-%Kf0ePU?#0_B=to#oM]uFI;jbVA%p"gg\\oM.4Y@R3-Pg[3
%9\W,I.1jhq84>f0[X;9],KQ`q>rcF6nU.Ub#tP))PeD$Ze<<P64=DhHH?+[KT_Y#D.&koe\DERpr(nC=Mt`dr'6[`i1<qf:Af)Me
%Z3j^eb-pr=`g-^])G`^iQZN%m^$A2800m]!hM3\6Je>=&8@:5+9fMOom-Ps2/9)$C&gq$gp'o/c@h&=A^Z]^:hXtDY@G3UV'4kUD
%`/$NS<c<'(K&Ylj6k*XqL*`+WSScf/)YlZU2^"R-n0Fh1W8k3(9r:IA%cqn>YTm"Q<tPHG(La8m%H84WCj+Z()("D5E:+rTCW[p7
%AJ%=kfu!EUBc,GY(88&#>W]);^OYL%//`MgfY%uW&292ZT&lCTM&csV&uG\^!f]:pin2*Q(2q!3E0qis^`ccl=B;(b&2:_"dXZ!U
%(T$aIl&qH(8s(V]\9O>B^.523>cA2VA>(Mf9's-/1s,Ksl'9m[ab#aiEbo%H`]78#aaWG%p*cmXH]]n[n!V>iaAF=Z%oJ\<G*LKG
%)aJJ?_Plure4)uJ0_T'^'%%,i9ZUR6V7D&.+J<0s/YkkA#^b(R-q>T)0c<dEP0b`r`J?);+mQAdVKLi)+=XKM)]O78eiNjCL^J?b
%Rt0jF&sGib,SlaZ#,\!>:7kGl9GIiAK0$]%fQ2.fZ_S547QQe4s#rg[<TB)Y3HfSS;'RWk#h4PpT.o"sJohu:@krQU>+pssejQ.(
%<a%=XaR6C3:c&3-\lFCo,Zf_&-E!BuAN#kdU5Dt2RuXU*JNcI2bls6/M6^>=,^h[>%4f:UF64BTHh@\3nb"lVV[?.]3Ecj,2>FFA
%$D5!:Pf\2UKYtbpN]NF@+9)sS4c/JsW*JUsCosZ"6def&;(ps@kF&9si*mBkV!^dkntA'o+YaK=.N)H@>L+!*TO(+YZRC))flEiY
%9iPL;$FH*%(\/rI8A,^EiAKm6Ect<36Y@gYCn:_G8TrB(9l<M-cSC>$4-W>k.39$'`eR92SV'>AWE&71!`rA:(^T)HR'`NXdKA?d
%`5J-=%p,tp;L3;:VT\)tmI.g/\Z'qd&+>#Jm7lm/FShmU>BVW>CtZAOZ/pK3^bT>Ae1PLpM<0O6TTt,@adUjJ*6TS%(BrNVe$Y3H
%(.i"]g'YU5@I&_Q]hj_)UJ;9=[N]7m]hnB.m)4iiW#7GoOmE^0\jig,79bhc:N=C%*]-2p2YSJ*p=!s3f"cAq[S\-T:"pO470I>I
%a^-48)N[[ROQI&nhD9>*Le!9]@3K+-^),qu!,:AYPTP%e6!H)SA0IU.BVrj]+c,UWVBuS(!&f^j,C%UT_Pdnki$&soL,'_?39aY&
%QI_'mQ/]fl4H<SZqMgq@YN#Zb"TaK4OU/@6F;mjc+E?ae8MNTk870XgY8B+)EUX`o,D;&>2?tPI1ggTNip[76S50N0%`4B#UZ!4e
%8F3RQKW`D"gFg&]Xr7'-b)k*K32me7Sd`PuUR9BtZ0"<nG)XK;-]e?PEatVm$\<I$nnEiq4H@e1j)?T'F8-,_5X0si%3IIQjNZh8
%$SXP.CasINfjYOPI[hXi+>:S4<6PWQN_CA+ahkSlnj3,SqU-LgKGlnp$fe<\8M>:\X[@.KTZ#[+,j+m_#]Ei3l8Sbs-r'2E;0+.G
%E+2Vch5NJm##:LSW:\\@"]&^No,f.P(S[?:F,$]:aC))blTfm=O?[t/GeciSiC(m=l39BkrsRbPHTXAL(W93CHV>e,5'CVo?(mQr
%<:kE;7`$aQHLMThoHS2G!'sN?!i0D7j@?d>.,4FAN)E1Y92l=&g_KKA]JaC?+)!>R0'$YO)SI*LJ'X)Z:m-M20h[XbT[=b5bc*cS
%T[8F+^hmm)<IKQ,-V@H`Nk$YXApkZ,pAs_)jAMd*6A/J]I;5WBbnD"h3*#^,CYiTX_OH-2)$'b'er"n>QP9W%-0]9R/TZY?]f)(>
%jp`=R19PK.ON-`V3!riVGIMkTR8N'oQ<GfD^,!0n(UYp\F4MO/!M:dK<8jfsZ(e$g'b40(bSc(1](R"A6=X1N`FLJXXsMlEP/_<&
%AFaQaVibE78\I"RP/U4u:C-tdhs.8%`0Sr&Z-El`.&t73e:\WQEt*Ui;^QGR'A:2Z$IY1tW/_cuk"Sl#:L;h);\4+4NO<Q;Di_hK
%l&;>$;:j2j4maOH+Y5!:,OR*g\Lq']j32n:;?\_?>c9u1K%,f*&;3#BPmKgS2AW-D#VhFI,9;R@eFO$1Ve$1ak!Vb#6p>fX4m:gC
%.L<s9ONaRG`(^MR>d9H0&3<-9:?2+5cphCs!,)ss+*$t5S.VEs3<$n:&4O9c=E=@0*D3dWLL+TJbs9)[!`?Vu8BbD)>0Md.f+J@<
%i3GLI5Z6[1g%KF=%,3A4,1^:Q"s$1A99+1;Ja(0#2M0SCn("?uDmRfuHm'hGQkseAOc>j4_C_5sL$O=f&Cb/.I!4"JF<dXop_TUX
%1=eCk"d^t"*l9;0-Tb;g4EOE(LS,XgX?<Hk=6KihALImNCuaN15(a=kS+)&GALEtjoWe#h@aq(_9p?2S_j1F"XMnZofdNL',]Cfe
%9^*cij$VbNN];u,6LRs&JVb^`*KWdC(YF>bR:_[l=eT4I+8I47;[E'&!2CIRQ>0>:^m2T)>oc@#I0L]]G!PIop5g?5>hqE9"C*ld
%\HZFXQqfGN.6mtiJ:S<)!EG&pka443.[C5bSfMo$fsE4+m'@_N#uW)8a:8B;c"FGP(a'_D/&8u12G4Y\eHKc"9@&B*EBaY[.p\Q!
%UCO%\oT2&T:3V?sEPNWnQ\#Q()Q[&r<Yl==>7a1h2QI4:A?dkkG+cI@c_*YINajhYfuZ_2(.7Nr='C9WZiSh`CVn%'<=C,@MYE,E
%:N4GZ=@G]PE;%^g%aU.rN,I(LUgpa[%3%hV(iQXtC,"I/b@3eW#FGmOc/+A9$0iEK'bchrZ5!Q!cl;of]j.kL`27iJ5Z\U&@O!($
%#em`J99GZ4[3dsP\-[ku,7q#&M(tMp`_[i,TH'EY9+F((:CncpAWB"WY$U("i&Ck03(-(`ij]U;Kj"<d==$b59n4;=7g^tV=5gJR
%+Wujb:uIh6@!=sj_m._C_uVm'iK:6G01;@'-mf-en-IqD@=2H&?j:1!Zo>>WM>o^M!$fAGK-O5_dD1=r=UB(H!i27?6.gJrE*F%a
%]EIrc)?"XCK;ZaaX=`H)*!\`1*X>=O_<n+BN<Qc0/k@ZHK1mSP8L3F]M.j^ei4)Dgr?:\Q>_Ed\4&@aKC<-pZ,hHJc:"rKd1lD27
%13+-Emlnqfi3;`?(WK\lH,fMF4@uD)G+u/2Mf;<#gDo)Zo!WLfj$4Xj"Hg_nP_Glq32n%G722eEp)/"WW^.@0a[0T>@pIZJ:Nahr
%KB,*#8n9X#_)b^^"SEaSG#6\b:n-Mp0N!`feh@OKKD-.:eJqpkeOjXL9nBG*;SY6C'#YQB*:]QW:q%u,mYG@lb&?91,D<pfU?;6:
%[`'.1.]EsA,XG""8Y/JN`f;%4LO1a=cqWk>oU1c($qDp&3r>93a[0btP)3'(!Pd\d*Bi.i.H3],*%p7b1+[8^8dO5u[Ns74KG"E6
%p)/"?&7/2fKi)N*")c<b`Y@SCQYf>'_cQ%.#M$c&OY!qn`0\Fm;,:BtZi(*AFL"%5!rQ)l[Nfok<C>_K't.KU7XGaEM1D?l%#?Qp
%1R*'U+ZcIsbc&GC-9u'$RHnorpZifn1*;ugkk5I1`o2:aJ.h/'P/oWVI@(@-Z=[`$XWbclUL$";3%<snQ]J-WgX$rj:^3RhX+]eP
%G[>C-6gUeU&t!bFU80M9;#1WIfjs,B"'`.ZQe78MPT"s9V7?:p$roVaE(/jaE=uW!>W.s/8B0Tam%B\?[;T#_&9;=[88"#M0VUBn
%6mC0uLhh*\E1CGREI]^=VW%07QVMX=6l>Q=K1hn-nDJ!D"<s-]\AtD(Qu$%"+R),G]-`rAZ_Lh^h/K<@!L^YRGsdESg."Oo:K.?&
%K>LbZ3F"u`+YMUd)1a$m"mVtW)YMPC`[.!7Z(C#UKl#W`Eu-pdp*=XUnNGZ6&I#07,MYc(8/(aF$Dp!Ck[d\0-hDqA/^9A'#tS$`
%8J"!XVAc:VH8(0bM^'r@gpeV5rR?pq:,,W*Mm-CElQ<),nhjt=)LhqRLDY#Og`V^iKKE^=m+BD"fhjDnDA.Y7@8/:`'Paer%b1K3
%W81q5$mia;Y7pTM"FC,+MIGs0kiJ!+<Y57co'a<s(\#>G_?1=2e;mi:;gl'0T!(*h71l]`G&d4HA-Fn^BOmacM(R^r_u+Ke!&qZl
%a(uWINK\RL+[gQCo;fMm4>(=JQ<3+)'XNOhdN/H"R<.d:\41r46iZ*9:)Cl_l)!Za37]jV/M<&STFV'-h)'XB%,MPBomG$a"QDKc
%+Y+KYo#0fGBs:Pq5CerbEk\3+pD`oYOa&<#_?'s&0G9hP*>?+RX'F.kP>A;:'?,M>!GQ]l/&ZgT,YoWDClr<b,ru[e)MrHlD8(f=
%"f@`&M##Ig$$SiO]\k\L@Ym):`@`7A_,SS;Sgnb;Etujomns?7jtu3.TB*jW4,@>pC8#4hoIdNh!u9i_?M6+*-np_BHjV'Sr%_7B
%o%]pAKGLgZ#rSGO1dupf[2FUiNE+et7e]<9a11[SX0cbrIPN9uQ[<OaZ_R+/F#?dm+_.X9iH&F`A0VmC+ki<ejjgcZW9W=$VH*=d
%&aP[s"PWKf556cI8%Z(Q3$fL<C=gl"E(=!s+Bg`:p/,n`P#(]j%_+4[^l.4)iEd84c(1::Ih,UsHO,BMVs9/o$_!l]`Ubnp)Y<@6
%Yq7N;J]WI!ClmCC\QM%(>b%p*b)NR7A_IhWKkcP*&2smLER1[0*F1G;M5#lj+?\@;#T%O_/3s'22X$h\o=3!ZR^KL*>L:qFC3KKM
%NMF/7Ah$_A?TCHR//.7.qB*)@.M-uU$0UM_Q=BAF:i>0],_.O;]j0raKT0^.k_3MLQKU>^/B&h)<IqFd!tAFSM*/hTj])n.$Yd!h
%Q"N%A5UkRm`Bd;k.d!?V&<o]j3!fIZ0:+Eq&P3[o57lapg![es?W#&C8f?0FZ/cC^aAGN];umkPKe-aUd`:q'a.al'cI+42iRFdg
%b.E$oPSkS?AW[Sp%E87deJQB'8or4LJW!?m)buN7V'$j6(:DC%*8(4;'V/<E8Y>/92_MrVbT,W*17'XY`i1X:e3P?g%PCfm=mKJm
%ZdRibIaR<ZIhmQ-G]C@t1*A%i&617<rd^g[V<CN.N2senK\K&`9_b>%jU89Ro/e?JkJTIsYjG&n4DkXdPq>t20j/2@dOa0[V)M+;
%;X3l$Us.n)X52<`aI'MA@d.T_Ju_kXN\_6F+D$$fNI&jJV.G/O(kUO:&P=2j(MndKQ`-[=pG<]=`U]=VCX'fgKbEp?>BP1gUJ7Wg
%hg"*6.@5PkPC*GM%eXhl,^_tBCMZo4BJ,:*@k`4kAl#^0gao^@e@Xs;\WM_TRq`d#>(gUOfXE(3/ibB&M@S<d2IG8%E]QA%p;>s3
%)m;3L$3bqiI/]9\+qoZf(_d\TM&B*-&a)+Rj*J6]`SuFN9=tb39<sfO`n<)s@u$35.f_7^Ttq32>qg"*+43J]*i5(dl9g@Gilab9
%aG/&F^iKKa@oEHQ/i<*<%.)+_N?rQM=72aQP#5_o9O.NK-6-,OjNGm>D%\MKH:#nlo=5-m.NXiGYeHk9k6sEQ8pSrts,/gSGnS)Y
%$O0;D+bIhK)d*?c]"i`Uo`IMF1te!^(n\TO[EXcE[MTsd;:jH^(E$5,Y8sj?,:+GsFc("IQT0lkLeGgKM,5BfV4*:FOp\QmOjsFR
%J'^H+XOS0cDI+,#(&&@B!t(eW$o4i$9L.f6?*#k5=Q=!bVP-`74a1HA,-=P)2S>@Oa8N*]j&2D(Wa(9^U1r;)6RLOI;`Xd/#DKK]
%j;J-;f5#@h$1c$CB<Dc0g]q`[jBHp)/p^;W7_pfAL0f8IP7+:UV9gs^gNU7+-OQ]mME>T+.+C!ZDK?[:7XY.;>;$g@UV-(KL(A[_
%JW#AQ/5Pn#meDuT?YX)3PV:p*KIs">Jh#iV#C*l-Ur]*r3Q<\0@Yl`"",Kh`*T=n.^`@G,<;\/7nUepF_i(VoQZT3<iqQG1`d2$)
%-"dI%_Y_5-9:7X)2`AC,D:0E6VH)Fh>9Qla8RQI.T2tlL%mkhS))TpukW#uUJUup3TOh=M<Qbu&c+h>uNg<;VLuCinL2e>nYnoYR
%#DTaV'/5%*6S0n*hK"9"'SK%(:lq>r<74,In]Q=;d"OQo/6CHCf;(*8M7If#>Ht`L'eYP<N2LYj/s0eQMM/:RPgRKR'Rl83WeuZ/
%k"?R(_(74h8*3,QY`r9H1?Ej=H2\dj!=$t+P+"\+qTj0.7=e]M,=OJ;Z<Y,@-05iH`Si3`(s)C;ZJ)fVP5X#Y*!ca:4J5\;c1aU=
%#[#N:[:JmU[;2q,QkUVPB>7oNlda1Q=2h0m&C/]!a$"X:K+%L*VQWQ0*e$]JP/UGB:`Uqi=P(oteqWZWHb,+Hajlfs4WR_Im[;EL
%PaoMp7/EasK7uHbbNSiF_$M^Y'mj_h:U6UgfePRn0JU*d9U>X1kTK1"'K:9,9Sc$CMOoCU32"+@*$,[R=CRd[*@<)KYVtjq,?hrs
%>WsoJn[1t91)[:grpbp>b<1@F^L+LsAmR2L^(Q#KOi71Q`!%jVZ3\%I+>\9#XqJp<`TR\-B$Z9k$KTJ9<)2br`sHnu7F=YWH_b85
%^S$6C<Vu_R"\X6-gi]E=&9msXqJq"m,>tEWW<4=<5MCZN%b,1fH>fNGI8OW*%Y/r::pWiU/ib.+75%J>N$!"jd*rJDPUI%;+?WCm
%8Wg8hM42fgMeu0^i;AV]psi"+Wtjha-;-)(<47LT`T2V-p<G\HU2@?Ks!J_`;9(@#Uopf=*_[uZQ`o8/[6iE-UJQe)7T,5C\ASt_
%C[+/fJcS22,<YJGe;3[,=I(DG%jee5hrb(Yk7N+%fC7$"X<)>nM1%KAf35k&.^[^^!bBJU"5(:e>j@^S'Mb3<Ng2b><rXq*Uscc<
%@>YI))@VM7+($(U6T"<"fg@nWm]'B$gf#PK4CEnu41#i,c8QRf)(2e&9NS)c/uf>U+ot&GW&-N9!P^OYUK@fT\sbm8#O?/1.2H-)
%<_uUOJ'uP=&^Zl^gP.Y!Q;H&k^,b>.@%.A.nEn%gMZX$?:N?W"K^H<h;#g_/GBe"'>:J+A#gBinoSa5JaAjL2$-Q;X`f:)NLjb^j
%B<J1Cl"YgNZ#)g0+buoeW*l"R*jK^0LVhKX7OI%ICA8PlP9nu!=!pVg4-6(F&)1Pd=]:5-:V9+Ke_qq!M(/]m7hr&`&MHu11a&A+
%GtA=P*1Fa,?V*JSC#Y;?meN6k(6DZto;-+$jT<*];P1s`+q@Q9=8o(s.m7#8CMIWBer5Z]EM4)LTbFYc@VXd7<5<@75aE]f\=+me
%Z$D0"ndZ<(0*29pS>`keh-UA*!rTpfeBMtr%OR/CK"B?E7k6oA^It,ZJlCFPXL"+DfD)+N;U`H!9[#OI<(,b8I!H<B9Ah6tLPk_o
%!kU]_.)3p69GLd!Pbd;K#HgZW)h3;XVd4sV^/;t:kE2GS!YB+qPHQ=.Kh]cqpI)\!$0_FE"7F[gCZ5^PTFUWG:98U60r!nL;BEm1
%b]mnl^4;cC\hX=e@fDl/,:)JZ$-o6'b,d-$#/gtk'KVNt^u5>5G$:[Q"\act_A>IS[;H!"C)^E!ckAPgj<@sV$$BM[_l;+@8.Z1r
%9bG.?At5rcEmF*bTX\i7lbB+le-q_NZe1A>R(7koe=mjf'g5smCFpuu#%B<=^f7Un>0S<f00B?)'j&E<,Q)lG(7pgs*Gd$I7c'7G
%$AcQ0!g<9[Q=;pq=.En:is)-3PA:FbnA^SP$jAQ+I#BLlk!@-eI1m"p1mZK!>n,#Fr>,J'Ik=)VoL:,0+*'))!H?m@#/FeE%,g%U
%=h`JDpr4T<S;6NQBGjB^Tb'f^*-RP&*lD)U6Tm\'VXB?cMd1o]Vm12m<T4-Il=_WrO_bS^EWQPFKdJ:q+$Xg+oQ6Oq+\,0YGj6(F
%KND'cM[;XrUb2YB4++/,UTeAZOX.IO5Y2euX?p`kE*&^Q027]YRqoQjSLjkH>CI$%FaBkP$pg6'0hs`Bg'G1#R,df-AL7$W)0+@.
%3KIaj5]X?B(gWpsD+g;WClm/.l;;0(2,$d)4%Y0h@pn;RT:tLIR5UnMW$.?"7RA=n$AEoY2<MP_pZ_n\W+;tHK$U*17rn`1%$7A2
%i#9q4:CM6W`,X4dgPe)dX.!:Y-'&H/P[,Ps*FI,ka8ArUjDi4N]mL\sb\&=O?288FqRE@ji-q,>cOn[CVZ<Nf-^QiT4a##UY-1Qu
%a,T1%,7^>ZCLE`fJ&fH0OYm$di.]PA3aEXkriCr,85YH#qS"#tNSW+SC><t^aN9r<L7T$B)<h1TT8H-ML27NfJEs&UGc>3&!,J0T
%#Zt3iFLHQ"g<:Bq=OQ8Q\IK2EQe#!D%WL]$cu!/eINO??HfA)@Tdr!FJaO`UfL5<+(f.4TTs9bZ`@*F%H[_.SLJU&ViM'&Vm?DrX
%<pE#*=B8ca?rFER)?KSrMU=E3pBITq_L)F-dla7[Z7BS^R-%57,1E?Qh>AhNQYGjDm*WH$If@Kr`3.c"r.S;0gkZW"7,"p)h,\M`
%GV7YkaF7hngXN8cJMoM`G9;RBDe.Yi)YbI".B^3[jX`9`dE')LZXkl'aU+B$))Ol6?5s\&4*>rZ(VG!Mf<m*cdCg6`<4DCWKI5R^
%)dJk#0dqrmW(G&emg7L%11][Ck5#j(/>^JP'lb(MoQumlp4PlLB/XTQ5"MQre$H2sO;r'r6]E8<P'!i$`<hrgm7>>m+B^Z6-mkED
%2Q"^Ib8IO,EuZD=O!!87k:E,_Uuq#+MCJbOo''5Tl+i)*V&K(:/P79$a?&cbpY#ojJ)MhK<YG:.'Rs:A]u[Qa7Q,2uLRY%1Uq>o:
%U8#O2OfQqM=c&k89hdsOXae-AWft!#@boX:SD8gkl"j+m,_bL\W?!m-@3T!s1g43XbG.lY@,JnCc-_hFf]1=`:N2%.6YE@,*[$W0
%RSF=5iF5<*I1Rks:=qE13(4KqGfhi!1#JE2M.sEHk"(:"bmN-ql:p$3_mADL>KGFX0K[1:qTFcKI^5EI#X%NKlL#(%bmX(Z]%9'>
%\a6OrBHoFEK(O>r?519N!f>U=;f`a#HT2nZf3Dg%:B-\J66X/9N,eAN@s=]4bke"G@":N-eW,h!dV3I?e:h=4C\-;AH<S#CWXaD^
%cI3>0cS[;S/eWf7ZG;=%+ITgf0j?O:*2+thib.E/dV3G)R4'2?j*%DSB1V"IX1FJXBbPC]:>R&e?(GM"[F*#!S=HAU'MsQFMIg+b
%!1U=E.%,GcbUc6XHlTk:i2KeUC)3'7[T6dY2b_);=8sNs7VN<nTKbgd"PL]+[aW^^LDiOWm?tr_;InM,Baog]:mD`l6nWM>Z:P`F
%EbV7.j6g`(bfa%9']mt:-\fbAAS7qrA=e@n9W$io0tY._ne?7-?:q1bTb?g=#oM,Afdq3DRW4q[EB=22\3ini,.TA$+(1EejGP8)
%Tq:=3T&a8q8+MpA7h:NL;LdN*^>9%BDq#HNb.b&XBPa#KAQQG8'5k]i6)Ga$1eVMlob1<dLSi0c$(5EeiXDX("0>.V?e1"$;O:)%
%DW!nQY*4sH_6+p/\k+O.Oh)-850^XZd+gE)aV6Ak95]%6a@1-q!?dc\'B&A;'Ib1=X>LW^VUWr?2#-,_+#5"hIt=s$Q<Gkf_^Wu3
%#jk7X-:oF07l36Z`*lBH3`<eJ&jD/B61o!N/_%'3=W^G&U[gDt\WID/^";9`S0_kdcaFL3IeHuU!j-Y,W+MB/.l&k#a!O*.qEcW8
%N3uDW(-9qJ+\E?S3X_9:\/`kO[-[-I0g0/lpu5C=%"_]dUm/o12u:mCfh@/*XG&s_+K<8r22uK_B7-h;e-k)cB?q8"-IqOgq'IDh
%jc:V@TghTK;l"H<bI1CSa&1i5T;Li#=Z.BUMUEPr#4R`02./dEK(uKI0+i&#Yt,qgemnsE/6QT!+PA"?i;(JMF2b%^Iq6N1DN-A2
%9@5&lN!%aZ[[J_L21k#VO`*..Nn/VHVBcYj`SI:P:6J03?GC0A+>L/PRW6,?#gRh8>%oDs$N;9Q]s@9h8KWhE`U<l[\$B?f&dA6(
%B"V-^bmopNn9R_2Rtkkc57UE$T9l'<[.JAGq,2bm+lLg->+D]>aAinFRki?=-lTt-mJ2="rRr(K9(_O??^!+dZEInqfVajJ'T.fb
%%FYNe<DO=dEQ4.NXkrn^-Xh4+Za8H;ED-Q@BO=N!qE\#)(J-B_+&Tqcp5+CfL'kHs\\A:+J1fG>U.Z)>&[#"1/6WuIJV7fC?$]9$
%.+ah9=_UeMJ"f2gP>GN:W*BS4.9FHc<\umdL8[c-)Pst7!hb"H_H_kBfaXPYct&[\,UN.b2jKFkKMoC@aISL]7S,2H0=A/77X59k
%0Yq#d*d+SKM@T:Fdi"l4Q0X@cZuZtK/Xleqq6YEX)--!l'G(+H]s]C&1)s(%)>1BW;cJ]9&.uH"%NHnPQEn?Jgph0i'0CU$R$A85
%]Nr=MVamrc>:ZCrM3t%f>.`:<g?)crJ!F#E)#*N?H(]Q"_:C\WUn3H.+5iX;j.W5,W:213ZkhIhlI/*`lQD8cVT:6/:$)u.!\)kj
%k1na4/)(FR@d.27igB<LO\%'Yk4BRAV+(eQ5S$f0+"6bUd5]nt29TuKltp8-n0PIA?er3`b)Rb1m02]<bXP53bQl86V*0n@!s@0`
%DmV8(f)s^A*6B7IY&XKTq)op(I9GBKC76s->'6V.WN751b`%MU*p*\IbCI);'t5+&%abZqmjDr1"Ofe[_c)2X0SO:17@12!52-0D
%Mt753+r[8_gD0@4<W8Zu$r(F=g2j9iLdR1."12OtG(\M,M&65b06*'#58#gS#=]m\n/8]CH6*CPM6D7M!?td#07s%j-m(Dt961^G
%.SZAjrIFC&pcARs^\A)-P92rI"eo=,cEGbL7e@7F&O>X#CKGjjEQWiS;4uRl5ZRB$"O+Yopd]e?">(,#6sY?9C%Z@0ML2FDZlLl*
%M/V58]\W?X-@+@C@uUf'X(ddW3amn"d++L-!Wq@Wf>KhZ5THoB(P@)^Q>(dEZ2%%?!c-"Bn=An4F]nP5o@;t,_A%Egp!Wu8+;>bY
%MZ55uCF>E=Y)q#@_Qk(qAe/aZ3jGhkCoLW4N[Gqnj])58I1t`[+l7)+<go_Q@\!$pW'[V?eN$L.ihX],.EEWtO3oM3"lQ<b;G=Fm
%%WtcDq$ofn_u+hos$.=_*E\7=X\_?YZmH<b49jiJj>?esoi.nD/1:\%B=#IU8k[E*Y+;<8^c>>86EDYOcAbdqD95-!2+,-g!Fj,"
%p#=)26GfIND@IKmASgQrKe6r^GLFq8>>"&\;a<SUD2>+Ko0;#K`3l"q<,L1P2b[8="HFkhKY\s8Fo\oR4dcF+O>-,ue=VeTBgum]
%M/@(&@p4TAio2<=.f)5$X4V;$a&d1O7NHCOk]0bq<jS[-4X=T]=@=Z((#.:T#\OjFeReeK8^D@1hAaR<A*@dfE[)_"il.m5/X3\E
%j%\b_=Y0NoWG^/AAhpA)"oAp%OHSAa`j>6B'8_@I^$'I*0:4P\1c+uR8ND!5(>Rifhbo..boG`&Z13/GkqsppHN8Tj3,!($$->I?
%(+L7h0ifr<9fn6C))I+.6LPE@4<?^CCLQ3&\qY#.Xq1LZ,q@cBS!$l^YqL1(%p,%h_Deg%Zk`.K.R=C:l8lD?.gQm>h+OSZBu%t,
%.f;.2pB$qq--QsOOV:<,XU,KIK_-`qJ+K,@%4[BLc7J)hWN3'4-XAK/c,FSa5H#<B6;4EbUO':l`?]-cRhI(<(hMj1<:%4blKe%\
%IfH/!0JGBa7-P%!TY4<rg.$*V<X!T6<iJ]p31Zn7oK]ItPEjLK&334"]nrfr_aWhL792bl>E7QV;f`&=4@fcel4`\_"50-EHagFt
%od-DN6Ms]m9Bd"p`Cpo3d/kVN9]/J2f#SH"0S2'eh./<j]j%d/$j#mULc&)`UrC.^r@OTicrZTs,L&WmQ;I(B,XX9W.:RA&AK2\:
%DlUHa7>;\m;c0`uOe&0N,,.`VaROb/,DbhEKQHf1`bTNfG?Z?3nEb`+Urk*mU+gTeJg-sT2CQbN&#J,SkVjSX0u&f/hmc8m8''aW
%7DWOJGdtA_+Y]eWpNr.)!?QBS2lA`B9M#Ko5`(a.I[f\UC!U"[alou5,s>dKiL;3d.Mslh!K/BPU,IGc7/,n$$<A0*7&"IEJ)ro*
%fE"lI8,Mqb\]\kYpK3brFMilN\6N+)?GC&*.ZK<c--`WblIEl*,tK2S`EQ3++Ed%/PWUr*q<%6^/90GkhG>L?,iYg/Y9he!p>#T&
%$nG4>M>el$4M4Bu^12Qq-G6li4rs.d1cH*3^Zk>-:^LYT"6mfY1$T[5>)^6so?!Z77X\:/AP(O$D\]7%n)5>/=.Fle)V?T4.F*9*
%Xs`ffY0goJkk2RsqNEq`]9cqgXF0/0?7K^tkAs(N-<]:s_JZQDbH3&eKD8J'^<t0VVD3jLFC'YdqC%m!:kHI*jDfbbWo^,4isK"S
%;GV\ILI2$rOpBhG0tH@K[C/m6-u7C"]jK8$Mr2a!6^(uYk^7g]QZuinJA-7`ng.^9N_beL[M:N1N4'WNr7uf!nliBnh5>ET?ufie
%(<+CG^'j;MN>u0)HMu#.3:=AL!!0mZggR-YCVLAU@ce`HohOskdU]1nIWQkjg@n>\9_@q<2n3R-:&JGL@!dh-?ellN2X64)QfH-C
%0\*sEFb\KW*+mjp$uq3Z:[lfcJmb^5YM,0)5V6Buf0Nb4h8VP%/)WG,Nc3A#LI:UP3,Iin23S@>i.l`unNo]K\4%4q3pMV:g,sD\
%jms1A9T?Tde`!'q"K&rE=in'>V'nT&!mMq=^;VOi<O/f<^5.($7gAkd',FVCdq#O=_O-D+Hq$FT/t]P<STP'XqI'EBV/S;>1?OL^
%pY!UM=VZU.WlfjU:rqt.1[0R=[F'c+6W=6FP:aqre1@^Z38RG#I2-p@qu"+)0_)+M-S9K*2UCYh@uiq]7,;;lMNgNt,F8u(CHSC#
%)C1EkFjq49DqfS3\^-%:QMAjUSEV;*.j^%AAY;f.4juDln/6A0q@QJDY&ReQI2+SFmEb[Wj/&g1RYO`u+23;@>9MH4q/Inc?T8h?
%BNMJ_m@4G'3)Up2%f.C7irE)g2fdBQV34YTkOl_O:pjq,QDm\H.\NepFAoB7+ajQEE41OCm!#5=$@>p9Xm:tNB2m9F,rZ^u_NO/R
%KlBj(P^Gg^rt+pNNR\6rZ=\NUbF#aCrU6Eh>jFKm+tZ$0)d>[[94eL_'TP[I6d0d0=Q&sj8Z9Xp)G%9=`AT.gP$]^K^PGVk;,;?S
%_fN+5?08W>&u%5`HaD$rQOkVh4Ctg][Y,:OTMBXurd&^b2&1+k?XHO#Ss8D)(1+J#X.tQ&;D,]nR&h.e2;3Z&);E4tr2Bde29=H1
%Y!s#$6.q"3F3=KdrRl^<($-Fg-GSF6&i]Eu>6;qpl#IHfKsl`n%JY/lTsci4V!Mli_kF7ei<kMj1J_O5p$udJUF,C$WW-K@kV$j7
%He]`"[b5odVYe2jCR?XrQ!mC`Kef.9WL6B.h'>26T@\<KS:m?^,qqSA;EgN9EPu%t-#9u9X!ZDp>XL9WRY*Sm.FG<'\Q=;2$+)"n
%.B4/.&/Ll^N*FW:"oMqmk3S9^Iu1HmB$9AdKHIOi3MuCkZ8D\cHJGlXAf%)$\.n_5RbWSV!eU\W9PCNP]u$!,aI2LDHQkn>mfr--
%Yoi<%f(G\4CtZG#[0PRhD]3QR2/IWMrqo)!K%85HE7g*6iD[,+oH<0@amITo[^O6.9E*lYa_N"sp"AG.^ANd)/K;7sSOe%uLr-6f
%[!Y:3d4uaa&ZC5MRTRJf)>VjEC0dWRr6$!3:sU<FSLTqkjTB3i])9.[pa""#@<-h76`DA&7<&QX&&P-!Sqm_uMh_p<ZlVipD$]$>
%CW!13GjW/_>6*=_aaSnXol1L/)MYouR$91?<Y.Ke"SqH4hH(_Cc(UOXB=sWR5%`B`0@o_2>M8"mD`P/`M74Ca2I70q?Tl,=p/u,*
%CknF8G[aMS3F9-"B8n'M[DWIHgpetD/Vi,0X.NYUf0:?IQ?UUUS.PM&f`_Ja.O!G44N65mfhAV-m2'-CqUn.AX:/-@T8`W13?m&6
%@k[k0+bHbqd-)$6@@^9%H$9JC"%6"=isMSmMc0bO=V_2+-=AtUoBrRS)SQNIOa<J1k!\1J$?fS*pnS0Z-.Z%%3!O'Ii.-0YNYtUs
%I22I]pLB)/53u6DVoologP;uPk2jrqSB;>j3g`iZo:*IKYq;c%L_"bhlJ6Gu@6:ui%&Dp-HXP$cG[J\8,Knr/U+g?'Fm'u:)ZF9k
%]7\suop'JHmAk@,Cg%[+Hq[+MU_BJg!;a@O7ec]$)7l5LKC[*/*V8]l`tH6j!3.3T%pt5`)lk9;N^$5Ed:+nAL5eUH1V6`pqT5\F
%a$%j&I*nDViQJJ]DREb4PCNIhRg@*>a7eFrUgs@e615;1]#^\[#utGgSTZf3`*TmRn`CRU2)=U1`dsdcRJ5C52ognci]+LTG4cH6
%,;2]+PEaZ`2RQ@`V>#b@ToK_r]]B^5)OF5(]fYT/ds.u!]nX9`m'UDgg1-&JGQHD.;\50-&m9s3,d-V51%,Sj<<B;@J.\NqnDS/F
%H5.2.<M*H!@cJsCLZQ??E7\\gn?Yu1O*cVB'1?n6`/VVmfA/LD,"1Q/;e/$)'',[V,*>kh)=u^`hf1+A72<+)ppFt^(_<J3XgfQA
%`?@*\OPU:#YcK>@W04*"GaW1rBk\gk'\-C;ma7M#Decad&^-am`iT<hj4dC&FV=u#?riiFq\L1P!)r81eCf&rGLc0Plc<0[G97s%
%Z5N!s3j51e!ca+Bgf*F=(4[c3l0OQ/!q`E9)Hn"ZkZ9LGB5b;QMBib_;H)D$$fu"T&HlEpasE1,eG72C?)"KV;R1&C5X;>A14n`Z
%jFR8?%I3D]q7>,&2kGJI&IPaDX2(n:bSLZ^Zg-p7;\M\hBr_%`VMPjNA6$Y6Je9@FOA+5;=bBQ[esYr&GU9V.D)u-j,),YM_+L3?
%>la=4Xfu%$?-E=,\Y7l5WR&U`>J^T%n70KPDZO\,m7-^6g0YsUNtgT`Rm4Ll[4qEC^1*EI2rE[6off`PFP41?L.;[L_dMFS4WDNT
%rYJuG&rsQiFUqaGAgot$dqM,RkJ,e1kT>@,PB1#7(qfL2_-d-h%C;_eX__W&nc,up(eF,=;Eg*!]V1"1V8[s*ki3INjmcia,X!WI
%\/ScL\h+V=O%01Td$9lO80;R$ZNnP8qF`KBRE+;Chnb=,1:N(_8-:bm?=if!;N3J$I&G+#]U2_eo4Z?5Y$-:74ZP*L`3sGj*-jpp
%g9k8@LFIf<bHO5p>1K^hF2"<2\^FVhRV=)/VOX#G:Pd`dJmQ9bO!dsmrUQL5WTQ2m\NgF!8[\=b[;%G>/g`9`JKr5VV%4MY!1GG+
%bSK-G-!E%9Fdm75j8d/YXg$B`)e]mr!1MIU:dVh6Ya2l^-'1e4Fe+EP5aqmh6+0L&[Y>?L#c0Ge=p%pFM(;u;jYFQ[5O,A\PshK[
%e%)&6<mRAl/%F*@:[d`*);\&NUoPF[lE7#<q-p+$/oET!Rh(3j\?-U=[cAFBNr"X9nCCkV%o'6(FV?=_HMJ`.).d%=""M]+bN8!_
%X67$c4#d^KD=>ZHGDA>5YughU;udn"'lZ987j\C,C@Y^pQ(9nnqRkur`dANn>\ADY!Pe)05cajg(j!''Qkc&#4Eog+7mFHj^^=VH
%Jb:^?ddP5h3TdRM7L'Z,j:2S:@T$/47aUkT=uJ*&'t#2;!`nG5DHt;+e=4@ICWtMD5HMsLi$iH3TgJoUVE,EYf)-/Ib,*&,5RKuB
%a6T\uL(+Q>+=W(@:`o\h%KiB[M_e>MG8fDZRO`alqIKF?4ra1WYY,Er=0jCq__*D;N[IVM/@,I?'o[Fh6ib:$0!YTbmQ0LT5mLjb
%)FK$E1$EA[&)BM@(&Bp,8no6cgI.J$dK:D/*VJj)/\K=R+C@Ze4OT`lZ;O4:UmIZ'M\<F=T@lr%Gr"[0@CIidj?e^]_]OZ:[$J?L
%FU;85c5M%\d"_"bY#pkM3p=gcpE$?i]pogGdb.&F>"0L,[LbKiB9S6fXf:R+J6=pY1?ct[?^&58J*_e/pkFC,mj59`-#otZgG>6U
%LZ3#7H!equIVWPGGY3H0*,Lo7KqT3Fh7LIQi!.iS]2EiR\k1rm6S'CC*5n_tbGsXn)ZQ]RED8o,EmI8>V#C..K`s=jW<H4RD[hWP
%HN6^#I(L=Oc9tk^,;ih9F("e+'&'g/K!^IPL)Y(@Mm&K60hdCV8UUY<+Y"O/ZNk'm</f64[1;J'bM32;(ktfZ4j4D0[%L^:0;1.P
%rqdC@KY0iVku`#Yif!qo%4V?<d[N25Eed,N(;XBb@a8d2G4ttf;(]tm^WSFJ(&IU0l>;nMd5s,p:\aX"\o-?m4DPN1b,qX)b3(7#
%-n;hQT9h]/bg0"GFAk(@GPeQ6$1rnVC`saOoeII0-84$CQ;ZbZpD/[J%0`\fqTMXOPji9RV4_JQGcN()*V@'Xnc7'Y<g%!aa0lk,
%H-cm,mF*EUdoX9je&EZaXjfG-L'srf85m7m:X-0mX?jMCftu)G0E1+R.Z<&EUW*m5K\f@t\,)E#n7qG%/(br8VOA0t3:u]qo9!p!
%jaMRqI%gc3N8U[AIcSZ_TL(VnH4#u!_m9'\:Z5KNmL\ZrqElrO+p_'P91"?$1KcBeD9^BX[n738R;8s>Fu(Q:LGdl+BR6=$?\pFs
%o`Q0JRXbYYPi#eV^_!-'q-+.*>5U.QS&5_(i:TS;)--D;+87X`'$+<&'Z2i#gs$)n<,#CZ-N;,rl2)WhLkqLt70-p&Cq1WPgeh,<
%!&AUSJ2"P9;8Ui0+i*nid$N"o^)lV,)eZn@em#X'M=Eh^#0m7bXVO8u#RX"M>rY1Hcs>F*RH$?n9DB.Jld(o*aqCT$5]C=.\WCu=
%!Z3l?R5?%5EGmtr.IFqc(mOaVFjO2uUL;m7TUa5fjsQO5`[iPsA!9luUs:*f/3>-282m//6B$AHo>7h"?\Z69:\)u9F(rt+EWL,f
%8@.p=g6&hFiOD%G>mhZj-:o\#j;SjAf[!$8'mJuanbeC$%3o\_3UH5.iE0V5LKIfN(b)5lTD0Ii@2sI82>[29?U`eoEL4*m.s4'A
%2l_7)@Wk(M7Vo*bos1pkm^BNdW$O2:W3Jp8oK)9\\;tR;2srT2%toBth:4hCgsab-6+5n'r+a=nBkq2gWA(o:\0)Cu'C@EI^5Dg/
%ClT8-NOVWsWI@ZTgk4@uRqT(MeID+uIk710i>)_'ohC:fFjuatcXZEkj/iH&d>=3t:BN:Z=erSreY;``rdql4*qKLA(:<%R5^bKg
%/u-.<qoGFWI:Jl@QKLnFLO])>*&jf#C1c'Tj0lS&ia+D.-&$.fUYZsaO0QMBM?(e*/e.?[:@ohgY-sr:%U-u@8'ZfFA<i%Bp(GSE
%B0&J-`O_)/>P"DOcop<9b$FOKJ.kJNgsEfXLUQOM\KIi*fUfCZniBH4oUhQG_aBr]42h\P3fhA;Z3Nf>TD>RE_bM=,b/rFiG+;/)
%21:*#QrbShQ4Csn=eK%C+O1n\6mP&24;s'naJ(8ha"5AJr=m\?O<TNpNpWCP=c#'$p(=/]='a:b_FREVnYTVpl?5_]U13pt-NOjN
%*2\JY*DI^0.MH5?NnNnt+ka$L'#l1V=R71@pt\;a<E.V[FaRN*k%B6iRdI%&qF$+r&(f0FLE+;rKM8qh=aKKOUk;f<#'qkSWqZ8k
%qI[;lCC+cWg6K1F<-*2;-AXop[C$R4JgqPN%Q-Z]dF(Gf25:-f8EGj71JO,"'tl[%^3@2mTH'mf])T1JHGu?j>:rPhl<;cF")g30
%TF&/]?EDPs8LK/GBl?aACu6gp_Xf+KN2HID'P+j-C!jJ(CD7DNVV4D>`7Uq[jS.N4)qM[^l9om9'O_)37IM?#c>X^ehR#HBW9ll)
%#fI)okik\be_Rrn"k[FBE)LgDNrgHeps\Jj@YsM":"hr4PJBM3P=%*1(mo*?\)'lC=&u@d9g)3j1i0;5[nC#qMNXHt7'P#)qjuRU
%4$SM$)&BMbaTGC5i:TTH)O$CDk,6\tW84]V-@Mr>Ck*&2:.dh1A*paOFRpMl\&2qPR-?1E64$g.A77o)#53iq:MpJ$8].<Za?=A?
%>8kUB6SG]jGt84V;q/&5m7"-"M;2[e6,RCQ<,?@)*V2lofE-S<P=eS7CXU_u(@<#:3%nT2^b^.\O$1*JT7G2!rD7C8&G83%`LD2t
%.M7qJagk-I!gAaF_:LTnGn-Kh$g&(:e3=iC7CVR,(CUgCISMR!O&PFLdTCqh!`J5V^f:Do_)]3MY0h`L=d`"jQSECgGmb-G)AC(_
%"Et"9i2oD8Bp@CUCDte\1NOUiWglJ108%"($?"mK<hBm@phRRhRjD<LbJ\iuP>-&Ab*^V7i>t4ifaW0dB`YG$PJ-aT619gp2rMqe
%p)j:d5/tZLL]t]!@;.8B_%kjC.[Q7r%OkBOC+l@=*;6W)4b$iM#TGs.:CUa5!Y<t?aCu`P6o\VrF:3<I]qanl2hqjH\(0FWeV?B_
%*!r`HL_$G5MQ$+tMe(!DWGSLFm:FXkUP<;G60!h(NJX(&+m6uQ0?#&igR:'O\oj*89<S$&81sblTJoB3brBU&JZGg8L)9!eaNc_W
%iq%_8>G\HG`,,,HB1(Mq1L7F\Z.PVsS6U:*)^.s\dlDGP786):Z%a>^N;:fO6#Ve[RS8)go-@(`Z&#3+,Co&aPNmcTXeA>%8j!XD
%PVmqGlJ5l5cTG(&`C<1:?qDYF\k<I8E@'*'DB8tp.s8RU1@!+mpL$8'8!57#+>mAgY4$Ag@MZCtNT1s+;KEP"Bjg;_qD.?<@D;o5
%\[P%/ZB'sp23e4Mn@(hDN#>Ia).FVMD'%=%0p-TrXi>]B,8Zo4'%3_CJ+N!HKt-t5b>O0?->3nX<n5&ab9sM4\q3]ZI7Y]0.j+c,
%4oY7;0c9GHoNU^tpgGfh.o(lk$&afZ_FJI>8sPR/ZpB*lD!591C6`DPi<V?qXeAL(rq*grT..;tFbp_a6u1k5M%,2F\Kfqa6A_$]
%Eo"/9_;$BE9K9a@XhTdi?=l8iG-'@)@+bt-f,EA(AC7KjEd_*`XY\;g>j,^?Krid5d,#a&&'4SC`Z]2/,X3Q9rUA):f!(\TZ09-p
%10%FL(k.Gr*"V"@,b\P[@T9X#PoThHfE!d+;EQa4CC.45VbI6&=Pq&W_:`\3V#qfpT'#=77[oLIh7G!*+loC2,X>@WSTs%I)oCs&
%]CS\5(o"r]S4oNuY8>9JG-"73)kruJ6473'6DMNhO#uI/_>1@q,<(s$D6hU5i8H1(r__lS9%.5RGIfjfjs)X/ArWrW:eGFr1a"6H
%ZW7B<Z8$):HB4K84:edJ,TOW">s%,K:dhYP6$t,L[!+TS9JRCL_af*SkkaMJT7;],-I8sW82@5XjCZk+eq,3b^PAUcFoJD:C#+J<
%F'5NQK#RVE66X+&%PQ^&hJM@'9+6&/JL:t$2<S0XkX5*a?AMRf72;qYl^j.@h5_@(P?u$tR\EK.csi=<C-hgH5\lT^J1dV`U:Tj2
%G<fqShd[Ra!"t;LE.[tM@WTQ?F8Eg5[d1WU_d$Zo>'-!An_`BNog.X5#8_hB2!lXgH*q'M(%s)pP>::1!@'JX_r?rR\S)I61f#4j
%[+29ZYsnV&IdE'GY/LMenZCkBQK.<)o["5^\hK%HV\ad4`BCYtH.Q6+;pmPLou>KP*,Cq\T]3Cmj^2o$huQEqK5YjgVi/.]l@d)]
%W=kXX=PV_37`M.ifWqC)N2127.PS=C7F/qfJA9dS:t6&LShKnV+Yf\JA+&.;9HW)+'Bi)G=^T`:O!Q<plfSme9p8!c\n>H:d:\e9
%rel?0Ec&-=AZ0!W51Zrj_m:I*P3nhR_ItQS8:XT12aCp;&DU0oAOcEb%3urf(RO9/$V,T8$ag7K`rd)tCn?$p>%3XH!`\L]mIJce
%`\Kpk+O,N6%h+LE9tP3b9*e_5ST)])#q<tJMn%TF26;\\R]cDK(C#6Jc$/nq?^$jI/6J5jdB\E??ji]NWE.4<C9KVsBfF_5=c5=@
%8E(mg$KNj=;5SkPim+_8NW?Q0AjqeEL4mXIoZ;t6krc?>7^!J-BD]otY3ha*<l9XO%6*X),,7hYelCtg(Rm?D@m`VREC)e:Z0r"s
%OT'#%^F`s*Y\gEl\0kesD0]]^0\MlNa_Hk<1Z0(t/u/CrF(u9^Xlm#[ZFS6/Nt\`HgTFA/A%10P*P8#fjXb0R?5&Qr_iPO(GSXd1
%>mIKE&,rI;>*N>r`Z(FDTRg5(Q*YO6K(L>t[JHl!g`kVZ=aX>o>&Vub",.@EG!;DDOOGJajn?IW.HFa)hD'?b9:I0,<uZVsDDUF\
%44nrnaTIC23,_o=b#/la@1<%I]DW1Coi%%)5cs?`s3c"$5n@obD&Jk=!XDj"5R`\t87`*m1+4#2=_0ONK:7@=q8<G="gO8`TG0S?
%/!=U&Gipg`_$d"#&#*[AbtHAdmhQG=AQ=.Q,5gt=$/";^q./F-,p";$Y'Vik]ns*-ZFO<<0/M>b'\"6-^rYW`2Ug#f>JoiI7KjbM
%i$"[EVfu@8Nc7NB$-Cl5Ispp\RZt9!N@_T8`'fugM&jVYZN^i'QtR)p1lQPODVEAKkQ=`8(,+3[MNt?k%"l*YcrR*1F%bZpfg@nI
%=*gZ2ZA2f=j8pWtIeCOJ#E;`jI=+,:'"E-T\O?1ZTCl/Kd'3T;0,m8pBf(!\>!oH%N<AX5cY.V@)VHm0QKd4L&+`ern?"/67sCs9
%QiZ4s9BN21KSoL"n,aF?Hect%FBqhsHYCOt@S"*M\5CH.[cC18d'6L"?JHp&nOi?.C=Qc7mn!_V%c92(l[X3m6M,60(84&HI%(2!
%rcGT$*'-bK7B=./q("n1g5cpHVsB$q/@X!-1p1t]ZlLO.LW<=7C"ZBR?RF(74m6j9f-EXtp$%;bF*!02,tN2Ebr+*O!dTkW0D-mn
%&PZhVWcaAKgKl,$hMn('K1]>uc9DVtJD%$8?>'ZWrWhu?kTE=jp>jA'5u-9`3k)Z3JI,l?$0n/gXC9Al"ANRtq8Y$4K1uT;'M3/@
%@(raoNpEj9P=6AU050blG.WaDpTm<n#h.MsgVM2p-&]Z`i+J1dWfXuB:S/cgegPnH>FD.FU]B>l-ROmdltQDuh"bAsbC9iO/\83k
%%An2p.rP#]mL8AZ>@C+pXnf'5\`N<3UmDdU[r+R-R39GJDD'S',BO0:O)kmQE$ZG,olfGuHW(.AeR2FmW`p`GG_=6$(bL^1O[J-U
%CM=9Fb=Z2:^0%%Yn[7N&AqKH,An]B\G$2-eb?&r3,$gP@(Mt9U9<9bUk_?6$4)Z:sL9#Dp5!@:sm%7t\=>/udO$8>1C2Gt?s6F*]
%2AIahl.SHB[%q+3.n5,`+LuV@EdN=boHeZE!2>1e\I<fQ]OZrEbuIH=7&p<=AK#e(<nZ3e=Lq]s0d0X[[\S9(P>Ue/)g,1IQccJn
%_M>tA@Y0Ul%c0`p[F(b-PEHRE(:rX<qP\QXo-J7V+8=q-\fY)ml9(<uiUpPFAq/lu*MW5.IK36)`DB:SW*bN4ffpGIm\okC+9k4T
%gSbFD(R)NUO(]Y:Ek>.c>_4h'$%Dj;C72?mTQc/#m0+O*8i^IWd!5/0*QpYMD89/9D1028nuB9&<HB4aA)87!>\sUo5#.KoCH#'I
%'2;MAOj7XM@k1s$+<4Dgo&rX;`TsH]`sqK['nc8haMF'`U2F^$B<\G+$4!!3(6m0+j"ZM>\pH3th/U>iH^D4'9?/-/KrOJI#9003
%PWanU%uSE?*7o]-lLJc<]>Le.3'!#S\_R89mnO"=4([6$^:M`YR&FO>&XHo8>K;@DUY['dbWad/n3&0E"=aCG@T#Z0RJ%a;fJ(\t
%!HN'?;Qp!ZlJ6Ht)an<TP^7pd=m6BlB5_aBCaSMcn3F.pjY6SJm8gRnae3j5h4kJ]kQ#l`6=fc9mQO[h:$AfFUC@A-^\u!bA@h%a
%>iBo_lFh3;M:e[irj?iuY^ri0KTZjg:I7g8U4V`\#0D9Q]7hPi<Tmh?Y*EptVp$mdAKJ-gi$:=l0u=iE)6UaU,0K-S=l1L,Sbi:7
%o>-bf4Q)@a]qE$[!,eF,EX(^'S+?43i#^RrK%Qd`,3._L<PL#MXN,=0q6\K!/`i/7,n%.EnM8)lT^Ej,d+&p\%=_34I0A<!f??RS
%_*4#d;c!;?;;QmN]nT8kc7s'h&+VOmb=D<:CFE?/8jl'@6Dp/^>6$uhAPNm-*^/6-0F=[eLso<^_h.YsQ*!9]n5n/'pE%V@b"lMN
%=E8+Zhu(ChNB>MfUGNk'eDToloou'q^6U^&(3R!V%Jl5o4BhQ.L[">^?>FdVoPc*>P1k.LWr[933mc]E-O^&j9#-rCQ+A&e@&jrK
%LQqimMq3Q"h@m7pTUbD\j:$=',0[o*,K!OZW@]9:1S?DbE@B(9Xm<n%)>GlnA'&)U#?qgS@;c0H;_HRQm+8V"aT%H.o(>odo(S`k
%r<Mm7a6_(!8fqra$&smFeb("t'&.S?SpMP0&QCCeilkR`f25o@$G>t:&JQ)u'icij%mQJ4n]fEf#BkD(RAcQEneU.uoQl?=GrFsT
%EGmH3UV/VWjFV-;*)<O@]"3`%)OHjmn<A2,c%ZffkNf'"j$'o.nHO[MSLSoVTO<RU>U>JDl!!`6AI=He(t'_r.8!?mZ1*Rr\s"H.
%Fk"%`7]Cj\0J3ar=dD;e,DB-!TkD@/_EsNhCp"PR0U@@p>R.r*llaGl*bWFu]&@[4Kik4f`PD&E1O#F.!KBq_"M@KH%bDlm%N;Jq
%l6$,W\]3kLSM2"\L=RP`*ND0h__@]j<eo&U#e>TRW-?9F><lqsoUb]R4m+_2:@]GC"tD?s46JMZ,dZ_gjnnpcd$qqUKNE<6htGR(
%5U%I2YGF?r=9tODr+k6$R3rpc#/%+ENU*OPa$%=(WOC96&Ad^NE:7CSJRc^%J)A;GViEf4+>?=\bZtIe47&,R?hOI/%\5KoA<>9L
%cj(.t1^7<FN99D!BFg5abFj&L?)+:9Ks#\E5qFQLSk2!mi5CcG0R(XU9h7lSi_*\T-\L7rFpi(r!n'SLa$gRON'/F8!`B'^lb:WF
%`irJfa;>\[YhAr'd!MPe=_+;BlqtE,QXY%72O*Ic,mr6leGHBA=9PUZ=&A!6V!k%_OuXmPm4a9cF@#$BQp'\FJkS>'[DM(+CoLhN
%kiUYE9agb;R__QdiYqfsL?s8$g38uQdTfk%#:3tT(lL_\fDrN")S<VI^uDgD!*\XkO]&J%e-[3=&[I0fWU0$\8\'B=XD7B4gbPV*
%B1g"k)Q9c!`Ts3M(6M_B@PAm42+=AVRfUhJ^75KN.(8.<+BM(U@<Bf$/,uGSlYt7r%IcgB?qGLo3go@mm1N6cpMr>u%\g%f!BX_G
%_+1ipmZ!K$U\@^[adOKn)nQOeA6oe4ei=&pj1n"q)X4[c.S7]J6&A/-C'Vk*Ya1`]O7k`&?C>$=dU"U)<bU;2n)RC==JeAD?m#Bc
%R!.pD!,PbY5@'lDSgq4&V0dl,Gu0fiBG_F,*r`N9,Ni1"N4QP(nF]ZY<j6e_D\e./KNig7'jls.7?.N/:#njc_""=i>o)F*>(2c0
%]Ht&5pe2P!%%s1]G$?L!Rqn)_-)`fFFD],-`!btYC>PT+21>;lC"X,lk#Dt]eUA0g&+rg&/I1NnTcq^QrB=+cQJ<ApF(]`J4rO!j
%[r!t`dD5ZB+V0_q269u+^A@=M$8%qCp$"*j;lV!e<h+r_c<`Bi\LsZ6*k.!"qCSdaMVHBpc@0[ch.fDG"5+cc:I\/\Ch;nX4W3om
%grH_+Xe3Z.d>gYTW8/pWMS!(s&bf<_2562?M"aiq6P+<QQ>A.O+4jA.O#u1KJ4&WIVY;.cBopb@#]#L`:\1.WC3#q]d.d]_17sMO
%GMG!-P-IJEX\>4="b_J5o<=m>9-,ctlB:f#SU4CE7_Ls&4!AP]o[+oO*q(Dn.$AVt/9D[8ZV&QNqE\KD4ti6Wmu:Kl?P8V(?k&0'
%;9uaXbo&;LSecr-BChFH<E7IKl'2*VeD'$O_'e-)qgUR;Ej0Zojc=i37e3QB7q'`:+!NM+HcK^EgS5N:M=["q=@F7ahP;HT0",Ce
%Cs"_64)%WgNkh;V(6Y"=mgcp>.T8F&=<HCS]NRZ<1-(5h;o,-JNaY$^XQ!B5h5kG^1?e+&:DY*mX!g^6&\3_+Rq;3W320,,L942b
%[7/i1^PqmMP<nXIRlWB@)d5Fc@F+N&0;-9oN8tr2kY>RT;2:cU-p/I@hQ[%Ye.S(1an@J2gacLQ$8@a/iRIW+#kmno3(GA[S1^+$
%]9i"EGk+L7Sk0(:"Y[BGdpQ5&d8P/@3_Et<k:u&Fek#0R]*#498bQ7B\pMl0?BK<M;BsX[n'ZrH-#D`ECLT4/]W9Nt7E8icJ\6[+
%01tet]X2?<mEtSmnfBOmdYnp:!CmX-+kd]PLs$5+oC^O=_$uE5N`5"GeF.^:jMO#RD8<7YD]&=%neYu-7YNN6SHR0!WC86qT?amb
%#"`".XG"iWa"]@iS[tqMJE]Y/CrhU!l*Q[''qeiAIG*E\j7G45%W+:i+M])RSf)-Q_ldEF!!k+GlXdi>.":@$r4(;M3oZ)8;A!=@
%WgZ.aU_j0;VD8U?Vf3I-]=G?qK*HQ`-+-2TB/[FH9Ee0An8&:r5f!(;MacHI5RrUK>d$^Zjpt0Y]jHA@<U5#'[b]kP[+8&o=KS:d
%i@4"r\Lg,.?IfZ[XkO/C`#WIgLFN_fkLkr-Q^pb_H[FZ*[uQ_]"FPP&5f*q03Sr%5f^Mk2F+Nhm8FO6]O-\*U>\qU:G5t!+I&XQ0
%m/M\fE7+!J]'jamORKM=Rn&8A6RPIk-!JAN\?7-C8-o!6]ke(aApi`>qN`/!;h/\jl/NS4dKE]PfoG2/e%S=Onl/U!-Y0>JjPd4I
%MtT"6+F?[-_[lf9_1US4-hlhG*00b7ao+EK,L5B)0#1fi3-/Zuk0\7fm1R0P&'Y3^2`316i)lT[q@YCUem0D&f=\cPb.3t'Ri?U6
%[Zobe/\>#iX_V+)M?p=/*&&4UXOg><NdG[TJeqZ_@rZKG)MCHu&kBH_+MhKi7&t(Rdb5Vjo%-`G`I5tgIJ,UID+`:d^aBTC-<d3d
%O(]^0$mrO0H_L-$<]LUu,UNY5N)HS>R!2&[PEk<><@T,@R.dbK910hXaDP2fG9(*kf2]RRDauDff+Dq^H%p(\AfS+hG\V!i-ZWe?
%>s";C^H,d]8Jk5l^=h+8DiPdQG^I;.LQ#$[7k&7[_deBE!^'X%P5r-`/:2-"-e.*9khT[6n--[gM/r-SdQHgY<uXq.\1'uh,n56_
%\;.`5YG9qpG<HmrbC_H'hDm<K:Ztph=u0]f&h\dTE/WI&i7W7s];'7pRUH/,h+rQqPpVk%/OO84Q@XZ0:#IX3\)O6eKgkHo;=BOW
%f<A6T0a$)o!<&GO+kn_>]O]u64<Vts4*UM+LVh;Ye@XaI;n6al2#X9i0c-%^,[/VcM-pBS:Z;)lCb23%%bF!b%m.,=c%tr+q99?&
%_*BqU=\7;Q`\!jUj)-;eGo?;3\6kMHrlQo,\2UNf?X.`lc'*JABGUI";Y=EZh62YV&J:KC?L3WQ\D@G5A<HDc5BQAIpp!0(m_!=.
%@:&M5>utZ7+_LH#F:L+RY<Nj)/S]b4HNH6?G#)k3:i&4NF_]#!BS3nk+Cq1gCKR$A>dl?bY`.2bX>:dD,93IO4fqin'Tr"ORRXUA
%&%gAjY$q"\/-qNK%FhfPl*]Z-5$6:B2-S6LbeNH6ck9^'#njOjMXb^A3e@9m)Q7Ea#^T[.;mt1V]sTmMJWuGEJ#a-ndQ=dhfM%t_
%%V>;<.!UR9?NTRU;U1DjD#3uddjgk!2bVKa?&)2SWE-aP#+(M#[%^2hYA\Ff[KlO4E='X;9n`&>Z\2=<'QN1!kR2[c2DYH;6&7UW
%F>Kta=GjSp$E!m8jnVN*I<nUor@Dq.`mINT!02W0f8ERfUcVKo"t>rh-9WL$F6R[UXe[NV5nK?QXZlC[6R7FD4Hq:if'>-lj_-8%
%,h"86>(uSDLP,I:)O,#0@A5C-;_tu&Z++<l/\lF,a\nN<hA[qgPVp.kq.*/@T>Bn\j[Lo\g>\Z,>[.7u/c]@te;M!A[((Y#YkO;^
%37o,^+1kk?02=?d-;p?ZI1<B!^:Ojpbt5UpJ.-5EiJfSbKWfuoMfk#U3PEp.QO9p84UR+&<7`pm&dqOndjt>AM9rETS>&ZP[sE`A
%9s3T!4hE:lSVjhEbQQ$PN5?>t55hrXe:r$6,Bduof,sg>=#_cM/MOc6Bf3Zo?(m"-lV&VQF$iji;_pE4n6niCdp\u+H/tK0pT5fG
%]G*M2;:l7gNSUtMfQYNVQg#XLc/&*&M[-';O2;ssW;b^Q0#M7+9XM[?2r`0I(!`ntf@8.$N]"\C;8:u4fZLp?L,/t@o/gn/13*j]
%c:;uO_^kXn90kr!L&%%I^%Du](#9\-qI_SUh4UtCl$'eWq(UY#?d>Yb@gT[NRlE,GZWHqlnA6\\L.P8mfOd+1>Xs3Fja50$S.3jW
%M%aEO@CI:YiRjNc]&4VJr(Ns`J=tGCk]!!eI.R<0YG-Kl.\&/S?+ke+ShWg@hb2N3WeGIN.B.Fr*<KH!5DWCER5&%RI2V`_<oI</
%/HrQ.ABs\i>%SPPKS;296!C,6E*.hcCA`\VI$Lk0^5DeNX)PdnAchEaXMPj5\SQ\R4:VdEo@qj''Tq[q1ZXZko_4!PMY]K:E+2(!
%a^h8K3:Eq94LRrLR-n2"RmY4XJ6]T&Dq&HrZ,$3He<b0iAJHiF=jbd/2:X7B.nCkW,scS[4p-%FTk5GbM*se25f_Q-*VC]djXmNP
%h@C8f\!hG'mVY(+ng8,1>>P4F/ZlmX"r\0d&q]\Cl_q"dZ0teK98,ZWf=E==O$>0t-uPdJ4Oc`#rPQ2:</_"iQR,`ZkgfdLNr"nP
%s-DcT`=2AHB7!nc+c\Y^RKadXMokJI6Ugh-LjKNoam5o"`r-^Y$>7Js/'d#".\)PtBh+$8!-t1mOnGf_i#OU1F]i4n\rQUZ)%Pkj
%EsM2Maqfjp7s_UZ^o;nYd0&^P2=hNt7s=*7j&BE<#!_gdS7r:\E]CP/Sdk7TjF[a=P$7UA=5=\-S\ecbpLC2s@H2BKGg<EaJm8:4
%[BqSRd8LLU2F@8F\LL67e1&[+m3h<[b846%A>=dM*&7N0XK;OB7D^;8lF%6F]6L\i$p(i\1pBug#hbsO]l$E08fnN;,j'@h%"9/o
%ok7J[-/43E\AZ^bgFoM(!*9B4J"Y\;%03!Ygs$`hWa+9k0T!)IS!HJH9?Eq;QM=]>_O$Q((N$M(m8Eh6&_$$C7(WkK"i+bIC;0EI
%Pu&oIioC*:Om5"'m^<ZY^fmXZb41lYkj)7Jii3>nj7u,[WAH#+&Ac?fJV-i-ccGl0cVrI[N@u4P2GnB^$o9&3QkN_S7X*k'[*%c)
%+HuB#>W//$A@S<T)Ku(rP795VhK2>4T7tD1Lfu?JZ*Nl`(X86:4PCF%!*5TTk_]5-&$*<aM`jq.4($#*+\dm,TgjW7=Pfb)cJ9]T
%RrL(KO$=Lp?s:L;-.P?SIcQjI/aiC$.@ES!IYs@)?WPk;71Qsj^'[j*']n$jW\5L'\EojbhXuL"X>P[F7"`7A*[)0>ZsY)F"qg^Q
%-/ekZ&"RMg_-eJ0(uRI=:F7S?>H_oD]Z([J\*WPc@bE?\V?jSW*Cg5?Wj=h1HONA`M\B;u1k@(9-1a1_h-hrh+AUs:K':/<)Mh"g
%jO<=PbJn9g6;?%eda#m?MYV]AnjUW(gQ!!Jo-%0S0,(L<c4?.1(>HQm\:jjgh,E.FNj;HB0>h2^ae1R_NMK$.0_TV)<f$2$Foa1^
%=d3IF"BL[=Ut`Xgc`YB$e@WV)U?_oL`ZE>k*%YYS%eCR-/e*^Y\"R(d(Jk-meke_`1?ct[04@^JVNNNk)2iDfnd?UBO'GfC28!]e
%!Ct\\<duJspH%TQ@3]^\4,/TKZW6d5\[U++HR&D\UNFOD';77t\39bMT+$$ee=[&8'tL4'\BZ*UJ_9c1X[n9]nSL)%63`0,QCs_F
%g<+QZ]43I-+($'%K-de2/IOV;'.Dq,N#T"@\fco>chM&#S&=)e357f<^6_ABp,K"X/R7@K8cM.VBYV,:'\Ja(S@PethAeH,Z92#n
%A$M^a6^5G;gVdiRO.HsgjWD.mWBRLZW!*h*ae3iJ*JUUcWH1QO,f0@;UFJ1%WIDf?`N=,+M<>ek-G%aZ0lINt:F'NMT:[U$oLm/6
%h0fN_=4*rnPt:7i-J<U@W28]Sn27fFr55h[+&;.YJ;EXB_]DtMn9;YFi2=&PkF(e6H((70%l0'+obs6Y#Q/Pq1oMYP.,90Vn5+ha
%X4_eEa((%ijCM/sX@@_7^dra\F$9:2F3.WFj0S^S4LZWE+rb(E60$Q^m*QoM@Zs$cpUJn'1g!iR>X=d,pp#M3Sj.B=1Om[5S@jZ=
%GR)1d4:d1oV.9RO,PO(G+\Ee!^E57\%-$Jj%He<RD)7:7qaLVe<Y[lHr3[-CFi:+^`loMdLY*Z.]VBb.P0I$p\+hW>_iN2*??)Na
%kKBOM'&emN4o\.>a>J:Mk^P5lF);F?20Qt>prJU\/Sst")V'+4gTVdug-F\?HJf80NIemrT.*7bki390^gcufpt-^E3<R,'%%">!
%6Y]bqLf-*ec[Pg[Kuj&a2^X5=Z7lb?fh:5gUV(8rG&:YNLA7n.%]*2?b5UYi*W1m)*DMRtH="Y[fD-EV\G3F-^;D1UkLZJ>=!sTE
%.>q',:77ON+ibn4_/+J.%;RRloI\0s\7AtI"kG9X:SBr:-6(&=7VrZ#Ze)8i0IGfqMICoZNF0__+FFh"mk=.H*A"]]j*Dbl^cehU
%)SDkH)ZI!+4Qo]'6+=?kV593]M`&OfZ&TM#=NK)tZ@l.=Mgs&-Q_;[RVh,o5Z(Es7'Qp>iAJ!)F-[ECs"=g^ODBTs,J<KHSHB?Oi
%&PL@tD$\l34Qm]1`-)2d\7+]%W,4&<ZG]f,8,Q0\_\P-%C"1dRGlJHC%/"8'`:S%F72jcF`-SlG98OYlafW8e1:!=ca7H?O)BSdd
%.P1)EOeN'Z)YcIDVE.h+5bC@t7*!0H`GbDqaPfF*r28_%of#*@1>_kIpYI;9s88.4cV?p6j20:*?tj&sNmk%g+GiG@>MNf5=5o6`
%8PY559]^"s,R$-^ct%:VIAT^BGReJUiF]7\2p].,.D$s'Ui-'t\NGfMpNPKSqg391)7cOQ]bE<X6<,Kt&8T.cS(m;Z0(SPJQDl]'
%je]#A1itk>$5KHC%nXp6[7l=)rV12UE'Fd4Lu[Np#BhTaOldRJQm3Gl<>Dko<[.&'EGcOa8(Ya5/mCYjYF#73;r9*f("VnGo^+ps
%?c"5l$`YY[=^IMY)Xld]bapq;1]uCSKG9?jUX2VtoL@Z#^qQ_P+Zk=:W.u671pM5G.K[Yp89;V5Y'esfHq-U<+l\&HQ7ZjD5&,WZ
%?j"m$FoOILD6F0p'F3InD8pCjAnWqSPoVG'\`\PTm/b*d/ApEam6a1oo%R0@\SoL`o0I?rGOn:M\8L\"P4#j36QPB5`3ORroi<d5
%*D&m7kAkB&26:u*Bh<ncC"E.03l)5p9lbjdeUc7JU\->,m5;VrjdLJ1op8uYR(ft<JU2t2XW+FVBA""cJ2U\e*D?%fEV(TQ&oK2X
%SVG79c5iH-(?:d-EqC`fF='/(?'R)"^>hVN9nKq<H[DcuWMlV]g.7JlaKC=9^\%"\]jB'fDcqr^rlC(oF7F@C7-`:s5IWRA4./i'
%HUaG=H3K]/AmNUnTF2I%L!$>G%HH]8Cqair.kSscC#d'K4WK-bN,mg5:+)/@VPD%E=C&)?=CW96ij=atpI]%VbUj:K7)_E01jG3N
%%WiXn$@<DM![7\*(TIeNU>AKtUa3k:l!o(:D"&h:PMY"3/[8P%[u?6<<`\BdXIhLs6<2)\QMK1:X!&I%m+h#W>t=k8U?('U38,-B
%#rq(`Lu'Nh1oof7WHg(W*ICS3(q/ng3sE&i[Hd(N2b+>+GeF?l/_Tte<gQJ0OB1A4rk#dea'W='X!N'sTX1W`TJ*#D;K0>NGhu+u
%dV3Qd+\B28<Dl\k;YPqaI@(>(oB;-^ljpZ*GD"`l2;ArmZN:&X'g#B/opSpVqMGoj9Rc`%Ags83T'p0MVZ1egS&7FaP0n^2:Ac\E
%?!DU6!$f=?V4L2J;[+)'6oRG&&FM2]hAl,<7Yh2V=CQ>/&mk36Zur+)+oWHf`^!V@)F48*OLTcqk,g?o6^J.&3TWR&WG0f5\W&rb
%1@)ZP7KI;NU$l2P=7%d*h(bZ?l&>sA_M:?4?B+`(/mf@K7P;Ui.lGY)jtO]#PAXcp0lIQ4)#V:BJ)j0-a)kcU=gmj'0R0;42U^7o
%LJEcXbr*H)Y+shnG3oeKi=P`Vq#h\qZj<n_Ws!*/3fPhn8q<6SfuH;so&bI,%B6l6+=i&)h3cl3M1[US-SA#$h%@QWDeCu9jOS`"
%oBr8)\Xq(i9?P!;EO]+`E9_/*&op!'e+K".KZeT.B``Qee3?U%nn5e]EIKTq(?Yr",I)8u[9'a+"@&JjYHK7.8"L%DT?Z"&:0Js2
%l,)16YK7sc^4tLr21Sp&U[Q?=GG3\g7'X<P)Qbo([Z2'Gs(M;2%)/lq)qjt)/(jKJ7'iq-ecO_`6LIKh",#Q*'E^8FEl?845BC,M
%8.Mc(52#rk`#-a*#Qi.Zd(__K0UCOj(qNt7W2me]\?[_F+47R,As\:]LE@6H1^Wgp.AVhbcllSI6!0[<_cRs2,+uEKo$K0BS7`B`
%_.=KE[8B@mOf@WZ'\=FBpsUfBNtj'2'\0_rg%=S+b[(['[dn^djNiIa",s*5]?@K)os#Vj<.,3E2\<IO7gYLGPZ>NYV;!&fKkVVG
%mCIdDMpk6#_t5g(Ih].9?6CPeE$.Y$`5_:FLNV0f=M=N>Pk@Wtf40N)(6<^QP1QFaDr'D#3,d<JL\,&&8uo0jAK@h?</BPj!:OSl
%Q4mn&3Dm6'S11W.iFRnm8u+dEf[lbrZmbmH`[ip0/0gg+`marh0+Sgp"S"s*lPfcI\*Sk"%Q-A*i^*W`\"Ykl/bMI'(4G9&Q9)L*
%234+R/VVjkr][B&$*3Hj^)8fok)B*u&7;2e&:6C5"ou;(q5*QJ!^2D3hL!AD&p&DHkb+#s^bm0g<F9(a>'Bi.Y(\Rj':c>$\LrtS
%$]rD8+!b[:qk7(P5..h9q)"Kr=TCU-2><LGl4gnh6G:t:QmY3)e;-8EYa`r!/DBMQn:D:R#NI'0U_!->2RV7k_5-FT/$n1&Hh<,u
%6V*?9eL7!KXH\l!`F#>NU=IC%lcNnMe>hWt'Be'*N6Y%4hL,U$0*IH!f/QBHf6d*L<RLQ4`8/Bkd-!skdP@H]cSiWJBhPM"e_:C.
%hCo;3'rN-?BGs#QoHeGU]iT!bGu_30OWW5bFPgil]"+)rE[/nPKLK^G-`KL[*VAcuEA,!Qq#1!W`V;%RCWc7e8l&WY.jj$Oo^_aT
%$p>L#[CATWQ?O2!7B\CpJbrt#r2@2dW/$W?8sEJIjaVtW>GU#kYZ3/t1?dP&ULQcO]^.%q(iE"`0eH+qZ!\gI,Xt\m*YT?C<NeD"
%+o]s6W40f1A&cqY@r%L-38s<`4VS;R=*NYd\:6E!N(gekH?\!Q1Y"dYjsBOmc4\lJ08?8gC;S=`JDXP)cZdoBUtRC"nE[#3a#t6r
%PSO`l"NTh9#/^8A98W!*36>]6)>GW)GEi&+_Z.GsG6])D#5j1<L%&ZlcIGQ-^5t4P6!D=H((<W2F')3rojuXbj+c-Mhfb3"7&M`f
%LNhH07*tJZjdZX.B<#%HL1FfU3pPO@?df=D=&sZGoYCL4hk[X]oX;.'C*g<a5(]>H*VAd(IjFW%(B#%;6^d,KfNo?8G(B>/SDTP2
%5RU;?dd*j@a6hdD0=3NF%[gbDm9kJ;ESP2h:"2>`mlb7"0;IACpKt*HLXb)A"op'V\d!#fi2\-"K-Xr/9q@?>?jg`PX=dKR])X8+
%EAlljH.[^Dc\qlekSV.[m3g5=if7mNTJ']jP=T%$\),;emtK<7/kj-N%t\_tKN^Hk2<,3OI;"4d1*j7FrJ)`+6dj$\\''j1(dhTO
%nRC_+,R4moX%u*[K<iL/EgK:`DpT.ii46$9RMp_N74%gBPY8%Ik%AS%lscn<2u+R#870q.7lY415N34,jYO]`e4G$eL:%8,b+7sT
%+]G<f;8eA+#N"/_mtH]V'Jg3CXRS*9f4&.q"0Fes`,LHQCKR:Q;GC6C*[#M[R,s/D(I*9<PkXjG/A=8BRkJ)XI5,MT%H$'!59hW5
%N_6t.P=kEP^i"GXnn,=MU?`IhSaqP3L5\\-jW/&sU9J4R17#K4LlS6i-RP)ZGuLd:$bdNmD6/!OWLaOpH=_S%fFAEj$?gd>g-&rN
%1*rd"X3'_nJl#J0K`*d?Vbj/:QE$9K?QM)^'XjJs<9:GX6\WrUobAu5$*(Lj6oIDk.`LuC"=C9b*RX\t%f.[AGEqQM+`9CVcQ9E'
%#r>c7\a@iLU_Vk"47%?c71&],X/osUFjQI`^Su#c<"Qe88Z'A,%K4lkZ97'\&X0HJ9e^Z%B"h]MBAAhN?cDu@Z5mp(enAqPmO7E%
%b9.QVih9)dcZ\5jo/&1R;)";!f!*>jYG-JEfo?>cBdqM<Bb+InN7kb#i+,2NKLk6R/.^Thi1NWK&`)tH-NA5<QZ9d<Ckn6To#7OL
%Skb=C&iGfjcpSXu--!I`H_)Lj#8=k_:V3_l)td4dD^sMhVcK<qeDj?seIq_RiHd.;#JR,ue-&\)ZVMf=GITX>noPoFA_c`'gYoeS
%M+*L+U.V?t&%3J56m"IjqZ]RG%gn,o[1cWM"5./.ONXT+idOhZDC2=dg/Mn/jXJ8jfC7dP+eI]5P\s,>oeYXb6E9-.lFh1eK&cYB
%-(>Z6em-mLg6%r7'Oo!hlF&;4,Fb5[9>1M(qH9!d>nnE:co?+(EY!B("_nZJ!Jbb%ee%Y6R<cbKN@hl_o^*;lIR)3@1-V7P]HDI"
%5ck,([QEfMdsB)Ghoqq:9R2\]#0+=8^gX(?k&o%CSfmK.'nbHZ'NQPTAH7"^9m#!ubQ*&0h+t@eqY6IJ1<lYB2X8P,Q_d0%8D!3h
%^]q$CK>W-a8(^B<!VQQk]Y`OB2J:`8iRslJLL&?2=DS^mQqs*ENDn4/e(e8E$>$0P/;#jrS`])6oJtjsdI&0.KnHB%`b`^$F^d4;
%&2ue5)^W=Ea.JZjD8?dB[Eg4qhAnP8Ns:i;%K;ImlG^(s<O["k-pjlV3i$4!S('H(%t-4u]lDrD=r29Vl(H.R'&;7tZ]b[o'8tAJ
%V@pja=Z38p,5G\X%Vo>"](G4[meQXu(+t`e&6O3RmZBY,gW)DalBCQ,n]gdlj4::(RdS%Ea8fT]FJf`g[Kgas+s(2iOt%/eqs8W)
%T4+=NqJqV/F]f-m4mg4sWHtF7!qqA?*s7aSqehc=_k(QN!&PegP@oO)*VN1-QJK7e#eL.@-BnN0TPH1IdAgOHLXg=?Al:BQT8\);
%giZ2tl$Z>RUuUL'oG1(V*5V7i$6;'F)!Jig`C4]!$A^H_1@"7HO.c%b^Hbm+j"@lacc(-cC31Q8Y/0+tW9-gL_Pq&ACs9Md"r0Eo
%5GBcI\Q4\V5<0U/!6,hl2VEOi*5Ei3BihfWKAIR@h<QsV%P8m8eoYc\,?)""YCa]T<8\1)Fla?I)K*$#WFWQ9bBmf=6-s`F3mU,O
%O5/;Im\/3NNTN#)p4@J;\pi?5mZiA:cfAh06e=)136n?.b)pic?NMA\"1pg5:nL&5bZte6B7moZJ\?8-OrR;^FPY8tG"P%6+)A@0
%@7Mb0-1g/]T5)8KZQjf;p$T>Nea,]9U]_\&B0PVR&Iu1gY3:7BSYn"VhEX_J6c$J50_*tlpP,f'\X8e43\i@8FAu*V2O?p+Y&sc(
%brc2ZhqHIn._/m*]KPJXC8okEDJ?F49Z%4WU>c4<0#D==-$MH`G/VIVihYX9Y+sho2g5on,o8aQ76RBm\b6$5JB"ZK2/H*P&Q<_j
%>['VprL!?!r*sO8j6+2QO2p/WL]>$dpOE+-s7)T9If%qCrr2AI&,u"3rq;t6pYYu>g]-sDhu2MPs5osRmC-GPpT*3NbJ2t:IeUU<
%J,7\[s5A2%p4*,8&&8"l^\uK.rI=SF?ck&"h;A1kJ,)liq`"Ns!OjH-~>
%AI9_PrivateDataEnd
