%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_lemon.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_lemon</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T01:31:34+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T01:31:35+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T01:31:35+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6xnNu4dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqW3mv2UFybKBZL/UAKmytF9SRa9PUN&#xA;QkY95GXK82aGKPFkkIx8/wBHf8F8gkl35vt4mb9I6xY6Uq15WtqG1O7AHXn6dEiP+xcZhjXyn/d4&#xA;py85VGP2kIO3UJXcefPKqM6mLzDqrqWqzzR2Mfwh609BbZgB6bVqvY16ZdHJmNEjHH/O4u7+ge8d&#xA;erWT5n5ftQk3nvR1LCPylqjcG4n1PMN9HTdgeR9RqU9N6+HFv5WpkwzA1co/CP7PMfMd4YESRMHn&#xA;zy8oC3Og+YNPkAFfqupNfMpYrQUuid6uooRWpp7ZPxMZ5SFfAd/9Hyv7eSPWEbaefPKMqxiLzVea&#xA;dI9CsWvaasnIMAy/HY+gq1BB5E9Mu8K7qj7v7T9y+LIc2TWVzrFxAbm0itNes0NHutDukuCopWsk&#xA;EnpOp/yULnKzj/H43+xkM46q1lqljeM8cEn7+KnrW0itFNGT2kikCyJ/slyBFNwkCisCXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgNX1u00uNPVWSe5mJFtZW6GSeVlFSEQ&#xA;eA6k7DvglKMRxSIjEdTsEEsbsZ/PPmfVpbO4spvLmiW9DcSOG+sT16RxyfDQH9opuOnLfNV2j21g&#xA;w4rxSGTJLlXTzP6LTCEpHfYMX1+xpe3OmwPImjQyMv1dNkKxCQSSNGgCvITbXFGcFiwj33NadJmu&#xA;IySo5SOZ571Qs8h6obDauP4CQ3rp+P2oKWxaN3RAIEhPF3jA4Kylldl7FYzbzMtf2YB/O1b45bAP&#xA;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&#xA;V2KuxV2KuxV2KuxV2KuxV//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:3599A0C8D8E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3699A0C8D8E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:fe7b3430-d069-cd43-9983-b39c93ae2f8c</stRef:instanceID>
            <stRef:documentID>xmp.did:F229A99815206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.878431 .745098 .545098 rgb
f
610.891 612.915 mo
578.887 612.915 546.34 607.989 514.148 598.278 cv
436.465 574.829 392.875 524.938 376.984 441.274 cv
373.52 423.005 371.496 408.134 369.871 396.188 cv
369.051 390.134 368.332 384.853 367.582 380.302 cv
362.023 346.649 376.117 307.974 377.48 304.341 cv
378.352 301.243 386.402 275.235 412.484 266.544 cv
417.992 264.704 424.504 260.903 432.043 256.497 cv
454.129 243.591 490.766 222.868 549.082 222.868 cv
569.984 222.868 592.863 225.407 617.094 230.411 cv
677.793 242.946 727.777 276.767 763.734 323.438 cv
797.074 366.704 812.27 417.884 805.516 464.048 cv
806.574 467.638 810.316 480.415 814.984 497.938 cv
819.074 513.307 829.965 554.118 782.754 570.399 cv
765.488 576.353 752.648 580.997 741.332 585.095 cv
726.258 590.552 714.348 594.853 699.168 599.646 cv
671.297 608.454 641.594 612.915 610.891 612.915 cv
cp
.27451 .207843 .145098 rgb
f
381.98 305.81 mo
381.98 305.81 388.934 279.38 413.977 271.032 cv
442.457 261.54 486.832 207.919 614.797 234.345 cv
742.777 260.774 814.582 373.97 800.676 464.384 cv
800.676 464.384 804.848 478.294 810.414 499.157 cv
815.969 520.024 820.848 545.759 780.504 559.665 cv
740.168 573.579 724.168 586.79 697.738 595.138 cv
671.316 603.485 604.051 620.462 515.516 593.747 cv
456.75 576.009 400.281 538.599 381.633 440.388 cv
376.418 412.915 374.48 393.044 372.25 379.528 cv
366.684 345.798 381.98 305.81 381.98 305.81 cv
cp
.988235 .87451 .054902 rgb
f
367.441 323.532 mo
368.156 323.935 368.699 324.423 369.098 324.872 cv
371.098 327.075 371.648 330.36 371.039 336.208 cv
370.684 339.618 371.117 341.403 371.414 342.04 cv
371.492 341.302 371.566 340.54 371.633 339.771 cv
372.074 335.009 372.57 329.618 374.926 324.649 cv
378.902 316.247 380.086 311.45 380.344 308.841 cv
379.918 309.763 379.379 310.825 378.551 312.001 cv
375.473 316.392 371.859 317.067 368.977 316.993 cv
368.949 317.165 368.914 317.329 368.891 317.474 cv
368.695 318.634 368.465 319.954 368.039 321.216 cv
367.758 322.079 367.566 322.88 367.441 323.532 cv
cp
371.535 362.821 mo
371.336 362.821 371.145 362.813 370.98 362.806 cv
368.996 362.696 366.547 361.321 366.152 357.798 cv
366.078 357.134 366.02 356.321 365.957 355.435 cv
365.844 353.888 365.582 350.353 365.07 349.149 cv
362.957 347.204 360.785 343.239 361.625 335.224 cv
361.805 333.54 361.828 332.427 361.809 331.724 cv
360.754 331.325 359.832 330.622 359.145 329.669 cv
356.945 326.614 357.883 321.763 359.066 318.224 cv
359.305 317.509 359.426 316.673 359.566 315.856 cv
359.957 313.56 361.184 306.544 367.613 307.372 cv
370.02 307.673 370.027 307.673 370.805 306.571 cv
371.363 305.778 371.684 305.032 372.066 304.165 cv
373.051 301.931 374.27 299.157 378.699 296.774 cv
381.078 295.493 382.742 291.696 383.059 290.751 cv
388.41 284.946 li
389.574 287.97 li
390.949 288.622 392.027 289.892 392.551 291.462 cv
393.285 293.665 392.887 296.243 391.363 299.329 cv
391.375 299.333 li
391.332 299.423 391.137 299.817 390.895 300.431 cv
390.426 301.642 389.668 304.036 389.832 306.532 cv
390.18 311.688 388.098 318.938 383.473 328.7 cv
381.84 332.157 381.441 336.47 381.059 340.638 cv
380.813 343.278 381.594 348.247 380.594 350.669 cv
377.98 356.927 373.559 362.821 371.535 362.821 cv
cp
.27451 .207843 .145098 rgb
f
387.195 297.114 mo
387.195 297.114 386.879 297.712 386.48 298.724 cv
385.793 300.493 387.371 294.853 386.848 306.853 cv
386.625 312.075 382.332 320.067 379.203 326.673 cv
376.074 333.282 379.895 341.278 378.508 347.54 cv
377.113 353.798 371.203 360.407 370.855 357.278 cv
370.512 354.146 370.504 347.54 368.422 345.798 cv
367.316 344.88 365.637 342.321 366.332 335.716 cv
367.023 329.106 365.984 327.368 363.898 327.368 cv
361.816 327.368 362.508 322.849 363.551 319.72 cv
364.594 316.591 364.246 311.72 367.023 312.067 cv
369.813 312.419 371.375 310.853 373.813 307.372 cv
376.246 303.896 376.414 303.376 380.941 300.942 cv
385.461 298.505 387.547 292.247 387.547 292.247 cv
387.547 292.247 389.332 293.091 386.879 297.712 cv
387.195 297.114 li
cp
.682353 .764706 .172549 rgb
f
393.703 477.044 mo
393.703 477.044 472.453 649.544 715.996 582.271 cv
715.996 582.271 617.453 599.544 527.453 569.544 cv
425.277 535.485 393.703 477.044 393.703 477.044 cv
393.703 477.044 li
cp
.27451 .207843 .145098 rgb
f
802.41 445.954 mo
802.41 445.954 805.551 458.122 803.461 463.688 cv
801.363 469.251 810.063 487.681 812.844 508.896 cv
812.844 508.896 809.715 501.942 805.539 501.243 cv
801.371 500.548 801.715 499.157 798.586 492.204 cv
795.453 485.247 784.328 487.685 783.285 493.942 cv
782.25 500.2 783.977 503.329 776.676 509.244 cv
769.371 515.154 770.766 518.982 763.813 523.153 cv
756.855 527.325 743.305 555.497 742.953 557.583 cv
742.602 559.665 747.121 536.716 758.941 519.677 cv
765.773 509.822 768.684 500.548 775.285 491.161 cv
781.898 481.771 800.324 463.688 802.41 445.954 cv
cp
f
435.363 263.036 mo
435.363 263.036 517.605 223.044 601.066 239.04 cv
601.066 239.04 706.438 251.907 767.641 343.364 cv
767.641 343.364 705.973 273.716 620.539 251.04 cv
524.91 225.657 435.363 263.036 435.363 263.036 cv
cp
f
gsave
496.395 341.97 mo
496.395 341.97 498.133 311.72 531.512 308.591 cv
563.637 305.579 605.242 325.282 602.805 361.794 cv
600.375 398.31 567.688 406.306 536.73 395.876 cv
505.777 385.446 492.914 363.188 496.395 341.97 cv
cp
clp
500.219 317.634 mo
500.219 317.634 487.004 327.72 491.871 348.931 cv
491.871 348.931 491.871 335.021 500.219 317.634 cv
cp
1 1 .886275 rgb
f
509.262 311.024 mo
509.262 311.024 491.871 330.497 496.047 363.884 cv
496.047 363.884 496.395 339.192 509.262 311.024 cv
cp
f
520.387 304.247 mo
520.387 304.247 496.395 336.063 502.652 375.188 cv
502.652 375.188 502.652 344.411 520.387 304.247 cv
cp
f
530.301 302.677 mo
530.301 302.677 503.695 339.716 509.113 386.661 cv
509.113 386.661 509.113 350.228 530.301 302.677 cv
cp
f
541.254 302.677 mo
541.254 302.677 510.512 342.243 516.777 392.399 cv
516.777 392.399 516.777 353.474 541.254 302.677 cv
cp
f
550.645 304.247 mo
550.645 304.247 519.902 343.806 526.164 393.962 cv
526.164 393.962 526.164 355.044 550.645 304.247 cv
cp
f
558.988 308.415 mo
558.988 308.415 528.246 347.981 534.512 398.134 cv
534.512 398.134 534.512 359.212 558.988 308.415 cv
cp
f
569.945 309.978 mo
569.945 309.978 537.887 351.157 544.418 403.353 cv
544.418 403.353 544.418 362.849 569.945 309.978 cv
cp
f
579.328 313.634 mo
579.328 313.634 547.277 354.81 553.809 407.005 cv
553.809 407.005 553.809 366.497 579.328 313.634 cv
cp
f
589.77 314.677 mo
589.77 314.677 557.707 355.849 564.242 408.048 cv
564.242 408.048 564.242 367.544 589.77 314.677 cv
cp
f
594.238 328.466 mo
594.238 328.466 568.176 361.356 573.875 402.626 cv
573.875 402.626 574.594 370.274 594.238 328.466 cv
cp
f
602.582 331.595 mo
602.582 331.595 576.527 364.489 582.219 405.759 cv
582.219 405.759 582.934 373.407 602.582 331.595 cv
cp
f
608.02 341.802 mo
608.02 341.802 586.723 368.169 591.395 401.267 cv
591.395 401.267 591.965 375.321 608.02 341.802 cv
cp
f
grestore
433.277 259.903 mo
433.277 259.903 422.324 270.337 421.281 273.989 cv
420.23 277.642 417.625 277.642 412.934 275.556 cv
408.234 273.47 398.848 276.595 398.848 276.595 cv
398.848 276.595 419.711 264.079 433.277 259.903 cv
cp
f
gsave
435.363 264.079 mo
435.363 264.079 478.66 236.954 553.773 239.563 cv
628.887 242.173 684.176 267.204 715.996 291.724 cv
747.816 316.243 790.59 357.974 804.152 418.481 cv
794.758 430.478 li
794.758 430.478 744.168 402.829 734.254 385.095 cv
724.344 367.36 678.957 314.153 574.637 291.204 cv
501.582 275.13 472.395 286.509 449.445 287.028 cv
426.496 287.552 415.539 276.595 435.363 264.079 cv
cp
clp
481.27 244.255 mo
481.27 244.255 461.824 255.677 455.184 295.896 cv
455.184 295.896 453.289 255.677 481.27 244.255 cv
cp
f
492.742 242.173 mo
492.742 242.173 469.02 255.091 460.926 300.591 cv
460.926 300.591 461.965 254.169 492.742 242.173 cv
cp
f
497.957 242.173 mo
497.957 242.173 468.746 257.817 466.664 311.548 cv
466.664 311.548 472.918 267.204 497.957 242.173 cv
cp
f
506.828 240.087 mo
506.828 240.087 477.613 255.731 475.531 309.462 cv
475.531 309.462 481.785 265.122 506.828 240.087 cv
cp
f
516.73 236.431 mo
516.73 236.431 487.527 252.079 485.441 305.81 cv
485.441 305.81 491.699 261.474 516.73 236.431 cv
cp
f
525.082 234.868 mo
525.082 234.868 495.867 250.517 493.781 304.247 cv
493.781 304.247 500.047 259.903 525.082 234.868 cv
cp
f
533.43 233.821 mo
533.43 233.821 504.215 249.474 502.133 303.2 cv
502.133 303.2 508.391 258.864 533.43 233.821 cv
cp
f
541.777 233.302 mo
541.777 233.302 512.563 248.95 510.477 302.677 cv
510.477 302.677 516.73 258.341 541.777 233.302 cv
cp
f
550.121 233.302 mo
550.121 233.302 520.91 248.95 518.824 302.677 cv
518.824 302.677 525.082 258.341 550.121 233.302 cv
cp
f
558.465 232.782 mo
558.465 232.782 529.254 248.431 527.168 302.157 cv
527.168 302.157 533.43 257.817 558.465 232.782 cv
cp
f
566.285 233.821 mo
566.285 233.821 537.078 249.474 534.992 303.2 cv
534.992 303.2 541.254 258.864 566.285 233.821 cv
cp
f
574.637 233.302 mo
574.637 233.302 545.426 248.95 543.34 302.677 cv
543.34 302.677 549.602 258.341 574.637 233.302 cv
cp
f
582.465 235.388 mo
582.465 235.388 553.25 251.04 551.164 304.763 cv
551.164 304.763 557.418 260.427 582.465 235.388 cv
cp
f
590.813 234.868 mo
590.813 234.868 561.594 250.517 559.504 304.247 cv
559.504 304.247 565.77 259.903 590.813 234.868 cv
cp
f
598.629 235.911 mo
598.629 235.911 569.426 251.56 567.332 305.286 cv
567.332 305.286 573.598 260.95 598.629 235.911 cv
cp
f
606.98 235.388 mo
606.98 235.388 577.766 251.04 575.684 304.763 cv
575.684 304.763 581.938 260.427 606.98 235.388 cv
cp
f
614.281 237.997 mo
614.281 237.997 585.07 253.646 582.98 307.372 cv
582.98 307.372 589.242 263.036 614.281 237.997 cv
cp
f
622.629 237.478 mo
622.629 237.478 593.41 253.122 591.332 306.853 cv
591.332 306.853 597.59 262.513 622.629 237.478 cv
cp
f
629.93 241.126 mo
629.93 241.126 600.715 256.774 598.629 310.505 cv
598.629 310.505 604.887 266.165 629.93 241.126 cv
cp
f
638.273 240.603 mo
638.273 240.603 609.059 256.255 606.98 309.978 cv
606.98 309.978 613.234 265.642 638.273 240.603 cv
cp
f
645.578 243.212 mo
645.578 243.212 616.371 258.864 614.281 312.587 cv
614.281 312.587 620.539 268.251 645.578 243.212 cv
cp
f
653.93 242.692 mo
653.93 242.692 624.711 258.341 622.629 312.067 cv
622.629 312.067 628.887 267.731 653.93 242.692 cv
cp
f
656.535 247.388 mo
656.535 247.388 628.887 278.161 630.449 315.2 cv
630.449 315.2 634.105 283.376 656.535 247.388 cv
cp
f
637.531 314.04 mo
637.531 314.04 641.008 270.872 661.965 251.153 cv
661.965 251.153 645.395 276.341 637.531 314.04 cv
cp
f
644.316 317.169 mo
644.316 317.169 647.785 274.001 668.746 254.282 cv
668.746 254.282 652.18 279.474 644.316 317.169 cv
cp
f
651.098 319.255 mo
651.098 319.255 654.566 276.087 675.531 256.368 cv
675.531 256.368 658.957 281.56 651.098 319.255 cv
cp
f
657.879 322.388 mo
657.879 322.388 661.352 279.216 682.309 259.501 cv
682.309 259.501 665.746 284.688 657.879 322.388 cv
cp
f
663.617 328.122 mo
663.617 328.122 667.09 284.954 688.051 265.239 cv
688.051 265.239 671.48 290.427 663.617 328.122 cv
cp
f
670.395 331.255 mo
670.395 331.255 673.871 288.087 694.828 268.368 cv
694.828 268.368 678.266 293.56 670.395 331.255 cv
cp
f
676.66 335.427 mo
676.66 335.427 680.125 292.259 701.086 272.54 cv
701.086 272.54 684.52 297.728 676.66 335.427 cv
cp
f
683.441 338.556 mo
683.441 338.556 686.906 295.388 707.871 275.669 cv
707.871 275.669 691.301 300.86 683.441 338.556 cv
cp
f
689.172 343.251 mo
689.172 343.251 692.648 300.083 713.605 280.364 cv
713.605 280.364 697.043 305.556 689.172 343.251 cv
cp
f
695.949 346.384 mo
695.949 346.384 699.426 303.212 720.395 283.493 cv
720.395 283.493 703.82 308.685 695.949 346.384 cv
cp
f
701.691 352.118 mo
701.691 352.118 705.168 308.95 726.125 289.231 cv
726.125 289.231 709.555 314.423 701.691 352.118 cv
cp
f
708.473 355.247 mo
708.473 355.247 711.945 312.079 732.91 292.36 cv
732.91 292.36 716.34 317.552 708.473 355.247 cv
cp
f
714.73 362.552 mo
714.73 362.552 718.211 319.384 739.172 299.665 cv
739.172 299.665 722.602 324.856 714.73 362.552 cv
cp
f
721.512 365.681 mo
721.512 365.681 724.992 322.509 745.949 302.798 cv
745.949 302.798 729.379 327.985 721.512 365.681 cv
cp
f
726.73 372.466 mo
726.73 372.466 730.203 329.294 751.168 309.575 cv
751.168 309.575 734.598 334.763 726.73 372.466 cv
cp
f
733.508 375.591 mo
733.508 375.591 736.984 332.423 757.953 312.704 cv
757.953 312.704 741.379 337.896 733.508 375.591 cv
cp
f
739.25 380.806 mo
739.25 380.806 742.723 337.642 763.684 317.923 cv
763.684 317.923 747.117 343.11 739.25 380.806 cv
cp
f
746.039 383.938 mo
746.039 383.938 749.504 340.771 770.461 321.052 cv
770.461 321.052 753.898 346.243 746.039 383.938 cv
cp
f
750.727 391.763 mo
750.727 391.763 754.199 348.595 775.164 328.876 cv
775.164 328.876 758.59 354.067 750.727 391.763 cv
cp
f
757.504 394.892 mo
757.504 394.892 760.984 351.724 781.945 332.005 cv
781.945 332.005 765.375 357.196 757.504 394.892 cv
cp
f
762.723 400.11 mo
762.723 400.11 766.195 356.942 787.16 337.22 cv
787.16 337.22 770.59 362.411 762.723 400.11 cv
cp
f
769.504 403.239 mo
769.504 403.239 772.977 360.071 793.941 340.353 cv
793.941 340.353 777.371 365.54 769.504 403.239 cv
cp
f
775.242 412.106 mo
775.242 412.106 778.715 368.938 799.68 349.216 cv
799.68 349.216 783.109 374.411 775.242 412.106 cv
cp
f
782.023 415.239 mo
782.023 415.239 785.496 372.067 806.457 352.349 cv
806.457 352.349 789.891 377.536 782.023 415.239 cv
cp
f
786.715 422.017 mo
786.715 422.017 790.188 378.849 811.156 359.13 cv
811.156 359.13 794.582 384.321 786.715 422.017 cv
cp
f
793.5 425.149 mo
793.5 425.149 796.973 381.978 817.934 362.263 cv
817.934 362.263 801.363 387.446 793.5 425.149 cv
cp
f
473.957 243.735 mo
473.957 243.735 454.52 255.157 447.879 295.376 cv
447.879 295.376 445.984 255.157 473.957 243.735 cv
cp
f
467.703 240.087 mo
467.703 240.087 448.262 251.501 441.613 291.724 cv
441.613 291.724 439.719 251.501 467.703 240.087 cv
cp
f
grestore
483.871 237.997 mo
483.871 237.997 538.645 215.044 628.367 237.997 cv
698.48 255.935 729.563 292.767 748.859 315.2 cv
748.859 315.2 686.418 256.985 622.102 242.692 cv
532.91 222.868 483.871 237.997 483.871 237.997 cv
cp
.996078 1 .854902 rgb
f
799.285 421.958 mo
799.285 421.958 811.805 448.388 787.465 476.903 cv
763.129 505.415 747.82 537.411 742.258 558.278 cv
742.258 558.278 746.43 523.501 758.25 504.724 cv
770.082 485.946 776.332 481.071 786.066 466.47 cv
795.813 451.864 799.984 438.649 799.285 421.958 cv
cp
f
gsave
384.953 435.794 mo
384.953 435.794 378.703 522.044 527.453 569.544 cv
644.246 606.841 711.203 587.044 722.453 567.044 cv
733.703 547.044 738.703 503.294 719.953 498.294 cv
701.203 493.294 662.902 435.423 546.625 422.048 cv
405.375 405.798 384.953 429.544 384.953 435.794 cv
cp
clp
576.203 450.298 mo
576.203 450.298 546.988 526.454 556.379 584.36 cv
556.379 584.36 539.691 521.763 576.203 450.298 cv
cp
.27451 .207843 .145098 rgb
f
586.113 449.255 mo
586.113 449.255 550.645 515.506 566.285 597.919 cv
566.285 597.919 559.504 524.892 586.113 449.255 cv
cp
f
595.5 449.778 mo
595.5 449.778 560.031 516.025 575.684 598.442 cv
575.684 598.442 568.898 525.415 595.5 449.778 cv
cp
f
605.414 452.384 mo
605.414 452.384 569.945 518.635 585.594 601.052 cv
585.594 601.052 578.813 528.021 605.414 452.384 cv
cp
f
616.371 455.517 mo
616.371 455.517 580.891 521.763 596.547 604.181 cv
596.547 604.181 589.77 531.149 616.371 455.517 cv
cp
f
626.273 456.56 mo
626.273 456.56 590.813 522.806 606.457 605.224 cv
606.457 605.224 599.672 532.192 626.273 456.56 cv
cp
f
636.711 458.646 mo
636.711 458.646 601.242 524.892 616.887 607.31 cv
616.887 607.31 610.105 534.282 636.711 458.646 cv
cp
f
646.098 461.255 mo
646.098 461.255 610.629 527.497 626.273 609.919 cv
626.273 609.919 619.496 536.892 646.098 461.255 cv
cp
f
653.93 471.685 mo
653.93 471.685 621.566 531.423 635.844 605.747 cv
635.844 605.747 629.652 539.892 653.93 471.685 cv
cp
f
661.324 480.931 mo
661.324 480.931 629.746 536.72 644.984 605.36 cv
644.984 605.36 637.941 544.45 661.324 480.931 cv
cp
f
667.563 489.56 mo
667.563 489.56 640.363 542.083 655.789 605.474 cv
655.789 605.474 647.953 549.075 667.563 489.56 cv
cp
f
675.301 499.341 mo
675.301 499.341 651.824 546.423 666.527 602.517 cv
666.527 602.517 658.703 552.524 675.301 499.341 cv
cp
f
683.012 506.524 mo
683.012 506.524 660.227 549.501 675.73 599.501 cv
675.73 599.501 667.195 554.79 683.012 506.524 cv
cp
f
688.582 521.731 mo
688.582 521.731 670.988 557.075 683.66 598.052 cv
683.66 598.052 676.527 561.392 688.582 521.731 cv
cp
f
695.051 529.431 mo
695.051 529.431 678.324 561.149 691.906 596.267 cv
691.906 596.267 683.949 564.642 695.051 529.431 cv
cp
f
701.832 534.646 mo
701.832 534.646 687.141 562.005 698.969 592.239 cv
698.969 592.239 692.055 565.001 701.832 534.646 cv
cp
f
708.176 539.497 mo
708.176 539.497 694.484 563.923 705.281 590.798 cv
705.281 590.798 699.008 566.571 708.176 539.497 cv
cp
f
713.914 544.716 mo
713.914 544.716 702.727 565.892 711.801 589.333 cv
711.801 589.333 706.488 568.22 713.914 544.716 cv
cp
f
494.953 432.798 mo
494.953 432.798 465.738 508.955 475.129 566.86 cv
475.129 566.86 458.441 504.263 494.953 432.798 cv
cp
f
504.863 431.755 mo
504.863 431.755 469.395 498.005 485.035 580.419 cv
485.035 580.419 478.254 507.393 504.863 431.755 cv
cp
f
514.25 432.278 mo
514.25 432.278 478.781 498.524 494.434 580.942 cv
494.434 580.942 487.648 507.916 514.25 432.278 cv
cp
f
524.164 434.884 mo
524.164 434.884 488.695 501.134 504.344 583.552 cv
504.344 583.552 497.563 510.521 524.164 434.884 cv
cp
f
535.121 438.017 mo
535.121 438.017 499.641 504.263 515.297 586.681 cv
515.297 586.681 508.52 513.65 535.121 438.017 cv
cp
f
545.023 439.06 mo
545.023 439.06 509.563 505.306 525.207 587.724 cv
525.207 587.724 518.422 514.693 545.023 439.06 cv
cp
f
555.461 441.146 mo
555.461 441.146 519.992 507.393 535.637 589.81 cv
535.637 589.81 528.855 516.783 555.461 441.146 cv
cp
f
564.848 443.755 mo
564.848 443.755 529.379 509.998 545.023 592.419 cv
545.023 592.419 538.246 519.392 564.848 443.755 cv
cp
f
413.703 421.548 mo
413.703 421.548 384.488 497.704 393.879 555.61 cv
393.879 555.61 377.191 493.013 413.703 421.548 cv
cp
f
423.613 420.505 mo
423.613 420.505 388.145 486.755 403.785 569.169 cv
403.785 569.169 397.004 496.142 423.613 420.505 cv
cp
f
433 421.028 mo
433 421.028 397.531 487.274 413.184 569.692 cv
413.184 569.692 406.398 496.665 433 421.028 cv
cp
f
442.914 423.634 mo
442.914 423.634 407.445 489.884 423.094 572.302 cv
423.094 572.302 416.313 499.271 442.914 423.634 cv
cp
f
453.871 426.767 mo
453.871 426.767 418.391 493.013 434.047 575.431 cv
434.047 575.431 427.27 502.399 453.871 426.767 cv
cp
f
463.773 427.81 mo
463.773 427.81 428.313 494.056 443.957 576.474 cv
443.957 576.474 437.172 503.442 463.773 427.81 cv
cp
f
474.211 429.896 mo
474.211 429.896 438.742 496.142 454.387 578.56 cv
454.387 578.56 447.605 505.532 474.211 429.896 cv
cp
f
483.598 432.505 mo
483.598 432.505 448.129 498.747 463.773 581.169 cv
463.773 581.169 456.996 508.143 483.598 432.505 cv
cp
f
grestore
366.336 335.716 mo
366.336 335.716 362.859 327.196 365.465 324.587 cv
368.078 321.978 368.98 316.993 368.98 316.993 cv
368.98 316.993 371.184 319.938 369.105 324.872 cv
367.027 329.802 363.902 341.278 369.125 350.669 cv
369.125 350.669 362.512 343.188 366.336 335.716 cv
cp
.27451 .207843 .145098 rgb
f
208.86 645.2 mo
207.704 645.306 206.333 645.364 204.665 645.364 cv
201.442 645.36 198.536 645.446 195.833 645.532 cv
188.29 645.759 181.771 645.954 174.106 644.001 cv
169.763 642.899 166.341 642.278 163.313 641.731 cv
159.731 641.083 156.345 640.47 152.427 639.231 cv
150.243 638.548 149.235 638.481 147.966 638.399 cv
145.009 638.208 142.388 637.853 135.642 635.044 cv
127.091 631.485 123.142 628.052 118.954 624.411 cv
117.454 623.106 115.88 621.735 113.962 620.274 cv
106.638 614.681 99.29 607.048 98.9775 606.724 cv
96.7666 604.415 li
98.0791 601.497 li
98.3369 600.935 104.501 587.458 116.337 573.892 cv
129.497 558.81 150.856 545.063 157.099 541.212 cv
164.821 536.431 182.271 527.856 212.224 524.126 cv
215.419 523.731 218.513 523.392 221.521 523.118 cv
248.454 520.685 270.017 523.185 300.497 543.153 cv
303.29 544.978 li
302.505 548.224 li
302.196 549.485 294.774 579.478 274.017 605.595 cv
253.997 630.786 242.126 636.802 225.954 639.575 cv
220.411 640.524 218.747 641.536 217.138 642.505 cv
214.993 643.802 213.021 644.821 208.86 645.2 cv
cp
f
297.903 547.11 mo
297.903 547.11 290.657 577.052 270.317 602.653 cv
249.97 628.255 238.755 632.579 225.153 634.911 cv
211.544 637.247 216.829 640.638 204.665 640.634 cv
192.513 640.626 184.888 641.864 175.267 639.415 cv
165.657 636.97 160.673 636.868 153.849 634.72 cv
147.024 632.575 148.364 635.22 137.458 630.677 cv
126.544 626.134 123.958 621.946 116.841 616.513 cv
109.716 611.075 102.392 603.446 102.392 603.446 cv
102.392 603.446 108.388 590.2 119.899 577.001 cv
131.419 563.802 150.165 551.06 159.583 545.235 cv
169.005 539.411 188.079 529.634 214.841 526.302 cv
247.083 522.286 266.771 526.712 297.903 547.11 cv
cp
.439216 .67451 .298039 rgb
f
286.567 549.153 mo
286.567 549.153 256.415 580.681 119.028 601.993 cv
119.028 601.993 212.493 587.271 286.567 549.153 cv
cp
.27451 .207843 .145098 rgb
f
205.876 589.435 mo
205.876 589.435 205.208 605.212 192.349 630.989 cv
192.349 630.989 203.083 604.88 202.716 589.2 cv
202.716 589.2 205.458 584.763 205.876 589.435 cv
cp
f
214.067 587.302 mo
214.067 587.302 212.45 606.13 199.587 631.903 cv
199.587 631.903 211.271 602.743 210.903 587.063 cv
210.903 587.063 213.646 582.622 214.067 587.302 cv
cp
f
222.626 585.481 mo
222.626 585.481 220.071 605.442 207.208 631.216 cv
207.208 631.216 219.833 600.923 219.466 585.243 cv
219.466 585.243 222.208 580.806 222.626 585.481 cv
cp
f
230.466 583.376 mo
230.466 583.376 227.403 605.474 214.548 631.255 cv
214.548 631.255 227.673 598.817 227.302 583.138 cv
227.302 583.138 230.044 578.696 230.466 583.376 cv
cp
f
238.216 580.235 mo
238.216 580.235 236.415 600.821 223.552 626.599 cv
223.552 626.599 235.423 595.677 235.056 579.993 cv
235.056 579.993 237.794 575.56 238.216 580.235 cv
cp
f
246.774 578.411 mo
246.774 578.411 244.853 597.618 231.997 623.392 cv
231.997 623.392 243.981 593.853 243.614 578.173 cv
243.614 578.173 246.36 573.735 246.774 578.411 cv
cp
f
254.618 576.306 mo
254.618 576.306 253.95 592.075 241.091 617.856 cv
241.091 617.856 251.825 591.747 251.458 576.067 cv
251.458 576.067 254.192 571.634 254.618 576.306 cv
cp
f
263.446 569.575 mo
263.446 569.575 261.517 588.782 248.653 614.556 cv
248.653 614.556 260.642 585.017 260.278 569.337 cv
260.278 569.337 263.021 564.899 263.446 569.575 cv
cp
f
271.282 567.47 mo
271.282 567.47 270.606 583.243 257.751 609.021 cv
257.751 609.021 268.481 582.911 268.114 567.231 cv
268.114 567.231 270.856 562.794 271.282 567.47 cv
cp
f
280.329 559.321 mo
280.329 559.321 279.646 572.646 267.962 594.478 cv
267.962 594.478 277.743 572.376 277.481 559.134 cv
277.481 559.134 279.966 555.368 280.329 559.321 cv
cp
f
190.853 593.325 mo
190.853 593.325 190.251 607.946 178.458 631.833 cv
178.458 631.833 188.298 607.638 187.946 593.099 cv
187.946 593.099 190.462 588.985 190.853 593.325 cv
cp
f
198.372 591.349 mo
198.372 591.349 196.903 608.802 185.114 632.688 cv
185.114 632.688 195.817 605.661 195.462 591.126 cv
195.462 591.126 197.981 587.009 198.372 591.349 cv
cp
f
175.231 596.458 mo
175.231 596.458 174.618 609.474 163.528 630.782 cv
163.528 630.782 172.802 609.208 172.521 596.267 cv
172.521 596.267 174.888 592.599 175.231 596.458 cv
cp
f
182.259 594.669 mo
182.259 594.669 180.829 610.208 169.731 631.521 cv
169.731 631.521 179.821 607.419 179.548 594.481 cv
179.548 594.481 181.911 590.813 182.259 594.669 cv
cp
f
160.97 599.771 mo
160.97 599.771 160.388 610.978 150.481 629.349 cv
150.481 629.349 158.771 610.755 158.567 599.614 cv
158.567 599.614 160.669 596.45 160.97 599.771 cv
cp
f
167.216 598.216 mo
167.216 598.216 165.903 611.595 155.993 629.966 cv
155.993 629.966 165.017 609.196 164.81 598.06 cv
164.81 598.06 166.911 594.899 167.216 598.216 cv
cp
f
147.532 601.962 mo
147.532 601.962 147.04 611.353 138.724 626.751 cv
138.724 626.751 145.681 611.165 145.513 601.833 cv
145.513 601.833 147.278 599.181 147.532 601.962 cv
cp
f
154.188 600.876 mo
154.188 600.876 153.079 612.095 144.759 627.493 cv
144.759 627.493 152.341 610.083 152.161 600.755 cv
152.161 600.755 153.938 598.099 154.188 600.876 cv
cp
f
135.06 603.087 mo
135.06 603.087 133.927 612.349 129.138 617.317 cv
129.138 617.317 133.216 612.298 133.044 602.958 cv
133.044 602.958 134.81 600.306 135.06 603.087 cv
cp
f
141.716 602.005 mo
141.716 602.005 143.181 607.341 134.864 622.735 cv
134.864 622.735 139.876 611.212 139.7 601.88 cv
139.7 601.88 141.462 599.224 141.716 602.005 cv
cp
f
201.79 578.235 mo
201.79 578.235 194.11 564.446 171.048 547.177 cv
171.048 547.177 192.36 565.688 199.067 579.868 cv
199.067 579.868 203.513 582.603 201.79 578.235 cv
cp
f
186.618 581.509 mo
186.618 581.509 179.521 568.716 158.259 552.657 cv
158.259 552.657 177.911 569.864 184.122 583.013 cv
184.122 583.013 188.212 585.56 186.618 581.509 cv
cp
f
194.224 579.899 mo
194.224 579.899 185.075 564.962 163.825 548.907 cv
163.825 548.907 185.517 568.255 191.728 581.399 cv
191.728 581.399 195.817 583.95 194.224 579.899 cv
cp
f
171.259 585.72 mo
171.259 585.72 164.864 574.36 145.384 560.298 cv
145.384 560.298 163.353 575.419 168.923 587.103 cv
168.923 587.103 172.677 589.321 171.259 585.72 cv
cp
f
178.333 584.165 mo
178.333 584.165 170.075 570.923 150.599 556.856 cv
150.599 556.856 170.435 573.86 175.997 585.548 cv
175.997 585.548 179.747 587.767 178.333 584.165 cv
cp
f
157.021 589.161 mo
157.021 589.161 151.466 579.407 134.368 567.438 cv
134.368 567.438 150.126 580.333 154.935 590.38 cv
154.935 590.38 158.239 592.267 157.021 589.161 cv
cp
f
163.298 587.751 mo
163.298 587.751 156.11 576.38 139.013 564.411 cv
139.013 564.411 156.415 578.919 161.216 588.966 cv
161.216 588.966 164.521 590.845 163.298 587.751 cv
cp
f
144.028 593.239 mo
144.028 593.239 139.368 585.063 125.032 575.04 cv
125.032 575.04 138.247 585.837 142.282 594.259 cv
142.282 594.259 145.052 595.837 144.028 593.239 cv
cp
f
150.462 591.22 mo
150.462 591.22 144.435 581.696 130.095 571.665 cv
130.095 571.665 144.685 583.817 148.708 592.235 cv
148.708 592.235 151.489 593.813 150.462 591.22 cv
cp
f
132.38 597.829 mo
132.38 597.829 127.208 590.06 120.696 587.771 cv
120.696 587.771 126.595 590.431 130.638 598.853 cv
130.638 598.853 133.407 600.423 132.38 597.829 cv
cp
f
138.817 595.806 mo
138.817 595.806 137.728 590.384 123.388 580.356 cv
123.388 580.356 133.028 588.411 137.063 596.829 cv
137.063 596.829 139.833 598.403 138.817 595.806 cv
cp
f
223.485 571.036 mo
223.485 571.036 215.798 557.247 192.743 539.981 cv
192.743 539.981 214.052 558.497 220.763 572.673 cv
220.763 572.673 225.204 575.407 223.485 571.036 cv
cp
f
208.747 575.317 mo
208.747 575.317 198.954 560.2 177.7 544.146 cv
177.7 544.146 200.052 563.677 206.259 576.825 cv
206.259 576.825 210.345 579.372 208.747 575.317 cv
cp
f
216.356 573.708 mo
216.356 573.708 203.86 555.403 181.958 540.97 cv
181.958 540.97 207.653 562.067 213.864 575.212 cv
213.864 575.212 217.946 577.759 216.356 573.708 cv
cp
f
231.263 568.243 mo
231.263 568.243 223.571 554.45 200.517 537.185 cv
200.517 537.185 221.825 555.696 228.536 569.876 cv
228.536 569.876 232.978 572.61 231.263 568.243 cv
cp
f
239.04 564.927 mo
239.04 564.927 231.911 552.298 210.192 536.673 cv
210.192 536.673 230.231 553.474 236.423 566.466 cv
236.423 566.466 240.618 568.931 239.04 564.927 cv
cp
f
246.474 562.153 mo
246.474 562.153 239.349 549.532 217.626 533.907 cv
217.626 533.907 237.669 550.708 243.86 563.704 cv
243.86 563.704 248.052 566.165 246.474 562.153 cv
cp
f
253.497 557.942 mo
253.497 557.942 247.106 547.075 226.728 534.134 cv
226.728 534.134 245.438 548.181 250.911 559.407 cv
250.911 559.407 254.872 561.419 253.497 557.942 cv
cp
f
263.392 555.036 mo
263.392 555.036 257.118 544.743 236.396 532.911 cv
236.396 532.911 255.345 545.868 260.657 556.536 cv
260.657 556.536 264.692 558.353 263.392 555.036 cv
cp
f
273.235 550.95 mo
273.235 550.95 267.88 542.591 249.356 533.489 cv
249.356 533.489 266.22 543.595 270.681 552.306 cv
270.681 552.306 274.306 553.669 273.235 550.95 cv
cp
f
213.278 547.106 mo
212.614 546.778 211.845 546.349 210.935 545.794 cv
209.188 544.72 207.571 543.794 206.067 542.935 cv
201.884 540.544 186.028 532.478 176.767 517.134 cv
173.708 512.071 172.286 509.149 171.224 505.774 cv
170.837 504.56 170.438 503.286 169.888 501.849 cv
167.755 496.353 166.302 489.743 166.231 489.466 cv
165.798 487.466 li
167.489 486.317 li
167.821 486.095 175.673 480.806 186.653 477.364 cv
198.86 473.536 215.091 473.177 219.771 473.157 cv
225.583 473.134 237.946 474.278 255.521 482.243 cv
257.396 483.095 259.188 483.942 260.919 484.798 cv
276.415 492.462 287.333 501.021 297.278 522.075 cv
298.185 524.001 li
296.673 525.505 li
296.087 526.091 282.036 539.962 262.005 547.267 cv
242.688 554.313 234.212 553.63 224.47 549.743 cv
221.13 548.411 219.896 548.407 218.688 548.399 cv
217.083 548.388 215.677 548.29 213.278 547.106 cv
cp
f
294.54 523.368 mo
294.54 523.368 280.603 537.267 260.97 544.427 cv
241.341 551.587 234.56 551.743 226.364 548.478 cv
218.173 545.208 219.146 547.278 212.521 543.22 cv
205.892 539.157 201.228 538.763 196.81 534.22 cv
192.38 529.673 189.028 527.931 186.028 524.481 cv
183.021 521.032 183.642 521.474 179.216 515.356 cv
174.782 509.243 174.771 506.095 172.7 500.755 cv
170.638 495.419 169.192 488.821 169.192 488.821 cv
169.192 488.821 176.884 483.599 187.56 480.247 cv
198.247 476.899 212.708 476.208 219.782 476.181 cv
226.868 476.149 240.521 477.188 256.22 484.306 cv
275.13 492.876 284.388 501.86 294.54 523.368 cv
cp
.266667 .513726 .0941176 rgb
f
287.685 520.696 mo
287.685 520.696 260.724 527.813 178.743 493.579 cv
178.743 493.579 234.591 516.751 287.685 520.696 cv
cp
.27451 .207843 .145098 rgb
f
230.263 515.72 mo
230.263 515.72 224.638 524.095 209.028 533.849 cv
209.028 533.849 223.587 523.204 228.622 514.536 cv
228.622 514.536 231.595 513.032 230.263 515.72 cv
cp
f
235.438 517.29 mo
235.438 517.29 228.278 527.013 212.665 536.763 cv
212.665 536.763 228.763 524.771 233.798 516.106 cv
233.798 516.106 236.771 514.603 235.438 517.29 cv
cp
f
240.712 519.149 mo
240.712 519.149 232.661 529.181 217.048 538.931 cv
217.048 538.931 234.04 526.638 239.071 517.97 cv
239.071 517.97 242.048 516.466 240.712 519.149 cv
cp
f
245.692 520.622 mo
245.692 520.622 236.646 531.646 221.032 541.399 cv
221.032 541.399 239.005 528.103 244.044 519.438 cv
244.044 519.438 247.013 517.935 245.692 520.622 cv
cp
f
250.958 521.497 mo
250.958 521.497 243.106 532.114 227.493 541.872 cv
227.493 541.872 244.286 528.978 249.313 520.31 cv
249.313 520.31 252.286 518.806 250.958 521.497 cv
cp
f
256.231 523.36 mo
256.231 523.36 248.778 533.188 233.169 542.942 cv
233.169 542.942 249.552 530.841 254.587 522.173 cv
254.587 522.173 257.567 520.677 256.231 523.36 cv
cp
f
261.208 524.833 mo
261.208 524.833 255.583 533.204 239.966 542.962 cv
239.966 542.962 254.528 532.31 259.563 523.649 cv
259.563 523.649 262.536 522.142 261.208 524.833 cv
cp
f
268.271 524.106 mo
268.271 524.106 260.802 533.931 245.192 543.688 cv
245.192 543.688 261.583 531.587 266.618 522.923 cv
266.618 522.923 269.591 521.419 268.271 524.106 cv
cp
f
273.235 525.571 mo
273.235 525.571 267.606 533.946 251.997 543.704 cv
251.997 543.704 266.56 533.06 271.591 524.392 cv
271.591 524.392 274.567 522.888 273.235 525.571 cv
cp
f
280.888 524.153 mo
280.888 524.153 276.071 531.188 262.415 539.188 cv
262.415 539.188 275.122 530.403 279.403 523.103 cv
279.403 523.103 282.009 521.88 280.888 524.153 cv
cp
f
220.778 512.825 mo
220.778 512.825 215.575 520.587 201.177 529.673 cv
201.177 529.673 214.618 519.774 219.274 511.731 cv
219.274 511.731 222.009 510.329 220.778 512.825 cv
cp
f
225.536 514.255 mo
225.536 514.255 218.911 523.274 204.513 532.364 cv
204.513 532.364 219.368 521.204 224.032 513.165 cv
224.032 513.165 226.771 511.763 225.536 514.255 cv
cp
f
211.22 509.317 mo
211.22 509.317 206.54 516.204 193.38 524.118 cv
193.38 524.118 205.638 515.454 209.813 508.313 cv
209.813 508.313 212.321 507.103 211.22 509.317 cv
cp
f
215.653 510.692 mo
215.653 510.692 209.681 518.681 196.521 526.587 cv
196.521 526.587 210.06 516.825 214.231 509.681 cv
214.231 509.681 216.739 508.47 215.653 510.692 cv
cp
f
202.341 506.364 mo
202.341 506.364 198.286 512.278 186.751 518.978 cv
186.751 518.978 197.481 511.618 201.087 505.474 cv
201.087 505.474 203.29 504.454 202.341 506.364 cv
cp
f
206.267 507.595 mo
206.267 507.595 201.087 514.454 189.548 521.161 cv
189.548 521.161 201.399 512.853 205.005 506.716 cv
205.005 506.716 207.216 505.692 206.267 507.595 cv
cp
f
194.29 503.071 mo
194.29 503.071 190.88 508.024 181.216 513.646 cv
181.216 513.646 190.212 507.474 193.224 502.329 cv
193.224 502.329 195.075 501.474 194.29 503.071 cv
cp
f
198.274 504.704 mo
198.274 504.704 193.935 510.446 184.255 516.06 cv
184.255 516.06 194.196 509.103 197.216 503.958 cv
197.216 503.958 199.067 503.103 198.274 504.704 cv
cp
f
187.114 499.524 mo
187.114 499.524 183.407 504.192 179.138 505.306 cv
179.138 505.306 183.036 503.927 186.06 498.782 cv
186.06 498.782 187.903 497.923 187.114 499.524 cv
cp
f
191.106 501.157 mo
191.106 501.157 190.122 504.556 180.446 510.165 cv
180.446 510.165 187.028 505.56 190.048 500.415 cv
190.048 500.415 191.896 499.56 191.106 501.157 cv
cp
f
231.771 508.247 mo
231.771 508.247 232.192 498.173 225.384 481.067 cv
225.384 481.067 230.825 498.271 229.747 508.235 cv
229.747 508.235 231.255 511.204 231.771 508.247 cv
cp
f
222.411 504.97 mo
222.411 504.97 222.817 495.63 216.583 479.782 cv
216.583 479.782 221.556 495.72 220.552 504.958 cv
220.552 504.958 221.931 507.712 222.411 504.97 cv
cp
f
227.099 506.634 mo
227.099 506.634 227.091 495.438 220.872 479.595 cv
220.872 479.595 226.231 497.376 225.239 506.618 cv
225.239 506.618 226.614 509.372 227.099 506.634 cv
cp
f
212.638 502.142 mo
212.638 502.142 212.942 493.817 207.021 479.653 cv
207.021 479.653 211.763 493.884 210.903 502.114 cv
210.903 502.114 212.208 504.579 212.638 502.142 cv
cp
f
217.009 503.653 mo
217.009 503.653 216.931 493.677 211.013 479.517 cv
211.013 479.517 216.146 495.403 215.282 503.626 cv
215.282 503.626 216.579 506.091 217.009 503.653 cv
cp
f
203.724 499.263 mo
203.724 499.263 203.962 492.095 198.638 479.864 cv
198.638 479.864 202.923 492.153 202.185 499.231 cv
202.185 499.231 203.364 501.36 203.724 499.263 cv
cp
f
207.626 500.591 mo
207.626 500.591 207.505 491.993 202.177 479.767 cv
202.177 479.767 206.813 493.478 206.087 500.56 cv
206.087 500.56 207.255 502.688 207.626 500.591 cv
cp
f
195.286 497.149 mo
195.286 497.149 195.481 491.138 191.009 480.892 cv
191.009 480.892 194.603 491.185 193.993 497.122 cv
193.993 497.122 194.978 498.907 195.286 497.149 cv
cp
f
199.47 498.196 mo
199.47 498.196 199.364 490.993 194.896 480.743 cv
194.896 480.743 198.786 492.235 198.177 498.165 cv
198.177 498.165 199.161 499.954 199.47 498.196 cv
cp
f
187.411 495.767 mo
187.411 495.767 187.185 489.802 184.396 486.38 cv
184.396 486.38 186.728 489.802 186.114 495.739 cv
186.114 495.739 187.103 497.521 187.411 495.767 cv
cp
f
191.595 496.81 mo
191.595 496.81 192.806 493.489 188.337 483.239 cv
188.337 483.239 190.911 490.849 190.29 496.782 cv
190.29 496.782 191.282 498.567 191.595 496.81 cv
cp
f
245.997 511.567 mo
245.997 511.567 246.415 501.489 239.606 484.388 cv
239.606 484.388 245.044 501.587 243.974 511.552 cv
243.974 511.552 245.478 514.524 245.997 511.567 cv
cp
f
236.544 508.985 mo
236.544 508.985 236.247 497.478 230.021 481.634 cv
230.021 481.634 235.685 499.739 234.681 508.97 cv
234.681 508.97 236.06 511.728 236.544 508.985 cv
cp
f
241.224 510.646 mo
241.224 510.646 240.521 496.497 233.403 481.325 cv
233.403 481.325 240.364 501.399 239.356 510.63 cv
239.356 510.63 240.735 513.384 241.224 510.646 cv
cp
f
251.169 512.638 mo
251.169 512.638 251.583 502.556 244.778 485.454 cv
244.778 485.454 250.212 502.657 249.138 512.622 cv
249.138 512.622 250.646 515.595 251.169 512.638 cv
cp
f
256.517 513.431 mo
256.517 513.431 256.849 504.173 250.224 488.403 cv
250.224 488.403 255.54 504.251 254.583 513.399 cv
254.583 513.399 256.044 516.138 256.517 513.431 cv
cp
f
261.493 514.399 mo
261.493 514.399 261.825 505.142 255.204 489.38 cv
255.204 489.38 260.517 505.22 259.552 514.368 cv
259.552 514.368 261.013 517.11 261.493 514.399 cv
cp
f
266.728 514.45 mo
266.728 514.45 266.868 506.399 260.087 492.536 cv
260.087 492.536 265.595 506.438 264.833 514.388 cv
264.833 514.388 266.31 516.806 266.728 514.45 cv
cp
f
273.091 516.165 mo
273.091 516.165 273.103 508.462 265.763 495.099 cv
265.763 495.099 271.763 508.489 271.099 516.075 cv
271.099 516.075 272.692 518.403 273.091 516.165 cv
cp
f
279.821 517.224 mo
279.821 517.224 279.692 510.884 272.634 499.739 cv
272.634 499.739 278.446 510.872 277.974 517.11 cv
277.974 517.11 279.497 519.063 279.821 517.224 cv
cp
f
281.317 422.165 mo
281.997 421.227 282.856 420.157 283.958 418.907 cv
286.083 416.481 287.935 414.243 289.653 412.153 cv
294.45 406.329 298.61 401.293 305.122 396.817 cv
308.81 394.282 311.536 392.118 313.95 390.208 cv
316.794 387.934 319.489 385.797 322.997 383.665 cv
324.954 382.477 325.669 381.762 326.571 380.86 cv
328.665 378.762 330.657 377.024 337.22 373.801 cv
345.528 369.719 350.716 369.012 356.204 368.266 cv
358.181 367.997 360.247 367.719 362.61 367.243 cv
371.646 365.418 382.231 364.926 382.673 364.903 cv
385.872 364.758 li
387.2 367.672 li
387.458 368.243 393.528 381.754 395.931 399.594 cv
398.587 419.438 394.853 444.563 393.63 451.793 cv
392.126 460.754 387.075 479.524 370.134 504.509 cv
368.329 507.173 366.54 509.724 364.771 512.165 cv
348.841 534.024 332.747 548.591 297.638 558.345 cv
294.427 559.239 li
292.509 556.509 li
291.763 555.446 274.095 530.095 268.138 497.271 cv
262.396 465.61 265.7 452.715 274.271 438.723 cv
277.208 433.934 277.548 432.016 277.88 430.168 cv
278.317 427.696 278.845 425.543 281.317 422.165 cv
cp
f
296.376 553.786 mo
296.376 553.786 276.892 530.747 271.052 498.571 cv
265.208 466.399 271.091 452.969 278.31 441.196 cv
285.521 429.43 279.485 431.165 287.513 422.024 cv
295.536 412.891 297.298 405.602 305.478 399.985 cv
313.649 394.368 319.345 391.422 325.45 387.708 cv
331.571 383.989 328.692 383.258 339.302 378.051 cv
349.903 372.836 354.771 373.657 363.552 371.879 cv
372.325 370.11 382.888 369.629 382.888 369.629 cv
382.888 369.629 388.911 382.868 391.243 400.227 cv
393.567 417.59 390.798 440.083 388.966 451.008 cv
387.138 461.93 381.907 482.72 366.774 505.044 cv
348.548 531.935 332.235 543.821 296.376 553.786 cv
cp
.462745 .607843 .278431 rgb
f
302.302 543.911 mo
302.302 543.911 298.474 500.458 373.017 383.094 cv
373.017 383.094 322.478 463.086 302.302 543.911 cv
cp
.27451 .207843 .145098 rgb
f
325.208 456.684 mo
325.208 456.684 313.794 445.782 302.884 419.118 cv
302.884 419.118 315.438 444.407 327.474 454.461 cv
327.474 454.461 329.001 459.454 325.208 456.684 cv
cp
f
321.419 464.25 mo
321.419 464.25 308.325 450.625 297.419 423.961 cv
297.419 423.961 311.649 451.965 323.685 462.024 cv
323.685 462.024 325.208 467.016 321.419 464.25 cv
cp
f
317.138 471.888 mo
317.138 471.888 303.817 456.805 292.911 430.141 cv
292.911 430.141 307.372 459.61 319.407 469.669 cv
319.407 469.669 320.935 474.653 317.138 471.888 cv
cp
f
313.56 479.169 mo
313.56 479.169 298.958 462.301 288.052 435.637 cv
288.052 435.637 303.794 466.887 315.825 476.946 cv
315.825 476.946 317.353 481.935 313.56 479.169 cv
cp
f
310.813 487.071 mo
310.813 487.071 296.517 472.138 285.614 445.473 cv
285.614 445.473 301.044 474.786 313.079 484.845 cv
313.079 484.845 314.606 489.833 310.813 487.071 cv
cp
f
306.536 494.708 mo
306.536 494.708 293.368 480.603 282.458 453.938 cv
282.458 453.938 296.767 482.427 308.802 492.485 cv
308.802 492.485 310.329 497.474 306.536 494.708 cv
cp
f
302.958 501.993 mo
302.958 501.993 291.532 491.087 280.63 464.422 cv
280.63 464.422 293.185 489.708 305.212 499.767 cv
305.212 499.767 306.751 504.751 302.958 501.993 cv
cp
f
302.2 513.063 mo
302.2 513.063 289.028 498.954 278.118 472.29 cv
278.118 472.29 292.431 500.782 304.466 510.841 cv
304.466 510.841 305.993 515.825 302.2 513.063 cv
cp
f
298.614 520.345 mo
298.614 520.345 287.196 509.442 276.294 482.778 cv
276.294 482.778 288.849 508.063 300.88 518.122 cv
300.88 518.122 302.411 523.11 298.614 520.345 cv
cp
f
298.778 532.517 mo
298.778 532.517 289.212 523.224 280.485 500.044 cv
280.485 500.044 290.669 521.966 300.794 530.505 cv
300.794 530.505 301.985 534.849 298.778 532.517 cv
cp
f
332.196 442.825 mo
332.196 442.825 321.591 432.735 311.403 408.118 cv
311.403 408.118 323.118 431.469 334.274 440.786 cv
334.274 440.786 335.712 445.387 332.196 442.825 cv
cp
f
328.724 449.782 mo
328.724 449.782 316.567 437.168 306.364 412.559 cv
306.364 412.559 319.638 438.422 330.802 447.743 cv
330.802 447.743 332.243 452.344 328.724 449.782 cv
cp
f
340.13 429.016 mo
340.13 429.016 330.747 419.969 322.036 397.583 cv
322.036 397.583 332.142 418.774 342.06 427.102 cv
342.06 427.102 343.259 431.293 340.13 429.016 cv
cp
f
336.849 435.469 mo
336.849 435.469 326.103 424.145 317.392 401.758 cv
317.392 401.758 328.86 425.235 338.771 433.559 cv
338.771 433.559 339.974 437.754 336.849 435.469 cv
cp
f
347.044 416.102 mo
347.044 416.102 339.001 408.274 331.712 388.715 cv
331.712 388.715 340.231 407.211 348.743 414.395 cv
348.743 414.395 349.739 418.063 347.044 416.102 cv
cp
f
344.099 421.825 mo
344.099 421.825 334.899 412.012 327.622 392.45 cv
327.622 392.45 337.282 412.934 345.798 420.118 cv
345.798 420.118 346.786 423.786 344.099 421.825 cv
cp
f
354.263 404.551 mo
354.263 404.551 347.517 397.993 341.415 381.586 cv
341.415 381.586 348.552 397.094 355.681 403.118 cv
355.681 403.118 356.517 406.192 354.263 404.551 cv
cp
f
350.681 410.274 mo
350.681 410.274 342.981 402.043 336.88 385.641 cv
336.88 385.641 344.974 402.817 352.106 408.836 cv
352.106 408.836 352.935 411.915 350.681 410.274 cv
cp
f
361.63 394.43 mo
361.63 394.43 355.407 387.477 354.825 380.602 cv
354.825 380.602 355.927 386.977 363.056 393.004 cv
363.056 393.004 363.88 396.079 361.63 394.43 cv
cp
f
358.056 400.153 mo
358.056 400.153 353.075 397.735 346.974 381.333 cv
346.974 381.333 352.353 392.696 359.481 398.715 cv
359.481 398.715 360.317 401.797 358.056 400.153 cv
cp
f
336.325 460.997 mo
336.325 460.997 351.767 464.313 379.95 458.348 cv
379.95 458.348 351.974 462.168 336.892 457.872 cv
336.892 457.872 331.911 459.411 336.325 460.997 cv
cp
f
343.864 447.426 mo
343.864 447.426 358.169 450.524 384.255 445.122 cv
384.255 445.122 358.364 448.555 344.384 444.559 cv
344.384 444.559 339.774 445.958 343.864 447.426 cv
cp
f
340.06 454.208 mo
340.06 454.208 357.321 457.172 383.411 451.774 cv
383.411 451.774 354.56 455.336 340.579 451.34 cv
340.579 451.34 335.97 452.739 340.06 454.208 cv
cp
f
350.829 433.102 mo
350.829 433.102 363.587 435.782 387.005 430.403 cv
387.005 430.403 363.782 433.946 351.325 430.434 cv
351.325 430.434 347.185 431.79 350.829 433.102 cv
cp
f
347.325 439.45 mo
347.325 439.45 362.731 441.965 386.149 436.594 cv
386.149 436.594 360.29 440.297 347.829 436.782 cv
347.829 436.782 343.688 438.141 347.325 439.45 cv
cp
f
357.626 420.122 mo
357.626 420.122 368.614 422.383 388.888 417.415 cv
388.888 417.415 368.81 420.758 358.079 417.758 cv
358.079 417.758 354.485 419 357.626 420.122 cv
cp
f
354.544 425.778 mo
354.544 425.778 367.829 427.868 388.103 422.903 cv
388.103 422.903 365.731 426.418 355.005 423.411 cv
355.005 423.411 351.415 424.661 354.544 425.778 cv
cp
f
363.13 407.668 mo
363.13 407.668 372.349 409.555 389.333 405.383 cv
389.333 405.383 372.497 408.196 363.509 405.684 cv
363.509 405.684 360.501 406.723 363.13 407.668 cv
cp
f
360.403 413.836 mo
360.403 413.836 371.536 415.586 388.528 411.411 cv
388.528 411.411 369.778 414.372 360.79 411.852 cv
360.79 411.852 357.771 412.895 360.403 413.836 cv
cp
f
367.356 395.883 mo
367.356 395.883 376.599 397.118 382.614 393.731 cv
382.614 393.731 376.728 396.415 367.728 393.899 cv
367.728 393.899 364.72 394.942 367.356 395.883 cv
cp
f
364.626 402.055 mo
364.626 402.055 369.427 404.817 386.419 400.637 cv
386.419 400.637 374.001 402.586 365.017 400.071 cv
365.017 400.071 362.005 401.114 364.626 402.055 cv
cp
f
327.438 482.048 mo
327.438 482.048 342.88 485.368 371.06 479.407 cv
371.06 479.407 343.091 483.228 328.001 478.927 cv
328.001 478.927 323.021 480.462 327.438 482.048 cv
cp
f
333.927 468.149 mo
333.927 468.149 351.755 470.747 377.845 465.352 cv
377.845 465.352 348.427 469.282 334.442 465.286 cv
334.442 465.286 329.833 466.68 333.927 468.149 cv
cp
f
330.13 474.935 mo
330.13 474.935 352.13 477.599 377.427 470.642 cv
377.427 470.642 344.622 476.06 330.646 472.063 cv
330.646 472.063 326.028 473.458 330.13 474.935 cv
cp
f
324.419 489.739 mo
324.419 489.739 339.853 493.06 368.04 487.095 cv
368.04 487.095 340.06 490.915 324.981 486.618 cv
324.981 486.618 319.997 488.157 324.419 489.739 cv
cp
f
321.778 497.778 mo
321.778 497.778 335.981 500.743 362.04 494.708 cv
362.04 494.708 336.2 498.704 322.349 494.798 cv
322.349 494.798 317.728 496.325 321.778 497.778 cv
cp
f
318.962 505.192 mo
318.962 505.192 333.157 508.157 359.216 502.126 cv
359.216 502.126 333.38 506.118 319.524 502.208 cv
319.524 502.208 314.915 503.735 318.962 505.192 cv
cp
f
317.505 513.259 mo
317.505 513.259 329.88 515.61 353.056 508.813 cv
353.056 508.813 330.153 513.626 318.103 510.345 cv
318.103 510.345 313.981 511.993 317.505 513.259 cv
cp
f
313.161 522.614 mo
313.161 522.614 325.036 524.673 347.599 516.892 cv
347.599 516.892 325.368 522.603 313.841 519.563 cv
313.841 519.563 309.813 521.403 313.161 522.614 cv
cp
f
309.755 532.708 mo
309.755 532.708 319.567 534.185 338.614 526.267 cv
338.614 526.267 319.903 532.271 310.407 529.888 cv
310.407 529.888 307.001 531.72 309.755 532.708 cv
cp
f
275.739 521.524 mo
275.739 521.524 256.45 468.841 281.481 438.063 cv
281.481 438.063 280.442 426.586 289.31 419.809 cv
298.173 413.024 296.087 404.157 311.22 396.856 cv
326.341 389.551 335.11 370.579 382.888 369.629 cv
382.888 369.629 325.981 374.727 298.7 419.809 cv
262.704 479.274 275.739 521.524 275.739 521.524 cv
cp
.705882 .843137 .443137 rgb
f
169.192 488.821 mo
169.192 488.821 173.509 516.138 189.505 527.962 cv
189.505 527.962 198.196 537.349 205.153 539.782 cv
212.106 542.216 213.505 545.001 221.497 547.083 cv
229.497 549.173 232.626 553.345 251.403 547.782 cv
251.403 547.782 227.517 548.005 206.2 536.653 cv
174.2 519.614 169.192 488.821 169.192 488.821 cv
cp
f
102.392 603.446 mo
102.392 603.446 128.474 631.938 145.685 634.548 cv
145.685 634.548 152.47 635.591 158.728 637.673 cv
164.989 639.763 187.938 642.368 201.501 641.329 cv
215.067 640.286 214.544 637.153 220.802 636.634 cv
227.063 636.11 245.841 628.806 251.579 622.548 cv
251.579 622.548 236.454 632.458 222.364 632.458 cv
208.286 632.458 200.981 637.153 187.938 636.634 cv
174.899 636.11 141.646 629.517 130.56 623.591 cv
119.474 617.661 102.392 603.446 102.392 603.446 cv
cp
f
102.392 603.247 mo
102.392 603.247 120.13 559.954 180.114 535.435 cv
180.114 535.435 127.95 563.603 102.392 603.247 cv
cp
f
112.825 603.771 mo
112.825 603.771 201.501 591.251 252.622 569.341 cv
252.622 569.341 192.634 601.161 112.825 603.771 cv
cp
f
486.53 793.221 mo
472.362 793.221 449.577 774.338 415.405 611.029 cv
396.913 522.687 383.971 433.198 383.846 432.303 cv
383.499 429.866 li
385.295 428.178 li
386.37 427.17 396.823 418.315 431.698 418.315 cv
445.163 418.315 460.709 419.639 477.92 422.256 cv
551.229 433.413 584.874 474.667 601.046 494.487 cv
601.37 494.885 li
617.386 514.519 622.503 535.178 626.241 550.268 cv
626.812 552.545 li
627.565 555.572 628.44 558.49 629.339 561.506 cv
632.815 573.119 636.761 586.291 636.343 611.67 cv
635.812 643.104 618.851 687.014 607.546 706.787 cv
599.538 720.803 593.038 728.232 587.812 734.213 cv
586.124 736.139 584.585 737.904 583.167 739.701 cv
577.187 747.314 536.64 787.201 488.209 793.119 cv
487.655 793.186 487.088 793.221 486.53 793.221 cv
cp
.27451 .207843 .145098 rgb
f
388.53 431.631 mo
388.53 431.631 405.221 415.983 477.209 426.936 cv
549.187 437.889 581.538 478.053 597.702 497.877 cv
613.87 517.698 618.569 539.084 622.214 553.693 cv
625.874 568.295 632.132 580.295 631.604 611.588 cv
631.085 642.889 613.87 686.182 603.44 704.439 cv
593.011 722.697 585.179 729.479 579.44 736.783 cv
573.702 744.084 534.589 782.686 487.635 788.424 cv
440.69 794.162 388.53 431.631 388.53 431.631 cv
cp
.992157 .933333 .352941 rgb
f
432.866 801.498 mo
423.78 801.498 419.577 800.162 415.514 798.869 cv
412.799 798.002 410.237 797.189 405.838 796.787 cv
399.522 796.213 398.092 795.709 395.612 794.416 cv
394.163 793.658 391.967 792.51 384.159 790.377 cv
380.377 789.354 li
363.897 784.889 351.983 781.666 346.667 774.568 cv
342.514 769.033 324.053 752.354 315.549 745.068 cv
310.604 740.83 306.838 735.037 303.202 729.439 cv
300.979 726.029 298.686 722.506 296.178 719.42 cv
287.518 708.76 277.362 691.604 274.834 675.439 cv
274.159 671.107 273.178 665.775 272.135 660.092 cv
268.264 639.006 265.627 623.502 267.03 615.943 cv
269.495 602.705 268.518 599.006 267.565 595.432 cv
266.932 593.033 266.213 590.318 266.432 585.795 cv
266.514 584.17 266.463 582.029 266.397 579.443 cv
266.045 565.053 265.393 538.264 282.229 510.053 cv
285.233 505.01 li
302.381 476.186 311.858 460.268 338.756 442.952 cv
340.584 441.401 347.17 436.049 351.913 434.866 cv
352.362 434.749 353.749 434.049 354.975 433.44 cv
361.424 430.213 374.862 423.499 402.034 420.151 cv
409.577 419.225 416.604 418.776 423.502 418.776 cv
454.155 418.776 480.569 427.784 506.627 447.131 cv
512.607 451.573 518.146 455.635 523.279 459.397 cv
548.272 477.721 563.362 488.788 572.843 501.885 cv
583.858 517.097 594.194 539.092 601.187 562.232 cv
605.53 576.584 605.968 585.451 606.292 591.928 cv
606.476 595.631 606.604 598.307 607.405 600.705 cv
610.538 610.088 610.101 633.689 607.558 646.424 cv
607.187 648.283 606.851 650.088 606.511 651.854 cv
604.515 662.486 602.624 672.525 595.456 683.994 cv
592.171 689.252 589.694 696.361 587.296 703.236 cv
584.183 712.182 581.241 720.631 576.405 725.123 cv
571.687 729.506 570.632 731.107 567.526 735.873 cv
566.155 737.959 564.44 740.584 561.94 744.178 cv
560.565 746.166 li
552.515 757.826 544.183 769.885 518.514 783.229 cv
500.647 792.521 487.659 793.889 478.178 794.889 cv
473.377 795.393 469.584 795.795 466.37 797.018 cv
454.6 801.498 447.792 801.498 432.866 801.498 cv
cp
.27451 .207843 .145098 rgb
f
341.584 446.76 mo
341.584 446.76 348.889 440.495 353.061 439.456 cv
357.229 438.413 368.702 429.022 402.616 424.85 cv
436.522 420.678 469.381 423.284 503.811 448.842 cv
538.233 474.405 558.054 489.534 569.011 504.658 cv
579.968 519.784 589.874 541.17 596.655 563.6 cv
603.44 586.029 600.312 594.377 602.921 602.201 cv
605.53 610.025 605.53 632.455 602.921 645.498 cv
600.312 658.537 599.265 668.971 591.437 681.49 cv
583.616 694.01 580.487 714.873 573.187 721.654 cv
565.882 728.436 566.405 729.479 558.054 741.479 cv
549.71 753.471 542.409 765.471 516.326 779.033 cv
490.249 792.596 475.639 788.424 464.686 792.596 cv
453.733 796.768 447.475 796.768 432.866 796.768 cv
418.264 796.768 417.741 793.115 406.268 792.072 cv
394.788 791.029 402.616 790.51 385.397 785.814 cv
368.186 781.119 355.143 777.99 350.452 771.729 cv
345.756 765.471 325.928 747.736 318.631 741.479 cv
311.331 735.217 306.631 724.787 299.85 716.439 cv
293.069 708.092 282.116 691.4 279.51 674.709 cv
276.901 658.018 269.85 626.67 271.682 616.807 cv
275.858 594.377 270.643 596.467 271.163 586.029 cv
271.682 575.596 266.991 544.822 286.292 512.482 cv
305.588 480.143 313.936 464.495 341.584 446.76 cv
cp
.996078 1 .854902 rgb
f
429.217 588.643 mo
429.217 588.643 424.002 593.854 421.389 584.986 cv
418.78 576.119 411.475 547.432 402.088 528.132 cv
392.702 508.83 388.006 489.534 385.397 484.838 cv
382.792 480.143 377.577 466.057 392.702 457.709 cv
406.643 450.022 413.569 452.495 419.827 452.495 cv
426.084 452.495 443.819 449.885 453.733 455.104 cv
463.639 460.323 471.991 469.709 467.819 482.749 cv
463.639 495.792 453.209 540.127 450.604 546.389 cv
447.995 552.646 435.999 590.205 434.436 593.334 cv
432.866 596.467 428.17 593.854 429.217 588.643 cv
cp
.27451 .207843 .145098 rgb
f
426.342 584.826 mo
425.241 581.662 426.077 584.143 425.928 583.654 cv
425.534 582.314 425.042 580.529 424.44 578.385 cv
420.963 565.951 414.491 542.807 406.346 526.062 cv
400.592 514.232 396.67 502.494 393.807 493.92 cv
391.952 488.35 390.725 484.67 389.538 482.538 cv
388.928 481.444 385.975 475.698 387.577 470.127 cv
388.522 466.831 391.018 464.045 394.987 461.85 cv
403.03 457.417 408.19 456.846 411.784 456.846 cv
413.264 456.846 414.624 456.948 415.901 457.042 cv
417.264 457.135 418.553 457.225 419.827 457.225 cv
421.186 457.225 423.053 457.116 425.256 456.979 cv
428.151 456.799 431.749 456.573 435.413 456.573 cv
442.678 456.573 448.104 457.491 451.53 459.292 cv
457.553 462.459 467.077 469.53 463.307 481.307 cv
461.28 487.659 457.842 501.076 454.518 514.049 cv
451.213 526.968 447.467 541.607 446.233 544.568 cv
444.862 547.857 441.354 558.389 437.639 569.541 cv
436.991 571.471 436.522 584.467 430.78 587.076 cv
430.78 587.076 427.44 587.982 426.342 584.826 cv
cp
.956863 .890196 .333333 rgb
f
447.475 598.029 mo
447.475 598.029 446.432 600.635 442.776 599.592 cv
442.245 599.439 435.475 596.467 441.213 580.814 cv
445.249 569.811 452.167 551.604 457.909 532.822 cv
463.639 514.045 472.514 486.924 476.682 480.663 cv
480.858 474.405 490.249 472.838 490.768 480.663 cv
490.768 480.663 490.249 475.448 500.682 477.534 cv
511.111 479.62 510.068 486.924 510.068 486.924 cv
510.068 486.924 519.982 485.881 523.631 492.139 cv
527.283 498.401 534.589 500.483 537.194 507.787 cv
539.796 515.089 556.491 535.432 543.456 542.736 cv
530.413 550.041 513.717 561.514 500.682 570.385 cv
487.635 579.248 471.467 587.596 464.163 591.244 cv
456.862 594.896 457.385 591.244 457.385 591.244 cv
457.385 591.244 454.249 600.115 447.475 598.029 cv
cp
.27451 .207843 .145098 rgb
f
443.963 594.061 mo
443.44 592.346 443.338 588.768 445.655 582.443 cv
447.487 577.467 li
451.698 566.088 457.448 550.506 462.428 534.209 cv
470.53 507.701 477.674 487.717 480.624 483.288 cv
481.999 481.217 486.006 480.401 486.045 480.959 cv
486.045 480.959 494.807 481.963 494.803 481.967 cv
494.807 481.963 495.202 481.772 496.319 481.772 cv
497.268 481.772 498.424 481.909 499.749 482.174 cv
505.131 483.252 505.408 485.694 505.365 486.42 cv
505.037 491.987 li
510.564 491.627 li
510.627 491.624 511.045 491.588 511.67 491.588 cv
513.115 491.588 517.951 491.799 519.549 494.522 cv
521.568 497.995 524.365 500.346 526.842 502.424 cv
529.452 504.615 531.71 506.506 532.741 509.377 cv
533.476 511.447 534.913 513.986 536.585 516.925 cv
539.835 522.647 544.745 531.291 543.444 535.947 cv
543.229 536.705 542.78 537.689 541.14 538.607 cv
528.808 545.518 513.229 556.115 500.721 564.631 cv
498.022 566.471 li
485.639 574.889 470.17 582.955 462.053 587.018 cv
459.944 588.068 459.155 588.139 459.124 588.139 cv
459.124 588.139 li
459.596 588.139 460.526 588.373 461.28 589.244 cv
461.741 589.775 458.088 588.951 457.909 590.205 cv
452.92 589.67 li
452.436 590.986 450.874 593.615 449.495 593.615 cv
449.311 593.615 449.1 593.58 448.866 593.506 cv
444.702 592.225 li
443.963 594.061 li
cp
.956863 .890196 .333333 rgb
f
461.553 598.029 mo
461.553 598.029 444.338 607.416 444.862 613.158 cv
445.389 618.893 449.042 621.502 474.077 622.545 cv
499.116 623.588 509.025 628.803 518.412 631.412 cv
527.799 634.018 543.976 639.24 558.054 639.24 cv
572.14 639.24 577.362 633.502 577.362 626.197 cv
577.362 618.893 581.007 606.373 577.362 594.377 cv
573.702 582.381 568.491 560.471 559.624 553.17 cv
550.757 545.869 544.495 547.432 520.498 562.037 cv
496.506 576.643 470.944 595.943 461.553 598.029 cv
cp
.27451 .207843 .145098 rgb
f
558.054 634.506 mo
546.409 634.506 532.663 630.568 523.561 627.955 cv
519.678 626.854 li
517.787 626.326 515.873 625.689 513.807 625.006 cv
505.76 622.33 494.733 618.666 474.276 617.818 cv
451.584 616.873 449.858 614.592 449.616 613.049 cv
450.545 610.943 456.854 606.068 463.299 602.471 cv
469.909 600.678 480.682 593.666 497.374 582.588 cv
505.74 577.037 514.393 571.299 522.959 566.08 cv
535.897 558.205 544.401 553.646 549.585 553.646 cv
551.866 553.646 553.843 554.537 556.616 556.822 cv
563.101 562.158 567.952 578.951 571.159 590.064 cv
571.757 592.115 572.308 594.033 572.835 595.756 cv
575.116 603.268 574.124 611.42 573.335 617.971 cv
572.972 620.947 572.632 623.764 572.632 626.197 cv
572.632 631.709 567.722 634.506 558.054 634.506 cv
cp
.956863 .890196 .333333 rgb
f
452.167 635.064 mo
452.167 635.064 446.952 629.326 452.686 626.717 cv
458.428 624.111 468.338 626.717 491.292 630.369 cv
514.24 634.018 514.24 637.67 526.236 639.24 cv
538.233 640.803 559.101 645.498 564.319 656.451 cv
569.534 667.404 568.491 678.361 558.581 689.311 cv
548.671 700.268 552.843 712.264 542.409 713.307 cv
531.979 714.354 521.021 701.83 513.717 697.139 cv
506.412 692.443 495.983 675.229 486.592 667.924 cv
477.209 660.627 452.167 635.064 452.167 635.064 cv
cp
.27451 .207843 .145098 rgb
f
541.163 708.639 mo
535.624 708.639 528.804 703.041 523.318 698.545 cv
520.826 696.498 518.467 694.568 516.279 693.158 cv
513.264 691.221 508.854 685.771 504.596 680.506 cv
499.69 674.439 494.616 668.17 489.499 664.193 cv
480.467 657.17 455.795 632.006 455.545 631.752 cv
455.389 631.564 455.174 631.236 455.002 630.92 cv
456.069 630.533 457.241 630.396 458.733 630.396 cv
462.838 630.396 469.163 631.467 477.913 632.951 cv
481.62 633.576 485.803 634.287 490.549 635.041 cv
503.049 637.033 508.271 638.939 512.877 640.623 cv
516.475 641.936 519.881 643.178 525.627 643.928 cv
539.147 645.689 556.272 650.561 560.046 658.486 cv
564.765 668.389 563.179 677.174 555.069 686.139 cv
549.999 691.748 548.093 697.67 546.698 701.994 cv
544.89 707.619 544.358 708.361 541.937 708.6 cv
541.679 708.627 541.425 708.639 541.163 708.639 cv
cp
.956863 .890196 .333333 rgb
f
440.69 656.451 mo
440.69 656.451 435.999 640.283 440.69 638.717 cv
445.389 637.15 444.338 631.936 455.295 642.889 cv
466.249 653.842 485.549 673.143 486.073 675.752 cv
486.592 678.361 499.116 687.748 508.498 698.705 cv
517.893 709.658 528.323 714.873 526.76 725.83 cv
525.197 736.783 513.717 739.912 510.068 743.564 cv
506.412 747.213 500.682 749.299 492.854 753.471 cv
485.026 757.646 468.858 761.299 464.163 751.389 cv
459.471 741.479 454.249 721.654 450.604 710.697 cv
446.952 699.748 440.69 656.451 440.69 656.451 cv
cp
.27451 .207843 .145098 rgb
f
476.424 752.994 mo
470.163 752.994 468.87 750.26 468.44 749.361 cv
465.354 742.846 461.94 731.525 458.928 721.533 cv
457.53 716.939 456.237 712.639 455.092 709.205 cv
451.616 698.771 445.436 656.201 445.374 655.775 cv
445.331 655.451 li
445.237 655.135 li
443.87 650.404 443.077 644.916 443.385 642.729 cv
444.588 642.174 445.483 641.518 446.12 641.049 cv
446.124 641.049 446.124 641.049 446.124 641.049 cv
446.741 641.486 448.467 642.752 451.952 646.232 cv
460.135 654.416 479.088 673.373 481.592 677.334 cv
482.342 679.705 484.588 681.869 490.538 687.377 cv
494.901 691.408 500.327 696.424 504.908 701.779 cv
507.686 705.021 510.549 707.783 513.068 710.221 cv
519.678 716.604 522.83 719.9 522.076 725.158 cv
521.318 730.463 517.439 733.182 512.053 736.439 cv
510.029 737.654 508.139 738.803 506.721 740.217 cv
504.674 742.26 501.295 743.932 497.014 746.049 cv
495.065 747.014 492.936 748.068 490.627 749.299 cv
487.174 751.139 481.448 752.994 476.424 752.994 cv
cp
.956863 .890196 .333333 rgb
f
411.999 606.373 mo
405.221 610.025 392.178 608.982 373.401 606.896 cv
354.624 604.811 319.674 601.682 311.85 600.635 cv
304.026 599.592 296.202 593.334 295.155 581.338 cv
294.116 569.342 297.764 559.428 297.764 559.428 cv
297.764 559.428 298.811 549.518 301.94 546.389 cv
305.065 543.256 300.897 536.998 310.807 536.998 cv
320.721 536.998 326.452 542.736 338.975 550.561 cv
351.499 558.385 363.495 570.904 369.749 571.947 cv
376.006 572.99 383.311 579.248 386.444 582.381 cv
389.573 585.51 418.78 602.725 411.999 606.373 cv
cp
.27451 .207843 .145098 rgb
f
398.065 604.061 mo
391.952 604.061 384.295 603.346 373.924 602.193 cv
364.713 601.174 351.62 599.896 339.725 598.736 cv
327.725 597.572 316.389 596.467 312.475 595.947 cv
306.952 595.209 300.733 590.877 299.87 580.924 cv
298.936 570.209 302.174 561.143 302.209 561.053 cv
302.409 560.518 li
302.475 559.928 li
302.928 555.689 304.288 550.736 305.288 549.736 cv
307.448 547.568 307.854 544.924 308.116 543.182 cv
308.186 542.771 308.272 542.178 308.362 541.889 cv
308.374 541.893 308.389 541.896 308.417 541.896 cv
308.647 541.896 309.374 541.729 310.807 541.729 cv
317.073 541.729 321.506 544.697 328.858 549.611 cv
331.135 551.135 333.631 552.799 336.471 554.572 cv
341.569 557.76 346.749 561.9 351.327 565.557 cv
358.499 571.283 364.167 575.811 368.967 576.615 cv
373.104 577.307 379.194 581.818 383.1 585.729 cv
384.159 586.787 386.163 588.178 390.237 590.979 cv
393.963 593.537 402.682 599.533 406.584 603.326 cv
404.397 603.814 401.569 604.061 398.065 604.061 cv
cp
.956863 .890196 .333333 rgb
f
296.202 623.068 mo
296.202 623.068 293.069 608.982 309.241 608.463 cv
325.413 607.939 364.01 611.588 376.53 611.588 cv
389.049 611.588 404.702 613.158 410.436 614.201 cv
416.174 615.244 417.217 626.197 401.045 633.502 cv
384.881 640.803 369.749 653.842 354.624 659.58 cv
339.499 665.318 322.803 684.619 315.499 680.443 cv
308.202 676.275 305.588 668.447 305.588 668.447 cv
305.588 668.447 299.334 661.666 298.288 654.361 cv
297.245 647.061 290.459 634.545 296.202 623.068 cv
cp
.27451 .207843 .145098 rgb
f
317.737 676.295 mo
312.284 673.158 310.096 666.986 310.065 666.928 cv
309.749 665.994 li
309.069 665.24 li
307.608 663.643 303.651 658.439 302.971 653.697 cv
302.655 651.49 301.952 649.057 301.202 646.494 cv
299.233 639.725 296.995 632.057 300.432 625.182 cv
301.186 623.682 li
300.819 622.041 li
300.616 621.037 300.42 617.873 302.014 615.854 cv
303.323 614.205 305.807 613.307 309.397 613.189 cv
310.428 613.158 311.553 613.139 312.76 613.139 cv
322.362 613.139 335.76 612.299 348.889 613.158 cv
360.038 613.881 374.792 614.721 380.178 614.721 cv
392.038 614.721 403.772 617.795 409.588 618.854 cv
409.584 618.854 409.584 618.854 409.584 618.854 cv
409.499 618.854 409.647 619.357 409.393 620.264 cv
409.065 621.416 407.374 625.451 399.1 629.189 cv
391.241 632.736 383.709 637.533 376.424 642.17 cv
368.264 647.365 360.553 652.275 352.948 655.158 cv
345.881 657.838 338.729 663.061 332.42 667.666 cv
327.163 671.514 320.608 676.299 317.866 676.299 cv
317.78 676.299 317.741 676.295 317.737 676.295 cv
cp
.956863 .890196 .333333 rgb
f
373.401 732.607 mo
373.401 732.607 366.1 738.869 357.229 734.693 cv
348.362 730.521 344.713 731.045 339.499 721.135 cv
337.538 717.412 331.151 706.525 332.194 703.4 cv
333.233 700.268 318.631 692.443 329.065 683.057 cv
339.499 673.666 362.448 661.666 381.229 650.713 cv
400.002 639.756 409.913 630.893 417.217 628.803 cv
424.522 626.717 422.952 637.67 416.174 652.799 cv
409.393 667.924 383.834 722.697 373.401 732.607 cv
cp
.27451 .207843 .145098 rgb
f
363.499 731.396 mo
362.061 731.396 360.639 731.064 359.245 730.412 cv
357.331 729.514 355.655 728.818 354.139 728.197 cv
348.959 726.068 347.022 725.275 343.678 718.928 cv
342.608 716.947 li
341.237 714.428 337.127 706.896 336.827 704.396 cv
337.616 701.17 335.452 698.549 333.522 696.232 cv
329.206 691.01 329.002 689.479 332.229 686.572 cv
339.901 679.662 355.342 670.9 370.292 662.428 cv
374.819 659.861 379.319 657.307 383.612 654.799 cv
391.932 649.943 398.573 645.475 403.897 641.885 cv
409.663 638.002 414.01 635.072 417.288 633.775 cv
417.131 636.299 415.991 641.65 411.862 650.865 cv
400.182 676.904 378.538 721.186 370.147 729.17 cv
370.147 729.166 li
370.131 729.166 367.249 731.396 363.499 731.396 cv
cp
.956863 .890196 .333333 rgb
f
416.241 587.076 mo
416.241 587.076 395.834 525.522 391.663 516.655 cv
387.487 507.787 382.272 501.529 379.139 492.139 cv
376.006 482.749 372.881 477.534 366.62 475.448 cv
360.366 473.362 354.624 477.534 353.581 482.229 cv
352.538 486.924 348.362 479.096 331.151 497.354 cv
313.936 515.612 318.112 524.479 319.674 527.085 cv
321.237 529.698 335.319 543.779 346.276 551.08 cv
357.229 558.385 378.616 569.857 384.881 575.596 cv
391.135 581.338 411.874 595.287 415.522 594.768 cv
419.178 594.244 416.241 587.076 416.241 587.076 cv
cp
.27451 .207843 .145098 rgb
f
413.659 589.912 mo
405.764 585.314 392.877 576.51 388.077 572.111 cv
383.858 568.248 374.452 562.643 364.483 556.717 cv
358.584 553.201 353.006 549.881 348.905 547.146 cv
338.327 540.096 325.131 526.761 323.713 524.616 cv
320.85 519.858 324.913 510.865 334.592 500.6 cv
344.667 489.924 349.354 489.225 351.608 488.893 cv
353.256 488.647 357.127 488.073 358.202 483.256 cv
358.584 481.502 360.725 479.627 363.28 479.627 cv
363.893 479.627 364.51 479.729 365.124 479.936 cv
369.299 481.323 371.698 484.78 374.651 493.635 cv
376.698 499.776 379.553 504.658 382.319 509.377 cv
384.038 512.314 385.819 515.347 387.374 518.671 cv
390.51 525.331 405.561 567.115 413.659 589.912 cv
cp
.956863 .890196 .333333 rgb
f
394.272 756.604 mo
394.272 756.604 378.092 751.908 383.834 739.912 cv
389.573 727.912 409.042 680.912 414.612 665.842 cv
423.475 641.846 426.6 637.709 431.303 638.717 cv
438.608 640.283 438.084 683.057 442.252 699.225 cv
446.432 715.396 463.124 759.213 449.042 762.338 cv
449.042 762.338 437.561 768.604 422.952 763.385 cv
422.952 763.385 408.35 767.561 394.272 756.604 cv
cp
.27451 .207843 .145098 rgb
f
434.819 760.729 mo
431.35 760.729 427.893 760.123 424.549 758.928 cv
423.116 758.42 li
421.655 758.834 li
421.655 758.834 419.413 759.436 415.991 759.436 cv
411.252 759.436 404.147 758.295 397.17 752.869 cv
396.452 752.314 li
395.588 752.057 li
393.975 751.576 389.026 749.506 387.674 746.455 cv
387.319 745.65 386.975 744.307 388.1 741.955 cv
394.155 729.291 413.577 682.287 419.049 667.482 cv
421.002 662.189 426.709 646.744 429.749 643.693 cv
432.084 641.584 434.608 658.088 435.475 667.666 cv
436.432 678.221 437.174 693.217 438.866 699.748 cv
439.639 702.748 441.424 708.072 442.776 712.525 cv
446.881 726.01 452.749 750.377 448.858 757.037 cv
448.545 757.564 448.303 757.658 448.01 757.721 cv
447.358 757.865 li
446.776 758.186 li
446.749 758.197 441.889 760.729 434.819 760.729 cv
cp
.956863 .890196 .333333 rgb
f
276.381 610.025 mo
276.381 610.025 275.858 603.244 279.51 603.768 cv
283.155 604.287 283.678 607.939 282.639 611.068 cv
281.592 614.201 276.901 614.201 276.381 610.025 cv
cp
.988235 .87451 .054902 rgb
f
274.819 620.455 mo
274.819 620.455 274.819 616.807 278.463 617.33 cv
282.116 617.854 281.592 620.455 280.553 623.068 cv
279.51 625.674 279.51 632.455 277.948 630.893 cv
276.381 629.326 273.249 625.674 274.819 620.455 cv
cp
f
278.463 594.377 mo
278.463 594.377 282.635 599.244 278.811 599.943 cv
274.991 600.635 274.639 590.205 278.463 594.377 cv
cp
f
278.463 578.729 mo
278.463 578.729 280.209 588.814 277.424 588.463 cv
274.639 588.119 273.948 582.904 273.948 581.162 cv
273.948 579.424 276.034 573.861 278.463 578.729 cv
cp
f
277.077 563.428 mo
277.077 563.428 280.209 566.213 276.034 567.6 cv
271.858 568.99 272.202 564.127 273.596 562.385 cv
274.991 560.646 275.686 560.998 277.077 563.428 cv
cp
f
278.463 636.107 mo
278.463 636.107 281.249 643.064 278.463 642.717 cv
275.686 642.365 275.686 632.283 278.463 636.107 cv
cp
f
283.678 661.842 mo
283.678 661.842 286.467 668.1 283.678 668.799 cv
280.897 669.49 279.862 665.67 280.209 663.229 cv
280.553 660.795 282.292 658.361 283.678 661.842 cv
cp
f
288.202 681.314 mo
288.202 681.314 294.12 687.92 289.596 689.311 cv
285.077 690.705 282.288 676.791 288.202 681.314 cv
cp
f
293.768 693.834 mo
293.768 693.834 296.209 697.658 293.768 698.701 cv
291.331 699.744 286.116 696.264 288.897 693.486 cv
291.682 690.705 293.768 691.049 293.768 693.834 cv
cp
f
299.674 704.268 mo
299.674 704.268 306.983 708.783 303.502 711.221 cv
300.026 713.654 293.417 703.225 299.674 704.268 cv
cp
f
309.069 719.213 mo
309.069 719.213 313.245 719.912 312.545 723.736 cv
311.85 727.561 303.85 723.041 309.069 719.213 cv
cp
f
315.678 733.127 mo
315.678 733.127 319.155 730.342 321.237 732.779 cv
323.327 735.209 322.983 739.389 320.897 739.736 cv
318.807 740.08 316.022 735.209 315.678 733.127 cv
cp
f
325.76 744.252 mo
325.76 744.252 320.545 740.775 324.022 739.037 cv
327.502 737.299 330.627 741.123 328.542 744.252 cv
326.452 747.385 325.76 744.252 325.76 744.252 cv
cp
f
332.018 748.775 mo
332.018 748.775 333.413 748.424 335.495 750.861 cv
337.581 753.295 335.495 753.99 335.495 753.99 cv
335.495 753.99 329.237 748.08 332.018 748.775 cv
cp
f
338.28 755.729 mo
338.28 755.729 338.631 753.295 341.76 756.428 cv
344.885 759.557 346.627 757.119 348.014 759.904 cv
349.405 762.686 350.456 763.033 353.233 764.076 cv
356.014 765.119 358.1 767.9 360.186 767.9 cv
362.272 767.9 365.409 773.115 360.538 773.463 cv
355.667 773.814 355.663 774.162 351.838 768.947 cv
348.014 763.729 340.709 760.596 338.28 755.729 cv
cp
f
367.139 776.592 mo
367.139 776.592 367.838 769.986 371.315 771.729 cv
374.792 773.463 374.792 774.857 377.92 775.205 cv
381.053 775.553 385.221 778.334 383.834 781.115 cv
382.448 783.896 371.663 779.377 367.139 776.592 cv
cp
f
393.573 784.244 mo
393.573 784.244 396.002 777.639 398.788 781.115 cv
401.565 784.596 402.616 785.639 403.659 784.244 cv
404.702 782.854 409.221 781.115 410.612 785.287 cv
411.999 789.463 405.745 790.854 402.616 789.811 cv
399.479 788.764 393.221 787.025 393.573 784.244 cv
cp
f
415.834 789.811 mo
415.834 789.811 418.952 784.248 422.78 786.682 cv
426.608 789.111 431.124 784.943 434.26 787.721 cv
437.385 790.506 437.385 792.588 430.084 793.283 cv
422.78 793.986 416.178 792.592 415.834 789.811 cv
cp
f
445.042 791.549 mo
445.042 791.549 445.042 782.51 452.686 783.549 cv
460.338 784.596 458.256 785.639 460.338 784.596 cv
462.424 783.549 466.6 781.811 467.643 785.639 cv
468.686 789.463 466.241 792.244 458.256 792.592 cv
450.256 792.939 445.741 794.678 445.042 791.549 cv
cp
f
494.764 775.9 mo
494.764 775.9 498.944 782.158 494.764 783.205 cv
490.592 784.244 488.514 780.768 488.858 778.334 cv
489.206 775.9 491.983 773.463 494.764 775.9 cv
cp
f
514.24 771.029 mo
514.24 771.029 518.756 776.939 514.588 778.682 cv
510.416 780.42 505.889 774.857 507.283 772.768 cv
508.674 770.682 512.854 769.295 514.24 771.029 cv
cp
f
525.369 763.381 mo
525.369 763.381 531.979 769.291 526.412 770.682 cv
520.846 772.072 516.33 765.467 525.369 763.381 cv
cp
f
539.976 747.732 mo
539.976 747.732 546.933 752.252 541.022 753.643 cv
535.104 755.033 533.374 750.51 539.976 747.732 cv
cp
f
551.448 740.775 mo
551.448 740.775 553.538 748.775 548.323 747.732 cv
543.108 746.689 542.757 742.17 545.538 740.08 cv
548.323 737.994 550.409 739.389 551.448 740.775 cv
cp
f
566.749 723.389 mo
566.749 723.389 567.101 729.299 562.229 728.604 cv
557.362 727.908 562.921 720.26 566.749 723.389 cv
cp
f
578.577 701.826 mo
578.577 701.826 582.054 707.045 577.187 707.045 cv
572.319 707.045 574.749 703.564 575.796 701.479 cv
576.839 699.396 578.229 698.35 578.577 701.826 cv
cp
f
585.53 685.83 mo
585.53 685.83 587.269 689.658 582.054 689.658 cv
576.839 689.658 578.573 687.572 580.312 685.135 cv
582.054 682.701 586.226 680.959 585.53 685.83 cv
cp
f
399.131 582.553 mo
399.131 582.553 401.225 579.424 396.006 575.6 cv
390.788 571.775 386.62 569.342 384.534 565.861 cv
382.448 562.385 380.709 559.951 374.1 558.908 cv
367.487 557.865 365.409 555.08 359.495 552.299 cv
353.581 549.518 339.323 541.869 339.323 541.869 cv
339.323 541.869 353.233 551.955 359.842 556.127 cv
366.444 560.299 370.967 565.518 377.577 566.908 cv
384.182 568.295 380.702 571.775 386.967 573.861 cv
393.225 575.951 396.702 584.639 399.131 582.553 cv
cp
.27451 .207843 .145098 rgb
f
333.217 512.396 mo
333.217 512.396 327.709 508.486 328.428 506.756 cv
329.159 505.029 330.225 502.959 333.983 507.541 cv
337.737 512.123 337.381 512.467 342.17 517.409 cv
346.959 522.358 355.838 532.588 356.514 533.639 cv
357.202 534.693 340.745 519.476 337.67 516.3 cv
334.592 513.115 335.288 513.471 333.217 512.396 cv
cp
f
366.272 706.529 mo
366.272 706.529 361.057 712.443 358.62 715.221 cv
356.19 718.002 353.065 720.787 349.584 721.83 cv
346.1 722.873 346.108 728.439 349.584 728.783 cv
353.061 729.131 353.405 730.178 355.491 731.916 cv
357.577 733.654 361.057 731.916 361.749 732.959 cv
362.448 734.002 367.319 730.525 367.319 730.525 cv
367.319 730.525 368.702 734.002 372.881 729.83 cv
377.053 725.658 378.792 722.178 378.792 722.178 cv
378.792 722.178 378.092 720.439 371.838 724.264 cv
365.577 728.088 361.057 726.35 362.795 722.873 cv
364.534 719.396 365.584 715.221 367.319 712.787 cv
369.049 710.354 372.186 703.748 372.186 703.748 cv
372.186 703.748 360.709 716.615 360.366 717.654 cv
360.018 718.701 366.272 706.529 366.272 706.529 cv
cp
f
539.796 771.729 mo
539.796 771.729 585.706 738.869 602.397 668.971 cv
602.397 668.971 604.483 728.955 539.796 771.729 cv
cp
f
545.019 769.123 mo
545.019 769.123 593.011 736.26 609.702 666.361 cv
609.702 666.361 609.702 726.35 545.019 769.123 cv
cp
f
552.843 762.338 mo
552.843 762.338 600.827 729.479 617.522 659.58 cv
617.522 659.58 617.522 719.564 552.843 762.338 cv
cp
f
485.178 445.631 mo
485.178 445.631 491.202 442.37 492.112 445.092 cv
493.022 447.815 489.288 449.147 486.827 448.987 cv
484.377 448.831 481.815 447.288 485.178 445.631 cv
cp
.988235 .87451 .054902 rgb
f
370.28 434.448 mo
370.28 434.448 377.928 429.963 378.401 434.67 cv
378.858 439.381 364.674 439.35 370.28 434.448 cv
cp
f
397.881 428.401 mo
397.881 428.401 401.506 425.674 402.737 428.018 cv
403.963 430.366 400.901 435.838 397.913 433.284 cv
394.92 430.717 395.108 428.616 397.881 428.401 cv
cp
f
384.116 432.432 mo
384.116 432.432 391.147 427.487 392.018 431.635 cv
392.893 435.788 380.702 437.78 384.116 432.432 cv
cp
f
591.03 674.318 mo
591.03 674.318 584.39 674.135 585.851 670.537 cv
587.308 666.936 588.702 666.826 588.804 663.682 cv
588.905 660.533 591.351 656.158 594.241 657.326 cv
597.112 658.498 593.452 669.596 591.03 674.318 cv
cp
f
596.604 647.377 mo
596.604 647.377 589.827 645.463 593.073 642.416 cv
596.327 639.377 597.288 638.256 595.819 637.322 cv
594.354 636.393 592.269 632.014 596.319 630.307 cv
600.374 628.596 602.249 634.729 601.448 637.928 cv
600.647 641.135 599.397 647.51 596.604 647.377 cv
cp
f
600.421 624.752 mo
600.421 624.752 594.632 622.064 596.765 618.068 cv
598.89 614.057 594.378 609.881 596.905 606.545 cv
599.44 603.209 601.522 603.045 602.788 610.275 cv
604.046 617.502 603.167 624.189 600.421 624.752 cv
cp
f
596.761 590.279 mo
596.761 590.279 587.749 590.982 588.187 583.275 cv
588.636 575.568 589.835 577.564 588.636 575.568 cv
587.437 573.568 585.378 569.541 589.108 568.205 cv
592.843 566.869 595.808 569.084 596.772 577.025 cv
597.749 584.971 599.827 589.342 596.761 590.279 cv
cp
f
580.433 547.135 mo
580.433 547.135 586.347 542.486 587.714 546.564 cv
589.077 550.646 585.765 552.994 583.312 552.838 cv
580.862 552.678 578.222 550.1 580.433 547.135 cv
cp
f
574.069 528.097 mo
574.069 528.097 579.608 523.132 581.667 527.159 cv
583.729 531.182 578.53 536.119 576.343 534.893 cv
574.144 533.666 572.44 529.616 574.069 528.097 cv
cp
f
565.569 517.593 mo
565.569 517.593 570.952 510.549 572.776 515.987 cv
574.593 521.429 568.351 526.44 565.569 517.593 cv
cp
f
552.491 495.901 mo
552.491 495.901 556.46 488.612 558.304 494.401 cv
560.147 500.19 555.772 502.268 552.491 495.901 cv
cp
f
542.581 485.518 mo
542.581 485.518 550.394 482.819 549.757 488.1 cv
549.12 493.381 544.647 494.084 542.347 491.471 cv
540.046 488.854 541.272 486.667 542.581 485.518 cv
cp
f
524.576 473.178 mo
524.576 473.178 530.448 472.377 530.132 477.28 cv
529.819 482.19 521.756 477.241 524.576 473.178 cv
cp
f
510.514 463.584 mo
510.514 463.584 515.443 459.721 515.822 464.573 cv
516.197 469.42 512.541 467.268 510.381 466.389 cv
508.217 465.51 507.068 464.198 510.514 463.584 cv
cp
f
502.369 454.245 mo
502.369 454.245 506.045 452.209 506.451 457.417 cv
506.854 462.612 504.646 461.045 502.084 459.499 cv
499.514 457.952 497.459 453.928 502.369 454.245 cv
cp
f
286.975 519.636 mo
286.975 519.636 289.1 513.174 292.272 515.062 cv
295.444 516.948 294.514 520.519 292.35 523.007 cv
290.186 525.495 285.85 523.69 286.975 519.636 cv
cp
f
281.514 528.659 mo
281.514 528.659 282.928 525.296 286.092 527.183 cv
289.26 529.065 287.78 531.271 285.807 533.275 cv
283.842 535.287 281.233 541.545 280.393 539.494 cv
279.553 537.447 278.065 532.877 281.514 528.659 cv
cp
f
294.924 505.99 mo
294.924 505.99 296.897 512.092 293.104 511.264 cv
289.311 510.432 292.995 500.667 294.924 505.99 cv
cp
f
304.639 493.448 mo
304.639 493.448 300.104 502.623 298.061 500.698 cv
296.022 498.776 298.53 494.163 299.553 492.752 cv
300.573 491.35 305.545 488.081 304.639 493.448 cv
cp
f
362.647 441.76 mo
362.647 441.76 364.467 445.53 360.081 445.206 cv
355.69 444.881 357.881 440.522 359.842 439.456 cv
361.795 438.385 362.303 438.979 362.647 441.76 cv
cp
f
278.87 544.506 mo
278.87 544.506 278.756 552.006 276.319 550.607 cv
273.889 549.217 277.772 539.912 278.87 544.506 cv
cp
f
gsave
425.827 644.455 mo
425.827 644.455 408.612 689.311 402.616 703.135 cv
396.616 716.959 381.749 740.436 385.663 746.693 cv
389.573 752.951 399.221 756.865 401.307 757.908 cv
403.397 758.951 415.655 761.557 421.913 761.822 cv
428.17 762.08 427.913 730.783 428.694 725.83 cv
429.475 720.873 427.913 680.705 430.522 668.189 cv
433.127 655.67 436.78 636.369 425.827 644.455 cv
cp
clp
388.1 741.955 mo
388.1 741.955 396.092 756.604 424.002 754.518 cv
424.002 754.518 399.67 751.299 388.1 741.955 cv
cp
.27451 .207843 .145098 rgb
f
389.667 735.17 mo
389.667 735.17 397.659 749.822 425.565 747.736 cv
425.565 747.736 401.237 744.518 389.667 735.17 cv
cp
f
389.667 727.084 mo
389.667 727.084 397.659 741.74 425.565 739.65 cv
425.565 739.65 401.237 736.432 389.667 727.084 cv
cp
f
390.975 720.045 mo
390.975 720.045 398.963 734.693 426.866 732.607 cv
426.866 732.607 402.542 729.389 390.975 720.045 cv
cp
f
392.795 713.264 mo
392.795 713.264 400.784 727.912 428.694 725.83 cv
428.694 725.83 404.366 722.607 392.795 713.264 cv
cp
f
393.577 706.744 mo
393.577 706.744 401.565 721.393 429.475 719.307 cv
429.475 719.307 405.147 716.088 393.577 706.744 cv
cp
f
394.624 699.963 mo
394.624 699.963 402.616 714.611 430.522 712.525 cv
430.522 712.525 406.19 709.307 394.624 699.963 cv
cp
f
396.706 693.178 mo
396.706 693.178 404.702 707.834 432.604 705.744 cv
432.604 705.744 408.272 702.525 396.706 693.178 cv
cp
f
395.924 686.139 mo
395.924 686.139 403.92 700.791 431.823 698.705 cv
431.823 698.705 407.491 695.482 395.924 686.139 cv
cp
f
395.924 679.357 mo
395.924 679.357 403.92 694.01 431.823 691.92 cv
431.823 691.92 407.491 688.701 395.924 679.357 cv
cp
f
393.319 672.838 mo
393.319 672.838 401.307 687.486 429.217 685.4 cv
429.217 685.4 404.889 682.182 393.319 672.838 cv
cp
f
393.061 666.838 mo
393.061 666.838 401.045 681.49 428.959 679.4 cv
428.959 679.4 404.627 676.182 393.061 666.838 cv
cp
f
394.362 661.1 mo
394.362 661.1 402.358 675.752 430.26 673.666 cv
430.26 673.666 405.928 670.443 394.362 661.1 cv
cp
f
394.624 655.619 mo
394.624 655.619 402.616 670.275 430.522 668.189 cv
430.522 668.189 406.19 664.971 394.624 655.619 cv
cp
f
395.405 649.365 mo
395.405 649.365 403.397 664.014 431.303 661.928 cv
431.303 661.928 406.975 658.709 395.405 649.365 cv
cp
f
395.143 643.365 mo
395.143 643.365 403.139 658.018 431.042 655.932 cv
431.042 655.932 406.709 652.709 395.143 643.365 cv
cp
f
397.752 637.627 mo
397.752 637.627 405.745 652.279 433.647 650.189 cv
433.647 650.189 409.319 646.975 397.752 637.627 cv
cp
f
grestore
gsave
441.737 646.018 mo
441.737 646.018 450.456 696.643 454.249 711.221 cv
458.053 725.803 463.338 750.229 470.272 752.744 cv
477.213 755.256 487.225 752.385 489.51 751.92 cv
491.795 751.455 503.049 745.947 508.139 742.291 cv
513.225 738.643 496.506 751.389 479.295 717.482 cv
477.018 713.01 458.881 674.697 453.209 663.229 cv
447.545 651.768 445.37 632.9 441.737 646.018 cv
cp
clp
469.264 747.506 mo
469.264 747.506 484.592 754.111 505.275 735.26 cv
505.275 735.26 484.143 747.729 469.264 747.506 cv
cp
.27451 .207843 .145098 rgb
f
466.327 741.201 mo
466.327 741.201 481.647 747.803 502.326 728.955 cv
502.326 728.955 481.194 741.42 466.327 741.201 cv
cp
f
461.331 734.838 mo
461.331 734.838 476.659 741.443 497.346 722.592 cv
497.346 722.592 476.209 735.061 461.331 734.838 cv
cp
f
458.022 728.49 mo
458.022 728.49 473.346 735.096 494.03 716.24 cv
494.03 716.24 472.893 728.705 458.022 728.49 cv
cp
f
455.272 722.025 mo
455.272 722.025 470.6 728.631 491.28 709.779 cv
491.28 709.779 470.143 722.248 455.272 722.025 cv
cp
f
451.877 716.408 mo
451.877 716.408 467.19 723.014 487.874 704.162 cv
487.874 704.162 466.741 716.631 451.877 716.408 cv
cp
f
448.506 710.432 mo
448.506 710.432 463.831 717.033 484.514 698.178 cv
484.514 698.178 463.381 710.65 448.506 710.432 cv
cp
f
445.967 703.803 mo
445.967 703.803 461.295 710.412 481.979 691.557 cv
481.979 691.557 460.842 704.025 445.967 703.803 cv
cp
f
441.006 698.74 mo
441.006 698.74 456.342 705.35 477.018 686.494 cv
477.018 686.494 455.881 698.967 441.006 698.74 cv
cp
f
436.827 693.404 mo
436.827 693.404 452.155 700.01 472.838 681.158 cv
472.838 681.158 451.702 693.627 436.827 693.404 cv
cp
f
430.76 689.881 mo
430.76 689.881 446.084 696.486 466.76 677.631 cv
466.76 677.631 445.624 690.1 430.76 689.881 cv
cp
f
426.854 685.322 mo
426.854 685.322 442.174 691.924 462.858 673.072 cv
462.858 673.072 441.721 685.537 426.854 685.322 cv
cp
f
424.342 679.998 mo
424.342 679.998 439.667 686.604 460.342 667.752 cv
460.342 667.752 439.206 680.217 424.342 679.998 cv
cp
f
421.17 675.525 mo
421.17 675.525 436.491 682.127 457.17 663.279 cv
457.17 663.279 436.038 675.744 421.17 675.525 cv
cp
f
417.92 670.115 mo
417.92 670.115 433.249 676.721 453.928 657.869 cv
453.928 657.869 432.795 670.338 417.92 670.115 cv
cp
f
414.014 665.553 mo
414.014 665.553 429.338 672.158 450.022 653.303 cv
450.022 653.303 428.885 665.775 414.014 665.553 cv
cp
f
412.53 659.428 mo
412.53 659.428 427.854 666.033 448.542 647.182 cv
448.542 647.182 427.405 659.65 412.53 659.428 cv
cp
f
grestore
gsave
454.772 634.018 mo
454.772 634.018 493.491 670.658 502.764 682.533 cv
515.807 699.225 532.147 710.314 539.226 708.217 cv
546.304 706.119 550.757 698.869 552.319 697.139 cv
553.882 695.4 561.554 683.287 563.479 677.326 cv
565.405 671.369 563.87 684.986 529.886 667.924 cv
525.404 665.678 487.53 645.615 476.159 639.756 cv
464.795 633.896 449.909 621.311 454.772 634.018 cv
cp
clp
535.304 704.604 mo
535.304 704.604 551.554 700.814 557.007 673.369 cv
557.007 673.369 547.405 695.947 535.304 704.604 cv
cp
.27451 .207843 .145098 rgb
f
529.194 701.279 mo
529.194 701.279 545.444 697.49 550.886 670.049 cv
550.886 670.049 541.288 692.631 529.194 701.279 cv
cp
f
521.396 699.123 mo
521.396 699.123 537.647 695.334 543.101 667.881 cv
543.101 667.881 533.495 690.467 521.396 699.123 cv
cp
f
514.959 695.982 mo
514.959 695.982 531.214 692.197 536.659 664.744 cv
536.659 664.744 527.053 687.326 514.959 695.982 cv
cp
f
508.908 692.408 mo
508.908 692.408 525.17 688.623 530.612 661.174 cv
530.612 661.174 521.014 683.76 508.908 692.408 cv
cp
f
502.842 689.912 mo
502.842 689.912 519.088 686.131 524.533 658.682 cv
524.533 658.682 514.936 681.26 502.842 689.912 cv
cp
f
496.584 687.1 mo
496.584 687.1 512.838 683.314 518.283 655.861 cv
518.283 655.861 508.686 678.447 496.584 687.1 cv
cp
f
490.604 683.275 mo
490.604 683.275 506.857 679.49 512.307 652.041 cv
512.307 652.041 502.701 674.619 490.604 683.275 cv
cp
f
483.612 682.15 mo
483.612 682.15 499.862 678.365 505.303 650.912 cv
505.303 650.912 495.706 673.494 483.612 682.15 cv
cp
f
477.073 680.338 mo
477.073 680.338 493.334 676.549 498.776 649.1 cv
498.776 649.1 489.17 671.682 477.073 680.338 cv
cp
f
470.1 681.104 mo
470.1 681.104 486.354 677.318 491.795 649.869 cv
491.795 649.869 482.19 672.455 470.1 681.104 cv
cp
f
464.249 679.756 mo
464.249 679.756 480.499 675.967 485.944 648.518 cv
485.944 648.518 476.346 671.107 464.249 679.756 cv
cp
f
459.061 676.963 mo
459.061 676.963 475.319 673.178 480.764 645.729 cv
480.764 645.729 471.159 668.314 459.061 676.963 cv
cp
f
453.858 675.248 mo
453.858 675.248 470.108 671.467 475.553 644.018 cv
475.553 644.018 465.956 666.596 453.858 675.248 cv
cp
f
448.034 672.826 mo
448.034 672.826 464.295 669.037 469.733 641.588 cv
469.733 641.588 460.135 664.174 448.034 672.826 cv
cp
f
442.178 671.475 mo
442.178 671.475 458.436 667.686 463.881 640.236 cv
463.881 640.236 454.28 662.822 442.178 671.475 cv
cp
f
437.35 667.428 mo
437.35 667.428 453.6 663.643 459.049 636.189 cv
459.049 636.189 449.452 658.775 437.35 667.428 cv
cp
f
grestore
gsave
418.663 628.197 mo
418.663 628.197 378.991 655.303 366.19 663.264 cv
353.389 671.217 327.815 682.068 327.467 689.439 cv
327.131 696.814 332.838 705.521 333.959 707.564 cv
335.092 709.611 343.686 718.732 348.686 722.506 cv
353.686 726.279 371.272 700.389 374.733 696.76 cv
378.194 693.127 399.752 659.205 409.026 650.393 cv
418.288 641.576 432.268 627.783 418.663 628.197 cv
cp
clp
332.178 686.932 mo
332.178 686.932 330.417 703.525 354.557 717.686 cv
354.557 717.686 336.374 701.197 332.178 686.932 cv
cp
.27451 .207843 .145098 rgb
f
337.319 682.248 mo
337.319 682.248 335.561 698.842 359.694 712.998 cv
359.694 712.998 341.522 696.51 337.319 682.248 cv
cp
f
341.917 675.596 mo
341.917 675.596 340.155 692.189 364.299 706.35 cv
364.299 706.35 346.116 689.857 341.917 675.596 cv
cp
f
346.999 670.541 mo
346.999 670.541 345.237 687.139 369.374 701.299 cv
369.374 701.299 351.198 684.811 346.999 670.541 cv
cp
f
352.358 666.006 mo
352.358 666.006 350.592 682.6 374.733 696.76 cv
374.733 696.76 356.553 680.271 352.358 666.006 cv
cp
f
356.706 661.088 mo
356.706 661.088 354.948 677.682 379.092 691.842 cv
379.092 691.842 360.913 675.354 356.706 661.088 cv
cp
f
361.424 656.104 mo
361.424 656.104 359.667 672.697 383.803 686.857 cv
383.803 686.857 365.624 670.373 361.424 656.104 cv
cp
f
367.006 651.713 mo
367.006 651.713 365.237 668.311 389.374 682.467 cv
389.374 682.467 371.194 665.982 367.006 651.713 cv
cp
f
370.366 645.479 mo
370.366 645.479 368.6 662.072 392.737 676.232 cv
392.737 676.232 374.557 659.744 370.366 645.479 cv
cp
f
374.209 639.904 mo
374.209 639.904 372.459 656.498 396.592 670.65 cv
396.592 670.65 378.417 654.166 374.209 639.904 cv
cp
f
375.78 633.057 mo
375.78 633.057 374.022 649.65 398.163 663.803 cv
398.163 663.803 379.979 647.318 375.78 633.057 cv
cp
f
378.983 627.971 mo
378.983 627.971 377.217 644.564 401.354 658.725 cv
401.354 658.725 383.17 642.236 378.983 627.971 cv
cp
f
383.311 623.994 mo
383.311 623.994 381.549 640.592 405.69 654.748 cv
405.69 654.748 387.514 638.26 383.311 623.994 cv
cp
f
386.639 619.635 mo
386.639 619.635 384.881 636.232 409.026 650.393 cv
409.026 650.393 390.842 633.904 386.639 619.635 cv
cp
f
390.846 614.936 mo
390.846 614.936 389.084 631.533 413.225 645.689 cv
413.225 645.689 395.053 629.201 390.846 614.936 cv
cp
f
394.045 609.854 mo
394.045 609.854 392.288 626.451 416.428 640.604 cv
416.428 640.604 398.249 624.119 394.045 609.854 cv
cp
f
399.456 606.615 mo
399.456 606.615 397.698 623.213 421.834 637.369 cv
421.834 637.369 403.659 620.885 399.456 606.615 cv
cp
f
grestore
gsave
406.268 614.201 mo
406.268 614.201 370.163 613.896 355.143 612.631 cv
340.131 611.369 307.799 606.041 303.116 611.752 cv
298.444 617.463 297.819 627.854 297.499 630.166 cv
297.178 632.475 298.624 644.924 300.377 650.939 cv
302.131 656.955 331.706 646.693 336.655 645.85 cv
341.6 645.01 379.143 630.686 391.85 629.154 cv
404.545 627.615 417.424 621.994 406.268 614.201 cv
cp
clp
308.397 612.549 mo
308.397 612.549 297.069 624.807 307.971 650.584 cv
307.971 650.584 303.241 626.498 308.397 612.549 cv
cp
.27451 .207843 .145098 rgb
f
315.315 611.865 mo
315.315 611.865 303.991 624.119 314.889 649.893 cv
314.889 649.893 310.159 625.814 315.315 611.865 cv
cp
f
322.975 609.279 mo
322.975 609.279 311.655 621.533 322.553 647.307 cv
322.553 647.307 317.827 623.225 322.975 609.279 cv
cp
f
330.065 608.264 mo
330.065 608.264 318.741 620.518 329.639 646.291 cv
329.639 646.291 324.913 622.213 330.065 608.264 cv
cp
f
337.077 607.826 mo
337.077 607.826 325.749 620.08 336.655 645.85 cv
336.655 645.85 331.92 621.771 337.077 607.826 cv
cp
f
343.502 606.479 mo
343.502 606.479 332.178 618.732 343.077 644.51 cv
343.077 644.51 338.346 620.432 343.502 606.479 cv
cp
f
350.256 605.299 mo
350.256 605.299 338.932 617.553 349.842 643.33 cv
349.842 643.33 345.104 619.244 350.256 605.299 cv
cp
f
357.358 605.111 mo
357.358 605.111 346.03 617.365 356.932 643.135 cv
356.932 643.135 352.202 619.057 357.358 605.111 cv
cp
f
363.776 602.115 mo
363.776 602.115 352.452 614.373 363.346 640.143 cv
363.346 640.143 358.62 616.064 363.776 602.115 cv
cp
f
370.202 599.943 mo
370.202 599.943 358.874 612.201 369.78 637.979 cv
369.78 637.979 365.045 613.893 370.202 599.943 cv
cp
f
375.545 595.393 mo
375.545 595.393 364.217 607.646 375.124 633.42 cv
375.124 633.42 370.389 609.338 375.545 595.393 cv
cp
f
381.147 593.221 mo
381.147 593.221 369.819 605.482 380.721 631.256 cv
380.721 631.256 375.991 607.17 381.147 593.221 cv
cp
f
386.995 592.623 mo
386.995 592.623 375.67 604.877 386.581 630.654 cv
386.581 630.654 381.854 606.572 386.995 592.623 cv
cp
f
392.272 591.119 mo
392.272 591.119 380.944 603.377 391.85 629.154 cv
391.85 629.154 387.124 605.064 392.272 591.119 cv
cp
f
398.452 589.857 mo
398.452 589.857 387.124 602.115 398.026 627.885 cv
398.026 627.885 393.299 603.811 398.452 589.857 cv
cp
f
404.053 587.689 mo
404.053 587.689 392.733 599.951 403.631 625.725 cv
403.631 625.725 398.909 601.643 404.053 587.689 cv
cp
f
410.327 588.33 mo
410.327 588.33 399.002 600.584 409.901 626.361 cv
409.901 626.361 405.17 602.279 410.327 588.33 cv
cp
f
grestore
gsave
404.702 598.029 mo
404.702 598.029 369.518 574.572 356.932 566.279 cv
344.35 557.99 318.495 537.854 311.655 540.635 cv
304.811 543.412 299.303 552.244 297.913 554.123 cv
296.526 555.998 299.624 573.127 298.288 579.248 cv
296.956 585.369 296.202 569.342 318.112 578.205 cv
322.764 580.092 369.381 593.607 381.268 598.334 cv
393.163 603.061 410.772 610.209 404.702 598.029 cv
cp
clp
315.905 543.857 mo
315.905 543.857 300.1 549.209 297.35 577.061 cv
297.35 577.061 304.709 553.646 315.905 543.857 cv
cp
.27451 .207843 .145098 rgb
f
322.311 546.564 mo
322.311 546.564 306.506 551.916 303.756 579.764 cv
303.756 579.764 311.12 556.354 322.311 546.564 cv
cp
f
330.28 547.955 mo
330.28 547.955 314.471 553.307 311.733 581.154 cv
311.733 581.154 319.084 557.744 330.28 547.955 cv
cp
f
336.995 550.455 mo
336.995 550.455 321.186 555.803 318.444 583.654 cv
318.444 583.654 325.799 560.244 336.995 550.455 cv
cp
f
343.35 553.42 mo
343.35 553.42 327.553 558.768 324.803 586.615 cv
324.803 586.615 332.163 563.205 343.35 553.42 cv
cp
f
349.639 555.307 mo
349.639 555.307 333.842 560.658 331.092 588.51 cv
331.092 588.51 338.456 565.1 349.639 555.307 cv
cp
f
356.151 557.506 mo
356.151 557.506 340.334 562.854 337.596 590.705 cv
337.596 590.705 344.948 567.287 356.151 557.506 cv
cp
f
362.467 560.729 mo
362.467 560.729 346.663 566.08 343.913 593.928 cv
343.913 593.928 351.268 570.518 362.467 560.729 cv
cp
f
369.545 561.166 mo
369.545 561.166 353.737 566.518 350.979 594.365 cv
350.979 594.365 358.342 570.955 369.545 561.166 cv
cp
f
376.213 562.334 mo
376.213 562.334 360.413 567.686 357.663 595.533 cv
357.663 595.533 365.026 572.123 376.213 562.334 cv
cp
f
383.088 560.889 mo
383.088 560.889 367.284 566.24 364.538 594.092 cv
364.538 594.092 371.893 570.674 383.088 560.889 cv
cp
f
389.042 561.654 mo
389.042 561.654 373.241 567.018 370.491 594.869 cv
370.491 594.869 377.85 571.447 389.042 561.654 cv
cp
f
394.471 563.932 mo
394.471 563.932 378.663 569.283 375.92 597.139 cv
375.92 597.139 383.28 573.725 394.471 563.932 cv
cp
f
399.827 565.131 mo
399.827 565.131 384.022 570.482 381.268 598.334 cv
381.268 598.334 388.631 574.924 399.827 565.131 cv
cp
f
405.858 566.982 mo
405.858 566.982 390.042 572.326 387.303 600.182 cv
387.303 600.182 394.655 576.771 405.858 566.982 cv
cp
f
411.815 567.76 mo
411.815 567.76 396.002 573.111 393.256 600.959 cv
393.256 600.959 400.616 577.549 411.815 567.76 cv
cp
f
417.014 571.314 mo
417.014 571.314 401.202 576.662 398.456 604.518 cv
398.456 604.518 405.823 581.104 417.014 571.314 cv
cp
f
grestore
gsave
413.499 585.732 mo
413.499 585.732 400.272 545.568 395.483 531.275 cv
390.69 516.995 373.725 482.174 366.62 480.143 cv
359.53 478.112 358.776 484.682 356.538 485.307 cv
354.276 485.932 346.151 501.322 341.319 505.314 cv
336.506 509.318 345.799 496.229 357.565 516.722 cv
360.065 521.077 388.424 560.471 394.866 571.518 cv
401.307 582.572 410.768 599.064 413.499 585.732 cv
cp
clp
377.022 488.323 mo
377.022 488.323 361.276 482.784 341.936 503.018 cv
341.936 503.018 362.17 489.124 377.022 488.323 cv
cp
.27451 .207843 .145098 rgb
f
380.393 494.409 mo
380.393 494.409 364.647 488.87 345.303 509.088 cv
345.303 509.088 365.545 495.206 380.393 494.409 cv
cp
f
385.807 500.413 mo
385.807 500.413 370.065 494.877 350.729 515.108 cv
350.729 515.108 370.956 501.217 385.807 500.413 cv
cp
f
389.553 506.525 mo
389.553 506.525 373.803 500.983 354.467 521.21 cv
354.467 521.21 374.706 507.326 389.553 506.525 cv
cp
f
392.733 512.783 mo
392.733 512.783 376.983 507.244 357.643 527.472 cv
357.643 527.472 377.881 513.58 392.733 512.783 cv
cp
f
396.51 518.147 mo
396.51 518.147 380.772 512.611 361.432 532.842 cv
361.432 532.842 381.663 518.956 396.51 518.147 cv
cp
f
400.276 523.89 mo
400.276 523.89 384.534 518.347 365.194 538.58 cv
365.194 538.58 385.428 524.683 400.276 523.89 cv
cp
f
403.264 530.323 mo
403.264 530.323 387.522 524.788 368.182 545.01 cv
368.182 545.01 388.413 531.119 403.264 530.323 cv
cp
f
408.561 535.033 mo
408.561 535.033 392.819 529.495 373.475 549.713 cv
373.475 549.713 393.709 535.83 408.561 535.033 cv
cp
f
413.1 540.072 mo
413.1 540.072 397.358 534.533 378.01 554.76 cv
378.01 554.76 398.249 540.869 413.1 540.072 cv
cp
f
419.397 543.17 mo
419.397 543.17 403.659 537.631 384.315 557.861 cv
384.315 557.861 404.545 543.967 419.397 543.17 cv
cp
f
423.608 547.443 mo
423.608 547.443 407.858 541.92 388.522 562.146 cv
388.522 562.146 408.756 548.248 423.608 547.443 cv
cp
f
426.475 552.588 mo
426.475 552.588 410.729 547.041 391.389 567.283 cv
391.389 567.283 411.627 553.389 426.475 552.588 cv
cp
f
429.952 556.83 mo
429.952 556.83 414.209 551.295 394.866 571.518 cv
394.866 571.518 415.1 557.631 429.952 556.83 cv
cp
f
433.557 562.006 mo
433.557 562.006 417.815 556.459 398.479 576.701 cv
398.479 576.701 418.702 562.803 433.557 562.006 cv
cp
f
437.764 566.291 mo
437.764 566.291 422.022 560.752 402.682 580.982 cv
402.682 580.982 422.92 567.096 437.764 566.291 cv
cp
f
439.667 572.299 mo
439.667 572.299 423.928 566.76 404.584 586.99 cv
404.584 586.99 424.819 573.1 439.667 572.299 cv
cp
f
grestore
gsave
435.827 576.939 mo
435.827 576.939 450.03 535.928 455.014 521.276 cv
460.002 506.639 467.967 467.584 463.62 461.413 cv
459.249 455.249 454.635 460.108 452.475 459.186 cv
450.311 458.252 434.452 465.577 428.182 465.741 cv
421.92 465.92 437.292 461.213 434.014 485.334 cv
433.319 490.459 431.526 540.482 429.831 553.549 cv
428.139 566.615 425.491 586.025 435.827 576.939 cv
cp
clp
466.803 474.674 mo
466.803 474.674 457.772 460.155 430.081 464.264 cv
430.081 464.264 454.577 465.87 466.803 474.674 cv
cp
.27451 .207843 .145098 rgb
f
465.725 481.756 mo
465.725 481.756 456.702 467.241 429.01 471.342 cv
429.01 471.342 453.518 472.952 465.725 481.756 cv
cp
f
466.327 490.073 mo
466.327 490.073 457.288 475.561 429.612 479.674 cv
429.612 479.674 454.104 481.272 466.327 490.073 cv
cp
f
465.53 497.417 mo
465.53 497.417 456.491 482.901 428.811 487.01 cv
428.811 487.01 453.319 488.616 465.53 497.417 cv
cp
f
464.198 504.518 mo
464.198 504.518 455.163 490.006 427.479 494.116 cv
427.479 494.116 451.979 495.717 464.198 504.518 cv
cp
f
463.889 511.279 mo
463.889 511.279 454.87 496.772 427.174 500.881 cv
427.174 500.881 451.667 502.486 463.889 511.279 cv
cp
f
463.342 518.335 mo
463.342 518.335 454.311 503.814 426.62 507.928 cv
426.62 507.928 451.131 509.533 463.342 518.335 cv
cp
f
461.749 525.46 mo
461.749 525.46 452.721 510.947 425.026 515.054 cv
425.026 515.054 449.534 516.655 461.749 525.46 cv
cp
f
463.045 532.654 mo
463.045 532.654 454.014 518.14 426.331 522.237 cv
426.331 522.237 450.827 523.851 463.045 532.654 cv
cp
f
463.534 539.623 mo
463.534 539.623 454.499 525.12 426.811 529.222 cv
426.811 529.222 451.315 530.823 463.534 539.623 cv
cp
f
466.616 546.154 mo
466.616 546.154 457.577 531.639 429.889 535.752 cv
429.889 535.752 454.389 537.35 466.616 546.154 cv
cp
f
467.311 552.299 mo
467.311 552.299 458.264 537.799 430.577 541.9 cv
430.577 541.9 455.092 543.506 467.311 552.299 cv
cp
f
466.42 558.303 mo
466.42 558.303 457.385 543.783 429.694 547.9 cv
429.694 547.9 454.198 549.502 466.42 558.303 cv
cp
f
466.553 563.963 mo
466.553 563.963 457.526 549.447 429.831 553.549 cv
429.831 553.549 454.342 555.158 466.553 563.963 cv
cp
f
466.233 570.459 mo
466.233 570.459 457.202 555.932 429.51 560.053 cv
429.51 560.053 454.01 561.65 466.233 570.459 cv
cp
f
466.928 576.611 mo
466.928 576.611 457.893 562.1 430.198 566.201 cv
430.198 566.201 454.709 567.814 466.928 576.611 cv
cp
f
464.733 582.689 mo
464.733 582.689 455.706 568.178 428.014 572.291 cv
428.014 572.291 452.518 573.893 464.733 582.689 cv
cp
f
grestore
gsave
446.366 596.791 mo
446.366 596.791 484.28 575.83 498.377 569.455 cv
512.467 563.096 546.429 542.213 547.96 534.822 cv
549.476 527.429 542.765 527.374 541.972 525.167 cv
541.171 522.944 524.982 516.374 520.584 511.908 cv
516.17 507.471 530.108 515.472 510.264 529.565 cv
506.041 532.553 468.303 565.436 457.604 573.127 cv
446.905 580.822 432.67 595.451 446.366 596.791 cv
cp
clp
540.456 546.213 mo
540.456 546.213 544.874 529.698 522.951 512.291 cv
522.951 512.291 538.534 531.271 540.456 546.213 cv
cp
.27451 .207843 .145098 rgb
f
534.546 550.268 mo
534.546 550.268 538.976 533.756 517.061 516.343 cv
517.061 516.343 532.632 535.334 534.546 550.268 cv
cp
f
528.89 556.385 mo
528.89 556.385 533.3 539.869 511.381 522.479 cv
511.381 522.479 526.955 541.455 528.89 556.385 cv
cp
f
522.975 560.826 mo
522.975 560.826 527.404 544.307 505.482 526.909 cv
505.482 526.909 521.057 545.893 522.975 560.826 cv
cp
f
516.889 564.709 mo
516.889 564.709 521.307 548.189 499.389 530.792 cv
499.389 530.792 514.959 549.775 516.889 564.709 cv
cp
f
511.74 569.104 mo
511.74 569.104 516.162 552.6 494.237 535.189 cv
494.237 535.189 509.807 554.174 511.74 569.104 cv
cp
f
506.213 573.525 mo
506.213 573.525 510.643 557.006 488.713 539.607 cv
488.713 539.607 504.299 558.592 506.213 573.525 cv
cp
f
499.928 577.232 mo
499.928 577.232 504.35 560.725 482.424 543.314 cv
482.424 543.314 498.006 562.291 499.928 577.232 cv
cp
f
495.561 583.092 mo
495.561 583.092 499.983 566.584 478.073 549.17 cv
478.073 549.17 493.635 568.158 495.561 583.092 cv
cp
f
490.799 588.217 mo
490.799 588.217 495.217 571.705 473.299 554.299 cv
473.299 554.299 488.881 573.279 490.799 588.217 cv
cp
f
488.139 594.924 mo
488.139 594.924 492.561 578.408 470.631 561.006 cv
470.631 561.006 486.213 579.982 488.139 594.924 cv
cp
f
484.131 599.635 mo
484.131 599.635 488.534 583.119 466.62 565.713 cv
466.62 565.713 482.202 584.701 484.131 599.635 cv
cp
f
479.143 603.088 mo
479.143 603.088 483.561 586.568 461.631 569.166 cv
461.631 569.166 477.213 588.15 479.143 603.088 cv
cp
f
475.1 607.057 mo
475.1 607.057 479.522 590.541 457.604 573.127 cv
457.604 573.127 473.186 592.123 475.1 607.057 cv
cp
f
470.143 611.26 mo
470.143 611.26 474.569 594.732 452.643 577.338 cv
452.643 577.338 468.221 596.311 470.143 611.26 cv
cp
f
466.12 615.971 mo
466.12 615.971 470.538 599.455 448.62 582.045 cv
448.62 582.045 464.198 601.037 466.12 615.971 cv
cp
f
460.186 618.525 mo
460.186 618.525 464.616 602.018 442.682 584.615 cv
442.682 584.615 458.256 603.596 460.186 618.525 cv
cp
f
grestore
gsave
455.014 616.764 mo
455.014 616.764 497.663 622.693 512.506 627.064 cv
527.33 631.455 566.437 640.76 572.425 636.158 cv
578.401 631.545 573.351 627.131 574.194 624.936 cv
575.038 622.732 567.062 607.186 566.644 600.932 cv
566.202 594.686 571.538 609.846 547.304 607.564 cv
542.155 607.072 492.1 607.342 478.975 606.182 cv
465.846 605.021 445.51 606.807 455.014 616.764 cv
cp
clp
559.312 639.893 mo
559.312 639.893 573.44 630.264 568.194 602.768 cv
568.194 602.768 567.601 627.311 559.312 639.893 cv
cp
.27451 .207843 .145098 rgb
f
552.179 639.104 mo
552.179 639.104 566.315 629.482 561.085 601.994 cv
561.085 601.994 560.476 626.537 552.179 639.104 cv
cp
f
543.897 640.041 mo
543.897 640.041 558.022 630.412 552.776 602.924 cv
552.776 602.924 552.187 627.467 543.897 640.041 cv
cp
f
536.522 639.545 mo
536.522 639.545 550.663 629.924 545.417 602.432 cv
545.417 602.432 544.823 626.975 536.522 639.545 cv
cp
f
529.366 638.51 mo
529.366 638.51 543.503 628.881 538.265 601.393 cv
538.265 601.393 537.675 625.939 529.366 638.51 cv
cp
f
522.607 638.475 mo
522.607 638.475 536.737 628.865 531.491 601.361 cv
531.491 601.361 530.89 625.904 522.607 638.475 cv
cp
f
515.533 638.217 mo
515.533 638.217 529.675 628.6 524.428 601.104 cv
524.428 601.104 523.83 625.654 515.533 638.217 cv
cp
f
508.35 636.924 mo
508.35 636.924 522.482 627.307 517.244 599.807 cv
517.244 599.807 516.646 624.35 508.35 636.924 cv
cp
f
501.217 638.51 mo
501.217 638.51 515.35 628.893 510.119 601.393 cv
510.119 601.393 509.514 625.939 501.217 638.51 cv
cp
f
494.264 639.283 mo
494.264 639.283 508.389 629.658 503.154 602.166 cv
503.154 602.166 502.564 626.713 494.264 639.283 cv
cp
f
487.874 642.627 mo
487.874 642.627 502.01 633.002 496.76 605.506 cv
496.76 605.506 496.17 630.053 487.874 642.627 cv
cp
f
481.76 643.576 mo
481.76 643.576 495.877 633.943 490.643 606.447 cv
490.643 606.447 490.045 631.01 481.76 643.576 cv
cp
f
475.729 642.936 mo
475.729 642.936 489.862 633.307 484.612 605.807 cv
484.612 605.807 484.022 630.361 475.729 642.936 cv
cp
f
470.081 643.303 mo
470.081 643.303 484.209 633.686 478.975 606.182 cv
478.975 606.182 478.377 630.736 470.081 643.303 cv
cp
f
463.581 643.248 mo
463.581 643.248 477.721 633.619 472.467 606.127 cv
472.467 606.127 471.881 630.674 463.581 643.248 cv
cp
f
457.448 644.193 mo
457.448 644.193 471.584 634.564 466.35 607.072 cv
466.35 607.072 465.745 631.623 457.448 644.193 cv
cp
f
451.292 642.252 mo
451.292 642.252 465.42 632.639 460.174 605.139 cv
460.174 605.139 459.577 629.682 451.292 642.252 cv
cp
f
grestore
558.581 481.186 mo
558.581 481.186 594.573 499.44 599.788 546.389 cv
599.788 546.389 587.269 505.697 558.581 481.186 cv
cp
.996078 1 .854902 rgb
f
565.366 476.491 mo
565.366 476.491 601.354 494.749 606.565 541.693 cv
606.565 541.693 594.046 501.006 565.366 476.491 cv
cp
f
571.097 472.315 mo
571.097 472.315 607.093 490.573 612.308 537.521 cv
612.308 537.521 599.788 496.834 571.097 472.315 cv
cp
f
300.377 650.939 mo
300.377 650.939 303.502 660.104 306.116 661.146 cv
308.725 662.189 312.893 660.104 312.893 661.666 cv
312.893 663.229 316.022 658.537 319.674 658.537 cv
323.327 658.537 333.233 653.322 333.233 653.322 cv
350.975 647.061 li
350.975 647.061 331.151 659.58 322.284 663.229 cv
313.417 666.885 312.37 672.1 316.022 675.752 cv
319.674 679.4 311.85 677.838 309.241 671.057 cv
306.631 664.275 298.815 658.467 300.377 650.939 cv
cp
.27451 .207843 .145098 rgb
f
485.549 478.053 mo
485.549 478.053 490.768 478.053 490.768 480.663 cv
490.768 483.268 479.819 505.182 479.819 505.182 cv
479.819 505.182 486.592 481.706 482.424 481.706 cv
478.249 481.706 482.424 477.534 485.549 478.053 cv
cp
f
486.592 490.049 mo
486.592 490.049 488.913 481.182 494.803 481.967 cv
500.682 482.749 498.596 483.268 500.682 485.881 cv
502.764 488.487 504.85 491.616 503.811 493.702 cv
502.764 495.792 498.163 504.201 496.506 506.225 cv
491.815 511.963 490.768 516.655 490.768 516.655 cv
482.944 529.175 li
482.944 529.175 498.167 509.932 502.764 502.572 cv
510.592 490.049 517.369 491.616 517.369 491.616 cv
507.982 489.01 li
507.982 489.01 511.111 483.268 503.811 481.186 cv
496.506 479.096 490.768 479.62 488.686 481.186 cv
486.592 482.749 486.592 490.049 486.592 490.049 cv
cp
f
332.795 455.639 mo
332.795 455.639 337.928 453.018 340.538 449.885 cv
343.147 446.76 346.276 449.362 346.276 451.452 cv
346.276 453.538 344.194 454.581 342.108 456.667 cv
340.018 458.756 332.877 462.956 332.795 455.639 cv
cp
.988235 .87451 .054902 rgb
f
322.792 464.749 mo
322.792 464.749 324.401 460.37 328.022 462.698 cv
331.643 465.022 331.475 470.182 327.366 471.901 cv
323.249 473.62 317.709 473.815 322.792 464.749 cv
cp
f
502.244 744.604 mo
502.244 744.604 507.459 741.479 505.896 736.783 cv
504.326 732.084 508.498 732.084 508.498 732.084 cv
508.498 732.084 506.936 728.436 511.111 730.002 cv
515.287 731.564 521.545 732.084 521.545 732.084 cv
502.244 744.604 li
cp
.27451 .207843 .145098 rgb
f
575.265 595.943 mo
575.265 595.943 565.882 593.334 564.843 583.424 cv
563.792 573.51 565.366 569.857 561.71 566.209 cv
558.054 562.557 540.847 569.857 540.847 569.857 cv
540.847 569.857 547.624 564.643 552.319 563.08 cv
557.015 561.514 559.358 556.209 549.585 553.646 cv
539.796 551.08 553.882 547.955 560.147 558.385 cv
566.405 568.814 575.265 595.943 575.265 595.943 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_lemon.eps)
%%CreationDate: 3/12/2016 1:31 AM
%AI9_DataStream
%Gb",KBj4NXf'*(fcdVn;c6s7u49-i;+c<!:TK';f82_%$A-TY/+5Yn(f2OgnaX5\SljTG3mX#FEC0/rc>4Yq*lHYr:]i-GHCZjCI
%5AM_(ehm@Z6iGW/J)%U+XF(SdP'"puMk+TZC[X4J`Ltc8W`SK1ellhS8"l5p=ZD1D$E<bcV,I=TQ)taXQgd^]a$.V3.m^o+X;9M=
%-`p7@GsWUfBu*k)!<+S;41/Oo;[W6Wqk1;pL#6,,MgIej3"4MX==)1kj,+><Att8e954$jV2kktH+DIC(>@krmF-LMRb;\*d_h_T
%i#c>\(^L&H"@&c(_-*I1C%H(;h-TS`qgJm-=AJ6@Ybacq3A?Rjs3]mlr%Hk6)q9@<Fo;9qDM*GthaYa^=Zk%0ILbNp\:^QQ//s$r
%j9'g<!c2#67H,@0"k?)=cjo7j%8G="G"VLW+9&2$?`H2X%j/Ea)/7Rl4ZIf?:MX"R0RPhH3#^"X)-Ya<jHD2C"Q.D=heT3(6(nuL
%jhN[sp0mcHE3Qp.Gbf&Br,C#^"O/m5Ea-gBZfCYF]W@HOMJAmens'9JEcdr;^SStJTm7]d!H7:h%N`_qapVj-eZ%sPIKYIqQ;"U9
%#\lm&\$T*R5gfY:Pi;C,>16k]!7>dp;[b8>4')(Y>pjZqC3U^+7oFE<nGi"-p&R>NRcX-]D,%.]4aGa4Qb#0B)C^aIMdT,'OoP%'
%s2gF4"5<.8VD^k%::=JP7tOZeH&/eEf1K9?.\6gladk!@I18`A;EpLT]DnP]@#.QF+JFOR=*=;2>f2-mr8SOlk+1j?3q21YB"c[G
%WL_T>r*q0SWh0KprBgA_W&prC>5(tD`rAa&-d]G/riR0gKlZ5QL`m:Y<);hFEiU)g(i9TZ:,:<rZVUca;L><KK-F.ZOu.:\3p`*c
%6'@r8EVl65]c'8nm'JBC8+h0S>blJ'T0hH:GPR`-R3_,=2Z`h9]n:5<.[BRMZd?31(ZWMrq)t83MJn\P$`)A_\g,TeiIB2CIhNuI
%O\RKG`P"Ki;[e+0*V82TSX"!+g/CC!h4:`N)lPKe%PJ.uCrW(B8C&RI#Dih'5m0-FFh@?1W72cK!si*<0]@#FfgnM7PsVV"9[OC0
%fYj3O$c)0+\.uDoLUBp.F%/1MlKUp3WGDFliS19'n[).34q.HdXhhd/^"e#>Jr]iUQ&@'"$I'Y;ITfN!rDTiJi5\hW]4UlGdggp$
%Y!C$$ZWZM\;nOM[9$O"u4cIn.*<7tp&c\p1"4%@(>gi&q:H^gn+b=(qFST7AFJR6D/%X4;<UKlds5;F$.gZ/#!9'QlJH4t4![.Ip
%QeE5^!0M`Z%Eq7;5/1bYJ4=[O'KC55,9j#4B\:Udge#O\!+8Uk8O8ct3QY5=(PNNN1jJ+[!iW?P9!T1-)c(9oR\sPhe;D*+^#6(`
%mRB226ia7;&)62hnLEB-!N/BbckoH.\NRVR"e7:cW`l=3=)8\e-NYdOH"%sLXkBJc3\@^jHo(QK!E;c;U\jm`$90<7dD.Vl<i;*K
%5,aJJRE\`Ieq^AQ1rg,e7PTnDRYUA06k0C.i))akp>%:,lcfQfdd9(E/3BqWR`426gO9H>g/[Y:aL'[.;bafG'g(c9_jEEsOR^sI
%F#!d,r2*JUju%Gc&&Ce2XY3AYW;p@8b"Wg/$WCq(9fZutb+1BtTZ^DCe]Y(K0fK3S>QU.\6";Nu:M!tX/SqtO/[qtG(:N#8Q31f$
%NB+6*Oo[<)p7+!9p08eLB#^DE9.([+%k<>NKi7m<7Hc4`rnM7TEl%K*V)9ST$_lH)Wr\;b3sY?V[*lKW;U)Gsr3Xgb[E=2,p1ifg
%>Am8[/5qU8os:u*clR37^PHCKb1K<Xe=k:noq<Wb,gh?=s%Js6pB\fOP0,;RZX>[uO_tR)I;u[NdN^W!<0I"\V;HAfQDnM*X[Z.B
%lWf-NZcKloUiWn(c*K_k3%Pi.@9QJ$M-1N!i.Al5<!pmPHEG^Me<6?Qi$T1j:J22Up-4O_/[uRHh+qY4i)msf4ULgqg0GG:+t0>D
%=0ZKc4,j1c!98PBf.m!bj][!iR4Db.pFYE%89J#+L7)"ejt7p@=@63S3r_6/f6#TfB9Zo[3'a0?DI6@qG*2jZ9Q>Xe)X(`F'Y?3!
%)[8))%-HVY8>(03?3OsP%/P(`E0V6;#6ntlgin4!jcskU/nWCkJ@pX-nt-SUZY0JKa5_UhHCNuH^'pIn!Uf#BC-0P*`dFAuDdC=+
%b@b)ZRRHBW;sub?!5k$_c?+JsjDu%mP>:]EcWo2VWn/cSAe=kn5r`oAo9`-]XBd`&Sr.WA]B[X-WSC's[]8@umEBiIa[uQNba=_g
%c=>)rj1"9Bok*4cCY'k/Ju6m'=g501B4LPK]RJ<EXD*B"_7ZZ-,c7.g&k#c4L,;ro+UL'KM9H<XcYsZdiaVh%?&VR@5<=E5itEi(
%1O:c>&Y#89l'XreT,$UY"IN=(4>U<:i2TbB.#Uih"[C]4p\>s'"QqL$A=`dgl]Cr7nu?KeL.h`/K*6bAXc#NJ(/tcr8l/4D!?:rI
%;Xe61"E1IShr#jqQ8Z9oX+=(:hub2W$]UPg3Rn0>QQUB0':)Dfc(EM$T6ehUUB.5VP?86nj&@i.W>DrK>WB&7C*uhcn9=C^IXu5N
%PF-7eQK0+L//J4UKO[qVoa/8iZU=BlJ=60(Pd?$W3bRPH-!:FMAV/XS<RO+sKaZ0>;47'G'I\[Xhh<-Y^]>?g(RbZ0NI+D-,Wc#d
%V'H4g\C\[78>(:\P:5;\aha'(`h#'ReKb8nh'N:q1E^aV1c0naWSB+U:LXlX]1r^5>.p4)UggT-m0q+ZklE9^GuA$Mb-dn(i*K![
%:atB3WX6K+G+B=D#uo=9RAn;8&J1^uXge<u/W2rt>YTlf/&,j'o2(fk%W$[T>\0XSF-)6Aj@!V!IBgj]R3qt#>\BcVWJEEaW@2ic
%i*ITs2tc`_SoR\k!&H."B?#!i&nj$VP)D(;A3Nf"-qSrWqHT7Q]P<ReZH,K1=/=(b(M1a*SIl/Vo9kN"Lp9ahW1BhkPU+&gMFP;#
%72aIRV]lp'&WTRKe^%/H8ePNDL$H\rV4#;mRRCe6%I0DC=jD3\]L3WDMj'OAiY8_?&AN?&P?bq/eM#/5SE-Wcc,l=n?*brok-EQ6
%&o[-<<;QEMKs<#J=Kbe;B#3*%_q1C^?^j^&QJc!aHu6^Ok)Z]_2kafVY5PU>i'tp.='K?R$a01Fk%Y98D(`BQ6<@B1[JqLRMai@p
%-4o(+[Ok(T"htsWSuD_JJrHj.7dbke&o>C9N##sRK/<Oq7sOaNrreVc9&[h4Qu<4)VWrc!Z4l;)o&_#>9"g2USPfC<%'&tNCDna]
%[nI3p3@s$]-TRb9W8=8HoQ<Mokr/IKQ@f-@LVMetfAVM7*9D=0CSfsj>eBhMgE&1f"GM"OdG[Oj:("?sd?b_#qU0+dfpC*:buE)W
%;-LthYi<j5WCHo>BfJDflb'l1GadiinX2u.:Bo*o0o^ZL3maD9NtUI(Zr;CX?>\1rTUP:k&j0qo1XppALtHifRST(YCoR#p8M3hQ
%QJ35+TUk.;Ar7NQE9gdV6*\T>ehTbt_c=644YW7eK->eMo("7iHXP3u)htDFQ9?p(ZQ`F^8kRB-`PlUr0`O-V3K&HECZ=X',QfW9
%qCU^AZQK2fF,@V"r-)=`GnL(i!g6"MG7jiq_FH9]ChW,@H-.>n]86:^*iS3Xju\n?I4SjAokF0m/n2Q$i7D/NHq2gjMjWrW6s;(4
%STU+.+u1rrOr0pmG=DE8.[BkfUB.?YcS+#!@C:nk:_NiZs1uWi]qf=cR.*+eT&*BSQ/Lk,]a!&2/I>DdHnd@f2M(;FBqBkbQ1WFL
%]-ih9dj>P?*jUKTm,-eUF7R$sMmrBNAe<JC6(JA6bI(7D]Y=BY>d":tok%$(Y;Zis.q;Hbf@e#`[W%ch>\=YA&h(U)s4P>U-/D3*
%%4V4Y>j\o%H4[CF=B*U<iLQ/4S=fr`9'?_CoUW4U-<DO8@i#GeU:D^5[XWIS_IjMKkJUr]C'6te?Hr:<WX!B^Sin\*K%W>]FFaRF
%$,U#dh(ncI<1f\^G5Im9BWK_dYkuPZnZm,H/0$>C"ilP2=kN6g?5W7J/0$;Na32?iZ>dH-*%q]?b=jm%.RX+HZP;Y2306Iiq-=@g
%'SC%q4\0WqB]<40UkNGt(:$:,F8'>a`?tTO!WgbVCa'/odp?i78\p?SZ&*sgqu2oE0.*L#\+^9l.t,pR-m4^d*&!!*69$SI1!RFO
%>Z>1$%cNd[R*:LoS>Q]ff<juGF2Do4j6bI6dm`r+7J3KKU$7'(qU4=kTiD&=ge[C_,%jMEI;3aPJ)Ye"n%4iL8J/8<c9<9$<BiQ\
%"`6AUAl))j1,G\#-[<kAPi+E%l86a>>U?Ft@/+Bo1quPjp0Y0-IYQ#-dhnI\PF:%CZ54;1gf\<k\p\3JL*i$q',5*$J4Lm2rg=`;
%\tp\QipUn:;,X(ZRi!hk&n!>DA-lsYa,)7Ps"QaXQqKurU3>WLr"q4tBeK<#;lKaMr#!oOa7/6,O-'R"KcagI-1/R10s,8>iQ#'q
%0kS@bn_^Uug4_p4Q1JmcSM^eoG+nK,?;?[TbMS<7O)Xk#h6fF_QeTK[gcIZb-h]VO<t\g8n*)tai0'=\WHG4fE2_Y-5o&cL.A4%i
%K"<Y6KiX:R#2_I-XdDMMmd!(dfSX1a/Xm.[#s;?HA$I<\B&;5?>SS0G_s0@*;Og6M-[8po>u.1me>HP6SMf``,a:XO-3_McDU>+q
%d%YF)DZVDFK)-Q?)t^`^5=_:,Br;#Z4e#3_\Z:1B8?JJ,6YB7;jS)O<>WGE?jQ0'\\lTLUVENU*S#9f#7)1@:]cp4,W<ael'p4]\
%Y580R4A5'=C=sf$YVJB#KER\b1Dij5ju8f\j>DFTH4*qp\nnof=LPHr-:9?mCMmS*/ZcL:27KgPI]kVq5`;.VCMo7U2I#l[Jr0[e
%B[7uTC15C>bdiEf[kQt\k1mhD>?]S?^n==)`3c"Up,nabM1A`rFOOjM*S9VRo4B/&=J'ea/qG?4_rV`tk@'5)=--jJ_&53%r@We@
%;-.3fLh*[S8hB7;%b-c2+Hjt[o,:DUN6+&S/"juRX1W5GPsY"]4iL.g7\Nq%s&_qT.;ZDA<0DL*V;J*<0&bj.1W.NO_D<]QPXiZ]
%8Lg/jmq,JA>,X6@Hp*67,&WC4$-^Ujc)X3XgA'Em(cR</@@S2NOSi\3Bd`qq0,!*6Y/oqqX2?2^'W1j?-3[c9BA3oSKg`Lo:[]`e
%8l0W1?>HqV=2)W)A"*+@0e)<!,V-8`c*K_k8:"s_h%Rr,Bp/b4R:'M3s!q/4M'>c)cUf-5Z%t+NYaJ0nkQHU@JdVE+@2pK>GJ`WD
%Y"Yp)2d$u:j``>1GgifdQ%_+T61a8#O,)#>7Q9d^d(^]%Vc=C.#^["\B^h4B_3[EqW7>ece#:lMCB<)dA>']3O&E@3M&&/"k_0u`
%%F;CZ1j:SMCVHpb;"b[Xf*c4M$0c'4I8LFdPqns\NfZL=?7%tC94PPA\>j"3%h.T"RgPK`p$%#nTC-d1.WM6h#&DZBGCC00/*6JR
%TmW]i22_MkH$jBN*#HK^G;J>p(QM'pR!.GU7'J4qj"q(+Kj:-gF8.sJ)e[QN]Qe73>*Y]:_[C,?4FZTGAeH=(210#:L<j*gnM\]N
%=m,*&plWOB(57Sl`Q>.a(bS+BL7-uYH:jD$`;LFZN/!Yt9Yq$7a'#(:WFll?iTo'VXJZru&p-e2jY0l-DDj6,76]j&cMmg$IZpS$
%RBMbCqg9=r!G?>B0:/ggYUu`d=N9WnX(=tfqId=Z`8'J*>shJYH7jq9GN<1&^TD>?bV85[@%_$cAnmLLT4_&m^)f#R'Q6N]6#rYq
%0BCJ5iS(oMTU@Gl-g:St[M*Np:6V499R%qE<.ZM,!W4jTqm!'nKXj[g;_&p5,TE.!,YP`u/N*!1p2kjtP=@?Vrg?o4U<+Qhio$*[
%ULp4N3_T%,_A)#-gpoVOVl%^lf#]Y.hkt\D`oWM?lf6k^(.rkq<%87`k@Z5_O^e-5;Cm=H$Ej11d[eUBY+9C\9&X8Ne7N4>afB`)
%+%DqZ2QP8t%F3/)kV%GbnZ)-.ht[+RVV+/O;Um?aPS^b(h_k6H@`qZH7de?!Y]Rl0TT\b0q"mEf:Rt[gqi]FVejZ9;96$<2lj)\3
%4Hr#[nXgi1$cU<TJ!OWRCnXi]p.X#<?O"D41?]gF]r#mXl/NA[-h[1!:olTK6&C'PNj:O)9Vcksrqo,V4bped6JLBH/+k[jnWT7g
%r<^4Zi,A,",odtG+pD)W'H&Ag(ml6s-M;>mctpaSQ)t1sdYP"B%K_X:$\=E?K#l*H,@%qOiD=@@CSae:I2)mu+--^On>(PJj)BP:
%^?ra[V);11>r)Y6BWc",+0Op3/n%3&pC5r%nIH<5+8fR$L2Z=UG6QdejJ\jJUJA<3g4+Vr>H_++95e"Mp@k5g=";HV6Hos1nBLYk
%6*Z&Xi?-UnGqhEBAJj!M:G;M8JkoaC:[>UXfYj%ta)_Yj(pjB])g=4-fp8fZ$dQECbWj:=m0.-/E97=:^,BU.Ao-/!6!L9\UB\tJ
%R2E:?bSh4/ce!9r5n08_klm\cnEHS+e'<P@0DP0k:]J)*"5#JGbeE6X-EGY]ca5(7Ba\d(_52X<9=kQa^#7<H/q%"XD7TqU?K0BS
%kgPJ#Ba<<I3N!n@ePM7V\_i!)0,X=W12(UBTGJ#__4\!JTRYq](Mn8$5e8S;obVFf_.FL"p:>RSU\g)6Tq\T_8rPq@njm/_L?TZP
%LB[^YUFtnhe&(T;phc]<0:;E.12Bfm0^AnK?81^21@*:;@;mb/RB^Yn[c::*r'(Stg;qC@Qf_M`mOe5+JkuCtT@Og+HGQKqI/:F%
%g/e$naI>=?Rb4\jA_L&H*0*XI2V8\V@+Pd0I9h$p&_[V`9)DPO?QYT7NCoOE1N!P'l1?&e[0*]:fr"'RH&b3jf><bKe25N;[%f++
%cEWMUFV%ST#YRVZH_@)`38:i=j9!WjRlpS%9$hG\%,1\0WC^R83_WBFLLtmHjAL#_>3XJU!uR]]DGo/\:\SR-hYdtoZhK5>s4B!A
%s(/gc#q*FCNM9\q[-+e#@HK1,H%AQ=prC8oe^JgJL\cMJ93$DB=3VkGcIIiDC/A^/$>i%l4!tP="!SEXZfd2g1dpaB`r(5WD*7#%
%hT,N&L)JGk='_<-F#*CAj.2C1]=$53pHl3o54ZuDFN,Cledr*ge*?npb\n5pU8)X]6GH.+GSuHfOd]=F\un^1J>_L4#o5Y71,nh/
%S2h#3Y6^R"J4@/3'.JBY;hj-[]lT?Q/':sN,8"K43U)AF_Y'>6g@sZE!W,Us_BYSi:9.[(:'(7hXXLd3.\IE/1)/q+3MucpFE9FQ
%T^9G,T(sSlf%JqZJDW/ua]k$NEIQQMDJNWS*X%2>&<KBtc_^mDQkGFM#c*TZ[!;]$!g8iLUqb*Lp/Q$?on"JQB*Yf%TR;3N8-"<K
%VZSp?cajapds;riMr!<m^"4g-O00<eM])G+C6T"`Na*hWM[n(tclt`b9uT/n6+]qpokFnnnUGg=[n>X)8VD/IhYd2iQU.V+WMU/W
%<kZonY>dJXAk1HOTb@X;V+r8#Y5h`1[@irAD[*>:SVie\"12c'MCULj-"[%0ro%UcFkKQ#X[^"[hlfj*.gdtmcd7uC)We=_>1-BO
%=.3Ds1HVR0Vd3(='O'ms=oMdT5AXrP:GiIgJ>?2JFt2<GhH_DC/qmp7ZsIF3;FPt3BQ+O8,.4JNb8QcDohISkhQ1o>_u#a.`s_8W
%Fc)bnf^>p#;gX8*^C49^+UGHnaB:qjV>JA@VqlkLN;1K!D:?33b`iV'$F.g2oP7r^`($GWn+?^KjV$od\@3[f4`:NJo%Sn1GZT)I
%U+7)6pK@YX6VkqI"a@TD4i^+7hu"OkNe2c7WU3To>rXE;b3^;,6^L(D8SGS047<m/K@G@`&RpU!NppbZITiZi"H?0QeUs"Clrr[*
%,f4#egjmA<anH;sp)LeC[,Q60lhR>JLp?e>.(0.ER&`KuR15^aTtmd[&"3t"hR6mtgPL;TW3setT\P.aBR:ngmKZI6;&Y)!:B?)C
%:^Ct=duNoDh+;DHBZ8HDbYGlNWMlA8$R5YMnE];c%oAVV).'oV8tas3\JD!pE2J&r"d)/S+0OdLVgsPng'tb$PnAA@7Vu"m23d2)
%7RXG!57B$f$>k<;[pCUbONFr06bFl[p4gNjc(/*8hrsN!B_UN9C=/(+R3@N(Haa?imtK>$Qa#(]F1VIP^?#k.XElhC8-(C#P?g07
%f`gcCDF`M-kV?Z41(4?ZeFrn#Lf'sDs"L35;C)4FX-Z!I>!G^`X$B-<+LCtB21Xb=H(G7h/*cTT\h#d8JLE2?&"g<;\CYO#\AIBa
%+UQF\V38'Pie":p0WCX@\CO"_M;bo+p!]Jc=ZmM=\YoY6e[mpi<NZoePBr])<>7cW@;<ma/oDi]g_-K0E$`u/^+;_q^1D2MmH'X2
%=j>cp2@H?:ZMHni,f4o,\E9u<&Qpnare_uD^fO*,2+6c+)o94Cm)3;pGS6&))#$\;A_d=>HcD[(fX*&>Ye+@h^\gl(!ASR0KK/e6
%`*WjTjmuZLG>;IXZtlqoBVmHJntsuoIXh+d)jhLiYrd:<7:W5.a*j57o^0#"`6Cs(7N;c,V5O8BHhNii9=`sh:83t6rK55[60Le]
%Dt\Yu0h6u6+'H[Hh2Es1DNh"8WN.8s=RWO"8#eDpeTts)b+#5L]m61j^2W>4iZbsWAN+pJ,ogc4a7$p3:V@[3if>88_OZRlf$H"&
%:2NgK6Ydt`3R=amkuO0d18GS^,!fpBVdd!h(p`S9>!$#ioU\foVcMt;K[#IFXHfs\C3+B#:<U^&L98"OXp*tle38Z^.b8BPMDGe/
%<7+Pa(>=CWYchR&U&\pn&7OG#h,#W("g%g^*UWPr,<]EK`-"DqA'!r/8%hd$O6Y+2[KG$Se4Ctgq`Yuce"F%_G'%K<U!/(6'l(/'
%.5@XQ8;:BN7_-UgS+L,MFW?p'quubuPko1[n9AmOYPY<f`YD=d!0(UhXBb!KbkjGP.M\18CF?8`W9p.5IrD9IURokYLNY5U:<W$>
%@2Nli?gcF&&_XGe(WZbJ9,mgs_j63d6[]TSki+9JRb9Eq*edHAJ=^D(mhbZZs1/D]CcBdK8#ZSM0s%ZYBI"-+dW$+^-VbQ/d'tS8
%`DgHKKW1+**7>X`Wa0Ld:HiXJZ+L8;K!p4;@\<RY?S#AJAM=N^okR#0j$nn5FP<6#R]U"&g6FdnAc^(>)lf"mp28J$aZDG.ooi8/
%3?Fjk;HNRq(7LSl^6L)0h-G;XcI%n)kh`Z:X2JqUdV,6&CI<rFUgb'a6>OMRK>7lKIDW)O)t&mmblK.Y<_-KIo0iK^KcdXrp7R$]
%^*>^h7`hE3$B>k\/@WR=CUJmj:==aMG/`a-TmX*!ZeiD5l:pK]fhO$tUFM3%*-SKh%Hn9IDdZXjm)^E2'mK=C,p97if7k:_^X]J8
%98E:k#XSBufNn>BP_:3.)^Ua'Q!3`Y1kp'[m)i#3gG>EiJ-f/W!im<cW5>-3;BKfFEUP<X&%DDFIh/gY\p?-3J(3.mD+D,,\F(,9
%m>SQAG&d[k4MQBM7\LSImh*23Yjaf##tIm2<.[f9?Rp5<oXg%mCSCS[at_hm?in3VT?EkbH^S)DLA%?H.h0<:p!jgMZ!@7r)J=(Z
%^:Hr3W\9F%jm#Lsb/[B.3$&1Lo7W`TYR%GKP[i][<rj&J]&==aJl]M-NfmJ]201Y&5*IArFOZ;,)YUBUVnG.n`TFBPi"t!pK]@PA
%1m5$A,6CK-:"`ef)KFl1#a$/YY1+8C@''Y#4:'.5gp9Daj2iR!S[s`Wn0epr)ueC7nBMd+cu-O2"a$,%;:iW\*5aeP-p"s'<)7:`
%Eb1W.MnuXrHDNaRgS#r<dC!1"l>'ILiQMlM7f^c3$VYE8X5"2_G30=NRte3BScrc%4F#ME*4?6_&hps$93/]8W:&HQD*8Nrau'0J
%2&\j<4?^WPmAfWm[OmHp-tVE%!Yh"9TQ(;qR$>\N'[REJ1MN]b^'JJQ<oH,<FJ5#SWDkqQkrZ1&lHL#H6`EB[J'=/BV]_1Dq(PpC
%:&t^^_!p55riTnl+8&C/;1VO/[8_[H'P>0mn=\rh8$H7Ymq?I(F<q)(LBH%6:K-XA%TEj7AVu3V;O%<5pB/kO?mbu[3MPEr'JFFA
%41-((TY#jHbVC7[+_YShqH8#.j]8B[]>XSOkpnTo#Y>c#ji/]i[KeCElGG1QOSOEK57UHGQ@lpcO*hM$C00>J7B72h1t4<+>Ft[/
%SMSh$$8I[5p%`45$7,On]m1KhMb(4MpX<Z0*Q(F;Lh2L'McN'_]8!)^:Dgn9*&`[>DoEVflGJt]>.psHm%BB+3N[cQVC3ff@2LHY
%j0bq'WB<6g+Rnr)\SLmIKst.^),.*A(90bWg+_MK8lmEp8bY5gV^-O2dCd0N?>E`0,*OH6l_fI1DW++4*$1"%4X!L1W3uBQi>KVT
%&_L3uJ.3"J1#mT#F#5`ETN3Qngo2$>b9U%N7d#P3Dl$#^JiJsi(DX(Y0-j=C)`Dd3BO\*!iDeEarpfO;CJ?rG6u4F8HDshEU<"&T
%SQJTdU_FDOgT5"''cNTe<XphhN,n]Jg%\Src4ZSP=RmaJ#=(_\[+]6h+$C&AZPB`TddHT8be=VWSY+kJ)#[g#>#D!A/lnEAZL4T3
%2m,*N1$"k!]d*?bEB)Y=Whmn@?H6<6<LZV#"!/2.Lf5sX-.dIKOfqsAW8ROqbkh"DRu-&]PYX-p/k+=g;154/T6=ZaW6t%b68S"T
%BP%[IfoW&"rEprig:SKl=T,2)oqP>&M)X.e88<6P;';rB?WGF$f$9&*'VcdU#A8trar3mWf-*MVD_FT]C%_NeWjgj",t[S\+d$Nk
%@scr&E6RNM9O,q)gA;dnniA/%?\aTa^,:s4*TL</gOiKLah837Q29A_M9\XeFF)gK`VC[Pl\aO:<NF8_TR=\PbikdkOdg^K%)-jR
%GSPQ@egrXe0>Ccb!TjHBbi"<FC#9/8L.)&nU=lrL5h6-)*j.#,"#GlMDqE_fXWQP"QupUCp&=K:;n[YI*S%?M6q0BD_hl4>p4A6S
%"V!bl@_EG\+r)Q]WElC*+AOa]k.86/a3X(LWBG:5[8ITDrkiPTWU6+kXdpKYc@P7eU=)\YX=&@=5;$jo5J"=1Gdm8!]XtYAh/#9W
%?EB^LDEQ8&=BW5E<A((O\",J([[gW<Rr=l^IVCrJg\pHpbKXXskiT@6Qeib=Z>OA[/,(oF^7sH?>lU=CYdq$eBPk1a(_:&Dc1Tm3
%:"AQT4+$tnp$Uss'c_+V+$D7=dcl,A"*<jqhSY"a/q7NYrU@1bqt_aWI99ds<9q/ubg'Yo@em9MX-:k4[u[k&/,,'4RbX>)r%rT(
%gTH%g^4#tMYKYBpqX)h>7f0<9g>'3^J(e.CV5qeMPrkQ7daQV^9LJ]BrrV=cmd/E-S#pL-hQ<>[0A9VHmK^F<8&!d'(%pC$Ri>/k
%*V2P#kgn>Jo?VRSlgD7;:2/l\G1HJ94*.oXX2^'B="&3!)ZT-OEcJ^)^L#X*YYNb.13^sSbLorI?^<X[m_-_\"e>mZh`eetZ!Jss
%0(H.9o(Lc)"])79%h!9]I/D)jq=F2U[W:QQ^")99?_,F/iSADX_#;ONk8,I=j/g#o[$dm.mo>\r]j-'N<r[JFG27qU1GdK2mc_i\
%CO.sN1&&?R(3\!:(V%M_<a%"l4Y4AllRs>3Xf_f[MS!5,(uF`<g"b<7\95HtinIQW/%>,t\b4V2Wde@3G[($SAt7`S7,pJ6h#WTY
%3tH5fZ$^YRS_#aSWlNf9qp)2akhFOgVLQ2M1AA#WEArAWq*PgnEU\b01^\AVBsc?Y3u7d)q/LjNrn9?gI_kul<jod4BZ>C/#;GqD
%[f#pjp54uZErJT63e"H@?MaN`1S&-f@Mj#:CTD0B=8$pLKMUDMkY$sHYZG40RscNN4/)&e"g'/<o>16+bT,`Y0'CM$^A,-B.,;G*
%F\^i,p@n$gH^!.;b3nH<%a3`f^O99ILM='FqkFh]cjrn9_tJr$r&/?(bO">3?]S!kb$U]plY"a0kP;6d#<M51j"IQ^:o\^eoFAW9
%?Y&kR+2#\Xm[%8Lm\mg2&jR.E2q"mrT=cb'@uq`n?=@pRW-pICoXrut"KlZa,<MS/j'D82)X7k^BQ"8oKl);fh)RF.CcogRq7eg^
%_Lmh$)u1K3aFfc>Cu,-HIpTgX)a.GK(lUXS/m9:L-\NhX<R5l]Aknr`KJsjnNV+t#V6_!&N4*`u_75!lo*2CoG=S1KJKNs>mPaKO
%>rW(UgWR4nHl$.@%c5fofc4mr&5bB;\uKrT\6J^:c7cV1mX"EJ6,rk2*;?)Crj0c%T##>/h-OAIp#D(O^C4Fb_).RTQ_e8$2NRfA
%G5(rHgj5r8Uu0YqmMQS^[\4R7Xd=\(e)&F.hlj-EF7oiKq=2oe=A>n*)Sf?8bAZQ[2s[R5]d;O!et9W]TilFI^GI!B^U?ecCo-j6
%SiOB,G8nPHYoF8#fNtPl1@fWjh2dtVZ\s2"fr)GbB6j5<=QfY<ftD#.XLEYp/91RS]4["r_[J1^*LZ`Jo1/82hg`b==r55I2g:.]
%hL9Z)#=fjdhUfp8#'%,T>ek'b*U:tYNU5b)UR^4dW\6eCrJ-"1L$5sqCl,B6>s%Fi00T/Tgm(!M^EPut[G>n+?uS*P_>CON^=,+F
%ra!0JBD#$]A*3:(o.Bdgc[=F$Gd`ll/mmH:5M3Z=eN\.N15DDFX8=Di7\0f9e]h]Gm4KJ`PY`I9hfuH9<HA\rcBn1PcYkT$h&Ei4
%&[f+?Vd$d&pt'$Cq,@6S(7_Njd8uXBSqLsA]3i?1h6,7ds3)ZognHIdT?cDunJZn*`1O(J[]h@,ULc>ao<,cq4"sDn1q'[4#'Iq8
%k$XWsJQ_@4W]LbfK+ms=Yo,1oEVRL6Fi!2+e!`UR1UId^L*1&pEEV`/Z^427[SET?VkGjAG=aBtIocDY38U?t-N'At>/q*UaHQ%0
%;L_jmDe/6_rH5UVLU<o:1`Lk`LFCMr=u#4;'8OtZ&o&?a#ktA]2uu?Me[m&e#d3S[Bs_jEV_O+^N/-Qck[WR?dpM'q4DXCM))kA'
%>_O5#iWaS_%H6U39C.,T%uASbqt5c],mmO3nu)pRG2A/3f05?,p[F;]=s'QI/Si%04R$.s<]Dt3G2KCN\P%@,d+or43SMMZjJDjc
%)4;>)=V$k/+0lJJ<Vf"$!?1_/gH?NjB\-rCBk2p3ESQY+$Yf6ZaN2C7dZUh0>31=ql1ar900TF?KU.]!oq>G7I#p@7qkBD6]GDQ=
%*H5UYjbKJ-Jb2(^c$t$7IP$'05oR]\K'"Kk@.cGA1V(]Rj'-HI\&t==2ReU2hsRddMs)"$HiIi%-`W(U+-X6felo8r6VG[pYMOcG
%3oU(`rP,p1YK%^5DJd,$\)_I5F:LLq?G-'!NImBX#r2angtq2PkN43C\!>4<hE/t;R20SA[*$M1lBcn3s4<#bmsbI-oke3N\8q3q
%l`:r(&^sY(St>+s#M[S9.MjO1cT?T"DaZ\abM.qWG>ZTdlrQ#orCXeQ`bO8D!:MK6Cpj93jhY:A>SnqeTZc(3I`6P'@(D@#oo$g_
%!m=$3K-?tl,&h@#pK5M/0=r!Y=%P?CaZ7#EF"(kQ]B<>FE4]?)*GY!N&$i[0`V&T$gl&7T%q`>$RXMmFnNlmASPO*#Q'#jl0j>AM
%<=&ID4"o$mSZcq)]5qY1i9&,nA89HG\!>dEbheg*JG)7*N2,3o>\/!GQ9KJ^#9b*MbuUA+O(93F1gT]\E2gZ[mcii(!9ieB#.d$V
%nCL;0C#e?Tmk:kKYBn7F]u#NW\0oM_C$)Y*\I>+&J(';\:\Kal2`H+=B9+):Y[<aJ#j6a.iUYRN`EtRT@)XK@$3`Vi!T5eTJaDLA
%AM@*Wc`E4)f$J=0S@pa#h<=hLik2^#W`Cr=WolO2[$/aQD#]b17re-m5<ZNAhl_*`4H2FOeRSM\\c)#mk8&96B4(+GK(O:pI3hPR
%]YBYUrT`l(RcNahj0,=rF8`9(??T*<[G=<`o!Ge@2#F.NjOlKh\>P'q6HmYl2ObM$XL4D8:M>K*mE,2@1]Y"l1Oj0f1AG0#q^cN*
%ZC8MuVKJZs*'Shsq!0S6_]Oo?Ds;:sXgRP]c0!:6cghV7Y?8TONkk^!.Fg[g*TZf>pMX:ZXQJZbl0$d_na#;KCDY0LAWVZG=$lWe
%Y9%Y*4Bp&nDa*q?Qo9aZ2msfLf8u/B7S?4jL6K/@,*@72UF=g^qC.2`EF^@d`aCCLcaLuuZ:"&8eW0shoBgI#I7#@N#"6IZI05/5
%,%D:NRMQ_(ZDMt-cm$QgJ%smd]QgWHpadN#GZDnOWr@lB_53W/c9K]s>L.2lE*BC$GarB$!INR]+5(GGQb.fbe[,40fh2*+LHuGd
%Ul3#F4Qib(hP]b)cZ_Rio$;5jI`m1H$:WT9Ljd'kS_J?r1]/8X60I"#%mQ;*2&kQ4+3DG;&\`UP$C#o8Z>nMIcag*g@;Z>)TD))V
%5\!qehK*ji]==s@Q*HYQf>%`S4k:-SIe2.Q`fi?*F$%qCa/o75>rqTR_>\`Bi+Nu;O/I2nIWDc]HDqc^?s(3,HC3I_\GH7`O9=bL
%]R&TlDY`/:h:m_\P?W7gkK[JYZ5)j%9()N'r?Y?e\m0d8Mt9#sJ/S@2os<D.(GW7"+BB"VgWL+tZ`(OSo4je+5B"9Lh/8!Hn%pfO
%hf.;]q#a#uq^B/3o@pqtg<Ra:)_sl2ElkN^o'=u^>5@%@Q_<ZHAFd;*cQ:"*f@/&PL2#4'eNa$jXOl23m]5@D?=0&li:Hn?o"2$;
%3aXOYYLGf#^a<n]F(j`$4fu.7gr"SJ6Y8-)9=J(I>@(X?HLo(#pN5`Of%VR##U6O7k)GFp;L^cYPMZ3Q;&a'p/IadhN,K\4r$:DE
%dQj`a*9U2ugTulEA_6?"aE!B7Dr&L**Iau+Q#GNf!PbbM9^V@F4V!V<C_6@7lG\MXo'E'Afj!3[Z+6HC7+H<\gW%ZRF4K_%LYg7b
%T1Z;-BE"6QgE2%@h7bK6^GbO$JM-HfIAVIupAd.S(M,obMZ3EQGPSJE-T_o>H2P`<j06J:b\SA4>lT?HackN5lP9hAjr1P^B=IG9
%R8<#AXj-HiB=AuI3uS(WAL>,ak/#Zo[mrN6r'mh0=Usr_>;nLmNe?ptYL,HU=(]Z5@.QOSo)`1N^IS\^l[QUCCcni4X=c_\T0>Vf
%oBjHlqs^sdi0rCPFRd*M*;Oo)oBk4.-SkI,kBSGA4t*ONY.a[X):@6u^Q+hRq:_-fDF1r5Q6?o#>6T<)Es24e%kiO\?ds6(<cgj'
%m<*Hq5.=_+Q.,[)`r4Y9h>g$Zs-BeT4gkTXk4MF[B9s]2JQgZlJE^3\5_hFIQodBEJj$''<?n<Le,&^ul(.a3(RrZRTA-o_H8?Ro
%[m%m\oD9@EHC*MMHX_0?8D,r#0t?G]A^r;\qq]l0B%WFd\YkMW"JBu6%XW)ODa1VGES'eT4/HFD5lX/gnLbVoHq$JtZeVr#__@5K
%@-PC<2qO*V=aKp%Z_qG1Yf<;?DJhRSgkl`@dZ37hd_j-qC9<a3cJpk7G/dj:nJYPb*]"8uU8<=a)b7/"l=PLS[U$7U0_K2WIa!8s
%bIE<\o5G3.pG;Kdg!UVa_!\u,Xr:dVPUc'JmH(V[ZM!GLNC5&HKDfgK<tR^]\(B>!c:>:$Aj"2M#1WLDD&;(gmG-j1`])FnV2gG)
%_q=VRrFUc#O%SM9Ie<QUo>h,e)#BK!\=9tLdZB!XK96K75mLQ5_:n2-7Pf]TlDo1*m(Sdf<#T-?m/.-d77?t9p8PK?0<3pQO:M;P
%W>#DmC#$R5O-Vf)n$[9fHf%FfJ\(3$bO1KO1sOkDi_ASL=?8C0q/,TY=hb13mFf<.RFCJ7e[p%A])V&;<MUJ6i$Im]m5,hC:,>;c
%=?kYKhRg6*Hh_l/=MMm0JKA1RL8je/\>`o*E;&>:NCs2!<'fspmI4il6sBSuokN7]63:cpEU/87AX(7s&ZS>oYOB4r$g-!Wnu];/
%d</Hmr(6"D!t<YXCqB)\[klmi<Z;/*X8/UTX)GK>2q?K*Y]dJ_:`nJR:AsrlQ./IdcqfNb0C.t8][OlG6p_I^rU@Df%$\Q=[XQd6
%Rf/2TrZLqhnjOC*-Hnb/a#Dg="D.KbTAMa9A3]E#Pt%OR6^BIo"Bl*b!Jc[E:f92XAe%m#iG?d]e9[u8*8N5jDOtCOeauR8'qIN6
%"8Pn(ZIWTdjLfp4l)j,4fm:)LnZd0L9sC+V)m@N4\JHnWDME/orm+D:b89SaDm"S9!ue09H<E%)^(l4`J%,V9I+H@Y<:&WdQ<\[D
%ft.4OB(!WZ'<qL;[LpPc<>*+H#P[GX;a\%MiN94P\T?N9\ZsTYX6_tJp0\i`U^,fJ)u63NA]Uo=2Po&in?eM6*;arH+)SSJF-MU`
%/,?R6*gZ(1W2_doIpVMg7+Y&-imF2lGd*gBXQi;OhgK`NK<o9)]Db%_o'5g\-i`:,k5mG!mZI%H>$F"mkV/_9Y0j"DHm326=-)>4
%h^i>RVrt1Dch._Bfr1'5N9"jJN;FC_g<Uel_tSA*`P(\]IhbX=c5aN;O1O*/?Z(>K"lQH%4`4$MkqC("ZPm!tUM[YY6l`25?eKcF
%8%AldLW,7<pFifiDe00o]3@a<Lh]:?l)NQ@#:->,2X"8r@V5)J1Q8r;^W2m!HIh`b-HM)&j*K[orY8/_LYH2)jL>)6H2I3FM`8Fu
%<o:sis5L]EqtO0Yc#3Na.gODXDm.d%Mp?`4qssabZ<Q(/]hAWW^Dm&-kQ3F/pAh74J(S(Un""*n@rjMZ!p.`YkF&)Ml[eZp7H)?5
%Yb7>uqV';C-O`LjJFT-%e$[@h\PM>][j(#O%RfGDaIqfuA!jI//iHA'\XgmoEM"/B)6a(OQ!\j"p$cek5HN?Z>L;CrG=!?J7N9n7
%5!@W.]54ccl49ge4=cPl><,VGpuHlI9A7lf^&FG-mD>3n/",+T)uKFa9:lV<MSF2XDk(Ot"ffC75-OGA4ZdW6hRtoQBS*n\Ndu)c
%2kFgK+@c=u50WLteBdTbh>3?aCWZ9GQFC3Rq`oSQ.mQ`tXmP-.B/%i)]8bSES*c9GrUXO+Ug\,dd&3N8S2n//[W.T4pUH]Bf:-!2
%UE],r$/</bb84fqmSTPPoiE)l%aeM'+ArI_$WLa-NdR_5kXf\GXAL%fBg(Tf:?8h"^3B/9i(JE!!oqVJCOL<ZNo*%MjeY@.AY`Qq
%KeFpms(Ei#)g>*Xr+"uu:qX`(j`hYY[mmo_R:\PKQ'4-g\^Xf_k6'RDm0(.J'@uE`eXk\,M=a^+]>&>3R>-##1@g+*Aa1U*+W\:\
%R.f#SMQUN+5!G]So,lS2VprKu7-GMN.a/t5@orY<a?PW7J#I6tJ,Z\lH%D*$[.d/1CMgAS-f!L@In]5t:V<qQqYs`@HYrHLX+S$B
%J%1O%(pqWakb^Xa^[eFpL3a8/:U8*Rf"]D>%O^CS:.k7C2m%?`DDr&op,pC_[MkUrUeMM7cop8WCV&XpRr6'TSs@`P9i&BUm\YlG
%T>'Qc/]WIG^1!p^=7c54caBIg[F:S>_dB#$Uj^Rp?l[pRYAK'/p09CjlTS(#*IIi#g@Vb+#\IbaT(X/EJ2YH'&Tqd92)FXa0I2&V
%c'kb[f^+B!4]o;s9ffAr_IW^dYaO#%j'/C8HjlYc-7h`tc*V36^;)4?h8QN&\D^QBk,'_+Za%bM4#S)#(+gQhZ%4Vp1I,J4\6C"j
%#)ns*%)]pefjREY2rJb1gb@![AHQ>IDn6>G)?r+SBu@E.gd)=(bOi%K!;#_SHkY(>iJ87cQ"Kgh[1.n"GhCKb.:Gr^mj%89`Yo&_
%=>t@5%hclJaMXl!SiCO*+%E%RSsa*J7';5^']Z(-)E$E*^C9nSp,nc`:>S^W55)ABG8kc.J.#)S97WLG!#3Isbd;0F/3<-tmI6M]
%L(>B:(2bkn#6A_0YX^ANU4Hsm!Pg]6VIfpF+?19UODc(!DEB\m=S0-.4(C=]fd>XbWB5o@3j-rO-;3<eAhX_Sj<je"PJ`eKJ-re]
%dt$7^%(9uF"PaFgQJpOESI(sJVE);4a+gqm9PcW9%O)^*JcU?5?/XXc6?#sdi?0tn116%8CVr`]QJk5^Xd2E=!ZatX`Il_E>lgSq
%[-gaLJ.!3om(*\=jUc_%aC\j%*TjWsJ@_O<8E3pm*g,oe28s&^i@)G'!W!BY=+::BnSajj0BIAFN-`J\7b47p;Zu$PY?AfQ4jV$D
%X:YIBi+I!G\,g3qG9(FN?QF[r46!FI6t%>"QsQ5["HLAeW\on+4JHrM)A`FOD9(6MGSf=;5rBbt`.'sf-?.UHc.!:P1jn!.p)&2t
%6n(G&bt<>mhhG_C(XnJj+So3EQ&$pj5!DO-ST"bZcLLBD>ego;-8IFWS1"r/)-?0=9XOj8S<k[<DJ=-IYTsUtMg5@__58%T+cq:k
%&j#!W&=:p='0=$&"1%5.negRUS.><(TXa7FC3?3]p`)"=j:+kQQnP,2&);s1aRF;A`rY$(S305Qka4p&RLL+:oA%7a/`I"e4j[Xe
%p'7r!aM4Cm_"(O1h6:t'8-326Bue-Of5Y_:IoC?Snq5<Zc(BL\WMTKkGBei"j9gj?+-PUtFT-Qe_U8e+JlhGiEm2DG^Of[sfUp,8
%q"WJ1$hsH50FZ;"Vf<,0:5ib.:26`rJ_a\:iFt*R4m7i3lQVV52JnUk+Ac@iAVQ![D%`UEc-uq%Pq?jE6f;`prRg7:6AqMYpnS1(
%1LM;R%cH*-6UQ1pL:O\U2@;bkE1"(%d3C2Jk@UP15o]&m3iE_WEtkf12?C6J[O#:5/@87I"+GbkL>f+kaT9lu7oV"cn6@4I:rUm)
%.T'EE>Oe('*F2Q\49mdtUHLs9EAX+&:kT>3!NH9N8Yu^":UBP+a!!L@(5"k<<R*H2C"#14"P>((5N\@kQJC!V\1#rl^cu913iFd1
%lh]B^a5A.Ml*=s+1sc:8*7.ARcc/D*Q34E)G61`-"4;fdf,W:"FMPTXb+[MLQ%K-H&SYXBAK\n;4W)UdF`+PIF4@3a-iBKY%J<7b
%ZPZ<*dG5W+OjmN(7o^"`<5;[E=LY0Q(7JeYCbo>&^J2-QLGV,%hh\?DNs^PoqE;4mYsB=K>,"Xj*RnNDZpR8g1i^ls6,>CGW`cAY
%'_`iSf`Ac&gJ$b87F<M#=$^C$NlT:!TT2GZZK<V.pM_$5FPqG[,CMas&/(;3OZI'[7_27;^8Qq)7$rC$1[)rp78)!MKaspG'CuHp
%X_XNID)Qruo+OcmV8B)IKZB`U'2)qa#;%>*8k]7mD5TZ46^+?UZR]8>33lAQeO=5[>rj6EdS1bq(???("[8r0Q=u(4mVu+^&Hq^Q
%,b_UJk`4]n)>OaL&8Yf"^f/:K<$1G/:H/S$lX['4?^gGpN8.mW_8]]^JSh3<qHeDa*ZBo(Qu^-lAqAIL2DA9Qg\H6]giOeR7qinb
%hE7>G!:g943DXa#BEQ[LWC-W[%6..M>/:a^^'WRgA%$n'--t)YF8OTG/&cfa7kDPX$V&6k>>l:1$d1<9=[U2"D2c1iR'q$7BS>r"
%6(?^W7m1YmAnV`#6@(t&JN+5]Mo0BSEHL%if/H$*(<Q`6Ati/>U4\G(Yb>nh&'7p#%7:@YjU:f/$eg]&AFT.20\IX;P)3=*itS.1
%.7uL_I0NB5`B1N]biR[KC>`/_3rkbokG"?_5+04-m^gFDEo(FS"1,l)2O!51U3bFk"r=.9X/:-DMbMm#YCUCD7u(672W7G6UtTin
%+XtY&0GO\S0X\kN)6@P-:QZA_m&)#9fi%C,(^"sSLpF:B[hkJQp23,7=]j0c)kkcuXX;HS+mCLa"?AuF%CX'Xj`<G#!!6+-jc'7W
%%?3_1YC2%9En-SOSPI=G%'hW@5BnEuV&UsEVJEt2PGLbj3d0+8B]?;*@tBAl3Xtg&2"I`tb<O+%e-RJK.Y,LkU=Z&A9dbP;##MD2
%5)9t_R4OB5;cfH:"iR^"YCeSt^)TKJ4Z#,B.F6)+W3%H]Z$q5$bTm=<cL)^k'L#:e$Q-'"65tWK11_.D"*;jq;/V)AOrK:4*8luL
%3tKJkjb0^(B,M*BO/SJfq03sb&BI;W_UQ#2<jG&q(cL,6X4RhI&oDl2,O^Z:_rq+47s%mf$LH'bD*'k'0K)HC+J!`L52HVh<$R8k
%imtuSq5,AdT#[uN"*IpT3H,q`pS)Muo#6e_\f,==E*I/,mZFsd"etFg.@o!eS/N[X3Ms%*YXjfYnu&Y<<T;Ec3@]fU#QtZdG.MKO
%M+f+C7MjZUh0Lq$7nj,@%@B!3GSCAH,;NEGH@.%_+8pttdQrD13+PWqa?Rc_M5qbA)ls&%Aj8\i&:k;e+p0hr'9)qn'NBoJJE&&;
%IRm(HeG0oZ9d]a?H5"3aB.8j)rtUut!IgX*aL(jK\s)T4T(6QF?_KV$i)ck<#5AAu'+FYM$5<V<7YB2N+Vi#G=(T09i%d<Qh*%En
%/-Spm$'R6a?loWr;Vsp8Pt=H=`WdJe0kC&XPe]`4loTo>>j7.6(@DN!MeY&ENVoi3%1@:"+(MR6-Z/rL`1H4/Ae&C>YZ#@=Bg=)B
%]i:ua(@9L$^fRn8TZr^BdnGPA#]cVRap8(7$]I*<?"+`B(_)EZ;tj"0s-'VeYQ8i39jFVDR!>c/Nd7u\&PI@he=NUu9W`7XjDrTU
%g+<L:W/X"03o<3Eoe8R[lU4uE`rsF.Cu.U<EY40H5hNm,fFN]E[5"K9.GGAt`Xm&;>%#uF[u7*qFX.D0g)SZ_!PKKH*-.jp<caI#
%JsPhu#EeqNY(Uhg%BKXP+ieO/d2\efZ>[eFcbXQEAk8:WrXK8MOW+A'G)LuBjPKMH;:%t9]:h%:d<);P?\Bb*2/,46am9H`nX*Wk
%4j_G-NA)=R87jSE^n5T1W!9$U&ig7#oQ%?VTKAVU7l&G9,X/0k*ZH6_?8W0%mg(,ViF.kn2rD!-OU]"GcD?=D&;m6VJA=;qPQnI#
%(Uo)!ed`NhLc3=6/2kO#[!;sHd(<bLH4O6GQuF,%'kibH$OYq@[\.E!OHD_n0f9(",'HGc(u%?5'sgYYK7=P')mR<iV'NT$LcGIH
%l>31DhMoBK#ru@**`(8%@>UZJ/TD*_Y\&MM-t"p;4GGa]H%/L);WD^A1i'th@@nP3TYaL/&K&NAZ!_D?9%'EC-9Grs!blX:;7"5a
%No"mtr@bBs6Wm1R%7P*nTS1WErqlkcDQOiuVms5`C_[g<Rkbtm7n3sF'<t\LX@1mS5AZCCiC/*Kc=IdhkXd,3L[7IHaL9B#.cQcM
%Ai+d=$:GAaqOQ<6L7Tb_(RGI(m]1bgpe5c4YU841LZ=gc?apUVqVmUL@n'Ji)/+'^akFt/WdTL"ZS<JiA"=*VJcQ6B`J,V^[`rgI
%\5Ce(^oDqoaTcsWfSQO`;q\YD/g(527>o0_"3X!Ir[p:.'KP*-/ogd);:U%:71AnBp<9Fib+.iSVh[0#+e%P6=I/+82M:![(4"]6
%C-I`c%_I07qamJkEEiM"l\t6sl@9Mc4tluTl9quspabs&Qr1cs4:JB]9X(tJ\hH7C.G:(tiDH9&;BTb<q*<DORk=9+P=ul3<6^0&
%IJ.(Gkkd5J3n"f[,tLE9L)MV7j"MmV:pHeK<%Ide:u@3N;pC'2)0X5Vk+u`%`c,)Z+@TOJG%-s#YK'TE9(ekA_IcIH?s+4#WgXGt
%5*oNsTIrZP"YiE/&;FAp-+jbp818n:fq`?e^8c:R_*QUnkQs1^QcXqpa`Q_aU_k3X@F0E5CGsYY/CEC]GW%M1`snZI?K/ucg#A3T
%Q<%_?2*:Z]A2]o+(-C'!HI$)WP&E`>T#3Bul!X2cVthHLd$^7<f;"iW<*Y7$dAen]8BW>U)*&c>dj5f@@*l0^g/Hr<^hk*_QF(H=
%*Q-se1XXgU93r194q3cBbVl/+j$C#\%CdM5C2p#/GMQ+X^=T7N:p;f`3aiRWZ$aF6M'^ZBP;AUc:.k0g2-`mRkG47jS2XJPoaNc`
%?IA&%9!!!g=K+_V-'_]?CWRi'3,bnj_B0E60C#',Jq`g98hh56W>q\^8h.roo>X<W)C_XJUVf\PdDB$rV&G>X:p/2C-'W6)XKg35
%7S5/fBZH9.\8^;,.7Z`OP]O3C8L7Y%D61+>Tp!MZg9RLe:M(UX(WNPB32oCu8h0RKk7^J%nZP,OqU(1`b!.r'U_7Xjl[KRjUNnBk
%?Upo#,R=2'c[,lfgD"\I]ID"(,n%jL`7JC)P,C[m&OY_L-8P0Ao9oPk(l]f%4+:^]\u3`snn=4!Aubs9Yp>IPf._,rnneu>3$Rd;
%ie,:1=[K/2PST3A06.k;eglFTA![/.f6\'K0??ZM=p/;Wa:eReQi&2KN6#QtD@d2P0Y%r.:Lu4f[L9\=3AlMh*r#m8b.=09b)%et
%mtH-Yije\-!<T\D:QeTX/4l\8*');DdP/h)6A"$3QGbtL+5=kj.l8_gZk85DfnTc`6Y)q6X<m%g@B!Y?BlI=JU8sGNA$`e+R$/ad
%'jfMhVeJ1*3"FuZP[XnJ),hB2.#C(#Kh8o;6H3M9BoeL0a'4.`hO)h$Ve@U$O?21,6b:_AnZ0UE*bY*c9)]8J;:M/`Js*)=m4F6M
%!3c]4dYom[LA^aup,73sfteDH*?=aaGiS]U@7MIQcfYZ<_ElgMn"UCgE`W+bM+('IrafI;a(0tn^o64>/t[+?FE"U_LnJgQ1M;)/
%)It]1;h[V1dOA,#6&=GR@tn;37oI\BbgHQ)/2X5EYn/ks:5NmPfVU8nKe;!oD&aq=+VqEA4D%PMT<::n8A(2RUV'b]c&h(@5@Di+
%U+)9)W4Z;sC'@L>FNVEs6SFWT2[(1jY6;(n$')iA$!6&T4SJFLM0fY;=$IsOKPcO,9>q;XqNru.bU7nF'.-Di(pJeVZ8Y#TPpM(X
%'d"j&F6$ZjkrbV8FOO^)]oI!a\5=J7-;!Vo<!\IVTNI\/38.T(QpQ,2`Q988[6(s@0G`IGM&Z-"9"$*)Rf)At;h?8,pMaY8:FNMm
%b&I*d1Cam5nM5*a#s,;QqoNro0MJ!s%\-ut\g-oBR-l$K4@M2KK74nu?5'Q'UQXV_cI6l8>$q"d9hR+QoU]]/m6o6@E7E8''QWc9
%blt8dWGn!E`F&tLW:asZVQaOj,J(L>UL!sRAp;D3=Ie)M'jm88LX?+s\#ue_TG5O\qC^VSMqO-:afKIaL+Xm>+r;P!o\5:q*>0]q
%=\G^*LG1GT_[O.MR"M0R6;#%FVW.)N,?UFi[WkdlNO%.9/nM(]aFGMq.+*09(4[iZPR0k3ReThd#8Mb<".YPoHM/+-*V&MD[Ca4d
%<H;hrG;0u*@liTB`f(dbYc(QXqM2Pt2!#\M<0jkA2re^IDCVW]F,>Ht(Cqg]?"'ZZDH$e@@>*BCYi\=E@>ZBf$-Q2?67%JC3?.>V
%E^e0'%0/L54(iNZ6"ja<)D*k>3<7F>kL(@ZM@=JA'uPo`=ENj#0IOY6^0HU'M&$EA";C!.``/%0oSF;[bQnB?.C8h"_&$].m36Rs
%;'VW:2kj:S9-FI$DU^0Hg;<JVk"H83+D?)ZnrbR<EhVpc@8;J%1--?O"2g(,gG+=1BRqt<D89,"fAYu`Q69u?+VX.4?C750VkKRa
%.iNE&%R4WI$#q:C?!C7G'cGfR3C!sV$$&kJ+g!AhekOX).CQ6t2FlPqi?>g*'CmgfR3r)529KSuZ]"Bc@Ap?gkHVJp>u!u@E4g,0
%qpRdl8:N6_Gg/tNLIP!>C`.kJ:gUQ1Zo>n"N)T9P-r&1Qn1$".2M"f,n]DIP]pM++]55>u43T\XZr#YX/18^e`D%TuPI$Ti'9UKY
%iW%s^@-q#s/3RUlEGmgOg77%nb-]#W5RG/3MqdH9^`=HO)KQ/!:7k[lNWRL(M)1YX&2WNpQT`,\0`KA>frel)0GJcNM>/l59s@S0
%1uFQ``^Mgp#Rnr2QE7esE".ggmbPp:DK3jH&YpTE*\fue=%EE[?&TLsO!"ngMIFW.3=9O+8,^]eO3'9?lbEK,D'"8e;>NP8;oeZ*
%*@?A7$4pNI[Y28=QJ=j*]J9!S`saur]uMB]\LF5Y]8.8_l"lC%`]2p0X^B?UI3$0iaAoBP'>R8onM*#gDr,h5bNFONLEn$/i>_'b
%K9)n3bJ"\4bJB,3.^]KREk:7*R4B'O2)++$[iY"WY]R3G^;e9Q%PMVn,/K-7-sr(R=gab2";G<Y'!L6kYaA:;n(&GBX[?`\/iZY.
%"%r6/jDG,Ogus#o9$l7\,X;@-Yq>L/d=%=j0ups&k^AYA)OApu^`ZCi_&,sq)l2hV\Vq+V;^H>GN\]l^6X?N1*;)7/53<3@lImR:
%K#%G984jnC+$p#a72VZe3Z$r3Z.i0^n+c#V`Dp@O*V\t@@0.>3brU3;Lp)V?NWh(`ig!Q#cTn7i.a@8hDrfhf+hBoY1[8o8I3VES
%1YckcL1+h*Ek3ULYRRnUj\h4pC$c$,"sI-UEQ!<b)g'lI:GG+968[d!jCPCg."&pt#SCus;-#0p"'*L:F^oCthL.*HaB'<>l>PO-
%]H^56-@Ch.'+gCg:DE"`8;-o"@\nErZ-3ps_CSWrb6A`bLOs;Lb].R7jf"YM]#47\H.AVC`:bJd'bbOHT:*P%6A9A&@HP9E`]45n
%rQSPb"'ur-T[`$d14b!&@JFT3X`M^;&oY_iKm*b29;(dkaGe@ZB&''>hL31Ofk-IDGWChNNKF31HqPYUPSbs'^i?uc@d'iO**'Yt
%Y*ibnp'pkf2r@I\Y(<T<GfroCEkR!@U/J#&JQE=LItWk:_2"\&_mgOeZC^X9oSkp"h00Qr@o<H_*40UBJ?ZB76q7[jN"+ZDQSWHm
%RhpmWK%Mr4%%^T#i0_9)o3IX-N0PXOJdhh@M2)F*j@"P!">$,42;;S'&eL]TK4ma,%$am.1[;J/hc#f;1s_%q5/qHL^4RT#*\))=
%EA7YoG;-peQgLh(VZo2>a\=rYk\o=+bXCCd'Qift'EZ;(J'%oA%:,,p^cYIqV_*lqWW\'[b,KnCbh3:WK8t<M!M+*$m8J9;?F(lu
%r&Q6AjACRf].3Kk`53t_:@;Fsd4nbAeZSb'r-eJA#"-72l<WZ#5FcUD`HYk15+)*Xl?'gl[j6sh%P;,4OrOA6jbC7E/FrU6I*khn
%gEJcc``03H]\Z=s=`='LGs:=&;@p[B68uK5W2^O6Ra&dh#g\G&*#s%HrHUgI9&u]IW$)Y;^sZcrYo8qsTK5LX%^)ga2'V;'$U#n$
%T`iN2,+ZtW)0b:n2*&etM%<EC#B:$c##bO(;S=Ac$20Gp>!nXU>]CQUD,K'o*+hO"`)V6p<#E`T(3(0i,rKgV7I%_./O-[a;`pG3
%R?nUa9Rlmb:iV#]^s^AgK%kK6d#'MEO=tXN$)EV/`Wu&t^0H;a5OmN:d"#BU^obN@*R]kFJfj2m(>#X_//j03J2(rZ_?hahE6UAC
%>BQ'm:(#S#AMBnadd$T?RN598.2rsf`d;Q#Wm?sbWu,spM=3HF2[Y2Q[bT'">B(W.e1=CI+UGR,eKb)F"lKXZU)8M3nQSJjY``lB
%%e;.)7YS/]D&i9IKrlS5Ipqs.na9V2esk0&Yf'/0N)*19Q/Wg"@ZH\IiX`RN9(!<ah5.`V</Q<U0a<-1bH4T]=/aHAXXFseb[cK7
%c#@i*%G;*/`+32Q-3_hTikf/W*KspA.k8c5_lT!d's1oG8]pcs#p-(2J5m7W:.+DL!t.'+ePsYd_+jd>a]F^M.UZ[33Ne;s'HGD=
%-;eJM:7f?-4lqZW4t`4[rG\"Ba8Up_;,s3<k=F_rk(n\>r%OP.DO4NjeY5uV'sN$_(6?oWHrXt-'jE/*e1`Pl-6:1Y\5j<A"E92h
%AuE@Y7AKKS2V,=%aIse-PV_P2*VYU3joa89L*!A5b#96kDGsl,kn"#l&!P1Fq@Td!$J`eK=^<XU`/L_Y$U_^o0<Wf0bu8aB,H'Kn
%0fGC0WSLVn#a/an\S.c^`f1n6!&tUs`_7*ST5Y-f(+rd*_GMH2U69'$PY:$N!&Sh?;2G"-7a.N68Ciob1M5E=.Kd`IFZ+gqLQ?5:
%_SGBYQb5)R0M2pbR*SgB8d@jdo:^Ma]POMXFQ6$*`_gVG_W.HeE7%XM.`=u%#?cEn*go5GD/e!U83>[!+LaI'\>B*8SI'?ObQm<H
%kI@.=b*Tr/"hK%I=c+uli2CBSjQ(\s)9]ceSfVOZ>>BF$Rc4I9e>/r:697VX6S;I#>o/F"Bap"^eAsm4f$XsgH2N:e$h6*%Xc%=8
%Y*$*oCN2@JK,8K3bQ4P?;`OZd`5C\#\ZKkROLRSHXVs+V3ig7m;\\Z:CdZ>MW(Q!;o&hE0<=[WC[!u2d)\O,,+^r1i!*E3F1M5-6
%bI/Fq$*G$+6Sj@9-S;le-"XQa8:\t4Cg%2AT=Mm-(uU_>'kDA_D9p$17kNBt)<b@9aW?l8bj@)h<0^jr82&._LQ84>d*4uf5%M79
%\on*ZdGnD80nYKiZj28_?Rr(q78/,OZA#ZAQ+@hrb`Eq,9aQc`_Q(lK'g`%X!Zml7brJ4FUQ/G7Y\i,h^22;L4A)_F#A;,?d=#\j
%^bNe78nO6NNQ$-cQoT]I$Z2p<5fo9h5,EJIEN`NJ";-j)Q$#_3>[h\T(LE;MU9/1Jilsb(7&%gWA7PM6PbF$TFj/%Kd_R@*M:^0e
%5`V0Lm/<djA<q.q=[L03F/_V=Qo_5K3+dRN?]Q(HXK1c1`0'/VPZ`jcET4U4lMXW1f2A%WMcn\C>so1(e)M,C14%$n'fW-jor*6l
%.=kT8[<mtM=1=9Qn>TG!VP7iQWKpM?>uumV*[g\[2F!idj`M)mWoh3P4.Fj\MJc!QE7R%p7N@JTCmh)'l;C+8]B%%+7<U0XCo%>k
%<)ZZAA6+S)^A,iRp/9(p.WEbR79Zn:7;?ol%*[.R!Kq`t&a1YrBsNAdWqf=mo!d!J<'F82Q/XL"X7N"Lb?XKV$TacNEf%1pF]'j^
%k+Lg/Jc*5ZeU/Jm`(>o-Q;G-AI'mY;7-'B,NTLWgI%^WC/R9il77V-.(b1=Z<)%#+nkGK3mO;1+=&OHE0"]/B8ms:q06Lu[e12t\
%K=,mtqTn)uC-F#H\W-U.d-+?sBrXh$;<8Y&B&]>(B_.U3CR#7]Y`t"_1cC,Rc:'31\T4a(X!:fl,3\:n^[-K*[Dsf79L&pRE5aV*
%[Ep>BQ0<1+<96Kd*(W!->fjQWAbWa"Z%a.$(==942)b!?dT?7!U^HX_F1`7TnX[)(;:U'Lkj_rVWdN-,K6VHhDKjNTFZ/aQU9l+2
%/<7omI5I/2jS"V3-F$O@(pn.leQXk3/mG#!8L-\SV<98b0/lSN-ZV&sdt4RA#1:HKW+nM#3VkE]S\0h:T<>>\6r(V+pdPWUbRmm6
%J]S?ZmsM[a*B.`spf84!1ba$g[h='D,C%V'@ptKp`QiN+<%6NHrH1$ed+h#9(H8:]%Vm]'+m*O0*'hu8Psd@0m_RWnhl!AFO%NV(
%^"?cb%bWA_I#](Ec0)(]IUoQ(:82*fh^:^-9r:p7dBqRM:1>r'.<^H2$#J3c`JloLJld6nhb;;.;_AbT.A*V<+;YeOPS;f:5W7.!
%PY/2_`)^=b>V)1V\@WBPigR6E%^2naWZ(M-.3*-JEn+b5d@@9YQ6uSPQ3_W0S?L62J[$VUPRRoa1ud\_OjR*M)83+LfK`G[MLfm=
%^jbF"-53"`P"1se?>)*to0SXdSJR_AJ1*%97<>Ea].IHN.Q(^dbL3qh`&+j[:7K[bDImL5^ZZ[=ePr?*Of/^^2.Nb&#Ku"mNXX!_
%\f@a0/d$iN_&]U9k&Vd'O,"L`m&%l]>g(c>;-Toa,]#On_sBAHs"^Bl^.o*b5m4IVI0j+W0PEheL<;(%@LpoM2LKC?SP)XHVk3)q
%[4E6DQOD:QQLcr3`2Ot!NVkZI<$i+YOSAsC"M;RYV49_T4,,XEQYh*)VI'%KB$_2J:R\O,2`)Df-XE'SEH2(R#IP@@GIY;_EeT.1
%_?Z819(Xl9fgWrslT2Tkga;o#G;+JRe%rV=pokAfUOSl)*@W*<F:=<9_jqhdbqp[a*00H.Fk,t9/P!^)FgOupePKc*D%&'gJU;F+
%6OO6/WoAl#m+&]S2Pk@P%f8$/+\T#B@GsYASNe/7A?$O>DAq,ndc_/Um[&HTD%W"moYN]<A6&.HTpjs**1J,17Ao;$N^tHG%KgRX
%R<5,<3Kbc_pDm5Z%";qZY-7tFU<9K-&O]6e"Ha"-L+2k:n`CE\KoXrRrJlonf6)3u.mmc4>W1A+J"`R8C5\Z_7s6W\9IGM^[ZDS-
%GNmoe1*3\N[<^iH+W,&FejpOqn]_0.m6kFG<;dp)95%k<g%(G^C.8cf42eYiP2DVMCV!]$iW/s0e"_E<P/jGMhrEHBW]iSCpHVfm
%fZ=<D9k!oO?=mW1F!N]-^;`ZEFBtK<?u$.ZagLp>$BLBITFD"%Y)k[NC>NND6P'i-%2tZAOB+0)J(RYd5DJWDNUR5L5cN<lDT,uf
%Xq,0&bZVudkUCiV5st@*Wj%&(=Ra'dQ:#j16hc_^a1Zo_iWX=]4etQ7!!^^33HRhc22'*a0hgE2fEH!3V']lkpVqS0hG4gM0'[(O
%jcJf?e$X'U)Vm=5h%`X=$.(GY]]_chbSh_Vb!f+>iQH5go*S?oi3NV]e:Wfck_=%SXP3fpK=CRL$medXN#djCjp(%*nSB@3>C]*E
%d[1J*\80#l&?.(Fm[uISGuFW$X::1@(JJ=3!K!(I603[:=XGq&ntuJ/75j?ak,Mmc^c!/92r79&qYJ9;I9YP1crcgs<j875HP!-s
%1N15(&aG6BX*ALkM`_P`-I!Gms$9pRiV2Q>,,Blh0`fJ,jET?2$ObK"1GKW5,:Cq\1-n%2NCferjHm.5;*ZER2(!\(@N5TK0!ec(
%2=_[f84s@&7L[2d$XMO]N[),_eQ-n!kdGFr;bDbaTPGC7*tsc*ZU*TMK76?`+5$CU-j0eM'cMYlIt^Mao3\4**8jmH"i('P>/BY@
%;[[_C82&Wi(FY"rp/bp^0^BORL9`SS6o<`\%R5%`NP4bilf#IFA5K%MAP(]&(S;,4HG$gBC*K79Ap@4?8<Z,1UdJ9K5@eJaCF*T>
%;,NkLm0oKgW+ul)#3e:VWjE\5`+hj],Ut[*I/Ila-5VmtNBpEAr*As`'0bHDl7OlPBlU1Y!/[+kbeRXB&au</KS:q$UMUF6Z):DC
%n;mnqojj#be-F4A@64ndjNqC8/hC&mPq#UM<@:\T^n@BbG3,R$Qj&Ed6Fsp,4(tn$<>C3cF*1EUaQ1<,o@?aXP"O+k=-qR7BNiaj
%9A!c8Hr*jGoUTSL3'\])7Ud\d1N8^?,qIs/mgL2?@EhcedAt*ncaMrXl)>'plH3Q9USV4d#hr$IQU0l0`pY[LB(6hI]"EMN3<-MI
%_n0]mm&@%KJmD;7#+g[Mmc^FQq&q/M?[Up'@g*X&:K<@j2U,jSVA<Sm-9WS)mT"`(/nY);")']g"f8O.+TO6Lfqs9*ME-"@au+<Q
%5q0.%eT[+M*lZF?hI^s3[Q-DEE3XkDP`;EZ9JUP5!+stKAcZCr&A:6<-iS-VmUi^eBQKPI^$Xfg,mJNoG[`S[Z72>ro><\1hI7G1
%8lR%2-j@kLVjCkB2Tssnq8Wo:K,IBo(n5!?&qK&s+Yt)u,X">Dk.8G;,1Xc?KX+Dj,F8hPcV.?@Yg%,M)3p'[I[A1/C;ki+p1;2o
%@*B2AUGj75b=mQE>m)=b#tNi1,^t2Sd&#I%3i>YKC)a>pe#@I=;Fl["[HWXF=RAef05+2P]U1<a7`N\;AcV'1$.@KXNGjD&JA.1J
%a:db9*Z&aFOfo-k4]O3UHtreN.VU6N;%<*6\-co^F<WF])O)7j(jb44F^jJT07XOEmg23upf3?S1`LgGL=3mea<s;N(E(QU=7n6n
%gF<]iM.WiakAGt3ifFrEO03QdHeduJ#1(1'k&f_sFA7V.F$pJ2k:9]IpM<,WIU7l78$^`LCd3h.0N4HkU4p",T[d'?(3LQG`>CE2
%QiTUuc=A8?OuJT_EtrIXC1B8b:2HCWBC`CN"6U._G"=aT@kZn5`^E=/-'=E:)UoGlad&cf#H&Y"Gk>AQk7QAefcg,Ea-BA09OXbd
%4/"GOH&?&b%_h4>YW?F<4&OYM)@o]F-smZInB$rOjrls6*&IV^!MhY\.*Z+_[k4Z//?XBHQZ*k3T?K4WbtVEi(&FG'c)-A)8@@(s
%V@VPCpM?O('IOA.[<,S_!"U\ig^q%h;o3?s'jF)XK92`ReV[eg[dqG4X'.-`;ci'?eg(Yqc?7BuCi,Hk6.$WoL3=E])-F\A+g`rV
%^bE\R2*F6'1uU$@c]MTD"t]#H2729nER%^SGYYG9HQKraM,!!\nKZ8DML"eTko+2Sa3?bZi)"Lc4Jbr6+b:+H$+D%dkL628(7r1O
%XNHT#pe(['T!+l!TYrkO[.jMQEJ4Vi:!]+]AHjqErKtDGQ/<Bj;0^pC0enYk4\J>Q7c>Hr+lF$7Su@t-eIWO]b;UH?N@c>HA5RSf
%.\&q03(b)Fs1"1i<us,(Z83@Y0c<GZ.J#I&:g>)(mT_]`'FE#JHQ!GY`M%j,*&UHpNa*CXAM,8F2%C2:bs-)!%#.""8dXlM#OBRu
%AC+^9F\uO#foWe>Y>"4sZ?(b;+0#QtetYUK6<D$*Wp1iiCaB"7D@3!eWrD6Q5\G]%@40@A`f$G28APEf<%=mlejMoq3i=\Ddhc.u
%\br$890cR`6rR%`@'#`4OBSAO&lGUPl)^U.6T8TX@tp'dEMr:Rm^8q6#uW'B>8!H_Z&oA<p)Xrq;\7r*)E+Nfjb7o+]M7SC]PR7k
%77<V4^bqF.K*rMPKP74O_,,hTZ'%Y23GaW..dmE(#^V^qAp1@PE<64-adD#*=q##pYQFu7-'Sb"UqA^jUU#Hm"VS.lEC8r0Xp=eN
%;1^N_C?bp2jWHo2`o^)X1*C/L@opj\*;2V\]G7S$?4B4j<=0["T7ab?re\e^i:LN6%cdF[Cq@VT-WpZ=b/K&hDL1gf=fCS0arkhk
%&OFs/-2eW9Zq7Fr$o'0":<5_`L/$Q9*SY/h#,`P!I!G1:N&]Nh97c7S(5hMlE_dq;f9cT-G3BU6Y3`&FFM84gA*Tb;9TQ2o<bPZe
%1ponn(mocri8I+A_\7Ar't#/djJ_])P621qP;\,:jt$7_WOE3HFaAH:;f0JCJ56Np],[?*6bZ$3.]TWRduPG2[>6^*L?o)ImkKQ*
%as_&Mkc+7>rWTmL9YjJG2gF-,&Q^UinQ[ZY^S+U-7![)p=N!TGS:8]O!@=.u=G/;&H<u0\1W1`'QmC'=TL4Jj;(/>3fmr]]MC!7,
%8]3pPRE<IM*`a^:`QcgZ+GrGok#m?.NuL>[#pmM.jTrhmWJE6=&\<jZ8dH(j8]X+nhdd_UFVSf4P3.cR<kMToCNIEEnWp4O]P)9`
%nH+M!Gg!G4ql3seV%b;D$/\XsDhfB20]hC":"eYC$t@'TI?NIh_ak5Lmu\89oOZME!6T[U=\3EiAcZCr:fAf53%<Mb<H16CdLqCX
%N]<e$OE>,/Y#:Sh?j'1iM!rH+49C=4j>Q/_M0k25BUiUhJqj\Za":]C&7UY>]3d9\i(H$@PI+J<`Wpl/S^<EaSDX$#Vh!`I`PYEZ
%`9;Vm%/VI_a9p*e;m)EG&2A,n8Y(L_Nu:&ZUD]IrLI@JO<A<%%BHUVpA<.%gPc1(=+"^Q1.1o@?;nP-,;(tA6Z'+NlW6g_OM2d1u
%(po?nJ(t&#Bk7fh;K\9M7r0,Hb'%plQ4&C=;!SP3$Hj0iVb]JR`mH\F6)g`7$B1^[RS<ub*X<[TIa$/I[1(ZO4,D\q!gN5@V_5.#
%'`jY-6^"oZ65ou9I,Z'^**b=U0ifX2D)u**6OM?l6KQqkEO1]D4PL9#;%:6(`kaoAZC7bc"c(7)0I0:#a,U9=nA,G)X^KM7Hq,gG
%LR-C*"]iUb4SDq<F"F-4`@PE@&0e:Qr4]WT&J:Csc)?:S(-.P2r6a\CrGMBS"*Cpc=%&YmLJOEoR1$&'#iCDL9N!5P`u7\m)')tt
%Qm&:&2C*o+H!GrrJZbeCj$e,@Le2;l_X-c4GaL.9jY1dseY9oT:,`NfOWT@]_tY^#LbF'i'ZnAA0"k$pZ[f;I(qi4$XBg4=k\Q@g
%Ga(B9nRm6$KX0nu:W/HL1W@s8Gp9?&g>+M4W5OKNO>!hQ-7<F3MoJt?*#HQ6,:3$'jg8rKe%fJZ)O#lSi!T<>7!6A@!:4ED<Jn>J
%7I\3Z<7_hTR&^.kAW:j5h[.a+`\q&Ulq\bMJkC@0pa%;UA,(ip<jI'8H#]A']J,Ej@2AL;iH>pSND=2Ar(\[;POYf-VTW1/9HDbT
%I%&sc7%V%;5'55\paIA&hN^r0Tr0DdUc,/`MOIAJ\9G2AMG%kSL06(g*4"h;*9OT+)]aqlg!]M/Vb4b53J:1F*pYbP3e<t4DF9Ib
%;)C8ePLi&[-dX_>-(s"bHn,:*Snpu#OM"e$'UD&OJR1\&[C`m*%CKo?e:W;_SSimb;O&SOH<ceR=kI>QT>\T'&ofSON<IBUo0ZTl
%.nL)Xb:]A'>>d(\1YJU*8#=YD(?_9iArY69W#-OR51W>:Kn2kGd.C<#b7_Q9q#i[\(7ig*3tsqF>Kk&fkLb?@A5Cl]0'96SJB&EN
%.>k^2)nmThZcPHM:!?bFNE'V5T6X%JK\'")?0*H6;HS%Xid&E,!I?5U#n5(I?c=Kc+CGi6fq;S<i9!;nQtY\kas!%ee+(SI:MgU<
%>>Sfc5r>I[rWS,kT.uCp:as+`TcOtjl+/IWhAk3s7NL/[4"Rm;=XkEU^][NG)Fl/aPCK2S#dOFd*(c6gD+9i/>Db9Apst/<5tsHQ
%Sb!9Zk_3;sd91e-7<6s.+->S#5(H<q%[#WdU'p1J2i+/G$(N/3#ZKUYd)a2e<.bTd:ZYd>AJIolY_;Ak[DRb3TfL=\_/$BQBORAU
%YIL/26G'sP$[ENBYKRq_rTAOZRO!hg)lL=E>omN)gIVR/'Pf")T'j<CpScDQ/<I?dWF1rH:R>TcH/_qXf_AF::&!,!+\?r"iaV!C
%U!dhA;1mPuRT+VAO,0)s9r(lGGp2ME<&4gbe;K#h)2?p:`"Z:9l,89HIPVeGR6$06l'+'b=j$A,/jhhN!K8%a14O-Jlckh>U^q9:
%9HfYPr$sTj)=tU.-2@Eld>=[Ss#d.9!5CoP35@1E$Or2^?DqpCMP8;jH()Req'E&W!IgVXL*b)ORr#sCGuOU2=nAfegYs5<oJj'D
%Th1ONh(`Ff/J]Y;W$3M<Ke^L`8<i:Q;H=K;mr<si[1]XW2<7>:=,.RuLS::`*a.!`=DuYT]#)&?.clAs186chnfB9l=r\#d@KpCW
%lC#6SrSh<Eli@r.^t:p]X_eR^q?9,;e/8^pgd(QE>q*T4Lm2qWT&SGAr$oG*JAj%l=c*r%I?akLL6k6r.P6FOqe%!0F;@'Ia/)hD
%YZ<Wl[2d?S5fP3)##l6rk3hGAGrWZ&EiafN.i4`&5K$SBWPHYlLu&>/5ttrah"5(]crU,HU]G`bMtU>[4rmF1I:C-Q,=Zi%c:m0#
%cAp4ZnZcIELstEJXW&4TRm%fj6ceMLEm+U)%3kXt8@H$7=;?a!?K+dJ$dbYAqflb(YL_W[10'bDTb5Hao.'Ni0D[9aSieW0eR=-A
%66k14ebt8Sq8Wu<U\pCqjONp)N,,t]UPLbCMGrm=6Z7OUc@jR6`;qM47Fc"l2l8Qq)p+_mf,`N$i;1TA5Ic5`K8@YWh]9$P8ZXCZ
%0O)@@XO.FiM\//GbVR'JH9UQ"aAB<*BS>J\Ck^/:8V>8c"IlEs%*UnYke-Db]H-MbU"75-:sa^8c=J+7EEQfM"dQYlM=q?bW+nA%
%2N-mUO1[`aYN2>q\i^5\+#ejYLE--o%$b(XVkGR.+"(FUXTh#&VZ6[SHe0<CP3b6r4+[AAoq_[%n-h)oR1UTj)Ra=064:*\#:'RA
%@sg;6..@`6+^&peHfo_A32^Y+hl]-jCPDt\QW\SXj1/YaemA79MhZRTRPTJTb"QM`Nb,oI"p'(Q[jZX('Y;<p>WkJGkT6)ebqIt_
%OS0fgeLB;JQp:dViOO\Bk]j4NN=]J!:gR9uj=pr$$[jC5`5!QXTC2LQX%.soU]_$L&-G0.B?2Rl$[SkuLIe`k,[i]$Ct!a:0CfoW
%6dA<<kr/f=ArV(l*F-0KKL+L=i:8%oEVfPnR;lqt3ICfY9`9]/U!!kVfS/oV*+LRnLg"5fEHCQ:R8H$Q?W`rbOm72hrm`6(+qDjt
%Ujko0(2i3`/5PR'/oIQV\'C.X1b,W>U-9eNB:uk[?&#:rhe/tLDE`pmAE;)GNh=(6J87P[qj:rCfgeOC^eHCK0p8DTU_us[-[=\U
%<5iZmRrRWfMAs`LraW%<$,j33>U29V*OpEO9Akb;!H[Qq#X4K6ale:[0!"Z-.+?E<%B&=[*iX:`_79`-Io)]DTLT"bNE?#HoukCb
%3JS[qLXDa?NbQ"Y4ZW[hKG,?@-se)aL'fZXFXLb$i2^WAWZ]u_\ZO&nbTlFb;&8Ml!uDK185/WqNOTId,GZOh.U4aA!+HMBO_qDD
%.VhVA!KoV,7DZ2JNG0#n!<b8>ED2/2Q_2$?GWg^@.QB\dBRhC<?!'$oQ!p&C7"PR71VEgnAc\DU.hj&W[]rfd%;UD[0TU(bH2.Bh
%,K.;g,j>H8OSP[9h%H^p+"$M>]j!hP:M.r)E$S*-@l/-Eb*+/jdus,SQb'^<87-(Yl*1>W04G8%#uN>M%qCr0:DlpcA<rD-02WK8
%d!!*V:Ld([2:t-9@$sY0gGp]&UVZ`M_ri]I?)6^V9XEk1XaBpM(M=6L@P2g5p:Fj>0R79]3<2$FmYa29]Aj*[([T-<Hn#?@%fG)n
%i=dX"(M3T(1^]/Kbd:CH(PD;1d5+bM<@i1$D*=&"+]4bJ3XuT1YfoNm)M3'\EtmK8,6qr'nai(XE&*SB@0s*b(9DHFqiZ4:h'Uj.
%,7LPH4j7?q,s,rY^cGig7JC<)l&bn3BXHgoY9"i,B,2St8-<3QC,Ski=UQ#*V`DU5]2_IDZK]mb3gN?51$noGSP>t6cF+R<No.U!
%KIq<EZ)QKMX^#j5Z.jFZ0VOe"_&AbCRBJ@uU?.^.KNP]n#9*u%iltKQ1h297O5I]uKZGdbeLWmhf*CDI-;r<Jmnh"Vll<:O:1ALV
%cGpn1^.S!WcPV:9X4).l\ZZ',Cl;_P@g=V.@Xu^"YBu\9aX/2pP%9bh6JZNiObTZgUg#6QZm*$8-IQ*FDud"pE^60iZ?/'Wq;hDh
%%hO%$eSE<akmM*XFI2dd@LD)E`=4*n8N8&idkH0J=34'*Q"VRNZ+"KJ-XS0=Or)<9N/M0N/g''aJ3l2%KN[f3)i>p&>"!JZ2`;*>
%i.&T2D=41HoR,foAd*jtnqStF\Kf@)HMmcm,=E-MUp&>geMNO?SYWX:/GV?S2<?H/V&ORPk1+>6@XG.NHr-kMn#SqEZOU6SLlMQL
%4uM#q&^9XcC2$;9*OF\F#0MI/S,FBt96._0;F4f2(m9$j98?(f;uhG>kEF5!/SXKDQU3lY#o?'je/Xi9*$<tPoIh\=RY&K`\LS"_
%N9MquKoCPaBJ`<f&54PR1Lb2Fh)p/dl4K??MIY=qF@Z/eO>HZ',pAE6@VAl9q?I+4gUnH7,8lBE$O!TW^f/p`])u)t>!6ucnjT(q
%6$Pt+QJaq0NXSlu5;6#iedi<q1H0i,OleO!!.:2R;RG^5[u-s&qo]sT.R;#a>WkK?\0#`X0_kCqO6*Et(P_&c,#!)pZ7#o?)m>9,
%Kotg\=,(I+9_LC)AUN#/]3YRnHi3m),MXJ-J.-NE7_"jRO[cP`.$fsi!g9(5'2[iAApRr`SmePVQ't"YFdiENi_0"+j&Za%Ct4CJ
%p/RXi<[4M,i"B"FBQYd7DhWI>+GAc=NZa-gi(;K5>+HP_>Ik3&G,7eN4)k!,-\f>slf5;nGBpIPj"n[&,$g./q]3P$%G1\R0[%m2
%^99YlpL9I+hW\*AE:ir(X%1g"$+79cS?\!M8OtHpDM:8[VjUM&Cd*Y1)5;X_Fg3&#/?9:VWuN;i)9Ic]oe]#q?[i%G!=&!#0bC!%
%R)D_eb6XjRr@=`%h$WFj^[p;-fsLhWqEFOpI!)L8Np)C"8P_Bdm1@#`o$Za<VtU6Ig(JLlh2t&?1hfA'+]:cZ/QPd6'q;LOZ**M<
%/lo4oLBuKN753X9anR!).p9frXUNQ!(aU"Y$IdU=k$Rnm<Yi*ZH"dETj&Sd*L-mCraD&7G`g>/k&hP`n!-8,fK/G>e,'=L9A7=S"
%(jnL<R0hnMp]CLP_.buq2mE"\*r>jZY]52cO`:&Z=G7Kk(?BmT,sKbm4'/("!>qe_qd\ali9/21a5+RHm(!*ie<+!n:aX@MVRj;/
%J0Sp62=EJ^P>PHOGr/P\!0nFQCoAe>.nRKFZ5J%CqZ^6^?c(,df+`[?524u]+t].39lQPd,3E_Ts$EX:+!Y178sQ'/X/[M7UWG*7
%1%:-;ae-&<CNFu!Gi1'o'D[9D1:Vo?Kc'o=2O[MQ^gJON&g$5)RV:\Bno_K:8>sdMRuaU>Q+W['/F(V1(>L[s^YBlETpnY&G*;es
%r";ql7FO\#0pQ6X8$W#G$3\-YRnc0`b<-0bqD3*92S(NIrQ!tC8u74<#7MHL0%,B@%7W`$K=qAAYR=!O64.8D1O1I`^--.Z6%buZ
%?jYm;7@(?/0F1fPY<elqdcJ6%K10r%,];!r;*k:sG=2F/e58B#U:NfG%<D")IR8<`Bh%$'1Fglo\idr9%Z:kY#%NK__<%[8U.0#U
%/"$L\OLCP\^*udG`I)e8nVH-Q(<tMc!'atXL\5\3&`A_&ftg!ln&@]l(LgR5[M2OG/#DW1pjG<S!"Q]=Nd"-#iAX8%/'sa+0'GhQ
%(kLmUJsa;&#m$-$"#r+9D`UZRJ.%CIk=q3P!ZVdXjUnS[\6@KpDa>L'\.4t_!ehnr\:jYd^p8Pd``])_AR.(CmbT=.-IA\tA2gpu
%RF3R49_/6.J!GACpKo1U%>X$op!^bd&d4toAq[[fQiS"-M`eS_c"RJUc<h>'@e<p"HmjbgJ&^KWRtRq^&]jK)`B/U@QFe).N8j%g
%kV>VYB<AHr&<%^n83mlL3[O-3n7Wm\Ql>IjeRt/a\5`"+RltqE7Sq3=&IB&X;O/P?Ak<Vj`0sLf(Z_Brgeg"(Jeq#,38l%m*-Vfs
%b-)LM72VSD7M0&TYrl1b328"gZW;.<DnN0f6p?dSe6<pNdK,=O-P`#U)XHuQ7k4?nR9dj=9c+-^7u]gp9HYO4OqC$R!th6p@FtKp
%f"j"&D/Z`j:(@T(hX<TSGkmb[_An>DNXA;Hb[K0DGj`)7JYrtd)L1PgTRh;/)SH"9@tU,?3]R&k1Im4ao>KV`C?iVg4Zg.&KCj/_
%#H7H.-?(pf-9F(ILU)sPa0&Q=LEpg!()p**.-_?GPq0V2pC<\Wf]^p]VI)GC4bjlQW9@dm#*,!#Ka#T<1,KP9:hZ=06<ib=)-Tht
%EZNs(!(aTYHDA+&m#mbZ]ioC5iOu9k"qR?@I!i)#_5a?6RS=K^PRcPJ=XD!(XF:mlbh;<H/7rifG)["[$2dS>RhcC>f/Jm"4pu+F
%-f;[bKP;K,#a])r+mN&fFC49$JUBp50feTo;Q`JTm<4U?H+>WWB5&1IW'^p:.\q=r>8Kg8L)3WHE;:&<,ZeQD7#eN!"21q9."k1\
%ESYKi*A`6K-H#]uaS#`I.5n=`)(87k.Yu$j'H'PXMQPq50-B-c5u#;`-h)E6GI`45Kg1d81'WjH=5RI!P?a`[#0b#2oUDAHN,+MZ
%9LGm;gp%EhIeN`@7u1iAY'ZB8M7>4T&57#[bq890/hGgLY`Bd&L`1KMHC-m1GDL@1VD;qjSkGNG%Y%=#*56mtn?TAZU'SqT)k,i^
%AL)IJJqW2]RGM>1CQVgUb$A\CF=Y^ckgu.?/csrJMm/WUoWkRHiSu"6\u`P9jG^pG-Vp1pd1h!Elk;q]UkH_\lMu#/*biiZRC;iJ
%CQJ^C-^/4c_0CnEKi#0)T>,W$El'P%"FoVR:f8]-'4'hM-R_/,=TTnj(!.nM,++MZnO+fl"#Y;IBa3rZS2t*<G2XN)n,Yn84J*rk
%9WXq?8&24T7>!1,Ej0u&W7,Gq-WtWY@PHjS>mY&RQ(Y!2)JT:aeCSY]IaN_I[qTj<`Eb;%q!V5$*PBOt!V,hP(B9UC=9qUZe7Of;
%X5/[`TJV3\-mYJE;Jj^YqAA3UfBHi!%,NGR%U?0_oDn)/lIS2;["Z(%#-L8tjg#%0"!5ErS1ec'",DsI,SR..+\@fa[Q<`;lFO&)
%;!G(B/3\78l64_)17$Z=22XcVqq)V57Zh459f>#QDXQIW3U_[FJD>.UmW574R4M(F_],oj4<(nQ6p`md\@q@O%U?_F*VlM"_JQ00
%\ciWJ\J,=u;B6Vp$5:N5D6OB0P<kYL[WLcM*OFL2\+N4nS!<FpLK!sBrQ?"^Kf[*3g_Peb-32_TjmZ&07k#a0:1([B%(???@V;gI
%3ch_IkO`N@U#ZQ`p7Qd0q";hN<u'Cu&EtNV5Su[u/0HF<O9DVSA4L=aFc"#d!Yj*f6t>NC,XN>_8gP/m&m>X/:L\I_@gB.X,"t5?
%3=4WP:5ZTI:5Uj:CL/^i5][Em+G;+WE[E\-!-3EO6!5U"<`AnaNG`qb>c4<S,&0bH05'1WI"Y.7#":>P*At^8Z6fC')m6s+-\gK&
%`6$.YS\U2]__mkaFaL/lJ95[LHA+2o4MujLmE*QAU]X[/&J_T#bMXY@RuTj(+Gf/c+tZ@8$^X/DUl0SU-p`F2b5N57*Dm'*A\n(@
%2c/.RLgVIZ,QY0=<I<fRJ]h-"]//r-1"N?J('h"Hqg@_u#>**mNOitH?_AMDD*FId`Dfr%R@><NpL7i@,-1ikXEa!7"!;JhfNgcD
%C>H"E<D#^mEEoTV3ZS!%(`uDULai$Hp_]hL'YB:t<tY/lU"?)Z'#75j7t!DprmsYr-J!U[quV.Yi_sS7CGVcNEEgGLiMWZ4&4\&Y
%'sCo]]&.96FU-=29#C\BU[hQile<qp=ec'$60>"nkeQ:I>XAOdR*TqEJXoNZEg9L##$jlp57sL3iEoc(p`Vn!/UoPl8N&a_VN!LA
%dijMuifP1.gW'e/4iGlNLo>p\DZ-\*9R<2r6sP%)Ho$bmjXEMiKYpc-*Q8`)&$KkdaPI6C7:LRH/5X+F^u_WLAnMn8jr.]0YpIC]
%lm2ei=.VdDSXYYrbn/QnoaEaX/(*Z<F_Yg99cSS3P2X\Hqu#Pk."Js0OQJA4`:iS@C(8P2.*f_$"_%mU2si8)'hSW]A;*k2*hK=%
%n'p!<6T\ZYR*Z\OkPXH90-=R:BU-/MhZ(V@S;RB1+GEnj&V`X/K]g\ff3%B?!Y2N=Z(KbtYo/-pjG=>rZ7&D-hnOJj-rV]"#1Qn>
%p7EQt/$0nYk9M2OC6]ZA[B-Q\ZO.l[lW=rI%^D03&=Z=4$F(&:d2-42c9?aR!10qHEQ0mm@0!/<+iPooPY3Fg%+MH7\tD$OTX6C!
%E;?b=lJ>Y93n9i<<Y`N:lc[u50-=O74rI6-TKM+dfNH`"'8&$nU?7N5.Q4uV/[>n[M60Z6[l0kpc4$%'n2LJS+nKuUl@&U0jWgij
%j\W4_3?k[WK^hn#[lW?SLnHH:,[C2]lY,1`=R)iB`]$BtO(,>I;J"UPb:b68^Nt85JLN,SmWR)p$.HbaSeMnk4%&WP?'qG:OT(9[
%,8*_`4j8?a)C.tlZ3dF/@/G^FW[H]=HA#-,CtAu54#n]VSQ+<G%M/]!B,R=pgk'gY^j"uXJE1Kh[T0.S(@94`[Un!&@/QlI#,@7:
%^O1^`%tlD\;9k^*SKDLns'^R%8k,+3kbM&(E]3`cfOtP:<"<AT[t<N,rRdGHr$3TVnb\[AdMcaK)<`#G)?U21+OOU@F,#XZcuJ$?
%M*1D2S+]9!;&R^E/ghE@7tY\NDG>'6n`uO&085XG%1$>>k>72XCGD?D-7Qdt]GVfcfcu"oe*NK\%@<hCdD[BQ&N4aB(W`Ni[Q&a7
%lL?%>>a8oOnI-$D*/u5,pG"%BS_TW(cY[+W:%f@t?-)MdV-:2:*KB]U&MtKL]\KNBIId'Sa60g+#(BZRk]98sa&T._7F9gkV/gfd
%Jm=%Ca=JjamU`kel0l)XMa5aTlpTNb-f;[dKZ/We5siQ%U`/21U^tfk"f6q5D'fq?Cf.h`9L;U.&$6aEMbq]`0fK.TOEq@)ILdI/
%HAKA0.gm0P(Irqbb='C%WXMJgTN_uoY08M0LN:b@_U(nG9+Yb:N#]AQJ26&7,j*/JV8MK"*T):r_>V+dKZ9$T!%jq_K)aO^X:B%Y
%+Ku#_UT/eD;abXZ'*TQ4,3V@T_rSI]rN7sH?;H\[]ZKQC0]Wl@VmqUB,pO8Ef9(q/<2[XH_,Oou^7Pi#<5=_'d=[?KaTsc0!B/@&
%jFjA.F?ZDD]$U$dMB$QS,Fn.bGHJ$)"Ls&H0UVmU;829B9P```jX"$:Nq;lf=7qN[=/GX`+Mh]&(eK9P8XXKJJBUA]ckk@8MHqDL
%6XjT<B>$i]Q5aNfUe?Sh[u-&d@u(cHfe@@H)k76:OEe?)qAU8=Zb^Sp9h`kh[i8dtpp>M+,%Z^,GcQ`b3)5Lf*Pq%A-KGH)]Ctbj
%O;i6BJN4s4'_PN6N`U5*!4#H8@/cJWoN&$L[t99[5K0f:2-[S=emr@o(G=F`oS2XTKB:SG'bSbKo4`N\!_T[lXi)N:;\YHbieLl8
%l%@_b`?JKkFj1Gb!$MS7,#$GueLS__6#&nNXqc_qX!K.CnmLTRk(97p[mjX+eG<T&/!ruZfYD!k>gmr9?*XUlf'UFfnRZe-jk[H8
%Hc[JljJ]Z_Ei[JU@4DIKl)`bhk!Ku8S9=fN5VB0CcV^hC\AY;'5H/Ns7a@hBl:f(8)3qEq%+3cXMpTiPXf>[$=ZX"flL1EC-Z^R'
%QW`[%/iO1%.GlodR5'n[`iW2l1Y%ledP\UGS$)k5T$mH3^Y5OYDuOAIiNIb2\)75Za5?jS=24<Y^\ZdDrVc3\BQ*o>rsP(S/q73c
%*S>#<6'SQtq#16cc(Ft1P5jP'qk(g-roJY/&)[C/J+N,8rlrWYs7$&RjbNfrJ,Ag"^\OA+r33rLs5iWjZFp)>s7t"@.[]MEJ%Qi'
%]"It<rEoS7J+g'!BmKLb0E:^[/MDVNc2Pc`Zk&R-Z<:bP@!=Y7(F!m$8F@S+C<kOT_N5#"o!sQ-agHfU+H)BWXQ<-t"uV$*#e\s)
%r3NT90<Eh9l!-/2"/p/(cCdN#:,glhQ$n0TPp0u[D`]6!mbQ?%+<P3s5=[Hm?$CKRhpr+,g+Uo\:>J-%?Vrs3aZFHg'u$C?:=S*!
%2R/+5d)k8]Rtek]rT=SRE7])3CDR8gr`]>P[Y?Q$$nLind?%I/@BLFh1Ei<MpB/E/-:5Em\OeL5Rkm/!*@GeJ>S61)p#-+mijl)>
%*7V\NMR6$:UfMJlCo`KEe]_eIK"`ii"iW(3lWg.d"gI:k#EBL4CXV!7K!+R2(2eCR7-lu9`I[qX=m;JF&ki.KFe96Dh:K^;A!,Pj
%fU7.<Ng^>["rH=V(JXK,?O,!hTJ=Rokn5_p`bh4#G/:)6Z3<s0VsB?g:6;Ipj"Ff?lm?&pf:%`e,(O4!e%U&)(4<A:0*AK/=+ds+
%T`]K<+]SUf_I8$7c4BXc$`I,KV0se`$b*/ap!*"fSj]Do&\l&5-s5KE"2*0/d!'oRH!)pDX/sZ;cZ62L+WZ<QPg(*[b.-j@2eu`c
%e8-=>SH=>o2j#7;2TPV9`+7I"IA456oMt;D9UE)F-1tp_n(W'87Y%m5DD<C@44@Zr#c^NY=I!RKFr.<HV0r!SV-iDN7n[CppVWnN
%8sMJ*:!e->>!:Cb&,QZi9pk:V?sPW9K1'os7dYAc1g_71VQBiEU-/c1^G<J73$qa95G-5;5[mEQo7+^));s1W+-e6/L`ecHZ-4k$
%kon-ifGhGk;FG<.$f#PQ"n2Nb92tC/9U7]Ajc>2/cab=A2;eH'r`0!lLF:]%Dr@U[a7#X'Hi3l2e].eT[JjjtR2ph>HM8Ig7ZB34
%_Ebdo"U5.EpYF1ajTHTcEWe6pR``e=.9Aub".5V.CZl5>WKj=Gn$\s%-&!csblK76Y2Z$G0SK+pg=[=V`96NJ:s%^ec"knp70,f&
%&4d=@-#3)TLjH$YTSg40$YId<S*%+XRLarBDTt'4l<(@M#\iCHZYk&n_?+5V\T$G,pI"Mb,BJ:#FcID9d#:`s(X,"c9S`/Y+rJ\-
%C.Yk%CQ9i1^AG@lLUsR_]E:R.'!%6fO\s&[1?Qp1OeB)%beF]5l=kko[aA6=$!^Bp?Z1)hI>8X]MUX[qQM[Q(:SiU@!s&+M+l5/?
%9dM+enm5qFg6-knW),5eB8@`5KHSf_jS<XTeeAel34LAEk2;S^ccpSGDaiY?+m<q1[e&Dbg(_HCeQABGNP&e+9>"e44#8D5%?nB6
%XrDB*1if"T88A@d@#ekN[hbZ1dI&BIUpgr'9D4"S=#Ve$b#VuJ=i\+O:!]ir,8#QN;=`C]c#H!p=\RLU2uXf%*Nd:MA*\gPOOm^o
%_1tA]D4dV0od^r+)21+'(_X9OPRCKnm6e'3W?0c9anG05luqf*=EC#?'5J=_\VPD@b+&ZLSaZq!Nk,E1HFF0-0F0/.bSPmBEnI^T
%j7kt=_eqUq*t*'#!'spr#)lB\9aO!3Ik(,25MT6uM08e;^qA2_OF8K:UDHTaR4ngJJGVfW\O$>`Nnc;;Oo]DNV&=t`LFn.tJr<Yp
%ULf;inNu4JCTK;GjJ9A:`a>JJ/+gRQ=%UiUW&b8u-I15W;1s9aNPM[NX8p#td[Z*$lfq046)9qc0T]$K6YmW[Gf!m/3N,Q:E'u:i
%AlNY74M0/QI6]f(P6r^G^tMV!c.82=)2rN3Rq$]Q1qG;SS2OP(dYq&tQO5^[/BChsSmuMkbf1kB*uae(o^2uC]L=OOpRW*!GVedk
%%b>OL-,$8s*C\_,D5#*I&>KuY4qF[#b9^Vlf\D<K>i\&1XU+0l,qWn_F.5N'EQ@XT7`<A[g>#J..<RO/g%#^*jJ(l$<LHFsqkE/G
%K(n>e<LtHJ9L-+nqC7U)]B'he:0*p3$Lajo1W0_s6+rQ?AE#!uV)5/*6ub#>n<Gn.Nt&)biMar*%>0P5FtV!<s15&*Ta;giTECKk
%dSr`hJs^_mMdPps#Vs*hCK@>GM$=#s4GZ;kN!i2GI!DgmBU&bu*Ik`S/4Gh8GdkDb?(F-DW.D>5JR.$e6U[RpXZdGhB[Q7WA6jW"
%4ktF-[iT:LYO9Ze0e6i!#$ZIDoB`2(POA%=l5Zi'7VD#M@Zep8,BQ))M06SQk0`''R(+S2W%ZGPg?m9RJ\&>b&k"[\]4<LQL)sGS
%=Q+<;GnAA9(*3m0b?WOU)1giQ*+E<u^brP+OUM\kX+_PL#f!S1f-6Jk!L`(pE.aUP,RGN&m-@'G))Y%OYR4H&dje3uEg.+*'`t%c
%V-]9>7gI2nN&OZ!8q!K#A0"o`!cBHX&UW.gbB'ZB8;j7SVHl;Nbk+=):`^c_%A5O+!g//J*PJSu;LNjYnV8oQ2_A/<6mW5;PN%eq
%G*3tl7SN1r\4JhU*ZjscBClAZn`K"bL+OQni]BQ[DqPC5a'N2bjPg$5WcU%5I-B]9Z,L+LN4K:q<)m(ROWm\X'!;Ws4k)?LYA8E^
%Gg9>7X(7OK[UBh"Z(KOKB:nN%?oXq0K4/Ss)15iLkS`$L1'u",oi^]!:^,BeY24U#>qg:L,MsA(FF$OWN7W1"&36OI%7R_(VE%Da
%+scd54DXPVm#B@,mp8G!^Fh+n342DIb8W<B:bq2LDGJRQWA]FCT=8;r"!NVX<U(L>'u1;S!i<gI_%"u',B/g'3RX7*R.k>Sb34#f
%Xe(,2BpHPXRpq*)18Pk?7iRY%!.?N"]Nm>YE2AB,%td]5m1un"ls<SS%c@n`&h8)d3_Ws110!eC%8a0#*'%!r?.[hQmHjSCqj,:)
%`q6E+%rHKI9e,#r&/Z(<<*rs(3QY,,X`bJ8V>`L$UrpJoiW]s5KdIF!3XW(0ERq=gd/cYX&qko77Wc1A(b788I`oSnd%4s[X(X?\
%E^dD"F`Z^<-jJg<Z6"_hVc23kWN\:S`k0/HhL.^u_l`EeaG*pZ.A9JNa:i#%Nh'ec2h1j\kiV?+&`/n*B>c`Xs-*MmDspO8NZIbN
%&BF73''!Z`.7$]5SL6fcIfG?\kAbu@S<G&Z)1bP;VC+dCq5>>NlE4FjYZU)WT+UFW_Il:6]uTeW\+W&/l^GqoJFeHu?X'qm(&2J1
%HIt,t%$$j.QErA]8]D1tW5q=6lWdX/D<\,&F[C#4S0EnhZ%VFTpDQRIH*IX#-c_r(FQH9Mc\!DsOtF>0i.;t`I5Aj86^4&D+Q#f#
%A:0)O-kE@!(``8P"dX$`!-%!s!Fh'>"HW.l-FUO!r&$aK>.E=fQ#;*6N%GCPhP:_m:-^N.l`E^LdHe1tU!]%3(GX2$VCKWd75.34
%<k.RH:@jS`.J=8sL:]JGCW^sRKBTb_hmR6[men0u9&a2h-)_?Yf"krhqb$;knC48+>3Jnn72A5]G)-@4HeS&0IQ;5H:Nm"Wn2`1Q
%A8<qiBpXD]&fVX_AcjlO7GIg[4<9*<je?T`_d5DAoHoG@__FnHJ-BHDJF:dLlG+*kE5fd:aN#f9GSL#`ddl'8npeMcfJl8d+gtrH
%*h,<!oV2mV=]q3(gJ_*(4.69eB<,!<AT3S1^S?3K.)3<pkm/L:@FGo$mP\ruUcXL8+%,YN@\@/kDAW6c?R>QnCd(:d#!gg51G)AX
%CrHs3OaB&T_ue]Fn;(ZjYS5`"*]-2uo/;(NooF6GM*3&t5Jqg"AZPaf!,i0phs]q1V9"_CPIbpTblsH-ph#(O-?h#`%<X.RnOs^#
%dDc(H<T*(4:P>eTL30X#Ge<H$@uZ>c&bF>RbH(B`\e[L<\*Zm6pmIG=%a6kMMB46Nlr7Q#2s&gaLPuN!)-Ri;'!+JSMG2/Q%1:f_
%+b=[pnnlE'SS>;5p\a/R3"tO^``t,)MZSq$q#r/m#*+Sal6\WQ2'gLW5mm2>#n>CE9B8/+^e%DH<`+padMK>9D^2l9_EJJUU8nn&
%^kQ%;rJOE2Uk'AfWgH+[gEaZJi<`ba@g_O-BFF;CqVZYTUoIK>F,WK>jI?>"(H"aV_!65e0_n>eh3q5D0T%AQ_BI#hf,QfRMP*Cj
%R5-o)@)Ym:,!8Jn,D6Itk,IG$+.eU#DW#O!`<Mor?UOrX,Jg<D59n'tnFC!:2GjqpatZZ-1Qm\da>:,\%6Pl[\.'LGBDhQ]&rcmF
%-Y+._^h9G])L+lWYm8TG2GV*KZH^+NLSYrVn@eD[$\N$h."c*"nVH#K>bel3,66SgkK1RigpAR@5id:%g(GIi9'(7O6pWo]X\PFq
%cD<lSJoJ$th^RFc-4TGT0+B'@fUY>R@%6N'h5._t._a<b]i4^NAnVCThNgXeH8g=fI>Zd`1ts!X:K=JYHt,*R$$-/^)t@(cqVgU]
%YC[3MjFU$P#oST([Kt%YZ9KY%l7@?<j5[H<HIpOdq<F&mcFhYk\c^&Y=e_/=-B]eN0_aS&3!Sm@0M>re9g"3-7<fYl4st.[!!1(h
%Oh52!&YumpA9ZD#mQk)3,)TsQ1T$#85orJQ>6j,n^mQNirr\eF[rODPZsdiErPVRlH?:n<'Lt1FE)^ZTr?;/f%6XeI<?5V'#++=4
%ZJV)3maWC"n'`&iB""W%\F3ch_O<fF10shI*#:p,=TC`s?m5H4phdNKB[?h]?mj]DE%:8s,"]M,6eaWC5TSm0I;cN3PLU+84_:fu
%XaF0)EC%[AWR>hf_@8I.h2mk(fHS2VJmP/`T`MUiY"D2W>a^E3VMNd,O@qN4C\+U]F?BuL9DGTkp>RX56T?>;/c*Ul8sE]:79Y^a
%H^"Km:VOCI-cK^Y7p/Y-qKeqNgZ2eUJ$B4e"mlcAIh6kVaOoo@,&u7M3e\h)DpCJA0]Zq"$fU[".\XuUYX/frc9L2^,.4`eQVUX5
%*M<ZuK`So>aqTnBfa(@[/3tT4)O3<u8hSArD<(V`&1Stmn9;&o?)E!="[X_,^]t+m*3]Q=UQ.N``OK7$nT5EQ(=ZcE27Vt8'3Q\X
%"0*GAEth71eVW80-!Ume?qHJkOh2K>!qjnG'53>?G,DhV>If.fg]5?@'l^tD;BaG`)R`3XN'_B(FWP!"rCL#E+C19jE"Z!JR*g_*
%KqK0[C<Tu%Yn9##CefiVE[Wco3&KpglJ[@p.bTE%hdrk6GLoN=VDBT8C4q$!#kVJ&KuWARC;E9n_bUfN0OPJc\;*la[jn"*)gb,@
%j+_[VL+Mt+_@QGn=fNa`mI`#Oio8X8rqR@k^\?c2cq_-ZJ=otMmB0DSQVdD^'>96?5i$7;/Og+7FgF/nH^rOIG3+Je9mt1,o\e'[
%[Jo$Dm9CUa,"gs41))W`_[qITh(u#R"#6N'hb;1""m@Baj/Pmfh55&eSLnH#>u<nqX]8Xf9)n?U/_AHU_LHh.SmVY52h`"2L[PTJ
%ri+WR%6Sc?0W=[$)ri;QIc$^4T0I=2+Fa(7^#90U2[B>$H?],p&)SH+r=eo1IfIn,_?M'q6Q#HEiYLMA+2:;_Y^PX\iTQoE9=SP/
%DA/VRBC6F*Nb<5D2fQE.r.g&G'mg`<^K9'=Z^\p`Gkc0M(k1IfZ.Iu[^RX1$huE4o#Cs-oMnJ^'<*rH-'+1X"]e7A1j`,dXmB7'L
%MV0963:!eU[=_/'b7&PCqJ);d*LWTL7]tr60XE4?p@W=F1QrqM*b'/Y&Q&ODDmk)#5pjgB\%U%<dNiBnMWm`/eHBI-BDad=)ogW6
%RnNGfa]uT*eDQc):%S'<7]sn"@QIp`^iobDLq/"]PGq#qF:qY`&$*C&^k8^Uct7NDH=V=GOP7d]6O:>B,p]"@2Z[Mj)!(=aWlc*>
%$08$<S&+,RIWIcA,S:gTC7O[N%u=9#=e&J>jtd`t-f*Z$o;:.uP*dDLV!p^o``S=5O+Qg^4('su&[5rjq*ManS@@!5/&^`]d0$[,
%[i."BWG5'O1Q9E$`V%;h_HkAI<s=?CVSkA@nnWj8T"]TF4*nhU<hgQ9b>>af@6b%pn5L_/9UHY:1u?b\R/ok=Ys=Q[XUlI#Ho+HO
%ESa^6[brd`_aXWA0J_YncG6M8`:W:ZU_QBCMBjB4#EdNXEAP]B.d.H?$6"sF[@':i/8pq];,g(VGc4[(B^sA@P1A9gAGTa>i[X^$
%n3%hR4urMPDnJqbDZ[n\U^GV.=+Af"0FiXPc:-l+-o1m:J7;//+f1K8?RS>*M['I\_gW3plUZBR8RjX1lGSj[H_!/5S"D^2!Cp/V
%(SCa33^XrSal\q&Shu'KSZ"UoG?b3734=oDUEssm02d:%86@-]n;^Gn^3fQC4O(o;f91XbgJ;R&Nn!UkI<T/Xr5:%\Re4faV3ZFN
%;Yc(qcDhWILJOu<X,#"OJ,dHDV(VDYR>p`$H>9ED5B1SOAY(om`*>KIG):Nniq2g9O.TeYr0\5b"s,tGIk2%L#'rO0`6")('8+hG
%eD]BJX2LlEQje7:K3Z%E'-6S\Y4tg(rA.b+(f$_j#aNX@c.p]=JA'D4n"+).!Am\7h-]ArJZL3[OgWGV6oLN#aJs]TGY%Ql8n2#5
%$UX7?QHY.J[<jb@I"b<D"-U#=VP>l^4OQ8a^-p2DpX^;iK1Ib5g)r>Mn1J0."$1-gO%)/==G4h$`2Uggk<QbTg]B:)_jZ3^ncc@9
%Ti<]=371K&nh^u6RHl0Q$j%5!aCWdG"H.irGr?=NIBaT;r!8:eZ4)DmT*r[1fm3jFjn[CQG]?_W7CSr]->kCLE4%!d6?HB*nDZ<\
%d@mB*AW9nFD+Y"4WqX_p+tfQ+`S6V/MJ?nE&VB;17R)H\ga/s*39n`s''fMt^Q-'l5FSd-NjX\m@>M=Hb]%t:p`XVCS*GahG]e_@
%05-6.;2o5&O<@;unN-!Ci3781OYMO[MKc*O!Ktb3JAq=g+Si`m&5Ss2hY#W8lWe*D*`WI=HJH1'9TJ3#N;:(e_55.j+g!n]T"tl#
%oW1XP8'#F<_hk9ka9,Cs?]$-r91l^#SANUC)<mg0UXX1i;VqY9;<,l;?FIg1r&Q^"'g"SLLGpNKMMtgN4MXDp:#F/;KW$_u*dBN*
%E8d<ZQ2GLbe7@-)3Q4[EX[SIE_%0"3FGd:S&EkqE@8g!K.jiC=V^aV]b;:aqruh3Y4Sjm,MQicRg1<?;j'Wa5OU9`p6'OFri5Me6
%'At'MaBT8AP:XC0Hkq#clF,[)bQ25p%9KQ(PT,!LF7!n+mdZC2/#K5]_!9+<idfmt-No$lYE+SEHN0QK$?QqF+Vq#k4sLos^b_^9
%)XoQ"_%DQ[`<0-(`ruV?^_7p/*pgq$"?#CU`.YI_*YfCeq(nb^Vu'n2nOLK("_Z33%B0BSliE5_EqeHtKa3"*^c*Vjfddq6\@H!+
%miA",XOA-d9"IC!!68'C"E[#1]V?(0OcutiGF@P>8(dI2hM&[in!?H[E/'Hf9U!'"LA'GT5A!,H74)2-/SHIDc*Y'pfb>h,bSHcn
%KJ/'N<(u=oVlYIoDX#DfjoehD\9BuHV?2\B/\2;WJ4^8GdR@T@/>IRShL0EDIUQ=[oEW\:!"/nrqc8%@H@hJ%eFbidi*9q@IY]hc
%4-\1;*k\>=Lc%.2o6)pN:l8<+]YcZ(!9KUs3X.`=E5]*Zg!HE0V&sJ2`4^]^7Ca%U'p'OG""QMgI&lb'%3&53DR(Z$Zhm9%6IIsQ
%Y5'^K'Ms,go-&dbX)?aFQ)Zb`C#(W*RKAjp7#o*Pi`="SFEhY&\-J43p->-'3_E4<J?bs>ip[\FO-hogqZ&MEqjik12,?>bjoj[F
%(H7pG\:G-5-TqdU`lqjr(BH:!rYlqP]jOWIEkrCViU'FP[kM=@#E6\3]?SB/ci/i0<?Ma37Gi[KPSF8V_Rtn-lpIRZR9t[l3tjj/
%eaX`k0\#d.3Jn&V3_PLWA12U6b]?c[(\9_J50"+eS[-2)>FMN?*>fAEP&_P1&"+C[/Xc4BQq<$IP;=Ua2_Hb7mL!o_6UOS!r'efO
%9B[^6/5]4lY_CDGqBE0VM-?a&bWJb$P<)ZF`.kK5?D\TrI)+7&QFSKtT:0Y3AkJLK#/FZWK.-J3m"Z-n`$9opL#R_o2c1p2D+;FY
%?C@4)MjjmZLrNcgBYbkQEHRfU&cQYh0cYq+B[>7MQZ4dR!sCP:WBr$o#:\!N)(0$TT#<3(?p>M8.`JVH!m9O17Wj;[mUXI;r1'bZ
%59Zn_>'X@L;5nq0<!@mQ@:9n\SO^X6"3+sTbC;L//;KT7(0Z`(5;'Cs^j?6O?[c+!EIf2I?8NOk&7:/@4YFN`F$(\ah?6e!&RrcY
%4>+V^>^BY:E=SQPAR'p:KGf!M1ZIb^AU(!b(5C3@Dg7"T<#\5FR,!i">0Th;Wf9&sd.a0H;)Q*_a-%ad<#fES'hGc/]1Y[l\D4!K
%nE5<4j>Rr'FLG^I?^*BAhUb"3FYTG:,3_h0h'#gFr>NUueJduclhJM=<,I7/FXYlT57j_*j"n+?eU0.+$P:dhZGOD_Lc6$q2jSK7
%A"N2,q1ur1':UjdbaSncAg.Dh)2D*%_C4#@-G*lSQ:)5]XTZEf&$]TEGb,O]:lrm<1e*9:"#X9/>Mr%nfTC-hH>Wq.)+qaf,7BUQ
%T!K.&b8i;<WAiRH9\%lloDp'FZ,CYlYcD@K`Ct!Y4]XRH)7a:QW<V4<>TG&[Nc13:A+0]76/K11>X$ej8h+7tg)QM)Oo%JV^j)Bg
%ekWeA;``.0-OBK<1oY]BZ\/dCa/WbQ.%bP2(*_h`#/[tg3E%_[K'c3>KO*NnAr@Y)h8j'G1Xd.JLBWeg*`o&mb0]8],#S(J<@)T^
%ij!Q6X1_%dVO:sGfWa>4>iXMKgs+8&+iT,]Z0VV1WSBY`*LaX:4c\sq$UVTdCC:X\FWJ&VR(#UtJlaN(Y"n6IEbp-d+$6iha,?gj
%`rbd6EJl\kleSoB[PBu6hAg_kg5U;<q<L3B(N>U"5dsgGLt.?8F*+,%/r.aQdoO%3@Q</=KbtHD+CR!/$p`X:mKM*.P95>oeKd>Z
%8Yd;#cD0Ho@ar(1G_s%u09`&3l-BK=eB(0N'F4[%a:JkN%EZ>,'/1(-(/T<$0aOM,DT'3McCt<X&t:Q]i?ADTKKjh/ggkA9^2=S=
%@[ilC.9:j"nMDtgP;mF7!0Na)![7t,mU6E'1)N?3cX7Z6jI_(SPf7[YSZG6J,pr4YbT%qWW?H:7\aIqO+-KnT1jVW;Tn0-&([6/c
%QXJl1H<c3plXs*Hrc!s/rkmcZN"%lmbP:tTV3ui4\3+g7%ne`W=?RnXd(iRX/_Kh>Q>:$jHUb<7JS/L48J%JUDA4):a>_Nq4<`\_
%8@HW7kD'gGCQ!nF-3`+o+gR%4$'$9P1[6Yp"nd')7=H"'oHInS4qZa*Wk-t%UCcQ_!Kd+,V49TsB?EhMm!/U^`s>p9g*4hQ0/jOY
%`#Xuo4V""R^,U9c\9M8/]rN!$5t,uYr[gZ^B5?$d#m=-HD@t]>3d\m3'X\(kLB<8[%Aif\_%S*ePXl]=8jtFh@M5m7">cB6X+X/k
%DR&2)$1p\`G/ASm^R9ru2H'a/0jYe-I]^3HYcWeRT<8!GfFs+oW9uBl.U#7pOgN+Y@-/_#(bSKRJY5p'#G:6oi)ts^'?aW*E4iuT
%s5&gMBi.58ENJW2)"4";P'4g2h(B)eT]e2gFic,V`Kd&=+?W]A+,EJ>-":ZKdiopl<ip!K4R*EZEp9l^k)4(:U)I!7!RZ>qHjL\s
%G^47pBrL#GiA/fTf8pb&Wt@*Kk4k9^=LLDo>3sKhc\AB$?5c?IUGIWKdZ!R`P*/hIC,Lnf[\GIR*e6.SA0]B3MD?&/SjE\UgPSI0
%!h[k#K9^AE,f;MbfW$QOb?E;oAY$"_#Pf\_m-QSa0MrXDLS<2)l"LjX33/k^qgmILnuotfBsN$`4C3_F7V4a+RlSbk"[RnWR3\.Z
%.C*ICO&IaR*M<9H^M6@0k#L[RkhIMN'M^B&fkh"!prU;EBg<P?;%j/4(rMX)&UkeWLk'U(<_*rrRPp]OY[1;bN<*m+Au;Vf:?4/\
%8BbNeJ;4m]#\8m.JO/RmVq@^.7d'JMTt5uW"c5B8k-7fRp:9g$=E860Ot#V3!FRHM2U_gm5!IM]/DM8%E\j\155QscOPD:'?FBAc
%"OidC3]AokKc:!\N*)k3GUD)@LSJOhVYmrCZ`a;;Gb]EON.>CK:.-(oT*RGAIosqbpJ2&UY4=BCNqVBe_N#Dr1ZFFpm1TP^RdGGj
%SmQqKkkXr`M`j-%*Z'391k&^%RF:k-iFi2,j5M]pf#%RYO(=+&iZ+mF`T.i8MC>F/W;MkFUJ7%ueT?D@L5&5.F.T5/>'EM<^)KJ!
%`E@=^gCZ1.1Elml24b+n4Yq:^B(RS2IgLoR$LQ4HKp3eq[!l=4#%rt3*C]W1\_m#6c+E?uVBbSB94TCYEG'#JL!nj]5Dau?5l6W-
%9ZmQ^0$9)LL5hmm,P$9O$mUQ$piGq=O\bJ4_nf:sAZlq5G].>Nq]M+9+5=jt:bc1C/$h@rg%'TJ_6K8-gjR!F7Fa$5X;>i&b.08X
%415?%ZS2Jm4Y`\rr+5:T1Q&O*1_8L_4<UHYQLW!H?T&4bk\3=^Ccts2/[EJPLZAk/9\8:!(/Y:A`;Rs5WS&Yi3!Pb'hqRZ@:ki!/
%2K%KL0PQ1I.:1)WaB0L=rge8F);U(K$LeP*#.jnGSZK23F"DOF,A^g3>[M0_%e7AF@qul-Zg;a+BYUEbk;-b53Z_i$Z`/0oHs.$C
%O74a/,r1<r2N>0TompRqENC'[7e*hL/Rg.0?F+dfD-6XeV2+E[NRId`Jl*)>R7,86a*l%U@pa-X_/sZ7ei`7R:1jesa`R"BW6%(*
%k]:4cp;]`+@1,@p%a5M=MBYlr8/\uKH7AprKs+X4n_g\mT`\G66(5&p-74cNh:Sl8>;#a+Vm[jR<a*H:HE(2T^,\Mma6Hne5!=Am
%_\3:%KfpJAK!$<gn0-l]c]4\^V2l]dqJ)W^MGt+X3/me71WPWLg1Ln+KP2DiP1C0d5*TZKIJd391\fp]aVd2^c$90MiV]I%>IMZK
%D#REX#$.c)aP3kWaUuT=OS9dZLg@KPhUX&o<Y/lc#%=kCgeVI.VXr\V"&-o6#(1D@1;M-,mRj$1W\A7Y,'GpEd-r$?D)M$8.rX4V
%pHOG\gD;Y%2/?OFpk-FDkYJ)pb1*58bP""\Opk&UoT7D#3%hZZW'tt\M1I)!7GEMf?J_?$^pZ9JqO0e<!,9OfdZbY2F9FX:<FssU
%2NLDUR(hl_U$iOGX]l9t*gT:KbsOZFM8UG"n5@&RF?!H7B00H*1qdEh>1WRSA&DpC@-YLsp4mMW+fP6:>kns$"D04g(<b>VYZ*DX
%!und0Od289o;2bXH#CcU<ZIf$(_3WMR`l]6UXI"4ZW0@IJ`+b,d0Vs-_jQ<Qn`6@WQ%OKX=SQ"5V)g$Yf0E-I3)B_fFAX<(78-1&
%"5M/3.)2S1'Z/ENh.6g6o7[]B*a5QN@T49W86SYAGX6I&>''ll7dQo+^gbDtJI-`+#*HNF,joNhb898rJ:qQn?!)]-RtWb:Hh6O`
%UHp&R)%-4"KHLBe&eh1%^EL]_M:Q[72-gP8W3G=8Vf/:VFnt%IWffPnQK\rI).#r<]']FU+Z9VrDTd%J9_:jOMuEEr+)F.:RjusC
%eFKZ`if^e_E9?\IU0s4<51)=72:ZF'eO!_PD-*OVl-55a(;#_LEs@Ol'V.V0;g"!@S%"CT`<\SgFh$Mjm6.&+;k<CT9^u/2k#='g
%qo$$c%/TLX7FgUiZUN^:RF=UlnqltW.<sj*h+uusB?V.-USj&8J**7uLO.sU)+O,j=eg$7`+f*Yq;+T+]%*gCkg\QpO3@kVP:#<n
%mFmE(^XkCm<n*l,A,0t10*aV&Sj<q/"=R9tFh+0&O[R^cQ0\O"9`Eg!P>m66TK"5Wh(DNs;="\(AT.^E,&_S5fn<m=ZXXTCp>aIH
%!Ir"%3d\Csl(Oe'"5/ZOFEn<2>@=-JLU`WZ]b>trFJ#tH8\8I.-m1o-3!W6__&m%0r.f6dQa"ijDX7r\UX[mP464Ep_=ZpL)3n)\
%#RSmlp!,:G72,NtYmt$#"!]m-<]RL72a'UXHr<"eBiOOpXSGP$foh]dma\/f5Q\oeSCOC&8J@273eln\(]jNRA"M<@D3$*0J]HOV
%hZnm5V%m-<T#u@$O`7nC!'!c`FDrKZYQj5;Rk><l%>itb3$dN2iLd@9gV\l-"S;G1_!(1$=@dL*0sE.`#Bkj0kR!@PHVN!s-*`VL
%I*aJXAVWY5\-<+$<U2c"MX)U53L:9E>+Lb?0X_d8'-AJFH4,WelV$#'A6F(T(AlsHV>sMN>R]O*<HjSp6A6\T5HA.PnGE9hU9*&_
%#oY%B]frK)+Bsc\pGf@^8a+8.@NLBF15eHiPlpfY*9!@T=;;G0XNE<D_3P(bNH0_%`kiZ\jABaR)+.r)2--9+<dAt?mln:_q`ni]
%cc>HS$7HPdeQ#@d*kLD-4BJpccS>Ih`(=RGPd@^om18BXR7c@`cSJpWi^EAF4Zh-j_qD"!m,#YCRb.Np-i;X?Sib\upr?/h\&@=i
%qqE3a45p,9'5-+RKb'errr/=,rp:4\ERH*#nSm&l6KFo>rERnMQV[iPcWdL$mD]S,PND5)W"R@i/Lq8\-itqh>82FE1c#1qB8Kbh
%k&Dp-e[$9cgbja!!b!U4a9Wt*4PQC)(8+HV9srt3?kt'Vg+@k3OIPtZEo0"VU8+@+ADm96^A[",$jeRO2(1BPbcnf`ltnA`E]f>-
%)3RO_h`d'(_+o5-#/-*X;sQ;6(#rZ>>MSm0>%NGf+UiQ+d/,6oGGg='hk!7CE/&OqG)-FqVmlP?&dmV$S+u'Iahp)f@_'hIj6[q;
%Ak':6ccc^1p<9VNh6mj<bLcG\$orR55C3pNi7#!UZOiOlMh<RahH5eZbjo7gB&`Yi;"saUT3/7[mW\cheKM-__d.T?9Ykoo7M(m@
%GqX--.&.aBkIde`CdQtH3WWkP_;2bpPcB>2%>K?"T-9qA(r>%g]XSG6[`+teQi#n4`9Uo'Ir;FX#/nW4muTZdNt7*W4>X(BX]Gn>
%+=]mg\[CVY9!N)ZpGl@,i2+kJV*"^N&p*$(E0>8s7kk5+@L*=[3q[Q36g-9L*l8pbC/d<)Rdis&Iq#\.7e:f.IV(_"rp\^!hAiY)
%5,S(E/:%+$h1C1%;`.R*s6eFFh3bT^+7N58]A"Q,l&'3?pmn$;)#+"!V>\+L=eBrG:ZleAhp$Z@eD53Ve6mtt9N/D(Ns<[8(D0U%
%?;1d!^\U&@-sd\LGB#>t:0jmY>ISGR+@:u+d(9[h%)Y7PWu^E-_)->`ch",#*=r2>h@]QW4?Otjrp`j6AY]!fZ3,#e2i4j(&;E27
%aK.q<%irJX-*5X#K?aYb<4^,s1Z8s%MTt_>iBogah.I`P.f6nb@Ok5rl791uMCNo">_MQ2PI8B(/Ra=g^R8'\9$'aU(j'Fqb"USW
%P625J9[W'k[L6"'9WKSq6@gn0UUp>!&DS8;Gs9bkUZ(h=Ne]8P0d?YsiA#atV#k*+C_FRb$ihF=\-pcS6t[/aX&XSD?U3Zm9/p"a
%$[N1:S&?)QakqR@V4X.BZQ;OfoXjt\<.W):p!`MT9?2RYiLTr#J.A@+\q;4iIeH-Z806u9cI\k'_=d1t!8pS#-JI4\&"QJIH%u\(
%IW(SJne7Sjb&!n30Ql;!C;lAOKrb:I'8Od@e,k^c!A$ht/Io\,/b7e?Nbnb5+_tjJfK,HBh0:YPGA7B(M[4iA9Lut6g"rE`kOX'Z
%'L%$8?l0T,HoV&T_ZTbX)Wf%)JT%kpUUY?/`k\KOjpU-`Iqk+`9hX!q#];Y#%*FR;WLJ)JV7[O1o4N_BRJpJ;=9sn.kg5Bg$Zag:
%#N"@gF6?Ueg3<PoS\>'Gm))oJ,4+7#@W+:*W2q?o4)18k>@1G&&iF,0SbGcJAg]bX?:an@mp=g\/25]a]VtNM#e%*iNZE@-SaOse
%ndk3VWY)H'lYO@@hppPdc#7eH]2n7BoZ(J'BAE.^i<ZP*kZqWo]Gft_agm0<7TDo^h-uFq\6HN#F=3::%%J/EN>-mDoGh/N#V=%K
%O0i`]FqH#Ab!B3D(("Z2F+CX5Uo%2O4#S\`N'(K+7asq<.c#ItXHLDapFi]3oOu<FlnbJ0JCXT94TtWT.Kg)#bF,#9>j]2H(I/7`
%8AGfC^TfHJ-DYHDAPj8a1#N%5mI?Ad3g[X[9Be[RD_V^%H$hX*^bZ?j@*K?XC-_a8MotKQZ`FA\5JF@/3NH?l"@#^+M_/C#Nd`OA
%8)$:Z80'[Z-A?)TVF&Q_^Nm6l\.u_]k1_a-;&M0gT3RBiO)&V+nVaKP+X"@aGf3,i>f`+lWCPN?6c,&fg+CQp't3=BPipg"F>j&P
%pW\I*qN&r._kBlM$%MunXF+T_N"W@iA0g\X@mC_iD+_3Ir!0'ZGn?]c_W2h,RSsEV%dmG^]I4VW10c#g>QUKS^I0opA1D<7+dfgB
%SsT3b0jVXZTh1!.5(.Lu%,'(gFWkKt)EX=WguPS-MhlG-+$lJCqjsNqdO=_IH*U$`B'F]HS^++mn*c`AU->3;d;OMZE_['&G^NOP
%hC%IYVfsZ\&TKl04ef/Y&%!1CEW2dIG$B"C'5gi;imb4Z8oPr]5Y/<]f</Ghh^DXZ?HP3q$R02*kq07*pt`7loK*U46k2&,q,=N4
%h`A/];4<hCTsQTEEu!Cj%eFeSSPKLjnBM=`9]DHh+\q!a8RW.$R?k&CQF[:U&2[m9l[40Y(f\6`(I>MeKIbs@DF&#qDM[%5"O;4f
%LZrsnO7.)!=cT(;O_C!p/;2,],iDSNmIokJ&nVhPlK:>,1sb(q3?FP&kC),H'Jm^8K+Di`2L0LPS[%$J]3TOpO-=\"f1m^bm2s&+
%S_sG9jFi!Z_in$A#+h43Dh!"P>/.@E7lA^:l2e:imSsf/P4BBP)l;`\X$E+@`Sb>38m5?WOJOES0+B]HJN*AJGTSFVgb(`f+QrK%
%LX7Z=WUlYPo6e0?Np#.=I_gj8ne5NMn"1NK:Ti8SfgVir;,!J[HO&\SR0AeSW=W6pNPE%+!YJu\KSsUu;&"&NP>'I>Tg6e<k'rM&
%g]3-me>OiQ.3)J+=`7sO4Bnq[(_?Z9h@Z.arS]Jn$iQJjI:]h[:R>qF.,;`[rV:;-aWc*U1DjD1-[P8#,noD:c:tN)ApH@jL<L=X
%O.Ld`I(E*8`%kH`lr''bHam!]R4T[?Z`H9ZE>_p-;5JZ)W(,0:?ks%#S;GfQF4.+i;l59#oPUhCPZZU]%QO`JmYJ4<S57^MIpA'1
%>s34b]SHCVQ+6t`H)6f>5#TZ@OKdi+F,e_g>Uq:mk%(.sn=kM1,mp7FdCID,B,[?>ffGTBG88/:Xb%U%@A,nF;,fn?4Q0on4eM)i
%!V$]h*>2H9R6e*/B86)Ep"FpL,s5g='3m0BbY'W7\5`+?<.CV]dS)1E5DZ$]]TA5OURDuIR&BFk)c=K2n=fI<53i`O^UH^<RO@t(
%Q+96TI:J?AolZbPddr(5c`8NgB(5ohY;UXXf"5Ru0$LIr_Y:67G@J(r)/E#,L;iYUeb$-DiskFETg18pMV'<$!M[Hc]%!(QI\+mY
%l$2]QGE9h!WZN8qJ,d`k^9UpMc6u(Y-J+g;C4WRHGagOjf$3a1B<Q7:qt;Ld0q#Fla7KOX)-2/7aIh=rg(^dKT-8u]]G^q;A$1jj
%4C>5>naI(X*RWWpIUGifp;R30qKW@q#G`N'8?GT\?H1=bd:MjG:Oo-D;VNHD0]EVbQL[Y!FkU9=^'.U8/67A(cIDp,WmK7"kO$44
%OeGN6D6f[iCC\l,766DiHV>@+a^bu4"*[LcE1o@@[>q1;;VS<3fAr=/YE]0V?4J<$k/@2]<u"bDr^*`)[9&c7Kb7\;a>V5%J=g/a
%c*dc<G,b#*esr63(ufC'i(b!FFd[M9S.Pf4hb8(;G].d>9"14SY/]N'G+kO\,2(hk_oh:QM-#\4A^%o[KO3Tdf;]7G;AD9bB]hkt
%&)+)ESL+DNTr,f=1A;0QM3nXWIn5k?BLqD,*7$p-LX.I\9^beuO%eAjok*J%l;F`/a@TJtP.bZcl,?K+g2RWZhqZlMAucL*r:HZo
%OJnQSU-"'2kf?.]q7;Vb4kfgVnCL'*S6Jm:TCJR0.JLH4Cn=A+-NDgBrpi!tpud/$pRhH\n,MqP^\u'20E27&rqohgS_1DDqMU]T
%r87ML%tFWV^O,eJ^\Y"gI/<IgTE!A)rpt'unmB'-:O)Qii]e%+fc71>PFcSIQ0)@t;=qtl[s"BFjQ#).7Ou>T/H43po#"^]\XI_*
%_9=VkBIJGU$t1J<Dn0"S1I3E2d1U8Z-M?fY7Mj%c'RLR>G\E,qOTU-g#V,Wb0l4F!2PqSB<Rf+l&jme;]5d^B5'$ADVC`[j>6dp3
%eYCu5C)V@-pUq^3],kk]q.B-SYhplB6u^WrbX's6dbjf@E\s`*5(Z<CB*pW(&N!!p7KfD4^ca;9Zc4\',a[<rZPD^/*0Eita%C$8
%+cq7($=9Jb(*b`SrSV[\7NdC"Xd.Pk_(<1")SI>m5j7U0>dH73PhkF*DB(nE4`Z*[rMi-fh&sFq?$o&:cjmDY'OeMt<cXWhd*-$g
%'-Mp[j@G*0B'o9i0uU@Q>*?i$=f[-fck'>",@2dnpc21G-Z-k4,s!2n@`apZ5oP7IGV7H:U[^3<ACTte2q-\LZOPDmDa#Dq)08Cu
%_3c5[->u(42]lP3X`>IeSVci3-,=qs$'/!)nBC?.KPS!-(u%TtImL:tALWMA,q<1NC&huUGddZA`%E8srZXj<-OnQ4^5nAc^j+8L
%>>e94JEa%qHXfK*m@_[8(?&)J/]f;`kiPi$ImPXR\p)s@96m^;IcKlZSJA^ih`EK=q=0k]-_?_FWiHq1c$?B.oQOb(JQr8YeRo7g
%f"0Q->O58E@)rXVkl8N5SVIMdS,KuN"MZ8RjD@o<;a%0\&!()oq8G#!<%I?u`BPF]s7"m=n`=Bfp\!)6ARkTDUd,;[3*c/E:.kbk
%`?*&.4L1UH179U6?eoq!,8?'Z_<`14C3+MMg[K$pEh\#lIu3e]E`o1i.+>2h(&[kkX%[G9V1J,/V9e."D`dfX-i\R#,)lQ)RGl?8
%b`/sj+.o*b5Ps:00'V+o[h^re6k0=q<Rt+nEu7NeralrWOmLL9/4fYKABM/k7bKf1fIm-^6U/?^C"jAen^-QnNpGFAhES;aIs?!M
%?XLEP2RIP_&dfJt]9-/pl&dk.c:,V4J9?LnKGn$$R@UV;N7A2B3c3$V<1$")"8W?;%AkI@%i:l27<M(*a[!QdY`"Wh$_TJ)mg&YL
%9K:egg&Vpb9suB-43dK>]9^YBDli(d?RV/b<?GQ^?p5Ol#Ki$uQrX!QhE.oaLHRi-CuC_ljZ&j!h2dj`qe#p>&@ODc2YB8t@9&fH
%\>oE7h+N2_R%"]agOESSY9o&G#Fp-:@;sWq#dW#,o.$df[<>j[cQ"OA!gF/41FQF>$7$!;lRVu1&220R>6Km]_-kbL_VE9*<Ged1
%R/Kkb5tDUT>Z:WH(GTMTnMVRK?Lqtmk&m&bO59IVlbRH5c4t=<&$H:hs3.M0%6UsLrqXG^oAM&DW=TIQc'8Ir5C4br7=L8o]O1B9
%D=UuDcFAlCMluR>.S:jYGn[N?3@"?@9-2662>PJ_@]7`$JbJU\B$s^6I`%fd-G4'3;&%l\5MH'/AW@KfdEn'*Y$*-KAqJlm_8tXR
%5B>)BcD^KrqrX+r5;T?Vi/)a@-m"u55Dk\D)jBjOLrk4g5p;m>7#HgjFRK_+!FaWNpVOsT=\\D)EiB[CUb^.SHn<=i55@:JD!%(A
%?a!cT`(VX*fH;]@Vim/BA&BaAjL@M25[H%b/mdl=ojEEr[ES&7d,7akBoG;lB(C>0OJN*TY!'Oic-St=q;['/?[:7d=>bAK;>dPO
%Q\C':@UZ>U4hNTnIqIn),`+-9LU`%[B&I)6@;f(H8;ic@EKN\rrb=$"BgM)W.L`k$[g:1q\H+oLUT8X*9`)pAFAn8Y_'U00B=t)O
%E?(KkoL$+Ul+HKrn!t?^1QTkA]CG[_I/NDHqe`R"dLM:rV-(!?]:u+-K[BV9rS7Lr7&LVjWJf^>LpLZ$Fh<Oa.5Xg>!UR)8k[Fh4
%kR_XtUk@\$'<BeAhT+@^):uOZaQMGpp)L^?TmPsE<qqGoc3m_QR@/%J*hJj^h`5XZlEeh^p7?QmJ<2_Ej%[<GHenB/o0UdsJk4Lo
%f7"_[33aHFAo6?N.lbN"Q";G*?i&-g591Tmj1RhOi]TK8O'b%R-QKrhUpRD6/%B;"7$6=@=WgWgA0e+bnKQS&A"=C0%L.#EW2rPZ
%ecgpM'7f#ImsO?QSIUR-Gi-<Hrm)#?j&`CX-=8NW]#+-AQ!7(5c=L./M;&!;h_)i^EnGe"lA3J0$eE!?5d<PSZ=Q$8]:rf6-SJ(9
%]%>a)L*QJ+%>K9S83paO#q@T9htF7gki[`(r9:S-jki-SCuq(a@09;!cH#AoYT<m(7Q>_?a\Dl8d$9A1[pO'A@>VjY9.XS7U!71:
%k_GZ_S4t(8d,M2J1L=A_fAi2]FS/E77_neGLW3Ad);N99*`AQ)Y(DfrX[Z53[7Yn$MMP_c3J]:n'5S9]C+*:t;mf9D_:j,7OTPh5
%/Vn*eDI)HAe4fq'85#T..Kfh?O0NC([m.0rW7lcB:I4GZ5<j8W:T&nrGjiT?jX6qF8M?-#cH#Ao^h^AeYl;A1X7d#92$Ku\rc/S/
%^MKV!:eDI,M>Q<cqhMDjmYd,;U\u&c<@R>OZ>FC*f>[*&\4VVDA"u]a79=1,-BKZ!9B1jkp@CZGcKV_*&+?&+^\mTN&2*OtjF$1J
%3@/DKnos"Eb>s7T1oa:if91ii=7Nk-3?G#dq/<>8`+8s@n\itnII8H5IN_bj>#bJT[`1"AW"&?KTSgt)Ln\gIi^,>r(-s8Xh>FgS
%oIFS^F^M1>,08rr_EY\S@S$4dbg`kJ-RS"l46[R-btl\UVE'rJ&VmV2,gA]$A`R51Ko@VkE(RZ&[GYF7:1&b[4GjF#U8g.'m?S&!
%m8:nF`cLpiM01X3I&iIu49^BXo`<XoKUOCQN#^u&=bF5/ek=^P0KWn<(%rCsAk#TmLAAZ4mqc0%2Z:@HogX@WC/'!MpuDXgpnQ=8
%8(bMnjq,tIs,5*+_;e+53e53T.1T>Deeu^G(lSbRao6p8lTWBW#nVn4(1tW/5P).lkB'fQoR,!#]QYD<g;gC%?VKk3]D;_77($2A
%3Dm,a.8,T?AG-lZgT+CXg)C]EC5RBmUA#EY7%$0$gK1r52/7dtMqCmk)(k>"Hk(:YdW9-,(>#7Dmo];n7H#<*4Io6)a[4l>/`%W]
%:Q3'\psf5c^A2=ro+MgC-rSg\/]qWmY!s.Y1NBn3&_"]CE%HpZOtb$m=<J5DXp/0&8RTnf6MHT@`"EB=Yse'0>&2X=9Zdq!+/:f4
%D#tlbF:4]I*d$W-LWYP(8`B:8:.qgo4ZY=qf],p%8%:!u!T'2Xa%Vkh>e:+q%%Dl8K+pBuLS5?<LbOB<>s.Vqj`6FaV[>d^'4K_;
%&JYPs54l+(`Tb29L\D8&Kb>FJgrHSS]ts=?I[QO*?iIr%B`QCJdTZ"r=dK=M%:.=835t?3[;_CK/q4.kL*&e+=8Atdo<\uD"p7-/
%ZuARN?VL!1=()a#7qWH0<\WV$1Z&hTjW\m'RW!J15U[G3kosQ"^IDJ_V9O0f<?.+!9VL1AGa=<"@\0>FPEk8U:6\iOX+2b%lK%s$
%2H8DlQ:]7<?)k.5<KG77[pL?h=%(o$ag5//Ee+KeiK"Sa-S6W8/&dQ(89_7J0]_c.]%D"Rp7MBZDuOQ[dbcR3k2eg6OgLSnm"^eA
%B9RYf2+,P<LKT6nDE$LADYiX7hp(9>H=Wlo>CCW8..Xsf=1J]D1,+)6Y2:dN.-K>aj_bM33\idaEgpd]-B_XZlh/oqnU%@K^)]BB
%N[:,"\'H4[X?,+rmW87D8NAmk)IM5.fJ.RUYtY"!(Ts>iI7aJC)FOb\O=*"6-Ou^#M;)R&5.3Me2j<`S]8.B-:,D!0;u^+.osgpm
%]c'I`c.t?pFabu9ha*OQ6.C/"("g+%N;&)2R=N()l?fSt"n'7FfnII9kN=<+LZB^Gk":PJO"$FrUbQ#B&)F<OVm"?Ue$2<?^LO&1
%F!R8%X8aM:lfW3CO@(4'8i1W-TLbIRd:3M\B,.ugB2-[4XYqNAmG>;d+"KY5$)tGE6qh7]\>g)Ce^i0=V$d0a,mVa74amklS^k,R
%DP)R@lLK=Hhs7:&n\t7NbbI;/HFHgpHQpEj3PFoWXHU>(/:1cZB&5:f$e@$C?M-21):.6W419J04mMf1S)8^5+al?&el@8(#=6Je
%,T"5qS7mPkl[J`dgICWiAoSQL/dtEi9[t$a7sX5[L(*`LLi^BTiY9J?!@5AMV2oI7NrcBn3:PfH"#N>?`l['.p)"ojHr7?IZ-g1c
%U6K=F+gYWQCmC`(/uu4upP#,7V`@;VnN"]AJFQe5q4u9IY9f@m+Z'&@f0ge*)OH]ZXHfSRe?pba&YF,)c.['-qkDL63O%g\-SUlY
%9bFb,BS,G,?J$23o/c<;El8GU13r$=3ja/X?2n:##rc1>KE(l4Im$ZWQC!*9s6G1$ci3TK=4gjYl[N,Frq;i[DuU+c#7kta5&*h"
%HTqh;;<<@^;u<od&kR$,HbbV`b8Fs6LgV:q*$V\ig6PG$bL4i0UrdJpe`K"qWrVS[Y)%[\7:"$C5rX[ZEE[sAEd"VS'it!<J79tY
%j%uD6][X<c?#+7&4bNl]."T3/NkB.gEYkq'DI\U9/`C?f^:isX/0eBUC#I_s7,"26O*$JX8tTlZ/$K/g5_TJ/Qu0^T8l@I_ohFds
%>bZT<m3aajrCH9IF4u'D'>pYMi.1)Cl9XDrD"5?VDs"rP$9e5SZDt%B9j/@>PkOAU7qGDakh,1df*EgSkq!*CV@";Y=.rB346bhc
%ZOVm[1:o5MRL1M$9N$cA#07R)f'(YtNoE@O#&e]##dL7%W]PbaXLd*#,Qm82?e$4:)N5l-hP&JX]+*/M4bIO[O+@IU&(-YRH:Kcj
%FFbWhG-,*6-tM.3fLgogYO;$t3JQULW1"+YB!PIIi(4'g'RB6KNoa<J#-W>[[q6956^q0O3J"-FL"4b:4OXQY8=)cp9G]D)Cuh'D
%e,QJpKt1TBm+(lkX^9e"aE5P`n=lu<i0*9;6o\fm#>YI+U!\TqXG]V3-ZI..ajWVX=*K!Kit8pDPSTm>8E1I'Af?B1(t@sh3uW^C
%=`G[fJLJK5)SN`6ah1c`$._(q/((jqL5C^iDAOC2!lh9II563E5tNF%d7LATGIq\MgjgalFZ@n<*+bI[UW7R7U]n.=(.p?Q)Rlu1
%0sjbFIW]>rl<Z+r56C"M8jPK<BS.e@UMuW;R;Ij`Zf)CthIL&9)DclolG_S6LI&@E<T^!$SS.J:kj4f!PqKV\s+W)-YG#j^08C=1
%msELHeX`l"_6D3MJ]1BNE4B9dgDr^9%Gr_)`n%3J'\P5]Eis8/B_1LQ-bC+%p=4H3!$Z!,\Z)5PE]3hBPfn?o'\%t>O[f3]c5OC+
%f-uT1^jIE0fOt(1?!A$I,K\L>S_3'S$1SdhO:m!dZp:phZW=9tG'1J:n=na["i3h_EKMWDpUWo+?qDIK@G:a])2&3);4KIhFg&.2
%MPO(;7?HIlenG2$SaOK9jiNU&gM\qo=r>V/M7`<1kbYu,hL7m-XYI&ghO1Q<&_/nX,1ZaP[4Nd[8I4g#ZtL8**aG4p&[[^\GUI-+
%-c-a!JF&Z%/kIM]an3tKc-t/*";\ppf$3&/kLZiPYDQMVh)p.^+5X3FDNEOK#"1dsQlY"9)VLa6<(n@1HNjaR893b,(TT2T4),-V
%k>bM0"Q\tBl_#R=,kNGtLdrnk)?g(JgX?W4LQ^r%m+S.X&eVi'I3K,&<YXV$gS/eN'"I]dr3hLZ*7j<op++o`q`=@6Oo7n*C+S_O
%qr+lLYud.S%Md#.!S4F6FPV)/AJp&^?CYU'+c`[RomH_d=l;o)j\r[A>K/A6/%'^#EN%mQlJ_(KY%Ai%^(R9/(@]IVX&jN"eB^72
%PGetED^#mG.s5@m5V[mJG&jN@"<Z5]s5:$h"[W'QD-l#\?,F5=BiW;oYjZ4::1F(rP)X;7<dGfQZ>&Jc&bt,soNZ=o1H@:<EMlY>
%R)gRq0.]C]!X<W-M(dp""spGI:J)Eso@5AQRUTu0\Uq.WYO6Q,"UrA9d3g+9a"1J"`4i3U">d6qWCp)oeK)69M8PCV?J98l&uEmK
%1mEFbWr8S'HM\EQHJ*YAiXp,t7n$+FJ5h(Q-Na?E>.qN%MaC9(o%$$$]XsmU98J[o-i%T=^4#Zh3G8dB-jpk5gUt&BW7Ppo!L0up
%B4f_L7felQ%E"?=(2inLpANN!ibGEaZD]+nU",(5%83/B"kXUFFPJ#f`JRL=QsC1-P.+:FXNOjl3lXOdn(R5CX^9iN`PHe&d_6]X
%k:TZhZ`&uR*;&If:!`8g_FH#Z9:"k,7PF3&<i6sI2+G8c5l7h//@+"s>U7gNdLDR/^c5V`R-`,Fp.;;$GC(>?)5:*TN**Q3`[r28
%k"&J>#J/ZkH3mEPe[L\m:6(<?h<?]^s%4[%kIGO'Zs-46+Mp)?SMK>,6W[4iWg$XalcVaNmPI7'7>0W:Q;Z':CC_5JLLq['&]P9_
%,B@p^k:RKPJu`r3:0P?BgY"IG33.=a(gd5"ZfRl0W=H%nm-14uf=t&X$[2u$rmCitF):L.?6_=`Bc-'kc$irV*U+hkF6#&8S,mB9
%"]"B&H#3b>*N_N4H>0jl2dgi4-Vtc8ZZ.XT4LW.Cfq]/*di^0a1&('q?5m93Tc.s\Iu59TepGBT7Cjd/,93!6%N2kbT>RNWo%KBX
%pKPL5$E%fZP]#t<&EEi8$7S8/-,0YcCFhs#J6bsik`G/8d0isL4rp@m,<3p!Gd/"(a>"&l]Slh@+]UmBD(/@C5C&,#Bd41d\QFC"
%jrhP`PE7/q-@juI-c('Eh)u9f<ZM=+V.&u&*5K8JqRj^l"kn:3YMP>P]GuT+k4)/7^]n\W_GY!HU'Lr;JXF_Vq\Bn$<e\ig<An3N
%_K9VeX/G8":P27fkZUVrhAb*X.rVJB=':gh1\e&\nA'p]OoDnf\7Xd+`N-TZ1^W?0DUl`%J(T=05gU'9,fo.CU+/7%;cg.]nXmsB
%YCas<<\Nq9k$kj]hM_f`FYu,jejWXLNr?8qD$?s5&j-GB':#.i(T9GSH?HFC$&F0u$=!V=9Ap6Ah.&G*6uJsX>::K\k;.hXUt*Zc
%4^i]Q@\k(ChX+2aq[qWr7][&W<5__Fh:_76$"._T;9@bKlIGjiOt2`Z1Gr-[*^>?SEXQpql#+@UmF!-q\jrrr,?=6tB,A,RU=%/r
%h'28h.HiqNgYCUaKt1cAlu$V[.])KT$Qo\EUPlpLa&]D3GDh=l'[&L^\l%>7>*4^e$<+"1loKN8R6'b^M/u317=J!8]tE5[0MY/?
%LbLCJd4/[;/L8^iIaof'NuKL9o^S)gQ0"*7cJ#qDfBYiJD^(hOm(k*mZUS=*Gj?V4T\REQ4K=:rY@6sm[!?r#]B^&;HAT=oH34Ab
%!l[oI(W!A.QmH1Bf]uk\B)jcYJg/6)YO8hIiUDCm/91#6E`]*l,KE@ZYnuRikr+DM&O[r[;'Qm[R)?[ToC>Xp9!fg_H.bM-kqrmK
%c"HK=d:B^VJ2shU\;S[:]t3,!.QnMp'n<[g4T]#q99cIG@#@Q]N;/'K"i.0XSWFo;i9Wh3QhS)r]Gd4826Inf"%ZW$;jan52Ac&'
%cA>X1:TF@J?uMn9nYF^Yq`P!74'Xp^Aq`cEg,E^29G5[njkcDa2dKlc0j"rQ-)nc:Z.3XeID%YQRpn:L^^:tSaj)A7g#_-+.YO$A
%U:RfQY_@D0m*Y6g-8k!FL<4oc+"<m>pE#"#e5+%"!A\!s_+*]XQN;WJ:K>tA$_JMUFGU$f:Mns]%KV^EB[PPWhHth<3dJ#rGVrG`
%>'\@QH<s7/hG\8RRTUqajU;AoLKG4kJ5<TuI)eT'Pjs@-TK.T6:+$N$0SmIFZcZ1fb%%IQ-Uo[`"`C"A9@!ZTJ:-(k'mbp,]3cY&
%h/AB>R6eHc_TETY2@_k/T=n^G);95cPHo0D?ms"X5?PFbgI`eXZNT7J*h*$'iVKBL5dRE1$\RfR845^Em+]'BW&.FOejZC$lo",q
%$\]MER:E:!pR?QF]Fdst1Ik$NP[`OY\307qG]31*-]?pr!U([#=p,#CB_CY>Qc7Gk3$U5'bn305<i>].'[[B&(+'0ggUW&q"_]O-
%ogtpFG8oM0bpr[64!T"$I$'De%sep1o$sOd8<HMGrjkIt=8,oK]sF/F[`ZidFQ`WRd2>qNZq@eHXcB<dTZK0-p$."0Y_tDP/CC$Y
%fps"7l%:JZ=sQD8]HQTRek)sD#U*<pArWJ=(QDbXm1qmC;3a34fkqcqj3d6gV.J71L9f\!=X/to8CtQ41el8!]t3+JO;599NM_eh
%8DoU(*dQR^$O$$m1^@e%_--IFlFs%ga%!9#2Y*,4@MMJ*8=oVCc3PMQ>Jk21JjD<j?opC:#%rRr:+AE,XDqqHnp[&\7/;W5C2e:I
%3[@d-Z%ALAgME@"<F3QJTt:S-H\*qI>.qN)?%o,>I+Q66KmG*-D9S5D*'/Y,_8.t/q6i/`<=mqA*WF^Tjh9N&e7T@Pb\),g$1(>)
%V#9GG9/ok6S#&MM`c/>iX7GQrR_65XPAG+#;En\1/eRXY*<Z1de25&SpU1qQ<HDjFnkOCeM\//DcX6=@73uH*o>hJu_Oi0u7'Z>(
%"15]:f]pHS*lS%4cjd2fXQqQRjdW+eO?j6^YXHFqk,fLa+I/]l7.f-sebo]W-T/C7[EjQlBot$^SY]T?n%j$ne?#EeXO?Zf#%dr'
%Z-d@!r;lV.AEq't2K%'EOcJ.Z3$*HbkG8R%qaBF"(Ktp5TH.IX3&FO"H/HIa]kQ((G8D&X+:bW>8.8o7dD1ib9%c)Hl:6d/M+e?B
%Ag]m+DrjPUM0T6G'NWJt`C"r-VULgFo>1c9r)Ne+5hT_(ZX0qLUU\MQa24RSFDO@5&Sh3[U?n=aTE?A5<$*-K2I_E6Nl[Vn&i#uM
%HrfVf5W=pfQkmSq;8@qnBZJ);T./O[DMTop1/i?Ti5VLVhX3eb')3i;!"HOm]Q[aG@2`Ic-X>XPn8mFIa$tRHB`55>E.BFOge*0s
%f9%^\S-q4LV$-H'&5a+=!!;Yc%(m5CX$`@XGIk;_/2P.\A2M@kU5r\9Ob9*A8g0@c*Yu4j$C<3eYN%(P<\Nq9<!#m@IeF^04JXd8
%O_[`q,)XmWh'j,D*dQK`J&sUkZ-fVa%;Hsm4):)GFpfA7R[iXQ>?fKA32"0u.I3*DT2\:5E1F:]H,%6;0F5.E5Z!jOT#Gt#.`X0Q
%d!`gE0kKIHh1+d=]TZC"mPiGf8q:clbHbbI%pdDp6hu0[J7]IV[Yu0g$a(i\TUC.l"DKs)H?I!sCJS%XB%OG0*T/VtnOpASC5JDh
%*7Ve1!q:d0NBEama&Xk^pBWP\T_R.dE$6qKMf--[!9l8X(W!0c],O0s[%[$r(\+3DX#l<rIWB742f)pDDL_e";\.QhN)K)4s/"!\
%.2fEh,Ch:[G3chYoBK)'$*L=T)8[OGlp2?(/1+:=&HGP[[3u0e9%A^t^;p>Bad4s,$bpBJnpV**ap^>?Afs4kc^8R3cbQJWQ5Xo-
%#R&!:BRX\=09mZ#D"[(BO*MroF`[])>+[0_6!\B?g?!/kOinM;ARC>,Agp'-P?'@*pTUP5EgJd/&YN\@+);s9K.f)Vot&oAJgTs]
%cEYWPH]81FOr<"6P)&7>nM6k#7oLP2"X=Z'n+<gkCR>K#Whmo5Ut)OCNUebpP_<2$WlaWuX,of)5bMXogPj9[C/B@2Asd&$6Y/.q
%)nio=c,mKVXR"GC8]3"R+X>r4?I1l'Y'6+`S6@\8NCZf(C\?D1IfS-23:$s@Nir1#pQP2\FeQno4H]&[-LAes87Vr#prTGkM;;I$
%X2JPgA@G8c>NTVdqLjhpE-[<K)+!bpi4\_cR#5*GZN<IMcFg8r5K!I\h',4IQ]83"WN..>9C05G^T^g"-%/+FVl@OAE1GHn123MP
%$8jb@%h;4=?HbPPE?GrLgNTh'E/LjY3a!g<RTLE3/#q'(mqCu#P\kT!1eXX`NjOurHB1dY;JEh'p*[1\O`I7D/d\Rd\Zhp@?iVP\
%3J[IG9F]]nkoN[WkUg70QsI=+?V]>QqXOEYF!0r]1^'.-RlX"r7ri)8G1ALUb@N4<B1^(`eD,u8SBi+e]\BdL^`\b5>h.](r,BgN
%T"pQ*;[gIiLfcVEpX*"Z1Lo@qkiLWl`=1\j%SdCf&)2YfV/m)rYTaSrjj8pcTbM"tGrZr"]Xl]R7r<1e$2A>->&ZKD-:35R=/Njf
%5bl]L9qRX$X/!NDNLF@XQhPh_@GYCJ+g9A<037>o,$P.W>kotf#;tJ[/E9=HYCk_k.F#n&0CH9O,+9Dm*D!'DKK?RtLPecAq`eG4
%p]SqIZP)HoeYf1R`!>apqJt0Pjo$eYVF+tJ0"(Qb:G<jkIE<oI`N8"<d;:tBs.K*?a#6Fac5OC/gKfXNaDiG/8-C:SF@3q%3cB;+
%n%q.(ct@*=G"$<2!'Y,hl<^AD4f(MZkQ'?dP`=`ij&:JTdZ+KqFQNQsO<@^tU<,U-H?m8\!(V"U:87"mn.3>8;6+-?$ff,e]N\&U
%0OAG/WN(_CYO6O&7NSIMc!h8a[p'[gWu3q.M7)/4;['C,D_h3B6+'.u]47=spNhbr$6G5K\"Lm/rETF17rkt@%P[cB(n`'u00R85
%!Bml:H*>?._>MKNj.oud&q5oR>p-/"SuI1BZ&<DaVNY&amWU*T3l&naXIPCs%1s[g8aHub9'kM*PgAW;O%9a#Q6MGS[X!/%>K!It
%5[\%tb'"f@M5\Pt!;DD0C.u6C0cBdQi6tP\ntF1Kq](GOE"Pe5&n]UHXbq1j,V9_@5doM^UmZ279=fbEc-10_<j1oboqlP^U';Gq
%0t9MS/2S%n+*rje95$C-g12gB^241S"i/[4FFscS<3g(B;HBQ'd^3lEd\Ri1TNd2S&/N4?V1P+q2Pbhd/nu1P8V2[`K2iCYXmVDM
%=]k,.N-M`jDEob).V@g@FL8"un6&5g<L&OthN*_a2OsT5pX?<`[_B;o7>2Fa7rR^qE!5Rgh,8dlH(eS"7AtG?Nu@#5Lc-CYl)^:1
%0,2tc-'6,l%:A83f1]=m>b^t[Z9Sboh#;uN`L@8KZJq*2)'r:D78$j1Mj7GhB-1k=CCj*=<?L/aaFHBeo]lbKQd,YTSoDS4\LGqn
%9p/LF>LsIl#:N#fBDScX"?GLG"DSK(OihP_>J7],-:d31*8.Is9K,6DAFuSgJSp[2AUh)23TP90Gn*r=n)^Xm&")]3lK-Hl1"eYm
%oQRMB]#XnPfc#nNELU_c5uqBsT'J$J]tE+M)7q,`S*K^IR&f@b'UPN04ft_q]a!0%phK'^fWUe<En9C7]q3c:qMis_lcs69FPY%t
%97dTb7Lp6]MI-1')f=$'*ZG!-DEHE>;gP"J(?0lf[+.D]iEP86\CE],HF4q1@u4Hm6^sEd3pJ?&?u#%hCqq@LL.#1aBSl-bP\dH+
%Gn=(c6QKGYp@?Bb5@C4>Zc2T#6Z/9*?i+eCOF:lJ@Kpa-!;pgq]_XP[9a1P^*VJNqeIUlQkA"3JG*G2c&[U$B#`;l))PlB#IbPu'
%&iYn;`<LVBjp-]X#B7Ju;t"To<SW0&_TEQq-[EYKOYk%bm4G-KX`6FOdHK]JDE`7:?>E$0-9G<8NVB:;Ohe,j`E_!P3K]E,p6WI0
%oE-GPb/-DafOPU"AtOIWkXuU,$U+tcP&B*IdWm.`e]V*j+4+kOAOStVDL9;Ojq;3J7hp)_'$7[i\Mj3MZ.0BK[qkRZC0Y]5G*F[q
%`&Od03:J_=&-5_jk]%,*h*[qZctf,"Lgih[#eFmJ"3fq"&FS?SlZ?=flbjG<IAKU$f]i\i,D!=>2e4`TRbdlf"gM4u1Xauh[ME.=
%#2r%#`CZiVG5D@kn8.6!TY!.Q&A:gm`Up24rlqfKasb1%W)m.a!58t]#gs@;9V:>06oOV`C.#/1Ic:9f2:ZppJhN&$7Ot1EIO;`>
%6+b,mJ4ll/]ss5%I-<Iof!S(RGASXf-h>=9Mr^l%IF_]Z]=lI/A]7Ed3LU_s=qs>34HPj)GkomalIr&/>XA]H=c55","]E&V4*M`
%rk/&XG5gPO2c_hri&a=)[C-oVmgSg*d_*nTh(QGnrMe_oF>HnlhgnEVoa/;GSXTlK4c@O_/Da`'K7'c]jX@\S?/kd`c(@'u^MFNr
%.^)iKF].On.htX$g7OJ%aRt[4[F&]>/[dPndp`JRZKk"s_8f$KmP_'%-`B%^++emYH0D\BJc_Hs?C[<=9/Q#fCb!4kID[A4NicXE
%ml\9?A*0<0n.2\@<JXWnJAO.;1=%]k';pHg==&Z7J@GAqf':fa:4Y'MG:='kD,<Br#3P1pFfNZ&4VIu=K'qImb)Bd1eoK4"ja@WM
%'$0H(WPg4cF$p[`6)44MOJJg9RUV?EB":ItRG@llj&rEapDZd,.8"\M^n(UqFVu'*:h=.jd"6nelu;2dGmT3nBbIu"=f^0JRk#S\
%9,9P2B6V?F):?8Wm?$Q_!7/5N#T%D_nN>3k06GU8dEB.=OuqUsM.-nu@fm0j/S;k"l_aEQh--PA-7Ius4\E[b3qK&ib<*C*RR(ss
%K[1]tZ;%%(\M.*Cr&\`SaWcMB@sCDu,#@RXlIGk$dtbURp8NLRcPPfR7remj!)_N?,Ck`$!h`Bk7fMsgUR-2:L/2KnUEdX2D=php
%EPl\CX+\hc"RNDRD9\k6%d1+IX8@>*0`gQT7Uo:S9\ZljGR.qZ9_T05pq&;D"H2OZ+5=H@f+CXZ,%AuQiPUOn0;:EgC74@.EN[Sr
%d/6I^QhP`mS3!OX=-'$c/&u`h,m14rUQrXG]hJ^km`Oe4-)c@7Z.5oP%;K+Fpt$I]);ur4p+J]F?@r];Kn3L?qT]PPdb*5Ci/:Vh
%n+WP6#$U:mV@!*s\;?<5.G^u[@`[jeh2*1$USP@q]ag$.gZo@u_@lrNjoEVoiM0-4ga;uY`i?QAOdeM(nOL8k"mc8NZ4[R1<>!F9
%Le8>?pN78Q"Re;gKA`NXH_@"_Q1:loUp3X$EcD@cW"gD;q9/F%rVn>+rG=S:qq#7e,cA(pUrT]0RjbZF<J2_j<HsT?bGAKFA^]p>
%me;L**9;Z&1;HofV;F!Ue(d^aC1[Zi45q<m8I?ct&pA*j*1)lgjA;($foV1hY%CqCE_eEPQKaAVMtA'+(1[qi?_0KM22c#/PY;.H
%9P;2lXd.7<19kbb?Qe[A])0dr[e@4ogCbHV'()dNYFi(,3XmY8"DVCoiMQ5l1mqBWs"M[BJko#u)aTQ&mS=XGAdH*)ZE$NEdHK-:
%-6I$pTc:$?Xf/+sl-brQcG$Zo3PReC*HeUp^7D#3c_8aeHOXN#qmYeeX4s:#.H[gA(KCbj=YrY=:H:qNa:;L.qlJ2G]8aJ1D)7q5
%;b93#%G!sIS4PSukQf6%a^LA9s,&9O2,SBo3CV4s]tE6*?/QNnhuG.+Z$n%sX^Wda>p*2VqE=/u5e!M@KDck^*$/:s]&3D0le4VY
%buiqX`?ZcJiW:-fB(o>bA:Ij9=f,1&"j^Ac]&--`'6*8kZ,-fgZ>%M@X?iG3Wi1PF^a[=r2)sV;e2/\2G\m'DIO@X`hX5;15l*2.
%M*+:*Yk3kP%=F>=:#5O;Z.3Xe/ME(JW,,4Tr#Em&a?3_+Xt!Oq]8M.cVAo:>qOa2M.GE*XUK;YdQ>S%KQ\'qXMciP.EjNLlHJgih
%aNpA'/J&4?maNDPqOu0W4.W*!Lo][:\M@4;Q6pCM9:%<?=NCo[7e!!@PH0s5QhikRH?Htgo:2BE1&5sCO)Ve3/U/RL?+YpBW:NRN
%Yt1aCm4[;hiS-7Dn$E+2U9g?ZjF/?-hP*un;;7=4)_ia_q\GOoU=H=A%917C_QB8'Rlk*5FKGcO!4tBgnMKL!,8L./k1-#/)42Tg
%T50C7G$eLgD4<B<kl3[a"1)/d^iu'1rl/Z%3G\9XDC=C671L@rI*l"M9EOioYj<!FT8?!4&Hj0[:f'ic,2&[;CO?!iPL`dVOqNoc
%(YBWa8+qH#U2RlDmf2W(Y7t(]5A^J>2L/d7;ak#PoBV)*;YYjNY#,F1=E=^s8!+]*fOV*/EtIC9M-qlhK:AU6E9*]i9cFJT;TGP%
%ZC=ONogs8oX+E5IR,n5!Y/YA%)<nHD?er%WcDtB_k#nbT]`umu+tA_BhQ:2SG;hcA"qju;/TYAq^h.I7edg.&4DJ/igM.u/McTMa
%$]N+>Noo9V27k7Kg+!UobHHGH,LTUX&)>*]?=j3Se3kIYipPuRcT5`@PV.@X'\%cjqe:uRdE0AR=eJQ'.%Z8YX-b=&mT%1><R(^b
%.>V1-ps#G!BLML[k(rkhDaXo4]P*DC39r82P@r*'EM0:!l%N#eGs!g,`+>];B/@/llX\eb)Z[bQK0Mqk2_\mb\58OBr6)XopF1Ep
%/NE2!Tk4`eef,7<1!9;_[6CGBrkE`(XXYI/.,_%.-kO\+^-02[L8:eXIaS&5Y[Gn@F1KU2EaF5[g?[)E'nSe/iHN;'DU7=>FFM$Y
%X-oUiC068jc]QJ5!LC>%m^76Ni`IT_R:as!QR>b%b>CHFOjd0NJT;Iufd.0UD7"6<X2<,1MF*n=E@1=\LM$X;l$p0'>b*q%o:b+!
%kiL![,7[6\a-_!+=Dq-sLN1M\0-Z=O@r"bA#iJ10Pj"Mi+7R]#*RkXE-$590M@omH0O?O&GEKZ.Xpd;FPLW_dm173`DKF&_F8b,9
%lAlpNICf=g&`*KF-nbm<hTY;UR%+#fNL._RZ';_%'A3#m(bUFK@K-&N(HZRgl#EKrBK<YWpfo@$pI<!u\(poqYRpeN\QsXEiF:b@
%qF8W93&Qr^B,JYmLo)O-(pc)M],Z4!'J%6^@iG:Q_*t*k\cj/U>Vh*3&%?2Q;]g)hGE4[R5T]m(N*gpO#+oIlPbd&E^GF+,:iY$0
%-eL+k5um:jX\EbE=(^b?L[!8X!^l/"pb!;H)6.Zgc[hUc&sZNe<)?[).2]mabS@uk'UjP27(GRu4c8P,Y4#'pOKP+)\,e-Eo&^Ct
%!bTXF1JhJmS9=GPc]j7L3.Uh<Wn$]b1!cA[&oG=cV7nd?cPk<'S?00_<o)*cb_oQdSm$J.Jl]2L+e1E]r+O$#BJ^X7m#@H1SBLlU
%62UE,4p]j'%2"4ZFTaF+`gGVkH0G/jKMo22-RUt+br>ebj?#`L\D.qo!19NnF7cT`<sfRUL5YXM8&e7,'3;GOqhJD&MJ@LZ,J+^=
%9\)hn:M"[7G5'`5?&,#l#OiMWa3mPk$Rc3^2t<ukG=t8l9qh"/.AG`L(OE:Mo>D'?rLSG#4T`m$TJa-X9qH`.7IVSNYFSeFSabYb
%\ktnCQ9[)K'u`@3YiONO])V_9mJHN7J$].Df>%@?msk5pn,DgW?gSB<rEk$NGJF%4s7"dXs+fM1iL<(/]79\ElgJ//qto8\L]?fB
%g&L^8GCTDD5Q11<ro&&Ss7G4KnR(eh5FOh3p=m@]O8nf1J+imEJQ!f6~>
%AI9_PrivateDataEnd
