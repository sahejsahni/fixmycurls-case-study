%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_plum_bw.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 672 443
%%HiResBoundingBox: 0 0 671.5972 442.9361
%%CropBox: 0 0 671.5972 442.9361
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_sliva_bw</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T01:01:15+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T01:01:16+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T01:01:16+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>172</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FULqup2ul6Xd6ndsVtbKGS4nYbkJEpdqDxoMSVAeQ+fNTvNQ8s6W/mXUTZSeb&#xA;Z4bPTdFgf0oLOG6IDXF0wKy3DQRsCwLCMOQONN8qkdt+rZEb7PX9M0+203TbTTrUFbayhjt4ATUi&#xA;OJQi1PyGWgNZROKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;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&#xA;2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:4F26132CD4E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:34A121C7D4E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:ba492ebc-a6d0-8d4d-b32a-6649e23fe073</stRef:instanceID>
            <stRef:documentID>xmp.did:4532F49441206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -442.936 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 442.936 li
671.597 442.936 li
671.597 0 li
cp
clp
[1 0 0 1 0 0 ]ct
183.452 432.165 mo
152.323 432.165 121.948 424.008 93.1548 407.938 cv
26.6978 370.848 28.9204 288.297 29.0454 284.797 cv
29.0415 281.77 29.6626 205.672 83.2056 156.719 cv
124.784 118.704 174.952 97.7622 224.467 97.7622 cv
244.116 97.7622 260.206 101.36 276.772 107.985 cv
277.456 108.208 298.522 116.235 311.795 130.461 cv
322.514 133.075 368.147 146.758 378.131 192.395 cv
384.155 219.946 397.733 314.829 319.374 378.934 cv
276.823 413.75 229.819 432.165 183.452 432.165 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.27451 .207843 .145098 rgb
f
34.147 284.985 mo
34.147 284.985 34.147 208.485 86.647 160.485 cv
148.725 103.719 224.647 91.4849 277.147 112.485 cv
277.147 112.485 299.647 119.985 308.647 134.985 cv
308.647 134.985 362.647 145.485 373.147 193.485 cv
383.647 241.485 382.147 320.985 316.147 374.985 cv
247.397 431.239 165.284 444.504 93.1431 404.235 cv
28.6431 368.235 34.147 284.985 34.147 284.985 cv
cp
1 1 1 rgb
f
106.147 314.235 mo
106.147 314.235 105.772 319.86 107.647 329.235 cv
109.522 338.61 107.647 342.36 102.397 342.735 cv
92.6704 343.434 87.022 332.61 90.772 324.36 cv
94.522 316.11 106.147 314.235 106.147 314.235 cv
cp
.27451 .207843 .145098 rgb
f
82.897 321.36 mo
82.897 321.36 78.022 344.985 95.272 349.86 cv
112.522 354.735 110.647 335.61 110.647 335.61 cv
110.647 335.61 113.272 353.235 99.397 353.985 cv
85.522 354.735 76.147 339.735 82.897 321.36 cv
cp
f
99.1431 320.985 mo
99.1431 320.985 95.272 324.735 75.022 334.11 cv
54.772 343.485 42.772 347.61 36.022 346.485 cv
29.272 345.36 27.022 347.985 27.022 347.985 cv
27.022 347.985 41.647 356.235 43.522 366.735 cv
43.522 366.735 49.522 370.11 54.397 362.61 cv
59.272 355.11 81.022 345.36 89.272 341.235 cv
97.522 337.11 101.147 336.485 101.147 336.485 cv
101.147 336.485 109.147 329.235 99.1431 320.985 cv
cp
f
16.147 355.485 mo
16.147 355.485 15.772 350.235 17.647 349.11 cv
19.522 347.985 20.272 346.11 21.772 346.11 cv
23.272 346.11 22.147 343.11 24.772 343.11 cv
27.397 343.11 33.397 343.86 39.772 353.235 cv
46.147 362.61 45.397 368.985 43.147 370.485 cv
40.897 371.985 34.147 372.735 30.397 374.985 cv
26.647 377.235 25.897 377.235 21.772 376.485 cv
17.647 375.735 16.897 370.86 10.522 370.11 cv
4.14697 369.36 -.353027 360.36 .0219727 356.235 cv
.396973 352.11 -.353027 355.86 4.14697 358.485 cv
8.64697 361.11 14.272 357.735 16.147 355.485 cv
cp
f
24.6235 374.223 mo
23.8267 374.223 22.9126 374.067 21.6001 373.833 cv
20.3696 373.61 18.7329 371.012 17.6509 369.989 cv
16.0103 368.446 14.7563 368.317 10.7954 367.86 cv
6.88135 367.411 3.65869 362.77 2.59229 359.211 cv
2.93213 359.465 3.30713 359.711 3.729 359.95 cv
5.01807 360.688 6.44775 361.059 7.99463 361.059 cv
12.0962 361.059 15.9438 359.7 17.397 357.989 cv
21.147 360.489 li
18.4009 354.735 li
18.147 350.985 19.811 349.965 20.3501 349.422 cv
20.6392 349.141 21.1665 348.606 21.3071 348.606 cv
23.147 348.606 23.6274 346.965 23.8032 346.344 cv
23.8618 346.165 23.9438 345.86 24.0063 345.778 cv
29.8384 345.805 34.3267 350.571 37.0923 354.567 cv
42.022 361.692 41.6743 365.903 41.4517 367.028 cv
41.2876 367.856 40.9751 368.313 40.7485 368.465 cv
39.9868 368.969 38.0884 369.461 36.2603 369.942 cv
33.7056 370.614 30.811 371.375 28.6782 372.629 cv
26.5337 373.895 25.7017 374.223 24.6235 374.223 cv
cp
1 1 1 rgb
f
21.8931 352.731 mo
21.8931 352.731 30.5181 362.481 30.1431 373.731 cv
32.897 372.981 li
32.897 372.981 32.8892 359.981 21.8931 352.731 cv
cp
.27451 .207843 .145098 rgb
f
25.6431 351.485 mo
25.6431 351.485 34.897 359.243 37.147 372.239 cv
39.397 371.489 li
39.397 371.489 37.147 358.985 25.6431 351.485 cv
cp
f
41.897 347.235 mo
41.897 347.235 51.897 346.485 56.6509 357.239 cv
56.6509 357.239 54.147 348.239 48.147 346.485 cv
42.147 344.735 41.897 347.235 41.897 347.235 cv
cp
1 1 1 rgb
f
107.647 292.11 mo
107.647 292.11 169.147 152.985 310.522 136.11 cv
310.522 136.11 255.264 131.106 188.897 182.481 cv
122.522 233.856 107.647 292.11 107.647 292.11 cv
cp
.27451 .207843 .145098 rgb
f
66.022 373.11 mo
66.022 373.11 94.897 409.86 155.272 416.985 cv
215.647 424.114 285.659 399.102 329.647 349.11 cv
387.397 283.485 364.147 180.735 364.147 180.735 cv
364.147 180.735 368.272 287.235 324.772 334.86 cv
281.272 382.485 213.061 406.59 171.772 407.235 cv
100.147 408.36 66.022 373.11 66.022 373.11 cv
cp
f
141.893 235.235 mo
141.893 235.235 169.897 238.731 182.393 264.239 cv
182.393 264.239 168.143 239.922 139.147 238.075 cv
141.893 235.235 li
cp
f
145.897 230.231 mo
145.897 230.231 175.643 233.985 187.151 260.985 cv
187.151 260.985 172.397 234.735 142.397 232.739 cv
145.897 230.231 li
cp
f
151.643 224.981 mo
151.643 224.981 179.397 228.485 190.897 255.485 cv
190.897 255.485 176.139 229.235 146.147 227.235 cv
151.643 224.981 li
cp
f
154.643 219.231 mo
154.643 219.231 184.151 223.485 195.647 250.485 cv
195.647 250.485 180.893 224.235 150.893 222.239 cv
154.643 219.231 li
cp
f
159.647 214.731 mo
159.647 214.731 187.405 218.235 198.897 245.235 cv
198.897 245.235 184.147 218.985 154.151 216.989 cv
159.647 214.731 li
cp
f
164.393 209.981 mo
164.393 209.981 192.155 213.485 203.651 240.485 cv
203.651 240.485 188.897 214.235 158.897 212.235 cv
164.393 209.981 li
cp
f
168.397 204.731 mo
168.397 204.731 196.151 208.235 207.647 235.235 cv
207.647 235.235 192.893 208.985 162.893 206.985 cv
168.397 204.731 li
cp
f
172.897 199.481 mo
172.897 199.481 200.651 202.985 212.147 229.985 cv
212.147 229.985 197.393 203.735 167.393 201.735 cv
172.897 199.481 li
cp
f
177.733 194.481 mo
177.733 194.481 205.948 198.075 217.639 225.735 cv
217.639 225.735 202.643 198.84 172.147 196.79 cv
177.733 194.481 li
cp
f
183.553 189.731 mo
183.553 189.731 210.842 193.293 222.143 220.731 cv
222.143 220.731 207.639 194.055 178.151 192.02 cv
183.553 189.731 li
cp
f
189.12 185.477 mo
189.12 185.477 216.709 189.098 228.143 216.981 cv
228.143 216.981 213.475 189.872 183.647 187.809 cv
189.12 185.477 li
cp
f
194.053 180.731 mo
194.053 180.731 221.342 184.321 232.643 211.985 cv
232.643 211.985 218.147 185.09 188.651 183.043 cv
194.053 180.731 li
cp
f
137.346 239.735 mo
137.346 239.735 164.862 243.02 177.143 266.981 cv
177.143 266.981 163.127 244.133 134.639 242.407 cv
137.346 239.735 li
cp
f
133.28 244.235 mo
133.28 244.235 160.147 247.282 172.147 269.481 cv
172.147 269.481 158.459 248.313 130.643 246.711 cv
133.28 244.235 li
cp
f
130.456 248.985 mo
130.456 248.985 156.506 251.946 168.143 273.485 cv
168.143 273.485 154.874 252.942 127.889 251.387 cv
130.456 248.985 li
cp
f
127.385 253.985 mo
127.385 253.985 152.792 256.825 164.147 277.485 cv
164.147 277.485 151.198 257.774 124.889 256.286 cv
127.385 253.985 li
cp
f
124.772 258.239 mo
124.772 258.239 149.053 260.985 159.893 280.985 cv
159.893 280.985 147.53 261.907 122.393 260.465 cv
124.772 258.239 li
cp
f
116.225 271.739 mo
116.225 271.739 137.428 273.942 146.897 289.985 cv
146.897 289.985 135.143 274.485 115.147 273.735 cv
116.225 271.739 li
cp
f
121.198 262.485 mo
121.198 262.485 144.663 265.051 155.147 283.739 cv
155.147 283.739 143.194 265.915 118.889 264.567 cv
121.198 262.485 li
cp
f
119.018 266.985 mo
119.018 266.985 140.709 269.282 150.389 285.989 cv
150.389 285.989 139.342 270.051 116.885 268.844 cv
119.018 266.985 li
cp
f
200.721 176.563 mo
200.721 176.563 227.834 181.274 237.987 209.375 cv
237.987 209.375 224.608 181.907 195.217 178.657 cv
200.721 176.563 li
cp
f
205.647 172.309 mo
205.647 172.309 232.413 177.11 242.393 205.985 cv
242.393 205.985 229.225 177.766 200.217 174.473 cv
205.647 172.309 li
cp
f
212.288 168.309 mo
212.288 168.309 238.459 173.258 248.147 203.481 cv
248.147 203.481 235.342 173.958 206.959 170.586 cv
212.288 168.309 li
cp
f
218.194 164.305 mo
218.194 164.305 243.936 169.387 253.397 200.735 cv
253.397 200.735 241.147 169.481 213.647 166.481 cv
218.194 164.305 li
cp
f
224.592 160.586 mo
224.592 160.586 250.057 166.907 257.991 198.676 cv
257.991 198.676 247.264 166.86 219.94 162.536 cv
224.592 160.586 li
cp
f
231.542 157.555 mo
231.542 157.555 256.459 165.766 261.991 198.04 cv
261.991 198.04 253.678 165.512 226.756 159.157 cv
231.542 157.555 li
cp
f
237.846 154.403 mo
237.846 154.403 262.303 163.903 266.139 196.422 cv
266.139 196.422 259.538 163.504 232.983 155.747 cv
237.846 154.403 li
cp
f
243.741 151.129 mo
243.741 151.129 267.569 160.493 271.147 192.981 cv
271.147 192.981 264.874 160.11 238.983 152.493 cv
243.741 151.129 li
cp
f
249.928 148.356 mo
249.928 148.356 273.354 157.708 276.647 190.731 cv
276.647 190.731 270.702 157.344 245.225 149.782 cv
249.928 148.356 li
cp
f
256.413 145.856 mo
256.413 145.856 279.772 155.282 282.893 188.981 cv
282.893 188.981 277.124 154.926 251.709 147.333 cv
256.413 145.856 li
cp
f
264.045 143.727 mo
264.045 143.727 286.592 153.946 288.143 188.735 cv
288.143 188.735 283.999 153.52 259.342 145.153 cv
264.045 143.727 li
cp
f
270.795 141.368 mo
270.795 141.368 293.225 151.844 294.377 186.641 cv
294.377 186.641 290.639 151.387 266.084 142.731 cv
270.795 141.368 li
cp
f
278.069 139.309 mo
278.069 139.309 299.241 149.434 299.897 183.981 cv
299.897 183.981 296.792 149.012 273.584 140.727 cv
278.069 139.309 li
cp
f
286.545 137.981 mo
286.545 137.981 306.124 147.676 306.143 181.977 cv
306.143 181.977 303.846 147.297 282.331 139.469 cv
286.545 137.981 li
cp
f
295.272 136.661 mo
295.272 136.661 313.249 146.043 312.397 180.981 cv
312.397 180.981 311.135 145.708 291.311 138.286 cv
295.272 136.661 li
cp
f
110.272 158.985 mo
110.272 158.985 130.522 133.485 179.647 117.735 cv
228.772 101.985 263.272 107.985 266.272 117.36 cv
269.272 126.735 248.272 117.36 193.522 135.735 cv
154.034 148.989 130.35 161.747 119.647 167.61 cv
103.897 176.235 93.772 176.61 110.272 158.985 cv
cp
1 1 1 rgb
f
gsave
110.272 158.985 mo
110.272 158.985 130.522 133.485 179.647 117.735 cv
228.772 101.985 263.272 107.985 266.272 117.36 cv
269.272 126.735 248.272 117.36 193.522 135.735 cv
154.034 148.989 130.35 161.747 119.647 167.61 cv
103.897 176.235 93.772 176.61 110.272 158.985 cv
cp
clp
97.522 171.735 mo
97.522 171.735 120.022 163.485 141.584 178.11 cv
141.584 178.11 126.584 167.797 97.522 171.735 cv
cp
.27451 .207843 .145098 rgb
f
98.0845 167.985 mo
98.0845 167.985 120.584 159.735 142.147 174.36 cv
142.147 174.36 127.147 164.047 98.0845 167.985 cv
cp
f
99.2095 164.235 mo
99.2095 164.235 121.709 155.985 143.272 170.61 cv
143.272 170.61 128.272 160.297 99.2095 164.235 cv
cp
f
94.147 175.485 mo
94.147 175.485 116.647 167.235 138.209 181.86 cv
138.209 181.86 123.209 171.547 94.147 175.485 cv
cp
f
101.834 160.672 mo
101.834 160.672 124.334 152.422 145.897 167.047 cv
145.897 167.047 130.897 156.735 101.834 160.672 cv
cp
f
105.022 156.922 mo
105.022 156.922 130.334 151.297 156.209 166.11 cv
156.209 166.11 134.834 149.235 105.022 156.922 cv
cp
f
107.084 153.172 mo
107.084 153.172 132.397 147.547 158.272 162.36 cv
158.272 162.36 136.897 145.485 107.084 153.172 cv
cp
f
110.272 149.61 mo
110.272 149.61 135.584 143.985 161.459 158.797 cv
161.459 158.797 140.084 141.922 110.272 149.61 cv
cp
f
114.959 146.032 mo
114.959 146.032 140.366 139.93 166.334 155.985 cv
166.334 155.985 144.881 137.7 114.959 146.032 cv
cp
f
119.834 142.551 mo
119.834 142.551 145.147 135.36 171.022 153.735 cv
171.022 153.735 149.647 133.188 119.834 142.551 cv
cp
f
123.959 138.934 mo
123.959 138.934 149.647 130.86 176.834 151.11 cv
176.834 151.11 153.987 129.055 123.959 138.934 cv
cp
f
128.838 134.973 mo
128.838 134.973 154.807 127.844 181.233 149.071 cv
181.233 149.071 159.213 126.196 128.838 134.973 cv
cp
f
135.022 131.61 mo
135.022 131.61 160.233 124.122 186.959 147.36 cv
186.959 147.36 164.834 122.797 135.022 131.61 cv
cp
f
139.514 128.668 mo
139.514 128.668 165.405 120.356 192.772 145.86 cv
192.772 145.86 170.131 118.883 139.514 128.668 cv
cp
f
144.706 125.211 mo
144.706 125.211 170.741 117.344 197.655 143.317 cv
197.655 143.317 175.483 115.954 144.706 125.211 cv
cp
f
151.124 121.27 mo
151.124 121.27 177.518 114.711 203.108 142 cv
203.108 142 182.327 113.563 151.124 121.27 cv
cp
f
158.088 117.348 mo
158.088 117.348 184.795 112.215 208.881 140.833 cv
208.881 140.833 189.659 111.325 158.088 117.348 cv
cp
f
164.881 114.09 mo
164.881 114.09 191.815 110.301 214.436 140.09 cv
214.436 140.09 196.713 109.657 164.881 114.09 cv
cp
f
170.44 111.43 mo
170.44 111.43 197.37 107.665 219.975 137.465 cv
219.975 137.465 202.272 107.02 170.44 111.43 cv
cp
f
177.389 108.524 mo
177.389 108.524 204.475 106.106 225.561 137.008 cv
225.561 137.008 209.405 105.711 177.389 108.524 cv
cp
f
182.842 106.532 mo
182.842 106.532 209.932 104.09 231.049 134.961 cv
231.049 134.961 214.858 103.684 182.842 106.532 cv
cp
f
189.928 103.965 mo
189.928 103.965 217.104 102.875 236.647 134.774 cv
236.647 134.774 222.045 102.731 189.928 103.965 cv
cp
f
196.139 102.672 mo
196.139 102.672 223.319 101.68 242.749 133.645 cv
242.749 133.645 228.26 101.54 196.139 102.672 cv
cp
f
203.35 100.485 mo
203.35 100.485 230.545 100.856 248.346 133.754 cv
248.346 133.754 235.483 100.977 203.35 100.485 cv
cp
f
209.745 99.145 mo
209.745 99.145 236.92 100.317 253.749 133.719 cv
253.749 133.719 241.854 100.567 209.745 99.145 cv
cp
f
217.108 97.5396 mo
217.108 97.5396 244.186 100.063 259.315 134.278 cv
259.315 134.278 249.1 100.579 217.108 97.5396 cv
cp
f
223.104 94.4341 mo
223.104 94.4341 250.077 97.9536 263.944 132.696 cv
263.944 132.696 254.967 98.6333 223.104 94.4341 cv
cp
f
230.581 93.4731 mo
230.581 93.4731 257.334 98.3364 269.44 133.731 cv
269.44 133.731 262.194 99.2778 230.581 93.4731 cv
cp
f
235.272 92.6411 mo
235.272 92.6411 262.1 97.1685 274.655 132.407 cv
274.655 132.407 266.959 98.0356 235.272 92.6411 cv
cp
f
242.788 91.9614 mo
242.788 91.9614 269.334 97.8247 280.108 133.649 cv
280.108 133.649 274.155 98.9497 242.788 91.9614 cv
cp
f
grestore
gsave
63.1431 371.985 mo
63.1431 371.985 96.647 405.489 147.647 410.985 cv
198.647 416.493 273.647 394.497 302.647 368.489 cv
331.643 342.485 356.147 294.989 356.147 294.989 cv
341.147 246.485 li
341.147 246.485 316.991 312.09 269.147 343.985 cv
236.147 365.985 188.147 387.489 130.147 383.985 cv
72.1431 380.489 62.6509 366.485 63.1431 371.985 cv
cp
clp
181.147 368.985 mo
181.147 368.985 193.522 394.11 179.647 412.485 cv
179.647 412.485 189.397 397.11 181.147 368.985 cv
cp
.27451 .207843 .145098 rgb
f
184.897 413.235 mo
184.897 413.235 196.522 389.235 183.772 360.735 cv
183.772 360.735 200.272 388.86 184.897 413.235 cv
cp
f
190.897 411.735 mo
190.897 411.735 202.522 387.735 189.772 359.235 cv
189.772 359.235 206.272 387.36 190.897 411.735 cv
cp
f
192.772 351.735 mo
192.772 351.735 211.147 378.735 198.772 410.235 cv
198.772 410.235 207.022 379.86 192.772 351.735 cv
cp
f
176.647 369.735 mo
176.647 369.735 189.022 394.86 175.147 413.235 cv
175.147 413.235 184.897 397.86 176.647 369.735 cv
cp
f
172.983 371.68 mo
172.983 371.68 184.385 397.262 169.807 415.098 cv
169.807 415.098 180.143 400.11 172.983 371.68 cv
cp
f
167.897 370.239 mo
167.897 370.239 180.272 395.364 166.397 413.739 cv
166.397 413.739 176.147 398.364 167.897 370.239 cv
cp
f
164.233 372.184 mo
164.233 372.184 175.631 397.766 161.053 415.602 cv
161.053 415.602 171.389 400.614 164.233 372.184 cv
cp
f
158.639 371.243 mo
158.639 371.243 171.014 396.372 157.139 414.747 cv
157.139 414.747 166.889 399.372 158.639 371.243 cv
cp
f
154.983 373.188 mo
154.983 373.188 166.381 398.774 151.807 416.598 cv
151.807 416.598 162.143 401.61 154.983 373.188 cv
cp
f
149.897 371.489 mo
149.897 371.489 162.272 396.618 148.397 414.993 cv
148.397 414.993 158.147 399.618 149.897 371.489 cv
cp
f
146.233 373.434 mo
146.233 373.434 157.631 399.02 143.053 416.844 cv
143.053 416.844 153.389 401.856 146.233 373.434 cv
cp
f
140.639 371.489 mo
140.639 371.489 153.014 396.618 139.139 414.993 cv
139.139 414.993 148.889 399.618 140.639 371.489 cv
cp
f
136.983 373.434 mo
136.983 373.434 148.381 399.02 133.807 416.844 cv
133.807 416.844 144.143 401.856 136.983 373.434 cv
cp
f
131.393 371.489 mo
131.393 371.489 143.768 396.618 129.893 414.993 cv
129.893 414.993 139.643 399.618 131.393 371.489 cv
cp
f
127.737 373.434 mo
127.737 373.434 139.127 399.02 124.553 416.844 cv
124.553 416.844 134.889 401.856 127.737 373.434 cv
cp
f
122.139 371.735 mo
122.139 371.735 134.514 396.864 120.639 415.239 cv
120.639 415.239 130.389 399.864 122.139 371.735 cv
cp
f
118.479 373.68 mo
118.479 373.68 129.881 399.266 115.303 417.09 cv
115.303 417.09 125.639 402.102 118.479 373.68 cv
cp
f
113.139 370.739 mo
113.139 370.739 125.514 395.868 111.639 414.243 cv
111.639 414.243 121.389 398.868 113.139 370.739 cv
cp
f
109.479 372.684 mo
109.479 372.684 120.881 398.27 106.303 416.094 cv
106.303 416.094 116.639 401.106 109.479 372.684 cv
cp
f
104.393 370.739 mo
104.393 370.739 116.768 395.868 102.893 414.243 cv
102.893 414.243 112.643 398.868 104.393 370.739 cv
cp
f
100.733 372.684 mo
100.733 372.684 112.127 398.27 97.5493 416.094 cv
97.5493 416.094 107.885 401.106 100.733 372.684 cv
cp
f
95.6392 371.235 mo
95.6392 371.235 108.014 396.36 94.1392 414.735 cv
94.1392 414.735 103.889 399.36 95.6392 371.235 cv
cp
f
91.9829 373.18 mo
91.9829 373.18 103.374 398.762 88.8032 416.598 cv
88.8032 416.598 99.1392 401.61 91.9829 373.18 cv
cp
f
87.729 370.68 mo
87.729 370.68 99.1235 396.266 84.5532 414.09 cv
84.5532 414.09 94.8892 399.102 87.729 370.68 cv
cp
f
82.6392 369.231 mo
82.6392 369.231 95.0142 394.356 81.1392 412.731 cv
81.1392 412.731 90.8892 397.356 82.6392 369.231 cv
cp
f
78.9751 371.176 mo
78.9751 371.176 90.3774 396.758 75.7993 414.594 cv
75.7993 414.594 86.1353 399.606 78.9751 371.176 cv
cp
f
74.4751 368.176 mo
74.4751 368.176 85.8774 393.758 71.2993 411.594 cv
71.2993 411.594 81.6353 396.606 74.4751 368.176 cv
cp
f
69.3892 366.731 mo
69.3892 366.731 81.7642 391.86 67.8892 410.235 cv
67.8892 410.235 77.6392 394.86 69.3892 366.731 cv
cp
f
65.7251 368.676 mo
65.7251 368.676 77.1235 394.262 62.5454 412.086 cv
62.5454 412.086 72.8813 397.098 65.7251 368.676 cv
cp
f
198.397 349.86 mo
198.397 349.86 216.772 376.86 204.397 408.36 cv
204.397 408.36 212.647 377.985 198.397 349.86 cv
cp
f
204.022 347.61 mo
204.022 347.61 222.397 374.61 210.022 406.11 cv
210.022 406.11 218.272 375.735 204.022 347.61 cv
cp
f
207.647 340.485 mo
207.647 340.485 228.397 372.36 216.022 403.86 cv
216.022 403.86 224.897 374.735 207.647 340.485 cv
cp
f
212.897 338.985 mo
212.897 338.985 233.647 370.86 221.272 402.36 cv
221.272 402.36 230.147 373.235 212.897 338.985 cv
cp
f
216.967 336.684 mo
216.967 336.684 238.647 367.938 227.206 399.793 cv
227.206 399.793 235.221 370.411 216.967 336.684 cv
cp
f
221.467 335.184 mo
221.467 335.184 243.147 366.438 231.706 398.293 cv
231.706 398.293 239.721 368.911 221.467 335.184 cv
cp
f
226.467 333.184 mo
226.467 333.184 248.147 364.438 236.702 396.29 cv
236.702 396.29 244.717 366.911 226.467 333.184 cv
cp
f
230.975 330.934 mo
230.975 330.934 252.655 362.188 241.202 394.04 cv
241.202 394.04 249.217 364.661 230.975 330.934 cv
cp
f
235.975 328.93 mo
235.975 328.93 257.655 360.184 246.209 392.036 cv
246.209 392.036 254.225 362.657 235.975 328.93 cv
cp
f
240.233 326.68 mo
240.233 326.68 261.913 357.934 250.459 389.786 cv
250.459 389.786 258.475 360.407 240.233 326.68 cv
cp
f
244.733 324.18 mo
244.733 324.18 266.413 355.434 254.959 387.29 cv
254.959 387.29 262.975 357.907 244.733 324.18 cv
cp
f
249.233 322.93 mo
249.233 322.93 270.913 354.184 259.459 386.036 cv
259.459 386.036 267.475 356.657 249.233 322.93 cv
cp
f
253.483 320.184 mo
253.483 320.184 275.163 351.438 263.717 383.29 cv
263.717 383.29 271.733 353.911 253.483 320.184 cv
cp
f
257.983 317.934 mo
257.983 317.934 279.663 349.188 268.217 381.04 cv
268.217 381.04 276.233 351.661 257.983 317.934 cv
cp
f
262.483 315.934 mo
262.483 315.934 284.163 347.188 272.717 379.04 cv
272.717 379.04 280.733 349.661 262.483 315.934 cv
cp
f
266.741 312.438 mo
266.741 312.438 288.42 343.692 276.967 375.543 cv
276.967 375.543 284.983 346.165 266.741 312.438 cv
cp
f
270.491 309.438 mo
270.491 309.438 292.17 340.692 280.717 372.543 cv
280.717 372.543 288.733 343.165 270.491 309.438 cv
cp
f
274.991 306.942 mo
274.991 306.942 296.67 338.196 285.217 370.047 cv
285.217 370.047 293.233 340.668 274.991 306.942 cv
cp
f
279.733 304.438 mo
279.733 304.438 301.413 335.692 289.967 367.543 cv
289.967 367.543 297.983 338.165 279.733 304.438 cv
cp
f
283.983 301.942 mo
283.983 301.942 305.663 333.196 294.213 365.047 cv
294.213 365.047 302.229 335.668 283.983 301.942 cv
cp
f
288.233 299.446 mo
288.233 299.446 309.913 330.7 298.459 362.551 cv
298.459 362.551 306.475 333.172 288.233 299.446 cv
cp
f
292.233 297.196 mo
292.233 297.196 313.913 328.45 302.463 360.301 cv
302.463 360.301 310.479 330.922 292.233 297.196 cv
cp
f
297.233 294.946 mo
297.233 294.946 318.913 326.2 307.459 358.051 cv
307.459 358.051 315.475 328.672 297.233 294.946 cv
cp
f
301.983 291.442 mo
301.983 291.442 323.663 322.696 312.213 354.547 cv
312.213 354.547 320.229 325.168 301.983 291.442 cv
cp
f
306.233 288.942 mo
306.233 288.942 327.913 320.196 316.459 352.047 cv
316.459 352.047 324.475 322.668 306.233 288.942 cv
cp
f
310.983 286.438 mo
310.983 286.438 332.663 317.692 321.213 349.543 cv
321.213 349.543 329.229 320.165 310.983 286.438 cv
cp
f
315.987 283.192 mo
315.987 283.192 337.667 314.446 326.217 346.297 cv
326.217 346.297 334.233 316.918 315.987 283.192 cv
cp
f
320.233 278.946 mo
320.233 278.946 341.913 310.2 330.467 342.051 cv
330.467 342.051 338.483 312.672 320.233 278.946 cv
cp
f
grestore
59.897 342.735 mo
59.897 342.735 73.6431 337.481 79.6431 334.235 cv
85.6431 330.989 93.8931 325.739 95.647 324.989 cv
97.397 324.239 100.901 326.993 99.647 330.239 cv
99.647 330.239 98.897 327.231 97.147 327.485 cv
95.3931 327.735 94.397 327.485 93.1431 329.235 cv
91.897 330.989 86.147 331.485 84.1431 332.985 cv
82.147 334.485 64.647 341.985 59.897 342.735 cv
cp
f
104.393 317.235 mo
104.393 317.235 102.893 319.985 104.647 326.735 cv
106.397 333.485 107.647 341.489 101.393 341.489 cv
101.393 341.489 107.147 341.489 104.147 329.985 cv
102.272 322.79 102.143 319.235 104.393 317.235 cv
cp
f
125.393 238.739 mo
125.393 238.739 182.889 156.231 272.393 135.735 cv
272.393 135.735 181.901 144.239 125.393 238.739 cv
cp
.27451 .207843 .145098 rgb
f
41.147 318.735 mo
41.147 318.735 23.147 224.739 88.147 162.735 cv
88.147 162.735 36.647 206.235 41.147 318.735 cv
cp
f
.510144 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
187.147 196.86 mo
187.147 196.86 188.647 200.235 186.022 199.86 cv
183.397 199.485 185.272 194.235 187.147 196.86 cv
cp
1 .360784 .752941 rgb
@
379.551 120.704 mo
379.551 120.704 391.551 113.954 399.801 100.454 cv
408.051 86.9536 438.051 67.4536 477.801 68.2036 cv
533.309 69.2544 578.301 92.9536 621.801 149.954 cv
665.301 206.954 680.301 272.954 666.801 324.704 cv
653.301 376.454 632.301 392.204 603.801 406.454 cv
572.262 422.227 569.301 424.454 555.801 431.954 cv
542.301 439.454 479.301 459.715 416.301 413.954 cv
348.809 364.942 329.301 314.211 321.051 280.454 cv
303.411 208.297 320.301 161.954 340.551 143.204 cv
360.852 124.407 379.551 120.704 379.551 120.704 cv
cp
.27451 .207843 .145098 rgb
f
503.02 436.137 mo
473.418 436.137 445.59 426.821 420.293 408.458 cv
353.864 360.2 333.379 311.833 327.661 278.836 cv
316.801 216.208 330.196 164.918 348.801 147.7 cv
367.473 130.407 380.704 127.415 380.872 127.379 cv
381.942 127.168 li
382.883 126.633 li
383.442 126.325 396.536 118.84 405.606 104 cv
412.754 92.2974 439.934 74.9849 475.575 74.9849 cv
477.668 75.0083 li
533.348 76.0552 579.95 102.172 620.141 154.829 cv
659.309 206.157 674.293 269.024 660.219 322.989 cv
646.973 373.754 626.387 390.407 600.801 403.204 cv
575.7 415.747 568.348 417.059 559.887 421.852 cv
557.645 423.118 555.301 424.454 552.497 426.012 cv
547.426 428.825 528.661 436.137 503.02 436.137 cv
cp
1 1 1 rgb
f
379.551 120.704 mo
379.551 120.704 423.801 107.704 459.801 124.454 cv
508.481 147.106 564.051 206.954 591.051 289.454 cv
618.051 371.954 576.801 420.704 576.801 420.704 cv
576.801 420.704 619.801 383.45 598.801 295.7 cv
577.801 207.95 530.301 168.704 499.551 142.454 cv
468.801 116.204 423.051 102.704 379.551 120.704 cv
cp
.27451 .207843 .145098 rgb
f
334.301 162.704 mo
334.301 162.704 312.293 202.708 326.301 260.204 cv
340.301 317.704 373.801 371.715 430.801 409.219 cv
487.801 446.719 542.801 427.711 542.801 427.711 cv
542.801 427.711 478.301 437.215 424.301 388.711 cv
359.598 330.594 314.305 246.704 334.301 162.704 cv
cp
f
530.801 436.7 mo
530.801 436.7 550.801 433.7 576.301 410.696 cv
584.375 403.415 596.301 383.954 597.801 371.579 cv
598.434 366.352 597.426 396.329 604.551 397.454 cv
611.676 398.579 630.426 389.204 630.426 389.204 cv
630.426 389.204 614.676 403.454 597.801 410.579 cv
580.926 417.704 577.926 421.079 571.926 423.704 cv
565.926 426.329 530.801 436.7 530.801 436.7 cv
cp
f
416.797 111.704 mo
416.797 111.704 418.801 95.7036 432.801 86.2036 cv
432.801 86.2036 420.801 98.9536 419.676 111.704 cv
416.797 111.704 li
cp
f
422.973 112.309 mo
422.973 112.309 424.036 94.6606 442.575 82.1021 cv
442.575 82.1021 427.09 95.1567 425.028 112.887 cv
422.973 112.309 li
cp
f
427.801 111.704 mo
428.551 111.958 431.797 90.2075 453.301 79.7075 cv
453.301 79.7075 434.305 90.9497 430.801 112.204 cv
427.801 111.704 li
cp
f
433.551 112.454 mo
434.301 112.708 437.543 90.9575 459.051 80.4575 cv
459.051 80.4575 440.051 91.6997 436.551 112.954 cv
433.551 112.454 li
cp
f
439.551 112.708 mo
440.301 112.958 443.543 91.2075 465.051 80.7075 cv
465.051 80.7075 446.051 91.9536 442.551 113.204 cv
439.551 112.708 li
cp
f
445.043 113.954 mo
445.793 114.208 449.043 92.4575 470.543 81.9575 cv
470.543 81.9575 451.551 93.1997 448.043 114.454 cv
445.043 113.954 li
cp
f
451.297 114.458 mo
452.047 114.711 455.293 92.9614 476.797 82.4614 cv
476.797 82.4614 457.801 93.7036 454.297 114.958 cv
451.297 114.458 li
cp
f
410.551 112.708 mo
410.551 112.708 412.297 99.7114 421.551 91.7075 cv
421.551 91.7075 414.547 99.6997 413.047 112.204 cv
410.551 112.708 li
cp
f
457.297 114.958 mo
458.047 115.208 461.293 93.4575 482.797 82.9575 cv
482.797 82.9575 463.801 94.2036 460.297 115.454 cv
457.297 114.958 li
cp
f
463.043 115.708 mo
463.793 115.958 467.043 94.2075 488.543 83.7075 cv
488.543 83.7075 469.551 94.9536 466.043 116.204 cv
463.043 115.708 li
cp
f
468.051 117.454 mo
468.801 117.704 472.043 95.9536 493.551 85.4536 cv
493.551 85.4536 474.551 96.6997 471.051 117.95 cv
468.051 117.454 li
cp
f
475.043 119.708 mo
475.043 119.708 480.301 95.9536 500.301 86.9536 cv
500.301 86.9536 483.547 96.9575 477.801 120.958 cv
475.043 119.708 li
cp
f
481.801 122.204 mo
481.801 122.204 490.051 95.4575 507.301 87.9575 cv
507.301 87.9575 491.305 98.2036 484.801 122.954 cv
481.801 122.204 li
cp
f
488.305 123.434 mo
488.305 123.434 497.122 96.1138 515.551 88.4536 cv
515.551 88.4536 497.75 99.6802 490.801 124.958 cv
488.305 123.434 li
cp
f
405.051 113.961 mo
405.051 113.961 406.637 102.352 415.051 95.2036 cv
415.051 95.2036 408.684 102.34 407.317 113.508 cv
405.051 113.961 li
cp
f
400.051 114.458 mo
400.051 114.458 401.399 104.399 408.547 98.2036 cv
408.547 98.2036 403.137 104.391 401.981 114.067 cv
400.051 114.458 li
cp
f
494.051 126.434 mo
494.051 126.434 502.551 96.9575 523.801 88.9575 cv
523.801 88.9575 504.301 98.9536 496.551 127.958 cv
494.051 126.434 li
cp
f
499.301 129.184 mo
499.301 129.184 507.801 99.7036 529.051 91.7075 cv
529.051 91.7075 509.551 101.704 501.801 130.708 cv
499.301 129.184 li
cp
f
504.317 131.985 mo
504.317 131.985 514.2 101.879 535.555 94.1567 cv
535.555 94.1567 514.918 104.637 506.793 133.536 cv
504.317 131.985 li
cp
f
509.348 134.528 mo
509.348 134.528 520.176 103.743 542.067 96.3169 cv
542.067 96.3169 520.833 106.602 511.817 136.192 cv
509.348 134.528 li
cp
f
514.348 137.274 mo
514.348 137.274 525.176 106.489 547.067 99.0669 cv
547.067 99.0669 525.833 109.348 516.825 138.938 cv
514.348 137.274 li
cp
f
519.848 141.024 mo
519.848 141.024 530.442 110.165 551.797 102.704 cv
551.797 102.704 531.075 113.028 522.254 142.688 cv
519.848 141.024 li
cp
f
525.098 144.547 mo
525.098 144.547 535.754 114.258 557.301 106.958 cv
557.301 106.958 536.399 117.071 527.528 146.188 cv
525.098 144.547 li
cp
f
530.348 147.797 mo
530.348 147.797 541.004 117.512 562.551 110.211 cv
562.551 110.211 541.649 120.325 532.778 149.438 cv
530.348 147.797 li
cp
f
534.762 152.247 mo
534.762 152.247 545.985 122.165 567.665 115.266 cv
567.665 115.266 546.575 124.989 537.168 153.934 cv
534.762 152.247 li
cp
f
539.645 156.75 mo
539.645 156.75 551.188 126.786 572.938 120.118 cv
572.938 120.118 551.75 129.618 542.028 158.461 cv
539.645 156.75 li
cp
f
544.254 161.637 mo
544.254 161.637 555.801 131.68 577.551 125.012 cv
577.551 125.012 556.364 134.508 546.641 163.348 cv
544.254 161.637 li
cp
f
552.583 170.188 mo
552.583 170.188 565.973 141 588.09 135.7 cv
588.09 135.7 566.352 143.856 554.864 172.043 cv
552.583 170.188 li
cp
f
547.973 166.567 mo
547.973 166.567 560.7 136.133 583.051 129.958 cv
583.051 129.958 561.172 139.063 550.333 168.407 cv
547.973 166.567 li
cp
f
556.481 175.571 mo
556.481 175.571 570.055 146.473 592.208 141.317 cv
592.208 141.317 570.418 149.333 558.739 177.446 cv
556.481 175.571 li
cp
f
560.61 181.356 mo
560.61 181.356 574.481 152.399 596.684 147.465 cv
596.684 147.465 574.813 155.258 562.856 183.254 cv
560.61 181.356 li
cp
f
564.411 186.805 mo
564.411 186.805 578.473 157.942 600.711 153.153 cv
600.711 153.153 578.793 160.805 566.645 188.719 cv
564.411 186.805 li
cp
f
569.114 192.856 mo
569.114 192.856 582.981 163.899 605.188 158.965 cv
605.188 158.965 583.317 166.758 571.356 194.754 cv
569.114 192.856 li
cp
f
572.915 198.305 mo
572.915 198.305 586.977 169.442 609.215 164.657 cv
609.215 164.657 587.293 172.309 575.145 200.223 cv
572.915 198.305 li
cp
f
576.739 204.024 mo
576.739 204.024 591.43 175.477 613.77 171.184 cv
613.77 171.184 591.684 178.344 578.926 205.989 cv
576.739 204.024 li
cp
f
580.883 210.083 mo
580.883 210.083 594.934 183.352 617.301 179.204 cv
617.301 179.204 596 184.512 583.059 212.063 cv
580.883 210.083 li
cp
f
583.786 215.872 mo
583.786 215.872 600.786 189.176 623.301 185.954 cv
623.301 185.954 600.801 191.954 585.875 217.934 cv
583.786 215.872 li
cp
f
587.333 221.551 mo
587.333 221.551 604.817 195.254 627.426 192.704 cv
627.426 192.704 605.676 196.454 589.364 223.672 cv
587.333 221.551 li
cp
f
590.692 226.848 mo
590.692 226.848 609.219 202.743 631.926 201.329 cv
631.926 201.329 609.051 205.829 592.606 229.079 cv
590.692 226.848 li
cp
f
593.043 234.247 mo
593.043 234.247 612.473 209.668 635.208 208.684 cv
635.208 208.684 610.965 213.184 594.926 236.508 cv
593.043 234.247 li
cp
f
595.411 241.321 mo
595.411 241.321 615.125 218.153 637.864 217.43 cv
637.864 217.43 615.102 221.879 597.254 243.61 cv
595.411 241.321 li
cp
f
595.356 251.778 mo
595.356 251.778 616.981 226.161 639.688 224.79 cv
639.688 224.79 613.872 231.547 597.27 254 cv
595.356 251.778 li
cp
f
597.981 260.028 mo
597.981 260.028 619.606 234.411 642.313 233.04 cv
642.313 233.04 616.497 239.797 599.895 262.25 cv
597.981 260.028 li
cp
f
599.856 268.653 mo
599.856 268.653 621.481 243.036 644.188 241.665 cv
644.188 241.665 618.372 248.422 601.77 270.875 cv
599.856 268.653 li
cp
f
601.356 277.278 mo
601.356 277.278 622.981 251.661 645.688 250.29 cv
645.688 250.29 619.872 257.047 603.27 279.5 cv
601.356 277.278 li
cp
f
602.856 286.278 mo
602.856 286.278 624.481 260.661 647.188 259.29 cv
647.188 259.29 621.372 266.047 604.77 288.5 cv
602.856 286.278 li
cp
f
603.606 304.653 mo
603.606 304.653 625.231 279.036 647.938 277.665 cv
647.938 277.665 622.122 284.422 605.52 306.875 cv
603.606 304.653 li
cp
f
603.231 295.653 mo
603.231 295.653 624.856 270.036 647.563 268.665 cv
647.563 268.665 621.747 275.422 605.145 297.875 cv
603.231 295.653 li
cp
f
602.872 323.684 mo
602.872 323.684 623.723 297.43 646.372 295.372 cv
646.372 295.372 620.774 302.903 604.856 325.848 cv
602.872 323.684 li
cp
f
603.981 313.653 mo
603.981 313.653 625.606 288.036 648.313 286.665 cv
648.313 286.665 622.497 293.422 605.895 315.875 cv
603.981 313.653 li
cp
f
603.575 340.383 mo
603.575 340.383 622.356 316.157 641.301 314.204 cv
641.301 314.204 619.602 321.208 605.098 342.364 cv
603.575 340.383 li
cp
f
603.215 331.344 mo
603.215 331.344 623.543 306.704 644.676 305.204 cv
644.676 305.204 620.606 311.872 604.977 333.446 cv
603.215 331.344 li
cp
f
603.176 348.704 mo
603.176 348.704 620.598 325.625 637.926 323.579 cv
637.926 323.579 618.028 330.422 604.551 350.555 cv
603.176 348.704 li
cp
f
603.176 355.454 mo
603.176 355.454 620.598 332.375 637.926 330.329 cv
637.926 330.329 618.028 337.172 604.551 357.305 cv
603.176 355.454 li
cp
f
602.051 364.079 mo
602.051 364.079 619.473 341 636.801 338.954 cv
636.801 338.954 616.903 345.797 603.426 365.93 cv
602.051 364.079 li
cp
f
600.278 371.727 mo
600.278 371.727 618.805 348.899 635.661 347.426 cv
635.661 347.426 615.965 353.684 601.461 373.653 cv
600.278 371.727 li
cp
f
601.083 379.243 mo
601.083 379.243 617.637 357.844 633.645 356.129 cv
633.645 356.129 615.153 362.309 602.301 380.989 cv
601.083 379.243 li
cp
f
595.067 396.106 mo
595.067 396.106 610.395 377.047 624.29 375.758 cv
624.29 375.758 608.047 381.036 596.028 397.711 cv
595.067 396.106 li
cp
f
598.489 387.09 mo
598.489 387.09 614.739 367.477 629.872 366.375 cv
629.872 366.375 612.266 371.602 599.586 388.766 cv
598.489 387.09 li
cp
f
589.52 405.598 mo
589.52 405.598 604.7 386.415 618.583 385.016 cv
618.583 385.016 602.379 390.422 590.497 407.192 cv
589.52 405.598 li
cp
f
589.883 411.833 mo
589.883 411.833 602.774 394.274 615.426 392.579 cv
615.426 392.579 600.864 397.918 590.864 413.215 cv
589.883 411.833 li
cp
f
403.801 114.2 mo
403.801 114.2 468.629 107.45 520.551 154.454 cv
576.051 204.704 601.793 270.704 603.801 336.704 cv
605.801 402.704 569.301 420.704 569.301 420.704 cv
569.301 420.704 582.969 425.391 595.551 400.079 cv
600.301 390.524 608.59 364.7 610.551 350.204 cv
616.192 308.344 607.297 246.7 581.797 205.204 cv
556.297 163.708 499.801 92.1997 403.801 114.2 cv
cp
f
gsave
504.801 435.704 mo
504.801 435.704 426.473 419.497 378.637 345.102 cv
330.801 270.704 328.551 227.954 330.051 193.454 cv
331.551 158.954 335.301 147.2 358.551 137.954 cv
365.411 135.223 351.629 143.016 353.301 189.704 cv
355.551 252.704 393.551 325.454 458.801 368.204 cv
509.614 401.497 571.301 409.196 586.301 397.196 cv
586.301 397.196 580.301 449.45 504.801 435.704 cv
cp
clp
561.301 408.211 mo
561.301 408.211 550.301 428.215 526.301 431.719 cv
523.301 430.711 li
523.301 430.711 542.801 428.719 561.301 408.211 cv
cp
f
512.676 429.704 mo
512.676 429.704 538.176 426.704 556.551 401.579 cv
556.551 401.579 544.176 429.329 512.676 429.704 cv
cp
f
500.301 428.204 mo
500.301 428.204 525.051 425.954 541.926 407.954 cv
541.926 407.954 528.801 428.954 500.301 428.204 cv
cp
f
488.817 425.485 mo
488.817 425.485 513.793 425.497 532.551 409.454 cv
532.551 409.454 517.059 429.364 488.817 425.485 cv
cp
f
477.801 422.579 mo
477.801 422.579 498.426 424.454 521.676 411.329 cv
521.676 411.329 503.676 428.204 477.801 422.579 cv
cp
f
470.598 421.665 mo
470.598 421.665 491.301 422.379 514.067 407.754 cv
514.067 407.754 492.219 426.047 470.598 421.665 cv
cp
f
461.774 418.149 mo
461.774 418.149 482.411 420.059 505.981 406.77 cv
505.981 406.77 483.106 423.774 461.774 418.149 cv
cp
f
458.184 415.477 mo
458.184 415.477 477.661 418.547 498.77 405.083 cv
498.77 405.083 478.786 415.149 457.028 414.094 cv
458.184 415.477 li
cp
f
451.27 411.633 mo
451.27 411.633 469.801 414 491.981 403.204 cv
491.981 403.204 469.653 413.004 445.04 408.75 cv
451.27 411.633 li
cp
f
441.887 407.075 mo
441.887 407.075 464.465 410.11 485.938 399.559 cv
485.938 399.559 456.653 409.547 436.598 404.028 cv
441.887 407.075 li
cp
f
436.418 401.305 mo
436.418 401.305 454.391 407.286 479.422 396.129 cv
479.422 396.129 452.153 405.969 431.184 398.575 cv
436.418 401.305 li
cp
f
431.481 397.59 mo
431.481 397.59 449.676 402.676 475.184 391.36 cv
475.184 391.36 447.418 401.497 426.192 395.165 cv
431.481 397.59 li
cp
f
424.793 392.368 mo
424.793 392.368 443.254 398.602 469.438 387.629 cv
469.438 387.629 440.965 397.243 419.442 389.551 cv
424.793 392.368 li
cp
f
542.676 431.204 mo
542.676 431.204 562.176 424.454 569.301 409.454 cv
569.301 409.454 564.551 426.211 542.676 431.204 cv
cp
f
419.348 387.969 mo
419.348 387.969 437.872 394.477 463.481 382.848 cv
463.481 382.848 435.559 393.059 413.938 385.004 cv
419.348 387.969 li
cp
f
414.036 382.852 mo
414.036 382.852 432.442 389.708 458.258 378.551 cv
458.258 378.551 430.153 388.243 408.684 379.79 cv
414.036 382.852 li
cp
f
408.786 377.856 mo
408.786 377.856 427.192 384.711 453.008 373.555 cv
453.008 373.555 424.903 383.247 403.434 374.79 cv
408.786 377.856 li
cp
f
403.786 372.856 mo
403.786 372.856 422.188 379.711 448.004 368.555 cv
448.004 368.555 419.895 378.247 398.426 369.793 cv
403.786 372.856 li
cp
f
399.387 367.606 mo
399.387 367.606 417.278 374.485 442.254 363.571 cv
442.254 363.571 415.043 373.02 394.18 364.543 cv
399.387 367.606 li
cp
f
395.141 362.61 mo
395.141 362.61 413.028 369.489 438.008 358.571 cv
438.008 358.571 410.797 368.024 389.934 359.543 cv
395.141 362.61 li
cp
f
391.137 358.11 mo
391.137 358.11 409.028 364.989 434.004 354.071 cv
434.004 354.071 406.793 363.524 385.93 355.043 cv
391.137 358.11 li
cp
f
386.637 353.856 mo
386.637 353.856 404.528 360.735 429.504 349.817 cv
429.504 349.817 402.293 359.27 381.43 350.79 cv
386.637 353.856 li
cp
f
382.637 349.356 mo
382.637 349.356 400.528 356.235 425.504 345.317 cv
425.504 345.317 398.293 354.77 377.426 346.29 cv
382.637 349.356 li
cp
f
378.637 345.102 mo
378.637 345.102 396.524 351.981 421.504 341.063 cv
421.504 341.063 394.293 350.516 373.426 342.036 cv
378.637 345.102 li
cp
f
374.887 340.852 mo
374.887 340.852 392.774 347.731 417.754 336.817 cv
417.754 336.817 390.543 346.266 369.676 337.79 cv
374.887 340.852 li
cp
f
368.887 336.856 mo
368.887 336.856 386.774 343.735 411.754 332.821 cv
411.754 332.821 384.543 342.27 363.676 333.793 cv
368.887 336.856 li
cp
f
364.637 332.356 mo
364.637 332.356 382.528 339.235 407.504 328.321 cv
407.504 328.321 380.293 337.77 359.426 329.293 cv
364.637 332.356 li
cp
f
361.387 327.606 mo
361.387 327.606 379.274 334.485 404.254 323.567 cv
404.254 323.567 377.043 333.02 356.176 324.54 cv
361.387 327.606 li
cp
f
360.301 323.047 mo
360.301 323.047 376.668 328.782 399.793 318.985 cv
399.793 318.985 374.633 327.54 355.551 320.458 cv
360.301 323.047 li
cp
f
356.301 318.547 mo
356.301 318.547 372.665 324.282 395.793 314.485 cv
395.793 314.485 370.629 323.04 351.547 315.958 cv
356.301 318.547 li
cp
f
352.051 313.543 mo
352.051 313.543 368.418 319.278 391.543 309.481 cv
391.543 309.481 366.383 318.036 347.301 310.954 cv
352.051 313.543 li
cp
f
348.801 308.543 mo
348.801 308.543 365.165 314.282 388.293 304.485 cv
388.293 304.485 363.129 313.04 344.047 305.954 cv
348.801 308.543 li
cp
f
345.801 303.797 mo
345.801 303.797 362.165 309.536 385.293 299.739 cv
385.293 299.739 360.129 308.293 341.047 301.208 cv
345.801 303.797 li
cp
f
342.547 298.547 mo
342.547 298.547 358.911 304.286 382.04 294.489 cv
382.04 294.489 356.879 303.043 337.793 295.958 cv
342.547 298.547 li
cp
f
342.293 293.297 mo
342.293 293.297 358.661 299.036 381.786 289.239 cv
381.786 289.239 356.629 297.793 337.543 290.708 cv
342.293 293.297 li
cp
f
341.543 288.047 mo
341.543 288.047 357.911 293.786 381.036 283.989 cv
381.036 283.989 355.879 292.543 336.793 285.458 cv
341.543 288.047 li
cp
f
340.043 283.297 mo
340.043 283.297 356.411 289.032 379.536 279.235 cv
379.536 279.235 354.379 287.79 335.293 280.708 cv
340.043 283.297 li
cp
f
337.297 278.797 mo
337.297 278.797 353.661 284.532 376.79 274.735 cv
376.79 274.735 351.629 283.29 332.543 276.208 cv
337.297 278.797 li
cp
f
336.547 273.547 mo
336.547 273.547 352.911 279.282 376.04 269.485 cv
376.04 269.485 350.879 278.04 331.793 270.958 cv
336.547 273.547 li
cp
f
334.793 269.293 mo
334.793 269.293 351.161 275.028 374.286 265.231 cv
374.286 265.231 349.129 273.786 330.043 266.704 cv
334.793 269.293 li
cp
f
332.797 264.922 mo
332.797 264.922 349.161 270.657 372.29 260.86 cv
372.29 260.86 347.129 269.415 328.043 262.333 cv
332.797 264.922 li
cp
f
330.098 259.5 mo
330.098 259.5 346.274 265.743 369.692 256.672 cv
369.692 256.672 344.282 264.442 325.426 256.766 cv
330.098 259.5 li
cp
f
330.293 255.418 mo
330.293 255.418 346.661 261.153 369.786 251.356 cv
369.786 251.356 344.629 259.911 325.543 252.829 cv
330.293 255.418 li
cp
f
327.028 250.254 mo
327.028 250.254 343.231 256.415 366.606 247.215 cv
366.606 247.215 344.051 254.708 324.805 248.211 cv
327.028 250.254 li
cp
f
324.465 244.766 mo
324.465 244.766 340.473 251.422 364.122 242.961 cv
364.122 242.961 340.555 249.711 323.551 242.458 cv
324.465 244.766 li
cp
f
324.055 240.208 mo
324.055 240.208 340.301 245.961 361.356 238.02 cv
361.356 238.02 340.555 242.961 324.055 238.208 cv
324.055 240.208 li
cp
f
322.555 235.208 mo
322.555 235.208 338.801 240.961 359.856 233.024 cv
359.856 233.024 339.055 237.961 322.555 233.211 cv
322.555 235.208 li
cp
f
322.551 230.661 mo
322.551 230.661 338.372 236.286 358.86 228.547 cv
358.86 228.547 338.61 233.356 322.551 228.711 cv
322.551 230.661 li
cp
f
323.047 226.161 mo
323.047 226.161 338.868 231.786 359.356 224.047 cv
359.356 224.047 339.106 228.856 323.047 224.211 cv
323.047 226.161 li
cp
f
322.801 221.661 mo
322.801 221.661 338.622 227.286 359.114 219.547 cv
359.114 219.547 338.864 224.356 322.801 219.711 cv
322.801 221.661 li
cp
f
322.301 217.161 mo
322.301 217.161 338.122 222.786 358.614 215.047 cv
358.614 215.047 338.364 219.856 322.301 215.211 cv
322.301 217.161 li
cp
f
322.301 212.165 mo
322.301 212.165 338.122 217.79 358.614 210.047 cv
358.614 210.047 338.364 214.86 322.301 210.211 cv
322.301 212.165 li
cp
f
323.305 202.665 mo
323.305 202.665 339.125 208.29 359.614 200.551 cv
359.614 200.551 339.364 205.36 323.305 200.715 cv
323.305 202.665 li
cp
f
323.051 207.418 mo
323.051 207.418 338.872 213.043 359.364 205.301 cv
359.364 205.301 339.114 210.114 323.051 205.465 cv
323.051 207.418 li
cp
f
324.309 197.668 mo
324.309 197.668 340.129 203.293 360.618 195.551 cv
360.618 195.551 340.368 200.364 324.309 195.715 cv
324.309 197.668 li
cp
f
326.426 193.04 mo
326.426 193.04 341.192 198.864 360.114 191.422 cv
360.114 191.422 341.375 195.946 326.399 191.094 cv
326.426 193.04 li
cp
f
327.231 183.575 mo
327.231 183.575 341.997 189.407 360.918 181.958 cv
360.918 181.958 342.176 186.481 327.2 181.629 cv
327.231 183.575 li
cp
f
327.059 188.317 mo
327.059 188.317 341.825 194.141 360.747 186.7 cv
360.747 186.7 342.008 191.223 327.032 186.372 cv
327.059 188.317 li
cp
f
328.09 178.606 mo
328.09 178.606 342.856 184.43 361.778 176.989 cv
361.778 176.989 343.04 181.512 328.063 176.661 cv
328.09 178.606 li
cp
f
328.676 173.165 mo
328.676 173.165 343.442 178.989 362.364 171.547 cv
362.364 171.547 343.625 176.071 328.649 171.219 cv
328.676 173.165 li
cp
f
329.481 163.7 mo
329.481 163.7 344.247 169.532 363.168 162.083 cv
363.168 162.083 344.426 166.606 329.45 161.754 cv
329.481 163.7 li
cp
f
329.309 168.442 mo
329.309 168.442 344.075 174.266 362.997 166.825 cv
362.997 166.825 344.258 171.348 329.282 166.497 cv
329.309 168.442 li
cp
f
330.34 158.731 mo
330.34 158.731 345.106 164.555 364.028 157.114 cv
364.028 157.114 345.29 161.637 330.313 156.786 cv
330.34 158.731 li
cp
f
332.801 154.415 mo
332.801 154.415 347.567 160.239 366.489 152.797 cv
366.489 152.797 347.75 157.321 332.774 152.469 cv
332.801 154.415 li
cp
f
333.606 144.95 mo
333.606 144.95 348.372 150.782 367.293 143.333 cv
367.293 143.333 348.551 147.856 333.575 143.004 cv
333.606 144.95 li
cp
f
333.434 149.692 mo
333.434 149.692 348.2 155.516 367.122 148.075 cv
367.122 148.075 348.383 152.598 333.407 147.747 cv
333.434 149.692 li
cp
f
334.465 139.981 mo
334.465 139.981 349.231 145.805 368.153 138.364 cv
368.153 138.364 349.415 142.887 334.438 138.036 cv
334.465 139.981 li
cp
f
grestore
604.801 324.208 mo
604.801 324.208 584.301 170.708 456.801 120.208 cv
456.801 120.208 583.301 142.204 604.801 324.208 cv
cp
1 1 1 rgb
f
gsave
589.297 347.204 mo
589.297 347.204 595.551 274.454 529.551 190.454 cv
481.208 128.93 431.301 121.708 420.801 123.208 cv
410.301 124.708 409.297 137.204 424.297 153.704 cv
439.297 170.204 468.055 200.153 507.301 249.208 cv
551.301 304.204 585.801 380.204 589.297 347.204 cv
cp
clp
456.676 131.766 mo
456.676 131.766 433.719 134.379 419.422 159.899 cv
419.422 159.899 431.278 142.395 456.676 131.766 cv
cp
.27451 .207843 .145098 rgb
f
461.551 136.266 mo
461.551 136.266 438.594 138.879 424.297 164.399 cv
424.297 164.399 436.153 146.895 461.551 136.266 cv
cp
f
423.051 174.704 mo
423.051 174.704 441.426 145.079 471.051 136.454 cv
471.051 136.454 447.051 146.954 423.051 174.704 cv
cp
f
424.176 184.079 mo
424.176 184.079 447.801 148.079 481.551 139.454 cv
481.551 139.454 456.426 147.704 424.176 184.079 cv
cp
f
428.676 189.329 mo
428.676 189.329 452.301 153.329 486.051 144.704 cv
486.051 144.704 460.926 152.954 428.676 189.329 cv
cp
f
432.801 194.954 mo
432.801 194.954 456.426 158.954 490.176 150.329 cv
490.176 150.329 465.051 158.579 432.801 194.954 cv
cp
f
438.051 199.454 mo
438.051 199.454 461.676 163.454 495.426 154.829 cv
495.426 154.829 470.301 163.079 438.051 199.454 cv
cp
f
442.926 204.704 mo
442.926 204.704 466.551 168.704 500.301 160.079 cv
500.301 160.079 475.176 168.329 442.926 204.704 cv
cp
f
448.551 209.954 mo
448.551 209.954 472.176 173.954 505.926 165.329 cv
505.926 165.329 480.801 173.579 448.551 209.954 cv
cp
f
453.801 215.579 mo
453.801 215.579 477.426 179.579 511.176 170.954 cv
511.176 170.954 486.051 179.204 453.801 215.579 cv
cp
f
459.426 220.829 mo
459.426 220.829 483.051 184.829 516.801 176.204 cv
516.801 176.204 491.676 184.454 459.426 220.829 cv
cp
f
463.926 227.204 mo
463.926 227.204 487.551 191.204 521.301 182.579 cv
521.301 182.579 496.176 190.829 463.926 227.204 cv
cp
f
469.551 232.454 mo
469.551 232.454 493.176 196.454 526.926 187.829 cv
526.926 187.829 501.801 196.079 469.551 232.454 cv
cp
f
473.676 239.579 mo
473.676 239.579 497.301 203.579 531.051 194.954 cv
531.051 194.954 505.926 203.204 473.676 239.579 cv
cp
f
479.301 244.829 mo
479.301 244.829 502.926 208.829 536.676 200.204 cv
536.676 200.204 511.551 208.454 479.301 244.829 cv
cp
f
482.676 252.704 mo
482.676 252.704 506.301 216.704 540.051 208.079 cv
540.051 208.079 514.926 216.329 482.676 252.704 cv
cp
f
488.301 257.954 mo
488.301 257.954 511.926 221.954 545.676 213.329 cv
545.676 213.329 520.551 221.579 488.301 257.954 cv
cp
f
492.426 265.079 mo
492.426 265.079 516.051 229.079 549.801 220.454 cv
549.801 220.454 524.676 228.704 492.426 265.079 cv
cp
f
498.051 270.329 mo
498.051 270.329 521.676 234.329 555.426 225.704 cv
555.426 225.704 530.301 233.954 498.051 270.329 cv
cp
f
502.176 278.204 mo
502.176 278.204 525.801 242.204 559.551 233.579 cv
559.551 233.579 534.426 241.829 502.176 278.204 cv
cp
f
507.801 283.454 mo
507.801 283.454 531.426 247.454 565.176 238.829 cv
565.176 238.829 540.051 247.079 507.801 283.454 cv
cp
f
511.926 290.579 mo
511.926 290.579 535.551 254.579 569.301 245.954 cv
569.301 245.954 544.176 254.204 511.926 290.579 cv
cp
f
517.551 295.829 mo
517.551 295.829 541.176 259.829 574.926 251.204 cv
574.926 251.204 549.801 259.454 517.551 295.829 cv
cp
f
520.926 304.079 mo
520.926 304.079 544.551 268.079 578.301 259.454 cv
578.301 259.454 553.176 267.704 520.926 304.079 cv
cp
f
526.551 309.329 mo
526.551 309.329 550.176 273.329 583.926 264.704 cv
583.926 264.704 558.801 272.954 526.551 309.329 cv
cp
f
530.676 316.454 mo
530.676 316.454 554.301 280.454 588.051 271.829 cv
588.051 271.829 562.926 280.079 530.676 316.454 cv
cp
f
536.301 321.704 mo
536.301 321.704 559.926 285.704 593.676 277.079 cv
593.676 277.079 568.551 285.329 536.301 321.704 cv
cp
f
538.176 329.204 mo
538.176 329.204 561.801 293.204 595.551 284.579 cv
595.551 284.579 570.426 292.829 538.176 329.204 cv
cp
f
543.801 334.454 mo
543.801 334.454 567.426 298.454 601.176 289.829 cv
601.176 289.829 576.051 298.079 543.801 334.454 cv
cp
f
547.926 341.579 mo
547.926 341.579 571.551 305.579 605.301 296.954 cv
605.301 296.954 580.176 305.204 547.926 341.579 cv
cp
f
550.926 347.954 mo
550.926 347.954 574.551 311.954 608.301 303.329 cv
608.301 303.329 583.176 311.579 550.926 347.954 cv
cp
f
550.465 361.782 mo
550.465 361.782 570.637 323.739 603.43 312.008 cv
603.43 312.008 579.184 322.567 550.465 361.782 cv
cp
f
556.555 366.489 mo
556.555 366.489 576.723 328.442 609.524 316.711 cv
609.524 316.711 585.278 327.266 556.555 366.489 cv
cp
f
561.325 373.196 mo
561.325 373.196 581.493 335.153 614.293 323.422 cv
614.293 323.422 590.047 333.973 561.325 373.196 cv
cp
f
567.418 377.903 mo
567.418 377.903 587.583 339.856 620.379 328.125 cv
620.379 328.125 596.137 338.68 567.418 377.903 cv
cp
f
452.926 127.266 mo
452.926 127.266 429.969 129.879 415.672 155.399 cv
415.672 155.399 427.528 137.895 452.926 127.266 cv
cp
f
447.676 122.766 mo
447.676 122.766 424.719 125.379 410.422 150.899 cv
410.422 150.899 422.278 133.395 447.676 122.766 cv
cp
f
442.051 118.641 mo
442.051 118.641 419.094 121.254 404.797 146.774 cv
404.797 146.774 416.653 129.27 442.051 118.641 cv
cp
f
434.926 115.641 mo
434.926 115.641 413.75 118.075 400.551 141.704 cv
400.551 141.704 411.497 125.497 434.926 115.641 cv
cp
f
grestore
318.051 35.9536 mo
318.051 35.9536 309.801 25.4536 312.801 17.2036 cv
315.801 8.95361 321.801 7.45361 328.551 3.70361 cv
335.301 -.0463867 339.051 -2.29639 337.551 3.70361 cv
336.051 9.70361 332.301 9.70361 330.801 17.9536 cv
329.301 26.2036 324.801 33.7036 318.051 35.9536 cv
cp
.27451 .207843 .145098 rgb
f
319.18 30.2075 mo
317.645 27.7856 314.903 23.8208 316.684 18.5396 cv
318.528 13.0786 319.856 11.7896 324.059 9.50439 cv
325.059 8.96533 326.09 8.40283 327.145 7.77002 cv
327.661 7.46533 li
329.676 6.25439 331.754 5.00439 332.797 4.70752 cv
332.778 4.98096 332.723 5.41455 332.567 6.06689 cv
332.09 8.15674 331.286 9.30518 330.364 10.6294 cv
329.114 12.4341 327.688 14.481 326.934 18.9458 cv
325.747 25.9692 323.411 28.1255 319.18 30.2075 cv
cp
1 1 1 rgb
f
375.551 128.204 mo
375.551 128.204 336.801 86.2036 317.301 50.2036 cv
317.301 50.2036 312.051 35.2036 313.551 28.4536 cv
313.551 28.4536 317.301 32.9536 323.301 25.4536 cv
329.301 17.9536 327.051 13.4536 332.301 11.2036 cv
332.301 11.2036 331.551 18.7036 336.051 21.7036 cv
340.551 24.7036 341.301 23.2036 339.801 35.2036 cv
338.301 47.2036 338.301 43.4536 345.051 57.7036 cv
351.801 71.9536 369.051 95.9536 396.051 119.954 cv
396.051 119.954 399.067 123.247 396.051 125.579 cv
387.801 131.954 380.305 129.95 375.551 128.204 cv
cp
.27451 .207843 .145098 rgb
f
336.301 35.2036 mo
336.301 35.2036 336.129 48.5005 346.555 65.7036 cv
356.551 82.2036 369.309 98.2036 380.801 108.208 cv
392.301 118.208 394.801 121.708 390.301 124.708 cv
385.801 127.708 380.301 125.704 380.301 125.704 cv
380.301 125.704 390.805 124.954 386.801 119.204 cv
384.348 115.676 381.137 113.168 373.801 104.954 cv
357.055 86.2036 347.797 70.2075 339.801 56.2036 cv
331.801 42.1997 336.301 35.2036 336.301 35.2036 cv
cp
1 1 1 rgb
f
332.801 22.7075 mo
332.801 22.7075 331.793 32.2036 318.801 38.7075 cv
318.801 38.7075 326.797 38.2036 331.301 31.2075 cv
335.809 24.2075 332.801 22.7075 332.801 22.7075 cv
cp
f
246.239 342.993 mo
243.946 338.422 236.262 325.754 228.395 322.079 cv
216.801 316.665 207.622 309.829 207.243 309.54 cv
206.887 309.278 li
206.586 308.954 li
201.84 303.911 197.895 296.766 195.801 291.704 cv
196.52 293.485 li
191.02 284.977 li
185.504 276.454 185.809 267.024 187.153 260.356 cv
185.02 253.43 184.903 246.946 185.54 241.637 cv
181.52 244.149 li
182.731 233.622 li
183.688 225.329 185.786 217.239 187.942 210.528 cv
190.286 198.02 li
191.45 191.813 194.352 185.211 197.098 179.95 cv
195.856 180.2 li
198.723 171.809 li
204.489 154.911 212.036 143.575 217.981 136.559 cv
215.536 136.559 li
221.114 128.543 li
228.747 117.575 238.848 107.614 245.59 101.497 cv
244.344 100.067 li
252.899 87.6294 266.465 76.2661 267.036 75.7856 cv
287.551 64.9575 li
285.618 63.7349 li
313.801 52.2075 315.45 41.9888 315.458 41.8911 cv
315.458 39.2661 li
317.586 38.0513 li
319.583 36.6294 324.899 29.2036 326.801 29.2036 cv
332.293 29.2036 329.801 35.063 329.801 44.2036 cv
329.801 44.9067 331.614 56.5161 332.301 58.2075 cv
334.559 63.7935 339.153 68.9536 339.153 85.7075 cv
339.153 108.891 337.653 127.922 337.637 128.11 cv
337.528 131.387 337.239 135.27 336.848 139.325 cv
334.872 159.7 330.262 183.899 330.059 184.918 cv
327.754 184.954 li
323.633 206.973 304.086 242.809 303.301 244.208 cv
303.887 237.383 li
297.383 251.426 286.754 274.883 286.301 275.708 cv
286.192 267.516 li
281.004 279.782 272.61 295.239 272.301 295.708 cv
273.77 289.157 li
271.598 293.446 268.481 299.075 264.106 305.95 cv
254.622 320.848 252.711 349.571 253.301 356.708 cv
246.239 342.993 li
cp
.27451 .207843 .145098 rgb
f
320.551 42.2075 mo
320.551 42.2075 320.551 54.9575 287.551 68.4575 cv
270.301 79.7075 li
270.301 79.7075 256.801 90.9575 248.551 102.958 cv
256.051 99.2075 li
256.051 99.2075 235.426 109.583 225.301 131.458 cv
230.551 131.458 li
230.551 131.458 214.051 142.708 203.551 173.458 cv
215.301 164.204 li
215.301 164.204 197.551 186.958 195.301 198.958 cv
199.051 195.958 li
199.051 195.958 190.051 214.708 187.801 234.208 cv
193.801 230.458 li
193.801 230.458 187.051 243.958 192.301 259.708 cv
194.551 253.708 li
194.551 253.708 187.051 269.458 195.301 282.208 cv
198.801 262.204 li
198.801 262.204 198.301 292.708 210.301 305.458 cv
210.301 305.458 219.301 312.208 230.551 317.458 cv
241.801 322.708 250.801 340.708 250.801 340.708 cv
250.801 340.708 249.301 319.708 259.801 303.208 cv
270.301 286.708 273.301 277.708 273.301 277.708 cv
270.301 286.708 li
270.301 286.708 279.301 273.208 284.551 257.458 cv
283.801 265.708 li
283.801 265.708 297.301 240.958 303.301 225.958 cv
301.801 235.708 li
301.801 235.708 322.801 198.208 323.551 177.208 cv
325.051 183.958 li
325.051 183.958 329.793 159.208 331.766 138.833 cv
332.145 134.891 332.426 131.11 332.551 127.708 cv
332.551 127.708 335.926 112.958 335.926 89.7075 cv
335.926 66.4575 326.551 54.9575 326.551 49.7075 cv
326.551 44.4575 325.801 38.4575 320.551 42.2075 cv
cp
1 1 1 rgb
f
316.801 55.7075 mo
316.801 55.7075 311.551 75.9575 301.051 103.708 cv
290.551 131.458 282.301 162.208 268.051 219.208 cv
253.801 276.208 248.551 321.208 248.551 321.208 cv
248.551 321.208 252.801 250.829 273.801 177.329 cv
294.801 103.829 312.301 61.7075 312.301 61.7075 cv
312.301 61.7075 316.801 52.7075 316.801 55.7075 cv
cp
.27451 .207843 .145098 rgb
f
319.297 58.5786 mo
319.297 58.5786 333.301 66.7036 334.551 84.7036 cv
334.551 84.7036 329.047 69.8286 319.297 58.5786 cv
cp
f
317.301 64.5825 mo
317.301 64.5825 330.301 71.2036 332.551 90.7114 cv
332.551 90.7114 327.051 75.8325 317.301 64.5825 cv
cp
f
315.301 70.4536 mo
315.301 70.4536 328.801 77.2036 334.801 109.454 cv
334.801 109.454 330.551 91.6997 315.301 70.4536 cv
cp
f
313.301 77.9536 mo
313.301 77.9536 327.301 83.2036 332.801 116.954 cv
332.801 116.954 328.555 99.1997 313.301 77.9536 cv
cp
f
311.801 87.1997 mo
311.801 87.1997 325.301 93.7036 331.301 126.2 cv
331.301 126.2 327.055 108.446 311.801 87.1997 cv
cp
f
309.055 93.9497 mo
309.055 93.9497 323.301 100.208 328.555 132.95 cv
328.555 132.95 324.309 115.196 309.055 93.9497 cv
cp
f
305.801 101.2 mo
305.801 101.2 324.801 113.708 329.797 155.204 cv
329.797 155.204 321.055 122.446 305.801 101.2 cv
cp
f
302.68 109.7 mo
302.68 109.7 323.301 124.208 326.926 167.333 cv
326.926 167.333 317.934 130.946 302.68 109.7 cv
cp
f
298.93 117.829 mo
298.93 117.829 319.801 133.208 323.176 175.454 cv
323.176 175.454 314.184 139.075 298.93 117.829 cv
cp
f
309.301 65.7075 mo
309.301 65.7075 287.801 65.7075 258.801 93.7036 cv
258.801 93.7036 285.801 72.7036 309.301 65.7075 cv
cp
f
317.801 20.7075 mo
317.801 20.7075 320.067 27.1841 326.934 18.9458 cv
326.934 18.9458 329.797 20.7075 327.801 23.2036 cv
325.801 25.7075 318.805 28.2075 317.801 20.7075 cv
cp
f
295.426 126.821 mo
295.426 126.821 316.297 142.208 319.672 184.454 cv
319.672 184.454 310.676 148.067 295.426 126.821 cv
cp
f
303.028 74.3794 mo
303.028 74.3794 281.559 75.5278 254.083 105.024 cv
254.083 105.024 279.926 82.6177 303.028 74.3794 cv
cp
f
301.801 80.7075 mo
301.801 80.7075 271.301 88.7075 236.301 127.708 cv
236.301 127.708 271.801 96.2075 301.801 80.7075 cv
cp
f
292.426 135.446 mo
292.426 135.446 313.297 150.833 316.672 193.079 cv
316.672 193.079 307.676 156.692 292.426 135.446 cv
cp
f
297.676 90.8325 mo
297.676 90.8325 259.801 103.958 217.426 155.333 cv
217.426 155.333 264.301 106.958 297.676 90.8325 cv
cp
f
295.801 99.8325 mo
295.801 99.8325 254.551 116.708 212.926 167.708 cv
212.926 167.708 256.426 123.833 295.801 99.8325 cv
cp
f
290.176 111.458 mo
290.176 111.458 246.067 130.454 202.051 189.083 cv
202.051 189.083 248.188 138.75 290.176 111.458 cv
cp
f
288.676 120.833 mo
288.676 120.833 241.668 144.411 197.551 204.833 cv
197.551 204.833 246.465 148.872 288.676 120.833 cv
cp
f
289.801 144.821 mo
289.801 144.821 310.801 163.333 314.176 205.583 cv
314.176 205.583 305.051 166.067 289.801 144.821 cv
cp
f
286.051 153.446 mo
286.051 153.446 307.051 171.958 310.426 214.208 cv
310.426 214.208 301.301 174.692 286.051 153.446 cv
cp
f
283.051 163.571 mo
283.051 163.571 302.754 181.512 305.926 222.458 cv
305.926 222.458 297.364 184.161 283.051 163.571 cv
cp
f
281.551 176.696 mo
281.551 176.696 298.997 192.008 301.801 226.958 cv
301.801 226.958 294.223 194.274 281.551 176.696 cv
cp
f
284.442 131.918 mo
284.442 131.918 237.922 156.442 195.036 217.747 cv
195.036 217.747 242.809 160.805 284.442 131.918 cv
cp
f
281.067 144.293 mo
281.067 144.293 234.547 168.817 191.661 230.122 cv
191.661 230.122 239.434 173.18 281.067 144.293 cv
cp
f
280.317 154.793 mo
280.317 154.793 235.907 178.114 194.926 236.333 cv
194.926 236.333 240.567 182.247 280.317 154.793 cv
cp
f
274.692 168.668 mo
274.692 168.668 233.704 190.606 196.051 245.708 cv
196.051 245.708 238.036 194.555 274.692 168.668 cv
cp
f
279.676 185.321 mo
279.676 185.321 294.856 199.719 297.301 232.583 cv
297.301 232.583 290.704 201.844 279.676 185.321 cv
cp
f
276.676 193.571 mo
276.676 193.571 291.856 207.969 294.301 240.833 cv
294.301 240.833 287.704 210.094 276.676 193.571 cv
cp
f
273.301 203.696 mo
273.301 203.696 288.481 218.094 290.926 250.958 cv
290.926 250.958 284.329 220.219 273.301 203.696 cv
cp
f
270.301 214.946 mo
270.301 214.946 283.864 227.743 286.051 256.958 cv
286.051 256.958 280.157 229.641 270.301 214.946 cv
cp
f
269.551 182.333 mo
269.551 182.333 230.02 203.743 193.801 257.708 cv
193.801 257.708 234.215 207.629 269.551 182.333 cv
cp
f
266.926 196.958 mo
266.926 196.958 229.743 217.09 195.676 267.833 cv
195.676 267.833 233.684 220.747 266.926 196.958 cv
cp
f
264.676 210.083 mo
264.676 210.083 231.688 227.532 201.301 271.208 cv
201.301 271.208 235.157 230.649 264.676 210.083 cv
cp
f
269.176 225.458 mo
269.176 225.458 279.512 236.766 281.176 262.583 cv
281.176 262.583 276.688 238.438 269.176 225.458 cv
cp
f
265.426 233.333 mo
265.426 233.333 275.762 244.641 277.426 270.458 cv
277.426 270.458 272.938 246.313 265.426 233.333 cv
cp
f
263.551 244.208 mo
263.551 244.208 272.27 253.911 273.676 276.083 cv
273.676 276.083 269.891 255.352 263.551 244.208 cv
cp
f
260.551 223.583 mo
260.551 223.583 230.071 239.833 202.051 280.583 cv
202.051 280.583 233.286 242.743 260.551 223.583 cv
cp
f
256.801 236.333 mo
256.801 236.333 229.567 251.215 204.676 288.833 cv
204.676 288.833 232.465 253.934 256.801 236.333 cv
cp
f
255.301 247.208 mo
255.301 247.208 230.958 260.766 208.801 295.208 cv
208.801 295.208 233.563 263.274 255.301 247.208 cv
cp
f
261.301 255.083 mo
261.301 255.083 268.731 263.415 269.926 282.458 cv
269.926 282.458 266.704 264.653 261.301 255.083 cv
cp
f
259.051 265.583 mo
259.051 265.583 265.192 272.778 266.176 289.208 cv
266.176 289.208 263.516 273.844 259.051 265.583 cv
cp
f
256.801 276.833 mo
256.801 276.833 261.969 282.422 262.801 295.208 cv
262.801 295.208 260.563 283.254 256.801 276.833 cv
cp
f
252.676 259.208 mo
252.676 259.208 232.293 271.333 214.051 302.708 cv
214.051 302.708 234.528 273.68 252.676 259.208 cv
cp
f
251.551 271.583 mo
251.551 271.583 234.497 281.895 219.301 308.708 cv
219.301 308.708 236.379 283.911 251.551 271.583 cv
cp
f
251.176 282.083 mo
251.176 282.083 237.782 290.637 226.051 313.208 cv
226.051 313.208 239.305 292.372 251.176 282.083 cv
cp
f
248.731 293.848 mo
248.731 293.848 239.286 300.575 231.676 316.583 cv
231.676 316.583 240.481 301.629 248.731 293.848 cv
cp
f
255.676 291.458 mo
255.676 291.458 258.583 294.54 259.051 301.583 cv
259.051 301.583 257.793 294.997 255.676 291.458 cv
cp
f
249.106 303.598 mo
249.106 303.598 242.657 308.567 237.676 320.708 cv
237.676 320.708 243.512 309.399 249.106 303.598 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_plum_bw.eps)
%%CreationDate: 3/12/2016 1:01 AM
%AI9_DataStream
%Gb",KBj2OedcgWlcSPU;fgu1ApB=*>N?KHr5_+OS`7PMYGTgC\anbH*p03HNDVL.&:WV1#I*[5e+gP:O.TMb68u9tLHhg./?EVdR
%o8UMO18a5h))JLKN+LaU`j1!XcTgjRHVrIS>(%Et<Z'K=46nl7K:a"6+EUoecHP!kkhsL87]B=ElL!D>UD1+>CQ3)(filP"r@HMU
%gVm+dV3q&i<ND+o1AP[iF:R3h2Vk-f8i>=91i('R`lf:MBHPXBDd2]G%"Nhcp<@o_g*oP(n9n9mXMO?WqSb[nJ*]\m2F%bYRL%<t
%o6_1<V2R_?RJX?-SQ8q]B!GWUeA",aY.78f-f'h9MYmPb#33LKk2=9R+Z_&qWbmJ;'DI)CgCH)"`-c1[!aAk#Pm7tjoH-HuL]:oi
%W^6VsdDZ&,GO,8:s0a\+`o22dG7-Bc`>q&cj1nR.J'>XQidp4t8>P31<4f(EgC^QkAJdnfc'VoV_Z+`V96Q*`@92k,.r3mJO>1$*
%bSn8&<p40Zc[`PHbK,F0pa#!Tkctj"[?PqK(!BHQ/9n>NhQQhf(=n/lkeG%HH_"p$Hs<e]`VS[S6XGuD7QIKk2B#tu>/XE9dY[s-
%oJe6W:STi;Ehh@)-!A@nC6mJBg/d`VKWJmE8Tl_\qEa-^Ja-E(L=!1]9F/h_KUrj\RdVQR;@\Q@j4A<VhoBln"btfH<_b1<,mfuh
%oXn<Ua'@n6R=P<qT[*h!rsRrg#p991Fuu]s176Y?g3,RkXP<G4cFR=8Y;L&cI?]\;H/S<U#XPk<.XmBW6,15ISI9uR2&s;I^^$,c
%%fGK3YPGZcBXc]H+.kJ2SVtbh8`S,]k&TS'EKo-.[a.41UO'KD0I,<HT,IV2>.5uJZ8#Rb>W`u]jSmKZEMH]Oe^T,k(A5/^:^>6S
%$1Q%&*.O#A+K':T+oZ8l;e\`_6gZ)nS+W=5A)-FXc8#Wa7TBI<3f'CBo"_C*c,<;M3i>[P5>LY)CW1%rEnW'NS5i0qj/;gX-G&2@
%SS:C^RSc0[r=f2)"TMP]ThDb-Bb5LgUo*AU@P[)^KfZ3_6()@VE+6sKC):PBAG4?,(YF[02\J8ri.jH2%"SP";!WH+19*5b&dt@9
%MD4!tZ$E#h>1I)qfZ_\QC2D<l]1((i4kbeIiaLXfd%!\P\@=LtB:9&)\GttWfJma'ruS5U1J@5@pY/oU@;DXQ$^D@m<5n"G+[7Pk
%k5MM`lgWpYXBi/QghB9OH5E5aY1YB"p*lP4Wo[hlV]Jn$nKsp/I`28$s2=S^+6ST0%l9:@@7X4^?!T(@eW/kbo850n@Z>`Me3=h>
%8O_TV%2Ad_*suBeBcuqIV;+8`5Xb76Ch1hcb3<&5!uop5>j+#cN(>p!_f7a]E@7ef"2V.sj2*R\H'G@9S/%+/iTO:a)H^FG"[.Yh
%9ddA2c!t]clD8/R/blB?e51dY"eg6P^KkQ?Y0n<sFB[0)h*2q*mHQhejK.<BeN:10;S.1QKiGALfXA/gi=8BD\CcZsRaI0+Yc>ti
%h:$jYaJ!hf8$3`;3`VaL6$CaW2HR_2%YAu9`fCUa.?+JSK.0$N76rGK(m89T2iI&m;e&\aY2eNIrC3\fMOq0CVm3.*Kn%^G<hFK5
%WRS+LLY[2WA!\!P*a@]#C5C&OJq>PWi;btE-T/4mF6+_MKpaGMBunM'\]JsTS=(mOdO]u%?[^b/Zt@V='KC.P/3AR2S461`k0)"s
%\X>*0oAsSugru)eC_j,li6CL01$S\-F-HM^/S(`uT*%k:+'h@drNftDn^m-k9$;[$[EF9fZ9jD,>&HX3qfj[mEbfU/rdS2?>d[L)
%Z.8cbfP.`C`HqMulmCJ)em"GskH;hH8LnNd=G:,CYt7r3AK>ij4@XZg#6u8bW;QDBAUT>YCau9oMDbiSo9JNg^gC_Uq^l*ck0L&&
%Cf'bnm%%_I<ESQ2.d_>\iid(G?Q//KX\SJ`=GlfF76OE3l97+e63AlCbYGRu>\hhnm:'@6[JE**)h*N*K'Rnn2!WIZ#f`K1WPbus
%GBl#Y2!L\@<ssomO&[`7HAh;X%5e&CFrOr#;5q%6oKj,t^CQ9O+f\b`DO=%kkJeMKBNk`u>N]A6BZ+<'brk*T1_!8t<n_2oW3(,k
%2H?22_ZE!Q@BjlhZ>m*kE3RB<K8/3%IMJG[31,nh_c9R(/f^C$CYtV&=C/,:l!icag)rm>?N,#8j"rg5UI<m-Ogf<_k]YH<NKB<%
%C$k+7NLRI"^D2W/QHs]mCUDME-9cOKJ]!-Gc:i;FjDu%oj%f1@cWo1+CG`'eAeb2>j#HV,k:r5P=KUqe74PS]GL`2%Ei#PK[^+q<
%rQLaoP,3`Ie@:i+lZ(2Gj1!^2NTS1teumIUJgShRRAmHJ=(=0TH2XTj=HeWc9R0@V8kcm.BUl.tNG'm"KHsZj'q#g<TAhESfu<aN
%\eqW55<=K7j#%7e.D6S%V<0+RpXCqiVe,VP6"X:YSgc<hE)eA\;FTn`_2gPRrFUkr`d1=>Qtmg#MO72BXr8`JA1VE\BcIPaSJCJ`
%W4F'NUQSpdXT+K(iKr"Q]H&$-r_LPHgCu->$[d=,*uNZ`?;0IH;_,_()FoQ]iT\:ar+,['1qW`,N\LF2j"\W8'<Tn7I]M!)iCqQu
%4,*fh^IuW;Ro=s(`+80mSU6aQ=SP7Aa!P-X253%Y,P;trh":6''?rA)P=i6_Q[r*VUG[&Am[oHT7Aj<e-Mi]0Q"'Eii_L#*5_e"3
%VP^_?cZ,Z>C7nMV.Cd:/`eK5&l.s]@]GonK6">s=Bf9]e!`.XlKh!pCGA]Au`H&N;Y$C6O6uggu@9%6qF\jQQ3jm7`XILo=&tR's
%<jbhdMAl4]9#YNOhb;Qc/+,GNUbkcmjI434?P='iQ`[n"=?VRO]i*<g[Y<TB_+c?%Fp!,BdZ)C;$#W!TMU%)Q9DDt^M)%Zmfc-K=
%U/MY>$<'f>n:Q'kMJhGJc^U/WU4^[sCct^gMkXY%9M$kZbn0K9P`)8gbf&\=B^)O"0$5^]j^6\XB"9<'k3EFI5e3;n-sDLVij[X2
%P`)8gbd:L%ZWr_YbBb@Q;7(RaihcW$jeCr]1G)LSSYn<nQrBcfQ6SrP37i2^Ms"ecGg08uqMJ3FcU.P1.)lS0NN-?QgH6r^Kq"iQ
%%WkG*rcKH$rTHXZVkqhfD_-i1<lI+'Q'n%H)b$rU1VIrVopWn3cLfgaYMD=S[bc\'RCW%3>_Id?@9RM[Xj+6,IorbrN3sV(eRl8D
%9WS+>[9E,hk\(CfgQP)>%2/U(\ai]?!7&MrF><?!@\c;AR2F2eW/G<f1QV%l<rS,Z]@GoeUMIRa31d,X7`O!"]4BpiBr,,_qG+$h
%CIY_OPr0"_`EU?:apfoY@d5Mj'NB!*1ZkuSA5!g=gW721/]6K8^WZ+6jp'pi=6eo2Uf+u();?c%]SMI4K%Ap-qMkrk=j`Qb.f.T)
%^p5W2&Y#ep0>jlMs'Wg48McA*"kR^P@Fq"><oL=76fV+/`34sAIkcq49K(6,4$V0SY=Y)W;PSE_BRsm/e'WEkIVP[.j:edqDOQVb
%&Zj+IRS#/.Cf]8&[A^46-<$`M1r=S%3\5G<```R-3*_^Ve:iN<4rcDrP35p*fnG&=ff35ZB\A)l1G.A(<:,i-WT)on*mB+OPFTXF
%L_4oTC6F-[2uR@O^XI]3Hd*l5B'6pm_TT:Wh^^CKSc@!\Ig>0L49;mLAPJ^N47f#6q>MG:DWmMWNI9r"G37PHoLSH;b]aub>-g$B
%+o^$Yb]e4u>-=BcFECh$R2S*5`b=@!&O3%*[IMjf7&lO$ZSlo-/7B8m%A\;7(n7_,bBEcOcO"^dSm\W&O01A*i,.(gUoNmAZ2(dG
%[SNfH!^;k:U31\3gm9@)4.&IXAeD=u9>B8DpMG2&><Zmn;10>+WG&h?03:mfbEnJ`2/4d'U[iH#=fbtU-8c1%bsH'Ld+KslQ9\'[
%&>$ke`bm>qJ];CpnUHg-Vg[*JOBp$RH]F$Q4:QD,.f;pq)OT_MjtKN'6LMi/$J&=#;[VmkC^CE?9")JX+f!UW<.`r,H*`\!_:lQD
%Od:L5D')]fJ-KJ7@7LU4oRAXD.jpuqs8)l!eWCE%5FD[]Aq?:Oi8q]bGS+@"%_RTG%)lRcJX9NtAJTNY"^YelQW`6X.KV9R!HEs1
%3pE7?OHdia/jT,a__]gTU`3BK@\d,S/2B*m=eYl+HaL+g'E<6,J4VCPTnC7Y(Rrc#Qn^*LnS`.!ht$]aQq[5IDR"4nN-ZC$8H"M-
%g#b9K*+tP(VLNZW<FVDUbu&sHR@8Qo-<4FldC]G)D3!(ihED"5cDiPBW\9?i:&d$"QhJa_ji1ZZrUeAlC*nr*;mT^(A%-N.hlZfr
%DBZ@Pm$#7kNK]Q,eAbL%7V,;VR2U-Mj"\lc`bVm0Bp*JGC9R'BiU=%pr!r8NJ'eMr-W5+DSUj@:R@F%Tp<5n9E?<i.l/!B)TfW)(
%(q2:a,]krO^W2+_knk=0r)G1],mB0T@me8e609`H91Vu%a(E]ta5Rrf>XE`TXXe<*a-Zp(Eu)f`8-=)Pa-cca7W8Ih(cjY#iYW?C
%e'?qiPH)W8EK"$?@nP_truDWP?.@#q]]oFK8[DN6(TX_Y'qLk%rba,IeF6tZCVAW.ZqFJSGIfn4luu:*C0g])l9-c\F@sL$41-)2
%e4VBpP+BXIP`aLp$ZfQh72sM87jk='F:@H+ro:ktFNq@-j$?!VOu5*<Rgq24?1$OJ6:3]93mS6ac=:BB?C,@bFA.S3KPsX6bskDt
%;Q/?[0U^H#Rahk9eID@L8Egtis1u!,^FSepctOPFW^,n7$jtk$l6fbIoqXZ1Zgo6R:L\6ATN!9lB>W-2FAS@sA1usi-$s>L1J@F6
%"<AiK-m:K:NiotYru[+L[>1/]Zf?^maZ3,CaS_FBdfe^n*[dV*h7QFpR4gL%^7672c+LUW8B]5HRsB'2Df4^^c+LUElcj-GOZ2*c
%S#(m7QTqBFO^JOp3=W'%mbH$WS%3SrGAcQgc.ok?7Ip^CFF$JO\kD5C,aV76R@-],BeJ4MUJX3l(3R(YS*nU:=OL,QNoB+_/FiTE
%1/'A_f.DBbb@$giQ'_t'\^>OGB([nUl:R"ta_m.0\t/s@isA1V_3!\YH'aPl`R=R&L79(t`DWQ2F%Il[fP:Gfl9qU?^N&e7k2X?X
%UX(deR2.O25fT9c.CsNH9jQ&5R5<lN4bkL2Y$JdTR$sk_W<)6Tdr.1`\^>k]EGAI'rl^Ig0)g?kC#,GbMV$Mt#OP>ZS9dC:(Ok)a
%[dBE=>./NSmg7!+Yio8chJ*k1I#5&M2=:?O>hEa9/%%F_P@>uh?*s%fRX<JYm09Gi6($[3.^b;f$'a^8Y%8ppEQnZ'``!^XUQAJT
%Kn!g.6R;MgfmG8K8/5t**<Rql:-_?/D2DP0B$H=_r>F_ed&F;6DRpk\0C5[%C'dId*PiHTs(#s@C$[Dag@`36)YIbh"QN9i7a^96
%75LEHAePUYA7*FI<#\7b/qcIKgZgS)DjGf7$[0uGh5n!0C6;OGo;U.D)EZog%Z?l^PE!I['k=goYUA.)35;Ih(CoS<YJX@s,@*8g
%j4:q'-c*2oC$uff=1V\d\3]DPDp:2\g#i(AQ1C_hN]K-nqW=`_Z-5,H8_QjMqr3:@_uIQdE>g(CZc<7te`cfl\o;uHj0q?0PoMNZ
%iA4asHuA!YD`>3Rlcj_`IVA8C=^e%EC%>F>L=7R"0GQY(bS]>(Bn*+JiRlSN3dOVGS-I*(GW#"2^2=D$HCA:p6+<)e#Kb\1X,3<O
%jQ!-(ZbQO7h`,1\l>'r.^=^G-d+PtOQV/,PI#Eh7QEb\ZeM>,nrDQs3il:*2NF8\Z]GADP46j&&hc;XZC6\=>n=X;SDQ;"BcVnOQ
%O![P!V&M6D8BqY/ffo%$]_;=MC2R">@uPn2g'Y<Ia#^7_("#T'UN$W.#f"gt5Bc]@ZSpM#e4Y-eWCCb<P@a]OOh'^mp3aklj(:+=
%jt!e9=Hc+n`PF(@#L-_kFe\Jj_?BH-N=1/nAu8:Ve]DGH^X)><Nls#\d)Wo+/<o^kX&`jSc9IT0=c2>08[81f&<-Aid_4G5BcO8,
%bN^f-C3-ZEk]NZ7$_pN9Rmk_rO%q4uj=c#^nbV5eIhVBk\Rp1193&HO;-qclJ(<dja=VJD3e\ec"6ds!+=3A:qY`.JVbXoF^Z75\
%G#k]o1YcP/ci`lY*fE2il(@@PMl$$m5LZ#P?Yi_7>uNU"kL&4K/G_kZV^XY[o]QRR8Y`s8Po@nf<2O$5UEE8T'C#JA5Q<Dm0B','
%d.UP\a_YTRI5*M=5N0(7r!iY7N5Hl9A:Vkc&jn+&J[pnQ166X;c#tR?q.`k^%jAo"'PN/;$nMhr&s1-Y>RgI9/Cka4Ei7@"$A7c-
%YDFEAV14>@3'^0H*F;]?8&PA>04Ki'6^YOqTuJI[!bD*rURITtgPXQ8U\[`rI+-d0`h3IlXT'<+3X?,n.,Vp8dC^@G%VFF=VL<+2
%G6I=1$S+G?ZSr%6D)M1sg5FlcIS&hXrCZIO)XH',GBDo?X;;(q*G44?hf2Bg?TYVg&,u&=e+E/@e+PBF`BPp&og8MmFi)B"gaI>s
%.I@2JS_&Q1g%&PN-S5)P0#;G1)R\<3UUGN.\G/g4=G0<)fS#0$\3U+EKSC@j'%4<dHS@^ch5't$0+Wmjn,J1(m/Gti5B]]hJ,'p$
%2<eeWaVG<=[9EMgF-hC?$%Wm^5OSQQ*B0uXeGi0fB0E@ubohNh1eO<B<,WS1D.&QS7uq3`1)'Yn/(O\0M*OJOcW@aOcriC&s4/mU
%1s8nupV!>QnWS;iF8,"&UW[,Q[6-9j!hJk:Tna3eRTB/IVk-jq64OM\6,.00F<1lCD+Ti1XpYnoi,PTR0@(-CiWFU[BD/+oCViOC
%d:E";A;X_Ab.nS=]d#[<<:KNS9/:TiHL-SE\l)YAe5m%1G;:!VnLSfdm7(poeDG1UdA9kUNA0-T5n<QJp"tk#rSa1/s#)tu99`X.
%In]om:Osj2<@ao8UW1Qo$F5\%qjGKO;6`.^n"Eg&#`>5fU:*eB%C9(P\3od)H96nUQk6nmhor[*D\#;&Y=a(b*I%WRoUH3Z*663V
%[QBuucQ\p[j91>+3Y;Xd1;\/[B#flhfG[uA8UI@<3?<Pc9u-CN1biSGkt=3icXZ0Z1@,A#mNr!q>1>0j_;Mm/@)?7Tk"]&I9sf-t
%d@3B#ZlPD^SQ]VYC,N"3&Z8M/jYfghUV\co5BSS6)c^:hW#dfP]?R8h[5/-PY>7&n:MPTA@TiQF.UlX5[a'52XEDp(p\$+<.oHFb
%_[n(D?W==/",WmQUY:ZHc#%'5STZ6a=)>:>B'"M>n$'@I0QU+(!)-R]>,N:r&rN([]+gb%j$p:VcGYe)F:A9sP#T\rf>6uqFP</3
%AtsE%\8MO!?>N-"@uSr=n:_":g,1/#E;&[tFf%tX&//iE,YJ!V:8`L@+:S(eF'[P6'$Z@AE%*EG')gOOH$N8'@OWEbZVh"m.G>7P
%oX#Jbk'&Dt$Eif5,p=,ZGGKeZ.Q0'si4,i@[>`'%c-%MV&H1G1XHtI)ic1euC&a,.>n#F?6<hG*Br?1oATf"/MG'2ao=Wd:/lq_@
%Mb^\1`K=nY,BKT4YZ.`0!3kYirXHZ7_A?*Nr"u]A:R]3=MjI;?%4K(u7B2S-E1./kDW<Ke?=5n)Q,;?`ieq9Z?-.WX(1fup:gCRN
%26g70*n*:X%Q_I$E;f6K68+a5f#T2%WR#XT)kC_D;Xtie!3!c<_aiTO>G>nXisI>'EiYIOP\J%(p?39&%\`_1Si<2a/p:hW\r<XV
%BI?;ed>=jVbPU(Pm`g/EWkKmi!T1"KWE;S8gS,2BVL[q@^dcSn6<E(*mg&%_j4)68[KBam.*9)%XBu`IqlsN^,B;`gWZL[,Nj-*O
%@:_\?mg(E0G>Z2dWnThP"L0]t>m@R,R9AG'+#8`;dlYc-Pb^i7NpX-mh]'U=:_fqMqtBC5IMX-tTKH#F*f,.>[E^9=`upW0%gUG8
%"Q!q&,)!0\A4XSD=KQ=]P?P1J'IVQiM:]%2Oa$m#Z>mN[5A=Yk4I=iSl]##EA1D`MAKmC@dmP@V(hAs)n_tH:br)1OpT@Jae<dYl
%a7!,7k.A$4Ej+Wnc^Vmo"]]uU?5B%)_!RT*g-TDr2>JcV;>S#T1"DAfFU>mt#>h/0F1MW).E;>Y8]L^!VAXl\6+!G"E8te[\+4`B
%Kl,fp;EXbNKteV8.];rKpRDY*Z>8^aU7"/[LiOM'qYet!YA\%>`<#B-&riI)HkIthajA;d<nb2CD'Gni3+b(]Z=fMN5$*P8?mWs`
%j.D`+'/nZWAoI.)$$Tn[rWtgo:brDG)Ngs7RB&^*=>s@\,?:5d>,+1snn'o:BV&f@""lXVP7l?SZ5[*.<hg,kGW?%Wl?,rUr>`U)
%go47k%4!BEC4hqT]TlIY4KY/e>:TGZ5US6SU@PN`V.Sas!8JspG.(ZC?CfS@Xj42gbtab0Q*#46F(np?/#XWr_;*2aUXLDjT7_KU
%)YH"Z4:g^V2/ti3[enT_:WM$h&^5bRTtF=9TiG9W>(*tDg$S6dCnFXfed5WC!RO2p`^Qj]X@I%;"fOr%UULF#HoONk_.E^gFR#]R
%b(4jRlZEr,(sm,u68$fO>%I&<G!DHVN/h?H"nT!hq)l-9\?l).@HQ"L!\5,GU=hN*<-oYWSk`Zc72=qOUifSdhQ_n*%G^$CB6)j[
%*K.&[9"S+D`#I?q4#KsFlr<okiW<=W)rj;<^r<J!ScgRT1rtPdFc<1fE>Si*o*"jeXO6rQm'*C2,O9K>3IhbFPh"cI`eGWt%T;hm
%.AJpbGNFCGasrZ926i_TqSH.</+%TCZ^.)\>Hfb_)e^Afm,.'CU,Q$Pa'`#aAg15mkZ37#S)[ta22J'uc3%YoW;Mj1#$H0=G2kp(
%F0jUb):kA)"(Y[%b5SeXo=WTU\OQ$)EfJ@9a>LPQ6%7AX>HV9h:E&nW_FqLM%<Y!QaD/VI(U\TJZT'kuZP,1mPRMg\BjFNBoFYti
%XH)$5!J^6,*;g\_+*C4ql6agRQ>lCuXT=X7DS]bn;XNX44W*p0[*JqG'=rItdu(r?b2Y\kXXfJ6_grL2N,?V<XQ%asY#2;jjHXlb
%Y^PQ@g/[D%OPX%UUlUGi7DFM<0VIl')>EN5>p"r^_-.\fZ4`1EVQ0uA@4F-2Q,=?%l5>NV@"45a-Y7_1f>mj%KY9IsPEYs/_4Hbk
%iUTZYX4V1M7!NFPckjY/HO%/2es5csnGDs<QdI]B8`cZbja,oi.`B^R1>]2bo4;$3^e<Vh`-&PnEJ10uema@,W_tJ\i#hb0Q,P@4
%ri1$W=5p9]2IH:A6*jJD#-E9?FH+a0&0k!G#p0rAKpG?Rq:AV;V*[+cU-d@E=#a%IHE^s5-e`,D7>)011Ju=96ueqA^+6MHFl8V;
%In8LI0K(,+s(;Cu1nQN-$_=e"f*RS-\m<E2p;'smg)I8)mNKi^ON3X6_k"As8Duko5]?-n"-7Z/pkGa?[M@2!*[F)X"*k=<!2o&=
%XA_3`(G"$%qcjJ`m5Cu0J^Frf&T(fXQ%?2`fb`3ZH#X,,bdsIs2IkcjYdC`c!8TJ&]lsLI:[6k(,h[)PlX`n;)B_]/1!k+3-<o)^
%F<q@2?PaL\_`V5ARubhg6"Eol2q"'Q3!070")OJ.$RR+li=*d=hE5L`r]5u&R9&hj-+[4)Cf[U-L\)V_(6)o1]qJ-)Kg4_BNFUV)
%$6/975+;Qg`e!*`>PqdY^crd/bXE71D:C?RC/UE&_;IUTn[;f$cJR%!@a]r=9WSGs"&1T="qFUi1)2hZ.;#SKrpD/2'`]P2Z2$f&
%eL@%4^mjuu`Lu8-G\/ZP/0S,0RDqf,:o0HAeBdZ>=8!!E.j7feB'!Kh457^i#E;$@^J[8"],sM_mjc^lg*?&4G-riF_]bt48ZM.$
%"N`J"`9'bdJJ9J0Y^WA#W.>6SeS(O%j<ATtdJ^%N@`KV=-=L%%kG$M-nO<eKokXj%4!,CfY]j!9-2HMCUY^gOJPEK`F2s9`6&)[o
%$H(5m52EdgalM,+K7I#u.^@_a&DqBsVa%:q,Z[KWZt6(&Pcc\IFm5Dg.?V992/bFb,>B[eA9+MYj1*au.fPBqK9'KQ<sV_BlKqje
%GUE6+#WJ'pJA>#CB8j8]#6RaC,d[Wic$B]'N2H,"4?m@589HJ81mb#-'s9N&cqc,11ip;dWSYO#WU"!mo^h%(VX>BIodjX\e>Xs$
%j9gXm2H-G#,rW&O2D`pA(S#_N;4I_`3IJ_ZHqeHjRdR8>oi!j]9]TrhSV@(uZ_0!V#sTd&&,sB4q7t(?6`.)6^DI/PZ.^g1RuUg!
%>BI>D)r2F::<D@Lr7s3$N4U"]8uk$-VZX=YpNYVk&dWJh)cUjk.i\:6aG(_LpZ$(Mf%noogQF9g9e%I6r*b#;`6Wb/!RtZSOk@kp
%NQnPR2B)Y-h2A/Ud.V.Sj7KY&g<X5V.,PlZ:/[9p-'<.E@oZh,XIftb;G<f=$I;h&Ou6'F7hJ+hLR,i>[(DD>f%]O;M%2ab$E5bK
%g+u4Y0rkPHZpX"emh)qf-nB4r,"?_dbemK%)Mqn7\4VV5LT"Bnr&%I;/:F3JHO,iOLJ5RM]L=<Db4@pp&>8A8:u5%.SohX_4Ifee
%f3G+XI_"_GbQSiP_3(O-cNe0E6n^gIm+Pkr)gs+F[M=b8)2<$IUQNX]`HW4INB"Z*48rWe2b0aD3?f,>]bh.n#&@b"X?M.=0N"gs
%;6!0YP\o!t1KYhKGspflh-%cO)on?e$G*W#M-0c;HpsLk\c&q\c+ko]l!C5r9_Y&i481taY8f`OYZuRjnC#%cZ^>*:5-LM/S^q_m
%gpjaGpL(+$bdQqcDdTSmGEu:e5(C024BpP9r*XlZfdZ_9ldg5ucZG[=L=%Ju0:XX3G?:-GAfn.X/6oP_>Hb-K0[8nReubh9os1,Q
%IIUobFiB42f.'RfQ3u=3K@@QF[`T\"6GKaEDor%S]Nt=3-1?4d>fbG6>HQ]CIf!s\WHY8H;/kqEk.at>*5XOd'BA1ol=bD?nAKhN
%k0rMK_-6Qge[$V"/U^c-3T'V;]%"mRjpMRk3ZE.db9ntQd;.b]\7^MZ08G"j\lsNsFHSk(YFYJ2bq=m$]3ctS><c.iSio'oJH4ob
%g=OfW%J]8gO2>LSo2^;ppjP02^Nc[%5eJb94"sD(I;Zd+??4rIXdqIBb:C,MpAOgbl\09KX(r7&DQH9t7o/$U]Q:Md.M^;"YKHe>
%ajq>*D&SInI^=(hgJ[/!bAt=Cn(E?4k5=C;DJT:O%n,@7lLN+S)lE.khgJYPeOpEfo1uf]+8`Il:Fa*Y\929DR\``"rd;ge6^A'4
%>OR)_re&9V[#OWSAaOIL(>7Jl1:Ob)jfAAuNH+`tF`2D>F61^+qEjCT`N6r=-h#>ZJ$&6`IcXl2dunj$k6m:H[!iN^HKmZ)K?Ni-
%47qCZO]5-Jk7>6p_4^8>>DDt8c?A/dETR2>Xne#PSArGg^="FZ"f=#7Df7]/O85[m/)mat_t@*dIr/Wm)inTZYVq&bh])/_T<9hL
%KkI;Z`'B)R<gLqd?[np&<"Qrl4*an&"247Y'aS/U&Bq[4He9ihW6N#@0,tS7$W65Xj*gR6QZ<=bn+26sa00rn(Q/glk.TfaDo1=W
%n)*8Nf(-G,PPrXbeK8.a:19U(oASV`$2W%"Ip>2nkMPBlpUQiS_Y:sC[E<^^na]9=hW`&6aWhI4q"1'En!+j^KYdYKg8j#SetZ:c
%Knnbk9H?]?('.rsp-n]"r3LUd+,nWH0.<tU+1,tL%UQS*rQ+XC2aIb\)"3s'jA>^r5s&ja4`((,q;/+DD<4p:f_E*o'-F<'>M1D)
%O$$U5cSr_E^$F3CguRJ;`F/CbG1PpiSIh89WEsI*cQ0\UM/QGW0:'@ibalDhk)>RXO4M4\?WS)-DMi\0]eJ0-]79?imEF<H?_?5u
%DT)G[Eq#bgb%?.:N/Y=TdT*miaPD-OG'^URns<!fpN$7'l`bRRG$e5+FU`fsq>0*fEL=0ciHb'1%Aq5fCmX<NffT]Oq5k1jC%,$P
%7).n,r"BX5Fj%"\459`#e)&o*\6E7q.(CA$q5;QR@=>O#28H87ZE[_TrOfVLo8[ogepR"*JS$Jrrc[f[s1M^@jfA&uNSMA'qn"Q%
%X*HS<`VMp][C("(dJoHc4#qWfT7+8BpZAs1K^*qe3-k#1"*bbtX:j.B]mh1_3m@*YbCR@3HMZ\clMGLRA*<24p\%pme_T\CDXZL^
%2>CK`>TrJMmgD*LgnF8d=NR2]>uW^_Sssd-<W@(-;)(WXfNSuggGFpPlZ5jN*6('9c`bF:F)Cpk!0$XK3X"@&QT&+rTYF-Dgq;=>
%I`h&-HatJP%<LE-='ht>U!'ohTF\L!kKT'YUYL=]^kmQ;cD]3bV7,)//`#S99+'tE%kGtLf'<7kam#=@r:OpP^45J:3jSIJq0[$p
%(&rSp]R4T\0r!^)BBI(dg,%:Q2#[QRM7ZYAr\KU]EK.].IsUuref4P[$%FR?=MqR0O-X!Qh!j.=_OboBnR<NNXAER-B*"l,!9UQ<
%lZaPD"t/aY@o\*[<.2#F>nEN3Jk7,U,=l2\_N]%0Yl*;ngBZB>9V]SUcksGqP!Jce9)hlNmE94nkOd.WFs'2E`RL^_"<\A`I_,GH
%&Rh;&Whrq`=[$AImaXp4hg_jI4Y%\RiK'(,n_f'+OfFlp:C+0!T/<"*qKWDZX6J8!*PO'52#X8*jB9+pah30D_,]iA-#[2S/VR9M
%0<+T<+-<2nl1K_W,mf_KGnOVHSTiNGg*<n\L/.s"H8$YN/9R$DX;dZe2)V^`c`GVVQ9JjCGfdO_p1_a`e/sO09+dS'"lc[_,L!1[
%K@BrZmc`^QbVV_1+s`.!3A!rE&opT67q5"p(*uU?FV9pc?=5tPTtbgY&.nscs6F1(:&$,\nEs;)A+`-0!.M_?Q/"U@>TJ"6e#eUJ
%gE2_>DEZ/%[YC^adK3O`$hd9QI.d!SgXERQf;$mhdeSt$]XK2'%(Eos[C_X07HP-&h*Gt]gZ'GR$`AmnT<V,#]D:r;]]jS7A&b(i
%G7WiQ[Bn08a24lY5OqC1njcPpY?ojah>c1k7cUqg=u3dgR4$Tql*XAO>$:d3dHLQ%na2+(^eoN(Z!LTnGb"LDXMoj.C$(IP$dkaB
%(U;(N#1Ugk(t1rVB:jgIKQici/AQa(#<8f&1eu\>lPncq".q/'*cLLqc66S/5_1NUIf'rD7Dj0i"6p\n(Ce\ZRY-Jp(D/ZNXLgUU
%YNN.q'3)<_(LeEAhE)Nce,,JWZ>a;O`C&H@a+O;,l#FE3>^2P.*l&0pO7R9j5<[0(\bDppVD;lq5D<'.=,"0aWV7lHf_k.RA'1M*
%J]&3pOK6.chc7,qE]\2H!S`6o169G:>ig#\8Y:=c,:*T@o2Y8O'DVhd:$`qnK,X+kStFnu5gJ5f@/-K"IkA%"?edgT_tdm,Fn`CM
%=84I"%tq66T%gHOcGShC5KqR4ZQ3iSmB'3pZNlO8T\$_1,WK1[4MS4GpA*8P5^[Z!=l;pg&C.!caIdCsK;5`!i[@)q6GMJprnMg?
%/,hj)]WkG=<=N35QX-2iQetnJs.!)ap`!ST4M%l(?LOP3>5,m;_#1TZp[P/s05\DH^Y)nHh;^li[/dW+iEkrslhu%kP04pW^Y=@a
%NVeH[hDsFM[P"l9kH1;Rfe^#Mc^rgnHYSp;ETY8UZ[)8q=kZ&e7PcS7c^)>>"1Vs5KPR'6_07O&0ChjcDjUoN>IV2piR?C`\GU)=
%rG^]maB!?JXfX7X2K-?XZ17&:Jci%=&0.?sEZMTh]oA#HLUYP?=*o)OphP<NnBLn0V6g!r$LEN+G@L<"Y3l[?]N?_tCd.\B33Afk
%DQQ.bY"Fkh7ai#\bKJ_>/WjL#_^*oqj-5282us>C0mJV9PI4#`i_fJZn^F*"ErF$^c]B'mJAes9DS]p;`RkBik#I\X/=F=+oE[>r
%Ib8N#?@=NN]Tu?"]e1,D[;\F;i7r0gkFWWG[24%3F'<D8HCErG!CtlST=@PA\,2:1eVi8(q.b*!KL,@uA;e5[4Ql%>_3ahiYP13]
%pntT%J)nAiW@dI1E?FCPn*W=]7_";%d-:Dsj,]ICbD,Z`-Z\ar(;=pK#*aVIIBh\CT6"(``EnVV^[<'`J]4pR]'&/5H>272S9*i0
%2kUKg"1A`Yr:Z]3Q"P%((H-&o:O2]jqeY]FUYXDShSD<8*ma:<s5N4fc#PUS_!hR"jDeW"e(,bN5k_,akj"H32"6-MqfhcnNpb^&
%:cJK=jf?5RKu2$DLN@"s`*.]8Mpm%9^_u+ujcd=RB.:/JYc[?$f&n-#-cu;sfB_EEs)n"jh0*!s]`lT,HHU)BD<rE5]*I$.Y2:;U
%1,_?[?P-eH/XPJ.gYYe%Q7<F%CkJk!OP;12Gk!0k\ZUDL4A<*ZV=EgATO.(.q6*H74$?l8UTY3S.IOY:qK09R^<lXgJspf+gqLDj
%ja"!,kQ1DSY*;X&0AU?YhQhRLk05^NrU[GKC[[kf0Sh^cB\rRg-M<E_=R"?X$+!J;ARpA/L\U-8SY)^Z6P]gtQ01<`q!hgi:u-/%
%"'I29f/pGK-i;d>CR*Xu?/TX6-Wbf/fgoTu=rZP9SOVifgcg""k'!'A?`bsD09TqXJ8Jk8[CI,t:d_GKr%I0`Kp2#\j7SI1qgK&I
%_sbhT#@IperK(fbm6!_0FgI%4U?J5AA+0N#B:B3.H2>Ice$pYcc`J;Mr,@_`aeQ_pRhfniX>L-n0CEYXjh@7&XKA)^]t!sXgrtJ5
%cZA>VEf[r<^,ssuDQFQ+$#i-_hmpG3F;URO"rGN/$>$)."$YTe=teg1h(r>Ag&C:YA`\2[]/K]=J,TNDRi``=5H*,<6#3X40Z<tq
%Gi\c#eTWAGS]'G^]pG9VG-AQg](GjrH,=TWs#TXeDq*CWd>a=D+$"@]o/5/2]9_A@p$l2Wop[4Nj<Q2F@]*.Ln[6ms/0&T0Y<9IE
%mk&M>LEH?Gc;V3EC#7X"mHj`q),SN=*%3u5*nYE:Nsd<?:%/CIP?L9e2d9Y'4hnIGld]bAcI[6uUs[D`n8/I.kikGs*.#B)G4Nk;
%`CThaBJK9!^1Gc/j6lg5'uP(<cO/!jhM]2;#X+4'QJR%+WH"7`ju1D<k^\+OD=P=OXaEQ-U,*ngM!CAKIPgdQE1>%+?n=J@T%c!k
%2L+9.c<")=?JJ*ZV6l9@YO^]V+cY'i8+5\HB0GE1^3YD]_b?JQH4d)_2lqY]:$VGl<dh[Bem[j_m)'N`4imHrgDd@,+*M^bgr\=d
%dfB&J"]p[<#=atu]!OV=_qo]Ys-AtlG&b9!S#ZZW`U/XCM"<nqB3<J<h>h>>1Y,2@RVlR,`PiA@H(feDT#]XYr5397NZY+>1&p=r
%a-R)6_)Cp3?hILhP,BH56p3Z#n/ldLFmL\3Suaa`Y/sebp5=\q^085Ff&Pp@3%_D#+0Qb*.h@g:]bo2X+*,n@KP)3In?BsSm5;?+
%KnZ'>ASFE#G8/\8q[H8@J%]sYqZ<A7XldWLYkOmD!r;@qDi<E8jceEsqr$:[pL4db`@BLErOnf!"ik<](`LSQlgm1Kk(/7o(C0V[
%\de6*l7PcDO\M;`VGXZAY-(__*[V?ghU2&#(-n,G+)A(3_f)oubWfrm$tD__WY;X`1ABqi#P;D15H`dE=qS3Gm'Uh4II)O%oW"tk
%qpY4Cn@[;kKCm-B\X/6Cf$(V2eoJ->^BRg/4\SWLoLFnb9@D258l<(_m,WcYMpoTS60e4)S)Of0!ZT/M8LJ9H.cSIC_W/QNlAV,j
%#GW8'b]"Y_nbnH,ePflLrQ[]S3#d5*)&"=C9@sFi3jc[n=kV*f0<E%ES3Ers9g_%S?L$<0ap!^VgLr'_4\Q(W;a&8bkN0#Dmd6?b
%JcBQR`S0"CnniKbDQg4UZ+h&\]iqtKcCK;H6T].[G^k-aq9*!H8GtL=L:-NG"A8^S3GcS\(V.5ZHe>0XMsj_O&)Z7s]R"8opYX)"
%UhNnu"L.dN5<.rX0l4=KBC/:LeFd^_/9F'W]Vdt8Xb3,8kf:]c7S,;1dT&n68bF?N>"eW1]D(K\XSTC6P`,U(Hs-(8bDd5neM$?>
%?&U#&9BC3Y@*'l^g<E\8c%G3J5JF>=g9gHkr/\J&rd*AQq"CP*L)CsAaE^sj0,usY(s)q?ka<o,Od!hDLTpVnkAp7Ue!AF'>sj(K
%C:#K<ni")!I0Xr_f+-0s_`^h9D`[ElK$t3N#B0QnR!dlglLukq^38-Dk!Vgk4+oc__J&%iQ.Hh/5Ut/3s'Xr]n>Pof['K2[<B_3M
%CuT^6.u4X+Xg4.nU:skT@J[*YNKl0YG$_ktF4\kO8-u=)VDktmYD>@o(CqJBdD^OHrr(]nHJ#0tIslh?(3Im^LQqeq]XKtp^'eMY
%[IO(8_)EFDQQ,6:n"H6.Ie^/,f/MU2PJc5r`dS#u_"PbMi9Iorf,$XSVg7IP?;.Rgjm0ctm\%pQjSa='I.d\*kW/.H<m9t<eL6LJ
%r+>bLl24-39BF'^"M:XaaSglWW-6].p7&Iread0XZat>4@g3e$S'Q::k$I-O>asQ1$]P8q\g$@0dLd5d;;Lp*K69+RP?h+:6t>4F
%R3LHBR.;u-n-aNi[ScIQcRc17^O9J1eXt[Oh=ro&`Bp9n>^1P[`/"GYK-,MIhV<C]k:OAsHOSOp)o?b$L(emnV1AYV[/V2a%%i`'
%IW+Jr(Tjbb2a!O9hjt?EqW8SZQ4@*aV5GtSW42LSmY5Z35MZcE&(-RFfNqrZ5Pm<^E)p]uPlLJ7cG/\jXXd3[GKtl$n,2aq)6A27
%i-rAi7[$2]QSM)G6H0(l3P6T/lRmM3h$\"_VfZ*;\X8S*^Tcn_]R0GI*gXV:1\#o9h6u@q&5D\<U7&8AI[Ir1(?'b%N/N["a++(C
%B:'2c>BS(CbVe-hn"%,I/7b&%F%:`7`Y!<)C)TUhqlQmCJIim]4,NT9j86Ujr1bKDL!7+dr]b`&dBn?"_tO5Yo&1)q+,7_s'J8i1
%Uh/JrMYR+Eiu2>[jBZHJk^<FdE3-/0B$A%#Z^0hYR2RuPB%F:^1XU%8JXNnc&)/'gC]!n-moil7[B[u_Z]8NVR1ao8"`?6:V]F%/
%5\s+U")S&I'YltB?tYJ7i[3EbWQ>7d/FbI%g**kY=jI?omMWm6)9_O)XDdkf28JV=,FJP/PP%%j^BS/oi0F\BH+k4?$4^)<YtX'#
%HDV2d#69>D\R)!>^C:Xf_0!n3f?arf1qo)0bRd;[g0WA"%3+"$CHHXnbSkp?c+ZhVU"T(_&A#H%2R'-\lbX8pppk<TN=aG@\f08K
%%/=T\DdX3J2A!ZCHpH9RJZ(2MD)o6O0G_#u+o^a/;$)MDDAeJZ.q'<uR<<?#_nZ,N6,X:>TW`,R:#R=X5RTo:#;6D99jVf6aKks7
%!9?),?A]'c\-5,^&ZhK$3k9Wreau1tkG-QSWn!9WYd@Fh^h-\Qi#ftn1q;oc\^CbhL1NG;@%WdUQ;Vht6h*/\,KT!OgdX9?5=AQq
%Oj.0?+OOd/TIu@qQ78:TQU_%m>7sci=$QfF/^`+Q6J9mD-*"*kBC]?U(5--DjuG*\L",I^$l^8c"cJAg!.T7H!6IrUL=-6Gjtds]
%W$(`bN3(4XPsXW*Zpo!6r$0G04j:Q'Ug3fhj[fA)F@#D9V-dC=(dNRJmN%:k/D0cb('[)%Kr%'rC+mlGUH7g+oK54=cZO.,->5Jp
%\:Ck3RRr]/Z^Gr-]D8&=F>H:W+EbAnXoW;n=A.!A?;FWFYou:i"k>pI</kEg+3"gS;ZE%b?/R3*JJ^/(6c-D?LgZRC+o-1`c450M
%'!q>k`10SLK,MgCVEkJl:n;&Z92H]7L'?]7/3s<R(3HpNch&%^QnO]Vg+J"NV"H<"Jf0AeL4)Q)_=SHI"'eV$W4'R[2J$)Wr$?o^
%)[L=[$r!&-=?,idNhW]&,U4.6[hJtRHn!p,V:oaj&0=h=j#/8cU::k0H?iuA]g/]pALjp<;%6)M;so&nPG!Hb0VAQ5TpX"WjmnkK
%UnJsAKAfl3!"D@uOO&/["Woe*T5DLrdtaJjZE^/Aa\YVQ;#Mh&hWYf/2#:SMb'6O<+LZjThL$VX^gBD9pp&IRn]H*j,(_'b["XCm
%P4(Q<'TDH<?5Y9$WrNK[;7=FP&0sL7&ooM6Jr(W)I%_Uo0U/2&Fsjj>$@P:`1+oh65tf@i@B"]FbZ;e8bjb^m05t"81'iR\!@U=7
%PEWU,)4[G%,H2)gElbabOq-5UVH+';!7uR4Ob=.;%El86#3]JoqV5"Q*<h;3b'a`?A?*(7ZDeNDqV2OFZ3Vc<';)mOFu>7n-%M>o
%,r?S3F0K#JOOso64pEV')fN6a>AQ3LY&ums\Jq!bArU#O%5$$?4`1&G$ZN'ILYH(S$O,2aEA-6NTliU)KZOR#[lq)^H$)H3WG]V^
%/A;;lAHX&Q4[b2Eg46Y<0V)q("oF".1t^T\2V1od#4(T1U+:.V*Z.#DQS8pXcNCV^!2h*:""%Q[@n4^#>[H4tI0OHX$s0eJ?FXHP
%_[@e6X.?-mc"q\9YF$,p1_4COjBZ15Es]"N(#"Kk``q+fEDN6]j]Ih9S'XL-8[bpmC]o'WPT?04d(DfBK)$/pOlb.>S#$0@&j",[
%ih/nb(jT@Y-P1,c6b1":q7&c=iS-@T^ZPaTk//gjD1Zl89klLTkt0PCQH4(KhNl+@aG#B5Z0!iY=#uMk9GT'+7.O]h9b>HFEWp=@
%Dc*!Z"#6JL:#J:a(%u0=8]4S!NI[DB,<`sRiira/$I+g@D?+D'<5]6n[tqda(;Y=V2Bi^r9%u3dV%)7r%0aqLI8+PoOapTh'5[qG
%'8li'K+J8&C'CcZc&QKLj<0B^@:P\cFOCZf\h$,11AX<k!(R,S?4oPEPG-6_99)s!Y@QN'%]Gut=:keH`?O]BF,E]JqOp]KXJPb@
%W>\;)n;h]%IfCp%LVEd']n6FbK'&cQImNhUpV3AL#le8Z5I>rT)MgjXdm;uKJ#n@BP5fSd6m2Me-B_("O*)$Dn-dqU^Aepr7%aL:
%7\Ziu0BaYnQ2%7\M9,G;o[:M4R\NSlOqaWV:$c'tgJ>UoMTufJ12IW/#(ViIP2d*Wb0g`,q4Y>KRq\Qn-uC\*hdk/b!Ok=I/'K^+
%^S's68u%S1&=H31jrjt!(lU`5jrqo*KAe-#<[#-SP?hqXU<(IY,g/ct1<a:8E,86M.WNpo+[t!\MR+lY42)<m(ak>(iaf>tH.Moo
%Uk[OM!Q?.f6)Dl<^ksT6_#7>d:<LoUKk!K*$W\B[JS(QAI\D^agMZ?j,:QlYK&Vei2?>f2KT9UH683)H!YM]2#eA;Yr;anEOX6bA
%-o),dN2$YMnmjj60P,&HJ6u;--h&/@1HH@Z6%p"6%e&D.&)3%=Rr8l1qYD27=.<^XbM]1m!jA9L4L%Y'#U"N*5l.`om).Ra*46-)
%8-7:+6s0g1gC5Sql"'`8UdH0a#('*#2A/Wm7cT';./ehq.4)Ah0mTHhTT9ls@pk"2O_d\Wa]L4Rj0"+Y$Y)GW*'=9V09XWl-&3>G
%fFKXakGn)n#)4Y+F"k`\F=<aYKOSU,L'&i#*<@ZpL1qp!dhZ@b)Ogm8kEBb]/1&+1P=[H%6dCI\btrs'aDi1;;%Ho!%O/T+#/fP.
%O1Lb]$s-?EET2Lbb%(hf>Q3Vc$#8B1&S(8($4KE.ace)()";-042(j8N8"tK5@lSRL(*GgXqu"m\,a<kFAaFFidn.@g@>k)3_CT$
%\TJ%P_Lf^'J^HEE"N.MkgNdC?;=KrH*1/0iTG>a^gKi<*d((kgijLNAEW9PV$stc@Q_]B%8p!0a%B6dF5,YZJ^1(nI%4c<h.]<9f
%,T*s9iPlFQ9T;kXmR`rhpnm%41GLf9=%qjO8[79`0FmEG9W#T:8!EG#QN4pEq2?2[V'-hO,:5gq9oSJ-P4(()DbIbjc[tYV#.CAO
%oZ8?q.$&''_Hp[u(<%*Q4`n\YOPLjP.$aV`Li"eK.u)?idfkMe97=@JYjIPC]hG%lJH>TWb[:,GMu_K8";Dmo[6?Icee+:Ff9NWe
%m[$cF_CM=R?2TMU'3l6-B]*Ie>S7=(7[q4%N<Ci[-Xp8pg]lHoY_acr&!L4l4K\lq"98p#Y(0n23nFU7?D^LF_!j^bIVCn5iXNk8
%#7<:U+?),<<9+K78IU[e#9>VS3]Ucf#PUM8'7<PMcXlr`$4Mlj#:9romqZM`;$;E.d.b/^c7ia\,VXZ95A9jDjW4T!,TIlhH\$^A
%D_;>"o]MG?_m8:^ScH5.c4E6c-j66P;)8XZK^M0:'$pHKCVX-^N9[`Z5bE\HD$^TMD__J#O=?ie!dU<T?s"Nk+_$6c'#d':93J;\
%ncTffD20Ch(m$'d)cJU>(bUS90%21H?jNfg"sF!n0T89fP2+H!SV3UK-?j_;:Oe2Khuu4'qkE$tF;OADkd"Nl:F<pI?"%)p@E>`O
%'>3C1k]u.h0VrbQ@<r.b($^EM-.g;'p:p&E_YK%PZ2ViZ2&&WA+ElB=MCDE&N.K#iJ]T7?4EgF^L("=pY!-rM752XbKdRYT&-7I-
%oZ7e)!Y-Ra+]Mhd;L.5h#RcNI4G9ASeCO#BJ^c@fUd0`a4FLWb0MoBnJjoPaPM41n#Gn(i*-RiTHNC1bOK<(gi]He'.25)F."r+d
%)AiI)9c,aQj:*r,>gjuV"WGr)C*R:F"sZ8WCi0i;,,T&kM<)0o5$'4VC3trCf+^YS(tn";H->e;63e4.DpmX"o(4[o'`WJsK%9Ca
%Q816)$ko$e3A@-na(&X5djMbFFC>!Dn<%9kW$k,*WCYqJc9DXF[>B-W6CW^iA.k+Z%b/;NCXM;l`e6[0:&eJMNf>^Q`WTZYN5Zqu
%(^1"n@kJ1EZU,.W>1*uRNEE28?6ria\Rj,//s9EI-\6OBAClf9?ur]0P'`:LN")4.Y05b-3++KDD<k_ROV,plGg]5D*9f>U_i94J
%BENtI#j'o-f2-"0cj`K1#/iX>lp7!=;b#j%^^fB4<cNgM@#S2s@rod9`uHXj+B$h,j+K^Zj81M[QsrYuoM7@R*RGO]'9%I%0F2%j
%O23#^!-APX'2rl2(?<9KFn@[&_:Sb\D3bBu1R9`bO/tni'52sNnM5Nm@E;j)QQ'Za6XaF\e1K.Da4V:EO,;)[AK22g%;!QbZ!g/]
%/$`_[;eCk_<'h]@nE6-P;dDI7^toh]#o\#dB*fFaG(A.TL>Y0e9GWe7Gf"G#*'&/,:'i?*cKa-%4=&]80@T*pDG3k^BM6133]G&(
%PW>n^%D70h)@Z'kJX'=Q1rCnO(/L_.;pkbbs-U>h-N]Y!P?g+.Qoa8(E\7.'Y4/8q!L2I2KuJuWB#8s%XFtJ75`LP*aB\o=1cST4
%T*)^RJm>0K2A@/ZoSjI0Ymm*ON.1jrN/h[FDSc6]jri:<KP*Qjanhr_)'*_j7:!m8KL*;e,.N7XQL(/Y-orEjQSeh*4s-uF$s%0L
%?kTCgUt(^g;HH9u"$aV<Xs\T,':ficc7!f9UB>Ja10g\PG.m)b_u7efbR58oPS&ldP8%.Z0X]1KiLn+XAj!:S%103H!3saUQ>)-u
%;bY2c61KWPYf*"(c#qhM,ngVo#%/e%gF$ekeDb^>I`\(WFEV*POK0ZD$LAd.6cZ>r'k65,&*sR>jmf0@pA5W*s*0A542q,0_TPDu
%=Ir*_#b`9:/),ng'H#Tq7Y"0>_g&rNI7lhqh=>[g-dHVKN'#GRLoa.QK6t1-">E"c;7X(O'")RLL]j:J,4$T,QkmMb4?63c^_BqC
%'_Ou)'C2RE1gO<H^L29/AD]R#EW4UO5Q>[XgOIMip^:Upqst?Vc+6#<\Ya^=Gh_E-39?F\3u(WaI?BN1Q6EF>k%"\_0&)5Q@6?\c
%"cK;YW0pNf]p'tg^>)s%42D,G(P%uLRHGP,.WQ;^A8`=dP2;<s99M33RP*NK-ZtGFK*,\8R'$i))2a\-LHnS3=9P`A`ia5V2-kT#
%QUp_e0MUoHM:KYZ,8%["'<1)\Vp!>09[;;`%4\:I9G,#^J'%0`E],]u)81FWW",X8!2LKf<ob\C?'5h7m(Gcd\K&^&(b]oX-,*h@
%b@'UCpeap:EEJ,r/MXK+ntl6'<0MTJ5lh-^+r8>7"F!L6fJ(k@(h&"d6;M&;YC`R/W?tP!#PNkT:4"^?,Kq9Q4D5V\;$?DW<p/.&
%AMAhtN3[q,3LfKYYQSj,N\>Ci]JI-)7KMP2DNVGD+d9/Mj<73kU4&3RWDZ2co7`(i!J`UL@Lu&cU(Nj?2UlamJrCO4Po"<>&N<E%
%<R-AF9+6ZiHW05O`/tAT(nil'o-d@":!4,.'3kl.1eAQbbnk?Y#pJ:F,57HKgBIg0^g^pq(saeu\fpBY9SnpfK.`V!d+.6f@bRcI
%_a4sDkF/if%>F-pL^hXoijsXkG(L;>#@'Hn;3<EQM4'kD4d^VARt3Cps.IsRFs&F^iak@Hf&Qi?+5>dD/b2;D,8L*`b[=qb6ZGO,
%04@c23,R/\L)]sEi1$0#:!AsbZZeb@!aOu*isB<g8&*.!Pc`'JKU<iiMS#=!Js8%S:oI[S2`uMenR.%K"'9$>1"[PfQ(ckEl)L>o
%Ce?b0#/)S5o?8c+hXDAO'#mhh*!S:eWh/[?!4Bo''3$iC832cQ+OPO'AHuTJ8s^F^4NM#'gpk/"1IUMEb+M,<G(&+aoYIu#??J[^
%;l0V`(_QsZ0JS<B9RO)331+K>0VLW,2HZ/.=#pm`)g*"Q(dI]L&`=/PTdRG"EGA2JK<.A)Z-W/c1$hL;_74Qb_^rrB&k95Q:J^im
%*=au`n-H[dR5B#OAE$<]$mtQh^F]qr9g%k,UoqMl:^agaFLdq#%]%O(Xt0eUK+8&(N9*m*\LFS9P&Dc*"7ur](*7]DVd@hh=)l$8
%:+peKIDcOnFr9>&o"A.FMmRELiK3r@EU"4m;:.^tPu<cV+ot+MTK1rblu^W(^10e@ZL!.118<k6.W;A+e7!=NYUbCh5B5#+qQ>cf
%S$`0Hp_]e_.@c#N-CcHDB8[aj!8it#Q*Kg=MjV(RKK`toTh'_$+6\LF:d5=pd5M^$Z0;0B7A3j(jVl#2,-]Vs'<;!9@jecoBnHm!
%gG=4QRqMS2%g4[.K#-Hq/3^$(\9J*4S)Sl!B(a3OVlS\pYm+d^+`N+%DeenR3Y[D^Ug?8j`>hY4k1dQ,njJM$]a8M#koo!V*s.pp
%obhRcd(j$.7Z^1\FVrmD/6ecaZh+hOY8OR;ar?3&.*`VD/0&Zk5hmA&Mk/9BAA5,k$<pWl7RtUo6a?,Hm>PFu+cH43V=]1"<ou1s
%:HCGK:$YRe)R8JXM$/"5_80cS!&e2W8/ZLdfWGB]8)"sG,CZScOM66C*jnSZE5X?'&GK3`+RMQT&KYKi/)D'I")4M?70B%oI3)i<
%aQMB`q;VZY'="d/pmdh+B0(X:8R!+m^r)J76]h.T\>K`r'PbsF=oJ`tYPS.Q&O&*pF@H*7J'a3`@;"C5f"Igl0l:)692)B&aeEK,
%@p/?/C%3_m8N3A4SMan\n[*"M/](OIZ:35W`jXC(C%3bn82%i6?$0X^nXM%J/t,]pdRB@7`k(/$;rV(>OClFhqJ+$_i^qVY?35MV
%a;=O"N.%[.;r_4o,eXI#<L2$lJ]75X`PKJhHBBmYd7,c)VWLU4LNO+b,U.u6[:<\9]P2@?)G2qD7\+[3@q+<\$.fG0m#R2>8@fBg
%m&V-N]707uia`*7]gs#`er>r#2uKZF12PR&Qr.M@R+X1W7uE`IO/0b>#U7O7)>;U?SIL.![-/AnT,'X9LiakTe6+S^2@TMGU1dHe
%qVl2`K6AN"3pXf6L;6#W1ee6]IlpGUU_QbE^=k<LU#:tE<>-q?+'0\KF<bSN=YmKE%/c6^CXT.WO0B3uRP?_eWuYajMSgi^2?H)p
%dRGAD`nIZ'G-l)lr1h6cmN'![s6=[4;WDWtVJbIS3bualL7pG%oSj\8/cJ3NBh%$bYBC=l)#,=EiN?FJZtLG1W>gnn3ej(8\R?nG
%'U)J$cl85pLihZte6+^c2['--@WPU'8SX3Ei7*_6@:/C]h(Y?gMUY4+k_mt'8=Ipem&M/1)Zp"P&\BQ[,W0Tii7*\@;.n_Kh(YWo
%MVf$/UdX\X,2F(WG1MZ4%>0,*3*uWJ^qW<<M$sr_>MkB=P+"Fss89cm;`7X8CmAdLWN*#)?6Ij<:iub$Oml(hn75bo.\J<8k2@U>
%H1/P3D0SnpK-"XgWJkAh>q)i#iO)!L_8H[k!=)P'f^hNL*\-*@0)HKk=@\VhAE=h79Q_,#=fUPYQ)GXZ#)"N]W'Yuo/-2L5e5-9@
%[eXoc7,Km;Ymf<N'!4N@o0C6WqMG'<;\Ll8&Q__d0+Z2.9tL9K/pbU';(<@.FZ3YEI_NH,QSRj&]P+G4HalB$<\L\:QnM99(E?Z0
%\P1f6U+:?"lmcI*rM.O2>ZKA'9r)*ilQGASjVcJ6POg*CmNNarq;V>&^/<F.WfX9LSBmN)_7Mq'._-[;J=+IS4B:i;<C#dj<R)u\
%[dYk:2'4B,(rZ/Ji(Mom9bJmH45X(EqaOTWWJg8>YXE&6$een>,N,$P=Fl.oHb(8J`(<.mKT`P,&G;)F4?!RoXV(,8n6U;e0oBm%
%gPVEgY!:dejFF12guMaH<@/RI,eNc0.d:KsU?k'DBF8=.*nE]PSK[LQSPZDdk0a_L;W)'4RS/c%`HQHeH+;^3b,Eod-e"E9g9;\N
%L*1%?(K^8;Yad>42o*$pI*(+8'"?MtIY`O/;I0/hQ#o>S9WYl4p2[=*.jE7u#iA\'-P7Ug#p4`];nCKmZ,X.JYFA9VQme:o)SIJJ
%Oo0n.jsD+<.*pQ=3&Yk--nY8:<*fAjQ#qUp8$9KH+&(]58:FH:L/?t=IWFG;gK5skn.QiaE)<oke8(opSiH5^GLHjSmfbpI3`4-F
%`D84ZN'QosWOhe_.T9>7:T]#-::LLW2k@/s7EeO^SI@Tr:SNeJs/=OE-Wpb]Rnfud?\2%(XK9c;-R<&toW"]chl)]5=A"5kb=ObB
%)K6*FVA!,lrVT%gE'=,`1?s#2.53'3FBt`Y;AY4_k_;6k)23s?imMm6W:[)=]Cq:8klg,ZWFRXV-hf]+"3"%ME2Blqc]E6H$&_p*
%6@aW<2&[uVeE`tF\faW*`[*Ao(9-pcSN9&<6da"Wb*`T3GY4%?Y'm';3al,^?mP*TRM\H@aVL]sn^RV2-^RWaBKeQ@[cMtYU!o6'
%YFA:Y-l:E$-aX)2gaP:0QBJj*SU=AXSYB'_W/=?).!43<-`lqcjA+)/P9V%sgX/G;I,mV]=tuTE7_N\#\P@/M=*!L"8\9K\emZ9Y
%C_s$2.X4*,[L5LT^/62I>dJ2NQZ@kD5^ki9(ElY%B>@JeVsFJ2-pYnFI+tB6eE`tF^6uf+IrXQbg^"=TbQ'[1IGr+jePGB:f1F=\
%k_oF;Y8qLZX[Jmm*<IJ;f,#g6pst(&ho+>^HoFI1mAR19UWW65B2Y%u7K:m"6s1UZ0_&b>0A]p-pGkY;)W2uMaarKp_FqDrYoNCs
%HJN\K`;pJc)i<O.<>BKM$>tL>#`t7;JD1VmX(b3CE;,?<h/HjL/!+n-<GaHq+:_`<.@YR2`q%["T(#C$gJdt%;dK8iQ0X@YQURQS
%'Ip)=6)5Lq_GA*88AN&*%)[lF1-SaA'0Ct+k#2JtDR82b[^pdD7MUMRY>toNforV7W*5a&55I$<'nl.dCs&^)XN)9flG\n\L/K.d
%nA0/MiR<&Bm0]l@Vf$PNZ8cRrE^n3MC-GXYea?%l<\?umT+OCY-0Ok5=,R+p/dPIFcMg]&I(jnsa%hAU6;,96<*i=m8uHulCPG+p
%;%)LG4t38,q)hddeop'?<EZ)EnA2^o^3I\rK<eh2V+a356a7qWD>9>m#P&n>SJ=3E#kp.Wl/C)IE"_LknPkDtf8N!=6\'#pCmi,*
%lUDsNf_qRO2qY:%+@q*dC*Q[<QbiBKN?E"',"`hD_7q86I03e3`1a2u/jkkn-uJO;"J$^(b&S0m?<io>#_^6KQr0E-ZluUlAlh]7
%ERLFPmLE6r(E%pIAaN(5b`t&Xn6f.c\csq9UOUd/"oE0%0uETOY*%BtCk;8NQ'"MsV"f`pY1RTES5W!?ePuc+YV[V8Dor^j.AL5<
%65%=s$2iGQ`EEV_!*b._9h2):d;tb>s0.*_!8Eec_>6[8DQj43QQX+o[\9Y%U7c+kW9kr,cghdX*Pm4SUL#b/VT$i2M(e26apFj$
%*ePK5"!eW.`VLC.g/t/?6,ZkG^R`t@l?.aH$Yq,SH.rb9G^l!'5\MQl&raWGoGj^'C`1_i$s?/uN-``V@iDY?^eK?=oqM]CNW^;:
%!=?!4"PAb,@;.7s]78>r#2A0;99Z!a']E\h,RK#T/R2Ku!N8$]=[s9NKqPMn=!VA,lNTEbL#bU(KUJl#R?C:pi;o'@:ch4"XWH96
%a6!NWIA:+!fGu,aihY+GfSsF_?26IVD2[lf;H@\DVCJN1Ksqn<^es=?r^!`UhH5\q-hY+T]tG6a=4'*o[\@1Xkj9i#"9\nAqa\>3
%Yd'9.:[3W?@UlfC(.ts>R+SPn@TR6r-t6\@--%$B[7U$%HJMEpEeVo-6<BSK%cr-A/Bu"YUakgloL+VI(-pup`-u4fQ&N(9Y8M)&
%^/[kb0N#AeQ`Zph`)-tAQ/hI8UsE+=LEbABL*XH$eN`8?6g^iZ4:\8Ce:E5*Pttt:Stn60Bi;<=5n$/C*X5CXoU;KIA/Hta0n+]m
%hh,CPG!rVPXg[/'I#^eh2$Q.0YOPWqA(j02F[N;)jhOJZ,P^*s!jj?Ye?5Ng(e\A3U-sO(ON.8cY8M'`1,E(oP<f=/(8,;DA,S)Y
%;qd>?`fQ3YI8gI)(FG>BIJopI2qY9\m4&\1LC?'h>(1N$02um*b.s;>%*"W%_'(A$/dUbmMm7cYl\8TR+S[k-&4`bC*AaZ+8$!HO
%q[?f1:u[97SV>#s#]]2QoXB0na]kQZ\n_8E6o&oiYBXeS.npI'dAhDUK#D(?-'>I3BoC]j^)a.157uCee2(3e+\U,>UF9rXdW65[
%-Jo^K*A;jBeT]Og6B3^+L@PcH_T78df@Bfo0j.$-M3PrXJ:O9KPmPC.O)SBq7/;975b'5_11:IiQ*]4#K1nF_Y+A=QO+5?@'V8(t
%m^7EghKNLT%!TuVIk?,Wh,`Y./N`Lp\9M5fImN/%g$sodRsZtbSZ.>.nTjINM3WI^g6652TrMSSrVX4IX7PD?[qasgJ;ULdXt!,,
%HsajZpI\!&dN^*g-D-ihYFG7E`7SB`L]\0&788&R^.IGh39!@e\ua!n6a)eS=&hqVo=@WX6b6\UGdDm!)6Ytu`h$tbU84AdjS,s)
%&=N8`KuMSiT"8E_<Uf*[j*d]nHq"=h9IX$cFHAQY^SXg2S@]jgg>D(LW29U5B)_X*4<[.7q+`,-n+[Luhc*a3,)f65E>[GebJKb>
%k.2dYNU\;4q0CjkYf<e_%C_T-9pj[WO4NXYXl@[*\[X%+o$M0J:/*F?cuP)@Q1;bNjgt4O7`NEeXlDYGR)>Am>P5%]oAfT">AlG.
%RAJ-_dGMBP"J(l8F1G#o3.g#V9=JY2W7u+4*?@F;e&u"tCaXV&Nt1nt:P4/<Am`7fj+9W4;B+aD@+uuN`C"8*$N)EcL9f(@k;K7J
%o<J+4Cnp#MI-JnoN([89CprQd>0FbflGQ(7iPi+lG!EH=i\2Fg[Ok!k`V5q5X,U87fEUmm5I]&'k;JP=3Ot,.\Z$GW()TdSo/aDk
%Y;K7tBFE.J\BP]cn8n@gl["<,:?=P_()C'7Y)XlbV"\)l%FZiXkD#E3Wtu-nWR'h*>)18h]<Y-`#/-.SWE2VNEXG7p7j(#dk6paE
%P2/WD_)^3.CTpgc+2F3u&2u)9m"^bj7OW1g?t'a%Xqem5L6&#/^GpUpPle=,S>9K.)tmkih5@SR]&.(WVfIn/nQND?o$og'?5:;(
%llbeO7\He]#(^ZL]<(Wu.=m=/ds./e_R!g.r8pqgG"bou[o`_@eqa0ulgR!qkT)Cu)6V/*ouX:V6FrkO,T"eJ"H#"S7=6Eo7TE1Q
%1nu0*7XGQ%n"#Z99253V/%.J5U+/;QAi\X>>ft]nB&$VS8HWY'.l"?_(VO,E"p;^]cn.ah]_k4H&b:W&'N_r&69o"_LPqha"UO/j
%.SPD&"\nVi0&H[3P5BEsBoNl5X`_2aMTpBeE_?bHj5FXEb89h;:gd*Ii&bl@nQQc8\?J?jRY'iD;BQ(8%<.f2LEo-VD-gInl\=<P
%Yji&_D"2<E8;kg"@9"j(3bN>m1'oZ.j,,'T?3^iOEeHD"\D"gl?[3`S0:#]W?pnQ#ED,#b/2X,H6q95:oJN683:[5J$R5r(k+jC-
%1[BYs0/c$G^s:(&T1<q#X2UE.5b\%uQO3*K(R2;i_64Cur8Eu1$3p8?Tu).9^Eci>s$%2Kr%qE\k_D"R&jQ;(n\XaE6,70=dR4Ln
%p]Vgnc[S[5E.D:-2#.':6k-p2-"4[lIRW%@s4b=jg1>geV8AGB=l?n,U.sWq8R!YcU4uXt_%Bc@/UEMRgK_$hAKM%e_RAug#tHAH
%U8olJW$&@a':XhjU``\'YhVJ^>e[^!E(MN[)M)RFLr(3!Cj/to-T=TK*==3pY/+CLOj_3eX`.@S,gL9*e.\E+"cgN3JYFY",+87@
%&CsIVZn4ks\`+kc<9@ciU55r<6WM#/?[ImIDt2S@KS&7-ApWGJFc/[a^bP$+<,-r",&%81]bHY8%;a^PQd.a&K&b<DTdS-LI#`d:
%%2SHk`)DOW>B>561Kcug'X3rlK?I8i4Y:Oe.Jg9%ar3]U?:;IY$R,6n:CJ)$FYGdO$<gfAS"Cf<>ur@r_m9EoMNfDQfp'j\A/%s@
%:jnHP*\^gpG*6',j`":Z7g4S\b0TV/>0O+Wm#$>e!p,8#e;P'^.Z^6g)ECp.@:92*#n(q_A`CbeKnW$WU05@*6>0pVe+9UE="J@/
%K[BURlUdDp_m3fWi%!lb-^8.Cou\XGaFFQ:UL'fn`ik9hF/lmj](+g,`-XE0HbRS(iRcarh[2dB49L-N*s/']o'V*JmXPs_Z"Q5Y
%:!L&E#!QmUFiWtiKPpFG+(Z0*,=td\<SW_]>gUL+gasjD@&f!h/1E;ULs23G74<l5`.oF+N@B/9dPUKOoDp)V$qi!W&3?s@`YMLa
%65@mhKE8bYbO[H%J^f&-f.#'5g$FJ\A>ul)R`SEuHTqK;ZlnlH_,(eTa.N_mnCFcE9i)9U:(3Sc)V0_&6"B%&%T5+%<9jcSJ4@NF
%GWt@#f>Q<2.%:AW=;c\%U'QQVL-c'H=Ejnl<:LH*<>36$KOUh>^=j*J"O4lL@[8F'k9J>IXC<BCfpX-a77,"Hfh*7#LWA9h0#]uf
%YP*<)0b'gqR6J5f9eT1G:"o4&"+6ia$hsn6+Mg0LBRKh5E)]Wq.D15m8G*QJ>lS&d3aOJl21]10*Q^O#,*+AncES#SM&4IC'*L(U
%5pU)`'+<D&J-6<S^54.Y@fl2QZ<=n>jXHd!I"otd$_Ho&lu"6n`e.<(GH/h6LK%5G!C245U2-nP.uC&FV!LA$<1pdB5$*Sci$Re=
%gK'u(?&4AN`A<WO]1`GpJnE&T?m_ga.j^;X6ab#Q+cVI7ILEl1,_>>b?Q'7=m[m1)iMahj,8cQYE+1uo8fmOc"brQbS"AHA7;3CN
%6W@`X7h(UmpJ%O#nDtcfHtA@Abp54^O!d@j'1XX3Q/GFp66'.8`oFr;=)BE^;V(^m;mNQ*05;k5lmX"4hP,m_R(Z5F'h6Da`L[A:
%L&hBs:U-s>DaA<0<-o2b_20(5.<A''>XeOc+uJNMLWfoa)%*U('g6"V=MRZuJS1Yb0Qmohhu]u2G%b-#YN[fj1:\[5oQEpK8M#^2
%-CA.Z?0kYOR>R`FVtOS2:8*>uc^c[8lC1Iu&]d6X9;O\4IjR%>.7H3%\i+I1L=.>R.(ad[-Q7iErKBf,csc!([,[;l>`C*F;$2\'
%?p-=^#%'OT.LO+5kr5jGKQHKOrJ5*8,+g]/U7mY#_R=:H)g,BpN1qD=i/+qM(_qFbg(C0t4=\^70m;:r@*jZ?Q)rV=Z0@rVcf)MX
%=p@p@mAg)8[)n&s@g>7nI<<h9'/PHeUkB5X8qE!I?K]82Kg`t=AUo..JW@]PCFn"80$+lacBmd:>rss;(rZmfa,q4.:e&kqO_7#.
%)6p)4fDST,UGf61.poGLMqmDR)BN1>$Cec?XrA>P>=+dpiX@,"-?Ng$&$8R=:duTW+aKZCcjP*eLQrp8[1')5(1:QfEeZ,H'gP<X
%le7I-jl0KLj-uQd"8u=k`YNJ%>F*^"R+!8=%+m@X(`-+7pl(63ca^o-W@:bO2_Lc$%*oLR[Shf`7L#',k`nJ.ojfte0T'V!_SjCY
%SX6'$40LDRKVGQ.Yg@f`d@<,H:i'Ain4(c<<$$Q3XEF;0;]1()!ifjdJU&_mC1/t8gCoK1ThiN0AVmMo7jKdonmal$8%VJE?@?l(
%`Q%KirHij4^al2q06kRe4EV'))Zq$=(fHU1WQ,%n9@;;-6O$T&4pdU-7LV_lNBl$39q1L\d/hZ"!GPW:,9s4]E-R.J(T;_[[[ZCR
%1A#!&_k'saL!NE^<WKg,N8\M47q%`ijQ!(22@LVY4?[VIeaXs@L8[&HWtSB%SfkN3#R%A/TiFc@Ot$o1J;q\?H#',EK[>Cki=-A1
%OCdJ#jr1fj+YNKpMrT[K2ao`'^[g@a:"bK1*%n]*MZB6&606t-L9n5jYcH*IN?sL+K)Pf]o1aZ\5pdkT9f@*5CsR.oeJbQA3%$K2
%_s&9j[LD;.]mhf.0tJhcFXsW-91LM0aY1ATEc8g!.<l%%*e'39<^Y#76a:Vn>JHCVSMtMN6%I'=NmIl1R?*cQ'ZC@QUrWgQSUU*\
%3-5V*M2C1#T?atu=6M;`QWt6q9UTZE19Lf#`sBaoW.kH+&(F8A,UC5Y_4-_&1hZooh?LsbW27>;-FPT;EIT%&`[A<2Bu",7H*V@k
%lWtLb7SMSO0tLkn[D@f;hfW'"KOSff?DU@7f&I-IQ_LN?1C6M:QC-"W[6\T^on8@nTBs-*#K(1*Y]p4"X\M"6nu]]=JIST+-lr@*
%*^<hEW(UULQ,O%uT'GAJqb[Kg4D7qukXh7[-osPjJ*hQkFRm3PdcC(UT!/I(F:Fc]UE#1j&ms@`(sc2'1hm7G$n/(;8ZN?o\P'uW
%kVT'o^.b/8-p#`2d]R^cLI4PhnC]g-JL,,/joZdI<)s%P?H1`Z^l?5al5Z5?'#['Kh0lLV0eL*rQSR)F>gPZV7`!%W4.Y>`l5:$D
%H1i9gEkLU(>b#/`&1dJZHh)FjL1%q#'OHW(@fS0k)6nkf9JmM%ckRd-dBGLEVN5&OJHhu"ZnE]]pV_&"Hd\T:A\g>#2!\%]Pt/tL
%k8;Q8bNTS*5@MUQBml0S6cV*hFLOFpY)K+oQq+<L!\-KF]$0)S2$;3FKJA"^-;S=V]_^R>Pia.;^KKh=F3;rCiNJKfL8';YqZo5$
%/*>4LUV5YZdtXStP4?'u\eY(iR)CDT\?F(]%CA3ZJQtB:ARcUBLT3M"1=8ol^a'geT4*=6mrDMSdkE'tT%H+6`t]?$/Tad%n&2#6
%='YJGXj-Z(L<WLA0f#QG%F\DI<i!ttSBW&.(hI!##r\CB\-e]jZ9@=:+>u,YkTjpPEt[PV>3P6l?4*\qEfXX*bg*,g'<<*T$Cec?
%XrX!.)M_G("o4"Z_>4j.Yn`'Mr&,9:VmR\Cfoaop6$6?M0Jk5O@psVFf*3`_?qH=#oXV+D)c,*bAr%c&'W2,#,,;Yk%G3Y'dk"F'
%/>mS*_.b5\U]lBSb\;1*.SuYd5M*;Q,7Je=7S-u4h#RW8mh48tEc"K#JINBP@r1Z0Q*G=RD<P#(!h6p7IKMJOQVPRDEm/6jMQsGu
%V$]gio/XrZ8LlNn@4=H(:(c`E5%>7&MAG'=NB++jY2=bh!#qapM2c%c;dk;*Qmp]PM%+9TPU#G4fT6,.#s;MGoZZti36`\j3khW=
%6_"A/iA*O&Z/FpmbYjtTM)L[\1rHeYio%NFZnH]bj=*T(KtL*OCoCbE:4rQ3$Buo+o$4_+PD^Zq,-V`^7OjjE4*E1cV[eH+#gJ:f
%ZAPLunVP6LS*N!a:>h%7ocZMN<>,oNp#E&':=Q`B"TW+Tdahq?j>'@1f>csS0e;<7"IH*/r=6A(G>]-?E%Ro[knK]LQk-`H^YrEL
%']K6RTj1#K=Jc</&K>aqklP$.Z0@nI2k]1bN0Y2k(a4hn-P*BggEBd8S.LEk+/bN8W[3C6#tDaF1<hDX%']XM94?:*fC-VsFQ7b$
%"?'?t_<AkX9K3/02H]ajkf*gM<-&!le*";cCeU8OMTItOE+u855<q=`,.F8W+_4d`cP%m0fMFAGrKn$O]K*lS)m63#P;_$20[s>i
%C>g^B]P]""0ejPrQpLqKn2_4/hco)#%r$0LF$g[TpjsO?0YU2ZfV),JQg&Q#`<Jdd7W8\'[0[7`;kY(3bFAi5W<ulHMo.5JOH(h*
%!=!H.gUOUGL'g.jl:+ce,iU][;[rKN/B8c>]>:g:O%Lr"U2h(Id<Nr&C$MBK,r($2nAV_8'E_kW72hD8bf^ddZRe[INa<dDohVEh
%1;5i-Z\Gs=I?ViYalhuGi"YjYg*n53(5-]Q`rnN4,@YDUkD5#?I(YIWi@nR\;O>o_>lS?Pd;_lfqZ.RlXg!A4V&AOoI80(^Hj'Of
%!mXjOeJ0d1?j`q^61dij]7k,\OF@CX>21XtS2aRmAZF_1@,I(J2AE4PQSog$(rTp6ZG!2W-Tu@)lQt#XK>_Y[2rNs"%WW:k[_^Uo
%BZ$d(VrH6TP?k@a93tf]Mhn'#-Sf6C3hD^m(-QPj/&kWpI$J8V-;lWS2-n4r4INBIGqscL`DCE[de-?Z?e\N21t><P`-'A..h<Kh
%pO&+Wc1spZQngPT9LQR)mMg-V4W6l>c53YQlDDY'Q^O%:T-M(7L.QJ(1]nC^Kr$r#aiM$koXQ2f.1Bo?nZ=WL-9W7k2j%%@6^_N(
%af[)2kGnXC73P9<OGW:@16L9*>:I:'.:*c;",p2=^)85hbQq4#Zs!bcYJLZ]39jMJ5ULRj^7Vp>)QMRldo+drjn2tZ4cG6&+OSND
%'=VO)&`UY0AUY=*I:pB!(u[`"-f8&2TZri]0G5Md1t<lcR9N5uT")LMWbX7nQ^g34kp?/rjQ#Hi/M2+V++j58.&JTb*fGnBHneL'
%&E[*!#kY=@AbT\&fD-$kSbYlkD>>)&SbgJZ=15W5@Km/E4QVpMF(V)J>%>:88(LPhbnj%0L?Y2m;Im"?D(*-/iKu>-Jq#,k8A)Va
%`7B%,/:(_kpL4!BQaa]INK!j6ja:q^G&"b,OZ0$TRG`sj(?2?LB.)+rK-5_O:G-HGWgjSmV47B$Fo96A^Gj1l0sR.=)@oPrT:&4n
%`HS`ZJ;<YN?'2nU1[=)+diHmkoq*dp;g.C\?6H@dPFQ'ZlTUmXW-^R3iXc-sf&RaJ%,ChZ-(QUON8Ug'EnGY$`A\:ggY1(N_Lt=F
%.>Kn`VGu>]OeiIFO?c>Y:cBUEpL&**2eNQOj-t.\Tkol],0_Rnj/-I'6^u=-:V<i(WLOIo]6(fDT.]RSF9pC9s0(io>')cfl[E7@
%_qbU2)3aO0EdSaWiI\c4?3pA$0rQs!o!HfZGF]D.bjHs[^V208]PFP5Mp/-DN6I5?ET/rOkB?p-J:KsKPW>0pmKpO1ds>/M/8IS5
%\.c\8c1%DL[KcnS;I<$Gf#D;,=q^7'2%A`7hFI^*0o,:Z!<@:.H3g\JUAbf7]VRE!r'2r93W`drkbFAa9QEC]17#u`aZRWhJ7SZU
%MmhJ?VW;6rHs@Q)Jg;]Z%\-A^Qio$]h!JJ]83kIjAT=I(7)Fgrd`#tD!",9\_HCCY0VU/L7BbEk6^\'lU;nW!g=:"]";MB"!*i&6
%;qoiSh\kLrU$KB^QZJ+3$,hD,`1UKRSPIB4/.tXiB^.0T%OpkVStk*o;[4V^mFh]IR[H:A-k2PsF:h8HV7dIcKlk_'$&jN.r(!?"
%o1iUKp6IVWp&+?sPsj$`Y(Q@Q&BBVc8HO_G\-ea<*E5ci`$J(n%A_-DL*:)\_2/1>h6R\[?8_DA0)7IF^>hO!eeT@Y7LkN\SH_2b
%I%C$+N>:BGiHmc)@M_@RIq#cl1>.e%Jk7EEF'\7W(eM8&"*(3U36(NM#D2HUO8%T98_Fk8/uSQ60A:`!<mPu72UH9+6Kq)V.([?6
%,kY=Q;;&N<nZlu+4)Kfq4k,<r8L@>(d:-,=[bdS\Gs%*%"IMK`UmW$L$htQE@Dh^.!*^"7qJs>[U5C`<*G!*\kQ+7[7`C(Xb,MAP
%<QQS;m&EI1!V3j[.We-,X`h<Uko+DN#?;L'Y^t6SC+`aJFgEPg']^Tn4&\)q).5;`JQ,Z3mRL`7i+")4;O#Si0QrS$d0(058!PU5
%d9U'9G.0@u3&cN8?YbBe\tjSiOmu&N3E`XIbJ7>rBbTPScRoP:#N-Omdc4im[5g*f[l-PCYiq'@XpmW\Wf:HMJXY&E"uM'M@nB!B
%A?$*U<?)sJ#a[HI`bsA)<;/!=D:Kak+kg$I>N4t'BS3$5G'sWjGp9$kD;\)<MD8YCAm'Y*@s;]%h9D)u<#EtGdmfc)BXga*[ZJg;
%n>8pDlNX%5C';tb#BJAIc.\\Y7\U>a%k"3sQX](#;AO+Opf([\=RiC#@V4WFaW@KSX5q9#@s;]eo\bZ\Y&1M6Rhfu]<b.qg.u6n]
%I^E]jR2-9,>*Fn1*"@[TXN/BDgt9m*JGW%[.,2<^c*cfEDL-DAL/:Hu2VGL+[Veu`D>L]sS/](ERr!_<=Q\$Yg:GDJf$.X9FJ](>
%lIoe/`kj_!\j:<FNJ8d`r,^E@h:`"dd)s(Lip4e?(agm%SF2sS5C3HKes(>dQ'L/=V:oKs$?f47C$3KReg<Gg%LAshh(GAYFX*:t
%aI5r5:"^rJlaj)iObm`5fVF;hpi>4(r%K^^jkSGC\l=Go,YoE`hN,cl*/'ur<7dtWMiJW9qPU`RU.^SqBrSYJFEu]nh7@iM)]@Sd
%Z)J-sUr"knhVCF*3N5@L`t=$_=d/qM=B+!"$#kXGXOf%?]Hl[[DUp/EQQBP$V%'BA3Af9AVYCq[?47:u\O(Q(6\EjV$r,K\lPGQ:
%X\JHm\n?-ed\t;FXl(S2CJb9bk=RGPKqQRF/R$.*N@NBl0_BbGf%mo*S)/Qt1IqfbK(Z;'+BWFL^&`ju[?HY1&c32@L7Bed\ur*7
%mn;fmeGZE"`u_&U'319,DK^Xn6Btqlbd[kRg>W>KE/5jcQIa]/rm*1PXbj5p;Eug.A5H+_:^8;fr>f=[4?#uV9Y/fbTdDfIUM_FS
%eC(IfOLn5r]!7;f'hA0IQ!?7'>A>pWo?icu;J@b=T"d)b8We(Ra[JjHCSDt[U"=B\P0U5(eVUiK#NAJ?>kNPIlr3d/W^Qa\Zhg-*
%B^0J8W\$Uu>OkZ\VAGZG7$T6;?InQ"<71Mq.qgh@<n-$Xr'aP.X&?T54Tmr_%uX//+Z'He^_bZ+Xn47?$FRfN(R9`m7:u)bjAf-&
%lXGN?kTW4EPP*9\Lb@1pb[BA5`8DX'ngd2]0j7c3@s$=68uh:MAQ(OgJknpH"WT*"G^n/dN+Z]#-!=!U@S)RmMW&7n(:Not6Bhsp
%c/__Q]*i?FMJ'M8l`Ks.0l8"ns0)Mu]>PHcr/N3^Wt'_,"l]A-WGkGXHVG;B4eRF2O:;*h)4*<.M<juKWOiC)"+iY<==-'U1r8VX
%Z:a;<UgM6G8S''0jNJp[N97dD7IZDOHmsO&U8bV$!Aa]6G_q[bOi4NSA3)j;5+nlfaL2l.:0'ucOG*PV2@SR#63$#O1Q8u)ZdOic
%\YZcIfPsc84C0UdYB2'@&`V87I*09efoeIC3G5l`^=G_0Hm(:aHcrt![r`L<YIm5hBO/_sf>[O6OR]2(hc#_`%B`]R)-b-]QR-]h
%'C=5sn">PIV)7H"8S\ZIJe(MZB3iK=?tCTkH<i,P=dFGb`9*oWlmC3gAZqQ6>8Lc[oY`s5Q:TIn%u[E];[hG"Y0%;D"M:edF#TM8
%)jXDqpT(#eWQ^^H11c`;Z42_(p"-\_bHTbrGQ_7f@nDa9Yah/nIu<J'8'^G'McqZrgeh@g5h_6"[uuE7N2C%V.:tp$MrjN0WS^Jf
%AHI1S9@YirY"O\>\hpHK^4\+FUoUB\T4:LU$k0u#AQU950CDd%R-N,;<ci>-JiNlfWf0U<6!11[Y8d@%(;G78lmEWU#;S&\GF-jp
%]%o;^M@Z'io\?6CVaJ"0lu$[GETmR^&]<<Sp%Z^,Y\8(t!I4J0FWVO;,l'9#c1OeCh+-VWe?-<d"=sPd:0PHfe<Ab5Mk#]PP(J)@
%2q"ZPB,eJ#2rS=u]>]^'#mhMZ2[92kC?t;mBm,XBd+GR#XOnoRf:]dC&eZWA_-o$,@.UK+#p3Yj;uAIH-kl,_YC=-3e^FDr.!Gno
%17Oo$UTjY>N-(G=XJc"pPR5AjW0iP_36sj==IEA$TpbYD;*C-7Wi`mu0q'Y4QE6`J=>WH@P>.I69n#*Q@[9q!2(HN\E!ug49gl!l
%g!1erj7@D'[q]ta@IZh^27fu5+`mEB-AfZ0n8??7n@UauV3mi-pu[fH!jt?+QkuI5j9H/7"_h>OFn`Z^j08r>eJ[<DRT!8^^hG^c
%@TNiY>d.,=.Q.A/9J*a]WC>^o!:!Q_pZj$SR$;5e0ikHQ1j-T\C"tVG]g88nCrF!o!).AD[+7'q:\6J7;4]ULR9+7]XUP!Z86csp
%7&ED@U???#'8[dirRG!RMep,RqPq&VS;0n9.MnND(Hu1bpA\krY1a7\$e@M@_eTN:CXb,6]I>YKNL:r4fSXdJBB6s2Y/mTh!+C,1
%[Na%7h)t0_=m;[1K_G:7]-t-\+_1!+DGXM[d#SuMOe-NUZCUf(;Js`9%'+X'eGZt#.BN_G3.+/<V)UqFLu:U_drJqV4%:&j9-#F6
%o7rUmmDj'5?=g75kNfSE<lWoW,^,fo,)73r^`=qaGR22"@`ai^cfE-ISZHTD"kMH?WPT^FZNF[>)Z/>ljSqdd@Ndh\."?FG&8B"_
%'M`TIX-G#!(4aFf;t1bKBbc:`8UZ&M/sgf[Au(!GBa-Tk*'o5Z/18Hi]l>`1\ND/T>:%]^j=iECZ[5KK%C/U?+OeA(PVf;n0?mg?
%_ib%Ana]7X9d4J_CU!hChI*^L*0^L9%p+hW@pYDrf]9^<'V0uQ=]kqS[oqgbkg*"rl.b)MMiF,86E,t"1j.4Ri?.=0aDsh=3f+63
%?8+]gaF.'c@o--io&34!Y@c`I\Z1\dSgt[1Y[oX@'[6(-A#:S0XS'P/#3FIG`!<[[!'!NacQ_iFpK!Rf`G8M[*lCJF@&Tm;nk!'I
%M-Ta@/'T+_0._I9C7tHdrM$_t4lG\9ap;a/ALYAAcc,0To>4gHWSX3gQ%u4L9'2#AJsZlp)2?,rhPA\9Ne,R"iDn@q,h:W?K0ZYU
%,#9jR*Bh<E3"LJlLcMoD4OInS>tFY^\nC!A^$nRs#p66p(5U5;&'^k>[$IcH=P!1@;RJZXCQ3(MT.e<e/SrDb>]AI2XdN.`?-Ds+
%cVhG>cTH)bqjuL0qpS0'0e6&'*,YSE`UfLqZFO43[J"'QO)Ed:,dVP[,5NoYH>l;2=O`d/:@rfXe_;#i(jV6-5Fp4?=6uq)Y[3K6
%mR:i)n@@2[r8q'YXhBtd9:'M5_re9`2sp7A>te)Gp-!3a[2,iZB;saZn!\O&SqVbTjV><Qkk8!^/EBDaNB[*;R>/%ICG.(4)EI4W
%Y.jonT*-tF,]DH4q(rGE>'M@DgDdl3[VbrrRaB/?d]?1l)Ro8&_<59R?!_hK[J!3L+`V>aYLUllYNsM-N5;@%emEWibj+<Xc;M>=
%/+O-Kc!#VQ=[n<*]`oiXX^bRb:'*__[$p]P<,:q^dcnsbD;-/D0.N_HAQHDpWr51@Z?;on;fn2fmCB&$ESDRi0.Q$A$XILh,XJEa
%rnqoRnZ!mrT;5Y;c'$b!QJ[kUNH7=c_eWM@I&!Bmdl].*<N"DNWjcX*flS/.ps%_`ZKK`*@0R^$XhQ`QYVXDrSY]M:2DL#9>O-2[
%@YSKK+4H\>4,IqG]f^V?Yd7;IYLuL\f<tTS!lK[ZUV"c7n^GV`go"$Ao'U.if&!W7P;k9MWiBHl]'*5DEg(:%ml?9Q9jdCY?tZIq
%ShVJjQ5Z'<dg+[R0=WMYTB(pNG]@"_425#kp%G8VrG1)B`M+)(p$20I6pWItF3PM_fW-V\g3bnR[J$IBU<?U4&Y/SRi)WJa7(t-]
%QArC#FjjnY0Ah&<lKr^abbpdfVH*rRN;du,*,Qpu862o.YF9/i8_*Mg0oX#ID;R-pqG&uE&&o\+1?/!jN@fnk;_rhLWSX5Q]qr9j
%+';3Q^oOTPAqcUbhl=A@`MC-lo=L0#m7!YXC"j_-Ft1&fqa9[ug"c9+gtT6MCAYo&<7c&'rqn%@8QRr.@.5Il"4R^#l3RJ2'>?`,
%mX3C%hC;+QP;H+3!'a-TeU&',PW?e)e$M\g;G$j'Zq-F/VIm3+-#GL<RS&:9guu\,$1C2E=O^]++nXo'"#iX9$H.<XF!El:A+,d^
%k+;-IGL,M'h*[-X[Jf;H^s4@I4\d3im]u$<cReF[dc[Kl@5CESm)%In?*f8`Fme:)l&@]+q4"_?>J'ic?jkRM]uSc%9@E;D/h<OE
%Wh,`W^'i^8mRLAZX+5k$s2R^lc$ff,1?:1nNr7Gl@P/T[$r:rtTK(3]E\s*l1B+)mB7[O93I4+\3/NE6))6%!f77`j&R\J;!#g[+
%6FEV<-0UF7I`sIW&:1h+B%esD2mKL>fn'r=?0.5Z>0J;(Q';d$C*&qFkX+RJrI3itIYVk:=$>!$(])G(;7H-YG$j"SNd]*2MTMg8
%\:<hN\urb02sTGc1h\-1ZYVjMAi4Cck1AE+e%j@E/8A5&!Tqs*`OG0*gN?(Y&Z]C.<TNj)GiokLRm]2@c_qOs<bXGQDEg@8-=N\H
%q_*^,Oq'KJ:X&_a-f0H&JolXABuKaACjfAO#G*rV"QI"X<D#r]S(`"(6dkg^aHEHtj-`2&8b+6#'L];P;N%`0Y`L8>r2CG7iW3"t
%$03T)9b2nT56iFTbgMOZa<8!^j,78od]Y*cN5X5FC>K'Y4+JPPE9[q9:JCol+"a]fe&XHOfRd`q2,Kr4p>M<P_E(eqihT8$kag&:
%4j?9*:4ocJ((1*UOWZcm4pqKPKMT]fWM8@5.U?o/fgrLiN!,82h^WA3n1C"qUc]gCMsPo7G20-4n<%d*?fbXCr<q).s7e/ZL&uhA
%Pelg<e"i[fMeU)l?TrK!oA;BI.,^"2O7rRrV[it/L'dM&f0:6rnA@Kgq$1_(gaR^D[d\=`Ot&7o@G%`GRPW")_i:Q1InD0XRm_Aq
%g&+jn-G[UAY'.F14FB@bS!dTd0'cdZ=f2F;5ietMcaFu"&*e!7Ser!m-[\/3maI=aTT>)R2&NY_K8-DToR/O)]qt.(V>.+WR0>2C
%=jbf1hT7sp[.:RcVURli1TtO'2l@\<il3g4`@a-3i[dC]e[#,F!r/(IZF>KPU=T$uJs*X4&[ELM2a`&BqXU+<l!qQ)_N2RH,j#M,
%aoZ<nY%(`/R*.1U+nSh9P1N58*WQ3smts5/%tR`/9]trGS$(0&Ef*]bkJaKTQ>Eb-Re#Saj[-dD>!H#ncW=-YIk-9Y!Xc&"Mdn/<
%f[,+"11#NTP6+;#KA5*<VVnG9Eg!m)"N;VZ0rTNQ-Y0=UK_,@M;T@OnEVc)5\m^%i(2W*6=AC)'.CQ1107^E@T>G"_?-Cn;^firQ
%UK^VZ3O$Ve$s+JEfoBEh^ZQSqe2uV%a2/`]r_C>*<4L7c.3q<IoSVA7AD%-r0-331ZDteKa*e[EH$!]gY?Ju!N0I9+`AD^cnQBEB
%A3W2fK_#bH.d]c*.YCNE>a;^Eg2U=<+![@Ki-ZN*-&E*WP$/m%CI0-M/^=6lp5P%T==5tAE(3)>/#?:nff6ne$upZ"S@rR8P>c/Y
%":>V`<lraF7DN[`/JrjI+8+f].X;L(P44m0@n:o2O>`R?88V6)TDUfB?O8M4Of*:.)a4;K.-Fb1nAhSU=-*rQ'eLa-MW!L8A"!P6
%g4C#=QaWc'`HFs'Zd1s_-Xc)E[3D-=;G\09$#uU\%7Lm_VqOlBe;>\%lK!1@15DH&!0s[b*['L3*O"(2>d9]/XkcW\2bDT.jsM]9
%q"`QC0?b>A:FU>f4g2eu";(-KkUD0r[m_os=(8#Q&]nf2%[:?m,DH&o9;NAL'@8r`Y';;o/X;P>(G82*#:[#q.b'*P8"pWU:f`]"
%X%ggoNRC]!"duauB.Xe<q6XeDFOTR\)!@aTp(U''4K:Mr*mY1Ldb3,r%'gmqlB<8Y\CtW*1,:+=l&AGQ+sYTHag\!V1;C=;4ZhT7
%Ye>WlggAm`%:kRST;B:#I!^6gP\t,6ag".qNekRNckG#CaKX?Z1OSC]j"PSGK)U)P_%ic`\:jn;+2e$7o*KG2]gMT;24Im0B(-D#
%e%X?GUNu3&H;OZm9e<IZU#WGoB0,F#P.L)D/!,E(i%1>`=pRa+'KVm:FL4W^Z_e*eW@775_;oX5i+"R63*_W?LYa[FDok)(8'uA^
%=!R+77Idr2^\KAHZr$^o4qXV4X'^sXP%U7mhe@Y)I\23nV$rX/S*G/90%JBS&9)DC+$jS6Q8a]uSpk!X;0'+&3MZ%e>$,]7c$:hH
%`d82l,%`%<FLmbf,(l0mJW^k'epnnN/R_]!U2a:E[QP':%"XD5jBLPR1.@lLj>60;'%FTnkH4L-4+&Q-0MccaXn^qTQK*ZV8R(oZ
%63U(p%fMtkXijEm#n'joJmp>UqH:BW:UF\e'h':>a=$N^=PBPHq:b^"L:],+0dZJY3%[;eOP<puY=Rl!$/Gai2&;EQ(YY^a(8KTa
%aII9&a<Rf0&S7g7??\Y_>V2Xtpaq&N7_;<4lq[qW(8Z:Y]mCh`5r$B%9S<NVT(b)XRfkE(][VP6IHuOK;2;]3#EQt!od-/HX4@/A
%)W<<#BsNfpplI"@9qC4I<'-D/Z-`W=_2kUl__e@??T#F`fuA18:>W0Om+(GqBBDqRq,P_rm#B7u>@C[,G#tC4R"`+C==Bp1Z[^ZC
%;Rb>o:eQ)#YYp+#[QZ8A!*Jf73@G@<lYGY)7Mh?geh.$&i`UA5W/Ii(Wl#-iM![fhKE3]c>ECgpr7\`!C6#3m_mE^q`\p39@tK6l
%<Po[?`b%A,EGK98gpWiY/!E.YS$d1<I>(bbn)Zdj0S"EDdKJPO%i[gKHt<MCIlqTSna`M*`'5;$L4&g>*9&%N)aqDfAJ4NoLQ*LS
%>a\#QH.4OJPd>(O.HM$!W#D5O,QI;4J`PF2e3mbL4DZ;=ntTf;T=/YVb3PC:N^%>2na`Ne`'5;$R!AGTAC;(fW6mG?r5idG+-.=8
%Fa\bMl(ii"NTZ4d^VkN"X8L-Mkh0$dMtcG3]3L6?]$G6(b8gL"BD!_5R0Kd3]1b4&6.WD"PNMVojQOdU[Q@f;d$4't/[N+tY5YNS
%F+[sP``[0cdq5,dQfu@C:Lpq9]3d>2gs.5#([s;3r[Q6l/a\o(('L'c&1puA8Ni9gIW61</RIA:QOA9Oj]tG$HM:35T@N&6U(F8S
%0q42s6XYJW1d@k@N"Is_'MfKq9*5Ri8uO[M2S%;Sn5c]KYYo7S%7Ao\+[0K$f]1f_/CiMH'XG9bCdK&5qu$k9Gf"*!i&M,,MZ]E[
%rD_Xr=&Q^pO'mq+V=\H<oEX2>m9<1cPump28pc@MarU.+e_4e.Op&Ue7(U@"@Wr@Y;M=QeDpP@6J>aiElUn1dk:m%DPA^6!,'Ls1
%2@X+/<s`<PI9$!G9r`YTWSS\(m%_]KB`5$inst-5!>;mY`?"1\QnHO[K=#icC@*/cOnbQ;*ILO2CZ2"mm8oUXZH)6,gQ=d9Cd@8]
%3(r)IcXuT_6N)l)Nt2W\CW,A^ZT:p!kmX%bB;n'Z?#U7badsD2""Fm1Rh&Rt>[)[ri@kStE:U6P2UoHJ("^<;jtbe/hTJiq^9uqh
%'/e."M#'bg]s_BR0$p<E3DZ*+>MD!]):HkWjF3E[_iZLfhI[[rn8tqO][:*3D22,.)6-knAU4,\!&Yp/s6rY=>6r-8@sA5_>[,V(
%I4V_ZQ'(EdlQIoGe4>X+6MLHM/G5!?+)@g_LTA;_^oLfam,C%[QmNp(i;6'Q1$umKiC#EdR)6Trka+J+od0!DO5P^rf4g_d]O"3V
%g[aTp#t^_oh!?Y9+nb9LZts4,]Bu):[CZDG6CHri7sAMm!\u!-oIT[tDQabqW[GA*omL"W5$0)Tl?4uFdWe6+J7C#K)Gl`D]97Ja
%[k7QB`=2]\j#A2]-ocor[*`gCN+[IG4kc*[R1)QW/#i8mD+h0O]7"dK5Z#0#fp?6]6A8tMg<F\;6T+acQ>12L-.KrKXki,@o/Zcf
%5<WFpo:=kbTQ`ic&^/lk9D/"ApJ/mA4fOjX!/GV,XX(ZeF*>E=+j<'h-:PAT/#hB3f^>DLR"!]&Ksn!shSFZM/S4Md@Y:$:VU^=5
%P3VFGjUraG`<b-nq^Q;$Hr8I!\2kHe"FJuL_Z4\?SDKA&0BfOEd'mWC5Y0lTZS'm>542uO[S.f,3M*'JSKJ,ua%$?Bj&VMHdTdsL
%.MNq342Au8_j/T<HVL(3@>S\2&<pKCo7ee@+<qFe4+(h7947J#-'"/R!is5G,JNA6lJ::Ab);4^l7@/SfR[J;&X85g37Nd2+$<GO
%b\p7HY!bTX1@OZ'fJ8hHgEjWH";65?#`\Voc(QsP]6$^dd1=M_']6V;C<J$/4P\adJ4rA"CY@X#2/iJpA\E*AQKFpgjBW)bk1nht
%B80WIU6.hr;&*!HQD(gi"AWC4?g+53LU0fmcFqeJ_A5)A/Gq'cV--?r2bOJZkLCR=5iitUl.\nhf3,,_[qJX'/"AC*_.J7nTS%'!
%F8<hg:V#L1$_p3J/At-BbqgttWd.[jXj`t36,4`[lf@&sSul/Ii_Bh-#.UeWi][a`]@WY-N-T'mQN<J+@X58`ZE\5PN`Xk0A;E7u
%clRoa',GPQH?ZiRSL$na%XG#/&.)4TL;SUG\(oVaH"1iNL2^^i=?]t]obm">g3Kb;#pDSW&]j*tBt\1#6J.;!7k:\"8_Y'fA\*ug
%m4J>+79q0HK4]?\-#h0\KsbfR=PQPH8!a4qJBD8$;Q[XB''f@7_K!Q&M6Y<O=C6hqqN(Q$%MjjK!om*]E#*ck/F]=#mul,b@CmeJ
%Z9b0VFI.HQOnLXKNDLW;;ul#mWHWR@UL:(&_8Vj9eTh!,7+aWL]!m+4*<Ra4QXSMamk"/"2<X9i[UgqmBG:m]=r;hjVj2#1+,*RC
%:lmS;,>;K)$hYt5+i-u6^G%p2/D3X%j$7fZnrdQ/mG\$(/&fAe9"-DM/CiKr$n2gcI#4aL.?^E_n5Z<c6/cp(`oJQBR'TJ)D6[TH
%I1@*'%E:d'9cf=k=7*sBVa]pe<\6hoZdcUbY312-]#!)QZ=O!_3QM'E4`oB*hX0T^FPMP?V;C*HRile0j`&KUbcM2o><.G9`n.K!
%\094Hn\iT3qCM=%D?jHN;J6AUY:&^1'a/MqoOumu&2p:G%9h>[*.uN\hro,rH+p2Z7kE5T^:R_^o;]p\?)n=8[4&`[SL^k;?,s'r
%n/QP9C'uI!8'5u5D%sb,YnD"*Oj\#MN@6,i+).q1K]:(8`tip]"kS!bHL#5?V<H[3IldT/kC9I<s5f%9q"2hWT7?dfT8j.`rS'9g
%IK&s_^\Q4E5QCN!5CE4S2p\*\I.P5dOSnphNdlKPm`3X<rV,2ur;>NO^]*VMn,tuH++3b3?iK_js7hBL"h\`r[/~>
%AI9_PrivateDataEnd
