%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_pomegranate.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/14/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_granate</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-14T01:45:02+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-14T01:45:03+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-14T01:45:03+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEAlgCWAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAlgAAAAEA&#xA;AQCWAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6xnNu4dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdiqXeYNah0bSLjUJEMpiAEUCmjSSOQqRr13ZjTJwjxGkE0EH5Z8&#xA;zjVzcW1xCttqNoR6sKP6iNG32ZY2IQspII6bHGURzG4ZSiYmjzQvmLzfJZahb6bp0K3Fy9za295M&#xA;5pHb/WpAqAgbs7LUgDoNz2BnDDYMjyYknoyfKUuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KpTq/mvy/o86QaleLbSuodVZXPwk8a1VSKV2ycccjyQZANWfm/&#xA;yteyLHbaraySt9mP1VDk+AUkHE45DovEGOebro3mtvAx/wBG0VIZFTs17d8/TZh/xVDG5XwYg5K+&#xA;GBPU7N+mhx5N+Q3Y3bXd5HcRalpgB1K0d40iJoso5cXhf2fiCPA0OV4zR4TyLl6jGMkeIfVG1PzT&#xA;eDStasdOSUXEmj3Edzq1yCKTagZkmu3rt8KGMRL/AJKZtJxFcI7mrHpyNMZHnKj8Pxu9izVOG7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYqoXt9Z2Nubm8mWC3UqrSyHioLEKtSdhUmmEAnkqrHLHLGskTh43AZHU&#xA;gqQehBGKrsCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kse1bzzo+mat+i5o7ma6VFdxBEZOIetNgeZ2&#xA;FfhU5bDDKQsLv0HJJPM3mTyzfLp+o2uoRF7K5WG9jJMcwtLr9zOGhfi/w8lfpsVr2yzHjIuJHNiM&#xA;lEEdGCecdQv9FvBazwRXFvIWV4plqA8ZAIHtuDuMhp8XFe5BDn6vOYVsJRl3ory3qmn3EF4LeSQS&#xA;3DwNJazMWMRgSRKJyJPEh/op26YNQJAVL5p0Zxkkx2vou0rULez89afp1xQWl/f2UsjH7IVpUSRW&#xA;HgwTLdNj4uGXc06zLwcUf526Q3sdxcTzxP8AFcTO6tv1diQd/mcyyXdZgPCPdwn7n0TmqeddirsV&#xA;dirsVdirsVdirsVdirsVSjzSw/RiRjd5Lq1CD/UnSRv+FQnD0PuLPELmPeErs549I1CORWEWnXbF&#xA;LpCQscchBKTCuy8iOLeJIPbI45GWxcrV4QPUPii5fMV9OC2n2yLbn7Fzcsylh/MsSivE9uTKfbCZ&#xA;RDVDTSkL5KuianfzX0tteSRy8oUmgaKMxj7RVxQs57p1OIIItjmxcBG92neLS7FXYq7FXYq7FXYq&#xA;7FXYq7FXYqxjzh5GtNfpdRP9W1ONOCTdUdQSQkg9iTQjce/TLsWYx9zZiymBsPL7nUNZsZ5NN1WF&#xA;Lh7c8Htr6JLgKO3ptIGZVI+yUYZnxIIsOwjHFmF1uh/Nmt/prToI2sY4pbRFRTCzUKIOK/bLtyA2&#xA;qWIptTpkRjAlYatTpT4dR3rok+my6HqOtwNqUt1C06v9fup5vXM1y9eLgqkTRjkQTyL7jc45uLgP&#xA;D9X4+90+OhLfkj3k1bSbO+0NEspY5LmGS61CZYlu2KRh/ShadvUCKd+UYqT+1RqGWLIJQBjyLIQr&#xA;KBLfdTae5Mr3DN6s/P1VY0BZ68t+32sS9PmxyOKUR3bPc4/OHlt7G3u/r8IW6VWiiDBpSWFeIiWr&#xA;lh0IArmu8OV1Tz3EEZFdaxdKGstJmCN9mW8ZbVT/ALA85x/soxkxgPVNE9GpLbzmAONtpiyN9mNr&#xA;uc/P4vq4r/wOT8Ad68MkHNqHm+z+K98utPEv25dOuY7g08RHKLdz8hXAdP3FHqHRdpvm3Q7+4+qL&#xA;ObbUBs1hdo1vcA+HpyBSf9jXKpYpR5qJBOMrSlGuea9D0Xil7cVupNobKIGSeQnoFjXffxO2WQxy&#xA;lyRfRhPmP8ztetmaKK0t9HO/FL9jLebb72sNWiJH+/Nsyo6SvqLKEbPP5eo/Zt9rBNQ87+b712L6&#xA;tdBD2jYWw77cYadxTc5cMMR0dhDQ3zEviQO/oL6iuaAae+nFZ7yeYNueUshr4VqxyYiHa4ux8JFn&#xA;f3cQ/wB8VS2lmSWNPr81nGT/AH3qTFUJ9kJORmNuVtGu0ODDDiEPjctvtZta2Ovw21ve2t/farDC&#xA;xeOQTLd2wcIUNRyIGzHYNXNfMyNgxADrMePGDxQNn8dCl8n5k2nq38GsWDupVBFZjdPUjZj8RfiQ&#xA;G+D9n6MlHSbAxLXLW0SJD4fj4JunmqW5sLxb2M2bvNb8pGdJII7K7pxb1IyVDcFavI15MPoEtKY0&#xA;RvX3so6wSsHaz9jKINUt4tZtbuKOW4g+pyrzgX1EcyyRMpD7J9mI98ox0Ab2bNTEzIrf8BNF80Rk&#xA;fFp94h8CsR/4jIww2O8ON4GTuR2n6xp9+XS3kPqxiskEitHIoPco4Vqe/TDTWQQaKMwIdirsVdir&#xA;sVdirsVdirsVdiqVa/5X0bXYlS/hrJHX0biM8JUr14sO3saj2ycMhjyUEg2Ni8i81+U73y7eKkj/&#xA;AFiynJ+q3VOJJG5RwNg4G/gRuO4GfiyiQ83Z6bU8Xplz+9iFxo0kt3GsBRFmdUq5oFLsF5E7/DU7&#xA;5a4Ws0RBMo8mc6r+X3mObTrPT723VPMtqALFg6FbmANQL6hITkhIG522r9rNbxHDm/oT+yTDgMof&#xA;04/co+XPLN9L5stNE1eBrS5Dj61CWUMFC8iUapVtt1Kk/TmeS7qOq4sXF/E9003y7oGixtNZWMMM&#xA;qp+9uUiRZXCruWZQOtMhbqJGzZ5sW80fmMfLOiWl7cx/WtV1cetbWXILHDEQCoJUEniGAJ/aatKD&#xA;YSEbRHzYL+WmnaN5x8z38fm24kXVbyCSazu2cxOkylSvp1p9hN1UbADLccQTTdqAcWASEbnxeoSj&#xA;vXl3fDqnfkONtUbX7bVPOF5b6ppIZdNl+uEQSCIuvqNHISki/CtR4HvjCAN2nUAwjDhhxWSJc+Id&#xA;3uNeXNXt/Of+JNAW78w+VPrmhWzfV9Q1aORJGilUL6kqwBRMigtWqNUDKxA1YacuIiXCd+f2Ej9H&#xA;vQ7Xt1At6+k+YHtvJNt+6n12/T15Emrvb6c9Q9y1BQVBCjflgGmjLc7OFPII7Df8fd5sE1DzkVeW&#xA;Hy1FLpVpKaT6nK/qatd8jx5TXPWMNTeOKi+PLL7rYbOfpOzpZKlkPDDbb3mvv6n4MYHpquwpyHxn&#xA;v8Xwtv7NkXbQEMcaA4QRv8fTL/Syq2jIx67EVJp2/mp/qsOWLCWYnnz3/wCPV5xkBP8AqlXtpD9i&#xA;m3UU7V/h4Yux0OYn09Pu/wCOn+E/DmF1yH9MlK1p1HXC2a+MzAmN35IOzmuLaYTRyvHIOjRsUYU/&#xA;ylp/n9OCnmMWAXcxf48vxfkJJ9Pc3d+NK1BJI59biungD3HAmVY1jkiMwk2duTsvxddsqJESe5q1&#xA;eACdRN918/cfch7m+1PRrE2EtitvqS3i6gmoIIywAUoEFEPwV7cqe2GMhLcOHOEobEL/AC7qd5Jr&#xA;FrZTXN3e6RD8HpxNKnGPqDxQ8hx9vkDlWaEREkUC3aecpSA3Mfi9P0aDTtSuvSsEtbGRa8Gu4ma7&#xA;kC9WWN/TanfkXJ8QMweE1ub9znZM3CaEa94ZjpuiwWUr3DSPcXbrwM8nGoSteCBQqqtfpO1SaDHp&#xA;QcaczI2UwwMHYq7FXYq7FXYq7FXYq7FXYq7FUp81aNb6xoN3ZTMsZKGSGZukcqfEj/IEb+1cnjlw&#xA;m18w8N0ywuNYmgs7ZKy3ZWNRXZS5C7mm1CeubR28p8eInvi+lNU0s3+neg7hbtArwXNPsTIPhcAU&#xA;2rsQKVBIzGnASFF1wsMc1jyxpPnW3t/r7S6drelSATvbMqzxN1KhiDWN6c0anv4jJgkMOfLYptqN&#xA;xJomk21jaepqOo3LfVbBbuRnaSQqzFppKV4IisznwG2+KZGngP5gzCHVdK08Xw1OfQ7KOyu5gCqm&#xA;aGWQsi8uvBWVa96ZYOTPCTAxlz4d/epaz53vtY0W1sLq4WVbDiLRmjUSoAOIUyUrxA8TjZOxdnLP&#xA;phGU8ZqZrv538mT3sv5ey/lXFNbRxW/mqyEdeXw3E0nqgStWg9RHXke/Hp2y08Ji6qEsuLLxEnqb&#xA;7+qG/LmXVLzSNWs7y/bTvJlooufMl3HTlIpJC28DdQ1xspp229i4xz7ka/ODGIq5xsX0O9/Lqfkx&#xA;rzX5pufMt9E3pLY6LZL6GjaTHtFbwmoG37TsQC7Hcn2oMZStt7P0N+uf8X6bAP8ApgAAkjSBhU7A&#xA;gk+yt1/4FhkXaZMwkLOw+4S+r4wmL9y34iTWla7g9OR6g+z9Ri1Gyd+d/CzzH9XJzie9VjtmahYl&#xA;RtQ9G26H2I/HFzMGglLckj/dbcvdKPK9xIJ1pOgX9/8ADaRihWdo67c2t4vWkRaft8NwO+SAdhLJ&#xA;jwCuXL/ZGr+acxeRLqZJTFdIWW3hv7eqtSWylB9SdSvI/uG2lQAkbnfjh4Wg9oxFWOpifKQ5D/O/&#xA;hPu72ManoN5pl81tcKFNA6FWDoyMKq8bqSrIR0IORIpxsejjI8UD6e7kR5fD5jp3qYiAQpUkb8R2&#xA;BNOlPkMFBzY6DGBLrxfjZkB82xLZxzCE3GovAsNx6gpEpQmv+tyO5A7ZhjTm+4Ogx4ckgSQdtjfL&#xA;9qS22ryeo6R2togrzZfQDKSx3oGJp9GWnAD1PzbdJpBORgDEVv8ATad6f5rSOkV7bmFAQ0VxaliI&#xA;nXdWWM1ZKf5J+jMeekkDcS3ZtPOAMZx4od8en+bzHwes+TPNtn5isHMbhry0Kx3YClVJI+F1qPsv&#xA;StOo6ZVOBjzdGdiR3MhytDsVdirsVdirsVdirsVdirsVcSACSaAbknFXmvnDzhdazIuh+X/3sN24&#xA;thKv/HzIxoUQ9oV6yP3G3Trl4sVblyoYeGHiy+n+Efzj/wASOvfyZZoPlPyp5FsI77VLuP64uxvZ&#xA;SU5Gn2Y46nkT1oAST+F5Nr4kiBH8FCXvmfy/q/NfL+tXljrTh204zNOltNMu6xslyGhox2pQHfEM&#xA;MunnEWQQmV3r1tNbxapc2eoaNqlrHSW4azmlRRUF45DGGWWEt4H3Ug7400mXXkmC61ZXttp2uko9&#xA;hCzs1zA3qpExVo2ZuIrw33JAK/tAb8RTK73fPvmvy7qHl/zBzv6T2Vy7z2l9GwdJo2JpICCfEV/2&#xA;ssJsOTpskY5Yyl9A+zmqecNc0/WYbS5h02zsrmGiyNZL6az1IpyjB4int448V9HL1eDHHHxifiHi&#xA;FWb+F8yneq+edRvfJS+V57K3uFUxx2U3AmZWDgoF3pyJ+GoHTCJkim/XaDHDizWbl06WeX63fmRJ&#xA;HoOmaX+XNi4C6eq3vmGZek2oTqGCk91jVgB8/Fcunts89pMP5jL/AEeXw/49L72BMajYUBqQo60P&#xA;2gPdWFcrd9klY5bb7eX8cf60JDiDlDMa/tfaqBXc7cgO6t3GK44mRvrz2/3QHWMv4x0KKigVKEjc&#xA;bAdaDw+WF2+n0ghRPP7vLzHdfJN/L+jnVtUhsi5hjlZY2uSCUjaU+nEX8FMjKCcIFtmpz+FAy510&#xA;763P2PTNCsPqsFtIWGmPK8Fs87ii6fr2mAxxeuP2YrqP7R6Hl7DLAPx5vP6jJxEj66s1/PxT3Nec&#xA;Ty9yZTWSLLIlvbT20tnK1zNplqR+ktHun/vJ7JdvrNnKd2RTSm+Spx45NrJBEhXEfoyR6Cf82Y73&#xA;mnnf0HvYp4pbK49QPyubDnEHNQay2klDbyVPxAKFPbvlUnoez7ESCJDylv8AKQ+ofaxvIuetdeSF&#xA;fHvi15cfHEx71CKzMcokD1NKHbtgddg7NOPIJiV9PgicLtUx8uX+o6frdtd6bII7qvDg5pHMD/up&#xA;/ZzQA9jvkJwEhRdV2pohlhxj64/b5PeND1m01nTIb+1qEkBDxts8cimjxuOzKdjmrnExNF5YI7Iq&#xA;7FXYq7FXYq7FXYq7FXYq888+eZJLy8k8v2T0tYgP0rMv7RbcW4Py3f7vHMrDj/iLsezdF487P0R5&#xA;+fl+tD+SWstKtdX853sYaDS1NjpUVePKY0EnHY0LMyxg9hXMhn2jl8XNwx+mHpHv6/qQ9v5Z1vzv&#xA;5Y1nzrcatzv9N5FNMZAIlgjQTMENaxjiTx61K7k9ctjjuJPcxGcabNjgAScgG5qt+Q5X79+vWko8&#xA;1/mxf+bNO0/Q57a1t9Mt2RzDbo0ZZkRlUVYtxWm1FwzyEhjpNPpxlHDKUvE53866XuN/h5si826Z&#xA;5X0fyfpnnDyX6ulXj3EUZiimkYOSCXilRmbkVKfI/I4ZCNWHHMMgySxyAuPKhV7gdOd372aeU/P/&#xA;AJO1icx2sgsdVuyrz2c6+k7yBQKivwu1BSoNSBlBCJQMTRFFT83+SfKmqQSrIF0+e1KXc80bGJVg&#xA;L1ncpQxEsiOORU79cQWMSYm4mi8B1zTbKS/updBS5fR7cqUu5owCa7c39NVCgn7NR/TLA2ZMU5VK&#xA;uHqNq+OzJ/ywt1n83xahqXCXTvLttNrV36YO4tErH9qm/qMpyeKIu0dpa3LOAhKvxt91sNvNRudT&#xA;v7zVL0+pdahNJcTkftGRiz8R2oTUYk239n4xHGSR9X2xHMD+lH6h5KIBJFfi5bgjblToyn+bxGBz&#xA;Igk7+q99v4u6cT0n/Oj1RcMYUVPU79KfTQ9D44XcabAIi+/fu+Nfwk9VXFy2Yfln6EmqXlnNEbuO&#xA;7tmiuNPX+8uIAQ0iwV/3fHxWaPx4EdSMnB1Xa1iEZA8PDLaXcel/0T9J970W7nSBDd3FzbypfRra&#xA;vqtwhbS9WgTZIr/jVrW8i6c2HUfdY6KEeL0gH078I+vGe+H86B7kg1rUFitY1lR/qVsP9Dj1ESzm&#xA;28FsNXsTIXT+USbADIkubgx3I19R58NDi/r4p1v7nnWvarNqV+00sk0xUcBJczC4lIB7zBI+fsSM&#xA;rJt32mwjHGgAPcKHys0l2BvdirRrQ064oPJQaWYfP/jG5/UcDrp6jKP+scz9xr7VJnlP22KjsTSM&#xA;A/ixxcSeTJIeskDzqA+W8j7nrPkXXimpWVwTS08xoy3Cdo9TthSQ0/Z9dBy9zmNqYWL7nSZ478Xf&#xA;sff+Puel5gNLsVdirsVdiqVeYPMNto9upZGnu5g31W1TZnK0qSx2VRyFWP69sIHfyas2eOONyLzT&#xA;WdY1u8kcXdzKwNapEzxwiqclCqpUEclK1NThjPudHLWzmbuh3IGDUr+0dn07Ubq0IqyoszSx0MYl&#xA;XlHN6qmqk9uuTEj1o/imWPV5Y9b/ALaZVafmVe2WnzyarGl2IomaG8gUoWfgGjEsVTTnyX4lPfcD&#xA;BGIkaGznYNeJHhkKklHlnQ7i4s5r27Jf0+dxfOftSTNFLcvWnitu+/tmwjG/c91jkNLhjD+Mi/iT&#xA;EH7ZBAeRdK0/zJ5j0ny9r1xImm+iDbpG/ACa6hNxy3BHN5XpUivRcnAAyp0ENtPPLXFMUd+4nc/e&#xA;lvmSG58pa5q3l5bx5DbsYS0RZRNEQGQSAbdDuDkZRINOy0/aOM4gSLkBcRV/b5cr7t03tfMflq6/&#xA;LD9AXtmW1O2+PTb1EQcCW58mkqGBHxAinSn0S4xVdWEdDKZjkjL92YC/IgdPd+tuT8vvNmn+X7Hz&#xA;DqjRXWhRmK7uLKB3EyxTBeUnEjhy4GhocTjIFtOPtIzmNwZAH+Gt695ut9qF+9kH536f5eGmaJrG&#xA;jCGJpUYwSWwCB4owjIw40+zyp9Ptk8lbU0aQznjyCe5hR36d/wAwq6n5iv8AV/J11fMC1ymiASFA&#xA;f3iTyRLds3+r6TfQcordxrHFvy/R1SDyH5+/w5oWraVc2C31vq0JVgWC8XKspJ+FuSnl0ycMnDY7&#xA;3e5+zDn8OfFwyh9u9pFoU4sfy08234rz1G4sdItnr0Xk9zKPkUiAyyO0S8znlxT2Owv9X3SYko4o&#xA;i96AimxNO6/5S+GRd7CPDCMetDltddY9048iOoVrdeRO4K/teBPup3VsXO0WPiPQx69xPnE7wl9i&#xA;Lwu5diq+Cea3mjngkaKeJg8UqEqyspqGVhuCD3xRKIkKO4LLk/MrUZFke8hP12VeM99ZuLd7g9jd&#xA;xFJbeenvGGP82T43VnsqA+k+kdJb1/VNiUfnXkxe+v2u5fVaGKGQ15NAixAgilOEfGMf7FRkCXY4&#xA;8fCKsn37/fv9qGxbHYq7FXYqhZVUEjYf7Fx+KmhwOo1GOINbD/NmPtiaKkqgGq/SUSn/AA74uJjg&#xA;Abj/ALGFf7Of6GVeV7qRvLusxREG40ia31mxFSaNEaTHl1+yowSFinX5wCZgf1ud/b15c3vNvNHP&#xA;BHPGaxyqrofZhUZqSHDX4FdirsVdirEfzB06R7WLU0DNHapJFdhASRDIVPqUX4iEKfFT9kk9skBe&#xA;zg6/AckARzi85aOSFVeMgxOOSup+EjxVl+6q/wDNC43f4/H4+JdLYPPn+Px+CUOJoaqzUDKVZloF&#xA;LKqFPhqeFOPYkbCvI0OTo/j8fjuZ8J/H4/HcEPcK8kdraVEnqz28chFQ3KMuSrKaEHjTqMtxD1X7&#xA;3Y9lYhPUwB5X9mz24aMsGlwaarB6wSWrU7vPBqkNTsP921GbERoV+Or02XP4kpSPU38AcB+55Hrn&#xA;lq4g8q6N5usH420trDb3w2JSaAegDSq7H06bdD88o5lx9HmOPka+F/AiwiPyn8yabp+vsdXihuba&#xA;/IiuJpkRzHzAKP8AFWi12b+zJwIB3cwwlnwyMZfvAb22sUKG32eaUfmMuhp541JNICJpjOhUQmkQ&#xA;biBKUC/DTnU7dsZc9nHhExMRku5AGW57z076on5phffmD5oHlx9Ge9aWweMRJCURnKKNkD8efEU8&#xA;emREydnbajS4MX72MfX0q9z7mO6Wlzqdxp2jSTJbpcyR26Tu3JFV2ArQdOv3404E9VMYRAgCwNwb&#xA;sD7vi9/+p6Bodss1wyReX9P06SzuJpjUTGQxqU49SQLejCm7NQb1yHN13W3lfkv8t4fN8Ooiw1k2&#xA;HoMxtbGWP1H9FiQhZwy9Ojca/qy6EeJy9RkyYcUQTLhl3ch5d/2gdyT61Bcaf+XaaXOoE48x3qXA&#xA;RqrztLWCP4fHeVt8lyj8XVyHESe/h5efF+pjLnqTQoTuTspI8f5GyL0OSXU0Ynv+k+/+ZPz5FFW6&#xA;0TlQ1P8ANQmnzHXC7fRwqN72e+ifmOY7lXFy3Yq7FXYq7FXYq7FXYq7FUPPQHw9+ToPvFRgddqxR&#xA;/wCPTj9osIeqltgrH5vKfxoMXWWCeUSf8/IftoMq/Lger5ivbJxy+v6bcQENSvxUPQey9MXHzgnP&#xA;6r3h1q+flsPc9k8mTNN5R0aRvtGygBPiRGBX8M1WT6i6uPIJzkGTsVdirsVdirB9c/LVJHkn0KdL&#xA;T1CWk0+ZS1qzHclOPxxV78aj2yzjB+r5uJn0cZm+RYXqXlzXdPr9f02dF6m6gH1mLbqxMQ5ruAd0&#xA;FP8AgeMwO4/j8fjneBPR5I8t/wAfj8XYHRoIb3zHpENnNHLOZXMYqC3JInZEK05CrClKAeHcm/AD&#xA;ZsOb2OeHODIEDf7vx+NntV5fDnNJaULRTm5tB4+q41S0pTqHU3EQHjtmaT3fjr+t32LFsBLrHhPw&#xA;HhT+Xok8l81XccGntokEwfSrHV7ia3AIKGG6jE1rUCu45S7djXKZDuRpIiOoAyiuu/ef2396YeZ7&#xA;38s9Q8oQPpunzab5mgWNHKljG3EUkcsWYU7jYGvXbJGUSNubmx0uqjlkckgcW5B5Sj3V+Kpg1lom&#xA;uy2c96ltJd29vxe5mjVn9Ko25mlB9nuciC0HTZI0chEpS3G/q+F/rb8q6npln5htbvU4jdWKOpe3&#xA;Y15Kr7r8W3YGh2OFr02a5SHFUpRqJPTf7GU/mr5m0DzBremny3AySxJSThEI3aZ3qigLuzZZKQO4&#xA;cWOGWIcEqu7Tj81bfUtQ0K7u1elppGqGKaJT8HKe1t2dh/NwuWkG38xymLXE82CQW/mOy0oagsFz&#xA;a6ZdP6DXkfJUKu3xwsy9iwpSuGjzdrKdxGPIABxA1YsAm6rnz5eS3VXibyVYIlAIdZvyQD2lt7MD&#xA;p0H7o5YPpDrdSAMkq+njHu5z/WlBD8zxJL96UD09wdmGB3BjLiPCTxfDj+IPpmPNGRiiKOm3YU/D&#xA;C7vDHhgB+ivsXYtjsVdirsVdirsVdirsVdiqjO1KfFx9+XH9YIxcLVy4etf53D94IQzyVNDJX2Mn&#xA;8EFcDqcmazRlf/JT9EBbJ/yvH/O8WxNFWOCYmo4inA/174uFMfvqqqj3cPXu5/Pd6/8Al+rL5K0c&#xA;N1+rIfoO4/DNXl+ouvhyDIMrZOxV2KuxV2KtO6Ro0kjBEQFmZjQADckk4q871/zdLqvKO1ke30Yn&#xA;iroSs13Wu4I+NIjQ04/E/wAtjl48Vc+bq9VrTfDD5sSbUVtNe0a7so47d7WdpLcoqgVVDx4laVAI&#xA;3oSPkdsyIkjdyOwcYlqBGe4kCD8YkMy1zXQgi/R7mNZY/wB2VP2IBKJ4UrWokt5eacv5QKbZKUu5&#xA;7nSaS74xdH/ZVwyPulGjXexzTtBtNb1X9E3EvoDU4ilvcUr6d3bhpIWIqAwMZlQjvXIAuF23gIlH&#xA;IPd+r9LHPNHlTzB5YulsL8xsJ4yY3il9VOH2eXEqJVFdhX38Mls4GHUZZAwF1Vc7Av4cXu3K3SfO&#xA;XmDRDM2nXCW5nThP+8R42G/2onVq9fCuGJrk5Wp1HiRqccZrrx8vgPV8GV+QL38tP0BdWHm2wlku&#xA;ZJHlt9QgqWClQPTorABgwNKgjffpkoGPVjlwaqUYywyiY9Ymq5n+w+5jehyeVLEX09w1/barauZt&#xA;IvbRkKI6ryVZUfty8DjEit3F1Wn4chEa4QfPuB2ZJ5in83eZPy/utemlt7bSbK9ijudPtowvKeSj&#xA;PO5NW/vJR+1Sp6bVwRhtbVqYDDOGM/3kt/IfttKLPzzcQ+Qb3y3JDHPZXQDKzEiSKQFWotDTZ0BF&#xA;e+ImQKdhm02HLAZrIMY1Q7x+m2Oq3PyjqNuCWa3vrW6QdgkkUsUjU7Dl6YyY5OqzQqBrob+dV/vk&#xA;vbiyA7cO1QWQfIj4lwO3mIyiD/D7uKPwI9UPdyCOwvRBvFXYq7FXYq7FXYq7FXYq7FVGdqd6e/Lj&#xA;+sUxcLVT4etf53D944UMXp1c/TIg/wCIiuB1Ustc5H/lZAf7kWyb8t2WDUNc1IgcLLTJ2DCtA540&#xA;6+PE4uthIHLOQqh7/wBO/Tq9p8nQGDyno0TbMtlByB7ExqSPvOarIfUXDjyCb5Bk7FXYq7FXYqwT&#xA;8x9ZZ5YPL8TUSZPrGogVBaEGiQgip/eMp5U34qcycEOrh6zNwRocywW7m9Q/y86BQAG5BtqKgrz2&#xA;HTptuz0pmSHUxFfj8fjuQuofuoEl729zHJN3PFSEYs3cr6iig+EV79iHP7MzeHqISPK/x+lOcg+q&#xA;uDzRyRzwNwuIHWaB/wCWSNgyn5VG/thDj6rAMuMwPX7+iYfmuG1mz0jzfYIzQSRC2uYuvoywux9N&#xA;yO5MrrXpUDxGSDymCUoSIr1Ag15xsEfEEoLyz588l2vlyfSta0WK/MrOfW+FZqOKcSSOalabFTlk&#xA;SAKIcnVTjmlxxy8O1GJ/4nqgfyv8teXfMF5c2Oq3UtpI8TGylWQIPUWmxBFCQp+mnXGIBNFq4pY8&#xA;HiQBPq33PKvKt+lsZv8ARZYdTvrX1lkNvO8LXEbErJxNOQAFCCPfIk02Q0E80pSur+e4B3Hx8lJ7&#xA;284GCSJC32WLNXl2rwG+Cm6etzcJhOMb5Gzz/wA3mt07y5q+qCT9G2c95JEpeT0ozJxVTQseIJAB&#xA;7nbtkw6r8oTHisDerkYi/de/4rzU4J7iFryzePh9aiNvIrAgqVkEoH0OmIbsMTOZxyFcQIH9bevv&#xA;NfBDwuDEpNAy/CTuh2/yht9+Ft02QHGCdpDa/VHl/TG3LpIJkDUAjvheqjKxbeKXYq7FXYq7FXYq&#xA;7FXYq7FUPK1G2PE/Pif+GqpxddqMlS50ffX+6uMlFmkUFviFNyaRj8d8DgTnOIMvUK8sX37/AHMs&#xA;8s2c0fka84ki78y30GnWwI6qrfE3y+JwcEjQt02MkYpSPOX6dv1vd4YkhiSKMUSNQiDwCigzUtS7&#xA;ArsVdirsVdirx7zAZ7vzBrV8BzBvFskiFOZEEaqAvLb7XImuw60PUZ+PaIdNrZ3kruCWLE5PIUeZ&#xA;6lpSSQa/AACd+JKlmJ3ZU32oBNxifl+Px8V9lZPqsclnp1tJqUro0biKgjTkCAZZmpGpqzPSpNaf&#xA;y4DIDm3Y8GSRsClSz+sLD6FyON3bM0FyvhJEeLffSuL6j2fqPFwxl15H3hXwOanXlPXbXS76Sy1N&#xA;Ul0HVaRXscoDRpIaKkrBtuLbI/0Htkg8/wBsaT/Kj/O/Qf0Jf+cXk3R/Lq2NzpEUsC3ryrMOZeNe&#xA;IUhV58mHLkf2u2Shu6cZZ8uI/j3vOLK7uIWMSRGXlT4RXqBxBFA3YCuGUXI0etyYriI8Xz6bXsD0&#xA;5sk8teZvMPk3zUt5Jpf+nxCotbqNlorpxqQeLLsag7ZKJ4Ta5cs9RxY5RJE6IMT3efKveiPP3+MN&#xA;R1CTzbqmhHTrLUPTSP042ji2X4CGYDkXFWr369MMrO5DjxBxekET4RRHEDIb/rNeSG8jeedV8qXw&#xA;urB0hm4mKWOZeUboWDcHB4kdAagjIiRibDmwGHNhGHMOGvhR/XXfsUq1+/utU1a91BwnrX08l1Ik&#xA;VQoeWVpeUYJY0q5FK4Ls2xyYZY4iGM8QiBXfsSYyFc+ZBSnnxk9QVVZftANx4uOoPX8cm1DNwz4x&#xA;cY5Ofq4eGQ5jqPmEwgcPEpBr2O4P4jbC9NpMgnjBBv4g/dsqYuQ7FXYq7FXYq7FXYq7FVrMAKnFj&#xA;OYiN0NIxrx7912B/4FtvuwOozTN19mwP+kn6T74ndSS0nvLuCwtouVzcusca8FUksaDcYum1xAqA&#xA;jUpf0IxPzD2Py7pEM3miy0+3+PS/KNv6bPT4ZL+dfiNPYVY+DZjamdRrvaM21QH8P4/HveiZgNTs&#xA;VdirsVdirsVYRrPkTVX1S4uNJubdLW/cy3Md0rs0UrU5yQ8PtcqfZZhQ98yIZgBRcLPohklxXSI0&#xA;78s9EiCvqckuqyinwSn07cFQAOMEfFKUH7XLBLOTy2bsemhHkGWW9vb20Kw28SQwoKJFGoVVHgFF&#xA;AMpJtveeeftHax1ZNXiX/RNQ4xXdOiXCikbn2kX4fmB45k4Z2Kdv2PqvDycB+mf3/t/Ux/Lnq1ro&#xA;joyOAyMCGU9CDhRKIkKPIsp8s6jpnmDTv8EeaKybV0e9Y0dggNEDnpNEOn8y9e9ZX1Dx2s0p08+H&#xA;+E/Sf0e8ME84eVJ/JWuLbpK11byqs0VwF4sEJK0IBPxIyb08cN226LP4dmrF+r3H9R+9rzh54u/N&#xA;GsxareIn1lIVhkWBSg4qPtEOa1Lb4ZyMjZcjTHDpwI4uKQHET3gH315N+YvzG82+Y7O1ttTuJrmw&#xA;tmDxoURFd0FP91gc2CkkVwylIjctGGOGE+LFiI633+Udz7/fFLIL/wAtPHMl9bSzTyL+5ltpDDMr&#xA;U2VgySI6+xX5HBHbm2azJhyyEoyMZ8qETcvKlDRrq2s9QiXUIy0POOVo3+EyRbEoDtsy9PngIZaL&#xA;UCHFAmjIekn5e7nuEz/Mm48o3etxXPliFra0lt1+tWxBUiZGargcnFeHHptscsJHR104ZYSIyni4&#xA;u7nt/F7x9otjtlMSSjtUndTXr8thi7jszVEngkbPTfn7vSPtJKMwu7dirsVdirsVdirsVaJABJ7Y&#xA;olIAWUPJKTXuOu2+3jT9pTgdbmzk33eW+3fX8UT16j7g8kgWPlUGPsBR0r8moRi63PmEIXdw+E4/&#xA;KVSj7ujNPJmlTaNYr5gkt/U1nUSbby7YUoS8goZivZQD1P7PzGAmhZdTj2vIRz5B675V8vpoejx2&#xA;hf1rqRmnvbg9ZbiTd3P6h7ZrMk+I2wHnzTfK1dirsVdirsVdirsVdirsVQ+o6faajYz2N2gktrhS&#xA;kiHwPcHsR1B7HCCQbCvKNS0u90e+Nhe/ETU2l10WeMd/Zx+2v09DmdGQkLD1nZnaAyx4Zf3g+3z/&#xA;AFqGF2ylc20dxHweqlSHjkU8XR13V1YdGHY4QWjUaeGaBjLkyAXcHn/SoPLutXKWfmWzJfTNRI/d&#xA;3a04sO1HNBzQdxUbbZIbPH5sMsM+GXwPf+OoY15g/JrzRo2kXOpzz2c1vaKHkSFpWk4cgCwUxKPh&#xA;Bqd+mT4wWo0QlGl+bb2z0SbQ3ZVsrmhltpYlkQuFCiWIsrcWoBRlNcFno7XFPTyEBlHDkgABz3ru&#xA;I5hJrK5Y3i83Lxc/hVySprutQeoNOhxIadLmM8vDKRMCa5nr9P3Mt/MzzdbeZZrC6i0+Owmt4/Qk&#xA;4kOHHWlCoHFabZIy4iubRflsYHFxXLawOVb7G/JkPl78tvKttp1vd+Z74vczQ+qNGtlKzI7g8SUh&#xA;5zO6jsAKHrkCe5wJ5SRWwAN7Ct+/ZjOqeStOm9Wby9JcfBJwjguWjlZmoTxMkSoqyvsFhT1H7vxy&#xA;QLVjzSibBPP8fH531Y+6XEFxLaXcTQXkDFJoXHFlYdag5IF67Q66OYf0hz/H497eFz3Yq7FXYq7F&#xA;VjyKo8T2HiaVpi1ZcwgPPu+F0h3m5GtfhIqKdadmHy7jA6zLquI3/Dz27ukh5x5SChLMqD4qEfaA&#xA;HQ1/aRh0+WLr8+pjj+qj1AH+6hIfT5xLKtA8pRW0cOt+Z439CQgadpCrW5u5P2RwG/Hfv1+XUEuu&#xA;MTM+Jk5faf1/jo9Z8seXrwXba9rar+lpk9O2tUNY7OD/AH0nYsf22+gbZgZs3FsOTCUzI2WTZjsX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FUHq2kafq1m1pfRepETyU9GRh0dGG6sPEZKMiDYSCQbHN5xrnlbV9&#xA;FLSFWv8AThUi7iWsqD/i6Nd9v50FPELmVDKJe96DR9tfw5f9N+sfqYrcam0QoHEkEprbzKwo4P2o&#xA;+f7Lj9nx6ZdTl5daY9bjL6TfPvjfSQ/h7+SXNqSO1DR6tWlfT5OvSSJv91TDup+jJU63JqYz2kBI&#xA;Hpys98f5s++J59ObP/LH5vXlvEdP1mM6xZ0MbMQq3yqRQrLE9Em22qDXxrgIcGWDf92eL+idpj4d&#xA;fg1PoX5X616yaRcQWby/Ztpr2WykRjuQLe4jkVvoanyw7tJzSA4LIHcSR9ik35QQNp0ggsb+7unI&#xA;9O7guLFolHUjg8kXIH5jtTHiap2eiJ0byAdC/wBKm0C6nvEIaK8vbvT4oo2U1+FC90te9WB6bUxt&#xA;eKX4P9rWs6vBOfT1jW7CFXO1pDLLq0pJ/Z+rQLb2fI+Lxti1E95/SmWladrVwoOkWUmkqyGL9O6r&#xA;xe/EbfaW1tE4x2w/4HxpXKZ5ojzSL6Jm/wCW3lOTTDZTWxkkLF21Bm/0oyHq5l6/R9n2zH8eV2yi&#xA;OHcbHvYHr35UeYLAtLpTjVLUbiM0juFHyNEf6CD7Zkw1IPPZ2+n7YyQ2mOId/X9RYTci7tZzBdQt&#xA;BOv2oZlaGQf7FxmSCDydli7TE/p4Se6+E/I2D81M3QX7cUi+9Kj7wTi3S7QEfqhMfCx8wSp/pGDt&#xA;XtWu3U7/AHYuP/LWH7ufnz+Sm1+KAhhXrQeIO4+kYuNk7YFA2Pd7pbj/ADhyUzOrMVXk46VUGtBu&#xA;p+a4uKdXGRqPFPpsDdc4n+tE7ead6X5N8wajELqVE0zT9ma+vG9FAfFK/EeXsKYtR8eewHD18wep&#xA;H82+oZJ5e0rSLa6EXlizfzHrKGj6pcoY7G3b+YA9x7mvhkJzEebQIY8Zsnjn+OvL7y9I8u+UFsLk&#xA;6rqk51PXZBRrxx8MSn9iBOiL79T+GYGXMZe5qnMyNlkeUsXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYqxzXvy+8sa16jT231e4l/vLi2Ijdj4uKFHP+spy2GaUV6EDqwLVPyO1NGLaXqkcyn/AHXdKyGg&#xA;6AsnqBvpUZkR1Q6hrMZd6RXH5Vefov3Yso7tBspWeIqB7eqyOPopkxngninVHcfj4j4Ftfy5/MOg&#xA;V9Mdk7Ibm2ZB9EkkmPjQ728aidUbruux/suJGW35R+b7hqT29nbr3Mrp+qCM4DqIsTkv+EfZ+gBk&#xA;Wm/kjZghtUv/AFF7w2sSxj5eo/qMfuGVS1J6Bgd+g+ADN9D8o+XNDH+4yxjhkpQzmrynx/ePyb6K&#xA;0yiWSUuZURATfIJdirsVQuoaVpmpQ+jqFrFdRfyTIrgfKo2yQkRyQRbEdR/KDytcEvZtcac56LDJ&#xA;zjr/AKkof8CMujqZBvxajLj+iRH3fIpFc/kregk22sRyDss1uR/wyuf1ZaNX3hyh2pn68MveP1IV&#xA;fyY8wczW+sgg+ywSQn7tv14fzQ7l/lTJ/Nx/6U/rTbS/ykvrUhn1iNHru0VorOP9V5XcL8wtcidX&#xA;3Bjk7SzyFWB7gn0H5aeXjMJ9Te51i4G4e+maQA+yLwWnsRlUtRIuHOcpfUSfu+XJk9ta21rCsFtC&#xA;kECbJFGoRAPZVoBlJNsVTArsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVf/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:807E223B69E9E51181EB89D97F04DEE1</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:817E223B69E9E51181EB89D97F04DEE1</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:CEB30D49C8E7E5119BEA8FBC829CE640</stRef:instanceID>
            <stRef:documentID>uuid:CDB30D49C8E7E5119BEA8FBC829CE640</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.878431 .745098 .545098 rgb
f
161.202 626.414 mo
152.085 630.156 144.612 632.771 139.162 634.676 cv
136.395 635.645 134.263 636.382 132.864 636.957 cv
118.18 642.983 li
113.512 644.898 109.628 643.572 106.645 639.034 cv
105.998 638.056 105.718 637.684 105.181 637.401 cv
99.0996 634.18 98.0869 628.822 98.9067 625.25 cv
100.715 588.402 115.94 562.031 149.705 537.194 cv
155.403 532.991 161.977 529.36 169.226 526.383 cv
195.355 515.665 222.329 516.567 223.465 516.616 cv
226.545 516.729 li
228.24 519.307 li
235.651 530.541 237.625 544.192 233.946 558.759 cv
228.609 579.906 211.476 601.391 191.317 612.227 cv
181.75 617.37 171.621 622.139 161.202 626.414 cv
161.202 626.414 li
cp
.27451 .207843 .145098 rgb
f
223.235 522.61 mo
223.235 522.61 182.291 518.673 153.729 539.686 cv
125.171 560.698 106.607 586.903 104.871 626.228 cv
104.871 626.228 103.424 629.68 107.992 632.099 cv
112.557 634.518 111.613 639.189 115.899 637.432 cv
120.185 635.675 123.858 634.17 130.586 631.406 cv
137.322 628.646 160.354 622.053 188.479 606.941 cv
216.599 591.83 242.156 551.313 223.235 522.61 cv
cp
.443137 .658824 .431373 rgb
f
203.114 553.742 mo
203.114 553.742 125.739 596.93 111.775 629.116 cv
111.775 629.116 133.112 597.477 203.114 553.742 cv
cp
.27451 .207843 .145098 rgb
f
156.23 579.472 mo
156.23 579.472 139.059 572.047 131.631 563.406 cv
131.631 563.406 144.75 573.342 157.401 577.525 cv
157.401 577.525 157.994 579.53 156.23 579.472 cv
cp
f
161.639 576.13 mo
161.639 576.13 144.461 568.698 137.036 560.062 cv
137.036 560.062 150.163 570.001 162.814 574.177 cv
162.814 574.177 163.403 576.185 161.639 576.13 cv
cp
f
166.642 571.885 mo
166.642 571.885 149.46 564.454 142.039 555.82 cv
142.039 555.82 155.166 565.756 167.816 569.942 cv
167.816 569.942 168.406 571.944 166.642 571.885 cv
cp
f
171.858 567.654 mo
171.858 567.654 154.68 560.223 147.258 551.586 cv
147.258 551.586 160.385 561.525 173.029 565.704 cv
173.029 565.704 173.622 567.71 171.858 567.654 cv
cp
f
151.661 584.164 mo
151.661 584.164 134.476 576.74 127.055 568.103 cv
127.055 568.103 140.182 578.043 152.833 582.221 cv
152.833 582.221 153.419 584.227 151.661 584.164 cv
cp
f
178.832 563.913 mo
178.832 563.913 161.653 556.492 154.225 547.851 cv
154.225 547.851 167.352 557.794 180.002 561.969 cv
180.002 561.969 180.592 563.979 178.832 563.913 cv
cp
f
184.478 560.141 mo
184.478 560.141 167.3 552.709 159.875 544.078 cv
159.875 544.078 173.001 554.012 185.646 558.197 cv
185.646 558.197 186.235 560.202 184.478 560.141 cv
cp
f
190.607 555.055 mo
190.607 555.055 173.429 547.624 166 538.993 cv
166 538.993 179.127 548.926 191.786 553.111 cv
191.786 553.111 192.364 555.117 190.607 555.055 cv
cp
f
145.563 588.227 mo
145.563 588.227 130.115 581.353 123.444 573.353 cv
123.444 573.353 135.248 582.559 146.618 586.425 cv
146.618 586.425 147.145 588.278 145.563 588.227 cv
cp
f
141.233 592.743 mo
141.233 592.743 125.78 585.87 119.114 577.87 cv
119.114 577.87 130.914 587.076 142.283 590.941 cv
142.283 590.941 142.821 592.801 141.233 592.743 cv
cp
f
135.938 597.197 mo
135.938 597.197 122.648 591.141 116.912 584.082 cv
116.912 584.082 127.062 592.202 136.847 595.604 cv
136.847 595.604 137.301 597.239 135.938 597.197 cv
cp
f
130.831 601.984 mo
130.831 601.984 117.76 595.789 112.126 588.555 cv
112.126 588.555 122.101 596.867 131.72 600.348 cv
131.72 600.348 132.168 602.035 130.831 601.984 cv
cp
f
127.021 606.817 mo
127.021 606.817 113.949 600.619 108.319 593.384 cv
108.319 593.384 118.29 601.701 127.917 605.178 cv
127.917 605.178 128.357 606.862 127.021 606.817 cv
cp
f
121.739 611.272 mo
121.739 611.272 111.048 606.053 106.441 599.944 cv
106.441 599.944 114.604 606.955 122.473 609.887 cv
122.473 609.887 122.838 611.307 121.739 611.272 cv
cp
f
119.062 615.479 mo
119.062 615.479 109.853 611.503 105.874 606.869 cv
105.874 606.869 112.901 612.202 119.682 614.435 cv
119.682 614.435 120.003 615.514 119.062 615.479 cv
cp
f
gsave
115.245 632.34 mo
115.245 632.34 128.416 614.779 148.168 598.456 cv
167.923 582.124 181.719 572.175 181.719 572.175 cv
186.983 603.141 li
186.983 603.141 170.479 613.612 157.264 619.748 cv
144.054 625.88 115.245 632.34 115.245 632.34 cv
cp
clp
149.567 596.564 mo
149.567 596.564 153.822 614.786 160.995 623.634 cv
160.995 623.634 153.553 608.95 151.689 595.751 cv
151.689 595.751 149.822 594.817 149.567 596.564 cv
cp
f
153.822 591.841 mo
153.822 591.841 158.07 610.056 165.243 618.91 cv
165.243 618.91 157.812 604.224 155.951 591.034 cv
155.951 591.034 154.08 590.087 153.822 591.841 cv
cp
f
158.89 587.668 mo
158.89 587.668 163.135 605.896 170.307 614.738 cv
170.307 614.738 162.873 600.058 161.012 586.861 cv
161.012 586.861 159.138 585.921 158.89 587.668 cv
cp
f
164.609 584.822 mo
164.609 584.822 168.861 603.045 176.041 611.886 cv
176.041 611.886 168.602 597.204 166.731 584.01 cv
166.731 584.01 164.864 583.079 164.609 584.822 cv
cp
f
144.137 600.223 mo
144.137 600.223 148.385 618.456 155.558 627.297 cv
155.558 627.297 148.12 612.609 146.256 599.417 cv
146.256 599.417 144.385 598.479 144.137 600.223 cv
cp
f
169.674 580.713 mo
169.674 580.713 173.918 598.935 181.098 607.788 cv
181.098 607.788 173.646 593.102 171.789 579.906 cv
171.789 579.906 169.921 578.973 169.674 580.713 cv
cp
f
175.565 576.062 mo
175.565 576.062 179.81 594.294 186.983 603.141 cv
186.983 603.141 179.541 588.45 177.681 575.255 cv
177.681 575.255 175.817 574.321 175.565 576.062 cv
cp
f
181.346 571.065 mo
181.346 571.065 185.604 589.287 192.771 598.136 cv
192.771 598.136 185.343 583.448 183.469 570.248 cv
183.469 570.248 181.605 569.322 181.346 571.065 cv
cp
f
139.052 605.498 mo
139.052 605.498 143.062 621.928 149.746 629.918 cv
149.746 629.918 142.793 616.657 141.016 604.78 cv
141.016 604.78 139.279 603.934 139.052 605.498 cv
cp
f
133.842 608.961 mo
133.842 608.961 137.842 625.391 144.53 633.37 cv
144.53 633.37 137.574 620.119 135.796 608.243 cv
135.796 608.243 134.063 607.39 133.842 608.961 cv
cp
f
128.509 613.374 mo
128.509 613.374 132.099 627.53 138.025 634.428 cv
138.025 634.428 131.844 623.004 130.238 612.764 cv
130.238 612.764 128.708 612.03 128.509 613.374 cv
cp
f
123.692 618.651 mo
123.692 618.651 127.465 632.608 133.587 639.441 cv
133.587 639.441 127.176 628.15 125.47 618.063 cv
125.47 618.063 123.885 617.322 123.692 618.651 cv
cp
f
118.338 622.579 mo
118.338 622.579 122.101 636.544 128.22 643.375 cv
128.22 643.375 121.818 632.071 120.109 621.99 cv
120.109 621.99 118.524 621.246 118.338 622.579 cv
cp
f
grestore
222.587 531.137 mo
216.309 533.714 192.488 541.06 149.587 527.348 cv
142.514 525.115 li
124.988 519.623 111.138 515.281 97.9214 504.485 cv
96.5918 503.396 84.7676 493.504 79.8955 481.622 cv
76.9741 474.507 74.6245 464.43 87.8267 459.013 cv
90.1973 458.042 91.5479 455.968 93.1118 453.577 cv
94.5522 451.375 96.04 449.094 98.5073 447.564 cv
99.2476 447.106 101.339 445.89 104.743 444.495 cv
112.096 441.477 126.772 437.198 142.473 442.455 cv
145.157 443.354 147.934 444.078 150.807 444.836 cv
168.047 449.374 190.525 461.756 216.668 503.8 cv
215.882 497.422 li
229.174 527.695 li
224.268 530.376 li
224.268 530.376 223.709 530.676 222.587 531.137 cv
cp
f
221.464 525.071 mo
221.464 525.071 199.093 536.867 151.414 521.632 cv
130.838 515.059 115.699 511.262 101.718 499.84 cv
97.3706 496.285 86.187 489.288 82.6724 480.719 cv
79.1582 472.154 81.0259 465.663 87.7578 462.903 cv
94.4897 460.14 95.7544 456.336 97.9907 452.987 cv
104.785 442.817 122.335 442.042 140.571 448.144 cv
158.804 454.249 181.15 452.946 210.563 500.226 cv
221.464 525.071 li
cp
.380392 .658824 .254902 rgb
f
199.337 523.42 mo
199.337 523.42 142.69 479.451 104.747 467.137 cv
104.747 467.137 163.266 486.024 199.337 523.42 cv
cp
.27451 .207843 .145098 rgb
f
151.234 482.858 mo
151.234 482.858 150.949 464.144 155.769 453.825 cv
155.769 453.825 152.106 469.876 153.491 483.127 cv
153.491 483.127 151.903 484.485 151.234 482.858 cv
cp
f
156.509 486.414 mo
156.509 486.414 156.223 467.699 161.04 457.38 cv
161.04 457.38 157.377 473.432 158.766 486.683 cv
158.766 486.683 157.174 488.04 156.509 486.414 cv
cp
f
162.432 489.229 mo
162.432 489.229 162.142 470.517 166.966 460.195 cv
166.966 460.195 163.3 476.247 164.685 489.498 cv
164.685 489.498 163.1 490.858 162.432 489.229 cv
cp
f
168.437 492.243 mo
168.437 492.243 168.151 473.528 172.967 463.21 cv
172.967 463.21 169.305 479.261 170.694 492.512 cv
170.694 492.512 169.108 493.876 168.437 492.243 cv
cp
f
145.078 480.615 mo
145.078 480.615 144.788 461.907 149.608 451.585 cv
149.608 451.585 145.946 467.637 147.331 480.888 cv
147.331 480.888 145.742 482.249 145.078 480.615 cv
cp
f
174.704 497.06 mo
174.704 497.06 174.415 478.352 179.238 468.03 cv
179.238 468.03 175.572 484.082 176.957 497.332 cv
176.957 497.332 175.372 498.693 174.704 497.06 cv
cp
f
180.471 500.657 mo
180.471 500.657 180.182 481.942 185.005 471.627 cv
185.005 471.627 181.339 487.675 182.725 500.926 cv
182.725 500.926 181.14 502.29 180.471 500.657 cv
cp
f
187.624 504.154 mo
187.624 504.154 187.334 485.442 192.158 475.127 cv
192.158 475.127 188.492 491.172 189.877 504.429 cv
189.877 504.429 188.299 505.787 187.624 504.154 cv
cp
f
138.873 476.729 mo
138.873 476.729 138.783 459.82 143.338 450.455 cv
143.338 450.455 139.796 464.991 140.947 476.95 cv
140.947 476.95 139.472 478.197 138.873 476.729 cv
cp
f
132.967 474.634 mo
132.967 474.634 132.884 457.725 137.439 448.357 cv
137.439 448.357 133.897 462.9 135.048 474.858 cv
135.048 474.858 133.573 476.102 132.967 474.634 cv
cp
f
126.738 471.644 mo
126.738 471.644 126.793 457.039 130.873 448.908 cv
130.873 448.908 127.648 461.494 128.561 471.813 cv
128.561 471.813 127.255 472.905 126.738 471.644 cv
cp
f
120.268 468.95 mo
120.268 468.95 120.543 454.49 124.829 446.383 cv
124.829 446.383 121.35 458.893 122.132 469.091 cv
122.132 469.091 120.778 470.19 120.268 468.95 cv
cp
f
114.297 467.468 mo
114.297 467.468 114.576 453.008 118.862 444.898 cv
118.862 444.898 115.375 457.412 116.161 467.606 cv
116.161 467.606 114.811 468.708 114.297 467.468 cv
cp
f
108.072 464.484 mo
108.072 464.484 108.43 452.588 112.109 445.88 cv
112.109 445.88 109.067 456.202 109.636 464.584 cv
109.636 464.584 108.485 465.498 108.072 464.484 cv
cp
f
103.131 463.768 mo
103.131 463.768 102.973 453.742 105.557 448.212 cv
105.557 448.212 103.593 456.812 104.336 463.906 cv
104.336 463.906 103.486 464.64 103.131 463.768 cv
cp
f
gsave
175.772 525.226 mo
175.772 525.226 143.448 517.032 125.091 510.624 cv
106.731 504.216 83.9922 488.877 86.3452 477.187 cv
88.7017 465.494 95.0137 464.336 106.793 469.515 cv
118.573 474.693 166.015 498.837 179.455 511.555 cv
192.895 524.274 175.772 525.226 175.772 525.226 cv
cp
clp
143.158 491.934 mo
143.158 491.934 128.571 503.645 123.686 513.938 cv
123.686 513.938 133.711 500.884 144.812 493.487 cv
144.812 493.487 144.847 491.41 143.158 491.934 cv
cp
f
149.257 493.725 mo
149.257 493.725 134.669 505.433 129.784 515.729 cv
129.784 515.729 139.816 502.677 150.91 495.296 cv
150.91 495.296 150.949 493.198 149.257 493.725 cv
cp
f
155.21 496.492 mo
155.21 496.492 140.609 508.202 135.737 518.489 cv
135.737 518.489 145.763 505.433 156.857 498.052 cv
156.857 498.052 156.892 495.964 155.21 496.492 cv
cp
f
160.251 500.419 mo
160.251 500.419 145.66 512.13 140.795 522.425 cv
140.795 522.425 150.814 509.37 161.905 501.98 cv
161.905 501.98 161.936 499.892 160.251 500.419 cv
cp
f
137.512 488.619 mo
137.512 488.619 122.914 500.326 118.039 510.621 cv
118.039 510.621 128.068 497.566 139.162 490.187 cv
139.162 490.187 139.196 488.092 137.512 488.619 cv
cp
f
166.146 503.21 mo
166.146 503.21 151.548 514.921 146.673 525.219 cv
146.673 525.219 156.695 512.144 167.792 504.764 cv
167.792 504.764 167.827 502.677 166.146 503.21 cv
cp
f
171.658 507.003 mo
171.658 507.003 157.064 518.725 152.188 529.012 cv
152.188 529.012 162.211 515.954 173.305 508.566 cv
173.305 508.566 173.339 506.486 171.658 507.003 cv
cp
f
178.611 510.807 mo
178.611 510.807 164.023 522.517 159.145 532.806 cv
159.145 532.806 169.178 519.751 180.265 512.367 cv
180.265 512.367 180.299 510.28 178.611 510.807 cv
cp
f
132.878 485.001 mo
132.878 485.001 119.799 495.727 115.493 505.204 cv
115.493 505.204 124.43 493.198 134.373 486.459 cv
134.373 486.459 134.394 484.533 132.878 485.001 cv
cp
f
127.255 481.188 mo
127.255 481.188 114.17 491.902 109.87 501.391 cv
109.87 501.391 118.807 489.384 128.747 482.641 cv
128.747 482.641 128.764 480.712 127.255 481.188 cv
cp
f
120.971 478.29 mo
120.971 478.29 109.759 487.644 106.094 495.975 cv
106.094 495.975 113.722 485.456 122.273 479.585 cv
122.273 479.585 122.266 477.887 120.971 478.29 cv
cp
f
114.896 475.324 mo
114.896 475.324 103.941 484.771 100.426 493.246 cv
100.426 493.246 107.837 482.579 116.195 476.681 cv
116.195 476.681 116.175 474.924 114.896 475.324 cv
cp
f
108.905 471.751 mo
108.905 471.751 97.9458 481.194 94.4277 489.659 cv
94.4277 489.659 101.849 478.996 110.204 473.095 cv
110.204 473.095 110.187 471.348 108.905 471.751 cv
cp
f
103.069 469.029 mo
103.069 469.029 94.1387 476.898 91.3101 484.016 cv
91.3101 484.016 97.3223 475.086 104.137 470.176 cv
104.137 470.176 104.116 468.708 103.069 469.029 cv
cp
f
97.7837 467.055 mo
97.7837 467.055 89.9629 473.329 87.3516 478.852 cv
87.3516 478.852 92.7192 471.844 98.6519 467.892 cv
98.6519 467.892 98.6797 466.776 97.7837 467.055 cv
cp
f
grestore
383.924 742.118 mo
304.747 742.115 242.769 701.178 216.84 664.01 cv
180.396 611.778 168.584 563.53 176.478 494.645 cv
183.062 437.219 206.325 417.287 227.424 396.763 cv
230.411 393.859 239.613 385.652 242.308 382.872 cv
256.55 368.185 249.729 353.597 247.559 348.092 cv
247.124 346.986 246.766 346.304 246.68 346.145 cv
257.102 340.195 li
252.623 342.799 li
257.143 340.264 li
277.402 376.212 li
531.435 698.118 li
525.484 701.601 li
479.559 728.485 431.938 742.118 383.941 742.118 cv
383.938 742.118 383.931 742.118 383.924 742.118 cv
cp
f
251.899 343.182 mo
251.899 343.182 252.458 344.154 253.14 345.89 cv
255.703 352.391 260.003 369.618 243.3 386.841 cv
222.132 408.67 189.718 431.823 182.442 495.327 cv
175.662 554.489 182.442 607.12 222.132 664.01 cv
261.822 720.898 386.845 775.803 522.452 696.424 cv
272.406 379.564 li
251.899 343.182 li
cp
.894118 .262745 .341176 rgb
f
436.386 724.698 mo
429.354 724.698 422.256 724.316 415.304 723.556 cv
356.923 717.209 329.667 687.564 309.771 665.918 cv
308.158 664.165 306.597 662.466 305.074 660.837 cv
288.889 643.572 279.565 628.874 267.765 610.26 cv
264.771 605.539 261.605 600.553 258.115 595.18 cv
240.623 568.274 231.73 541.896 222.277 505.433 cv
213.312 470.852 217.619 438.872 235.445 407.678 cv
238.742 401.907 241.701 397.312 244.32 393.26 cv
254.036 378.179 256.054 375.044 246.559 356.501 cv
232.806 329.649 222.78 325.194 213.078 320.884 cv
204.416 317.032 199.221 311.726 194.197 306.6 cv
191.548 303.892 189.043 301.332 186.011 298.951 cv
183.482 296.959 181.05 295.344 178.879 293.887 cv
173.046 289.983 167.517 286.279 166.638 279.582 cv
165.998 278.072 165.925 276.388 166.504 274.827 cv
166.979 273.528 168.62 270.51 173.436 270.51 cv
175.383 270.51 179.375 270.934 191.462 274.6 cv
199.972 277.177 207.579 279.147 213.646 280.577 cv
211.479 276.222 209.488 270.786 208.292 264.215 cv
206.907 256.604 199.011 244.646 198.979 244.625 cv
198.979 244.625 209.14 243.675 209.143 243.675 cv
218.383 243.302 212.995 244.681 226.349 245.239 cv
239.255 245.776 250.666 249.58 259.679 256.123 cv
259.31 249.921 259.724 243.396 261.836 237.855 cv
264.688 230.373 268.158 225.011 270.945 220.701 cv
273.367 216.956 275.286 213.99 275.748 211.22 cv
277.057 203.378 281.884 202.531 283.893 202.531 cv
288.165 202.531 291.893 206.014 295.634 213.493 cv
296.364 214.954 299.142 218.816 301.829 222.551 cv
305.144 227.161 308.137 231.385 310.573 235.158 cv
311.503 233.524 312.851 231.964 313.718 230.045 cv
324.665 205.814 340.885 198.913 340.981 198.758 cv
339.252 209.876 li
339.249 209.993 338.646 221.983 339.865 230.541 cv
340.127 232.356 340.52 234.355 340.947 236.536 cv
342.742 245.673 345.199 258.186 341.753 273.091 cv
339.259 283.905 342.297 300.846 348.12 308.629 cv
349.605 310.613 350.856 311.358 351.476 311.396 cv
351.841 311.417 352.21 311.426 352.579 311.426 cv
357.67 311.426 363.559 309.425 371.018 306.893 cv
377.364 304.739 384.558 302.3 393.46 300.285 cv
402.026 298.352 413.636 296.133 427.563 296.133 cv
444.899 296.133 462.346 299.513 480.903 306.476 cv
518.339 320.512 550.594 344.061 574.167 374.572 cv
598.022 405.446 618.791 433.952 631.317 470.217 cv
640.6 497.07 657.475 565.938 613.946 625.226 cv
588.864 659.387 575.407 666.797 564.596 672.743 cv
558.829 675.924 554.659 678.218 549.564 684.371 cv
533.388 703.923 488.228 724.698 436.386 724.698 cv
cp
.27451 .207843 .145098 rgb
f
251.899 353.766 mo
238.008 326.645 227.424 320.691 215.517 315.399 cv
203.61 310.107 198.979 301.507 189.718 294.231 cv
180.458 286.954 172.52 284.309 172.52 277.693 cv
172.52 277.693 167.889 273.725 189.718 280.339 cv
211.548 286.954 227.424 289.601 227.424 289.601 cv
227.424 289.601 217.501 281.332 214.194 263.141 cv
212.182 252.078 206.917 249.249 206.917 249.249 cv
206.917 249.249 210.225 250.572 226.101 251.233 cv
241.977 251.895 260.499 258.51 269.76 277.032 cv
269.76 277.032 262.153 253.879 267.444 239.988 cv
272.737 226.097 280.344 220.143 281.667 212.205 cv
282.99 204.267 287.62 210.882 290.267 216.174 cv
292.913 221.466 308.788 240.649 310.773 248.588 cv
310.773 248.588 313.419 241.311 318.711 233.373 cv
324.003 225.435 333.264 209.559 333.264 209.559 cv
333.264 209.559 332.603 222.127 333.925 231.388 cv
335.249 240.649 339.879 254.541 335.91 271.74 cv
331.941 288.939 339.879 316.722 351.125 317.384 cv
362.37 318.045 373.836 308.123 394.342 303.492 cv
414.849 298.861 441.75 298.2 478.794 312.092 cv
515.838 325.983 546.929 349.135 569.42 378.242 cv
591.911 407.348 613.078 435.792 625.646 472.174 cv
638.215 508.558 647.476 569.415 609.109 621.673 cv
570.742 673.933 560.82 661.364 544.943 680.547 cv
529.068 699.73 476.81 724.206 415.952 717.591 cv
355.093 710.977 329.295 677.901 309.45 656.732 cv
289.605 635.565 276.375 617.043 259.176 590.583 cv
241.977 564.122 237.346 539.647 228.085 503.926 cv
218.824 468.206 224.778 438.438 240.654 410.655 cv
256.53 382.872 265.791 380.888 251.899 353.766 cv
cp
.984314 .792157 .721569 rgb
f
314.081 681.87 mo
314.081 681.87 346.494 734.129 456.303 728.175 cv
456.303 728.175 353.77 751.328 314.081 681.87 cv
cp
.27451 .207843 .145098 rgb
f
308.788 691.792 mo
308.788 691.792 342.525 736.774 422.566 734.129 cv
422.566 734.129 340.541 751.328 308.788 691.792 cv
cp
f
300.189 695.762 mo
300.189 695.762 331.183 740.079 404.706 737.474 cv
404.706 737.474 329.357 754.414 300.189 695.762 cv
cp
f
284.327 691.597 mo
284.327 691.597 308.427 734.27 374.449 737.881 cv
374.449 737.881 305.612 747.11 284.327 691.597 cv
cp
f
312.765 406.469 mo
312.765 406.469 336.792 405.59 341.422 414.851 cv
346.053 424.112 341.43 424.781 354.653 429.405 cv
361.553 431.819 368.992 433.814 374.945 443.076 cv
380.899 452.336 382.222 470.858 376.269 480.119 cv
370.315 489.38 367.662 489.374 367.662 489.374 cv
367.662 489.374 372.954 497.973 375.6 512.525 cv
378.246 527.079 367.445 532.154 367.445 532.154 cv
367.445 532.154 379.569 545.601 378.246 550.894 cv
376.923 556.186 380.23 549.569 387.507 546.263 cv
394.784 542.955 397.43 539.647 397.43 539.647 cv
397.43 539.647 394.784 530.387 400.075 527.741 cv
400.075 527.741 384.861 510.542 394.784 501.28 cv
404.706 492.02 413.967 488.05 413.967 488.05 cv
413.967 488.05 399.414 468.867 402.06 455.637 cv
404.706 442.407 397.43 434.469 413.306 426.531 cv
418.598 414.624 li
418.598 414.624 398.752 415.286 391.476 400.071 cv
391.476 400.071 372.292 396.102 376.923 379.564 cv
381.553 363.027 387.507 366.996 387.507 366.996 cv
387.507 366.996 381.553 332.598 406.029 325.983 cv
406.029 325.983 413.967 306.799 432.489 315.399 cv
432.489 315.399 440.427 314.738 443.735 321.353 cv
443.735 321.353 465.564 315.399 468.21 326.645 cv
470.856 337.89 472.18 331.937 472.18 331.937 cv
472.18 331.937 484.086 325.321 492.686 333.921 cv
501.285 342.521 497.978 351.781 497.978 351.781 cv
497.978 351.781 499.962 345.828 513.854 350.458 cv
527.745 355.089 525.099 371.626 525.099 371.626 cv
525.099 371.626 538.99 365.012 547.59 374.272 cv
556.189 383.534 550.236 402.056 550.236 402.056 cv
550.236 402.056 556.852 412.626 556.852 425.87 cv
556.852 428.516 584.634 435.131 576.034 467.544 cv
576.034 467.544 590.587 473.498 589.926 497.312 cv
589.926 497.312 600.51 501.28 597.202 520.464 cv
597.202 520.464 626.309 526.417 615.063 554.2 cv
615.063 554.2 615.724 572.723 597.202 581.983 cv
597.202 581.983 613.078 594.552 583.973 603.813 cv
583.973 603.813 585.295 627.627 561.481 626.966 cv
561.481 626.966 554.205 653.426 545.605 654.748 cv
537.006 656.072 529.729 644.825 529.729 644.825 cv
529.729 644.825 505.915 654.087 494.009 634.903 cv
488.717 640.195 li
488.717 640.195 497.316 653.426 487.394 662.687 cv
477.472 671.947 476.148 669.301 476.148 669.301 cv
476.148 669.301 471.518 687.162 461.595 692.454 cv
451.673 697.746 445.719 691.131 445.719 691.131 cv
445.719 691.131 443.735 699.069 429.843 688.485 cv
429.843 688.485 422.566 701.715 409.998 701.054 cv
397.43 700.392 400.737 696.424 400.737 696.424 cv
400.737 696.424 370.308 701.054 368.324 677.239 cv
366.339 653.426 367.662 674.593 367.662 674.593 cv
367.662 674.593 337.233 681.209 331.279 662.687 cv
325.326 644.164 333.925 645.488 333.925 645.488 cv
333.925 645.488 303.497 638.873 298.866 621.013 cv
294.235 603.151 305.481 603.813 305.481 603.813 cv
305.481 603.813 275.052 599.844 267.775 580.66 cv
260.499 561.477 274.391 555.523 274.391 555.523 cv
274.391 555.523 245.285 553.539 241.977 525.095 cv
238.669 496.65 242.646 495.996 242.646 495.996 cv
242.646 495.996 230.07 482.097 229.409 461.591 cv
228.747 441.084 241.76 436.46 241.76 436.46 cv
241.76 436.46 247.931 421.239 259.837 411.978 cv
271.745 402.717 280.344 402.056 285.636 400.732 cv
290.928 399.409 292.258 404.484 312.765 406.469 cv
cp
.419608 .192157 .192157 rgb
f
244.292 302.5 mo
244.292 302.5 227.424 285.301 222.793 276.04 cv
218.163 266.779 216.84 257.518 215.186 254.541 cv
213.532 251.564 212.54 250.241 212.54 250.241 cv
212.54 250.241 222.793 249.249 233.377 251.233 cv
243.961 253.218 261.491 257.187 268.437 273.394 cv
268.437 273.394 268.768 243.626 271.414 239.657 cv
274.06 235.688 273.398 232.381 275.713 228.742 cv
278.029 225.104 283.982 213.528 284.313 209.559 cv
284.644 205.59 288.943 212.867 295.228 223.12 cv
301.512 233.373 311.548 242.634 313.639 251.233 cv
315.734 259.833 303.056 289.607 314.742 302.831 cv
315.435 303.616 272.075 299.192 272.075 299.192 cv
244.292 302.5 li
cp
.764706 .423529 .247059 rgb
f
302.504 334.583 mo
302.504 334.583 298.535 340.536 302.835 342.851 cv
307.135 345.167 306.142 344.174 307.796 349.135 cv
309.45 354.097 318.049 364.681 320.365 368.319 cv
322.68 371.957 351.786 397.425 351.786 397.425 cv
351.786 397.425 330.618 382.542 318.711 368.65 cv
306.804 354.758 305.812 348.143 300.851 343.844 cv
295.889 339.544 293.905 336.236 293.905 336.236 cv
302.504 334.583 li
cp
.27451 .207843 .145098 rgb
f
253.223 391.472 mo
253.223 391.472 265.047 373.507 247.559 348.092 cv
230.07 322.675 220.147 318.045 211.548 314.738 cv
202.949 311.43 202.949 309.445 195.01 302.169 cv
187.072 294.893 177.15 292.247 173.181 282.985 cv
169.212 273.725 175.11 277.229 182.442 280.339 cv
204.271 289.601 218.163 292.247 223.455 293.57 cv
228.747 294.893 251.899 300.184 257.853 312.092 cv
263.806 323.999 268.437 327.313 274.391 335.912 cv
280.344 344.512 278.36 350.458 277.698 361.042 cv
277.037 371.626 271.083 382.872 271.083 382.872 cv
271.083 382.872 274.391 372.288 273.067 361.704 cv
273.067 361.704 272.406 372.288 265.791 383.534 cv
265.791 383.534 262.483 380.888 260.499 384.856 cv
258.514 388.826 253.223 391.472 253.223 391.472 cv
cp
.615686 .223529 .266667 rgb
f
351.786 351.451 mo
351.786 351.451 322.025 351.347 313.202 326.651 cv
304.378 301.952 304.378 282.985 304.378 282.985 cv
317.608 290.93 li
317.608 290.93 305.268 269.318 314.087 245.504 cv
322.9 221.69 333.264 209.559 333.264 209.559 cv
333.264 209.559 333.485 226.097 337.016 242.858 cv
340.547 259.616 342.305 266.676 338.776 279.023 cv
335.255 291.368 337.901 316.061 356.423 316.946 cv
356.423 316.946 345.839 319.592 337.901 311.654 cv
337.901 311.654 338.783 316.946 345.839 319.592 cv
345.839 319.592 352.013 323.117 340.547 322.238 cv
329.078 321.359 344.954 329.297 337.016 329.297 cv
329.078 329.297 343.187 333.711 336.13 334.589 cv
329.078 335.468 337.45 347.148 351.786 351.451 cv
cp
.662745 .203922 .254902 rgb
f
249.253 295.117 mo
249.253 295.117 244.851 291.147 241.76 290.045 cv
238.669 288.946 241.76 289.601 238.453 285.194 cv
235.145 280.784 234.928 277.259 235.145 275.055 cv
235.362 272.846 234.708 272.625 233.161 269.979 cv
231.613 267.333 233.377 265.793 231.613 263.585 cv
229.853 261.38 225.884 258.734 225.884 258.734 cv
225.884 258.734 237.574 263.809 242.421 263.585 cv
247.269 263.364 249.26 264.026 251.021 266.892 cv
252.781 269.762 258.074 270.644 260.72 273.731 cv
263.366 276.815 269.105 279.685 271.527 282.769 cv
273.949 285.855 273.512 294.672 271.527 297.101 cv
269.543 299.53 249.253 295.117 249.253 295.117 cv
cp
.27451 .207843 .145098 rgb
f
312.765 288.057 mo
312.765 288.057 304.385 270.634 309.457 252.998 cv
314.525 235.357 332.162 211.551 332.162 211.551 cv
332.162 211.551 327.531 223.458 325.326 226.541 cv
323.121 229.628 323.562 234.913 320.254 238.003 cv
316.947 241.094 315.41 248.805 313.639 251.233 cv
311.875 253.663 312.103 258.737 312.316 260.939 cv
312.537 263.141 312.75 262.703 311.214 265.349 cv
309.67 267.995 314.301 271.079 312.978 274.61 cv
311.655 278.138 312.765 288.057 312.765 288.057 cv
cp
.996078 .996078 .996078 rgb
f
351.786 351.451 mo
351.786 351.451 335.352 348.75 324.757 341.198 cv
321.991 339.224 319.627 334.934 318.049 332.268 cv
310.442 319.368 309.119 317.714 309.45 308.453 cv
309.781 299.192 309.781 298.861 308.127 293.239 cv
306.473 287.616 305.812 284.97 305.812 284.97 cv
313.088 288.939 li
313.088 288.939 303.497 273.394 310.773 248.588 cv
310.773 248.588 304.819 255.202 306.142 268.433 cv
306.473 279.017 li
306.473 279.017 302.504 272.402 301.843 259.502 cv
301.843 259.502 301.512 268.433 302.504 272.402 cv
303.497 276.37 301.181 267.44 301.181 270.086 cv
301.181 272.732 297.212 262.479 297.212 266.448 cv
297.212 270.417 295.559 265.787 293.905 259.833 cv
292.251 253.879 290.267 247.926 287.951 242.965 cv
285.636 238.003 284.644 232.711 284.644 232.711 cv
284.644 232.711 287.62 253.549 290.267 262.148 cv
292.913 270.748 291.92 268.433 293.243 274.717 cv
294.566 281.001 291.92 274.386 292.251 279.347 cv
292.582 284.309 291.259 278.686 291.259 282.324 cv
291.259 285.962 289.274 280.339 287.62 282.985 cv
285.967 285.631 284.644 283.647 283.321 283.978 cv
281.998 284.309 281.336 283.316 277.367 282.655 cv
273.398 281.993 271.083 279.678 271.083 279.678 cv
275.383 284.97 li
275.383 284.97 273.729 286.954 268.768 284.97 cv
263.806 282.985 262.483 280.67 262.483 280.67 cv
262.483 280.67 266.783 287.286 269.76 288.277 cv
272.737 289.27 275.052 290.262 268.437 290.593 cv
261.822 290.924 269.099 294.231 266.453 294.562 cv
263.806 294.893 261.16 299.192 255.538 297.539 cv
249.915 295.885 241.646 294.562 237.016 292.247 cv
232.385 289.932 231.062 289.601 231.062 289.601 cv
231.062 289.601 237.677 291.916 241.315 299.192 cv
244.954 306.469 247.269 303.161 248.923 308.453 cv
250.577 313.746 251.238 319.699 251.238 319.699 cv
249.584 305.477 li
249.584 305.477 252.561 305.807 253.553 315.068 cv
254.545 324.329 258.184 316.061 259.837 324.66 cv
261.491 333.259 266.453 328.959 268.768 332.929 cv
271.083 336.898 273.067 332.598 275.052 338.882 cv
277.037 345.167 279.352 356.082 279.352 365.342 cv
279.352 365.342 282.99 362.696 281.005 350.458 cv
279.021 338.221 274.06 329.291 281.998 332.929 cv
289.936 336.566 286.959 330.613 293.905 336.236 cv
300.851 341.859 302.835 342.851 302.835 342.851 cv
302.835 342.851 296.551 336.236 306.473 335.244 cv
316.396 334.251 320.034 336.566 321.991 339.224 cv
327.61 346.841 330.618 349.135 332.603 353.436 cv
334.587 357.735 337.563 356.412 341.202 355.419 cv
344.84 354.427 351.786 351.451 351.786 351.451 cv
cp
.27451 .207843 .145098 rgb
f
296 336.357 mo
296 336.357 288.937 319.819 284.092 312.98 cv
279.242 306.145 274.831 295.778 273.729 292.915 cv
272.626 290.052 276.595 288.946 276.595 288.946 cv
276.595 288.946 277.253 289.825 278.139 292.253 cv
279.021 294.682 282.108 295.778 282.108 298.207 cv
282.108 300.636 282.77 302.396 285.416 306.365 cv
288.062 310.334 297.102 321.363 300.851 326.434 cv
304.599 331.502 305.922 334.148 307.465 335.472 cv
309.009 336.794 307.021 335.695 306.583 339.003 cv
306.142 342.31 309.45 347.162 310.111 348.264 cv
310.773 349.363 314.962 358.624 314.962 358.624 cv
314.962 358.624 299.528 339.003 298.866 338.118 cv
298.205 337.235 296 336.357 296 336.357 cv
cp
.854902 .576471 .215686 rgb
f
254.325 281.89 mo
254.325 281.89 254.986 284.76 251.238 285.197 cv
247.489 285.638 247.937 282.548 250.797 281.008 cv
253.663 279.468 254.325 280.129 254.325 281.89 cv
cp
1 1 1 rgb
f
297.763 287.406 mo
297.763 287.406 298.205 288.729 300.189 290.49 cv
302.174 292.253 300.857 294.241 297.102 293.359 cv
293.354 292.474 293.581 284.543 297.763 287.406 cv
cp
f
304.158 284.977 mo
304.158 284.977 306.797 288.722 302.614 288.946 cv
298.425 289.167 294.904 285.866 298.425 284.099 cv
301.953 282.331 304.158 284.977 304.158 284.977 cv
cp
f
285.195 302.62 mo
285.195 302.62 284.32 297.104 287.841 297.766 cv
291.369 298.427 290.484 299.75 288.062 303.058 cv
285.636 306.365 285.195 302.62 285.195 302.62 cv
cp
f
271.303 300.853 mo
271.303 300.853 269.316 299.085 273.508 298.869 cv
277.698 298.651 277.691 301.07 274.831 302.176 cv
271.965 303.282 271.303 300.853 271.303 300.853 cv
cp
f
256.089 295.561 mo
256.089 295.561 253.884 293.359 259.176 293.135 cv
264.468 292.915 262.928 295.561 261.381 296.222 cv
259.837 296.884 256.089 295.561 256.089 295.561 cv
cp
f
277.478 305.483 mo
277.478 305.483 281.667 307.905 278.36 309.452 cv
275.052 310.996 273.722 302.176 277.478 305.483 cv
cp
f
308.127 306.145 mo
308.127 306.145 299.534 302.62 295.117 310.334 cv
295.117 310.334 293.791 307.905 297.322 304.822 cv
300.851 301.735 309.229 304.822 309.229 304.822 cv
309.229 304.822 309.67 305.921 308.127 306.145 cv
cp
f
311.435 287.623 mo
311.435 287.623 315.41 289.173 316.947 292.037 cv
318.491 294.899 318.494 294.682 321.578 296.005 cv
324.665 297.328 326.87 303.499 326.87 303.499 cv
326.87 303.499 326.656 297.983 322.9 295.561 cv
319.152 293.135 317.395 292.915 317.608 290.93 cv
317.829 288.946 311.435 287.623 311.435 287.623 cv
cp
.27451 .207843 .145098 rgb
f
356.417 389.487 mo
356.417 389.487 363.693 397.425 371.631 403.378 cv
379.569 409.332 389.492 411.978 395.445 413.963 cv
401.398 415.947 400.075 425.208 400.075 425.208 cv
400.075 425.208 408.675 413.963 392.138 410.655 cv
375.6 407.348 356.417 389.487 356.417 389.487 cv
cp
f
537.006 687.162 mo
537.006 687.162 546.268 680.547 548.252 669.301 cv
550.236 658.056 551.559 654.748 558.836 658.056 cv
566.111 661.364 566.111 656.072 574.711 656.072 cv
583.312 656.072 593.896 644.825 593.896 644.825 cv
593.896 644.825 583.973 663.349 569.42 669.301 cv
554.866 675.255 527.745 695.1 526.422 697.084 cv
525.099 699.069 537.006 687.162 537.006 687.162 cv
cp
f
380.892 702.376 mo
380.892 702.376 494.67 736.113 543.621 665.994 cv
543.621 665.994 506.577 722.883 380.892 702.376 cv
cp
f
314.525 531.709 mo
314.525 531.709 310.994 521.569 324.003 507.234 cv
329.185 501.525 331.287 499.079 344.068 494.666 cv
348.265 493.218 336.951 491.337 336.951 491.337 cv
336.951 491.337 300.857 500.402 314.525 531.709 cv
cp
f
303.772 604.733 mo
301.884 604.733 299.827 604.525 297.653 604.12 cv
279.61 600.732 268.919 592.123 264.971 577.805 cv
264.044 576.009 260.306 568.03 263.138 561.104 cv
264.813 557.02 268.313 554.17 273.55 552.646 cv
276.241 551.861 279.145 551.461 282.177 551.461 cv
297.646 551.461 314.504 561.9 318.267 573.805 cv
319.817 578.718 322.811 590.992 317.092 598.79 cv
314.205 602.734 309.719 604.733 303.772 604.733 cv
cp
f
267.775 576.691 mo
267.775 576.691 258.514 560.154 274.391 555.523 cv
290.267 550.894 311.435 562.138 315.403 574.707 cv
319.373 587.275 317.171 603.151 296.003 599.182 cv
274.835 595.213 270.421 586.613 267.775 576.691 cv
cp
.756863 .176471 .243137 rgb
f
274.835 560.378 mo
274.835 560.378 266.897 561.701 272.189 576.254 cv
277.481 590.807 284.541 592.567 294.242 594.776 cv
303.941 596.981 310.111 591.251 313.639 584.636 cv
313.639 584.636 307.024 591.685 293.794 589.484 cv
280.564 587.282 270.428 567.872 274.835 560.378 cv
cp
.27451 .207843 .145098 rgb
f
292.034 572.729 mo
292.034 572.729 289.385 562.583 301.732 566.552 cv
314.087 570.521 313.639 577.58 309.67 579.345 cv
305.702 581.104 291.148 579.789 292.034 572.729 cv
cp
.929412 .882353 .882353 rgb
f
363.621 627.741 mo
359.138 627.741 356.099 624.02 353.419 620.74 cv
351.786 618.737 350.098 616.671 348.344 615.696 cv
347.104 615.007 li
346.853 613.612 li
346.68 612.668 342.742 590.387 350.69 579.551 cv
355.125 573.498 361.426 570.166 368.427 570.166 cv
372.961 570.166 377.584 571.54 381.802 574.139 cv
382.642 574.655 li
390.966 579.758 397.54 583.782 392.351 600.093 cv
387.831 614.294 375.758 623.521 366.794 627.106 cv
365.74 627.53 364.671 627.741 363.621 627.741 cv
cp
.27451 .207843 .145098 rgb
f
349.802 613.074 mo
349.802 613.074 346.053 595.876 353.33 585.953 cv
360.606 576.03 370.752 573.607 379.352 578.9 cv
387.951 584.191 394.122 584.629 389.492 599.182 cv
384.861 613.735 372.292 621.673 365.678 624.319 cv
359.063 626.966 355.755 616.382 349.802 613.074 cv
cp
.756863 .176471 .243137 rgb
f
357.739 575.699 mo
357.739 575.699 351.455 594.883 354.432 602.16 cv
357.409 609.436 363.693 612.413 370.97 612.082 cv
378.246 611.75 386.184 607.451 386.184 607.451 cv
386.184 607.451 374.277 625.312 362.039 627.297 cv
349.802 629.281 337.233 615.059 343.187 598.19 cv
349.14 581.322 357.739 575.699 357.739 575.699 cv
cp
.27451 .207843 .145098 rgb
f
383.869 599.182 mo
383.869 599.182 384.53 607.12 374.608 606.459 cv
364.686 605.798 363.362 597.529 368.985 595.213 cv
374.608 592.897 383.538 596.206 383.869 599.182 cv
cp
.929412 1 .992157 rgb
f
400.83 623.71 mo
392.661 623.71 386.783 618.903 385.854 611.462 cv
385.826 609.887 385.987 581.557 399.796 572.832 cv
403.704 570.366 408.106 569.061 412.534 569.061 cv
423.424 569.061 432.502 576.522 434.129 586.807 cv
436.389 601.126 425.137 611.427 415.076 618.8 cv
410.763 621.971 405.705 623.71 400.83 623.71 cv
cp
.27451 .207843 .145098 rgb
f
388.83 611.09 mo
388.83 611.09 388.83 583.307 401.398 575.369 cv
413.967 567.431 429.181 574.707 431.166 587.275 cv
433.15 599.844 423.228 609.104 413.306 616.382 cv
403.383 623.658 390.153 621.673 388.83 611.09 cv
cp
.537255 .211765 .223529 rgb
f
389.492 599.182 mo
389.492 599.182 390.484 609.767 400.406 610.759 cv
410.329 611.75 417.274 606.128 422.566 599.182 cv
427.858 592.237 427.528 587.606 427.528 587.606 cv
427.528 587.606 431.497 597.529 419.92 606.459 cv
408.344 615.389 405.037 619.358 395.776 617.374 cv
386.515 615.389 387.837 602.16 389.492 599.182 cv
cp
.27451 .207843 .145098 rgb
f
371.745 657.928 mo
367.407 657.928 354.225 657.928 350.229 644.351 cv
350.022 643.637 li
350.167 642.914 li
350.312 642.187 353.863 624.971 364.189 619.069 cv
372.692 614.211 379.786 611.851 385.895 611.851 cv
391.435 611.851 396.055 613.805 399.627 617.649 cv
409.454 628.233 409.016 634.862 404.175 646.632 cv
399.672 657.567 389.747 657.591 381.771 657.611 cv
379.976 657.619 378.19 657.619 376.475 657.743 cv
374.925 657.856 373.333 657.928 371.745 657.928 cv
cp
f
353.109 643.504 mo
353.109 643.504 356.417 626.966 365.678 621.673 cv
374.938 616.382 388.83 610.429 397.43 619.688 cv
406.029 628.95 406.029 634.241 401.398 645.488 cv
396.768 656.732 385.522 654.087 376.261 654.748 cv
367 655.41 356.417 654.748 353.109 643.504 cv
cp
.756863 .176471 .243137 rgb
f
356.086 631.596 mo
356.086 631.596 354.101 648.796 370.308 649.787 cv
386.515 650.779 395.776 650.779 400.737 641.519 cv
405.698 632.257 402.06 624.319 402.06 624.319 cv
402.06 624.319 399.083 635.234 393.791 640.525 cv
388.5 645.818 378.577 645.818 371.962 645.818 cv
365.347 645.818 358.401 638.873 356.086 631.596 cv
cp
.27451 .207843 .145098 rgb
f
375.931 628.288 mo
375.931 628.288 375.6 622.335 385.191 620.682 cv
394.784 619.027 397.099 625.643 393.46 628.95 cv
389.822 632.257 377.584 636.227 375.931 628.288 cv
cp
.929412 1 .992157 rgb
f
338.101 661.029 mo
333.429 661.029 329.612 658.707 326.752 654.129 cv
326.119 652.723 316.444 629.425 331 620.233 cv
337.099 616.382 342.318 614.51 346.956 614.51 cv
351.655 614.51 358.063 616.558 361.86 626.313 cv
367.424 640.626 365.347 650.139 355.686 654.601 cv
354.515 655.142 353.316 655.748 352.103 656.361 cv
347.555 658.656 342.849 661.029 338.101 661.029 cv
cp
.27451 .207843 .145098 rgb
f
329.295 652.537 mo
329.295 652.537 320.034 630.707 332.603 622.77 cv
345.171 614.831 354.432 615.493 359.063 627.4 cv
363.693 639.307 363.031 647.906 354.432 651.875 cv
345.833 655.845 335.91 663.121 329.295 652.537 cv
cp
.756863 .176471 .243137 rgb
f
330.618 626.737 mo
330.618 626.737 328.964 641.953 332.933 648.898 cv
336.902 655.845 348.148 655.845 355.755 647.906 cv
355.755 647.906 348.148 652.867 339.879 646.583 cv
331.61 640.299 330.618 626.737 330.618 626.737 cv
cp
.27451 .207843 .145098 rgb
f
343.848 629.715 mo
343.848 629.715 340.541 622.77 347.156 622.107 cv
353.77 621.446 355.093 631.038 352.778 635.338 cv
350.463 639.638 344.84 636.33 343.848 629.715 cv
cp
.929412 1 .992157 rgb
f
362.411 580.895 mo
361.454 580.895 360.475 580.813 359.455 580.646 cv
346.598 578.501 341.161 568.412 339.417 564.172 cv
339.472 564.15 li
338.818 562.92 338.721 561.071 338.597 558.776 cv
337.936 546.59 343.056 538.311 352.647 536.067 cv
354.959 535.522 357.229 535.251 359.383 535.251 cv
371.786 535.251 379.538 544.419 381.719 553.505 cv
383.139 559.431 380.881 567.912 376.351 573.663 cv
372.616 578.394 367.8 580.895 362.411 580.895 cv
cp
.27451 .207843 .145098 rgb
f
342.084 562.801 mo
342.084 562.801 337.784 542.624 353.33 538.985 cv
368.875 535.348 376.813 545.932 378.797 554.2 cv
380.782 562.47 373.836 579.999 359.944 577.684 cv
346.053 575.369 342.084 562.47 342.084 562.801 cv
cp
.537255 .211765 .223529 rgb
f
357.629 546.263 mo
357.629 546.263 353.991 540.64 363.252 542.624 cv
372.513 544.609 372.182 547.916 371.19 550.231 cv
370.198 552.547 361.598 550.231 357.629 546.263 cv
cp
.929412 .882353 .882353 rgb
f
346.277 542.294 mo
346.277 542.294 337.016 562.138 351.569 568.754 cv
366.122 575.369 372.299 574.053 377.591 565.669 cv
377.591 565.669 374.063 570.962 361.274 566.107 cv
348.485 561.257 343.187 551.562 351.569 539.21 cv
351.569 539.21 348.479 538.325 346.277 542.294 cv
cp
.27451 .207843 .145098 rgb
f
305.957 535.038 mo
304.999 535.038 304.02 534.955 303 534.79 cv
290.142 532.647 284.706 522.559 282.962 518.313 cv
283.018 518.294 li
282.363 517.064 282.267 515.213 282.143 512.919 cv
281.481 500.732 286.601 492.454 296.192 490.211 cv
298.504 489.67 300.775 489.395 302.928 489.395 cv
315.331 489.395 323.083 498.562 325.264 507.647 cv
326.683 513.576 324.427 522.057 319.896 527.81 cv
316.162 532.536 311.345 535.038 305.957 535.038 cv
cp
f
285.629 516.946 mo
285.629 516.946 281.33 496.771 296.875 493.132 cv
312.42 489.494 320.358 500.078 322.342 508.347 cv
324.327 516.616 317.381 534.145 303.49 531.83 cv
289.598 529.515 285.629 516.616 285.629 516.946 cv
cp
.537255 .211765 .223529 rgb
f
301.174 500.409 mo
301.174 500.409 297.536 494.786 306.797 496.771 cv
316.058 498.755 315.727 502.063 314.735 504.378 cv
313.743 506.693 305.144 504.378 301.174 500.409 cv
cp
.929412 .882353 .882353 rgb
f
289.822 496.439 mo
289.822 496.439 277.478 514.076 295.114 522.9 cv
309.416 530.053 315.845 528.195 321.136 519.813 cv
321.136 519.813 317.608 525.104 304.819 520.254 cv
292.031 515.399 286.731 505.704 295.114 493.353 cv
295.114 493.353 292.023 492.471 289.822 496.439 cv
cp
.27451 .207843 .145098 rgb
f
334.291 538.387 mo
326.229 538.387 321.364 532.02 321.161 531.747 cv
320.937 531.458 li
320.799 531.12 li
317.223 522.696 315.121 504.277 332.733 494.889 cv
338.914 491.592 344.331 489.918 348.837 489.918 cv
358.015 489.918 363.638 496.739 364.261 508.619 cv
365.016 522.951 349.646 533.88 339.782 537.404 cv
337.963 538.056 336.11 538.387 334.291 538.387 cv
cp
f
323.559 529.949 mo
323.559 529.949 314.298 508.119 334.143 497.536 cv
353.987 486.952 360.603 496.212 361.264 508.781 cv
361.926 521.35 348.034 531.272 338.773 534.579 cv
329.512 537.887 323.559 529.949 323.559 529.949 cv
cp
.756863 .176471 .243137 rgb
f
337.895 511.871 mo
337.895 511.871 338.776 505.694 348.038 500.402 cv
357.299 495.11 356.861 507.458 357.299 512.31 cv
357.739 517.163 355.093 522.014 349.802 521.133 cv
344.51 520.247 338.776 517.607 337.895 511.871 cv
cp
.929412 .882353 .882353 rgb
f
329.956 505.694 mo
328.851 514.728 327.751 520.247 332.158 523.782 cv
339.217 529.442 345.388 526.869 345.388 526.869 cv
345.388 526.869 337.888 531.72 330.835 529.073 cv
323.782 526.428 321.66 516.616 322.459 512.754 cv
325.546 497.756 338.122 494.449 338.122 494.449 cv
338.122 494.449 331.063 496.66 329.956 505.694 cv
cp
.27451 .207843 .145098 rgb
f
335.296 583.695 mo
323.149 583.695 311.903 573.877 309.691 561.339 cv
309.481 560.133 309.229 558.883 308.975 557.608 cv
307.473 550.129 305.771 541.652 310.167 535.634 cv
312.716 532.144 317.002 530.046 322.9 529.391 cv
324.458 529.219 325.994 529.133 327.486 529.133 cv
337.219 529.133 345.612 532.681 350.518 538.869 cv
354.521 543.916 355.852 550.428 354.267 557.198 cv
354.163 557.649 li
353.925 558.053 li
353.901 558.093 351.435 562.311 351.693 566.239 cv
352.041 571.407 350.808 575.737 348.137 578.759 cv
345.522 581.722 341.65 583.369 336.633 583.658 cv
336.186 583.686 335.738 583.695 335.296 583.695 cv
cp
f
351.345 556.516 mo
351.345 556.516 348.368 561.477 348.699 566.438 cv
349.03 571.399 348.592 577.354 337.016 578.015 cv
325.439 578.676 314.749 566.332 312.765 555.086 cv
310.78 543.841 313.646 533.474 323.231 532.371 cv
341.088 530.321 354.983 540.971 351.345 556.516 cv
cp
.756863 .176471 .243137 rgb
f
325.994 547.148 mo
325.994 547.148 319.82 536.12 330.845 538.325 cv
341.87 540.532 347.6 545.825 342.308 551.116 cv
337.016 556.409 327.317 547.585 325.994 547.148 cv
cp
.929412 1 .992157 rgb
f
314.301 554.2 mo
314.301 554.2 320.706 578.459 342.752 574.49 cv
341.87 569.639 li
341.87 569.639 328.633 574.924 314.301 554.2 cv
cp
.27451 .207843 .145098 rgb
f
331.39 621.422 mo
329.984 621.422 329.095 621.36 329.095 621.36 cv
328.082 621.291 li
327.311 620.619 li
326.594 619.985 309.67 611.097 311.097 591.575 cv
311.952 579.913 322.959 565.922 334.146 565.922 cv
335.531 565.922 336.888 566.139 338.184 566.569 cv
347.845 569.794 353.646 578.635 355.424 592.857 cv
356.988 605.401 351.869 614.655 346.102 618.263 cv
341.926 620.874 335.796 621.422 331.39 621.422 cv
cp
f
330.401 614.621 mo
330.401 614.621 315.848 609.991 316.285 590.363 cv
316.554 578.384 327.311 566.107 337.233 569.415 cv
347.156 572.723 351.125 582.645 352.447 593.229 cv
353.77 603.813 349.802 612.413 344.51 615.72 cv
339.217 619.027 330.401 614.621 330.401 614.621 cv
cp
.756863 .176471 .243137 rgb
f
323.786 578.459 mo
323.786 578.459 315.845 583.313 318.931 595.657 cv
322.025 608.006 328.641 615.944 337.016 615.944 cv
345.392 615.944 348.926 611.534 352.455 602.273 cv
352.455 602.273 352.455 609.772 337.016 609.772 cv
321.578 609.772 320.254 582.429 323.786 578.459 cv
cp
.27451 .207843 .145098 rgb
f
333.933 587.72 mo
333.933 587.72 326.876 573.607 333.933 573.607 cv
340.985 573.607 348.038 582.869 346.714 588.16 cv
345.392 593.453 336.137 593.012 333.933 587.72 cv
cp
.929412 .882353 .882353 rgb
f
386.404 429.405 mo
386.404 429.405 395.666 439.106 392.582 448.368 cv
389.498 457.628 392.144 462.479 392.582 470.858 cv
393.02 479.234 396.106 484.967 385.081 493.787 cv
385.081 493.787 393.026 486.738 390.821 474.387 cv
388.613 462.035 387.734 461.601 389.498 453.219 cv
391.259 444.836 392.138 438.665 386.404 429.405 cv
cp
.27451 .207843 .145098 rgb
f
392.396 694.673 mo
391.441 694.673 390.456 694.59 389.44 694.425 cv
376.582 692.278 371.146 682.19 369.405 677.949 cv
369.454 677.929 li
368.806 676.699 368.706 674.849 368.582 672.554 cv
367.92 660.368 373.043 652.089 382.635 649.846 cv
384.944 649.302 387.211 649.029 389.367 649.029 cv
401.771 649.029 409.522 658.197 411.703 667.282 cv
413.126 673.209 410.866 681.691 406.333 687.441 cv
402.604 692.171 397.788 694.673 392.396 694.673 cv
cp
f
372.072 676.578 mo
372.072 676.578 367.772 656.402 383.317 652.764 cv
398.862 649.126 406.801 659.71 408.785 667.979 cv
410.77 676.247 403.824 693.777 389.933 691.462 cv
376.041 689.146 372.072 676.247 372.072 676.578 cv
cp
.756863 .176471 .243137 rgb
f
387.617 660.04 mo
387.617 660.04 383.979 654.418 393.24 656.402 cv
402.501 658.387 402.17 661.694 401.178 664.01 cv
400.186 666.324 391.586 664.01 387.617 660.04 cv
cp
.929412 .882353 .882353 rgb
f
376.261 656.072 mo
376.261 656.072 363.913 673.712 381.553 682.531 cv
395.852 689.684 402.281 687.83 407.572 679.448 cv
407.572 679.448 404.051 684.74 391.259 679.886 cv
378.467 675.034 373.171 665.339 381.553 652.988 cv
381.553 652.988 378.463 652.103 376.261 656.072 cv
cp
.27451 .207843 .145098 rgb
f
277.812 443.603 mo
273.474 443.603 260.292 443.603 256.295 430.025 cv
256.089 429.312 li
256.233 428.588 li
256.378 427.861 259.93 410.645 270.256 404.743 cv
278.759 399.885 285.853 397.525 291.961 397.525 cv
297.502 397.525 302.122 399.479 305.694 403.324 cv
315.521 413.907 315.083 420.536 310.242 432.306 cv
305.739 443.241 295.813 443.265 287.837 443.286 cv
286.042 443.292 284.258 443.292 282.542 443.417 cv
280.992 443.53 279.4 443.603 277.812 443.603 cv
cp
f
259.176 429.177 mo
259.176 429.177 262.483 412.64 271.745 407.348 cv
281.005 402.056 294.897 396.102 303.497 405.363 cv
312.096 414.624 312.096 419.916 307.465 431.162 cv
302.835 442.407 291.589 439.761 282.328 440.422 cv
273.067 441.084 262.483 440.422 259.176 429.177 cv
cp
.756863 .176471 .243137 rgb
f
262.153 417.27 mo
262.153 417.27 260.168 434.469 276.375 435.461 cv
292.582 436.454 301.843 436.454 306.804 427.192 cv
311.765 417.931 308.127 409.994 308.127 409.994 cv
308.127 409.994 305.15 420.908 299.858 426.2 cv
294.566 431.493 284.644 431.493 278.029 431.493 cv
271.414 431.493 264.468 424.546 262.153 417.27 cv
cp
.27451 .207843 .145098 rgb
f
281.998 413.963 mo
281.998 413.963 281.667 408.009 291.259 406.355 cv
300.851 404.702 303.166 411.317 299.528 414.624 cv
295.889 417.931 283.651 421.9 281.998 413.963 cv
cp
.929412 1 .992157 rgb
f
296.881 561.836 mo
284.072 561.836 275.538 558.789 271.524 552.802 cv
268.175 547.803 268.168 541.092 271.496 532.847 cv
272.647 526.873 277.626 516.119 288.813 516.119 cv
289.764 516.143 li
298.218 516.588 315.828 517.519 318.38 537.952 cv
319.341 545.649 318.019 551.606 314.442 555.658 cv
310.773 559.813 305.033 561.836 296.881 561.836 cv
cp
.27451 .207843 .145098 rgb
f
274.391 533.694 mo
274.391 533.694 277.037 518.479 289.605 519.141 cv
302.174 519.803 313.419 522.448 315.403 538.325 cv
317.388 554.2 308.788 558.831 296.881 558.831 cv
284.974 558.831 265.129 556.186 274.391 533.694 cv
cp
.756863 .176471 .243137 rgb
f
310.111 533.032 mo
310.111 533.032 314.742 538.985 307.465 538.325 cv
300.189 537.663 293.574 530.387 298.205 527.741 cv
302.835 525.095 310.111 533.032 310.111 533.032 cv
cp
.929412 .882353 .882353 rgb
f
276.158 534.801 mo
276.158 534.801 271.751 549.35 284.981 551.554 cv
298.211 553.763 314.074 557.288 315.403 538.325 cv
315.403 538.325 314.087 548.464 294.68 547.585 cv
275.272 546.707 276.158 534.801 276.158 534.801 cv
cp
.27451 .207843 .145098 rgb
f
306.814 459.964 mo
305.922 458.996 li
305.219 458.231 288.73 440.088 296.847 423.864 cv
302.056 413.442 309.719 407.706 318.429 407.706 cv
322.504 407.706 326.669 408.939 330.814 411.379 cv
336.727 414.851 340.134 422.8 339.927 432.636 cv
339.765 440.295 337.082 450.562 330.046 454.314 cv
319.579 459.896 308.592 459.964 308.127 459.964 cv
306.814 459.964 li
cp
f
310.556 454.976 mo
310.556 454.976 292.251 439.761 299.528 425.208 cv
306.804 410.655 318.049 407.348 329.295 413.963 cv
340.541 420.577 338.556 446.376 328.633 451.668 cv
318.711 456.96 310.556 454.976 310.556 454.976 cv
cp
.756863 .176471 .243137 rgb
f
324.665 438.438 mo
324.665 438.438 317.388 424.546 314.081 421.9 cv
310.773 419.254 309.45 414.624 320.034 414.624 cv
330.618 414.624 335.249 421.239 331.941 432.484 cv
328.633 443.73 324.665 438.438 324.665 438.438 cv
cp
.929412 .882353 .882353 rgb
f
304.826 421.022 mo
304.826 421.022 297.33 424.554 303.503 439.106 cv
309.67 453.659 313.205 455.861 323.348 454.538 cv
333.485 453.215 331.724 447.044 331.724 447.044 cv
331.724 447.044 326.428 451.013 317.608 448.805 cv
308.795 446.6 301.298 429.401 304.826 421.022 cv
cp
.27451 .207843 .145098 rgb
f
352.682 501.88 mo
347.934 501.88 343.524 498.923 336.951 491.337 cv
327.214 480.102 325.023 462.931 331.086 445.394 cv
333.916 437.239 337.55 429.69 344.978 429.69 cv
348.84 429.69 352.913 431.716 358.642 435.22 cv
370.046 442.187 374.649 456.815 371.273 475.358 cv
368.475 490.766 357.533 500.484 357.067 500.895 cv
356.427 501.456 li
355.583 501.597 li
354.608 501.756 353.657 501.88 352.682 501.88 cv
352.682 501.88 li
cp
f
355.093 498.634 mo
355.093 498.634 365.678 489.374 368.324 474.82 cv
370.97 460.268 368.985 445.053 357.078 437.777 cv
345.171 430.5 340.872 429.556 333.925 446.376 cv
331.287 452.774 343.193 454.976 347.162 470.852 cv
350.346 483.592 337.901 496.874 355.093 498.634 cv
cp
.756863 .176471 .243137 rgb
f
351.125 467.544 mo
351.125 467.544 337.233 455.637 343.187 445.714 cv
349.14 435.792 355.093 439.761 359.063 449.684 cv
363.031 459.606 357.739 476.144 351.125 467.544 cv
cp
.929412 .882353 .882353 rgb
f
347.162 477.911 mo
347.162 477.911 349.367 485.849 355.101 485.849 cv
360.83 485.849 366.122 479.234 366.122 479.234 cv
366.122 479.234 363.031 491.138 354.653 491.582 cv
346.277 492.026 342.745 485.412 342.745 485.412 cv
342.745 485.412 346.28 475.265 347.162 477.911 cv
cp
.27451 .207843 .145098 rgb
f
316.699 507.245 mo
315.555 507.245 314.425 507.106 313.35 506.838 cv
297.24 502.81 295.938 493.887 295.868 491.637 cv
293.939 480.578 295.248 458.589 313.846 452.774 cv
317.233 451.716 320.523 451.179 323.624 451.179 cv
331.166 451.179 337.522 454.331 341.533 460.05 cv
345.819 466.169 346.749 474.3 344.023 481.797 cv
338.749 496.306 327 507.245 316.699 507.245 cv
cp
f
300.41 490.259 mo
300.41 490.259 293.574 462.252 314.742 455.637 cv
335.91 449.022 346.494 466.221 341.202 480.774 cv
335.91 495.327 323.396 506.362 314.081 503.926 cv
303.941 501.28 300.41 490.259 300.41 490.259 cv
cp
.756863 .176471 .243137 rgb
f
334.587 461.591 mo
334.587 461.591 343.187 477.467 329.295 476.805 cv
315.403 476.144 306.142 462.914 316.727 459.606 cv
327.311 456.299 331.941 457.622 334.587 461.591 cv
cp
.929412 .882353 .882353 rgb
f
306.804 463.575 mo
306.804 463.575 290.928 497.312 317.388 501.28 cv
317.388 501.28 299.528 493.342 306.804 463.575 cv
cp
.27451 .207843 .145098 rgb
f
290.376 486.914 mo
288.971 486.914 288.082 486.852 288.082 486.852 cv
287.069 486.786 li
286.297 486.114 li
285.581 485.477 268.657 476.588 270.084 457.07 cv
270.938 445.404 281.946 431.417 293.133 431.417 cv
294.518 431.417 295.875 431.633 297.171 432.061 cv
306.832 435.285 312.633 444.13 314.411 458.352 cv
315.976 470.893 310.855 480.15 305.088 483.757 cv
300.913 486.366 294.783 486.914 290.376 486.914 cv
cp
f
289.388 480.113 mo
289.388 480.113 274.835 475.482 275.272 455.854 cv
275.541 443.875 286.518 434.465 296.44 437.773 cv
306.363 441.081 310.111 448.14 311.435 458.724 cv
312.757 469.308 308.788 477.908 303.497 481.215 cv
298.205 484.522 289.388 480.113 289.388 480.113 cv
cp
.756863 .176471 .243137 rgb
f
283.658 440.867 mo
283.658 440.867 275.713 445.722 278.804 458.066 cv
281.894 470.414 288.509 478.352 296.888 478.352 cv
305.264 478.352 308.799 473.942 312.323 464.681 cv
312.323 464.681 312.323 472.182 296.888 472.182 cv
281.45 472.182 280.126 444.836 283.658 440.867 cv
cp
.27451 .207843 .145098 rgb
f
292.919 453.215 mo
292.919 453.215 285.863 439.1 292.919 439.1 cv
299.972 439.1 307.024 448.36 305.702 453.652 cv
304.378 458.945 295.125 458.507 292.919 453.215 cv
cp
.929412 .882353 .882353 rgb
f
269.257 466.993 mo
258.053 466.993 243.01 449.818 241.57 442.242 cv
241.45 441.628 li
241.595 441.011 li
242.136 438.686 247.207 418.231 257.488 415.564 cv
259.569 415.027 261.708 414.755 263.848 414.755 cv
271.841 414.755 281.181 418.841 283.414 430.314 cv
285.264 439.854 283.972 454.208 278.607 461.714 cv
276.479 464.688 273.763 466.476 270.752 466.89 cv
270.266 466.955 269.767 466.993 269.257 466.993 cv
cp
.27451 .207843 .145098 rgb
f
244.485 441.684 mo
244.485 441.684 249.391 420.732 258.235 418.445 cv
267.073 416.15 278.205 419.096 280.496 430.882 cv
282.79 442.666 279.51 459.365 270.019 460.677 cv
260.527 461.983 245.791 448.564 244.485 441.684 cv
cp
.756863 .176471 .243137 rgb
f
262.163 428.588 mo
262.163 428.588 261.505 423.027 267.396 421.715 cv
273.295 420.409 278.532 432.522 276.892 436.774 cv
275.259 441.033 264.127 442.014 262.163 428.588 cv
cp
.929412 1 .992157 rgb
f
255.29 423.027 mo
255.29 423.027 244.809 436.123 251.031 445.287 cv
254.635 449.545 li
254.635 449.545 247.755 439.396 255.29 423.027 cv
cp
.27451 .207843 .145098 rgb
f
262.267 516.856 mo
261.374 515.892 li
260.671 515.127 244.182 496.98 252.299 480.76 cv
257.508 470.335 265.171 464.598 273.881 464.598 cv
277.956 464.598 282.122 465.835 286.266 468.274 cv
292.179 471.747 295.586 479.696 295.379 489.528 cv
295.217 497.188 292.533 507.458 285.498 511.21 cv
275.031 516.792 264.044 516.856 263.579 516.856 cv
262.267 516.856 li
cp
f
266.008 511.871 mo
266.008 511.871 247.703 496.657 254.979 482.104 cv
262.256 467.551 273.501 464.244 284.747 470.858 cv
295.993 477.473 294.008 503.272 284.086 508.563 cv
274.163 513.856 266.008 511.871 266.008 511.871 cv
cp
.756863 .176471 .243137 rgb
f
280.117 495.334 mo
280.117 495.334 272.84 481.442 269.532 478.796 cv
266.225 476.15 264.902 471.52 275.486 471.52 cv
286.07 471.52 290.7 478.135 287.393 489.38 cv
284.086 500.626 280.117 495.334 280.117 495.334 cv
cp
.929412 .882353 .882353 rgb
f
260.278 477.918 mo
260.278 477.918 252.781 481.446 258.956 495.999 cv
265.123 510.552 268.657 512.754 278.8 511.431 cv
288.937 510.107 287.176 503.937 287.176 503.937 cv
287.176 503.937 281.88 507.906 273.061 505.701 cv
264.248 503.492 256.75 486.293 260.278 477.918 cv
cp
.27451 .207843 .145098 rgb
f
246.222 492.753 mo
239.434 492.753 233.377 487.82 228.712 478.479 cv
224.479 470.021 223.675 448.119 233.719 441.549 cv
236.096 439.996 238.669 439.209 241.367 439.209 cv
249.377 439.209 256.606 446.207 259.61 453.122 cv
259.885 453.735 li
262.78 460.398 262.883 460.874 262.594 466.521 cv
262.491 468.65 li
262.415 468.946 li
261.05 474.314 255.951 491.892 247.551 492.691 cv
247.104 492.733 246.659 492.753 246.222 492.753 cv
cp
f
259.507 468.206 mo
259.507 468.206 254.215 489.043 247.269 489.704 cv
240.323 490.366 235.031 484.412 231.393 477.136 cv
227.755 469.859 228.085 451.337 236.685 445.714 cv
245.285 440.092 253.553 446.707 256.861 454.314 cv
260.168 461.921 259.837 460.929 259.507 468.206 cv
cp
.756863 .176471 .243137 rgb
f
231.176 452.774 mo
231.176 452.774 230.738 475.265 243.083 479.234 cv
255.428 483.203 258.521 473.504 258.521 473.504 cv
258.521 473.504 258.959 483.644 247.937 484.967 cv
236.912 486.29 227.207 473.942 231.176 452.774 cv
cp
.27451 .207843 .145098 rgb
f
241.323 453.215 mo
241.323 453.215 243.52 473.063 252.781 468.65 cv
262.042 464.236 251.906 452.329 247.937 449.684 cv
243.968 447.038 240.881 448.805 241.323 453.215 cv
cp
.929412 1 .992157 rgb
f
389.774 592.991 mo
379.066 592.991 375.373 577.587 374.718 574.345 cv
371.414 567.375 369.144 552.547 383.27 543.72 cv
389.698 539.699 396.375 537.577 402.584 537.577 cv
410.57 537.577 417.46 541.115 420.571 546.81 cv
426.439 557.57 425.715 567.84 418.632 574.282 cv
417.405 575.399 416.13 576.615 414.828 577.859 cv
408.065 584.337 400.399 591.668 391.214 592.895 cv
390.721 592.96 390.243 592.991 389.774 592.991 cv
cp
.27451 .207843 .145098 rgb
f
377.584 573.385 mo
377.584 573.385 368.985 556.186 384.861 546.263 cv
400.737 536.34 413.967 540.971 417.936 548.247 cv
421.905 555.523 423.889 565.446 416.613 572.061 cv
409.336 578.676 400.737 588.599 390.814 589.922 cv
380.892 591.245 377.584 573.385 377.584 573.385 cv
cp
.756863 .176471 .243137 rgb
f
375.82 571.407 mo
375.82 571.407 380.23 578.9 387.29 578.459 cv
394.349 578.021 402.281 576.254 407.135 573.607 cv
411.989 570.962 417.719 558.176 417.719 558.176 cv
417.719 558.176 417.719 573.174 404.489 580.667 cv
391.259 588.16 381.553 586.842 378.467 581.99 cv
375.383 577.136 375.82 571.407 375.82 571.407 cv
cp
.27451 .207843 .145098 rgb
f
387.29 559.055 mo
387.29 559.055 385.522 551.116 395.666 548.029 cv
405.812 544.946 408.895 547.15 405.812 552.885 cv
402.729 558.613 392.582 567.431 387.29 559.055 cv
cp
.929412 1 .992157 rgb
f
440.571 456.915 mo
436.179 456.915 428.81 455.871 426.508 452.998 cv
426.17 452.495 422.284 446.362 420.902 432.567 cv
419.225 415.73 428.547 410.707 436.665 409.456 cv
437.843 409.277 438.932 409.194 439.951 409.194 cv
449.117 409.194 452.555 416.078 454.022 419.017 cv
456.627 424.226 457.43 429.136 454.598 441.535 cv
454.04 443.988 li
451.928 453.38 451.363 455.902 443.735 456.75 cv
442.708 456.863 441.64 456.915 440.571 456.915 cv
cp
.27451 .207843 .145098 rgb
f
428.851 451.12 mo
428.851 451.12 425.212 445.498 423.889 432.268 cv
422.566 419.038 428.52 413.746 437.12 412.422 cv
445.719 411.1 449.027 415.73 451.342 420.361 cv
453.658 424.991 454.319 429.291 451.673 440.867 cv
449.027 452.443 449.357 453.105 443.404 453.766 cv
437.45 454.428 430.173 452.774 428.851 451.12 cv
cp
.537255 .211765 .223529 rgb
f
433.481 422.676 mo
433.481 422.676 431.497 415.399 439.766 416.392 cv
448.034 417.384 450.35 422.676 447.703 424.66 cv
445.058 426.645 439.104 427.306 433.481 422.676 cv
cp
.929412 .882353 .882353 rgb
f
425.657 420.588 mo
425.657 420.588 425.212 448.815 435.355 449.694 cv
445.501 450.572 448.151 451.013 450.357 442.634 cv
450.357 442.634 450.35 447.493 438.001 444.402 cv
425.657 441.312 425.657 420.588 425.657 420.588 cv
cp
.27451 .207843 .145098 rgb
f
475.022 521.363 mo
473.875 521.363 472.748 521.225 471.673 520.957 cv
455.559 516.929 454.257 508.006 454.188 505.756 cv
452.262 494.696 453.568 472.708 472.169 466.893 cv
475.556 465.835 478.846 465.298 481.947 465.298 cv
489.489 465.298 495.842 468.45 499.852 474.169 cv
504.138 480.288 505.067 488.419 502.347 495.917 cv
497.068 510.425 485.32 521.363 475.022 521.363 cv
cp
f
458.732 504.378 mo
458.732 504.378 451.894 476.371 473.062 469.756 cv
494.229 463.141 504.813 480.34 499.521 494.893 cv
494.229 509.445 481.72 520.481 472.4 518.045 cv
462.264 515.399 458.732 504.378 458.732 504.378 cv
cp
.537255 .211765 .223529 rgb
f
492.906 475.709 mo
492.906 475.709 501.506 491.585 487.614 490.924 cv
473.723 490.262 464.462 477.033 475.046 473.725 cv
485.63 470.417 490.26 471.74 492.906 475.709 cv
cp
.929412 .882353 .882353 rgb
f
465.123 477.694 mo
465.123 477.694 449.248 511.431 475.708 515.399 cv
475.708 515.399 457.847 507.461 465.123 477.694 cv
cp
.27451 .207843 .145098 rgb
f
414.411 530.538 mo
413.519 529.57 li
412.816 528.805 396.327 510.662 404.444 494.438 cv
409.653 484.016 417.315 478.28 426.025 478.28 cv
430.102 478.28 434.267 479.513 438.412 481.952 cv
444.324 485.425 447.731 493.374 447.524 503.21 cv
447.362 510.869 444.679 521.136 437.643 524.888 cv
427.176 530.469 416.189 530.538 415.724 530.538 cv
414.411 530.538 li
cp
f
418.153 525.549 mo
418.153 525.549 399.848 510.335 407.125 495.782 cv
414.401 481.229 425.647 477.921 436.892 484.536 cv
448.138 491.151 446.153 516.95 436.23 522.242 cv
426.308 527.533 418.153 525.549 418.153 525.549 cv
cp
.756863 .176471 .243137 rgb
f
432.261 509.012 mo
432.261 509.012 424.985 495.121 421.678 492.475 cv
418.37 489.828 417.047 485.198 427.631 485.198 cv
438.215 485.198 442.846 491.813 439.538 503.058 cv
436.23 514.305 432.261 509.012 432.261 509.012 cv
cp
.929412 .882353 .882353 rgb
f
412.424 491.596 mo
412.424 491.596 404.927 495.127 411.101 509.681 cv
417.268 524.233 420.803 526.435 430.945 525.111 cv
441.082 523.789 439.321 517.618 439.321 517.618 cv
439.321 517.618 434.025 521.587 425.206 519.379 cv
416.392 517.174 408.895 499.975 412.424 491.596 cv
cp
.27451 .207843 .145098 rgb
f
416.499 574.231 mo
415.094 574.231 414.205 574.17 414.205 574.17 cv
413.192 574.104 li
412.424 573.432 li
411.703 572.795 394.784 563.906 396.21 544.389 cv
397.064 532.723 408.069 518.734 419.259 518.734 cv
420.644 518.734 421.998 518.952 423.297 519.379 cv
432.954 522.603 438.76 531.448 440.537 545.67 cv
442.101 558.211 436.981 567.469 431.214 571.075 cv
427.039 573.684 420.906 574.231 416.499 574.231 cv
cp
f
415.51 567.431 mo
415.51 567.431 400.958 562.801 401.398 543.172 cv
401.667 531.192 412.424 518.92 422.346 522.229 cv
432.269 525.535 436.238 535.458 437.561 546.042 cv
438.883 556.625 434.915 565.226 429.623 568.533 cv
424.331 571.841 415.51 567.431 415.51 567.431 cv
cp
.756863 .176471 .243137 rgb
f
408.895 531.272 mo
408.895 531.272 400.954 536.123 404.044 548.471 cv
407.135 560.816 413.75 568.754 422.125 568.754 cv
430.504 568.754 434.04 564.348 437.564 555.086 cv
437.564 555.086 437.564 562.583 422.125 562.583 cv
406.69 562.583 405.367 535.241 408.895 531.272 cv
cp
.27451 .207843 .145098 rgb
f
419.042 540.532 mo
419.042 540.532 411.989 526.417 419.042 526.417 cv
426.095 526.417 433.15 535.679 431.828 540.971 cv
430.504 546.263 421.25 545.825 419.042 540.532 cv
cp
.929412 .882353 .882353 rgb
f
263.414 552.381 mo
251.269 552.381 240.023 542.563 237.812 530.024 cv
237.601 528.822 237.346 527.572 237.091 526.294 cv
235.589 518.816 233.887 510.342 238.287 504.319 cv
240.833 500.833 245.119 498.734 251.021 498.076 cv
252.575 497.907 254.111 497.818 255.606 497.818 cv
265.336 497.818 273.729 501.37 278.639 507.555 cv
282.639 512.605 283.972 519.117 282.384 525.887 cv
282.28 526.335 li
282.046 526.737 li
282.019 526.779 279.551 530.996 279.813 534.924 cv
280.158 540.092 278.928 544.423 276.258 547.448 cv
273.64 550.407 269.77 552.058 264.75 552.347 cv
264.302 552.371 263.858 552.381 263.414 552.381 cv
cp
.27451 .207843 .145098 rgb
f
279.465 525.204 mo
279.465 525.204 276.488 530.166 276.819 535.127 cv
277.15 540.088 276.712 546.042 265.137 546.703 cv
253.56 547.365 242.866 535.017 240.881 523.771 cv
238.897 512.525 241.763 502.159 251.352 501.061 cv
269.209 499.006 283.104 509.659 279.465 525.204 cv
cp
.756863 .176471 .243137 rgb
f
254.111 515.834 mo
254.111 515.834 247.941 504.805 258.962 507.013 cv
269.987 509.219 275.72 514.51 270.428 519.803 cv
265.137 525.095 255.434 516.274 254.111 515.834 cv
cp
.929412 1 .992157 rgb
f
242.421 522.89 mo
242.421 522.89 248.826 547.148 270.869 543.179 cv
269.987 538.325 li
269.987 538.325 256.75 543.613 242.421 522.89 cv
cp
.27451 .207843 .145098 rgb
f
477.96 670.445 mo
476.076 670.445 474.019 670.239 471.842 669.828 cv
453.802 666.445 443.107 657.836 439.159 643.514 cv
438.236 641.722 434.501 633.742 437.333 626.817 cv
439.007 622.728 442.504 619.882 447.738 618.356 cv
450.432 617.57 453.337 617.174 456.373 617.174 cv
471.838 617.174 488.696 627.613 492.458 639.514 cv
494.009 644.43 497 656.702 491.287 664.502 cv
488.396 668.443 483.911 670.445 477.96 670.445 cv
cp
f
441.967 642.404 mo
441.967 642.404 432.706 625.866 448.582 621.235 cv
464.458 616.605 485.626 627.852 489.596 640.42 cv
493.564 652.988 491.363 668.864 470.195 664.896 cv
449.027 660.926 444.613 652.327 441.967 642.404 cv
cp
.756863 .176471 .243137 rgb
f
449.027 626.087 mo
449.027 626.087 441.088 627.41 446.38 641.963 cv
451.673 656.516 458.732 658.279 468.431 660.485 cv
478.133 662.693 484.304 656.961 487.835 650.346 cv
487.835 650.346 481.22 657.395 467.99 655.193 cv
454.76 652.991 444.617 633.581 449.027 626.087 cv
cp
.27451 .207843 .145098 rgb
f
466.226 638.438 mo
466.226 638.438 463.573 628.295 475.928 632.264 cv
488.276 636.233 487.835 643.293 483.866 645.054 cv
479.897 646.817 465.344 645.498 466.226 638.438 cv
cp
.929412 .882353 .882353 rgb
f
435.899 701.684 mo
434.494 701.684 433.605 701.622 433.605 701.622 cv
432.592 701.557 li
431.821 700.885 li
431.104 700.247 414.184 691.358 415.61 671.841 cv
416.461 660.175 427.473 646.187 438.659 646.187 cv
440.044 646.187 441.398 646.404 442.694 646.831 cv
452.355 650.056 458.157 658.9 459.935 673.123 cv
461.502 685.663 456.379 694.921 450.612 698.528 cv
446.436 701.136 440.31 701.684 435.899 701.684 cv
cp
.27451 .207843 .145098 rgb
f
434.915 694.883 mo
434.915 694.883 420.361 690.253 420.799 670.625 cv
421.068 658.646 431.821 646.373 441.743 649.681 cv
451.666 652.988 455.635 662.911 456.958 673.494 cv
458.281 684.078 454.312 692.679 449.02 695.985 cv
443.728 699.293 434.915 694.883 434.915 694.883 cv
cp
.756863 .176471 .243137 rgb
f
428.299 658.725 mo
428.299 658.725 420.354 663.575 423.445 675.924 cv
426.535 688.268 433.15 696.206 441.529 696.206 cv
449.905 696.206 453.44 691.8 456.965 682.538 cv
456.965 682.538 456.965 690.035 441.529 690.035 cv
426.091 690.035 424.768 662.693 428.299 658.725 cv
cp
.27451 .207843 .145098 rgb
f
438.442 667.985 mo
438.442 667.985 431.386 653.87 438.442 653.87 cv
445.499 653.87 452.551 663.131 451.229 668.423 cv
449.905 673.715 440.647 673.277 438.442 667.985 cv
cp
.929412 .882353 .882353 rgb
f
420.799 664.15 mo
407.986 664.15 399.456 661.105 395.438 655.117 cv
392.089 650.118 392.086 643.407 395.414 635.162 cv
396.568 629.188 401.543 618.436 412.733 618.436 cv
413.685 618.459 li
422.139 618.903 439.745 619.834 442.298 640.268 cv
443.259 647.965 441.936 653.921 438.36 657.973 cv
434.691 662.129 428.947 664.15 420.799 664.15 cv
cp
.27451 .207843 .145098 rgb
f
398.308 636.01 mo
398.308 636.01 400.954 620.794 413.522 621.457 cv
426.091 622.118 437.336 624.764 439.321 640.64 cv
441.305 656.516 432.706 661.146 420.799 661.146 cv
408.892 661.146 389.047 658.5 398.308 636.01 cv
cp
.756863 .176471 .243137 rgb
f
434.029 635.349 mo
434.029 635.349 438.659 641.301 431.383 640.64 cv
424.106 639.979 417.491 632.702 422.122 630.057 cv
426.752 627.41 434.029 635.349 434.029 635.349 cv
cp
.929412 .882353 .882353 rgb
f
400.075 637.115 mo
400.075 637.115 395.666 651.665 408.895 653.87 cv
422.125 656.078 437.995 659.604 439.321 640.64 cv
439.321 640.64 438.001 650.779 418.598 649.901 cv
399.193 649.022 400.075 637.115 400.075 637.115 cv
cp
.27451 .207843 .145098 rgb
f
435.845 636.175 mo
423.696 636.175 412.451 626.356 410.239 613.817 cv
410.029 612.615 409.778 611.365 409.522 610.088 cv
408.021 602.61 406.318 594.136 410.714 588.113 cv
413.264 584.626 417.55 582.527 423.449 581.869 cv
425.005 581.7 426.542 581.611 428.034 581.611 cv
437.767 581.611 446.16 585.163 451.066 591.348 cv
455.07 596.398 456.4 602.91 454.815 609.681 cv
454.712 610.128 li
454.474 610.531 li
454.45 610.572 451.983 614.79 452.241 618.718 cv
452.589 623.886 451.356 628.216 448.686 631.241 cv
446.07 634.201 442.198 635.851 437.182 636.14 cv
436.734 636.165 436.286 636.175 435.845 636.175 cv
cp
f
451.894 608.998 mo
451.894 608.998 448.917 613.96 449.248 618.921 cv
449.578 623.882 449.14 629.836 437.564 630.497 cv
425.988 631.158 415.297 618.811 413.312 607.565 cv
411.328 596.319 414.194 585.953 423.779 584.854 cv
441.636 582.8 455.532 593.453 451.894 608.998 cv
cp
.756863 .176471 .243137 rgb
f
426.542 599.627 mo
426.542 599.627 420.369 588.599 431.394 590.807 cv
442.418 593.012 448.148 598.304 442.856 603.596 cv
437.564 608.888 427.866 600.068 426.542 599.627 cv
cp
.929412 1 .992157 rgb
f
414.849 606.683 mo
414.849 606.683 421.254 630.941 443.3 626.973 cv
442.418 622.118 li
442.418 622.118 429.181 627.406 414.849 606.683 cv
cp
.27451 .207843 .145098 rgb
f
502.153 530.497 mo
497.482 530.497 493.665 528.175 490.805 523.596 cv
490.171 522.189 480.496 498.893 495.053 489.701 cv
501.15 485.849 506.37 483.978 511.008 483.978 cv
515.707 483.978 522.115 486.024 525.912 495.782 cv
531.477 510.094 529.398 519.605 519.738 524.067 cv
518.566 524.608 517.367 525.215 516.154 525.828 cv
511.606 528.122 506.901 530.497 502.153 530.497 cv
cp
f
493.348 522.004 mo
493.348 522.004 484.086 500.175 496.655 492.237 cv
509.224 484.298 518.483 484.96 523.114 496.867 cv
527.745 508.774 527.083 517.373 518.483 521.343 cv
509.884 525.312 499.962 532.588 493.348 522.004 cv
cp
.537255 .211765 .223529 rgb
f
494.67 496.206 mo
494.67 496.206 493.017 511.42 496.986 518.366 cv
500.955 525.312 512.199 525.312 519.807 517.373 cv
519.807 517.373 512.199 522.335 503.931 516.051 cv
495.663 509.767 494.67 496.206 494.67 496.206 cv
cp
.27451 .207843 .145098 rgb
f
507.899 499.182 mo
507.899 499.182 504.592 492.237 511.208 491.575 cv
517.822 490.914 519.146 500.505 516.83 504.805 cv
514.515 509.104 508.893 505.798 507.899 499.182 cv
cp
.929412 1 .992157 rgb
f
539.977 645.674 mo
538.57 645.674 537.682 645.611 537.682 645.611 cv
536.668 645.546 li
535.899 644.875 li
535.18 644.236 518.264 635.349 519.689 615.83 cv
520.541 604.165 531.548 590.177 542.739 590.177 cv
544.124 590.177 545.475 590.393 546.773 590.82 cv
556.431 594.046 562.235 602.89 564.015 617.111 cv
565.581 629.653 560.458 638.91 554.69 642.518 cv
550.515 645.126 544.386 645.674 539.977 645.674 cv
cp
.27451 .207843 .145098 rgb
f
538.99 638.873 mo
538.99 638.873 524.438 634.241 524.878 614.614 cv
525.147 602.635 535.899 590.363 545.822 593.67 cv
555.745 596.978 559.714 606.9 561.036 617.484 cv
562.36 628.068 558.391 636.667 553.099 639.976 cv
547.808 643.282 538.99 638.873 538.99 638.873 cv
cp
.756863 .176471 .243137 rgb
f
532.375 602.714 mo
532.375 602.714 524.43 607.565 527.523 619.913 cv
530.611 632.257 537.227 640.195 545.605 640.195 cv
553.984 640.195 557.52 635.788 561.04 626.528 cv
561.04 626.528 561.04 634.025 545.605 634.025 cv
530.17 634.025 528.848 606.683 532.375 602.714 cv
cp
.27451 .207843 .145098 rgb
f
542.518 611.976 mo
542.518 611.976 535.466 597.859 542.518 597.859 cv
549.574 597.859 556.631 607.12 555.308 612.413 cv
553.984 617.704 544.727 617.267 542.518 611.976 cv
cp
.929412 .882353 .882353 rgb
f
484.024 597.746 mo
479.545 597.746 476.507 594.024 473.823 590.744 cv
472.189 588.743 470.498 586.676 468.748 585.701 cv
467.508 585.013 li
467.252 583.616 li
467.083 582.673 463.146 560.392 471.094 549.557 cv
475.528 543.503 481.827 540.172 488.831 540.172 cv
493.361 540.172 497.988 541.546 502.204 544.144 cv
503.049 544.66 li
511.366 549.763 517.939 553.786 512.751 570.098 cv
508.237 584.299 496.166 593.525 487.197 597.111 cv
486.143 597.536 485.072 597.746 484.024 597.746 cv
cp
.27451 .207843 .145098 rgb
f
470.205 583.079 mo
470.205 583.079 466.46 565.88 473.736 555.957 cv
481.013 546.034 491.156 543.613 499.755 548.905 cv
508.354 554.197 514.524 554.635 509.895 569.188 cv
505.265 583.74 492.696 591.679 486.081 594.325 cv
479.466 596.971 476.159 586.387 470.205 583.079 cv
cp
.537255 .211765 .223529 rgb
f
478.144 545.704 mo
478.144 545.704 471.859 564.888 474.835 572.164 cv
477.813 579.441 484.097 582.418 491.373 582.087 cv
498.649 581.756 506.587 577.456 506.587 577.456 cv
506.587 577.456 494.681 595.316 482.443 597.301 cv
470.205 599.286 457.637 585.063 463.59 568.195 cv
469.544 551.327 478.144 545.704 478.144 545.704 cv
cp
.27451 .207843 .145098 rgb
f
504.271 569.188 mo
504.271 569.188 504.934 577.125 495.011 576.464 cv
485.089 575.803 483.766 567.534 489.389 565.219 cv
495.011 562.903 503.941 566.211 504.271 569.188 cv
cp
.929412 1 .992157 rgb
f
521.233 593.715 mo
513.061 593.715 507.187 588.908 506.256 581.467 cv
506.232 579.892 506.392 551.562 520.2 542.838 cv
524.106 540.371 528.51 539.064 532.94 539.064 cv
543.827 539.064 552.909 546.527 554.529 556.812 cv
556.796 571.131 545.536 581.432 535.483 588.806 cv
531.166 591.975 526.105 593.715 521.233 593.715 cv
cp
.27451 .207843 .145098 rgb
f
509.233 581.094 mo
509.233 581.094 509.233 553.312 521.802 545.374 cv
534.37 537.436 549.584 544.713 551.569 557.281 cv
553.554 569.85 543.631 579.109 533.709 586.387 cv
523.787 593.662 510.556 591.679 509.233 581.094 cv
cp
.756863 .176471 .243137 rgb
f
509.895 569.188 mo
509.895 569.188 510.887 579.771 520.809 580.764 cv
530.731 581.756 537.678 576.134 542.97 569.188 cv
548.262 562.241 547.931 557.611 547.931 557.611 cv
547.931 557.611 551.899 567.534 540.324 576.464 cv
528.747 585.394 525.439 589.363 516.179 587.378 cv
506.918 585.394 508.24 572.164 509.895 569.188 cv
cp
.27451 .207843 .145098 rgb
f
492.148 627.934 mo
487.814 627.934 474.629 627.934 470.636 614.355 cv
470.429 613.643 li
470.574 612.919 li
470.718 612.191 474.268 594.976 484.593 589.074 cv
493.092 584.216 500.189 581.856 506.298 581.856 cv
511.838 581.856 516.458 583.81 520.027 587.654 cv
529.86 598.238 529.419 604.867 524.575 616.637 cv
520.076 627.572 510.146 627.597 502.175 627.616 cv
500.382 627.623 498.591 627.623 496.875 627.747 cv
495.325 627.86 493.733 627.934 492.148 627.934 cv
cp
f
473.513 613.508 mo
473.513 613.508 476.82 596.971 486.081 591.679 cv
495.342 586.387 509.233 580.434 517.833 589.694 cv
526.433 598.955 526.433 604.247 521.802 615.493 cv
517.171 626.737 505.926 624.092 496.665 624.754 cv
487.404 625.416 476.82 624.754 473.513 613.508 cv
cp
.756863 .176471 .243137 rgb
f
476.489 601.601 mo
476.489 601.601 474.505 618.8 490.712 619.792 cv
506.918 620.785 516.179 620.785 521.141 611.523 cv
526.102 602.263 522.463 594.325 522.463 594.325 cv
522.463 594.325 519.487 605.239 514.194 610.531 cv
508.902 615.823 498.98 615.823 492.365 615.823 cv
485.75 615.823 478.805 608.878 476.489 601.601 cv
cp
.27451 .207843 .145098 rgb
f
496.334 598.294 mo
496.334 598.294 496.003 592.341 505.595 590.687 cv
515.187 589.032 517.503 595.647 513.864 598.955 cv
510.226 602.263 497.988 606.231 496.334 598.294 cv
cp
.929412 1 .992157 rgb
f
457.182 622.663 mo
452.51 622.663 448.689 620.34 445.833 615.762 cv
445.195 614.355 435.521 591.059 450.081 581.866 cv
456.18 578.015 461.399 576.145 466.033 576.145 cv
470.739 576.145 477.147 578.19 480.938 587.948 cv
486.505 602.259 484.428 611.771 474.77 616.232 cv
473.596 616.774 472.396 617.381 471.18 617.994 cv
466.632 620.288 461.933 622.663 457.182 622.663 cv
cp
.27451 .207843 .145098 rgb
f
448.375 614.169 mo
448.375 614.169 439.114 592.341 451.683 584.402 cv
464.252 576.464 473.513 577.125 478.144 589.032 cv
482.774 600.939 482.112 609.539 473.513 613.508 cv
464.913 617.478 454.991 624.754 448.375 614.169 cv
cp
.756863 .176471 .243137 rgb
f
449.699 588.371 mo
449.699 588.371 448.044 603.585 452.014 610.531 cv
455.983 617.478 467.228 617.478 474.835 609.539 cv
474.835 609.539 467.228 614.501 458.959 608.217 cv
450.691 601.932 449.699 588.371 449.699 588.371 cv
cp
.27451 .207843 .145098 rgb
f
462.929 591.348 mo
462.929 591.348 459.621 584.402 466.236 583.74 cv
472.851 583.079 474.174 592.671 471.859 596.971 cv
469.544 601.271 463.921 597.963 462.929 591.348 cv
cp
.929412 1 .992157 rgb
f
482.815 550.9 mo
481.861 550.9 480.875 550.817 479.859 550.652 cv
467.001 548.505 461.564 538.418 459.824 534.177 cv
459.873 534.155 li
459.225 532.926 459.125 531.075 459.001 528.781 cv
458.339 516.595 463.462 508.315 473.055 506.072 cv
475.363 505.528 477.63 505.257 479.787 505.257 cv
492.189 505.257 499.941 514.424 502.122 523.51 cv
503.546 529.436 501.285 537.918 496.751 543.669 cv
493.024 548.398 488.207 550.9 482.815 550.9 cv
cp
.27451 .207843 .145098 rgb
f
462.491 532.806 mo
462.491 532.806 458.191 512.629 473.736 508.991 cv
489.282 505.353 497.22 515.938 499.204 524.206 cv
501.188 532.475 494.243 550.004 480.352 547.688 cv
466.46 545.374 462.491 532.475 462.491 532.806 cv
cp
.537255 .211765 .223529 rgb
f
478.037 516.268 mo
478.037 516.268 474.398 510.645 483.659 512.629 cv
492.92 514.613 492.589 517.922 491.597 520.237 cv
490.605 522.552 482.005 520.237 478.037 516.268 cv
cp
.929412 .882353 .882353 rgb
f
466.681 512.299 mo
466.681 512.299 457.419 532.144 471.973 538.759 cv
486.525 545.374 492.7 544.057 497.991 535.675 cv
497.991 535.675 494.47 540.967 481.678 536.112 cv
468.886 531.262 463.59 521.566 471.973 509.216 cv
471.973 509.216 468.882 508.329 466.681 512.299 cv
cp
.27451 .207843 .145098 rgb
f
455.697 553.7 mo
443.555 553.7 432.31 543.881 430.098 531.345 cv
429.884 530.139 429.629 528.888 429.378 527.612 cv
427.872 520.133 426.174 511.658 430.573 505.639 cv
433.12 502.149 437.402 500.05 443.307 499.396 cv
444.861 499.224 446.394 499.138 447.89 499.138 cv
457.62 499.138 466.012 502.687 470.925 508.874 cv
474.922 513.921 476.259 520.433 474.67 527.203 cv
474.567 527.655 li
474.33 528.058 li
474.302 528.099 471.838 532.315 472.097 536.243 cv
472.441 541.411 471.214 545.743 468.542 548.764 cv
465.926 551.727 462.057 553.373 457.037 553.663 cv
456.586 553.69 456.145 553.7 455.697 553.7 cv
cp
f
471.752 526.521 mo
471.752 526.521 468.775 531.481 469.106 536.444 cv
469.437 541.404 468.996 547.358 457.419 548.02 cv
445.843 548.681 435.148 536.337 433.164 525.091 cv
431.18 513.846 434.049 503.479 443.638 502.376 cv
461.492 500.326 475.39 510.975 471.752 526.521 cv
cp
.756863 .176471 .243137 rgb
f
446.394 517.153 mo
446.394 517.153 440.227 506.125 451.25 508.329 cv
462.271 510.538 468.003 515.83 462.711 521.122 cv
457.419 526.414 447.717 517.591 446.394 517.153 cv
cp
.929412 1 .992157 rgb
f
434.708 524.206 mo
434.708 524.206 441.109 548.464 463.156 544.495 cv
462.271 539.645 li
462.271 539.645 449.037 544.929 434.708 524.206 cv
cp
.27451 .207843 .145098 rgb
f
451.79 591.427 mo
450.384 591.427 449.496 591.365 449.496 591.365 cv
448.482 591.297 li
447.714 590.624 li
446.994 589.99 430.077 581.102 431.504 561.581 cv
432.354 549.918 443.362 535.927 454.553 535.927 cv
455.938 535.927 457.289 536.144 458.588 536.574 cv
468.245 539.8 474.05 548.64 475.828 562.862 cv
477.396 575.406 472.272 584.661 466.505 588.268 cv
462.329 590.88 456.2 591.427 451.79 591.427 cv
cp
f
450.805 584.626 mo
450.805 584.626 436.251 579.995 436.692 560.368 cv
436.961 548.389 447.714 536.112 457.637 539.42 cv
467.559 542.729 471.528 552.65 472.851 563.234 cv
474.174 573.818 470.205 582.418 464.913 585.726 cv
459.621 589.032 450.805 584.626 450.805 584.626 cv
cp
.756863 .176471 .243137 rgb
f
444.189 548.464 mo
444.189 548.464 436.244 553.319 439.338 565.663 cv
442.425 578.011 449.041 585.949 457.419 585.949 cv
465.799 585.949 469.333 581.539 472.854 572.278 cv
472.854 572.278 472.854 579.778 457.419 579.778 cv
441.984 579.778 440.661 552.433 444.189 548.464 cv
cp
.27451 .207843 .145098 rgb
f
454.333 557.725 mo
454.333 557.725 447.28 543.613 454.333 543.613 cv
461.389 543.613 468.445 552.874 467.122 558.166 cv
465.799 563.458 456.541 563.017 454.333 557.725 cv
cp
.929412 .882353 .882353 rgb
f
510.182 562.997 mo
499.473 562.997 495.776 547.592 495.118 544.351 cv
491.818 537.381 489.551 522.552 503.672 513.726 cv
510.102 509.704 516.778 507.582 522.983 507.582 cv
530.977 507.582 537.863 511.121 540.975 516.815 cv
546.839 527.575 546.115 537.846 539.039 544.288 cv
537.806 545.404 536.538 546.621 535.235 547.864 cv
528.469 554.342 520.806 561.674 511.614 562.9 cv
511.125 562.966 510.642 562.997 510.182 562.997 cv
cp
.27451 .207843 .145098 rgb
f
497.988 543.389 mo
497.988 543.389 489.389 526.19 505.265 516.268 cv
521.141 506.345 534.37 510.975 538.34 518.252 cv
542.309 525.529 544.293 535.451 537.016 542.066 cv
529.739 548.681 521.141 558.604 511.219 559.927 cv
501.296 561.25 497.988 543.389 497.988 543.389 cv
cp
.756863 .176471 .243137 rgb
f
496.228 541.411 mo
496.228 541.411 500.634 548.905 507.693 548.464 cv
514.752 548.026 522.688 546.26 527.538 543.613 cv
532.39 540.967 538.122 528.182 538.122 528.182 cv
538.122 528.182 538.122 543.179 524.893 550.673 cv
511.662 558.166 501.956 556.847 498.873 551.995 cv
495.787 547.142 496.228 541.411 496.228 541.411 cv
cp
.27451 .207843 .145098 rgb
f
507.693 529.061 mo
507.693 529.061 505.926 521.122 516.071 518.035 cv
526.215 514.951 529.303 517.156 526.215 522.89 cv
523.128 528.619 512.985 537.436 507.693 529.061 cv
cp
.929412 1 .992157 rgb
f
508.161 667.489 mo
496.021 667.489 484.775 657.67 482.563 645.133 cv
482.35 643.927 482.095 642.676 481.844 641.401 cv
480.338 633.922 478.64 625.445 483.039 619.427 cv
485.585 615.938 489.868 613.839 495.773 613.185 cv
497.327 613.013 498.86 612.927 500.355 612.927 cv
510.085 612.927 518.478 616.475 523.39 622.663 cv
527.387 627.71 528.724 634.222 527.136 640.991 cv
527.031 641.442 li
526.794 641.846 li
526.767 641.888 524.304 646.104 524.562 650.032 cv
524.906 655.2 523.68 659.53 521.006 662.552 cv
518.391 665.515 514.521 667.162 509.502 667.451 cv
509.051 667.479 508.609 667.489 508.161 667.489 cv
cp
.27451 .207843 .145098 rgb
f
524.218 640.31 mo
524.218 640.31 521.239 645.271 521.571 650.231 cv
521.901 655.193 521.461 661.146 509.884 661.808 cv
498.308 662.47 487.614 650.125 485.63 638.88 cv
483.646 627.634 486.516 617.267 496.104 616.164 cv
513.957 614.114 527.855 624.764 524.218 640.31 cv
cp
.756863 .176471 .243137 rgb
f
498.86 630.941 mo
498.86 630.941 492.693 619.913 503.714 622.118 cv
514.735 624.326 520.468 629.618 515.177 634.91 cv
509.884 640.202 500.183 631.379 498.86 630.941 cv
cp
.929412 1 .992157 rgb
f
487.173 637.994 mo
487.173 637.994 493.575 662.252 515.621 658.283 cv
514.735 653.433 li
514.735 653.433 501.502 658.718 487.173 637.994 cv
cp
.27451 .207843 .145098 rgb
f
540.106 458.634 mo
539.212 457.67 li
538.509 456.905 522.025 438.758 530.136 422.538 cv
535.345 412.113 543.011 406.376 551.718 406.376 cv
555.797 406.376 559.963 407.613 564.106 410.052 cv
570.019 413.525 573.423 421.473 573.217 431.306 cv
573.059 438.965 570.378 449.236 563.335 452.987 cv
552.871 458.569 541.884 458.634 541.419 458.634 cv
540.106 458.634 li
cp
f
543.849 453.649 mo
543.849 453.649 525.543 438.435 532.82 423.881 cv
540.097 409.329 551.342 406.021 562.587 412.636 cv
573.833 419.251 571.849 445.05 561.926 450.341 cv
552.003 455.633 543.849 453.649 543.849 453.649 cv
cp
.756863 .176471 .243137 rgb
f
557.957 437.112 mo
557.957 437.112 550.681 423.22 547.373 420.574 cv
544.064 417.928 542.743 413.298 553.327 413.298 cv
563.91 413.298 568.541 419.913 565.233 431.158 cv
561.926 442.404 557.957 437.112 557.957 437.112 cv
cp
.929412 .882353 .882353 rgb
f
538.115 419.695 mo
538.115 419.695 530.625 423.224 536.793 437.777 cv
542.966 452.329 546.501 454.531 556.637 453.208 cv
566.78 451.885 565.017 445.714 565.017 445.714 cv
565.017 445.714 559.717 449.684 550.904 447.479 cv
542.084 445.27 534.594 428.071 538.115 419.695 cv
cp
.27451 .207843 .145098 rgb
f
517.182 398.242 mo
513.223 398.242 509.54 395.771 504.048 389.436 cv
495.917 380.057 494.084 365.714 499.156 351.075 cv
501.512 344.264 504.551 337.959 510.753 337.959 cv
513.978 337.959 517.378 339.647 522.163 342.572 cv
531.683 348.392 535.528 360.608 532.713 376.091 cv
530.37 388.96 521.239 397.081 520.852 397.415 cv
520.313 397.89 li
519.61 398.004 li
518.795 398.138 517.998 398.242 517.182 398.242 cv
517.182 398.242 li
cp
f
519.197 395.533 mo
519.197 395.533 528.041 387.799 530.247 375.647 cv
532.458 363.492 530.797 350.789 520.854 344.712 cv
510.911 338.634 507.321 337.845 501.522 351.895 cv
499.314 357.235 509.258 359.075 512.579 372.329 cv
515.231 382.972 504.841 394.063 519.197 395.533 cv
cp
.756863 .176471 .243137 rgb
f
515.886 369.569 mo
515.886 369.569 504.282 359.626 509.254 351.344 cv
514.226 343.055 519.197 346.373 522.515 354.655 cv
525.829 362.941 521.408 376.75 515.886 369.569 cv
cp
.929412 .882353 .882353 rgb
f
512.579 378.228 mo
512.579 378.228 514.418 384.856 519.2 384.856 cv
523.989 384.856 528.406 379.334 528.406 379.334 cv
528.406 379.334 525.829 389.27 518.835 389.642 cv
511.838 390.014 508.893 384.491 508.893 384.491 cv
508.893 384.491 511.842 376.02 512.579 378.228 cv
cp
.27451 .207843 .145098 rgb
f
481.33 384.154 mo
479.924 384.154 479.036 384.092 479.036 384.092 cv
478.022 384.026 li
477.254 383.354 li
476.534 382.717 459.618 373.828 461.044 354.311 cv
461.895 342.645 472.903 328.656 484.093 328.656 cv
485.479 328.656 486.829 328.874 488.128 329.301 cv
497.784 332.526 503.59 341.37 505.367 355.592 cv
506.936 368.133 501.813 377.391 496.045 380.998 cv
491.869 383.605 485.74 384.154 481.33 384.154 cv
cp
f
480.345 377.353 mo
480.345 377.353 465.792 372.722 466.233 353.094 cv
466.501 341.115 477.478 331.706 487.401 335.013 cv
497.323 338.32 501.067 345.38 502.391 355.964 cv
503.714 366.548 499.745 375.147 494.453 378.455 cv
489.161 381.763 480.345 377.353 480.345 377.353 cv
cp
.756863 .176471 .243137 rgb
f
474.612 338.107 mo
474.612 338.107 466.67 342.961 469.761 355.306 cv
472.851 367.654 479.466 375.592 487.842 375.592 cv
496.221 375.592 499.755 371.182 503.28 361.921 cv
503.28 361.921 503.28 369.421 487.842 369.421 cv
472.407 369.421 471.083 342.076 474.612 338.107 cv
cp
.27451 .207843 .145098 rgb
f
483.873 350.455 mo
483.873 350.455 476.82 336.339 483.873 336.339 cv
490.929 336.339 497.984 345.601 496.662 350.893 cv
495.339 356.185 486.081 355.747 483.873 350.455 cv
cp
.929412 .882353 .882353 rgb
f
459.77 368.646 mo
448.564 368.646 433.522 351.472 432.083 343.896 cv
431.962 343.282 li
432.107 342.666 li
432.647 340.34 437.719 319.885 448 317.218 cv
450.081 316.681 452.221 316.409 454.36 316.409 cv
462.354 316.409 471.693 320.495 473.926 331.967 cv
475.776 341.507 474.484 355.861 469.12 363.368 cv
466.991 366.341 464.276 368.129 461.265 368.543 cv
460.779 368.608 460.279 368.646 459.77 368.646 cv
cp
.27451 .207843 .145098 rgb
f
434.997 343.337 mo
434.997 343.337 439.903 322.386 448.748 320.099 cv
457.585 317.804 468.717 320.75 471.008 332.536 cv
473.302 344.319 470.023 361.018 460.531 362.331 cv
451.039 363.637 436.303 350.217 434.997 343.337 cv
cp
.756863 .176471 .243137 rgb
f
452.675 330.242 mo
452.675 330.242 452.018 324.681 457.909 323.368 cv
463.807 322.062 469.044 334.176 467.404 338.427 cv
465.771 342.686 454.639 343.668 452.675 330.242 cv
cp
.929412 1 .992157 rgb
f
445.802 324.681 mo
445.802 324.681 435.321 337.776 441.543 346.941 cv
445.147 351.199 li
445.147 351.199 438.267 341.049 445.802 324.681 cv
cp
.27451 .207843 .145098 rgb
f
434.26 394.259 mo
433.368 393.291 li
432.665 392.526 416.179 374.383 424.292 358.159 cv
429.502 347.737 437.168 342 445.874 342 cv
449.95 342 454.119 343.233 458.26 345.673 cv
464.172 349.146 467.58 357.094 467.373 366.931 cv
467.211 374.589 464.531 384.856 457.492 388.608 cv
447.028 394.19 436.038 394.259 435.576 394.259 cv
434.26 394.259 li
cp
f
438.001 389.27 mo
438.001 389.27 419.7 374.056 426.977 359.502 cv
434.253 344.95 445.499 341.642 456.744 348.257 cv
467.99 354.872 466.005 380.67 456.083 385.962 cv
446.16 391.254 438.001 389.27 438.001 389.27 cv
cp
.537255 .211765 .223529 rgb
f
452.114 372.732 mo
452.114 372.732 444.837 358.841 441.529 356.195 cv
438.222 353.549 436.899 348.918 447.483 348.918 cv
458.067 348.918 462.698 355.533 459.39 366.779 cv
456.083 378.024 452.114 372.732 452.114 372.732 cv
cp
.929412 .882353 .882353 rgb
f
432.272 355.316 mo
432.272 355.316 424.778 358.848 430.949 373.401 cv
437.12 387.954 440.654 390.155 450.794 388.833 cv
460.934 387.509 459.17 381.339 459.17 381.339 cv
459.17 381.339 453.875 385.308 445.058 383.1 cv
436.241 380.894 428.748 363.695 432.272 355.316 cv
cp
.27451 .207843 .145098 rgb
f
429.685 365.742 mo
422.897 365.742 416.84 360.805 412.175 351.468 cv
407.941 343.006 407.138 321.104 417.182 314.538 cv
419.559 312.98 422.132 312.195 424.83 312.195 cv
432.84 312.195 440.069 319.192 443.073 326.107 cv
443.348 326.724 li
446.243 333.384 446.346 333.859 446.057 339.509 cv
445.954 341.638 li
445.877 341.932 li
444.513 347.302 439.414 364.877 431.014 365.68 cv
430.566 365.721 430.122 365.742 429.685 365.742 cv
cp
f
442.97 341.194 mo
442.97 341.194 437.678 362.031 430.731 362.693 cv
423.786 363.354 418.494 357.401 414.856 350.124 cv
411.218 342.848 411.548 324.326 420.148 318.703 cv
428.748 313.081 437.016 319.695 440.324 327.303 cv
443.631 334.91 443.3 333.917 442.97 341.194 cv
cp
.756863 .176471 .243137 rgb
f
414.639 325.763 mo
414.639 325.763 414.201 348.253 426.546 352.223 cv
438.891 356.192 441.984 346.489 441.984 346.489 cv
441.984 346.489 442.422 356.629 431.4 357.952 cv
420.375 359.275 410.67 346.931 414.639 325.763 cv
cp
.27451 .207843 .145098 rgb
f
424.786 326.2 mo
424.786 326.2 426.983 346.052 436.244 341.638 cv
445.505 337.225 435.369 325.318 431.4 322.672 cv
427.431 320.026 424.344 321.793 424.786 326.2 cv
cp
.929412 1 .992157 rgb
f
414.89 382.445 mo
413.936 382.445 412.954 382.362 411.934 382.197 cv
399.076 380.05 393.64 369.962 391.9 365.721 cv
391.951 365.701 li
391.3 364.471 391.2 362.621 391.076 360.326 cv
390.415 348.14 395.538 339.861 405.129 337.618 cv
407.441 337.073 409.708 336.801 411.866 336.801 cv
424.269 336.801 432.021 345.969 434.198 355.054 cv
435.621 360.98 433.364 369.463 428.83 375.213 cv
425.099 379.943 420.282 382.445 414.89 382.445 cv
cp
.27451 .207843 .145098 rgb
f
394.566 364.35 mo
394.566 364.35 390.267 344.174 405.812 340.536 cv
421.357 336.898 429.295 347.482 431.28 355.75 cv
433.264 364.019 426.318 381.549 412.427 379.233 cv
398.536 376.918 394.566 364.019 394.566 364.35 cv
cp
.756863 .176471 .243137 rgb
f
410.112 347.813 mo
410.112 347.813 406.474 342.19 415.734 344.174 cv
424.996 346.159 424.665 349.466 423.672 351.781 cv
422.68 354.097 414.081 351.781 410.112 347.813 cv
cp
.929412 .882353 .882353 rgb
f
398.759 343.844 mo
398.759 343.844 386.412 361.483 404.051 370.303 cv
418.349 377.456 424.778 375.603 430.07 367.22 cv
430.07 367.22 426.546 372.512 413.753 367.658 cv
400.964 362.806 395.666 353.112 404.051 340.76 cv
404.051 340.76 400.958 339.875 398.759 343.844 cv
cp
.27451 .207843 .145098 rgb
f
474.584 429.184 mo
473.433 429.184 472.31 429.042 471.235 428.774 cv
455.118 424.75 453.816 415.823 453.75 413.577 cv
451.825 402.517 453.13 380.525 471.731 374.713 cv
475.115 373.652 478.408 373.115 481.509 373.115 cv
489.047 373.115 495.404 376.267 499.414 381.99 cv
503.696 388.109 504.627 396.236 501.905 403.737 cv
496.627 418.242 484.882 429.184 474.584 429.184 cv
cp
f
458.294 412.195 mo
458.294 412.195 451.456 384.191 472.624 377.576 cv
493.792 370.962 504.375 388.161 499.083 402.713 cv
493.792 417.267 481.282 428.298 471.962 425.866 cv
461.823 423.22 458.294 412.195 458.294 412.195 cv
cp
.756863 .176471 .243137 rgb
f
492.469 383.53 mo
492.469 383.53 501.067 399.406 487.177 398.745 cv
473.285 398.083 464.024 384.853 474.608 381.545 cv
485.192 378.238 489.823 379.561 492.469 383.53 cv
cp
.929412 .882353 .882353 rgb
f
464.686 385.515 mo
464.686 385.515 448.81 419.251 475.27 423.22 cv
475.27 423.22 457.409 415.282 464.686 385.515 cv
cp
.27451 .207843 .145098 rgb
f
442.742 426.228 mo
429.561 426.228 423.986 418.197 423.221 411.317 cv
422.949 409.374 420.589 391.344 425.199 382.479 cv
429.581 374.052 437.292 369.597 447.497 369.597 cv
448.806 369.622 li
454.264 369.824 459.704 372.722 463.363 377.383 cv
467.576 382.744 469.051 389.846 467.514 397.363 cv
463.924 414.899 454.205 426.228 442.742 426.228 cv
cp
f
426.205 410.986 mo
426.205 410.986 423.559 392.133 427.858 383.864 cv
432.158 375.595 439.766 372.288 448.696 372.619 cv
457.626 372.949 467.549 382.21 464.572 396.763 cv
461.595 411.317 453.658 423.224 442.742 423.224 cv
431.828 423.224 426.866 416.939 426.205 410.986 cv
cp
.756863 .176471 .243137 rgb
f
442.742 379.896 mo
442.742 379.896 442.081 373.611 451.012 375.265 cv
459.942 376.918 463.249 384.195 458.949 386.841 cv
454.65 389.487 443.735 386.179 442.742 379.896 cv
cp
.929412 .882353 .882353 rgb
f
437.126 374.724 mo
437.126 374.724 432.709 381.773 434.918 388.833 cv
437.126 395.892 439.766 392.801 435.355 402.063 cv
430.949 411.323 442.418 425.88 455.648 417.06 cv
455.648 417.06 449.475 426.765 438.449 423.675 cv
427.417 420.584 423.015 413.525 423.896 402.063 cv
424.771 390.6 423.015 380.016 437.126 374.724 cv
cp
.27451 .207843 .145098 rgb
f
411.803 418.166 mo
410.846 418.166 409.864 418.083 408.847 417.918 cv
395.989 415.771 390.552 405.684 388.809 401.442 cv
388.861 401.421 li
388.21 400.191 388.113 398.341 387.989 396.047 cv
387.328 383.861 392.447 375.582 402.04 373.339 cv
404.348 372.794 406.618 372.522 408.771 372.522 cv
421.174 372.522 428.926 381.69 431.111 390.775 cv
432.53 396.701 430.27 405.184 425.739 410.934 cv
422.008 415.665 417.192 418.166 411.803 418.166 cv
cp
f
391.476 400.071 mo
391.476 400.071 387.176 379.896 402.721 376.257 cv
418.267 372.619 426.205 383.203 428.189 391.472 cv
430.173 399.74 423.228 417.27 409.336 414.955 cv
395.445 412.64 391.476 399.74 391.476 400.071 cv
cp
.756863 .176471 .243137 rgb
f
407.021 383.534 mo
407.021 383.534 403.383 377.911 412.644 379.896 cv
421.905 381.88 421.574 385.188 420.582 387.502 cv
419.59 389.818 410.99 387.502 407.021 383.534 cv
cp
.929412 .882353 .882353 rgb
f
395.666 379.564 mo
395.666 379.564 383.321 397.204 400.958 406.024 cv
415.259 413.177 421.688 411.323 426.98 402.941 cv
426.98 402.941 423.455 408.233 410.666 403.378 cv
397.874 398.527 392.578 388.833 400.958 376.481 cv
400.958 376.481 397.87 375.595 395.666 379.564 cv
cp
.27451 .207843 .145098 rgb
f
516.841 425.959 mo
512.503 425.959 499.321 425.959 495.325 412.381 cv
495.118 411.668 li
495.263 410.944 li
495.408 410.218 498.959 393.001 509.285 387.099 cv
517.788 382.242 524.882 379.881 530.99 379.881 cv
536.531 379.881 541.15 381.835 544.724 385.68 cv
554.549 396.264 554.112 402.893 549.271 414.662 cv
544.768 425.597 534.843 425.622 526.866 425.642 cv
525.071 425.649 523.286 425.649 521.571 425.773 cv
520.021 425.887 518.429 425.959 516.841 425.959 cv
cp
f
498.205 411.533 mo
498.205 411.533 501.512 394.996 510.773 389.704 cv
520.034 384.412 533.926 378.458 542.525 387.719 cv
551.124 396.98 551.124 402.273 546.494 413.518 cv
541.864 424.764 530.618 422.118 521.357 422.779 cv
512.097 423.44 501.512 422.779 498.205 411.533 cv
cp
.756863 .176471 .243137 rgb
f
501.182 399.626 mo
501.182 399.626 499.197 416.826 515.403 417.818 cv
531.61 418.81 540.872 418.81 545.833 409.549 cv
550.794 400.288 547.156 392.35 547.156 392.35 cv
547.156 392.35 544.179 403.265 538.887 408.557 cv
533.596 413.849 523.673 413.849 517.058 413.849 cv
510.443 413.849 503.496 406.903 501.182 399.626 cv
cp
.27451 .207843 .145098 rgb
f
521.027 396.319 mo
521.027 396.319 520.695 390.365 530.287 388.712 cv
539.88 387.058 542.194 393.673 538.556 396.98 cv
534.918 400.288 522.68 404.257 521.027 396.319 cv
cp
.929412 1 .992157 rgb
f
469.106 463.499 mo
468.21 462.531 li
467.508 461.767 451.021 443.623 459.135 427.399 cv
464.345 416.978 472.007 411.241 480.717 411.241 cv
484.796 411.241 488.958 412.474 493.106 414.913 cv
499.018 418.386 502.422 426.334 502.215 436.171 cv
502.057 443.83 499.373 454.097 492.334 457.849 cv
481.868 463.43 470.884 463.499 470.415 463.499 cv
469.106 463.499 li
cp
.27451 .207843 .145098 rgb
f
472.848 458.51 mo
472.848 458.51 454.54 443.296 461.816 428.743 cv
469.092 414.19 480.338 410.882 491.583 417.497 cv
502.828 424.112 500.844 449.911 490.922 455.203 cv
481 460.495 472.848 458.51 472.848 458.51 cv
cp
.756863 .176471 .243137 rgb
f
486.953 441.973 mo
486.953 441.973 479.676 428.082 476.369 425.436 cv
473.062 422.79 471.738 418.159 482.323 418.159 cv
492.906 418.159 497.537 424.774 494.229 436.019 cv
490.922 447.265 486.953 441.973 486.953 441.973 cv
cp
.929412 .882353 .882353 rgb
f
467.115 424.557 mo
467.115 424.557 459.621 428.088 465.792 442.642 cv
471.962 457.194 475.497 459.396 485.637 458.073 cv
495.776 456.75 494.016 450.579 494.016 450.579 cv
494.016 450.579 488.717 454.548 479.9 452.34 cv
471.083 450.135 463.59 432.936 467.115 424.557 cv
cp
.27451 .207843 .145098 rgb
f
453.106 497.063 mo
451.701 497.063 450.812 497.001 450.812 497.001 cv
449.799 496.936 li
449.027 496.264 li
448.31 495.626 431.386 486.738 432.813 467.22 cv
433.667 455.554 444.675 441.566 455.862 441.566 cv
457.248 441.566 458.605 441.784 459.9 442.211 cv
469.561 445.436 475.363 454.279 477.141 468.502 cv
478.705 481.042 473.585 490.3 467.817 493.908 cv
463.642 496.516 457.513 497.063 453.106 497.063 cv
cp
f
452.117 490.262 mo
452.117 490.262 437.564 485.632 438.001 466.004 cv
438.27 454.024 449.248 444.615 459.17 447.923 cv
469.092 451.23 472.841 458.29 474.164 468.874 cv
475.487 479.458 471.518 488.058 466.226 491.365 cv
460.934 494.672 452.117 490.262 452.117 490.262 cv
cp
.756863 .176471 .243137 rgb
f
446.387 451.017 mo
446.387 451.017 438.442 455.871 441.533 468.216 cv
444.623 480.564 451.239 488.502 459.618 488.502 cv
467.993 488.502 471.528 484.092 475.053 474.831 cv
475.053 474.831 475.053 482.332 459.618 482.332 cv
444.179 482.332 442.856 454.986 446.387 451.017 cv
cp
.27451 .207843 .145098 rgb
f
455.648 463.365 mo
455.648 463.365 448.593 449.25 455.648 449.25 cv
462.702 449.25 469.754 458.51 468.431 463.802 cv
467.108 469.094 457.854 468.657 455.648 463.365 cv
cp
.929412 .882353 .882353 rgb
f
427.58 481.111 mo
416.375 481.111 398.87 471.162 399.917 455.131 cv
400.958 439.1 405.526 432.35 415.807 429.684 cv
417.888 429.146 420.031 428.874 422.167 428.874 cv
430.164 428.874 439.503 432.96 441.736 444.433 cv
443.583 453.973 442.294 468.326 436.927 475.833 cv
434.797 478.807 432.086 480.595 429.071 481.008 cv
428.589 481.074 428.086 481.111 427.58 481.111 cv
cp
.27451 .207843 .145098 rgb
f
416.558 432.564 mo
425.364 430.145 436.527 433.215 438.814 445.001 cv
441.109 456.784 437.626 472.423 428.341 474.796 cv
404.051 480.998 394.342 438.662 416.558 432.564 cv
cp
.756863 .176471 .243137 rgb
f
420.485 442.707 mo
420.485 442.707 419.828 437.146 425.719 435.833 cv
431.614 434.528 436.851 446.641 435.21 450.893 cv
433.578 455.151 422.449 456.133 420.485 442.707 cv
cp
.929412 1 .992157 rgb
f
413.609 437.146 mo
413.609 437.146 403.128 450.242 409.35 459.406 cv
412.954 463.665 li
412.954 463.665 406.077 453.515 413.609 437.146 cv
cp
.27451 .207843 .145098 rgb
f
527.58 473.88 mo
515.436 473.88 504.188 464.061 501.978 451.523 cv
501.768 450.321 501.512 449.07 501.257 447.792 cv
499.755 440.316 498.053 431.84 502.453 425.818 cv
504.999 422.331 509.285 420.233 515.187 419.575 cv
516.74 419.406 518.277 419.316 519.771 419.316 cv
529.502 419.316 537.895 422.869 542.805 429.053 cv
546.805 434.104 548.138 440.616 546.55 447.385 cv
546.446 447.833 li
546.212 448.236 li
546.185 448.278 543.717 452.495 543.979 456.423 cv
544.323 461.591 543.094 465.921 540.424 468.946 cv
537.806 471.906 533.937 473.556 528.916 473.846 cv
528.469 473.87 528.023 473.88 527.58 473.88 cv
cp
f
543.631 446.703 mo
543.631 446.703 540.654 451.665 540.985 456.625 cv
541.315 461.587 540.878 467.541 529.303 468.202 cv
517.726 468.864 507.031 456.515 505.047 445.27 cv
503.063 434.024 505.929 423.657 515.518 422.559 cv
533.375 420.505 547.27 431.158 543.631 446.703 cv
cp
.756863 .176471 .243137 rgb
f
518.277 437.332 mo
518.277 437.332 512.106 426.304 523.128 428.512 cv
534.153 430.717 539.887 436.009 534.594 441.301 cv
529.303 446.593 519.6 437.773 518.277 437.332 cv
cp
.929412 1 .992157 rgb
f
506.587 444.388 mo
506.587 444.388 512.992 468.646 535.035 464.677 cv
534.153 459.823 li
534.153 459.823 520.916 465.111 506.587 444.388 cv
cp
.27451 .207843 .145098 rgb
f
377.591 494.211 mo
377.591 494.211 396.547 521.99 379.79 536.103 cv
379.79 536.103 378.467 533.463 380.675 529.932 cv
382.883 526.403 382.436 526.841 383.321 520.227 cv
384.207 513.611 384.207 506.118 377.591 494.211 cv
cp
f
385.529 449.669 mo
385.529 449.669 381.119 463.344 384.207 477.012 cv
384.207 477.012 378.915 467.306 385.529 449.669 cv
cp
f
557.182 493.091 mo
555.775 493.091 554.888 493.029 554.888 493.029 cv
553.874 492.96 li
553.103 492.288 li
552.387 491.654 535.466 482.765 536.892 463.244 cv
537.744 451.582 548.755 437.59 559.941 437.59 cv
561.326 437.59 562.68 437.808 563.976 438.238 cv
573.637 441.463 579.438 450.304 581.216 464.526 cv
582.784 477.07 577.66 486.324 571.893 489.932 cv
567.718 492.543 561.592 493.091 557.182 493.091 cv
cp
f
556.196 486.29 mo
556.196 486.29 541.644 481.66 542.08 462.031 cv
542.35 450.052 553.327 440.64 563.249 443.947 cv
573.172 447.255 576.917 454.314 578.239 464.898 cv
579.563 475.482 575.593 484.082 570.302 487.389 cv
565.009 490.696 556.196 486.29 556.196 486.29 cv
cp
.756863 .176471 .243137 rgb
f
550.463 447.044 mo
550.463 447.044 542.518 451.896 545.611 464.244 cv
548.699 476.588 555.314 484.526 563.693 484.526 cv
572.072 484.526 575.607 480.119 579.128 470.858 cv
579.128 470.858 579.128 478.355 563.693 478.355 cv
548.258 478.355 546.936 451.013 550.463 447.044 cv
cp
.27451 .207843 .145098 rgb
f
559.725 459.389 mo
559.725 459.389 552.668 445.277 559.725 445.277 cv
566.78 445.277 573.833 454.538 572.51 459.83 cv
571.187 465.122 561.93 464.681 559.725 459.389 cv
cp
.929412 .882353 .882353 rgb
f
514.897 496.102 mo
503.693 496.102 486.188 486.156 487.235 470.125 cv
488.276 454.094 492.844 447.344 503.124 444.677 cv
505.206 444.14 507.349 443.864 509.485 443.864 cv
517.481 443.864 526.821 447.954 529.054 459.427 cv
530.9 468.967 529.612 483.317 524.244 490.828 cv
522.115 493.797 519.403 495.585 516.389 495.999 cv
515.906 496.068 515.403 496.102 514.897 496.102 cv
cp
.27451 .207843 .145098 rgb
f
503.876 447.555 mo
512.683 445.136 523.845 448.205 526.133 459.996 cv
528.428 471.778 524.943 487.417 515.658 489.787 cv
491.37 495.988 481.661 453.652 503.876 447.555 cv
cp
.756863 .176471 .243137 rgb
f
507.803 457.701 mo
507.803 457.701 507.146 452.14 513.037 450.828 cv
518.932 449.518 524.168 461.632 522.528 465.887 cv
520.896 470.146 509.768 471.127 507.803 457.701 cv
cp
.929412 1 .992157 rgb
f
500.926 452.14 mo
500.926 452.14 490.446 465.236 496.668 474.396 cv
500.272 478.655 li
500.272 478.655 493.396 468.505 500.926 452.14 cv
cp
.27451 .207843 .145098 rgb
f
528.627 514.218 mo
527.734 513.25 li
527.031 512.485 510.546 494.342 518.659 478.118 cv
523.869 467.695 531.535 461.959 540.241 461.959 cv
544.317 461.959 548.485 463.192 552.627 465.632 cv
558.539 469.105 561.947 477.053 561.739 486.89 cv
561.578 494.548 558.897 504.815 551.859 508.566 cv
541.395 514.148 530.405 514.218 529.942 514.218 cv
528.627 514.218 li
cp
f
532.368 509.229 mo
532.368 509.229 514.066 494.014 521.344 479.461 cv
528.62 464.909 539.865 461.601 551.111 468.216 cv
562.356 474.831 560.372 500.629 550.449 505.921 cv
540.527 511.213 532.368 509.229 532.368 509.229 cv
cp
.756863 .176471 .243137 rgb
f
546.48 492.691 mo
546.48 492.691 539.204 478.8 535.896 476.154 cv
532.589 473.508 531.267 468.877 541.85 468.877 cv
552.434 468.877 557.064 475.492 553.758 486.738 cv
550.449 497.983 546.48 492.691 546.48 492.691 cv
cp
.929412 .882353 .882353 rgb
f
526.639 475.275 mo
526.639 475.275 519.146 478.807 525.316 493.359 cv
531.486 507.913 535.021 510.113 545.161 508.792 cv
555.301 507.468 553.536 501.298 553.536 501.298 cv
553.536 501.298 548.241 505.267 539.424 503.058 cv
530.607 500.854 523.114 483.654 526.639 475.275 cv
cp
.27451 .207843 .145098 rgb
f
536.007 559.675 mo
534.601 559.675 533.712 559.613 533.712 559.613 cv
532.699 559.544 li
531.931 558.872 li
531.211 558.238 514.295 549.35 515.721 529.828 cv
516.571 518.166 527.58 504.174 538.771 504.174 cv
540.155 504.174 541.506 504.392 542.805 504.822 cv
552.462 508.047 558.267 516.889 560.045 531.11 cv
561.612 543.654 556.489 552.908 550.722 556.516 cv
546.546 559.127 540.417 559.675 536.007 559.675 cv
cp
f
535.021 552.874 mo
535.021 552.874 520.468 548.244 520.909 528.615 cv
521.178 516.636 531.931 504.36 541.854 507.669 cv
551.776 510.975 555.745 520.897 557.067 531.481 cv
558.391 542.066 554.422 550.666 549.13 553.973 cv
543.838 557.281 535.021 552.874 535.021 552.874 cv
cp
.756863 .176471 .243137 rgb
f
528.406 516.713 mo
528.406 516.713 520.461 521.566 523.556 533.911 cv
526.643 546.26 533.258 554.197 541.637 554.197 cv
550.015 554.197 553.55 549.787 557.071 540.525 cv
557.071 540.525 557.071 548.026 541.637 548.026 cv
526.202 548.026 524.878 520.682 528.406 516.713 cv
cp
.27451 .207843 .145098 rgb
f
538.549 525.973 mo
538.549 525.973 531.496 511.861 538.549 511.861 cv
545.605 511.861 552.661 521.122 551.339 526.414 cv
550.015 531.707 540.759 531.266 538.549 525.973 cv
cp
.929412 .882353 .882353 rgb
f
585.295 620.42 mo
581.543 622.583 570.115 629.167 559.88 619.399 cv
559.342 618.89 li
559.104 618.187 li
558.866 617.484 553.347 600.795 559.342 590.528 cv
564.282 582.073 569.247 576.485 574.539 573.432 cv
579.343 570.665 584.317 570.053 589.337 571.596 cv
603.135 575.854 606.063 581.818 607.745 594.436 cv
609.31 606.155 600.724 611.138 593.822 615.138 cv
592.271 616.037 590.722 616.929 589.299 617.897 cv
588.014 618.77 586.671 619.627 585.295 620.42 cv
cp
.27451 .207843 .145098 rgb
f
561.947 617.229 mo
561.947 617.229 556.551 601.249 561.93 592.04 cv
567.311 582.831 576.375 570.734 588.448 574.466 cv
600.524 578.19 603.166 582.776 604.775 594.831 cv
606.381 606.883 595.311 610.211 587.621 615.41 cv
579.932 620.609 570.425 625.322 561.947 617.229 cv
cp
.756863 .176471 .243137 rgb
f
558.577 605.426 mo
558.577 605.426 565.45 621.318 579.989 614.083 cv
594.525 606.848 602.546 602.222 602.215 591.72 cv
601.896 581.219 594.773 576.161 594.773 576.161 cv
594.773 576.161 597.646 587.106 595.704 594.331 cv
593.76 601.561 585.164 606.518 579.436 609.818 cv
573.705 613.122 564.22 610.572 558.577 605.426 cv
cp
.27451 .207843 .145098 rgb
f
574.119 592.65 mo
574.119 592.65 570.859 587.658 578.342 581.436 cv
585.826 575.21 591.136 579.782 589.636 584.471 cv
588.138 589.153 579.519 598.704 574.119 592.65 cv
cp
.929412 1 .992157 rgb
f
552.875 606.342 mo
548.203 606.342 544.386 604.02 541.526 599.44 cv
540.892 598.035 531.218 574.738 545.777 565.546 cv
551.876 561.694 557.092 559.823 561.729 559.823 cv
566.432 559.823 572.84 561.87 576.634 571.627 cv
582.201 585.938 580.121 595.451 570.464 599.913 cv
569.288 600.454 568.09 601.061 566.877 601.673 cv
562.328 603.969 557.626 606.342 552.875 606.342 cv
cp
.27451 .207843 .145098 rgb
f
544.068 597.85 mo
544.068 597.85 534.809 576.02 547.377 568.081 cv
559.945 560.144 569.206 560.806 573.837 572.712 cv
578.467 584.618 577.805 593.219 569.206 597.188 cv
560.605 601.156 550.684 608.434 544.068 597.85 cv
cp
.756863 .176471 .243137 rgb
f
545.392 572.05 mo
545.392 572.05 543.738 587.265 547.707 594.211 cv
551.676 601.156 562.922 601.156 570.528 593.219 cv
570.528 593.219 562.922 598.18 554.653 591.896 cv
546.384 585.611 545.392 572.05 545.392 572.05 cv
cp
.27451 .207843 .145098 rgb
f
558.621 575.028 mo
558.621 575.028 555.314 568.081 561.93 567.42 cv
568.544 566.759 569.868 576.35 567.552 580.65 cv
565.236 584.95 559.614 581.643 558.621 575.028 cv
cp
.929412 1 .992157 rgb
f
599.673 566.332 mo
598.719 566.332 597.732 566.249 596.717 566.083 cv
583.858 563.938 578.422 553.849 576.682 549.608 cv
576.73 549.587 li
576.082 548.356 575.983 546.508 575.858 544.213 cv
575.197 532.026 580.32 523.747 589.912 521.504 cv
592.22 520.96 594.487 520.688 596.645 520.688 cv
609.048 520.688 616.8 529.855 618.98 538.941 cv
620.403 544.867 618.143 553.35 613.609 559.1 cv
609.881 563.831 605.064 566.332 599.673 566.332 cv
cp
.27451 .207843 .145098 rgb
f
579.35 548.237 mo
579.35 548.237 575.049 528.061 590.594 524.422 cv
606.14 520.784 614.077 531.368 616.063 539.637 cv
618.047 547.906 611.101 565.436 597.209 563.12 cv
583.317 560.806 579.35 547.906 579.35 548.237 cv
cp
.537255 .211765 .223529 rgb
f
594.894 531.699 mo
594.894 531.699 591.256 526.076 600.517 528.061 cv
609.778 530.046 609.446 533.353 608.455 535.669 cv
607.462 537.983 598.863 535.669 594.894 531.699 cv
cp
.929412 .882353 .882353 rgb
f
583.538 527.73 mo
583.538 527.73 574.277 547.575 588.83 554.19 cv
603.383 560.806 609.558 559.489 614.85 551.106 cv
614.85 551.106 611.328 556.398 598.536 551.544 cv
585.743 546.693 580.448 536.998 588.83 524.646 cv
588.83 524.646 585.74 523.762 583.538 527.73 cv
cp
.27451 .207843 .145098 rgb
f
578.295 535.172 mo
566.146 535.172 554.9 525.354 552.688 512.815 cv
552.479 511.613 552.228 510.362 551.973 509.084 cv
550.471 501.607 548.769 493.132 553.165 487.11 cv
555.714 483.624 559.999 481.525 565.898 480.867 cv
567.456 480.698 568.992 480.609 570.483 480.609 cv
580.217 480.609 588.609 484.161 593.516 490.345 cv
597.52 495.396 598.849 501.907 597.265 508.678 cv
597.161 509.126 li
596.923 509.528 li
596.899 509.57 594.433 513.787 594.69 517.715 cv
595.039 522.883 593.806 527.214 591.136 530.239 cv
588.52 533.197 584.647 534.848 579.632 535.138 cv
579.184 535.162 578.736 535.172 578.295 535.172 cv
cp
f
594.343 507.995 mo
594.343 507.995 591.366 512.956 591.696 517.918 cv
592.027 522.879 591.59 528.833 580.014 529.493 cv
568.437 530.156 557.747 517.808 555.762 506.563 cv
553.777 495.317 556.644 484.95 566.229 483.851 cv
584.087 481.797 597.98 492.45 594.343 507.995 cv
cp
.756863 .176471 .243137 rgb
f
568.992 498.624 mo
568.992 498.624 562.818 487.596 573.843 489.804 cv
584.868 492.009 590.598 497.301 585.306 502.594 cv
580.014 507.885 570.315 499.065 568.992 498.624 cv
cp
.929412 1 .992157 rgb
f
557.3 505.681 mo
557.3 505.681 563.703 529.938 585.75 525.969 cv
584.868 521.115 li
584.868 521.115 571.631 526.403 557.3 505.681 cv
cp
.27451 .207843 .145098 rgb
f
571.301 576.866 mo
569.895 576.866 569.007 576.805 569.007 576.805 cv
567.993 576.74 li
567.222 576.067 li
566.505 575.431 549.584 566.541 551.012 547.024 cv
551.862 535.357 562.873 521.371 574.061 521.371 cv
575.445 521.371 576.799 521.587 578.095 522.014 cv
587.755 525.239 593.558 534.083 595.335 548.306 cv
596.903 560.846 591.779 570.104 586.012 573.711 cv
581.837 576.32 575.711 576.866 571.301 576.866 cv
cp
f
570.315 570.065 mo
570.315 570.065 555.762 565.436 556.2 545.808 cv
556.468 533.828 567.222 521.557 577.144 524.863 cv
587.066 528.172 591.035 538.094 592.358 548.678 cv
593.681 559.262 589.712 567.861 584.421 571.169 cv
579.128 574.476 570.315 570.065 570.315 570.065 cv
cp
.756863 .176471 .243137 rgb
f
563.699 533.907 mo
563.699 533.907 555.755 538.759 558.847 551.106 cv
561.937 563.451 568.551 571.39 576.931 571.39 cv
585.306 571.39 588.841 566.982 592.365 557.722 cv
592.365 557.722 592.365 565.219 576.931 565.219 cv
561.492 565.219 560.168 537.877 563.699 533.907 cv
cp
.27451 .207843 .145098 rgb
f
573.843 543.169 mo
573.843 543.169 566.787 529.054 573.843 529.054 cv
580.899 529.054 587.952 538.314 586.629 543.606 cv
585.306 548.898 576.048 548.46 573.843 543.169 cv
cp
.929412 .882353 .882353 rgb
f
gsave
218.383 446.6 mo
218.383 446.6 179.579 467.768 181.339 549.795 cv
180.898 590.807 li
180.898 590.807 198.986 550.673 211.769 539.21 cv
224.558 527.747 227.645 523.779 227.645 523.779 cv
227.645 523.779 209.57 476.584 218.383 446.6 cv
cp
clp
220.147 436.454 mo
220.147 436.454 201.625 477.467 232.055 543.617 cv
232.055 543.617 194.68 488.712 220.147 436.454 cv
cp
.929412 1 .992157 rgb
f
212.54 437.777 mo
212.54 437.777 190.049 490.696 227.093 550.231 cv
227.093 550.231 183.104 498.966 212.54 437.777 cv
cp
f
204.382 443.73 mo
204.382 443.73 182.663 495.11 219.706 554.645 cv
219.706 554.645 174.504 503.266 204.382 443.73 cv
cp
f
196.002 452.109 mo
196.002 452.109 174.287 503.488 211.331 563.023 cv
211.331 563.023 166.125 511.644 196.002 452.109 cv
cp
f
187.624 456.522 mo
187.624 456.522 165.912 507.902 202.955 567.438 cv
202.955 567.438 157.75 516.057 187.624 456.522 cv
cp
f
grestore
284.313 380.888 mo
284.313 380.888 309.45 377.58 312.096 386.841 cv
314.411 394.952 315.713 397.477 326.649 397.983 cv
328.21 398.055 329.963 398.086 331.941 398.086 cv
347.817 398.086 355.755 406.686 356.417 411.978 cv
357.078 417.27 357.739 407.348 343.848 404.702 cv
329.956 402.056 346.494 398.748 330.618 400.732 cv
314.742 402.717 310.111 398.086 308.788 390.149 cv
307.465 382.21 284.313 380.888 284.313 380.888 cv
cp
.27451 .207843 .145098 rgb
f
388.83 318.707 mo
388.83 318.707 377.584 327.306 376.261 339.213 cv
374.938 351.12 389.492 355.75 375.6 361.704 cv
361.708 367.658 364.354 391.472 364.354 391.472 cv
364.354 391.472 360.385 372.288 364.354 368.319 cv
368.324 364.35 371.631 358.396 374.938 356.412 cv
378.246 354.427 376.923 350.458 375.6 347.813 cv
374.277 345.167 369.646 330.613 388.83 318.707 cv
cp
f
588.603 440.422 mo
588.603 440.422 593.233 459.606 590.587 466.221 cv
587.941 472.836 605.14 481.436 605.14 495.327 cv
605.14 509.219 608.007 508.781 613.961 512.75 cv
619.914 516.72 630.718 525.979 627.631 552.885 cv
627.631 552.885 634.246 528.182 623.662 517.156 cv
613.078 506.135 608.668 508.337 607.345 498.197 cv
606.022 488.058 606.471 486.734 600.73 480.557 cv
594.997 474.383 598.519 473.504 594.997 469.536 cv
591.47 465.566 595.438 450.125 588.603 440.422 cv
cp
f
457.626 699.069 mo
457.626 699.069 514.515 697.746 533.699 664.671 cv
533.699 664.671 516.499 688.485 457.626 699.069 cv
cp
f
470.856 687.823 mo
470.856 687.823 503.021 684.909 521.006 662.552 cv
521.006 662.552 513.192 687.162 470.856 687.823 cv
cp
f
635.71 727.203 mo
547.765 701.908 488.34 658.104 459.089 597.02 cv
428.295 532.723 443.771 413.301 478.232 367.665 cv
522.118 309.545 581.853 290.666 624.237 285.07 cv
634.207 283.75 644.909 283.085 656.03 283.085 cv
690.421 283.085 717.832 289.318 718.979 289.587 cv
722.001 290.424 787.387 309.132 844.22 359.748 cv
904.733 413.639 914.057 461.549 910.608 536.491 cv
906.897 617.167 864.038 671.604 807.9 709.291 cv
780.296 727.824 734.019 736.431 698.663 736.431 cv
698.663 736.431 668.064 736.513 635.71 727.203 cv
cp
f
717.633 295.43 mo
717.633 295.43 671.766 284.843 625.022 291.017 cv
578.277 297.194 522.883 318.49 483.021 371.282 cv
450.387 414.5 434.511 531.804 464.499 594.428 cv
499.589 667.707 572.978 702.914 637.368 721.437 cv
701.757 739.958 768.782 727.169 804.065 704.678 cv
855.301 672.017 901.082 612.95 904.613 536.217 cv
908.145 459.482 896.679 414.5 840.23 364.226 cv
783.783 313.952 717.633 295.43 717.633 295.43 cv
cp
.729412 .117647 .247059 rgb
f
775.61 356.13 mo
769.078 356.13 764.413 353.622 761.733 348.67 cv
759.06 343.716 748.799 341.081 742.422 341.081 cv
740.729 341.081 739.655 341.27 739.249 341.432 cv
738.276 341.818 737.464 342.51 736.809 343.069 cv
735.973 343.778 735.107 344.516 733.781 344.516 cv
732.399 344.516 li
731.358 343.399 li
730.132 341.973 730.359 340.516 731.2 335.1 cv
732.023 329.846 720.892 320.412 715.545 315.881 cv
711.093 312.109 709.529 310.724 709.033 309.094 cv
707.982 305.673 706.917 290.486 710.504 273.208 cv
713.788 257.384 711.89 250 711.872 249.928 cv
710.425 244.536 li
715.714 246.279 li
734.452 252.525 740.871 267.399 743.024 275.709 cv
743.665 278.176 744.809 281.132 745.891 283.668 cv
751.259 274.094 759.559 267.782 769.356 266.021 cv
774.959 265.012 781.006 263.396 785.416 262.217 cv
789.825 261.039 794.249 260.557 794.249 260.557 cv
794.249 260.557 796.427 266.148 796.771 268.091 cv
798.149 275.74 800.45 288.536 799.775 295.286 cv
799.403 298.996 798.463 302.538 797.45 305.473 cv
804.413 303.044 812.082 302.634 819.031 302.634 cv
822.315 302.634 825.63 302.738 828.917 302.838 cv
831.252 302.91 833.581 302.982 835.858 303.017 cv
852.345 303.251 860.352 311.296 860.682 311.637 cv
862.438 313.446 li
860.964 315.489 li
860.827 315.675 857.561 320.13 850.759 323.286 cv
847.534 324.785 845.157 325.318 842.4 325.932 cv
839.452 326.593 835.775 327.417 829.364 329.777 cv
817.63 334.097 805.295 347.386 805.171 347.513 cv
804.723 348.005 li
804.106 348.257 li
802.655 348.857 789.761 354.138 784.52 355.054 cv
783.559 355.224 li
781.46 355.606 778.594 356.13 775.61 356.13 cv
775.61 356.13 li
cp
.27451 .207843 .145098 rgb
f
802.966 345.483 mo
802.966 345.483 815.755 331.592 828.323 326.962 cv
840.892 322.332 843.321 323.437 849.492 320.567 cv
855.662 317.701 858.532 313.732 858.532 313.732 cv
858.532 313.732 851.249 306.238 835.816 306.014 cv
820.386 305.794 803.18 303.81 791.496 311.747 cv
791.496 311.747 795.903 303.802 796.789 294.986 cv
797.674 286.169 792.82 264.563 793.043 263.678 cv
793.264 262.796 780.912 266.986 769.891 268.97 cv
758.866 270.955 750.26 279.337 745.853 290.8 cv
745.853 290.8 741.667 282.417 740.123 276.464 cv
738.576 270.51 733.284 255.303 714.763 249.125 cv
714.763 249.125 716.964 256.836 713.439 273.818 cv
709.915 290.8 711.021 305.349 711.899 308.216 cv
712.778 311.086 735.714 325.639 734.171 335.561 cv
732.623 345.483 733.729 340.409 738.139 338.645 cv
742.546 336.884 759.962 339.086 764.375 347.245 cv
768.789 355.406 778.932 352.98 784.003 352.099 cv
789.075 351.213 802.966 345.483 802.966 345.483 cv
cp
.909804 .580392 .380392 rgb
f
734.391 339.975 mo
734.391 339.975 734.824 318.366 723.361 311.75 cv
711.899 305.136 712.334 293.225 719.394 296.753 cv
726.453 300.285 724.686 291.468 726.894 297.198 cv
729.099 302.931 729.978 307.782 729.978 307.782 cv
729.978 307.782 729.978 288.371 729.539 286.169 cv
729.099 283.968 733.946 288.815 733.509 299.399 cv
733.067 309.983 739.683 295.438 739.683 299.844 cv
739.683 304.253 742.773 295.871 743.651 299.399 cv
744.53 302.931 749.377 294.552 749.822 298.521 cv
750.267 302.49 752.023 300.722 753.791 297.639 cv
755.559 294.552 762.614 287.055 762.614 287.055 cv
757.322 300.285 li
757.322 300.285 761.295 295.438 760.851 299.844 cv
760.406 304.253 764.819 298.076 767.906 302.931 cv
770.99 307.782 777.171 307.344 779.373 308.667 cv
781.574 309.99 787.304 309.101 785.543 313.515 cv
783.783 317.928 788.188 316.605 788.188 318.366 cv
788.188 320.13 790.835 318.807 796.127 317.042 cv
801.419 315.282 810.242 315.282 810.242 315.282 cv
792.603 320.574 li
792.603 320.574 804.51 318.362 800.54 321.453 cv
796.572 324.543 807.148 320.574 802.742 324.543 cv
798.336 328.512 809.361 325.859 805.833 329.391 cv
802.304 332.919 812.447 331.158 807.155 334.242 cv
801.864 337.329 808.034 336.006 801.419 339.975 cv
794.805 343.944 800.097 343.944 794.367 346.149 cv
788.634 348.357 793.037 351.881 786.866 352.764 cv
780.695 353.649 769.667 350.986 764.375 347.245 cv
759.083 343.502 746.742 329.391 734.391 339.975 cv
cp
.27451 .207843 .145098 rgb
f
677.28 334.9 mo
677.28 334.9 687.424 339.751 697.126 330.269 cv
706.824 320.784 707.71 307.117 707.71 307.117 cv
707.71 307.117 707.249 316.268 699.973 317.808 cv
692.695 319.348 683.234 317.701 683.234 317.701 cv
683.234 317.701 688.74 322.332 694.918 322.332 cv
694.918 322.332 690.07 322.993 682.573 320.347 cv
675.073 317.701 668.457 315.055 668.457 315.055 cv
668.457 315.055 678.163 320.564 684.777 322.107 cv
691.394 323.654 692.495 323.431 692.495 323.431 cv
692.495 323.431 688.079 324.533 677.719 320.784 cv
677.719 320.784 685.881 324.76 690.511 325.198 cv
695.142 325.639 693.595 326.738 690.287 326.738 cv
686.979 326.738 692.499 328.285 688.086 327.624 cv
683.672 326.962 676.62 324.315 676.62 324.315 cv
676.62 324.315 680.81 328.729 690.731 329.167 cv
690.731 329.167 694.479 330.269 687.203 330.269 cv
679.927 330.269 687.642 331.375 683.01 331.813 cv
678.38 332.254 670.441 330.707 670.441 330.707 cv
670.441 330.707 677.722 334.014 685.439 333.353 cv
685.439 333.353 685.881 336.223 677.28 334.9 cv
cp
f
799.435 355.634 mo
799.435 355.634 787.751 368.864 794.367 384.739 cv
794.367 384.739 798.111 389.591 804.289 392.678 cv
804.289 392.678 801.644 390.252 800.981 388.047 cv
800.32 385.838 800.097 385.184 798.111 384.078 cv
796.127 382.972 796.131 380.103 797.895 382.311 cv
799.658 384.516 800.757 384.516 802.966 385.838 cv
805.171 387.162 808.695 388.708 808.695 388.708 cv
808.695 388.708 803.849 385.835 801.644 382.311 cv
799.435 378.786 804.065 384.071 800.981 378.341 cv
797.895 372.609 799.658 375.695 798.336 371.727 cv
797.013 367.758 795.241 367.324 799.435 355.634 cv
cp
f
793.043 349.891 mo
791.972 350.6 li
785.105 355.182 li
785.105 355.182 786.204 355.406 795.689 356.068 cv
805.171 356.729 813.103 358.052 822.587 363.344 cv
832.072 368.636 851.786 377.453 855.755 369.735 cv
850.594 367.534 li
850.594 367.534 836.479 358.935 821.264 353.643 cv
806.049 348.35 793.043 349.891 793.043 349.891 cv
cp
f
850.504 370.531 mo
850.16 370.521 841.884 370.238 834.656 365.653 cv
828.441 361.715 823.817 360.02 811.093 357.001 cv
808.148 356.306 804.892 355.947 801.416 355.947 cv
792.954 355.947 786.05 358.032 785.98 358.052 cv
776.059 357.391 li
782.556 353.601 li
787.689 345.339 799.535 337.008 814.433 337.008 cv
815.755 337.008 817.105 337.07 818.474 337.205 cv
830.708 338.414 840.034 345.032 846.197 356.888 cv
848.762 361.814 852.561 365.267 852.6 365.301 cv
858.656 370.765 li
850.504 370.531 li
cp
f
785.105 355.182 mo
785.105 355.182 798.776 350.996 811.786 354.083 cv
824.795 357.167 829.646 358.931 836.262 363.12 cv
842.876 367.313 850.594 367.534 850.594 367.534 cv
850.594 367.534 846.404 363.789 843.538 358.272 cv
840.672 352.76 833.832 341.735 818.181 340.192 cv
802.524 338.645 790.174 347.024 785.105 355.182 cv
cp
.858824 .458824 .270588 rgb
f
732.896 342.837 mo
732.896 342.837 738.222 340.967 742.321 343.83 cv
746.429 346.693 749.491 351.441 749.264 357.611 cv
749.033 363.782 755.876 373.487 755.876 373.487 cv
755.876 373.487 763.631 371.503 771.838 363.344 cv
780.048 355.182 787.117 355.406 787.117 355.406 cv
787.117 355.406 786.663 349.673 778.226 353.643 cv
769.787 357.611 765.226 361.797 761.581 363.344 cv
757.926 364.888 757.701 360.919 753.602 350.996 cv
749.491 341.074 741.571 327.624 732.896 342.837 cv
cp
.27451 .207843 .145098 rgb
f
740.826 337.322 mo
740.826 337.322 745.167 333.797 752.23 335.561 cv
759.293 337.322 761.127 340.629 769.787 342.614 cv
778.449 344.599 789.171 351.22 787.8 354.965 cv
787.8 354.965 786.325 352.264 779.362 355.406 cv
772.406 358.548 758.384 367.534 758.384 367.534 cv
758.384 367.534 751.311 339.968 740.826 337.322 cv
cp
.764706 .486275 .329412 rgb
f
788.296 348.792 mo
788.296 348.792 804.502 341.515 815.417 345.814 cv
826.333 350.114 828.316 353.091 828.316 353.091 cv
828.316 353.091 812.771 340.192 787.304 350.445 cv
788.296 348.792 li
cp
.27451 .207843 .145098 rgb
f
797.888 324.315 mo
797.888 324.315 804.502 321.669 811.118 319.354 cv
817.732 317.039 823.355 315.716 826.663 315.716 cv
829.971 315.716 841.547 314.063 841.547 314.063 cv
841.547 314.063 823.024 311.086 798.218 320.677 cv
798.218 320.677 791.934 323.985 797.888 324.315 cv
cp
f
773.743 309.763 mo
773.743 309.763 772.751 307.778 775.728 300.171 cv
778.704 292.564 779.365 284.957 779.365 284.957 cv
782.673 276.026 li
769.774 306.786 li
769.774 306.786 769.442 311.086 773.743 309.763 cv
cp
f
787.304 295.044 mo
787.304 295.044 786.808 292.398 790.28 291.571 cv
793.753 290.745 795.241 294.879 792.1 296.037 cv
788.957 297.194 787.304 296.202 787.304 295.044 cv
cp
.937255 .784314 .709804 rgb
f
760.513 293.556 mo
760.513 293.556 760.513 292.067 763.49 293.391 cv
766.467 294.713 767.128 296.863 764.317 296.698 cv
761.505 296.533 759.852 295.375 760.513 293.556 cv
cp
f
765.805 303.975 mo
765.805 303.975 763.985 300.833 767.624 300.998 cv
771.262 301.164 772.254 304.636 770.932 305.959 cv
769.608 307.282 767.624 306.952 765.805 303.975 cv
cp
f
765.475 310.92 mo
765.475 310.92 763.82 307.944 767.624 307.117 cv
771.428 306.29 773.412 309.267 772.916 310.755 cv
772.42 312.243 768.616 314.063 765.475 310.92 cv
cp
f
782.343 332.088 mo
782.343 332.088 779.696 330.269 782.838 329.277 cv
785.98 328.285 788.296 331.427 787.469 333.246 cv
786.642 335.065 782.343 332.088 782.343 332.088 cv
cp
f
780.027 313.566 mo
780.027 313.566 784.327 319.189 781.02 320.016 cv
777.712 320.843 774.239 316.708 775.893 313.897 cv
777.546 311.086 780.027 313.566 780.027 313.566 cv
cp
f
751.582 315.881 mo
751.582 315.881 751.914 320.843 747.944 320.843 cv
743.976 320.843 745.133 316.708 747.779 315.385 cv
750.425 314.063 751.252 314.063 751.582 315.881 cv
cp
f
745.464 298.021 mo
745.464 298.021 745.96 301.494 742.321 301.494 cv
738.684 301.494 737.029 299.675 739.676 298.021 cv
742.321 296.367 743.976 295.706 745.464 298.021 cv
cp
f
759.852 307.778 mo
759.852 307.778 760.017 311.417 755.717 310.259 cv
751.417 309.101 752.409 305.959 755.717 305.298 cv
759.024 304.636 759.852 305.959 759.852 307.778 cv
cp
f
769.608 317.37 mo
769.608 317.37 769.277 321.339 764.813 319.851 cv
760.348 318.362 763.49 316.212 766.301 315.22 cv
769.112 314.228 769.939 316.047 769.608 317.37 cv
cp
f
770.435 324.646 mo
770.435 324.646 770.602 326.962 765.97 326.962 cv
761.34 326.962 759.852 323.324 764.15 322.332 cv
768.451 321.339 770.27 323.654 770.435 324.646 cv
cp
f
762.828 338.538 mo
762.828 338.538 765.261 344.378 764.375 347.245 cv
763.49 350.114 761.174 356.399 761.174 356.399 cv
761.174 356.399 765.805 351.438 767.128 345.483 cv
768.451 339.53 768.451 339.53 768.451 339.53 cv
762.828 338.538 li
cp
.27451 .207843 .145098 rgb
f
867.345 392.45 mo
867.345 392.45 916.297 446.032 903.728 542.61 cv
891.159 639.189 832.947 707.985 730.415 727.831 cv
730.415 727.831 856.1 686.156 887.189 581.639 cv
918.28 477.122 867.345 392.45 867.345 392.45 cv
cp
.933333 .635294 .65098 rgb
f
868.007 404.357 mo
868.007 404.357 891.82 436.771 895.128 491.014 cv
898.436 545.257 887.852 621.99 827.655 674.249 cv
767.459 726.508 681.463 733.784 590.839 698.725 cv
590.839 698.725 671.541 721.216 733.061 709.97 cv
794.58 698.725 855.518 650.642 875.945 576.348 cv
905.051 470.507 868.007 404.357 868.007 404.357 cv
cp
.27451 .207843 .145098 rgb
f
685.439 333.353 mo
685.439 333.353 685.088 357.498 712.871 365.104 cv
712.871 365.104 692.737 358.159 685.439 333.353 cv
cp
f
689.408 330.045 mo
689.408 330.045 689.057 354.19 716.84 361.797 cv
716.84 361.797 696.705 354.852 689.408 330.045 cv
cp
f
693.378 325.415 mo
693.378 325.415 693.026 349.56 720.81 357.167 cv
720.81 357.167 700.675 350.221 693.378 325.415 cv
cp
f
697.678 321.115 mo
697.678 321.115 697.326 345.26 725.109 352.867 cv
725.109 352.867 704.974 345.921 697.678 321.115 cv
cp
f
701.977 316.815 mo
701.977 316.815 701.625 340.96 729.408 348.567 cv
729.408 348.567 709.274 341.622 701.977 316.815 cv
cp
f
707.269 313.508 mo
707.269 313.508 706.917 337.652 734.7 345.26 cv
734.7 345.26 714.566 338.314 707.269 313.508 cv
cp
f
726.314 349.442 mo
726.363 349.312 731.394 336.422 727.19 327.916 cv
725.554 324.605 722.738 322.424 718.577 321.25 cv
710.872 319.068 704.375 317.784 699.155 316.743 cv
690.166 314.962 684.23 313.784 680.582 309.804 cv
675.692 304.471 674.741 301.776 674.56 300.864 cv
673.771 296.895 li
677.801 297.291 li
678.504 297.291 682.001 297.122 687.376 293.766 cv
691.917 290.931 696.864 289.487 702.087 289.487 cv
704.933 289.487 707.917 289.921 710.941 290.775 cv
718.959 293.029 723.042 299.192 726.852 305.849 cv
727.394 306.8 728.116 307.947 728.926 309.246 cv
733.502 316.557 741.16 328.794 738.621 338.935 cv
735.765 350.362 731.2 352.898 730.318 353.298 cv
723.6 356.278 li
726.314 349.442 li
cp
f
729.099 350.552 mo
729.099 350.552 739.676 324.092 719.394 318.362 cv
699.111 312.629 687.645 313.07 682.793 307.778 cv
677.942 302.486 677.501 300.278 677.501 300.278 cv
677.501 300.278 681.904 300.719 688.964 296.309 cv
696.023 291.902 703.286 291.737 710.133 293.663 cv
717.191 295.647 720.716 301.167 724.248 307.337 cv
727.775 313.508 738.359 327.624 735.714 338.207 cv
733.067 348.792 729.099 350.552 729.099 350.552 cv
cp
.764706 .423529 .247059 rgb
f
731.242 342.341 mo
731.242 342.341 733.946 322.996 716.085 319.027 cv
698.225 315.058 681.643 313.949 677.501 300.278 cv
677.501 300.278 683.613 306.29 691.221 307.448 cv
698.828 308.605 703.293 312.243 708.751 312.409 cv
714.208 312.574 739.676 317.535 731.242 342.341 cv
cp
.27451 .207843 .145098 rgb
f
729.532 314.176 mo
729.532 314.176 724.023 306.459 717.847 305.136 cv
711.672 303.813 703.517 302.931 703.517 302.931 cv
703.517 302.931 713.223 302.045 718.069 303.592 cv
722.918 305.136 724.24 304.918 725.563 306.459 cv
726.887 307.999 729.532 314.176 729.532 314.176 cv
cp
f
732.055 339.968 mo
732.055 339.968 735.032 321.446 722.132 316.484 cv
709.233 311.523 707.249 313.508 701.625 311.523 cv
696.003 309.539 694.711 307.668 691.221 307.448 cv
687.734 307.224 677.501 300.278 677.501 300.278 cv
677.501 300.278 686.411 304.908 692.364 305.901 cv
698.318 306.893 704.271 309.539 709.563 310.2 cv
714.855 310.862 725.439 313.838 730.07 321.115 cv
734.7 328.392 735.692 332.691 732.055 339.968 cv
cp
.937255 .784314 .709804 rgb
f
gsave
615.961 396.857 mo
615.961 396.857 628.529 367.75 656.313 361.797 cv
684.096 355.844 698.648 371.059 701.295 384.288 cv
703.94 397.519 700.813 433.35 673.512 448.454 cv
642.422 465.653 595.454 432.578 615.961 396.857 cv
cp
clp
679.08 343.727 mo
679.08 343.727 681.043 372.295 721.022 380.981 cv
721.022 380.981 676.406 379.885 679.08 343.727 cv
cp
.929412 1 .992157 rgb
f
668.792 346.314 mo
668.792 346.314 665.956 385.205 718.411 392.236 cv
718.411 392.236 679.568 386.025 668.792 346.314 cv
cp
f
656.154 350.693 mo
656.154 350.693 659.4 400.557 720.064 404.712 cv
720.064 404.712 670.09 396.543 656.154 350.693 cv
cp
f
646.474 356.536 mo
646.474 356.536 646.835 408.957 710.101 412.629 cv
710.101 412.629 662.566 406.697 646.474 356.536 cv
cp
f
638.06 365.508 mo
638.06 365.508 638.418 417.932 701.681 421.601 cv
701.681 421.601 654.149 415.668 638.06 365.508 cv
cp
f
628.213 374.077 mo
628.213 374.077 628.579 426.497 691.841 430.166 cv
691.841 430.166 644.303 424.233 628.213 374.077 cv
cp
f
617.48 381.463 mo
617.48 381.463 617.842 433.88 681.109 437.557 cv
681.109 437.557 633.567 431.616 617.48 381.463 cv
cp
f
609.063 390.435 mo
609.063 390.435 609.422 442.852 672.691 446.528 cv
672.691 446.528 625.15 440.595 609.063 390.435 cv
cp
f
601.171 398.635 mo
601.171 398.635 601.533 451.059 664.799 454.728 cv
664.799 454.728 617.264 448.795 601.171 398.635 cv
cp
f
592.099 407.73 mo
592.099 407.73 592.465 460.154 655.728 463.823 cv
655.728 463.823 608.188 457.891 592.099 407.73 cv
cp
f
grestore
602.291 299.84 mo
602.291 299.84 519.389 313.959 477.929 399.509 cv
436.475 485.06 458.524 560.026 461.17 575.024 cv
461.17 575.024 429.418 487.707 470.873 396.864 cv
510.997 308.925 602.291 299.84 602.291 299.84 cv
cp
.929412 1 .992157 rgb
f
649.711 291.902 mo
649.711 291.902 565.039 294.548 509.474 353.422 cv
453.908 412.295 443.985 518.135 469.122 586.932 cv
494.259 655.728 549.164 680.864 549.164 680.864 cv
549.164 680.864 467.138 633.897 466.477 514.166 cv
465.814 394.435 518.074 316.378 649.711 291.902 cv
cp
.27451 .207843 .145098 rgb
f
gsave
537.023 674.693 mo
537.023 674.693 464.698 618.242 462.052 525.632 cv
459.406 433.022 492.929 321.897 634.042 293.67 cv
634.042 293.67 642.862 313.959 650.801 320.13 cv
658.738 326.3 648.946 340.278 624.341 354.527 cv
574.066 383.634 524.62 419.365 505.27 505.35 cv
481.457 611.189 537.023 674.693 537.023 674.693 cv
cp
clp
622.342 296.636 mo
622.342 296.636 621.398 322.497 650.594 340.516 cv
650.594 340.516 625.918 319.665 622.342 296.636 cv
cp
f
614.97 297.742 mo
614.97 297.742 614.639 335.447 652.013 350.993 cv
652.013 350.993 621.915 334.125 614.97 297.742 cv
cp
f
606.701 300.388 mo
606.701 300.388 607.031 343.386 648.375 358.6 cv
648.375 358.6 614.307 339.417 606.701 300.388 cv
cp
f
597.77 304.026 mo
597.77 304.026 597.439 348.678 641.761 366.208 cv
641.761 366.208 605.708 344.378 597.77 304.026 cv
cp
f
590.163 305.901 mo
590.163 305.901 587.507 350.476 630.852 370.29 cv
630.852 370.29 595.981 346.61 590.163 305.901 cv
cp
f
580.901 310.2 mo
580.901 310.2 578.245 354.776 621.592 374.59 cv
621.592 374.59 586.722 350.91 580.901 310.2 cv
cp
f
572.334 314.603 mo
572.334 314.603 569.174 359.148 612.293 379.448 cv
612.293 379.448 577.698 355.375 572.334 314.603 cv
cp
f
562.741 319.234 mo
562.741 319.234 559.583 363.778 602.7 384.078 cv
602.7 384.078 568.106 360.006 562.741 319.234 cv
cp
f
554.143 324.526 mo
554.143 324.526 550.982 369.07 594.101 389.37 cv
594.101 389.37 559.506 365.298 554.143 324.526 cv
cp
f
545.212 330.149 mo
545.212 330.149 542.052 374.693 585.171 394.993 cv
585.171 394.993 550.576 370.92 545.212 330.149 cv
cp
f
536.281 335.771 mo
536.281 335.771 533.122 380.316 576.24 400.616 cv
576.24 400.616 541.646 376.543 536.281 335.771 cv
cp
f
528.344 342.386 mo
528.344 342.386 525.185 386.931 568.303 407.23 cv
568.303 407.23 533.708 383.158 528.344 342.386 cv
cp
f
519.413 348.009 mo
519.413 348.009 516.255 392.553 559.372 412.854 cv
559.372 412.854 524.778 388.781 519.413 348.009 cv
cp
f
511.844 357.701 mo
511.844 357.701 510.753 402.341 554.767 420.616 cv
554.767 420.616 519.094 398.176 511.844 357.701 cv
cp
f
503.183 363.73 mo
503.183 363.73 502.094 408.371 546.104 426.652 cv
546.104 426.652 510.431 404.206 503.183 363.73 cv
cp
f
496.044 377.618 mo
496.044 377.618 498.346 422.218 543.62 437.095 cv
543.62 437.095 506.35 417.432 496.044 377.618 cv
cp
f
487.865 384.295 mo
487.865 384.295 490.173 428.884 535.444 443.771 cv
535.444 443.771 498.166 424.099 487.865 384.295 cv
cp
f
482.762 402.355 mo
482.762 402.355 489.729 446.469 536.313 456.516 cv
536.313 456.516 497.188 440.874 482.762 402.355 cv
cp
f
475.324 409.856 mo
475.324 409.856 482.297 453.959 528.881 464.017 cv
528.881 464.017 489.75 448.357 475.324 409.856 cv
cp
f
472.815 426.6 mo
472.815 426.6 483.709 469.911 531 475.741 cv
531 475.741 490.628 463.668 472.815 426.6 cv
cp
f
466.08 434.735 mo
466.08 434.735 476.974 478.035 524.271 483.875 cv
524.271 483.875 483.899 471.789 466.08 434.735 cv
cp
f
465.801 454.355 mo
465.801 454.355 481.477 496.182 529.119 496.678 cv
529.119 496.678 487.651 489.198 465.801 454.355 cv
cp
f
460.02 463.193 mo
460.02 463.193 475.692 505.002 523.345 505.516 cv
523.345 505.516 481.874 498.021 460.02 463.193 cv
cp
f
461.591 482.717 mo
461.591 482.717 482.208 522.335 529.566 517.061 cv
529.566 517.061 487.5 514.656 461.591 482.717 cv
cp
f
456.919 492.192 mo
456.919 492.192 477.536 531.8 524.901 526.531 cv
524.901 526.531 482.828 524.113 456.919 492.192 cv
cp
f
462.252 512.729 mo
462.252 512.729 487.52 549.557 533.887 538.583 cv
533.887 538.583 491.841 541.291 462.252 512.729 cv
cp
f
458.762 522.697 mo
458.762 522.697 484.027 559.514 530.407 548.554 cv
530.407 548.554 488.347 551.245 458.762 522.697 cv
cp
f
462.618 539.489 mo
462.618 539.489 490.907 574.045 536.182 559.193 cv
536.182 559.193 494.514 565.446 462.618 539.489 cv
cp
f
459.981 549.716 mo
459.981 549.716 488.271 584.265 533.553 569.422 cv
533.553 569.422 491.878 575.658 459.981 549.716 cv
cp
f
466.683 567.233 mo
466.683 567.233 499.282 597.757 542.204 577.06 cv
542.204 577.06 501.729 588.754 466.683 567.233 cv
cp
f
465.418 577.722 mo
465.418 577.722 498.021 608.233 540.95 587.545 cv
540.95 587.545 500.46 599.225 465.418 577.722 cv
cp
f
464.485 588.398 mo
464.485 588.398 497.084 618.921 540.003 598.222 cv
540.003 598.222 499.527 609.919 464.485 588.398 cv
cp
f
463.217 598.883 mo
463.217 598.883 495.823 629.396 538.746 608.709 cv
538.746 608.709 498.263 620.389 463.217 598.883 cv
cp
f
464.485 608.682 mo
464.485 608.682 497.084 639.204 540.003 618.508 cv
540.003 618.508 499.527 630.2 464.485 608.682 cv
cp
f
463.217 619.168 mo
463.217 619.168 495.823 649.681 538.746 628.991 cv
538.746 628.991 498.263 640.672 463.217 619.168 cv
cp
f
468.685 631.313 mo
468.685 631.313 503.465 659.324 544.726 635.489 cv
544.726 635.489 505.233 650.167 468.685 631.313 cv
cp
f
468.199 641.867 mo
468.199 641.867 502.983 669.867 544.251 646.043 cv
544.251 646.043 504.746 660.698 468.199 641.867 cv
cp
f
472.567 656.082 mo
472.567 656.082 509.839 680.682 548.664 653.054 cv
548.664 653.054 510.731 671.4 472.567 656.082 cv
cp
f
473.077 666.636 mo
473.077 666.636 510.355 691.225 549.185 663.606 cv
549.185 663.606 511.245 681.929 473.077 666.636 cv
cp
f
grestore
gsave
627.868 709.092 mo
627.868 709.092 735.472 743.489 821.026 673.809 cv
906.58 604.13 899.524 454.197 870.419 407.448 cv
870.419 407.448 820.147 415.378 811.324 413.618 cv
802.505 411.854 821.904 456.836 825.437 516.813 cv
828.964 576.785 790.157 708.213 627.868 709.092 cv
cp
clp
805.116 416.195 mo
805.116 416.195 844.729 436.805 880.489 405.308 cv
880.489 405.308 844.661 427.482 805.116 416.195 cv
cp
f
806.715 426.641 mo
806.715 426.641 846.339 447.241 882.102 415.751 cv
882.102 415.751 846.26 437.901 806.715 426.641 cv
cp
f
810.407 437.364 mo
810.407 437.364 850.021 457.973 885.781 426.476 cv
885.781 426.476 849.953 448.65 810.407 437.364 cv
cp
f
812.007 447.81 mo
812.007 447.81 851.631 468.409 887.394 436.919 cv
887.394 436.919 851.552 459.069 812.007 447.81 cv
cp
f
813.054 459.854 mo
813.054 459.854 852.668 480.464 888.428 448.967 cv
888.428 448.967 852.6 471.141 813.054 459.854 cv
cp
f
814.652 470.301 mo
814.652 470.301 854.277 490.9 890.039 459.41 cv
890.039 459.41 854.197 481.56 814.652 470.301 cv
cp
f
817.685 481.684 mo
817.685 481.684 857.298 502.293 893.058 470.797 cv
893.058 470.797 857.229 492.971 817.685 481.684 cv
cp
f
819.283 492.13 mo
819.283 492.13 858.907 512.729 894.67 481.239 cv
894.67 481.239 858.828 503.39 819.283 492.13 cv
cp
f
819.669 504.175 mo
819.669 504.175 859.283 524.784 895.042 493.288 cv
895.042 493.288 859.214 515.462 819.669 504.175 cv
cp
f
821.268 514.621 mo
821.268 514.621 860.892 535.221 896.654 503.73 cv
896.654 503.73 860.813 525.881 821.268 514.621 cv
cp
f
821.653 525.344 mo
821.653 525.344 861.268 545.953 897.026 514.455 cv
897.026 514.455 861.199 536.63 821.653 525.344 cv
cp
f
823.252 535.789 mo
823.252 535.789 862.877 556.388 898.64 524.898 cv
898.64 524.898 862.798 547.049 823.252 535.789 cv
cp
f
821.688 545.298 mo
821.688 545.298 860.251 567.813 897.502 538.098 cv
897.502 538.098 860.634 558.497 821.688 545.298 cv
cp
f
822.776 555.803 mo
822.776 555.803 861.347 578.315 898.607 548.609 cv
898.607 548.609 861.729 568.981 822.776 555.803 cv
cp
f
820.562 565.205 mo
820.562 565.205 857.522 590.263 896.692 563.12 cv
896.692 563.12 858.536 580.991 820.562 565.205 cv
cp
f
820.944 575.761 mo
820.944 575.761 857.912 600.816 897.089 573.685 cv
897.089 573.685 858.925 591.53 820.944 575.761 cv
cp
f
816.303 584.454 mo
816.303 584.454 851.486 611.958 892.399 587.531 cv
892.399 587.531 853.122 602.776 816.303 584.454 cv
cp
f
815.972 595.015 mo
815.972 595.015 851.155 622.511 892.086 598.094 cv
892.086 598.094 852.799 613.312 815.972 595.015 cv
cp
f
811.014 602.614 mo
811.014 602.614 843.883 632.844 886.626 611.768 cv
886.626 611.768 846.257 623.819 811.014 602.614 cv
cp
f
809.843 613.112 mo
809.843 613.112 842.711 643.338 885.467 622.27 cv
885.467 622.27 845.089 634.302 809.843 613.112 cv
cp
f
801.398 618.28 mo
801.398 618.28 829.978 652.596 875.131 637.363 cv
875.131 637.363 833.522 643.965 801.398 618.28 cv
cp
f
798.846 628.527 mo
798.846 628.527 827.424 662.842 872.592 647.617 cv
872.592 647.617 830.977 654.197 798.846 628.527 cv
cp
f
788.169 631.562 mo
788.169 631.562 811.197 669.826 858.143 661.633 cv
858.143 661.633 816.014 661.829 788.169 631.562 cv
cp
f
784.085 641.302 mo
784.085 641.302 807.114 679.562 854.07 671.379 cv
854.07 671.379 811.941 671.555 784.085 641.302 cv
cp
f
774.722 642.915 mo
774.722 642.915 791.094 684.465 838.749 684.165 cv
838.749 684.165 797.171 677.381 774.722 642.915 cv
cp
f
769.085 651.845 mo
769.085 651.845 785.457 693.392 833.119 693.102 cv
833.119 693.102 791.537 686.294 769.085 651.845 cv
cp
f
758.432 652.522 mo
758.432 652.522 769.191 695.865 816.472 701.839 cv
816.472 701.839 776.147 689.639 758.432 652.522 cv
cp
f
751.665 660.63 mo
751.665 660.63 762.432 703.969 809.719 709.953 cv
809.719 709.953 769.396 697.735 751.665 660.63 cv
cp
f
741.605 658.005 mo
741.605 658.005 745.188 702.518 790.873 716.082 cv
790.873 716.082 753.058 697.505 741.605 658.005 cv
cp
f
733.611 664.909 mo
733.611 664.909 737.202 709.415 782.887 722.997 cv
782.887 722.997 745.085 704.399 733.611 664.909 cv
cp
f
725.088 667.707 mo
725.088 667.707 725.099 712.361 769.554 729.536 cv
769.554 729.536 733.344 707.989 725.088 667.707 cv
cp
f
716.561 673.95 mo
716.561 673.95 716.585 718.601 761.037 735.79 cv
761.037 735.79 724.84 714.229 716.561 673.95 cv
cp
f
707.093 669.188 mo
707.093 669.188 699.786 713.246 740.83 737.468 cv
740.83 737.468 708.633 710.284 707.093 669.188 cv
cp
f
697.656 673.953 mo
697.656 673.953 690.37 718.005 731.403 742.242 cv
731.403 742.242 699.228 715.046 697.656 673.953 cv
cp
f
689.491 673.34 mo
689.491 673.34 677.227 716.278 715.256 745.01 cv
715.256 745.01 686.356 714.343 689.491 673.34 cv
cp
f
679.575 676.999 mo
679.575 676.999 667.331 719.938 705.347 748.682 cv
705.347 748.682 676.468 718.005 679.575 676.999 cv
cp
f
671.041 677.34 mo
671.041 677.34 654.294 718.739 689.05 751.338 cv
689.05 751.338 663.568 717.777 671.041 677.34 cv
cp
f
660.791 679.927 mo
660.791 679.927 644.065 721.33 678.814 753.942 cv
678.814 753.942 653.35 720.372 660.791 679.927 cv
cp
f
651.132 684.233 mo
651.132 684.233 634.932 725.85 670.129 757.983 cv
670.129 757.983 644.198 724.765 651.132 684.233 cv
cp
f
641.794 683.428 mo
641.794 683.428 625.622 725.05 660.806 757.195 cv
660.806 757.195 634.896 723.969 641.794 683.428 cv
cp
f
grestore
798.535 357.611 mo
798.535 357.611 792.138 363.789 776.485 361.804 cv
776.485 361.804 792.141 367.096 798.535 357.611 cv
cp
f
795.889 363.789 mo
795.889 363.789 789.274 372.605 773.178 364.888 cv
773.178 364.888 785.967 368.64 795.889 363.789 cv
cp
f
795.448 367.979 mo
795.448 367.979 788.833 376.794 772.737 369.081 cv
772.737 369.081 785.525 372.833 795.448 367.979 cv
cp
f
794.787 372.609 mo
794.787 372.609 788.172 381.425 772.075 373.711 cv
772.075 373.711 784.864 377.463 794.787 372.609 cv
cp
f
795.889 377.019 mo
795.889 377.019 789.274 385.835 773.178 378.118 cv
773.178 378.118 785.967 381.87 795.889 377.019 cv
cp
f
796.768 380.988 mo
796.768 380.988 790.153 389.804 774.053 382.087 cv
774.053 382.087 786.845 385.838 796.768 380.988 cv
cp
f
797.866 385.618 mo
797.866 385.618 791.252 394.435 775.155 386.717 cv
775.155 386.717 787.944 390.469 797.866 385.618 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_pomegranate.eps)
%%CreationDate: 3/14/2016 1:45 AM
%AI9_DataStream
%Gb",KB3Q=s[dO)VcSPSe*[bbhmMpb^OV#C^?ngLYY`Kcb;6g6ZhB1$]^[#1+3X?%kR>j-<UHA3p6W78jX(pbGp[@:7]gejP36=,Z
%?HVK?VTD%lps8EDh7s!&\efJ:$nO6Y]mA&hm^AVHT[R%Zesc!O;J,</WKGjdS^:_9R1DTcf).%^YEd7CoM0;Q4tK`M6*]+GQb"%^
%X78RKOC*IcTsn\:r2cK.2TiF6-.o'gK?@esrncVK\;1"*IaIK1/nn<+45/H1-TAArdJ1Je:OBoL[F8uZ]%(EQb9IG?D*"udIaBRd
%+)!EuL]3d<5@t8=EN*%*b&0!)./L4G."`u21HR0Nl0qme/YqufRefg/e%Os2ptqg+ruVajr!>S,))GdE3kN!-XC90M8'>!mrRk"#
%kQ;20!1Gj'1HYs.X]h\Cn6Hs$VIf.Rme]3H:Z$*LE4R.%G#pK*VWiGLpTC.=XGgT_DUrea>2(g>XRE)h@S@'QX2/.9RHHl8'"$2C
%kM"bjl@8#,FU`SkBq"n9?EY-Oh__?=Fapqr?g_I:=UAj%1S17A/)ceXkJ[D#&I50+8^JcrD:X$CP,4*RXn&Jnh^\R5J=<?=A>^/!
%%[q<]Wts"/GO:>/KV;t)a,4f[FV8m9:5S`8FuZ\k]""\E_T89koq^;D$Ff.=DR?I0(en9\j2jNurN)@\5<o'1[7c+^gC5([3U"KA
%g3,Rl?/5-;<aBWCes^_$5=jg`Sl!*d<)@A%W5$?enD@o:?:t=9%h;r(l%NjS'EA'd/,>ZY\6J:H+#hou?>Hleh#.,[\QktV'P)A[
%h,>N]TMar9b,AtDCIVX(Vd%^Cn6rb)D*8dnjo3U&;6s<je>!>6:SOK19Qe]7PmNJpcI)BZ9S>I)*lL;1pT!$lbuD;7rcVeL+V;,0
%S^YeKZWW2EW<T:c7DKSJau^9C82PSD!qaOTSU@P=X&VsLV:K@g4Db!?IubAVjP;Z9''ZfVGUEETrq@90RgPk4Hu$WCh#F9cM8;+t
%@i\h(EOA*f4MugcT7"!%Js)5K5:s;4(aFrqO_OMb6C'HZ"E*_Xou;8RCUOil&3VJiK'u>!<[uOtPo?KBLAqh0c(&LW7,723\)M&j
%[.YY_c6R%->TCpCF\VkFs)s$ZS1Xs&PN_2R')hNQHg;Eg2ZC6`/ONL&g-<XUBfS!DGJ2S#5;(C?[Aug2DEt:IJHk8jmF&s.jjRtH
%dLI0X_T4jm,Z(7#ih,X7g_]p/::pNSo44Jj,_ju2jLeIXWA-Uj):Bq`AHXU`;g'sr+T.c3KYMF8"O`*(!:a-udQL;*L`/5*^mkVZ
%PLFCVBYo<Z"\rt,0NW%\Q4ETX5ZK<`!5bCu!iF(#;8T[Z&(<9)0%SEK!7s/U+WVtp`Y5ttp(>t(NH-`PFQBR/`tD*q@fVJnV&a[!
%g._TA3:Nf\Bf,RreSb1<<gWld_rG.MVSV*&d5M6!0cm>aYJ*s'QHiD0PoP0]&j!)Hj2!c+Fb4'apsC>/9;?N4(nZuE>R#aC$A.eA
%1,p,k1_O"7I1J8W7Jk>9],YXCWK]`r2:;cA`h]rRC?%'il\EBf3C#2[kl_i6(:?fkAig/In^&5P(H*<rCegiMQX@*-<`[4Yi!C:#
%RH9hc2\@1V9Y!^sB)51]CM(`f4&!3FG);I@g8ehn1Ge0J!])XpIN`YZprjEjF"&);1L"a/bKXk6R4UA(jo--p//l"5RS*n(Ut]tA
%D6i>&!AdID>Wt+XCAXp*9(T7P%a[qF]d'8DNSI_\plB1'b;f>TRQ;n!JPN[P#gTK@At$l`8IiLD/RY@'lZB/'7fMs_Rr#bu`Vica
%Ltp,^b1ng-Uli0P)\fjIaF<-Z=7c3s'6H`@_gfeGDN`Rp(q-E>nlp]O25jhP8h>%S_dB=.RpUU7j_$0)Mc5VI.H!7hTY/ac%)8Z:
%p8>u]kk*TLV/ieI/u?1S^>V"_;5A`#0!eV0[F^k,::J_DF'F:#g_bEBH2uRsDD`BLPlQbMR8SZI&]Hj]c=kX3'm;&T-JV\-BV`8!
%s.fYT5<#`Tlo(o(mT)AM`58_4`kEYI/L>A6;X$b):a]T<\Y=jhiaW&!:Xtk%3@9jjUeoRddLaUT%FRie(sFfjQo>7;$LrLe)4Z+/
%k`ZInAWE]Q(p'3m,I]$kIK^$BnM7@Mm;af@/J<r;G-u[#&%ZIom9_FbVpPdaMPp1uN8u<=F?=0."?=N&e998]OP>%&^N:9u/>)8!
%f;)$ZR!@4c$5b,FEMi'.,bN8QR=HQT[:Zb2D[4+.;FJ$,FW7f`DF;aIW.SuS.b.jo'+"p#XK?bPZEhoo0^1um!f![//Lsi.p:Hl-
%j`[ud3^rMK'M?^TRN].uNSOg$Q)9XRd[A^(.fYtmYDHgsMmjiO2HA_gV":\Bd!7/O&@3q?=^h4]-Bj:aob7bnjO8DnX`mr*PZut:
%+@TK)'K.@1JUXp0"ZIiW0$DX6dSedMpmY!-s7aU)aj1kc8qC$,003#30f>\H01B8fmBkAV"L\3$(6m;$pOf[)'R[G*_:u$.2u(N)
%9:J8Ue&'^\n:?_h;JRaN:;''EV$OJ'Kr#H4jsMtSUYbb*G_#V11oah@E0<6AjGVaHd!7;S&C]daOcN7s@M4mLhbkWK`)B/5F*-uP
%,6\WWUVWcUn,4?8/=A>04&23&FBkrudUhdpDXNNX[D,<u0@KptOg\J/Vo2aVGuGj=.DVpYku&b$D@DI<qJ%gG[b@6b%W^?Bf$dG%
%&%aQe3sA4s"Xg9[X;Z:]TX4eZkJkD<W`6"Sl?O;#-m!\5:c4]$1a&(,]m=Tbc9WOKM8;+S<it']8h'$tb,&8Z+&,H1<]p#OJ4cLk
%,k!9hr"T;grn@4hhl(*`C/jMuODWrXmGJa:Am=n>R4&_WTTsF_-;#1!VTjNDb=%aDs(j/?R<VoM%@JVYJ=%6fbcT/Y8^h?i$<'f6
%+$Q36nWQ;IS<@-AIui*Ir*5KWD9,.;"2r[pcWMmC//Mka7*b2F7FD,=\L=H0qo"EHgQ7>V#)Hu7k"L+S8h.cJGj;dJ\L;0BQl6EO
%6?5r#+\FPM3AmcAmL!4Z-LYudS*-V?_jfK#oQArVSr<B?]=>s'goC@-\]r"np[:)SAp;i`b-*YIZ>&RqF5*-ncaq?Ept@slCX.mB
%V)X&E?^pSn)./j?^:)mq-Som^VQNWK>75tW1TiXrC00G11M(F#XNe9/N2tbMY*P"P*F<fkIN"VYMBhmt"TW1GFEK?ZB4R7d#\IU(
%,GU0-Zs3JjW9r/.57_["&YQ7;lkC=oEf5:DOqJF<D[NMt[tR^";ELg90C<I-CYj*lc!0fsXZ!&LHcn#+(nt[8AOFZ)2Z9[fkl6t5
%BDULsqEsB\j`OWDQ/K1+\GS.kI2(3=9&2f`4A:^I.F;[$?`'dd9;dKP0B3)&WhqH0FK'aua-T@rNGd@'$BNV`OF,DMQ#pD-9cF&U
%r@lne+=5Q33q6Q;H8PFTjir+Pfcf0nVjHDTp/Aj>0#aV8O,9umf/8gu+GGmF/.KRgh&sP0J`3mkTKX4:)g!:"JDi7Cqd@bu)huOF
%H[RSMe&$L16oq2GoVY;>rhB+82rib3=1bC'TUSE)q,[sGBadC7&SYmCI^;Y]M2;2gL;o=]phq7-ZhX"9PF9C>BCXk^r)[l27">_`
%3@3jY`I);Qhd6K9/WKS_aq&pE@_U)Yp[la?^(Y1Ob[S;mR.%tegVabTV0[OE9Cim\M5UC'OA$)kp_hRrc+h7#<3)U\G%na$)-p';
%!-[md)`(^I?IjSJcO'6'Sm\K2Y-'W$SSkEh"r@O$\1tTRKj<oNO3*,KHYNGr;p(q.'*g<(fn=^nDTVWiDiofK`7siS3sZbJUeV*:
%eOHB]dTeu>2JYU&\K+Y8S*a,6d[8P.FZ+<3c!4m;f3&0R'T2D(Is0kpP4#0&L6V[9XnTDnICZQM>/HC\Km-9!E.T#,QI8]q(jj/<
%RR3:aN@b^mNTR)P`;\Ff'L%dqInO$9SQ8Q6l.*LR3VB1bhI]R,s1iHcU!/9+J16/bK"GU`Q&348[G1Ah>GSB-$,H>$RH%l@GkiZ\
%4*/&>"QY:X0?VN`NYgf2@K4NpnM50ubT&8la32]s13:*%L#]!f_CmW<\I11u;FE:TC*WVui0e<jdZn&j'CSK'D&'IfdkNar2DL&Y
%+AIK=8T-ML#)5]f2NakF`iRk3s%8U4ShFHHcc_l,\QGnUG>$IZh9sb#'PC,e-<W=R3\a?`E1D&[RLJ/BScMX">eHd74>jEaeq*'m
%-lf->hL5W]STS;.F^M^/1sKkYm[odpc+e/8Vfu`IMGh%dr`rP";kk#%BRhukB>6al8b&Lq8r>9ent;JhYr".>`]<p(pj:H2Ic@n>
%oD#g/F?pB'TTYHartA^^P;L%l0`E#.J:DUO\'l1][%$lF@?B`aPaR4`%2RZlDVlOsTkSV/)cSiG!Kfk9\3ZZQ\$Qi7r)Kkp8d\PX
%D@@@<%5=\G\qIG(i(\b9q_;tU$gF'$A*1h!DEik3o4(J$!pn_E5=QP.Aq#\q[<-&1N+nE]1I&mTZLO>)A*1h!&jHROZu.<mZHLHU
%]++JeEP#3<Q>3UleMR*To%r#OM5J$"ONQ1Fc#Y[+g]e9\)Bbos=Dfti]@Cfp19Y,Yc&?WIeQStZ&q-Nn$Fhp`LDml&%e5GJ<)=kG
%h\8mj2FY6OUJ`Hf[Y#[8TM\Ho94&N#V/1Y4BP8Bh\_0G>\#%DI2T;"I]$3&]7<??AaDngp:I?Qnm%tnnoaRA_%@Zr!qF*ZGd3S^F
%D1d;&j6*)e53g\^XJaMrR**46F=[$m2*IA8#Pj&fH`J-_C%?9k4P_Ls#a:kHV;8"ZY>i;2;mKIUU(8oXm[khMjt*0eifLb3e?Wcr
%-NKg-)gaX$fI;uCVU17'9oL$<B$:,h/7N59c)eID2)hl(B%Gb]R[\>5/qlVIZfZ.X20TGW_e/Vto[n46RUAg_4dQ5MR5m2^k@Wj]
%5<L`CDJ%1jD.ISn%(^OG9Y*f.h^4O>'en*Id_0ES.js^^)U:CMkAGo8GMBh_Og6`hdW,#Iop&'Vi6;$ibkbhpqIABZ^(Ro*%F5r'
%9JkKbY*$:F?fbQSWg1_>b8GTTCmE/nma%_/Y-h%!B.]+0>)g-C>YOt`iJFJ3P]0;8)&7^I;b9Dl&SjG'c;jbt9Y?^u_[R71D@-"9
%Y9`DW+ami1kt0oR[m[2js38bZk5hP*R2WsBlSMTFF\R:TI;tLm9u;&CKq!ZIp%R57bGA1LFPl9gL.\0)>-lW@Q7i-S@%[>SiYsf[
%?&FlJ:9T(N.L0Z@XabRfR5AX+5W;U]9^+dlH7r8$.N3S2f?>f*2Y;`E;KNlcC@k_&%rl(F%BE9Y.^O`/FCDt=?b$d29j:5ibd=o"
%[-FgbV:V+V1a.1ls$3GVW[8E(lkNKn_,kL_^(dk!h!OsqX_&ff&qKL&1Snc*PbOR@1t.<$De*5&n5Lo,=8Zt6K^2+:/Pl1cl?Y7!
%pEXd2'E[;G%DeRj+MFS%iNi/3I5%$%X\k]r2PpuhIBr>#ZM]SD(p'3m-+>8:2160Po&X>_g>+>\0=A0a;(.aaea@-78G0ZTR;eZa
%VEF+[0b"PT/f`=GQC2]^,R-C$Eq,#&n4YacAE1VN`bG&fcTX6HWCkL?@Ihlg+2;n6;i)*qY_UQlqPs>CFt(lgrblpdU0IH(Zrs$S
%8a#1-&l"^eYJF3-E'9tqs+^Id4W+b^s-SP^_L^1Ok9jSLD:%%.&Qqn.>hd<<=50K`D6hj5mF%#4C%9iW8&f'Qd:*GoB]>Ll/Dc+6
%)8FJ?F<f`1baM4!1>Q;'YITps2?go0GhrJN_<pOK4Njsu7"0)4A=Ih0O9?q")<''VO.PJQh(sb2-<RI2MV]E[m:*JOKDpp']A[Yl
%.*_-SKm1tdUi>i[^i.]5+8\Ob0K1HS)WeZ3A0\Piag,eRbM77tgR+\f9r",*qjCUd7[$3l`'Hua6+bY1*2iUq_?Alre[1d%=446V
%$SiHW%tX#t.@r?Ia3=4Mp<P1+\QWi^iVZUUS>B?eRM<qP["BlX"R1AQ;qDN2)jTVs8Gp]OUVg0X`\,NQD/:!<o6bLTD']/PqerZA
%s7dUArg%>DpX-"P6\t<=dJU&]^B%R$51)hm6uQE<VH:-S7]--!]i>H76!@k*s+L2,q!WV;:\O"EXQ+Yrl"B2bf<TPsYN[";6U/)H
%Y.OHp2dO>0nUmOiNmBrBQCiGp_^o4cchj@0m03I\SY#eFYqk(%:LCJ&j`gRU*c@"hXjHc$Go<NL4D#\UP5o_&M=$UD6+7d=BY-cb
%`O1*<?r/u/A6<*]p,r2ff6#mVG<5J4O!a(4g[+[0UB;(rs+B@us24<?m?[#:o'pmt7B^lU>;U'OD%4?56iJ7'&<cT+pOCbTRPde3
%s,tHMiTXo(W(e(sj^+K7h*S)6BQF.B8b`;,KO=UY0g/(skokPjSEnS\M!t;GVR`R(/n7]O%nDMDqhK5')P+e;;S07t<jp@_r*c\/
%(@A!Js6J/V<J(^_1oF;gQHt/fSUYl3iR!:8!:Zr@^mD.BB0amI_O:@qqhh(=!GHNKFX"eSIjcNfq#/*P7o=t]+r+[b\`k&'KW?n_
%V=X=q!FmJZi;mT%fBG3Z'>XTr.>fa#8l3AI6\u<%A*X)GDYD*umej9_F1XuRF8XVmi:dq)nkQ;j^--:;[l#c/A1o@]7Y!TZTp.M*
%F$_j0.ZhZIQc]LZ"XGZ'8?'=)bF==&=?@h%V>GQjmiq<#g'Ia3o-E40Ne6Vrfd4mP.lctb[&YS74`e9(_3ZK<M.#a"c:Irum:9lB
%,hs_U+8):2WfVOL%@cnflcn4e-m)#1S4eg,f0=*WQ"mLofaBjc>#0F?U5<o[\t4bK0Vg;n>+&iZcn]8;mEBH0kQK^8_UKNt:"'EZ
%6E=&lX^<ZUVg>=`G*0d*X_.=e\5KFI;Lf';_adaA<O:taV&knk[<;soDDRLBFdnf4;PtJ@X8`JY:7L#11TaQ5+R)kk]ipqa(F'6@
%PhOrgAuT(X`#Zbm-D;Xk:Gm4E+>^dclXioGc!G2XfIEG:W>fA=%qT65(4>)/@J0#\EuKVF>>3gPnke=IG'_s[D.1X]Nbt9ZV-mnW
%g/ir=7UfU=@H^akNM9VYZWa'OMp?M4UaPOP6@R[n%.Ec'7WJ`Da'NK>G3"Jt]A\"5hKOs<r9a(uEtJ9*c)b!Hh9o0.<pfmF03q:5
%84$OW`_!@U&nH0TXU%Sdn-V*hc(e0R051#nSN`!k<nB+I&J:=EeJ<!;-K!^ffb8ZVU_PfmXRDE4,KA_g;!nsPZrW%,7L*liq$uA*
%XkF%9?%VbOe`#-p;ZP9kh(.G$10_S?:`Hb:<d9GFo:Xok:Ui4CNGou1DS(00bJaL9]O+M'#IW`k0&=BFZWsM]@<Hh1E3U=@-LcW\
%Ata-Zo'Zgf+gH.!BufkikZ#Dl?Rn"Z9:c$K88Kq'fA3*ZG#R5^H*BT1F9l_krU4XJTLXssK8S/;GYWIg=uMe0F-bQ3p1h!S.rT,/
%3[X^hOR%'&a'<A$Wu8Lh;Jc3W0$;F^-)_54o$!;!c#3R=P8@nCL_oNYS(mDD3UO+\#;MslbZG=bLb/K5G("RabUdMQ`G*>C'U&*P
%=>,$l]m5hg<WPZR+L<_]CD"Z%o/m=3m-*H=c<7Pt6pu=oB_8lQU9Jeg^^f+/VIVYZ[9C^]+W'L(Kde"0KPNSWOU/G0BHD"KNglF^
%SKoM#UD[![VV5EaVXbX'W[Nf?UXYG->[.B[>Z4=;mo$%)@mu>?Gq7Z*ho@>GA@2j'BU:2KYkh7mU4i83E@l*G!EjJ\H&Euk^ftMP
%25#*GK94J*:1A23E"Yp;R#F[fA2=/,B-sgY34+0%d]HP3/$@kDe:Kt$M5c6"g:+Dc&T71!fVGe?=aJZ6FC_$.4')]J$-Gm&k\$d>
%-I/5W+h7;Z6Ij\Bc!J,oOip8fD.;-@nL.EAa0LO#D%4ciCM2tXb35D*/(nP3,Wg>4C/>agd'ZN%ENMbggXq)?UUJLD>.*qI&_J:[
%b)O]f,Gd\3;B[8X?mp&eeBbGjkJKdu,1Rs;N#P`62d7O#IGF$u/%,B2)*4_F4,RE%LFq*!f)#'U@7-'T+Oj88mUR9Q8I6lnkY^GR
%UWYCI;1iUEA50$baC6b1`-7DtG*$*j6\dsUC':(.^6fo6G:VFOE">#;)?dHs`9q>-ZW1n')poOG!^*4*9.+$u]JtYC8KXVckV^L-
%R0/L"2&_Un5@W8IL0Ul/\]EQqm!^ka/iY'.7]KT;o6G6Rh9PHO8""GY&u]Jq<kEW^X^*c00+9$^-)`^k&Mfa1;70U]_7]$!8!bqq
%_H5aa>rY&0@tmIq&ug]K;(A=06cdg+\/ir;@m[]SB)=ft2*,grX(Hdd?,DD3QaK^A"ijXG8+B\n<C$`<<b3PV#Z"r08R1>4Z#j"%
%C,]b%=i2:Qg_`]D*nnpD!BPV7;"^lboo:!C:1Sd4jjiik*0o6K;+DP2roW`*n_E/BqU+,2/,eCL^Oe.W\2_)fVotpsl_X;XkJGMC
%N/i+R@W6AN.>ITar%e(LWO:I#c,N<6A[,2>:[!bJD3?kEpOY5Y*M4-MEI35XY_kS[kXd7Q"R./tW&nZU%j*4VQuN2$T7Vhj;%Xej
%K'@AH/C*Tc]LV)[c]NT/*nfnO7](35#4#*:5\>G[ejI1U26]?D>759KB$AX8_ro!X2(g%A7uV:b+PCLhoXedrAs4&]>V[?\S;'VW
%YL\PsNTVS7aI!`5>=:5-8W9G3+rPlm)DAF;R]9$)3'6<_\=pdP&p1-$N?j]/VAho5PTpnu)`]:,9WB$V#F7EF:lNhpqtP$3',6ns
%4FS<Y'-^kpqUj75)]nqfS6S$9l,(!:HTN*B\M1`tC.+B(>cuL;U,NHKjh?8$DRR.9Qg"2?]P&?tG2uGI6)]/g[.eY=CR^fb>p,WO
%_AVY5X_0^+50^:Dqt&cel2AI,o>/^]I^Qjd5@$<agj)c0ZS;,mX]ikjmQ#3WY<-rp<o7^Uh6rn,D1-lC^"Vn>h;Z#NmG6AGl`R+-
%$Ju4=$ei;Ejfd@XX"+R[c>)O=nV!32?/E0A%S+4rk"hS`hHF3iK)N+BT23XaD"ci0^fjs-&%&!6.,J<O5AkQNhnS6SO,FCVH?6-N
%gYD7hc9HI>p50%>hRi^[g;A-A9]9*#EAVdGH`hkb^4#tEF7*EfqtBS\PN.tCXKJ'.^T9&1ZM"%1_Yme\DPM5GbOBcl^E)b7$HHN1
%\bXromJYIQrj9:\l@.7[:?:/^6<W4BZ+BMmiB*H`2VhO5HLeI85<\d=fW8oGaY.ttn)a6Zml"\imn8oe/`V>QRkLt3mFQDpVq0ht
%9('Fh?p=U*iS4:qg;>kg[@m9hl.["u:RB8ddM[M6cEA=.S]]Blp8$cXX7s=[<PQ8HjD4L^4^;gLJ*uF,p)j24!0:0I?_!RlN3iHU
%bA+1WITW6BF*m_>>Q=V6eTIL+Nm1h@]W'5L/a:ZIjhcr$><4e=@GnjU[E;Bim7E-e=l94"DK-i@fA,2n_!kdurp&5"b2%:-$bhTU
%K#6XtkO)8mXnd*gj_a,.P&YU<$d\^WEM#LBl9)e=C\d&(F'^eE<)<*uO.8XmTPl>bRf;F:G2Z#,j[&F^r5U^]EU\ae4:;[nA[J3s
%2D+o>rb6@@rNu-5rM>H[>?LnPZPajD9u>i_gAKEtlO-2@fu]k$U3D*i/6BR#qT?8bm?m%jakPc01b/MLg;92$$i8YNHPdK"r62m=
%0-'P&(P9pgbPC@L0BWfPhrbBf:L=$&09mU8b<&44?MhA/hnR;#XQ=X6a8=C/X$=<LS^9-;lbgQ4*9]njno=V)T7<?>hWK'>L%"I?
%f;d`!-d0R'q^9@jj2X3OiR;_J]2r^d$[V\7l7[3?>E<,,$]cbjj`JAG((pTSFBdGMo?Z9ZIL&J?*Nui]I*hg:GOV?])[,TGi?h;D
%]SuUP45j096pWnM.&g>K=LiojHs:ksd#+Gs9u_gND_&d.iQ1&5q0^ZkHL\`G%l\dEiFN;k4?Ms&pm_=Ynu,l2D<)16k_qGNo<%+m
%`OY#qfpoKknBlK&n*>ktV#NiQhOYf'k8puOXdqM"BC#.nfj]oD6jFg&b\[").mVTaU9==p!q,KO[?K)4Nk8PFZ^5_t)Xf<8_s[-M
%gV1f0fN;Kc3:_i1MglMT>bbkN#MYMh@Q%$\6@S7<fs(GGd)<GR&+2.acaoef)qO^*qK-q>O*5<^`Ie'9R")^;%7MX!BEVE4\@>kL
%h7U)(o9OYt<e(*lJQFEcq:9k^s5'm-o<lTmB("ULrB6V0ja8mNCOMoPas]GUF?em\N_^bFCL8.DSb]Bd`B#(UNZUH/BYVej@>X;g
%h`hW33j%oBbCNf$4o+\4q#.\=O`gLQpZ?q8dm*7dDXZL^c21gO>[d%9b69F1%qr](<q9mEX_Mie6_@#UqN#ua9?CZefofb!\ouS-
%TDS6#]3+W/paZo%Y3V\+#(ul*!T(<]jiu(*naH$S40SBnT5shd?EC-@qRLOF/'lhQ2!!CqiWiZuo(pD`@;`i(@)[WW_;K&"UqYP8
%00PCI9+pNR%kGtLef(^gZ?0/pdJ^GP]pu.,dm',1p/8*TjJNe9rq,HQpJ:$VBf5][5KWL9==-&8Uu$JZGHr!uq42t\jR:5alLf*"
%R7Lq*'kuI04o4Di6&)>S/[\9Z6&\E2`66X<([">*5C2A/=f%e",C@;qGS]!90-cSLPh=Q^r4Y9lZS>^t$sp\n9$sLhY.D$8:5@sF
%BKeRP]`+Y;ZU1GD4JRBijcZO`ld'ub%1dL@FlEtn83]:c(!cA-(EY8ql+a@ZpNtH6\8W,O1<,lEn@WG8CAb!-iDK9=Ll@7A'r5:1
%_:!t*\."f_f>95_:Z7Q'YC4.e2u%8C6&uVfnaXn*'!<'Y#1&5-^rm-J0*.CM,<V(ke/1=?>T#g?:ocC2&+(S!oTEB3R\P?o$#13*
%5<\C<(%]PIn"0sC`)kN>[;pY^;T@0o$mQWYR<T0_O@3)Tlas_I%(PSBO$ssNp%JMm!n3muO'`NG4B_POaN2u-!1#u^R`=WRS=T-s
%"poecX:IPil\(=?#B*s-MQ78?"0r#hNMQLAEt+;(-X4Q.gE2`=G91B?f!O@KaU9tV`I"E,'[Bb:h0j@M<rI?S\m@StnN^Vh6H?=B
%]9f!K8R5m+*Lf-pf(ps>hJ2"[n^0/?$$S<MI?'"fT09(-?%)Thc<i[#m<pOuI/,"Z"=\g;jRsLGS^m\Bm3=$g[FMkF^W\g0(/(j<
%g>U36[pnsg?_@8dkS"i6Dd2PhKnCauB>I\DR$N'tkbJbP?@O#s>c^3(kkXc%..-B-\!+&aP*uR-Y:tM*>-W?(C>6N,mk&j&Z2%pW
%mrJsXK*"KQ]`%B80j[a[0!%>:Qc;Z*b9^*m,=Gf?E+2rD=iasr@LL2VA_YP]4hS=TVUVL;0Cl4'`^^b>FmBGH[^SV^lhT_\bImG.
%<d8_NJ%b^CEW5Y003qVD[20dn463?'V@$i5;s.`#Ykd*,`?to.",EeW+P1l+^9)5mjEBCm,d\pS'c`3WEgb/q8,C_T*_1=VOfpbm
%T@c&pARb7=E3$fM@H6^'5]l^G"n%F,rNsr-B`2r3qt&"^X8[CR0!Shc*\(d.Ok[(AcI;),5P4O'ZQ3QKboL/ZZNlNn3j1>TN,uf0
%G]n;uo^eV"g@=-1L]Uqh"E5,]+Fgg_:PR$[Yn[kn''t@Vq(q'W47OC:SCa&VopUW9HI6@s48ImYqWDZOMd-,Ujmh0dHD:`92"(6`
%:[i/YhNLa,>Ma[gJ%`J*CHVGiJ#0U-qf"doqUPRLR,m3JhL.?50fL1fmTK!l=5.J$CE&h8TRC85O?>1tIbdZG1(e+6=53,k2qHFN
%]4\dnZM&,1)[sM>mFYe#9ME1Lb!43V]tC3q]]n59]8'0hF8kaR`TRg;erOW)-e@#J_J8t/(XJ##+"^U5]&&PMZqtIu\CrGK%j0Uf
%"g$kOb0eh\lFY[>&!fuRpT#PKrU5^5$!odQl?L$FGgV!<9ju`uhV;7`.RPFQm[GdK)&l?=!K0A>fo2\:1\Ob--KE$>5fR=d2NQIi
%SZ9TqLW*&b<36+%].de'Da7dgf69cQLLb5d)f%*B4Ch%Xm^rT;Gk>FRRsXrsYK1#Kq=7O^:oX="+UZNn60A)$Xg%NsXpCrEk+/DQ
%E>XM@mG4E.;Xj'>TT8=5mZW#M];O,Rq[M+FBGjtEeJmu#qVg''T4n*LG?04S^Wo7llnlRCik`pRqfE\S-=kKFqU(LfeUGbtq=c6p
%nWaC;3e7@o^>!PmpWIUqlE6N?_>;cSUI3I3QGIp.+0Cmm[EgjKc@8Qin=:s'JQgsD]=RS"c%ElF^%s0r^O;a!]mdV@P1r'c07n*0
%DgZQrB6pDF<+&,0r;!.mq.].L1lsjA6G.VUJ(XJ.K*V/EMhcKuHmfu`Ol^B8]nO=]\OU_Bo#+d`eVfXgB7q0%+3V_!p.pIFC6;WS
%l`ADsG)hdW%enL7b^WoHH`u1`QJS?O5.T]q[u)jHoCbInZ0uTAmqA2_2HJ<IOiV+Kme6D8j/)%YfA!+e/`_eC&'l=."0QR44\s6P
%IqaB.4DNC#a6p#!o$2q4bJDe#BC'hHH?HMu?!h8oe;6oRH>_UmIbCZD+$[]Rmh)lD^nnX`OtGFdU>A"RhJ]L/>'p/5!eRB'8,LRZ
%;Q504d7phD8>qM_.P4:@r!oi:3.<XD*jS240-06%ifE7QL"_h5/'.!"^YZY&38X\d>c[jDcR/RuG&iS?S'>At`-2==gM)sXrq>jq
%4h%c)rc3-Ahb'p1C2YVDX6i?j#7eG9F2([\'or62:Y%`7h$4aVeGnBSGX/jUf+5FSl-<cY>!L.t=qq#53Slr:le,kO<M'3SR)?/H
%5Kg/NjBR1qouY+gn`p[<Zu?J^hrf3ACUl)G`O46[^$#.he2MIJPI''6+h>YN=5P'8QAR2HDIP]GQgapY](@U7=nPtc6[!#N=_?K7
%oU,**E,#&'/Zb]Hp!9qL;;88"5BSoV6f.b9\GRM]/X*^,H3Z)%f7YC++0<1>53O:>J*O]1's`1O`RUedhp2q(48j6Yr)%:3WR+@-
%[m+m;64s#SahthCGZ]<5)LVK!*d;!<:ZV=HYOMI*Vc-\W.^#s;\p+/`@H<1cq>/B8HOsmts$>Z2lm"#WbPE254mP;rE!K/G`s6Ie
%#IWT<JeU.*?bUC40A^ubg:mHl><$N/ZU=65-TQMD#f35/`O4`=AkY[fI05JFL&4nMYN!7ihlE2ST:H`UT&'uKn*h@fgm6iHlpUFt
%([!\,mpLZp#.Jha#Ze[VOQas02I[@I1*=h*o'H)@4&VA&^?9\3]Lg]LZa82IVldR&U("FSqPj$2EKF@:iM6#:NO>@a(LOl\bKu"q
%_kVIW?]2q?:a,L%EN??N[MuUG@eS32o6QdFpU?'&%j,t9c.qjE--O["^[s.J@ucd'm:9pXhB^d#nDI%kP3p/9FZ5X!5ifE+\jXgK
%NLXTC/&!@[qPLB]5IBgplLWSfE:?1-MOl'F[..S4`o4s7jd?)>`Q&dO"!TJl-!t^pn$/^_!hp/K'COm%=NB:HipfW&Ji2enfREfj
%bL^L2D\qd<"K!J5q9f&$[dl,OhlA1Hq*V;c$4t[rMdVU3gM:\L$O]$\.\Qoder-um-Z=6t#OCJ9S1eF;gh@SV]tNSF238p+pU8_E
%?9YMVGX0jYG:-FRL1gbF`4sp1I,S1>KVGaLDLHusiB3[if>UVISo,3)^:Zs/(UM#FVIcLPhlX'2MN<o-qSh.]0.0$3nrL1[li&gY
%0_8(%+8qR(Joq-p5Nc?;q>^oceW]:SV%oimL80W][3lG=9W,>a^->cHGoN;,!pPW^\JL0BfCV#pc>p/]TMA>P4\@@*oLGJ&9BOUI
%b!A8Xm,bmTek&1p0`1hD](DMW^o"Pfg^DgP)0,7fiCW$g.)sJu"#%\*h;9SkI(rcg4X"@nmi>BIUTq_&0qSTMKPeT"G6TKF/).W5
%KiP^RPK/ZsAJdqhbIp+MF5CC"&#bB2"XG>ge-PWr=f(,jIIlR&k<<*s^39@Pncqjm5?:ilRpQOV?`s;=`LSZr#!K(jHEb,pr8eB%
%V!dPobuja<-Dph5N5Y4*/%8Tdht=88dehS?U\B6P?G8*"qsWZOrDH)j,r-2T*#<X0Am!@-+-0bCb%mi[_W0pFnc8]I=BEGK,)5d$
%0=bKbUO2LtDAsAEj437pg,J2Meu<,Hn#KSEiBoGF+3abQ>H\UW+6;8n:96*]FB./IKHjEMlob3O^?E(,@W@J/&78#M\(6lqQ1Dc>
%X05%,ijUSS;pKijCd&"%qFmp@LV*Ag_Sbj.+3R.rLJ6Bs.sSd1bjF5#X0di"H,8YSLjs<T@"oR!'j;sq+LGKN*8f0@?n_QYqpX^I
%#DZh0LZUFco_\=0\(3ZI>'%f6o6#LHFFs(/^!lS\7K$WSUNc23bjHG4__Pc*55nDa.@*&j:HuF`NWShF>Se6^ik3sH4<`^4Zd<XM
%P=Se,hK@PUT0Hg!pYiF`E$M!<7dQ?Fk?i-D^3n8h09#XK8:i@DE^,"('YUCdLJR?N4O(Xdh/i-fVr>/R6)ucrh<dV;oVHMsn+PDi
%Rm_hZTC3QY?KSrVcHF8sOJl)(*.$8NY[C.e\=;N+qr%\ZSt,$1bOo?'kbE.N*(R'Q06]sddMC[U?JIQlqAet-8UK,C5%NESpjC!6
%fj)#(,=m.YQ`=C/:3$SncJsSc6t38.'DHMHdXH0fDjk.VLt<Bf^)jIfRH!Lt?KmedlRN@V_GP=@i6IkiY'TSgM1PlMieMc2)u#2N
%R56hkZHr05frbT;RSdDY'i+1G^*ciB0-%\+:Fk12/+9R*ZUo,l^iA[In'skB]R72S-`2"#mHo;6o11r,>hje6rV;3XQMeVb=A;[L
%^H>hqmCZaNd(f5Zk>17/laHVGrpateoBY0&5,mZ>mmNbL*m'++Du]9?SGUp1>Z]iq(K/cB\k]Or1-$m_i]OC3DKn&qOpQ=?`P_(T
%UKKct2sWc'q,]r[R15DS%5"co6DaR`*(ka7%7g^-P^bX']2B>p"N0&-XW#`8%8@iR+crnf'a]Ou]DG[9IC9mRcR(+aqd3(Lls\DX
%q<Pn5S<JpPo=k00Tti%/,-L3t>g,U!V):*M4F)MJeSQLO2g<b6+*7''gDW$r(01YOA_Fi"2FaT2pYRqN?%pI+2Cin@e`1CL=?R:'
%I",l6Wa6-7p(Ah%L2dNca3\/kS;3]#C>4hbh0s=HZu"AQ,?JbAO%S61da+RL\qG/69nrG1MOb0rN2p71_8qMUE49S;RuMHj2aE6L
%n:,\TMlZ5%T?NQBFXaiH92XZ2ZH2ZtAk&mbN70.lAi/%D5lVuBo:%Tur@WT'+`gr>*oZCS>JF0t\ho@T9,A't!T>I%p4AKF<$A*7
%k+P:i=\2imk!?U_a"$Pt<I@:N9[pcoQaU1VXes%UiOCQSHoYCtr)DE#"J'F1$9DLQY%3Of()Q>qU^lD`>_YCB(`a/(f^ET>Fno;s
%9'++DRuQm\1E(MgC&[:?4Qk]#h,:"GC8XAM&=9,[[4t`P(XUbi8KXoHme;aWhjTPm*c<V'JSt.G/mShI6+bW]7Fc+ID\bl)Gd4"U
%+l?A3H0JG-EucO;Co&8)W0^3c5i6Yb`o_naYCX6:;\I:l=tnDg%5OrF/40Z&2Z92j?`-17dj^giX%J?[)!`Dq04_8JG*u55IuI$F
%_Hpm.$n[?nl/.N6f/N6GAhVUWjZGp$,64d;<Nlq#oV>H'A?$)a09b>Y$Q3,-R\2rjS`r$e;)u]s\X?,?;_,t:5LGaUDOAAHaJhq<
%I#8AO2@<^G'i-/,X7Zb+HF3##EP.u[-duk$iH#jhb8'6&c]m27<a+&ZH7j>mK@=0*W)9SG7TTBZiHRD[,f03NoT>:28Ab=2E:gRW
%r0;Re8I[S;175T"Fh.IY;G5`C<J*"o1U:fH-&YuT(of\NY'He?@csg]\j/l/G3G'MC/F5<Zh-IO[T)RYCMe.B$-'m-$cAO?j,_s2
%O'[E<Uth"pib4ONPFTT1W_N-1h)It?eE]JEf&V'2[5r_ao0s2@eCLa`Dipc"-HVn%9/hNtjHr'0ED:K5Z2-\s2(R4NlIfo";7A[U
%<6bD@9m9&rWh#OU3uM)PR_5ajGLBpZ4ZRFikVruLFlZW9(uoAO@A_b:G&]0<B5",fnr8),*d<tI5IjGcC6UkH*Zou;XngRNqCqmL
%I97_]D/s_2*O>)M[\+/:Koq^fA5NrcgLR<@qYKhj[TKiD53n6(`@GpZo4lpX?\p^W(YHgjK?MNr8F8+Ai;m[53Vk5R6+_sM,;J=Q
%>f"'lE"Nker@BhGU4@Cj`&Fj;?]G%8)L%gQRAShjnDeaJ=Z=GlOlI;[H4_H,3/tfW/<JN]31WJWcrnB%@1:V*7Z4;G/WCNI`kW1G
%gQ4V'U%-jWPn$g+#f10aX'POaoo&\b/c>8l0;)S[@/V:b@3^ZS``WLQOh8tk,13t;r?-/Xs)\.@/G_l1-2<Qf;5_Tq/U$k-V'/RG
%pIj\c2He)N<\;Buk`hN@c]/rMlrO,rC,Gg-:qfK*>@_,qZYUC$^^#jX`9.I\HmnGI5.-/H)S[X`f>k%:q=pYd5*`'ZN/[(8n4?(F
%+"_!_iRZEF^Wdd]nr/mrn@!0kf]8_h%K"AkS';#&5^b<,/SU"4`g[eHr.@cjnu!D`s+R$)>2_C`it"0hQDp?+rEr,;9$DV?<tnr`
%epMj6d?Ym8l]Gnrqe4n$,5`ID3isJ%ZDE")e1\hW0B'.qhgaBQI"IJV[/ZVO=#skd:O0I*J",/cT))iAM>sb*&(rl2s7jd+FN4*l
%FZd_&e&JjUn\n*fI=0MjE9R)6At#LG[>WqpF<$k6d+sZK\L($hqg@[hD.GNM[ck!VB5%N&UH=c19!r*eR@?&Bhkk%`:Ssk[iu,E4
%=[o9If1dW.ipWIKAPLqAO]L$5&G42BGru2TN%FqiaYSq7=Mr=nQdo@`,AfB?d2)QG*M)o%o1j-aX4)-Y5kD=BiF/4aPI1hN`A8n-
%=M2).oc;eN*GK]JpITe0a*Q=GBJ"\ql5g%<A5*,%T';j/atqfH*.H`;rN,/YNkjls)SJOgUba30TVKtMa&j>-I*LX1['Hhd!,6P-
%\kTC'\k[>;/p5m/V9t17l-_IQ5%$V@C)/D\e(UC*]<ZP\f@!@*:?Sco4;:&j%YhRm"]cTIh3;=Z/^cGFYcI0nm@8+t^.3BUdLWKH
%cl*s3p<9UL)@i@d:CciUSs^X*$F]@@%Z&c#a+gYJHl&sE&I6Yk4N81G9hQOsG1Np@N2F9jKM1sYV&SFU#n/jsXC[h'4'dg5>D.Ej
%/fVd*FJ3s6d-.if(G6_qjk;\<5Q%SBlZ?8^0&:TTY"O[/S=Yc0\`2U3K@][/Fb_Th0f6Q2\qFh0R2LbLCVpHE=NPNfT@<"cI+(i6
%D9qBdARb.Uc+_J_+lUo<M0)%q\nr#:+D^s+0#<G6k2L`u<le8ID*>eR'4CnaCVD%2Uc7Lh>qGFMXV/-uYON(NaVZX=!8SpFmbo$\
%JP"'/F,lpu@CN:G"sR;Ndlg,Q)NN8o$IaBXBuhK90'>\;d689W&X!u)YCq$F;ZXR(KLKi7=7A)YI9oJmlEOX6(b>YScfd9/dhL7&
%FDMh:5Zd8%H?22kR=kT/e%4N]L(/#di"JWM'b/UZ_*PjM*Tg9AOd;uFSZpBrFAGHV`4$rSJn`EPdHL(IbJi=$O0B"i6s#f,Cdm]n
%:.XjN+=)qKOTS9t/VEK9!I\('LpVfYYkohU0?X4%P(;uSbj)d]Uul1sg[t\\#S1/RN5VUpR`cL=\)Y&?5]f*G!.9nUB$bfO>nFiA
%))ggVFTUE0Y"(:;_@(14Qo+9$Ya2JL*n)Fh-DLQLPpn][#R^(8/`sf)ciH!)In6#1)KR98J<iieQ3Z,/@%o\gb&SVL"r89e*q=?9
%hJgqqa1MU`c,Kf3#Yc-!BZl\dOQ[j1&ghB@1Ne;?J5_,;_aSA16-s-(Fc[IB*@-k`a?UB>8pF_m*VVX+q<NbG+rFL7:HVo1I])*K
%Tn"_YR'9^Scldq#muq-lTms3j*r`uPdMaYEf1au=@hJ)Ac')sC[mstIBe2nj.?.G)B%Z\+$m.2=iC#kD0W%9sMUFm"&h>TE/(+Yf
%<>MQ+[\rnTV-COb2JBtE[S9P:O_,n;1ji4fmF)++:^D,pTeXCI1W,NnB)$1/&E3p+$/i1a;FoQJ>fK3O514ShP[0fj+ZSf`Y/3sB
%r*-=S1_m_>;COau6lf1[2q:nAId5kk=Ghh.YiW(cr]HWM[tSCt%Ta1_P/nYf74J<-dgY-5@5-9\rcQCcif11iZuniC\eGU/ifGXc
%BndpXWY*:;U%I"2R=Sg%"3V2-^bnLCiMo#V7+,Wt"X"t`mk]LhM%p3j];sF;\uQ\21l_6Bd::L4@7eT^*s=$0Sn9BKotW"Z5m5L1
%^rjL4Y8K<,$T/^Z)RMjX**d/)bgu!X9\0kOTP:JGdG8Q+UL]!M<f=d-&?=,OL1ljJ$906Y4AmbBW)$>PQ76U3;?iX.>lU5nUdHM8
%_\RlUM*gEeLe>.l?cYVZc=2]0A?e#0K$F_fO'&L"m"L7Tpa<"t^`oPh'g9ldD'^;1'6MD)f.s!"%pAqD!@272">B@(n4+k"Q?X>>
%#SIB:_WuZLCQR'.BBSP2HuN"&C(TB^JP)a%R6UaHkm7Eb!K53d`H31=11UL=$mAmV.2B:i9h[/@+djYm$s'<m9H+,.6_G9Rh18L\
%W_SN'0k>ooY)$/((A)[?oQ.>6_Rjub/=<`-lbI`cZM\j_Vh'Kb@[Ib.:ppXS3su7/dEjbb6/7s)YfTf(_FL;8YVDf'l6]FFaUhNd
%e"7%dil,X\M)jQFGR@[.nhS,6^LdIcrp88[dsshh#Tl`A?k>50H41nOUoC]UL+,Q0.LX=-BoW'/^8GM<Y<-Q<&2,b)kX\9"D74)^
%Pf`?EJ^pqC3aEU'`9E*C#u^sh@YY_g=M>Xk8Hb8s&7<mS_\2Gi=L=dhAAJ[p=Kc<YNt59&`]*:Q4=`#'hL]/T\7Q#'D_V-7,`QV2
%>m=,X6o&R]f(.Kpek!o%6V)<d&toKPk,c'1KE>jcLXd<h",jOO2INcMpLQ)&F3Mjiorf+E2o#CTBBC7HhS8sd[i`BbAnAE#B3Ugh
%AOfF6;DFHjD*[W5AC$"Hm(r7GTEme\`D&QpC5A''(!U4h$E&d,L*C'%#<Vj]P5;m?f^/q`X0GnU"3M>pN'l+2QqZY-iP<+s4=%=h
%;TBt\K%u'P9K1Ui+5B&^Fo(uR"QH9Gf7.76?B^incICb)W3IA`(H,mAdoKOrXX>.qS@WV7idpTIG&"O/4ANsGBW,d;bYpcUXB%[l
%Auunde5H$.9?E\fHRWD&%9\-*T!8c@48K\.!AdoDON-u/;VB!2*M;<^6[u+g$Y2L.D)>^LOb)oa3n"mEI!2h_gU&h>An<X_\[%kb
%:X_aaPFeLR=Viu8h%5_pp,/[=R&0r3!ACZ>@FdJ\3oIKH\Vg:o&pB.MLqgKT,=6qi!bGkW3o"2k[RblS/R)S%G\B(*.k:>5orf5s
%#Fmh3Z.MiX=-g2UBV*R)WW1TXiMC.#MER-*BgtS#_r?J0%%g7<;QX5g`<*C^qL]]$.@7aZ[DlST3OjWUL(MW4doB;6%<(bqOC7b>
%dfqukRq'CCD3&Cm5TqXPOVY`Ds#r/ae(5R:QjqgD7I]!%)0%9?\V#)Em)0lKs15CqjGkaglB@7olB0%QqP#Qgd2[>tJFn3nOA$HX
%:KV^J]ob9%b-]*Hi-ObP%/oSVC+V1D/MZ'QF#5\jf"Yes?&2F&V34-^DQ^Q+e4@W#K]BVcbT;j/ThT0X4b1.V-L-a2iE2+Y=BXeI
%k@uSEB9l-_#+=J4;M4:B1OsGh>HH/73$o@go\It+1pOb+,\$KXh4*`qEiGWDdNFN+/OL*c;(DW7pr3p19R%Ar<a*XSS!S5-LVm"W
%<ki89fJ0EWDJ=lpLLhqUa<bQZ)Q&C3=WGd3Au^-M3WQV*KPDtb@A0r0cVh[-6e<G4A@S5j>+3@GA74rn#*'sj`IUejB[^&47s:5F
%lrmh6b(?q>@M)AVfNNF>iasJB(bK>%R:sH00ro)F^'U"aJn#/`3kE?#%BP'(!"r1k>%<HHk(L/Q=^;r$6,4t8@iV'lkT_("Z/*Jd
%,>>L5SKmFl*>P"t9TH7g9/TBj[WYo8@kJg]3M(A$rTf3!R%J;!+p^`<.f`/;[Fgq$_F_f5aB@7=)e5\GfoZerL?bqD!_T''nQ+Wj
%QE)HWLTTrb[@!kfNY0^si!->%68CGndo4XG$Xu&:2i*HQ!'?=6/r+;"NG[^[_d*pX\cgVm"Y`kC&<>/,kuS8c3EjTQ79ptH2N-,%
%orf+GUq-(XnT48HIqlq3jAI,'DKA-pcaoAjC'_\5A5n/S'2L;E^'#WtMqtBsBn)9O^oBMlSko!ucAsj%)f6V&jh("I'#&BI"Gntm
%@kT@c<T5hXaet@rZ8om?Zf*VNBhiK/jpCVsSBr_P4%]S-G_n8mN1n)KpVD2nYUe-2ko"Bk<T.("<:5pV2)Gkq&"VS^'/V6K7=9l#
%M?FFRmZ'rd/@'[da&B%f)>eLpoGGsVhC#*W&o][pL*e`igK1(=HA:br3_t$jGcXUAkcr/6bi$h[OtoM-BJLZ3$85g,@Ma`D*/;Ed
%+roR2S4#[hC&7`g1k#'YC/>a@X9"$;N&$5?lX5Q-i3>QN/?TFP,34Ku=W<)=Sk+$XcoC%_<qs7;,DaR)3D%2U!"fNJ>ukDF4@f-.
%fGXSqU/5/DXO8Y$_<J0s%DHKp%%0lH;kYrhSE$Q[V9:\@Pln9*cbPA[OR&'e.&e1sOgsaC-EK";Ie=QB3Z]LtEbn^,#OsNMo5/cq
%ks!"hrp;Qj:+5s,Q3=kXaI!6)eI79ob*YFh"bEa1-?S8:VD#<o>`ID\BCeY`:#pUGMqcZScDVm[G='Q-rJV_3oAJqI:HG&B_es!,
%^+5Lh5U+K"U=2PcL[Q^?,Jet"$@5B9VaK+`@?L'i,S66e_BVSY"#nF"[B;2(E=0XeM9MW.5aAXKh]"I\3:_?6n/sM';0[EL8d\'Z
%.$j%+,mhLt-qnSH8.Z<R,R4<*O75$(;C#Kb.dmX"i)pDDQ+I'r6`)GrQuEZ%,@\^I2StW;9&P4s9=r$1=HT@bZuojT^08R3531-0
%fM'1HRnfiaEe+EIXu9^f'gNtl'R&m%SM5k<^iKT#OZ[%IB#m[d?iaoQ)53m<&rkRh%(A!i3=VDL(Sk(Spq\q_,P\#aFU64?@`0Mr
%c8Wl-1<r<j0PNd\e/!?6_h4IUp5L2V.nE(pLYX-:C+UW"TSF$Q_d8)6orf*":>`:<-cZI]889DnBUHA9K;iQ7O\S:?*!$=ngQ.Ob
%8<RG?aFJ?aq+E.'7b;5:NZS_\@2m[*K%7sO>Q1)MF!/nQ8$NUaFDa0:Wsk<:5'!fjRtfa7_?7U1,Lf(+R"h'Vi@O)f6-^4kC*Sl^
%%OE,.O#:9^CY/io)a]T$E56,ure^c1%Qo910@s[D*3:Ej72ui.f-Ep-]!@ITAfF'j&nlgicLL_)BMQ`l@t09:H'YBl$CM-c^Lm7s
%.;CL$+hB?+UbDn,N*BS`\`Oh\/(B^[E<]"%?su\<V;SX(,7/&r'B;Z,4Z(I"J1]?=3',*]G]<Us"q^%&F<RAqpnk5cO<.V&6Kqfu
%'a]TW`\9i-+fdKm,f1kflABY=Rg]3e;86dB-]7'@7&u:?d,[$=F(kiE^Lm7'KK=3BjHaL/>p#,M:C%'e8=hGj',mj9J/LCikg,*m
%:3_15_i`FK=-?:NTcc!3*3+(;Y>:>8<N.;]<kiPAOLE=M!2M;n;2,aSUF,=%3g=Rn&c'M,FE&`6Z:74N&73i]W^mdWj<0P"i[RmF
%e`2c)+8(&8N1"Gj/q;.8&UCX?@fFDnc#r^3oaGE8kaof*]EsG=>)P&FI-?AqpC0bgQ'De'a)Vkq,phB+L,,rAUuu.`YROhrKFqE6
%'9.7))``%'-o3FC%*nU#GKN7`5-&X_(&Gl-G!\M3CR$FPfP*cj8Bi'1DXj1*Cb?V'')T-B2K6nP_XK<l08Q9V:*#*qM%$$FLo3rT
%cPl%3aUAPI9MQ8@,"FNKM1Y>`kL@2dVrP'g+c85s5XoA,o%+<l.@t"/'3f!XWiO1K`@<jQFEC:6"lUVqMZ?_Es.N6/Zp_AH%`0)V
%lk)"@X!30co>@75j33-IFmsLelbO$81P@g;**LB->d7"/TdX$$lPQ@;qE>:4*Mt,%Y?_!6-kt4JqUn"408\kkF;hYUP[k3?"#MH>
%S22j@<h+M#Yl6K^W57jQLX!uF6;`&F)8<Dc/5H0&,T/1S65Z-m&;a'dn$9L$Oq:I^@bOFM-\XhE-t`-'AJh`L2J`KI%ACq3@-*;g
%CF/*dFN+7l-AZ`3Kl&o/$=,;Yi2%<-T+(o2W@jd094Z[Y1+=6$&WO.[>6/4pln]Scs&oFCRV(M&MQQerA0Y2RXM^4&7unO[-QZ`+
%2dB>BF%2n>&OfH'N-c=Eoqk\cYS!QJYdNF;+Bcl]'rg$3-NKKc`kmD4fiCSUVOIo;`2Mj!Qk'h#>:AS_LV?uZ:E)uqA(d@t.68@2
%:Qe]fS]p)T0O,TfZR*"IE10'DisZ>S=9hT2.Zu^6d'3WZ5nkclP[V7Y4_Ld4%Bb%RlDG24$MA<NmMrc*kh;QcN!rS>&4==c_[K[1
%[2c"Lffh4Y_=biZ#LR[V=M9<7iCd2rmtJ`.R))MP`"H@6bZ^;<Ur[eXnf!:P#V.JVh]=s4e.[XnJ=&!%<VlB6^Z,=1A`Wq5fYB@3
%BHo"J:1%rO/Z]MgZnU)3;)P2,T\@@r1=RI&_i'(aK@<9L_ls_NAq$eS9JEgcn^qK^?A!Hj&V"a%f*n>TB;R9u7`_]bLP6X./i%ru
%h.9/P5eDJIL_Qc\_Mp)pWeCUrW#O5GH\'WmI<F4fCpG%7pJQ'4[Sm.rf*i^0U,k(c@X4J9)2>5?n\b33dK-kD.MH5SlM4:*;0,ij
%e)69p[MK^TZF>FQArOuRp*qGL-Io!r)n>;DFMN3=@4,sVKMm@2K#J3UJ<65e)Tph!HD+o'+Fu1'R;V5MF-);n.*F$!WhMP//,p73
%H?&arL(:VV>ZaFH$amCbs,!1MAfF-Rb.`D8d,Qqt=-IBN0PsE;KY_mi.0srgM*Wikns+s_.r6cc@oNJuDJ%Ptf+"C.!5'[]LS>dM
%K;-U/L*AO]Kc!.$`],N$%.blab#`/j#gmYA*/;'KGrRKtc-R,_a'o/";N_&DAGPO<5btM:q2cdor#j2aL1/8o"*+ni/YQf]^>TF"
%FJI80Z9+9p)`)q2-.qL8mkZM=_F'sO0pp)AS>*j]Y8P(,BS5uN)g5auE)!7O?E(pKYAhFtU<8G48@OJol'c.+9E'MhcVO_.i'jeY
%)&X1*@=Q>U#-Jn3%K8-E=9o406RiZ)*umq^dKNd5(@bshC!4(:"WuaKOo.2VO?7*q.D+l^'Q/Q!K]o/#ffckA2$4)Ac"A-"J\!m4
%$$Zo9l)aD"?WalNOO19Ak3gTBm4b/8EtQ#_E<]'V&Rc]3Vm<5;KY8O!J`qiboO?),Ri^A#2+*2L=3Xbe"Rq2X$5k>>/u,&`D$;KT
%DSV'A>+40Q`jmM/g]4;s$m66k$-bOe]`8=fQD5E=S6RaYrTf1Kl!Ic\COj1*Y/6?l&Be.j[QK?F9q?nFE;"VC#!%'GYh>(Z#HmfP
%F\)@[X'?BoWO+ZJf%FgM)u,%)\6]HG5LuCYK+M%WfgpsC$l,W^6"NWHQ7E18Y&np&"[W=hhG=\0XtWB6!iZL?bf\Y,%/$F/PTH;B
%9%5Z72K5c0VTHH\,R<K:&o`pq.&C<(Em?gRU+.4>?_JI]A#R/@kB@M"GC<7ZEB%gPZXBAMVTNR)/(n__"bq)m%4RB+ZN8BMop[Eg
%c?6Y^Oa)sEglRjK"-R^m=L$=\@Ss#=@<K*Wg#)0@'+Gm.I0_t><1]$Vdp7_Z91N[<6Fi:QROgBp0Za)9<WMXn?qdrYTP('M(b/2!
%72uqX4$uMeSo/Ni"-O/09H>Q>#gC^A<ta<th,_*A^Q$)qUa504$3(!'4m3oQV#[)Id&6]-?mVD\;!):%"@YW0oFt_(Z:Hs)`("AL
%C^=#aR\k+"0Gn,/*pc4kji9"*lXR,S;8Qap:-Tk>bN(DjYWlAJ5=Qi[LTE>fW(D:B:Z<TNfS5RV]"6reEM]rTa$jYcVus:;5?eLM
%WXkfQ,@hNrGh.q#dKr6-_@CrM)Q3@oL4NfA#GoDp1!-ndhkY7)*"*cP9FFuU.XM=*'`\A2QR"YrXq&jbiKr0D;MDGD8ENL"Ln:Rc
%VK3en99))>\#\k)f29LZKGF!o0^9n&TeWF;=ogJrP(aK.Mnu"p%W8V)b&2,#A(gO-\<UV[_pU*@ABHAU8(b[)[C4`DnPIMLoj$pe
%&MDO.GV0l1MDC;!UIbb*B[l1O,:gt]6e.UL79M=_+hRPm,cr7,N6k(Y%'\IT6`m>gqQG<??j<J5JaFX.W@@h!jD='H&j>Ad<eIqG
%Se7H2UcQBB3%G3G">r%:"DO;g)]UII"t/K[N"1%LdT(<,_2e.*0&8bsYp*Y<94hQWiFkA,EeAGUk@+T3^a<^]C:5UEp=OgP-/m&o
%L<#S+M=sQO$SHgjY".8/#WA["F\P+2/%Rr<;?Jm1>8g`(:,t6RKb>0Q(V7$k<]-Z<%%><EqpCd20XZe=dD\m.B=?h@/aR%Z0I)XK
%37>YIb+0\:!Xi4YjJ)#Upo]7/]A/su`]5i,)q$H1pb$Z9<fHu2$r=XUmqR@h,JscKXG^6nh=lRea+2pe7mr`BX3tMI@P2o#B,7La
%*+>D^Rts+f4QG+0Fk-DH6k*>N0\86['>Q+A$'^Y=!MdU&FjPmbik8rD\K:hcq4WrDLr)B&7O$&f4jaf)LJA]a;UK<FLIo]^nfjI^
%d@?+9H&0%Q.MmKP3"5tT-^Npaif8Bacsp!S&og2E9-FD]JT7:Y+1OLqF2XRs.l1P=i:s2PV>4EIpVTH20R<qE711&^QuJZ9Cnu<U
%c^(>PI*lH`nBqaScOB$I"rt2/^'q4":mU>`lB+DVKiAph0@F?dEjfRWq#n-#c[8<]P<K(\nkmKp9XG&g)sOEm'V9"KHT9s8E-/Lt
%71<+c]+5(q`FD9h\'RjdR0WWiQr:AM98EOt+J`#Q'dU7%D6eNiP2gfNng$4J]Ja18p[(8F*QMdGP1h8h"$=?<@u(.dFZ;`$%%B.h
%9A:]sXj,pOn-J$2QUXja9-0g)Q,g\d=J/11hXW9rNs4(Q@*]U,'32K>M3M/RN#GF29K$\-;C0U$p'3tLLQ+D'6^i&"6:Y:4Oi%AI
%YV`V5.I(>\4="p'7cGp+"%1&rL1dYtWkD%@1eSjr*$HR]Ubb?Yba@VY1%Jc3/9X#m$!*IF,Xi7C)]'PJMt%6j/\WD;(Ci!Oce.8Q
%GJ5b[c3C1ZTI*A>"#`LUKR(4l(V3/(K[7J"[Pg's+_=OTndQ[P$qNl797UOl!o;81OH&RX2"=CLO+s+Ebf8X+8Ks@roKXRn(5c4M
%,EH^'VfR9O$:`?tRBlTsFc<*B"uJ7A"@NA9;1K2173+A^qLVg)q)FbW//DfcarrH86YNIkG7We?RYb6mS?NeL+cU+Zrt)A,HR'-W
%Jb9X\&=53Dl7h$/lkV-[)JNn`TOF5G?.-QMe'lE6j(AR@5;1;1LFjZZ>pVf.6]4gXf;,AO4nBqkRt1,FkJB3a\..+'Nf>uN`"GI-
%%2:g,VV7+?ZW62*.$);3fnO!>l;^1tEe+4dd@5oUEaQ&AFaSXDQ]s[GA/sV_8&2nY2K\WtiR!\i_BEk=2emDP2q1/<!):d1lQb8\
%<qfa=P70as(i(3!0X.'7>sEO<nrQ?.ZAF*ERN`h9p>EC;a0mB?2Z1>TM%iJ5S=&^iT#o/t;D'.FM4oqI)D0$\8'$;t&lPlS&S[d(
%^osLnRj7J3<P.&A&OlN($mk"(j!l)lB<A/>i.d59*@7nPE",[BRWj8iRuSY4c>tuE8N%Q$1<7`9FbKeAi%@#(m3XE1*Pkkb9kc(S
%(7XL`RPN)*.BN&.aE,H/BE*%F1H#5\akT0"4e*]WU^BL3^CBkTi7\;dRUH)HAn7U0+mpkThGbL1=^C"i.(lYa07?&YU,0a/F&fh%
%T*s1k>AOL1=&fOH0jn<-g*=)P!BuFdWk"4:U3r,tbGL+cjDK$s.*k`'=SR#LO;jq]>2k_*g^(s_p)@s2H;XkIKp;*KH233XbNl%)
%3Y6gkBi7dL#/&]oL_&e;CLRf>b9s,nLWsEZ]fuTW@3KlVL`9*AgGj4Pgl"'01*91gfka4BK[iTEBWB-o_WZcH^_K0g-V:pD'rWQ\
%["jB_%ZEFq5!i43.?C0gM0D-Ac4&4G3e$/+&;(QE<#B:7<=qlFY%HV'LA2Y7r/jNQ%V&-QWssdsL32F/ck=6YkTK17U-6LH`F)$3
%A&J3l%s?8]Qo>RkPqH>5N7`lQ..)_K^s0fRa.\sDYf)IZlO4G(".d#l'N`9-"FA<1Sfuejf>,cipuia+<E($M/5sCR1qjPWNO_4R
%]Mqii3^[Up_e6jO[&='tH=Uk'H1;+)k`./_)]b+h`W,,D%WtKXjs\jD?@4AQ8eqMd!\9`\;(10&"WQ677$S1sjC=)bSo1!PgFmSj
%,c`\V%-`B)E$DM5"=:hhN<+^PF;FHnQU53.;b=t5F<[3t"$)>[:'$"5?jt$GFk*%B*i&$I\+Th%5hM)#ZD4]FQq#c0!*r,fWL:[b
%-3?JI_7T9%jcG%2!k.;!Wc8)D_MXf-$@tgso;%A2h7$C?<L<GJZB%kAh$0C9@).ol.(.0LT8,c;#5[%5HLbX<qq6"8WXX$rZGg9n
%69C'O!kTuf;;Q"[h[WR6LCfHH>I&6a>3sc0*Q\Ck^5qK/.'^jnJ\R[9V_Q>g=@i:mTn:_%=L>W$mu<mr>]n!I*ifs;%#7.d,$5;5
%Pq?-GZsL0t?!GllDiN(l6^Y:Jlt7ZI\Xqfi"tFRp<fh3093S*'fS]-mP"_2f!AnV%-Qk1p=S_NujXT,AQ62BIZ9#j\]:*C^W#.jK
%*b#<O?4CnVH=?@_pJ(fSHSB#I;n^JB&m(625\\=uE`>dXlc6`=>"Oh3i/1USMNf+8<i'(SXB'4?$?(d;kn,0pclBk6GDTn;fXFOG
%EtiZdQ%+Aq8\C#O`NZZ[jh*.A?oCP10Y3K6="G^:$MV$ja<l*q<d"/lI?lHEA1_b9D4^uqC7,Oka>5@^^L3R>+.(-m,cejqUE?5[
%k58M`@;pohY$QbZ"/,r:/VQX?lX;Zd0^2QN0'AS!F70l73!;0TA*5rObhQM>qsdp/lNjOf@hT[/e6u8u%o%u8SW,l>qZmGiPjh/d
%`:t^i=R&LGk%[Fj$m?8'=4AU<T7CSWk=Q8ofg1a&DICn+2+5c8KI'(SFi@^`/.NL?]hWrMN,i#??n[\r`@,C,RtiNDA$.[CWERP8
%UMb]!Cuf\QWj[G-0jnkfc*AQ&$CAa1aB0YN^&j=j5;Q/[(457=4D`T2TqY!J"<gdo:1$p9'k;P5Jrl,s7go3$M$,VNUnd/_$@nE<
%Ujc-2KWkmJ,!lYq_gCLf*^eFZU30Or*6[9'8Il$&MSfPP1n-;KdH6&r5T.^q1RD<;JEg:$j?uNT>-8l$I9h.RM0E/]K(m.;9OuXl
%/g/GFb^>D`Z_=GNe!./!b[*lZ"PYUUb&2n*;s9BP86MLdqE]q6_S*PZ0]0[,H=;N(<a>:?653Eq2MZS25*7bqBI:TUKKM22E")/.
%>)FpI^4N5RkUN07XDi`EbR.XEo2&h'qB9o]Y?PE0+\');<uT=]Q/RQV(?M4.Q&DL#MCS^)G=f\^:m"6l=bfNbiq@BUm`5&9F3C3S
%6QHp=P#c[@oDp;IC3`aLV7O;aB80X7-f4P[8Zb!cX%q%k=*P=Cg1&V.NY>Ia=hZp2\>j[8C(NL/$aW^oE4d)Q?q5@N9?`:)Dg!*j
%:_EQVa>,\c-'MWIR]BW%LsFr#k5cEtOY9u"p!I>:0HFa'gj-_;IIZP[I8LBt'il0m%c]OCe6t`]'urW$W'X20:&$kG4`OQqb`mL,
%TD_+t'p@T86JSY%ekl,AU*G=+b7QpU;G?.c->XSAC2(Q1kV:;%mZiJOGB?f^=hV>7WUJJKil*]mZ+6Z;7MZ^LFZ%:*UV27&C9!hV
%/g3isMpU)j?uabca$\7cJGT<iQ&N%tBrE7__K.+OE!gm[d>7bE8dY&F>RnYSfF$FXc\hU-s"6h$>`O^+Ll@cbPe.X_1+OeZ/5bAs
%K`^S=oFmkq)H&-+HfYSL0`uOHOq]rh0t,+X++7'f$UnYuka;O`O4^h749h<+8Ef&*\$hoDW$aS3aA.iB!mr6;'MQc/-4M'_&nbcl
%,fKFFU\#Q".A26Z.9_ZR%7`f0eYG]cPgaB!bWoFYEsVpu=@l#d/^=#&oZEX]V#M8K'`<AA'RjMNdmEko%BS[FLpsG)`N3S@8G&3+
%9[u)YE*]eg;P]ZE@Md%11:Nbt(("(ShGntU*D*$b6NQ&$?A[5>4K3t^iMM`nAXHB,^jZZU4_.YYfe+?X&p`0sKF^lC5Z5DD8c@"/
%IED:>3+gJh1L&:lq"F2K'4&:)^%)^:P>X6EkM\l19GDFmlRppQWX-,SW9UCdSj^2"ah`h"#S*;3qCH8?Ej`$i?.M"Lcui;ubsS*P
%oL!$ak:jLeH>03u!i.:^9mI"Y==S_1c'KaDe^M=P=fo/Le[Yfd$6p;3)DVNJRO%fkYc;@+k9P-ag?2UKI1MlM4^7R]ApXoHfN#mA
%0TnA6B60%a$Pp2%j'_H(:bp579>VQK0/*iY7N/;q0$d.K_\=bJFK1H7VkM66-C1m:\e'52.E=KG+g%u3(P(+2_c@ko@1tK+R9>s:
%9P0k1AMUup^2sHYZfJVUr&1f[5HN7S;/[nU`'>\-9C*ju;<S<[B>4df(=HX7kO'**/O7gPSO)HG8#Crqi6[7r:!hGR,$[dKe:TR,
%_ImY/;P:_DJR@%8&g*-n-tl^kp);_!>dqMZp0?(d8MB(DkG1Sl;LTp>*PgXVG23V`/VqJ^db2DL>ENQX;`W6Y7s@psQeaeC*6a4S
%a];\53`nSG`A2OaQ!NT&0<;U0n/3.l?sV<C3d16cm$F<sb(U61*ZLcj.=LunKG"&#4%:GZC%(#].^!3;EbNQ\j#$/-,mq"u0Dqo1
%VS:6-4t7KKR[*ufSA47+Be&,[[&d)^T^>A&Csn5SWU;,RPkIgU_N'*/!q[ahJ=aR[du?b-($Y%=qA9W'SI!8(?CW]cDjqa*YdaaA
%!e_Qb6fO92KPY+/jo+5#$;&9m$Z8/p9Xhr;7ss-X&>/'*nCj&B.LtQCVCO8o7oN,Un5MFmE?*Gm'FrY@L:quiX%of<%;e*6M@\9W
%]2K49U",mUH?;An@-AT"To&PF-,Km$in045=f2nVo0!QtHXX)[[c)<aiD;$THP%tV%WPY@K5ntnSLa&$e4ikqpXo@;s.I9CMEE,"
%-Y3j_5>V'R\8fn$_r2A[*:iTY`;,:G&>gj/NkgsJQ_q-H<XrL1n*-,F>lgd`Hk=!9?5E7*nQ2X@?coB3#=nQI;*TgYjg?E%5k[`,
%J;u8tl)GIVGUBD+L*WTe0,b8l=H2@"[F!u&=*\nFAW>"l_^$18`PFQ<_R[4>46rB0"&I3LH(p,!CrNV$%Q')DAi#C'H_e?Em.E`U
%`pm#-*3r)rha')'b+\'??s2Yf:R2V%&CW\H(8O=P?Cs$?@mII<q@A\5DlGm>30Y]k=1@GBk=<X'M8LO(MT(2:0O"\hF9i!:3p.^0
%XRRGG@s-01qWI@c%klK>^EseG<m\\_@uipoiFkq]i\M`"P;+O&!sXE\X,b?7n0:9hSnOG-#*GY^-UVnschiBPNZ]OO2Mq/.Iou0#
%r5*I/,I1l+Ch'E\3!ii1KKjniV:`eP%bGW>qOR(I>C24]\C*6uUH,?'gN?L,-%e:CE:o'G_HH#6\gsVI'"@D-s(aB-6gTSf+qA6V
%G#k-H(WCF34<h\.!0)lj,aj"d3e'08jp4'&`gL$.2)c,Mn`CMQ7j#]QG*m/]S,Eh9G2I;*'1(]X:Q\%->"<p%cV5f'KKZR$glNV4
%iYKH[D>(bQ9q+<-TaA_Q'qBup*cE,4Z7+JEFHRsfF+)c3Sa`i^<*WdI!4EjWS%67X^"JGff#f8e&Yl&)LK7Pmk:3pYAOT22D&A[m
%-,\CMP2>FpCI!3IX"J9WOT&l`;5"od9-Z<9+#D<T/n0X00pRQ0KO:cQp/=V'((p](go@N%&6G.dA,1cfj9:$/:[E/QnreElgd[C#
%QJ>(VnLVOajpeo&)W)B:"],#r.Gq#0,r!-]U`2PqM-ZAbAGM6p@gLb%N:"-(NZ_RFPVQ83HlSu8##9?8/n0pqH0dP7Q,kaEM/]NP
%H*$[0@m#E*\D'$ADt2Etb@+(;d[2l066u#"I6*G,;SIN>doJUBq&/?*8f@p+J#4BBFZ%M/J)-<=K1+&Dc=Xgc35_uP`V",AJm?]m
%a5:Tgi<8an*>QnR.m$EdKTCl$oC-+k2\IQt`8[<Jks`q@(LE/WEok'2]InpdL6*YJ#:17pJ_-#B^jRE3P%@4.!YU.&4Hp5@H>ScS
%QYW'n\O+<9(\[YmVMA\.n[Dd`fFupO^gRuorUpXi->c>WO+t[P(?UM!iELsK__6TcD3Zp+Qt&LX@]6+3#Nk@gRjded6i!e#f1ecu
%Qo<p2D5l,mNKllKQ0^\8WDP`(Pbt/)\\,(/j%,6YKupUsZu:?(9Ts,Z3/8GSM-TP(h]&FbXe\I1R*(00nt<c`/3-eB9(5#\GVT%G
%K@P6)kIE@o`1;pd*+"k&EnKM>FP)jp6(Pcj_F2Oh2%huLV&9[gGG8QlWjuRME9,"O*\@:=QD[LQ[7J?&mP\kba[[jemO;`UjdZ1q
%4YAra1Nd;M##\"/`'F<p%,\::L^DCDSZO$!P&Tlc`9U5dI8B7dJM8l[+qZaY*eKqI_h8g$%h4u<!b(#B$S`KNh;F#0<RI1SF#XeP
%-a<"G_F8'k(:K/(4-lb>0SYD:1-<91HmE4KPF**V?"?[GH=`k)#f4g)c49!UA/g7e&5t>9kclHT^\F5aW8'Cub%Is&@]N-,@%j:R
%a9QQAPsLkWZM>Yh"3:N$;X7!C*5q_7_9[.$LIR>O[R=eEW-iu9W=^cXS8qG,-YftW&`pFA.GKe+n,iEuF]sG_'uEqg?d]B8"Nc,q
%_/Ut[5%<qfa=.YJi>5GhP4<<T/^^>a4#Z8d+rd(olA&X7cYKkb0$t9HFDS4<@/+d7'(Kh.F3qI'BI%#.eW1F<K7#?U3<G^nbMkcb
%W=r;FHr2/3'u4"?[,>YlJ46VmcDhYsESQ1,@<ce?]?6H!64/cL2RG^GSqY9+SAWL+SB1X>PE]K9=Y=L25Qt!p6H]\7<Z7_)U>Cu*
%p:O3+d#Mj4mp5::(m^[*W_sm36c)&\[CV1]:?!s*%WU@?/#XXg/o,md(RVog?]F!4;TWa,cKU(0>N@(9-Q`!Xq#q='eTV(u.h`)g
%Q>GICH\QI+lDi$Io!,6A&A)nXEA8AfK`ukpOX^7%`V,63)nnp$Kfpp**=F6cXd7$L%K.&N\s,f/MmBqR`%'tAm*8$$Q>c@1&\Ks<
%,`Kg@(NH%"D[,**oK;6ZLblR!qR"pI(,(=O$eVJe=sAUBOCVnIh=_<:#N8qg*rbjC'0j)LbK@fIc>_(7j6so5hF@>PIp+L[gX&?<
%%o:+:oY);2]WI?Qd9V^K^56K!fj-[e4ar?A)"sPJpj<197qcZb%jPf&i\VsGLt>?UpnH5*:NbD+0:?Nf@8aG*^/U)&3a[!.B]n/i
%On3hF+.H3[>ttiPQ/ruue&78.YS`C,`tff@FHd,dSoId(&JB:^bod]>k<[,5`,Od_T;<JmT<J<88mHS\CZ1I=XNuO.80BmST?*XC
%<9\XaUdHgHNladdI+C`_D0>4>">eQ_$^GpFH#Y]((6ZIDQs.Z0;;*In#,W4$6OKL=n4+b@d?6[VY"c8t4qDaREC,B#ni<_hg'`DB
%QSi8E;[_2ch,'MOTd(a4SPhKU$A^[$$u2_%hdlR4^.[qcc(bXLfCEAk<n?89Sh%LG<!,X"g(M2^2,6+`V5OE?6n6QTPU@kVZ!C,L
%`j\i_90#>7jXES3J%Y<LJt:)BBa.4^-T.`ng+6(2ArA/?_f(9L7,0^gAq<4/`J-?m6!UC%73W,oAs$pJa"B'+@lNA[Mdm`MR'Im0
%9@cB0Otd]F1'FfCl=$)Qj<S`^_Z#3I,g%-`&Q&d>kcT9[mh5Fn;/I^]o-f`b-Er>>X<iS(8"$YDIh7fBc;8kbM.7_>]^lP0SF#J1
%.H6$\?Hc;2V3$Q+6]&=\Be(U.l]@$C&oh*R'@oV]EHm@_Md<3O.d8!r.l/sU>eQ\u+<ed6rOR.ha94HoAP68mA;_A-RHuPa[Q-a\
%.OuNEAXD/OqD[Xi%\;.,`*HmaE^GL?1b9Bsf256dKqK"+Nat9A#??.C_bqO!HmQf@/UHiG`m.B'QKE;,FN@9CeO0;b$9_CO2_4_Q
%J0us"VE;:18[+)I=Nkt2AV.Y-5]1egjuYmVh"+\3-GGq32k"Y5mpsp#$i%V7ETROuAFh$`_p+Oa\6su&&lO7IPSTR/_L#u&2oF8,
%3(G!tO3]PAcl_aU;1p^dd([E*Pp93DqZNG8$KGA79!cX\+*%BJY`YF1;<!ur+gd>Sj=qX\-@`diMiA`a"^L+eT9.1ME0:6G&G-59
%bZ$"snn7dAm81`##6;8jjQgJ6o#&Cg_NH;V"X'n:4.`C@X>=pp5GL&N6QA?70jlKgO.e>2Tq$2P"5bJ(<Fi&&E(`'QijrbG1]@lZ
%X%*MD(o_MOF+;Uni/a1N8dX*lh%]b*23j=<lfOiRa-<<7$gg0GlfakY-1pQAK(foDa+8Nu6l`<l=0X.6HY5<pM%-k$==YZEM_0:H
%s&6059+!=TKjg<t>s7=Z5?:)ZM]E"a0G5a3W'VWeS("f6s3aoJ#bTWNNZ`=4&cl+;+;52?eAH/&\qEs1\[Q>2Sre]Qb2;,@b:3l8
%Kiq0LmFZ)Z<:;mfOGY4SjXQI[.>h?hSh'+r)Y6I`U+h[Q$SBB\P0F82@EGcA;q+lIWqQ72gQ8^20Jb%r\.70;1q:eNQo&W5je8dF
%7=Gs3Z9!F?JEr$pE-1g6K_-AGJRsN"N08u\nfkq9]Pb%H/htWe:N0u=q>[(q2qaHA=jt:^!qZu5&O6E7V9OY",#cZi8ZTH9KX23q
%oH=70qZ-<_MJr:7rFA;J<#r@h;/OqVKY+e*ffsjOY7@YS#d!Q72t]\6Nkm"%JOS$#j1!QZ<X#hN$]#D,fR+M\N;Uj"5N?j'0&"F0
%e[3:80i8%Ts0ut`E1TJ`l$N8K2O@K('t6920]Z[q[V4FT!7'E8[hVY6lSCSK\%LSJrkU9M'HYG8:[H6mj6Z.!cBSCr:UiQ0o0-cX
%:(i#fWOQ7's4?gR9XX7`IjSrFNI'ttoE('CkZ+>W&Ht=O:(uarJr#s^ar$.BL?';:4eV6u,!HE6/E#&AS]M&lCITERCttqp.T2KP
%6)Y*c\%^Qkl@FE_ci;HW_ugGn1$I_5(`7cLo:Y7gqR?P)/?bQgp+nU(iX=(Yi6I^`H$u5I?iGN)>e=nIa@UphMA+8S`As6g\L;u"
%>N0,DV13kC`Sl9b,(I=*iTe2B,/&V9@GMl&QL*UW.q)nF&AJ/oFTU;[C/ec2*En\p"g+Ndp+:/IPh;lH1T1qqke%l^20LJ^-H_Ef
%T".YM2;Q;NmbQWMaj=*>0%QKZ$*7Y1Sn"n/mmg.==m%G!JNA-j&C+&fja!0)UtJMd%.?G<caNWQO*GK4hgq%8O*F2pRWSEH3-p5;
%$"p*N(A(AgEY''Ag/V<T"LS0n3!3caW[Rp,98^T?@OKfO#(dJ)_+AN1quM]:d+[l]rTKQ+pqMVkY9$YAE6"7K2"MBuTE5QG2GM,a
%eHfqb#MU[EX'rr*jb[KBQoBq=#KA7UXrrUA)*u&G:EY8#PJF?+$grn_TJ#FG':lWO=*;+h?_"L6^*-u>]Is%HW2!^!\_eJ8ct*9K
%_B\ckAb3:YWhnTHaT_bH/,3Q#WSiu:5R9R"E\'M^6_\g^!0QP3]4jo8j^cIb%u!sEL1".3@0iYZ9lqZS:%!9[rb-8:U'W'C]M2$2
%YAVdn5Wpqm,Ij4r^XM0j)SNqj$Ag@_2rU`o,49\`ECjQj2e8T1AIkNJDFs+mU5VLsiH<N@S(a>6;WE7s%<u&MgND_Xg]*.MQPJX3
%]B-2al)2E>Su($mcO9!so!=jDU`]3Xg#3-3Bj1<:)&0Db&jGqRT[9r"F_@Bo8TNPF(oHREJ]@$orUf>*=UuDVDcUr\&>W89'uu((
%`&0Xqi;g1\,qhT9d)V1^do#Vp@Z.I'T3P*Q\+,4):QP,WF<Xb$2RptR=f4iS[)emjZ%pEk-E/sZ(+"$ff5?pqp3CCk)A-hY'q3ZY
%/>Dt!/NiBaYrK]"/94r;ns[L@maasqP@.<WF/g[X-Q&=bBPOs]!e0"do,I]IomfVjeasAq0\cP29jn>6"/j!,o[EsGKi+jl!LY);
%Rd:N2^bq0%fV1pM68C(@822ndOh)$sa$62omFF_=U[rT\f*#-[T],o'ruXp8B)1kHAlH`8T..L@*%HFH:V3T]9=mPhQWup'eYA_.
%npQ%EEsiO,KKRMWbLP\#mhu[#W-scuLjPN60HC@K@U*%!Qs#3sRJ?8T--6d=FV9VKbWm]/=\^C>D#d?XnIir)&(=,,5kK1FZSmE?
%a$KeCH<S^rBB7,gStOpN!@sA\"Q,CFra_DtYad6op,!^Cd4+?YR7e2dFQ1'bPV8(WN9!Q\)sd/=/m9";8^(SI@F8=Aguncj&Pb-_
%(]"uK,-XI2507(GB_X#+s-XO6kiJakkW%;_"iXP<s)n6fY[s=/D@;m';Fu/K\Bg56B_^KA'+cC1.u[qi"3=sPku/lZ.Y\fSKp?fT
%p'S6J'E8j0]H0@MPTEDCF&sH@;&"nb5Ij0Rg(MJgUdLH;J+D*Y<i3e(L,1G>KA&"'#RZ=9-&LTcA0DCp/HW:1o#%XsCe+F&f^V^m
%SHuA[KaYC6Mp.1gId)$/V`$PK.\[BmOJo&8Nc\P4mf835QH)3-RXo%\_Cf:DT+Ngb<;XLND75C/TIpZOG4LuW?+nFmm#dMHIPZdk
%V.td<G":!f1Vbgd;XrmGj)%ZDJ1O/Cg+b,ZJ7kO/YF)p%U6?IBgr_qBQhp,e.6Of&pDkR,8CE1M23Zi3*;G?b)g.sdqBW!GTa8Mt
%737&/`GcNbLHn(uo6U]!9lTrBJagnFnJkKK^,5So7;<h;YITJOetqMNV(LS#P)DJ]]9c4i@?b(B&"ID1RPXt/V>S4QT"'!"qo0pC
%487W4ePLKJ8ad<9kQ$3NT!/F?I/9VHSPAA]3!1U5#pLSWgAP.O"`f=,Sh2K-8YR'-Jf-l<9eQdYDWSrt/5<BWJ+%3gES^A$"q(^t
%d]LH;8PTnU,>$i1g:+$chXo#.Q@^<UM`GrsM%>K,!S1a&O8]If_.9.4hqR`ZrGg+2!eIW=c.'MRVG*f<NNE_j))gX'3r8J0lBQ*+
%8)ok18RE(NCkXOXP3&Vg6H-rL`7%TZ'7Jhb./9is^;>c]rV<4E&ouEJUIV@uU;f[mI%Po?Tu8$\XA4ej9>3sB8%o2<.bMo,*_W4S
%[lq$M\T[`Vg2.@O"<qqK&:fb%C`!L=;Gi!Yfr"?F:n8Bjj!5m)?ao71N-#c06H_e<iD#+Ho>2@)56n^5clN%q'F::0*(dG^7kq5Q
%(th2?Gl*_f\/+suk]A6Lk`Tl9;pO[a8gje5\]GNe6sijt0^2G>YDbjFD(;/i4LXi"i:bV04E1%8[$WS`&]cU!Mb2q$9aS,!H_nU+
%kI4k>C4cQQ.IZba@eJq(+'u93oZ:qNS5'j8r%O1Y#,'X:2`A'*lOm-&,V+rrL)i""CQFH6:LjgqV7,`?PQfCJG4XmPI,B,FI*d7%
%;IEFRs&Eh,,IYPEdUIF.GQIoS=l\442rM#@+pcQi<#cO@her`<5(qIQds!Aib4HGF[%Ta@n:="eW/;7nFmV6J[1Xq]D9l[_d!3&$
%NT;Xc$bF,ob`KgLoXZC85`6XiT<Z9`jO_.Ij<H6*T1"0L6pGTm/67pPb/f]e+k8GiN/`*%k(uTNZu9GVo#hcTdC.P&)=]J4"7Zuo
%(;Du#M>,!jP+Z7t_lh47b`f*&lSZ1Rc0fKd]7$!"fQ+AN6IEj<g)TkorBC=mm!e?4D?$f#A"ql#ps8]^K>0%p<*PqXIKf)oU"bJ!
%5qOg>-EMJJeB,T)Wb@NM6QMM/&@kN?X`6U[^c"oeGk6H_1JsDEp@'RUh3].NjgdYl=Wred[uK9&b`!VaIRa5/0l!?WeV-JeA8"S>
%)U;4oV,pRnp6)'"a;\Vq?q.(GccS&R2kThjq`Pk1"chGg^>^U,lJI33gTIo#b'3CKZ$s4BoEIf:0Hu``*kTE]oQdVlqXEV>"p*Um
%aYB$q\CA*iq+"XTRQ]=DRW8O`;!le[D3Eqh5J"%G2+__FH&'+&V0\ebl34s/+I`a+9:23-!P`u+:OITJPa[lSn(ZG3]87d)-(PFW
%!+7@EFUi"^U18bE.n9jsS[?$G9U5M1Vdo^FM&+K'>!/`195Q:",3ch$A]_&ZA!%5Op=lFRk9T^F$R<<O\rXT=#G\5j;EDP!C_tSo
%NsVenp.b7eQ'%e<D&8R4Ukh+-V+,(h(/T/?e)q8gC9OK5iF>n`$.fQpZ?ZT&F"5(W]$J-n3)`n[5&`#lSr*]%G]K/*YfmM(<^qb0
%\B_uP0DT?R>(=,gQnrfiAf2CC4.GLho*>@!nu7Z_kK)V$e2*l/A@+bZ'A0067DN>cr\G=T+kFR!QZ``DnP><j^t#jjP2I?AqUm<r
%TYQ8aj8N5YaRPL@iu!f")W@\<rg;^RD2r=T%d!*gN40ZZ;Ri!O)M\aCc2?IM8((p6q4R-Qm6s.PZSrp=QO"gd73b^*J13Z/A,G?m
%b`HV-H=BL!H^)J=&IH^&jm^>O-,k9_6PSc$J(u!VWj-B*`c*\Ieq"F[b;k'83nVj(649Z8S'P7ATfU?)(0*e14luS7q1*!r?*Q/a
%)-lCqD_K,MRKC^+CA$FZlP'pt+U?;@id(qoAXiSOfN#>9H&7Pf>WOHiFp(fN:ULB:WIOgK+L.R0*Dq.=ra2Zc5]*Yu(WIllUCpeP
%3M&[7]Bgeh6"h%!Zb+F,O-<nPW?]ee()hRjJ0,k'eJQ]<l:J1Eb=Hc5K4*4R)r%L\her&SX+M5!6nr,DP-Hcmm(i<'o:?[dEbnV(
%Zlc@3]W[nN`J[ji7Z"BeGOr/@PMhu;e6BCm)l.d`U1f*d3bWILJj$kr.aW3km>A96pR4[A)"`Y5A]HNNe3Ge`CA!,?bU;CR$h[PX
%NDO0.$H6tPC:pGF`-\:d^clp"Pafi3aB)mqLb\RZYW4LVNhMNTZIfo%/u01!$Vb"aXR)5Rh:s8i[)7Q)eY<,7>QnNmT%Z!!%&=V9
%IB&74e6@Qf2D%SG=(+i@I:*rXhVR\L6?lul"IT?jkmE?tmE_q14.&CTYq!%AQ0j]&BMkai"X$UKTdnRbAQ%DiW;][,H%Zma4s<ZV
%L1&K<LgOAb0sfi35RTo[e5nt.J5"0hbV$\$FlrQ'q%#YPiu:%'F>$I)/-IXk]aGF1rtsU9ZcDdUF$(d*1`^9Wc?6#Po9r]JIuO2h
%l,H-`14%;'fZDco17_Hr(a-=Y,,YQHS4d5FjnfN?!0$!dKXu5^$o'_(pC9416kUUGdNgllkkV`FEP4S[-FTE.`4IJ^h>4&k0lmW"
%+FmLWL>#kk7uKr8)$sl_lYqCBPgl+8!`cqS\?J_..TK-eNIjd-cN2]GNK17]9dSpt&-!%Kr&8h%G9?fLGR+K?Rc_-30ZOepV0bb2
%@eo$`/:m%V6FBbLe\]d3%ja9.Edg`Y\0@k4m@"on'$UKk#`ACcQo@`04qpaoeCjV@<ES/lfS=V=#6:3SoaNpt[)0diAbZ!RJB\/;
%Q,8ke#*`pG8iDoi,jk<@<0eXUnj$3o(CB=gK"9S=kuC%&`Y]B3U2*'M0.iIB..o_<(8E'8Wg,h0D]__:`hL?0)A0s;r0X>:3H%OP
%[#C:4kRNG$\BE##%nV;'20b/1amT.7T9d:i2K6O6on?<RUs=VWj`X@44WT9%"5Ks=lTD&>\nmH.Vm$Qh"u9`PM,#3tTgFYOnYmU+
%W)Wgg,s[G/OOtASSucmJdQI.'X3DH2r1[24n?0E>!Hc.ro_UFI5OA2+hm&*;&D.R_/R.h!rGBX^GB*@q!<4jM6./B4S=uCQn:f@<
%%GQ&O;Go!(;O;?I&,_7]NLDE.X3<RVCSg@F=#]t>S.FoooRhfVjp2MjJ@K<-D]_Z)ZE(_MG,PSPhBEM.bLr@CHI\!9OALQG=U-"Y
%Pp+JZEH*+MXj]k04=qAui$f._JVj_$OaVQ)*lHfG<oTk#DVTZtDNnp"7+q@=_8"L6<!ZfVIel:^ah]ai.?8s!qX%)g@E0ieq3YVq
%@:LuDV48r\&;7Z$qadHZE>Vg@?QPanNb<aI?'.X<Ue%=>\<**?9]-!g$^nlU'Bps_jdU=3Y_>>IMV")MQ\[[4e79S?aUU2dI)isU
%'P9^,\**XB8;i.-`YTd'-FcmVS;L%8*XQp.BfQYP)@O]58cV<"!QdePo`(VQ'((<HL+q7U)MT;+8Vk1-gVc=kU3DnalqPHi.eNcb
%!:./&<G%*%o0.Cs;?WC_?]h(g^J!g)X(2e\68,6I4'VqD5-D1JW'?gKD4uKq^$Fr0X8lj`]h9.e.9%&N^,/C\E2eTg1RqZnS=cG<
%O#QF*#lN?'JOD43aIcdgP5W1?lJ<lVT-6d6KEJACC`uediN`94<S]P-knA)7IU&3o+rTQO^2OXaBJ&,!!Beu#i9gW^^k<bI0:)O4
%<K4,YZRg(O4//Pl;HU[sk50aGBP1.Nn]Y!4KudueSm8.7F[25<rVPstn\M0e9Rt]LoCkSjBY<b'IN8U67B@^:#O>5^S+^"CI^S8-
%OplmE8d7RZ#l+1a"cc`f.:ff<_<_mNd*S+^q;Z$@$.-!EM@fTcPh')%aG%4d#pLH<dP#V>rN0%A<1bQ'caIb6jnT+sX2]GWl+8<'
%q\j&X[ghQ?c:"q(D8D''Ofq;ABZJ5"BA3UX:lJN;0ISBDn4M1a$I_)j)$%LY.tERQ-7VDoc>^[d&NFd6,6CCC[sg;URoB]hgHuc@
%R=\-sLjQaTFSOQZMV9if?#:q1*p.\^)mgdQmH\bb&Bq?>N5^f.bDk8Q/aQ&rSOhTO1's@)K^MNn]a0>\_DTMC:"'=s680a]?`e/i
%Y_t]qT@!`[N8'hK^;"-(V/l8V6"SV_3:YO-=>k=#%c`TG;KaK,W?]rdFfURjJTF^iGX(gs]0P4f0PRlfV==%-?b1]$3<IW=B.=6q
%CbIfH]i6uOP08T&I(6O6CD%-#NWUo;<D\IW@\4J24'TO(E)>i-dj<r$Be^Rh2be7MNQmV'jEjAa#O=in'MbBs2I+s[ED8rS^o_b[
%9`lXCYsjHQM.+R]Af'h'6Xjndq@um*QgbQch#)#hg$V["5+r5KI(0b&7?M($_a2!fQ18Nd17+JkO(3^^s,Mj+o-F:2T&]JM;Y2Z4
%"G7,iW#AJ7H\^G0WM[iO?bYJV#n3WH0sS9rM:YiCTuu)T.MjZkCeco`Y5f1G<%>p05U/kW'Lc&0gunR[^(<TBC5(&6EhNS7`b*^g
%J7uR?m,+\5U72,7g]#0IVn]KWOD3%Uok2;M_V'A6e]ZJq*'_;&`N[93jhj]MKZ?=RVgi#m1MWW*+[)_]HCBeZIlXJNl'rJdaTl)_
%INl@$=<n/a\7m2<JjPmmU;dhG"n[]<jPZWo7N&(`gX(]d9)I;sY(V2$^@`Br9cVT%\4?Gji-sC=]FVT3!dsb6]eMD0`Xj)AR&6Th
%D7;l%..!OLolVE39V<bZK_ihfJ7AgXebN]?e07B%HtJ(Hh$D0X.scZ6Dqm!]$:FsoINn]$67`e)'Rh*RcQ=eJl:aTCJ[V^r%HLB8
%gfDRsCu4Zu@G_l>5Rk#/MfQ?O&niYj;OhQ_\N4[ee"i#)OVUt0hk8d1."-\XoOuE/k)9m\hB3?ToC5"I63a'%@UN-EVOD:^U0r?S
%kZH>N[/Nqt59e-9S7tXV7Nhq?P'WOpS:0pd`VIf(mX?T"UP*mqj+=<DF5;H\2bRNpDSsRC[^TV$Z&ha,J,=\/LgoqW)G]r^,O_Rp
%<Hm4(YN4Gug;fYZ%Rs?<Y)KV^=#SS*](F/D^l*:2Alo+O6^feVXKH9W;XNn,O,1<ofe]5go=7*_('Nt8Y3>GE'*>U8WBf%%Chf+T
%^q)D_bA&UG!C;k*iY\9?(M4H".>Go"iV_I"QkQj/9!me:N'#Wh)$5<:A2K-a"CHAqR\0jS=P3H47@.%:F:i\$+G5lR*`rqXCLl/`
%Yl`A`CR$a[>ZY_gG<O2I/eJZ?dPok?J9D'"_Mn4TiP$D;k47Ql"J];<>neTlnC)kiSW5KWoPksJU"i,WIF[^'4AeL]*">ZD]GjI$
%E[nP9<<BHW#[M/$c\tR"`=Z](j$66lN/ruh2C`jLBon1n^^2k9SUeMrpMAiTIN4bUZag,U^BQ!:?79qp+=p_SjFPU[!Zfn\b_dUj
%lD)dMe[^N6HcWK]\F1lN5Tggl=c5"#r=4eZ>`&V4^lhjs62W'$?r;b8apKC!'Q13AG\smh;\8G,FY5bZK^Lf!,%q:2"]VtP;4au/
%hVd$3f=\lm(JE_H8+o'<>#HT>91O0-H\MEm$8NAD=KNXnWHENXacm(BD/^B"A535kgBD0+W=qg(&gFbG="<,.k.aNE_l;k3-rJ$U
%1RUfIX'%,Qbdj)fh]BfaU$"pna2*;;Rq`oX%XDYa5cB7GH1tL?NbQ)NjHj5%B5Oj6@fZlo]0:o0,2m/*6^%4MC4KJI.==4>"&AYY
%k3uf=9:t\CI@84e4DaPF:`hF'(sN(ac\C0u2]-j.Iegpd$l[il=_%aY>u#+e.:\;VV);6?Eq"SjFC_jbaEG8*?!`tn5:+)G@ZfUb
%V\kuW@Bu8bcs.Rdqi*r?qr"ILc\kY0O7/:Um-4%I-VnD%/HEEI3*:C'3^F!u6A"e;;dD\D5e"!.##Mea`s0tKmHc'>KS+nf]3cU3
%l@)Fm.`\d[-k_uYj@@\W(MZdp?]j7g67R71p'[#o6);W/$jL#R0GUoe)Df6;;2(@N<+kPBqM>oX4',>"N$V4[Je\T`!HHAJ&.19N
%cA(*h%nJ]M,q,;SluC?]A!B^6IE^-hhbfN@Wu0+gjYP!##D<SHYq7tgY+i2VX@%N1D"0^Q,s]P&S]bn\Wl]=<JpdFH-uVpR#69$`
%AK]CVlo/9ipj%G'Df`[X\$/UKS!PGaNZ9]h1'uLAgUp[77iDCO3-oXlgPn6"G>Hd7OUXZfMBbT]p@1J[b.>u"\"VmZkE/&`7krO#
%p%ka6H<JQhmW$tcm%l>X3mppaESXZenDQ%E?L>c@ms=?1o$n/^YIfa*P:W+F4W.j+M-S&iH#=J)drpsr-.21H=>cZHLa9O<bjT%M
%D2#0_`RuYmbe^ID!coM)-n4MJR"c.G(>*`lWeBL]'hp)4!u(n:I%rZC;r>Tal=nfkQ\>$Kka9,U0ti`hR_)jO7,VHaXl/bahYp,-
%nS$`"c)GW5Di#pHABI9i)raKmL)&T'e@6H8q>+'r)C^[mprk%9)(St(?5SE&P7Iq^Q()A6cog4HhhA$U!ljHJV2Q\<&0GQ(\d_U'
%c8\X.<Mb:5[gr5%!_IWAXd1tXW.grR-C(4D!d>T=#$?3CHPjG]HaUl?,d,\r2qjRK=!F/7F[m>/MT/W8Qk3QX)T!HuRtPG1VKHn/
%0TSKL7#Jce-/<;KRkM4)5Z2M$GQVEbELNQ\fgAY4.P)ta=/E@9R2gd8qpi%ZnPnLW%7a0UQ/8D5q/*cae%[_fi7o4[e>#K-#b82:
%9]BGg%H(OEG^RsX'inlRdh:XaBHf5>];ts")*T`+<W1Ap/9C!B/(Trp%_##cYn&KZ\_Gml"`(A>[d&+D^NdtH7.lnncJu*GoFM)h
%?kJU<!+3dtDd<Wa[rPmhngp'Vq;(Q=aM(u8n+T3<ZAX-R95c=)ionM.;ZN1E-tiee7*m0V-JX3VAZ;$+PeA/MhlL5hT3<a>?:/O,
%ar0VCf?+]q!WKIK=g;*s-@.9f^o=J$n@W?0h#-R%s7d6QlHl8N9K:Zb4nR8kOu]5d"lkYN*bL%k_a5#H'-_`+@<9^0YBo734EaS]
%MlJ1=JmI=E.bShbZ2PP,X$RsVl;SN[pr:sACU.t'\QoQDVS%L>:]N%ITED&=_GO:,.:7i[X?;Klgd_^Cj_>8L8P5*SQK`qqdZ+A5
%8ML<M/g5V6'S`u39I\2l?i_Fomf6s4`)QA&a"P$*iD/Pnn[BVdL46jc7DI\\irHZS#-PIEWagH<_P0WC/XX22Esl*!G7QiGPrGn<
%Ro3gZV7nHk*\*4KQ4g-bY'#=+&SZF9Un_%'XV!mTTd_f4PD-VuH^].$Q];t6b*0?Achh$t$d\Ii1,=_Pk3IKi0sI;;]-G]<ruW-Y
%Hbaa&o3W<.Yn,srRmf3'=-Q27\ttMAa1]1.*3**Ao)$nKYO;Np<oKO#pUC_>.Ie$nN/<^i3`)*@[TcHg+JY+T7Er?NFNc&A(-u,6
%MU#[G@q#O1kn.f0a4O68kMV-@U2iR4eMD;_RulZDbcG6'ZD;+H/],f4"dTMe4O@AWGT8I-Fa70E^qW,4bD9/_-*ic/[7Q27V]0`i
%no0Xue\qmi]Z1O0nY)Rt2>*]ArPT>"ku.8`m'hX?Q083#[@!laG1g6/8!;Du-tc+G.8]RYX30<b;9\o6O<N8B\R4%-bU=&R-M#uU
%RMbY,H2</D)%,bRM+U&%V_*DRGr68NMnYt7oS5V8A7tjo,_Ap>1*A<SJl(q*;2:7P#jG3.9naN)JaE^.TZ'buU)+>?.&*R`MfE9`
%E4cRGL2ErshgW8LkEl,<ot,_6?63cLXqnVBWUORI#-f=NP)%n-iDtRP"?`Nqr$!P2"\2ZF$Q_GX/so-WZTOG8hqqqO^maOFj@J$:
%8ZqB0?'C@5i:mc/2'D4$mok32C_dcX1;*H406HUDC1@dW+EkMo+9G]/`buA-EM8b\;_!<KlM<`kcoV<hBVRe(Xf1%iS1"$h\T*I!
%F1IoP1<U%#h9bQKG>V7O[.mtR)1;5)P\7]YDo$:&KM]/0^C,Fc"q:"s52TH6^:fl-!plg,9Vu##%L23@FXrV^@j-UtD5[9-_$.H>
%RX]^7hK3mBRbZ,?A'Y2P0dDV/r]R<);(V\TjkF?rB3pH9M49FGT.cf$:Ok\ELK`gQO\[!Z"0qCBYju9)&pK1U0P$a,o)R_oO)e6V
%$ZuqF)3IZ&]g5U1K:@]2-7CeC0S<c\L`4.-#F%u:L1m/[(@%0o/>HMMp<oiP?XBP.Z$OaiN@mST0t)g^'T^+7A;nM%SCR8G/nGE[
%Wu&UW=T'geTB;0?iTqLFa\lFF>Y>eiE;W*$06Eu`2Gq<?%0.hUlpGpkb#DC4k4'jfM#3ZdH>.;6*`D$U>:FS4C`f9u-d6d[,R\Z0
%$1tW$Lf\N:!Ij?]RU=^Ur\<=j.s*W3["Po9]tWf>-O=3;YX[+f`nE=Bj,-q\@mcQ;b12O!mTsqNIJ$!HT`p+E'T`D2:t!@'2Te@o
%](.G.!'V>o:LF+BGWt#o]&WG#aCbe_I54(VOqBVb6,bf.j9n^69d%Gr0C61FI,F(3,uJVB`WrNOP(MMGDYOQc"BU]E`Mh@,Ou"e]
%#kEK8=9#'.[pcPb\Y`0eBU;<AbiL`64.#%PT"b6cPmFJ".4gEEJ%83OBGZ?\a6cY5G<(7hs(0K2b37lgMr(.BPA%NV)M_"4g#3nU
%DUd)88hQ2t`N;X)h*.K3WYO.<7o\`Z!gi6$DS'87eKIGlGp8Z%8L/=KCN_pOk2pi'A6@Xn;ss1D+</2/:C4F%!DL=&)K*oa$`UYL
%"dX`/@R`-W9Y_0W.?:>Ujr=gXq*a(Gde!?`@gSDMeC4<>=u4<1boNeC)8=6k9&/,[`@AI>,9P1i.Za0r:gTK8$^?+-#Vs3.)0j]J
%\(X3Os"`n4rJ9t`B+W::R:/9K+(c:hkR55r2Ti3aichBZ>'ATWN/oCNd>eQQ.^:+'9ZR#[ODKg\-+7NBkGdkl"?V5LHN7oZQ$>%a
%lWUDtLbD+Y5oSg-pC&*-_;,_sF1!DT$W?,lBG-MKG.U_q0G!;TN[q$8(9Tq?5NeeaItjZAR",,^O2ZOU`hVY,'F"3):cX&804s8S
%n[iU]f=c"il$\GpL((jdQFU9>A$Q"#W@iO&HIV):nV[p)lEFlKA&a;[!el/>CR=R0O'j!%)T9U%h<<bI'SA_N*tH(aMA@cLT=rJ'
%0F5c"8G#AATH^?BfW4_FYpigo7\k8C'tqCm6>$#9_]@BSIFaG_io-WsZ!`,tD'2;ZnH/c0Fq>eU][UPHS5Zq6o]+lIXpI1QYQ.D!
%Rt2tX=uM@Bg75XWBZS?iluqV#[qbiN80a>#1c91F.JRB:prbs!Rnb5^5@p0.-Y9aVeW)JGRUe>OiQ_P%-2]n@qe6Lf@P.uW,UC]e
%@pu8_XNDY[*Nt9^&TeL(1OjagcYrT<VZ\P,<]@sIM(4i&d_X1LE?88=`s%NBZ"[7,/]e&',mJM'X3X5YQT&;;8.lHK"m>IE(N:89
%U-65ur+K"rKLscND96`gL)B,]1Ae!rbch?CS;?hNeTrV#>1V;!*r_(1r(Gjj[.NUSG`YJu6Y&_q&8!VTRE(gOJ7jRu'EK5R2<*V0
%)$!DHSJW6[poK&McW9_@?E""PBm'7Aoo6a.W"[RpMZkZu`I5H2%as<GXqIu]p=$'UV<o4f--p)pSbdOu?rj[g[3T#\\H`^/:H.An
%Q.POf'U\(ZVu@qk*gbMNQ1RDU(CL")C*4`brT+b=pAk[UD2V,X+gY!3Zg$mO*?-;?2.B`'.g=]X>N1c]lRDn:rHKd'aa]<7rCrD[
%n!C0WOsSJ#j=3cqIpIhuGjI<g?Ve,bMDYZapiI7-U%sh>&#;7q2-JYWTq9WMm9l)$1]m2-lK\[(Rr5OmgS%o_cbbkk+(cA0mWWHC
%QuqcC?23@qqt^*e]W[P,59!`CI3Ye64f.Ffq?Xn,Sl$5n"Ps5+mZnCPY-S^r>$Kb<`-]Y`fBMKMTq4/<4YpFnRE+)W7A\dt)!WIU
%WZkFZX.LLL`c[d!a<OBQ%MonLaI^DL7s[Q!c6t7X2M=+YQq%3q7A"2qd%Zcb]]lg`a@&egM&I#,<q`\E*f;q6]hu;'/EIL]0u_V_
%5p;9%DO54E!L&"C%085hC"<gtaubXICZ[1qq>;f4$ft7&Sbg221MB3U7DoI-'0d2t_4Ba,@(aU44Ad.ds(iSO>WMCESTc,?8gr]s
%Z,=V0KqJ^)9h;Y-]F`qtaq#c(reQe)karkVR0!esGh/[m&2'fU:"PCdf@D4;1cb<#B`rbVgV^dDN(m8Z$dYom#P)>U^0m3mM2*0_
%'o%e)N$+0Nn(*)B#id(IS>(`F7_=7$YVKqH<,.dQp(6E&+#FN0d_X`ZLfo;2m1/4DD+^s\+>"t+71d:9U$#nO,N9a"k&kA[[!cB[
%6[n[`DKH<Q+30m[>d/2oPZY)Jc+u13F-EXGUlZ;[c*`GLf]nig8uW<h>5V+Q4L_C"ZV&O52d9m%L%ZX2P^`G0954GB/(NYSV!SR`
%c1DV2Y"1PW^7^o]`%12:o\Kf&_I.uF#p?e8jn!8;0?fbdYr_N#]=bE-2m5qA<?u)j@p/GYJjH]^:6EMYN6.Hnp'<u]i$T+a@Qq3E
%^^r/<,I<mGUgcui1_Da_$lk`u\6N]W$")+uW;o?*QSP<VLr!DO`TIRX]6[=O#3?flj9!gTN9(XtGlqQQ4LY(Yj4,-_0=!qe5To(M
%0'JdZ](l-QCgeBa+np;s*#^^QJ7`S6af_i:+>#t.ruY!2GB_SrJ=>M,Ie[hgrht$QA;35SZVi!J4@P5G2u]/<HYa+e*#;f/(>.9k
%mqH:GSH\Op7N>j44^nVi3Y;J_6oG)pr7"<PT(LkV`6W6cLjOsX@6q(3oeN6]?JX`#<EPo&_Q7@QOROh"FEBG<I@(Z02G9iWSWrp^
%oe4ee.FHDS3`?ZC-_Mk^3Z6@3$)V!CR#!OiWe0TT`D6]hEsjRdJu,r14==0,^a'PV<kAeE;6(4^[b$dToC*<F5H[]Wcodf7cdk`B
%&Bn2Z]^UuTirP`fk&.`^/B&V(3Rt?H]92HWfn^?cUkT*+c+,0Jp=M)R2[T3#ag<'U$qQhNJ=FrKA&Oat$(Q*%@H3&n;pF/Kq8b*2
%g6.mXhAP"p8`f77>C:nYDsXdcI-_mnBF`2PjWSb3Z'XM(;*>ZK/:7pc"e@O(a3!L8H!mMO8"<#>e(_d<a;GJO:sM*6mZ^>*l80CA
%\X7ep=Y;jtPZm2/'H/=-)aY:/)Du'bb2F'rCIaWJp]6RHW2A_KN4]\Y21#UhK^?s]DaQ#0a.Z6je,A=Rc,9@M;MUjm-LoSQCHFGJ
%>%CXjN+q6SlVN';=!]<-iiRk>F-b/M+9!fR$o3,H-MY'XXJ/spbBeDQLK]-O]91"b6_6Y53IHZ4"U,oNPSBqRe:0>KJ'DrW1C00A
%A,Ggr+6B0BB=[g!>aja<C13lk:8i,58B4`9[/1T9>1Zc1eoD96-*4)3jf2i@)mo4+]@G@^^-"7/A@C(%I1#>O6l(I?R#;b%jeS*?
%XgXGC60XfJHt"9cr9:>M6qWL5,f<lg`tmT3f`=C!;<]KDC"4Vac$m:)OmO7]Rf\,!_:@8"b]&>l>Jak]><W!@Pgi*&i\&BE[o/1%
%Q\m[2#r0KT0ue\Q^lVIEld?:B1h/u(RYgd3f!Z\;W0i;a-r*#',8$+'h&1?Wd2jane]dZYr1:3gd6r0@?Ss3m>gQgtbi.'3+?sf5
%Q1!6)W?I+D[+T4NYg9&U7)Pqe0"a=,Yk6R+\\6aq71_u2^L&d@LPhZ7.o91($A1sTZ:[g1n\R);$!csL,PK<K9Tq'-ALn-ThCZkN
%^%'=eJo42Bnjj$`!_OUXT&3Mg@N@L1(^6b79*u'uC3S<)"Cbc$;qf(9d2tcOJ63:<U4f/O[En8*_b;],Xm&3JS5dXR'fZR+M5B'0
%Z?nVTG*@ppi>JH@\)@)4r4\kK8!TbolIaSmWdQ$\#PTX`DF+&Q^(19nq:7k`PCtc.mh8Hp,4UV5q5XC%dgm$']XNOq([6H\$fd"_
%18fB$K(@nZTD-KPm#hd7\M!qY+3fK9,0gDA_Q9F<GgPh`s5iE`OV4IEU/,q=OEUe"F,KgM(<_Mnl'aVK8*i([<aL7gT\>M!]\P)G
%_+U9le,@&DX_^&C;/'u@,)OX&$Fu*#@[J.0W@AXuo!1]VrXc#gBe(TW47jpXV\r_uG0*io%<41'p,UV*!S4,MUmj\r9'Pj)]6l^M
%&PG)5F/Xd'2K@-Q9/_77".?`>.eXQ!'f<*\c^g1>_(J@24iVu3ZJ\pPgSFnYBX<5ELW]'rYO[X'c#Zl/^fmKJ=Rm4\M2u)6E6a$e
%8OY7$W_Nc"#4P#`3c$je&b3Ae"^'[>`U@a4NVdp,iIr<Sfq1Ho#dRuhH&*oiHDV&>8T0[u'!JXGOq2-1c?D[ql!emtdfY3(X95'A
%^\t\Blc4K$*Q1k*-[9O8qmaja'8_7CZFf).g!1.CoB]T*O7\0i4mKU2*u$4MIrYj+l+@s#b6:G!$u-<g-?43aQKUf)C;@Mo-coEO
%\q-a6OIg8!2A@DiVNi)Z<SJC8&XH<WB4W?Tr2!Qdi^Vg+QQe#a\0T>Dn'`YX/)!iak<hebi4KoP!LO42(d(E*qMRT7]!]$M*_+Rf
%$i:0>)a/7@8h'uuY0(FYYqcA@,5YT),Hm/57^gB4k%Kpu*T^h!<97a!9VR1SHct6!nl_.I,V#Bk@liD/"SM2L<pQrp:tJ`anL\Au
%V@I7+$t.Hk!;2gZ_F2IUr@+u`0[pEtB4iaom0mps[4MN9^F-E`Bf!r6pp!:-j6$_SoA\"7`lM(>\3$Jo;&N4^'D'Mda"6WW/q1N`
%7ITOp,)%;kRoItiEsRJ:CB<FO-1-Ui==Bil`8:KN]+_RQ!&^2Pi8e]l(ol/FeAM66i71:"C_ER%J`uWV%/5M$JpI"QW2LrhqM?D>
%Pami!9-SJD>>G+N"2/3>Wo_=A-Y^+?Qt\iW_<*khb9uG^:rC%0[KDeCCtJ=Nb[16i:?.dJ3fY8>Kp'("QrZEg]^3F=QdSR2HhPBf
%8&/b?JB.NBX^$n=Sj;Xe4">Qk4k&0.1Y=/?=(3V.RtG0[TJ!_:bI*A3,6h7I+SNNS2A%?mS"?)7-&'V\g=J]83R7A1bn()gS#WuU
%EJE!U2K:V-Wp>^+>..gV(0JM1XO8_R<(XX;=;f%_h%XWi=aqT03@\Q%Sg_S8H%,P?>t4`Tkq&TkMH5T-hX5"=)<P"4*kGgW9XM-2
%ca3WQN@B>4B4'2D@:[HUN^hi!&VlDNk[o=L]&#!%V_5#`<EKi7a[dpM4&rVP]KI583+44(oP\79<"nppmT11GC2f"+Zu!bD_A2\A
%iNH$\iUiDf>3HY_Z3>rX%[`I3l+!*e4d".8?kUXL:="/g'BN(YZCL9\/]6?t`+h#0O'FIT,:.o[3_]S@*W>sqhcF(&RNQ)+.X?HR
%@f/4aqiAo]lu!,j:0`Vi-V76*NZA`;^Qo2_!,_8i?e2`kZ.%![JE't0R'EXei]SRh/uc[=<ho(F7*YTiHe2bOTnGgV-_jQ?gX<f7
%L0+Eq$!;_BH&S,>4+Qh&#jV1o3o7>gS]YI[<a7G_Ze>+,C7DUHWX'noY,c)ljBD](B^YO8Qb/W2+/Rl8,06J4eGW9]:rM]E:DS^k
%'5_0A,:.euU(AMojm-RAn]?IT+3c3O(Eu_Pn04D-m9KVe9Y@,mP*+k3Y[R4ncgM$[D!c&=SI7UOjV)"Le^nq7?+Vq&>&<[cLR(VU
%9n&Sfkds@p^MCrGo_A#@rdEG])U1V@:ER>f9E6umI2cb$Pl*:<7gZ`+<[Es!_Mh5Q_GKWD#h/$cNj8A^Meac*`l-Po:*!10o.Khk
%D@9X`^nd&hTQlR;pIV%IFEUH`D)HW*Sg6/ZZ2=jq'4fn2_h3iY5LG\66Sr]or3.S-B6l3[3<1>KW^u)5LfXFE@EQD@TaXa-;rW$S
%AVOmp(iqikSSPIsRbJ!6.XIII/OFR^.kU93p/e2([U_/D`-_FHIpOD]%g1tAO*M`Z:QEk]i=%dSYP't(/@]?U#uitEQrrQoh4)]d
%L_#]!ap#cbeR(a#<0%lR"(t7Q4I>,MW!-5N!9e!fBa-9G8J0uPJuY\3%4oCN<5WZt!#k9bKW`LZm96d@C\s*!)TiCVgc'el&DD&q
%p>dYjO$QTP)0HD-S,t1dfJP&m;`n2ND4T-K?oQVo\jI,_;`\pO?%?Tq;?YR4-#?M0irV1g$nW5[a-S$K\M`J3:Y5bHodjJ_ma"\)
%p0d*V:+ala9Fu.im3&/8hkVAus8%"qrXrrk^-86L!slq9P3`s^8cUS!l85/;Eb64oP=#3g7P<a2.>'jVk*)&7G4e2J.R%R]JYTV@
%+HH(C<Y^#W`I5H23(,_/@n!I;eC-8[.rp0ER,C?5_#T\8=+6TjcrD8:4:mC_>.r/s5P?Ii)dod:0gk3*\#;BLY`=NJc<QN$ijPKa
%4muR_:(Yn%kh[_uKJnG^2;2G0MSd@!-\aOb.Y21851H3eV,lj&LRS^7#@o$=ZPVRSU':W4j]44gJHAL'VeQsG<d\@0,%=Vq5:Vrt
%TG,uEdYr3rR'Ih/$<0o6YB;.-e6/UN6]A#.NLp%FIOS6c2FV(O.:#e[CRtB)\6:P$TPbpIQS\le2c9joWLJk?ipgF*Ta=nEMpBRN
%VF-")la@U)*mrtc0Cn@u^G3b/?#RfC@>`D-l-S<+iAg3Scb1)4i=u5FT9==u9asLhm6&rek6&t`FpdgD3^Q6/Y=R-X7q[R%KRIF[
%2i>R`aM;7V;HPYI+XO5([14XI7JaNOF>B"(4A?*4VoO0l.JLE/Bo1rt;iQlE16;m&&\tt^nu?%pU&&ej^_HUKl+,@$_6BPj'bHP;
%R]R4RO\0=&06)uNE$2bfm"b:D7&O5M@>a='3b*h84*1!;($oD9=uf!*_SO)re9s7A,bA/@I*FPM)NR\M3eYg8nr=uI8:@X4$:eYT
%Br#D2kol&,!XHk<MM`gJ*d[&Fi^h(cJqrYbB2YNDXD^pJqNBcqk@nh)hiQUOrl+*&>2Z!cq&ceXo']0qk]Tap*/MFdj+a\F.6r\t
%fhq:aEXW6BJ,1[^gD,G^CkZ"I@Nq)=\OKCj$tk]!_pJu0.]cG9E^sWl![M,J<__V"nI]?9OmOI!A3F89C(>=ML_o8u+#4ndLRt#[
%h_&bCoY?hP(RuL\H1NnIE[;32p;XB0D;*idGLFkLe/6(i3j?^o`-"LHiPLq\b$TM:1IbVpQ+J3\8>eJHEufiF^A1f>mbKZ!W&pp7
%hU0g<I,d,78hZDCc=Y=rU/g<E6qIh&o"c$mf$(0QH6KS39Im!ihYN;f3hZUT0kSEpjum!LCi436&\^/K,]iO8TL-ZhX>0jTdo>W&
%mab7,n$[W[\AVts:B.lhr/b@_fbsnbOXglKNVpG]VrE,9,kMR(GN/S1CRVkOnuRM\W[F!,$K<dbMcrWS;DHDCHp,FY#Qr:VI@t_.
%]Z"!CLR':#0'uYB#5h#g1<Gq*c(]8q0*NuO_eK"_m_@hfX!j1G?OA@_=S^];oK4F<J__l8r6hqRY;9QFO,/eQ1t3OJR(Y,3Z+uba
%HJRI2<OuH.Sg'uVb2F&2c'a'Rk]5Ia_!>hn*(T(Hr-Y8hgNdad\CaEBI4nEc'SH)fZd[Me2<gKnEbXrZ%8e,@b>`#F/edP;o\3R)
%hDiMb'XIRurl;cch@Hr(`mhrGDmpo=m:NJ62#<[dH,Y4\9%+aU)Z/boa,olK&r`1?:^O$&N7qqTfW(f!BhPIi5iFX':4>d>,M7eR
%*h'JU].4o'2GW`3Ym5JF/N1,5bU=er'N)>?\BIh'2itZHRG\nMif0W&^"`XbV['r0n'u07)<>eXQG39;-H-.<s)qgjYjtB3A4Y<`
%+`hFj@1$^<&:M!UHMJ>Z?3p^7'FeF;PMi\Gr<kK3>mc[BP(=CWRiei*nL`KbPPRFD.4*k9]phF6J`KVZq.sU7H1imM->7,49JFR?
%(0`0jlOdtpj^Sak%nZBgHEf'_%=(SRSo<nRI1=C1?PP#9<d)%sg[n/#bDNn2pKd?s&nIlVZPU3-S)5-,X@E6]PnM/"mN*j&U*jj1
%U.:$$i2%hEr0H!0h4E7ZH+s/?60$M"f#)62E2dof7OfLtl@3s!MkV7BJdr'1<J^3cX%e-1TGN7/Y_XidP:"8q:a`1rk)X>hXE_f<
%G"eA`G,3k,j^e^F="jo&hTK17"c!V,IUt>p^-qdPT3b<*K@lufEQ%Fd*\V#lM$d+OGlU?A\:s<g?-A=L>IDLR1mKKAEPE1q_u,a2
%"*9umBag2JfVT!$@hL-q$@(Wf11Z\q/\9).qAncXdRF9C&GU-YPCkJMD3fh57eq=5W"$qWE4Bb3;&M(q0K@<r_,r+gg!TkgVaaei
%Z09/T&,6@VQUi7^DS=Z4<)ZoYT@,hR']D!3$g,@%99r+sB;suY_kQOK>Z5d1lgXa3?uo8;NikY5PC.X_Z-S@*NJTs:'?NX6EKi<V
%Z?1L+!<j8pNJHr/'8g&"\P7/A<3!9l.*qf>*P+h!h=-P"?&NeXc.-iG&rU%/JAjtl>EP#FjJtWgY-s7L;oL3',$Wc+)TkHJs.pB_
%`1AE8%@#I75H!/4XSCn&_W!2uP+/6,o*kS_MYc_p"2A^(>Q2$H@OJ>/(6NfS?f@<LR0EglPbg(",a(b:$8hUidh*\?"gl=$U"nd[
%B49;WI(RT'or+>"Nu*$9^+(#oN$]K,S(2pJY:Nu:^rE*[j@61:Q\lZ-I@l'([JUF4_Nl[7N`9G#Sq$*<4^B'q!QSYXnual-STrf+
%YV[j>MpCj,P5M$uX_4.#f1lrS@I87"YjnC4$@ABpXeUkb2(MS=PqD<R:&obld1WN_VpoDc1!E$S;c)K_nK2D\7ISje%+!`BIA-\m
%K7Y)Q55o&"0LR,'8S7>T%VWsV.e!e@c"]?kD7(5"NMBdW_6c'L77iFm5Y#R3CF%@T;S?'(+o"=hmqRS)EU-`nqC^c%]R":1KQ1M<
%Zl+#\D8Q(F>fX'lGJ&?[$'<(9bK_8W[m\$.pn!Q%)E]>,Dac#J2BFt"gha5dc2nj[eGE_0T]gOCIn4hgh<K%\K7^E'l*m:n=a?B;
%EuOOn$Yp+G=>#p8rTu&kpSGbQ6mDK/6!3\cdi`f:[TUBj1eX4*U'a'1B$^rAP8Uj-ONrS)o@qnuEVdn;QI0j:A4rLQZ>1.uGI)Pt
%+Umou!rSMok_m(Q$g^Hf#ZgQl0N8ba1s_laHs\X6p*Bl]YXhbp@QpUkoNbosH.riFn$Hq'5n60_YGSBJTrC>N4_g0nUVps3+cCmg
%:\XZDeL)WHbfp=Anlg]lV`'33B4mU+\WWrT(rFUKnksEE?#FS`#>gdQKi9IJQ[VE'/'lTl0g(-+j>`Z'9=,$P5&;B\mmUX-b8[rq
%=Hjd@*O]0qFB"!kb5!p7In\j7qgN+#e";Hk'[4!GX0:R.nmA0&Wl5;]*/Tr4SP`r(mKPBl?u:+@k+tFhM3tI4nB5>[F=gVsJtgEA
%QEM#CCf.uEjUlO<Zu.S<9=KaZ&H.]85u6t?D)!J@KM>?7V@4Hr$&!DVJ7>`7_77p8:<:A%M'!p;!>XTP\RCd.?'Z50WBFSq^G3>#
%X!^K)R!2pdVhr-F)H(1;JphHRqj4*>gjBUT'>>t72^3`*Tb[u`FMpKSDmeH%m+7MUjqe"B;^+*PONQ&C.GlN6>m1;0K@Q?gZ?4f7
%Y1ZK5&NA%/?E1X.#u]9CCYHZ[o1,j`<I_`ZBQ\+p8CE3#$gN[bXt.<[mG"INd8I.XT4nlTN)Dou#c"eJ%1_S?95aM%8rU_`b-L_a
%.JTPu!`+dM@Q+5a742sc4Y(YYa5TX!Gr311]5SE>2(h%%]R=Bp&na1jJjM&5HH>kW=dOa82_BME[IE)9(hbcue3#q[WE6H3H[U%3
%0@,5/Q)b_/o;ufF*8o:_f%sN=Lg^M>'F<-I34fcEWt^n-.!;F?D)k0t%d#$%7P$J@NtdutBm^2M:f**j4.M3S;4!cV423m_=L9:h
%!9$od-Y;\$EG5Z<B!b?IMIS4CZY;AIHJ9kPJoFj0e7$8Pe)\Xt?5:0Y-+>R2'GNUJ!]X%/-ZUhn&*squDs;d_YZt'^ZCgFS58f9-
%B#B3h2k0T/6h!-gJkXKM7O#dEa[aVt5K,6s&2d*,&sm1%\ZNs)6*d6!1u\Xko%OqHT\S`MOp]DOQ@1HK,W<KO<l=OGH"6U[oibc0
%*q+CWEqa;75lfMJYXA&aWoT/.O[^2'JrkdPI!#4tO`FB:nH+)T[a;Wpj9.E^"M2("UFDI9Y)/\"H5pOQ.g38ZDQDunGNlL)jt@@B
%.g,S,VS^-DR_9)r4,;kR-?r@RerZGbOl+[/@lO&C3I5''!%a%cZ=#j$`01L9B90Rr-t#U:]t'A)/XWE"]=@mf<DgPp;54CC<*#su
%17BAfP=&7NE++(aZ#&-_H%OgE-*R@QNB\W3;:,\bNIq'1K[rJjM2d1lmu&YALCjN.S!8lF7cK5SZFD9DcP`]5f,@BLnA_*_l*$p4
%cumG(KbS7DY1:Zrig?E?OnhF1nlFI1C;KXXhP2m$Y8[10Z$i9.WfMZkoum;X!^],AJbcJ^QS)l/;RGf12jlb2mdk?i;c&TS.[]#E
%jcni$5oIR6SnJbR_^7CI)`iu.k^\,Ip07#uMHN>M^(L]4Bn&k7c74stFD?s03:S[F;qhVj4lP!$@!LF*%GS;F=D9_a,!;`q&r3:n
%W,jC%g!]Rp`Fa]I7eGNcs((edOUt/:&WO&4Hm_ih53Li++f%t4,%oG7UT3B"?lbF!OH.q@2P2ArNB%05frFomXDE<6+,4HfWX=i*
%:"en?PQqmh2AP/kP\5nXELB@!>l[[c>F;loK@RA)#\GA8KVBsa[H\$X*66=&%P+,<Z.nR2j#c2bA"FlW%U2Y6qtd@KI+QC9lH%@c
%Ojp\r6P(Z^28%?E?D,\i%)QZ%d?;r7MF;qhpT`9d:9&"0pY4X2)lUU,I%?E";0=Q1pVm*m&'f?Y>V@uXH1!*S]Bru'Ll?]'/_D?Q
%8;M,j1T-,`6;MD?;@;C#TCpLqgV62he5Egt97Ltg^M7<I^rrI>c-DcXO#YVVUT/p.L2e<1Yl%H]9Y^4l5(4Q.;GfBNL*&@/AUTMR
%Jaku69ApH"IZLf=0fOe"*mR_n5;5aB"RhE9EJYN/;HE?oG2n_*Q8V.=b$uu;^d;Sh/d6?YLBq5':6l&r@t:bX[dNqT&WOqa"V$SS
%=F)RRYZ-j-m)]?n(c@T[=ruig9*(du^6FH./[3ImH(k[*@8bRUTF[A@lRIH*&!Nf,Ur=2iZMWTW3D+a^2eQ9]Qtc)4Fq%Qtoo>YG
%a;_aBi7HBD*@msL%f\mLYbKnf(uA^mmlsZIX\H"V44q#ZBno"ib+$r;mr/Q!S8)Vh&q6UX=h6t1G^mZ&hR7)3m?ef@\7VbTb6lr<
%@q%&ci`\a=@c:Xs[,5Pai8l45kV_hpkJ>K0YNG&.d4]_Z"<mjGJh9[fh^f;YhR13&n7p`':TPXfh=i-\J1NAo44e?90n7UQ7]+Ll
%:J="'2H^!Hb5NN33Y^"'=5Xi%90\SD81#G#R>RH:Va(4CUkU=m.]bG-:A=TK;O#sA@ip^a`Kn&?8s+*O`0"48Ab0Bnr_f4$_BuYU
%i!,@=qZDQCUsNWn!U25c(o_0MOo4>?>Ju1dQLJ.GDBcr3V\dO?)ugLCrPReIHTp%3\>Aks<1.t0I%u01Xq6.4=dA3_'*%kIaGHGP
%D:gP!XefX7+saJ%p]Zsu-QW\#9.#ZKVKP,P7%F>Y,,AM!kS>sDO[uO_:Ha9J,]F;(mY3qXc'Yr;)DE%hIDc_qZMenpLf^YqDf.2^
%3Y5NFoaL<a*,BT9)Fa+NlNjD^TI9N/";k^fF6\^P,BWWk5h.:f>l'RnE\1$K8s4EJ/!$rWYg<JP592K0al7qkD33A-G^a:D4=,Lq
%dg65:Wg`mKJ0$$;9me2fIP98o^to=_.nE$>!7](6cF/%qS6(^iT9?(d=>CN)"m9Fc)du_H5b^0brj.Sf6qqAUUM;G:;\2+#5[e;t
%It#Q7mIP1Mo-\k@@IHK25`m#dhI*qLM&J#(pJ`IZJT!R[JMJMPMq?<)Odp.]Lk;M,lrL<OFEuK(8jbiA9FA;q?D4UsI.)PR?5?\n
%,C4J26KFMWPq<<(CVbg*UJb<\[D#o2>s7)g:rX0e)QY5K-.e/$HMLlI_6ZibVZCS556N=E<(3BsoP`Ju(T"Q&a_W_\\u8/>rG,NR
%FKSBUX[GY\6`C:klaXR3:7Vf)Djt=:EKJfIY@Z7:jk=r\e+0Eoa-o;;+q3k*LZt8%^HP"D6$9YF+Vb;<,Ur:LAgMD;k_<)o%Fi`8
%#BANeib[+'Fn3J%KU$M5#6MDgr'8ciRY^fRoaA^!G_?bFbf<sugr;N%a&4g9>mcODW6J-uT#7G'\)>+7A<s.)\c!ra!Dk`e#@PV]
%6qUqESD[TB<OI&<)EX^EOZ5%Z_d79UBd(-o`#Tm=I!6"O55eB@`r;&2JtVL4Odk"4fR9DF]L::dVE>tl.;!c_R=oW^h0T.rgE[Nm
%RflG'(<a"JAMnjsJ/$t%7"kko.u,ZMeDac)q<`b2pRWJt*Vf.2Ztp:raXN&@4<RO+U8GT=B4+ErQP\O($h?WrfYsPt;5CA?q0q[Z
%Z&4NX@FRM.&kt8H>Ob"k?2<bLhfj5e"B"!%9f72[*@3T^U12"$JrGasc>hKKLq`hFpdoDg]L$cj[Wu;7b:Dp*XBleuTaf:c5'b%;
%ZM@Zab"./R,nX`?g&A#/-c"G9@u'WAMVQg3;QZT\Up0Xf]d9X1p\aZ5_UJh*D%DhZ$,G+(?c/!hL0:=P$9/XL.fQKe`b4*gI3q,d
%G$M)%e:maKPYg)*mf7QLd6&.J*[W*];H$d<rqWql,/bq;&QOC$.n`5uh^.$96BP;?7n^%[9@Xk^F/cF"DMnbL`,]P.H9E7n(+(bL
%K91m^7eD6R8T#+G#W^tbfS:9qaPV^ehreGLN@IumA2VMJ/I.R`3YJ/?XMaS%:'u?@BKD1lA[TVe&p/KpYT+lCn1eB9cS:4d^[,&h
%i-Cl%<KJpdpu7DS_"SH(>D]d&prGU=?5/iM(r9lTh3E7rat?+jBV7@Xb_hLhCf0^>`Wm:\N,U=jL,3\6WnD#Q3-Y[N>SKF`olBh2
%Q7X#j>-lPuqjh:H>$U:hTm>4e5=`mEj2%Re1[&?9canlq/0m$JJ%U@LN0n."T-\)!?X"<1!\'Ea!hC5t!3+&4lR3bU\o^Iq^BV9?
%+sfNsVK%ZM?4P0o'VDfc&(/?7@ekM!m>dj;NN?*5T@;/28MG"e/n`6@r]Wc#WSHI9:B<rn($h/rH-L:sW>HCQ;p==)nB7MY/mLom
%FK?mU"J1X?4Us`0<=.=SpjQaMf;i+IB]a$-CK#`Jkq:k;Qr0s=F3FV1U`4>XNmaGi!nlNbITQCGI0SWbK9Q=BSDX.sl91BET76(O
%%M!_krF!(M4o!K_=Ok,-_u,Xo-(R^uqPTNJA(P/3!pN5C8Y"FJpgTf3UJNJ'6VNZFLlS&Egn1FQ#2i!d;b:[^B_=?qKNDQTVKhS(
%jpYS&YRiAp9k*H6P1Zcon@B=LX5u"g@0Cd?D4MCIfl`><6I$t@hGmF/hM<=Dl\B"%](%N5iRF&[5jjQ()S,t/%A4mu%2s2glLKe8
%C<mAZp4m"fo1OTmKaE=0PO@IW9>A6e2f=iXYReqh$VM+DAqc7rHtU?7o0an@`p(ZJmW"1'Un`#`PDH%&:kb$LdOba5-!-.o2C$I&
%W!W%:ikf#I3XAMO*:ukR&V1M\HUjA):?.RS#h>@q*(6qjJSRV+k2UkP8t,#$2hX!;Xi79>YRjLLWc,ml&Vn#nW2(E`6gPGFd<t)^
%?/Nr'(lL3+r3GY:5oUtkeY;2[\X*-@KK7UG&Od*UR2t.6.E9*7pB`Bq]+i3WOY,k\5j;uPhN;/B_)4'B0)Yp?GXuB66;UsS`n6X(
%:ZG-O9-KeRUh)7A:<B<9#^VX5EGT?l=g#[%V?hsGf<4c%?JOW!L.+E";-uehDc"fEG-F2@R#SR8[9_eM<++++PD=)d>XSe&O!FRb
%^&)2\]c$B7>#pbgZI1I>`6@c9l)%FjfI>aSn4&Z5f-X-`N?_5dLHZ+J&9.QY&5;r:GRI?g8SebSSI?:81(4a!!+^lHKh`d#Nfi2:
%Vd[4aDb4Xa!R%$d@"_mm=&Dn(85=`DZ_8>8?a&:!Hd!c>W'6.TBMq"ubd__Sb2nkp!Z[94BF\m(<c=_?Xnil(jnJn)62UA)?bQ%i
%*Z6nikg5Xql%4r1)Sg+L??Lf*UPA8LGa)Be,fFi*P@)t0#Z-@\-`g8o'[<g'0T?/`BHjH6!8&8FoX;CX;XTRmM+!9q^ABf#RG[Ig
%E^6GtA/?12)`325JL[3u9[o4(nS1,AG@Ws8]-qoI(ADO)^lY-k+?t]-)nWQ5B)6'KO(*M5Wl[Whn\I71LL$IPVWV*uhXWi3ftTl(
%Lij?EPUL6XZ$lU*iPNJU?mocDa?h:%QPoN#,p-IYNDj#`>qM6Y`&pR29rFWm63?3*Jh4kSGtL7rdpM3@Gm]]6"24;?7'+!"-h@m(
%;B\%/:b69)Mic.]!glHZ6^1Fn50q`2o'Y+PU"'tsX^%`%ot$;`da=RIR'GfnI6KgnL6DaP!Be5m6dp+F=(Akt8"$e7c%bd\'t"Gj
%V'2,2VRfWHiY:F(X5X+#j[ci!_(.;#$4RF0U`gnj4YZ36;I;g47s.V-o^YePjC/pp:p:&OTqCrXQ29U^Z4"s9<@t]XoXm4%eLDN<
%Wdf7@P_BEu6`UoI,c$7s&N-Vo92Z7XTf</'lJF3^&4Y=[1j6K>Nn*%FBu>Ceib;=Y,TOgEc9d[S@M##o:Q$;I[S]Fj&/V]GC;\p%
%^V"rjpTu>bf'5+Dkq*=u*Th#;6;(&.5ib0TPWGPjb$j98W<tJk]XSOh8/r18`BCU:ZUmks*/4tG-3Th3"B@L.:(tt!?[Afa,qri_
%<`m6pC]Tt-nW>O4LJ'CXnIb#ogPUEe[bh?1L%S65eq"uSmdm*)[onVfY"eC(ji2m4,YfRZ9[s-(Qm0QbYoaFF)g<*.a@Zsgh+BXL
%nQ.'HiJSs]-CFtheArW78CGk>BRr&t[0-)GT!!kG,FShI<3$A5pgMP@%Qkmbl!/[(9H9Ur=*+#c^c1HJ$S?m)[nIjrX-$.&Sr&pe
%3aQJ#S.ej"mb(T'P=Z>W6h2B:6V`/RLaBq$7RCW:355L@rV##t>qD<@E6A!(U[P6SJK-JF?9/Mm#kkY'Mm*P#o0__jW"9<2p#"o)
%%4,fiEpU38G"DFm=$Q@*.L@[5I?%p2]_4N`kVYFT:5WCEkY6Zl!Xm_a6/]7LSKLDY8c'Gi$/5^i.XV8dCdb2nkOjW&XX!$<,=/X\
%4nK?9c-6uD?&8H<S*X`;KXR:#*XFe3B=jU(qWtT4ChV_S<KX04G[$5'LjpB-65eNf:$fZFZ<b-R1R-4925d[R@kBD"-O$jb^795j
%ee&Og9uoo'bU`^O$hBa2rNB?qP/i$cIRe<4N"UW5n]=Uc7H<R[4BpoO`"R5K.#F==4?3RRbfE3m^;DVtO];/dg.N.9IEiGA,^nTa
%RZ8L%+=SIsoW\EjJjQGIbo6_+8+rRj5o!hABif8uX"u7;RE)O7mr-PDn+V_aDcJeDeZ+pl,J_YWY$FTCcY_IKd$:8/iL[eX)c$eR
%fa$YB%2OLc[;3ibO^nLtjOY4jFAP'qqk\$>C$(TBgnP7:bPuRQ`;H&e.O6g4I<qPFnr?e-Ort**/[c?Q!;2^00'CBm7Q43&qY0)>
%EZ<XqeWA_$m)e#s-L,3b%\!OGmI0rbDU-3i$3d!E%i#=8*aV^n?kS`4CMT2.C$$F%TIb*=!s=B^->lDf*^g-+Mcj-DEnt:s#58#+
%?P\]UAO[Q1A,nahWeZ=.TIb?t.sbqIT`a?dH"01@i3>?_U(Z_Bc7h8-Cte)R)D..\fD\>;r7LT0ka:,[/k[I\+OG"S4E))f7!]US
%d2q$c/2*qtPDmqMTbC!krq:Kno[]D_4#,AIUUc,P5^:E^'8Qk<i5]dPX-Ud//'T34L=Qc$#W$u,&Ynb.4$ZNkcH/)i3'*eCa.*a&
%@7l*@8MSd.X8Xq'J;n+MkHq^TZ<Jg!Hk4/rr,TS72g-SX59_hWIi16'hUqGCrV?;\^Msd>GR4(i>UOVsqK,SmYN(`aqu[i&&"A_k
%J'#bG6BJ!@"!@,_bfmoeiG"c)&!m#'EZ2K]8;^UH,YT/+L6%[L:9r77jdO7kd`K?YEp_t%a_i6&1"k1hj^q9=pZ*Mm>,9BO4'MNB
%)u$6!@7YRh5DSu>R:/P9\8Y:hW7,cB^Wk-?^S]7_=6Q/iP-@GQ//a34rZ?K#O(YIs%mPBT,!+rgAa&_D)$6CVQ1f7If0eqca$3'&
%e\0_R-*D2f:fcmmmih]rNL4(1nE<ZWq6$+YgO%%5`e-A(;ut:oAJ<U,X+PSTICZl)T#pq/<+Dn(Q!lI-]O,"VMg^C;[3X[^JI9#X
%W+.:Nb`FJah>02aH1=rQ_Yt.6l99J4WW.597"<Y0?!3:Es!H!T6fm72B'X<$A#XYO4II]!%*Y-R#RmI:pri%t)S/.fLJkclArq,c
%QEf!_$d;cU,D44)M=i;eb7eX7[6anaJ03.j&GrY^C_Jp.Ybj/_>>7X3n>R"^S[#-7&<$&F;YncMNFhpfY,,=T@k<H`*@2R8`q#Kp
%H5,(rJi+FoXB!,2[OhS(7a(QO\1aYdB!A1Y!O`Zp-YHCR=ZBg6MprpjK.3=&d1dI%390.2Tc37a/Npkq2jWV='/91>mC)MX@p^^0
%m;$:UIZK.kmM/*tKO743aZ^a:p%Y2\4$).Gd4pt734Ve@B5a!/qGe617CtC74IeakE+bj:N5-pClgP?/GQ4hIr:'t@Cfj'hTQ*ms
%7Ca5pDBHKX^Rj;V4:Ik<_)!8W+c5A"H!c7H=KfpZS'+!S3rndQDM90`9d#3SFSNYqpqB&@*tNa%-sB&j&)>Si<\UrnO+!N6!WVG-
%Bdc>2`g5>#SCbW&2+(1VqbBh/%&5Gd`j]<4Z+/3%Ai[V3$=+;3N/7)K;2tH:-1>O5U8Gl8$A<-+mVf2Da):uWQ/$-&PqhoBe12^;
%pFFq.BjR*Ja-Y'5"FoXtN,C2eA%2`G3p;KLTg`i7:Ug//!WA-\N:!aIUAPi*%s83(0MuF`5\+\"--3_L+J9Ut:F"16oZ(B\G^gU,
%PLK#I->>#cq)plq%p9:J,rEn>VXm]po+DLl*b18hlOqK;0nH"E$7,q:?*.b(^u[>-[kejLa4PshYj?YIFCqpM*ll,Ui=Z#ZV5;hW
%aQ3a9JC6f$F);<Wga#A7="8oKiWBR4CLCOb0Y#+6hhN0$OM2#\8\h.epm=A_B(\DLAsP/K0TSAAq)(a[!>$NRWOGt'r0H5b<5?L_
%1It#r46f8OMUOV$`)p'A(h-ZOM%0X`^AM0@'OlTsA?q+DD3-bFAX%u@1%Ci8IXhju#PD0Gcq6tsYt]*$VrDc+S.2Luji<OlZgte/
%FoUu=M2)VakDS/lkGS5NQ"=>eBBR"7:GQd-eRWLEcPiCt*$8\NL6VfYMNDGoX2&2CrAL6jAB]ikK6+GHs.h6o!L?EW[8g%,*2Zi5
%HnqDJTC;?!AS(-5EFY&"eT(]V4S!]rQHJ]l3O<,)&:PKJP[GG6O&/tE7sMclp?$S/]4``k5P6D/0e*Zc#=.S6;19Ep?3eBu1oQ.K
%[]@5$gp*R6!%)%fbic=Zli7]4]4BQCiT=8gbh/Y#\Hjl3f6[/qV`RtUj.R!93Of%Y\WXsbg[!9_;Xg[5j%pCDS3g%f7a1fJAnnDI
%o#Mjh5*`@:*\Ib.7nVg'e>DhP4CU+r\]#p2acO;CS"F3aQLnVD<)Sh]Eq=AmU?-U\U5rFno6)nbMm8nX?Vo5shEXF8Dh,pYA-r09
%pr`W0:tu*n8B;>ujnAIFUDJ>rEsFJa1JD)a*36_DnU`/IK&Y1s!XjoB-:%"SUCEb2HfZ9`IWW"YK)jcY@.AseraTQE\Ou5P[g2d(
%Q^!1gb1oc(q1D*5BfI:?ppnOaNu^DIMK7Y$nJ,DE;4R_C)LC3A\DF>:H(<l"a*_+Q5,O<cS`p)Y$Im^/l,@cXSoquMF8_EFm2e0:
%Ae.V_)>O*d*pJ(bI3j?o;*#u5UbU`];V,a,908j9j.*XJf]B=d0Z?=</2atT-b8?D<$3K96pK0*k4_?_j+n+eNG=pXB:q[CSTn[&
%KMbW2%'B9G=:`h76K^6XA:BtT[&3=4+j;bZ/PF8P8[g#V:n_3fT)N=!.`0P1<.f*;:.+NRq*DqIGM(H/Mlbq(K*n5n8g,=Z!AT;Q
%:h,Wi+&"\#d91%L90`R\HX5Z"[G^NqTFA]o=U(TEF-EHJ&%WmO8i5B$q^QsJ`WCta)ndjmcY5d$.ns"dPgWNU<)r;D7L.:d>?SiI
%JRtM7+3-G6%`#tOO:b[j=<Pp2X1WM/K$`p$!.h?F0kENg.uM0Xi[CDIYq&Dr^\gfiY0Jh\h\W%J\gfl*+.Er\DAFCcYN^&<3l4-c
%7qEFL]t"R4-`lY57\AT:)e7;mDGp!J7Bn@2SeqRt&be1`PGM8]3+5_LC.,]e,u"AT2CAM,V0a-h^/uj0ro#Vc+:Nf+[D2<l@#!Q&
%&HOphP&(dQ$Nl4#8/&1&$Ab>pc5eA*I\L,cFnJk%N"GfZHrPlk(W4(rP?$,rAAH1$PjR!H]e@OG<`0[F2H<R;4fm)GNkfY9*gl?q
%nit$&JUV",m,/R\7f#QR?%oKXj$;>)dqTPNR1OAE6T;*kYRsLWe`@*$`D-F*eQ!@i4KiZ&01Gbl7K^OM3Ta]GgQ6"KIrUB/)[QH/
%'9-D/.hD]'Bf6>p<YYlh5[V5i0(<.:Rh`Z'Cu@,0;Qu$Z8o*8kd;JmPl:1f^M??$ZS^0,)$ATn6j]"$q@;bR4*QONrC,qo=%K!2Y
%-jjpT/?b)n[[Jr`Hn7-0@\Tg>dQGM:oTT:paO0@fN;aX.4RB8+9g5QQjCes0^R3b^-N<[QY+0AZ;*0Dg?#!bDNZplW)mi6?E.8"-
%QLC3P?#bl^SRW@_(h*9*(fl4lG/Q%IT5op>GjUd4F6pIPjVjlFO;Od^D#0Dm%(0;YROU!Sr;6P'f.k?oW('?S['I!5qTm;-[/osd
%?(0d>M'Q4rK>sTSe*Rl7XbQS@!YC$BUPQ"(D9oJ/;FRD)h#d=DqpJM^+hU:D;PuN#4r*6];.Gm&6d&gYBd'M8[E-t"NO/EWS%<n?
%p?B3.+O!\:6F=T<&4Ue0,$7eHl"\*u%O4ETh]GF>o#5+QUJqTm^C%3$P?2i+.%[M:@R_OHID)Xtfb586F_&((RpuZHZ(X3Zk@S0l
%UnPF81uY4S6%h6_1k[N]L6p?:Ts+T$s*US[42r\id[A7N^=ag`.2ec%ck-gF98\<2`?$cYRm"E8"*iPLT.;(VH_gbqMtaRu,9=F!
%^aCJi_afCk7r79r#\6c==e0**^\GTt=35+cA?r:l_d8Ba(P+C:)hiH-Mma;$:5"Nr@C>k-pjZ1,O\T0ubj;T4UTe&JCliSQU93V>
%1&dn,jcubrr)X1F]Pc<IA%;Q6QtsK%;\DOOVF>"J1ri6<22p:_?VWT*Fum_Q1])>T,HLkTp9LF-!g(2'8mjRr#>&(ne#_#t*qB;A
%&+6]+l>8*K7urb,ICg3-Ur;QVCS"OnQP3@`Q:]4JeB@4paIM[<\6*s"#]3MX6j.aq`#_%p2rgjZN+g*^@lN$eV1?Ln(\..ChACd<
%"N@a4fL_j<,lH+]oIS8%.DeU7")0&"=qI'2;6li4]fZIUh:OL?[QmaR.*3jQY:olp\mWMLg*>=8k3S8r6(<JQ9Me!8VAgFKL$G1Z
%PC)sbmjP2dH)ANAVW9fM)5kmXpaAiB-:E"o]Mm1DqskOMd:/i"ZJ,Tu7Wh^K>(0+X-(R)*>dq<&h#\*Xdh^.25!9B#X3WuekPI"<
%(uR)Ea9Lcs");P:0[c-AA@[=/UN\t@4uWVD`BO=@5M<E"BV[@#e:e;8;2'0)>7nb8U(#9HK-XGI`j*2K(gGFSMdoEQ*!/e;1P#K%
%@[S_a:;[?o;4/W#&ca0S]"2%G4"_>*M:j*r-5H,BgE,B5p+rQt%:<:OAFoj73Y9+4gKc1r_HYi"q,M`Al>c!,l#q1Sf/#8&M)XTH
%K(E(''"C[O!Jo%Qo?XH\-4/uiV9k)q!GhBS5JN7<DFbmCkm+IRj"A6:Q.0eSo0\:FMA!qZ:13iuF>(9"J+UgOb9H#0EtYU,#fMsN
%DmF0,V(j]^Y70:[1sHU'3^o/u9q?f=D"OQaCJX3sYfC55H1m'kcR5D!iAHB3qf"oG'iYlbQf;\Ac8B90Us2%udQ8YpF&/3]o.>:4
%-"8m)Z)1-gVNd'-+F-4Z3HD^Dmu];)<=sDO8"C*[T>hBf<u%Jp]_WK\$\U!.N.s,jru?pgC&N:!TC:OrWqbEX1M4QqoVuM1(,uuL
%GG*>3/=Pn8?f1j2!b$UBJnsbI]'0@$$S99gOC5r(aa$\!lB-7,QrrYCZYTd8#D-,$#Nt+Pp?=Xr=V]o*W@cUY37h80eAV3@Jch.K
%"I/*;c'.j/(R[R0VkV7]]2;&;9UVR`6Bg9lT/3maanP8QWAjKg0"u=\em;Wl\Nq=/jjGq9=#;82(t7`;BZB,c_2'_`d=V>UR$"<s
%d`=qmMCTiEQ"at?hKU6IELRT]ncFQB2hb[j?@I0efQ\5n1)@_tVGoF5F27lBlnd]6IMCW$%%X%aPiusOO)qnW5lB91[FjURT,F^/
%$MU%L>&F;=gDFR6m;UMg6;"`25^[S<_jN5:1[^UHI_I4H?&J0K6'R(@Khu7^*h^R('YE.\67gIW%4c&X:gGVfD+>hHB0kJglut_q
%6/L&b"NUSShX9u%G\:jo#,S]FK\@7s6(`TVO6c+K&)eIp$ksQSUPp:_U!"!e:>@a8][XKi)_=!Y#JtB<P9sju0qo\3(m1m*HaUS'
%'t^CdBkOS\b#"J\P$GlPo3?e6`A>6g3(QtkoaW=>;aV1_2YW.nP#M_GE'TBLRE[/'lpMg"[$\7DOn'p1BtN-fE&k60G)GlQJ=I<5
%-m@EPe,@]rp\Dh?_TBt=AG>NB;Zd/R2'[g*PF%2teD53NP[)cQ`3h'=c/RgA[s?Pn[ET=Nn_pFEFe819fsSN)Yff]e#8BbDGb`XM
%'BpWDl3"X,XgYDXl<ZV=7$V8UiEo)p:a+;G7t2#pT/e=;+F+r-PcFNf34B`)0eA!lKEH+%[PZooVp5RCjaHD%&0.c?_=I"dVR>a^
%50kp6OW9tP/T-I]'-P/t16M0#aABQF#PjD\Dn4/-mKGY-.m)3(6VXR+>)4m[iX!?L\UM/tKfLs(!hQ7\d]6,kC5I7'%lk"5%r/T>
%VFfG0nK]RpCc/4?EP%led"g:^<"8#L1=mYDBXQh9_F0"bD[2LDlSCN_(*<'$Wu9QhfNl+MRC(2C@ap8E2H%IBno6o-9,Qf:a01fM
%)mb=5:11_PPa./_"?2KCXdVR0<GjHhq=oif0H@f"7#W0KL(k8KbaCt6YmC/&!3-L_SkLA1^-Pf[Y9CQo.2EtT't]lp8*r1I^at1h
%e^;=%U0FL0CGT]mVqd9:J55Sa1M%2dr[uuK4ScP[eKhhh\3ZtJm,NpJQ-^Tcq#i^:!YXumm#D-0+nkZ6TPhlSG2[@VMu->)o\3J,
%`=q'sSq=SB,\k,iE11Q)<>/pDc4&_DIkCeT@4.U'1h^Pt`!r'QCq?M_i]gCUbZ8JOZeBg9Ca$YMc<*o2ki-j%oW^UHmS<eOi#_eS
%H%2NW.;=Jk*OHDmq<=/-FuLn)l@1!qd=quu"M%T@k%W!]Pac.j`\phZ\VF&g6cABKkA@bF(NaD6HO$KJL`HJ<%ImAhn+1I5Am4k+
%)fuG>5/MWK1e:H9DAFjqo^q5)fnK_,/n5=Z6flGmP`@_Z.#am('&^GGUY?,XWi\jnhh?C)'MK1"0ie&mR\<:A\eM'/UVOpA_h)tn
%FS%2>K+EHD.5-/uK:")A0@Y)6;Q(8"(8(/?!D9a>H9a27"]&hY:)q`qFZ+G9(pDHO:%3/0"W8OX8k"q+[Z+7c5("]K6eXgho(1E/
%GoMZ=N!ghPaFdh].bqg-DEmHOju<^jl<9jod0&?X'&"t@Mn,)g8i2J^EY]5hb4si>)",><;G<7C3qX)]7kAL"K&TcS:XU353IWY/
%E"jI_*Zq4i-(c:D*CXjR=F.7HF=Q=Vf,`)"a@TF8MGh<IF.EGe-uu6%G<;]d/N7Q(.p3+l<.LJ=H0iFKG"Tg10ATGYiKD-A=BPOU
%A1`#-?M7Fmcd)af@R5ngch'Eb+;=jq"J8t4`A^!gcW@OgK'6<n/@cKiJ^`4qHq5$,_r'/T&tjp&LZjMV%T[gf.><3m`<h,B71h@G
%L^gd,K\^#`amfh0A49n@9Eh?(*-"L:df:^P,a&ss\ch1#Rm9)!qk"u9HhE.'g,(obUV/LJP^#f&R0)]EZZi;V9^Y,Ne"X^R%#>G>
%DX2.s6&%r+Qcn[E>'*IDW":m\.XSPt@\Fi\$/Cf'H5$A^Yh6i<I$T7%E05f+@f9F+*PM&AmUK*Q/d-g_04"TSLB;=l4RBcJM=4AL
%V'"Q(fPb70TK*M2$GNqt_ZtJtBqrnZW)a]KZFp\1i8Ws$D&$1UM2m;\+gWiRo#D'^*A,G5UD6]TS*G/R<%l#"T\j,<455jIpeDbC
%cUXRIE.E@=!p[&LPTMj.1o'U^Y-L$eD&R?B0Tm]r&,7K)]82QVeG,EkZHMnF&)tdb4ndN=+dHcdm`-jMgg;i,E%i;u%?^c@,]-*c
%!>1\;mil*S^0jPdLH>Hds,s*[k(,UDRu95*dZ+mGJPa7A4c;a<D+(<Wb7Q)EN0]MtQE>[Tk\lqdDC,BL!W59*[Vbm"&'*#td-k0+
%(P_c>ZN5F?9jjFc1=:D0"JBNiP8D``s,P.Z*Z`p@QXYa#f%BANoO9T4;)Z%$o-BFjH85)9nW>JW]%a&9((0#:I,?S'^SgMSOY;u'
%WW(BjCfj@e3tEf=LarN8O:iP[XNUJ1l9>6VkdptEL",t\)D&,PQ;R-"JLljien"_J<Fe?!GP8I=_Y&*i9Yr`QADu2V+7l9Hnu6*M
%Bc>".lG&471LdU,*#iMhal4i5SPrjJ-(>`579sa6f;/o%UlmP6_:ufGi?D$`)+;8h'd`tb?K?]>7'fqf.h.!L#FAlf;;QtTg;0J)
%9Vi+gG,J;^GISjuNhIp3c@d42qdRZ@%EnAEJfapSnKM;PZ8_4F)<D1EY@,*cdRBLQdpj*#<*aQQ!A+ZJ1oocAbj9s'Cb%JH<o@%9
%Pe$([>IbG1SH4AEg=FZ68o](tXAq$nT4gAs[O?5sm4eG7NW1lCE=-8E`!lMe1:d'>9!$*OE\6CnYQV\q,^+&a+J2J^T[S0I6gNtR
%h`JS!\N/4_MA_UBKFb(7S$oq%#S=K"lbD?>)c>c50UI2NCNL=;nppTp+:=YO9/IMqUT/V_Nj3l7[7#$YigP-BCmr;?hte#.3inI_
%?\7E/;3=+D.bUH70S@P"kAPl4laELRjGIoDZl)k@\dD5gj?m=QX!ZH/8;n.U7ggQ*E\aA^p-VhpXC`ote9Qq3AP*h]r*E[+AL[#a
%MD6T(:GZ^'Aa`%U-dG^/O:oGuc1qn%nuW_@;TMb0(H/1Fe]8Te(Gf?V:5;8+-/9RAg/gU8HT1,CR<<O]4s>=J30HZ&H,MD8ZKa\B
%hktM@#'WaP"XnW'm<KXA8UgN.[l,eI`@pD@LTNds$j>e,(oCcPL<4k]GMr<+'^Q.na4R7m$3$utG79bH&o,NX3Dml%\cSM$PiIpG
%F55jjbhYMO)WO^rg(aHPCg2Zr?*fLZA&G0W<O#3@a'E.Z_id*th^Ps]>I2Z!qe[;KAPCG+VsIjRlGJ7lX/i8)6@3FcCt@9+$4ZR]
%;1`YqqMVf_1R4c3Qth%\7AY@fg,9X-@VfB4`b3t/rmE%>iUTKcPm<0lf)is[U`h[e4]ho7\X$RP5s[k'EW%`Ts22h7HB8i1b6[eD
%6PTqYk.R4Y^Js"%^-Ic0UVW'ce,s>k;NJOKK+pY8^Kd;*j>N'%lM[[<X0OZ6.b$JgC!e)^h<QgipC$2(@V#7m:@6n%\r'Z2:\X\)
%*lA9.8&VW^PfFb[17D-t-ZFQar4f!+@a4/H3G;!'c$s_egp1ln1!coXH9OM@.8*):XrA_\+u!DGRW^EK<t8M\N?A>1`jh^"=7B[m
%a$[uR`+s(Z/Y.RRWY$M$Q^lFe$nOj4U/QqZUA(6+[;>i>/LtM7/2GT[37i!Ur_6%7i(q[p2b7XinV4#^=JbCVVf=HHR8=GWH2b%m
%*EG=!]7i'C8RE&(kJ-j.=<U-VlASQG$!Zb/Lpt[dDSuCVUWNo^pgYoUPF#<)oslY2mJEtu'PjeV;=Vj+T2f5#N9Z*cWh>r,Mt7Na
%`Q)4i0<jm2QY2!8j,=-5mA$!)*.p@K#bPP"^Rh\@X(p?&ijs6%jp>Se#R':FWi^"Q')Z1s;qDAMp$KmN1A0b'Si6niX>?IR:GtR^
%Ob,10qR[53V@/&.TT.Wq+\DHf]&k4ucsqgK/kAhP!X0^0PAkk;:N,iaB+\;`H:IBW*5t($QXRQe-30&gP"rq<R>*+;-0dKpRke))
%rDZ0+'W4NRCW$`=+H-'Ao+[mfOL$/EfIjrqKRosHM:p3FO-QSo-,e>T1_!\K5_[-A^a-BSmWg$ImhmZSaXABK:?3Jo4r`t>A*m+7
%/q27)]+oeB(Y9g%3C^E5\u[[^\C:'a?9fqu*`\9=/o-fUb3j9\75ko/WUb,M1g<K@p::s&h8IVZl'+:Fk)ONPEH^H0a-l92cLR16
%s&+fpNCl5%G%h?O3#.K@nFa7>q=b\i,Uclc"%^/n:[_1k(a1Y-p#>V/1%t9G]_8r/#UD?Ml8bJa]fHkJp3&o4H#DS#'bud,qKI9n
%[&qLBD>m9&,Z]PCE\_`@#Qd4$*N-@#YT+BXRfp.$=iB)@VQscirS]Ace=>%Q*4@3R5LO@l$.r:r3P$FB`K7#F%'O&2]h>KWP1(Y/
%b9()',h:pe'U1n4b3dr[jZ'<6=A<fRm[/i`dc"[g;,]:dOBJMs$[/"i6]cY"I-]^Zl=bbQh$aa7<4O8/S:GB+cK^A6J@)9clg0-f
%HGM%`>'mXDJ:"E;.:rEm^PZ*2m>\_ArhPGMW+>OH6:/co1Fc4@WDlH0.+oh4<2igddXOAa]5jr-SXImY9`>gEEWFUd?<KJS:4Nu=
%0F%\1GsjTKE-_6h&(YH`$#;3^r@]H$i'f%JB/O[U$@k-Th:hC*R(:@U;MCe^7STfe<Z]H:aHgca9q"RoB,\sUJSXu05d.tQKepfY
%TJ%6$WdYZ8qn0Mb2^SaN^uk6iT5G(L(kCW1BJs(-@t8\e)@h8m02N46&1cu'ZE3[(MQ7eX>rS_h5Q00*eWlHfF.j$M39$j:9r-ch
%LRKhk*2=;9;;L,719hNt9WYNGVf:MT1(deBHRJkIP+LS@G:,X+&9r/0D>?A=ar"k(hC`*=>p7ipYt@N+L<(Yai"a+'rHOJL/5HSH
%g_idDfcT:*MM(bF]TB(?[bM*tMjf-8M/s(&kGccik.1k8d>lHfNP%T.<LV^"Hn1N"A)b$Sh2dK!T.aR!)b%.(.b)"^;`O&QTk'\7
%"_XYtPdOs,>dY41EJ)*`.8C%L?ZD=BoD1*6[Q?g!Pa.:W3E([4->Kp:fJ9FHod7=!`Ac\_*P=&I:n0=Q)MUZ9J61(h%Pn6RCm231
%RWcD-6R;\<6I>fIiL1m5o21P+\=4G9R[mW4d/3+^nq.+WAD`,**)CQ?h(J%MlkL(mVapug@_mR."RaV?FF^<#$h4'Zmu+or&Y\\#
%DN/Y&QIV#O5.X+/mC"/<Dks4LE0b?0P[fms/?k;S(J?bB`6R_-Q(p+:i$ThG_&h9*dF?hF(jpF921J$d/CCu``:E"_D:4L$6_EG+
%iu!O>!fXR4_`9Zr1![e2TDiE'a^+6&eFrP[[/ADGT-8Yn%'tm/`5&2Hs.<Ur9N!iD:@p3chQ@JEbfV/>R-K$5rXJ:*d*gUcD8FkW
%88ps*J`oWs(o-0KO3sK1ntL$F?#Zbu!&MJ0J9d0oVjb5Fm*DNlihp\+:E(HFa^#kOS<rW"*P&/TU5ZtE(V+9qGBn!GUo:Ku]iLM#
%6N:2?;uOA,N\=epgc)2@J=a2D@LY8QJj7RAcEfh@9R+(h`_1W(T5TZ3YLRRCf7;+(]*2hIGuQ2Vdl=K,NZhf]FE4hFbIeSt?@WTB
%fRP7B8gn8r#<QhGk@KO-$<JGc&,E5_<SWo&h:=bb?s0BJ$VZ;g"FnRXYspC.[U0^l.o?F>hbQsAcmtA;4\a!:pFg=PF/fL3^*['u
%`%/9+;LaO_UEnCtTKY7ig.bnnQ4S*$dse>0B'/TWNj76@a]?&]M@Ic0(<#acjC`^%G-`\`>`ap'A$pU\;N)Wc84h7b>WJ?Io<h2'
%k/ERtUNuorG$A#4k3N#*h1'LL#*i&4l#g^!WVV1*U\A\nZM9Mu^Z_BlgmMud9C1@2IA/#7Y7Gu'rXe^SWCZX?56&(^_'@+OL5]S(
%2cibrP):hAhsq_U+__B130d.JOn#HsisbbJ)@`7:>Qm=qk&"uZL)3NlIecV_!Jbgp0#T)/N/b7C]n;nrr[QX[Nt!U3`%Co>?kaiE
%aOkN@&Q<#8_e]\%V+u)hZrh="!25as"ElftkE'3I[H0VEbQJYXn?2lCc]q32UkXgc5R9n*I)U`S0Os,E.`[Q9U'i@F>OKSM6$BJt
%-2G"o3rt\.df_6*Nq(tMZ#;b9)e%/1#7AJ0H!/m<<Qm/+9pN2]hEi;WeA#e)*"@m7pdPF0IpO6YAcA%rq`k&Bs7*;ma++'_fDk^)
%s4dSF5Q:HJ^L?In+@7]-cN!\"5Q+shqEOuFJ,=_Fr.k=C?iKZ;a1m'%TE"jsruYMC++O3l\FP-is7`D..Zu;b1<s:]_0oPuR+)8]
%5H\Id'K<]S5s.-)OOmH40SRQ1F;>b[,R?ur!mYZ53<eM>MCdYkh4M53(b)+D,'$lp@ou@$)9F9*#\gYJ",8jgq8`A8AF2+6":%bH
%KrYN3*:&r&$GIOK9&N@=\Mm5j,ouejL-FJk(>hqU?cFBh)f.EfVh"H]H4f;JlBL5+)+pT"L3<W*,Q:i>FX*ch995f,Oohc7qGfiV
%+A]XP[7Z``4!ZV[+OLJC-XgT-Xm.ZGC'.>R(1Ds_.o.lBd)DM?D.:H*$rnA_PF%MJUaS!%er@,7K(F07&eob3)pptqRT]?r/i^a%
%P[]2Z7nrDso%s:ns*p<kVY.XuQ*GnY=%RLBE27>W3*0q^GocU3a<bD"ZBe;"Zi,8#af!/4!dBQ4faZE_fs5ioe5$V`E%<tsgld*0
%?esjK-gbh3Xm'lZ/JHgT,8!LYWqeQS!nO+A/7fr'^]M<=0fAYUE$Bcm<Ec\:89XWKmPZZm;atlqW,tYeAaA`@eCV'ZG85;!42G?;
%+pBA1]8C^i4ndi`9]H>#]+f5Ub0Z@'lJ)3@NSf:jN'MgEF\O',,Ciiu7^FNl`7ttq2)@BD@Kq8-*-gqN/A`fF`<U0@gYfQ=TmB8D
%-mf]-lOi>!$g-7%`7$ep-e>5qiCpoh'!!7R[nbW<\OFt@@ReIEo(L#A44@_>d8V%%X@QNMZIRsm<_9/%%"%fu>tBt1_]=!IaJ`N4
%TRHJ/P@/q&#XLq#1ek(C+b:4K7jSC37)!oipXRAop86AIVORuWSH=tS`P'EI=@iB;$ZGT<rpon5&E*O!'L0k>gXo2.5SN`%X%8T:
%la-C;`.'gF/SQ43$$AgQY`.-#k0rqhs7'//-N1G1USib.3\Vj<gk\sO&#!*79[QsJTbN@%;^HQoQW4t.6!2YY0M8r8r-^J/ql2F1
%bCHDq`ONg<-*JG:5Mt\^Q5]-B;R=JADD`Z'P_Q)+`FZ6SUn_fSM2EIp,_pOg/$MS0>fWf!fW'(bWl3j`A$]BeWIY$,ol?g^$s$*b
%LCk?tbJPN^oE4HIf^hP_X\o!"j&/+%3m*=c%'#G:=p`Fk3J.8t$1>jkQ;%LaSo\n;bB3P*+UghR^t08V[DbAOFIj#"%T=%'b@?Y7
%;<@XtWAJ.;0:Q1PckL[Y)=Q65>Zr,1=G>rcH^9n]:aMnH0=ad+o<oM;Hc,C>9+!SMN"!hYoO.>tDtj!;&Gu4:gVq(pk;I<n@Wd.r
%SL!Cu3R4:G<#'t9R:`?AJ&mn)!N&4P1!sc(#_*\-f5(ma0"Cqb\?G5G,WDp=?XWk#h[#;s<[j23,g3`]A/UI`L6<Y`'ElEb4W;BO
%[b(5qDL)50GWm2"gKc]%T'0Gb#4+4FRP0T<O6>OckHN0fP!PT?:jB-*f9',^`/t0O$4%I"hhe<fVM[QeXCo/f2`J_G9$u\<CYg;)
%"4!aV31.P_]JaF1\j*3%nWdMNa<?HJII[`<:V`,;ZZ[S)YY*6@L;_]l76RE'p4uRD91M;-3qF=Bg*u.GdAqiTn+qY8=!=2WbJMpr
%g&fU+eI]ig^2#[n[A/-CIT(2&h0_Ua!f=_&A&qe+MB[I:&2rrO2c;@XMs)5:/9qkur'8PLX(`LFA38_K<0lgE`_LY.5>so7(al=I
%[hA3<b=UtqEZ+Q7m6?eZDE[P#F]AbEUTMif7kU618YZnJ\Bi=0+N2l73X;gh4p.E[MOf\1)CA#j\)t%p2+/Ok:*rtbTk\5/9_JV5
%8g+ICF4lNW1kPdiR2cC$bs7`U&5OKg6)[,fgg/q?Xr.I,O<*ZlJan[-E2#=/d;8_cm=?-Me:`"9fW*_"[-:fQ5i_*R4::q^ATpIr
%^,!B/L\+Dg]1"R\$JEB'",:4>)El5]:t$SL*tFjaBIV:QLk,HPIiV+jKfE,iK#jKo&JQmU%n:WtK2Z.m:('![i>p<]KXQ*GaJcs<
%X"$L^"_O2U,-!I>Sgh!04^2jb`]FX3bO@nYdEodb:ggu?3`]>hY:p+i8=n:6LGQf&1e032fTb;H<cXCtF=c,:lFs$SU"V/42j\+3
%k:p1U224dsDJ6*!_D;_]P>-^!=`_f\kQ"-a&QQ#k)lG?L8)iOcQK]M9Cf4R4)*S,]WP%0c_uO:3L^Y+d'pCF'74ma%Z3Kk-@X&*m
%>5O1)JU%sF9XsMN%n!?ul/6)">NCi$Q0j0mo-F9!iKfKU31PQJ*&g0cQI6s"H<[76k":R9g-X)r0gON"n_rI2=q8gMlNWc/.naXp
%<9$V'F'ne`lk9TD;GlDq;4t$ijlJJjGG2:UN[o_jPl]^@#_Wq6VM(iX!3OO\]&1hG5hR!M,?`:lFj.-Z6:T0qkF_V+m?&U/Ns%S^
%&<@;CF<PLqR;G^AU(%f(s3'RWbItl=Lk+E12eV6%1Z<r9br+-JJ@2>u'-[3i+%)0Ji18sM:]1*Ka4)*!dVFjm9'nmR:Hce^W\c3]
%(@Ju<JABF)<O<DprDep.=Is(BL:tn:e-,4&8!2pe0*)q(FYif^R^/DgQ9EC"E.lE+LF&[(.<,6nh*nure3SL`091-`%s/:i!nHY<
%Xq?34WA"Uu-TZb%4._bC>Eh9#JOMRoVo,CgWZXFP6ehe<!LuCaO_Wq>O*-%-+NPkn06fLmKem^+^Au)L4B[(s5jG2%^E`tH("mcB
%K>(ST3*onf@\?#Kea.hk!M-T\Sp_?QMT&QCJ_IRO+EA`<FMF3+qk_RE;O:F$Q.[jh>K[QrZjK8FdC:\#D>WuTE_!]J:ggDE+^u<u
%]*@+cA]#p$&9]5N_CG4EH9;N:<fB1<UJq6oVHX`iJ9nYQjRCq532V:=a"Kkc%$[@]mA!Lk:n^iH9^=eapMdP"[NV5r?TZJE"ql//
%mt-fGO%.lfD\h)9a.ja`hQk8#C6-&6`OQ$19R%F6dgTcZ]F;_A'Kt*1Xa[bujuGEnYOB2/+9(uifN9i\Q,bMOD$E86,#Q\g31:5@
%IAL[A#7i?gnhI)uWdH1J-$KC6J<6m[f7>??#mmoXp5rW6q-tlH1`YpE(u`/)7=07c1K%\-F3k[[3+Pul;0`FVVACm>HMtm.?]CEM
%?9tfNhgB-$rkbXs`1)ZM2X!+aEY.7]jimsFj?lKJF:4R+*NT*/:(>E]S\W(<GL`asg[QUnhbP`5.Ms/V39#JMiMb\nm#2V#;p,Kt
%LHt61ETK1u/'iX`Dh/<gJSL^i@c&$r!i4/%:8a/,K6LE;ea>1!b5#6A&hJu_Osq!"hc$0HXbsd,OrZT\-H`*qaP&O#MW@Kd"i<;b
%EEti6Q+r&(+GYT+nGH:anT2nd(RJZrhjQdM>F3`*fVYkUa,!l^PB<V,cAFhV_j^Q3+9f8fY'N688cS`F4LiSPcgec!qo?5as4eiK
%_33p[r:Ug'^V:Zdom]Hc+!7_1+9)#l0+YgE2u`>si*-l;;+/8ri`OcD,/PQn@PBqj!a%i,HHX1Og.[<B,RRb[=;mm-T'1F&:+i<K
%4E]Ye'L6ac#Xo7eM^t>R-S%"D\,iZ0(]edA3=oA$.=E%Mr*t-1<;1$d`kBB=>*8UjHU70&+?Hf;X.pQ*/C>Ps=;riHS*qc`+eSs/
%2\fYL6$P=c2i"C%!1Y&:$$YsI;Rhke%*6L3I&t-J<0L<leu\%"JK(*m?%Q/>g"V%S?2VPF`GT:5mgQ7ZRr^&QSA4-_W5%^ud1gk3
%F0)ZTQT@E1R:K/H%b+*CF.C)&U6u!Qm&UJh2Ri3MW*UiADJ5e2UC.ndMJIBHO?$M*25P1,_H*E@r4qWA6\#)lNrhtt(Rr8\2iiR4
%"MC?H'EWtdaUEI%0n9rNR/kjt]R)R3,)4qbXsqXH-&\G8#g$,]r[rVE\.WS'r_>C-AF)04/j5F+d8D&]Y_-AG=(eW#C@ZN)3Z+)%
%P9RoeUTM^Uj<YEXX1_F6Y2QBNj_55k>_%:B08)KU9(;>kLq[SUJ)>:^C:4D+!tj(kn9VTV#SAFuQiK-81DZ6p:.mjX+VDj_n=^!1
%(00rEP.+Ou^cj%eTuf#6W\LZh3+.;12\-s$c&Pm[MS[pqMN8\9QO#(kc'$^:7TjN3b_paGOWt:e-D>%>P8r@mCh$;hOSg6ADo-^l
%ODPF^c5hilXC7b%]U4-WU35":GkC0?-mP\l;F]&*h-KneGUiL.B6?)T$*TYH(<KOB)*<;0`>d>M`9`Iq=@L2%6WS%OF[;g0_/Z[=
%48Eg?IJRt0q^O8G:'p()L0[2ZbB&(_7b=4_`//\WiN<d5_Tb?BC%Pe\n@@0BjnSfkn%SY?c[WWVo;h>0p\roC++O(^CH)1Nj7!$4
%HT$iq53RK8[>h_G5d51NhtTFZ_hQ2*s7#HWT.]pm*o;DH3Jbh-q<d(Rs1;Y<e\b`Xr:HKY.*FR0iW&cDe"?Y$/`2Mba1o8Poc1I4
%^]4>DTR"&p4@UId?qP,]9Z*jU:iJ/q[h'2#f*Tp[p7R=t2:JH?'i/Hd_HS9OONf^9:DJ?a4_^AZ3k1=25O(H^^d'Mh8\b>$N[:2E
%:;MQ1>@VmPjf9$RF7Wo=NFPj&LEoJpl]3r$4[>HTTpEc9j'OT3N?eFI1kV@$n?3Ygh_Obr%=P"2!?(fXVT)0T.&D?WTp<I,"M.Vt
%Trc7p;,;FAjEg?=R0>%t_PfFL=(Dq4Jd`tE&;uUX7C<dQ6X?L83W?\&6B.KTE(^O+h3aaa+]MR=<"P@+G,=/*[aIG/AtA*WT[q`!
%fhj+(Q`8qf(^(fD5Y'h]L5\A!AqsMn1c+rT?<U,:j,pg'jkF7D0B)Q3E.\h!3t1O6*!LG:1DP<MFNquY<bEu9"Bo0(Zl/4-)b&g2
%+HX!Abbt4MGpnEBo9(KM&NEIO]E[X^/OmFo-.@#,E,BMdUm]"0ib24n9RrN(a:!glDqQDZotg9')g=q.g!K>V7FO-.75O6MommuE
%*EVcU746tJW4P=:25UOp)3u&rl9nr;ijE/?(Y&00NF-lkJkBSi89KG^QqpoEWV%gA+Q5Jf!c(^%'LLq7k[&gk1!dXE-AV^gJQOKa
%&S&'s`\@#%%m/ANb8jHFSC)qhYB[O$</*]X+:n^lS)NuW;.6Gb7.Y(r*D;+1WRN=O.miJA0IURQ9ZBXo#m6\:j.1/'+B(f`?taIW
%Dgeue:%;oWT2RY<8($j?EB]D">`bm9>lD-9247DjQRm9*[k9SHdFNuJURWt42h>rajGZI]Me*_\38kc%5V[:[NG$[e:apG><:i$$
%8m#fTp.PC1G!Y;-Ia@/PfHklUiIRGk:7XKn@adhOg!mo'Ir),nfCcq3A-u%Pnse/1a,+PI,dk^iJ:UG/Xdgj(\VAn]0]nn79\k0.
%%V"k6";!a7(!n:.!Z]=X,h3CBcCbK!A-<3>nm\m=p-Xs/*;Bq,N1j8:L$H.*4Xhq5@ES,^Uk5u$[[T1GD:FTeW'k@!CRUG!j.gnK
%Vr`<'824afd;Z4%RXtHK-P1Bq``cuF)IL$W!+</KCO0UJQ+K\id7b>'%(L]9=uK]L2k+]a%#b8Xm'mBW?Q:NiFf?LJF"f1RGAJ5u
%)CHKb1qDREk_k]@b\.mN'#+H8)*/l+[e7.^R>T;M6s4f[K"S&:fZo]uKn5796(_RF;ld>8p(!kgaRtKtCLq>[[L07d-3FC/DciEZ
%X:L(j\OK:*dR%H[/e1\8CMBDPE$(7t#tJ#h2SmclAdP!RP&`jTia#-fi@+aY8&U#sq+A(%T%6)VOEgjqb8?c_\,>PYL%YQ`:c[F\
%`^;n%k65cFKd/mrDIW#T0n;Tj^8@c,:%)#<@L-crhKC`@:_?,8_rde3+_uoXR[+cr.Q^%3DC[i0!q2SASPYj$.VZ93A3q54:OI/d
%8]bc9-kTTbjNaZISSP1/8EjgUglH,Lm:?;G38)Mq0'GPRRk)$=><P/J!G.unFMQV&E9<I/g'PQ^E.eCM2gJ%o>7VXOJu-HBQ68l7
%i:8NIW4ii!&FW(Sr=Z.^EI'A!aZmgWV_:q"8<.KV7Lbpp9=?"dX>Z5d`tE)hkP&)f@!d.eAl7ogRHea+cLXq*85A,+kf,tD'[\Fk
%kKN1][P?FrJ*G-[)]?o%roA@RYmo4(O?nV4,,j48S";:i?XDX16"dDeD]4/=[8V>hr,P:gADHClH@,#qr<I7d]]W#k1rMli/:6G_
%7s#4FWH>VRqSe5HcUVdGM2UB'=3SfMg58>7Y^XZs;]oA]4F:OcLj7Kb:GJ:l<ht".7U(*$3S*g^IT18mE+!]W-q#5=T6lGQn7X'&
%!f*!V<=JAY&:[JA*>??cfOk36j"PJ\,ki"Z(-7@_H0J2UBCOD\q,1Nm1p0c\M:\0i<\HSr_(J.F1X#q&5"8cP)8QeBR`EYIU-oEH
%>2hN6`J+BmJ`'KK\Vk>tB'7i+G_!(MVK10*N[&aLm5?Ub*PT&P'm&@41OVHU$bF$7F:hnLP.;K4+&d)<]B'"6G*?49]MBIQd3O_]
%`:816Ns%jk&.ZLtqpW[%(=`b3Y#IW=Rt"$u@<>JtR)>.7,3Ju@QqdQj;Z:O?h%4%+JD4'=e[pE>quF>%E=g5(`.dI9!G6,P\.LB@
%elfsUO<nOLF#ReW-:;M-"@g.C$VS:S=\s`9r2f-<hg&oZ8F$<,cqjt,gh'&^rWcGbf3md[aWT0+KGo1Y0fX!87<),uSn9Ik\[43M
%5d7&X_LAnrn)kR=+GS&O0?/V;7lLsZ0?a0lAbAC<Zu_#)7]YBp_B<g7pS5J';mA24Ag6dWNQ[D4?!@F:WbIS/KrDF(UI/`s32tp[
%Rhf*"T>O#RV[#0(cEeCT1VIe8M<6hc2S;6L;)Mk%JrlX"N&Yn%5<\<I.t6II7>$Tq@Jm[7DU?Bo_\glYoqf%KV)aTIU"A1>RO`Z-
%gqbpdMr`4VkL#fu_o4i1_1*uD[#tV(Mj;*UkJ*$g-U$*l8s&S>q$QC.6k7ngl<P<BCQ#<I1Ik';6ppP/gSP4-HqNE:$I`3LB\'31
%?Z0BE*^<Wa1=$Xag\a()ZGYRl+9"?>T4B2)AtEDpO>q[6'>IFN";/8:-NFUtFbdF=auTXcjQAWKZFZqrj?DsPJ6-ia0Gh]Y:U@VJ
%:8h&7o$F:(._[Vtq&%X+V'Da=4$OA;!&T2:g!3t$s&fiXB^97]:Va/tKDW+%gJEA`S#;[@nWUpfMH'lT*!Kg@,8=VF/WJ(.&R5U0
%Z!stg'2<N'dDg*X8RRLIpH7LO^U'=S(.+"<"pL[d[/@N1FJ%o?=F_Fe/Xk\[3htdV?1NBL=L]IM?mfL/2U?_k,EF5H3.asP8X1<`
%LlCZ9^a.A&K5Dc]$V3G-IYSSF8`r\@bjib4KE0M6!":2G7p.%@.s>&]U.,nS)45-[+-RS_VoHH>)P%Jj%2UX/8CEPh)kJRF#5;/1
%Wfc2*<J<83WsmQB#iT_W8@CAL:^P)]_E+M!>?XH,+WMt`_X*qHJ1Oo,,+&$?_q.>PUj=\YVW[^D'OTZ8cEY3+FE.^Ril//L6m'@K
%N^'c8(Wtb<-^Wm_K8?Y4Sln+;ao/8G8RCLS%S`lDm&#qo4uobZ#[HMuY`:RaQl;5tGKR+m2ob,1%^VY'jKO/SY=V3t*==^YpVae=
%=k\GjMN!T94)<sQ-jjTjCj-c:[)Hb1p/P7?rd9?)!3a9em2kXc`b+a&AG"Eu-f:i$"d]bVF'Qm;9_Fm!,$C<,=,jr4+>[Yu]qW<1
%PcXKabO39l[2*W0eZ/^e@VWT]a'cGr44em:o+qA]qN^H&N=4pCOp/=UAql*V\k\_h%>TIh:W[narAC74[)^%5iB)sN%:cSIJ3JF&
%diUh0:s3P"HK0Th,$Aikl68>+,aYY&e^#![-;CQ_cQB9X&C`Z#eOR/&#IHoHS"I5^]G#D28r9=?JZ34&RH*&\4#&oj8!tWEpdd0N
%;q(l^pia(#/=@<D;$dI2C!(O*EJi-4,>sh@Jfs<m3M[d^?'h$'Oe<ADdkR&>Rj#uM?$s=Mq)#MQ3(fZ@LQa+oa@[K<s63+App$u7
%R-""o_+?ZXc/GJnnP+_;++3&2`e2EL%VIF$ScH?1P+0>;PK3p!X$(8@Pgijs4<hT9EFp&Z[7u!1#,s[o`[[@3mCkB(nc3X;Mh[9&
%/B^Z@_tJ%27kpm=kFW(1HLu]!3l<W.gU$\Ys7$lPhr@FPF%+<tCCW^9*0`CK/b5-CHI$P332).:nd^1?/a+\<,Wg:VQp+2QpusH0
%%3X!Q*X2no>4RY@R%U0'=JhQt0R`:DR=tnfd&4VJW^,.cGCrR[CA[Z$1I,NMn_t&lGsG?I(QLJK!$3Sfn.jO^`bK=?EMMMj"Huq`
%"(]tPD2L(l:OliW*(V67OC>ud;!=Jd;lQe<iW/W<$GIki#.gXJ1DQQ1,V[NUJ);>#Al/K!IZEsK"Etpbk`9VIl3s/E*@T!)G7H1m
%1ZG^/0H'-6Z:_KeYot2WaKeX!VLW<4`1pfG]$-riR>!LoPp\20>Bk*`G(oJ;Lb#02T$fSRSSjo\f]7.nj*WU<8&dn1T<B_0*qU'9
%P:Ee;<J\gQd8\Mnaru@q\_^t?M\Uonp):P1Cojl=.*=F(e<O0,gP6Sr[H#XMlaI'[Ipq#7nXm:=M\%?nc+FsX\@<B*Z\aNZ^WM8A
%<pOd95#ZE/(7+$$rud7dG8]p`LOXlo/pVX[Kg3pRMub0%-s5*1#Eo_;'&HtKW6)@anEd1)1N$1t'UJNT*n:O3r'sfW;R(uJhL>)c
%,*>jYVYkS</T82mT[G87?/^I?Oj),bs2CPJQt*,X#"c:8_2)Wc_jT['l-_5n/!"=N$FSh"eVI7[5r[I7TT.10FRd=dLsQ:fpI9Uc
%efLe.\"k;M"Q9I#:OOrp73PWo7VG2_kfBSIiua-IRNAVDmYi:'&%qsPB<#T1(,])j/2H064(O7;+bC>e%#5TUY:Rm=0;ZU5>,D]G
%0hr3oD;4Ke2up:0,8@n[M+CB*G<6)bq<>\XL'rhJ5Rk7F>Zt%dc+pcm,&n[i:NhSZAtKaXh658KH)H&\<F^Cq?k!fI7fY2@]BIpN
%%Aug?]CQJ$gD5iZb"1$R\\X\#]"Mkj!nlf="!!C:XT]VddI"O"Dag`r(!L`O`'elG2sUT%%SV&o_d'qPU/?7l=29Pb?&:C8V%K"c
%@RL&$o+=Me'S0,g>*(E\MlHVb;u^A@dP_uASc]ZL$OIE=g*aM%b!a;-F1,V#CdEGr1XTEj<3S\Kh2K(l__6t&60m:WJ!Y,YN7qPR
%#RY4raIQApc*2C<"3G5;@`P`%36[[5ec]hcP$]GE?i'$V5VAE\C%@2t4?QEg)39!&c.`[.VXXWtMX1?JCqNT_'oonAeTP8AHg#uK
%::k25otEkl884LB681MG)50j\c%1$WrrSF/gRM>*&*gdr5sjOOH>Lo_$TEof(u,@N^VPP0m4G+LN^"^m9RalWd6S,[=eHJAQFCtC
%ajA]e5'6ZM2@qH&\5PKK,CJ;eTRiSc`845`"`J>e=4+6(iKu949+P)W)K$CZeCK.U&@qQ!od2U+Yt:tO+_Sl3LJa'Q@+3mTX,M9/
%*=/cU@KK)(;`5_6=\*'mnk#hO>o[<jFl&*!7PmbVpu[R^K:Vj74C;Y9jLIb9K$7d;NaUBa(+^r%l#dpq#>sA-<5\JH$178#3W_+T
%#n0IZrZY.Z![qrlJLm4@N/+<_BXB8%1M]^.V]f16&.uCBM4TQR],ah4N8<#D*VD`Q>&)iK?Vq:%nO7Lt,qZ;PQFu`bg8MSVW^s0M
%g>!FgDAL%0jRhM=<'p`fD<+7_i4q@2F4mW;%h;YC4b-t!=Sdqqc8XB"Ar0EWR0fn4@XqR(j&"ViX;^Ue(B%nmVD,WtRSX92Bn;O=
%\4Ajb#2YUS",jkgg)-Jf"K<NSEI%7>7:e)QUV%JZ:d9ds1pd'fr6!rl?\_pJIN;4CnVai;8SPAPBc\^4<;]5VA,r1;3r]cc6Xi<9
%!>KuP7"L/>RRbKM+Ck10>Jh!q+VmQ3+:(!3,LD[%%ND;tLPF089/OP!2eOe$7p@_C<cXG7SZ,^3[parn<Ys7m%-gb"G;5>AM2bDB
%`s,(n@5hMF`%hX"6%[<i1U4LCK[#+>!!st!/V[o'5R'Lg=\/$TBo21NM^7\04IsM,UI?J@GC"nHo1-:T05j=a]!1C3P>)uoDRY[%
%G,JiS0I3)n@$T;WACZ?D]3,JF5`M?m4We8eNcb`N'fBfUYG7MW*QfT03]g%+BT'74oNcAV/I7If<>OBW9K`aF*5<.)EV53q`?<\k
%,</o'N.!G)G_(,QbmQ+`8**82'nmLIA<:6<%2bWnq$V#\#0W-5gTok"EKJuT0fW&u[>d`e?/N[WF>K`gf;DKk_e#E7\4-#':B56T
%TX@u\81@(6Rm?eZcJs>XQI(aN4)P+s0^.KR)B^H]JcEN@<#:pA\[86?HoDELr`j1<(B]Xu5^Z]h]&55fFL.Nr)+hjt[BkVM)*00E
%A=I3'n`V]=#eql.#UO:aS41:?O:gNcbg.UDTWkH&+gMq$".d^ilSj:em]1Y5Eo*WRKNW&p'#5/.54R$e8et)/i23"tE?@ujBDa?Z
%m7^<Q"X7d,EjFR`mk?`=^6dlWT,<WekAuAo2o!I'gSa?rpb"730e"V4hU[>H9pXJ&3r`\QVPVcjnOc(sK5"Ic7C#R,[5]A>_FbHY
%'R_h0GSO$d8aNh(NIW.PBV-73ACZm:L^OA^/@>a)l@N"":+gRE__E-(Y,gB;a@n]ZED0t=<ojBCM(aU52rmZ3Y1mH3)3_FgIUCQ8
%6@G#YUOlI5F:8s%iG31S.)J=CO+oMuNr+[PP"H`0'_G6ZUdJu_9Fc)SYr3o<'GDXHXOi6b/aZBo!l/'f;'4O4I"[?,0IuH<,UY(o
%b-IuNL1NWUXB2HlbRPKgVLmkgUNU/($cj>Wd6^l.a!oVo>Xkf%,AIcbep6P.;.$--*o4L$k.olo139*[K^D6:P6$]boetbdW$/Nq
%2IWK?"&t[i/ueQQ865130HrP7&R^a$k^SZ/Nde0h$Cd);n9s^^ILl,!XVo'cFW9#@DmOtpa9!"$QtP:(_+nR^/NCsa`hpbde+n(0
%9^=-0LE>8&!SbPH7pcDA;bZR'(dbi(^UKY['9>a2rM%p5ApNe04tct/4h@&Z*+ObO[lHaaer/^SY+&Zn`)]iaEpduI(pMfOL*:bk
%Ia$=K#drm9"^%ItZ6J.,aL0Pl^556"p+p(J3Bc/IG<-*d'$?j+>EL>o0q)ltP(p&c.L8n3^)#7dNouiCX,,+SL/VUU2i:)qc4c^'
%S*1'ckgk!P,kJ!Vk1^ZZ$fD\:fiGS0.ss>4;Lfa_C7pis/tF1;AQJQY#2:>eNd-A3Fekb4L/)P^JB3m+SKhVHn(F"lMb:diU^SD5
%,gmRGb#GJS7Y/K59B6X]B_2qqi$-,<rgg@OSOO1gnMX,K2ts7+M.Qde('Ds1lV>A771I&RB`A9eM-76l\8JKF^uF;gLXOaiq[iWi
%mX'9Bd^)FL/@Y%s<.-aXZ;n)-)6#))TH4r55X^ILm]o6B!uT'mOcjceCSSiu6@_O-g5PrR2.g=N3#kmS.%C]aFc0uCJeW'3ZHAV5
%@cn!TZS/]FM]%Ja)47.W8h!fSo";6\H5%jfW)s1A?EB9A0HgmDk2QG*<qZj-Y$&>a=*nVXR7Qg7.tjpZ@*0jXeKg*a#t`m/H!Ur*
%5XH&*?R$gZ>oP?JSVPOB8Y%cMNq>KM"^FVe3HZ"n#e7aa*gWB.i58dWg3(e)&X;#!j1gl[\`-1(;c%PAH=u@]crrf<.?tis'*^OO
%s6Lq&&WW/;1:.Mfdred77>(s.2Le/+-21sFBG#\UK/u9@V$dF$EZ\U?]:!;@!P5EY%Rhud(U2^@)C@ci"bVB44OC;Erk8.tG=49c
%^bVYJILBe<icbRX.^!A!7g>!uQK.R\m9E#b(o"hB=<e)+Y5<84;("+J'jo-N)^R3cEE9Pcihq+Tl\'<S%!5Y/$mI9hLd;\_lQ:Lq
%ji'**!`@gUmuD2ebN@)KED@Gk"J$Qi@-O.5Zur*l$Z/>_I';).(d'e\!U^pU^c("a;o&9e\YY>gnd!_4JA>`#?!DLma"1!u#!3cG
%GG**h3ec4?4ii-]0$[)EX%+&+o'Z?p?4U@`04+8!71SJ+M.-_Se<0QPoF\)[&FZf^LH`lV<>4*276:r$("u")LM"jAb].O7Bhu]H
%+6&5U7DWku2FTo0!1I3MH!653[oU,+"g*1MB9')4lpLY^`Ba,L]I\X`]9<n1j1Z8$IBuo5]!F.^F-nL(eQ5/_B9/\jn6XE%^hDr?
%;f0]&**ADQa+.XQ+P"Ribs$*r0Ih[8@=+hSnFPqWS[XIOf`\k6gqmM,[gs?i><bMJ#ujfT4oUkiJBEpY@$FZ1G"u#%msnWt(.:FH
%'.[Akj+b2M4Tpj-8WfN$KIH6RUmD=[BTbu+'!E1fo.7mf!q[^d'^foQ0_8X)hXeWjB\XFj?+S[:5YG/E"!L@^'nkn-*Yh:e`E!!*
%hWWhKb8Ron:q%ae9i$1$rFsNHnJ0V]hQ!!]n9Nate:rUk+X9`O4t=AC#jgMi(>N.;$n6#p7OddQDBBn`0DiERO9*L#m/`aL`VPQF
%30t3T^5#"AQVc'uc4#7p%=3"+/Co=o`og+c4DLNZjD]_&%AqLIRjI.0H^W71@7Bo'<Z9"`F3(]'/RE\_Sbp(kTV9B="itGiU1fj_
%'V(C+mOX2g,r)f3n:k(j<a8Sd:["-DT6D>5C#F5CTP/c/43'o>VFd:#96"sC67F/r/iH=Qob;[2Emp;ncFMCcO#f-K2FAa!.kYj:
%1ekn)%h(.Q!`[$mqAkjOCCD-l&IhVLWZ&]nme+lCVUNX+Nd"b3IR*b-dhp^W+d>M,7uf=&UpR?B&YP7e%<jN)piEY5*d.lI%2cLR
%`L68rOD'j#!4u+oX-l0prf^Q04:Y8A7!U@@s*=+)HbJmPamDk'JjM.iIUWi2R,[IJ20)6l$4%FQ<>OiE<+6"[B!7qMYBM#\kEmdG
%CmA@HkC+$3'q!6Fe;$)s4daQ=A(sCPA(:V=c9^HumOAMc8#W`J?q]5^fmZ`t/fdP,LRVfVq#/eLX!J'A5p#0nKe_a>MmlJUArVh;
%&.h-R[[?t%8(5m#idWub]D7\M[3f%VG/$BIE[ajV/l^Ii);&Ds?jPag>%D:14h8WMW>Z^Z+XqF$/L/T.aiF]"51;*F$(_8E=AddW
%;Mg]G,;h;9EUn]f9JV5@-fL4?o0>NKr6cAD2gN_r$G&Qq*i(Jp<7_CGQ3jaQ\!ML_2Y"X`Z5?(j.B#A7IfbY:Ug0BWT.@fZ=bML)
%FOKgJ[cqaYn'-^n@n#$e1412)>AK8_L,DI<*uAP8$^>'G"V>=#UorB7A#c?mEt6KHJ^%M]$6tcr5YAYB+>k#jkS\sLKp?kDM,r.=
%\>1YM]#GZ@F?K')<=?_7/$E15bYZD\fYu?g\hpbngbip&4,:[!_*ca,-.Im<]hauu3"o_:FAN[j2'eM!C0VIG]BJmPF)`((I'-gq
%kHE0$B6#X`O*WWafC'rq/BhdfMNu_T#>]e7!]4;jMZE=Be&[uNBO)H[PfaDm^mA@8_AU]^,oOPT;>)kAY%r24*?dD,Ji-eTlCXhH
%Rr[F0X(WeM8R"0c_1XK*\^Jm`1YC`JL%$0clV(2`F?4nhM%[^FeKq?RUi%CGAhG]QEBkF2,A+E\E$oRO^q32"FOB9D>QJ3l$:EY%
%gM_1%ka&U46jP%deHNhL7R^_^J_te&&k/lE3SOZ45ZcC9]A8p6?LL&FAgRW`S]^AJ-EQD2#%3=6asQ`;_5j,(6HCVF%&L@KBtfp>
%^,kC[`cH&?1TFE=^Zd^iW`KI^1O9a(BI9.%=^3]%1-?$b[>s8*_4A=kZ>f+$hSZ3$Q&Q_#G"<$g#mR`A3-#Pt=S[uU>pN&).Gf"U
%hk8@a=2!I;gfV)g_H$2%Mf0:gALul'-(D;Z8?4Dg.L%l4am+J+8lXbLYP0(sQ@Y27OFGKP8KA%7P1br4A&3'oMJEE6&TT;UEFT:S
%\on>D!F)rDrk-^,NuE9:<S(DAUtu=_]IT.k,hZJSgTZ0cOJqPp&OQ)r"X62qkIK&g%iZ5),"3a:eRTt\&11n?5_#uU<3U1jCDTMZ
%9JD6]i[Jm4Uu7ZTkk2[MVG%R-@Pg*GX5>"9_@*VCh=?Q,R7PYfI>$=5F.j`Q-W=O^Ek[H<?QD1"PkMR^3?/P!Y`t5[TN7?.,PPT.
%JH2iq*emZtefHZp!*i*1BLCSobj1UDhKR0sb/#Le+:U0]BO-p_K`)b5_t?@)<2qA!N^_nN_@(_t(tpJN'\#t1Aqc'X]tS+ID11<N
%\%W#;c[2KaQSpis)E+FR0]PuB,;IXK=t\fWWH"%hcG2B'n0O:3_5.()e%:Y:2##'$f8pqZm[,X.6R1(%h,$tiTN[1?!OXIpC/Y4o
%PQBRf8]lR]:1"Ap$kI?'o6ut5V)Ht$SQcUc#MsC<\#8BjJL/_Ri#D%3W?c/DMKPD0VAGf[FjR%S#Ou^>jddio"7fo07R.g*FDbBA
%L5FusGg^"3&?CSi;UY8Xe_r#3OLO1[I_i*Q'WGm>D(6FbLnTgTG_<k_;<02sqM^;^H1ccEL,2uB(.M]Bim5<pFkEU;-a%T3"Rp$B
%K3sL(rLc<8@UKDY@Wu#f7<"<F(_2<KWCF%:IH<&8A%oV3];5'2D%gpn\!VL)$0f=5Fq>9V"I$.UfVOD[Zr$SOV7ZT0bI`f04R[66
%3(!t[G,kjfdk4NBCuVnBZu8iN6c#:N0KJOd/q'9bL<NYqYIjuDcJ+hl.LIt7\p\:m+On>^QZTP`Z!^%'o5rH[P/u@B-bnRVQOaqq
%qlb=Zl`e]VT>ae`V%,cD*^-8,k7Q!2p3IF,CPYuU$p&6'BX/d<[90g37?=Xb5ok.*p''b&^Jkr"CGKidADfVL;n0-e\*0JiLVG8i
%Zdl'iP!)q#N#GnLg7<T(l`dQ>^8BJgfuQr'2T!1IRLuLP-jtpJ^3&]"D(c[0_Cd0^[HQm7lAM6\II/W[15tTRR/C7;'5=lUGl?hD
%jf(Gh`!rQa?82k'NU\SZO^p#2ef?kch!M,n]+4^#q,O/seEN^Hrb+(e9^[="?fY2nU+GGm1#+><K'^W*1MFF?$=0*AYHPT-#Di$\
%NZ;$U-2qSdg0pAd(0^eGWVhg^;YH)"Qsbn0KUZ/OCLuW0`'@%C*iE?53pcJ!oCgipFfaDE['dDc8oF`%TaWRK6l)duA%k)_M(VX$
%\-)!QP9o9soQouJ0,!I1=@g)t@2"TR,QTEX#XTqFUfdO;Y&rf=b(t;'-Q,4X,/]=6s-)Rd,9sS[`S=B^OZL!nmdWFaIt'QSeKMu6
%?@T&emjQ@1Vl9pM"_fc2VS7Vn4g*LKmL`aGe:p#,qBJda=62PEaN36O8kI7kN`fSFJ6]n=%1Wm5R)LMWZqOo2"XR>MoJh!ib"I\A
%TAL^i[JgKUT-.*164&t+5TEB&`%FNMTmbRU/)4UXCOD2KX4mHNcas\`b+BkcK"?>VMHAH*YQtPERIr';qj<NL=i=9B:$13*iXYM:
%(S/;6%`?l=DpG3.;I&.&N/9(%-:ZLAoFR2],H@/g<%W]2ERuSYXdE<008QDPc^T!ZG9-D7I7CI31N7korDWOjop"=Zbo5Z&<`20O
%WGA9_k>ok"=GXVjerWQ+6\h+nCVat587-lP)M;7mQ"%D5TS-6EpasLm*)`i9Nm>bj*ee^.e9>pe8^'`$1Or:@.g.RR_<%$*5$kNt
%g$&K4IRT,Ue7*iCAEb/RX+\@Wnb+EaABm"%!p"Up">&6j=LbWO@n.7^Ws3iY0fB'XnXUAN*G2g70p,"NEWqM]WXO_,lOKJ4rKGD;
%`,0r#l'l1V@&7Y/7RfYO^3eK<OmkH=(:J;:3L#W;F@`#$Uq#b'?=\f[WmeS?qSbHaQ=G4s*()<T]EANXbs/%01?na6A8U#cU26db
%@X"A#Jm3r]k_id94SR2d;7.\!0Msp/@>F:5;SlF(or&4$Y`*8J4o*KbW?dq?:dM\XogbVO!]n)n0oUNhC*H2s<2Ur(pQ([)k2F*$
%0?%K?#E^#OO'!u8S_e_]=7ZS?F@**"NI#a'5Aid8WfAC2(^reqYeKuW6iN2>I=TnI[.C$D+*m:DX;m7OCef;72N2E?oRTTN_2Ue2
%NQUa`"^FYNT]T-a6rh/DERF$akC/aiY<k5m=pF-+>qq1lO,RN-9\aiOV$0:>*pp75+j?6/pSV>IjLGNc2O3<:DJue34:K64<2tp5
%EMAp<*fQuHiKK+B)>%WFT6\iKS`cU*Us4Fpdc.pCeq]sBU?Z6'h>n568Ie^q*gK2SW7i-T^$,.0SU48nd`ud.3n7HY@A'K#I'2ts
%Z6H'p;1%l/1:?*.'H'$r?LL&Q77,RmA;9Y4C9e``2HWNS!Wmp&3T7F2dXC\M:&>h;P,*spp\EjqHuD;f!$k"7T,dFi8JI[CP%:)Z
%_Rp8rBIIC+`h>]>`i>no5$rYlFW\ZA(X0K!T>lrgd#R3c<eV6OO$(]M_u^en,nYSW(Rf@("d<I`YBmnJYg65Y3lbbG:=>uY@D?CA
%7rWF2+b<j!8WFocNFS006"AC3M?-uTqO6Hn@7>U\j=aPUhm5nI@b?oA)VtV0Zr4S=4&8)l&T?tTp5\FgnV5k).2T\SFkGm+^+/j$
%3%bN;_H(/7S]FTunR]1aU]QM#BgD.;ptlR\3nDS`FSa]a%#6:.0=Y^TEH/l)'I5\.S]!V<RU$L6Rsb,B\EuR9"lkR"s7(]klj"??
%hK@K6\]:"''H^7DbqSrA767ke2`@#W'b$7Ggk`S/\7t3&</]1_Y4n[>f:lM]h=B;t-BL(KC\Gu7,Z:D__H`uKYUNT&i09<HOPb]=
%ko09Xm4]#LK*<oS^$DmuF2&PW/?!c5ks,R"V:;3\8`q*V0dPg%_kk+Y>7K6qSkkn$e=.o(?hF3;>;Y8Lei-Ag-p0SA0T:/fkH//s
%X+X+2M6%Ksc8J,+4&d95q,'E:9mVumL(XBokk2*rIQ@4g"0,N)>mcaUh@I8:'OtsRZL:+9Nj^Q?LF40J?KE:C-c5AIf2pg<>K;$Y
%"d>"#A)A!>jK]Nr.p/3@OrZ-?_^qUT=c23oA>shE$aTJ^c0Hjr_j?qNFjR%c#Ls-RYiGJV<B[`!#SKcN#I`2="7*RfH3n^!lV3?t
%5iRp&,c<8%!tY$4\%_gVU$+:F#Wb:3hF63JjeZt^<L6<f8()9f>Mjd`3hc8*+]-8W;NUG(k?Z,URWZso(Qr<+lIVtLEocUm%hM;_
%%&0R:_+d85;R#:a73]cF/0Q?bme'Si%#>;J54aT_Yl(9_ng--Xm%8.1eZlmia#DOo7)cQ7;eA?[GZXAq96B0fe%6+d2"eZN/fXq7
%(NpI(OUDi34uM(r_QBe.7Zt5E"8q48B7PQ:+L.Z!5$p\>N=.>O*BX_t&*40\\/5c,;rAVK5-VFKb8Z:0!%B'`UQHiJ#GqBroaUkE
%b=J9&]^)4d';&!M2L\GU!ft`dP/K)sc,DA=,sjCEK]-_9XWh1>BTG^YQM,:Fl"fal[/'s)AItq>OFh2"-0PHabj"K96L(49UqBiF
%FAOjU@C)/<D*5=^;"_BB]8l\Dmg+1*[%rR()PU'_,u?=NAeJCS]V?ll]L*Id#i>\%5Y0=_7s@o">kIk2&pRN]A#6lPAr<6r\f@6<
%l8ndHdWnH(mW\'5iN#k[4#NrI\.VE06mQkji5(O(bIQ7%Nr.r1P=c?0#Q-m'jRaA;[E>oBE)BaKaNjBH7RW'1m&p4O9cu=F\VR9H
%Xj=\pp)853FC3tOP4&E4Y2^>@c_^sh3(HU#lr31p;sC6t$Z.tgs'iNh!6i]C3d5o-;4f0W&--<`@@bWQhoti<OdR4)KS_4'.T=.>
%^neY2%I86q#P69@e(7p#N,pPb^#UXTJrsS/;Kbh=&f/_9j/%@HA;`_Slkjlq[DYq;Xppcmn`XjEn@@$FNqtU*n@_K##oO"!eg9]=
%(>;'[]1<NW]L<U,nrmE?Z21n+b&9'<f8EsBI?!3Ze[JbLXAJ!;kfMhV.PQ!R,0.BTNt)b2;!i>ZOgHs7B-e4-fL$IghKRa^R!6;D
%9))%ooANYPQR]@SjD&4*Hf%@/_75cQ#Gn-fd(mJmPY;6LdCr.=mF:H#BQF/OgM]0>T.h]T8P;U>g'0Q\NPRY6:Ne11k4U's[TJ^O
%7B\Yb-c'2LNqq<tqmKCH70$OcKl&TX_YHs(:nc<ThE3P$'q@@V5I]KW!%<dB5F4cL7]K0tj+4+,P2$qoC#*$"4a>)I$:eg]MdF`Y
%#oI2;:M0q6hTTSdB%qShTd<]Fb[trXJ$+BbV*:8,.B(=DJLK)cjN=.1.0<(;FmNhB$)"e&jYEOJGgYjT]bX5IW-ri_&Ud)fgeWM&
%d.s/a'P)1&PuEp_]_c(l@9LfCVb\[HY4o[J48A!RhS/g9pV2(TmAH"0I/W_OprS$_p@f[/k7?JLdrum`Gk]bWs7#F)a+nTJruQOe
%j1gP&HMIFL+91hKs89dTLHk^s5Q;<IpnRWi5P`F)Ie21[^A>SKc-h[~>
%AI9_PrivateDataEnd
