%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_peach_bw.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 590 534
%%HiResBoundingBox: 0 0 589.4649 533.6895
%%CropBox: 0 0 589.4649 533.6895
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_peach_bw</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T01:18:23+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T01:18:24+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T01:18:24+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>232</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA6AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYqoX2oWOn2r3d9cRWlrGKyTzusaL82YgDFXmmu/wDORPkSyuPqekrc6/fElUjsozwLDtzfjy+a&#xA;K2VnIGYxlLf8ffnvrxpoPkyLSbd/936mxDqOxAka3/5NnBxSPIJ4YjqgLLSvzg8yW95d3f5h6fZ2&#xA;NizJetpfFxAY0Ejh3jSAfCrVP7w/PtjUj1TYHRit3pvkaRLB9T/MjVdd+vyxxFkla3CRtcJbySS/&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:57B02597D6E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:58B02597D6E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:56B02597D6E7E5119BEA8FBC829CE640</stRef:instanceID>
            <stRef:documentID>uuid:55B02597D6E7E5119BEA8FBC829CE640</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -533.689 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 533.689 li
589.465 533.689 li
589.465 0 li
cp
clp
[1 0 0 1 0 0 ]ct
7.50781 416.754 mo
13.4727 418.852 25.2891 413.488 28.9609 411.031 cv
30.6289 409.91 31.5781 409.402 32.3672 408.973 cv
33.1836 408.527 33.5938 408.313 35.2031 406.965 cv
38.5273 404.188 42.0195 403.344 44.1523 403.109 cv
48.5234 400.785 52.4023 400.645 54.8672 400.934 cv
58.4922 399.34 61.8281 399.164 64.3555 399.664 cv
67.6836 398.82 72.1016 398.52 74.3438 398.422 cv
77.2344 397.551 81.2891 397.133 83.1641 396.98 cv
86.5469 395.887 90.2109 396.266 92.4375 396.688 cv
95.7734 395.66 98.3438 395.801 100.188 396.332 cv
104.504 395.5 109.461 396.621 112.402 397.52 cv
115.203 396.855 117.922 397.168 119.832 397.605 cv
123.172 396.289 126.383 396.395 128.281 396.641 cv
131.48 395.949 135.375 396.172 137.891 396.434 cv
141.156 394.934 144.758 395.051 147.141 395.402 cv
150.617 393.918 154.648 394.172 157.266 394.602 cv
159.953 393.512 162.328 393.445 163.824 393.582 cv
167.328 392.988 171.594 393.434 174.02 393.781 cv
176.992 392.734 179.879 392.695 181.703 392.832 cv
185.07 391.582 187.734 391.672 189.688 392.168 cv
192.465 391.426 195.133 391.871 197.059 392.48 cv
198.469 392.035 199.895 391.852 201.137 391.816 cv
201.992 391.625 205.637 390.844 208.805 390.969 cv
209.375 390.992 210.039 391.031 210.77 391.094 cv
213.395 391.309 216.977 391.582 221.152 390.406 cv
223.672 389.703 226.203 389.246 228.418 388.949 cv
230.715 388.027 li
234.816 386.367 240.156 385.895 244.168 385.816 cv
246.742 385.133 li
251.398 383.871 255.336 383.609 258.254 383.688 cv
261.328 381.465 266.477 382.105 269.266 383.328 cv
270.559 383.902 271.305 384.129 271.516 384.191 cv
273.547 384.742 li
274.801 386.516 li
284.223 400.555 281.387 416.676 281.258 417.359 cv
279.422 427.32 li
278.293 426.277 li
277.625 428.34 277.008 429.832 276.863 430.168 cv
273.328 438.574 li
273.02 438.207 li
272.805 438.648 267.688 448.496 267.688 448.496 cv
266.961 447.211 li
265.352 449.68 262.93 452.023 261.418 453.363 cv
260.059 456.191 258.453 458.387 256.625 459.91 cv
255.914 460.52 255.219 460.973 254.574 461.309 cv
253.227 463.207 251.82 464.781 250.367 465.996 cv
248.938 467.191 247.602 467.941 246.422 468.41 cv
245.563 469.684 244.59 470.785 243.5 471.703 cv
241.82 473.105 240.125 473.867 238.684 474.266 cv
237.586 475.77 236.504 476.965 235.379 477.91 cv
233.648 479.352 231.891 480.113 230.246 480.359 cv
229.492 481.207 228.711 481.965 227.93 482.613 cv
225.641 484.539 223.563 485.352 221.883 485.645 cv
212.805 492.574 205.227 494.789 200.602 496.16 cv
199.594 496.449 198.344 496.824 197.973 497.008 cv
196.016 498.246 193.023 499.262 189.23 500.551 cv
186.348 501.531 183.078 502.652 180.477 503.852 cv
175.496 506.16 171.746 505.852 169.262 505.008 cv
167.023 505.59 164.5 505.953 162.934 506.145 cv
159.789 507.16 156.883 507.129 155.012 506.957 cv
151.945 508.09 149.578 508.195 147.793 507.84 cv
145.82 508.512 144.242 508.723 143.035 508.723 cv
139.848 509.469 136.965 508.684 135.023 507.816 cv
131.852 508.301 129.313 507.813 127.613 507.242 cv
124.664 507.652 122.461 507.41 120.816 506.887 cv
116.926 507.711 114.113 507.152 112.145 506.188 cv
107.691 507.289 104.574 506.457 102.559 505.313 cv
99.7109 505.281 97.4727 504.383 95.8438 503.25 cv
92.5742 503.152 89.9961 501.875 88.3516 500.762 cv
85.375 500.434 82.8516 499.391 81.3828 498.652 cv
77.3164 498.137 74.8125 496.398 73.332 494.711 cv
70.8477 494.129 69.0195 493.324 67.8359 492.688 cv
63.3711 492.082 60.2578 490.23 58.6797 489.09 cv
55.332 487.824 52.9688 485.871 51.5469 484.383 cv
48.5 483.492 46.5195 481.805 45.3047 480.094 cv
40.2422 477.848 37.2734 474.793 35.832 472.957 cv
31.9141 470.625 29.5703 467.297 28.5 465.465 cv
28.4766 465.453 li
25.707 462.762 24.9063 460.957 24.3711 459.348 cv
24.2266 459.23 24.0313 459.094 23.8125 458.926 cv
19.9453 456.16 17.5039 452.414 16.4453 450.555 cv
13.6719 447.953 12.3828 445.348 11.7852 443.375 cv
7.98828 439.836 6.60547 435.477 6.33594 432.363 cv
5.46875 430.816 4.87109 429.441 4.56641 428.211 cv
2.67969 425.27 2.25 421.863 2.17578 421.102 cv
0 414.555 li
7.50781 416.754 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.27451 .207843 .145098 rgb
f
270.039 389.539 mo
270.039 389.539 269.016 389.297 266.906 388.371 cv
264.793 387.457 261.984 387.652 261.348 388.184 cv
260.711 388.711 262.098 389.719 262.098 389.719 cv
262.098 389.719 256.5 388.203 247.941 390.523 cv
249.32 391.531 li
249.32 391.531 238.684 390.738 232.438 393.266 cv
235.008 394.078 li
235.008 394.078 228.547 394.098 222.227 395.895 cv
215.914 397.684 210.859 396.793 208.078 396.699 cv
205.297 396.602 201.695 397.465 201.695 397.465 cv
203.293 397.746 li
203.293 397.746 199.098 396.93 196.594 398.77 cv
196.594 398.77 192.418 396.348 188.996 398.398 cv
188.996 398.398 186.82 396.445 181.773 398.793 cv
181.773 398.793 177.629 397.945 173.949 399.824 cv
173.949 399.824 167.016 398.551 163.188 399.535 cv
163.188 399.535 160.391 398.848 157.133 400.766 cv
157.133 400.766 150.25 399.059 147.16 401.645 cv
147.16 401.645 141.359 400.039 138.047 402.605 cv
138.047 402.605 130.875 401.539 127.469 402.773 cv
127.469 402.773 123.066 401.617 119.219 404.027 cv
119.219 404.027 114.863 402.219 111.203 403.871 cv
111.203 403.871 102.773 400.824 98.5313 402.758 cv
98.5313 402.758 96.6016 400.941 91.4727 403.016 cv
91.4727 403.016 86.4141 401.586 82.9922 403.043 cv
82.9922 403.043 76.6797 403.473 73.9414 404.555 cv
73.9414 404.555 65.8828 404.836 62.9141 406.121 cv
62.9141 406.121 59.4336 404.379 54.1016 407.434 cv
54.1016 407.434 49.7305 405.84 44.1484 409.309 cv
44.1484 409.309 40.5313 409.102 37.0938 411.984 cv
33.6406 414.879 33.9453 414.016 30.3125 416.449 cv
26.6914 418.879 14.6328 424.543 5.78516 421.441 cv
5.78516 421.441 6.13281 424.992 7.92969 426.918 cv
7.92969 426.918 7.625 427.988 9.9375 431.707 cv
9.9375 431.707 9.42969 437.391 14.9219 441.289 cv
14.9219 441.289 14.8516 444.582 18.957 448.02 cv
18.957 448.02 21.0898 452.5 25.1211 455.387 cv
29.1641 458.273 26.1797 458.348 30.4453 462.457 cv
34.707 466.578 30.957 462.84 30.957 462.84 cv
30.957 462.84 32.9766 467.414 37.7305 469.699 cv
37.7305 469.699 40.3086 474.219 47.4609 476.715 cv
47.4609 476.715 47.9609 479.738 52.7539 480.375 cv
52.7539 480.375 54.9766 483.77 59.5977 485.16 cv
59.5977 485.16 62.5313 487.945 67.8945 488.316 cv
67.8945 488.316 70.168 490.051 74.9453 490.691 cv
74.9453 490.691 75.8633 493.969 81.3477 494.23 cv
81.3477 494.23 84.793 496.395 88.7656 496.309 cv
88.7656 496.309 91.7891 499.434 96.2656 498.516 cv
96.2656 498.516 97.8828 501.402 102.68 500.613 cv
102.68 500.613 104.727 503.762 111.676 500.965 cv
111.676 500.965 113.273 504.078 119.949 501.918 cv
119.949 501.918 121.355 503.578 126.84 502.418 cv
126.84 502.418 129.77 504.207 134.504 502.867 cv
134.504 502.867 137.711 505.25 141.113 504.008 cv
141.113 504.008 142.73 504.473 146.508 502.723 cv
146.508 502.723 147.789 504.48 153.066 502.078 cv
153.066 502.078 156.617 502.941 160.484 501.527 cv
160.484 501.527 166.379 500.832 168.555 499.816 cv
168.555 499.816 171.09 502.336 177.055 499.57 cv
183.02 496.793 191.234 494.766 194.133 492.934 cv
197.055 491.102 206.656 490.73 219.094 480.715 cv
219.094 480.715 222.195 481.758 227.199 474.93 cv
227.199 474.93 229.813 477.594 234.82 469.551 cv
234.82 469.551 239.281 470.059 242.246 463.934 cv
242.246 463.934 245.836 464.363 250.449 457.063 cv
250.449 457.063 253.543 456.887 256.445 450.223 cv
256.445 450.223 261.305 446.133 262.555 443.273 cv
263.797 440.418 266.422 436.793 266.188 435.781 cv
265.941 434.766 267.18 436.965 267.18 436.965 cv
267.18 436.965 270.75 430.137 270.582 427.031 cv
271.484 428.098 li
271.484 428.098 274.539 420.891 274.68 415.512 cv
275.594 416.359 li
275.594 416.359 278.305 401.891 270.039 389.539 cv
cp
1 1 1 rgb
f
271.52 390.984 mo
271.52 390.984 242.352 418.941 187.613 430.848 cv
132.867 442.75 69.8594 453.492 10.8594 423.652 cv
10.8594 423.652 48.2578 450.563 109.453 445.383 cv
170.645 440.211 234.863 432.508 271.52 390.984 cv
cp
.27451 .207843 .145098 rgb
f
182.434 439.641 mo
182.434 439.641 175.227 471.574 130.648 498.016 cv
130.648 498.016 169.875 474.84 180.969 438.84 cv
180.969 438.84 182.82 437.691 182.434 439.641 cv
cp
f
173.504 441.047 mo
173.504 441.047 166.297 472.984 121.711 499.426 cv
121.711 499.426 160.945 476.258 172.047 440.258 cv
172.047 440.258 173.902 439.105 173.504 441.047 cv
cp
f
163.766 443.871 mo
163.766 443.871 157.074 474.316 114.746 499.32 cv
114.746 499.32 151.988 477.406 162.371 443.105 cv
162.371 443.105 164.141 442.008 163.766 443.871 cv
cp
f
155.141 444.184 mo
155.141 444.184 148.422 474.117 106.664 498.863 cv
106.664 498.863 143.406 477.176 153.77 443.438 cv
153.77 443.438 155.508 442.355 155.141 444.184 cv
cp
f
146.523 444.48 mo
146.523 444.48 140.336 473.434 100.262 497.004 cv
100.262 497.004 135.531 476.355 145.191 443.75 cv
145.191 443.75 146.867 442.723 146.523 444.48 cv
cp
f
138.055 445.434 mo
138.055 445.434 132.207 473.035 94.0781 495.418 cv
94.0781 495.418 127.641 475.801 136.773 444.738 cv
136.773 444.738 138.371 443.754 138.055 445.434 cv
cp
f
129.02 446.223 mo
129.02 446.223 122.305 470.168 87.7891 493.191 cv
87.7891 493.191 117.234 473.398 127.027 446.176 cv
127.027 446.176 129.395 444.77 129.02 446.223 cv
cp
f
191.48 439.332 mo
191.48 439.332 184.273 471.258 139.688 497.715 cv
139.688 497.715 178.922 474.539 190.008 438.547 cv
190.008 438.547 191.879 437.383 191.48 439.332 cv
cp
f
198.922 437.066 mo
198.922 437.066 193.07 469.27 149.633 497.574 cv
149.633 497.574 187.852 472.77 197.422 436.332 cv
197.422 436.332 199.227 435.102 198.922 437.066 cv
cp
f
207.18 435.809 mo
207.18 435.809 201.313 468.023 157.891 496.324 cv
157.891 496.324 196.109 471.512 205.68 435.078 cv
205.68 435.078 207.477 433.852 207.18 435.809 cv
cp
f
215.344 434.438 mo
215.344 434.438 211.016 468.047 167.27 495.461 cv
167.27 495.461 205.766 471.445 213.727 433.586 cv
213.727 433.586 215.551 432.387 215.344 434.438 cv
cp
f
223.461 431.078 mo
223.461 431.078 220.758 466.043 176.836 492.418 cv
176.836 492.418 215.516 469.313 221.758 430.102 cv
221.758 430.102 223.578 428.938 223.461 431.078 cv
cp
f
229.984 427.934 mo
229.984 427.934 228.82 462.98 186.109 491.262 cv
186.109 491.262 223.727 466.477 228.23 427.035 cv
228.23 427.035 229.992 425.785 229.984 427.934 cv
cp
f
236.18 424.852 mo
236.18 424.852 238.25 462.094 195.43 488.199 cv
195.43 488.199 233.148 465.336 234.23 423.734 cv
234.23 423.734 236 422.574 236.18 424.852 cv
cp
f
243.352 420.594 mo
243.352 420.594 246.418 455.598 206.961 485.422 cv
206.961 485.422 241.73 459.266 241.496 419.762 cv
241.496 419.762 243.125 418.449 243.352 420.594 cv
cp
f
204.734 423.77 mo
204.734 423.77 197.234 409.027 178.473 402.094 cv
178.473 402.094 195.172 409.945 202.117 423.539 cv
202.117 423.539 203.07 425.168 204.734 423.77 cv
cp
f
197.996 425.379 mo
197.996 425.379 190.492 410.637 171.727 403.703 cv
171.727 403.703 188.43 411.551 195.371 425.152 cv
195.371 425.152 196.332 426.77 197.996 425.379 cv
cp
f
191.055 426.746 mo
191.055 426.746 181.473 410.504 162.723 403.566 cv
162.723 403.566 181.492 412.918 188.434 426.512 cv
188.434 426.512 189.391 428.145 191.055 426.746 cv
cp
f
210.652 422.051 mo
210.652 422.051 203.375 408.09 185.82 401.199 cv
185.82 401.199 201.488 408.902 208.215 421.777 cv
208.215 421.777 209.148 423.313 210.652 422.051 cv
cp
f
250.773 415.965 mo
250.773 415.965 253.402 452.973 220.141 478.363 cv
220.141 478.363 250.004 454.695 248.867 415.09 cv
248.867 415.09 250.484 413.82 250.773 415.965 cv
cp
f
259.211 410.105 mo
259.211 410.105 261.406 445.047 236.012 465.914 cv
236.012 465.914 258.445 448.84 257.305 409.23 cv
257.305 409.23 258.922 407.961 259.211 410.105 cv
cp
f
267.961 403.18 mo
267.961 403.18 270.16 438.109 244.773 458.984 cv
244.773 458.984 267.195 441.902 266.059 402.301 cv
266.059 402.301 267.676 401.027 267.961 403.18 cv
cp
f
120.301 447.375 mo
120.301 447.375 114.164 469.934 81.8398 491.391 cv
81.8398 491.391 109.414 472.957 118.438 447.313 cv
118.438 447.313 120.652 446 120.301 447.375 cv
cp
f
112.695 446.973 mo
112.695 446.973 105.77 467.195 75.4844 488.129 cv
75.4844 488.129 101.32 470.164 111.023 447.043 cv
111.023 447.043 113.094 445.746 112.695 446.973 cv
cp
f
104.633 447.957 mo
104.633 447.957 97.1797 468.219 68.2227 487.746 cv
68.2227 487.746 93.2305 470.121 103.039 448.074 cv
103.039 448.074 105.047 446.789 104.633 447.957 cv
cp
f
217.227 419.375 mo
217.227 419.375 211.262 406.449 194.152 401.496 cv
194.152 401.496 209.25 407.445 214.781 419.352 cv
214.781 419.352 215.57 420.762 217.227 419.375 cv
cp
f
184.742 428.395 mo
184.742 428.395 172.777 409.297 154.262 404.59 cv
154.262 404.59 175.172 414.574 182.129 428.164 cv
182.129 428.164 183.09 429.793 184.742 428.395 cv
cp
f
177.84 429.32 mo
177.84 429.32 165.883 410.223 147.367 405.512 cv
147.367 405.512 168.277 415.5 175.219 429.094 cv
175.219 429.094 176.176 430.715 177.84 429.32 cv
cp
f
171.535 430.969 mo
171.535 430.969 159.57 411.879 141.055 407.164 cv
141.055 407.164 161.969 417.141 168.91 430.742 cv
168.91 430.742 169.871 432.367 171.535 430.969 cv
cp
f
223.523 416.574 mo
223.523 416.574 217.73 404.656 202.25 399.566 cv
202.25 399.566 215.973 405.48 221.328 416.48 cv
221.328 416.48 222.078 417.793 223.523 416.574 cv
cp
f
229.617 413.84 mo
229.617 413.84 224.961 402.758 209.773 399.348 cv
209.773 399.348 223.094 403.742 227.414 413.957 cv
227.414 413.957 228.043 415.16 229.617 413.84 cv
cp
f
163.801 431.387 mo
163.801 431.387 149.055 411.387 130.539 406.672 cv
130.539 406.672 154.219 417.563 161.176 431.156 cv
161.176 431.156 162.133 432.789 163.801 431.387 cv
cp
f
157.484 433.039 mo
157.484 433.039 142.859 411.719 121.922 407.016 cv
121.922 407.016 147.922 419.211 154.867 432.805 cv
154.867 432.805 155.828 434.434 157.484 433.039 cv
cp
f
150.348 434.168 mo
150.348 434.168 136.75 413.609 111.086 407.602 cv
111.086 407.602 134.883 414.762 148.051 434.281 cv
148.051 434.281 148.203 435.961 150.348 434.168 cv
cp
f
142.641 435.738 mo
142.641 435.738 129.008 412.582 99.8203 406.145 cv
99.8203 406.145 126.723 413.918 139.965 435.898 cv
139.965 435.898 139.965 437.813 142.641 435.738 cv
cp
f
135.184 435.957 mo
135.184 435.957 120.16 412.461 89.3359 407.238 cv
89.3359 407.238 117.797 413.977 132.375 436.25 cv
132.375 436.25 132.43 438.258 135.184 435.957 cv
cp
f
125.578 438.234 mo
125.578 438.234 111.266 414.305 80.6094 408.164 cv
80.6094 408.164 108.852 415.754 122.773 438.457 cv
122.773 438.457 122.762 440.461 125.578 438.234 cv
cp
f
235.398 411.164 mo
235.398 411.164 231.254 401.316 217.773 398.281 cv
217.773 398.281 229.59 402.199 233.434 411.277 cv
233.434 411.277 233.984 412.344 235.398 411.164 cv
cp
f
241.133 408.23 mo
241.133 408.23 237.934 399.027 224.555 397.426 cv
224.555 397.426 236.164 400.051 239.133 408.531 cv
239.133 408.531 239.594 409.523 241.133 408.23 cv
cp
f
246.922 405.809 mo
246.922 405.809 243.766 397.547 232.086 395.59 cv
232.086 395.59 242.27 398.387 245.199 405.996 cv
245.199 405.996 245.633 406.887 246.922 405.809 cv
cp
f
251.477 401.586 mo
251.477 401.586 248.789 393.902 237.629 392.551 cv
237.629 392.551 247.32 394.754 249.813 401.84 cv
249.813 401.84 250.18 402.668 251.477 401.586 cv
cp
f
116.328 438.922 mo
116.328 438.922 103.906 416.352 65.3984 406.66 cv
65.3984 406.66 96.4766 414.5 112.406 437.652 cv
112.406 437.652 113.668 441.223 116.328 438.922 cv
cp
f
257.445 399.012 mo
257.445 399.012 255.594 392.574 245.813 392.172 cv
245.813 392.172 254.227 393.41 255.957 399.336 cv
255.957 399.336 256.227 400.031 257.445 399.012 cv
cp
f
108.195 439.965 mo
108.195 439.965 94.3672 417.105 55.5195 408.875 cv
55.5195 408.875 88.6016 417.785 105.383 440.316 cv
105.383 440.316 105.629 442.363 108.195 439.965 cv
cp
f
97.8281 439.941 mo
97.8281 439.941 82.6602 418.348 43.6875 410.703 cv
43.6875 410.703 77.9063 418.043 95.0156 440.332 cv
95.0156 440.332 95.3047 442.367 97.8281 439.941 cv
cp
f
97.1406 448.18 mo
97.1406 448.18 91.3672 466.605 63.6016 484.637 cv
63.6016 484.637 85.7266 470.34 95.5391 448.289 cv
95.5391 448.289 97.5391 447.02 97.1406 448.18 cv
cp
f
86.6563 439.133 mo
86.6563 439.133 65.6094 415.297 37.4844 414.348 cv
37.4844 414.348 64.168 416.633 83.9766 439.711 cv
83.9766 439.711 84.4375 441.668 86.6563 439.133 cv
cp
f
89.6641 448.887 mo
89.6641 448.887 85.1094 464.168 59.5625 480.715 cv
59.5625 480.715 78.8398 467.707 88.3281 449.059 cv
88.3281 449.059 90.0703 447.898 89.6641 448.887 cv
cp
f
83.0469 448.133 mo
83.0469 448.133 76.3906 463.977 53.2813 477.645 cv
53.2813 477.645 71.9023 465.445 81.8047 448.32 cv
81.8047 448.32 83.4922 447.223 83.0469 448.133 cv
cp
f
76.5547 446.973 mo
76.5547 446.973 69.6719 461.848 47.0234 473.152 cv
47.0234 473.152 65.3047 462.898 75.3594 447.051 cv
75.3594 447.051 77 446.129 76.5547 446.973 cv
cp
f
69.3125 447.066 mo
69.3125 447.066 62.125 459.469 41.8828 470.34 cv
41.8828 470.34 58.3086 460.672 68.2813 447.223 cv
68.2813 447.223 69.7656 446.363 69.3125 447.066 cv
cp
f
62.6328 446.762 mo
62.6328 446.762 56.3594 457.57 38.4141 465.188 cv
38.4141 465.188 52.9688 458.191 61.7109 446.781 cv
61.7109 446.781 63.0234 446.145 62.6328 446.762 cv
cp
f
55.6484 446.18 mo
55.6484 446.18 49.5703 456.176 32.5938 462.012 cv
32.5938 462.012 46.3828 456.488 54.7813 446.121 cv
54.7813 446.121 56.0352 445.625 55.6484 446.18 cv
cp
f
49.7656 444.902 mo
49.7656 444.902 44.8086 453.574 30.6289 456.699 cv
30.6289 456.699 42.1367 453.418 49.0273 444.723 cv
49.0273 444.723 50.0586 444.434 49.7656 444.902 cv
cp
f
45.8984 443.52 mo
45.8984 443.52 40.5859 451.191 27.3945 451.938 cv
27.3945 451.938 38.1641 450.594 45.2656 443.223 cv
45.2656 443.223 46.2344 443.109 45.8984 443.52 cv
cp
f
76.1094 439.082 mo
76.1094 439.082 57.9453 417.852 32.0078 418.477 cv
32.0078 418.477 56.5391 419.18 73.5938 439.766 cv
73.5938 439.766 73.918 441.57 76.1094 439.082 cv
cp
f
64.5938 437.004 mo
64.5938 437.004 48.207 421.883 25.8281 421.223 cv
25.8281 421.223 43.8477 421.496 62.0703 438 cv
62.0703 438 62.1641 439.777 64.5938 437.004 cv
cp
f
49.8242 434.824 mo
49.8242 434.824 37.3789 424.887 16.2969 424.352 cv
16.2969 424.352 30.6406 424.066 47.293 435.828 cv
47.293 435.828 51.3125 436.676 49.8242 434.824 cv
cp
f
40.7266 441.277 mo
40.7266 441.277 34.5195 448.262 21.3477 447.426 cv
21.3477 447.426 32.1992 447.383 40.125 440.902 cv
40.125 440.902 41.0938 440.902 40.7266 441.277 cv
cp
f
36.4531 439.418 mo
36.4531 439.418 29.5859 445.121 17.7344 441.828 cv
17.7344 441.828 27.6172 443.82 35.9688 438.941 cv
35.9688 438.941 36.8516 439.129 36.4531 439.418 cv
cp
f
31.4023 438.422 mo
31.4023 438.422 22.8359 440.914 13.2813 433.172 cv
13.2813 433.172 21.5586 438.93 31.1563 437.793 cv
31.1563 437.793 31.8906 438.316 31.4023 438.422 cv
cp
f
96.0723 84.3887 mo
96.0723 84.3887 138.072 25.1387 205.572 9.38867 cv
273.072 -6.36133 301.572 2.63867 330.822 1.88867 cv
360.072 1.13867 442.572 1.13867 494.322 73.8887 cv
549.561 151.541 564.072 276.389 507.822 358.889 cv
451.572 441.389 386.822 462.389 356.822 471.389 cv
326.822 480.389 199.572 476.639 125.322 394.889 cv
51.0723 313.139 26.3223 184.139 96.0723 84.3887 cv
cp
f
326.932 471.295 mo
270.186 471.295 184.65 450.084 130.357 390.318 cv
93.7246 349.982 69.9629 298.572 63.4473 245.557 cv
56.4355 188.447 69.6426 134.064 101.65 88.291 cv
102.025 87.752 143.037 30.9629 207.119 16.0098 cv
246.561 6.81055 272.928 5.62695 291.494 5.62695 cv
299.377 5.62695 306.525 5.87305 313.213 6.10742 cv
319.229 6.30664 324.877 6.50586 330.338 6.50586 cv
332.08 6.50586 333.791 6.48242 335.502 6.43555 cv
336.658 6.41211 li
340.033 6.31836 343.986 6.2207 348.396 6.2207 cv
409.033 6.2207 454.947 29.6348 488.76 77.7988 cv
515.275 115.584 532.471 165.658 535.916 215.17 cv
539.596 268.092 527.623 317.775 502.205 355.057 cv
462.963 412.607 412.971 450.814 353.619 468.623 cv
347.963 470.322 338.236 471.295 326.932 471.295 cv
cp
1 1 1 rgb
f
214.932 104.592 mo
214.932 104.592 196.545 82.1621 172.33 70.3926 cv
145.572 57.3887 126.326 62.3926 126.326 62.3926 cv
126.326 62.3926 152.322 52.5137 188.33 72.3887 cv
215.295 87.2715 226.947 100.514 226.947 100.514 cv
226.947 100.514 207.072 64.5137 153.822 52.5137 cv
153.822 52.5137 197.322 58.1387 227.385 85.9082 cv
227.385 85.9082 211.447 63.1348 171.447 49.1387 cv
171.447 49.1387 206.697 54.0137 233.322 84.3887 cv
233.322 84.3887 203.33 17.3848 221.33 51.3887 cv
239.33 85.3926 223.334 32.3926 233.33 59.3926 cv
243.326 86.3926 233.322 20.3926 243.326 50.3926 cv
253.33 80.3926 244.33 3.38867 253.33 40.3926 cv
262.33 77.3926 259.334 28.3926 263.33 50.3926 cv
267.326 72.3887 269.322 26.3926 273.326 52.3926 cv
277.33 78.3887 285.326 28.3926 288.326 55.3926 cv
291.326 82.3926 297.072 71.8926 297.072 71.8926 cv
271.33 113.393 li
218.822 106.393 li
214.932 104.592 li
cp
.27451 .207843 .145098 rgb
f
503.322 119.639 mo
503.322 119.639 562.049 286.654 468.822 382.889 cv
399.072 454.889 336.822 464.639 336.822 464.639 cv
336.822 464.639 449.947 415.174 485.322 343.889 cv
535.572 242.639 503.322 119.639 503.322 119.639 cv
cp
f
gsave
508.385 153.432 mo
508.385 153.432 545.322 249.389 494.322 333.389 cv
443.322 417.389 368.322 448.393 368.322 448.393 cv
368.322 448.393 428.322 398.639 434.322 290.639 cv
440.322 182.639 416.322 163.393 416.322 163.393 cv
508.385 153.432 li
cp
clp
517.572 236.639 mo
517.572 236.639 492.822 267.389 409.572 263.639 cv
409.572 263.639 486.072 280.139 517.572 236.639 cv
cp
f
519.822 250.139 mo
519.822 250.139 495.072 280.889 411.822 277.139 cv
411.822 277.139 488.322 293.639 519.822 250.139 cv
cp
f
521.322 265.139 mo
521.322 265.139 496.572 295.889 413.322 292.139 cv
413.322 292.139 489.822 308.639 521.322 265.139 cv
cp
f
519.822 281.639 mo
519.822 281.639 495.072 312.389 411.822 308.639 cv
411.822 308.639 488.322 325.139 519.822 281.639 cv
cp
f
519.072 296.639 mo
519.072 296.639 494.322 327.389 411.072 323.639 cv
411.072 323.639 487.572 340.139 519.072 296.639 cv
cp
f
517.572 312.389 mo
517.572 312.389 492.822 343.139 409.572 339.389 cv
409.572 339.389 486.072 355.889 517.572 312.389 cv
cp
f
517.572 209.639 mo
517.572 209.639 492.822 240.389 409.572 236.639 cv
409.572 236.639 486.072 253.139 517.572 209.639 cv
cp
f
519.822 223.139 mo
519.822 223.139 495.072 253.889 411.822 250.139 cv
411.822 250.139 488.322 266.639 519.822 223.139 cv
cp
f
517.572 181.889 mo
517.572 181.889 492.822 212.639 409.572 208.889 cv
409.572 208.889 486.072 225.389 517.572 181.889 cv
cp
f
519.822 195.389 mo
519.822 195.389 495.072 226.139 411.822 222.389 cv
411.822 222.389 488.322 238.889 519.822 195.389 cv
cp
f
512.322 328.889 mo
512.322 328.889 487.572 359.639 404.322 355.889 cv
404.322 355.889 480.822 372.389 512.322 328.889 cv
cp
f
510.822 344.639 mo
510.822 344.639 486.072 375.389 402.822 371.639 cv
402.822 371.639 479.322 388.139 510.822 344.639 cv
cp
f
521.322 150.389 mo
521.322 150.389 496.572 181.139 413.322 177.389 cv
413.322 177.389 489.822 193.889 521.322 150.389 cv
cp
f
519.822 166.139 mo
519.822 166.139 495.072 196.889 411.822 193.139 cv
411.822 193.139 488.322 209.639 519.822 166.139 cv
cp
f
501.072 360.389 mo
501.072 360.389 476.322 391.139 393.072 387.389 cv
393.072 387.389 469.572 403.889 501.072 360.389 cv
cp
f
499.572 376.139 mo
499.572 376.139 474.822 406.889 391.572 403.139 cv
391.572 403.139 468.072 419.639 499.572 376.139 cv
cp
f
481.521 394.963 mo
481.521 394.963 454.713 423.939 371.924 414.459 cv
371.924 414.459 447.096 436.189 481.521 394.963 cv
cp
f
478.939 410.572 mo
478.939 410.572 452.131 439.549 369.338 430.068 cv
369.338 430.068 444.518 451.799 478.939 410.572 cv
cp
f
grestore
318.072 82.8887 mo
318.072 82.8887 308.33 99.6348 280.076 112.635 cv
251.822 125.639 237.818 128.635 223.322 128.385 cv
208.826 128.143 207.072 126.885 207.072 126.885 cv
207.072 126.885 207.08 126.893 208.076 124.393 cv
209.072 121.889 207.572 119.635 208.322 117.885 cv
209.072 116.143 204.572 112.643 207.822 110.893 cv
211.076 109.139 206.576 108.135 213.072 105.885 cv
219.572 103.635 221.08 100.393 220.826 97.3926 cv
220.572 94.3926 219.818 89.1348 222.572 87.8848 cv
225.326 86.6387 226.33 82.8887 229.826 85.1387 cv
233.322 87.3887 238.072 88.8926 241.322 85.3926 cv
244.572 81.8848 264.818 74.1426 266.822 74.1426 cv
268.826 74.1426 269.072 69.6426 273.572 71.6387 cv
278.072 73.6348 278.822 68.8848 282.822 69.8848 cv
286.826 70.8887 288.08 68.1426 291.326 69.3887 cv
294.572 70.6348 301.322 69.3887 301.322 69.3887 cv
301.322 69.3887 322.322 72.1348 318.072 82.8887 cv
cp
f
252.799 96.5059 mo
250.322 96.6934 248.127 96.0723 246.658 95.4746 cv
245.436 96.0645 243.869 96.6895 242.541 96.7871 cv
240.057 96.9746 238.893 95.5098 238.498 94.8652 cv
237.025 92.4473 238.713 89.7207 239.354 88.6973 cv
243.689 81.6816 267.549 71.3926 267.791 71.2871 cv
267.982 71.2051 268.814 70.9551 270.018 70.6191 cv
275.127 69.2051 278.322 68.1738 279.557 67.5488 cv
280.709 65.5254 282.4 65.1699 283.135 65.1191 cv
284.174 65.041 li
285.396 65.6113 li
285.33 65.5801 285.314 65.5684 285.35 65.5684 cv
285.443 65.5566 285.912 65.627 286.713 65.5684 cv
287.479 65.5098 288.408 65.3535 289.545 65.0293 cv
290.174 64.8535 290.811 64.748 291.455 64.7012 cv
297.299 64.2559 302.869 68.8965 303.486 69.4316 cv
308.947 74.123 li
301.854 75.3613 li
280.744 79.041 266.553 88.8926 260.494 93.1074 cv
259.439 93.834 258.584 94.4238 257.939 94.8301 cv
256.381 95.8027 254.65 96.3691 252.799 96.5059 cv
cp
f
246.588 91.666 mo
246.588 91.666 251.58 94.791 256.135 91.9473 cv
260.689 89.0996 276.025 76.4082 301.268 72.0098 cv
301.268 72.0098 295.369 66.9316 290.463 68.3105 cv
285.557 69.6816 283.713 68.5684 283.713 68.5684 cv
283.713 68.5684 282.932 68.123 282.291 69.6699 cv
281.65 71.2285 269.838 74.1191 269.111 74.4277 cv
268.381 74.7324 245.822 84.7051 242.244 90.4824 cv
238.662 96.2676 246.588 91.666 246.588 91.666 cv
cp
1 1 1 rgb
f
136.572 61.1387 mo
136.572 61.1387 70.6895 108.354 72.0723 226.889 cv
73.3223 334.467 161.057 413.029 183.822 424.139 cv
183.822 424.139 103.4 357.693 86.3223 270.389 cv
60.1035 136.291 136.572 61.1387 136.572 61.1387 cv
cp
.27451 .207843 .145098 rgb
f
206.83 146.1 mo
206.83 146.1 250.15 150.096 276.416 133.439 cv
276.416 133.439 256.639 158.494 206.83 146.1 cv
cp
f
202.541 155.592 mo
202.541 155.592 252.135 163.092 289.502 138.693 cv
289.502 138.693 264.162 170.986 202.541 155.592 cv
cp
f
206.814 176.967 mo
206.814 176.967 258.256 184.986 297.041 158.729 cv
297.041 158.729 270.736 193.463 206.814 176.967 cv
cp
f
204.65 166.033 mo
204.65 166.033 254.252 173.541 291.619 149.135 cv
291.619 149.135 266.291 181.432 204.65 166.033 cv
cp
f
212.814 200.053 mo
212.814 200.053 264.256 208.072 303.041 181.818 cv
303.041 181.818 276.729 216.553 212.814 200.053 cv
cp
f
210.654 189.119 mo
210.654 189.119 260.252 196.619 297.619 172.221 cv
297.619 172.221 272.291 204.518 210.654 189.119 cv
cp
f
228.018 211.514 mo
228.018 211.514 271.338 215.502 297.596 198.846 cv
297.596 198.846 277.826 223.908 228.018 211.514 cv
cp
f
232.666 222.635 mo
232.666 222.635 275.986 226.619 302.252 209.967 cv
302.252 209.967 282.486 235.021 232.666 222.635 cv
cp
f
223.322 128.385 mo
223.322 128.385 162.072 118.889 120.072 148.139 cv
120.072 148.139 144.822 117.389 211.572 120.389 cv
223.322 128.385 li
cp
f
gsave
128.322 70.8887 mo
128.322 70.8887 82.5723 112.889 79.5723 196.889 cv
76.5723 280.889 102.072 376.889 216.822 445.139 cv
216.822 445.139 114.822 352.889 156.822 197.639 cv
198.822 42.3887 128.322 70.8887 128.322 70.8887 cv
cp
clp
72.0723 162.389 mo
72.0723 162.389 93.0723 188.639 146.322 187.139 cv
146.322 187.139 91.5723 199.139 72.0723 162.389 cv
cp
f
75.8223 151.889 mo
75.8223 151.889 96.8223 178.139 150.072 176.639 cv
150.072 176.639 95.3223 188.639 75.8223 151.889 cv
cp
f
65.3223 185.639 mo
65.3223 185.639 86.3223 211.889 139.572 210.389 cv
139.572 210.389 84.8223 222.389 65.3223 185.639 cv
cp
f
69.0723 175.139 mo
69.0723 175.139 90.0723 201.389 143.322 199.889 cv
143.322 199.889 88.5723 211.889 69.0723 175.139 cv
cp
f
61.2207 212.322 mo
61.2207 212.322 83.4941 237.506 136.604 233.381 cv
136.604 233.381 82.5176 248.064 61.2207 212.322 cv
cp
f
64.4512 201.65 mo
64.4512 201.65 86.7207 226.83 139.83 222.705 cv
139.83 222.705 85.7363 237.393 64.4512 201.65 cv
cp
f
64.5176 242.76 mo
64.5176 242.76 89.7441 264.979 141.932 254.283 cv
141.932 254.283 90.0879 275.58 64.5176 242.76 cv
cp
f
66.3926 231.775 mo
66.3926 231.775 91.6191 253.986 143.807 243.291 cv
143.807 243.291 91.9629 264.596 66.3926 231.775 cv
cp
f
66.748 267.928 mo
66.748 267.928 92.6191 289.396 144.467 277.182 cv
144.467 277.182 93.2676 299.986 66.748 267.928 cv
cp
f
68.2988 256.889 mo
68.2988 256.889 94.1699 278.357 146.018 266.135 cv
146.018 266.135 94.8223 288.947 68.2988 256.889 cv
cp
f
71.3691 294.318 mo
71.3691 294.318 98.8535 313.678 149.576 297.416 cv
149.576 297.416 100.33 324.182 71.3691 294.318 cv
cp
f
72.0488 283.186 mo
72.0488 283.186 99.5254 302.549 150.252 286.283 cv
150.252 286.283 101.01 313.057 72.0488 283.186 cv
cp
f
76.9629 320.486 mo
76.9629 320.486 105.791 337.771 155.178 317.814 cv
155.178 317.814 108.041 348.135 76.9629 320.486 cv
cp
f
76.8145 309.338 mo
76.8145 309.338 105.643 326.619 155.033 306.658 cv
155.033 306.658 107.9 336.986 76.8145 309.338 cv
cp
f
85.0566 346.818 mo
85.0566 346.818 115.158 361.771 162.822 337.994 cv
162.822 337.994 118.217 371.932 85.0566 346.818 cv
cp
f
84.0332 335.709 mo
84.0332 335.709 114.135 350.674 161.799 326.885 cv
161.799 326.885 117.197 360.834 84.0332 335.709 cv
cp
f
92.5566 369.318 mo
92.5566 369.318 122.658 384.271 170.322 360.494 cv
170.322 360.494 125.717 394.432 92.5566 369.318 cv
cp
f
91.5332 358.209 mo
91.5332 358.209 121.635 373.174 169.299 349.385 cv
169.299 349.385 124.697 383.334 91.5332 358.209 cv
cp
f
103.057 389.568 mo
103.057 389.568 133.158 404.521 180.822 380.744 cv
180.822 380.744 136.217 414.682 103.057 389.568 cv
cp
f
102.033 378.459 mo
102.033 378.459 132.135 393.424 179.799 369.635 cv
179.799 369.635 135.197 403.584 102.033 378.459 cv
cp
f
116.252 411.541 mo
116.252 411.541 146.994 425.135 193.549 399.248 cv
193.549 399.248 150.502 435.154 116.252 411.541 cv
cp
f
114.729 400.49 mo
114.729 400.49 145.471 414.096 192.025 388.197 cv
192.025 388.197 148.99 424.104 114.729 400.49 cv
cp
f
131.252 428.791 mo
131.252 428.791 161.994 442.385 208.549 416.498 cv
208.549 416.498 165.502 452.404 131.252 428.791 cv
cp
f
129.729 417.74 mo
129.729 417.74 160.471 431.346 207.025 405.447 cv
207.025 405.447 163.99 441.354 129.729 417.74 cv
cp
f
78.8223 139.889 mo
78.8223 139.889 99.8223 166.139 153.072 164.639 cv
153.072 164.639 98.3223 176.639 78.8223 139.889 cv
cp
f
82.5723 129.389 mo
82.5723 129.389 103.572 155.639 156.822 154.139 cv
156.822 154.139 102.072 166.139 82.5723 129.389 cv
cp
f
84.8223 117.389 mo
84.8223 117.389 105.822 143.639 159.072 142.139 cv
159.072 142.139 104.322 154.139 84.8223 117.389 cv
cp
f
88.5723 106.889 mo
88.5723 106.889 109.572 133.139 162.822 131.639 cv
162.822 131.639 108.072 143.639 88.5723 106.889 cv
cp
f
93.0723 95.6387 mo
93.0723 95.6387 114.072 121.889 167.322 120.389 cv
167.322 120.389 112.572 132.389 93.0723 95.6387 cv
cp
f
96.8223 85.1387 mo
96.8223 85.1387 117.822 111.389 171.072 109.889 cv
171.072 109.889 116.322 121.889 96.8223 85.1387 cv
cp
f
102.822 74.6387 mo
102.822 74.6387 123.822 100.889 177.072 99.3887 cv
177.072 99.3887 122.322 111.389 102.822 74.6387 cv
cp
f
106.572 64.1387 mo
106.572 64.1387 127.572 90.3887 180.822 88.8887 cv
180.822 88.8887 126.072 100.889 106.572 64.1387 cv
cp
f
grestore
216.072 136.139 mo
216.072 136.139 245.322 138.764 271.572 128.264 cv
306.01 114.494 322.572 93.3887 310.947 85.8887 cv
300.447 91.1387 li
300.447 91.1387 303.096 105.408 267.072 124.139 cv
248.322 133.889 216.072 136.139 216.072 136.139 cv
cp
f
317.697 90.3887 mo
317.697 90.3887 322.572 109.514 282.072 129.764 cv
282.072 129.764 303.822 123.014 313.947 110.639 cv
324.072 98.2637 319.947 92.2637 317.697 90.3887 cv
cp
f
323.697 94.1387 mo
323.697 94.1387 328.572 113.264 288.072 133.514 cv
288.072 133.514 309.822 126.764 319.947 114.389 cv
330.072 102.014 325.947 96.0137 323.697 94.1387 cv
cp
f
242.182 125.65 mo
240.424 125.65 238.76 125.51 237.232 125.24 cv
235.732 124.979 li
234.924 123.67 li
234.877 123.596 230.084 115.936 223.697 114.736 cv
217.072 113.494 210.494 109.045 208.064 104.146 cv
206.885 101.775 206.787 99.3652 207.783 97.373 cv
209.549 93.834 212.338 93.2207 214.369 92.7676 cv
215.822 92.4512 217.072 92.1738 218.564 90.8457 cv
219.01 90.459 219.49 89.9785 220.025 89.4512 cv
223.123 86.4004 227.811 81.7754 234.705 81.7754 cv
240.158 81.7754 245.572 84.6426 251.268 90.5293 cv
257.908 97.3848 267.15 100.842 270.15 101.592 cv
274.002 102.553 284.822 104.521 284.932 104.545 cv
294.068 106.197 li
286.025 110.838 li
284.975 111.436 260.111 125.65 242.182 125.65 cv
cp
f
237.822 121.889 mo
237.822 121.889 232.33 112.889 224.322 111.389 cv
216.322 109.889 208.826 102.893 210.822 98.8926 cv
212.822 94.8887 216.326 97.3965 220.826 93.3887 cv
225.326 89.3926 233.822 77.3926 248.822 92.8926 cv
255.725 100.021 265.322 103.889 269.322 104.893 cv
273.326 105.893 284.322 107.885 284.322 107.885 cv
284.322 107.885 254.822 124.889 237.822 121.889 cv
cp
1 1 1 rgb
f
227.244 114.127 mo
225.775 114.127 224.705 113.721 223.932 113.205 cv
223.822 113.217 223.709 113.217 223.596 113.217 cv
221.791 113.217 219.783 112.643 218.197 111.705 cv
216.908 111.693 215.455 111.596 213.955 110.838 cv
211.826 109.783 210.854 108.072 210.268 107.049 cv
210.139 106.818 209.951 106.49 209.869 106.4 cv
209.908 106.447 209.904 106.467 209.869 106.467 cv
209.834 106.467 209.76 106.443 209.674 106.408 cv
206.197 105.01 205.455 102.635 205.455 100.877 cv
205.455 100.654 205.428 100.314 205.404 99.9043 cv
205.275 97.666 205.197 95.6738 205.572 93.9863 cv
206.377 90.377 210.021 87.0371 215.299 85.0488 cv
216.799 84.4941 217.932 84.1504 218.846 83.873 cv
220.197 83.4629 220.197 83.4629 220.502 83.1348 cv
222.182 81.2949 224.412 80.3223 226.971 80.3223 cv
229.174 80.3223 231.533 81.0488 234.189 82.5176 cv
235.287 83.127 236.049 83.4746 236.646 83.7441 cv
237.795 84.2676 238.971 84.8066 240.354 86.1348 cv
242.682 88.0566 244.729 91.3027 243.748 94.8887 cv
243.705 95.2051 243.752 95.7676 243.768 96.3535 cv
243.822 98.7441 243.893 102.033 241.768 104.627 cv
241.287 105.213 240.795 105.674 240.307 106.045 cv
239.775 108.088 238.498 110.018 236.307 111.354 cv
233.189 113.264 229.424 114.127 227.244 114.127 cv
cp
.27451 .207843 .145098 rgb
f
238.705 88.8184 mo
238.705 88.8184 241.479 90.998 240.885 93.1777 cv
240.283 95.3691 241.479 99.9316 239.693 102.119 cv
237.908 104.311 236.713 102.318 236.713 102.318 cv
236.713 102.318 238.498 106.303 234.924 108.482 cv
231.35 110.666 226.385 111.26 226.779 110.463 cv
227.178 109.678 228.174 108.682 226.779 108.482 cv
225.385 108.283 225.986 109.279 224.393 109.678 cv
222.799 110.076 220.619 109.279 219.627 108.482 cv
218.627 107.686 216.643 108.482 215.057 107.686 cv
213.467 106.889 213.275 105.107 211.877 103.713 cv
210.486 102.318 208.498 102.525 208.498 101.334 cv
208.498 100.139 208.1 96.5645 208.498 94.7715 cv
208.896 92.9902 211.283 90.4004 216.049 88.6113 cv
220.822 86.8262 222.002 87.2246 223.994 85.0332 cv
225.982 82.8535 229.166 83.4473 232.736 85.4316 cv
236.318 87.4238 237.111 87.2246 238.705 88.8184 cv
cp
1 1 1 rgb
f
223.596 106.795 mo
223.596 106.795 217.338 108.283 217.639 104.709 cv
217.939 101.135 217.041 99.9395 215.553 100.232 cv
214.064 100.537 213.467 97.2559 214.955 96.6582 cv
216.447 96.0605 214.361 92.4863 217.639 92.791 cv
220.916 93.084 225.088 95.7676 227.479 93.3848 cv
227.479 93.3848 226.58 96.3652 223.002 96.0605 cv
219.424 95.7676 215.553 94.877 217.639 96.6582 cv
219.725 98.4512 220.025 99.3418 220.322 101.428 cv
220.619 103.514 216.447 106.795 223.596 106.795 cv
cp
.27451 .207843 .145098 rgb
f
243.326 93.3887 mo
243.326 93.3887 247.322 99.3887 249.326 100.393 cv
251.33 101.393 250.322 100.889 255.326 104.393 cv
260.33 107.893 263.83 108.893 263.83 108.893 cv
275.33 112.889 li
275.33 112.889 263.83 114.389 253.826 108.389 cv
243.822 102.389 242.33 100.393 242.33 100.393 cv
243.326 93.3887 li
cp
f
485.385 254.311 mo
482.975 248.471 471.096 243.236 466.822 242.135 cv
464.869 241.631 463.861 241.268 463.018 240.963 cv
462.139 240.65 461.705 240.494 459.631 240.189 cv
455.342 239.564 452.389 237.518 450.795 236.088 cv
446.143 234.377 443.459 231.58 442.029 229.549 cv
438.424 227.908 436.072 225.533 434.76 223.322 cv
431.908 221.4 428.74 218.307 427.174 216.697 cv
424.604 215.127 421.588 212.381 420.221 211.08 cv
417.158 209.291 414.994 206.311 413.822 204.365 cv
410.834 202.561 409.229 200.549 408.396 198.822 cv
404.9 196.162 402.432 191.713 401.143 188.924 cv
398.775 187.279 397.197 185.041 396.252 183.322 cv
393.049 181.721 390.982 179.252 389.904 177.67 cv
387.256 175.748 384.822 172.697 383.346 170.643 cv
380.057 169.209 377.74 166.443 376.408 164.432 cv
372.994 162.834 370.494 159.658 369.068 157.42 cv
366.467 156.143 364.83 154.416 363.936 153.213 cv
361.166 150.994 358.65 147.518 357.299 145.479 cv
354.533 143.955 352.58 141.834 351.467 140.381 cv
348.283 138.697 346.58 136.654 345.643 134.869 cv
343.244 133.291 341.799 131.006 340.967 129.158 cv
339.697 128.404 338.611 127.467 337.76 126.564 cv
337.041 126.057 334.033 123.857 332.014 121.416 cv
331.65 120.975 331.24 120.455 330.799 119.869 cv
329.205 117.768 327.025 114.916 323.365 112.584 cv
321.162 111.174 319.135 109.588 317.439 108.135 cv
315.221 107.041 li
311.248 105.084 307.338 101.424 304.604 98.4746 cv
302.385 97.0215 li
298.338 94.3848 295.518 91.627 293.635 89.4004 cv
289.924 88.584 286.979 84.3223 286.029 81.4238 cv
285.588 80.0762 285.268 79.373 285.174 79.1738 cv
284.229 77.2988 li
284.717 75.1777 li
288.9 58.7949 302.811 50.1699 303.408 49.8066 cv
312.057 44.5332 li
312.033 46.0723 li
314.014 45.2012 315.537 44.6621 315.885 44.5449 cv
324.514 41.5801 li
324.443 42.0566 li
324.912 41.9199 335.666 39.1777 335.666 39.1777 cv
335.197 40.5723 li
338.107 40.127 341.463 40.373 343.475 40.6074 cv
346.486 39.7363 349.193 39.4707 351.549 39.8105 cv
352.475 39.9473 353.283 40.1621 353.963 40.4199 cv
356.271 40.1504 358.381 40.1582 360.256 40.4238 cv
362.096 40.6973 363.549 41.1934 364.686 41.7559 cv
366.205 41.5488 367.674 41.5449 369.092 41.7441 cv
371.252 42.0605 372.947 42.8145 374.205 43.627 cv
376.057 43.4434 377.674 43.4551 379.127 43.666 cv
381.354 43.9863 383.096 44.7988 384.373 45.8574 cv
385.51 45.8574 386.596 45.9316 387.596 46.0801 cv
390.561 46.5098 392.553 47.5176 393.889 48.5645 cv
405.104 50.7207 411.807 54.8926 415.908 57.4316 cv
416.799 57.9863 417.912 58.6777 418.299 58.8301 cv
420.525 59.4629 423.275 61.0215 426.76 62.9785 cv
429.416 64.4785 432.432 66.1777 435.057 67.3145 cv
440.096 69.4824 442.369 72.4824 443.393 74.9004 cv
445.314 76.1738 447.275 77.8262 448.455 78.8613 cv
451.311 80.5332 453.229 82.7207 454.338 84.2246 cv
457.229 85.7598 458.885 87.4473 459.807 89.0176 cv
461.627 90.0488 462.838 91.0801 463.639 91.9824 cv
466.322 93.8613 467.658 96.5332 468.303 98.5566 cv
470.775 100.604 472.104 102.814 472.807 104.463 cv
475.08 106.385 476.369 108.189 477.072 109.771 cv
480.283 112.127 481.744 114.596 482.338 116.705 cv
486.127 119.291 487.588 122.17 488.072 124.432 cv
489.947 126.576 490.768 128.846 491.01 130.814 cv
493.111 133.314 493.877 136.092 494.15 138.061 cv
495.885 140.498 496.783 143.072 497.213 144.658 cv
499.545 148.033 499.916 151.057 499.643 153.283 cv
500.869 155.525 501.486 157.424 501.795 158.732 cv
504.322 162.463 505.01 166.021 505.217 167.963 cv
506.506 171.295 506.619 174.361 506.459 176.416 cv
507.822 179.275 507.889 181.885 507.42 183.924 cv
509.119 189.197 508.822 193.443 508.416 195.744 cv
509.291 200.221 508.369 204.182 507.713 206.205 cv
507.721 206.229 li
507.561 210.084 506.744 211.889 505.908 213.361 cv
505.916 213.553 505.943 213.775 505.967 214.057 cv
506.479 218.779 505.311 223.092 504.631 225.131 cv
504.537 228.928 503.455 231.627 502.381 233.385 cv
502.275 238.58 499.943 242.51 497.807 244.791 cv
497.229 246.471 496.604 247.822 495.889 248.873 cv
494.951 252.236 492.701 254.83 492.186 255.393 cv
488.744 261.377 li
485.385 254.311 li
cp
f
290.143 76.7129 mo
290.143 76.7129 290.643 77.627 291.354 79.8184 cv
292.088 82.0098 294.104 83.9707 294.924 84.0957 cv
295.736 84.2129 295.568 82.5137 295.568 82.5137 cv
295.568 82.5137 298.166 87.6934 305.604 92.5332 cv
305.436 90.834 li
305.436 90.834 311.932 99.291 317.975 102.26 cv
316.873 99.8066 li
316.873 99.8066 321.189 104.611 326.74 108.127 cv
332.283 111.635 334.99 116.002 336.771 118.139 cv
338.553 120.275 341.596 122.381 341.596 122.381 cv
340.736 121.01 li
340.736 121.01 342.924 124.678 345.963 125.314 cv
345.963 125.314 346.947 130.057 350.752 131.229 cv
350.752 131.229 350.744 134.15 355.861 136.354 cv
355.861 136.354 357.986 140.006 361.846 141.502 cv
361.846 141.502 365.518 147.518 368.799 149.721 cv
368.799 149.721 370.15 152.264 373.756 153.412 cv
373.756 153.412 377.072 159.682 381.057 160.256 cv
381.057 160.256 383.721 165.658 387.842 166.416 cv
387.842 166.416 391.826 172.479 395.018 174.189 cv
395.018 174.189 397.088 178.244 401.455 179.51 cv
401.455 179.51 403.006 183.963 406.682 185.592 cv
406.682 185.592 410.018 193.9 414.291 195.775 cv
414.291 195.775 414.221 198.432 419.189 200.873 cv
419.189 200.873 421.486 205.588 424.854 207.174 cv
424.854 207.174 429.385 211.588 432.018 212.908 cv
432.018 212.908 437.596 218.732 440.533 220.092 cv
440.533 220.092 441.549 223.846 447.385 225.787 cv
447.385 225.787 449.107 230.104 455.416 231.963 cv
455.416 231.963 457.674 234.799 462.115 235.439 cv
466.568 236.08 465.729 236.432 469.963 237.518 cv
474.186 238.596 486.443 243.814 490.029 252.482 cv
490.029 252.482 492.447 249.854 492.678 247.221 cv
492.678 247.221 493.686 246.74 494.916 242.533 cv
494.916 242.533 499.494 239.127 498.736 232.439 cv
498.736 232.439 501.236 230.299 501.068 224.947 cv
501.068 224.947 502.986 220.369 502.451 215.439 cv
501.912 210.502 503.951 212.674 504.174 206.756 cv
504.408 200.838 504.115 206.123 504.115 206.123 cv
504.115 206.123 506.182 201.564 504.721 196.494 cv
504.721 196.494 506.369 191.568 503.463 184.564 cv
503.463 184.564 505.385 182.182 502.674 178.186 cv
502.674 178.186 503.717 174.268 501.678 169.893 cv
501.678 169.893 501.799 165.846 498.494 161.604 cv
498.494 161.604 498.279 158.756 495.572 154.76 cv
495.572 154.76 497.4 151.893 493.943 147.635 cv
493.943 147.635 493.264 143.619 490.557 140.721 cv
490.557 140.721 490.869 136.377 487.197 133.654 cv
487.197 133.654 488.271 130.525 484.486 127.467 cv
484.486 127.467 485.479 123.854 478.756 120.529 cv
478.756 120.529 480.01 117.268 473.951 113.721 cv
473.951 113.721 474.256 111.576 469.732 108.26 cv
469.732 108.26 469.119 104.885 464.955 102.236 cv
464.955 102.236 464.6 98.2676 461.4 96.5527 cv
461.4 96.5527 460.674 95.041 456.846 93.3887 cv
456.846 93.3887 457.311 91.2598 452.002 88.9316 cv
452.002 88.9316 450.279 85.7051 446.646 83.7676 cv
446.646 83.7676 442.197 79.8379 439.99 78.8926 cv
439.99 78.8926 440.189 75.3184 434.15 72.7168 cv
428.104 70.1191 421.119 65.3457 417.814 64.4004 cv
414.502 63.4473 407.83 56.5332 392.072 53.9316 cv
392.072 53.9316 390.783 50.9316 382.357 51.7441 cv
382.357 51.7441 382.596 48.0176 373.268 49.6504 cv
373.268 49.6504 370.674 45.9863 364.135 47.8535 cv
364.135 47.8535 362.057 44.8926 353.541 46.3223 cv
353.541 46.3223 351.35 44.123 344.447 46.4082 cv
344.447 46.4082 338.158 45.5059 335.197 46.4863 cv
332.236 47.4629 327.783 47.9199 327.186 48.7637 cv
326.596 49.627 327.408 47.2402 327.408 47.2402 cv
327.408 47.2402 319.932 49.127 317.736 51.3184 cv
317.928 49.9355 li
317.928 49.9355 310.521 52.4668 306.416 55.9395 cv
306.439 54.6934 li
306.439 54.6934 293.838 62.3145 290.143 76.7129 cv
cp
1 1 1 rgb
f
290.229 74.6387 mo
290.229 74.6387 330.514 77.7559 375.869 110.639 cv
421.229 143.521 471.229 183.342 488.295 247.221 cv
488.295 247.221 483.439 201.4 438.795 159.225 cv
394.158 117.049 345.619 74.3066 290.229 74.6387 cv
cp
.27451 .207843 .145098 rgb
f
385.877 108.643 mo
385.877 108.643 414.49 92.7363 463.916 108.354 cv
463.916 108.354 420.49 94.5488 386.26 110.268 cv
386.26 110.268 384.162 109.65 385.877 108.643 cv
cp
f
392.877 114.354 mo
392.877 114.354 421.494 98.4512 470.916 114.072 cv
470.916 114.072 427.498 100.256 393.26 115.982 cv
393.26 115.982 391.166 115.361 392.877 114.354 cv
cp
f
401.471 119.736 mo
401.471 119.736 428.635 104.447 475.479 119.338 cv
475.479 119.338 434.322 106.174 401.834 121.291 cv
401.834 121.291 399.838 120.705 401.471 119.736 cv
cp
f
407.447 125.963 mo
407.447 125.963 434.248 111.025 480.525 125.666 cv
480.525 125.666 439.869 112.725 407.811 127.486 cv
407.811 127.486 405.846 126.904 407.447 125.963 cv
cp
f
413.416 132.189 mo
413.416 132.189 439.127 117.51 483.408 131.682 cv
483.408 131.682 444.51 119.146 413.76 133.674 cv
413.76 133.674 411.877 133.111 413.416 132.189 cv
cp
f
419.775 137.873 mo
419.775 137.873 444.244 123.834 486.346 137.346 cv
486.346 137.346 449.354 125.393 420.104 139.291 cv
420.104 139.291 418.311 138.752 419.775 137.873 cv
cp
f
426.377 144.08 mo
426.377 144.08 448.709 133.135 488.877 143.521 cv
488.877 143.521 454.498 134.756 427.674 145.596 cv
427.674 145.596 425.049 144.775 426.377 144.08 cv
cp
f
379.615 102.096 mo
379.615 102.096 408.229 86.1934 457.662 101.807 cv
457.662 101.807 414.236 88.002 380.014 103.725 cv
380.014 103.725 377.904 103.104 379.615 102.096 cv
cp
f
372.971 98.0645 mo
372.971 98.0645 400.885 80.9668 450.932 94.4902 cv
450.932 94.4902 406.967 82.5176 373.416 99.6699 cv
373.416 99.6699 371.299 99.1426 372.971 98.0645 cv
cp
f
366.533 92.7441 mo
366.533 92.7441 394.455 75.6465 444.494 89.1699 cv
444.494 89.1699 400.525 77.2051 366.986 94.3496 cv
366.986 94.3496 364.873 93.8223 366.533 92.7441 cv
cp
f
360.064 87.5723 mo
360.064 87.5723 388.01 68.4004 437.6 82.748 cv
437.6 82.748 394.041 70.0449 360.51 89.3457 cv
360.51 89.3457 358.4 88.7832 360.064 87.5723 cv
cp
f
352.15 83.7559 mo
352.15 83.7559 380.018 62.4707 428.955 77.6387 cv
428.955 77.6387 385.955 64.2051 352.564 85.6777 cv
352.564 85.6777 350.479 85.0957 352.15 83.7559 cv
cp
f
345.463 80.9902 mo
345.463 80.9902 372.369 58.4941 421.92 71.502 cv
421.92 71.502 378.373 59.9707 345.959 82.9004 cv
345.959 82.9004 343.85 82.4082 345.463 80.9902 cv
cp
f
339.033 78.4238 mo
339.033 78.4238 365.424 52.0684 413.424 66.5996 cv
413.424 66.5996 371.244 53.709 339.502 80.627 cv
339.502 80.627 337.455 80.0762 339.033 78.4238 cv
cp
f
331.076 75.916 mo
331.076 75.916 355.135 50.3066 403.662 59.8457 cv
403.662 59.8457 360.994 51.3535 331.697 77.8535 cv
331.697 77.8535 329.635 77.5098 331.076 75.916 cv
cp
f
359.182 102.588 mo
359.182 102.588 353.189 118.01 360.525 136.619 cv
360.525 136.619 355.244 118.936 360.752 104.697 cv
360.752 104.697 361.334 102.9 359.182 102.588 cv
cp
f
364.873 106.541 mo
364.873 106.541 358.885 121.963 366.213 140.568 cv
366.213 140.568 360.939 122.893 366.455 108.646 cv
366.455 108.646 367.018 106.854 364.873 106.541 cv
cp
f
370.521 110.803 mo
370.521 110.803 364.791 128.775 372.115 147.377 cv
372.115 147.377 366.584 127.15 372.092 112.916 cv
372.092 112.916 372.674 111.119 370.521 110.803 cv
cp
f
353.955 99.3223 mo
353.955 99.3223 348.396 114.049 354.959 131.732 cv
354.959 131.732 350.268 114.924 355.377 101.322 cv
355.377 101.322 355.9 99.6035 353.955 99.3223 cv
cp
f
322.686 73.4668 mo
322.686 73.4668 348.525 46.8457 389.623 54.7285 cv
389.623 54.7285 352.072 48.2285 323.299 75.4629 cv
323.299 75.4629 321.275 75.1074 322.686 73.4668 cv
cp
f
312.697 71.0762 mo
312.697 71.0762 337.283 46.1621 369.76 51.1777 cv
369.76 51.1777 342.08 45.834 313.311 73.0801 cv
313.311 73.0801 311.283 72.7285 312.697 71.0762 cv
cp
f
301.689 69.166 mo
301.689 69.166 326.275 44.252 358.756 49.2754 cv
358.756 49.2754 331.076 43.9355 302.307 71.1699 cv
302.307 71.1699 300.279 70.8184 301.689 69.166 cv
cp
f
433.053 149.814 mo
433.053 149.814 453.959 139.35 491.502 149.158 cv
491.502 149.158 459.377 140.885 434.248 151.252 cv
434.248 151.252 431.791 150.471 433.053 149.814 cv
cp
f
437.814 155.752 mo
437.814 155.752 457.51 147.436 493.307 156.072 cv
493.307 156.072 462.682 148.775 438.982 156.951 cv
438.982 156.951 436.639 156.271 437.814 155.752 cv
cp
f
443.924 161.1 mo
443.924 161.1 464.002 153.166 497.854 161.736 cv
497.854 161.736 468.045 154.842 445.076 162.221 cv
445.076 162.221 442.779 161.58 443.924 161.1 cv
cp
f
347.58 96.2051 mo
347.58 96.2051 341.924 109.268 349.627 125.322 cv
349.627 125.322 343.994 110.1 349.193 98.041 cv
349.193 98.041 349.721 96.5176 347.58 96.2051 cv
cp
f
375.955 114.412 mo
375.955 114.412 369.689 136.064 378.514 153.002 cv
378.514 153.002 372.021 130.76 377.525 116.521 cv
377.525 116.521 378.096 114.717 375.955 114.412 cv
cp
f
381.244 118.939 mo
381.244 118.939 374.975 140.588 383.799 157.533 cv
383.799 157.533 377.314 135.283 382.822 121.045 cv
382.822 121.045 383.389 119.252 381.244 118.939 cv
cp
f
386.674 122.545 mo
386.674 122.545 380.412 144.189 389.236 161.135 cv
389.236 161.135 382.744 138.893 388.252 124.654 cv
388.252 124.654 388.826 122.854 386.674 122.545 cv
cp
f
341.299 93.377 mo
341.299 93.377 336.268 105.635 342.795 120.576 cv
342.795 120.576 338.057 106.396 342.689 95.0762 cv
342.689 95.0762 343.17 93.6426 341.299 93.377 cv
cp
f
335.197 90.6504 mo
335.197 90.6504 330.041 101.51 337.615 115.111 cv
337.615 115.111 332.014 102.248 336.748 92.2168 cv
336.748 92.2168 337.236 90.9512 335.197 90.6504 cv
cp
f
392.143 128.033 mo
392.143 128.033 387.057 152.357 395.881 169.303 cv
395.881 169.303 388.217 144.389 393.721 130.143 cv
393.721 130.143 394.299 128.346 392.143 128.033 cv
cp
f
397.58 131.639 mo
397.58 131.639 391.432 156.752 401.881 175.494 cv
401.881 175.494 393.643 147.986 399.15 133.748 cv
399.15 133.748 399.729 131.955 397.58 131.639 cv
cp
f
403.182 136.209 mo
403.182 136.209 396.912 160.049 409.533 183.189 cv
409.533 183.189 399.01 160.674 404.791 137.85 cv
404.791 137.85 405.947 136.619 403.182 136.209 cv
cp
f
409.479 140.908 mo
409.479 140.908 401.307 166.51 415.955 192.557 cv
415.955 192.557 403.826 167.322 411.393 142.799 cv
411.393 142.799 412.814 141.525 409.479 140.908 cv
cp
f
414.619 146.322 mo
414.619 146.322 407.111 173.189 423.76 199.65 cv
423.76 199.65 409.814 173.932 416.705 148.221 cv
416.705 148.221 418.17 146.838 414.619 146.322 cv
cp
f
422.717 151.963 mo
422.717 151.963 414.416 178.584 430.264 205.537 cv
430.264 205.537 417.104 179.424 424.756 153.916 cv
424.756 153.916 426.256 152.588 422.717 151.963 cv
cp
f
329.346 88.127 mo
329.346 88.127 324.771 97.7754 331.494 109.854 cv
331.494 109.854 326.533 98.4277 330.744 89.5215 cv
330.744 89.5215 331.17 88.3965 329.346 88.127 cv
cp
f
323.342 85.8066 mo
323.342 85.8066 318.611 94.3262 326.33 105.365 cv
326.33 105.365 320.557 94.9629 324.893 87.0957 cv
324.893 87.0957 325.334 86.0957 323.342 85.8066 cv
cp
f
317.674 83.1035 mo
317.674 83.1035 313.619 90.9629 319.947 100.979 cv
319.947 100.979 315.244 91.5254 318.963 84.2676 cv
318.963 84.2676 319.338 83.3457 317.674 83.1035 cv
cp
f
311.494 82.5254 mo
311.494 82.5254 307.557 89.6426 313.986 98.8613 cv
313.986 98.8613 309.166 90.1777 312.795 83.5957 cv
312.795 83.5957 313.166 82.7676 311.494 82.5254 cv
cp
f
429.393 158.404 mo
429.393 158.404 420.842 182.709 439.283 217.877 cv
439.283 217.877 424.416 189.482 431.061 162.178 cv
431.061 162.178 432.885 158.854 429.393 158.404 cv
cp
f
305.6 79.7949 mo
305.6 79.7949 302.033 85.4629 308.248 93.0176 cv
308.248 93.0176 303.561 85.916 306.83 80.6855 cv
306.83 80.6855 307.17 80.0176 305.6 79.7949 cv
cp
f
435.596 163.771 mo
435.596 163.771 427.76 189.322 447.514 223.771 cv
447.514 223.771 432.111 193.166 437.729 165.635 cv
437.729 165.635 439.096 164.096 435.596 163.771 cv
cp
f
442.479 171.525 mo
442.479 171.525 436.494 197.221 456.76 231.369 cv
456.76 231.369 439.428 200.967 444.643 173.357 cv
444.643 173.357 445.979 171.787 442.479 171.525 cv
cp
f
449.084 166.549 mo
449.084 166.549 466.666 158.568 498.619 167.264 cv
498.619 167.264 473.213 160.283 450.232 167.662 cv
450.232 167.662 447.955 167.025 449.084 166.549 cv
cp
f
449.322 180.389 mo
449.322 180.389 445.58 211.963 463.615 233.568 cv
463.615 233.568 447.533 212.15 451.541 182.002 cv
451.541 182.002 452.693 180.354 449.322 180.389 cv
cp
f
454.592 171.646 mo
454.592 171.646 469.025 164.861 498.385 172.877 cv
498.385 172.877 475.83 167.17 455.619 172.525 cv
455.619 172.525 453.584 171.998 454.592 171.646 cv
cp
f
458.439 177.084 mo
458.439 177.084 474.689 171.486 500.275 179.611 cv
500.275 179.611 478.779 173.854 459.408 177.885 cv
459.408 177.885 457.471 177.361 458.439 177.084 cv
cp
f
461.904 182.697 mo
461.904 182.697 477.58 177.916 501.104 187.268 cv
501.104 187.268 481.275 180.479 462.76 183.541 cv
462.76 183.541 460.979 182.924 461.904 182.697 cv
cp
f
466.799 188.033 mo
466.799 188.033 480.838 185.127 502.428 192.975 cv
502.428 192.975 484.275 187.174 467.6 188.697 cv
467.6 188.697 465.979 188.17 466.799 188.033 cv
cp
f
471.021 193.221 mo
471.021 193.221 483.26 190.697 500.904 198.998 cv
500.904 198.998 485.986 192.807 471.65 193.889 cv
471.65 193.889 470.299 193.33 471.021 193.221 cv
cp
f
475.244 198.811 mo
475.244 198.811 486.748 196.682 502.416 205.455 cv
502.416 205.455 489.104 198.854 475.775 199.494 cv
475.775 199.494 474.572 198.9 475.244 198.811 cv
cp
f
478.217 204.057 mo
478.217 204.057 487.979 201.963 499.76 210.459 cv
499.76 210.459 489.643 204.064 478.568 204.729 cv
478.568 204.729 477.666 204.143 478.217 204.057 cv
cp
f
479.76 207.857 mo
479.76 207.857 489.021 206.709 498.361 216.037 cv
498.361 216.037 490.182 208.912 479.955 208.525 cv
479.955 208.525 479.229 207.881 479.76 207.857 cv
cp
f
456.314 188.287 mo
456.314 188.287 452.596 215.979 470.342 234.904 cv
470.342 234.904 454.521 216.143 458.502 189.705 cv
458.502 189.705 459.631 188.264 456.314 188.287 cv
cp
f
462.439 198.26 mo
462.439 198.26 462.088 220.557 476.506 237.682 cv
476.506 237.682 464.705 224.064 464.869 199.479 cv
464.869 199.479 466.127 198.221 462.439 198.26 cv
cp
f
470.658 210.729 mo
470.658 210.729 471.541 226.619 485.189 242.697 cv
485.189 242.697 475.424 232.197 473.088 211.939 cv
473.088 211.939 471.045 208.377 470.658 210.729 cv
cp
f
481.533 213.213 mo
481.533 213.213 490.873 213.178 499.029 223.557 cv
499.029 223.557 491.764 215.498 481.658 213.904 cv
481.658 213.904 481.01 213.178 481.533 213.213 cv
cp
f
482.998 217.631 mo
482.998 217.631 491.822 218.955 497.268 229.982 cv
497.268 229.982 492.162 221.287 482.963 218.311 cv
482.963 218.311 482.51 217.525 482.998 217.631 cv
cp
f
485.619 222.061 mo
485.619 222.061 493.182 226.791 493.779 239.064 cv
493.779 239.064 492.557 229.064 485.314 222.67 cv
485.314 222.67 485.213 221.768 485.619 222.061 cv
cp
f
556.572 253.322 mo
542.576 251.494 li
553.393 241.326 li
571.588 224.229 561.744 206.002 561.307 205.232 cv
553.197 190.682 li
567.791 195.158 li
568.635 195.416 576.096 197.99 581.119 209.307 cv
586.197 220.768 582.658 230.111 582.236 231.135 cv
581.807 232.189 li
581.455 235.514 580.4 237.951 580.213 238.361 cv
575.541 248.666 li
574.283 246.463 li
572.412 249.721 569.908 250.607 569.225 250.795 cv
568.4 251.018 li
566.881 252.248 565.189 252.986 563.705 253.303 cv
556.592 254.803 li
556.572 253.322 li
cp
f
567.424 203.111 mo
567.424 203.111 582.174 226.822 556.521 248.189 cv
556.521 248.189 560.143 248.564 562.354 246.252 cv
562.357 248.143 li
562.357 248.143 566.424 247.338 567.354 243.65 cv
568.314 245.627 li
568.314 245.627 570.889 244.982 571.455 239.639 cv
572.9 240.811 li
572.9 240.811 575.502 238.65 575.01 233.99 cv
576.588 236.463 li
576.588 236.463 578.791 232.268 577.424 228.268 cv
578.869 229.432 li
578.869 229.432 582.26 222.291 577.943 213.506 cv
573.627 204.721 567.424 203.111 567.424 203.111 cv
cp
f
575.002 221.357 mo
570.432 215.217 554.955 212.619 549.607 212.604 cv
547.17 212.596 545.881 212.475 544.803 212.361 cv
543.682 212.26 543.115 212.197 540.604 212.463 cv
535.385 213.014 531.322 211.49 529.025 210.291 cv
523.064 209.662 519.08 207.189 516.807 205.229 cv
512.088 204.377 508.615 202.299 506.416 200.088 cv
502.51 198.693 497.877 196.002 495.561 194.588 cv
492.072 193.514 487.721 191.189 485.736 190.072 cv
481.611 188.893 478.189 186.025 476.236 184.104 cv
472.189 182.877 469.713 180.998 468.221 179.221 cv
463.334 177.135 459.127 172.658 456.775 169.775 cv
453.51 168.549 450.994 166.396 449.369 164.666 cv
445.146 163.729 441.986 161.463 440.252 159.928 cv
436.572 158.463 432.818 155.604 430.479 153.643 cv
426.186 152.939 422.65 150.385 420.49 148.42 cv
416.01 147.572 412.135 144.58 409.799 142.396 cv
406.361 141.67 403.932 140.123 402.518 138.986 cv
398.611 137.205 394.635 133.885 392.439 131.885 cv
388.744 130.936 385.822 129.025 384.088 127.654 cv
379.854 126.623 377.244 124.736 375.611 122.924 cv
372.338 121.791 369.963 119.541 368.439 117.623 cv
366.721 117.119 365.178 116.346 363.908 115.537 cv
362.904 115.15 358.732 113.471 355.635 111.205 cv
355.076 110.803 354.447 110.311 353.744 109.76 cv
351.256 107.779 347.854 105.072 342.869 103.432 cv
339.861 102.436 337.018 101.182 334.604 99.9785 cv
331.666 99.3613 li
326.416 98.2441 320.76 95.1191 316.666 92.4746 cv
313.635 91.4395 li
308.111 89.5488 303.979 87.1543 301.104 85.0957 cv
296.525 85.2559 291.799 81.1309 289.826 78.0176 cv
288.9 76.5645 288.326 75.834 288.15 75.6348 cv
286.486 73.7129 li
286.424 71.0801 li
286.455 50.627 300.189 36.377 300.775 35.7793 cv
309.354 27.0176 li
309.775 28.8301 li
311.854 27.2129 313.471 26.1465 313.846 25.8926 cv
323.072 19.8535 li
323.135 20.4277 li
323.65 20.1348 335.436 13.7129 335.436 13.7129 cv
335.299 15.4941 li
338.576 14.1113 342.588 13.3965 345.018 13.0645 cv
348.283 11.1465 351.385 10.0254 354.252 9.72852 cv
355.377 9.61133 356.385 9.62305 357.256 9.7168 cv
359.881 8.7207 362.354 8.09961 364.635 7.85352 cv
366.869 7.61914 368.717 7.77148 370.217 8.09961 cv
371.947 7.40039 373.666 6.95117 375.385 6.77539 cv
378.018 6.49414 380.225 6.88086 381.947 7.45508 cv
384.057 6.68945 385.963 6.2207 387.725 6.03711 cv
390.439 5.74414 392.713 6.17773 394.521 7.04492 cv
395.861 6.70508 397.15 6.4707 398.369 6.3418 cv
401.971 5.9668 404.604 6.55273 406.486 7.39258 cv
420.268 6.57617 429.377 9.46289 434.947 11.2285 cv
436.15 11.6113 437.658 12.084 438.158 12.1504 cv
440.955 12.2285 444.643 13.2324 449.314 14.498 cv
452.877 15.4629 456.912 16.5605 460.33 17.1113 cv
466.885 18.1543 470.439 20.9941 472.357 23.5215 cv
474.994 24.4473 477.783 25.7949 479.482 26.6621 cv
483.326 27.7637 486.229 29.7559 487.971 31.1973 cv
491.807 32.1348 494.26 33.623 495.807 35.1934 cv
498.252 35.8496 499.971 36.7051 501.186 37.5137 cv
504.889 38.9316 507.252 41.6621 508.611 43.8418 cv
512.111 45.5059 514.33 47.6973 515.65 49.4199 cv
518.885 51.002 520.939 52.7363 522.229 54.377 cv
526.697 56.1738 529.135 58.6426 530.463 60.9395 cv
535.682 62.8457 538.24 65.7793 539.494 68.2871 cv
542.322 70.2441 543.963 72.6582 544.826 74.9004 cv
548.041 77.2051 549.771 80.2285 550.666 82.4551 cv
553.428 84.7988 555.252 87.5488 556.221 89.2871 cv
559.967 92.5449 561.291 95.9785 561.65 98.6738 cv
563.744 100.936 565.033 102.975 565.791 104.416 cv
569.854 108.037 571.729 112.002 572.541 114.221 cv
575.049 117.74 576.088 121.303 576.518 123.76 cv
578.971 126.713 579.818 129.74 579.869 132.271 cv
583.439 137.947 584.361 143.018 584.564 145.838 cv
586.924 150.83 587.025 155.744 586.854 158.311 cv
586.869 158.334 li
587.834 162.904 587.412 165.26 586.869 167.236 cv
586.932 167.455 587.033 167.713 587.15 168.033 cv
589.15 173.416 589.072 178.818 588.869 181.42 cv
589.896 185.893 589.432 189.377 588.697 191.768 cv
590.127 197.877 588.557 203.189 586.729 206.486 cv
586.549 208.631 586.217 210.408 585.701 211.854 cv
585.604 216.072 583.736 219.787 583.299 220.604 cv
581.041 228.635 li
575.002 221.357 li
cp
f
293.244 71.2676 mo
293.244 71.2676 294.096 72.1973 295.596 74.5449 cv
297.104 76.9004 300.045 78.5996 301.041 78.4941 cv
302.037 78.3926 301.33 76.4551 301.33 76.4551 cv
301.33 76.4551 305.908 81.7598 316.076 85.209 cv
315.373 83.2676 li
315.373 83.2676 325.51 91.2559 333.479 92.9316 cv
331.451 90.377 li
331.451 90.377 337.947 94.7246 345.494 97.1973 cv
353.041 99.6699 357.514 103.979 360.236 105.951 cv
362.963 107.924 367.15 109.494 367.15 109.494 cv
365.744 108.131 li
365.744 108.131 369.4 111.783 373.15 111.635 cv
373.15 111.635 375.721 116.893 380.525 117.135 cv
380.525 117.135 381.393 120.564 388.033 121.627 cv
388.033 121.627 391.627 125.275 396.588 125.877 cv
396.588 125.877 402.682 131.838 407.189 133.439 cv
407.189 133.439 409.533 136.021 414.088 136.291 cv
414.088 136.291 419.854 142.666 424.697 142.15 cv
424.697 142.15 429.424 147.689 434.482 147.342 cv
434.482 147.342 440.951 153.26 445.213 154.326 cv
445.213 154.326 448.85 158.463 454.338 158.639 cv
454.338 158.639 457.475 163.4 462.275 164.217 cv
462.275 164.217 468.666 172.971 474.229 173.896 cv
474.229 173.896 474.936 177.025 481.494 178.408 cv
481.494 178.408 485.58 183.252 490.01 184.111 cv
490.01 184.111 496.635 187.936 500.107 188.705 cv
500.107 188.705 508.381 193.865 512.229 194.592 cv
512.229 194.592 514.545 198.682 521.955 199.229 cv
521.955 199.229 525.26 203.779 533.213 204.072 cv
533.213 204.072 536.697 206.721 542.104 206.15 cv
547.51 205.584 546.635 206.24 551.924 206.252 cv
557.197 206.264 573.111 208.736 579.908 217.822 cv
579.908 217.822 581.955 214.021 581.439 210.877 cv
581.439 210.877 582.479 210.014 582.674 204.713 cv
582.674 204.713 587.014 199.35 584.135 191.736 cv
584.135 191.736 586.432 188.479 584.646 182.26 cv
584.646 182.26 585.533 176.322 583.432 170.697 cv
581.33 165.072 584.365 167.018 582.869 160.01 cv
581.385 153.002 582.607 159.283 582.607 159.283 cv
582.607 159.283 583.682 153.322 580.455 147.814 cv
580.455 147.814 580.932 141.549 575.439 134.205 cv
575.439 134.205 576.979 130.842 572.604 126.963 cv
572.604 126.963 572.658 122.053 568.979 117.541 cv
568.979 117.541 567.908 112.752 562.775 108.764 cv
562.775 108.764 561.678 105.486 557.307 101.615 cv
557.307 101.615 558.588 97.7051 553.275 93.7402 cv
553.275 93.7402 551.291 89.2402 547.244 86.6426 cv
547.244 86.6426 546.326 81.4629 541.205 79.3613 cv
541.205 79.3613 541.541 75.3652 536.189 72.916 cv
536.189 72.916 536.275 68.3809 527.408 66.4863 cv
527.408 66.4863 527.904 62.2871 519.744 59.9434 cv
519.744 59.9434 519.467 57.3301 513.166 54.7871 cv
513.166 54.7871 511.447 51.0137 505.783 49.1582 cv
505.783 49.1582 504.174 44.6152 499.916 43.5488 cv
499.916 43.5488 498.619 41.9902 493.635 41.1934 cv
493.635 41.1934 493.545 38.5684 486.635 37.4082 cv
486.635 37.4082 483.654 34.1387 478.814 32.9551 cv
478.814 32.9551 472.432 29.6621 469.564 29.2129 cv
469.564 29.2129 468.736 24.9629 460.873 23.7129 cv
453.018 22.4668 443.408 18.9551 439.244 18.8301 cv
435.088 18.6973 425.201 12.5762 405.955 14.2285 cv
405.955 14.2285 403.549 11.0879 393.924 14.5449 cv
393.924 14.5449 393.08 10.1152 382.639 14.791 cv
382.639 14.791 378.494 11.2676 371.389 15.4121 cv
371.389 15.4121 368.072 12.5527 358.521 16.7676 cv
358.521 16.7676 355.307 14.8379 347.885 19.584 cv
347.885 19.584 340.24 20.3848 337.057 22.4199 cv
333.885 24.4473 328.799 26.3066 328.354 27.4824 cv
327.912 28.6582 328.158 25.6191 328.158 25.6191 cv
328.158 25.6191 319.947 30.0605 318.025 33.2832 cv
317.854 31.6074 li
317.854 31.6074 309.912 36.7754 306.135 42.0723 cv
305.791 40.6074 li
305.791 40.6074 293.291 53.2871 293.244 71.2676 cv
cp
1 1 1 rgb
f
292.732 68.8145 mo
292.732 68.8145 340.877 60.4785 403.846 85.5254 cv
466.807 110.568 537.275 142.373 576.299 212.17 cv
576.299 212.17 556.967 159.904 492.072 123.752 cv
427.189 87.5957 357.564 51.9277 292.732 68.8145 cv
cp
.27451 .207843 .145098 rgb
f
414.979 80.2051 mo
414.979 80.2051 443.787 53.041 506.385 56.6348 cv
506.385 56.6348 451.361 53.377 415.916 81.9941 cv
415.916 81.9941 413.268 81.8926 414.979 80.2051 cv
cp
f
424.885 84.8145 mo
424.885 84.8145 453.701 57.6504 516.299 61.2441 cv
516.299 61.2441 461.275 57.9863 425.83 86.6035 cv
425.83 86.6035 423.182 86.5098 424.885 84.8145 cv
cp
f
436.557 88.5723 mo
436.557 88.5723 463.854 62.5566 523.213 66.0723 cv
523.213 66.0723 471.041 62.8848 437.455 90.2832 cv
437.455 90.2832 434.932 90.1895 436.557 88.5723 cv
cp
f
445.424 94.0879 mo
445.424 94.0879 472.4 68.6035 531.002 71.9902 cv
531.002 71.9902 479.486 68.9199 446.299 95.7598 cv
446.299 95.7598 443.83 95.666 445.424 94.0879 cv
cp
f
454.275 99.6035 mo
454.275 99.6035 480.049 74.7441 536.178 78.1777 cv
536.178 78.1777 486.842 75.0645 455.119 101.244 cv
455.119 101.244 452.744 101.146 454.275 99.6035 cv
cp
f
463.424 104.377 mo
463.424 104.377 487.924 80.6387 541.307 83.9434 cv
541.307 83.9434 494.385 80.9473 464.225 105.939 cv
464.225 105.939 461.971 105.846 463.424 104.377 cv
cp
f
473.01 109.689 mo
473.01 109.689 495.932 90.2051 546.111 90.4316 cv
546.111 90.4316 503.205 90.3848 474.979 111.084 cv
474.979 111.084 471.65 110.896 473.01 109.689 cv
cp
f
405.689 74.3926 mo
405.689 74.3926 434.506 47.2285 497.104 50.8262 cv
497.104 50.8262 442.08 47.5645 406.635 76.1855 cv
406.635 76.1855 403.986 76.0801 405.689 74.3926 cv
cp
f
396.697 71.6387 mo
396.697 71.6387 424.338 43.2832 487.033 44.2402 cv
487.033 44.2402 431.928 43.3027 397.709 73.3848 cv
397.709 73.3848 395.061 73.4004 396.697 71.6387 cv
cp
f
387.564 67.3262 mo
387.564 67.3262 415.217 38.9668 477.908 39.9238 cv
477.908 39.9238 422.799 38.9785 388.588 69.0723 cv
388.588 69.0723 385.939 69.084 387.564 67.3262 cv
cp
f
378.443 63.1816 mo
378.443 63.1816 405.502 32.3809 467.908 34.4473 cv
467.908 34.4473 413.057 32.5215 379.486 65.123 cv
379.486 65.123 376.85 65.0996 378.443 63.1816 cv
cp
f
368.033 61.0684 mo
368.033 61.0684 394.369 27.8145 456.252 31.0332 cv
456.252 31.0332 401.846 28.0801 369.088 63.2012 cv
369.088 63.2012 366.471 63.1348 368.033 61.0684 cv
cp
f
359.365 59.8223 mo
359.365 59.8223 384.213 25.4395 446.178 25.9316 cv
446.178 25.9316 391.689 25.373 360.518 61.9004 cv
360.518 61.9004 357.9 61.959 359.365 59.8223 cv
cp
f
351.072 58.7207 mo
351.072 58.7207 374.166 19.959 434.76 22.7129 cv
434.76 22.7129 381.467 20.1582 352.268 61.1621 cv
352.268 61.1621 349.713 61.127 351.072 58.7207 cv
cp
f
340.986 58.1426 mo
340.986 58.1426 361.568 20.9629 421.299 17.7051 cv
421.299 17.7051 368.76 20.4395 342.299 60.2363 cv
342.299 60.2363 339.771 60.4551 340.986 58.1426 cv
cp
f
381.885 81.0488 mo
381.885 81.0488 379.447 100.912 393.58 120.541 cv
393.58 120.541 382.135 101.381 384.354 83.0527 cv
384.354 83.0527 384.49 80.7754 381.885 81.0488 cv
cp
f
389.729 83.9902 mo
389.729 83.9902 387.299 103.854 401.432 123.482 cv
401.432 123.482 389.986 104.33 392.205 85.9941 cv
392.205 85.9941 392.342 83.7207 389.729 83.9902 cv
cp
f
397.619 87.3145 mo
397.619 87.3145 396.252 110.076 410.377 129.705 cv
410.377 129.705 397.877 107.643 400.096 89.3105 cv
400.096 89.3105 400.236 87.0371 397.619 87.3145 cv
cp
f
374.783 78.7754 mo
374.783 78.7754 372.65 97.7012 385.611 116.475 cv
385.611 116.475 375.104 98.166 377.041 80.6973 cv
377.041 80.6973 377.154 78.5293 374.783 78.7754 cv
cp
f
330.424 57.7754 mo
330.424 57.7754 352.799 18.877 403.314 15.8809 cv
403.314 15.8809 357.361 19.4434 331.744 59.9316 cv
331.744 59.9316 329.26 60.1191 330.424 57.7754 cv
cp
f
318.002 57.9512 mo
318.002 57.9512 339.4 21.416 378.979 17.627 cv
378.979 17.627 344.932 19.6191 319.322 60.1074 cv
319.322 60.1074 316.838 60.2949 318.002 57.9512 cv
cp
f
304.541 58.9863 mo
304.541 58.9863 325.939 22.4551 365.51 18.6699 cv
365.51 18.6699 331.471 20.6582 305.857 61.1504 cv
305.857 61.1504 303.373 61.3379 304.541 58.9863 cv
cp
f
482.533 114.424 mo
482.533 114.424 503.932 95.9395 550.861 96.252 cv
550.861 96.252 510.744 96.1191 484.377 115.752 cv
484.377 115.752 481.264 115.564 482.533 114.424 cv
cp
f
489.893 119.963 mo
489.893 119.963 510.51 104.357 555.045 103.822 cv
555.045 103.822 516.971 104.393 491.619 121.025 cv
491.619 121.025 488.67 120.928 489.893 119.963 cv
cp
f
498.65 124.42 mo
498.65 124.42 519.822 109.139 562.057 109.115 cv
562.057 109.115 525.064 109.9 500.322 125.393 cv
500.322 125.393 497.455 125.322 498.65 124.42 cv
cp
f
366.377 77.0254 mo
366.377 77.0254 363.635 94.0176 377.439 110.549 cv
377.439 110.549 366.314 94.373 368.811 78.6934 cv
368.811 78.6934 368.979 76.748 366.377 77.0254 cv
cp
f
405.064 89.9199 mo
405.064 89.9199 404.158 117.166 419.549 134.4 cv
419.549 134.4 405.314 110.26 407.533 91.9238 cv
407.533 91.9238 407.67 89.6426 405.064 89.9199 cv
cp
f
412.619 93.6504 mo
412.619 93.6504 411.713 120.893 427.1 138.131 cv
427.1 138.131 412.873 113.986 415.088 95.6504 cv
415.088 95.6504 415.229 93.377 412.619 93.6504 cv
cp
f
420.057 96.2598 mo
420.057 96.2598 419.154 123.506 434.541 140.736 cv
434.541 140.736 420.307 116.596 422.529 98.2637 cv
422.529 98.2637 422.666 95.9902 420.057 96.2598 cv
cp
f
358.174 75.5723 mo
358.174 75.5723 355.92 91.4434 368.018 107.018 cv
368.018 107.018 358.244 91.8066 360.307 77.1504 cv
360.307 77.1504 360.439 75.3301 358.174 75.5723 cv
cp
f
350.205 74.2051 mo
350.205 74.2051 347.393 88.4668 360.322 102.154 cv
360.322 102.154 349.932 88.7363 352.498 75.5723 cv
352.498 75.5723 352.686 73.9395 350.205 74.2051 cv
cp
f
428.104 101.072 mo
428.104 101.072 429.377 131.1 444.768 148.338 cv
444.768 148.338 428.361 121.408 430.572 103.072 cv
430.572 103.072 430.713 100.795 428.104 101.072 cv
cp
f
435.541 103.678 mo
435.541 103.678 435.818 134.947 453.635 153.811 cv
453.635 153.811 435.799 124.018 438.018 105.682 cv
438.018 105.682 438.158 103.408 435.541 103.678 cv
cp
f
443.471 107.369 mo
443.471 107.369 443.221 137.189 464.904 160.549 cv
464.904 160.549 445.869 137.287 445.85 108.811 cv
445.85 108.811 446.838 107.018 443.471 107.369 cv
cp
f
452.252 111.002 mo
452.252 111.002 450.291 143.447 475.229 169.619 cv
475.229 169.619 453.49 143.65 455.057 112.654 cv
455.057 112.654 456.346 110.732 452.252 111.002 cv
cp
f
459.889 115.822 mo
459.889 115.822 459.088 149.549 486.479 175.619 cv
486.479 175.619 462.479 149.615 462.908 117.416 cv
462.908 117.416 464.205 115.373 459.889 115.822 cv
cp
f
471.064 120.025 mo
471.064 120.025 469.26 153.705 495.865 180.576 cv
495.865 180.576 472.658 153.881 474.041 121.701 cv
474.041 121.701 475.4 119.697 471.064 120.025 cv
cp
f
342.604 72.9785 mo
342.604 72.9785 340.104 85.6543 351.588 97.8145 cv
351.588 97.8145 342.373 85.8926 344.646 74.1973 cv
344.646 74.1973 344.814 72.752 342.604 72.9785 cv
cp
f
334.869 72.0488 mo
334.869 72.0488 331.869 83.4473 344.189 94.0879 cv
344.189 94.0879 334.334 83.6113 337.076 73.0918 cv
337.076 73.0918 337.291 71.791 334.869 72.0488 cv
cp
f
327.42 70.5645 mo
327.42 70.5645 325.01 80.9863 335.4 90.8457 cv
335.4 90.8457 327.072 81.1582 329.275 71.5449 cv
329.275 71.5449 329.447 70.3496 327.42 70.5645 cv
cp
f
320.002 71.7207 mo
320.002 71.7207 317.502 81.248 327.783 90.1348 cv
327.783 90.1348 319.557 81.3887 321.846 72.5996 cv
321.846 72.5996 322.029 71.5098 320.002 71.7207 cv
cp
f
480.814 125.58 mo
480.814 125.58 478.025 156.623 510.111 192.365 cv
510.111 192.365 484.221 163.502 483.889 129.51 cv
483.889 129.51 485.033 125.076 480.814 125.58 cv
cp
f
312.275 70.2793 mo
312.275 70.2793 309.775 77.9785 319.322 84.9941 cv
319.322 84.9941 311.713 78.0605 313.99 70.9473 cv
313.99 70.9473 314.182 70.0723 312.275 70.2793 cv
cp
f
489.682 130.033 mo
489.682 130.033 488.104 162.314 521.51 196.818 cv
521.51 196.818 494.346 165.529 492.736 131.58 cv
492.736 131.58 493.877 129.365 489.682 130.033 cv
cp
f
500.049 137.072 mo
500.049 137.072 500.689 168.979 534.607 202.982 cv
534.607 202.982 505.244 172.49 503.135 138.576 cv
503.135 138.576 504.244 136.338 500.049 137.072 cv
cp
f
506.322 129.271 mo
506.322 129.271 524.557 114.674 564.604 115.361 cv
564.604 115.361 532.736 114.744 508.002 130.236 cv
508.002 130.236 505.127 130.166 506.322 129.271 cv
cp
f
510.721 145.424 mo
510.721 145.424 515.729 183.557 543.307 203.518 cv
543.307 203.518 518.08 183.197 513.795 146.658 cv
513.795 146.658 514.65 144.385 510.721 145.424 cv
cp
f
514.291 133.611 mo
514.291 133.611 529.189 121.361 566.002 122.018 cv
566.002 122.018 537.861 122.041 515.76 134.334 cv
515.76 134.334 513.221 134.322 514.291 133.611 cv
cp
f
520.424 138.834 mo
520.424 138.834 537.799 127.439 570.221 129.346 cv
570.221 129.346 543.307 128.994 521.791 139.49 cv
521.791 139.49 519.369 139.447 520.424 138.834 cv
cp
f
526.15 144.385 mo
526.15 144.385 543.111 134.119 573.471 138.08 cv
573.471 138.08 548.201 136.021 527.408 145.127 cv
527.408 145.127 525.139 144.928 526.15 144.385 cv
cp
f
533.482 149.189 mo
533.482 149.189 549.072 141.604 576.721 144.369 cv
576.721 144.369 553.705 142.979 534.619 149.721 cv
534.619 149.721 532.549 149.588 533.482 149.189 cv
cp
f
539.975 154.01 mo
539.975 154.01 553.572 147.408 576.729 151.885 cv
576.729 151.885 557.393 149.064 540.908 154.611 cv
540.908 154.611 539.166 154.35 539.975 154.01 cv
cp
f
546.588 159.307 mo
546.588 159.307 559.439 153.389 580.424 158.994 cv
580.424 158.994 562.854 155.229 547.408 159.951 cv
547.408 159.951 545.83 159.611 546.588 159.307 cv
cp
f
551.643 164.568 mo
551.643 164.568 562.455 159.213 578.791 165.666 cv
578.791 165.666 565.033 161.182 552.252 165.248 cv
552.252 165.248 551.018 164.838 551.643 164.568 cv
cp
f
554.572 168.564 mo
554.572 168.564 565.096 164.463 578.814 172.619 cv
578.814 172.619 567.111 166.701 555.002 169.299 cv
555.002 169.299 553.963 168.76 554.572 168.564 cv
cp
f
521.268 152.611 mo
521.268 152.611 525.15 186.178 551.58 203.08 cv
551.58 203.08 527.459 185.799 524.248 153.619 cv
524.248 153.619 525.143 151.584 521.268 152.611 cv
cp
f
531.408 162.471 mo
531.408 162.471 537.631 188.713 559.65 204.494 cv
559.65 204.494 541.752 192.049 534.627 163.174 cv
534.627 163.174 535.729 161.322 531.408 162.471 cv
cp
f
544.756 174.643 mo
544.756 174.643 550.525 193.01 571.311 207.791 cv
571.311 207.791 556.744 198.389 547.971 175.338 cv
547.971 175.338 544.518 171.775 544.756 174.643 cv
cp
f
558.252 174.314 mo
558.252 174.314 569.197 171.494 581.838 181.232 cv
581.838 181.232 570.932 173.955 558.604 175.092 cv
558.604 175.092 557.627 174.436 558.252 174.314 cv
cp
f
561.283 179.064 mo
561.283 179.064 572.018 177.986 581.682 189.295 cv
581.682 189.295 573.111 180.623 561.443 179.873 cv
561.443 179.873 560.682 179.088 561.283 179.064 cv
cp
f
565.674 183.479 mo
565.674 183.479 575.951 186.764 580.307 200.986 cv
580.307 200.986 575.893 189.619 565.494 184.279 cv
565.494 184.279 565.111 183.252 565.674 183.479 cv
cp
f
270.189 69.1035 mo
271.143 65.8496 270.771 67.627 272.814 60.4785 cv
278.064 42.1035 280.814 42.0645 285.326 37.502 cv
289.838 32.9395 300.186 26.5566 296.33 32.4785 cv
292.486 38.4082 306.939 33.4785 306.939 33.4785 cv
306.939 33.4785 323.58 19.8652 314.248 24.3887 cv
308.385 27.2246 332.221 9.68164 305.994 21.2012 cv
299.518 24.0371 310.943 9.70508 305.131 15.0605 cv
299.318 20.4238 300.572 22.9863 295.299 25.127 cv
286.877 28.5488 296.014 13.5801 292.486 18.4238 cv
288.947 23.2754 285.846 21.1973 283.635 28.7715 cv
281.424 36.3652 290.354 16.6309 285.846 21.1973 cv
281.33 25.752 287.342 5.16992 283.541 18.166 cv
282.393 22.1387 281.846 24.3145 281.588 25.5957 cv
280.967 28.5332 281.744 26.8613 279.748 31.1738 cv
276.877 37.3848 280.299 18.4004 277.768 27.0645 cv
276.611 31.0332 277.572 27.7285 278.717 23.8145 cv
280.064 19.1816 283.24 8.28711 281.877 12.9863 cv
279.35 21.6465 276.115 17.2285 273.51 23.4746 cv
270.002 31.8613 273.088 10.4199 271.182 16.916 cv
269.283 23.4238 263.768 24.1543 263.768 24.1543 cv
263.768 24.1543 260.494 40.8379 261.209 49.2793 cv
261.932 57.7129 270.697 36.7637 270.697 36.7637 cv
270.697 36.7637 278.717 27.1777 274.92 36.8105 cv
268.689 52.6035 270.189 69.1035 270.189 69.1035 cv
cp
f
251.643 47.3809 mo
251.643 47.3809 253.545 40.0215 254.439 36.1035 cv
255.326 32.1895 255.666 31.1816 256.455 25.4902 cv
257.014 21.4629 258.572 19.209 258.572 19.209 cv
257.928 22.0098 257.248 14.4863 256.744 16.7246 cv
256.24 18.9629 255.877 12.9941 255.369 15.2285 cv
254.861 17.4746 256.479 6.05664 253.588 11.291 cv
250.682 16.5254 252.955 15.8574 250.947 17.1699 cv
248.939 18.4824 251.225 8.33398 248.857 13.6973 cv
246.51 19.0449 245.787 14.8223 244.768 19.3027 cv
243.748 23.7793 246.213 12.2363 241.791 14.1738 cv
237.361 16.1152 238.572 16.0645 237.939 18.8691 cv
237.299 21.6699 239.002 22.1152 237.697 25.3496 cv
236.393 28.584 232.826 26.0566 232.826 26.0566 cv
232.826 26.0566 232.322 16.4629 229.955 21.8223 cv
227.604 27.1777 228.158 12.8926 227.646 15.1348 cv
227.143 17.3809 222.666 15.9629 221.459 17.9082 cv
217.893 23.5684 217.123 20.6738 215.979 25.7129 cv
214.826 30.7598 216.963 18.8691 214.604 24.2246 cv
212.248 29.5723 205.252 15.6699 204.361 19.584 cv
203.479 23.498 202.791 18.5879 201.002 26.4277 cv
199.221 34.2676 199.221 24.2598 198.209 28.7363 cv
197.182 33.2129 190.471 19.4707 189.322 24.5176 cv
188.178 29.5566 178.943 24.2441 185.018 31.6309 cv
186.303 33.1895 174.42 38.3613 170.439 39.4785 cv
161.064 42.1035 174.189 37.6035 184.314 43.6035 cv
190.521 47.2754 199.689 55.2285 204.564 57.4785 cv
210.936 60.4121 202.807 57.2363 198.346 49.8887 cv
195.447 45.1074 193.174 45.8535 191.646 42.5645 cv
190.119 39.2676 197.479 44.4746 195.947 41.1816 cv
194.412 37.8887 199.006 37.748 198.303 35.8262 cv
196.416 30.6465 205.9 31.3613 208.029 34.8652 cv
208.439 35.5449 210.689 33.9316 210.689 33.9316 cv
214.416 40.0801 li
214.416 40.0801 226.541 61.002 224.439 55.2285 cv
222.346 49.4434 216.525 35.8496 215.271 33.791 cv
214.033 31.748 214.033 31.748 214.033 31.748 cv
214.033 31.748 219.9 36.0254 219.322 33.5332 cv
218.752 31.0488 223.01 37.3262 222.572 34.2754 cv
222.127 31.2363 227.248 41.2363 226.518 36.9473 cv
225.783 32.6504 233.904 44.5098 232.217 39.416 cv
230.529 34.3262 239.857 55.877 238.174 50.7832 cv
236.482 45.6934 237.158 45.252 235.877 40.8379 cv
234.607 36.4316 234.607 36.4316 234.607 36.4316 cv
234.607 36.4316 234.514 39.3535 236.064 34.9941 cv
237.631 30.6348 239.541 32.252 239.541 32.252 cv
241.314 40.6035 li
241.314 40.6035 244.385 51.0137 243.275 48.4121 cv
242.158 45.8066 248.975 60.9043 247.541 54.6816 cv
246.111 48.4707 247.311 48.1543 246.174 43.1855 cv
245.018 38.2129 244.549 44.3223 245.814 38.7285 cv
247.096 33.127 245.283 37.0801 246.299 32.6113 cv
247.322 28.127 248.057 32.416 248.939 28.4902 cv
249.83 24.5762 251.33 25.5098 251.33 25.5098 cv
252.186 29.2285 li
250.119 35.8301 li
250.119 35.8301 251.588 44.416 251.002 41.9199 cv
250.432 39.4355 251.643 47.3809 251.643 47.3809 cv
cp
f
185.482 48.877 mo
185.482 48.877 180.471 45.6426 176.619 44.2402 cv
172.76 42.8457 177.377 45.459 172.416 44.334 cv
167.455 43.2051 178.533 47.2871 173.064 46.0449 cv
167.619 44.8066 174.396 44.7832 167.619 44.8066 cv
160.822 44.8262 162.533 44.1738 160.822 44.8262 cv
159.111 45.4824 173.002 48.6348 167.549 47.4043 cv
162.088 46.1621 176.529 49.752 168.807 48.7285 cv
147.018 45.8613 164.424 48.7871 161.025 48.5293 cv
133.314 46.4004 175.076 53.291 171.104 52.3926 cv
167.135 51.4941 176.201 53.0488 181.756 53.7754 cv
192.408 55.1426 182.666 49.7949 178.193 48.7871 cv
173.729 47.7676 191.365 52.8184 191.365 52.8184 cv
185.482 48.877 li
cp
f
374.33 530.455 mo
348.502 534.85 310.064 536.9 273.666 521.736 cv
192.67 487.99 178.916 432.814 172.307 406.295 cv
171.955 404.904 li
165.275 378.178 169.064 368.139 173.572 336.064 cv
180.322 288.064 211.58 267.162 217.58 265.662 cv
223.58 264.162 224.639 266.83 224.639 266.83 cv
226.678 266.971 236.686 265.717 238.26 265.545 cv
248.643 264.404 252.928 270.768 254.986 273.826 cv
255.205 274.154 255.479 274.553 255.705 274.873 cv
259.885 274.635 262.158 275.314 264.131 276.041 cv
264.4 276.061 264.619 276.041 264.822 276.014 cv
264.979 275.982 265.658 275.787 265.658 275.787 cv
266.471 275.623 li
274.463 274.264 279.529 281.67 283.604 287.619 cv
285.197 289.951 286.838 292.357 288.322 293.865 cv
290.264 295.822 291.135 296.24 292.346 296.818 cv
294.764 297.975 297.037 299.24 300.322 303.076 cv
302.041 305.076 303.307 306.861 304.377 308.389 cv
304.885 309.111 305.479 309.959 305.885 310.447 cv
312.619 310.568 314.686 316.904 315.479 319.318 cv
315.623 319.771 315.814 320.357 315.998 320.818 cv
318.58 324.662 li
325.955 323.889 333.041 322.049 340.08 331.662 cv
343.467 336.287 342.904 333.365 350.689 332.529 cv
358.092 331.748 361.518 332.756 365.369 336.861 cv
366.4 337.951 367.463 339.088 370.564 340.6 cv
374.307 342.412 376.443 342.084 380.705 341.42 cv
384.846 340.775 389.994 339.975 397.408 341.232 cv
400.588 341.771 402.408 341.689 403.377 341.525 cv
404.674 341.303 404.916 341.268 406.041 336.771 cv
406.236 335.99 li
408.635 326.572 419.033 323.842 425.92 322.037 cv
428.283 321.404 li
428.268 321.275 428.854 320.139 429.166 319.521 cv
430.096 317.713 431.635 314.678 435.432 314.033 cv
438.283 313.553 442.186 314.342 444.557 320.865 cv
445.15 321.146 449.072 321.982 451.939 322.592 cv
457.861 323.865 465.229 325.436 472.33 329.83 cv
485.119 337.752 494.822 343.975 503.439 351.955 cv
503.83 352.326 504.205 352.654 504.549 352.951 cv
516.51 365.178 li
514.924 360.6 li
516.857 375.787 513.15 444.053 480.412 479.225 cv
457.424 503.924 417.768 523.072 374.33 530.455 cv
cp
f
218.123 269.08 mo
218.123 269.08 190.447 280.939 180.299 329.74 cv
173.674 361.611 169.908 378.904 176.244 404.264 cv
182.592 429.627 199.822 490.189 276.275 515.455 cv
344.826 538.107 436.447 516.475 475.439 474.592 cv
505.26 442.541 510.205 377.381 508.174 361.459 cv
508.174 361.459 506.854 364.396 498.814 356.947 cv
490.771 349.498 481.627 343.6 468.752 335.619 cv
455.869 327.639 440.713 330.217 438.166 323.193 cv
435.611 316.166 435.975 326.279 430.158 327.943 cv
424.338 329.607 414.455 331.287 412.83 337.67 cv
411.201 344.045 410.236 350.314 396.268 347.943 cv
382.307 345.568 377.932 351.732 367.588 346.717 cv
357.244 341.689 362.064 338.162 351.412 339.299 cv
340.76 340.428 339.33 339.998 334.025 332.76 cv
328.729 325.521 324.893 326.854 316.213 327.65 cv
307.537 328.447 310.354 317.127 305.635 317.248 cv
300.908 317.373 300.236 313.424 295.162 307.506 cv
290.088 301.588 289.221 304.447 283.486 298.646 cv
277.752 292.834 272.994 280.764 267.174 282.436 cv
261.354 284.104 262.877 281.127 255.525 281.701 cv
248.166 282.275 250.326 271.061 239.01 272.311 cv
227.697 273.553 219.244 275.67 218.123 269.08 cv
cp
1 1 1 rgb
f
370.416 531.041 mo
358.588 533.045 345.131 533.057 332.197 533.689 cv
299.451 530.057 li
340.303 528.697 468.588 516.885 484.822 366.814 cv
485.572 363.064 li
486.143 360.115 486.74 355.904 493.986 354.674 cv
494.451 354.592 494.932 354.533 495.439 354.486 cv
495.447 354.486 495.455 354.486 495.455 354.486 cv
497.041 354.217 498.182 352.537 498.197 352.518 cv
498.197 352.518 500.826 348.232 503.869 348.229 cv
506.916 348.217 509.447 351.568 509.447 351.568 cv
509.971 352.225 522.314 367.811 523.041 384.201 cv
523.775 400.811 517.658 423.088 507.072 442.326 cv
474.201 502.029 414.619 523.521 370.416 531.041 cv
cp
.27451 .207843 .145098 rgb
f
489.955 365.459 mo
489.955 365.459 490.678 361.725 496.025 361.264 cv
501.365 360.811 504.135 355.818 504.135 355.818 cv
504.135 355.818 515.611 370.143 516.244 384.498 cv
516.881 398.85 511.814 419.596 501.111 439.045 cv
490.408 458.49 460.537 522.041 341.299 527.842 cv
341.299 527.842 473.299 525.693 489.955 365.459 cv
cp
f
178.072 370.564 mo
178.072 370.564 174.322 471.064 272.947 508.564 cv
346.502 536.529 397.822 497.689 397.822 497.689 cv
397.822 497.689 339.518 524.502 288.322 507.439 cv
228.697 487.564 183.322 444.064 178.072 370.564 cv
cp
f
gsave
178.447 347.314 mo
178.447 347.314 170.947 423.439 219.322 468.064 cv
267.697 512.689 297.322 517.564 331.072 516.814 cv
364.822 516.064 439.822 490.189 469.447 435.064 cv
476.197 404.689 li
476.197 404.689 438.682 454.119 368.041 466.541 cv
280.447 481.939 197.947 418.939 178.447 347.314 cv
cp
clp
201.018 362.01 mo
201.018 362.01 175.564 370.396 171.955 404.904 cv
171.955 404.904 178.713 379.998 201.018 362.01 cv
cp
f
204.08 368.08 mo
204.08 368.08 179.213 379.916 174.713 415.092 cv
174.713 415.092 181.338 387.67 204.08 368.08 cv
cp
f
178.104 418.143 mo
178.104 418.143 184.678 391.162 209.189 371.268 cv
209.189 371.268 183.955 398.889 179.779 428.006 cv
179.455 430.213 179.518 423.486 179.518 423.486 cv
178.104 418.143 li
cp
f
183.295 427.799 mo
183.295 427.799 189.408 398.123 213.643 376.6 cv
213.643 376.6 188.826 406.646 185.146 438.709 cv
184.865 441.146 184.807 433.717 184.807 433.717 cv
183.295 427.799 li
cp
f
188.768 441.967 mo
188.768 441.967 192.131 410.154 214.658 385.553 cv
214.658 385.553 192.365 419.201 191.705 453.346 cv
191.639 455.947 190.865 448.1 190.865 448.1 cv
188.768 441.967 li
cp
f
193.752 453.521 mo
193.752 453.521 200.705 416.834 217.15 394.26 cv
217.15 394.26 199.643 429.51 198.248 465.326 cv
198.143 468.053 197.709 459.709 197.709 459.709 cv
193.752 453.521 li
cp
f
197.643 353.76 mo
197.643 353.76 172.189 362.146 168.58 396.654 cv
168.58 396.654 175.338 371.748 197.643 353.76 cv
cp
f
194.643 345.135 mo
194.643 345.135 169.189 353.521 165.58 388.029 cv
165.58 388.029 172.338 363.123 194.643 345.135 cv
cp
f
192.018 335.385 mo
192.018 335.385 166.564 343.771 162.955 378.279 cv
162.955 378.279 169.713 353.373 192.018 335.385 cv
cp
f
200.877 463.271 mo
200.877 463.271 206.947 424.939 221.947 401.314 cv
221.947 401.314 215.729 415.916 210.322 438.814 cv
204.924 461.713 204.834 469.459 204.834 469.459 cv
200.877 463.271 li
cp
f
207.611 472.537 mo
207.611 472.537 212.9 433.729 226.822 409.939 cv
226.822 409.939 221.104 424.678 216.268 447.838 cv
211.42 471.006 211.432 478.857 211.432 478.857 cv
207.611 472.537 li
cp
f
214.736 478.166 mo
214.736 478.166 220.182 439.365 234.322 415.564 cv
234.322 415.564 228.502 430.307 223.557 453.467 cv
218.596 476.631 218.592 484.475 218.592 484.475 cv
214.736 478.166 li
cp
f
221.861 486.037 mo
221.861 486.037 227.15 447.229 241.072 423.439 cv
241.072 423.439 235.354 438.178 230.518 461.338 cv
225.67 484.506 225.682 492.357 225.682 492.357 cv
221.861 486.037 li
cp
f
230.311 494.623 mo
230.311 494.623 234.439 455.666 247.771 431.396 cv
247.771 431.396 242.451 446.326 238.291 469.646 cv
234.119 492.955 234.377 500.803 234.377 500.803 cv
230.311 494.623 li
cp
f
247.205 505.998 mo
247.205 505.998 250.795 466.986 263.791 442.541 cv
263.791 442.541 258.674 457.541 254.838 480.912 cv
250.986 504.279 251.354 512.123 251.354 512.123 cv
247.205 505.998 li
cp
f
238.186 501.373 mo
238.186 501.373 242.314 462.416 255.646 438.146 cv
255.646 438.146 250.326 453.076 246.166 476.396 cv
241.994 499.705 242.252 507.553 242.252 507.553 cv
238.186 501.373 li
cp
f
254.33 511.998 mo
254.33 511.998 257.92 472.986 270.916 448.541 cv
270.916 448.541 265.799 463.541 261.963 486.912 cv
258.111 510.279 258.479 518.123 258.479 518.123 cv
254.33 511.998 li
cp
f
262.58 518.373 mo
262.58 518.373 266.17 479.361 279.166 454.916 cv
279.166 454.916 274.049 469.916 270.213 493.287 cv
266.361 516.654 266.729 524.498 266.729 524.498 cv
262.58 518.373 li
cp
f
271.58 522.498 mo
271.58 522.498 275.17 483.486 288.166 459.041 cv
288.166 459.041 283.049 474.041 279.213 497.412 cv
275.361 520.779 275.729 528.623 275.729 528.623 cv
271.58 522.498 li
cp
f
280.955 526.623 mo
280.955 526.623 284.545 487.611 297.541 463.166 cv
297.541 463.166 292.424 478.166 288.588 501.537 cv
284.736 524.904 285.104 532.748 285.104 532.748 cv
280.955 526.623 li
cp
f
289.955 529.248 mo
289.955 529.248 293.545 490.236 306.541 465.791 cv
306.541 465.791 301.424 480.791 297.588 504.162 cv
293.736 527.529 294.104 535.373 294.104 535.373 cv
289.955 529.248 li
cp
f
300.08 531.123 mo
300.08 531.123 303.67 492.111 316.666 467.666 cv
316.666 467.666 311.549 482.666 307.713 506.037 cv
303.861 529.404 304.229 537.248 304.229 537.248 cv
300.08 531.123 li
cp
f
310.205 532.998 mo
310.205 532.998 313.795 493.986 326.791 469.541 cv
326.791 469.541 321.674 484.541 317.838 507.912 cv
313.986 531.279 314.354 539.123 314.354 539.123 cv
310.205 532.998 li
cp
f
320.33 532.998 mo
320.33 532.998 323.92 493.986 336.916 469.541 cv
336.916 469.541 331.799 484.541 327.963 507.912 cv
324.111 531.279 324.479 539.123 324.479 539.123 cv
320.33 532.998 li
cp
f
330.455 533.373 mo
330.455 533.373 334.045 494.361 347.041 469.916 cv
347.041 469.916 341.924 484.916 338.088 508.287 cv
334.236 531.654 334.604 539.498 334.604 539.498 cv
330.455 533.373 li
cp
f
340.955 531.873 mo
340.955 531.873 344.545 492.861 357.541 468.416 cv
357.541 468.416 352.424 483.416 348.588 506.787 cv
344.736 530.154 345.104 537.998 345.104 537.998 cv
340.955 531.873 li
cp
f
351.455 529.998 mo
351.455 529.998 355.045 490.986 368.041 466.541 cv
368.041 466.541 362.924 481.541 359.088 504.912 cv
355.236 528.279 355.604 536.123 355.604 536.123 cv
351.455 529.998 li
cp
f
362.33 527.748 mo
362.33 527.748 365.92 488.736 378.916 464.291 cv
378.916 464.291 373.799 479.291 369.963 502.662 cv
366.111 526.029 366.479 533.873 366.479 533.873 cv
362.33 527.748 li
cp
f
373.205 526.248 mo
373.205 526.248 376.795 487.236 389.791 462.791 cv
389.791 462.791 384.674 477.791 380.838 501.162 cv
376.986 524.529 377.354 532.373 377.354 532.373 cv
373.205 526.248 li
cp
f
384.564 520.154 mo
384.564 520.154 388.158 481.143 401.15 456.686 cv
401.15 456.686 396.037 471.697 392.197 495.064 cv
388.35 518.432 388.713 526.271 388.713 526.271 cv
384.564 520.154 li
cp
f
395.439 515.654 mo
395.439 515.654 399.033 476.643 412.025 452.186 cv
412.025 452.186 406.912 467.197 403.072 490.564 cv
399.225 513.932 399.588 521.771 399.588 521.771 cv
395.439 515.654 li
cp
f
406.314 510.029 mo
406.314 510.029 409.908 471.018 422.9 446.561 cv
422.9 446.561 417.787 461.572 413.947 484.939 cv
410.1 508.307 410.463 516.146 410.463 516.146 cv
406.314 510.029 li
cp
f
418.689 502.529 mo
418.689 502.529 422.283 463.518 435.275 439.061 cv
435.275 439.061 430.162 454.072 426.322 477.439 cv
422.475 500.807 422.838 508.646 422.838 508.646 cv
418.689 502.529 li
cp
f
431.814 491.279 mo
431.814 491.279 435.408 452.268 448.4 427.811 cv
448.4 427.811 443.287 442.822 439.447 466.189 cv
435.6 489.557 435.963 497.396 435.963 497.396 cv
431.814 491.279 li
cp
f
444.189 484.529 mo
444.189 484.529 447.783 445.518 460.775 421.061 cv
460.775 421.061 455.662 436.072 451.822 459.439 cv
447.975 482.807 448.338 490.646 448.338 490.646 cv
444.189 484.529 li
cp
f
457.689 468.779 mo
457.689 468.779 461.283 429.768 474.275 405.311 cv
474.275 405.311 469.162 420.322 465.322 443.689 cv
461.475 467.057 461.838 474.896 461.838 474.896 cv
457.689 468.779 li
cp
f
grestore
351.721 382.639 mo
347.549 383.35 343.557 381.756 340.682 378.322 cv
338.939 378.193 336.861 377.479 335.049 375.381 cv
334.439 375.65 333.76 375.865 333.018 375.99 cv
331.025 376.33 329.385 376.217 328.021 375.744 cv
326.15 378.154 323.846 379.686 321.295 380.123 cv
319.979 380.35 318.689 380.256 317.494 379.904 cv
316.701 380.381 315.783 380.787 314.658 380.982 cv
311.314 381.545 li
308.588 379.162 li
307.588 378.225 305.994 376.123 306.385 372.615 cv
306.369 372.533 306.299 372.334 306.197 372.111 cv
304.771 371.959 303.408 371.412 302.221 370.506 cv
301.447 369.908 300.83 369.209 300.314 368.443 cv
299.432 368.818 298.525 369.1 297.588 369.252 cv
292.549 370.115 288.033 367.303 286.354 362.256 cv
285.627 360.088 284.705 359.311 284.439 359.209 cv
283.068 359.248 279.834 358.693 277.115 354.896 cv
274.092 350.67 272.123 342.932 273.814 336.85 cv
273.408 336.018 272.338 334.6 271.666 333.697 cv
269.479 330.771 266.588 326.896 267.447 322.326 cv
266.9 321.498 265.939 320.326 265.307 319.553 cv
262.83 316.506 260.053 313.092 260.752 308.865 cv
260.322 307.764 258.986 305.83 258.197 305.232 cv
254.518 303.205 254.236 299.842 254.291 298.498 cv
254.385 296.432 259.416 295.834 261.049 294.49 cv
259.986 293.42 255.947 291.303 253.041 283.178 cv
246.432 274.154 li
253.846 278.971 li
254.428 278.619 257.533 276.803 261.533 276.123 cv
267.506 275.104 272.861 277.154 276.213 281.732 cv
280.369 287.408 285.225 293.771 290.244 297.334 cv
296.221 301.564 300.549 304.635 305.385 312.135 cv
306.83 314.365 307.092 314.506 307.775 314.881 cv
309.389 315.756 311.193 316.822 313.916 319.4 cv
315.084 320.514 316.143 321.604 317.127 322.611 cv
318.178 323.689 319.557 325.107 320.377 325.725 cv
321.486 325.311 322.627 325.014 323.756 324.818 cv
331.174 323.561 336.588 327.463 340.018 330.514 cv
342.365 332.615 343.994 334.377 345.229 335.717 cv
345.252 335.748 345.275 335.771 345.299 335.795 cv
349.799 335.193 358.838 334.709 368.807 341.795 cv
372.811 344.631 375.111 344.529 376.955 344.217 cv
378.064 344.029 379.111 343.729 380.15 343.436 cv
381.6 343.037 383.025 342.65 384.479 342.404 cv
385.982 342.146 387.385 342.053 388.752 342.111 cv
389.869 342.158 391.025 342.248 392.221 342.334 cv
395.002 342.557 397.885 342.771 400.279 342.369 cv
402.646 341.967 404.221 341.01 405.549 339.178 cv
419.635 326.361 li
419.006 327.373 423.174 353.15 401.346 358.209 cv
400.393 358.428 399.389 358.447 398.369 358.436 cv
398.057 358.428 397.768 358.428 397.494 358.436 cv
397.494 358.443 397.49 358.447 397.49 358.459 cv
397.26 359.256 396.998 360.135 396.666 361.119 cv
395.775 363.725 393.682 369.814 386.814 370.982 cv
384.518 371.373 382.143 371.104 380.123 370.795 cv
379.213 370.99 377.127 372.389 375.752 373.307 cv
373.643 374.725 371.643 376.061 369.244 376.467 cv
367.322 376.799 365.424 376.459 363.814 375.514 cv
363.229 375.334 362.123 375.139 360.768 374.959 cv
360.127 376.795 359.111 378.553 357.557 379.881 cv
355.889 381.318 353.861 382.279 351.721 382.639 cv
cp
f
411.061 343.166 mo
411.061 343.166 405.736 351.756 398.479 351.631 cv
391.229 351.51 392.041 353.631 390.229 358.916 cv
388.416 364.189 386.732 364.928 381.158 364.072 cv
375.596 363.205 369.248 371.068 367.189 369.604 cv
365.135 368.15 355.096 367.6 355.096 367.6 cv
355.096 367.6 355.119 373.014 353.143 374.709 cv
351.174 376.4 347.658 376.998 345.15 372.904 cv
342.643 368.807 341.346 374.455 339.061 368.971 cv
336.768 363.482 334.08 368.912 331.885 369.287 cv
329.686 369.662 327.291 359.615 324.768 350.104 cv
322.236 340.584 326.729 360.217 325.057 366.381 cv
323.393 372.533 319.744 374.967 318.416 372.475 cv
317.096 369.99 312.787 376.6 313.143 373.377 cv
313.502 370.143 310.768 364.74 307.256 365.338 cv
303.74 365.936 305.307 351.205 303.416 356.045 cv
301.533 360.885 294.658 365.666 292.807 360.107 cv
290.955 354.545 287.432 352.436 284.729 352.443 cv
282.018 352.447 278.689 343.521 280.51 338.244 cv
282.318 332.967 272.709 326.912 274.299 323.029 cv
275.896 319.143 266.65 312.58 267.525 309.721 cv
268.393 306.861 264.197 300.791 261.697 299.408 cv
259.205 298.025 265.139 298.373 265.42 294.709 cv
265.697 291.045 257.404 284.771 257.404 284.771 cv
257.404 284.771 266.1 279.439 270.721 285.748 cv
275.338 292.061 280.537 298.787 286.307 302.877 cv
292.08 306.975 295.541 309.428 299.666 315.826 cv
303.807 322.217 303.791 319.178 309.229 324.342 cv
314.674 329.502 317.486 334.096 322.252 332.271 cv
327.01 330.451 330.713 331.342 335.494 335.596 cv
340.275 339.861 341.76 342.65 343.322 342.889 cv
344.885 343.131 353.92 339.568 364.869 347.338 cv
375.83 355.115 381.314 348.604 388.467 348.908 cv
395.619 349.213 405.084 351.416 411.061 343.166 cv
cp
1 1 1 rgb
f
gsave
252.221 279.568 mo
252.221 279.568 260.58 290.666 260.076 292.916 cv
259.572 295.166 255.822 299.412 256.572 300.416 cv
257.322 301.412 262.572 305.162 262.822 311.162 cv
263.076 317.162 269.58 322.658 269.33 324.908 cv
269.076 327.158 275.588 332.912 275.58 341.666 cv
275.572 350.408 280.83 354.662 282.576 355.658 cv
284.322 356.666 286.83 362.912 290.076 364.166 cv
293.322 365.408 296.322 366.158 298.072 365.912 cv
299.826 365.666 306.275 368.076 306.674 370.74 cv
307.072 373.412 311.322 378.158 312.822 377.912 cv
314.322 377.666 322.83 374.408 325.326 373.412 cv
327.822 372.416 334.822 370.412 336.322 372.662 cv
337.822 374.912 341.826 378.416 345.576 378.416 cv
349.326 378.416 351.83 380.162 354.576 377.162 cv
357.322 374.162 354.576 368.912 358.822 370.916 cv
363.072 372.908 368.33 373.916 371.076 371.666 cv
373.822 369.416 375.33 368.162 380.826 368.408 cv
386.322 368.666 390.072 361.658 391.072 359.912 cv
392.076 358.166 389.072 355.166 393.072 354.416 cv
397.072 353.666 403.072 349.412 403.072 349.412 cv
403.072 349.412 392.568 352.658 379.572 347.408 cv
366.576 342.158 373.818 352.412 348.822 345.416 cv
323.826 338.408 292.818 328.166 291.072 322.166 cv
289.326 316.166 290.076 315.416 283.072 303.416 cv
276.072 291.416 265.865 275.971 252.221 279.568 cv
cp
clp
358.541 374.057 mo
358.541 374.057 365.041 365.221 362.83 350.186 cv
362.83 350.186 368.846 358.693 363.482 371.646 cv
363.482 371.646 360.857 376.213 358.541 374.057 cv
cp
.27451 .207843 .145098 rgb
f
256.326 299.162 mo
256.326 299.162 267.072 301.412 279.822 293.162 cv
279.822 293.162 274.58 302.162 260.572 302.666 cv
260.572 302.666 255.33 302.162 256.326 299.162 cv
cp
f
259.072 304.166 mo
259.072 304.166 269.822 306.416 282.572 298.166 cv
282.572 298.166 277.326 307.166 263.322 307.662 cv
263.322 307.662 258.08 307.166 259.072 304.166 cv
cp
f
260.826 308.912 mo
260.826 308.912 271.572 311.162 284.322 302.912 cv
284.322 302.912 279.08 311.912 265.072 312.416 cv
265.072 312.416 259.83 311.912 260.826 308.912 cv
cp
f
264.33 314.412 mo
264.33 314.412 275.076 316.662 287.826 308.412 cv
287.826 308.412 282.58 317.412 268.58 317.912 cv
268.58 317.912 263.334 317.412 264.33 314.412 cv
cp
f
267.33 319.412 mo
267.33 319.412 278.076 321.662 290.826 313.412 cv
290.826 313.412 285.58 322.412 271.58 322.916 cv
271.58 322.916 266.334 322.412 267.33 319.412 cv
cp
f
269.33 324.908 mo
269.33 324.908 280.072 327.158 292.822 318.908 cv
292.822 318.908 287.58 327.908 273.576 328.412 cv
273.576 328.412 268.33 327.908 269.33 324.908 cv
cp
f
271.58 330.416 mo
271.58 330.416 282.322 332.666 295.072 324.416 cv
295.072 324.416 289.83 333.416 275.826 333.912 cv
275.826 333.912 270.58 333.416 271.58 330.416 cv
cp
f
273.576 335.912 mo
273.576 335.912 284.322 338.162 297.072 329.912 cv
297.072 329.912 291.83 338.912 277.822 339.416 cv
277.822 339.416 272.58 338.912 273.576 335.912 cv
cp
f
275.58 341.666 mo
275.58 341.666 286.326 343.916 299.076 335.666 cv
299.076 335.666 293.83 344.666 279.83 345.162 cv
279.83 345.162 274.584 344.666 275.58 341.666 cv
cp
f
277.08 347.412 mo
277.08 347.412 287.826 349.662 300.576 341.412 cv
300.576 341.412 295.33 350.412 281.33 350.912 cv
281.33 350.912 276.084 350.412 277.08 347.412 cv
cp
f
281.08 351.662 mo
281.08 351.662 291.83 353.912 304.58 345.662 cv
304.58 345.662 299.334 354.662 285.33 355.166 cv
285.33 355.166 280.088 354.662 281.08 351.662 cv
cp
f
286.814 357.287 mo
286.814 357.287 297.752 358.248 309.436 348.545 cv
309.436 348.545 305.291 358.107 291.447 360.264 cv
291.447 360.264 286.182 360.389 286.814 357.287 cv
cp
f
292.713 362.131 mo
292.713 362.131 303.689 362.521 314.846 352.213 cv
314.846 352.213 311.213 361.975 297.502 364.857 cv
297.502 364.857 292.244 365.264 292.713 362.131 cv
cp
f
300.736 366.584 mo
300.736 366.584 311.662 365.529 321.377 353.854 cv
321.377 353.854 319.049 364.006 305.83 368.662 cv
305.83 368.662 300.674 369.744 300.736 366.584 cv
cp
f
252.768 293.924 mo
252.768 293.924 263.354 296.842 276.596 289.42 cv
276.596 289.42 270.791 298.068 256.783 297.686 cv
256.783 297.686 251.588 296.854 252.768 293.924 cv
cp
f
248.018 289.162 mo
248.018 289.162 258.307 292.986 272.143 286.717 cv
272.143 286.717 265.619 294.838 251.689 293.256 cv
251.689 293.256 246.588 291.979 248.018 289.162 cv
cp
f
243.127 283.236 mo
243.127 283.236 252.975 288.076 267.369 283.232 cv
267.369 283.232 260.064 290.654 246.365 287.678 cv
246.365 287.678 241.42 285.896 243.127 283.236 cv
cp
f
306.674 370.74 mo
306.674 370.74 317.471 368.756 326.146 356.287 cv
326.146 356.287 324.697 366.604 311.924 372.369 cv
311.924 372.369 306.885 373.896 306.674 370.74 cv
cp
f
314.338 374.08 mo
314.338 374.08 324.854 370.936 332.127 357.6 cv
332.127 357.6 331.807 368.01 319.736 375.135 cv
319.736 375.135 314.893 377.197 314.338 374.08 cv
cp
f
323.498 373.006 mo
323.498 373.006 333.389 368.256 338.494 353.947 cv
338.494 353.947 339.807 364.283 328.994 373.201 cv
328.994 373.201 324.529 376.002 323.498 373.006 cv
cp
f
332.018 372.604 mo
332.018 372.604 340.939 366.217 343.51 351.248 cv
343.51 351.248 346.58 361.201 337.463 371.85 cv
337.463 371.85 333.549 375.369 332.018 372.604 cv
cp
f
338.135 374.779 mo
338.135 374.779 346.635 367.842 348.244 352.729 cv
348.244 352.729 351.939 362.467 343.518 373.678 cv
343.518 373.678 339.838 377.443 338.135 374.779 cv
cp
f
343.135 377.525 mo
343.135 377.525 351.635 370.588 353.24 355.482 cv
353.24 355.482 356.939 365.221 348.518 376.424 cv
348.518 376.424 344.838 380.197 343.135 377.525 cv
cp
f
348.881 377.279 mo
348.881 377.279 357.385 370.342 358.986 355.236 cv
358.986 355.236 362.686 364.975 354.268 376.178 cv
354.268 376.178 350.588 379.943 348.881 377.279 cv
cp
f
364.541 375.557 mo
364.541 375.557 371.041 366.721 368.83 351.686 cv
368.83 351.686 374.846 360.193 369.482 373.146 cv
369.482 373.146 366.857 377.713 364.541 375.557 cv
cp
f
370.795 376.811 mo
370.795 376.811 377.291 367.975 375.084 352.939 cv
375.084 352.939 381.096 361.447 375.736 374.396 cv
375.736 374.396 373.111 378.967 370.795 376.811 cv
cp
f
377.799 377.057 mo
377.799 377.057 384.295 368.221 382.088 353.186 cv
382.088 353.186 388.096 361.693 382.736 374.646 cv
382.736 374.646 380.111 379.213 377.799 377.057 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_peach_bw.eps)
%%CreationDate: 3/12/2016 1:18 AM
%AI9_DataStream
%Gb",KBj2OedcgWlcSPU;fgu1ApB=*>N?KGgJH4@>@dF:=]FZa?jEu3%qlNTXp4D*oaOk*Pc[F+_Z<C-t[9'>Lk>&b=WL#..j*]nU
%V2XXX2Z/mZA1T7<iP/XpcTgjQGuiUX>(%Et[c^iD3u`p?KqDK#^c"macH:Hal/B[:7]B=ElKt-SUD1+>CQ3)(filP"r@HMU08mm?
%9/6#]W`C'gAb+A\knLkRD7TrkQ"m\RB\&(.N0cE#d6=4ahmD;l(]aT%p<@o_g*oNRn9n9mXMO?WqSb[lJ*]Vk2QRm12/u's:\2]I
%/7f7dcePGSkd]&U2iI&qU]0@=G0OlM4R$0o<ob?10Gk&o1C$-V$IM_U;f2,@13"uBZ[G&j6d02Oc`j67?[4>f8cLO+5Q!1eEhhe^
%M^JH'\6Ju?ppZNn1Cha;ZW"Y"/FMF6)97H'/c!3KRfH[TBT]f[qbca^>&6]N^6W1E=Z9iF@0ln^oe4i9c:=R[Q*p!5aI'+PAdntW
%_9[G!!HU>gOUXJL,fYN$]Ft1NP^+#Zb>D1J4P+E<<W34.CVjo[?h2*PV]%GMe15Ar^YEGBBC`?*NiK+=#2#jinW]777/ni%p5@2U
%W"$8lW-7Z$Q84#_j]/4e<W!^XC>(Gbp/tAPDnMpC/t05@Z!H84(]^WH<"`A(-M3i'jErV#Sn_@I"%Q0tqnA,H[0'OAh5hStl:Yl;
%rk[&qV&Z81De0"L0*3:9,lTGrs!K<#\D-DLY4f`>%b=t+,Ji?Pgr!:HlfGND%?CM2j%^ZB]ag9'D&ga&nNZ4r(nu'uJ5F/"Ws3rJ
%WT1dDrpbkq$P%?[*Vf/=ZdCefX<0>!r*q?\DB)-6SRVI!LcVQ&>PBr%`rF9P-d]G)3EM3n@cctUL`uMAed`YL8unfo9Xa0"dgWYA
%/=$9rbkC#iW!(%"-OoTQH_!bj8i+s,DL]",?"\t_S^pAE^X9"F77mg\8HTJObMQ";,eET?$/ikG*IOtkX]CIO`Ntb#C!cVWIb,6=
%n84V.Jb5C.4;.T+rq?]u2\eZGkgTg=\GIX:7K40f0b5>T;5FaB4[Xl9msLmRL<;kqn"b2_c.I(^d50&D6-t3AOMD<??*Bkje](bO
%!-CjG-@Am2Su!X5C9_)]B'9I_2K>Ub,&k.8DFJF4YjMO2c6R%->TCjA9nRrNHi"KkSMghkL\gJ`')_(obH4hghrsMqV1dj.f_dbh
%Vrc.XhmI2>IU%Q4CK:p,m0Hh_!d)XDS&O5JV3=NZgl1OJ_ob*s"AncPpg<E\G[Bn"S8m_@k2@?i#n4/@bB^AHOZku_kYa(b\-G_+
%P?0Q>+T.c3KYPP4!bb"OJG?0CDP*^)7/BV90IK`ZpnXG^)V&h4i&!ua86AHY@65ZR-e1*YJ6fk/"_DTC+BL]f.3=kO_5if!5_YaE
%d]IcBG[e;649XE7?A_5@"b/CM2tZ$<!N=l-CKK5dMg._nS/1cb)__``G4cmmE7S^$lCHXPWEhV^"]Vf!fL/ooE(>P'=DUDFc0.Y&
%:c45kmccqgi/kT@"4rK8SSB)=TK8r\2A`LK*4G"W*'`.!`AA3C*kq5U3>Btp7f`qMGI,q>1fGAdgiZk([b'_"9@6\HrDL_DMr=&e
%C%Y&qRS*N&G1[7Z20O9hj0;&8A.!AQ9rfD]C\.ZLJruL)SsaU4!Q*'FRl"MbVVG^NEmDmn4),NsQ`n,<<*D(fD@2?5'IZ%s``rkC
%b060@flAlQDJ%):Cq5rc#LG#*f>*hJ#K3FmF3\p6k>D=:2>/"l3r.u%WpZDlbDj8KTrV/hF/rS!7-><-AkZbO,eK+="!FrD)T_rr
%C?Hd428rbjdpf6*WYFdpMkQVV]fFoR9K[JUNfI:?HcRZ6,*#AI@k4HSLWX,VLXNu"7N3iW4a(#d-6/LI.^,SlK%YMt\g6dsai/Er
%Qdkq9:#d1WIZl?d-D#q!cD&a1k9Bhm7fJYsSYO_L*Yh>q?E';%e%3,Oc([`0(E@%b>&:?!lE,67T'!EV58bDf7X>'ds#t5JUItV)
%Ikmi)a!+jR8[1dLm](5)5r%?4MFB&O@Jhb^)#kPeNj7'3eD"3l>S.@YD]*mgW`u2V9Vp0Ym6UlR22%C#o<1N'8S?<@N,hT1#:MJ\
%m?:`':(om^.Sc'l"$KA2@].df_dKBn_&a[,.J/YLMr<rR_45<Y0(S"D_;L9Aqd,n&H*u(tMj`0f5[Hd&q9KAfBf(Dpj)MgB]oDVK
%?Ui<##^:;=[@Qq`j*I<;DdC=5bNGo'26#"Y-Jim2!eq#*S=/Ljalaj]`gu2^T=M>6enA%Sbp`EqMK%X!cXSG+Y[lF0o2K7!gf88.
%bEYg@ZrJ-eCM-t?PcPQQ9T==cjuff6J,D3QZdCls_:j#\Pb8=>6Y:.Nin;t,?s^V4$J)#i11OW(EtT-^)(?a[;aVI]f-(GYc&#+%
%JPU8$m-J3ZFBsi$OZtm\(ZSFBP#HZ]4r'QVGj1Vcd@V3=R0K$m&NiuuT\uPDQ6_A`Rfu%5o_7Z;jseScHH82P0UEsSalQNhapf3r
%(qV3uK52jRH9J:r7Fe?$c3)Ytagg9PV$Ppa*kqVL`[ks6Q.?he^k3/V]I]XKV9#VN@CR#F_l9k^ihq5\I=I\kIuX`#r_-fVW/_P9
%fI("TVJtKfO/O'dJ\g6_j7qT4@8(.9q-0;7R+#14,8H554OpA!hFnI1VZ>kjVl(N29[c#%<3,7=OK)g?-8(J\8M==jS;PIbhmbp#
%<rXZK9E>XM:qP@R8T!7(>TgR+^aZ01\AQ#"#"AsM]9,SQDN#*\'JfB\fr1_jGj71>31:GIF/,EXQHPP:jZJMg'R(Q6<:r^D%7m<n
%Vq)`KQ.#n9U@Yn1W`JC^0u^hh;R'EBLJq-%'mCZ7:aoAkjI*!h?P*jEO0-%o==oG?]i%LWC^\!n"kTG%gGQ299%PO+-+F/I-tuFe
%>20q#9U&->cX,p2PVa,[VD&bH)F(`uMU>/2r4Ge8-u"4"(==r"\L8m`R466H\K5:1ST7TU!&O/U.&hIA//Ml`Mt4&BRoqAdK\8C2
%&l>`D/kRV554PB@3p!*3!G5Lll<,`3T4U4u\L=FrCuVGn3p!*3!G5N6r[O["e!O'tl7=SS?/n&jkq8Qo.`6%F'%9pP@X8OD\#s21
%/%AXQ$ZhdB"fcN_E5dj?Bp;uVZIVeiDsXi1qY?,)Z,b!h03;^s`n)i\f=Vu.]9[gr`OX:hg5N4@5JFS_KU/%;p;^Ek)fa-4g.Y_?
%EOGg#=.:XSf932ZFL;ufqbM7?A45Wh%.W^VgQE7Tn>gQjW<rXNaQW2*jNkmq`>6\=BLYHs3:ibfKP.4RG?!Ct(4RB1na4-^<*_15
%DMl)"hYc2/WL&IU;p,-/;6=hH9nQU=QEc!]%?%]_BoZg5Wje?5F4i<(V@3E@ADmKRiG\MKAb[EiNUjY2ol>.RWF,R^D&4+^7E'En
%e_qhNNXN3sd?c:3qU.FBZ7hsRS#W29UU6![@)\I(;iUb[dr:7`fB`!.iF/aA`ht/?592```AIQKks3iOIZtJ[-CsEpNS7O1"fgg1
%-cNFc;a^MMNeh!'VYN1h_4!EgWT4-"Au0oRMqVmjA?*.*$Fel+)AG7R@kE<i0O0hMe-1If4r@2-,u61GZO6tYZ=16kB\<QA1G*'I
%Whe]uWjm:F$g'Z$,c<@.ECjE+RUi)E9tsj/GP^@7='VJ<(B9p>>b8oa07[RKs..,YL[Yn7!*dH`8tIerq9EH`^B^cS)Y:Y.%t2Z2
%^5Y_YoZgp[e)8iH`I(2.=0n:_/4<[E*$'1M]HT*gFHRQ:M0DDdN2kFJ?_[Y$<fTu0csa24<DZToebd28Cq[2h\!QYGJZdiC%$fc7
%>,)SYG!-:7omJPQ]/GB2dqKkS%@-Y6]"=l)99U\4Afe7GL[<pX0A#95>8D/#a3?$407u;#/Q_6!b&Lqe][E`JmH%qZ?>_TXoa>8-
%1Y:=(FZ+<3c!4lfTMd2T1]Q.\PpJ4W&Ig2gY>X\n07"28lW@-4ET*IT!h?1rs%;Mb9_9@3S#0"*F(5RaCTP&q"h&ohKYjW"mB;Ai
%W-&l@5^G;k=&M1pS(H?Bnh6Bt@nIP.!LP"r-/:*NT1nn!a_KH-4p,Zp;?4_/bT&8la32]snm?@KLms)=0B.[/s3&XV13:+P*%s+g
%bKTK3F1b2#j/"fT0/61`rg<j[PK`K!aIX52;scl^G(h7qj\)%f`hjn0oKRP\G#iG=h_#Hol,>!t^bG#l-INUPQkc+c\%(mFH2_8H
%.XQN?=LldK4cKLuIE(eN36m3;X:j"S$ccBrVTBC0l%R7/aMmIEJa&?KrI7R%:1Ls8&pQI<^,2n)1bLW`cW"9*4"6I7IpM`r44D9=
%;H09Wh9$hOT(Dhsjc<>nbc\9J#'MkaN`o:!:SAYk;j,ASW7*1:o.6ea9pRh71(4u@l7NqQ*]qVb'<_9MD1I+&A_5BJR'`'fY)d/?
%/@92*Te2`$S^A:C7\5T:S>?<3NBmAfHpF'ZOTL?R.cjW$J^SIQ^t<@O3Jl01V!3nL;eZ2@IZ,d0+[(h=PrJ;E9S'$#o4(Ii!^-'a
%9YMSn\-@D@1bd/O(_\N9B7>e2A`GR2`lsJu-%:gQNeQ%:VTPjMme5=2ZWLrYX03G,1c`>Kh8oQA_iO&boj58Y/m[Ppl*<FVhgVDj
%lI(/`mr8ApVF4+k;qm$o4\l5]ZLbSV19r@o_Aj=qd7,qgd>@.b1^\A$s)GkU]&MMNnGn]gP;P35>8gnP457MNKnca=Fe3AHSB&^J
%G[73&8>B'>-<rYR2&iq[PX=3G"j*i`d&_-3XDZC'!\01]qB%7-oXc)-qjlkXV[@c6SPI":=8aD0>!;,)cE'.Ln"\NNjX<ieQS[Ub
%?>2ZloOKW83[K-L!bRbbQ#JcX6ms3Z6k1i\lMhss/@A!IA[??m_W6@`;Ik5M@5Pg1^>T2?YNqOS2m_TmbEbeVAM\+>4Oc-mk%<3"
%baP#(F#.V"pKDVe[)hQNc-=\SVTYQ(;3>5nmC<p-c-3_d3B&bWB'.mmS=>pfF,T0<0^-pc1$L$UH_!jA<5?^O\k+^BhDH55j(:$*
%=MO:t>RF2OMT[_ZT8+_A?U9DQ#3W"Cmrp3sZapd55pY'nY/ID*Am\i#0d><D@:!#6+CdOZkUJ!$r$q0`@C92u?-[Cfj/c@_[!s^)
%neAOd5HAM2eC&8?GaJ!kiMkdK.H-[11>5"3Rn>0AG2CKNQo.fT`qaoj<CC*(H6t='7s/)XdZ_].Y)..^qAmST@0,V"QCN'fs6Cr\
%%I0t+cFu8367$(*rErn"V1,jiY>e2l96^'#@&O2sf,F<_]6N:-HsNU`mhb#9/k*'DX4'0\QD1aAf%iKc9U[eP@+m%fVYInuXck49
%V0e6gR#+7:E<2R!'S]@[a==4,^J`&p&q.g%4r#Qc$F\B:!>g4J6ARR;M,]mWF(7%V0(X>Oe7`sU>n?cJAEot*64.-STaLIB1,eo*
%a;22;otSfkp#o9R`h1J>U<-8iAie=5-Q9[[4e^i6<f4&N$icB.X3[$D=n_O4fhFfE=_XMXU/[u5Vhu^pOG'NG;!c]#C`"e)(t/Y@
%4jg.Dks^$3?n`u**%ji'l%6_h2tt!L$*MfNH`'uVd-R2j!LZ-c2%u!+iV:$QntZZ61b_V7E(hKYB#8PNKZQn?::N=^+-_c6kWte'
%2E7[.cgThHdrQSFFVRi3&[NB>doF<K>!DJ"SSPN;YIEF[(@RY+-5m[JY8(KU'P/2[Jqog56iJn*0ASB%>5C#a+&j8YJ[-Vo9g"-5
%>=5]fVO1$'/Z"fOBPk'.`:YbREF%Yln%\'F:)]St)B$<9[kSY;[]f;ad_up/`P`S9=M3X.)<7Ol.5!Aqm;hMFTr:[J(IOfVo!&)M
%<]5/:R.Ge]:bj(J29k1-;lNN!NgQ]$2l*r+3E)khEp/j/mJTo3go*'Mkl7$W'5eTse"#i*GUKUeMC8l6r&1\SZ)dVd\]I==?J:rB
%2KG@M/F-r-b]QF^V_^.K2k$/dT:+f]RN+X@%UKIuD\hZ@UGOVQ9H_Vf44hO7e?l4%3]RE8qt/1u\D/i\IJb&)67Hi`C3=.Ir)3rm
%V-*_g'[,C@JkJ:ZF=4P3)@,U$Z@34=g0AGTGh&b]^aN1%Al7:Rd;c"Sr8l6h?Ch&TDaOFTf50naWTk6Ab):T+Y<)UiZ"5Oh-[4W%
%=?>IS:s"!YIt(#UWDbIj00.:ZSJ3UI%!UBdrP1OcLXKgDn7R+8@d3OUT;@r-?Yi_7>uNU"VpY!p/G_kZ].'9eH?]SZ8Y`s<Po@nf
%<2O$5UMNXK'C#JA5Q<Dmcf)(rd.UP\ah5iFqI4!XJ&6-9p`'-L)2C_Pa8hON-&0hR"*5^,A01.QS*bc7jf;7l4CTgqK0UZ'6XZa@
%+L1K^KSpX1*/_-n^"fTo07okoj"!G%4R$5,3#j't[r"<.:.N5%]J!_eHA!u!&OMOS]*^(32]C5jgm_?OINI%KbN8&M-J&GIph'Kn
%W78Ykn;lit]E+N]@la7Aqp)_?N;Lo1mu7/CS)!`OZkpR(r/tU*H^3;f2.jT>U)IK<edDSt%Q!U0n$j_DY8pfD#ClN/C&7U[C&=4^
%iZFKNH6N7G3aq0!mP5&`.YOWkHX0I1M@X;b6GXa\.I7bL;7di'BKLtTMsl=R7A'dD9sFDI)[,Y#BUGKk<]]th(C"Q\S!96.jZ[P)
%qu>VuG5q'p+$1eD^O3[64mD&ZQ7Wr\la6Lsjt?\\5Q]u)Ibag'4)@l9W;i2@g3QpURR%]pBTtQcW89-@gOLVp%N_VS6mhhEQO<j5
%')m^g5@86o6YC9)s'*BGd4?*%j`_2h\lJ/<bh]D1%aL!Wf()A($?X907`HkKC0KHnSGK>hc#U2S$2RX@V:0*g`CjBklFJY]!$52+
%p`StfRm579E+Ub<^ER>h!1N8'Pt:H2RkiK7Flsn'<`Cb$Q\mQHSFkGGiUTZNkr_+5^qQ"`n-E[+dqUgV'>XTr.uGseMPu3%$jA[c
%O/`-`h<^+r=T>k^F1k,TFnF8gi:dq)nlE.r\isrcoM%D_#.BkD\/Q0`6f9#26\e_4F$eNfko4fsp0;AY>U(ohn1#af/iO'BNou?b
%Y.lIJdH0>$+jtEe^p='S0Gk,P8X-)Q3A!XASI#!ajl!]]ZGT-N</n$DW4h#g*01S,dpi/<RM`/YfHj&LoB=Pk%(-/4h*e?>(:B'3
%d'p/c1#Xc=k#PWT-E1r:d@3B#oJ.mt3jm1Le7qrEihk-+jYfghUV/FU5'>.+)c]/HW#dfP43a]=[5/-DYE(SO&Tq,*.s"fSN,-D`
%BePIRc5Q*,I`6%j;1NL#Z=W.(8lciNBdu!?bo#$eAgZ,D2_r"a<]b%srYP5;S(e?-B>lZWUfFC:Wq"o=(eLr)Z.V<W'V"2Xr,b]c
%+L":L=#6asYkoB1G36<fkaW+N>CdeJ[\M%i\nWbjD?<W$)J[T;p6SYB7"[`t9Uo+';rUT]47+h+_MF78f<sEB_9A:N/raFCU0el2
%1!b_O/._ql<m%XnH>c:`HJFH9o"12t"W)BkOt.C&pJM)P[;0C8K&a"Gf.dp/2p\8CIe7hGZX0fAMhdR4V>W26F;_HXKXQd2j%f,(
%b3Ut11mYZ:#bP-:LW/OrFOmG"\hI%.DIeba&XKG^1KZ3^J:GIGO5UI8.t.n/f-a9ZN5bCee-6ImXs2Cl)*6$1!k3.j2:'X?gDYUu
%?K-lP]j8_[jVCid2pb[<'/d%J,mJ:[!X9[<&7#7IS`!/<QSl(j'^O6'k!l7P<BL!l7K?9Df?pA^U+XhN]Q!t:5e5E;4j(.j9RD!l
%,)<Bd>gM_2&J$t0'qIkF&UUEFD,D9QbORitU0G.r7Fc%i2ScrT-l&f(A6[PlYUZ;m_d]D'Atc8Do(RPhKQ1b7B[70)%AVY6[:9*I
%f\25iHPnb$N_oC"^Ft2h]bsiTGk&6/_HthH(`.>LO,kDq`mSE8$C[CUS\5W18>"aI7Y.@+qI-Il4oF.rbQ=h17c#N!Hi'?7aTM,s
%Nd=aUgTPa'3BIA<4M<t,hBq/eZPDF+Rj3Y53/c=%b&3(E[RS-0H7%TSegqHoDpKAXS+WOG-Ace8$!_De4=*q*'/,OPhioSt+iQ.C
%U^n9nOD1j(e(hWuBi8:RUCZ6;\'0&;bG;6%mSB=kEWoToZ!J4)4]G\X='LK^\L)ep&uG&t1o_IgFkVi5hEuI\^[khG:@8tn9>>&n
%s3c86T;C2I,\M(+0t^H\40!n"3/TOfr_qf08$0pR^">Iq0/V@iFEZ6ZSi!7!a,#1op%I^@)1/W<HO*&MV_SL/Q&lF1XDJE8Q_mLP
%'EZ>!L)9RM1=,+jd1Mm:3HOsO;eUd0:$2?HI[Ml[L;9E`aH54O/n30S;(kgK8$]DfAbD*`D.[RCo'ho'bLoAV3'2NHdRaU79]O!-
%FKo&22R;B=YiSfeZYJaf&8^<#V0Zq@Q9qK-W4CVc)2Og'[F8qbkFN+H"KG!l*n@7>Cn(r;pJJVp/Q]P[B4.W<k>9'.&"9SbX`eK$
%K=W%'O@9R^F":IUNf0ia%e!D4eCt[^*nI<*U-(!8qq5@Qa4<foe:8s`]E`UIXgB.WqKR4igYZYs5,2L^-T!u@X<)[Ec:X'n4^,aH
%J9mGAksSq*LEgINF;EMh:;&KK3Dcng]rmn=6b87faJE('Mp/lVmU\3CU-k$WTK\YtTBGq)D=;kdT/jA5J-lK?CGq2&eR$/+V\?",
%;+4\NK0!^`mniq/6\QNQ9[5`,A$L/YC"J6[E!,uXVrduA4co[F\U\@-UOQt0Ej;[r-UEYC%F_&>*M_ms*45k3Gm*nkdV/V52V87X
%,OKW<3e.m].]^Op'EUW_%V,%I.AJpBGNGNcat/f320#3TqSH+;/+*,mZ^*\7[pWRi2Gc^+Ol(d-Mq1].%"hFURYa_KOeMoJ2M]7`
%CY4rmOpBJf@/3;['sd8amD`<*cHU8*A5mc5#:R@:L&Gf+k%Ul/jXGMr.o4PQ\agHj]2jBCpaoRnRR`A6:uWe#=@8\,)KFIRn=k)e
%0T1@s4d)Jka(36u):\=='gG%Da6]b\mpI!fOe"_3jA@i>%i""S\&?@'[>%@MdXp:uV:s7hHnb!ABV,_+-?S9aV\Ob[Q,e@a4'1&=
%F9dsf0\.8VP)9L%]101HO]BtL_tK)IC0-[s6[W6.0R-jh0)ZDT_N;KEAX(s"HMUX3%HkU\Q'lUHF"iLP';eY0<]QUGl(0W/&%D;C
%GEUO4>CG;AMqGXI4ZV%Wl0Psf,@#M![u.;2:>AL3Kg%.rfK7_gZ*'AdK\aCE4HEgcO]9W+;6IsCV-P(S0&sXV<aS<V#.su(J?\GU
%2@crVf36DF?<$4O+o%hHU12f0`a<j`m7MbKOml@XmPcZ(Qb\mD,u*F9(l4b2r.K\kGg3'?+T?Kq:]jcXI%isWC00%bnnP[HXsVk2
%&k.?Ej-Ze,%bl!W4+(mUY:JNiW;d.Ds);WsJ,a-_PX.3=]IYo!.U<W1F.g$@?gN?O)RVLh@.*$GV#h]6-6;I&>s*i<M1FIPYD.dU
%0)10ElV/n(_q\&!%Yis[c2gD^r^j#2=>*^T_rTSQ%,5Jq.mpujC*F9r>EtnrG1@DS*-#s$^l5k?e2CguFuZlcIfS=^N4jEe31o9J
%_mX*Z?*'BDiMBY^iZ1C/kO*3QP"6Cl!V#FACoEi$Mg4iuqEA`MFS&$O'Dj/M^gmG)1SDQp6k3j[L@F1o/+_@a<6qq/k=F">H=jKe
%mG+W.aL5b=1M@5/MCn`\=)K"09IalB@!sp8.#\8GJ%,3bY(;'\3gm<(I+kN3,35OR$SI&:4iTR6PraCb;p1sE)44M::kq3YZl:u$
%.EYU<)H+dYMu;C,9IkXa"N9GYI]HC._$+c.$flr##NM4`4ubmUdP?fWGX7TqVGf^u$XVKo1p7$RQ(!uE;<D[2>3n2&=oOlcJ968W
%*PSXDJ#+332^-^(^^Z'"/LmaN1D<uaq'S5d5T<7(,!"sJRZ/5In6_1;Bn@rMd>mWjdj9/G,AeWj2)6df]c?JRNj9^7!5EU--iq";
%cra0f^22:<Yr]+G3b%N]EB[&n:7oBW;Uc6.XtHRACmKXf.n>lWlkp.K\,+RG<c]]h8Rf&<%ItoQTG49ZkCG]@aU>*1m0<;_e#F+M
%>cHC9/@N$F5GRB1:e^Ti@4FXX]u(?+,X.7(`mP00E&8Cf/pBGT6R*+V[BdZoH3q)T9''Q)I`UVORRSM=A<M&0_?JnPoLWW3Ar_pa
%T_1"/l?^g,E.%FY;tg_U0G\]>e>WgQj8t!0XemRG8dM_F<\r<aB:O3Id?k#*3IJ_\HqfO*Pif'0o`nqIW6!Li3t)'uAq=C!&p?t"
%+9$iIo7<#]7nd@aIPGS+`G3"aD*$pmgX=ohh!!=NF%Z.$jR3SqageC6XgGY[F(nZl.iAkB<!"8h]EFO*n&e,6BP!rjn,4r0Qg8Oe
%K%j0ed?M8-<:`WQ9l>F2)sBO]G/"`[)4*]HWuoT@/D]^t1X4;?j\X"^7@giY`VN-<0h+T0PNtgBi=,?YFmWi?G\BW&$,U7m`p0>#
%TbMhk1:2B$EYOUY(QbD<S%W$h"s6bVWGsr,B3YqeXIdB>$9BP]?\1pWk2ae1OHJA*k#&$d>mb#PYY(,7LT"Bnr&'Z$XRnnnp2&(u
%5@ee?a\/FE<I#(=O'%X;>a.0fF-!oh&K\VoT\#\C]_lft#FGlQ14pg^V`c+11*h/^Pg$9N"gZM\no.mNkaQ"VGe;`H)8-TB_PBhb
%Dt]2USEe?ln#1M',dM_>(etLjV&*\8/SGD&Po:[fMH$BfZ[S@Z$9?3>RI>?4*C"H^B"#hGf#f7cq%*'3V7,R\ei#Gh[fEFTR;+J4
%ELq"(rA;:[ma8`0iqnGmp>,,Tr+bh;m:>IkIcL7DNJ4oiCR&A;Fk_97Cu)_2[//qLj-S&TV6/)<?EQ1J-%BF\H5YKm*Tr_sZjP[u
%`s]oSe`F!f#HK?_B<B_8$gSs0Zb!elUT&Q&Ds*1R^"upuEMC.Sb+m"R68j2Z\8SOPnctQ/05TEHnio<T(VYC@4!,7TEj`nf/%<(@
%5+-oeh<JejSD3N'hlHM._)-ijj8%ZLd;Jj?OoP.JVpDpP[HuY+B2/)(qQd\Q]('?SWKjU1(DcF\2WgTsO'im[YDmI.Se[:"]^taF
%ea!%.U\m]1mDT$<G4!A[]7lEYoj`.+ah;m\&1kE#p@\2r"9,n/UTdnX]THP0^>I6'/`*N!,2O-Z*LJ2O4uZhP0=e:LekV`fjd"UA
%qsJk2e\\fke[9aB2V+VJK?%o&h`=mmQ&;L7=(QjZB^:>L2N<J\^KJ,GD5m+!Gr]6FoAnb;F8g5.\$^GS#6JjoFntii%F]RFDniC9
%lD8j8q+!*)+8WCkO".mDY]XL>R\``"rcH936^A)*>Ams5r-OS+c8Ng<Q*lB93+VXBUUe?t-suXkC(/"8XZNS!Rk(u)XY5>[(<e7E
%Ie%A>p=C3ik?$N+5:p#n\%^5!O6^uiUrV>E>Bh]k]Q`5u3c<L.r98WJ;%WA:H-7nVgj3+J=BrDKEF\uX';tBiLT`NAFb+7c_jd,*
%rF>is`es]%no"C0pKq-,s2Lg:+082Pi:k7hj2^Hn<oM0j,8o_$UQss3pK(_d2"c`7]^<A4VL`(LkB[GAi['t5O*7d0jA;=m,@<F'
%m4Lf/-][rKqd.G4(V\33NZPq0Z!K!<]:J[+hn0GCm_"%5gKr(l'TVl:5?<8]=ZV:Oo$3$h"5_Cc?MWXXJN<`gn%?t`D\Tq#4'8P2
%pDtq/ea=DqX;sGX@1OH0oDRKc,G$UAqb_^&gYR8G@\[nWr.9,_m5:(-U-ST,qg/7`gYr_Jl*2$==-r[92fnlBgRWfOH8[^e'C%:.
%2fGXgp4.b'f<BMPqT&/tA*_mlPCg(0H.=6(=S]D2;#hS]YV;\fKO9)PX*\oOLT:o;dHAVCX$cc;cm6*cq:=$M_/kh0AnCsXq:ipE
%d>Mhd=P<^fh7ro2Kic^9,@5"AN&KhdT&!a8nTI^[kI7`90tm]0HtX(tfip*SU94Q?ea<KX\*gF?T<,O"jjKXSSH$u_f6[uhc`1oq
%#/BtUI<"4"*-<ajC%PjDVTJ5?/C+F)GoRUj>9?TFXd?UGqE=f8*s(o5>DDh#H.e6Bm@B7644WGPK)<raJ,JpXQ</u1"1Urn)s[[Z
%c[1T)Di+4!c"Cr2B\(&<DeBUOhqR6r^06$@aR,V4^C=\cR+DG1XY2M;=W;Q$rD0u[UQ^&ofpB<rDgq"?=QfY"dCj06XLE2d/91XU
%qe(e]_[J34m+WJ[a,f(%^].=oFAC]ShV9Qf])1=.mI#J(#2cJ>/&^7Q\U`/I*?*7`Q2Kn%=_2+)WB$;QocJB"'U.8QZ6d>u:#iIa
%5549]]3+Xrr/(bCfCk86J^Ie2LZ$qbnn.1npiktgRl<FZ:V"/Wce%700_]F,jk3fQ\pSi4r*\i.hYc"daR+-DSbQ:ON'%PQC9,V-
%dTo&B,b[F"Yju=OXmYX!*RC./?f0r2]/OW2,AOEM:Y3$UnZU!Qo;C^q,<B(U@P5m,4je,-j"Ff/\19Gs5P)r4fB>m(Vmj-H]uFD$
%n`OYA2/LJ-BXsDI%GtGBlrjW9cdoAE$?a@<(18&o^c_=:'bA73i.TorXQnn3emBt,(L55qX[rVbUQrVO"=_6IbOTkK^"gZ:AK!.l
%L;rH5-+2sn=m;Q)]KJ-3rgZ/U`XW-mPB]$c5:qsUZ@9Ia>&V8!D5j+=V<@Ub"hIKF_"mt^_rs)e2%>%gq\9W:JC%>>n&Q`*/,goU
%VPel(?kKGlTm8cs=Er6cQQD<&mJ\Kn"q#s?d,RIJ^s6.&Xr(LMmMGhP#i37&Nu2,r+LNGT@]6R'p7Qj$+^)L6O(?^c+JipXl5ntW
%pN"jWe;W*EZVotRq@K@\,O7DEa"d-_J)$"<!0UL99AIp2KMe"`:gAOj^&3$a7iL*(g.3,b@G2iA8AJpX]c8fuZ"R;Rek)pto`Faa
%2Z:TbJ:Q#;n\782l\#dhqeoik2cfB9qd9XK=\8E$k3='PO1.$]^&5+AET9>#`>X=D-k0SS2WurNe(&ZOhAi_!^)jAYQVN%cA_EBr
%1#2KJ`TBon(R]bCjpkR1h%gMQ[;`d'rsA"E4.Gt/a$QuQ*]%]9^:cHAY+9ZX58IS<plS@(PWstE]Cj&7lJC.T+Y'tOeXG/SbrhC0
%9<X<>_91cHNCNB?%r^>)"GZ3rZh;b`rklCX?nE^!9/D'B>_jH&5DrMo;P9V*_K]ue48U"6-`jqUAc_TU)Sfd(UN+4e>MfGL*VaHU
%naPZ.k8Z)_'e%Gjh2f<[]VMc:8:gV+j!BE@U=;JgW/Cp$)qJ:1o%2@CJdJI1jtf#Q2g8"cD0l4E:E",`<Uio;cL;s'>?P4W4r7Pd
%]mDHNrPSR!eP?_HYO?jQPH'RH_]Q*_8Q1>Is0;;B>M/lA(ZV&R_ZMhnNZ_DQk.e$9mH:q8]E#;D11_Gb=)sGJ_-?cgo,_R+Gabg^
%a.LF2J8&KaTRWrgG2_]MSI"HGoa88p9(:G!qrueY__@TfG$]<P]6/Z6ZZ8j/c-tHSF`e`h5Q5)WG+WSTX)Dm/@a=C+Lg[tmSIs-J
%lf763[?JoqQ=.Z:#7:XKA-(U>Ee4/QbBYd@G)dP:-qe54I*J9eO)Dm#BUh#Ib-e7#8+jO<P4nGc/*ih6H5(khl^%jc2V.17,Z!`$
%=:5t\(2cA7'_nN,kP<^kWusPhe6^6p4!3nO?GG3@M^H"2iSA]^[^gD0n4u-$43#iS[edA=*Ar2@<ohpiqc-E$dqHt\=D]rlhDe.]
%h`[YNQAm98hp;@.1QK>[c,APpBDH1cVis'`Kf?+Q?0C_ACG&k@Z)E0)GCF'Q3O[Mi(KR"aT0M(TE.>\)f(BL]TS7D,`7=:q`khTm
%-O?cd\oRSR^A@9jr8"35q7R,+_sfa]H\,>n\N6<6(7mH,HkT3>a."%6O1D<gjK?nYOg4$0mZL*dT?ScV[UVP`E&(1i"N_L^`Q$;/
%V,d',rNQ'2f6G%/A$'Cb']+AY\?Bh$0NVe$K2V<88mRb,i!*?f)tuS`Zu[laQt8J)7k\26$ftR%TMTUq-CFC#N5F;T>:c9[)`JgN
%fjV\Q[WdefV<H[i8@Ig:cGP#e]5,9VHZdb*?lGX.eXPL?qSCcFT4%K82cbFh^WpO*G+u5PGd)Dh%W"VEM)+:>rUAdd9"/D"r;..q
%p`dSaN_tAuhn;/,l^$_heR,T5U\1hFLBjKW/0jUD]"_R?2a6Dp\aVJ\_KQ%H#;X&BCN\a\S%FC!>3/]>IJZ3tHi7@834HLaO+t^(
%4&<Wdq,=WT9I__I?lhH^Cjt)aJ/ZK]FTGg^Z8ZIm_>`9FHQ*4!mX?Q(_3X2`_<lrno==a>V"2H/JCKM;4/[THiQ^JZgNt:MAp$A?
%m^C^0+*^:IH&(R*G*)a8qY#*EXf($-@m7Wc[C8&;&Y\%ZlseRbpMLh;T:W4,(g?!`?h`[VUSF[.^"4o'f3?=5'L"X+0F51kIdT<l
%Zi$Zil1;,cD]ebX9$>sP?'_7hpJ8p"[e/j0\[&rrph0_uFNrU4]CFusXo70!pA;"\9cl"DC4U2HH,Ajk'CYnK[9%-^TCa7^`'0VK
%5(Q?)@i%mdog_>cPbF$em-m)aoRPpK"3r%tK_iRW*c:h"[Sj&A\Zp`;#Pn&DNPa*"\&MV5k%tq(gY'm&+)a%A+VL=TinejRF;DSQ
%H>)HLQe#NF0'CQDC:UE_AT"od(j;!.YNGa9j]@/2nCtkRO&>dlc^'=CS+lVB(\mhMf/VH4J=G,L10TU1It!EE&'K:)R6[%XO$%b#
%Q@u0Hp&1C&mZKbZ:cNdW66XTY6e;/$f#Cn]bONU+lLF;KgQ0S'>kmeF2n2NK_=uKhqjYQaPsRR;*8o#LDQYV*MiLkkZfV;!1'^JT
%2W"Tt0>OETPI.R"rms<Ub1#Y!gAGI\kqeP_5<^]Ld&1FWf3E6fMuPZmaS3<IDiaTRM8:9\cT?jIDL$5El.,OWK]WdE[I;r,W38eV
%7apac*1=>4)T]h!,Igg'GS5H'VRAR,Our5N]2NtJ[FH`X*,_j]gqS:#%:J7P+8OXaA%*Oo?Jbm*G5@=8W+C#[R%A@(FL_:)KqnSn
%fRq1@/O>8`XY8S'hV#F/@^ULICV+Q8BP%M-D$Y1Spc\n;hJ]J94gAKP;YCQ7$pM7@=nULYrVh/_Yh[]k_UHPL,1&D<O$0tK[i\h#
%guXO+c13qQ5X-L&G[H8-^7lduR?)2Q*@A'6bhWfbk41T1QC`QOD4>eiXRR[9X"07WDC(-;Bh.Yoq-d_WNRks:n*q?04m+H3G`=8l
%*&%ipU8<=pYkA;/WLFi2p%=JPLT))rpBU':]puk3EWaVG_bR@s4.<ch)VG!)_*qkXJPp&!0>3mb6+64=]oe1_]<GYfjrslRIX@h!
%jLejG):k"2f77&^N:kVSVH[/NG4n:G?>-"+k:nkXrNKJ%n=rlAjrZbdpcPfI+GRVkX8_C$Z8<gLl="5?J'^L4Z+IAf[*mI.-@HU^
%TA;Hse`ths*]lT;BaIXc\:/+mge6r,18MrTjJp0)@iDg1fONuc)dD^H_Y0%r;P6cHHJ)TpL8MMn?FoBL!DDTFF(7AcIFbHMr-5Z^
%7HX75;=3dWYjT8QZ&1A'.sMBuHTb",NmeD61m[%$cYq^1LHYRH33;#tQU$TbDSssCfg/QS1j\k>X"2_[qagt)GI5&A#nUhHa4dTe
%n/D\$q8]Uu@E^-^FWseGk$HsFJ/6A0LQu(:/#)@0?5j."LE8-CYIa#65@2Y>:KqZEUb?W04^WTKB"k7PQD::g21U#IIWF_o5AI!#
%&r1p6MRlr'-Pmbo*@E*8Z/:VGMpFWpC`(>cSZ(5bL`6j3%hi=6(c,S1H9$GAi>sE-HQ*p)a+3N'Sc/+m2"o!GVO]t&i?dF/3t%:;
%Q']%pKiL+%is57[Ba@5\9:_OW\R7.='3.K)#K]4peYBcu=tY/?hgB\gpeTJ4XdshhhaA.Ek3C*)qeP00Mj9bmmbI[Wl=h3V]BcN@
%?f$<&lG&oLXG%`B@/:s@5n"j+j`[]m].TCSI)"CHs8HWh`H*!&s&T,8&9h,G!';;$rI[ich0+.SefGQd?16pu6K`F/Hi2p?3g`JL
%IVc*%PQWEmYL75ZYp\LE/[7<Zm`n%#oktTo)$*e/A^0*_2c`aT5J-l:1%pDUQ-6$&-*-fK-XU.9pRf2"pq@5Ne'?#55OS+-lX=Gd
%gR$1lAoQNMj(Yd4Yj]qI,S/\'=/u$`NZKgeK@><+Q`D2L[ks`C)Y0q/,H7'OgZTRM/a0TL40XJ^mJr/lh2-Ur9RE,\J)g"<gD?Ha
%Ibt4bC[\jiS@I&*hLWm31KleKjjdMNO\5M9^ULLUGYiZf>$:Xi,+f5Y2K?CA'nh=?<pN<nmCkV(;>o'3a3'`hgFo.,h"CFEmY',u
%VUmam<^`RGMshSAdDUICrr(-^HJ#0tIslh;#'eJRLB7@gH#L,UI2?M%[IO(0_)LekQQ,6:n%P9@H2i?4YA_.H-\K+aNVsc;JX7>M
%!3:$f>[RC?*9Wl:p0n(,.UO!PF8L[B"7O9gifcl?6-k,T[:4;TW(2,`nXJXXV:.qg09m'W''Q1t,4cme;!ju3m+6##X6%=;Ap*KH
%NuDD.Y<UpuR!Xr+n8*83/i42Fd,dRf1lnT.NU!Ygm]X5WS*ZU?,:XAQb2hefcBOA5\R3F@[Z,=:IqEE.q!IrFY5[M%cGm?(0,>2>
%kJHg07n1-V2>G#>jj!1*]AD!52hqB-Zm!"*+Iqq\k6<u';?+6=1OMsoq7WV/?W(Ge\`(C&qTJ[GW,I+cBPG5h?@)MXL3dq8lur/9
%rR:0'p`3PdYdS3.e'EKfm@TWs\B=hu*9Z4%kLLBHLc]7d`cln-iXFC$C2grEC88lo\k<nd$6`o1arK9#cZL$el0a6_ap3#l*cNh]
%nU+ck_g-IqkrgSKnRpkW5.YUOO!0t_FJ>2.1Ob/[T3b[E\Ce<6pu``?L4):m<MphS>dHTW\W\tAL!3G,mbi$<3.T;eS&PL$I\U\"
%i!L"aR7)A(nblgErm=T(6=sLBru\rNB\GZLiHp,gq='/tmm?#LMO$@5Bc6]I,/4'?\4.<oGd#URHJa5E9d:Um*+iTjg!K<g9T<5h
%Cg[A7ctpU,#&K39"^0/oW,%bX6ed/MgWJ69B0i"s_QS]X.H0IZ;&D>@2Hs>A2dPe8A4$SdK(["O6Q=e8/.<\=^(JN>?Ij7N!*c"q
%8Q0)&k_@l'HQfQ4%^N5Rd)Ri!klpuB/0kKQ&"A3Q6`YaNb1c>\C^[R-!TlImf#=ODWQk)f40s[6]C:(Wps=tLKcVl&L%.=kl<7?.
%p2NV^aBH5uki]k9oX+q]\3@=S=kbZ>9&F]$\$1jiK[I(h*$)L+fLDM1B%CA2TfMU9K\UdXNos7Ym"T03jM"F%789'eb2`T]7i9Z0
%@7hJ#!-5#*K/VRd5Ci^?6>?$#TMkbOb_@GS+1PY.%itR1KGFB+^<l#0\Fe.m#);72f6#1-FU0s8o=k$'_nmW/$r\_kcmbX&$lI@Q
%Y<CO2O9#k#+2A=[rn7d"U;4.AJYhKe49J)1j-+G-1[&mYUB39q8!]RN!oF^5JWR+\L845AEWZ?;cRmc\gD@qJ7NO(U;l(fY`s*6%
%&0Y^Q!dF]i%1"?n#rVm#qMl^l-b:Q)!ELDV@0sdn3kN%-!'!a[BPUd0[s0h"+.TFKhtg#.oJ%I[(bcH:KH>[MIi5-[9;_Ck4V7Mu
%a24HqJ>+CZ)B>=b@L#/!:QRF:"SZjU*Zdo:EgmZ@1\6So=8C$`KM:oOJd,%O8.Xhm%H%fi1#T&`KE>iMd$Y$P(EDEQfG;ih!M#@O
%eei(J$%TC"(RG7=B/%bhqCcYpa8pc"7Q8s%63@!'EL<+3G*Pu4"+$>iH3P^*)lts`=LPS>MGQW)l[YYII3jOP!Nh1gq.gm01uN$R
%#I"LVC>t:["ZW[5ofVRIgWDZR@Cnd\qF#ji9T*$u2@Et[ZU]c`RWd7:Lr;I8_9`Cf_PUUo2E1-UkCB839J_U$`=+=cpf+niU#d]R
%kZNFR/ou/s%`8.J3V3ED*6:Mr&$UnO,Qp0u"5DfnU'Q>j#_d4.RY<2-;0/B9h?2a>0a8kQ1_?[;2P6p$7"0"EW*WptJM^&QpX<aZ
%8#$,q'S>fUFdtuJG_j]N)ibm[h]L-i-8?S*Vn#rd.hmpH"@:]BD2<_L;h4\f'gpkVPQehUpcJcJPRiErL]_^]X:'S94?:eSGTaF$
%?h=p,%"ZOp'IO*P65r[f@.Ia(4P;.\K,Oiac^/1+8YZ@5pK[n8KVh%O".MDGUqCQ$X97<&Ri>JVN8fSI6o57,LO+n_ghab1&af[K
%0[=&FTi#3#9V'[D=bn$LVF_8+Or[!H`"UmgAml4sm.cU=Rg&bafq;gc;)g<_"(`V\c[;CgL/L<fZlC0@.ZJrt:ZmHVLSu_VD6ld7
%"[L]K+W`K#.LIlhL4'!/:qe#tHn^4'!O5:ZNA==dN/E)W6W%shr/pl]L(d`7ZP!(>r`Z+,kfVj^'5f$>1e<Re'F0!l%<hs/>Qu&!
%HtK,"-F?54gr!KEC=($m49L#3Plm#!UdC_8_#+;#05$>_(9X0>#N8$R+>a1[,HF)HK*>(IV%JEAO<>tm`!U0u8$CAP'o;oBo.k\8
%.?WlL&j6KS:p&Zd@49a'Sr*MUImc"V4bsV*,j@pI*RITpl*`7.cNj$IR0Ni*1OJkI;OLC9TU^<TX&`8Q(dO?teIAo?flq*S/HOQ6
%4hE.uO)6/3QoTmfCS7_\12[[Gp!dRT*Qs=jdRZ'$'62JY@Ea]!^8La/BESYS!)Zjp76)S?M.g?IcjboP0"/&d)CjPNPui\JRmd")
%2@oFm&Vbi2!I&[N<"4s@;4I.XboDoq&Q%-i?#$]J]e#9o%TtuXl>2XY#ll1jde/#R4bIlOORC=V6-E[K8Y75*YbLH.MWr#US#0p6
%6&hD#cl17c?98caY7m@aOQDk5E"ftZR2$=u'>cc(lR<96ljLU6-#j>R+D_Zj2$!4>\]M<#d6V.RD%\B`.WIR0ljOgnf]KCF6e`5U
%gdYM`RU<","g&bVFpK$-^(40fp("B9,LOFOK>,0kY5\iZHl0o&-V8TV'X^)!/2L-/YY;rH5'u4=YcYY-8g;Xug*XTUA6#]`#BH]o
%/>m84]c5^^SWK4Ha\M_f1rGs'"qsGC7%mCGOQckdWJSPO!EGcB=$/6.8`mff=q_crXK*;/O[<+W%u>l>MdXI3Z5D9AYSBSo1N+g:
%K0X7i5bSJqKgdg!a5kmiU!WL1'8<_e1m)TD@)2HNTVWfik7*0`&!;7l_GXtH;@k&j:l64r&/oHpn`YMFO`jeDG91ZL1qO5R+Q,)(
%An7^i_E'h8EKFt_p9J8o."lT*p-J$ui0co/8s/k1U.]@.Fba]K)$@sPfZ43gMKK9YcE+p2gI&\M97n=C,hSt(e=&YX$BmnOM[0Ko
%3@5sNN4D-X:c\huOY].ITbnu`r;eS-8,n:hB?0i`Z$KB+k\Hgp+XpC!Qo*21,,tY'KT1DP>T0t;OBe6od6Sq-*5nQ/*Df@AZS5Et
%"lImH"9D4%b+G/\k@$0P,1K>79<"P"F46k7W0hB,GmK1R:q1)g&]nk?9s@XY!jp+i6^u?7$FJGW+2g(R%VYH2$BfnWZ5)+$'uT\r
%6]jLXJjfmPDh`9b@-s.e8X#Xt"oos.RB)B<3N6tP04tVD+pl&lZ&pC.A!;%G[dD1M"rW\6!gZ,u#.05]Nn0%bb'YEF]?AX7D$8!P
%[Es.Dg*1E"#)20C6HEM\JsudWN5KlE9YrSg<Ap(^B:tkbb^ERGb5/AKii0F,>6CF/d!BerCN+1=6E(512;oh*kB!ItVmb@DWi@`/
%6#m8MifD%X`83XM]R+1)..bbs`M5oIQK%7EjqF&TW[t4hk`Cna>Z>8M:h]e`qZL/5mgQTYO!e5$71K0K[W4r5-0D-c&K`<Jm<ID"
%L^!hT.;CT0)\'Re,Z$EC#^)tTS;S:Y3\?brKM,<C&XD@3bq*R+a&<JIOHdk.0e:p460;YWda@ftWI8$GNh\q<KX]U&oY%5'GkA8G
%+q1?)#T)!iLi7rsd]D\p2[l63XH4S];SFurHI;:"0:"-ZQSo$:;QMI?#T698<'&]!FOJR6JP6^>MTntfM_@H!D8fCM;e(qXr^$IE
%HQ&VuO9`p/rY=P'ZPfW]ER0FC(Cb*HMOkechbhQ?/q0s'0]e6M`>J<Ul@_.]0qsdl^f:qZ(CGLp85Sm1iNGS6Y/hINJ6B%b>DWHQ
%Mu1_b,6<I;f^3G]H/hDJRci\.Zc"5(MLnT&cRrqa>!m7iXBoK]31&eV>F']^iWVO_^SBGm0U3Uo@#8nsMs#Z&_D/*NeimP1fi'^l
%C+JK,8e&c"CFY#]FHf-6\p>E9'T*E.O;+6E`)&ap&-imB[,j\QIh;>:.+JM4PY'20Sjj_`jgbHs8U*(,cTDYOc^oZ?dbYK:EES1H
%#tfttWuX*?W$aX:BluCcZ3#F8Pm%bZUj=ZQ>&B,@m$He@j,/RaH3En/F,taDn/!k\Ch).Q>hW\%D2V_Yh@QuP36#?^32Z`]IglI8
%eRjo^Hr_YP7$++qLIXX;)kgXkL_BEuTkkD*K&s<(l!,K%lni,U#X1f*]7o5r6q``U>2jZpeX'9%`%Q;\T]edTQ[8q21^:a.fOsAO
%@`spB-Jh*q;$<'PNfm\TE<)%o'0l,7dCc0=<b^M;K.Id[n$,1aD(OF]^I3Q*QlkmR#$Ro*9Ljh1+Wk#(+t=W1:PnO2BEYi+BH'^*
%^D?E<KaqY[Z(o*E"kHMI#2"c#.-I<Og=!'^0]7#Lakd,XEW'/7;&,Q,[)shLM@=Q(M\sK?'a4(A,:":t]VsIP=oiaL6-Kg2*/hL^
%\8"mL:gP:hE7[q]"ti?GkJ5JgFMMYI\_%="4mG983L+i:AGM**6<>&2BM(6n`Q1@oFsQG)0]cs"18/Kc*2-q1:(?V/Lf'/c2(P\_
%S-Cu\>VU8d'7*9KG!t2M9#^o7O%b`?&d$+f:lAs[5t3E:T8O&Tl3b&@DJU;XI544Xlk)Q/!68_D?mZ=EB&AWDc,tS,Lq@s?f?iA1
%KI;p,LL[';AMI_1mm&!r&V\&;2T#rXPIlP^M894WLY`f5W36D7+W)]t'ab#nZ$]K<!@V+d7U\--M&.PG3QM>Ngl\`tHV%=IHeOca
%\k*Gob#C`,OELa4Ser8IGGqjSZD*-H7-+T@0dMQFLeC3,BN`Q7OT:4*f^\(/80Cii:$rRQdj;OrO\,WZ*H,DK!9"i,Up0TcN@C?Z
%qHWYTNiX?b+:S=!MrM/i1HLVXTs@aP5b_EF).c#WOp$()cc*.-104k&*PiYn2KBctGk1j?6cMrrBN/]"!0I",>p7/=(b9pJ^'Sd.
%:`sXu;sT:e-5r$2Ym6V\k>7"C;iV-KFCr&tm*oboi.B'3&ZR&)J\hg83eKemaNqD='thCK:*?RCO.KhkhZMg]!F\5ZF9:30(Y$"6
%)-G3Q7ZI>XWhKR-.7h_]I@obD:A3#'X##=DbhW0@HRs5[E.OuU5GU/[Yk,&c47mr)K*OK92L27m+JT0k88Ip,ha)u-[APj0Yj\b4
%5PTYAo7o@;14\SDF=%Q@9l1#1hm?u,G"ul[@HZ.;&9^f]$t7Jhjq.5\D%L.=ZmHCY9ktGOhpc6MG"ulk60Hap&b\q9*)Ym@jq2c2
%CEQL3PU7%:9ku"_hm?u.pAG^nM8&un;[L37CFioOeE.Bd:2)CZhm=^DG"um2dJ!KifgO_q24UUd>16'),b=HnfU(0:U<[H^.&):"
%-5:VuD+%7aZt:"LGY1>\fM">)MV)!&@uC,[1oH.bVDY<.3N"a6M!LrrW^r_W263Zs.`7-3>$BC43i=j<8?A[GY=N'!26]Udpr=]s
%.5S_HAE!8sbq)ccdMc;`>Ga-_W,#RHMj2nZk*DsqkmT30r$s*1%?T$%,0M14fd33d$nl?kBmNY6!QGqaV_u6W**el#IX18&bfo26
%NI&TbCpq3`3]UJDi)HQtW@^!L,a.dO5\?_c:o,C5!72K'Q-r\=:H7j!;M:#E8kTqj6Q7]rIRT*!'"9$be/7<.9L'"]EaGj+Eu\A/
%@jJ)h3]LsMfili.h8CRI3rl#'Pstr!=qRkLF<d"k29DXkM.<F*M8YoWcA?Q^*B"1N*@o)/39N+&U8["3e>1kl@Omk,d`hQ"5JL[s
%Hr!2+6&G20<7Sp,k"5Dr./=!:J0LR]:qOkkV_!9hLQE3VbbI*3gMg,r"cYOnUC\?cFmi\Q<J-)iN9ru"X<@eqi%uD(H.[$8R]@]$
%\WUZIY-O*:QB")!EcfEI+XX34l$);GR:MA2^gW4A^]LYW6qT[fAHnBT2=[Y<g**1@RusSj&bAS].-EBuDfJ7"mj?K?-*Pu-3Ec8b
%k2JA5WKTXFVS?m@-j><h!(0_QRUg#MmK.+#N[19<l5HMTq9$/e.('n5@-&"1k2qb9Jh`+K0mH0N`OSUElCRssiA4Kn+*'Y9KXT'J
%AXEa+Da9:P$jJr\]Jih[Up$tOJ8$LQ5%\LgMMK)S$?9)FC&e*4%A9iOT2=c;AV:%OOj7Z/JYXqt7ZK5/6;D.S5_`$f_P:`;'<#Fk
%.Eu?*4I<T(nK-Y$2Uj\c8,u?p%QZb'TtZqH-8[2!"C^4=b6$aX0LnXhPFs0P'iPKJ$S5#SiZJSFnLpn(#3V/'+Eocc(+8Y!5Q;H?
%+aODGXnIm<N$-'/D-Q89b4R(FbXdC4*-p3e]-!)1;N=%A=1Y3*QVDOXZdeW4!oH6B8-f[SB[T7]`ep`c4H?cnoN/8K:\VI&\I]sa
%cE9.;(daKU:0I[,2Vg<S62`d!Kl`)+?j>m/9AfYK%U^E'`6^m3Lb=>:B$!V6!1Dm-I3Z1)Oj0Q0bNBN']5FLUF$ikR".LI'UusKL
%gLuh'9"KE-oN)KojWuOTd9[K:QlE)r5"prLG`$Y*-"<OW_EbQHQE-'[%.Y,fo"Z.Vi50SWG/mgq(r6<O^M3ac>D5g':0]+?J@R+M
%;^_2$q[@0+&oZrEX2CZB=E7PPY_$r@M'&c$,+=GG[g3dW7Hg4j'S%k=nD[(@W18.s^a-3n$cNg`4?E,q$;MG:Mj#"F;-=;N?>*nA
%!kalU%!YuB5o?gdGqP;[4@=N/TRQuD%3hfU@Vo970W7Q^<F(W91EpmI.p2#s,8]4IQtt^W_44I[W@<gsi\-ZQX&%JIpLu&P^ipOi
%V]Q)8"h8$>(PSQ+qU07+T<CiI>AhZZYE\Lt#3l[>"^,@jFL6'Y'X'>LS&#J&I/agQ8nENO5YJ7W=NZ%V?ia=]$V_B)_IR%rR'S?N
%<D^Y3ak:>7$%#'),b!4T(lCNuE*KCG`+V`Hp"@ZnUe5HS.Cn-@J?.8Rd)"!W+jPsLbR.&a!4'Q5Kjco`I*k(b;e8o2.fULWYfd29
%!h0l>bDW.R(dF8[*'/09kkc08eYe5Th>$93/XLWrJl:S2M=6l9ToNWO$"dZiLphtkjR/_@>`Np&_iRh3]M5CY7YaUCoIo.&6)<.H
%+Ftl6qjO<nnC;FKg$f/*&7_kF&.\RV3KZ\N6"EW9:DcI^@NsKg*j</48'Y00N!@LUe_J0NPUF;0^M8p4_?MS1!NaET^\9$08`4Yj
%M5gHLlIJpjQ]:*mO<*M>iEW+/3[tCh@/d3]co8AS)U^3Mc8i@6<#VOFI)4C]!CG^43d[&1Y&^Ar:g!":arGCIOFAg')'"2dKh(l5
%J&UoN!p+]JNJMu$`+VhOL&1<$XJ<XO*+_G7>>gI-_o+7ngEc-lj=hp@l)ChOVDl_Oi/>s1ZX:+OB^10VL.emCi/o@gTTW\1?I.Xk
%$XbWudqR?GJ;AMaWOq/cZNgQ):-?P,3%PO.n\(@il)u!h6\VEI8V^^KPV%MWKu??,;dGa[*6ln,C5e1P$DJH1Ejm:cg4Vlg&t>8C
%X"'2&c%!\4L?*Y7`BC@9'U^n*Ra?7*lnHq#:,#K[\?9HBP#Hs(#\#XpS=m`Og<-K^X,50I<cPJIo3\o,a)EX-YUtVj>YTU`ieMJh
%?!+sF:eQ3/>e.aTC>4%_\e7`M7$T`.?>bVoj#)#"iVrYV*(!S+#K:g_2CUSoUmFUtO9.UD,q"hPLJ^c;n?I,\'OObME6).*`QQmB
%[AhSeqBs$u0>8YieT"UsaYS2,p)No1KcrK\XhsCrqH,F#O3Ca2?-2Xhjm#<+cr7+-)5<oF.Q+8VqQ&1WciafB*^R<QQG'9HGjq<+
%l`d&oB5hR%'[uDb;-\OSrBm.M6@g^UM0[H,-.NLkc#A3>IfWU[U2?k21T3L2*l9$($1TONB[]^ed+RF2`?e,O;BRo20k`.Q=a6!7
%Qm5c3S30.G*(@gO9`I360V1gJnd'5s_UA4X':#et'm"lKE\PH$7GbobB=fX@Lk8N%)lZ13R5kW^mo?ZXkaVLmTehr,CPL%`C(aX2
%817MDi:K,_9-@uF)[?^U>seq6kE'<f(VW4,<&DKm-,J5r7NnYCfrmNVA?-,E/-(Bi%)Z_VR(]USg/<&*9!CSU%-963]]-oa^</?!
%@uBSJ"aiU@m=_8g@LX>`\uTK?/!%NF!\T_SJFm2IOUEqY!E/G;J=Rh&TIOorn/9@W[WR9P7odSP;"X.j7'eKGcp.P$#XM$9dsDUF
%=]4RFp/S),QF8%YK71F<@Du&5kigZ]AZBh`"Hd76es0`dfp&;,EsZ0PKL&+r)Z:&Rl9cisSuR1u39%irIn8fH>EtN\CsHs0.ppIc
%9QLg?QmsLNXpSdM.^+C^_rDY#oF5;Es7@N:oPNJ>/g2NMe1u=&liM?0BdLtT,c;sr7jTIOR(A+$ZN>jf_o2,nBrY'D9iep;X0:<l
%<:<082YAWZWWf*V#krLqO!kgKKXtFM5"'=t@O,i]O[)*8WO\qt)DUhU%r1Ca)iga]]XB(:p<S3L/f@#ts$W*nd5_8-:QYMiY2Z4Z
%+"Q*10ud'/=4]o^FF`82!_(m%&DP9_e&$F/rs^S.M/9.jE-=6E'%`uVH0g3'FM^7CimAR*0I9SdD8+@>3g[e>kSeHd$oX$U*n0N0
%rS,);X6)17Y/+c)*,D^6,qQN50V=<I_g!oHGas<*2Qs9%(7/RLCcMFLP^>.JiX"M;>aQYO$=<c1,9[1PZ/&&tePog<U,Fi\p^gHB
%>[08q?,#;&2RnPO+,mD,]7dI?R#rdWi)HpZ71,_KY37)fp%mjdnhW,1;p:+^UZgf=FX:=5lsXq@,amUk!.D12e-6t_$%,+U#c'S<
%BuRP].FEb;gb_tJaSu!*#+@l;BjJS1@qmku.N&kPJL?`r/t;IoZ(;VADZZ9U0a`g.$9gO$N?J_[[2Xcq"miKs*2]UA$N'!.#pGC'
%kZn6V?)gig5OoCIM.1=bZ0$>3QBru@TF>8-_kEC=Z4@%KI))EO*]VHARU('pWc.keG!09@;p)^]_AoRN"<h(Sd(/5#-g_`Wn%5k3
%l$<=c&$/PT-#%d-L!m@':*&eW]!+M4T-P;PDuPmEh[fcE0*.cKW`jsSm454KF.QAY7A/YNkfr#mD^o%^f52t?E8\gG+DD182#%j<
%\]cA)66iX$fJih1T-68.`+S<[c4HPsS3di:<>q&m,g?^lL<?`nUdL0n?tCRse:EtM,`CE61DOmbFfiiPh"LaC8$c*XRcu!f6_-@]
%Hakd`=NWRXEm9RVs1&8s+3"=V6t_bhVM!fUTR?Rri&2:c)Cf99Ge17_n+<C5Et(gV\cdD\>[(S]17rqieU0b1;AJ1j`BhI=(dM#*
%%Ka8"o9t)7(H@_E3gWQ>WM5tTM?21e"qXaooR%>r&Jr%6"!IAD'i(GQ3`73L<5Fm9BD4#1>8J-oTIoVhVm;"j:h>%t,?B@'<=$0c
%qN::C3+[F2Y`po`?7A`JcHk%K`BmA>5-_O1r=KrOm?"A&!I'c;m&p'>)p'ieR'S2pmX/$PXDdf0i-?)'G7"+eA#/YjGR-Kl"q&q8
%U92DRii0Rs>l)A"o#Xjgcf6!g.p;C<iMW_k[8JJ*-]%H?4qbR`!2N@#T;*/j;):u\9"7>8R7Eoa#hG]e;fY)3:<R,A9P"eSP4ZWc
%WFXgn9Rmu?'JE7\Z>]X'*sEf9O.h%0.HmgK/X!H6A<.ql:cClboeHL_($78b%a."hGO!b;/P#'+.fLjX`@HRb&0uN:KY5ZRs5[65
%j?6j%7?XsEr_2!QoUN2`!AAMOc=i](6h+14:"rXHDTI6CF^'H,\`^iP<)$"Y[\SELX+h-VJ;^jgYt";N&QDSgP&qsNbu>K0cr[%'
%IWu0!S:C>)"/i`@Wc0_iK=\L#0e+916G(IMqA4,$+?GP.ne;THJV\Lf-*LLkQ1.8H\8%"V<sB7<>SMpn$cK&k`AjmW*F-pU%nqnN
%rqT&M(qQ[AVM>_`+,aiF1VGStQKBs:\eSoClM$[cX%rrkI5lmhkX)nKF.t7/8(AkO7k8p(:%^unJGFsfLtBungJ4AdLe&j'3gfK&
%"[QgIl;f<N[hPW;ROJ"NZrN/W/%*sMnN\'q5H8*PED\f)(PASa"]':.R=>p(Xp[(X)GAs58sjGVs5Z[_f'?mnEb9=]cV^mm=R$22
%pn+]jBWTCi6=Wad.l<WiDYn;U0edC"[Qoj[C:,bkOPHmY08>q"n8YD4M*0<#'cZ@MJ\n0CU)/iYCog..RXDgLBGpG[!OnLSM$60.
%DcK_l[0pZ!BEcJd(92/9)aGo7(*(5E:HY8iUK-7[/IUYYISAF^l=8;.'bZO*7tXEtpo6jb20lb^i*Nd(>IS'4S/dkt"5NV34qYtD
%jP)dM4t`RJ4?@5.PZVb.Lh#WWI%,YTqG)\s0r??j8uo9b:K$cN_"6UY0\6RCc'2gKR'+J5&1AqjWscY\O*72:b*I0K%PlS/0i23b
%8YNAp[M>0meRsQHTWj-c!-c@G8tq;qrY6Q3R!7mVr&+,_j"jQLq-k5gJcK\1[2<0*N\[m/+4M96Tm0@aHf>')M?2O:2DKX]K3M^s
%K1n,`i=1[.,GJ:j>Cg^]8b=-,Q\00b]J8H$:83_CgH],2AL3e=%E$8?E9K):!r0q=%dCjeEZ7PSMa,6T!hgWR1S(LreV7X'0HY[I
%R=X+1fOgk;;%8.pY2.nK2V.P#)]f0iTmZBA8GGD!S8/uZU4hp"ArkiTJ7^dN0T]m-@qbJ?^f^gd`reIAPt>@FVOqNHg-J6$rg^Th
%=HnE_*VLN[^r&&]n6cjYU*-ZW,R[D;Lt0Gt.#<!7M+\aB9H!V?`AV&g12R6J2,-7E$R7JL7;r=@jrNI,P+2uC%e6)?KD#L"$,_d8
%-je(,6j3GX"D'$.Mh_GnTWQ@34&^=M_#*^(Tde2p\:M]@6$53i;p9MR('C`a(oEWBX?e\QVJ:/uC2.$>X&<d"T2R6TdJ*lkV'7/!
%6EsL-j&]npl5fe4Wl;[M-+_%rIYDh,E.<RbEI`Vi90`=]rPAQL7)ABkYL,$6n1.Is!;mHMithV,,u^3:.F7Lq8i'j%:Ip7kR;@E]
%.:N`=dm.k,M;'9hcc9\9&CF1_19-M,*Mom+GX%E7MSM3Fl!T^k4b*IQf@a:/Z*<:%R3CWFk:qrue\cJ&BQgbk9mXte0ASCH?pn'r
%9LQ2KaYB.2P>"i[CDIg$?NXcn%a2DERRo]4$lq+m*/Vn70u;<AW&T'EPt&/app-I)=Fi-C:eqEb"e<j\PDDEA;gSQji\$iYB)ki!
%@E(I89FL:n?G$V3\_K]&($NV5D71A16k:u[Yl`paD9#gkEED!+gJVn"T4M,]cWr]6+*[D.3meg63iMIYRE;WqN?&ioi3,::YMITC
%qX^l3l(L+@]-%0i]>[FP1cTrsF<g<55+Ed[47[M*W1NP7KPc[7IcB\?;9cf`$DYXtKi`s3L$=.ASqqV$1fN4(b7^=$*A>gq:L$n_
%c`h_T.CPc^Y6KN6f^?g5)3upg+a+%?^L9e:;oB=IScZrC6o_F`&^ZV(aT/T6CcLO>`G2&>#.1beOC2B&*?1jm;uNcp8^%/(k9!I]
%je$)Tcj/dJFVt<0:f`=e[TdQKEQLcUJ`A2k`HK3/_U&EE)3/;J0Xkr>a&9uVZh9FP)MoB\<ce->JSAko-OA`UHPR*HEq8B8^g?>.
%BcEfNr$P@Dg/_"A[##9@"s=K@;-:,@(C":V;\3\:dpb,@J&HCo.X_%ip7D0P<.Q+,A5k;Rkmj:*X)=l86FG.519gXGe5JB-Dr<"?
%$5Ej=\u<m%;Os&7R*&G;E#^`8mteYRaX*WEW#S0AT\D89%ohOq(bh\U8l8UP-I5:/S#+G'S(C^#X?o:*DsF[o*DoV/qo\b^d)$(-
%.1r>/Bue_ud/rVVcqa=rfK0fsFF>!^0";r29HmLM"2h>R"(fE"%(*l;(`3H?(mm^mjB2Xm*sTlDkK65U>_^S=SfYZeblt2eHMu\`
%KV<hAp\RGH#L)iS`tdeM4EXmI0\_DE9*#5YCTHL\*V!C&DPWefs89c5-J[/A,iF'Q7V4`eB*rkH0i\:n:fsnTN;(OndR_=KJ.^>'
%R>sc!+ND#1F+)_ae+!"&AchEP[/eMb]^$O,hq9g)RRlebLEC89;%?"5m%DHp*.E:`JNE_c&c;)LnG3Fs7WA51a:8"Q8/(-9&c\Cb
%1E=Z4&prbrqFkJHN6kKD]u6N<MX-s]_0a`lU=qEj'ZGu?HI&g_%8Z*,Sf+5F`]Ar>o1_*FXnJi7`.)@EOLPAc_4W=1jGY+bQjl9A
%clN!%%'=$gm08KPCdM3Uc"t[^&$bGN;27Y+keTng%+7U0Lf/*-+jZ(c%Nf"9k,ESP#Am-gK5o]_HSO_"Sd0#,BPp#gr=hGn^BT[D
%[HelURRtQQlbq\;i5r_U3<=4Y[@]Y49\V8/mHf]X"W2raFW</J8GIH[ZWV8U'+;(,oo%oR!ZQP<GWV>.[^<c02A97Hl9T0Km3AWo
%&5(1i=V=bZ`ie#:-YF,NZdhJZjSABip)Dqg14mcVQG+,9Jup1O9l5MB4Ai*@CJV'h*ee)S%"Ph;jN956GsN`2o@6%X.dD\*P]N$5
%Q@ESJQkPo=n`6"4-OTP'3=9e.>L-COLc<V%'D<cWAGP!iFB;Ze#JR2d6`L\4qDK"n#732Y&!Itclo58^0<m^BoO>M#hp79F']Q2#
%SJ\nRF_$Mu:L;IGG4Z!&H:3\0QPOi)F;^FIF@0oVC1A2ij&)PO50(H>B8.9Ld`2+`g\?)c^>AKIgYIF_()2#)bt@=@L>Bea@*07=
%VE2"Jj)s\r#](4gK2rF@4qU@]9>f,',X!S-B">M'i,]l'^06:<ZN*bP6sL;l/LS1];q@aG(W]m=Qe%P#UC2hSlCk8+[jGjPndH^K
%^L46+oct&/SfRXYGsiX-DKN)b'\`]aV]7K>>F?WnEt))V_3Ra>"*C`?qj\3F+K$p%J\[E2:@QDdGiT<Rl-nB&jSUo!m?,@#4"-'o
%n&TjUE/_KoVD"k^R^>9r)AOW].GeoXZh:W/@"a.r@Vg48cXZT6(Q"Zn`GKk!>_s:b]Y.:/=%Q(iI3*(aK,B3s'>h;AGD@6(YQB)_
%h,+[A5b.:Rg\W$\/HYH8'7.7<J5c'K5,02WPK0.7@h6M]Nm.e)VcC(oRDMYY8Z"Cs'A?9co&lk`,hbl]3JSlYfb0'mjngg-$@!EQ
%aL]+*S6Es6K/+WYE?1[5&6$5%oFkENJW(_^QMTB35T30p8&?%o#(4UXE!r%0dM<\&"A(=0P-G$_Mo%B,i@2]7*Y>gs[fmJB+PLot
%8r:q$#r>rqcG8Hg-"[<8*o^Z@QJQ20>sYgAB0sR10Gc.Z.Bu?&\b/\H_^2BODQ1Do/B1=&%UCBTB3dhsfY1#"KUI#3cfZUT\)i$s
%ck$3_0NEkq^dn_>ZX3IcqROZ#0HH!Z(h&e878!52.2@9?M7-,b+`f>6[RD86*"CpI2p<(c4>B_9n>./&G8,FH'b:#NE"EGr&S;Wa
%[@(]f7*M2o=7P80o._-"0Z#=a=W?CHkCWAaC2NZ!.I;3p]*T6(:<*iKUj#3=,%=?X%7hlm@NJ?9,a$j>"qYFP-q6]Dk#p]P,A'8Z
%(*LA(<cZ&Z3#p=tY;Bsm)_qZ896Z>Lpl5nHdn:<&&H=Fbe7YCns$?Q&nP[hInY,9BVLdo*7H%19]R"/RT:S2pTCVWR[!IW$Vg`>7
%J3*];%T**%=0OqQ)O1X?L6[_4//iVa,a0S(Q%paWEk_r6R``(:8n!<1ppN?+=0_D,pu:)1cKOo.qjAL\iL0o[X#DjrM'f6h/)C=X
%d+U8;c'/(&U2[2fiDgKOUXX/eH4&Ku8;LYuQuKchm6>*gcU;X"($?BB^=)j_`[CD9#&_KbiDXP3@i:LG^haYo%JH"!)WDIs)g%ml
%Cg"S#&ii<Hl&1;=ql#?o.1m>^F$W,c!olOK]PkGp/Gaq=C'8"W%N=o<(QH$nWY%9d80QtZD>5H.M4m+/`Af=1-]>6tL<_+/7qrh8
%g+8djdPL0RDmki'kd^5S5YB@1+XE87%fDF;&P61N"W@kWN(;an;#$>B:[qs"NHqq4B&*+0f&45Fd+N!JIC8$I>nT(PW8&/lcsUAC
%>f+#UV8O3QoYq6V'^lq4aq4fX["X_eBf"r7Fk^ZK0neS,&sFIXD?Ss=@mj1G_SA5eStg'QG)^gUlV@"XWj'CL%;)$lZAX7KS3',q
%6+i*]Ju%kfS5F>[<]6GhR"Rk2rI@2;HKXgYW6P-"ijIcWLQZG+i>&clXu[#t+4V$u+Gj7[2mD#D`u-+MUL*cApGieg.X!qi'uuTI
%>j_7E?ji5sOX@unfdZQ`S[cq/UW7J`G:f+c""(#pKD]ia7G5JRE^%o7:c4VbSEOOiXsaHH?l]oHn2"E6'_f0hXr'eX0@4P@-%AYV
%_[g=A5c%*%,e@B>U&70[$'Kqj\*Ta%0?Tp:5!g:8V/(G+l8b$1mDN/[3qQ2!(Y.)n40j?(7UFeF3E\^>4lm8;%R!C4'36fK&UYVE
%jW!eWf:)P+<)\'^?XH7k@L\+pXR[QE*+2Jh77#96$QUpqL<@r&oj^EDe0)8uS?&DpCp"L_):h3[]@PIrU5$g!h2;&,:7eI]^m;Wa
%Yr/nb=bS*.cG22QkYaJYjQ@WhR3q!%)_gPRDM&o86sTT*&U9e(S8>PK`7T<mYkf$XCC(O4W\U['=<X.FkAkO9a-\?(1gnf`?$8`?
%>dc.n.ngs9B*Y1h-;bpVB?4MtLJXuO'-;sTV-I=/7NJaS]`*#@gUl[N-(h)dB`Y00W%nmRl\S8F/XC-0U0UB,+n_Iom4*;sVIYfQ
%5@Dtk?2!`H;:<@(b.S'Q"e)_SJQ+PH_i-u93f8XX/P.^\%Ir)6k@]ljmfn_1@RG[:=T0VLT4(n@lXHP,$S\ZMC/_eqX?-lG'f0K#
%FP'6eoOqd'@UYtf:Qj4S#JJPSs7TB5":k&R;J%iq&PJNN=B#gU97BeC_d[0==_J8.IY%/DfRcJC3AY?i;*,EKh:bLAA"4MVEaW%P
%=o"EnG/qd9aqXNa"E)1IW+(H6GG</51LSEW?1dSL7]]4uqur_P^uNd!SiHe%.\CFRVm7:6H7.I;G(f:jnhUM#juHhr&US!!DKq!V
%:H/C.+;ALp0pnV7D/b.sC&>8P3^1\hVEgJO2IRd0kUJL=5O+LdqmRYY+AOBXL]j.jZ08"&:RrHi-p=+HBM&Pn2?bUnd]Mneo%F<X
%3FYJugB%;#M1bHNl!WUD?bJp[(">%8POj'od3?T7aq`h<)r_sY>6#Wf))1-:Y5*:6,)S[0/^c^El4bg9?J(-#mPA66A!LCK`X?\l
%:dH3,9.[)ma=BGC%(4KKe&rR('^9#0>RmAL-KF\8;I6gr_a'>65.JaJfK\:NSKX8Kk7,HJ=&!glQtF3J8A6*n,u\GDqI4rEMpn+D
%d8gdmFcUaS#KU!)BYX*.K;B%hlQ0TH$m*A+&V$/VnLpFP7)`%!#Vh_n<!@btL7G7g`2nI&2sA>JD(bW8L)IaI_fpGm,Gk;>0pc`W
%'\R(I.ITRl>BkRkNnP0ihFl@#7:o>5:K"dF$We!C:;@[kn>OEc^o-rQb!;"a3N@Zc?8?S%(k\"Vqa\?JAcM2)[$??)N\8cPPTrlI
%dSs<20\8tC'&CQY3_M,&B8LheHr\+^B@JFq92&aR?,p0(N]KhZ<bD`uR]d=OF'F$X.S#8\mAmQMeKr'5UJB9@qJj*4BdI"c]c"u`
%9KY8u6uTYTWR@gnnZ@:/jlD9sPEm4*RkRfR)+C$bDMM[<`9pPkHf*>AqFCHBP(F?B2!)g/._`FZ63W1jUbdu5+KD;m!cPl1C<s7#
%c#dD^3RF*?0EB58j677>bD_M&e7if8:&Q=94+!k'Y*ad5r0GFGHP0*<\]LMr-'%)Ue4D1*A`&<LB<g>oV-2A;(QYmtfl-+:3gDPq
%>6aqQ>.g`H&c\+Z$Oe\NZ`3]C;O;)l=*a6:Sb_TkeQIJ`mnlI-2ko.b*>f<=GgC2sr9Hqb'<PV]_Ng]b="Vg8l5T9Q4e'M,Dn6jd
%W)m>8TL;Q.<=G[mo('F[:98h3AhL\9)3)#L4jG*l6b-T]-':.hcL^&T3;EE=ZuVa)Q!3j?I?[>D#k[/Qn!I0c?E.1>TG"e^U#FK+
%8qiO'dp@DR,dC>@>gl^<5R4kSfij$-d1J1+]n#-k!g=:)"iVEd$:f?-TZPd#)lfl]2'oY(?iAnt%)o<>7*LQ2C^W,H1IDlqV+Y-0
%R4`+\->'a[eSm#'TU'9t4SVO@giN3h;t"ICR3'KZi[eT^lrR$boRThj@baYf69MIeVskU0iIfi4+eJ7%D(u0lR6:)*&nt"I3pf,m
%60W!mPsW`c[=WpKXs98-`tTnM".$d=LH$tTN76H;;V@aeD!7rm][LZVm1m3%?r;e3(7dtI/SFVn=\CY,A60PDAmeZ#>^lAdrn,/2
%#>/^=NPO#P#UI#A:=I.%ka]GB75[),g%8:=)&>?Q01nR<MEbOLZf,MZi)!^"G%d:KRY3)JoKRJX+D,jt?3Qf"<;NPQ@j6.T5UBCa
%4A/6I[go:daDHDf@OtI!WO0Cr%QiV(iODT.H+TS,*d<T:3FK70:5F+:nf=U!ksSj*$'0.V>og5E;A#FmMI9=3ODcN#.)1Pd++\/e
%6O:B6SDb(G-/-5U[eL'?BmZ$$Nj$jbFQic5MkKm`3P.=t&9H=J#H/94D-ROn-:UJN<[i;#!pQJV[C#V2j??:9P4SPfDPCHfKY%+'
%8U2qeUfo@h7.k[/HD=QTgo9A>S\37B7BI7)irKg;:L&0h9&2uDj3%mgq]rU&)ke-d>g:+8]!`P)k/PU(<*9AX^.@OC%eH-L&dc.<
%"3Qi&CL,;<DV4GH6+fQ[ibjmZn\\6ip2.C,qq\6O"3q,*;k=JBrKZuJn,N1iiTIst7[0/7$`?C\WbKe9-;/P\rUk"g^SA^V^2_?<
%ZfjWi]MX.99[`+`B%gkUPunKJGs>RE-a%tt+*e'qTNF"iAre!.6+4UR5S@q*jB:_*-9>5a@7bRKQ&pmlYG#$iKdJue'$kGDp?Up_
%7ehd%hjJFW-&54*dL^Ifjqk0i>t^]qLq7U;6KRBm*#@[4O2"f^F0,%MLYPRc"_o8b9*dk:F2\1rRuW<'2>LK/hGZ@dW:jog8fK)A
%p3^a=na'N/Wk5;[JN.*]$SqLWM'JGLoJICbO:CkCR@M\LA`m;c>qJ^VR=(?R5ED9[oibEoTdGq;gr/,YQ4!JYeCRUFb*CIrC6Jgp
%Bup^7Y(2@T$*bndG/"!7ZC!;cd_8Wh.D4'k3KE/]b;C/2]%"cT8QO9@,MMc@*FUm-Kk*2W@2RXY[Ql?9f)IDkh0LYEdd+,]!qRN1
%70$[SNk@iWr?RY>J49pP$l]ad(^++_:boU1Mm?!YJ+$XO0=,F9p=[u/O%]U22/tBq7V'O#]<#qQ,oteL#5_3')?%1:67F_IVeZgp
%*#;6:Tt+#_O$lbhpo65P0$^F9\m=Sp"+Sb7!mo`4Ia#_.Ca4(h;2@t][F:#bq`+R'<Fm_oM'Z685JcM&mO"_J"gaiM:EWO011>=;
%Us8Z8Q/h6T3nm^^Sr_Df=^$K:$@Gn+=k++XRsVT>ZdiW$]X#-^n8NT_CTLY[KQ(ABl)k+;r#i\1q3k-q[!d<`]!c1]@k5oA4)Z=[
%SS`fnCJ@ouklee`f;Isl\9",-PVf:ojAe+J<_`r-H/CgA3ffeh^1B<0k;9DQF7%\B)uPcLD0+Pe@^AYZ@?@X5"&OBL-uE8WC)kt,
%^3YUI4c>o;XQsK"Ia8GN_XWn0<HG[9'tk*BX(Vj?1^3]44f(`Zf=#>3>RhXc$2-c1$&-eWr57I"bKS!KA(<Of%!l&m(VGVupTmXg
%'BCd#JAA5TdTb=1hmhN8P(4?lUJn[Dn@SHI1,<U`C[U<Yj32a`_PCk7ksUJF^YM)SG4k`F:UfKHOLs14,FM380tOYJf>W+A;Q6CT
%D"0uCc>f0Cn^+Y8$U8>If5]kT_gF,KRjj>6KuLRU>c=[WYNFLL%=#J]lD6TLa>2S0D$^?$"$<POFL*hR<.JR+FlTA&AA$HpRdYQ@
%=+G.Oj2l`'Xr5$pS%!*O(\0])Dh#2!jau6.ru?_1i@1Ka<G+CYC\`]]:%#!A-1?H[/_,quMc3Z;IU&J:h_t#^>/pKXEsnD&rr/a1
%0B9U^m#.K?cLb%as+9D#^Mc]un+aSSR^[cW=n;k^ZEW_?rSFBqgHW!Rq#_^@hRrk5$_2/)"&#0Ys8GI4\bCYdra1<XoQ&:9aqTj2
%3QE*B]ZpAr-$P_9_'ZEI-/;ERGGL=Z]>cmYMQ1n@b0t-$/gR8-)MIEoo0%.1$p#eWkKW_\2IhRVJ/hXpGik<E=QR2bIpk*%Zb!l=
%RQ0':G]UD/')I.o^T)VPZ7VCmqI`d%/Gc+KIJ3kJkIgqDma5*k3c2<2^O!ST/dL]DrO`XS9Yh3FX;,BMW$o'p%so@+c'WCVf!c[_
%E-gJhEV\s>9ngW_k"`5I#`YkT.ZrqjQk@WTn4&bfGcFnnMU5hEpKP8Z<WSh8gf[[Egl7DR.0t7B4qmT*<U'92\4'$<lXK$#=AbGn
%^j>%8]c;e=ZE=opbD<mGq*ogYG]!HkBqg>t[!aum%W6K,(8V`=3ftmlBc7\K1rG2KVG41_9(D7'6i]-@[ZU.aq[XJCg9N0q.:J]>
%$*N#A#;SOSdCc;mhMT[GX`N'e_D\]QHo<bskY[T6YsYr+_lbI%F#1aC+pg6ATMHiH1:Zag*n`lq(ChuWF&Upkf1dM<9Ho10jPhsV
%S(I.J/9a]Ra-)MrAEb(0mUOf'8H#U#I[RJJ!:Ph%ROT5@.@6S*RW0r(h@0Kre\te]2DeUIENfF4oJ6a`\1#@mf=JXUpE5?5Y%#$G
%o4.6X+(ng?+R1Dd_=7/4%Au4M#J)`Cl6m%G-Td$KS0a1QF=;s-Pm%>^jL.8,$r!K5LPEfh3di)\T5et$1A.et>#]HtB-)1o$A5RM
%=FWJo<%@=F(Jhb,c:O85\cVJ*IE&_0pc(MBZ3"J`0P4!F\$o>aOsOhqKonsof26[iq`2psiuknK-fjY>e3<dHc7g#Dqm-e<chKkr
%;Y]bnW16ZU-Q7cGAaHY%VPn1M>?H0iSq.K$:Y0#>i)mlIn>&Aj8qfl-I2(V2,RFHr&pt&B]uK3E?pOT/re6ZWL@=<X(M&YJL@]Rd
%;/eZ@1oK^A6qH$;+K)%*5fB('0A'a\NDC=#Yf/K]/88mjIT+=Vd2(tuXojEfYBp<b;_h<hXmKPO8gC<O?u,8jZ]fI&/>M1:.F.7^
%#>GO01W.ERW/>Y=RE`lMf&j1cJkAhadD[5DVX_@U:u6%C9PnbIB+'@e%A1o!lN!L9F<P6cD\B'3)U-kmXRC\&(X_N3]1n,_PQH0M
%TA:&?'$>P_:3?`SO)@N'Yg&$[!]kX2MGQsMT:t@qmNlK!$#Q0QILMK@jP#hj6pU*rZ,-3JNZ/3q'#'P3@fREl(P'KP4G2B8D[8c)
%f[.SZ1tD!R<kN#[6Vq`h:rtgI<ua?`mBYDVI\#eOZ+E%0k%%YZhH>%-6f_dLO'^*HGbDG>J`Wm@F$h6o]')!el'+Mrk6AiA1!*;n
%d)ehqZ]VA_g_>qe(fmG8cltCL^.bh:Ytb*"g9=-@0fJJ]kK]c2l";qZ*hmq2W4@7)T'uW=/%D5H3=e]-OMZPFi^E?TrMCg"4SOSJ
%SpZ(fS7[pjTg0Hq5cqri$*?B@J:6?>1FLB92k8$IdY%4AWkQ@Ijt;O'*J@P6ih2^MLJ[pOk;pj-ZnY(H`Hg+L7'h%MS6t?J@0^<T
%@9:nJ_0$G@i;s$q>Q(Q%$>hT(K6j=P[@*=RPl8!5_kY/.e"nOZhnr"&2XTZ]3dKlWG0`AnIltL8WkBkLHZaEc49:qa/2OqMC9?PV
%d,r+sAU;_F3?,AGRc-*V]'jf1SlO&s?1gL),$J.Q!\@73^b"&8!(q?LR-.[cjH26:eAK\2NG[>'e*U)B78t`ld#Z:]nrOI!'W.u_
%;c22i+3+fQ:9.<<r))#0Xj"IufGHlCn=&aq6JI?X"uD,.C:O7fQ6/R6c.=ZUJHOW"i6ACQ!/I1kC7mXsDhmH"N1CqO?5hC\9M-;`
%<].JZ7n5Qoa<)j`F0+ofjs`giiUD]*4sR2+>+n(#>eq7R(FuP:?rRh"\?kbb%/f_pLIIpHGDXiS2o6HSV'84C;3&uR"u)Qa>j9/.
%kbHi`V<C`Vms:XcmGc_",B18X-_dVEKA&Vo:jtG6,Q*J/;`dpfS@O/@HhQ>[hk#ZH%1RT[9p:i-,%%m9`<q_L#BcO]7<OGN,M"C%
%^M[?k6%^)2OZ\!Ii,5lk?B[Sq/1A.>h-RUHXYQMNV'_bg1E+i^qRhdCKD4BtcW111.(RjL\n7)aS\"-+Fsic,J;r:[>DnaSL8f72
%C[j9j)mkpI1Yt;FS-t^RS.ndX<iS]5oAgC^q32T*Ls#Df90"G'P<*aC(b&=,5lg('Pqg1Cb8?GR"JR6Vs4LBPCg-t:k0*O1$@<$!
%?n^dc@6lD3#q&Wu&C`DW3eL^j:%4@7an]WHYHYpDKVMUgDIYFjd3_./C^McF-Fp<Kgt36OK^=\(7+g?n_NCZ&/"NU5-e!P!+$WAL
%Wib5l3?/+m7R`X\qq:8f2W)mHc!(<ofL"S5LHlL[XKHtR2]k(!\W\NkN]*M'4V9MWVbIsAF0KD(HSG]Q$'R!kj=lbi!;==-JljAo
%EOgc_)HWP^9;KQWJ3`*B*<^=RV,aq6(a6AX3XF]\3`^[-"7`;oXWlC2JYK*r?M:P[h9Tp2BhM>6ft(kGr!uSX%Qd/^%_\ULc"Li4
%6Kk]!p'fk6QHhPPZ_/cDGC7Bq@bJ'1E3l#i+49)"RB<t+.^HK@C)Z:_6p/&AZ/+.F;7g)XQpic2BF>lirR#F'HjXp2k,Z*hjt7\Q
%;mA6JW)0s9]-Xk`6;g;cJ[>^!Bpis]!'uSds(&Ea!F\MHVZ#gG75Nu!7o)J1>R]';4!I.igZPeM*"FP"r)W=RkBEk`c3&!l+5uU5
%5?!"^3Vgr`S8X%R:S.Gt^=;]^K]r#efB_'%>OF)qS"o./^iGm4h5<5%G2qfU*(QhB7_f;ME"k]ZO!,;$2H>@G`-l:QLeG4(2\`(#
%\<;&;+oc$/`$`irh7p4*lgW<:RW4!%W7Ek%3@so3ik1_T0VC0N]':hKrR\5rZ?&i:@@(;TWkSh4QK^\h-ecLXVi:d[."Gaudm>gX
%)KK6*S2h;(\$BU':f7V'rte0Q!p^mN'a,2)GVj%XFkP6G7+ac^cX=Vu-M0<f"&i8:II8rO>AQ$p8Wnn%kG:GZBLuSFe.r(k7Oo#(
%15;u*bHJW2?!(&9pm>9SQX7Jf(:ZT=A)o(Hkp!XW/'E<R/<Uic6=f7WAGS_rok^q144qgn3\r*<p7fRb.;'!qd;3G=]]Jp0BVqbU
%J?C>5HBe`C:`j0Qgn/\&U7sbn[(*!!l*=[WM2Y=-@0f]!4L3T7Z5;m:RiS0XS.hO<O!X42BM\stq%*ep8(Qm?@u\;UD@Kr_WGdYa
%q8-]9LR+^Bp&nZ#!-D@1NP$m(dkQ)H6Wu!h1lp9aS+QRh4X,)10?!+SYU0S6e9g$RQ>.*f'Uhl9Ep=CBfdc".MeuB.\g!Tl?3^"`
%&CfA[>%nA:?Eo!k*o0=*O/(?t7s%%$A3"?[.aHpT-,Fk%6ooH#\a?Xl!IH?n6(3FH[*`\A")aqTqfLTc(nED7e`-%W2Ub$%8'BOn
%^?og0r>DHN_Y5eZ@eAb"D8O"u/m!E._:6p%^UdDn1DK49p3gta8b&S#Z!rgFcPA'$ZfBN(ENStK&JS7X6MY4t`'!t\V:qpd7.R_B
%MgU)Bg>L[4A+=)RN!-2ZT)K*7!P?^=]]TnCZAE,E,mMi.l4k+LRm5_J8i3`hgDO\G358mn,d_I$:R=h.H/:jgdkP`_Xl7-k-"HrM
%f&G@)h1j:pT'Vk,]1=eZ]P1Zp-/Rc@>rsQa(;$*h`YEh`OoU'R_I0l+SK)(T[M$mbZ@ES!rb;PU3G&Jl`Q^Lm]sG6BjJs<5-2"=a
%n+BAF!cEM\dSjrf-``;7a:#&YBjIo@*/;W$,]QUZ@DB,92W_:b+?7$fftC2uIaso:9>B3X2@+S$@YhEY3nq*4*[877Ka@D:-GL+^
%#4,adE/VIqUB,BK[pQsPd3J%I>J:Hg0YLb&gpXkORXgVg0l4:&lZZOT]gQ1@c^.h4=D[0pfd\f:[g**RmEbB'g'cbj55WFkL,Y-]
%85lhB7j8:"7XZI%>\f4GXo:,BJ\8iodaXfSiS\*bU1^O%;/l7D!29.%Xuif=`;QE)MXtqrl[%55<tm`9Z8t[mpDn$P56>ZK<S`DU
%c)A]%O8d\lS&29%e]9[NYSf/Z;_Z<gZo8ZC!b?6@6IlKP2]k!r-Yu.];m$Dd&ts'i@Q7W-WW#[;-Dl$Mi2nW6Ho0]-G\G_\)*$nh
%musm:,RGmJWq97@,&7J,jWL3s[eGk9;uIM6GWA0GN/0alNt+^Gqn1&`qA#ms9o"LRGh2!8`?0)Gp]F='4]EYUf(%_<Dn/(,_pcmA
%oul63J(Xb%"(W#8hsCJBWr,F9LtBB&#4W5M3^Qg>IaStj[Egm$\G0c^L_i;A&E2V]>p<PNN)R[\Sofm0mF.(-Ut;5^NHk!"c4O(@
%T663>nT,0Q/q)GB_So;38\"D,2i/>8k:#<;Vd1TRr3WfKMgrLRK\J`P0]<8.Fd[LAZVJtpnagW307MJlil06T:;$?Hc4b]c=ndah
%5O1T1ioaPp?MoHijmG=m7etRsk=G.&B3crmr2_]n=nSjX`J^@2W-Ij=/ep!fg8X)N:V'P4U<bi#]_GX]ML3CMc4r!]d_4YJcT,+_
%)4u&V\Dod=AF\Ylh(5-0+*"Z8Gl:rMMs'bSc5+ZTBAG/n+\t+'1iJt.\SPh?kB,BbI*V,:Fo$G*0:Kc(\mE&E=m(\Z^YsXhJq)>P
%UEAuk$V&J&=XWRFe>7WH#Q$;YHscro]j7r)0Wg!I"),Mbdp@sp7P.";>hoo'2F1Aig5,EeRoFp(Z8`^#^p2Bu5!#a);nTEpJ:/i,
%d)459\G2YP@$`Y@@5@/(nU,e"C66f<'M!H-IRtO"TU/!^;D!'4GsZ(eLj/?b,>bQe%W2c*9uIB66m/*pe6<uds7O>U4P,4X!1sq\
%r_b`eBfiomKO6cRq&q#;@Ue_*k%.uD_g#CsYHI$JVJ6Wi#rfa@c[YHjkrJ"4=:@%aU/[--F&2C6k/).YBX=Jmq'b_Glms<WTFPK6
%:$PLXRoKaUa(N/5FF\9Gg?'#C8&#N,SSed`#,-UL@rfj)Zd%q=Oro2nb1!6$!3V=biNVN_?@^7'd'q'Y^O1]]p26+\_+j%tf=<S-
%"l^JPi1>+C#:Fs%IT7"nWNr8"bKAUGAWTj+R;Y4`eRP),,iEe=ki@/3Y76qmc-7P&i"XPt@aQY?fbmT<.thsmnh%<W>$u\$q,M_7
%fR]A"Z%tJlK#(%X`Vh]%bS2-,p^_k,*%r4>cNZ2u\11.!nu4VVUERWKRY[^NpA^fgmgemCX4O6eS`to,VcRHWk_r8nl%WIP?eJDQ
%Q0jW(^+fcN:r/T>+'k%<@,R0"&PCF4ME)ZdGiS=t4sYY2G!*arj"K7lB1)8rUV3cE4WQu$bY:FC*T8=':O6kpQa!Emc)r%E>k/h0
%Is6;'bM:_4a+s4*<J>7$e,3Z*,d:(+U2B&knA,B)]C[&3^\:cZ4Lt:*[<FG@=q6H$6'gmeAj#(B5<f,/,><(l,$,2oC4qfLhGIoI
%6Z-\D\Rl$.]5T@HR-fUf7uO+KFsOrgjg"4gWI'$jWs8nR:3i#l;.ka-CDA:-GEd$).$Hm]G0so^,HVN<kZ&qjDAse$'\?6q$<N&U
%iVBYuiEBXu!00d9/e(Prha`sDcR)Ye!8I`$Jf:/VhD(orN^<ZpN(%!69$MLj:0=gA83V4T]cjhdDo^<@g^NGX3X`ACn>0L)AE3a.
%UU+)Zm0Q1OLOL36[=.8s6nCtChR+&#q^`7W,Aact>se27o3XYtAX1/+i&?u/8%8ldg;8`(6VYT(oOP/%[CQ^-^9HUS-rY0qk+8h`
%4MQmHI!k@#NXU5qk769s@"XkgMJlNLe\EdUUX_IsgbrF4C:0P7IKuQ%>(UVI/$/s2!H\4GH$@M"*;_ZUnENsAg:9N@An_E4G]pd)
%/2<Fa%%$*Gp-N+^Z%i'F7#/\nc!DWU(sV*,D%$%3'gVcdnLm,h'0.4G?C,u?,1lB.^a<I6g>kKV%<5?SI?6K_"3NFqY['X5Wl6We
%@,Hm:/i8&r4TEqVgklaVg"e7#i0J+lHF?HZADS.H<k$)(h22te$1eOGBsKG/J8ueVNYDu?`0%1qfR[*7&V<(g"$d:8Ra4TLE7$DJ
%6?<M09]aA6r4;Bu$&LEKUI6AbQ1i/8kMQW.kY<.[$"_uY^l,[jll&"B\9!/iL7Xine@%/7Wi5&ZF@XO\$(T<5N/F6iX`KoY;-nj3
%AmOL3C&']Zs5F'f/K4)qC$REAZ05aDaQlb"4W+\s9\3ZVYO.p,-LIWX%Bu<a?'Zu@r!rL_&FmE\J_,nn@3HuVOf%=#r5F\fQQ5p(
%3Xj&t_n3H3SEBN/B>pQ@`"]$_nn=oD<Wo>Q7U'jo5!8h`*[*=,EoS:JK>)^fd*9]JS&gt^/TW5uILE1C`LGMck9AnoWW_N<+ss3!
%7gi^Wr!Hm\I!GY68!mrlHjE[sI5*i\8L7aoA.N273H'E\Z9f2tado8tAWH'7Bo>V;E%fO!jXMoqORJhAC8ZMr2hiFN"(/]bKW&\n
%S&JDB?D3O>%;fE#'Ho2f>6W;oAUT=):iWXf$Z"B6c[Yb1?QKaQE"H%E@Oo6P++'_q4GM0l;1"Np_<Q:lA1&aLJT%f9#?n23EUX>g
%6=#c9I%peI*o^:OAQ(X5aFZCr30^3hHSKis%r\oqRF+q23e]Trl1ONf4!Uk#G8G)S@G[Uu47Me@IZ#AW(a'U7f+H_KE"UECUG@k/
%1gW$Z6aS&.J.$P\\]+ef`\3]4Bg-!m5'Gl76X6gfcllmtH)m\WRX=O!l^kag(k&b*/+$'()bV#69riQ""T!9*Sj5#T_[Rc7keO6S
%=SZ#<D:,YN8;>79WaLmhf/1/W(\m=;0,>4o$3[_=>A//Qq[jMu/L?/k-aSlHd=IW[e1CukfgaL.cX20jepRB/O=-eL;:)M,<cK')
%N=iF@7j*&0VE$l\Aq."0FmSUWa1jaa<'.ObTtWMNAU:2JU.KM*'82`,0Lt.;;iqKM?Xtrc</'@?'a/.#_KknFr0Iq5O,H0g-'ua:
%)No5BRJesDkjQ"tI6#)o.l5]G/gp0"-.QO^l"+]r55sZCVF%Q'X@1PgEGjNEUT4!bS6]N.RN041ga4`$/VjA5L/n=_"*jKGS^oQ:
%"kbfKJVWF'42N]olgmD1Al+^[%t`l#"7un'=6]bO4;k8b<".]@Y[uM4Ns\W[jicA(1YTY$YC.)pVapFLoTs3[G#S1CG0>V84].rf
%#,np\L8i!aUNrhV2s8Io#FR&h*eb:L<sXF>9EKgR<ibcfkJ'*o^78Nk%ic:?g`f`470b#C%1WVMNaah<jm^mt()`XGAAaicm\Nb6
%T[G6`%7"u__gTe7q:L6_6Ni$`>B#0`E\VXse@/iGkn'?_d9o*HYeZ"O'Tq]IIYr%(DK99(Fs%Buonqg[s7hokY>U^D'7Oq#_eWbS
%Wn0\9Z'f<!6&CJ`mb'XWZW1s.2#S?N>c]DF:;Y$]]R#B4c+Iq_?k'@UL!+Lh<$t7LeeekdU=l)qVm:-NrO?m^,aKuN?3@tb47MNp
%L*1Z%J=)`W\/F9*d21pe8H16B+VnTTV3HaTjLSH=&@O<DVHr^A3)[)F\k^%'55j=-c,XNEr'1[*,Rk#mkD3=SF_'I%1eX_qJJYP*
%m?r83**':nhnsUr[3./s)P(&/nsX<cM:VB)*I.B-*%<K?SK))NK$K`V&DtGs3-4aT.qW.Vcr(L1M0;QmeA.f?W\IesCk?;fSaZ+E
%mq/&LF2a1^#h%ep-.-;T+Th1/4E'15Rr$'BfW"3T$U-"+DAr3\p7(L"TrpLOhPU@(#h:"<s6]maIP.)P#8fX==_9?N3PaJQTL2K(
%8GjZHK>+'['hN,9aS\oG59LJ)O#T$0mKnV'`SrtK%B4Z$ri>'qgK_V1QYIch+em1bgJ)nRE(S2lAXtf)AVl$H8fQl',P6/5F%ADF
%lu9/WjPfq'7=n=YBDmB1$I8Cj<34;nkl]51]c4dq'G.ku[pAY(+(e@j>?Il5;.'1Rr5HD;Dq.1urp]P]J%g=<jL&op<>sa#(4$+I
%4u3br0d?`9^Rd:j$@_]k^E`ZYS:%eiq).,B*UsEZ.C/["JbQY$o1;19"]:p?[bfi!;e!4r2p+>P$3dUfY4q<=;?/o&aQI#FgTq80
%Q0b<gl!4L,Kehl+HiA@:7+Ki?SfcpF>2!nW$Y!^Iag_#ELt].C*jd+K^*6&'.gXN)Zb\@pR;H,A*oNL_r:p']#IpDpncoB/3f_sh
%q\b!+1HT7<,fuH\2Mp0%NYkX5^^lY`TBL?a*_iV`?ZNl!-)U5-oQS@-cO]dqj,:`IkY;_o*sn"9c&#;%A?0Fofk"-2C=7!2J+X*2
%TreAU8:nF'M@ta#CEK2IhWU99T-r%XUDj]$!MG)6V6Na_86[U]:1lqFF.qft``I8*\6hPZ0r9bI]k)pGmZMl`7BHCbe))2%1%t;C
%46WV<YMu_^ifE(ZKCV4Rd,KR0-hFL2B#a!P5%k')4Gg;:c>llPf+B`p8KA=?IJC_Oh](Kfac8:Z^^55gnql03QBRK*>Euqjn_m;A
%-.74"a*mUmC0KUCm,HgoQ&#NlJ'VB6aS^6t6bi0d(SC3D??+MNCZE.=g":m&ilo)<$n$P:]uoO$R[]Z3_.LW6G#"qq[^D(JLI]+(
%C^;DVc%"/&q;Q#@=7_+\(o_1`a)/`__7$%jf&^asc`;V>=%l;d$rt;h/L8_R#@9O0Yu\9?.I"8>ekcT)(6T;Vc!h.&'bWqn9lW(K
%[aOMo?*.G*50u0LLD`C]hgFJSmk);&4&;+`fjAn=,8*QQi6%C.>BVY4GMH5T4qos^]E]m$+e,/bn6$8G/B(rj]N+Y#)WCB[s(J)=
%*hWJh#gZ(_g&sVo_Qnq5o0mGJ$)^.C54$3N`[9bB_tZ&CF27kO][RN*>%%8C!Ot/7j\VMm()VPf^i'_qbbO@`o^j4$^"gaM'K$1b
%.`soXWH&5F#er"66FZG*,Efmi,+Eq9HB^&/*;$OY%9.bi=*=R)Oi?JjjJ/iTffrTT]$9>RC7`s"XOu<h6jb?/6P.R7jXWbe9F,_m
%W]U:c8#d"?HWJ];!J5T5<K'.J1')'37PWFFm*7#R#o(O4f6Bb;g$tQ^q*MIa4&>1%3jj__'kF#Fs"q`e(`7Nea)H+BLg'"'cF,.^
%U.lpXk:8<'.R"iu\kddKmT243[XPV1]@N,OSbH%+4;'KBGKYnZQ6<p5.?eE1jsrmdcYlUYhkVD!]R([Ro?euYg'>IZ!i.LK8hPb3
%.M_^p2R[`6egn9hmjV%LiB?@WFY*?9nHFeZ1Q.Z@.=_@62A[t\EB\@eoRaKZj2qJ_h0\r"X,L-WM\f*D@CnnmF2)>:;L&(!"N4Pf
%4SF9p"L?tf!Xu%?o["^VUN#C$-l4"eF,E19jpHsS0IDa)\+=qAS[d18":C2KhnMT0,\e>U30hbeH`/VN,7s3s7^?[q_cQd0ib:0"
%Yejf^HPig'=luPb@W1*m)7e!ma:,#1@I]XrjArQ4!6\u/-g.n#n7ts!HTk/OmKf%;RO,=b[U/0UjRQrf0q2#bB$G_k>p^1j>DY2^
%o3s$T^cAp\!%C+K&>O@4]Mq.0otS";k<2'LeBAQsH2aG`S]#eG_-h/7T'4nO`?&;CkSb<g#s,<R>:]!%6CDc`V.)k=D7i"4BaJre
%AVK8s?n$]%qO==B5P\,5c-ReO2EG]P('.3`);[`3"\YGYj<r\Sb(iifBp:+p'6E%ETa[BT0Q-=2ig8Qfd].idKi7>;!b?^O>-(ps
%5h,Q]lW$p+!m`=:7"!6)q./;r<g2IXnB%@`]spqPnCq+J90qdG[Sc?(at/b0aq=QYjN8bN"/2qNd&(Kea&YKBQcQ7(NdccFUh&?`
%<?%*<l='!c;WS!?9$'UIlYD6HUC%B;jdTOj:''-Mps#1_Kh$q<#Quu_X,X\S!($sVK,hM].oXp/OFY:^U^(#J'cVbOPFa]JZk1\a
%`<2;Mo5o=j:oDH?#Qm#'#Sk[>fpqLDhO;pD3>*bhQV+O1')niW6h`KW!f]Wnl]So"J9dAs2>#B<-QFH!FBn2'/9#>9*furHME_DS
%aYU"GdQ,^:2CCL/gkH(d>?PLSWj#,g$PC7^lGm?Q=@t/ll7E%F>#K&I%)Gdj22?3:I'40]$'quV)5P2.V=NNF?'$1FajSY\f'R7X
%bcG6+hl`rL!au_N/J35dp_6?3k>8WmS%)*`T[g#o,!&Lp&p)!9GtSK#\]IJtW#.A"[=n6S479=cok*At?H>PKnL/CtG\`Pjd8W0*
%95"o&j5dMWnu+$I>buV99S[MHAae"Q4\A]_S!N=#Qf&TW=ShjFP"r]$BTFT?Nnm,)C^WCccT'$:7Cic]45]#CDSA$gh>0dUg)5i0
%;?*@LR>^cp7[r?7J-+YeleSDQq`L].,F>]o\pCg39Q[,n]%UT9WS!m+?lR3k`gMan*X7(H.pVqU(c(ZgS)$Qo0!\C/o?b,bD5!\9
%oAUQ"!@\2#kG;O7(F'\F;?6Jg@32plEj`-[%+G\]*np<cG:R+5Gn&8Z4?2QhH:^a$La?JTD9GnZ;gUI)&r2j__`(*IRY#jcY/&;d
%WjF3+?;r[o\,hhf4bMU280^M%Msp2BpED1i\>%5::U:U"1[43Bh>pbfRdcASKB>WJ"C5]<*YWhT!ou0hMp<pb>_t@5H%g%<bLi+4
%7=dS'A-^/Y*\pr2K,_Gi\h,i/#Wj;K4c;<q(99kC,I#R4da!g6S@uP\fm/R+&ISWXg]QNHdPX*Q(WiTL?l`NZYa/*SMe37KM!l\V
%9J]rUS"7JMNB=k8@Onc-=YTi;DDIL+>&lOEI%*8R+\'.+1LP[?[?6JE_9&ek&XniF2/cTZ1*oXF>A&q;b8O:".g(k*T_(%hZjK;g
%o+\(GB,b#08$VX?d62Hn)-2gDR*sQVECa8">ID58/94\<o_OeFUaTYERMfm!D*oS->c]t&bK;6q-kJ/6FC<=q_4#(-*L79UOk-(s
%Y0'Qu!Zhcr_o<4"h3>)NimCY<4VHP#koY5.D?1gjJ&kRj^T9&?(c>!3)>6uXXBCUQ+t@oaPY$[AQoV@kiY\k,7"/rUZkO\4k+A.&
%V+ahdb#%n,GpI8;2]''fO42\@iMIj305,!-?/iPngs+;VY#+X#WZiDl-Dichp@.4@'jY1VDRd1U,_7c!Q7\@(4!lN\h0Yr($-/U'
%gD%'>Yt#+5%>uKa]nai`Y'3SeW6XW1>,0k3Ps7P>e;*ZjU23#S!lO)WI:5TS:5DH@kj_@"&lRZ3cM#6Xi3C@jOQ?o.3U):Cp'JSg
%7dfWdXm^UOeb0RH1*gO`89-Wp\_'F)9VJQ"bP^*eILlX5Jtf?h+u;"7Gk!h4_G._P+-\0-Ef6TZ_5M-a=4$(R12+VFNLPi)Os6_`
%M\1Ho6=XO\b'q:(!<*9P_'d9!6Gp9D5=N.WXs;MrIW?.?&4850+QfC#,=G]spF$4>G/S&2]l<ST>Vb.G63io_,e<!]I3`FB\i7m/
%P1-/VE48^^Rk<6'$"CpM:gk]s(?V.\aeL.UGo_RimDIJMorIY[`g0P]SPnFnRb)ZBr*k?k[RA,%NhH>B^nuYOOVP_/BVl-`k,1Q^
%[?gjO]mtQi.21Y:>2FNrN!&9jHU84jkOpE[k&(*r_QGa&2K[dm\(,#?T,`nMr"?F(g).)+.m#lJ^HrS;ThN;\Lr;DBe]mH_FP9QT
%e\V_F:t[s/M2\molh33sfB817Xm"rW_dtJ1gHHu+<>*BjU?l5\o,_%(LWIDNY-pNoQ:c.5GsT+t$E3]i_S@OVfXB?hBIXR^?`g]H
%al'&kDAAN]%Z>T^nYjmMm(qrg9kHm2^6Zqp(lL8>#VrS#Q*d/Q3+8[l=dM;HIp(ETQAaZ;E?e6%?gJFWj\lMT[>puUg[q(:1V$S$
%PR3"&Rn%HFF^oKY'K`F_>5i?YhP\Pcq@%E7)T?Di#@@i3?@1m"nCc@`=>A.H=qEd2#qm93<S7!)(5$RRpgR`;[X0`8<JqtOmdSbk
%o3du($ms#@.m*Fb58"Z#XQ>&U[43PYB!dIN8f;Y1DL+NI\\mu6iN9!bm(co?#fZ*$!TCQ.NH.=KpY(WB<-F:?goAu(8SW-!Rcl]D
%,I9BP7oeqV<q.m??c\!_"J8aDYB31[<m6h^`\E*&,4:5Mh68FarfkDmT*',u7Cgto(esa>CrsbZkdC/:KT8=DJU8oL$g'\hk/)/d
%EH[^l=J8k"rm!t-'<rB4#$Ql6""4p1#6b_TfE$sGh\V5ApC`&>#Y;d\Zt$YKZMp@0fTo1<$q@ggKXLHLQNG412o<VGZ3g0SQ1nB2
%g9C"sB:hn=Am0Etq-2<:jsSeZ:X(f1(ES6V32"quJ_qM[:kZ;oac8t/VV(":F#Y3b6OsmV*')HOa4/8IV2k*jAtX6YEH/1qBO5h?
%4,dg1&*Hk$dF>SaGft@OI,N6<20Z!J;pRi&[;X]!64pI3M!9MJT_Hi;m^LZm56'9X<nb`sR?a*;m+^WE#OI(_3tXk1q'#QtGuQCD
%BhlBQF4@S)kS!Z[#sCesRb9clFJF`ER=B9g%pH0"m1+iQa<\YOK!4Or!O2\]5Ngf3fL3NJ83nS5He:ZTpH<nYX([<QmNc:'ihf3"
%mO`5lVqk'o6s!.:5IVn?k,j<*JLk,kJ)&2f#J6C:F+q$r^%bd!8kWtT+^E$1HK:6U'YZ7.j>/n$jD_9=S:.0Z@5L[VJhQ5q>H!hG
%EtraDS99UlBoLK%!qi>!Z=Y-=?gU/i;/[_V11(bSLsSP.DFTa_Z)_R&J@De*F,R3],3(%r5)m=fKQVR(U%:415.tRA[)7/L3p6X@
%m,$1;$(!Un9j?OmcgBh2-f@3]1gk>^72pO%[..1=&'b2OWpj`bGVC64g^AEM1_b,\g+hO`-#a_KC)S8$K*tc!$6_"c`N`[%NXBs8
%/?')J;5V#g9]Tkd9.B.r4$NPc2^i2G&S6mUWkq/8?\17*)_.4)A=R-G'Wu5V6L7cD&rf4[Vsn$ni4\7#93ebujiY&?_"K3#4pXnb
%R2Xjt`F3EokR<q#Hnr21=(aE*;d_<Upb(lkf=Zmk#(>0R\j`4s1t4EDmm3C:\*/,E&#.`3ZFKsY91A%UqSqJ._'mA&.#,X0c9)7k
%0NfQ&`H\fc;1]$d9,+0!Y\>W[bji_ANcOQ^c*GdH>dqnicosiXlBN3O#FFK:4*"1_lM:?]/a=nua"6N%q)IGEs+$HRqk*P&9`4m[
%VaF)P[sT3:cp-XZO@T=&J&cC':O,'uq>Z8s6W&DI]cLMXQJY%AK4d=h?Mpnn6S4")]cV#H4Ql`H-L!N$LuK#mqEWOoHI`I]p<cff
%O9LW8o7SZ/oTV">4cnj>+\S1bk7@+BB0@G3ZomF`8V6)QY6``Cm2,<P-TiVYpT/:dCS1<\E:NDhO)XDT4=&_^[#a:+TCS.am8JHH
%J+Ql>M&/DB/+MV[GYA$eBDa&^qQ.`uhgNd_il05i9t9t4^PNakkrEaT4m>&ug1S)HcM_DS-a'I^4XaY7X:L#CTD#"(n[!ZYGE!t5
%.IKT"qGNU^Hd8+dcI]]-PZ>?Por,B55Nu,:0R20LnhKa+?cBqN,G#XriK*b7[O7[<Y%XdslX/$DHIg!.FnMhs7J$%008ilqZ[N[,
%gY_C4na:%</Ls4PkA<X2lG;A`7+;kkQed<bT.;P?;dS'oksPEJe+MmiLY;iH_uUWW<b1eQbAgL,Fpia-Y0p<8fn6W.Y*4YXaNH*F
%mq*P&'$<u/!UYI@5>bc+$j>pS^$sH_A*UU,?-@?1q..]kbLQac,qPClL@grJ;*U#[a-l<N(,1BfK^uA&Al"Jlp'P.R3R6.@"0n`:
%l8XCFR*$f^4i=*/&lH3=WXRa/r,7m%rV6.YS>=L//#$@@48:p-TM>6X!/@Qe,H%2k^A_!4p`.]dT(9RjZAROV0:K<;+91?JdJTD+
%AlZ,R(UjiH`3nF>hBt"VG^=]?,KcIG/nKT^^7mjQ3'D_MP^h`h0-9&?nkrRs>A3hX1<Y;7N?7-L:oJ'H`-.F!&=t2P/'G^6j^%1V
%K2a)kN6=QK"E?9VT`ZqhiMCu@Q?@0`/2n_J,=,]>Y)X#ulq3&6>:AhebR^r4Z3du:>i,/n<[T/d&!)51p^5+tV+)d(rC4PD$1uX3
%[9:5)/"dDG;_Yo#,6ao-@P_$HG7RL_c'Br.I/8bVf52T@rEeJiJ:([=7?.N?-\dQnjed.9*Zndnb)9SQ,#,BbWgEiqS]tFT-4`n%
%Dfk1A49#;%#YO7GF]dWel>.qlVZ<U\d#*9EZSs?$)cutR/W?[.ld6%$E?$`n;Or8ap5;.@CH!=4n=>`o9YPm9'"BFp'Ue9N6%`6R
%"j\FK[;CdP=SEM+Jmp^Pb%@3(&!)3YG\_6b#P<2"QkL.D4=r?S)1-tAJaScc1#bsG8F0P+jlUN-o2<Wfb!R5n/[Rb-llSY[p%\G$
%%rbXg?,0WBSYl;t\64*p;nn'""$bq(h#UL,8]1.C=EKfQBmAa8Tm;;gr:]Ur&$8pWpb4^6"MKaMS4cpk3s*]uVde6i7B[(E9$=kt
%V!'VX)o!:5jP=j@>khe6?9CPN5Y7:50VhaVhq_lO*2c>_qUf;W8#V0;n:9h0g^7>Yd`T.sTMW*B>63!K)Ld)1Hc%qj4mI=HM,m&7
%PR\3K&IKQn5Cm%=^;-nWM0<.7=(DpHg]i@5:?<6?fnji78Q1p7$_+W"$i0JU?T^N*p9d^,(LTmNB/T/'>jaB3Wa.co?2u*A7La^$
%C*E`)0u<#c(8ig(,W,EX1#tG\s.'29]q)@g#<%pNZiTpjno9#dpe8XOKtrmSWt@0:8VEe38<E8M2!'T%*=?b7on7OW,o@rib('HX
%f:I<p!#o=ZO.-^8\N9Z^0;5`gno+=d-%rnkmDGrEh<J%,b^MR#Pkkq1D6ZMn56(9\H`1U0'!D=JVc6cX07@$(#56=u<+XF\?R""1
%'J7XOUI8g]X(2Ellm[u9Gk!.Lk1R%(Q<2K-ZJRA4Xo]\FPmSG\(?LI:>kPN@P.O_'q?GbBoB+]glCbp3c[YHbQRW>,f%U0t?A.iF
%=WFQ29TZi'bo>jf??ocoY+P)&l4/u$[am7Ml_[F%Gl!>B(PM^.HllrG;5>[uBa*c\(S7,<@bL2?J+:Mrq/l.A\1Te+DJE,"ZpkD:
%=N;IEnDY$dqR))oZ_@J3%0+b]QgY,%i-`&!<0p-Oj+))N'qbdPRQ0SadKDEuF<QQ"md^+V*?_>CSCSdKf&M,mZu:;Km(cQfEooH?
%a],(t`O,gFdehFthnk(<#cc#X'rWH5HK`/&S\Lp*jHoZdUPCX57I_eMU"Up39r#o]RG`808%edF-",5oWPC#63Y[[+i?/l(a613\
%J?3B9]E8fK*8nJ_)IQieH%PD-pk;-C&.L<SAgA:<rbBP!N1dQur<fPnA*L,Y^NP,Q):`O1RR'uC=_8\k#2uhq;?X[cAAl_>!!*[)
%$a6^ee[m7t@`p'T]7kM"n_(*0jm2$GRa9SQ-t.0@\Kl$3[O[^L%ksRUosB'0T>0h/6kDU1QS1HqR@cqHr^I-!4@1<;*6(&m;&qKK
%ia^+k[9+N+[:l%4f]_@!Et]Z&`AXWi%N4B@KJ>rR.^ppis3Q<u8*?5OpMIZb.t[Xk-HCLE_C`0hU\(p(fMLG+T]*2CQHg6Mmqob:
%Z;I0.@Yg92^@D+;gG/R>7a'Y,]%($+!QZ`6j.oI0c.%Z+I\-sF&?sDcA+&+=(u3:[l3XB%nba16&7jf*0oVUGgt%A>GR^fkYFQ8I
%9r5r8(/2b@KDL/"X%L3T[qYh1RPXjHDfjpf3L6X<AUb'+5YJt6NiWnoHf^nZo/qNq%ld"d>e$'<6%.l>.NPi@Rt54_^ARNsY9)UM
%KuQJ?rNPY#&p?n"Bd14](rZTYX"77.b(%'9ZL*uf#9_3J?bsWi?_'9Y/AQ"(LbEXh)>"Vl/TS/NS\H1rm&UCTD.1FhNrj,K\+d+l
%OaTYQ*]rlVgsK.DXUF9Vh@-.k@d"juch7k<C5GuTa_D2],hq?-A#EVdH%Z8MAPV4ud5F+/i11IgII$J8kWOKs`0uAV'ddHl7;#^1
%r=050Ac)4N)rY,g:!akYeebDY4Z:/^Jk177<jF!LpdPKpSNp@g74e%AUJXQMU+,3=,H546PaaSh<6.'P9S^7_.#)/L,gskA;k_QL
%cH6(\r:`B`hkhJm"'uB+#NT&Ea"X66(Gh5miXrW3n97m3eOU0+**N\4@=X[!p+'6r/Qa?*%l3X6%_Oi)EUe[g>I4r_b6c?C6XWWJ
%qm`JdM*QrYdh+V_^m-HrIjj3R&[oP&(S02g#@9R1QAjiXY!&dj96.?CX=cBL!976,EWl9H/p08qo?G@qkuQ$7<03CC%'4l,Gl3K?
%#?Y#8#Hi#/T_<+I:5s_I&dfI*4&t,.49l1DF;#r7k+lBU!&>1HWKUkW,j+.I?bFL2VbkQG2C3o>#1JQL6Bj6Emg[,<ROOtA8ph5J
%"QhiFf'(d+iA1/C-q;U6be4im*]ifI#cD22!>]tmLLi6c.\i,:=(oUXcT-c+KuqW2kDE5GDH.3kS^b>2J#o6k+e"D_)$+Ebd=E*`
%6\N]i!A`P34H>ea#iIA]IBFaeZlNF;$F0Ph$f/4GZuM]&]C8_=^Bn!V<9iH<mg\bK9Xj21^0)+X07CG@D3+rjCF3b/i'0R2HX'8,
%aNjZuN#(R+7ddaB_6tqoMkK?<$_uqNj3um)hDsQHkEQPY'%i+^EfF<?nsA2mQK#m;MqS_s8Cc9Dos'h""AKWPSSpNp\O;YC95hi=
%IFj#da4%hK/B\r/cjGV]lfj5hN@Dk>21Dt5TQo0)l<=tP)"ud\Rb)B>.!Re1ZEth7O3`;/k.@/gr:?Y'A?rMhWK1a'&1Ld'l:WtB
%5^;AYZF%fE#:/#si$GU*]H9ec%MAMMJ<ua'6tDA)J+4>F/+J0=mqTB\oK#b((.'pBr,(<gQQ5YLQXs\sEW*Gd![dMAl>).r(X;(W
%I-eY\]4`;H#<&!\PjU;F^:;o%B2&u$7S/Kn\&f0gFrT'o\IhhHG:U1:]gP:,+1;YIlN+dcG2PN1HgU"Ap\Y;`]uolhLVsdBTj_C]
%;](Eigp1d%Wd43e9+gp.n$n[tS]aF3&Ge=Sk;PHkmKc*Kq>:LA,,"MA_\E1j@48GfIPFu(.GM:S.?2T!Kr<X&r0hCNc&Qf.Qa,Pd
%>("6L@#rY6blL-I&4BJ^^llDI2n\G_3Pa,%FEnhqKeAFEir*oN1+7kaB36hX\BIgEe"-'iUT?_)KLth+naDLAO7O0[+5^e!=L76K
%(8p)[OCg5rrXnVg`eQbeb1-c-A5ZG+-iTppZ9`LHTlK/M'T40`6:_"7e)),%Zl[9Y"8h:_6<[m4r$?I];UKT#7o^XnG!'1@&FnK`
%8*(djq'<lp)&W"<U;W%H=fZ+%3V\RD]Jme)4:7G<,;Y"<3S<#&B-F]G_$Ti)U>d+[mI@]'UnGV;rXbEb[h'U5,gASX?>kH8WRgC"
%6IWsb]_Jj@eljb%St(gu<Z4pL"9=4O`SqGZW+EICnk(68PtPR2/I#Ag8hZru,il1Pgcou?`?SV\(`\-f6#hI%dX_RZCN2\W-Xn9S
%3b"f3^d`'))'lc'-#I'I73&J)i1Rt-?AQjWh`%/,iW8Hj6>[moPM/DJ4beZ4=<MB:7/6Uo>`,,1=&t1d:kCH"CTR7\14sf00+5S$
%WA#DTnD62gD8Pu@JZU8fMPO>/CT@KlZ<h`Nh$So#;I:Q6/4k4B]*8sV;1O'P]G5;]f2k2\^B!k$a8KKQhAbHtCtfKqp9:B!Wf98I
%,)@Ya1;1K;M.%4@U&Bjc.b"^,'TrFu\!"fROp^,Ciid-UG5*:>rGOgu[mt[\;5^HT4h[84VuLjbhk=,D,#^nL7@&@@(EB1BAWsB]
%_s!c"D,75Zokl%77noVq"&9+!kh3CFl)QgncaFGF@^#oX<U>p,hDO_"1AdesB>sBl\^S/Q;.)o*HOIgW<+ZohkuQElnkp(J"AhZ"
%GCABu`r^$5O,0l1;3t8PbY02?Dt+X16tRg;KQe3(jBSV-0Og(e:b(j:k6R9uLYcnG1*Dh9,q^B*GmP64SHnbXj!RW]ENc]s!kjF+
%%r/OtaJIe4@t632rJ`D0*Y[i=V;T4LnWT[(=RTf.9?hF415hn"rRXlG,3XUPb)bh^f#=W=[sfp<kJJ4+`3G-T(L_/Kj3PpBD!m44
%Kt;W;_2VA8Ql7jdU$f%F%l&Jrl=TQ8o5%RdG\,NCGde/(I!lomBA8T<9r)<(?J289N`pC<k.L<f,ngm-"_()VfsW/E7j:5649=++
%-hG%-j0L=*q"(FV9g6Y!DE/Mk?B?\$f/88kUV,m2dms/XY0atN+T-o+OY@APY>nBdQD;9\!5e?6pQ24$+oHpaQk?ZpJ0Sn\X+5jU
%Wmg?Ve-T`*T$r6gfd.#]$%/&p!dESt`$?#nCg.'.<*[\[le/osf70/[QlY[^4D>c7k-=f#DDEH_$\q"]\1j=Pp=,o=c&tnAD4nWm
%A+`p%=??D?VpD0f@u:eJ\gBbV\OCEQ%Df.(^tI:+7Qe3ePPs?QT8e<Ufp3m7B<W:*^4EdS0'Cj>>AY4[&O5$IWY75"N4t>$&Qj9?
%)gSo:;q)k%[jjb*0)ap("T-MVo\M%LG+5RcRW=Lb:]P.m75M_kF%@Mlf"))305Qn7Zeh*_V=P;13OT.PSf;l7n0XOJ@$gK#lb"Gp
%>Ld2Tc#Y%&=$bG`Bd=qIREb&N.Ac/sD0P:X;!K5R#<"#G:AP"8pp2Q6%p[.NU:Yd>6tY65m4N6aArgkY9k91q,.1p_(Nt(*YR.#c
%qRh08C:l3\EDb.8[qBcgd*gT*B03m5>X.J<#>F.:*G^Ke3Va'n^*J(,cW,BN:9>hDpZRcQiNgrLC6^G:Rp0-oCHZ#M$&b']fVZ#.
%hD+c$cb;Pqra'H>D%f#JT'j-L>N>MLSTm5P'Ki0Y+6IBTiXZX8\8d.jU0c,$DBJite#:Z`9q8[s4s[?2]VJLeW4;)KLie73JsfZ:
%UP59]_t4a[r<?BeHfseTN*"nFGd&dKAsM+q[]Qspmn1dfp,OJIA?u,[gMEh/ff!EZSrLV8m89L+NQ-du1a%Q_AG2`Br+qiQfK0ct
%`pEl5R5I@P3uZ3)b0\#3WCT$=$06X"!`fSF*YHnkbhRYnC>Fa)3NAW_>=j-7b@P[RI=3enEI25SSEr>0dSi=0"H4'!2+WjkOHts>
%%mldI<>&<l=*'YeZ/+d&.9o!B_#Z.9=&Wf1fWkNCo0l,FRjm?iLQ>onl1urDgKpsA]?53?[OnOkC5OjDmn'*%p!(Am7stna`<0/=
%Shf9/dB,R+!RNY_(<mUdIA)MU??Y(q`qU_5*/uP'p2."?dK,`+)`_8#A;65nTS9Rn2V!TLnnRq@ICN)&"ld6PofNJ7/BhZ<8YU[Z
%OFMnFcF07VouX]aOaKd)h8LOBr8WT^Q+SX2F\36U)Z&K,5MtS<F3>MJCh$O4Y,C5S-<rRcC9:1,85c(s(e?_eN^;<10OL6(B%N7C
%)k*.d4ecUY:75?[Sb#dfc&olY:\)a/lus7S)_7SP\!sCQ;eD3W5S)&g_fH]RfE2";8,>dd2q;Z1acHa&k3sX`F\Wo,k^\q3n8!PU
%7>F7r>0+?/L:dsih4A.2hD$tKmp!O%1(d6Tn(bPNMqK@.-ib?l&0E:j8rmDOj4N;N^eO`,Or!6t/EcM\%=in;_`Ab1U/>'O!Jq"G
%L++?RL't<q<2dWB4PO%6m8<T!=t2_iKQ38dFB%t%H`R^lnjDiHDQbX9Z9fT/CeCYgN2(21%rWom0g80[CeS7F'8&eO;eWIE1N/<b
%lkjSWcY9ZHFtcoq3B!edh1gRB=4T%#EU8PmAbBck`BEUWXP[ik-UM66`*`EMfcbRMftZ2#ZmFEqoqB[]W>3RJ^L1r`a_GR/q#p/3
%*W;KmcXR6*;J)d#eGI,F3ftRtN6cpDF[q8:DO^lCoBm<?F4L#1G>"VBdcOZ<#`2SFMj)TEiHm(,5gR4:Ft[EdRLUp@icTt?4D^_%
%4alUam6&cfb/,M'c5W,35^008\RtPOgZmJ#TAR4T\'K80.f'82VS?uSZ_</$'l7@4dd7ju`NJ2'^1)#-c)bksgDiYbG$?Z\VT$1%
%)aCH_"D!tq:NkT"@*QZV]R?at8*H!i>VUO2FHXJ@iEPr^83!\'PkXUjB_#@lP/Bc%Nb?U%6q(j*a!g18g)*S%+6MrP0.kYBYr&!#
%KAsR$lnTJB\gK'<_H>M9,:/+m3q5f!hO`N;]QEu)_lWT^s84Oq^]3o?hZ!4UrklMJq<u&rko]rjYMAV#rq,sbi?-\TmP=aUZuY<$
%qY?,s\TRmQqe8FXci;$-ro,TcfpeW68]%k7k260=TE!NXrpP@5Dh%W,^\rYKp:'5(s4pJ#q9T(eC4CS:IK&?[*H"+?F8X(nr@\Qe
%;lf(g^RdBdrU`=Gs8"t+[f>pIe:.6q5Q,O#Hi*'brSd\7s83+!(+>j/B33uk^gg9(l^[<I9Ei5cl(II.GE6gf\AW(G9=rsd(pgLY
%40f+Df]a8uB#>8ADds_ab[NgMEC`rhbr5Q&gT*P[N=MMa>R,:)Yo_Gp0ieH!Z0H$hSHm;d`VH`p3gtU`ahaR=\R^LkWudj>g<:il
%$Ylm-;3qb-2Xkl21OinQ[Nu(1F`[_"n*oWqV+t2e$BP[c_hi0]>=B%Tk/#=[%mu^f@gKcP"GgKmg',ktLc_)C,(O?/;*1"bUWc\g
%-stSks7t_P++&Z_S]mha"q3/,'Gp,ra6q"o^PHdqMD(tI>7K<s"fue0g#a!Kg3+Dt]319GWd#!d1Of,%4brJbKI3.:fT[dpMil*I
%UM_&YTk1d[VM^Us4d!kB,,Ydf)AdKR)a9rtI\Rj<J=OJRa)h]H?-Wo;)1Ju?Jk)K::]iXs`r%tA!o2;=f4S5$E$s8M_Fe%RB3VDC
%]K0kQa_0#k=9HT\D,2^%/]^A%kqR&/q69E>eKAGK>N3*AFBQLi_SYY6/Hg*B18*4U[`B0!7.5D]BX:+kVYWR]O$%/8gD<,[JnV;7
%S"jdunM/aB'8&f&Bmfb>ANaK;@Qd0cg0Wu*Um_S/HbZ4"=aF*rq!P*s3N9%G)=DZV.:=b-I]@eV[O)dqC*B5//B1%V86^nNA66<O
%]N^PlD0I\!Td,"+h0ii09P]LH[S5q".7WnTl'Y*toZu41ou3WHY$*4*03HqE1M[["o\u]'7DRZ7=5hAnMPc%X+IpNGN?ZJ71WG6;
%0o7M3O!RA\WVKHoUQnK92[@4K;\8TLS(2uh:6SPuaFT2V7aa1n=D!+bo7pj'Tj>8$G"3kqIUXWtdjt_cddZB[jMVU626'H?ER;pc
%W&cH\Pm7Zjld':2gV/oD-W5U-N6]ge2kZ,YS^:E:V3kTMCgIMJ94uh2#Q_eJl)SB#U5LS9Ed*P"!O#]Q`1cLtdB#LI9.Ue$</tQJ
%@RgH%ZN;$rW.?%ioigFrj89gX-f0hreU+VjKPOd/Ih<<F<T$J,bk"OSArL7OERm16<X1l/:,',6+Z.6Z59%]2r5I>?UqT0-c#"p]
%6<e9P6YkkKOiana;;KU#$r3*B7\^RG_uaBu]MeVrHUU"I)DM[(FS4dIaQ'7Ir^VRU.OO=sFq@7QH8n"DGa]O@E9iS9eu*`]YPVGV
%e&]/!oH%X$CF`'C@M)$s($G!ccBZY]e)#malIQmOne;Rl7Pd`]]KcFm2Zu'mj$)iiS]ES)P^o4B]OVsuVIV[R`AtK7DIV>K[-W*=
%T2Pb[K<e:p6)$nM?16pk@F^_l<:Ak9c)`$qS/ME._m=d^am9_XqD?/+!fnY)"n/$6eOj2g\]SN3T00)^T0(VW3*RiW%SLOjC<Glj
%=iG68p+f*>M`L*ZR#BgM:%AsO!9+&^Vee3j$fILDR#)\tk&h)%5$no2$#YTcTim]6G4V^@4Ph-66q0,[FpKJ2a(g4<J4Fs+:6&9E
%G'k(eT3B+4!.0'NDTPhbnk>2"W2ESm5R1FbOprflkOl[(`6qU)NBVF;-Au'*W;3]:a%dkka5M!DL^.mP48(QMCT6!p)Wrm#Y'm%=
%KSLFU#jV6HOm?,YN#`X?CL8p[i&m0/-]im=cKPU"B/VuZ/>AG8ik2.]E2pQ%6F3\UBo^[U"Y2+KTGoeYbG3TL?RisCPZ*+V,[uTb
%?CgM7@"Lje3/PShT-rZ<0MTYn*$mllGnP%Uo[7-VnGojD)WQWOka7.:opS]'6rTW7*dK?LFl@Ui!f.?6oCg(8+84?&TXU9n.$3R4
%JZdZ>6%Y>6%V.*djG,B`O`J(=&O+O/6G8P+O*g$PpB@UHB^>Y_@+C`No_F:*2ecOpO_l$2Iq5<$8cK%(C2-+`@'c_D`O";V"XZF;
%@8laU"'`2K++F6e9qA2CCthpSqT-ZNAVcC`h,O%CaQC_bpOV_$=q;_.^o?,Y41B0D3IG?NVrkle[W25\7lGDCs.QP75Oaf[*;=qr
%4+Ba,j+hgL5H>D$@fQkOG%)5VK=9/d6AE?-(n7a]F_h`iiT<s<7goUFlr.l0KT5\.j:i$$5\Xf-'2q4S]cOLJ5mMk1Et8P1@\`^/
%p[9dA`9a"9V,J9u(G(s]MqTk2*-D](*>('SN1Z7m&UVZ4;8jW[[UYdWplCprCr7m@:'H)d260FpkHn*)\7HSQ=^*l6/DHUFD-C#=
%?5u*r)c#EhY&2_rLolj1&gcMD%ae>Rei9`Fn3F=O1sJ&JOkRX+qDWm86f4X5-b?cAJ%?L0JM=UEgZQMg&3)=f2"RW&U*I\H9.'sJ
%#KdjJc^@u+4-P)2^3a7(GY3'gGu\E>--?TkfA#HJ'RcsY.j[B-Z/N(P(HYq3^(9^sDuEc%1XsiCF1F<P`n%BM6O/YC03Kep$P"ON
%kG6h017/p%:+b2dh=,fuMqOX'Ys0mF>`4Fd41.+$Ps"/Q'JSj.B8mb7Gb"CU-cR#OF0>ZT[j4_d=Lsq1Z?Y[M]iT(JA"+I$K#)\;
%]HK*o'rgV28u`'XL^_&kW`WcM=Ro.48.-o.ff'jXh"4Y-qTjLY_Sd1K5<$oOaCHu"k<Rp1U;`q*/fd7@^"%V#p&F7eJ$K"FYPt3U
%[o_KV29bu^#(uU.j"7L-F3n^QaXH\PY!>ZL2GIttFK#VQ`K]4q$bi.I@_[i:68'A/b6Y"Ol90"LQ1P]sN,7_.F_STE-5bB.5>i!9
%Z7'T,II'CEblcAuHZ+bt[OK+$QL[?`hUL50J,b;=37#?hG\(n/.Ek!^%`uhCFe0L[-I&*[B=`)(P4?/#,(j!-%RdPU0RW1f?b9]R
%(b>'*IJSi7@;DjV-jtR!\:;\%KuX"#jo_o.5teuieN^r4(H?NIkht]+Bs6?jUdQSO-0QCcN,emf2^#>:Ok\$ro3=Yc4j7R/5tn1J
%mTW`kLc!Si[sRe;J:cZ5C_HfQMsQ!=V6bC2!PnLhN"8nA(?&be!V&dQs2]+/,<hJY`b33_IosZm/um3la^KM($(!Si$Ge(ap3*oO
%4RS<ln`XVBaqmE6A4d=Gc-$8V_G?I"W^fa0Ds+]WLS4#X1b4"KNYC*)&o)"k]u095AHW-m?NuU0A(J.3]CjIZkABM1McLB0X2>!%
%U`I@IO-Z<h^t('GBPpBNKMIT?,p:-p#,+^'R$O-35'dO3#a*A)He=tD7aM&"^oY*:mHoA9p4MtI[`=.Ci\/;[GVL9lF0[1^3l'<,
%B/f3&gX9ao'_-C^qVl?@:'#Q(g>qOBm6Q#'1t:;tTKfkFh;50dLR7QN^\[55]69OQ7Q=#cNZC^XSd#PNRqLJ^0_k=@ZU4$(B*200
%eEr#uIJ)9)S],Ze*^t%d:ebc"65[pNg:"!'U)@fF=9=#^,eJ\D^ih^&dZu.a5?dOpJ12-KdYGZZhqmeQMcU.83],LdYf!Ain&CH0
%G?3Y`1t1grYB*:%0c8u8l@KF=L!5/TZg6h?r28@;gDS&+g?@98kK!^lDf>C9eH6nr<pe_^SmMnPQNN1Bk"=)K-N=@(rE%%k%J?/'
%ZC*;da3BQBX'_E_,jihOX=@4=)ZnB7=&$TA[la9B;1et-)=J'3PPX'-mJ*e51Y3K2jTfJK_f;n8X]5h<`-[>s_,ga1K9R;^k,D)+
%H!j/"hX9!R#ED\Ap7Od.*h2,T!:(Al5KqKk5b4Y2"1;3tYCX;I0[o_F'X/&I="VJhe\<SA5i8ZcbVj;\SY:mKOS<8"hE1HN$EnoO
%fX!T=ciN0^/+CMsELe/!'Y#<,Z<'pjKs.g]/cDo<\Z-m"[e+GpTs+Gq`O#U[#fnNIduM!FN:>TVrH`D?B7HhW\YN3/_55^3A<\a]
%-CTV42`UWNh?N.bIE%/i@Q!VklE_ggTqB(!H?(Esgp];SNn'EIo\X@HIXA\6YQ!O8_a#qfIIZ-Wq<WCWq=bSbA"UJ`E>.*seF=?1
%)A(k2#Wl9u*4R]ie*EMW^8I4,0C/Rp5P49\?Q<#`["Il'l\k4emCOFAH@dOC)38*eoSfNFk,aWS!2$F2k$hYu)p_mAb!tlpa^OCF
%lr"O1UlalH?S<IF?g@_ecP>W_aM@NpH*N1OS-*+4F]0PrcbOmXa@A8YIG8XN5N.bc+#YDge;kOCWa4uGg\lHg^dfk'&K&0(p!IVd
%@]l/_\@E$)F*a>H`So%_(<_QXGN9_DNe0,qI+7+;pZ1Om[A]ID\4Yp*qt8s"=7d0*$RXRen7/YQc_7+M7h'j\fT2,VbJ:#P-FG*P
%q`7?Gn,1^B"5ag5A6T7U^@?,[pZnXXB@9W8+GAT1IrPO?@qrB$IB+7t7pN=&JM-'R<,Z3Z$E]s2,Ca_4Wi_FEWqC$=4qNt\X2"F6
%rHe"L$Q[#fQe+4MAUKMVUNil0cga2bS#kM[jW'%9VLU`Z*1c,f\X-UXgqijHPEYTOo/Vi6G`BJgY87^s??0l[C>`&>g3u3S20l'+
%%ig.6*G=!>a`]]d#(HQOO0`W[F3ek"X+<M/lbrs]<B]Niju?k&J"?/L`E*&]P/Oim3mPefDauVV$YS4)"2BW/jf<lRDu&CiZsV#`
%^k(Z.H`LL,*r('KSkUVOZ0p5H?HaTY<Fg/T0/WlO7sf=3;o=TpT58Drf_HH0V$HG(TCU,Gpo7-emHoA9Gi2C.n,qh-<0'H#3L\s-
%Il!ic2T!"JF\hZ9:7MFT\#GC!j+4D%lJ&6j^>GgaA%u>4n9lhNYj:qr\88rrr0#[2;QEQqp'_pE4'LYunoUDpe4LsVgIcR25AH2H
%cLOk'fP>ludscYU?S<IFhm7YRUKmsD/\Cj#%<@[aA62!5kP.T!!=Tg;j&c[@#0`pP$UBPmoas&T'[USrVs&4,rn+Cj%t'aki\V+X
%m%e];?5:amX$=!/B(/$GkcP#f-%?"/,,$qDjJmmoegjP<?Y)d!#5E#6*$=qm*u<J;[sRf-@2EY\Gf#bTK9o[D*"3BmfTbc3C*-!&
%P+)]B65][MW``&3]I1J*?Q'UU<T_lXLQR*Rr5V:9\<uC4gV%q#YZ\siV]1`*D2oN>!1SoPR\dV?O5M"GUJZ\r"'V9%0tHWS<f5>7
%H`qrFJ!CiaST*C_\Z.N=ZUUSNgY:P1n[N6'HZ9:ZC>;(]Yj-rA[DomZ!@X\^2/Y`)q72Ol"JE-B.JA2k"!emW7&;)$RpTcqGHJm`
%fW>sNHO2M3-WV["YR!eA78.D15#I<.hg8[JRT->sk4@$='Q(qX4'`A@ouOWZk7;i1LlEJ6d^`W7O`<U/lc%nE7#ihCqVI]a=3eYS
%I.)Im<,%b<h]&7;Id_i>02&Ba_*igpZG&9>CAGPe'7TI_l?i!km<_'@lc%o@VbF$t<0*iX9WuSE\[g:BT@(0p?<pIY4^$Bfl:?>A
%e3k+Qjf%X]YF4PZ?1N@2>D4<HZLmPODS:/IpHne-F8P^6pAP#PWcq9b&/GZA"CN(@C?RE.a?-WiI8./%`"@&-P!^S$l8sAK5"Pp"
%bgd;V7;n+@0f"aN+'q:`"e68]m%<WM(p'+!HF>8^L70sLSh>@4.c&X8.Qppm,@Z]nj?aGpZ#pUS8<6Mf%OmQB/a\\M7UKZ__flgh
%f/`4lL^g#3d]#pF%Tf8f+G,=kRe>BLpJc]-?e]D63.Y=R53q0%Z>I1BOT$$T,c7&2N7T\X!S++YUK49MaN*_="C\?04;m3P[jho[
%=uEK1PmrX&hh`a6cmD_Zq^-^W&U4B+D8V7]6J\>p4=Y/'k%Zm$U>&19-Enk'=1r7Q#>ST*]?MV1_PA(+buiIDMD`k;'4/6f9X@>F
%#Dhn:Js,s[i*N5k8L?glc.3la@N0$RY3=FBZ0>mk!51)+S0A!0Z,GgGDDA6H-+Brh?UrRX:Mmf1-j]P^0R\n1.]>Wu=SJa?E-OL;
%&pP^sJBbqH+F#&mQX`T-3<\aZ2=V1N3<<o]AQ+XmUo7Mehu;'6aH/_&AM:B]h"N:-%_V?\a8iIu@oedR[AH%+,VXKnHq,BEhC1eN
%:)/DV9Z>&NneQ=b1"')5YM9LBaTPGpO"/SKP@3-8at?M04GT\PY<!2u4"@SH0.'.j/3-5E^+oZ7]6)RWY70+"C=rPMLN6k+!eS+)
%cYF?4q308E/pe+iPu8PNA_:T::2D`XkGf\Sp?g\[$,st.D"P.@J-5ecU;A%o.fFN<;33"0gs&63m&k!d<ho^dI3:u%gX#<!"?ZN!
%5J'98NsDa(s%9UWoYPT@U'S"D@8[Ls$\u"Ap=_Ftfer5LWA_$KSn`%KDk&P]@[$3mRa21MRRU]B;E+_oR6KpP#RQnJ<<%IUmnc/u
%PM1^6gCt&GlM1$If+B5%2Y8TP<d^In7PhMC8.h`]A[XR\btZiY0ck5W>8cW-2C6?:S>fF1l%$#OEBA+j,F.p!=,8(\e$oUZh<0Kr
%<3-'C$Z!@VGF+5WN6to#;pQ\-gh?Sil:5u337EIjfa1!l=g_l$cSiua13Scs`%BU^5jVLLK",JK?3I)Q3^*ip/GK+YRP*n=,gWOm
%If;]617K.r,]no_?RQhIWRMKHo+jFT\&-d?'^<j`G)E]u=AsI(fqs`=e7kf@Ta^PRjrWPpT0nYpQ!R\iZ%u06m@PCLnJ9Wu&44>=
%D[l(TC2rsP\_]YA_,H6,JDKpqoBg_Eg#*iKIL;#[Y"W<+a.,4NYJgc3p8S./0t/>M,8(H,K2K_-AAXO=E)c08`DA?F!0r9:Jpm"W
%k$pun`tZ\6F#DgGD;E;Ya$'N(?D\>]g@M@cgtJQ0&P4KoD(HUU"i_1Y`h)cSGY..$q(Yg4]EgH#__U5b&-?4-rVRd&gF)\d4f:UU
%mW5B]Sb?\QWgbqjeN"\>&5j_Yh^N-YQG#PN:PEP\3t=)S&^;N+^#'lkKmR%WRCQT[+hqcXhCRD\F*'SD=)G:&&2q_1K+5[\$Vb*-
%TiiW-`0Q&p\T(QpO$K3u=kH'(g$\AS!,m$pAP9STY`8P5+ZJGRa-=_3&69*B$"gUeI3=q87,unQ^!Pm=e]@lMk1g,g5'_0F18hD`
%-u\a[Lh-X(md>AXDHLO%C%bNZToH!'h47.Cpcm>b!WS/S2gF%rgXp"b%0ig!&j]ttGX4sHd(8(D\rlBH3Y6Xk(<AD$0*X"icjF\<
%qe]aJV#;r!($8$Qim"r2$MK*aAtS^dcaI0J>cW7fpTES,D+5%:mW(p?:C'^VTf\0,[.pe+0](fX\X4-1?#s\d;QW*jWdQt7B-0d\
%#g/E+&?F`o0JXliPaKX'(C0_Bics+3'tVD-S1g<W_q72HE%e=3Tr'ha<D8@g;\p6$`T>;M[E7=2P1sRh0"NBH3.ebrMM;<'4K,_P
%Ml?Bei\Qq]4ft36Of>UqT3LT:McpA#f^$0Mf&',AYu'ai4(8_552lbBC:K4Pe_Mg`)1bS(o.ZfI`mO,C'1'1DWF[e),P-r4:@\jn
%>'dHJ1r#FfLNu:WUj7%Vm.>M#P\06#iHBisO&WBniY=s8_GX%h4:Ag<?QO6MU2t<L])A'M/W(<!f_j:^Cf;biX0N'jjdXp@P#]!s
%Bj,Y*0IlZD]9j1DVQ,H>2(9ji-=jsCVZS2E%!T(!XP/nQ$'/@t5;)(sH094&YnZ7b*#5[pKpt3u<-7'>J>ju-]\(Mj6jY9U;O-ic
%TS:k]A_M6\aV?5f2k*h.4Vq`u5k'Q,,6>caGBi!3ng>jc0F%_F7"kng;oO6@W2+\c%N/\qA'3+a*5:^T4^cKGc)BJsoY"F:o!@ZB
%1hV]GNZ^uAQ!6Qh7FjuMiEXn4&EsrL'GuG`9C=$tgW`hU[b9El][B"`Tbb[cM@Kd!S2B6=<s"2E.V/Z'0I?*eUntPK=HlYOYMp"5
%aa0\^m(Z*ua&+[ALE[gs[TrY@S['0-C_cEI2H/+oQtYhqC"H%%31sir[\-[sNQ=!^0.\ATV@\Z0AMQ/EYY_llOZRCf,;S6*d#lb.
%<J\.h)!3u^KSOG@BJ?:hCG$hWM:3aRUgeC,,]hlO"GUg/ZI@EiE\`"U.`6Cn>qA`a*nU8P;l#%b=JYk@]<2)SoH.O4W^t0EAX`G'
%`iDM40GsrH;?@Q>dS5GJ,&B9IE`6DN'4::L62bGlOngBk!rV"kb5f0h+0l@N"!=cXn,jc<%nJ8BN.lciT=#8Um745\ZB]gQ:>l)c
%hbkTMa[^.Nr4n)h"oc:Blil8G!K2MF/K_588D3PGX21;Z^Y`oOkK?@H#BIP+^io5G^Ya@Q%t)HIi"(4RJfnpT7r/J1^p@'p07M3,
%i7L5&8T9-+^m<%Ms4u6/f@WU[$#WZ`YUI"SrdL?R,\FgCWo2:t!P<qrk=7(]59$BF4feUT^/)G+3J5HoRaQU5$#o$>9\U!JL"?%5
%KHPV'DM9G#"m0g^HG[8J&aEK"@BHa#W9`T8B[*-q'=ImJ\o5-DMO&#3o965+J4ZBD;bL!*,84D34(0HhIPFkc/6D8c\'GkCHBj=r
%X7Wif\n&`h>Nokqn0[,<9ld/;]n[K/\bkrViq-]@5.e>B@5fn1qZpo$/?YlmH1PJkaO?3E8c`jhSph[0[O7*k0)Cf<5:I+R$0ske
%0I=j^!+!K?cGaue0$.NI\`@,Zd;W4&20$Pl:S7?D]3&uITDC/#kblbKL!m&#npDKU-HK]X^m'YpBRrT*(V/(d*\H"@BQj[N97s"[
%rk`R5-a!3dFl^H:9gQh13`VLJg>pQ*`IQS+p8o[D#k\&enTa;0&HW$uc;1o'hS.n(]J0WHE,([5X%0s#pa<7:.t"UO26p=<h0o/K
%qS'5cr)i8-Ast#aFNoSN_S;S:WE&X;D=d/,o;%iqhmZ)R1"W88g1l_i\DB=LpLuhhoF!I4c'R>dS"CCLK9f8lg8paLZ,'<'jkm@.
%Hqh0-ZY>ne'"d%u6UX4SF_)`a\UD2lZ.9kdpMCp`2AN.ND95HNMf#6/\K84#'O%kYhPXTc\@Jo,^daQU_09,^k<C']O'(i2HZg!S
%IW5qO*pMl(YA+jVU<OK:(p7@Z%?2CeV#hEO9"Va$WJ-6F>fZ<no7)s:!@dO"I,ke@r->+6_ehjrI5,3H+65K2`_n2DEN;T^YGuXI
%7DqCSQ9$Eu'miYFC4kr@5'B2DjJeZ[12`T^]t1K:26H/Nh:>djiFr%(Yh7\5.-k[)WXM1YZXpi4dYA<3f8=E`ohH<+oc3fs;cEuI
%&Kb#^3TbYEA\O4O?E<W7^.ckTgSGE$W32u"([-\NlIr2U\E?BfG2#6%=-=M,fcFA3I;uMW;rC\p>QQD,V2lWff8u`u?^=pJOE,Qs
%VWq?ED`R5k)`P)O>q9KWq,]K1;-gddIHWq=mD67-@cWH^aCSQrA]65ZTN.:\@QsB%-l8P;2U1YC\.6+IV%4TFY$L(odJ9VJkrg-u
%n$k6+k&HkU7noZ@aGQ\#0H&2VIF):ioBjt]%TM%pI+*OK#1o*SLiht0_iJ'K41=G.P.<_bfGp$.<7bkg?C*j!TXsi)mAas0gU+7@
%=rG[c^MR#lV$JgHJk*Mrf"^)DjX/NSNu^dC7Ys%4mC!G+e^u?B#+1Xe2Vf_,;>Y#W:"Z^OgRSEJ-`ak&?2Dp!lIpQJPAPF\e5q5F
%A&GJ"[bpq`S?'n@G'DQ3/@3tuiVQP"h#5ZV%]!kV@,\=LTLt22,YS2o!%sJ!lh#K@WVU@3Ca+ld$0OJcK%;r@SX_"'SUooUEHdJ)
%Iuj1,VX9GoORGWFeE$X2.<Q54RIG;J#p$)sQjP:=hWbnLgaQ[P/ioW+3^Y<'_%:Y_q"XU'f2'TTBuVqPL`'NojrZq"WgMX@@0(4#
%iN9=7MX$=/\\lE$=S`F8*gS1-ZT"/sJ").-q0TQ9hs/!=,@!uVDVBPil!mN]HF#BM(S?i;]2)!0<i+4Qe3PT6:`r16UoKpeJdVXY
%;cD23j\u;VqGet'4a,aB8,--cpFW;fp]EmR'#NJnf&Ak>-Fd>l-:&(q'XELABs/r6<Y.7K>"mOr.(8cu#[%ZM&^D0'naAO.h@QUX
%gn:5T7YO]R0IO`8fSdK=j-h*??c,&0RSr0T^!"E%1P?<jV\7<5UiJC#TnXBk0$Y+.l`gQ\%<5_##rR0^]\jqOo#7P`kdW5GbHbH,
%>Wg&UX%ru0QjXGu`"f27\$J>.RR:E.PS36kBts?9pD2a*g\rGXM`q0t-<$Oo?=+u\#Xp.qZ>;gE*F$TA78]]t#Qq$L6S_lamA"#n
%IG0UE=R%=8IH1.l%.O1DbOu$bl"o'ejUSO/MMkjQ_JuY+KfL09?kLF*)MCq07Q;qXhGWXX?Y+LM8/Og1na6mf5BPhS&anD!bl#6^
%QfO#@o>1VDl+ib)Vbr^KCZMW9,@!RDE.ioW<8<,Br&#C:peeuF^\Y&Q=-:uHhYQ[^s3CDZgtR#M!3*j-7n<!I5-Jft?VZc(8FZJ;
%5.hJ^9Ymn4N*0)m!`s+W[CboQc^oo]EN%bZpq:)Vm5/O,?s*:J*=h0kVI;KR.Ig^i\Ta8+><Ve_j,*T;'i[IcXU<EeT4c<1GZ]$Q
%gij9XnZWSl(Yq+fH$up1r@t!LVhV3j"bY"Tc&b`lhqaS9l;<k+D6$I@/QFYd9C_)FVn[J$8/jV6UaeWiN\mC9F)A3`KXib$]W:hB
%Ns]sQJaB]gM.*Q9'T3o]'+&_KSFH(E0+DuB,j&]MV9Cb2Xb6S'&M_e,Hl(?3;VR*`ZEsSXrK5Z'5O(?J76S]^K>;r&J-m?is5F'r
%@odGShl\pbgi,D7r?mmm51ae4;dtg[!*eHI?o"\^??&Tgs(-_@;a*>DV;qHNe@,D%&#jOJZiB:Yrr,^nb<Q!^J+s0cgjf?rs6f3F
%Iep[+p]iqO:]K&BVk<tf+91u*s6p!_O+7#j5QCW\pg;C"S*G`Xp<Wa"^]#>Sn/)*HN:Gq_~>
%AI9_PrivateDataEnd
