%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_orange.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_apelsin</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T01:22+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T01:22:01+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T01:22:01+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6xnNu4dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:BDBBDE50D7E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:BEBBDE50D7E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:e1947e0c-279b-b84a-8b46-2a39162ef056</stRef:instanceID>
            <stRef:documentID>xmp.did:59D383FF4D216811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.878431 .745098 .545098 rgb
f
368.952 277.001 mo
368.952 277.001 376.452 272.626 382.702 272.001 cv
388.952 271.376 386.452 267.626 396.452 267.001 cv
406.452 266.376 412.495 265.13 419.995 263.255 cv
427.495 261.38 437.495 258.88 444.37 257.63 cv
451.245 256.38 457.077 257.837 466.452 257.212 cv
475.827 256.587 484.784 254.501 492.909 256.376 cv
501.034 258.251 504.37 259.505 508.745 260.13 cv
513.12 260.755 521.034 258.876 529.159 262.001 cv
537.284 265.126 538.534 265.751 546.034 266.376 cv
553.534 267.001 563.952 268.251 569.577 272.001 cv
569.577 272.001 576.452 277.626 581.452 278.251 cv
586.452 278.876 593.327 283.876 597.077 286.376 cv
600.827 288.876 604.159 290.126 609.784 295.126 cv
615.409 300.126 629.159 308.876 634.159 313.251 cv
639.159 317.626 644.784 322.001 648.534 328.251 cv
652.284 334.501 665.202 340.751 673.327 353.876 cv
681.452 367.001 692.909 378.876 704.159 405.126 cv
715.409 431.376 722.284 457.001 723.534 492.626 cv
724.784 528.251 720.827 528.876 720.827 534.501 cv
720.827 540.126 719.577 547.626 719.577 553.251 cv
719.577 558.876 716.659 567.001 714.159 575.126 cv
711.659 583.251 707.909 599.501 704.159 606.376 cv
700.409 613.251 701.452 625.751 694.577 635.126 cv
687.702 644.501 685.827 645.126 683.952 651.376 cv
682.077 657.626 677.702 659.501 674.577 663.876 cv
671.452 668.251 671.659 664.501 667.909 670.751 cv
664.159 677.001 658.534 683.876 645.409 690.751 cv
632.284 697.626 617.077 713.876 598.952 720.751 cv
580.827 727.626 568.327 733.876 561.452 735.126 cv
554.577 736.376 548.952 736.376 541.452 738.876 cv
533.952 741.376 531.452 740.751 519.577 742.626 cv
507.702 744.501 495.827 745.126 488.952 745.751 cv
482.077 746.376 465.827 743.251 458.952 743.251 cv
452.077 743.251 440.202 739.501 430.202 740.126 cv
420.202 740.751 414.577 738.251 402.702 735.126 cv
390.827 732.001 371.452 727.001 358.327 722.001 cv
345.202 717.001 342.077 715.751 332.702 710.126 cv
323.327 704.501 321.034 699.501 315.409 695.751 cv
309.784 692.001 298.952 687.001 294.577 681.376 cv
290.202 675.751 288.327 673.876 283.952 667.001 cv
279.577 660.126 279.577 658.251 275.202 653.251 cv
270.827 648.251 270.827 647.626 267.077 642.626 cv
263.327 637.626 263.327 637.626 258.327 627.001 cv
253.327 616.376 252.702 614.501 249.577 609.501 cv
246.452 604.501 240.202 589.501 239.577 583.876 cv
239.577 583.876 238.327 577.001 236.452 571.376 cv
234.577 565.751 232.702 563.251 232.077 556.376 cv
231.452 549.501 227.702 547.001 228.327 542.001 cv
228.952 537.001 225.202 533.251 225.827 526.376 cv
226.452 519.501 226.452 512.626 227.077 505.126 cv
227.702 497.626 225.827 495.751 226.452 491.376 cv
227.077 487.001 227.077 481.376 227.702 478.251 cv
228.327 475.126 228.327 470.751 229.577 468.251 cv
230.827 465.751 228.327 459.501 230.202 453.876 cv
232.077 448.251 233.952 447.626 234.577 437.001 cv
235.202 426.376 238.952 423.876 240.827 418.251 cv
242.702 412.626 245.202 407.001 247.702 400.126 cv
250.202 393.251 254.577 387.626 258.952 377.001 cv
263.327 366.376 268.327 365.751 268.952 360.751 cv
269.577 355.751 272.702 348.876 277.077 346.376 cv
281.452 343.876 290.202 328.251 294.577 326.376 cv
298.952 324.501 306.452 313.876 314.577 309.501 cv
322.702 305.126 326.452 300.751 332.077 297.626 cv
337.702 294.501 347.077 285.751 348.952 285.126 cv
350.827 284.501 359.577 278.251 368.952 277.001 cv
cp
.27451 .207843 .145098 rgb
f
486.858 740.165 mo
483.187 740.165 477.64 739.481 472.28 738.817 cv
467.132 738.181 462.269 737.583 458.952 737.583 cv
456.585 737.583 453.026 736.962 449.257 736.306 cv
444.093 735.403 438.233 734.388 432.542 734.388 cv
431.636 734.388 430.737 734.411 429.851 734.466 cv
428.929 734.524 428.05 734.556 427.206 734.556 cv
421.663 734.556 417.397 733.345 410.94 731.517 cv
408.886 730.935 406.655 730.302 404.144 729.642 cv
402.124 729.11 li
390.315 726.009 372.468 721.321 360.347 716.704 cv
347.296 711.731 344.554 710.622 335.62 705.263 cv
330.737 702.333 328.05 699.634 325.448 697.017 cv
323.437 694.993 321.362 692.903 318.554 691.032 cv
316.851 689.896 314.694 688.649 312.382 687.313 cv
307.53 684.517 301.491 681.028 299.054 677.896 cv
297.944 676.462 296.991 675.271 296.116 674.185 cv
293.55 670.974 291.854 668.856 288.741 663.958 cv
287.155 661.474 286.179 659.681 285.347 658.149 cv
283.866 655.427 282.585 653.079 279.472 649.517 cv
276.78 646.442 275.944 645.259 274.562 643.294 cv
273.808 642.224 272.937 640.985 271.616 639.224 cv
268.21 634.685 268.21 634.685 263.46 624.587 cv
260.608 618.474 li
258.038 612.927 256.972 610.634 254.39 606.497 cv
251.483 601.853 245.702 587.646 245.214 583.251 cv
245.101 582.567 243.812 575.521 241.831 569.583 cv
241.245 567.817 240.659 566.333 240.101 564.938 cv
238.937 562.009 238.089 559.896 237.726 555.864 cv
237.339 551.626 235.999 548.622 235.022 546.431 cv
234.12 544.392 233.835 543.657 233.952 542.704 cv
234.405 539.099 233.452 536.165 232.612 533.571 cv
231.878 531.321 231.249 529.372 231.476 526.888 cv
231.8 523.286 231.968 519.685 232.128 515.993 cv
232.28 512.626 232.429 509.185 232.729 505.595 cv
233.124 500.849 232.64 497.876 232.288 495.7 cv
232.022 494.056 231.909 493.278 232.065 492.177 cv
232.382 489.978 232.554 487.478 232.71 485.106 cv
232.854 482.915 233.007 480.642 233.265 479.36 cv
233.507 478.142 233.675 476.763 233.835 475.356 cv
234.015 473.833 234.276 471.532 234.651 470.786 cv
235.929 468.228 235.663 465.497 235.386 462.603 cv
235.163 460.29 234.913 457.673 235.581 455.661 cv
236.038 454.294 236.503 453.267 236.937 452.29 cv
238.624 448.489 239.765 445.399 240.237 437.333 cv
240.589 431.376 241.983 428.774 243.597 425.759 cv
244.468 424.146 245.448 422.313 246.206 420.036 cv
247.222 416.997 248.433 413.95 249.718 410.692 cv
250.784 407.985 251.909 405.149 253.03 402.06 cv
254.101 399.13 255.64 396.294 257.425 393.005 cv
259.487 389.216 261.827 384.915 264.198 379.157 cv
266.171 374.364 268.198 372.099 269.983 370.095 cv
271.897 367.958 274.069 365.524 274.577 361.454 cv
275.081 357.438 277.612 352.595 279.89 351.298 cv
282.882 349.587 285.671 345.915 289.983 340.056 cv
292.104 337.177 295.655 332.36 297.03 331.474 cv
299.788 330.31 302.601 327.485 306.163 323.903 cv
309.612 320.438 313.53 316.501 317.265 314.489 cv
322.183 311.845 325.589 309.228 328.593 306.919 cv
330.796 305.224 332.698 303.763 334.835 302.575 cv
338.413 300.591 342.972 296.888 346.636 293.915 cv
348.237 292.614 350.39 290.864 351.206 290.329 cv
352.038 289.997 352.933 289.489 354.28 288.735 cv
357.581 286.872 363.718 283.415 369.702 282.614 cv
370.823 282.47 li
371.804 281.899 li
373.608 280.853 379.183 278.044 383.272 277.642 cv
387.679 277.196 389.808 275.466 391.218 274.321 cv
392.233 273.493 392.972 272.899 396.804 272.653 cv
404.132 272.196 409.409 270.243 414.065 268.513 cv
416.409 267.649 418.624 266.833 420.956 266.247 cv
428.261 264.423 438.159 262.567 444.968 261.325 cv
446.858 260.985 448.702 260.837 451.124 260.837 cv
452.288 260.837 453.476 260.868 454.722 260.896 cv
456.194 260.935 457.741 260.981 459.433 260.981 cv
461.292 260.981 463.319 260.931 465.581 260.778 cv
470.007 260.458 li
474.296 260.134 478.729 259.802 482.835 259.802 cv
486.577 259.802 489.589 260.075 492.054 260.649 cv
498.444 262.122 501.577 262.497 504.608 262.86 cv
505.542 262.978 506.479 263.083 507.53 263.235 cv
509.226 263.474 511.069 263.493 513.202 263.521 cv
517.222 263.56 522.222 263.606 526.917 265.415 cv
535.823 268.841 541.487 269.509 549.108 270.146 cv
554.706 270.614 560.464 272.778 566.218 276.571 cv
568.022 278.017 574.749 283.122 580.749 283.876 cv
583.851 284.263 589.515 288.103 592.562 290.165 cv
593.937 291.091 li
595.667 292.243 597.397 293.036 599.069 293.806 cv
601.663 294.989 604.108 296.11 607.065 298.739 cv
610.358 301.669 615.878 305.075 621.21 308.376 cv
625.554 311.071 630.054 313.856 632.093 315.642 cv
633.405 316.786 li
637.437 320.282 639.272 321.88 642.218 326.79 cv
644.14 329.989 647.616 333.427 652.015 337.782 cv
657.401 343.114 664.101 349.739 668.511 356.853 cv
671.206 361.208 674.526 365.595 678.038 370.231 cv
685.722 380.38 692.343 390.892 699.784 408.251 cv
711.022 434.478 716.093 459.313 717.284 493.251 cv
718.167 518.454 717.339 523.31 716.124 528.337 cv
715.604 530.462 715.159 532.298 715.159 534.501 cv
715.159 537.044 714.858 540.243 714.562 543.337 cv
714.241 546.696 713.909 550.169 713.909 553.251 cv
713.909 558.544 712.034 564.06 709.784 571.376 cv
708.851 574.403 707.843 583.149 706.659 588.251 cv
704.823 596.216 702.476 601.333 700.409 605.126 cv
699.194 607.353 697.71 615.407 696.659 617.626 cv
694.511 622.157 694.433 625.735 690.007 631.771 cv
687.96 634.563 686.366 636.56 685.093 638.157 cv
682.007 642.024 680.14 644.364 678.522 649.743 cv
677.729 652.392 676.257 653.833 674.226 655.825 cv
672.882 657.138 671.362 658.63 669.964 660.579 cv
667.788 663.63 666.948 665.11 665.671 667.349 cv
664.995 668.544 662.378 671.005 660.409 672.626 cv
649.784 681.376 658.577 678.259 646.659 684.501 cv
641.62 687.142 633.952 694.403 628.179 698.142 cv
618.655 704.313 607.858 711.306 596.944 715.446 cv
589.761 718.173 583.456 720.798 578.026 723.06 cv
570.194 726.321 564.015 728.899 560.437 729.548 cv
558.3 729.935 556.288 730.2 554.3 730.458 cv
549.847 731.04 545.237 731.638 539.663 733.501 cv
535.405 734.915 533.179 735.173 528.741 735.681 cv
526.171 735.981 523.046 736.337 518.694 737.024 cv
509.851 738.423 500.788 739.126 494.175 739.638 cv
492.026 739.802 490.093 739.954 488.44 740.106 cv
487.968 740.146 487.44 740.165 486.858 740.165 cv
cp
1 .572549 0 rgb
f
588.276 296.052 mo
588.276 296.052 694.39 360.974 705.276 467.61 cv
716.827 580.681 666.792 700.771 532.085 731.966 cv
532.085 731.966 645.835 699.231 681.413 584.579 cv
739.655 396.911 588.276 296.052 588.276 296.052 cv
cp
.27451 .207843 .145098 rgb
f
639.159 330.126 mo
639.159 330.126 710.874 394.509 709.159 501.376 cv
707.284 618.251 646.034 682.626 646.034 682.626 cv
646.034 682.626 688.534 652.626 707.284 578.251 cv
712.612 557.114 714.315 528.88 715.62 502.974 cv
720.237 411.372 666.101 349.368 639.159 330.126 cv
cp
1 .819608 .678431 rgb
f
453.608 364.192 mo
453.624 364.204 453.628 364.212 453.628 364.212 cv
453.601 364.212 452.925 363.911 452.034 363.911 cv
450.979 363.978 450.085 364.017 449.163 364.017 cv
446.452 364.017 444.335 363.622 442.671 362.997 cv
441.464 363.411 440.03 363.724 438.339 363.899 cv
435.069 364.251 433.245 364.548 432.261 364.739 cv
431.101 366.013 li
423.921 366.013 li
421.726 359.501 li
422.038 358.755 li
421.562 354.306 421.425 350.903 421.671 348.239 cv
420.491 346.978 419.374 345.247 418.476 342.899 cv
416.491 337.685 415.12 329.419 414.968 328.493 cv
426.999 325.708 li
426.374 323.626 424.937 322.778 424.487 322.646 cv
424.487 322.646 424.921 322.771 426.007 322.771 cv
426.007 322.771 li
426.894 322.771 428.003 322.692 429.351 322.509 cv
430.081 322.411 li
433.983 321.88 437.347 321.423 440.292 321.423 cv
442.87 321.423 445.077 321.821 446.905 322.622 cv
449.058 321.669 451.858 320.813 454.944 320.813 cv
455.437 320.813 455.933 320.837 456.437 320.888 cv
456.737 320.911 457.026 320.927 457.296 320.927 cv
458.671 320.927 459.718 320.614 461.022 320.212 cv
462.468 319.771 464.108 319.271 466.101 319.271 cv
468.437 319.271 470.394 319.087 470.499 319.071 cv
478.632 318.267 li
477.202 326.313 li
477.108 326.829 476.194 331.552 472.468 337.415 cv
471.62 338.747 470.929 340.017 470.327 341.118 cv
469.331 342.946 468.198 345.013 466.601 346.54 cv
466.718 348.724 466.464 351.458 464.995 354.251 cv
463.226 357.63 462.937 359.548 462.937 359.567 cv
461.632 368.802 li
453.608 364.192 li
cp
.27451 .207843 .145098 rgb
f
404.522 394.009 mo
404.522 394.009 424.53 405.556 468.405 399.399 cv
468.405 399.399 430.694 414.794 404.522 394.009 cv
cp
.984314 .886275 .866667 rgb
f
391.437 399.782 mo
391.437 399.782 418.374 423.646 485.726 404.403 cv
485.726 404.403 424.147 431.728 391.437 399.782 cv
cp
f
387.968 410.56 mo
387.968 410.56 421.069 437.118 485.726 414.021 cv
485.726 414.021 424.53 444.813 387.968 410.56 cv
cp
f
379.886 419.798 mo
379.886 419.798 392.659 431.509 425.687 434.423 cv
451.858 436.731 483.417 427.88 496.116 419.411 cv
496.116 419.411 482.265 436.731 430.304 438.271 cv
412.319 438.806 388.132 432.181 379.886 419.798 cv
cp
f
369.495 429.419 mo
369.495 429.419 385.659 444.427 427.226 446.735 cv
468.792 449.048 493.429 433.649 504.198 427.493 cv
504.198 427.493 489.679 447.165 448.007 450.204 cv
411.062 452.896 380.655 441.731 369.495 429.419 cv
cp
f
371.421 440.966 mo
371.421 440.966 387.581 455.974 429.147 458.286 cv
470.718 460.595 495.351 445.2 506.128 439.04 cv
506.128 439.04 491.601 458.708 449.929 461.747 cv
412.987 464.442 382.577 453.278 371.421 440.966 cv
cp
f
380.655 454.817 mo
380.655 454.817 393.429 466.528 426.452 469.446 cv
452.624 471.755 484.187 462.903 496.89 454.438 cv
496.89 454.438 474.179 475.22 431.073 473.294 cv
411.815 472.435 388.354 465.212 380.655 454.817 cv
cp
f
381.812 464.829 mo
381.812 464.829 394.585 476.536 427.612 479.45 cv
453.784 481.763 485.343 472.907 498.046 464.442 cv
498.046 464.442 475.335 485.228 432.229 483.298 cv
412.968 482.438 389.511 475.22 381.812 464.829 cv
cp
f
381.038 475.603 mo
381.038 475.603 393.812 487.313 426.839 490.228 cv
453.011 492.536 484.569 483.685 497.272 475.22 cv
497.272 475.22 474.565 496.001 431.46 494.075 cv
412.194 493.216 388.741 485.993 381.038 475.603 cv
cp
f
380.272 485.228 mo
380.272 485.228 393.046 496.931 426.073 499.853 cv
452.245 502.161 483.804 493.31 496.503 484.841 cv
496.503 484.841 473.796 505.622 430.694 503.7 cv
411.425 502.841 387.968 495.618 380.272 485.228 cv
cp
f
gsave
326.362 315.188 mo
326.362 315.188 255.179 367.767 247.155 490.442 cv
239.132 613.122 342.405 713.13 426.624 735.81 cv
426.624 735.81 309.058 630.794 345.28 468.864 cv
381.503 306.931 326.362 315.188 326.362 315.188 cv
cp
clp
313.827 324.958 mo
313.827 324.958 318.843 343.521 358.948 348.157 cv
358.948 348.157 315.827 349.704 313.827 324.958 cv
cp
.27451 .207843 .145098 rgb
f
307.312 333.212 mo
307.312 333.212 312.827 359.501 368.476 358.981 cv
368.476 358.981 306.312 364.146 307.312 333.212 cv
cp
f
299.796 341.845 mo
299.796 341.845 305.812 369.677 364.468 367.099 cv
364.468 367.099 302.804 378.446 299.796 341.845 cv
cp
f
293.397 352.552 mo
293.397 352.552 298.663 366.86 320.093 373.431 cv
341.522 380.005 349.796 376.521 368.968 374.587 cv
368.968 374.587 342.925 384.517 320.468 377.298 cv
296.405 369.567 293.397 352.552 293.397 352.552 cv
cp
f
287.308 358.677 mo
287.308 358.677 291.562 373.333 312.476 381.474 cv
333.382 389.626 341.874 386.767 361.136 386.267 cv
361.136 386.267 334.468 394.231 312.573 385.36 cv
289.12 375.864 287.308 358.677 287.308 358.677 cv
cp
f
280.991 371.888 mo
280.991 371.888 292.108 390.329 315.198 395.853 cv
342.655 402.427 368.218 394.696 368.218 394.696 cv
368.218 394.696 343.78 405.13 317.085 400.106 cv
286.397 394.329 280.991 371.888 280.991 371.888 cv
cp
f
274.706 379.095 mo
274.706 379.095 284.823 398.142 307.581 404.97 cv
334.632 413.095 360.577 406.825 360.577 406.825 cv
360.577 406.825 335.616 415.864 309.226 409.325 cv
278.897 401.813 274.706 379.095 274.706 379.095 cv
cp
f
270.687 389.849 mo
270.687 389.849 281.093 408.724 303.96 415.185 cv
331.132 422.86 356.972 416.165 356.972 416.165 cv
356.972 416.165 332.151 425.61 305.671 419.509 cv
275.229 412.497 270.687 389.849 270.687 389.849 cv
cp
f
265.421 399.13 mo
265.421 399.13 275.827 418.005 298.694 424.462 cv
325.866 432.142 351.714 425.446 351.714 425.446 cv
351.714 425.446 326.89 434.888 300.413 428.786 cv
269.96 421.771 265.421 399.13 265.421 399.13 cv
cp
f
261.663 408.021 mo
261.663 408.021 272.069 426.899 294.94 433.353 cv
322.108 441.032 347.952 434.341 347.952 434.341 cv
347.952 434.341 323.128 443.778 296.647 437.681 cv
266.206 430.661 261.663 408.021 261.663 408.021 cv
cp
f
257.147 417.298 mo
257.147 417.298 267.558 436.181 290.425 442.63 cv
317.597 450.31 343.44 443.618 343.44 443.618 cv
343.44 443.618 318.616 453.06 292.14 446.958 cv
261.687 439.946 257.147 417.298 257.147 417.298 cv
cp
f
252.983 426.188 mo
252.983 426.188 263.39 445.067 286.249 451.521 cv
313.429 459.196 339.265 452.509 339.265 452.509 cv
339.265 452.509 314.448 461.95 287.968 455.849 cv
257.522 448.837 252.983 426.188 252.983 426.188 cv
cp
f
250.733 439.208 mo
250.733 439.208 262.226 457.396 285.429 462.431 cv
313.003 468.403 338.401 460.122 338.401 460.122 cv
338.401 460.122 314.179 471.083 287.39 466.634 cv
256.593 461.528 250.733 439.208 250.733 439.208 cv
cp
f
247.085 448.345 mo
247.085 448.345 258.585 466.536 281.788 471.571 cv
309.358 477.544 334.765 469.263 334.765 469.263 cv
334.765 469.263 310.542 480.224 283.749 475.774 cv
252.948 470.661 247.085 448.345 247.085 448.345 cv
cp
f
247.265 463.329 mo
247.265 463.329 260.038 480.595 283.538 483.853 cv
311.464 487.712 336.202 477.528 336.202 477.528 cv
336.202 477.528 312.835 490.302 285.8 487.903 cv
254.718 485.142 247.265 463.329 247.265 463.329 cv
cp
f
244.292 472.72 mo
244.292 472.72 257.065 489.989 280.565 493.239 cv
308.491 497.106 333.226 486.923 333.226 486.923 cv
333.226 486.923 309.858 499.696 282.819 497.29 cv
251.741 494.528 244.292 472.72 244.292 472.72 cv
cp
f
242.972 484.372 mo
242.972 484.372 256.374 501.126 279.983 503.454 cv
308.03 506.208 332.366 495.056 332.366 495.056 cv
332.366 495.056 309.499 508.743 282.397 507.411 cv
251.233 505.876 242.972 484.372 242.972 484.372 cv
cp
f
240.351 493.876 mo
240.351 493.876 253.753 510.622 277.362 512.958 cv
305.413 515.716 329.749 504.567 329.749 504.567 cv
329.749 504.567 306.874 518.247 279.772 516.907 cv
248.601 515.376 240.351 493.876 240.351 493.876 cv
cp
f
243.179 508.571 mo
243.179 508.571 257.866 524.146 281.577 524.497 cv
309.757 524.899 333.128 511.747 333.128 511.747 cv
333.128 511.747 311.413 527.298 284.3 528.239 cv
253.116 529.313 243.179 508.571 243.179 508.571 cv
cp
f
241.319 518.259 mo
241.319 518.259 256.007 533.837 279.722 534.185 cv
307.89 534.595 331.269 521.442 331.269 521.442 cv
331.269 521.442 309.546 536.989 282.437 537.923 cv
251.245 538.997 241.319 518.259 241.319 518.259 cv
cp
f
242.968 531.806 mo
242.968 531.806 258.765 546.188 282.429 544.685 cv
310.55 542.896 332.89 527.962 332.89 527.962 cv
332.89 527.962 312.386 545.161 285.421 548.212 cv
254.405 551.712 242.968 531.806 242.968 531.806 cv
cp
f
241.827 541.614 mo
241.827 541.614 257.612 556.001 281.288 554.489 cv
309.409 552.712 331.749 537.771 331.749 537.771 cv
331.749 537.771 311.241 554.97 284.272 558.017 cv
253.249 561.517 241.827 541.614 241.827 541.614 cv
cp
f
244.163 555.466 mo
244.163 555.466 260.866 568.72 284.39 565.575 cv
312.323 561.821 333.624 545.36 333.624 545.36 cv
333.624 545.36 314.304 563.954 287.601 568.876 cv
256.882 574.536 244.163 555.466 244.163 555.466 cv
cp
f
243.671 565.341 mo
243.671 565.341 260.374 578.591 283.901 575.435 cv
311.839 571.688 333.132 555.228 333.132 555.228 cv
333.132 555.228 313.808 573.817 287.104 578.739 cv
256.39 584.399 243.671 565.341 243.671 565.341 cv
cp
f
252.374 579.595 mo
252.374 579.595 270.296 591.032 293.382 585.435 cv
320.8 578.774 340.358 560.165 340.358 560.165 cv
340.358 560.165 322.987 580.688 296.913 588.384 cv
266.913 597.235 252.374 579.595 252.374 579.595 cv
cp
f
252.858 589.466 mo
252.858 589.466 270.788 600.896 293.874 595.29 cv
321.296 588.646 340.854 570.044 340.854 570.044 cv
340.854 570.044 323.472 590.556 297.39 598.251 cv
267.401 607.099 252.858 589.466 252.858 589.466 cv
cp
f
254.624 600.478 mo
254.624 600.478 272.554 611.907 295.644 606.313 cv
323.054 599.646 342.616 581.044 342.616 581.044 cv
342.616 581.044 325.249 601.571 299.163 609.267 cv
269.171 618.114 254.624 600.478 254.624 600.478 cv
cp
f
255.116 610.341 mo
255.116 610.341 273.046 621.771 296.132 616.169 cv
323.554 609.524 343.108 590.923 343.108 590.923 cv
343.108 590.923 325.722 611.435 299.647 619.13 cv
269.655 627.966 255.116 610.341 255.116 610.341 cv
cp
f
256.128 620.966 mo
256.128 620.966 274.058 632.399 297.147 626.794 cv
324.562 620.134 344.116 601.528 344.116 601.528 cv
344.116 601.528 326.749 622.056 300.671 629.751 cv
270.671 638.603 256.128 620.966 256.128 620.966 cv
cp
f
256.62 630.833 mo
256.62 630.833 274.55 642.263 297.632 636.657 cv
325.058 630.009 344.612 611.403 344.612 611.403 cv
344.612 611.403 327.229 631.923 301.151 639.618 cv
271.163 648.462 256.62 630.833 256.62 630.833 cv
cp
f
259.511 639.911 mo
259.511 639.911 277.44 651.341 300.526 645.747 cv
327.948 639.079 347.503 620.478 347.503 620.478 cv
347.503 620.478 330.132 641.005 304.054 648.7 cv
274.058 657.548 259.511 639.911 259.511 639.911 cv
cp
f
260.003 649.774 mo
260.003 649.774 277.933 661.204 301.015 655.603 cv
328.44 648.958 348.003 630.349 348.003 630.349 cv
348.003 630.349 330.616 650.868 304.534 658.563 cv
274.546 667.399 260.003 649.774 260.003 649.774 cv
cp
f
263.647 658.462 mo
263.647 658.462 281.577 669.899 304.663 664.302 cv
332.085 657.634 351.64 639.032 351.64 639.032 cv
351.64 639.032 334.265 659.556 308.187 667.251 cv
278.194 676.103 263.647 658.462 263.647 658.462 cv
cp
f
264.144 668.333 mo
264.144 668.333 282.069 679.763 305.151 674.157 cv
332.573 667.513 352.132 648.911 352.132 648.911 cv
352.132 648.911 334.749 669.419 308.671 677.114 cv
278.679 685.966 264.144 668.333 264.144 668.333 cv
cp
f
272.062 674.11 mo
272.062 674.11 289.991 685.54 313.081 679.946 cv
340.499 673.278 360.054 654.677 360.054 654.677 cv
360.054 654.677 342.679 675.204 316.604 682.899 cv
286.604 691.747 272.062 674.11 272.062 674.11 cv
cp
f
272.554 683.981 mo
272.554 683.981 290.483 695.407 313.562 689.802 cv
340.983 683.157 360.546 664.556 360.546 664.556 cv
360.546 664.556 343.163 685.067 317.085 692.763 cv
287.101 701.606 272.554 683.981 272.554 683.981 cv
cp
f
279.577 690.349 mo
279.577 690.349 297.507 701.782 320.593 696.181 cv
348.015 689.521 367.573 670.915 367.573 670.915 cv
367.573 670.915 350.198 691.435 324.12 699.138 cv
294.124 707.985 279.577 690.349 279.577 690.349 cv
cp
f
280.077 700.212 mo
280.077 700.212 298.003 711.646 321.089 706.04 cv
348.507 699.399 368.065 680.79 368.065 680.79 cv
368.065 680.79 350.683 701.306 324.604 709.001 cv
294.612 717.845 280.077 700.212 280.077 700.212 cv
cp
f
287.101 706.196 mo
287.101 706.196 305.034 717.63 328.12 712.028 cv
355.538 705.368 375.093 686.763 375.093 686.763 cv
375.093 686.763 357.726 707.29 331.644 714.985 cv
301.644 723.837 287.101 706.196 287.101 706.196 cv
cp
f
287.593 716.067 mo
287.593 716.067 305.522 727.493 328.601 721.888 cv
356.03 715.243 375.585 696.638 375.585 696.638 cv
375.585 696.638 358.202 717.157 332.128 724.849 cv
302.132 733.696 287.593 716.067 287.593 716.067 cv
cp
f
grestore
289.784 351.376 mo
289.784 351.376 217.284 440.751 251.659 567.001 cv
281.726 677.438 352.909 708.251 352.909 708.251 cv
352.909 708.251 259.784 667.626 238.862 544.345 cv
216.894 414.907 289.784 351.376 289.784 351.376 cv
cp
1 .819608 .678431 rgb
f
320.468 320.466 mo
320.468 320.466 273.718 349.704 248.155 444.04 cv
222.585 538.372 270.409 675.751 379.12 712.864 cv
379.12 712.864 281.034 669.501 256.683 552.302 cv
226.296 406.067 320.468 320.466 320.468 320.466 cv
cp
.27451 .207843 .145098 rgb
f
gsave
588.276 296.052 mo
588.276 296.052 680.995 363.271 693.515 442.946 cv
706.034 522.626 706.659 630.126 583.534 709.501 cv
583.534 709.501 677.909 629.501 654.159 484.501 cv
634.487 364.388 556.659 338.251 555.409 324.501 cv
554.159 310.751 588.276 296.052 588.276 296.052 cv
cp
clp
688.479 411.052 mo
688.479 411.052 686.437 435.267 642.772 445.153 cv
642.772 445.153 673.952 435.72 688.479 411.052 cv
cp
f
694.405 419.204 mo
694.405 419.204 692.358 443.411 648.71 453.298 cv
648.71 453.298 679.417 443.423 694.405 419.204 cv
cp
f
595.585 297.353 mo
595.585 297.353 588.272 312.747 567.104 319.673 cv
567.104 319.673 590.194 317.747 595.585 297.353 cv
cp
f
601.741 301.587 mo
601.741 301.587 605.976 318.134 567.491 331.606 cv
567.491 331.606 592.89 322.751 601.741 301.587 cv
cp
f
608.284 306.587 mo
608.284 306.587 607.897 329.681 565.179 343.919 cv
565.179 343.919 595.843 331.345 608.284 306.587 cv
cp
f
614.062 311.849 mo
614.062 311.849 616.878 337.251 573.585 350.11 cv
573.585 350.11 604.097 340.169 614.062 311.849 cv
cp
f
621.44 317.72 mo
621.44 317.72 622.53 341.997 580.507 357.419 cv
580.507 357.419 609.952 343.919 621.44 317.72 cv
cp
f
628.366 323.493 mo
628.366 323.493 629.452 347.767 587.437 363.196 cv
587.437 363.196 616.366 350.083 628.366 323.493 cv
cp
f
635.292 330.806 mo
635.292 330.806 636.382 355.083 594.366 370.505 cv
594.366 370.505 624.577 355.981 635.292 330.806 cv
cp
f
643.249 338.892 mo
643.249 338.892 644.339 363.169 602.323 378.587 cv
602.323 378.587 630.737 365.474 643.249 338.892 cv
cp
f
650.175 346.2 mo
650.175 346.2 651.269 373.938 609.249 385.903 cv
609.249 385.903 640.214 374.521 650.175 346.2 cv
cp
f
657.108 354.794 mo
657.108 354.794 658.194 379.071 616.175 394.497 cv
616.175 394.497 645.878 381.126 657.108 354.794 cv
cp
f
664.03 362.106 mo
664.03 362.106 665.12 386.384 623.104 401.81 cv
623.104 401.81 652.288 388.056 664.03 362.106 cv
cp
f
668.69 373.817 mo
668.69 373.817 668.663 398.118 625.983 411.599 cv
625.983 411.599 656.265 399.603 668.69 373.817 cv
cp
f
675.272 381.435 mo
675.272 381.435 675.249 405.735 632.569 419.216 cv
632.569 419.216 662.351 406.821 675.272 381.435 cv
cp
f
679.448 390.935 mo
679.448 390.935 679.163 415.239 636.343 428.271 cv
636.343 428.271 666.753 416.595 679.448 390.935 cv
cp
f
685.944 398.638 mo
685.944 398.638 685.663 422.927 642.847 435.962 cv
642.847 435.962 672.757 423.88 685.944 398.638 cv
cp
f
692.925 434.45 mo
692.925 434.45 688.433 459.556 640.601 465.427 cv
640.601 465.427 674.983 458.743 692.925 434.45 cv
cp
f
698.515 443.571 mo
698.515 443.571 694.019 468.669 646.194 474.544 cv
646.194 474.544 680.116 467.356 698.515 443.571 cv
cp
f
699.015 456.47 mo
699.015 456.47 693.628 481.392 645.616 485.556 cv
645.616 485.556 680.226 480.106 699.015 456.47 cv
cp
f
704.276 465.786 mo
704.276 465.786 698.882 490.7 650.89 494.868 cv
650.89 494.868 685.034 488.896 704.276 465.786 cv
cp
f
702.378 481.333 mo
702.378 481.333 694.487 505.579 646.296 504.849 cv
646.296 504.849 681.28 502.942 702.378 481.333 cv
cp
f
706.671 491.138 mo
706.671 491.138 698.769 515.376 650.601 514.642 cv
650.601 514.642 685.175 512.173 706.671 491.138 cv
cp
f
701.987 506.325 mo
701.987 506.325 691.714 529.665 643.835 524.118 cv
643.835 524.118 678.835 525.716 701.987 506.325 cv
cp
f
705.28 516.509 mo
705.28 516.509 694.999 539.841 647.14 534.294 cv
647.14 534.294 681.792 535.286 705.28 516.509 cv
cp
f
700.854 530.106 mo
700.854 530.106 688.46 552.388 641.308 542.415 cv
641.308 542.415 676.007 547.255 700.854 530.106 cv
cp
f
703.194 540.552 mo
703.194 540.552 690.78 562.825 643.647 552.856 cv
643.647 552.856 678.054 557.063 703.194 540.552 cv
cp
f
696.444 553.739 mo
696.444 553.739 681.933 574.7 635.976 560.169 cv
635.976 560.169 670.034 568.384 696.444 553.739 cv
cp
f
697.753 564.364 mo
697.753 564.364 683.218 585.317 637.284 570.786 cv
637.284 570.786 671.116 578.349 697.753 564.364 cv
cp
f
691.624 576.419 mo
691.624 576.419 675.546 596.216 630.839 578.208 cv
630.839 578.208 664.163 589.001 691.624 576.419 cv
cp
f
692.108 587.114 mo
692.108 587.114 676.019 606.899 631.331 588.899 cv
631.331 588.899 664.483 599.021 692.108 587.114 cv
cp
f
681.421 601.751 mo
681.421 601.751 662.792 619.169 620.952 595.247 cv
620.952 595.247 652.499 610.478 681.421 601.751 cv
cp
f
680.444 612.407 mo
680.444 612.407 661.804 629.821 619.991 605.907 cv
619.991 605.907 651.452 620.446 680.444 612.407 cv
cp
f
670.698 624.505 mo
670.698 624.505 650.397 639.946 611.194 611.903 cv
611.194 611.903 641.034 630.259 670.698 624.505 cv
cp
f
668.647 635.009 mo
668.647 635.009 648.339 650.442 609.159 622.411 cv
609.159 622.411 638.983 640.071 668.647 635.009 cv
cp
f
654.839 645.423 mo
654.839 645.423 632.554 657.817 597.737 624.485 cv
597.737 624.485 624.663 646.899 654.839 645.423 cv
cp
f
651.312 655.524 mo
651.312 655.524 629.015 667.915 594.226 634.595 cv
594.226 634.595 621.241 656.321 651.312 655.524 cv
cp
f
639.937 664.485 mo
639.937 664.485 617.112 675.864 583.843 641.001 cv
583.843 641.001 609.726 664.603 639.937 664.485 cv
cp
f
635.96 674.423 mo
635.96 674.423 613.128 685.794 579.878 650.935 cv
579.878 650.935 605.878 673.86 635.96 674.423 cv
cp
f
620.253 680.837 mo
620.253 680.837 596.097 688.993 567.89 649.915 cv
567.89 649.915 590.312 676.825 620.253 680.837 cv
cp
f
614.96 690.134 mo
614.96 690.134 590.788 698.29 562.608 659.216 cv
562.608 659.216 585.241 685.481 614.96 690.134 cv
cp
f
602.062 697.591 mo
602.062 697.591 577.194 703.228 553.144 661.47 cv
553.144 661.47 572.687 690.532 602.062 697.591 cv
cp
f
591.995 703.216 mo
591.995 703.216 567.116 708.856 543.081 667.103 cv
543.081 667.103 562.909 695.54 591.995 703.216 cv
cp
f
grestore
473.647 360.544 mo
473.647 360.544 484.159 356.169 489.573 362.419 cv
489.573 362.419 493.745 363.255 495.823 366.169 cv
497.905 369.087 498.226 370.966 501.562 370.544 cv
504.897 370.126 506.562 368.88 507.812 370.544 cv
509.062 372.212 509.89 366.376 514.476 369.712 cv
519.062 373.044 519.89 372.204 523.226 371.376 cv
526.562 370.544 531.976 371.794 531.976 371.794 cv
531.976 371.794 530.733 368.454 526.147 367.626 cv
521.562 366.794 522.749 363.196 521.562 362.626 cv
518.538 361.165 518.538 358.872 522.288 359.29 cv
527.183 359.837 525.632 361.704 528.226 361.376 cv
528.226 361.376 526.565 356.376 521.147 356.376 cv
515.726 356.376 515.733 356.794 511.147 356.794 cv
506.562 356.794 504.897 356.38 501.147 356.794 cv
497.397 357.212 494.476 355.962 494.476 355.962 cv
488.647 355.544 li
488.647 355.544 476.983 355.544 473.647 360.544 cv
cp
.964706 .823529 .607843 rgb
f
438.647 376.376 mo
438.647 376.376 441.558 385.54 430.726 391.376 cv
430.726 391.376 434.062 394.704 440.312 393.876 cv
440.312 393.876 431.976 394.294 430.312 397.212 cv
428.647 400.126 426.976 400.126 426.976 400.126 cv
426.976 400.126 429.065 400.954 433.647 398.876 cv
438.226 396.794 443.647 394.716 449.897 395.544 cv
456.147 396.376 456.147 396.376 456.147 396.376 cv
456.147 396.376 450.733 393.466 446.147 393.044 cv
441.562 392.626 446.147 394.29 441.562 392.626 cv
436.976 390.962 436.976 390.54 439.476 388.876 cv
441.976 387.212 441.565 381.376 438.647 376.376 cv
cp
f
474.476 317.212 mo
474.476 317.212 483.226 312.212 491.976 312.212 cv
491.976 312.212 489.058 310.544 483.226 312.212 cv
483.226 312.212 494.065 308.462 499.897 309.712 cv
505.726 310.962 508.226 310.544 508.226 310.544 cv
502.397 308.044 li
502.397 308.044 508.323 304.919 515.409 304.919 cv
522.495 304.919 524.062 308.462 524.062 308.462 cv
524.062 308.462 520.413 299.915 529.897 303.044 cv
535.272 304.821 534.577 302.419 541.245 301.169 cv
547.909 299.919 550.308 302.63 553.226 305.544 cv
556.147 308.462 560.823 304.919 562.909 305.337 cv
564.995 305.751 566.663 309.505 571.245 309.505 cv
575.823 309.505 579.995 311.169 579.995 311.169 cv
579.995 311.169 576.562 307.626 574.062 305.962 cv
571.562 304.294 569.89 301.376 566.976 300.126 cv
564.062 298.876 565.308 296.794 559.476 294.712 cv
553.647 292.626 553.647 292.626 553.647 292.626 cv
553.647 292.626 561.565 290.54 569.897 297.626 cv
569.897 297.626 565.737 291.372 561.565 290.54 cv
557.397 289.712 555.726 288.88 553.226 286.794 cv
550.726 284.712 544.062 282.626 544.062 282.626 cv
544.062 282.626 551.983 281.38 556.147 286.794 cv
556.147 286.794 554.897 281.376 546.562 279.712 cv
546.562 279.712 542.397 275.544 536.147 274.712 cv
536.147 274.712 528.647 270.126 517.812 271.376 cv
517.812 271.376 514.476 273.462 509.062 273.462 cv
503.647 273.462 502.397 273.454 501.562 276.376 cv
500.726 279.294 499.062 279.294 492.812 279.712 cv
486.562 280.126 478.647 280.954 474.897 286.376 cv
474.897 286.376 478.233 283.88 483.647 284.294 cv
483.647 284.294 475.308 285.962 479.476 285.962 cv
483.647 285.962 482.39 287.212 479.476 288.462 cv
476.562 289.712 475.312 293.044 475.312 293.044 cv
475.312 293.044 481.14 288.462 486.976 289.712 cv
492.812 290.962 493.226 290.126 498.226 290.962 cv
503.226 291.794 503.64 290.544 506.976 289.712 cv
510.312 288.876 514.476 288.044 519.476 289.712 cv
519.476 289.712 511.14 290.954 508.226 293.876 cv
505.312 296.794 506.147 297.63 501.562 298.044 cv
496.976 298.462 494.476 297.212 494.476 297.212 cv
494.476 297.212 494.897 300.126 499.897 300.126 cv
499.897 300.126 499.065 301.79 493.647 302.626 cv
488.226 303.462 475.726 311.794 474.476 317.212 cv
cp
f
526.562 283.876 mo
526.562 283.876 522.815 282.204 519.897 282.626 cv
516.976 283.044 516.983 285.544 519.897 285.544 cv
522.812 285.544 526.976 285.54 526.562 283.876 cv
cp
1 .572549 0 rgb
f
531.562 290.126 mo
531.562 290.126 536.14 289.704 538.226 291.376 cv
540.312 293.044 541.147 293.876 536.562 293.876 cv
531.976 293.876 526.147 290.54 531.562 290.126 cv
cp
f
508.226 360.962 mo
508.226 360.962 515.726 364.29 505.726 364.712 cv
495.726 365.13 501.14 360.544 508.226 360.962 cv
cp
f
431.562 385.126 mo
431.562 385.126 425.726 387.63 422.812 386.794 cv
419.897 385.962 419.897 387.626 421.147 388.462 cv
422.397 389.294 424.897 392.626 419.897 392.212 cv
414.897 391.794 416.565 389.712 411.147 389.712 cv
405.726 389.712 405.726 389.712 405.726 389.712 cv
405.726 389.712 410.315 388.044 412.397 386.794 cv
414.476 385.544 414.062 383.88 416.562 385.544 cv
419.062 387.212 417.812 382.212 417.812 382.212 cv
417.812 382.212 419.476 383.876 424.476 384.712 cv
429.476 385.544 431.562 385.126 431.562 385.126 cv
cp
.964706 .823529 .607843 rgb
f
430.312 365.126 mo
430.312 365.126 432.39 364.704 429.476 368.876 cv
426.562 373.044 427.815 373.462 431.147 373.462 cv
434.476 373.462 434.476 373.462 434.476 373.462 cv
434.476 373.462 433.233 374.704 428.647 375.126 cv
424.062 375.544 422.815 371.794 421.147 374.712 cv
419.476 377.626 424.483 378.88 419.897 379.294 cv
415.312 379.712 419.476 382.212 414.476 383.462 cv
409.476 384.712 404.897 383.876 402.812 384.712 cv
400.726 385.544 394.476 388.876 394.476 388.876 cv
394.476 388.876 397.39 384.716 403.226 381.794 cv
409.062 378.876 411.562 375.544 411.562 375.544 cv
411.562 375.544 405.726 379.294 400.726 379.712 cv
395.726 380.126 395.726 380.126 395.726 380.126 cv
395.726 380.126 393.647 378.454 399.897 377.626 cv
406.147 376.794 407.815 376.794 409.897 373.462 cv
411.976 370.126 413.233 368.454 416.147 368.876 cv
419.062 369.294 417.815 367.626 422.397 367.626 cv
426.976 367.626 430.312 365.126 430.312 365.126 cv
cp
f
419.573 353.255 mo
419.573 353.255 413.323 357.419 407.909 362.837 cv
404.667 366.079 402.815 366.794 398.647 367.212 cv
394.476 367.626 394.476 372.204 399.062 372.626 cv
399.062 372.626 394.476 373.876 390.312 373.462 cv
386.147 373.044 386.14 372.626 384.476 375.126 cv
382.812 377.626 384.062 378.876 379.062 377.626 cv
374.062 376.376 369.062 378.044 369.062 378.044 cv
369.062 378.044 371.976 374.716 375.312 374.294 cv
378.647 373.876 379.89 370.544 374.476 370.544 cv
369.062 370.544 366.976 370.54 368.226 368.876 cv
369.476 367.212 369.476 366.794 364.062 365.962 cv
358.647 365.126 354.897 366.794 354.897 366.794 cv
354.897 366.794 366.976 360.544 370.312 363.044 cv
373.647 365.544 367.39 366.38 375.726 366.794 cv
384.062 367.212 382.397 365.544 386.562 366.794 cv
390.726 368.044 391.976 366.79 395.726 365.126 cv
399.476 363.462 397.335 365.728 400.823 361.587 cv
405.921 355.544 419.573 353.255 419.573 353.255 cv
cp
f
420.308 346.794 mo
420.308 346.794 418.226 345.954 411.14 347.626 cv
404.058 349.294 398.952 352.415 392.702 359.087 cv
389.515 362.485 393.538 351.79 403.64 347.212 cv
408.226 345.13 411.14 345.126 411.14 345.126 cv
411.14 345.126 407.397 338.88 400.726 340.544 cv
394.058 342.212 389.476 345.126 388.64 343.462 cv
387.808 341.794 391.14 341.79 386.14 341.376 cv
381.14 340.962 384.476 338.044 381.14 338.044 cv
377.808 338.044 371.976 333.876 371.976 333.876 cv
371.976 333.876 378.64 335.966 384.89 335.544 cv
391.14 335.126 387.491 332.419 379.573 332.005 cv
379.573 332.005 393.636 330.122 397.808 333.04 cv
401.976 335.962 401.558 335.544 404.89 336.794 cv
408.226 338.044 409.897 340.54 411.976 342.626 cv
414.058 344.712 416.972 346.38 420.308 346.794 cv
cp
f
411.452 325.337 mo
411.452 325.337 411.14 323.462 405.515 323.149 cv
399.89 322.837 397.702 324.399 399.89 322.837 cv
402.077 321.274 402.39 321.587 398.327 319.712 cv
394.265 317.837 393.64 315.962 391.765 315.962 cv
389.89 315.962 384.265 314.712 384.265 314.712 cv
384.265 314.712 390.827 313.149 393.327 314.712 cv
395.827 316.274 394.265 314.712 393.952 313.462 cv
393.64 312.212 394.89 307.524 392.702 308.462 cv
390.515 309.399 390.827 312.524 390.827 312.524 cv
390.827 312.524 388.952 308.774 386.14 309.087 cv
383.327 309.399 384.89 310.649 381.452 310.649 cv
378.015 310.649 385.827 311.587 377.702 311.899 cv
369.577 312.212 373.015 309.712 370.202 310.024 cv
367.39 310.337 366.14 310.649 365.515 309.712 cv
364.89 308.774 368.952 308.774 368.952 306.899 cv
368.952 305.024 368.015 302.837 366.14 303.774 cv
364.265 304.712 361.386 305.11 360.827 306.274 cv
359.577 308.876 366.038 311.165 366.038 311.165 cv
366.038 311.165 364.89 310.962 359.265 311.274 cv
353.64 311.587 350.827 309.087 352.077 308.774 cv
353.327 308.462 354.265 307.524 352.702 306.899 cv
351.14 306.274 350.202 305.024 351.765 304.399 cv
353.327 303.774 355.827 304.087 353.327 303.774 cv
350.827 303.462 348.952 303.462 348.952 303.462 cv
348.952 303.462 353.327 300.649 357.077 300.962 cv
360.827 301.274 358.327 296.587 361.452 296.587 cv
364.577 296.587 363.433 297.313 368.745 297.001 cv
374.058 296.688 376.765 295.024 376.765 295.024 cv
376.765 295.024 369.265 299.712 373.64 300.337 cv
378.015 300.962 377.39 296.899 379.577 298.774 cv
381.765 300.649 383.327 304.399 386.452 303.462 cv
389.577 302.524 387.077 299.712 387.077 299.712 cv
387.077 299.712 392.702 300.649 396.14 305.024 cv
399.577 309.399 399.89 307.212 401.452 310.337 cv
403.015 313.462 404.265 314.712 404.265 314.712 cv
398.015 312.524 li
398.015 312.524 401.14 315.962 405.202 318.149 cv
409.265 320.337 411.452 325.337 411.452 325.337 cv
cp
f
404.788 294.712 mo
404.788 294.712 400.515 294.712 394.577 294.399 cv
388.64 294.087 390.202 292.837 386.14 294.087 cv
382.077 295.337 379.89 295.337 379.89 295.337 cv
379.89 295.337 383.015 294.087 385.202 292.212 cv
387.39 290.337 387.702 290.024 389.577 289.712 cv
391.452 289.399 392.39 286.587 390.202 286.587 cv
388.015 286.587 390.827 286.899 387.702 285.337 cv
384.577 283.774 380.202 283.462 380.202 283.462 cv
380.202 283.462 380.202 280.962 385.515 280.649 cv
390.827 280.337 387.39 277.837 392.39 277.524 cv
397.39 277.212 398.952 274.087 400.827 274.087 cv
402.702 274.087 407.077 272.837 407.077 272.837 cv
407.077 272.837 403.015 274.712 403.64 277.524 cv
404.265 280.337 403.952 280.024 402.077 280.962 cv
400.202 281.899 398.015 280.649 397.077 280.024 cv
396.14 279.399 393.327 278.462 392.702 280.649 cv
392.077 282.837 389.89 284.087 394.265 284.087 cv
398.64 284.087 406.038 286.165 406.038 286.165 cv
406.038 286.165 401.14 285.649 398.952 286.274 cv
396.765 286.899 397.499 286.946 396.14 288.774 cv
393.12 292.837 402.913 290.649 404.788 294.712 cv
cp
f
437.39 311.899 mo
437.39 311.899 432.077 305.337 428.64 303.462 cv
425.202 301.587 426.452 300.962 421.765 300.024 cv
417.077 299.087 407.909 297.419 407.909 297.419 cv
407.909 297.419 421.452 296.587 424.89 299.087 cv
424.89 299.087 426.14 299.712 426.14 298.774 cv
426.14 297.837 427.077 297.212 420.515 295.962 cv
413.952 294.712 414.265 294.915 410.827 292.415 cv
407.39 289.915 403.64 290.337 403.64 290.337 cv
403.64 290.337 407.39 289.712 408.952 289.087 cv
410.515 288.462 411.14 289.087 412.39 290.649 cv
413.64 292.212 416.452 292.837 416.452 291.587 cv
416.452 290.337 412.39 290.337 415.515 287.212 cv
418.64 284.087 414.577 284.087 419.265 282.212 cv
423.952 280.337 428.327 279.087 428.64 277.524 cv
428.952 275.962 431.765 276.899 431.765 276.899 cv
431.765 276.899 429.89 275.337 431.765 275.024 cv
433.64 274.712 432.077 272.212 436.765 272.212 cv
441.452 272.212 439.577 270.024 443.952 270.024 cv
448.327 270.024 449.577 269.087 450.515 269.087 cv
451.452 269.087 447.39 269.712 449.265 271.274 cv
451.14 272.837 449.265 274.399 449.265 274.399 cv
449.265 274.399 443.64 270.024 443.327 273.149 cv
443.015 276.274 439.89 273.149 440.202 275.649 cv
440.515 278.149 438.952 275.649 437.077 275.337 cv
435.202 275.024 432.077 277.212 433.952 278.774 cv
435.827 280.337 432.077 279.712 433.952 281.899 cv
435.827 284.087 433.015 281.587 438.015 282.524 cv
443.015 283.462 442.077 279.712 443.952 280.024 cv
445.827 280.337 445.827 278.149 447.702 278.149 cv
449.577 278.149 449.89 278.774 450.827 276.587 cv
451.765 274.399 449.265 275.962 451.765 274.399 cv
454.265 272.837 456.452 270.337 456.452 270.337 cv
456.452 270.337 454.89 274.087 455.827 275.649 cv
456.765 277.212 460.202 276.478 458.327 279.29 cv
456.452 282.103 464.577 285.337 464.577 285.337 cv
464.577 285.337 460.202 283.149 458.327 286.274 cv
456.452 289.399 453.327 290.962 453.015 288.774 cv
452.702 286.587 449.89 283.149 447.077 285.962 cv
444.265 288.774 443.015 287.837 442.39 286.899 cv
441.765 285.962 436.765 285.962 436.765 285.962 cv
438.952 289.399 li
438.952 289.399 433.64 287.837 431.452 287.524 cv
429.265 287.212 425.515 286.899 429.89 288.774 cv
434.265 290.649 433.64 291.899 433.64 291.899 cv
433.64 291.899 425.202 289.399 424.265 290.649 cv
423.327 291.899 424.577 293.149 426.452 293.462 cv
428.327 293.774 430.202 292.524 433.64 294.087 cv
437.077 295.649 440.202 299.712 440.202 299.712 cv
440.202 299.712 436.14 296.587 432.702 295.649 cv
432.702 295.649 435.827 297.837 434.89 300.024 cv
434.89 300.024 433.327 299.399 430.827 299.087 cv
428.327 298.774 429.265 299.712 431.14 301.274 cv
433.015 302.837 430.827 304.087 433.64 305.337 cv
436.452 306.587 437.39 307.524 437.39 311.899 cv
cp
f
477.698 290.856 mo
477.698 290.856 474.886 293.981 472.073 294.294 cv
469.261 294.606 471.136 293.669 467.073 294.606 cv
463.011 295.544 459.159 303.044 459.159 303.044 cv
459.159 303.044 459.886 293.044 463.636 292.419 cv
467.386 291.794 465.511 291.169 469.261 291.794 cv
473.011 292.419 474.261 292.731 477.698 290.856 cv
cp
f
513.745 283.669 mo
513.745 283.669 507.39 287.212 503.015 287.212 cv
498.64 287.212 502.39 285.024 499.577 285.337 cv
496.765 285.649 495.827 284.087 493.952 285.649 cv
492.077 287.212 488.64 285.649 488.64 285.649 cv
488.64 285.649 492.077 283.774 496.765 283.774 cv
501.452 283.774 503.015 284.712 505.202 283.774 cv
507.39 282.837 513.745 283.669 513.745 283.669 cv
cp
1 .572549 0 rgb
f
517.077 301.587 mo
513.327 300.337 513.952 298.774 516.452 298.774 cv
526.765 298.774 520.827 302.837 517.077 301.587 cv
cp
f
382.39 322.212 mo
382.39 322.212 381.632 321.313 377.39 320.962 cv
367.288 320.126 354.995 322.415 354.995 322.415 cv
354.995 322.415 364.683 318.563 373.12 319.087 cv
377.187 319.341 377.858 319.485 379.788 319.915 cv
381.663 320.337 381.14 317.837 381.14 317.837 cv
381.14 317.837 383.015 319.712 382.39 322.212 cv
cp
.964706 .823529 .607843 rgb
f
542.39 343.149 mo
542.39 343.149 535.55 342.47 531.87 340.962 cv
527.804 339.294 525.515 337.212 525.515 337.212 cv
525.515 337.212 528.952 338.462 529.577 337.524 cv
530.202 336.587 528.64 335.649 526.765 333.774 cv
524.89 331.899 525.202 329.399 520.827 331.587 cv
516.452 333.774 510.827 331.274 510.827 331.274 cv
510.827 331.274 511.14 329.399 514.89 330.337 cv
518.64 331.274 522.702 328.774 521.14 326.899 cv
519.577 325.024 518.64 324.087 513.952 324.712 cv
509.265 325.337 506.452 324.087 506.452 324.087 cv
506.452 324.087 511.14 322.837 514.265 321.274 cv
517.39 319.712 521.14 320.337 521.765 322.837 cv
522.39 325.337 524.265 325.962 525.202 326.587 cv
526.14 327.212 530.827 327.524 533.327 325.649 cv
535.827 323.774 535.827 323.774 535.827 323.774 cv
535.827 323.774 535.202 327.837 531.452 328.774 cv
527.702 329.712 531.14 332.212 530.515 333.149 cv
529.89 334.087 532.702 337.212 532.702 337.212 cv
535.515 336.587 li
535.515 336.587 533.015 338.462 535.202 339.712 cv
537.39 340.962 542.39 343.149 542.39 343.149 cv
cp
f
477.39 323.774 mo
477.39 323.774 483.327 318.149 490.202 316.899 cv
497.077 315.649 503.015 314.712 503.015 314.712 cv
503.015 314.712 493.327 313.774 491.452 315.024 cv
489.577 316.274 487.077 315.962 483.952 317.837 cv
480.827 319.712 478.64 320.962 477.39 323.774 cv
cp
f
359.89 335.024 mo
359.89 335.024 354.89 337.837 350.202 335.024 cv
345.515 332.212 344.577 333.149 341.14 335.024 cv
337.702 336.899 336.765 333.774 337.702 332.837 cv
338.64 331.899 339.89 328.774 339.89 328.774 cv
339.89 328.774 339.577 331.899 336.14 331.899 cv
332.702 331.899 335.515 333.774 336.14 335.649 cv
336.765 337.524 338.327 340.024 340.515 338.149 cv
342.702 336.274 343.64 336.899 345.515 336.274 cv
347.39 335.649 346.765 334.712 348.952 336.274 cv
351.14 337.837 357.702 339.399 359.89 335.024 cv
cp
f
474.89 296.899 mo
474.89 296.899 471.765 297.837 470.515 299.399 cv
469.265 300.962 468.327 300.649 468.327 299.087 cv
468.327 297.524 467.702 296.899 469.577 296.274 cv
471.452 295.649 473.952 295.337 474.89 296.899 cv
cp
f
416.78 323.563 mo
416.78 323.563 411.71 313.763 395.812 309.36 cv
395.812 309.36 407.987 310.72 415.429 318.493 cv
415.429 318.493 414.749 313.071 418.128 315.786 cv
421.515 318.493 422.87 313.747 425.577 315.786 cv
428.28 317.81 426.921 315.786 430.308 317.138 cv
433.69 318.493 427.944 311.724 427.944 311.724 cv
427.944 311.724 431.671 311.731 434.026 316.462 cv
436.39 321.196 433.351 312.407 437.413 316.462 cv
441.464 320.521 439.784 314.423 443.159 316.802 cv
446.538 319.169 446.194 321.868 446.538 316.122 cv
446.878 310.376 449.249 297.864 449.249 297.864 cv
448.569 313.747 li
448.569 313.747 450.772 301.106 452.62 306.649 cv
454.319 311.724 452.62 314.771 452.62 314.771 cv
455.335 304.966 li
455.335 312.739 li
455.335 312.739 459.054 301.587 462.093 296.169 cv
462.093 296.169 459.046 307.669 457.698 313.423 cv
456.351 319.169 459.651 305.771 460.741 310.376 cv
462.093 316.122 466.147 308.345 465.812 311.048 cv
465.476 313.747 466.151 313.423 468.183 310.032 cv
470.214 306.649 482.39 293.13 498.96 291.774 cv
498.96 291.774 476.308 298.208 467.507 323.563 cv
467.507 323.563 479.687 301.579 499.632 295.493 cv
499.632 295.493 485.085 300.56 477.312 317.138 cv
477.312 317.138 490.507 310.368 484.757 316.802 cv
478.999 323.22 481.034 319.841 480.358 323.22 cv
479.687 326.606 493.202 318.153 493.202 318.153 cv
477.987 333.032 li
477.987 333.032 481.034 330.13 488.745 327.837 cv
496.452 325.54 506.245 326.376 506.245 326.376 cv
506.245 326.376 493.257 327.919 487.702 330.337 cv
482.155 332.751 476.132 337.087 474.608 339.458 cv
471.565 344.185 474.944 342.841 471.905 345.544 cv
468.862 348.247 478.339 345.884 472.581 349.599 cv
466.827 353.317 469.198 358.392 469.198 358.392 cv
469.198 358.392 464.46 366.845 463.444 366.845 cv
462.437 366.845 449.589 365.493 446.206 367.517 cv
442.819 369.548 442.808 369.899 443.495 373.274 cv
444.175 376.653 443.499 391.196 443.159 392.212 cv
442.819 393.22 442.808 372.259 439.433 369.888 cv
436.062 367.517 432.671 369.548 427.265 371.923 cv
421.854 374.29 410.019 384.438 410.019 384.438 cv
410.019 384.438 418.812 372.259 428.616 366.845 cv
438.417 361.435 426.581 363.13 422.187 365.833 cv
417.796 368.532 410.019 375.638 410.019 375.638 cv
410.019 375.638 411.71 368.532 424.218 360.759 cv
436.737 352.981 409.343 365.161 409.343 365.161 cv
409.343 365.161 414.077 359.755 418.128 358.06 cv
422.187 356.36 419.823 353.997 415.772 356.028 cv
411.714 358.06 397.167 366.169 397.167 366.169 cv
397.167 366.169 408.323 355.017 415.429 352.981 cv
422.53 350.954 420.491 348.923 415.085 349.938 cv
409.687 350.954 404.608 352.646 404.608 352.646 cv
404.608 352.646 405.276 347.571 412.038 347.571 cv
418.812 347.571 405.28 344.196 410.358 343.856 cv
415.429 343.513 412.054 341.813 406.64 339.114 cv
401.226 336.411 382.624 334.384 382.624 334.384 cv
382.624 334.384 398.522 331.673 408.671 337.083 cv
418.812 342.505 413.062 335.056 405.956 329.653 cv
401.741 326.438 399.53 325.243 405.956 326.938 cv
412.386 328.638 398.862 318.153 406.64 321.196 cv
414.413 324.235 416.78 323.563 416.78 323.563 cv
cp
.27451 .207843 .145098 rgb
f
446.257 328.267 mo
446.257 328.267 451.39 324.427 457.034 324.935 cv
462.687 325.446 465.507 323.138 468.585 323.138 cv
471.659 323.138 474.226 322.88 474.226 322.88 cv
474.226 322.88 473.456 327.239 469.862 332.884 cv
466.272 338.532 464.995 343.153 462.425 342.38 cv
459.858 341.61 463.976 347.001 461.14 352.388 cv
458.319 357.778 458.065 360.853 458.065 360.853 cv
458.065 360.853 455.503 359.321 451.909 359.575 cv
448.312 359.829 442.151 359.829 442.413 355.981 cv
442.413 355.981 443.702 358.802 436.515 359.575 cv
429.327 360.345 425.733 361.118 425.983 361.884 cv
426.249 362.653 423.944 348.544 426.503 345.72 cv
426.503 345.72 423.421 345.72 421.37 340.329 cv
419.319 334.946 417.78 325.446 417.78 325.446 cv
417.78 325.446 418.554 328.013 428.046 326.728 cv
437.534 325.446 444.202 324.419 446.257 328.267 cv
cp
.827451 .713726 .117647 rgb
f
443.421 350.825 mo
442.726 350.825 441.991 350.794 441.241 350.747 cv
432.647 350.165 430.726 346.337 430.343 345.181 cv
430.003 344.138 li
430.354 343.103 li
430.476 342.692 430.804 341.345 430.679 340.2 cv
430.632 339.833 430.569 339.497 430.499 339.177 cv
430.073 337.075 429.862 334.927 431.905 331.81 cv
434.405 328.024 442.222 327.028 445.46 326.774 cv
446.437 326.821 450.073 327.302 452.726 331.665 cv
453.104 332.302 li
455.972 336.985 459.214 342.298 456.569 345.864 cv
454.272 348.97 449.343 350.825 443.421 350.825 cv
cp
.27451 .207843 .145098 rgb
f
445.491 328.524 mo
445.491 328.524 448.054 328.778 450.108 332.118 cv
452.155 335.454 456.011 341.36 454.472 343.411 cv
452.929 345.462 448.569 347.778 440.874 347.259 cv
433.171 346.743 432.147 343.661 432.147 343.661 cv
432.147 343.661 432.921 341.353 432.663 339.048 cv
432.405 336.731 431.382 335.454 433.433 332.376 cv
435.483 329.294 445.491 328.524 445.491 328.524 cv
cp
.360784 .388235 0 rgb
f
457.546 346.489 mo
457.546 346.489 461.077 344.88 459.538 337.958 cv
457.999 331.028 449.851 326.478 449.851 326.478 cv
449.851 326.478 454.983 326.208 458.065 330.575 cv
461.14 334.946 464.218 343.157 457.546 346.489 cv
cp
.27451 .207843 .145098 rgb
f
435.55 339.579 mo
432.413 339.579 430.229 337.817 430.003 335.091 cv
429.651 330.7 434.108 327.708 438.71 326.692 cv
440.038 326.396 441.366 326.247 442.655 326.247 cv
444.901 326.247 446.327 326.696 446.585 326.79 cv
447.882 327.274 449.327 328.462 449.499 330.31 cv
449.761 333.169 446.894 335.188 444.706 336.454 cv
442.265 337.876 438.69 339.579 435.55 339.579 cv
cp
f
446.519 328.267 mo
446.519 328.267 450.358 329.81 443.69 333.915 cv
437.022 338.021 432.151 338.278 431.894 334.946 cv
431.636 331.606 435.694 329.118 439.335 328.267 cv
443.69 327.243 446.519 328.267 446.519 328.267 cv
cp
.705882 .678431 .45098 rgb
f
441.386 331.345 mo
441.386 331.345 435.995 334.685 435.995 332.376 cv
435.995 330.067 442.925 329.29 441.386 331.345 cv
cp
.27451 .207843 .145098 rgb
f
442.222 352.005 mo
442.222 352.005 440.101 358.161 448.569 360.087 cv
448.569 360.087 446.835 361.239 443.757 359.896 cv
440.683 358.548 440.683 354.505 442.222 352.005 cv
cp
f
452.226 347.575 mo
452.226 347.575 455.112 350.271 455.112 352.966 cv
455.112 355.657 455.882 358.161 455.882 358.161 cv
455.882 358.161 454.147 355.278 453.96 353.353 cv
453.765 351.423 449.339 349.31 449.339 349.31 cv
449.339 349.31 450.108 347.388 452.226 347.575 cv
cp
f
436.062 347.962 mo
436.062 347.962 431.058 349.114 429.901 353.931 cv
429.901 353.931 430.476 349.114 432.792 347.575 cv
436.062 347.962 li
cp
f
430.866 335.454 mo
430.866 335.454 429.327 332.759 425.667 331.606 cv
422.011 330.454 421.054 328.72 421.054 328.72 cv
421.054 328.72 421.245 331.028 423.358 331.989 cv
425.476 332.954 430.108 335.513 430.679 340.2 cv
430.866 335.454 li
cp
f
458.382 332.181 mo
458.382 332.181 459.343 329.294 462.812 328.524 cv
466.272 327.759 471.468 324.872 471.468 324.872 cv
471.468 324.872 468.198 328.524 463.964 329.872 cv
459.729 331.22 459.921 334.302 459.921 334.302 cv
458.382 332.181 li
cp
f
561.14 391.063 mo
561.14 391.063 560.515 393.563 558.327 392.626 cv
556.14 391.688 555.202 388.251 558.015 387.938 cv
560.827 387.626 560.515 389.813 561.14 391.063 cv
cp
f
546.452 395.438 mo
546.452 395.438 547.39 397.938 545.202 397.626 cv
543.015 397.313 543.64 393.876 546.452 395.438 cv
cp
f
561.765 407.938 mo
561.765 407.938 560.827 409.813 558.64 409.188 cv
556.452 408.563 557.39 406.063 558.64 405.751 cv
559.89 405.438 562.077 405.751 561.765 407.938 cv
cp
f
578.015 418.876 mo
578.015 418.876 575.515 421.376 573.952 420.126 cv
572.39 418.876 572.077 416.376 573.952 416.688 cv
575.827 417.001 578.952 417.313 578.015 418.876 cv
cp
f
541.765 425.751 mo
541.765 425.751 542.702 429.188 539.577 428.251 cv
536.452 427.313 537.702 425.438 539.89 424.813 cv
542.077 424.188 541.765 425.751 541.765 425.751 cv
cp
f
529.265 437.626 mo
529.265 437.626 529.89 441.063 527.702 440.438 cv
525.515 439.813 525.202 437.313 526.452 436.688 cv
527.702 436.063 527.39 435.751 529.265 437.626 cv
cp
f
556.452 465.751 mo
556.452 465.751 555.827 469.188 553.015 466.376 cv
550.202 463.563 552.39 462.938 554.265 462.938 cv
556.14 462.938 556.452 464.188 556.452 465.751 cv
cp
f
581.452 396.376 mo
581.452 396.376 582.39 399.501 579.265 398.876 cv
576.14 398.251 574.89 396.376 577.702 395.126 cv
580.515 393.876 581.14 394.188 581.452 396.376 cv
cp
f
535.202 379.501 mo
535.202 379.501 537.702 381.376 535.202 381.688 cv
532.702 382.001 529.577 379.813 531.452 378.563 cv
533.327 377.313 534.577 377.938 535.202 379.501 cv
cp
f
533.015 394.813 mo
533.015 394.813 535.515 398.251 532.39 397.313 cv
529.265 396.376 526.765 394.501 528.952 393.251 cv
531.14 392.001 533.015 393.876 533.015 394.813 cv
cp
f
573.015 452.626 mo
573.015 452.626 572.702 455.438 570.202 455.126 cv
567.702 454.813 564.89 453.563 568.015 452.001 cv
571.14 450.438 573.015 450.438 573.015 452.626 cv
cp
f
577.077 485.126 mo
577.077 485.126 577.206 485.747 577.116 486.38 cv
577.015 487.165 576.593 487.974 575.202 487.626 cv
572.702 487.001 572.39 483.876 574.577 483.251 cv
576.765 482.626 577.077 485.126 577.077 485.126 cv
cp
f
542.077 485.438 mo
542.077 485.438 543.64 486.688 541.14 487.313 cv
538.64 487.938 536.765 485.438 538.952 484.501 cv
541.14 483.563 542.077 485.438 542.077 485.438 cv
cp
f
555.515 493.876 mo
555.515 493.876 557.702 498.563 554.265 497.001 cv
550.827 495.438 551.452 491.376 555.515 493.876 cv
cp
f
341.569 302.868 mo
341.569 302.868 394.94 255.661 500.655 263.872 cv
500.655 263.872 396.995 264.896 341.569 302.868 cv
cp
.984314 .886275 .866667 rgb
f
435.409 312.419 mo
435.409 312.419 427.495 299.091 399.995 300.755 cv
399.995 300.755 421.659 301.587 435.409 312.419 cv
cp
.964706 .823529 .607843 rgb
f
404.159 332.837 mo
404.159 332.837 392.073 322.837 362.073 327.837 cv
362.073 327.837 380.409 325.337 404.159 332.837 cv
cp
f
426.503 345.72 mo
426.503 345.72 423.647 352.181 425.983 361.884 cv
425.983 361.884 429.702 360.478 436.515 359.575 cv
436.515 359.575 429.585 358.665 426.663 360.126 cv
426.663 360.126 424.054 355.067 426.503 345.72 cv
cp
.933333 .886275 .533333 rgb
f
473.327 355.962 mo
473.327 355.962 486.245 346.587 503.327 353.665 cv
503.327 353.665 489.788 350.126 473.327 355.962 cv
cp
.964706 .823529 .607843 rgb
f
471.452 285.962 mo
471.452 285.962 476.245 277.626 495.827 276.376 cv
495.827 276.376 478.327 272.212 471.452 285.962 cv
cp
f
398.745 327.415 mo
398.745 327.415 388.124 323.044 372.913 324.087 cv
372.913 324.087 385.823 320.122 398.745 327.415 cv
cp
f
405.827 343.876 mo
405.827 343.876 392.288 344.915 383.327 360.751 cv
383.327 360.751 392.495 348.876 405.827 343.876 cv
cp
f
478.327 338.251 mo
478.327 338.251 486.663 329.087 505.202 331.587 cv
505.202 331.587 489.163 331.587 478.327 338.251 cv
cp
f
472.077 279.087 mo
472.077 279.087 478.745 270.122 499.37 272.415 cv
499.37 272.415 486.038 272.005 472.077 279.087 cv
cp
f
375.827 303.462 mo
375.827 303.462 378.323 301.165 380.62 302.837 cv
382.913 304.505 381.034 305.341 378.745 305.755 cv
376.452 306.169 376.87 304.919 374.37 304.919 cv
371.87 304.919 370.413 305.13 370.413 305.13 cv
370.413 305.13 373.12 303.251 375.827 303.462 cv
cp
1 .572549 0 rgb
f
366.038 299.087 mo
366.038 299.087 366.038 300.755 363.327 300.544 cv
360.62 300.337 364.999 297.415 366.038 299.087 cv
cp
f
432.913 284.294 mo
432.913 284.294 424.374 282.212 418.538 284.294 cv
412.702 286.38 412.702 286.38 412.702 286.38 cv
412.702 286.38 417.288 281.79 423.327 281.587 cv
429.37 281.38 432.913 284.294 432.913 284.294 cv
cp
f
514.37 274.919 mo
514.37 274.919 533.534 271.38 550.62 276.169 cv
553.952 280.544 li
553.952 280.544 539.163 274.294 514.37 274.919 cv
cp
f
432.913 284.294 mo
432.913 284.294 426.663 278.88 410.413 285.544 cv
410.413 285.544 417.085 280.337 424.788 280.544 cv
432.495 280.755 432.913 284.294 432.913 284.294 cv
cp
.964706 .823529 .607843 rgb
f
591.443 608.81 mo
593.475 603.731 li
593.619 603.376 607.236 569.337 612.693 552.606 cv
610.541 546.306 605.037 528.29 603.611 504.606 cv
601.826 474.813 607.264 428.966 627.939 389.649 cv
649.08 349.423 659.092 339.618 671.947 329.255 cv
686.338 317.649 719.686 309.802 748.467 317.356 cv
750.346 317.849 li
751.709 319.239 li
754.447 322.071 778.635 347.489 781.307 367.399 cv
786.33 404.997 778.021 438.692 756.596 467.548 cv
726.65 507.899 702.096 530.224 671.869 544.599 cv
658.783 550.821 650.623 554.091 645.229 556.251 cv
638.369 558.997 636.521 559.735 633.393 562.665 cv
629.666 566.173 618.787 590.97 610.838 611.927 cv
607.615 620.419 li
591.443 608.81 li
cp
.27451 .207843 .145098 rgb
f
599.959 606.337 mo
599.959 606.337 615.053 568.653 620.064 552.47 cv
620.064 552.47 612.283 532.438 610.584 504.188 cv
608.885 475.935 613.818 431.513 634.115 392.903 cv
654.412 354.294 663.588 344.962 676.33 334.685 cv
689.072 324.411 719.814 317.052 746.689 324.11 cv
746.689 324.11 771.943 350.13 774.377 368.329 cv
776.814 386.521 779.244 425.333 750.994 463.388 cv
722.744 501.435 698.689 524.103 668.877 538.29 cv
639.053 552.478 635.818 550.821 628.619 557.571 cv
621.42 564.325 604.311 609.45 604.311 609.45 cv
599.959 606.337 li
cp
.454902 .572549 .341176 rgb
f
623.943 553.802 mo
623.943 553.802 646.045 513.103 668.178 469.153 cv
690.307 425.204 745.654 331.884 745.654 331.884 cv
745.654 331.884 730.615 363.075 709.857 398.271 cv
689.1 433.466 629.623 554.661 623.943 553.802 cv
cp
.27451 .207843 .145098 rgb
f
697.736 434.005 mo
697.736 434.005 738.881 428.079 768.674 413.739 cv
768.674 413.739 745.537 429.54 697.744 437.536 cv
697.744 437.536 694.143 436.267 697.736 434.005 cv
cp
f
693.475 444.493 mo
693.475 444.493 734.623 438.552 764.412 424.216 cv
764.412 424.216 741.279 440.021 693.479 448.021 cv
693.479 448.021 689.885 446.747 693.475 444.493 cv
cp
f
688.064 454.407 mo
688.064 454.407 729.197 448.47 759.002 434.13 cv
759.002 434.13 735.854 449.931 688.064 457.927 cv
688.064 457.927 684.467 456.661 688.064 454.407 cv
cp
f
682.748 464.669 mo
682.748 464.669 723.881 458.739 753.682 444.396 cv
753.682 444.396 730.537 460.204 682.752 468.2 cv
682.752 468.2 679.15 466.927 682.748 464.669 cv
cp
f
678.486 475.153 mo
678.486 475.153 719.623 469.216 749.412 454.876 cv
749.412 454.876 726.279 470.681 678.49 478.681 cv
678.49 478.681 674.893 477.411 678.486 475.153 cv
cp
f
673.064 485.067 mo
673.064 485.067 714.209 479.134 744.01 464.794 cv
744.01 464.794 720.861 480.595 673.072 488.591 cv
673.072 488.591 669.471 487.325 673.064 485.067 cv
cp
f
713.838 402.509 mo
713.838 402.509 736.322 400.978 767.709 388.958 cv
767.709 388.958 748.994 399.626 713.846 406.032 cv
713.846 406.032 710.244 404.763 713.838 402.509 cv
cp
f
709.572 412.989 mo
709.572 412.989 736.482 409.989 768.854 397.493 cv
768.854 397.493 752.334 407.692 709.58 416.513 cv
709.58 416.513 705.986 415.235 709.572 412.989 cv
cp
f
704.166 422.899 mo
704.166 422.899 738.006 419.61 767.811 405.274 cv
767.811 405.274 751.951 418.427 704.166 426.427 cv
704.166 426.427 700.564 425.153 704.166 422.899 cv
cp
f
728.311 378.571 mo
728.311 378.571 745.893 377.282 770.518 368.067 cv
770.518 368.067 755.818 376.181 728.291 381.22 cv
728.291 381.22 725.482 380.286 728.311 378.571 cv
cp
f
724.896 386.442 mo
724.896 386.442 745.967 384.013 771.357 374.454 cv
771.357 374.454 758.377 382.2 724.881 389.091 cv
724.881 389.091 722.08 388.165 724.896 386.442 cv
cp
f
720.6 393.903 mo
720.6 393.903 747.1 391.212 770.498 380.286 cv
770.498 380.286 758.006 390.243 720.58 396.552 cv
720.58 396.552 717.771 395.622 720.6 393.903 cv
cp
f
665.924 495.927 mo
665.924 495.927 707.057 489.993 736.854 475.657 cv
736.854 475.657 713.709 491.458 665.928 499.454 cv
665.928 499.454 662.322 498.185 665.924 495.927 cv
cp
f
661.658 506.415 mo
661.658 506.415 692.959 502.474 721.17 491.403 cv
721.17 491.403 705.244 503.435 661.666 509.935 cv
661.666 509.935 658.064 508.661 661.658 506.415 cv
cp
f
656.244 516.321 mo
656.244 516.321 675.314 515.95 704.482 506.833 cv
704.482 506.833 695.658 513.571 656.244 519.853 cv
656.244 519.853 652.646 518.575 656.244 516.321 cv
cp
f
647.072 525.876 mo
647.072 525.876 662.424 528.622 691.967 518.411 cv
691.967 518.411 675.197 529.345 646.869 529.403 cv
646.869 529.403 643.354 527.919 647.072 525.876 cv
cp
f
732.604 370.021 mo
732.604 370.021 746.939 369.353 766.752 361.067 cv
766.752 361.067 755.018 368.614 732.682 372.653 cv
732.682 372.653 730.35 371.618 732.604 370.021 cv
cp
f
736.709 362.2 mo
736.709 362.2 748.518 362.009 764.611 354.435 cv
764.611 354.435 755.174 361.536 736.865 364.813 cv
736.865 364.813 734.9 363.708 736.709 362.2 cv
cp
f
740.342 353.388 mo
740.342 353.388 749.678 353.681 762.088 346.81 cv
762.088 346.81 754.912 353.478 740.576 355.985 cv
740.576 355.985 738.982 354.813 740.342 353.388 cv
cp
f
685.99 429.173 mo
685.99 429.173 668.564 391.442 664.361 358.646 cv
664.361 358.646 663.701 386.657 683.025 431.091 cv
683.025 431.091 686.053 433.415 685.99 429.173 cv
cp
f
679.521 438.458 mo
679.521 438.458 662.088 400.716 657.889 367.923 cv
657.889 367.923 657.229 395.935 676.553 440.368 cv
676.553 440.368 679.584 442.696 679.521 438.458 cv
cp
f
674.158 448.392 mo
674.158 448.392 656.729 410.661 652.518 377.86 cv
652.518 377.86 651.873 405.88 671.197 450.306 cv
671.197 450.306 674.229 452.638 674.158 448.392 cv
cp
f
668.439 458.446 mo
668.439 458.446 651.014 420.716 646.811 387.919 cv
646.811 387.919 646.162 415.927 665.482 460.368 cv
665.482 460.368 668.514 462.688 668.439 458.446 cv
cp
f
661.979 467.731 mo
661.979 467.731 644.533 429.989 640.342 397.204 cv
640.342 397.204 639.689 425.208 659.014 469.649 cv
659.014 469.649 662.041 471.966 661.979 467.731 cv
cp
f
656.611 477.673 mo
656.611 477.673 639.178 439.942 634.975 407.138 cv
634.975 407.138 634.33 435.165 653.646 479.591 cv
653.646 479.591 656.678 481.915 656.611 477.673 cv
cp
f
703.643 398.509 mo
703.643 398.509 692.686 378.825 685.662 345.954 cv
685.662 345.954 686.904 367.47 700.682 400.427 cv
700.682 400.427 703.709 402.755 703.643 398.509 cv
cp
f
697.178 407.802 mo
697.178 407.802 685.033 383.595 677.881 349.646 cv
677.881 349.646 678.33 369.056 694.221 409.716 cv
694.221 409.716 697.24 412.032 697.178 407.802 cv
cp
f
691.811 417.731 mo
691.811 417.731 676.131 387.556 671.928 354.755 cv
671.928 354.755 669.529 375.216 688.854 419.661 cv
688.854 419.661 691.885 421.981 691.811 417.731 cv
cp
f
715.834 373.341 mo
715.834 373.341 707.338 357.888 701.65 332.216 cv
701.65 332.216 702.85 348.962 713.627 374.798 cv
713.627 374.798 715.936 376.649 715.834 373.341 cv
cp
f
711.092 380.485 mo
711.092 380.485 701.65 361.493 695.83 334.989 cv
695.83 334.989 696.408 350.106 708.877 381.942 cv
708.877 381.942 711.186 383.79 711.092 380.485 cv
cp
f
707.178 388.153 mo
707.178 388.153 694.99 364.466 691.416 338.888 cv
691.416 338.888 689.869 354.786 704.959 389.603 cv
704.959 389.603 707.275 391.462 707.178 388.153 cv
cp
f
651.396 489.587 mo
651.396 489.587 633.963 451.849 629.764 419.06 cv
629.764 419.06 629.111 447.067 648.439 491.497 cv
648.439 491.497 651.463 493.829 651.396 489.587 cv
cp
f
644.924 498.868 mo
644.924 498.868 631.182 470.478 625.096 440.778 cv
625.096 440.778 623.682 460.692 641.971 500.782 cv
641.971 500.782 644.99 503.103 644.924 498.868 cv
cp
f
639.564 508.806 mo
639.564 508.806 629.49 492.614 621.244 463.185 cv
621.244 463.185 620.4 474.251 636.604 510.731 cv
636.604 510.731 639.627 513.048 639.564 508.806 cv
cp
f
636.541 521.708 mo
636.541 521.708 625.889 510.321 618.35 479.981 cv
618.35 479.981 618.322 500.009 633.697 523.79 cv
633.697 523.79 636.854 525.938 636.541 521.708 cv
cp
f
720.674 365.079 mo
720.674 365.079 713.416 352.696 709.572 331.563 cv
709.572 331.563 709.639 345.517 718.408 366.446 cv
718.408 366.446 720.545 367.845 720.674 365.079 cv
cp
f
724.99 357.376 mo
724.99 357.376 718.709 347.36 716.299 329.743 cv
716.299 329.743 715.486 341.536 722.709 358.661 cv
722.709 358.661 724.705 359.716 724.99 357.376 cv
cp
f
730.4 349.528 mo
730.4 349.528 725.072 341.868 724.064 327.708 cv
724.064 327.708 722.381 337.356 728.088 350.755 cv
728.088 350.755 729.939 351.442 730.4 349.528 cv
cp
f
609.975 499.646 mo
609.975 499.646 609.217 438.626 630.326 399.212 cv
651.439 359.794 674.139 306.267 746.689 324.11 cv
746.689 324.11 707.635 317.763 683.791 335.079 cv
659.951 352.399 619.588 402.04 609.975 499.646 cv
cp
.658824 .807843 .341176 rgb
f
746.689 324.11 mo
746.689 324.11 783.924 353.161 777.057 396.915 cv
770.182 440.673 753.799 477.36 686.982 528.224 cv
686.982 528.224 736.447 493.118 760.795 437.985 cv
792.42 366.38 746.689 324.11 746.689 324.11 cv
cp
f
612.236 653.067 mo
611.51 653.067 594.283 652.989 576.322 645.911 cv
571.834 644.149 562.725 641.384 551.189 637.884 cv
520.385 628.536 473.826 614.411 443.631 597.81 cv
433.529 592.274 li
398.623 573.204 379.385 559.2 354.119 529.083 cv
325.463 494.919 330.037 461.599 330.408 460.134 cv
331.041 457.657 li
333.119 456.173 li
348.721 445.032 387.959 437.919 408.119 437.919 cv
410.244 437.942 li
424.674 438.341 437.361 442.528 448.568 446.224 cv
452.67 447.575 456.678 448.899 460.654 449.997 cv
471.967 453.118 476.932 456.231 485.947 461.884 cv
489.834 464.325 494.65 467.341 501.307 471.212 cv
522.65 483.622 560.83 512.157 578.865 536.755 cv
594.857 558.563 604.986 585.13 607.381 611.583 cv
609.182 631.345 617.475 641.462 617.553 641.563 cv
627.139 653.024 li
612.236 653.067 li
cp
.27451 .207843 .145098 rgb
f
612.236 646.087 mo
612.236 646.087 602.486 634.798 600.432 612.216 cv
598.385 589.638 590.174 563.981 573.24 540.888 cv
556.303 517.794 528.596 491.106 506.525 478.278 cv
484.455 465.45 473.674 460.833 458.799 456.728 cv
443.92 452.618 428.525 445.431 410.053 444.923 cv
391.576 444.411 351.541 451.591 337.178 461.856 cv
337.178 461.856 332.557 496.239 359.248 528.056 cv
385.936 559.876 405.951 569.118 447.002 591.692 cv
488.045 614.267 561.943 632.747 578.881 639.415 cv
595.814 646.087 612.236 646.087 612.236 646.087 cv
cp
.407843 .560784 .0901961 rgb
f
609.936 649.95 mo
607.998 649.735 561.939 644.548 508.518 627.599 cv
463.518 613.317 384.061 588.044 339.232 504.45 cv
338.623 503.329 333.592 491.106 333.592 491.106 cv
330.506 479.821 li
343.334 496.755 li
349.588 508.165 385.713 567.981 458.799 588.61 cv
497.564 599.552 524.521 603.446 540.768 607.755 cv
560.369 612.95 569.236 615.544 579.256 619.021 cv
604.025 627.61 620.799 646.653 621.475 647.118 cv
609.936 649.95 li
cp
.27451 .207843 .145098 rgb
f
598.896 637.88 mo
598.896 637.88 530.127 606.067 483.432 571.677 cv
436.732 537.294 342.822 469.04 342.822 469.04 cv
342.822 469.04 414.939 519.685 458.799 549.606 cv
524.998 594.774 606.08 638.899 606.08 638.899 cv
598.896 637.88 li
cp
f
340.26 498.294 mo
340.26 498.294 375.674 569.103 459.314 592.712 cv
542.959 616.325 558.865 618.896 576.83 625.563 cv
594.795 632.228 610.697 643.005 610.697 643.005 cv
610.697 643.005 564.002 637.88 510.627 620.946 cv
457.26 604.005 381.826 577.321 340.26 498.294 cv
cp
.72549 .745098 .141176 rgb
f
484.455 560.126 mo
484.455 560.126 486.385 511.634 477.916 474.298 cv
477.916 474.298 489.076 504.317 487.924 560.896 cv
487.924 560.896 485.994 564.743 484.455 560.126 cv
cp
.27451 .207843 .145098 rgb
f
493.182 565.255 mo
493.182 565.255 495.107 516.759 486.639 479.431 cv
486.639 479.431 497.803 509.45 496.65 566.028 cv
496.65 566.028 494.725 569.876 493.182 565.255 cv
cp
f
503.193 571.927 mo
503.193 571.927 505.115 523.431 496.65 486.095 cv
496.65 486.095 507.811 516.122 506.654 572.692 cv
506.654 572.692 504.729 576.544 503.193 571.927 cv
cp
f
512.939 578.856 mo
512.939 578.856 514.861 530.36 506.396 493.024 cv
506.396 493.024 517.557 523.044 516.404 579.622 cv
516.404 579.622 514.482 583.474 512.939 578.856 cv
cp
f
521.666 583.981 mo
521.666 583.981 523.588 535.485 515.119 498.157 cv
515.119 498.157 526.283 528.177 525.127 584.755 cv
525.127 584.755 523.201 588.603 521.666 583.981 cv
cp
f
531.67 590.653 mo
531.67 590.653 533.596 542.157 525.127 504.821 cv
525.127 504.821 536.287 534.845 535.135 591.423 cv
535.135 591.423 533.213 595.271 531.67 590.653 cv
cp
f
540.654 596.044 mo
540.654 596.044 542.576 547.548 534.111 510.212 cv
534.111 510.212 545.268 540.231 544.115 596.81 cv
544.115 596.81 542.189 600.657 540.654 596.044 cv
cp
f
549.373 601.169 mo
549.373 601.169 551.299 552.673 542.83 515.345 cv
542.83 515.345 553.994 545.364 552.842 601.942 cv
552.842 601.942 550.916 605.79 549.373 601.169 cv
cp
f
559.385 607.841 mo
559.385 607.841 561.307 559.345 552.842 522.009 cv
552.842 522.009 564.002 552.032 562.846 608.61 cv
562.846 608.61 560.924 612.458 559.385 607.841 cv
cp
f
455.209 540.673 mo
455.209 540.673 457.135 494.114 448.666 458.271 cv
448.666 458.271 459.83 487.091 458.67 541.415 cv
458.67 541.415 456.748 545.11 455.209 540.673 cv
cp
f
463.936 545.599 mo
463.936 545.599 465.857 499.04 457.393 463.192 cv
457.393 463.192 468.553 492.013 467.396 546.337 cv
467.396 546.337 465.471 550.036 463.936 545.599 cv
cp
f
473.939 552.001 mo
473.939 552.001 475.861 505.438 467.396 469.599 cv
467.396 469.599 478.557 498.419 477.4 552.743 cv
477.4 552.743 475.479 556.435 473.939 552.001 cv
cp
f
427.498 523.407 mo
427.498 523.407 429.424 481.888 420.955 449.923 cv
420.955 449.923 432.119 475.626 430.963 524.071 cv
430.963 524.071 429.037 527.364 427.498 523.407 cv
cp
f
436.221 527.802 mo
436.221 527.802 438.15 486.278 429.678 454.313 cv
429.678 454.313 440.838 480.017 439.686 528.458 cv
439.686 528.458 437.764 531.755 436.221 527.802 cv
cp
f
446.229 533.509 mo
446.229 533.509 448.154 491.989 439.686 460.021 cv
439.686 460.021 450.85 485.731 449.697 534.173 cv
449.697 534.173 447.768 537.47 446.229 533.509 cv
cp
f
399.525 505.231 mo
399.525 505.231 401.455 471.81 392.982 446.075 cv
392.982 446.075 404.143 466.767 402.994 505.763 cv
402.994 505.763 401.068 508.415 399.525 505.231 cv
cp
f
408.252 508.767 mo
408.252 508.767 410.174 475.341 401.709 449.61 cv
401.709 449.61 412.869 470.302 411.717 509.298 cv
411.717 509.298 409.795 511.95 408.252 508.767 cv
cp
f
418.26 513.36 mo
418.26 513.36 420.186 479.938 411.717 454.208 cv
411.717 454.208 422.881 474.899 421.721 513.896 cv
421.721 513.896 419.799 516.552 418.26 513.36 cv
cp
f
570.674 612.724 mo
570.674 612.724 573.24 574.114 564.768 536.778 cv
564.768 536.778 575.291 556.915 574.135 613.493 cv
574.135 613.493 572.213 617.341 570.674 612.724 cv
cp
f
579.393 617.849 mo
579.393 617.849 583.506 589.896 576.576 552.692 cv
576.576 552.692 583.506 564.489 582.861 618.622 cv
582.861 618.622 580.936 622.47 579.393 617.849 cv
cp
f
589.404 624.521 mo
589.404 624.521 594.541 596.825 587.096 569.368 cv
587.096 569.368 595.818 591.95 592.869 625.29 cv
592.869 625.29 590.693 627.103 589.404 624.521 cv
cp
f
390.143 497.255 mo
390.143 497.255 391.865 470.04 384.256 449.095 cv
384.256 449.095 394.291 465.938 393.252 497.688 cv
393.252 497.688 391.521 499.845 390.143 497.255 cv
cp
f
380.057 491.755 mo
380.057 491.755 381.682 467.653 374.51 449.099 cv
374.51 449.099 383.971 464.021 382.986 492.142 cv
382.986 492.142 381.361 494.056 380.057 491.755 cv
cp
f
370.818 484.325 mo
370.818 484.325 372.451 465.876 365.271 451.669 cv
365.271 451.669 374.736 463.087 373.752 484.618 cv
373.752 484.618 372.123 486.087 370.818 484.325 cv
cp
f
360.549 478.255 mo
360.549 478.255 362.182 461.79 355.01 449.11 cv
355.01 449.11 364.467 459.298 363.486 478.524 cv
363.486 478.524 361.854 479.833 360.549 478.255 cv
cp
f
337.178 461.856 mo
337.178 461.856 370.541 437.224 419.803 444.923 cv
469.072 452.618 500.369 473.661 506.525 478.278 cv
506.525 478.278 476.248 461.341 449.568 455.7 cv
422.885 450.056 392.096 439.798 342.83 463.915 cv
342.83 463.915 334.623 484.435 359.764 519.845 cv
359.764 519.845 332.041 496.747 337.178 461.856 cv
cp
.658824 .807843 .341176 rgb
f
gsave
351.553 481.888 mo
351.553 481.888 395.174 512.161 407.49 521.399 cv
419.803 530.638 490.111 580.411 501.912 585.544 cv
513.709 590.681 541.939 608.642 541.939 608.642 cv
541.939 608.642 510.127 602.489 486.006 595.813 cv
461.885 589.138 412.615 578.868 381.83 547.06 cv
351.041 515.247 340.264 480.86 340.264 480.86 cv
351.553 481.888 li
cp
clp
486.471 554.013 mo
486.471 554.013 444.744 578.79 407.881 589.122 cv
407.881 589.122 439.6 584.646 488.799 556.688 cv
488.799 556.688 491.268 553.161 486.471 554.013 cv
cp
.27451 .207843 .145098 rgb
f
495.135 559.235 mo
495.135 559.235 453.408 584.024 416.553 594.356 cv
416.553 594.356 448.26 589.876 497.459 561.915 cv
497.459 561.915 499.932 558.396 495.135 559.235 cv
cp
f
505.768 564.86 mo
505.768 564.86 464.037 589.646 427.178 599.978 cv
427.178 599.978 458.885 595.501 508.096 567.54 cv
508.096 567.54 510.557 564.017 505.768 564.86 cv
cp
f
516.498 570.134 mo
516.498 570.134 474.768 594.919 437.916 605.251 cv
437.916 605.251 469.627 600.774 518.826 572.813 cv
518.826 572.813 521.291 569.29 516.498 570.134 cv
cp
f
525.166 575.364 mo
525.166 575.364 483.436 600.149 446.58 610.481 cv
446.58 610.481 478.291 606.005 527.494 578.04 cv
527.494 578.04 529.959 574.521 525.166 575.364 cv
cp
f
535.799 580.989 mo
535.799 580.989 494.072 605.778 457.213 616.106 cv
457.213 616.106 488.92 611.622 538.123 583.669 cv
538.123 583.669 540.588 580.146 535.799 580.989 cv
cp
f
544.814 586.317 mo
544.814 586.317 503.084 611.106 466.225 621.438 cv
466.225 621.438 497.932 616.954 547.135 588.997 cv
547.135 588.997 549.604 585.478 544.814 586.317 cv
cp
f
553.471 591.552 mo
553.471 591.552 511.748 616.337 474.881 626.669 cv
474.881 626.669 506.6 622.181 555.799 594.231 cv
555.799 594.231 558.271 590.704 553.471 591.552 cv
cp
f
564.104 597.169 mo
564.104 597.169 522.381 621.95 485.518 632.282 cv
485.518 632.282 517.236 627.81 566.432 599.853 cv
566.432 599.853 568.896 596.321 564.104 597.169 cv
cp
f
455.439 537.552 mo
455.439 537.552 415.408 561.415 379.857 571.044 cv
379.857 571.044 410.518 567.126 457.732 540.247 cv
457.732 540.247 460.068 536.786 455.439 537.552 cv
cp
f
463.92 542.88 mo
463.92 542.88 423.896 566.739 388.338 576.368 cv
388.338 576.368 419.002 572.454 466.221 545.575 cv
466.221 545.575 468.557 542.118 463.92 542.88 cv
cp
f
474.322 548.63 mo
474.322 548.63 434.287 572.497 398.74 582.118 cv
398.74 582.118 429.4 578.204 476.615 551.321 cv
476.615 551.321 478.947 547.868 474.322 548.63 cv
cp
f
427.061 521.403 mo
427.061 521.403 391.463 542.868 359.326 550.642 cv
359.326 550.642 387.24 548.22 429.287 524.134 cv
429.287 524.134 431.268 520.876 427.061 521.403 cv
cp
f
435.072 526.985 mo
435.072 526.985 399.482 548.45 367.342 556.224 cv
367.342 556.224 395.26 553.802 437.303 529.716 cv
437.303 529.716 439.287 526.458 435.072 526.985 cv
cp
f
444.861 533.063 mo
444.861 533.063 409.268 554.528 377.127 562.313 cv
377.127 562.313 405.049 559.88 447.088 535.794 cv
447.088 535.794 449.072 532.536 444.861 533.063 cv
cp
f
397.76 505.462 mo
397.76 505.462 369.287 523.067 342.619 527.88 cv
342.619 527.88 366.127 527.845 399.873 508.259 cv
399.873 508.259 401.287 505.302 397.76 505.462 cv
cp
f
405.025 511.454 mo
405.025 511.454 376.541 529.063 349.881 533.868 cv
349.881 533.868 373.393 533.829 407.135 514.247 cv
407.135 514.247 408.553 511.286 405.025 511.454 cv
cp
f
413.826 518.06 mo
413.826 518.06 385.35 535.677 358.697 540.481 cv
358.697 540.481 382.201 540.442 415.936 520.856 cv
415.936 520.856 417.361 517.899 413.826 518.06 cv
cp
f
573.775 604.774 mo
573.775 604.774 541.049 625.419 504.182 635.751 cv
504.182 635.751 526.9 635.411 576.104 607.45 cv
576.104 607.45 578.568 603.923 573.775 604.774 cv
cp
f
582.439 610.001 mo
582.439 610.001 559.807 626.927 523.799 638.552 cv
523.799 638.552 537.475 639.021 584.764 612.677 cv
584.764 612.677 587.229 609.157 582.439 610.001 cv
cp
f
593.064 615.626 mo
593.064 615.626 571.158 633.333 543.471 639.86 cv
543.471 639.86 567.486 636.774 595.393 618.31 cv
595.393 618.31 595.951 615.528 593.064 615.626 cv
cp
f
386.268 501.005 mo
386.268 501.005 363.162 515.485 341.123 518.771 cv
341.123 518.771 360.705 519.567 388.135 503.536 cv
388.135 503.536 389.209 500.993 386.268 501.005 cv
cp
f
376.635 494.759 mo
376.635 494.759 356.213 507.669 336.482 510.192 cv
336.482 510.192 354.111 511.407 378.369 497.157 cv
378.369 497.157 379.271 494.813 376.635 494.759 cv
cp
f
365.701 490.173 mo
365.701 490.173 350.252 500.392 334.346 500.849 cv
334.346 500.849 348.893 503.728 367.354 492.614 cv
367.354 492.614 367.869 490.481 365.701 490.173 cv
cp
f
355.479 484.036 mo
355.479 484.036 341.771 493.31 327.205 493.044 cv
327.205 493.044 340.674 496.505 357.107 486.485 cv
357.107 486.485 357.486 484.431 355.479 484.036 cv
cp
f
grestore
572.039 812.971 mo
567.641 812.971 563.32 812.822 559.227 812.549 cv
532.684 810.752 507.762 802.564 475.875 785.178 cv
444.324 767.963 420.754 741.025 417.422 736.436 cv
416.383 735.01 415.043 733.541 413.348 731.674 cv
409.926 727.92 405.234 722.768 399.613 714.025 cv
390.992 700.619 386.242 692.779 382.656 686.057 cv
378.801 678.85 376.863 672.588 376.785 672.318 cv
367.734 644.736 363.453 624.541 362.516 604.896 cv
362.059 595.248 361.492 588.385 361.027 582.861 cv
360.586 577.486 360.258 573.6 360.258 569.846 cv
360.258 565.85 361.34 561.857 362.391 558.002 cv
363.406 554.26 364.461 550.4 363.988 548.021 cv
362.078 538.467 368.375 531.264 369.102 530.471 cv
371.5 527.861 li
379.027 529.537 li
384.281 530.705 389.063 534.338 389.594 534.74 cv
430.363 548.936 li
441.141 553.557 li
440.148 568.373 439.418 643.959 493.508 704.35 cv
525.367 739.924 553.164 759.201 573.895 760.1 cv
574.621 760.131 575.336 760.146 576.07 760.146 cv
637.043 760.146 723.375 654.494 748.383 622.111 cv
749.172 621.08 700.574 611.311 700.797 611.029 cv
703.988 607.139 758.348 614.096 764.688 614.096 cv
766.82 614.096 768.273 614.338 768.273 614.338 cv
771.414 614.869 li
772.855 617.744 li
775.695 623.674 789.805 653.857 788.309 666.709 cv
787.309 675.432 783.422 697.318 769.031 712.252 cv
757.961 723.752 744.195 737.158 733.961 746.412 cv
729.797 750.186 726.414 753.174 723.352 755.869 cv
719.48 759.291 716.137 762.248 712.367 765.764 cv
702.703 774.779 675.898 787.553 655.117 796.689 cv
631.566 807.033 601.289 812.971 572.039 812.971 cv
cp
.27451 .207843 .145098 rgb
f
385.813 539.596 mo
385.813 539.596 381.758 536.436 377.695 535.533 cv
373.625 534.623 373.625 534.623 373.625 534.623 cv
373.625 534.623 368.66 540.045 370.012 546.818 cv
371.371 553.588 366.395 562.619 366.395 569.846 cv
366.395 577.064 367.758 585.646 368.66 604.611 cv
369.57 623.568 373.621 642.975 382.656 670.518 cv
382.656 670.518 384.457 676.393 388.07 683.166 cv
391.688 689.936 396.652 698.068 404.781 710.697 cv
412.906 723.342 418.777 727.857 422.387 732.822 cv
425.992 737.795 449.023 763.525 478.816 779.779 cv
508.617 796.037 532.996 804.615 559.637 806.42 cv
586.277 808.225 622.844 804.15 652.645 791.068 cv
682.438 777.975 701.406 767.588 708.172 761.271 cv
714.945 754.943 720.363 750.436 729.848 741.857 cv
739.324 733.283 752.867 720.186 764.609 707.994 cv
776.344 695.807 780.859 677.744 782.215 666.006 cv
783.566 654.268 767.316 620.404 767.316 620.404 cv
767.316 620.404 758.738 619.053 754.676 624.018 cv
750.613 628.986 646.316 769.396 573.633 766.236 cv
500.941 763.08 384.012 566.686 385.813 539.596 cv
cp
.933333 .47451 .0431373 rgb
f
412 545.893 mo
380.848 535.967 li
380.848 535.967 382.656 542.744 379.945 543.643 cv
377.234 544.541 375.43 542.287 375.43 542.287 cv
375.43 542.287 376.789 545.893 374.977 548.154 cv
373.172 550.412 376.336 550.865 378.141 550.865 cv
379.945 550.865 379.945 553.576 378.141 557.182 cv
376.336 560.791 372.273 562.15 372.273 562.15 cv
372.273 562.15 372.734 562.15 374.977 567.119 cv
377.234 572.084 374.074 572.533 374.074 572.533 cv
374.074 572.533 377.234 573.439 375.883 576.154 cv
374.531 578.857 371.813 576.154 371.813 576.154 cv
371.813 583.818 li
371.813 583.818 375.43 582.467 375.43 586.529 cv
375.43 590.596 371.371 591.045 371.371 591.045 cv
372.273 595.561 li
372.273 595.561 376.332 594.205 377.234 597.369 cv
378.141 600.529 373.172 604.135 373.172 604.135 cv
373.172 604.135 377.234 605.49 379.496 610.908 cv
381.758 616.33 373.625 620.385 373.625 620.385 cv
373.625 620.385 384.012 626.721 380.398 637.1 cv
376.785 647.482 379.949 650.189 381.758 650.189 cv
383.563 650.189 385.367 652.447 384.461 656.514 cv
383.563 660.572 384.914 659.67 387.621 661.021 cv
390.328 662.373 394.398 666.447 391.234 672.314 cv
391.234 672.314 398.906 672.314 395.75 678.178 cv
395.75 678.178 392.141 679.537 395.301 683.6 cv
398.453 687.662 402.969 687.658 401.613 693.529 cv
400.262 699.4 397.996 698.951 401.613 697.143 cv
405.227 695.342 407.031 697.6 407.938 700.752 cv
408.84 703.916 405.676 704.361 405.676 704.361 cv
405.676 704.361 408.84 702.111 410.648 708.428 cv
412.449 714.756 410.648 714.756 410.648 714.756 cv
410.648 714.756 415.613 709.779 417.422 713.393 cv
419.223 717.006 417.422 718.361 417.422 718.361 cv
417.422 718.361 422.84 713.85 425.094 718.814 cv
427.352 723.779 423.289 727.389 423.289 727.389 cv
423.289 727.389 426.891 723.779 430.055 727.846 cv
433.219 731.908 431.867 734.619 431.867 734.619 cv
431.867 734.619 436.828 731.002 437.738 736.42 cv
438.641 741.842 442.703 737.33 443.156 742.74 cv
443.602 748.166 451.734 742.291 450.828 747.709 cv
449.93 753.127 455.789 750.869 455.344 754.936 cv
454.895 758.994 456.695 760.795 458.055 759.896 cv
459.402 758.994 462.117 755.381 462.117 755.381 cv
462.117 755.381 460.766 760.803 463.02 762.154 cv
465.273 763.51 468.438 760.803 468.438 760.803 cv
468.438 760.803 463.93 765.318 467.082 767.572 cv
470.242 769.834 471.594 765.322 475.664 765.768 cv
479.727 766.221 476.109 771.635 476.109 771.635 cv
476.109 771.635 480.168 769.377 482.883 772.092 cv
485.59 774.795 486.496 777.959 486.496 777.959 cv
493.719 782.021 li
493.719 782.021 488.758 777.506 494.168 775.705 cv
499.586 773.896 502.746 779.76 499.141 783.83 cv
499.141 783.83 505.457 781.572 506.809 783.373 cv
506.809 783.373 506.891 785.021 508.617 787.463 cv
509.938 789.338 507.266 785.205 512.23 786.1 cv
517.195 787.002 516.297 791.518 516.297 791.518 cv
516.297 791.518 519.91 787.904 523.969 788.354 cv
528.035 788.814 519.453 792.428 524.418 794.229 cv
529.387 796.037 528.488 793.314 532.098 793.775 cv
535.707 794.229 535.707 787.904 535.707 787.904 cv
535.707 787.904 538.41 790.166 537.961 794.229 cv
537.516 798.295 545.184 792.428 546.539 796.939 cv
547.898 801.455 551.961 794.229 553.313 798.74 cv
554.664 803.256 560.535 802.35 561.898 799.189 cv
563.25 796.037 565.055 798.744 565.961 801.002 cv
566.859 803.256 573.633 800.549 573.633 800.549 cv
573.633 800.549 572.734 796.939 576.797 797.389 cv
580.859 797.838 577.695 802.807 577.695 802.807 cv
577.695 802.807 581.762 803.705 584.922 802.807 cv
588.078 801.904 591.238 801.904 591.238 801.904 cv
591.238 801.904 585.375 797.389 588.984 794.682 cv
592.59 791.967 596.211 795.127 594.402 799.189 cv
592.59 803.256 595.75 799.65 598.465 800.1 cv
601.172 800.549 602.074 797.838 602.074 797.838 cv
601.172 796.037 li
601.172 796.037 599.363 791.068 604.777 791.068 cv
610.199 791.068 609.754 792.877 609.305 794.682 cv
608.844 796.486 615.625 796.037 618.777 794.682 cv
621.938 793.322 621.492 788.814 623.293 787.904 cv
625.102 787.002 630.523 786.545 628.266 791.068 cv
626.004 795.588 634.582 790.619 636.383 790.166 cv
638.191 789.709 638.195 786.1 640.453 787.002 cv
642.707 787.904 641.355 782.939 644.52 781.584 cv
647.672 780.229 649.48 781.584 655.797 780.229 cv
662.117 778.877 659.859 778.881 661.668 776.623 cv
663.48 774.361 667.086 772.1 667.086 774.814 cv
667.086 777.521 668.895 771.654 668.895 771.654 cv
668.895 771.654 666.641 767.584 670.703 766.689 cv
674.766 765.787 677.02 768.041 675.672 770.299 cv
674.313 772.561 678.375 768.49 678.375 768.49 cv
678.375 768.49 675.672 761.271 680.18 760.822 cv
684.695 760.365 688.754 759.463 690.117 759.463 cv
691.469 759.463 691.922 756.752 691.922 756.752 cv
691.922 756.752 686.945 755.85 690.117 751.334 cv
693.281 746.826 695.086 750.436 694.633 753.139 cv
694.172 755.85 697.785 749.533 697.785 749.533 cv
697.785 749.533 696.434 744.572 700.5 744.111 cv
704.559 743.662 704.113 747.275 704.113 747.275 cv
711.781 742.76 li
711.781 742.76 711.336 737.795 714.039 739.146 cv
716.746 740.502 714.492 736.447 718.555 734.635 cv
722.617 732.822 719.91 728.764 718.109 727.861 cv
716.301 726.955 714.035 722.447 718.555 721.537 cv
723.074 720.635 723.52 721.994 723.52 725.15 cv
723.52 728.311 728.492 725.15 728.945 721.096 cv
729.387 717.025 727.59 715.67 731.199 715.217 cv
734.809 714.768 731.199 712.959 734.352 711.607 cv
737.516 710.256 732.551 708.896 734.352 705.732 cv
736.16 702.58 738.875 701.217 738.875 704.381 cv
738.875 707.545 740.227 703.486 742.488 700.771 cv
744.742 698.068 750.16 694.455 744.742 694.455 cv
739.324 694.455 737.516 688.127 740.68 686.771 cv
743.84 685.42 744.289 688.127 744.289 688.127 cv
744.289 688.127 741.578 681.807 745.641 681.354 cv
749.711 680.908 749.711 683.166 749.711 683.166 cv
749.711 683.166 746.547 673.229 749.258 672.779 cv
751.965 672.33 751.961 670.518 752.414 666.455 cv
752.875 662.393 752.414 661.041 754.676 658.334 cv
756.93 655.619 751.523 651.115 754.676 649.303 cv
757.836 647.494 753.324 642.08 757.383 640.725 cv
761.449 639.365 762.344 638.014 761.898 635.307 cv
761.449 632.592 760.789 630.959 759.301 625.912 cv
757.859 621.01 761.867 618.725 761.867 618.725 cv
724.883 611.377 li
724.883 611.377 630.969 694.908 593.949 707.545 cv
556.93 720.186 508.164 696.713 480.168 672.779 cv
452.18 648.85 412 545.893 412 545.893 cv
cp
.27451 .207843 .145098 rgb
f
582.352 799.697 mo
582.387 798.795 582.254 797.861 581.82 796.967 cv
581.344 795.967 580.105 794.244 577.176 793.916 cv
576.797 793.877 576.449 793.857 576.125 793.857 cv
573.375 793.857 571.902 795.217 571.266 796.029 cv
570.77 796.662 570.469 797.334 570.285 797.982 cv
569.695 798.146 569.102 798.283 568.598 798.354 cv
566.887 795.01 564.82 794.268 563.32 794.268 cv
562.16 794.268 560.012 794.721 558.684 797.814 cv
558.605 797.994 558.059 798.354 557.438 798.354 cv
556.93 798.354 556.785 798.166 556.656 797.736 cv
555.535 793.99 552.66 793.701 551.805 793.701 cv
550.793 793.701 549.898 794.01 549.156 794.338 cv
548.047 792.584 546.195 791.643 543.852 791.643 cv
543.074 791.643 542.234 791.752 541.418 791.896 cv
540.906 787.826 538.297 785.518 537.941 785.229 cv
532.215 780.436 li
532.215 787.904 li
532.203 788.682 532.043 789.658 531.84 790.244 cv
531.656 790.24 531.484 790.229 531.316 790.229 cv
529.859 790.229 528.816 790.607 528.09 790.947 cv
528.566 790.021 528.832 788.877 528.328 787.572 cv
527.914 786.506 526.891 785.166 524.359 784.885 cv
523.988 784.846 523.621 784.826 523.258 784.826 cv
521.453 784.826 519.793 785.307 518.383 785.943 cv
517.504 784.717 515.844 783.209 512.855 782.666 cv
512.156 782.541 511.539 782.49 510.992 782.49 cv
510.898 782.49 510.797 782.49 510.695 782.49 cv
510.172 781.76 509.633 781.217 509.289 780.904 cv
508.492 780.049 507.094 779.186 504.699 779.186 cv
504.516 779.186 504.324 779.189 504.141 779.205 cv
504.055 778.303 503.82 777.412 503.445 776.557 cv
502.148 773.674 499.344 771.877 496.125 771.877 cv
495.121 771.877 494.09 772.045 493.07 772.389 cv
491.047 773.061 489.848 774.076 489.129 775.111 cv
488.465 773.646 487.281 771.553 485.352 769.623 cv
484.168 768.439 482.707 767.682 481.078 767.393 cv
481.043 766.701 480.891 766.002 480.578 765.326 cv
480.117 764.33 478.906 762.619 476.043 762.299 cv
475.094 762.248 li
473.309 762.248 471.879 762.807 470.766 763.42 cv
470.813 763.365 470.863 763.314 470.906 763.268 cv
470.715 757.689 li
470.453 757.916 465.539 758.6 465.203 758.771 cv
465.203 757.994 462.84 752.643 463.02 751.92 cv
459.324 753.283 li
459.164 753.502 459 753.713 458.84 753.92 cv
458.555 750.615 455.809 749.33 454.695 748.811 cv
454.453 748.697 454.074 748.521 453.969 748.439 cv
454.598 746.334 454.246 744.721 453.211 743.506 cv
451.68 741.689 449.398 741.689 448.648 741.689 cv
448.23 741.689 446.551 741.771 446.551 741.771 cv
445.832 737.021 442.539 736.396 441.258 736.154 cv
441.25 736.154 441.199 735.963 441.184 735.85 cv
440.461 731.549 437.605 729.982 435.141 729.943 cv
434.727 728.658 434 727.229 432.813 725.697 cv
431.641 724.193 430.379 723.354 429.207 722.896 cv
429.391 721.174 429.148 719.303 428.281 717.369 cv
427.016 714.584 424.68 712.994 421.883 712.994 cv
421.609 712.994 421.332 713.002 421.066 713.033 cv
420.914 712.643 420.742 712.248 420.539 711.838 cv
419.508 709.768 417.66 708.588 415.457 708.588 cv
415.086 708.588 414.711 708.619 414.324 708.686 cv
414.23 708.295 414.117 707.893 414 707.471 cv
413.359 705.209 412.477 703.662 411.539 702.611 cv
411.648 701.729 411.578 700.771 411.297 699.795 cv
409.922 695.002 407.258 693.521 405.234 693.135 cv
405.977 687.834 402.84 685.471 400.715 683.869 cv
399.734 683.127 398.816 682.436 398.059 681.455 cv
397.961 681.338 397.883 681.225 397.82 681.135 cv
398.203 680.986 li
398.82 679.834 li
400.664 676.416 400.016 673.967 399.152 672.514 cv
398.32 671.119 397.047 670.256 395.758 669.713 cv
396.039 667.795 395.77 666.178 395.391 664.982 cv
394 660.588 390.281 658.447 389.18 657.9 cv
388.699 657.662 388.266 657.482 387.859 657.326 cv
387.859 657.307 387.863 657.287 387.867 657.271 cv
388.602 654.01 388.102 651.084 386.461 649.049 cv
385.422 647.748 383.992 646.939 382.461 646.744 cv
382.203 646.064 381.762 643.795 383.688 638.248 cv
386.32 630.697 383.059 624.486 379.387 620.639 cv
382.328 617.982 384.609 614.104 382.719 609.561 cv
381.594 606.877 380.102 604.967 378.684 603.635 cv
380.172 601.713 381.383 599.17 380.59 596.408 cv
379.992 594.318 378.582 592.838 376.641 592.17 cv
377.957 590.885 378.922 589.033 378.922 586.529 cv
378.922 583.42 377.477 581.514 375.625 580.654 cv
377.047 580.26 378.246 579.229 379 577.717 cv
379.844 576.025 379.934 574.24 379.246 572.686 cv
379.168 572.506 379.078 572.334 378.984 572.162 cv
379.57 570.346 379.289 568.17 378.164 565.674 cv
377.785 564.865 377.449 564.131 377.137 563.471 cv
378.609 562.416 380.199 560.881 381.262 558.744 cv
382.605 556.064 383.855 552.295 382.188 549.592 cv
381.484 548.459 380.398 547.717 379.117 547.467 cv
379.129 547.416 379.141 547.373 379.152 547.326 cv
379.789 547.287 380.43 547.158 381.047 546.955 cv
383.855 546.021 384.77 543.486 384.914 540.928 cv
409.359 548.717 li
414.703 562.221 451.141 652.553 477.902 675.432 cv
499.023 693.49 536.176 714.576 571.375 714.576 cv
579.859 714.576 587.828 713.322 595.082 710.846 cv
630.391 698.799 713.957 625.686 725.898 615.143 cv
755.91 621.104 li
755.402 622.736 755.297 624.674 755.949 626.9 cv
757.07 630.611 li
757.762 632.846 758.156 634.111 758.453 635.881 cv
758.52 636.252 758.516 636.447 758.508 636.514 cv
758.508 636.51 758.504 636.51 758.492 636.51 cv
758.406 636.51 757.867 636.885 756.277 637.412 cv
751.398 639.045 752.031 643.799 752.273 645.592 cv
752.309 645.9 752.359 646.314 752.387 646.627 cv
748.836 649.143 750.52 653.342 751.18 654.971 cv
751.344 655.393 751.605 656.041 751.711 656.451 cv
749.484 659.26 749.324 661.432 749.141 663.928 cv
749.09 664.545 748.855 666.908 748.855 666.908 cv
748.758 667.768 748.648 668.783 748.523 669.361 cv
747.219 669.674 746.238 670.385 745.59 671.42 cv
745.172 672.076 744.258 673.537 744.891 677.932 cv
743.18 678.213 741.773 679.115 740.898 680.498 cv
740.352 681.369 740.066 682.33 739.961 683.311 cv
739.742 683.389 739.531 683.471 739.305 683.561 cv
736.547 684.748 735.133 687.697 735.793 690.92 cv
736.297 693.389 738.086 695.99 741.02 697.221 cv
740.574 697.666 740.16 698.115 739.805 698.537 cv
739.594 698.791 739.391 699.049 739.195 699.318 cv
738.75 699.162 738.281 699.088 737.816 699.088 cv
734.492 699.088 732.164 702.521 731.328 703.998 cv
730.027 706.275 730.398 708.252 731.016 709.643 cv
730.301 710.299 729.832 711.08 729.609 711.982 cv
725.039 713.193 725.336 716.826 725.457 718.275 cv
725.484 718.682 725.535 719.154 725.523 719.709 cv
724.5 718.424 722.93 717.775 720.836 717.775 cv
720.047 717.775 719.066 717.877 717.867 718.115 cv
714.848 718.721 712.836 720.67 712.477 723.322 cv
712.039 726.572 714.246 729.83 716.535 730.986 cv
716.664 731.068 716.844 731.279 716.992 731.494 cv
714.758 732.623 713.641 734.143 713.035 735.42 cv
711.809 735.463 710.68 735.986 709.844 736.904 cv
708.852 737.982 708.453 739.459 708.32 740.744 cv
705.727 742.271 li
704.848 741.436 703.406 740.58 701.172 740.58 cv
700.844 740.58 700.484 740.6 700.117 740.646 cv
697.492 740.939 696.047 742.314 695.297 743.424 cv
694.754 744.213 694.438 745.072 694.266 745.92 cv
693.813 745.775 693.344 745.709 692.855 745.709 cv
690.828 745.709 688.945 746.928 687.258 749.33 cv
685.129 752.365 685.395 754.752 685.992 756.213 cv
686.031 756.303 686.07 756.389 686.109 756.471 cv
686.102 756.471 686.094 756.475 686.078 756.475 cv
684.336 756.76 682.148 757.115 679.832 757.346 cv
677.816 757.549 676.148 758.549 675.141 760.17 cv
674.57 761.084 674.266 762.111 674.148 763.146 cv
673.605 763.041 673.035 762.998 672.449 762.998 cv
671.648 762.998 670.797 763.092 669.945 763.275 cv
666.992 763.936 665.77 765.752 665.305 766.779 cv
664.773 767.975 664.703 769.189 664.836 770.248 cv
662.371 770.869 660.051 773.061 658.945 774.439 cv
658.406 775.111 658.074 775.705 657.859 776.154 cv
657.387 776.291 656.551 776.506 655.066 776.818 cv
652.992 777.26 651.398 778.068 650.195 778.955 cv
648.91 778.229 647.434 777.795 646 777.795 cv
645 777.795 644.035 777.994 643.141 778.373 cv
640.496 779.506 639.5 781.764 638.996 783.428 cv
636.68 783.811 635.52 785.807 635.004 786.713 cv
634.949 786.811 634.895 786.916 634.836 787.006 cv
634.273 787.217 633.539 787.529 632.719 787.9 cv
632.566 787.971 632.391 788.049 632.195 788.135 cv
632.063 787.447 631.809 786.889 631.535 786.447 cv
630.938 785.463 629.422 783.818 626.109 783.818 cv
624.598 783.818 622.918 784.189 621.73 784.787 cv
619.688 785.811 618.977 787.865 618.461 789.369 cv
618.164 790.229 617.789 791.311 617.395 791.475 cv
616.375 791.916 614.547 792.271 612.98 792.357 cv
612.867 791.596 612.578 790.795 611.98 790.029 cv
610.281 787.857 607.238 787.572 604.777 787.572 cv
601.258 787.572 599.445 789.107 598.547 790.385 cv
597.844 791.393 597.531 792.471 597.426 793.467 cv
597.371 793.365 597.313 793.268 597.242 793.174 cv
596.027 791.295 593.953 790.178 591.695 790.178 cv
590.039 790.178 588.375 790.771 586.883 791.889 cv
585.242 793.127 584.324 794.854 584.313 796.768 cv
584.309 797.639 584.492 798.459 584.777 799.232 cv
584.508 799.303 584.234 799.369 583.969 799.447 cv
583.516 799.576 582.969 799.658 582.352 799.697 cv
cp
.988235 .905882 .796078 rgb
f
497.148 782.33 mo
497.148 782.33 492.527 776.674 497.148 777.193 cv
501.766 777.709 503.816 781.818 497.148 782.33 cv
cp
.27451 .207843 .145098 rgb
f
582.527 774.557 mo
574.23 774.557 565.168 773.779 557.008 772.373 cv
550.914 771.318 546.453 768.838 543.758 765.002 cv
543.137 764.111 542.625 763.17 542.203 762.174 cv
540.297 763.717 537.625 764.873 533.789 764.873 cv
529.309 764.873 523.344 763.322 515 759.982 cv
510.383 758.135 507.313 755.162 505.859 751.135 cv
505.609 750.424 505.418 749.717 505.277 749.01 cv
505.172 749.092 505.078 749.174 504.984 749.26 cv
503.176 750.764 501.117 751.529 498.855 751.529 cv
494.523 751.529 489.852 748.682 484.578 742.818 cv
483.699 741.846 483.195 741.354 482.922 741.104 cv
480.766 740.912 478.18 739.736 469.922 732.236 cv
464.664 727.451 462.738 722.275 462.605 717.389 cv
462.125 717.936 li
459.598 716.357 li
457.473 715.045 438.797 703.244 435.781 694.182 cv
435.246 692.588 435.055 690.982 435.203 689.404 cv
428.598 686.221 418.113 670.303 416.137 664.389 cv
415.414 662.213 415.602 659.924 416.684 657.529 cv
415.77 657.51 414.914 657.354 414.156 657.072 cv
405.848 653.951 395.133 603.686 397.043 591.623 cv
398.023 585.424 400.391 582.373 402.805 580.924 cv
394.348 567.412 400.867 544.268 401.199 543.127 cv
401.5 542.096 li
402.316 541.412 li
403.676 540.279 405.25 539.709 407.008 539.709 cv
409.266 539.709 411.297 540.65 413.25 541.568 cv
414.742 542.271 416.289 542.99 417.449 542.99 cv
417.734 542.99 417.977 542.951 418.219 542.854 cv
419.207 542.486 420.379 542.307 421.824 542.307 cv
427.426 542.307 436.957 545.088 444.617 547.334 cv
448.023 548.326 451.242 549.268 452.449 549.439 cv
455.164 549.83 460.668 551.643 468.289 554.143 cv
475.117 556.381 483.598 559.174 491.852 561.486 cv
505.313 565.248 509.207 565.666 519.637 566.779 cv
522.078 567.033 524.871 567.33 528.207 567.717 cv
537.18 568.752 545.781 571.729 554.09 574.619 cv
562.41 577.506 570.281 580.236 577.398 580.557 cv
593.656 581.299 604.828 589.221 606.359 588.725 cv
607.742 588.287 609.273 587.799 611.023 587.408 cv
612 587.193 613.051 587.092 614.223 587.092 cv
617.727 587.092 621.879 588.037 627.133 589.244 cv
632.25 590.416 638.621 591.877 646.059 592.775 cv
663.324 594.838 686.07 601.068 696.797 604.42 cv
702.828 606.303 704.207 606.553 706.488 606.553 cv
707.316 606.553 708.242 606.518 709.387 606.471 cv
711.41 606.393 714.094 606.283 718.109 606.283 cv
734.531 606.283 738.801 616.877 738.973 617.326 cv
739.258 618.072 li
739.195 618.869 li
737.945 634.244 731.797 640.064 726.477 642.174 cv
727.973 644.857 728.922 648.693 728.348 654.166 cv
726.809 668.775 714 687.268 705.758 696.127 cv
702.035 700.146 699.125 701.838 696.723 702.6 cv
697.414 709.377 691.992 719.877 679.445 728.467 cv
674.23 732.033 669.563 733.842 665.578 733.842 cv
665.344 733.842 665.117 733.834 664.891 733.822 cv
664.734 736.119 664.07 738.424 662.891 740.674 cv
657.555 750.83 642.891 758.232 631.516 760.822 cv
629.309 761.318 627.199 761.576 625.238 761.576 cv
623.672 761.576 622.273 761.416 621.043 761.158 cv
620.734 761.994 620.289 762.611 619.906 763.033 cv
613.242 772.545 595.941 774.557 582.527 774.557 cv
cp
f
407.578 545.1 mo
407.578 545.1 398.883 574.752 413.598 583.971 cv
413.598 583.971 405.57 579.361 403.566 591.877 cv
401.563 604.396 412.93 649.857 418.281 651.838 cv
423.633 653.818 439.688 642.611 439.688 642.611 cv
439.688 642.611 419.617 653.166 422.293 661.064 cv
424.969 668.971 438.352 685.451 440.359 683.471 cv
442.367 681.494 449.715 676.881 449.715 676.881 cv
449.715 676.881 439.012 682.15 441.695 690.053 cv
444.363 697.963 462.055 708.951 462.055 708.951 cv
479.555 687.701 li
479.555 687.701 459.758 712.463 474.469 725.639 cv
489.188 738.814 483.164 729.596 489.188 736.182 cv
495.211 742.775 500.555 745.412 504.57 742.111 cv
508.582 738.814 512.602 732.232 512.602 732.232 cv
512.602 732.232 504.57 746.729 517.957 751.998 cv
535.453 758.896 540.695 757.268 544.039 751.334 cv
547.387 745.412 547.387 742.775 547.387 742.775 cv
547.387 742.775 539.359 760.568 558.758 763.861 cv
578.156 767.15 609.598 767.807 617.621 755.947 cv
617.621 755.947 619.625 754.631 616.957 750.021 cv
614.273 745.412 616.281 755.947 631 752.65 cv
645.715 749.357 664.555 740.201 656.219 721.451 cv
656.219 721.451 664.445 730.248 677.156 721.682 cv
689.859 713.115 695.926 698.029 694.586 693.424 cv
693.25 688.811 693.879 699.943 702.578 690.713 cv
711.266 681.494 722.645 664.361 723.984 651.838 cv
725.32 639.326 717.293 638.01 717.293 638.01 cv
717.293 638.01 732.68 641.955 734.688 617.572 cv
734.688 617.572 731.773 611.529 717.734 611.529 cv
703.688 611.529 705.914 610.334 695.211 607.037 cv
684.516 603.74 662.438 597.814 645.715 595.834 cv
628.996 593.854 618.293 589.244 612.266 590.557 cv
606.254 591.877 602.906 594.518 599.57 591.221 cv
596.219 587.924 592.875 584.631 578.156 583.971 cv
563.438 583.307 546.711 573.428 529.32 571.455 cv
511.926 569.475 509.609 569.896 492.883 565.287 cv
476.16 560.678 459.086 554.322 454.402 553.658 cv
449.715 552.998 427.645 545.1 422.293 547.076 cv
416.941 549.053 411.59 541.803 407.578 545.1 cv
cp
.952941 .658824 0 rgb
f
gsave
550.355 608.525 mo
550.355 608.525 512.227 649.771 500.145 663.873 cv
488.078 677.971 463.699 705.537 466.039 714.326 cv
468.367 723.1 478.297 731.205 480.391 733.186 cv
482.461 735.17 495.949 742.678 503.215 745.264 cv
510.496 747.838 521.527 710.9 524.246 705.342 cv
526.953 699.795 539.672 651.955 547.281 638.17 cv
554.887 624.377 566.18 602.979 550.355 608.525 cv
cp
clp
470.625 709.619 mo
470.625 709.619 474.711 729.756 508.32 737.416 cv
508.32 737.416 480.848 724.814 470.625 709.619 cv
cp
.27451 .207843 .145098 rgb
f
474.922 702.201 mo
474.922 702.201 479.023 722.346 512.621 730.006 cv
512.621 730.006 485.156 717.396 474.922 702.201 cv
cp
f
477.852 692.689 mo
477.852 692.689 481.941 712.826 515.555 720.482 cv
515.555 720.482 488.086 707.881 477.852 692.689 cv
cp
f
481.941 684.873 mo
481.941 684.873 486.031 705.006 519.637 712.67 cv
519.637 712.67 492.164 700.068 481.941 684.873 cv
cp
f
486.547 677.553 mo
486.547 677.553 490.641 697.697 524.246 705.342 cv
524.246 705.342 496.781 692.74 486.547 677.553 cv
cp
f
489.82 670.162 mo
489.82 670.162 493.918 690.299 527.527 697.951 cv
527.527 697.951 500.051 685.361 489.82 670.162 cv
cp
f
493.508 662.561 mo
493.508 662.561 497.609 682.701 531.215 690.354 cv
531.215 690.354 503.742 677.756 493.508 662.561 cv
cp
f
498.422 655.334 mo
498.422 655.334 502.523 675.475 536.121 683.127 cv
536.121 683.127 508.648 670.518 498.422 655.334 cv
cp
f
500.055 646.76 mo
500.055 646.76 504.156 666.889 537.75 674.561 cv
537.75 674.561 510.281 661.947 500.055 646.76 cv
cp
f
502.508 638.783 mo
502.508 638.783 506.609 658.92 540.219 666.568 cv
540.219 666.568 512.742 653.967 502.508 638.783 cv
cp
f
501.801 630.162 mo
501.801 630.162 505.898 650.295 539.508 657.951 cv
539.508 657.951 512.039 645.342 501.801 630.162 cv
cp
f
503.672 623.01 mo
503.672 623.01 507.766 643.15 541.375 650.791 cv
541.375 650.791 513.898 638.189 503.672 623.01 cv
cp
f
507.281 616.713 mo
507.281 616.713 511.383 636.865 544.992 644.521 cv
544.992 644.521 517.523 631.916 507.281 616.713 cv
cp
f
509.578 610.361 mo
509.578 610.361 513.672 630.51 547.281 638.17 cv
547.281 638.17 519.809 625.557 509.578 610.361 cv
cp
f
512.758 603.275 mo
512.758 603.275 516.863 623.42 550.473 631.08 cv
550.473 631.08 523 618.479 512.758 603.275 cv
cp
f
514.637 596.123 mo
514.637 596.123 518.738 616.271 552.332 623.932 cv
552.332 623.932 524.855 611.318 514.637 596.123 cv
cp
f
519.781 590.322 mo
519.781 590.322 523.883 610.459 557.477 618.115 cv
557.477 618.115 530.012 605.51 519.781 590.322 cv
cp
f
grestore
gsave
544.871 585.814 mo
544.871 585.814 493.805 609.201 477.234 617.572 cv
460.668 625.939 427.555 642.002 426.332 651.018 cv
425.109 660.01 431.16 671.318 432.316 673.939 cv
433.465 676.568 443.031 688.693 448.738 693.869 cv
454.465 699.049 441.082 686.49 480.34 659.545 cv
485.43 656.057 518.305 621.783 530.633 611.994 cv
542.957 602.182 561.609 586.783 544.871 585.814 cv
cp
clp
432.371 648.428 mo
432.371 648.428 428.398 668.596 456.473 688.6 cv
456.473 688.6 435.965 666.396 432.371 648.428 cv
cp
.27451 .207843 .145098 rgb
f
439.191 643.244 mo
439.191 643.244 435.234 663.408 463.289 683.42 cv
463.289 683.42 442.797 661.201 439.191 643.244 cv
cp
f
445.559 635.592 mo
445.559 635.592 441.59 655.752 469.664 675.756 cv
469.664 675.756 449.156 653.557 445.559 635.592 cv
cp
f
452.352 629.955 mo
452.352 629.955 448.375 650.107 476.434 670.111 cv
476.434 670.111 455.938 647.912 452.352 629.955 cv
cp
f
459.414 624.971 mo
459.414 624.971 455.441 645.127 483.516 665.123 cv
483.516 665.123 463.016 642.916 459.414 624.971 cv
cp
f
465.281 619.404 mo
465.281 619.404 461.316 639.564 489.387 659.564 cv
489.387 659.564 468.871 637.365 465.281 619.404 cv
cp
f
471.613 613.811 mo
471.613 613.811 467.645 633.971 495.715 653.967 cv
495.715 653.967 475.207 631.764 471.613 613.811 cv
cp
f
478.922 609.025 mo
478.922 609.025 474.961 629.189 503.02 649.186 cv
503.02 649.186 482.527 626.979 478.922 609.025 cv
cp
f
483.738 601.74 mo
483.738 601.74 479.773 621.904 507.824 641.908 cv
507.824 641.908 487.328 619.697 483.738 601.74 cv
cp
f
489.07 595.326 mo
489.07 595.326 485.102 615.494 513.18 635.479 cv
513.18 635.479 492.664 613.271 489.07 595.326 cv
cp
f
491.734 587.096 mo
491.734 587.096 487.766 607.248 515.836 627.256 cv
515.836 627.256 495.328 605.045 491.734 587.096 cv
cp
f
496.215 581.213 mo
496.215 581.213 492.242 601.377 520.324 621.369 cv
520.324 621.369 499.813 599.162 496.215 581.213 cv
cp
f
501.969 576.791 mo
501.969 576.791 498 596.967 526.07 616.975 cv
526.07 616.975 505.563 594.771 501.969 576.791 cv
cp
f
506.527 571.818 mo
506.527 571.818 502.551 591.982 530.633 611.994 cv
530.633 611.994 510.125 589.771 506.527 571.818 cv
cp
f
512.195 566.498 mo
512.195 566.498 508.23 586.67 536.301 606.674 cv
536.301 606.674 515.797 584.467 512.195 566.498 cv
cp
f
516.68 560.615 mo
516.68 560.615 512.711 580.791 540.773 600.787 cv
540.773 600.787 520.262 578.576 516.68 560.615 cv
cp
f
523.66 557.24 mo
523.66 557.24 519.695 577.408 547.75 597.396 cv
547.75 597.396 527.258 575.201 523.66 557.24 cv
cp
f
grestore
gsave
566.578 620.002 mo
566.578 620.002 557.414 675.412 555.086 693.83 cv
552.758 712.248 547.551 748.674 554.336 754.732 cv
561.109 760.783 573.875 762.092 576.688 762.592 cv
579.516 763.111 594.91 761.963 602.391 760.127 cv
609.895 758.268 598.801 721.354 598.016 715.225 cv
597.227 709.096 581.551 662.139 580.32 646.447 cv
579.078 630.736 576.75 606.67 566.578 620.002 cv
cp
clp
555.574 748.283 mo
555.574 748.283 570.066 762.857 602.355 750.764 cv
602.355 750.764 572.473 755.346 555.574 748.283 cv
cp
.27451 .207843 .145098 rgb
f
555.094 739.729 mo
555.094 739.729 569.594 754.287 601.867 742.213 cv
601.867 742.213 571.992 746.787 555.094 739.729 cv
cp
f
552.313 730.166 mo
552.313 730.166 566.797 744.732 599.086 732.658 cv
599.086 732.658 569.219 737.232 552.313 730.166 cv
cp
f
551.434 721.389 mo
551.434 721.389 565.922 735.951 598.195 723.877 cv
598.195 723.877 568.324 728.451 551.434 721.389 cv
cp
f
551.254 712.744 mo
551.254 712.744 565.742 727.307 598.016 715.225 cv
598.016 715.225 568.137 719.799 551.254 712.744 cv
cp
f
549.922 704.768 mo
549.922 704.768 564.418 719.33 596.695 707.248 cv
596.695 707.248 566.813 711.838 549.922 704.768 cv
cp
f
548.82 696.389 mo
548.82 696.389 563.309 710.951 595.59 698.857 cv
595.59 698.857 565.719 703.447 548.82 696.389 cv
cp
f
548.945 687.65 mo
548.945 687.65 563.441 702.221 595.715 690.143 cv
595.715 690.143 565.844 694.701 548.945 687.65 cv
cp
f
545.598 679.584 mo
545.598 679.584 560.094 694.15 592.371 682.08 cv
592.371 682.08 562.5 686.662 545.598 679.584 cv
cp
f
543.258 671.576 mo
543.258 671.576 557.762 686.146 590.039 674.053 cv
590.039 674.053 560.16 678.635 543.258 671.576 cv
cp
f
537.93 664.768 mo
537.93 664.768 552.422 679.326 584.699 667.248 cv
584.699 667.248 554.82 671.822 537.93 664.768 cv
cp
f
535.555 657.768 mo
535.555 657.768 550.063 672.33 582.332 660.24 cv
582.332 660.24 552.449 664.826 535.555 657.768 cv
cp
f
535.117 650.521 mo
535.117 650.521 549.621 665.1 581.902 653.014 cv
581.902 653.014 552.031 657.6 535.117 650.521 cv
cp
f
533.531 643.959 mo
533.531 643.959 548.035 658.537 580.32 646.447 cv
580.32 646.447 550.438 651.021 533.531 643.959 cv
cp
f
532.305 636.295 mo
532.305 636.295 546.801 650.861 579.09 638.771 cv
579.09 638.771 549.211 643.342 532.305 636.295 cv
cp
f
529.934 629.283 mo
529.934 629.283 544.438 643.854 576.707 631.779 cv
576.707 631.779 546.82 636.354 529.934 629.283 cv
cp
f
531.039 621.607 mo
531.039 621.607 545.539 636.166 577.797 624.092 cv
577.797 624.092 547.938 628.666 531.039 621.607 cv
cp
f
grestore
gsave
584.363 609.635 mo
584.363 609.635 612.387 658.311 622.254 674.029 cv
632.121 689.756 651.18 721.232 660.266 721.627 cv
669.344 722.014 680.039 714.932 682.539 713.541 cv
685.051 712.15 696.238 701.506 700.859 695.346 cv
705.484 689.154 673.508 667.619 669.016 663.385 cv
664.523 659.143 622.645 632.748 611.75 621.377 cv
600.836 610.014 583.789 592.881 584.363 609.635 cv
cp
clp
657.137 715.842 mo
657.137 715.842 677.582 717.936 694.898 688.127 cv
694.898 688.127 674.688 710.607 657.137 715.842 cv
cp
.27451 .207843 .145098 rgb
f
651.344 709.541 mo
651.344 709.541 671.789 711.607 689.105 681.822 cv
689.105 681.822 668.891 704.287 651.344 709.541 cv
cp
f
643.133 703.908 mo
643.133 703.908 663.57 705.99 680.887 676.186 cv
680.887 676.186 660.68 698.654 643.133 703.908 cv
cp
f
636.887 697.662 mo
636.887 697.662 657.328 699.756 674.648 669.955 cv
674.648 669.955 654.441 692.432 636.887 697.662 cv
cp
f
631.277 691.096 mo
631.277 691.096 651.707 693.174 669.016 663.385 cv
669.016 663.385 648.805 685.861 631.277 691.096 cv
cp
f
625.188 685.764 mo
625.188 685.764 645.633 687.846 662.945 658.053 cv
662.945 658.053 642.738 680.537 625.188 685.764 cv
cp
f
619.027 679.982 mo
619.027 679.982 639.465 682.072 656.781 652.26 cv
656.781 652.26 636.578 674.736 619.027 679.982 cv
cp
f
613.582 673.146 mo
613.582 673.146 634.031 675.225 651.352 645.436 cv
651.352 645.436 631.125 667.896 613.582 673.146 cv
cp
f
605.887 669.025 mo
605.887 669.025 626.332 671.104 643.66 641.314 cv
643.66 641.314 623.445 663.791 605.887 669.025 cv
cp
f
599.008 664.311 mo
599.008 664.311 619.461 666.396 636.762 636.584 cv
636.762 636.584 616.551 659.064 599.008 664.311 cv
cp
f
590.563 662.424 mo
590.563 662.424 611.004 664.502 628.32 634.697 cv
628.32 634.697 608.102 657.174 590.563 662.424 cv
cp
f
584.297 658.506 mo
584.297 658.506 604.742 660.588 622.043 630.787 cv
622.043 630.787 601.836 653.264 584.297 658.506 cv
cp
f
579.359 653.178 mo
579.359 653.178 599.82 655.264 617.133 625.463 cv
617.133 625.463 596.926 647.939 579.359 653.178 cv
cp
f
573.984 649.107 mo
573.984 649.107 594.438 651.201 611.75 621.377 cv
611.75 621.377 591.531 643.857 573.984 649.107 cv
cp
f
568.168 643.955 mo
568.168 643.955 588.617 646.037 605.938 616.232 cv
605.938 616.232 585.715 638.701 568.168 643.955 cv
cp
f
561.898 640.033 mo
561.898 640.033 582.352 642.115 599.656 612.33 cv
599.656 612.33 579.438 634.811 561.898 640.033 cv
cp
f
557.883 633.4 mo
557.883 633.4 578.332 635.475 595.633 605.689 cv
595.633 605.689 575.434 628.15 557.883 633.4 cv
cp
f
grestore
gsave
535.047 579.713 mo
535.047 579.713 490.91 578.17 467.121 580.834 cv
448.68 582.896 411.789 579.209 406.492 586.604 cv
401.203 593.986 401.262 606.818 401.066 609.662 cv
400.859 612.529 403.641 627.717 406.266 634.967 cv
408.91 642.221 401.824 619.521 444.93 611.822 cv
451.004 610.744 503.352 592.393 518.828 589.502 cv
534.301 586.592 549.391 588.389 535.047 579.713 cv
cp
clp
413.039 587.143 mo
413.039 587.143 400.094 603.111 415.563 633.928 cv
415.563 633.928 407.813 604.701 413.039 587.143 cv
cp
.27451 .207843 .145098 rgb
f
421.492 585.748 mo
421.492 585.748 408.563 601.729 424.012 632.529 cv
424.012 632.529 416.281 603.311 421.492 585.748 cv
cp
f
430.695 581.959 mo
430.695 581.959 417.766 597.924 433.227 628.736 cv
433.227 628.736 425.48 599.521 430.695 581.959 cv
cp
f
439.34 580.146 mo
439.34 580.146 426.406 596.107 441.852 626.916 cv
441.852 626.916 434.109 597.705 439.34 580.146 cv
cp
f
447.906 579.045 mo
447.906 579.045 434.969 595.01 450.445 625.811 cv
450.445 625.811 442.703 596.592 447.906 579.045 cv
cp
f
455.691 576.869 mo
455.691 576.869 442.766 592.838 458.242 623.643 cv
458.242 623.643 450.477 594.42 455.691 576.869 cv
cp
f
463.91 574.885 mo
463.91 574.885 450.977 590.85 466.449 621.65 cv
466.449 621.65 458.699 592.436 463.91 574.885 cv
cp
f
472.617 574.068 mo
472.617 574.068 459.676 590.049 475.133 620.846 cv
475.133 620.846 467.398 591.631 472.617 574.068 cv
cp
f
480.273 569.877 mo
480.273 569.877 467.344 585.85 482.789 616.65 cv
482.789 616.65 475.051 587.432 480.273 569.877 cv
cp
f
487.98 566.709 mo
487.98 566.709 475.051 582.678 490.523 613.479 cv
490.523 613.479 482.773 584.248 487.98 566.709 cv
cp
f
494.188 560.67 mo
494.188 560.67 481.258 576.635 496.719 607.447 cv
496.719 607.447 488.973 578.225 494.188 560.67 cv
cp
f
500.898 557.568 mo
500.898 557.568 487.961 573.541 503.438 604.33 cv
503.438 604.33 495.688 575.119 500.898 557.568 cv
cp
f
508.055 556.354 mo
508.055 556.354 495.117 572.334 510.574 603.135 cv
510.574 603.135 502.828 573.928 508.055 556.354 cv
cp
f
514.406 554.084 mo
514.406 554.084 501.461 570.061 516.938 600.865 cv
516.938 600.865 509.191 571.635 514.406 554.084 cv
cp
f
521.902 552.033 mo
521.902 552.033 508.969 568.01 524.43 598.818 cv
524.43 598.818 516.691 569.6 521.902 552.033 cv
cp
f
528.617 548.928 mo
528.617 548.928 515.68 564.912 531.141 595.705 cv
531.141 595.705 523.391 566.479 528.617 548.928 cv
cp
f
536.367 549.213 mo
536.367 549.213 523.438 565.182 538.895 595.967 cv
538.895 595.967 531.148 566.768 536.367 549.213 cv
cp
f
grestore
400.598 606.908 mo
400.598 606.908 400.082 590.49 414.969 586.896 cv
423.07 584.943 440.117 584.326 449.348 583.307 cv
458.586 582.287 517.086 579.201 517.086 579.201 cv
408.293 579.201 li
408.293 579.201 395.469 586.896 400.598 606.908 cv
cp
.27451 .207843 .145098 rgb
f
614.07 762.404 mo
614.07 762.404 618.172 759.838 615.609 754.189 cv
613.051 748.545 611.512 744.443 612.02 738.799 cv
612.531 733.15 606.883 723.908 606.375 718.268 cv
605.863 712.627 599.191 685.939 599.191 685.939 cv
599.191 685.939 611.5 726.986 615.609 736.74 cv
619.715 746.494 621.766 754.709 627.414 755.732 cv
633.063 756.752 637.164 756.752 637.164 756.752 cv
637.164 756.752 622.359 761.963 621.043 761.158 cv
619.715 760.354 613.563 764.455 613.563 764.455 cv
614.07 762.404 li
cp
f
691.512 709.33 mo
691.512 709.33 699.207 707.279 694.586 698.557 cv
689.969 689.826 682.789 684.697 678.68 680.08 cv
674.574 675.459 653.539 653.4 653.539 653.4 cv
653.539 653.4 666.367 663.658 672.523 669.814 cv
678.68 675.971 688.438 680.592 694.074 687.775 cv
699.715 694.963 702.801 688.803 705.363 689.318 cv
707.93 689.826 713.063 683.158 713.063 683.158 cv
713.063 683.158 712.035 691.373 703.828 694.963 cv
695.613 698.557 691.512 709.33 691.512 709.33 cv
cp
f
gsave
606.836 594.893 mo
606.836 594.893 648.035 609.682 663.125 620.494 cv
678.211 631.311 718.883 643.119 727.434 640.049 cv
735.984 636.967 732.098 636.459 733.879 634.225 cv
735.688 631.982 740.43 610.326 737.188 617.471 cv
734.617 623.115 706.875 615.674 700.746 614.908 cv
688.43 613.369 671.328 610.697 656.102 606.693 cv
626.848 598.994 609.402 594.377 606.836 594.893 cv
cp
clp
711.25 645.982 mo
711.25 645.982 730.961 640.17 735.695 606.025 cv
735.695 606.025 725.508 634.482 711.25 645.982 cv
cp
f
703.5 642.338 mo
703.5 642.338 723.203 636.51 727.945 602.389 cv
727.945 602.389 717.75 630.83 703.5 642.338 cv
cp
f
693.762 640.236 mo
693.762 640.236 713.465 634.424 718.211 600.279 cv
718.211 600.279 708.023 628.732 693.762 640.236 cv
cp
f
685.625 636.826 mo
685.625 636.826 705.328 631.018 710.078 596.881 cv
710.078 596.881 699.887 625.334 685.625 636.826 cv
cp
f
677.941 632.873 mo
677.941 632.873 697.633 627.057 702.371 592.932 cv
702.371 592.932 692.18 621.389 677.941 632.873 cv
cp
f
670.285 630.24 mo
670.285 630.24 689.992 624.428 694.734 590.295 cv
694.734 590.295 684.547 618.76 670.285 630.24 cv
cp
f
662.395 627.229 mo
662.395 627.229 682.102 621.416 686.836 587.271 cv
686.836 587.271 676.652 615.729 662.395 627.229 cv
cp
f
654.766 622.959 mo
654.766 622.959 674.48 617.139 679.223 583.01 cv
679.223 583.01 669.016 611.455 654.766 622.959 cv
cp
f
646.086 622.061 mo
646.086 622.061 665.793 616.244 670.539 582.115 cv
670.539 582.115 660.352 610.568 646.086 622.061 cv
cp
f
637.93 620.303 mo
637.93 620.303 657.645 614.494 662.367 580.342 cv
662.367 580.342 652.176 608.803 637.93 620.303 cv
cp
f
629.406 621.76 mo
629.406 621.76 649.113 615.943 653.84 581.803 cv
653.84 581.803 643.645 610.256 629.406 621.76 cv
cp
f
622.117 620.51 mo
622.117 620.51 641.828 614.693 646.551 580.553 cv
646.551 580.553 636.355 609.01 622.117 620.51 cv
cp
f
615.523 617.447 mo
615.523 617.447 635.258 611.627 639.988 577.486 cv
639.988 577.486 629.805 605.943 615.523 617.447 cv
cp
f
609.012 615.713 mo
609.012 615.713 628.734 609.904 633.461 575.748 cv
633.461 575.748 623.266 604.209 609.012 615.713 cv
cp
f
601.684 613.154 mo
601.684 613.154 621.391 607.33 626.133 573.186 cv
626.133 573.186 615.93 601.643 601.684 613.154 cv
cp
f
594.387 611.896 mo
594.387 611.896 614.109 606.076 618.84 571.955 cv
618.84 571.955 608.645 600.416 594.387 611.896 cv
cp
f
588.164 607.275 mo
588.164 607.275 607.879 601.451 612.605 567.334 cv
612.605 567.334 602.414 595.768 588.164 607.275 cv
cp
f
grestore
gsave
530.156 575.041 mo
530.156 575.041 488.438 560.568 464.914 556.115 cv
446.688 552.646 412.508 538.271 405.277 543.775 cv
398.047 549.268 403.117 559.381 402.082 562.045 cv
401.043 564.717 402.082 573.854 406.188 577.443 cv
412.004 582.525 399 564.107 436.98 564.615 cv
443.137 564.701 494.207 572.58 509.848 574.365 cv
525.484 576.143 531.398 577.443 530.156 575.041 cv
cp
clp
411.375 546.217 mo
411.375 546.217 394.305 557.666 400.012 591.666 cv
400.012 591.666 401.203 561.459 411.375 546.217 cv
cp
f
419.867 547.373 mo
419.867 547.373 402.805 558.838 408.5 592.822 cv
408.5 592.822 409.703 562.611 419.867 547.373 cv
cp
f
429.77 546.459 mo
429.77 546.459 412.711 557.912 418.414 591.904 cv
418.414 591.904 419.617 561.709 429.77 546.459 cv
cp
f
438.566 547.271 mo
438.566 547.271 421.5 558.717 427.195 592.705 cv
427.195 592.705 428.398 562.51 438.566 547.271 cv
cp
f
447.078 548.74 mo
447.078 548.74 430.016 560.189 435.734 594.186 cv
435.734 594.186 436.941 563.979 447.078 548.74 cv
cp
f
455.16 548.967 mo
455.16 548.967 438.098 560.412 443.828 594.408 cv
443.828 594.408 445.008 564.189 455.16 548.967 cv
cp
f
463.598 549.475 mo
463.598 549.475 446.535 560.924 452.25 594.916 cv
452.25 594.916 453.449 564.717 463.598 549.475 cv
cp
f
472.16 551.264 mo
472.16 551.264 455.082 562.721 460.793 596.705 cv
460.793 596.705 462 566.51 472.16 551.264 cv
cp
f
480.707 549.514 mo
480.707 549.514 463.648 560.967 469.34 594.955 cv
469.34 594.955 470.555 564.748 480.707 549.514 cv
cp
f
489.012 548.752 mo
489.012 548.752 471.953 560.201 477.668 594.201 cv
477.668 594.201 478.867 563.986 489.012 548.752 cv
cp
f
496.719 544.814 mo
496.719 544.814 479.656 556.264 485.363 590.26 cv
485.363 590.26 486.563 560.049 496.719 544.814 cv
cp
f
504.047 543.818 mo
504.047 543.818 486.98 555.279 492.703 589.26 cv
492.703 589.26 493.895 559.053 504.047 543.818 cv
cp
f
511.242 544.768 mo
511.242 544.768 494.164 556.225 499.875 590.217 cv
499.875 590.217 501.07 560.021 511.242 544.768 cv
cp
f
517.977 544.463 mo
517.977 544.463 500.906 555.928 506.617 589.924 cv
506.617 589.924 507.824 559.701 517.977 544.463 cv
cp
f
525.754 544.713 mo
525.754 544.713 508.68 556.174 514.391 590.166 cv
514.391 590.166 515.59 559.971 525.754 544.713 cv
cp
f
533.086 543.725 mo
533.086 543.725 516.016 555.186 521.719 589.17 cv
521.719 589.17 522.918 558.967 533.086 543.725 cv
cp
f
540.402 546.283 mo
540.402 546.283 523.344 557.736 529.051 591.701 cv
529.051 591.701 530.242 561.525 540.402 546.283 cv
cp
f
grestore
550.953 719.311 mo
551 718.459 553.621 637.881 553.621 625.912 cv
553.621 623.393 553.621 617.49 552.852 616.432 cv
552.02 616.588 550.715 616.877 548.93 617.443 cv
543.859 619.311 496.59 669.584 471.414 699.299 cv
487.328 674.67 li
506.785 650.693 535.375 612.803 537.551 608.447 cv
538.293 606.963 538.23 606.354 538.227 606.299 cv
538.219 606.299 li
538.18 606.299 537.047 605.287 531.453 605.287 cv
526.594 605.287 463.172 626.115 429.848 638.74 cv
456.02 624.377 li
458.465 623.158 512.477 595.268 528.086 593.447 cv
531.258 593.076 533.484 590.678 534.57 589.221 cv
533.945 587.463 532.711 584.287 530.781 580.42 cv
528.711 577.432 467.742 556.479 451.398 553.049 cv
494.52 561.381 li
516.746 563.604 540.945 568.994 550.809 573.928 cv
559.109 578.076 571.75 579.408 582.945 580.338 cv
592.336 581.119 595.563 584.014 598.414 586.572 cv
599.18 587.256 599.949 587.959 600.914 588.635 cv
605.352 591.74 613.324 595.373 626.773 600.416 cv
641.102 605.791 722.203 640.529 722.867 640.795 cv
703.367 637.721 li
651.492 622.053 li
638.469 617.861 617.242 610.416 612.781 608.627 cv
608.75 607.018 600.379 604.615 593.855 604.615 cv
593.008 604.615 592.176 604.654 591.395 604.752 cv
588.781 605.053 588.211 606.064 588.023 606.393 cv
586.984 608.236 587.684 612.256 589.898 617.139 cv
593.504 625.061 635.008 687.963 651.535 712.123 cv
662.828 734.189 li
660.461 731.049 590.016 640.85 585.09 634.135 cv
583.48 631.943 582.02 629.408 580.598 626.955 cv
578.813 623.861 575.48 618.1 573.852 618.1 cv
572.855 618.178 li
567.633 618.588 566.523 618.818 566.277 622.857 cv
565.828 630.518 551.34 745.256 550.953 749.072 cv
550.953 719.311 li
cp
f
494.168 564.857 mo
494.168 564.857 530.746 572.545 533.906 578.857 cv
537.059 585.17 538.41 589.693 538.41 589.693 cv
538.41 589.693 535.051 596.154 528.484 596.916 cv
513.305 598.682 453.988 628.068 453.988 628.068 cv
453.988 628.068 523.328 601.791 531.453 601.791 cv
539.586 601.791 543.832 603.693 540.672 610.01 cv
537.516 616.33 486.945 678.627 486.945 678.627 cv
486.945 678.627 539.305 616.822 547.879 614.107 cv
556.453 611.4 557.117 613.725 557.117 625.912 cv
557.117 638.107 552.863 723.779 552.863 723.779 cv
552.863 723.779 562.344 630.326 562.789 622.646 cv
563.25 614.975 568.129 615.08 573.539 614.623 cv
578.957 614.182 582.938 625.299 587.906 632.072 cv
592.875 638.842 650.832 715.654 650.832 715.654 cv
650.832 715.654 591.238 628.518 586.727 618.584 cv
582.211 608.654 583.305 602.178 590.984 601.279 cv
598.664 600.381 609.57 603.584 614.074 605.393 cv
618.594 607.193 639.926 614.662 652.566 618.725 cv
665.199 622.795 706.82 636.193 706.82 636.193 cv
706.82 636.193 640.004 609.107 625.551 603.686 cv
611.105 598.268 603.426 594.654 598.914 591.498 cv
594.402 588.342 593.5 584.721 582.664 583.818 cv
571.824 582.92 558.273 581.564 549.25 577.045 cv
540.223 572.533 516.746 567.111 494.168 564.857 cv
cp
.984314 .921569 .854902 rgb
f
543.254 581.252 mo
543.254 581.252 549.418 585.357 548.387 588.439 cv
547.359 591.514 545.82 594.076 541.719 595.107 cv
537.617 596.135 530.43 600.236 536.586 598.186 cv
542.742 596.135 551.984 593.061 549.93 595.627 cv
547.867 598.186 550.949 594.6 550.438 598.701 cv
549.93 602.803 542.742 611.529 542.742 611.529 cv
542.742 611.529 553 601.783 555.57 600.752 cv
558.137 599.721 559.168 601.783 559.168 604.857 cv
559.168 607.939 559.676 625.893 559.676 625.893 cv
559.676 625.893 563.789 600.24 565.836 600.24 cv
567.883 600.24 570.445 594.596 572.504 599.213 cv
574.559 603.834 578.66 610.498 578.66 610.498 cv
578.66 610.498 575.102 597.643 577.641 595.107 cv
582.773 589.975 588.93 592.545 588.93 592.545 cv
599.703 595.627 li
599.703 595.627 583.281 585.873 579.691 586.389 cv
576.102 586.896 579.691 584.326 571.992 585.869 cv
564.297 587.408 569.934 584.326 566.344 585.357 cv
562.758 586.389 567.383 591.51 560.707 592.025 cv
554.031 592.545 553 588.947 550.949 586.896 cv
548.898 584.846 549.922 582.271 543.254 581.252 cv
cp
.27451 .207843 .145098 rgb
f
420.301 722.287 mo
420.301 722.287 419.145 719.592 422.227 719.592 cv
425.301 719.592 428.383 721.514 426.84 724.975 cv
425.301 728.443 420.301 726.135 420.301 722.287 cv
cp
f
396.434 689.572 mo
396.434 689.572 396.82 686.49 400.281 687.646 cv
403.75 688.799 405.25 691.338 401.613 693.529 cv
397.977 695.729 396.434 694.955 396.434 689.572 cv
cp
f
478.625 777.709 mo
478.625 777.709 475.93 774.631 479.391 773.479 cv
482.859 772.318 481.766 772.404 482.891 775.826 cv
484.012 779.248 481.703 780.021 478.625 777.709 cv
cp
f
777.023 662.705 mo
777.023 662.705 782.02 691.041 762.855 713.541 cv
756.188 721.877 li
756.188 721.877 772.023 705.205 777.023 662.705 cv
cp
f
547.023 776.037 mo
547.023 776.037 585.77 790.619 616.605 772.287 cv
616.605 772.287 590.773 797.705 547.023 776.037 cv
cp
f
762.445 716.037 mo
762.445 716.037 776.195 681.037 774.109 649.787 cv
774.109 649.787 767.023 695.627 756.609 722.705 cv
762.445 716.037 li
cp
f
755.781 719.369 mo
755.781 719.369 769.531 684.369 767.445 653.119 cv
767.445 653.119 760.359 698.959 749.945 726.041 cv
755.781 719.369 li
cp
f
733.324 739.318 mo
733.324 739.318 750.719 720.908 758.637 676.084 cv
758.637 676.084 761.117 698.506 745.773 731.037 cv
745.773 731.037 740.402 739.123 733.324 739.318 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_orange.eps)
%%CreationDate: 3/12/2016 1:22 AM
%AI9_DataStream
%Gb"-6Bj2N:ZS;<+T'MjFi(Q$A_!-7JP$fsh,U<pDq]s,4"rt8e0?iL)G^fNoS(-g/]>8Gr1O[S01E[sNW`6!(V>L!g)P)2R;En?!
%r4A%F?,PTM=mB@Drc.u;bK<SjQ)%p(;=)fTp%ER8;(T1[X,UkhfilIur[u\VD[K#(QU9hU\QWkJP?Fk#MC1))\)HbY=/tBT7^H-/
%B=t<3NV5OFIc#`S0EM/(m2P_-[8SPn_t\7dUBZ3dd9lg"qIR.kDSms_X!Xu_kJ^&@0aekOrgESn;a.4gg<Dsrd\qYBKO&X<*e/:@
%Hs5Gm^go,0r%eG)biHs&Khf&#X3!cCi5bPd$r/OHffI*<(6.nC6RMbAa?TTl)<_:tcb,,7(No'D$%KB=G/iM0CiAM,)]!YeN/Zf6
%T.Lpgp3cpFAn[<__nC*XZs%.0BeM'U0X>T9%)WYUe+K3q%f=/umMf3X[_i+=h@HrIPHh49c[)/`hf^Oq)gX7bU4i)?V>SY+k%2)"
%.Q:qVF3XDrjo8^u9`sY$0F[cp:8_95^9:VlZ@BEEOS@g1UK"Cr2O\$e>/4F(j,*ae4n]6-UN.=;[ScGMQ7QPJrKXj_g1K;f)+i;>
%O)1AQl[+U%ZrB6q1R@L@)$;#QI)(GIA4"V!2U;&+gSnf(.<#>G[1E;Tc.WB%ghKlM.eNtQ4FdB"ZVlZOe[I:7s,0.`#-n1=ec3fb
%!Ub-C>Z\EhXo6d/d7gciDg(ZOC\?+jUP<!'a5d.+OF&!C6FCeYIuSoN^VLVT;h9T?p>7c95c'JSs7s]>r`cVA?1#EL?Si^mduF34
%j3Kr%Ei$cA3O<")+2ad)f1W59)/8,<1HYeD2_/O@0jCTH4rQ0;mdJjqUKVB^oRu`MrH".$p6p[Z^ld;2pfT5d@@`O8kbm63V-QhO
%eMa/:=l658`6D'C34%4M<:qH3KD\:C%j]>.-KZPao:QW0+"):'eO$ZI3GK=)O"818o+1W.rm3Z8PC+.+?F(Wr7)-Tg&+RDk#eER=
%2JC(cJ'stQ+#+Yj_2ULWe:FB-khnjrDq%NZ;98)F(J_4QH`kD8-<WP=>0mI_ZpCg0os8\HE>mR3h,8b6IOm<O'-42iTjDDEkRVuW
%i_8)1i-%9=MV=e=h0n4OER$O.5E]ZJ#6/];_[B:_g*d)rkasX=nCsj"Rr:U,dEhV\&]IbDq0U&P(,IcHeuElfj#l[6ZZ=E,Q\"hT
%6-!6:=m56O4K_XVc#TA$=ICNU!36#Cri>u:pC$s[A))QuH*RfV!lOBiE`T,^UsJLN]$q*FmK&sZc)[73&H5B(_S8#7!bb"/JG?$?
%C*+f'7/BV90ZW:td;_5K1ofS1J^Y`!,%_FHL@((_4/oXp!:9!!;c)U7p2ed5j2/Mj)SAZk!E@]c0%l+0N@2.rblb1ElG`=->k"\S
%f[,i>#XJ(&DS+=LT#Wp%i3]F)g42aC\#]6t!G@CHWns^l(#+GK6pS^Qhj?sX)X_:C%LT?/HF*OM"/MAR7ecPi.H']?N<ZOgDKVsN
%jFc`bOP-/5AolUn7s"V!hC,65>OugXhoM[f(-Dppd(Z!'G,(I5;kgER7:j)j::"&O_7!\PR<BYL>r&NGl)1CV5E?h._dVBrGp24Q
%7HS-4j)Rkp+O+]o!hOq)RTW<Y\VU;02<?.oR+.@i9N05.9tA/R!He/&gIA$))KShbbU"Cb.5^0"pf(-q0"'e=>;!>F;Hkc]jT(`p
%lP<TDaafb#Hd9/rp08eLVT,2094t)K<j(j3(J9[:da1u<rOLH2ji_9Ob%==X(<!iBX9Lq%m4FG"#M%+FP%ol^jqi_HX&UUu=3cS=
%ZM!?jgG8<KeMo[-Q.nZL@8%T/<5qs2U(3H+:`i:26P=77o^@d3oduoCWBB9Be6+JpY=Ou_r]*1"DX!=Q^T0qRK@4\D--O65Yh!O!
%\CEU#^8@$B,tR34Fde)>@X5Fb84I<!h/CN38,sHBAuAgGXu>RIG+kL<\,(m8(jnen!8%35D:H`F!\bNJV$=t&?Kat2UIfZ0\;?lG
%E*pSsQ#&8U0*)piGN1a(G,%rRD^KNob['*]G3,Z?MV^%P9$aUI#pe(5;I/I8%abHN27GBa0khW#d&aU8CZT`&!8:ClJcm"U8J2Xt
%YpLCo3sc>hc,#K,ml3<<c7TsXabJb:02<;lc:rB;gCl-A<n_XMo+hYR$Rd\.3T2rW7dri/mM@m%2n>W#b0?\:@WEs+S`EK)G4*DY
%Xs2-]\LN)'U3)?NGF^%1@DX$tVO8e,S-R;5-i*[Q/o@[J)V(*b\bpp`_ND;jO/Z*pP%D,I;isdn=1q`b<B<^m<cu&X47fnVA0lb7
%C<XjHqf0UQj4a.M7e?6hCY'k/JgShQ8_Mb7Za&9#]WUK+etg0G19ZPfM2=G7#pLluF#<#t6P=3u*LW2q5/g[/l,EG^\eq%^Irl#N
%`[=S.Vt=GG+uVCMdPH`S5:t;>#r'gPGc&,=_0N"2E>G*%$iXbehf$Oi:TtqiF3G9tF-0rr\\.2o\KNm5`_M-$i9G<U?8#B(bLLVf
%R0TgCaA'L;9+\bL3.1ZlDHPWR/$2`tJHm86GuH\n8s*%&^iTlLLJqXG6r3blqL195IN/eNrKtN4:`UpPYtr$2:#NmV*`77d"U;/g
%a77&G_jJAQo=$">0W22F7j8k@pf!g#HS[g_4om@H4[%m\@@GJMV-6TZJQ0<KD;m\B+8<X;NtS!=l$$(!'WV0IIO>+#c;;."9R,:$
%k=pNg-30s.Uu2aW\hPlOW8<LZMKe+C?q;DM&"AP^OonM9D@2D9REW4hckK*K9"T,0`#srKh@rr^7Qh&K`F>ar)3U96"]VSp9n?<H
%eB<OKpI^<sC(VO_9`S5Doqm73TSgb`9RZgj!ASoT])1B`APoC-C5Ia`m^cG<)[`q-!ZReWX"mP(>EF])A4NN9I?A-99Tjo!<bJ-P
%WJEEcW@57N_7`6qDW9d@D9>:=!mJ$-SghuS8YF1!8M80Q39I\!(F9AA';(2GLf^F`-tt<Vs$YS:\L8,'l\nA"\Xg8ZM&?-.MqZpM
%Min41C!im.>a.FsH6RB,'%,@MTDI<,Min41BfYif)5Wb@S=2imH%FFePC#=G`Ua^RGbmJVIDmY4B-XR%'fW[T>?/El\$;R'$9.i`
%m-'m-q/n3'r?UpQ:.qFUCFkEmUQ"kT<G#.CFqMINV0qZ2o!JVtRe!kNYMDCV[ap+t<*fB2VMp>@AR$h;el&[E+6I=;Z?@b/>,nX"
%>jXbte`%17r>UQ2:Duh<TO?Qbnl,bmdpmLiA)sQ.-ij\'A!A%0/t2U^4MnF1q6sVbXqlKT?h*O!S#Nu,AD@<5Q]1j57&cNX^/N2S
%RcR`5gmSF]nWk*rjVAVM0p?G"'NB!*1ZkECA5!g=D.MT)(ZB$%miqZQF,TV#/+lg9YYm^c);?c!4=qB'q*^\gl[)R'V+"agW9?n?
%'[+4L#&L;s^5UJqrdtqm-;?Ao+..dAk]XWkD\X<=H>%\@P5(5lo3Y2O^EFW]QGnmtdat:eqI64Cg1Z%P]%'CAXSpY=rX267/ooG=
%-5jY"g97L:!ek6_I9\;3PO-CjEJ"C3]os]eG&i5C%$JDF?7o%j%/.r^OMEGnEZU`V0US%5_g+Pk/f:*m&M$d+-#Z`$`=#j's#D5_
%NIclndd#=-"/RsTdeN;'a+(;&6sgl4SJ57&j1jbBP/`"#q!SbXJe;D6=A6e7d[4qko=Z3DDJ@>h<^-/<`dA_hmcdGU^=2#l8n5R[
%m&Mu*RtaI,Q,CL7P#k&Kk+!]OB]<;0^WY/Bj.F_L<%CJZD<NZ\`%%\lJEe.oA%#]AZJ/+KS3U0E$&2&cFL=sNCV-2!<:u6\0tT>p
%maGkkJdmuee%3.=PY72e%T3g?l66%3nX!JN^+G8P`M7%U>[IVVWk;H5QRYLb`Nr13>&GuObGE0IZVWkF-C)0f;V,(:3_Nak0q].-
%_Q!S%`g%i+8.Z4Zr*Q;OBqP,BACn8gSi9)^?35)g<VS/>2_`hWL>=]^$CMj&Gd)'B2^QfDc_d6%W?h@Fi\G8>QAZm!R^XfH*jj2H
%ltQ8;R-chs/s$&e+kR14>Pa+KoZkQnfD[o:D=p3q7RL(o9Bpan*A@Era,@H1f^U.l)"PG;NgJ8cOucoIa%P]B8KBH_iHV=3nOlPS
%Ud&uEkp(7T$eZ8IB<"*c\$")rKmZIkB5AKl6N;-$B[^E(s6B^eP?r&L#n3#(Ca)HeN3q6Us,-\[bOZN/Up@J=$^Gd]eC,fgP@kl5
%_D)dcBdKY@(QN2UVTBC0ab@jdaMln5Ja%d;rI7R%:1Ls8!d'l3?V7@Ph%Z:VB<!WP*Z%G.J$/Y4SS@.Y$*$dt\+4HBcagboq)9`h
%dd-7`6!]Jf_cF=-]?i*q&g!I?;5Y'ik#k=GROiTMA/NUUeQjm,HfJafMeMLmBEMN%Phf)E@+'5\[Q^"J>%kCj6CTpiqkGSsM*/C9
%EL%#h,QdAjRfgNLN!)ED;^j"b$C#uu#)o)UR,`4mKJ_NT`Y@/,Qlk@G91VjRG3,QLN%(tf;a88i._r#*A+KR8_(G.d,_7-3@naD.
%:&Pomb/R@E7dA$]&jOBca$OPX&nP&!G5LX1=X^]de[LN1P+5l#2\I3YqA["]^"]]sMs%Wp\h$YD[o]OU](Fn1qkem:;Bi!pWGTJK
%SgAt<hYF%!19q5O_Aj7njn36]=/T:V-;g^gqVN!'`@K4c],;_(Gd=3d@S6dHD.iaTWmK*EXNkl[MXq\<"L$"U)bF"d`e98J_e,[0
%jJ5V]Rt;of)jJn_9'Z[e'2V77eGiq0T^-Xrluea%SLWQD3h:l3Y51^6[<g71S[:N#ops`>jX<idQS[Ub?:dDLoOKW82C3\r![^Y8
%ME)\(,*WWf,5^P/p&>PJQJ/+`Z8A(*2`]iM"IU?1(el]%D`@cYfBpc295V5]ZK76H=_c4;b\9YN\^['@XgurM9<Gbj[H8*8Ogj/8
%9@LeUbFV@'O^JO`\HGa*k$2ZHV<2#tcDBZ.C<k)JS%$2+9*W>1Rrn(81?fDPPF?TWB$u*D1eL9_65$PPg[2NSRe.;\A%4Z493bgi
%L'\(IWXn!0.;W^(M9._&\%8_1=s()SY/Cb^g$N3S=&U7%At77K:uqCOhM$SsTm3l1iMOV/Tic%/?:a-+CpeaoPBa('hbDL(_T.G0
%L7]cFB3L>C3YL:KSt]HPh+UFDWB,*aYNJ_N`7:o$!`QF*\()WbC&I@a(cR</@@S5OOSi\38O*4S*%/<`?'X$pkD)X-3)%!fD@4+r
%caN3V$]/uiY20g#Q&t3EUY]`%c@(PQb;AT,EDt41860JJRYQT+3U*D`G>BWN-;>DGFooSrri]5c,`4kOSi=(%`$2@oJBc=QL/(Rd
%Wa(88'#l)(I;`59b#aB6CaKMlc<]U"Lc91.<(XL.)`3$snp'BJBQU^h&,IBhe4J2D'Z"*@($Zl]A+1e+/S_\/s.2.6jU2)+%7uhZ
%a\dpnSLE$F7PA:RcL=d`7CUQrJ&/VE;e7W,^.t6T,c$opp2R4)W0I*WEJ+IXn0A<sSQM'b_g)u,\mV`ig/L$lY>5rCk%*quH&3bO
%0K;#9I;_o5CUMUI/l^+R];AFj-BE)A_D)dcf?KO->rX0^@FBj>'#B_<a%6mjWEbs4F8.sJ)lM)9S3AhjWCkM0nA=GCO)&%?<)Q+f
%_e6PqptX">hJRC/f%]j5r5dk\Bjma*ioIKK9UDDG_c6,E1LnKjK7;6#US4M+POLlgE>hU'`3Y::0Y0+elY26e"Plt%1[M2;2Oh54
%76YUISA"o[IQ)P,VS5O>p%^L`"IuUKI(=>_JSd.3`A6SZ\6?mHT)L/k13)W#lRnj/9fs4ZT0)VJ]k]-f4#P7X58YfZ))F.lj3LZ'
%:1*?A9bhS;E'Z6ZW)G]5(9N!G/2u02bo?;)9\Kuc$O97HG:L7h<[L*HL&h47eG\%MqhDZ'HDb*)R7]AXRtrW]B8k&O-aOU<RGB]f
%RCAfVXk[T1#amYs-$ZUrW4*8#]VI641k4gr*u@l)VF'V0(s)C7S^VSh-$=Y60=HR4hK%.]C>iFk"K!W6f99Zh9e3a3,=qQM)lBmT
%<\N^XOJpFCVZ!u`qDQPaASgM*IAM<jWQ5&0k9"V<00LZC^ZCpO>qB"3!^_0<Du<P3hiM#REclCm^4iC>*Pj0b/*jr7+njEbQ_Kh:
%Alas#Q$S1sX:%3G&*JfAR2\8)[p:DR>^TY:YH8LBQ"&@CRZ3O%n3Iig;Vc([kIDWT!B=f#GKRloZW&R)?b)r)-C0M\l1^g"(n"Ip
%dnaZS-f\aoAA3LK18R4oD`d_QphpJ:8".L!Q-I7EdKB[07Z,;Mfe,,9"2S0?QKt@ZW#-!Gc-QoNPlQEgb+fj"?heRg<ZC^0Vp[a>
%K'pHV6kHlW@j)=0M"%hVkfOgPC&<(naEi#CR3%PZ2RN"(n:Ta_/i7,K#Q&'r'bJ@+8]L*C)8-*g403k,dAUYhhRCXCBBAtjWH?l$
%l.1@fA(LW2(H],BrhFcoDZF_$=D!ZckEJ3/r;"5-fee-'71L:UB'@&AQ3!N0@Q#50QApA&%2XJH+8jJAr#k+M.A+=*T+4d`Sau$0
%:L@@fG-0*l%W)$.l\%lk`^\IM4ljp!+ueW-.;-@/B=<b`1T-a'jij(CTRG=Qi<L$aZI5BdgI/Ij>,LV>n3[32gTXR>Sau$gnnBoA
%dj^naq=Fjd1jV&VI5\sXE#=qp^^N@.3O\)qT2(epb*4R&Pc^0!VbB*^aqnI.A*eTcAoA&J(M0prb%=R1S$L_*qC#23[Fg,UNoRp<
%`!bJ0I1*rAkf%Mh%#gE0?^`o8.;qt,F39t*b*tQU5B`DA,?M<Q15:eQ()6J+</d&-V[WF-%,+DnFNU7T#(9>QD6mg_>hSWV(Lq]]
%qS>GbN-WX]8rs]^12q<d#h)2PPZqL`>C.g.::YMiXY63)Tbt""%+rY4aLur'SHOLVq5AAHgleu-PYGMJ:&?B/:>'a3VD"O#iM,Mg
%,qPM'VCA]/F`=.hpsQf7]`XYmifk6d=ClXX]^ggf%M/PoSrQ)(!(Jun%]:mKHoc%)kdXC@Fipj?bHB<pJ18**g%E;dL0Q52fJRq6
%aO_Tg*00S[]..\Hf=Fm5ST<u<EG7MJ(79.,PY5@GC8`c_RI"Bp&%#6+I7Ls!Au\:tr-9jmS6cFoq/a]N0@$3?c"qfX3tT(d<_akY
%."s_TG,0N^P'm*VZkkdRp:!#VhQ>:&WtD+-;%`ZFUjnc]G0&YNd32$57;V-Y0h'S:Lb)EH!7er_iWDgA+B@H#mNMdL.Y?K26e^s[
%MX%"?eP!HO9'YV\X4r>C\_SkoB\NatM_BNISLESK(F*(_C8E^nG@6#']1Hp&I="@qq=K/mcL*ppq8[XjrdQ4tNrJ7]b._c1Ug:U_
%%l8F?A<g<Hi'6Z/XrT@!37\$FYC,*RHJTHKdJ68:;_-JSq*H%AjSo,leUYSk^W+P)28kA7&,>bl-'P%//t2^QRc]LAEaEVCqti`r
%;r?K)Gu/GHT,!fs`K>kRTel[Vj?jH(26H:RV]Jj2K8qSA%K3;di^p\F#Yh>bgdD-e:oTdh_5!VuLV?#0]B/`jJgLMkna9IM']UEL
%B_h,oqoMZ3_3[k/SW"gUIH-!"EMfsZQCKO7hoR!cKX9<F[2ZL[@"6d#U'n().Ua_mi>a2BeGmLufcC%Vn,I\s\*GHO%f_psqORa`
%hPsV6[tfs4Xo[,7::X1A!qODKc=m<o-\PtW!bp_BkIc=:!Qdk4dQa!pq`#0idW9_"4"aTpNY;^!h/tK';uWk>+ZjAE6*o2p+1AYI
%Q(uaQqTr^J#>L-i6/7T010Qt>k@A6<+P\;Q*OTq":]g=T$5O;8]pQDXnW>)k\QEbkrq0!r<9_mf469M<g(CNQSg_'VRMkLG!H"fW
%RTZfq=dJC8AnJYXDO&tER&S\]2Jl60L!r@[=hiZT>V!0VHI#^Z[*e=/=/]0L$*]Q<&B[VCQ)lf'dSt$^Rh;a4ND-M(DIdntX`h6X
%q7gt=[(2/MF':O,86V9^V]*7X*YA^%.5]caNC't9Ja",ur^d)Y$EKSY3gf`&:-3OHCiiF-pT4G8$ghus!'RZ=mRZgrSDi)WPZu0H
%"Bo8NYMr*0L2;"dVm(gdK07bnh/gEVR'82;AQGm>)rIk^/H?4rIfl('&n"MqG3#Ghc*A[Ff5dtNr6A>j"XEnNB]>o_`/Ir?eCEp>
%7O%io=ZNfirjSG$.ok;WK1`Q"rZ,je9\OuL2@K2Q:>r.Afl!<p.WNuS^8Nq"$It^<BrB\MU.G6*,BKdo@BiurKuKe.pFe)k#Y(c!
%i^\NA%;?G`bb(/YD#b0^<N$`2A6mNK;[%(!XP>p,mqlh?FaLA*KmL@oJWj;7*SitZl#sVj3\=90pB=C?4po-6J(l]lA9qB')h41I
%,e(&8WE'`\5JR[-.f=G]loV.=FA6\D"!sJmC8G7^ZscaWGRG.>YWc=<]1rAc40r'R.p#7!:<hLe!3;FII7?W6E8N6K?P_>qmq/=s
%W$7FB;2;ufJF3l)/N5WZ?%(a_ha>!l5HP^gfn$86<9RU>eB\K(h<86",''H/<6t.4!`n-uYVO"P[fd)N?!&f+la@UH6,\_Yb:jPc
%1MbaW,A*'%^!hoA8KI%CO^@bBBB(*BX9'8bT?Q`jG7$h]R-.>WB19N4=soTa"#uMmO+r.n$+/<#Q#VN&&Q9=4Kk`JR2oPr),@OJ5
%j)?Sb(5_"Y=,hilqI(T^Vn';?Xu@PrP,ZrfQcZ#$#uqZ`MIC6k+"aW>dp*Wb\T9CPUqSBLT6t$a\^J_Sj0G,c^M"BT'kHukH:`ea
%:iXaT2N_*_9cc_9V/K<G<=R&2.3c:r&5;_?*diY$(up(e;9&PfN&)N@!,6Gui'q1#]CKmN$=`#!XD.72LVHf+<K??umVhY_j'@S@
%Vp4RJj7'9QDNF/Y:N+"^04QYYB+I#MfVuf/?R6sb2euWM^.Y)X3>;P8b_G<SlnZn"o&W6kM,NKoG:)2MU"arOQs\dmQoQo)rn'Pl
%?o,NQ5tI_VUoo_gA)5>nT;gPgef(CD.rU`ZNTO)]pqikkMMmkA\_UF3ouhZiOWDc&/Y@?[<f=_J:^_IseltL=$D#nDk%\[C+E8IQ
%:9lIBC,2RuW$:?OW(t<Dj)iAR&*rV!WS5$I"$<nO#9#LId)T>CC:?)[W67I1=i@O%\$G\t;$")NiOt,.HCNp<_`CdlP_Xs959&tR
%fK(X8)GlGKmt':k/$5.BICqYumGHB/T2@;@':Kt0<Y%>3Vo?ZS*j&ifTH9q)1(i.pE5\.KSH[BfW>C=F#O5<ff<nOd8@O]i\QFc2
%OdYssh/)4`q#KJ/W/me!h_Vkd\$l<cPW?(qJI3_`D)MkSeR$/+V\?",jbgKi#'JAJhLYIrL'fs+)?9-ONeQ%MV-PS[UCHS5SXKXK
%p-ATb`s"k()uW.AQA]%V4pbD7EL7Ndlki``_Pe27cU4B"j$rY?,(k;O2pu#&W<;p(=CnmZRQt7Oa'gNj3+]X\`a*:,V(t[i8r`6$
%OM7r!m7KIoq5iZfj=T"#ZjftGHfXqZ`M,4h!Q/;E^Lf#ODPX3rVp.N$fc#Un8Fh;""YB[mW'](k]A5G@hRV=AT8`'\nGq[;3k'U@
%coc%8X?8f;B]TO]a&ek*He6Ed'>LC/C%JQ++*r0'.b9\/ZpsC?#eY2i8!l`Zi>tS;lshe]Kad6mP_^ETn7-XkmWU>nm`<\G;=^[_
%":l4+/@WR=CUJnES>6>#m>A=/6ht->ZdCrXl:pK>fhSRV7b%kF3c&.(%Hn9IDd]A&G3'8G'R,OO[7jV([gh(NJ#cjTQ4EG5%DgtJ
%Z+KXd.1&B<SsE2j=6mt0EB9Tt@om9Z;:!'0!_etR%9V_*7\tH$7t%n\a1^MGICRhJrOWPd\#UmSqT#-iQZ7]-JB^E]SJ1bG7_[3,
%(\UUI>,Z5u4_FHW(=('@?qVuIeT.h5YGGME]e8@$\lN0-3<m+sP^ouUkL]H81^h'",DPp';D/KQ+#RdJV-(J%:Rs;P@\_3^^1u_8
%ZVl,P>kqmb1`f>Ak]t#g*%\u(09lS.YOd8_\@UW@b*Q?"$9Ll:%bJqTLUR#7,!^KP9[n*<@@V;G#E$cD=28`Nrt1:kiQt-,rpL[P
%K5A\D=_P`R\fsQ)5]NVim"2WKDQe].gd.GV!ZlP4)=5jY4GA-eJDTcm6c2"KN$3#NDj>#mpYr?.TeqM]!2F5r\5PJf(FmsDEc(l2
%D)\J[U#$:P+VJ(MQ(bp8eJIp!BlO9k9Y/$h2Bq7+ph=C?!5*"_Hgb/-8t6+s6cj5X:bMje9<_sG4,3%Gh.Z,;8E[,Vkj.k_W10^N
%n?,1Eq_5DAk`&Iep5VFiaT*2k5_I17*6u>;_L!W3bWj/0HDX\%_\6=SB/Zd?c6F5t[RHsZ6#.lIB]1%SV8`PWV#7e6en6d(_Dj:J
%]>`gA-N;ibA590ZZr,/6Od!X`E#Ce&&RGsKe9N$^>!>!6JIh&Ql@@>W]7CV1bF&]+6OK5rJ]I`/Zi\#g&2m&N>Fjb./pO._-QdFe
%)1Pf'#?qI;>,H9V/Z@+?FQt5uT.>8KjqTsU`Fe4RPW@Je(42$LQG7#q+Pf8J%mEt8s!41]-RRBhTaccX/LmaN1LhiZ>XmlrBEMs@
%,\R(%ZVc?"r(j)5&j$o7BLhgDA;M>EN]%oD<AH11]c?JBNj9^7!.X19;%.b`TWt9s^1l(9OZK^t3b%NMEAgKf:7f<V;Uc6.XtHO@
%Cm<k.<t6aCfeX?!DY9nlXl_sG&uTEd)WXaV7k%,hkCK"`jFp"Zm0<;OT2d<q\RMmb:hXb_I[?PA6S[CYKW,CQp,4upj7G<_)N2Xd
%i::9u\CgNA%?3KKe]J4Xl:'Vd$'gS!q&pPYBbHD5O@dkp$Km'YOscM(qf9&$"0I@;VlkgQ#KMTQo]a(=#0&t^Q9'.@M4?r[M:GRJ
%P[]5\NRa!<_C6k(<A`ff;%@*'NN[):QI)-ZZMm,3!u8B#C1lKiAel4q.qZh4rS[kFScM=3*:X?9GJpEp'rpY1[HSt&DG,3>@^B9+
%p*ni[QG5M;-DR_5[aOGabU$E"X^jQ@;%X:XjpeQUH<3#qGq0gKI.)jD]NBA>&_r]CM'g/=>g4A@2idg;2pd*omsZE81G2./<^2u]
%=h<DsAs0.\Mij%K900,g$h]X(@uQ;@`n(q1_AVR<lG@34BP9pk%`1YJ`p,Wg6Vm&;NhP!Ub>COY>sOG8D>'\L#sBUtUrLC+SoHJ'
%Z[*BC.-MZ>I/tsGOe"EaEfB@V236H3lTta/7903*I4eU%NIOD=3\1$"1OBZia:B.q=8^@B>1Erbb""#*N\ANoM;6!\q,_3^=0ZOL
%c,/_\b:i#f^g)DP)'!Xdp'_dK8G"M_Sm=DbA>9[riOXWgpP"ahm:%J!H6F=u8JdoSm%&Y$WAcJh;=fB-AG&8Cr%M4h?BE^HTHQ^&
%CihKa;N\8EqFLl!il"2p^>GK(r2Oaufcm=u.hhO95?Xs6[6;"2]!2jWGu3<i<-mfCo6fl?f@d!]:EM2)50^dH+)K3*/2pqcNYd`@
%G@%E/R@AK3=t*udpUp5Rf=\^'bO8e#HfI4qf_kX*S)n7[kc_0mDh@k`j4lMN<rQb2B[4,s]_FYeG^4#k['e\8D*<Hr/2(ntBrYLC
%g+,ZHheau!3T])Ib0t"BHoClkW:*r[V9eWs5JMYs_>j)#ScAM&`VD8RQ`Du%>IfaLp@7K*mquc$n(dfMo!A2^,CChfBY6AC386S\
%4S1kNqtbMSD`.FNr3+-;/UUc/3a)Kk][4gPB(L*<46n[U8r)mR_UnVp0[K<Fh`glee`H(oKu929p?Jp_`U(I_NsGKT\bU#dl1r5X
%4:s-U[JKjcHNS_Cn127Ng:4IE+8id<gRZ)`k='bJPWJ<%nE8#3ENSH=Roqmtp(s'9p[&3l.rXU"bV$(_I)!C!mQ>sliRQcE`F?)k
%Jj37If+'a#q9u52Uu40^pO4Ym^:u/"<:<&$38^8)]9D")IIIUFGdP-YlI^j;G`*ZX/a)E<LUGg5D\eu?[D/>7I/ce(d*=M,)s6M/
%JuPY!k$PM[!9X37AcJNBPSPaL:C=>Jk*r8)o5j#YWkVhL(d;lp?XDPj])-Ja/p+?^<ds)0GP@N?gA!kDoV(o"_)f+'NTPXi^CMGM
%o,cf.D>EIFo\S+1<R4]@*dR?DTH?dqLAC6)S,AJedY%3SZX90r)%Zc:SS"QJn/:9EY7689R=2NX,X3l/>^O`o=6J.`n8-ZgCBH![
%P;2t$g"Ms]It%#h-MmLZBsI=%m<@8Y]jd@ICW0;GJR0k1oFel,9/("MmU36(6Z)7^Q2Eh>4'ukgGJ#TccXLcFs)U)JpuM+O[6ij2
%]bU"orO[%GrhoM$Xjr^(r8DPTfCH+`$V0]S($G2F4sT]X=8K52DpEf6EB`Kmf(2*jm]TZ?H;>:eC\Nn@<t?CBJAZ"aI"/'DLcu[B
%ri3ZWD/DIc]q0^QHHk)>\E5#d,g\a"^70QMU%!t+HKGBbji+q,?b*jOm7olb4iiUk6>a`?jrH>0/tAT:<NHqDp8)m2aSN164E%>$
%]ke?&/H&[ScNB.hSss#"K\q.NWuJV>buL7LjR`;ZeKI$u1iZL.g3f%;Iq98K/Bsb=r`GdQI%AM"97($I8,'_NnOgAIicTF]o(pR_
%dmpIZhTj6slt1E(U/s;ZT,Y^bG1T>WW69.kC(C<S]8p!RNn7J6@e'ClcMq@%m+mHaQdlUPPQ1;bD1:mq*4.<V8br$/HmZ>sVDJ\)
%k#n'Yg&-4QBYDnQf'gRjrt#[dRUoSSS2^E-e)"D\Zs?sBcb!Pcfk2se?o>=t1k;WO\A"8Qr=s7"lN?[KXSMG)*.9^EjN$NFQ(RGA
%D5CG9d)bSpJ%>l+]UmXeS?C*ohHK4Uk5DKoS\sKC0^RPH'lS9e=BOa]r8GP[*iuhjbUdc$_l&iYUVdmSJ(q<]Q]I_e6@SqZJ)D;r
%be:buCj#K!OPAIc=q,p]kEh":7</Dn'6S!$16ts9AkjlB9/"MW(p!\Bo=,?%$cnVNlSa`TcJ$Lk?QUN7e+6WdkaAl/":HdLp2pXi
%bV!e?%Y9*Gn%(#]Vtr9[qr?5,r&)^s=C-<aRY<@Y4odh"I'@(/l0RSV4*s`p=6b`,%9dMic/QSBhQloBII_[Jq:9<:h`3ff0b;"5
%ce/isgfm.o?8Z)kDD'sFc\tpYbbmr+@,\XV2m`?c[loX=^h9CEe;V/F+CABMOn>]`]4nsr^HUc<l3jZF[_fB4QKHeIG<WcOm=.-%
%__+U3)1ToKBCl7,Yh.WC,5r""Y^;CA^&2Mh`$0??j_WD71r)+T$%.IMAXII?rq=MoHe>btZULL[3I7s+(>\jfqGkkNX$3;6e"B.r
%5_(tXYY"e-JW.\HdGd6IKO$pDrle9dp)s`an(*$f]u4OTm"G3D%mkY4P7o'lWc!bX-+K[VBf>qS(BYGX4;aN"UUPpn9g@kkq5`>d
%12W[,30-2IV%)e(WSr`uAK\_N%nP(Gpj1*@dKregGoAu.S[Sg^[HGVG*'P+5ofu,_=m2I;H1u>[or"4bHbN+CUXOu$*Gns2eio"J
%Qhhp^EW_?GU0cifAg:!LoEW>=B\nZBHT9Caed7HqZ_FfmglR'8BCoZOaP3H8P-@\bjc1.EO1+7"h?!h5QB2(Bd]F0HcL$%)?!grf
%=Pa-Ai6[A)O"aW?l$9YHro;8dL%RNgZRFB9Zp8=*oCkMBae(,6]_h\A[IS`qH*)>^lN,2;R#^.6\'I!Wik!4t7l#;8>3iVABW:g&
%q+&b6-f!R'oQMSQ]'M03mdc-g1Z@V=BBMqep$5s8EKF5pbIO0iIVX6'Hh.6&gZih(m/G3[R2-0KNU$Mkr/^M?mpD^bp#mnCWZP!f
%MK=,?<kLG.5%[ue.gJT?o&I-EOig*"e>l=]iC:2\^OrYUFViX\^j\]S3398A%U!Z7S)BJ4_r_n6hX(02_hFcc"hMADAK9_VJ`T3*
%e<n6K!m=$3K:5X"&ND\M].E%3-]nQG<3si9Z4HEmT8;4nl.$,T\.Pa8WG\9c62%am\6f0*J%ai)KJ,GK=F%CRp$p2:qqp,'.O3R7
%#G<PaWY"hfo3Q)$)aF9fKK1kO&:(Pb\b\u!6ZmH'\+T_XO?FR^VU9''kLgi6dV#0G=J(3^.ol'%/(k-rRE.MS?YXj:s5N*g):$pI
%-$4VNiMX6[MpoEN_Jj\GH.tLNjuG?DdR.G$064\Tj]NFLoZJfR4Q!H1hqnaZSDANs#(2t$,FekeQ]o%^a+)uLJ/.PA.h_WC"b<r#
%"]eCTb^uOoIH]mIZ@I,9pQZEXl(.#KRc]T`;QX]l<k[e(UqN&dV7"(EH5;#/qmXUif@T:.4J(.&YSJp@c/!a;2=QNnY?'Ls08&ol
%>^Itom<lX?HhV^X".J<9%j-;TK'(&T_a!B*C`AkAg$4LH<k6oTBluOb^4+V)L<jPU>[MA,O5E#,Da$@_0.\$f(Or(Y\8!"<WuJ=c
%[n^"2XuMse_jl)2]$n%t?bbd@`Rj_X%suU*CaI-Qg=k>&o<24Kf,m5GF+AC]"9W>?<!RENZbF0Rkftp"C+h4\I'52QHoLq1iHTOT
%!n&e#8`UrQeU=T\Qh1#Sc,W&%de`4jcIt)BW_[ZeCrq^BjlIPF80jhPW0;$fI`gWi349G^`aCAV%Tb0_MF[)iq6)m"X0l<84]<]s
%#/oYPG6`f33lX'+26X(1A\efCTLH*akjrsZp\M4!ik9a9qJ@ZgWeGMO"D@]8F8i_4?[[3dL!tG0cEf&`%+s>.nYs,srpcX4W-Z#Q
%A>PaN0k&Md3p@jX)?/dQpVF>HrU9Kq_X`cU/H8oL5,1R!Z)0_C_;;m&J;eFLA^JiY_36O;DU!q2pK'-?7>,S#T`X>*HulmR/^Lu.
%^LXO5f=l/Dm"<<`LqMp?d9:P@pcIZ_K^XF+ILK=CORLqJQ^=;YIurQd<PGWG+$O7WmiHBhj`^?0dI;C#s2?pHjhr]-isH2&R&<aN
%)dbNGUB\"k?%?!0m1*<KYkR)4meZq=#G:UCJ?kGTE,RB/C?EnPWB:b/+SFaXrWuCjpt+Na^"q]L?ZeW8m^1PW++&c_H&)9>]"dfa
%q89mh>CUr4[e]-IfA9ci6%X:SZL_@OH[*T`q"eGkk0P<=r46fq*Zcq5*klt']&$\04ob?>j$CJ'olFd)1Q1-/?iM1ulbd64D/jQr
%VorQFqkFhq].LZY>-+gM285Hn-=&F:l`P_a;/8CFM#Dd;B%'7CG?Z1ohAikJoA'68@eK-RLZ^f',-d3kSZe\as4W$p?N([<)eCKD
%$Q/l!D]DUOAACB>iLmpY]Vk)1?7t??Rr5#Eb=6rqHRF<QqkLE"q<OU[o^-JVlH_@,K*[>-#&/"V;*5<F*'Q)u>755MQPW^uj(c-+
%D/!Um3?NF+6SIX#Dl'r=_sk^1[4gY8K-$835FW2X5Ss4p3S-7IHAkD\-5ipSdBA$ibD0Xlhh[E;Z_sBXLe>OJgtH)[%sLR:gs7(V
%CS?i%Xs*+ZH$=Zop[)XBFno_6jh7SS7P9(/OrN1&p\<qBLV8\aqGP$J>7U/a]72CcHn6?k#H,gpEb,aU%+orgBto1a[Z?Whb5,K>
%/5%XrDecW)r"h"`hYd5Upf['O%:!tVKeE@K5U/K8/:TY7lbk-"k.U'@ZTG#Zjb:0.:L]bSr+jXUCV@G3Tc8DtJ*"bi?)`B;m+R&H
%eL/E!mlqMtb>'$%0=O"<Qeu#Lr7o-bg<uaCpYQ'AIf?`QgNr#U'@"/(5b+Bm+U)W.S,oMMg]nj;mn*LtY6joqEEJ,>`JrHX+#!&c
%hg)oj]_fC55AW0_"6_WG3I:<'K0u9^<tCqXd4nPm%;H;8\o1aE>/0grB>q+1PN2S!BD9TBGD%#aDMoUN[.M"hlSBKVO(a(CNSNMl
%^:a(Y%>iAHA0^@nOo9Oe;;a>K5D$35ib*/P>d;*`It"]9o^)3fr(nm1#_"6dM':;\c$f,R]m&%JmelBpa>1s?T:oSueF2_ShEW7W
%fD9*-Xm"?pe+;6_"7Yt;kO6,fLOJs1SSR9rB?p;]@/k@ghAe>E<#J16De<jJXa:TH,W`5:e1Z/ih>tuPH_V%jH*<eqXQSp<J@'bB
%CW4Uo2o#:]oU"i*f0DdN@qp>[H+?Q+8#:7M5(3+c<=D/9L;'chrT/B:Bh1M=_oRN2\:^kmB4:dYWMs<cq^UI8Ht9<XX/A1.m/.]s
%`C0O<g4?O$0Ws<VPTKiJ="TXkVK!E)4[s=eZ.[FKD>bq5"mVnYQe`s+kVEb#MLTp/^s]dB>[Ik^?M8+V^L$>EOu^4#=F9N;XS\Vr
%U`p8p$Jkd_?H^cOj(F)p)N,]hB"&i,!Y2uk&*ruV%@kJjpYaNdfg26bcfhQ^>[FG55DguT]sI*tIfT!is&si_(B,EW1]+9H-&`Ze
%Z;-)<l--b0T@&79qkS7V@7bQHeSBTJqSWJjkuF)K:If32i'j]+Jb8d2R9/u%<mCBHem`p`5n0LDGng;NZX5Rf08W%\0:'4QB."K8
%S0#Wp"L6i;mg:^6$#CH:LRiIlQOu.tkF][^kSQ*Q%XL-aRGfbHj1FXCb==ha]:HX`BJT;&1+#\fQ1+ukkbA;Rb0ld7mbBSac-bQt
%f4Tn/f8?-6p2e&tp+KA[]cJ@"q,B#N3%(PcpYl([%tXb.p#YK/f@"#>K)N*ioZmH-J,O]X0-,9)*JSmoHJu]oo&@.QTTT*>AdrPD
%<tUi!QP0qJLSq\RWr'&Z,o8`s[iTto/-#I2%FflOj`D&X<Cm2F?i7V9:*&/6]6@>Kk)Wd9YGJeTh\GV5YK(Ed-9_@9^9h2\U=?hJ
%ZRNkbKVu5rk1G,:qfLNk.o47mY``q*rbe^?KW=n5^$kQT7s(G(.deljKu_pueTl6)`MYA]lEE57Q,s!G?/C#pkcFgZeiC_YNe_.-
%c.D.P*86AHL)]b5(%96&PPL9DqsS0<on0$*k&Xg,I^a&;'k;M.?1WLF^%QdXE;95mYdenJkc[<e+*2etrOiJbiQ:Z:9`Vp$Z-1CK
%R/ZUfACda-ar*ij:LfDa_UlrJV7lfeb*1i5gum9>\R9:WkBg#kB^!r\4m>)qWso]lD[gfiQ""Xsoh17U*dpLO=C#]gpD:o.o%1jt
%a2Un3EM'?2]YD/r2C`M"597KDhD>1W5lVq_qlR%dL"U:Fs*a=rl]9bXNO>MTaBa)_kY]=&DnMPcK>#lrr=3q#2sV!*Wpb@=S,XHJ
%XZ.Eiq%sE;^<[h]p@>?+hQPObk>/pGScS.mamB#"T&h]HD\`j!:7gU_<Bf<"Odhqub^Y^?[I`ObhlRqQQfdlYe^]^DC4Ka+qtogX
%bj1MopLa<G>U+uT/e>OkGshgQ<-R_;Dp=9oACm`oTJH&C7%S;X9_f<aqh6S8gF.4AB,9&*5CUo>lHep8YQ(!cB&THY49+TkTb/kQ
%9tpXUEF\=rNjnNBr;f/^?5ME0#Yt07.g$g1W;f#40Dljbo6Ujh^Eq$+El7k/[5YE8SA*Z:3(nV#[GnNZ0\-%*Vt\(&CL?Oa7j$-A
%L:+]_T76K\DXY*f``<#QB2SY6GA^]XMR[^SCinj,0@!t]UB^JYXYq)iU:ZXUX:R-&W6F3@q-8-kPO;aZUO5>)`;pcr@]pO?]T[O]
%?eWC1(k9P3l_E3Xr:Zg50.!&)/)uC&Hr1LT@q8h\gcYB'O-tVenH:A.j(5=:3oq:BRdEDES@mb#B,37.!uSAa5)a`ilZD'"p[Nr*
%HE$G`5Icm3WHo14HI(!%k=N"_IO?ihW(.QpHdXPHE3XUZ/UTj;Se7s<fC^ednr"g/=FIr_DMN`@Yo.n>OYGMf,iV'7gPB.OEu`;V
%SIi@/s4YK,SJ\UPqEH3b?C,$^`[<VE]D.$I"eJ/-`^_uXWCffih6b[AY\"LnRmul,RXl8c6e;D!K)]E"0I1`F^6`u<e^)s`P;.^*
%b5-j-_N&9]0o1Ph=jNh&HE:u*fJ)08@uE$!1nn$?a+gIVF[DF`*2"Rp`3p53E1<1?Y\>qq6?U7#;cd243@7QO[5e^J_OrfFJ"ko)
%$.R.(D)L,AZ\IpA<theKD4Y&Z[/!!1_gOH_=M>2f9^3NUd(uukc%U:nckHPk7VJd)3&oPG$o;\OgsO'\7l/L+XjRat$mT/!!Q'q\
%6)./D6)/%H!VRftUC#h/VD&C:(Ro5JiS63HB8bA4#f_mT51`h0(9PUHe9#kMfrhG=nh++#B<1F/'dR+QFW$$:m(5!(@\U)c^sl(@
%p'a#Pe70pu69As=Y"_\Ll('T)"e(1>2T:oc-K%n.@"\rl#sZKh)2nV8CVlCb:;Nf!7u]g-6(-#!e%rko2:GZ3G74U6OH8rEdq:3s
%PJXZjS'b?iOps-/-5u`sU6>eFnqNOG6@nAT$>?N\TW'ife-'D6oN<(97MrsWBm:)J%kd5X0?%m@3nRJ9ZXGO0TWsd_#KK)Q*PTCh
%V^DC\e0L.G=P`6LSmg#?1!h30M`!L,T&Zs<,<uh^!XE@FXk=D5!>fa#:"@Y`ABb)ei<hQ,_5Ptq!gXSKQ%a^bN^9>Y$L31Bb+XAT
%am&p\7TY/eCsret[D.:^%er?8TGbg21'8n[kS^>@i#*P(=2(9OOYrWBriR9:%::bbSP3j/'Ekik22-Xt@T&u+T#QAYkfOY""e(W2
%BKE<5M@geC$P>\*>-fZ5earrlIRS&Q4OI7U:pf3YMFdefg>(bgZ(?QkO5\c2'c)1XG7O=EIjAcd`gRfIL97]K]5eYq>Ba%Zd*U;*
%]?scsF28gT]:.ubrUj`O5r@f%\;l.W>1NWKXqH7k1mU]B%Ri3TT*78*C96^a(sFo=3('!@lR"W//3;gn(6(0roU.J*@4B8A4N"_V
%HfQnk!t*Yinh"QrosX["#QVuXlFVW4k\)XO7LTj+rb`:L3O!<W@jlR3PgBM1'6jU8U<*\eJ`?IoPH<Hh";mMlC=;:de7T=r's7U2
%('mN_/1%Nf-D=#'hjB"J[&m(M6P=;Md18qY.m_,>T[hC_6?eBW7'XTl&.T<",a#\id*j$4S+Ia*IVd93mMH4(qQAP6+;!&?H5%3i
%Tm/Z+HA^m=\t_T!BZ_Cl[cZSHk#]p0<YJYO6YnVc.(\LXF]@*0g1iu3`It[i"`,q^<7oT1l;J_7C,M;<^NcLJ]9Zc\)\Fa3neR"P
%m\k:=[7("sj_?dmqlZb=$1rG:-IK&;.C/),:e(lr<hjh5I>$*>7Y."g[)V=A8kh&tQ,f=]@?5iQ1*Zj"=FaH2@e$<lI91-0L)h4K
%.n.\/HPDH^1a*-AOM2SEJu'6]$"*48BMp6T;uko#7_H1XS.&a:YH83I<'g>a3dPp7CsA!GD[a<&Nh.k&k]8S`_MC5JY(FSK'HnlM
%"QD(Xi-6]J'jJ#B<BFaqq+Bk5^<,TfAt!FLJI/Fcql"FR7pggU\u*:/X"?9d(emKBUT4q>C+t$hqG;eVVrpm[``LAd)fqk^H!mCn
%ClCrY8g+QV.OR,(A&Bu5!i"T\e^IW)@36m`^?\1QJ.`ub[Rn`2i,U(&5`Kn2;aoX32i!=P8K\Zeb\s`+/XO[s1qm8j`Bdj)A9D*c
%Fi1KXZ60>l&\YVGL33bq'gCVHXhZ?40_@_n`O6/(`AZ5?$sW?<5S+<@@/"&D#2C0u]45_hGl\?Zj4X(:1^7Z'NPWfLJ_S`$c5Mur
%iW8C2@[F;$XquoB"Pf1G"+A!/#Zqs`@3N^.K.PZ11u-?%VId(Lm\6N-9f*c5K4hfFG>BILUN_@Eg`SkI"1S[(P:(2qgK@kaGcX/b
%4.u)I82-PfO>b.q.=mVTH5LGXiUCtFk$q[_-agdHB>"qMO^e\$3g:UL-a6$D!eq&6O1lZI%F7I#bts%sbl^BEgH]OtCl\b-NEa.i
%__$!>JH,f)k=ngKCt#4m?uDZPYo%XH+$oIK2>[Yu!$ku7Li$*G/?kO1POeMc;FYp."5"f"P0\H<%@RJOqWutPK1tLkF/3ddL9u`b
%#9'559\H"-g-;;^&7%J!#XMH!i,l6Wbo-d!$gM30L\lrYQ9k.oC(r<L!#1.n)%AMfg#N,E%L0MfXFb*pIY*F;YAit5,^0+-_aD>a
%S.CimfV7`kU7_s?)<2:B#o4p5!Eb2p?\ah=T4-:S,+V7I+PSdsgj!QAd'<hnEgpbm/-NI_4<+P[RXeH#n:Y`r>lk,l>Y#u&h[N9d
%.Z#=%$sO'n'p;:A:)=t2m#q+s6(5SFm=V"L]8g&=+cD-1fmn8NpDP;'CXR=);0`;`5%G\_+WMWNdrar/r:>cC"R*pHI?/MH_$7t2
%?EfLaUhA\OBNa8=io0BH!sbO"$'RBDmkZ6i2`"-_VM*F<L]cA-IOqLL:.bD+(#][:!Q)\aTMRq@g+!OgZCVYiA'nhWD3DsLKOY/d
%8cZ^3XHtk1^_8u#69/lBW?[>X"iWnU[]*pFA=;Zn-NJ->WZ[HGm3nq6+EA^9!UC(F:_XNkne&pN&8oiNJTtID4#fD9&al6-R`t.5
%,K<c)gC^n?k"[sonmg=",-a^'!iO\d*Dq\Lj#eU%*c2e%)9bAeFejDLPnpVs+;PX$0+S<-B62Ziku',a2s:od^4Au_<YcquiHh1L
%K,s&R"_3mC"dLm0@t9!^+VCF8BiL`_e&'Lm6(A_a1^%jXY+c,I1(Pjb+sPD.ML8dqmK"mloFuMf2E"on[sAgngf+mf#hDrf#b-Ai
%"P=.[83;]G`0EkD(D=Y,To%-c9>!tJV(@ZPD&o'YEM0WTbTPOL+ngI*4Mf18D&*/&AN9^eoH^,+>!:%6qF7-bH<dQ&LN+i;=WLOH
%3BQ\+hmA3s@6YH$jH9N*B'J9m7:FpZfi)]3`_9uqX4u8V!0mlS9+NAp#0h,.89k2;#VG*JZ!Bd"E%V_>b@%OgfIhBU9Vi+?Fo)ZV
%_'#%06:#-qG`Md3_]/iKJO@kB5]%>U$8_oY<'m(0-tSkN2ca&_Ub]/[i\QBClN(O]&1aD3)hgA!`^qCO_bKA6B$'?=6UHu?ckj`o
%#TFKpPM.!?<BSoDeca5M1Jhh]09WHtZdo7rFHW?Ba,d1ZboS8mN36miCbYaF?=7@dYlqA5&US'g+MV=0@^%2US[uaU890@]",DRI
%!jX:RiLgX&AlD5(J0:XSZRZXt3?>(!d,qYG-8V:D/8,FM"=]S1:4f8I"r,JkTbhq^Yt+BNMn\<r7d2_MV,=$:)i?f@BP`MVEAa;^
%Xh^AK.]k-!.0r38)@q%Z>B1F.,"LjZj$RDs[b;#F8</B,Lo)*0Q$>:0bQ.0IR^*FSZ.TNf9nTDe4entCJI)Qg6#O`[%;!&#IT"A>
%RVne1qMO$YZH/MdZ%Z$G#M>FE8WUN^L*K%;5dj<4+>Yk3fCfnn%ut,"4tb,+,L@(FN@#b;:h]HSl(V?HqBn]U8C4V>!G@o>KSeCa
%7C#bin/*33.mkBAV$!_aV-EhjkZ/ITI-*KNTHiQcgrj0\@).M?c1FEq+lOJs*)hK%e>!J.F\Rp@'%@;U#Q_&#5*(4]<\K_J:V]B5
%)CmD:c2&SDe\s'&$\(Lp3uoe^M3@Lbk!80BQImBlZSLE'e_!=F#MNu`[8s#![ZM`V$5&`/*cF+'O3HG^%(%1)"4>#^a.i`+2VGb&
%Zc''Ul7ZQ%MX2OpNX-!G4PC.nrrY:\(rRO$7`lcd3Y^j'JPX!I5-!7)>ImG8YU(:36D6Y7(#)&9Wn>=]#F.UgHPAXe'XB1T$fA9=
%(.jerLi5K-(m8<e'XguBF]0&I+"'"ED/h@K'j3qL#RhD>YT8+U\_1R`K;(T3W!0EY]Q%VoKAId.8di+d",nXEBW3,W8QVQsR\,g3
%dUXeg,uG,ui@SA"SmYoiNW@.i9O)9)=I;sTlk1:Sf$H+d/W7Yo\Kg`<-6_+/eBD8)IO9V)$[@1tVD`bX=a"9lQ1tn"#>@`kPi=;G
%S17]t8d1XA^ki=%eE"69iM(m>Gm5l-`KYU@K31g7oiBQP8ION;\hE]4EAnN`'P1m"*%JZgD%[q7<?t<sWTXKN1@^qo1GWhm2b&U(
%#K[Bh;aq\*P3BE@O0crf<X4L3=V/,8OD?YsW]#$a^h/>W4jhH-[[#(XSeEEa.?KS5+G8K/7)QiQFCo>eX2CAW#NNq7#f01^FcV.J
%-@5cTS_EV2U,[eDdhM*c$ELu\6Y$Ui00huW[Fr^l"'q#e(:8"U"]H%b9F5R1>8WA]/2hg3=:ldsd<0!OPqM=+NC$2O+\?N^=EC'f
%*-Q!*=`'gDinU4'R3J3#:"2I5S;5`dF45),Ba*"FiYm,GYr3Q/9iCOKDK:P]E+$skX9'th%UqM?6D2S2Wup&WGR/3X+??Tb$2VmE
%TNTc,%#pt'6:XrG'bK9fnCt%oYMsM_</`D<1SR8t&cbBS#&cn;6qo_<Lo*4N+*efRf$nZV8Y\^laoWZ-*KjWsT)aO3?NrO.R\>G,
%'4_-5eEi?u7nfO7#O+LL[?>bW?&UnpZ9*f2,Ds\`iW^XjWIYJLdj#]L+E9e25R.cT,K"%-6GlN;C&oC\_pLA204H3"#Rjk<ZB18j
%c@c[<UJrPF7S1dL\I#l\8=RY+'39TbdXq.g>\N18-QRq03pHF/eEjL`MPNHE+7bGU(k>s>9a9,lhHoh_Ze@bVF-C`64R\4<a(O!-
%m%h]$(!=j11B\F4RYHQl)MpKqH-aSqaC0-j>VI3a]U,uGRG;EEV5!Q4QVj%>.:31b4$$ZEZBGS!QIDcc@M5'h"h;E,9ot2Q!ssWK
%ei2^"n=H(WW)[RgQ:543-@cMd$/G.UnJIf?24p\NUk9NS*/m/$%XMV)@Ygn).=cG.8t8'QPRc]0=J3"YO`r"faG":MY"I=8[!+ac
%(/#[)[9?2`Tt*d]--?9Q'A1=9+Nfi!a2QUQ8S!aZ@B1(R-Y-:Q='H[4W"fC^r,G@2d-./H;hU19jMk:f/;#2Zo-M>M&?8)k('Ma)
%@2=SmB/*mXL3ZCe>)-e38FDWeAcXrsKIc7CPusak&qS0-<?Mn"nO4,Q&?hid>P6qtd.%lHBjj`_Qc2iACCZU)_J44,-pKCHodo)#
%R/94A2r$ebW,U8*[uA$b_AH0,LDBqJ\AY9(j;4C$UTgORJATWfQBGra/]KT`/dt^0.<NBRbSO=hqT;qhU@#b$%FhD?MWrWq;2d,-
%;m[XP49G4>"7ld\2DMRsgG(!W&$6UV\eO+Id/?SSOck>^;K>`<i6Ua`7tZ=pXXA9-)\2)O-qaIJ=f17VAm-u>CepKX7RJRid.Hsb
%>>[kIl0)pgV(5I;%Ys@!d"O4g'?Oe*c01+SN[Xu2FLnd[BPM`4qYQ\*9j!'nXUXgfY`K,i>QeUQnI_!5iqri>:L8LcPG_YgJOD(l
%C*JuhT1<;S(p2%2i)CkVmKUi.mX*Xm!6p7[3]a<Em5I-Tk*TcS9KE0a:ba:amRL:o!d;1QZhVt!K9.9M[QAaG8Ze)'*\3%')ArfN
%C+tD+Z1gaN>Stg6,!pL:MFDe/l_s!&Om]KPJT?nj_3B?m;0NaS^c#)'Bs]2C#APT6Qb7*g6NJA>j0:,X'_G<,OA;$<n5Rb/WK`-G
%#Q^^tSPtnB3?Qa=d'.8"knp/GClo`/YgAJC?j;k5_)2XK.M$#[/:njeY%V_&(@+T,jh>-f.YVHks7o0PR<b%mKN2[Z#KL)KI>k*T
%NZTM6MSmJj]]/F#@]qb?XQV000NS+:-5\*3M\D$aK;AkY6t)d;]JqH;0NKG7-Q"3HMrVj8`o7,2`FEn>Yp-J-_0@\;RUD)Q/<1f&
%/kZk:&XgW.A&W%oJoRNk35Hp$ZSZc#KGOSA<fE=k(aDY2j2[#*deGO@[5`W:==m6dq.M>h+!Y)Bj"DFXV=A'6Ch<P+UUE"q(i`au
%J,.0fI/`]A>FFETd9@K;l1hB2J*@6Ad*JOu\28Z).'?6_ff1Sn^O.;.NrN[#\\rp9M!!.\ET4Mc_)N$4inre7FD6>HU:N1t(i`iE
%D<"$-8MH2;gSOH#7!D3[)'cjg]%&bP?CG8l(bb-?@mkT66QRW#X&S`77XAeH(pRDQ0uf(DiWNc1HYJ'd,/-$c@*Fu:0IZ3ZIi'R$
%M\D$aq'FL/SCfLJSE!"eEIoq)^LFWY4p"E<LG<8RjS'K=$7q4$bK#1UEAL'0(rm/E"]P:8d9prn>s9<g'9!Y<^:um59ULQq',ALn
%`eY#_n?F1T35J_%@@Z9Hd:""X:4*o!%u_(K+3'*K_t`br`&PTpj2<p'X@P'@0JHO$J%0m5(l+.e0?+=<MAY@Vj2?mrr&@P`HtRnu
%\1ruXI,pZLNtFI>nX#:Xdfa1!O(nM/&S)kG:(3Q1?Ts@+jE(,V16!>&P"aAPq,fB]+"*LNVf.N=16!A'U5TbE'iUt9`eZ)X#J>Fh
%R>-b9=XLs?:2H>/mPrU*S7&Gn1+=5R7$qulj^ZN/1L3&aN8qs91Q0\+kt!TZ^#R&"8aX6>[/']M*D;+2jQ_^cE(Q[ScLCo,<>Y')
%iXEb,ML$'ZoU9=PYj%5F$R(1f20#[[b8C5)7TiBU.S#$G?8?khBqY/bNZ$i\1e.CN!R%5^jat"$%u`i<,/G"L\C_N;DWFRb)5K7c
%#8oEi2[1l5GPipJikbo8!V:],3kuj?QAb@EJ6`,Fl?K!KO)Nq-#Y7<_G&g%=-_C[f^egAX+DE:4B`_9J7od,EpCT/BqG*]ah)N,J
%,gp2?=LBWCh\,`MY"hS0l3SGri)3+#-m_c$%,GH[V[=kecS)RWM_nu:3,5#2,QC%ogr0<Y%ti7sRR]+9Ocke773kcp+c-sg%[q?g
%E=gZAEm<o1XeZ\h?@^$E\s[<5fofD,,"`NbJ8NC+U'V)Je]^HRfNuEs"NLsW;&Z2f8u2P>KOheqZbuqTB(S&-fr1^FMORVR'd_aE
%eImeO@PgJ"A2OD^:HZ\]2aAJ&.ZH@*ElP8b%W@4l(tsc\OSakKIVPY6UQ8@+PWe$/<$/uE'\0Y0-4)Y@S;iLR/G+KXX\*^:+U$:B
%ciZNNq]M=Um,$K5Ei]u]OK28uX7D@@.d!cmZh]U)OG+U]8ZVqhaiP9^i$&YRPEh),.C@%Vc(p"7g(Ir7F;WC-J_iHYl*4"mNPl)Q
%kl0ViW2B)f5q@[a2rA#8(&8BnItn@Wq-EdUT%*0PB9c_3YWPoVN.7KKGURa?3'B5Vc;>6gUDQ)=kU;Bf<sk>3K^9l2D'.h#4jE9`
%,`fQL#ag_KA!Fo^WCZ+;U,G=>n$Jd?+hl957^LPB;X?`<nJ#pi?S&8M;@:KQDkLuWb-s@9eCE#J,u]2fNoC?O`PhKG3&'T,<f?Ed
%=.?N%>Z5@HjKbWk!8)0e9;=C/[;O2?Tt7hpR\r(6RsOUR]!;O;J_7]\Wq_59:2Zi6$Q[l\g3@k8kVh!l]178=N0,3ID1?StkUMsk
%A4ht9-/7Z5B+_RD<'=^@Wf;c=g6U2n0lMt!"PQ2n21/Eh%\(B?8,cQJqC&Aj;pQ8&HsO\1Ahu_1bH`hBJCI\C3j<rKSM$F<(&Ago
%cVb6Cp-nJU6]X!p>2N-d.Q:<H'3EMR75nV$Nr]]T-Ofa(EhL8tMMRLJViC0k'#:>C)hJar2;Sk&mk>hP`LclW<g=qeX3<Y7<OtjD
%B]YP!4/m\OrXVK1A*@0XXu7Q><Ok\t,cf&1h&J!22O/08l5cC-,q`2o?iq^U9*Ko7<::gVpnS?>kid@YTh8/qFtTJs69-hZiB=>s
%L`MaILqCYSdP)MXB>Pt5'F\5<8/s>L)6K:c5=1#W#s%A9HY+B8#a%uAV;R6l5US'bX(S^nEmp.Df]#_:s.nq$aoil/PRNVA#TB"Z
%Qik-aK%ThU-PGfZh3\1+_&Qt#XQk-H(FJTo+P!#tEj=#5<V]G9e3g\XS(6TX6hX%-e'&6$]lJiP-Ib*;*qq8*E)gp"IE9rB8RSOQ
%P%_4>M#Rm!3RYI9%q.YgaZ(u>Y6cG^7"C$T9BPUAOGX)jS27.8X/$s@MrAOXeo`9#O)e5<\ZTJXS-_jZ\Yl-AU-eDI;_3Hq&r'E]
%n0.p=<@.c738t]m/[6Um5ipanrrcIY_eO4d(hJXsdUcgB'h*QQ:*o:_8AU0`(J,G_R,*Po?qoi8b%5!s)5X</-l*gkTD4gZFHj-A
%F>\'0(JqPjM!>:n,;;GLl7+hQ6?OU%'NTp/>07#KZ?64\P%n3X]o`DKEuWLe./(ENP+W!ZUd0nNK*crC!G38$)hUn8T/@Ej#7lWL
%S3LY,+-eX%0IFp[I=]:kLN8,;NPeS1T_p:B._1/Y5*NI@.c4,f)=U"VQfJpU8<V\.ashsTfEd@:+q<:sKk3?gLY!'"#1hl56p_[r
%.L)3V?fZ2Mek[R8GnHFP7JX-"_OSSpDbAjdYnHd%j0I<EJqbBC9;6iC?sQh00pdh4,=q987ffJgidoPtb=i.nqOEm<0eB(-<<FA$
%_(,7\d$nKDC1Ch*au!_TOXpb0,13t9YT/V<:o3(Rh1!R@@C`*kK0@>=*ka26Z`YS1fofBmc;?X^/mDWh<7Va3VBH/LprNe?i`tmV
%-q;+[!/4JXWb_`_:,j/O\hfP9@IV*51b>F1^]YW8_(['S;F:L67)T`9<?VkWeQ1f[qN'9t;j*:JOiL<2Yp8dO?W@/f,RftgB2<\8
%9`9EsDBD;;B1DO:GY2+0.coo$6W,poJ,`>C3X3]Pb-X\fm:D:!jLtQZ5aa;",*GOrDVU24qtdo,A\Y%L,a84lKJA5Z-`:`X%=g?G
%*$%9H5#;c_SOfae;"D[E\c;c&:`COea3b-d%3MAZ#R)R($7+ltZ?cOskn@e9ZJCl!%ANGO83\4X:T>R/[aM!p"N^sBVBs<4?X?Na
%!$A!e&E!l&"bM(@I=VAoW%k4[^U28tLV$o3O:>!_3=+Q0f,\DB'5.mXp>tt&31]g0&-@#1/OF%1?!<:3Y`if76Kjcf,m<f5EW<_k
%]#:d:s)9`3rhSPi*;@BF+PQ`3(%cP.1t%9bS>Pbr2(t[,U0t,PXqD?:GmD'eJjF^>Pu8Pm3;AZdB1@n7KuYl/fjMh]Kqa8tTmOqW
%`HquWS9lUJ/n:+YN+nac/H>I:IiSLa#CopC@+gf-$A;4Tr(21_P5C8rjiV7iK.f5&Y%6co$%IidOkY`l8hcX4p,Jm"&K14:WgjTe
%Y"ZluJr[q"piDbdYA/Vu[YMB.6"j)2RD*9XC'%UF@2L\tI#]u,fu`JNU,RMGE.o`K-CIRW0_e%k\G<@:5NZPIpEWb+daR7eBE,(0
%HaY3N;'*HiB;mr#-P7+uAXHSSb#cJk@bc;+Sms6m<P<DUD>JV#]Ql<G5e6YA\U-iRkNM,+FRp,T%armbN&A70.9a)qW2jn9li/Pu
%"lbB:m3%WJA3(]^B7[7O>&*(k8c'mN!-5f`7/;@4jVol+nTuCe*(WcO0fe\,g;nt@@+fjI@-`2@I.49PB@u2!<'->N$aN.Z+dUoR
%)mjhoC[feY1\7h.^1DXdm%q4WQ!CTHWU2Or"mk%CH5CtF@,$:><D]\NH7\/f<r)K3?Gt*(30>qN4"#%hfHMi?Pjr96YXq"W9jMTO
%3q@_1VpP4%^_'1j"!b]^qe;uSTE.\cHgIdA=M45lOUV@9O>J[a"m%QH]&Cit,Ns[me2rkB@dc#-"elmu>,c1RU!79k"9dT8''hgM
%;kS2fNR6UrF+V7>FRj4?Y3kteFl\k"Y3#H#\("LTMb('oeW6tDWW^@=3SsoQp)ZRf3ZR1s<(;c6la/FXlcSJ+[O\;\G^`7$Q@#fM
%^W;pb`,+P56!0*RI!+&CJ"\)a@>BC&jJ_Pn[3N8)<KkBicR(?L,$)a1NULmc-6WJpB7%#?Sk@A(B1u"A4n^0RMm-W(FW*FopL"E?
%W5Q1#PeWCL=CF^,1'7c`oZD0Id\1[\aVnes=NYU'BG+\4_pi;DA&g9`53\AB$>@Cup(8WFaJ0H@(o3)u>8^D-'ZO3A6^`j;"CrE,
%0(b\tMCf!?B$a_b)B0Nbk/F:N!!sUKaeVXnL!Kra^*UTmEe@\q0n_;YlfZHKNkPqaW:WdeS#"&B;+cLQ31_T-JK0t/hkK]0a>#ur
%`H<?'ie*PCjiFZJg:nY,4Rmk,'/[`%=O7+rP_\o5QKX88D4T[E,^_rc1XarZi^i!sET*j3S$oK3&S]X[C?gZ`K7L:#J[\B7GW]B5
%=,W$_T2NIkmRuLkT]:^Q@4<Oa,*/q>j"j#2QMWCJaHT>pUc!4a'=p4p=n;h\T`g-<iBu;P!Sn8pWR#fZh#k1uUVi;FAAfJ"!;]bX
%'H;;e)J#P0S2)'1SR%GU4Bj(^f]9KHa\fY=eO[7[N@6e#PCfu7i/JRK:ISD:(Pc#,&4V>hf6HdC\!2:@=i2mI>*=ekVPob/aO1Kl
%Dk0seLUcNV,A7\C[QPCM9Hf.rH-K/)>uCo\bj\/=10'bTReN,nL6fJX6l'\0De3F?;o2AM@?BioF+n?&.Xm;"N5aVLY6,28l6t-^
%EWbb3,f2Q%jBj'/YpO*bZ@Yf]A3pWnE\_m0>/W61W%1VVZ_.Xr9"1<J4A)Q+r>'Dd#Hf4f=2#EnITD(n#;@K(&i[BTjK.u*oL]_C
%:F#.VV*VYB^<h\:ZB[]6ck!*Ic3=%n*/U^?>"Ck(=09f0*EpYsaP/s/3!q2,>bA"\0&`'!.S5;]`oP!;BOQ7A16_MTIbunNTES"T
%0JP1F+,4qlo6hHFK<8%kFC??*%*k1F0U#Xr6rYS0=(rtU'CQ$#DB6I:L4\[!R+Ut!Tdc0MDT.Zlp\mN7rUK/;="M-I4nY%?pG/od
%%K4eMda`?dLgR/lU[DOT63i(@Ek,"&269W\<k3A=X4f7YD<pI1igp(NR#U/K75#:R`-cn,<#nH`(G8Aq.d_W1>"@KT1Mok`![M5I
%=X)Q[7hTD&W3A(?ZE@=/j+_SdTBF41(;)drp'4lg@f$VXZZ(j-Zf+`];l@UrjEf/'SB6q0%[]Cipb=BFr^G$LPH#4CCV<VV$tLSf
%,_jaKS4EdH&1-3e<rjKn\/pSZKoXHc@&9E;F[-/SWA)&68JbC$7agAe]h]EGJQO655#Y3+Ou3kK_)qUCn"G65UMp;>Yj#JM:t1]@
%!O#In)O6O=hJ551]I6I(,bM_11lg?ro<m4Nc\-W(l;qUfm`7EJ.,Zo!gdG-q;.kXL!8198D9tVQ'GLFEii)398'1i\KgaQ"*elo\
%_599-3pETU!8;b5;ePE39DUAa<ub44@qF%,;X#p=)!<E(C@_m\V6NW@(k$h6./'id"D1J[FK>ksLb0+3OG`R]&Lo&!fG"skVbX5R
%#mI+fI9oS^9>Hl8l"CZ=jW"2Zq"0&oSf^LlYG\C8"mV3.Q`Q"JH4'%]rR6jS2a'gI;I&ikM0a6+ZFRB4bZEZi:mKL>Ik'oW)+TZt
%W%(i6WG`$a/SP2/N*J`9V(t@$\rJ4.mj&@nPhKus!?fXc^j00gVg"s^&EA"SHnK%$b&pkJNr$E`l3^T(L8psc#3';FL836k]H\gQ
%US<@Y;UP'sHjd$FK;O\"KLiTgGn8fp$[kGOL;$nZ^'?D)\Ma[/j69q6Pp2rp6:;h\prW514sDGc#\o(K;8\l]</Qdo(IppQ9Ycpp
%@+<O,1R;#*_rR%!AmBWC1),Y/!YiiuYaQjU[`VmqH-R*tjm&7^/%o[)EE.]^9Rb?)`)jDNK?/7lq'$GoZh`mn6A8eV4\0rZ)-&+8
%?AI#Afeo(rdKAtg'#i30(EOBN$,e'eE5?`g"(0lo*jF42V@l[)cLGBNRoBhhieL,G+K;E)2`CR/(cT&&UE@M@9aVSC&2SefH&!0=
%>>#]&bar9i5i/?_O0;bR>EaZ?r@>Qr1@`k"?mJXrf9hXLSlk#!WenktJpoQtKnQRhK!&!!'JRB"%$:X\pP]E$d0/J[nlW>/8i8i5
%l\[6_EM4@akcC(2UjYnLAg.Q34aD.-TF&c>;3t7e(6i(-LAg12V,XlpV;!3,E[Mj5E_$F(IksS*E'r0dVn,oL"Pl=3*t:^TBgk0k
%V$+f:'I2Y@H9AoSX]J1C?<"#K@)8h(_1'pb$=OKQ0hf-4NFY:bbfEU>JIrfQ0.R6A;ITtQ59X9&@8oap!uSU?PU$!PB:;S$Fi0eH
%D#[D:QVR%Y200$n86(AEe;Npu-7M9tf>/mALT[j;#t#S]#TB\;J8RW4>Z!hSY@;]RSUmTE,KrQ0k&;@nN;Z$'liA%9Uq1X)9!=[U
%<6]'_8Nasc!_[0.(ofchiMpCK!@l>fCeI3)Yr4#p?W\=C*=Yrr2LAm.I;3p%%P]+8e<7GG$5HH")RFcmiq0AFH>/%a<$X(->Z@72
%1R_f_<.SNE;XTRo'NEM.TT_/_SVO-'/"#=j6L1_R0X-of,tT8O\GJ#CA#d^4(^cC;6_#`\(4*qF&uf>BYQhF,3*pOeEn+('KF8/[
%M*\*qTQ%a87OjblE/>/oo)Yh*Y2]*u78+Er;Xo'R\I^JN/pn[$%/AE.TVYsNObAU%(r?b#285<f_kg42!YL21acJ1uUF&g=f/.T`
%MG@p%K%tpu)cp$V^qH)17n]*q7X7IG;)hiMH!6u[U&?LT@O_Zmd1:?@8sR[H?7_A78Yuo'[R<JQE`!A[;C53dWjC!eJ=9To<o_#+
%ZWG,l#nIXh$Ou[H-oA/'KD^[$<t8?pohn>>8gR,,AQ9%@$e3Ef'Xt`C'V%R&PRuld\uNB;e2^l;l7o,o0V_*;_T%T0`R3a<olcZn
%JULG-g"1,erfpeIL%oZia9uIXMb&T'l7f7IE'f8W#/90S0Ij`&>Dt_mL^Gc,C"VdpB1rFJfA]mAEu\KK)Numta;;26eFOBG%e0*B
%p"H>irq!aH6'P%Qs7PWK=<?Ma.Xr;'=7F[7B_s00M2[k+hi(7n:\`t182SV"`nR_h$C4)&a?WTKS(X]!-eE7FU-f\e70&M/Wk?%l
%`O^FGK(`EUF%P5r/QGP.@'7Hpeg3Bh5-?NL)nI:ps"]'7HGj>:1t\B2*h"8r6rG0g&PTQbKM_W.8oDRf*Dnda-FKso9Ihb:#-T<H
%(N7o`11J?=%<Tp!%TZR-aq7F-+3(fooTD8sC,=j;;'KL)i0pZpUh]dm-^X;4Cni9_Tfl%]C66*jF,U&p4s/Cqn>+nhAeT7E84-Z9
%5GN6XWc1VplN/ZL31&,bU!tnWE_%3Kmm*S+`G!Vbn$*WehjonH?>!6#8!f+;?$4!!Q*8POH-Sjo1'\$8?AMpW1A$fC&5%]$^p68r
%I-<(UM5E<l>kSlH*CI1`\:>m>3*c[Ud/0?/NfbB<1C0qRJ4f!&"dB89H8[ejeTHM?%%,6$;+<4h(e+;\l;3d=*cX>Ciu3jLWXC\I
%&PR;eGIUmXN-<"$=1d\j,QTZm8q6j!78i,;2Nt?/"YLTK,`B"+CM6S"2&or.2^g+P8t#u_YMkEe0N:%<]X#O_q^,m-:i`WO]F1RI
%2dmfsI7SKH1R8-BlF;Y=c_%OCaZ_7Y6)BnD-e4gsK_aY:O+#;Te`D3H?_#S(+&LVr9EgufEr<U9=6o.@<IKpC;H'GOeP'V^!1Hnn
%>HEk$-Q@l60SItq!`aIRPFW/ckNAk^QilIj8mQ+FH>mhdT*Pj'8KC>pB@Tg"][Vg_<N-kIUWE+BYcPQ*''='&8_1Bj2!^DZ]0f4"
%,Y&%(o$G6uje40HjJl\MQjG<F9l2=AIO7-$1Z2h+;^s6i9R=\Q`[XZ^fTllMF0R,grPue7`*r/,&?j$8qhqgn90[a\W.KX"F'e+"
%#;MmP'.?hcQVTBnCqu-$:#;=uWa<eU0I1\_oHd"g/n[^<+'[@jm@3a*[h6l*HI2nsc;:="<p`L+#[R.cK56:1VR%6lq1j*X.(,O^
%Vf3*Nr^j#&,@+S-aH=*rN0?M`#YS8!_$ibee;,l>\9]@*8i)Qe0E%)@nP3P!:+<a9Z_gKup2n\9YdL<:2<L?k%&@)C+l=8P5/WG(
%R&6lbeN`A!D'b'$.P5M;FG$#sk$)#6c\37&jf1H-5k9pQ.@r"bN8[p*\,EXn6AfK%`Wc&Kms_M#@Z%LnVOC*EL:UtPqQK]M66L4%
%d&K6%jlV9*dKo[s^!]nfpK"$2b'+I-Gn6Vrc19!j3`VtBTVlZ]qb`%J^,!cu?(_SEpWkl-.I]PTES;")V3[le8B'b\1s::V?_5:_
%D1q6_/hAOiC8cHc'_=h5(SBgg=g)r#f=dNE]":N+-6+=S!r]it$9"#oObs4K]WT=HER\]F,_^HhXJ7<`i/ZAW2DYcKZ0gcq<&1#?
%,dM9e@W.:,05$q_F?S;NX?4]D>;1NImhtcDHF<(Qp>$/-95fj'bf!U\Ptn;,[$H,\YK)kG0+'3ZGs,+q,5Z!nKb_h%2o<MFM+-r7
%h.2;+R$qhHMZe@iKJ!_,7O'kB0TKgfdK#W(\+pAc.3`oMXB3%%CYhcBG&:T)Rhq2H7n;g/7)!m.GUfUAN',O!r5uX0=NHisL@n>'
%$7E7_ZK`W\l)@=?L,^m;?M[R-`_gmE%@tW/ZF<5=,o7WC<-l:E3+118?1t[EV5[?"6[?2(OWq7h\R[!$q/t3)TU8+h..YC4\D/S.
%#R4!`$71^@"dX.ZSTOP2SMp@?'EN6>%4qP)IR?V2[`&r(<FCM2Jqd/<PAd!%R.G&oII.uQ1F9^gVV@lY<"<Pd'@9]YFQq=6;1*b>
%/\jg$NGE,19fWh4E7U#e(ZkI04"^p#L:T\Q^UY]qEdVF\3@[f-6(p+A7=UI=kudf(UV9m7G2:b&/3R"f%,!#nX#2&(%Lun+[g4!Y
%r/$RaXSc&mI"]-O@k*D>J(@J!EC1Zjg'(Ft?X5n%jhVX;[k/I!R.fn:98dsm#sQiOO:"t172`1o9t0$cb^-\_^@pA>-/TeC=/FIb
%=^#iS7_cBac5i/pci!$$N-<>12[ub=h)FFDN.?_9V-[OW/X91K9%$U30aW.P&(?_B9m'B7[5LaMa$Zoig_idgQFc\dZX3%1YBqW!
%WA6rRZtO%&`/`u<KU>W\MS5ho_AQ7i>rb\?@4DO_=dQiO7q!Ys]J0.%>>gq:,u6u-H-rM#;3$^gYjlYs`%NrJjB<Z$q)G(3P!e?)
%[D#eIG2:d<-ns`10>1AH%d0:*3]Y/^-aJl,/#kBBo4dLR/j@Ir6(.^T7q!]#5ep\KVMAJ(:6q\rhFd<XjOjZ.:?>@]VLH?+:pofG
%JK1UV2-1OK)_gU.Y5?qDZ0GL5Ai`l/J--6A<R+Gpr*hN(c5`a`)T`bh8;$!=\sfnscT3$r5S,QPn;B9W9m%,lOb]N.<(@S`,R9[,
%H(;+4DIT2/5`;hp"cdnJC;?WH]Bnk?9RPXFk0.8e+c\,MWqqW'jMY&>3:VjrdmG.NPN3L,p0HP+m[J;D;F5mV\L't,R)^)E&HtXb
%+lhU5q@.RI6S@pV;J\Ued9k*N8bUGT[;3MENPrJEdb?I`OYdm^\;0X"2dH`S@],g/BH5*G1b.?7P\f$q$L"+('N-L/:4`ji,e]M\
%8Yd&mYK9]'$6+`X.?hYYIhegZC8X*m)Ko*N[*'W9hANM?`Rhe_L/,J&`up@<0S3<+p^oI;:mLZ^lhpE@]AojV/`1iOMo&B%X`)cf
%=Ku_iFH_VTWc9:QW2-49XW)=CaMP_L2h!:nSVNBcN]4K0EX6Nej>\"e=7,@Ho4h>iBJ5Q\:I[E`W9lEM;]L0h_i_(Ii2$n'#N8.U
%XlD-&58S0_J+h[eS4Y@'.?Ajc&R^q-TNi(14>1_jNutOek_8D>F+k!@3''u4.ZUNAS$=fE^@[1U_GD$rP\[D"0D!@5<iA-^7T=k6
%(.DqJpp)?l!D@"3)4p,-X4P=pb,a$CllI1IkdKTRE]cgiEc^;"2`n'#ZNo&paV-YpX>Y/l7"/1&*8!@lBB79$90^?-^$83iJU7Bk
%pjo4P@3K*407HOH+3HpVebcoL,,8rekACo<7up^([ZX7KV!I6?OfiTuSPSh$Eoe=k,e8M%eE!!s5aeJ/`5iu'(B?%f@Fut?3@l[5
%0?=8G$e!I-C\Qi*Q%TCA`,$puUl""c?2]AAhAfUpk\6.'pg@jsmFE\H\jcfj1GZ?H)G[*.C1^Z7Og\)ML>t[E+g@Dk*$Nh]E-&(%
%Z97e`Q"h@^g6hD,>ljbZAaA,`XJ?tNJDB,"!ka+!6U0d)2rn!$L8u<eNhPa99$J.>WN"/S7k.SSQ_%5W`.FR,k0e!Q.(?jOp3eRT
%aA%<f.obVh0Ta3/&6hM:R'Ei1MD/jHb28&%]#pFo3G)1Jda:RP?GVf<13E&?hBm\\:ELc+"88BJ;,93gB*uV03a]&?a*P="IOD5+
%'0g-mBj?Bd%m=ci3:p23<)YphcS[JR<RVb4KhdB8]K:WpjIHU!e'"hD'jY97T=5q&n28na:T65R4O=V-"eh[:ro))1*SFim=Rd,e
%0[s;@$D4+]CZn,)KW<mqTm'djM)_&7W?[-JP]K4*-"@:?OE*?Z;l:A22WfOU<6:2D[Id>ks4Mb.*_V[W4Ren,s+bo7J-<fa]>pIi
%)CG2E65+r!&0N,%%;o':NR0P9#/fNQ^K5e!1QRa_e9(>>X;,ra,Z']l-SFg.mcJ]gm'EhW+d*7>>a+Z3b8>#C"FWRtLtpX>/J+5*
%7ghB4)>7iF/jpCnW0TN?&_2=B082VW9XU?]&ljTMPHp1';l[%akW[\cf(Us58e#^"o&W7Q(cK*f#*@&M!+6*1Sq:n0I<QY!?Ll`4
%>e7lf<tCMd\YOK+>1D'c1Om1si*C?!,nA$JI<)nM.D+hE\n+H/Td+f'ZP[,d?^'/8$MGqBR)2(-BMTdTR^_[:-B;\uS_(5ae\c6l
%,+e$D$,J"+p0*=LUj)S(_C:KU'P5f$$>dA`7]WMhj=3FJpjRH^,qkhKp+`K):r4!4IQD$YAVM6ECFC:)5/ld<U9HS,iqbR7]UG=7
%N1JYUR-I:-ZqZ<Ko8mXbPL\$p>$DN8GmLJU"^hW/b<q.FacQEiLJ)u\k"pt69l+)pWm\9:%YQAoA%)B2hU]!%?.!.ZBKrlDWOLq*
%CS#H;T?M[AY7u@#'q&>]A^/WPktjZ\a^n_t3'<L3`jP9.Rj[9nX33`6kcP*fiHED)=">ILU(Y+7Ge4/%LS7\8C7dpYJJ5?bWI9aG
%Vlq1k>H[*$F-l0??M<Y[*6i86B7nX\[?7i]b2(7;]nXPTC5@SX^1oeZki8GMF-L7ZJdT2`W@dWsMeVHKA8[(K6C@M4=T!1gOkKW[
%cctfh-sL&+`5Z5M;n'GUd_'LD(*d>@d<QfO98G';h"c>cj5!?mSC^TPmM1T1A,Yh0[i1A!kT%=Y`os2'h;-6$l5+1GLU9[H5]57I
%W[V6>d\UaH+1p90F3:s+7>JL97q^![fe74@Ogb5W3dG)Ul<gIooM=1VOAcL4K9S'2L@qd:;r4AISNDc[6S+e]bBCtpPjH]32XD6g
%^?g58h=^7f,O+LFi%=a"f";nJq81:Zjfm3\Z\dpX2%<EP55+9tHgWufEIJ@c10,qkkdj09c0T;l8uT9UlJXuRq3EsAQ`GnMeiD-Z
%P21rEQKi811Ss1c:1L"_YUkQm]!Yn5>Ht&:g]_i0DX6hWlCY(`HJc_VU9)jC/Xo^gbC.-nOH]o+:"Go\duUjs+(i6VBAH)+c_OME
%i;)j$Y'-R2$XCZLh/lnMD7f8ch3\-S<chNN_dQ+FEE4RTK]dQ/m"(@=48<OPR&dYtIasa9FNCWuD6Gk8rQrHYGAUNr/ri4OHM"0U
%HXdleh4SIB!@^srGB@)eD*"b_51;)"Zt&q@4N/\mAJuJMmZ%CR[_=$a(J,S;Y]>a;;RZ>WPbIa%@I`SThk.rlV^C"[rRuZR55CTh
%*1V"t!:B_a0jm`M21BKH<kl@lGN5(al#Aq1V6P7/TJ5j'mp",9pO/5dRV-cD_(*mZq:>E<SSA?[s/:7rQXXn!G9:J3G4/o('/c+]
%GS[iR_m=T,:@sN.jN),NHcU>o;T);5hEua5??iq2A&$T:.?F0CX!mQN/qD$sj4J5<!__[3&QdH*r'M0R(DCT+bn5D%U,'UUf!V%.
%C5T_HR_l&I0@X:J1!nsG?HDGu"$IJXX>e\KKu=>QL2\4"eSBZm(^E+fjFo\-oaBZZ@5>@;a/aH'2p#n[&a%I/m<jOZ?SA[:etm<a
%KB9Bk>tiNAmGS?^?ddXCbC^c5k5BR>\,DedAuq-DNoE(em@VRQ]L,nPmIV<)]nIfMk]/5+dCV5Pik1bed5s2Wnao7tn/ne<QYm/0
%3Q9B""Kbq\]n_64q=#j1OOh.Lnr`89hV#(iR.=pH_gUqO5$V90AC5?u=BhE.33=T"#J\r.^*UHg_qJm(D6/+4Cj=PHm^@1QoTgQ&
%BuiCu;I92UmiTE4F]rF#3f:g0]TlEO,]%4.nW&O,<Amd#1Gl@J!A0TY*"?#?"NoAO%!U?c8cocGm]'GNG1&8-%\4TO,J7R6@*XD4
%T,:LNq$WYQnLXLlo7K`A4qV#gHOeIEBW]h6\Yb2K?.*s-,%f!m$X#fk2%953jI(',p$:am9a_Yu?emC&_IK27TtFpnkFb;^M_$:=
%nMhKd>rhJI9tpf9gQLl<DqjWee=io5@WR,V[bf7hGX+MB)uWHa^LW.3c?3B<097i]^(>>KLZ<Ta^V?DRdihagqtEi[W(,SkC^Q#U
%#9+sOrj>4YpgT<QB/b2&QIIq<'[(oC>:4Kt;:.o]JtS94@`'b5]_p\K%H$O@"D\C6K/QB6`PR2\E_tH(ojG),4cp<r=+5Ma\2?GU
%f#$G4Nl$.f:A%93rlD'C4:mCQ41KV3HrG-%\lIPFdNRO<gYGeR]1'tjgkU[ak:YV3nSBeED7`p(lLFQ\he>_1Ys[[jh9IaW.I4Df
%QgX`tZ`oY%O[JM3mJ@A.,r?o`/uWH1osRjUf(%0P:&13D>WJI&-uo-s7B!"X$$_#BS=\-IopkgrDA_3$7jlr8[7]R$BCF51*N#tm
%ZFNb[:=K,Kl4.[KZ1GYS1a&F?DLPOPRbf9R6#G<N>WH#k*74)YJp!',5uak^F7ZDqIZdX=Kj$F]%\bEK@Y2;hpbf`$VCblOG:+3E
%e5p=4\Z*>-?l5Pr.f&KrU8b>mn6hE6et^Fm54o).SBiX<e!Aa(aq*CmGfi1a=UMilq]&s\b,)UT)P+XT::Kt;VLgVt075IoO&*hC
%#*Pf/g<ppir-3";.7>6T`1H'N[TBoV)UV&=?91%`QLluM=J74Tds&b+Pm[I(_(VSKQJ%IWI)IT_`Z,?fJ]O,rdAp^ImWuM$nlr8p
%,rQsrE$Rl(RZ[U950n$EH<k"P$-dO&NKW'WpSjZoE7O8gNOdB\9=";'Q>bLR?M*aIY`#EFqh&`Y#?<cV_7:Y2.C.NRXFB9@klT?4
%s2iDQI<W-Y?k/l3qnW[e_@Ks>kWLon6^KF.)W$+;TC"4m7*K8n#PU(O/%k[3M+C;-Te3]!!i$NPH,/K`@?JRM8\B1LJD'Y8B2QcG
%q+^0sGZ02&f!R0@Pl,<e0kdnpaQ7FNl;2?eG,tRgpE3W,[6Dl^gm2`'`7mqU*EmLloH)O(GN\c?SOuJ]p,=!\c(V]6hf5*YD<M=2
%n%`p84Jp][W-2hno.8^XQ\KYrndf0aW%=(7Bnt$YJeR8EV7A7K=36euh3,V5K/Jpb$:E*J.E@*7h5M<b\SIZp:#QbEfj!L+D#N+2
%WN[@[n*3=K$NtlfQ%Z)N/^Lp@2#53obFa#oh^#c'CYqg6ON3?ejh@dD7cT0B,)[,K$P+ep(fGgo3ZLoi/]E3HV%BHD0LM%\SGUCn
%;0M!0->K2lHVFBMXA$k$"/-BOaj;n'J!"]]QXlTWGA_+,D?onQdi^6m6Uu\D1!YXb0=Tt%PM[(GaaR:_FW)YJHOtm1]/u2kZa&:G
%B[L&MZ7eAuLUPoP/fpKl9-S*^S][_)FU<K#CuF^QG:hW-bQS.K?#j#tgndHrNn851X:^QDKf=#D\aRr+Q*EjVOueW:Ak+okTEi_W
%c>mb,Oe')e",[T\!5Y0]TBkjjG4[=+RepgOmLBK?-DHhsG>3Lia_DX<]e/oPH48$*UFb]r2C(\N4kK7abXHTof0&_]=LYDXLB_SC
%$STtpNgCfO)58SYZ<STa_-5#b*`<c\j-[hkp4l<4(i:^C`uKFfDQpAV^L*G=G:<3Mb@W^nhmOukhCfmj0b1`2a8@&sm8hW#2FJTH
%2j[^OiJ`eFRZ:m8c6%EWBT<`V//+meqh'RZ!%;$C2f1Z.nM,gQC0We>5J>%ud*Kmf\pt4QrmXL:mb]fH`m?rk6"o<PpNj[Gp70NZ
%HTdb[a4kYo$ooCeAan'me`F$Rqpa.qNQ29B+7DsIh>X)=]rb)nR$q'_l1Vi/qka8/Kn[99?)]jJH/$h-=P+q?eWbFSr]8l,Ek*jC
%.HOPkb1eAkQ**;FI@Og!oC.EX=ap4X0>,-.j4e[?6V@YQLZ3*8:srd*]K9feLM,1Ci;K'6XlB-*,Z.,Xq#L5ZqI2Fed&H>,H-l8g
%eDEH52=5W6Na7.W%sh?$H-2.;"hu_[0gAtLG')+KD2Q4Q:I's3Vd"`,?T*!6j/C>5IZF&a^)p(CP9%U?btJTFUebR&^V-_h"!aX3
%s!I.$p,AUQnYt++5W8mgr`_U&O4!!:i0?!/&B*sJgM!!4]Jh*CXV,dZEHj--Nu%]F!EEDM)fkJ5j"BS*X/fAjp\/O6k@O9MB56Z,
%duBsNLRLl<h7HDfq%s1=geXhV\FU4(2g#p:T;a&AS&5ao[gt\<lL_8C:pMkh^^T:/!)/'@q@.g%h2\99YH%6K9L%.O&W'+M;-DDM
%ng#W1X5mO@DI/-E3S_pG3.r[obHL"-b-XV6fQMq7Jg36:jT*FC_&KA]OX`gbYaQ6a1:pX;gROLOkko`4eL\C4&Nq>Ed2["#r:Y%%
%SjkrqaFf+ij-1-fG>PnUVO\_rfceUL4U@UgZqIpY'XmDBF:Y`mQZ1f(gOl8Mlf[h9V)d2:.EB#p-nbJhma;d[LUYTD)\FJ86?<Xr
%\&7\Kh-Qtrd1k%!B(hN]27oLEqZ7-.51]/;4`GV3HM$mUq96(ZC@]hrfiSbjC>I^7QaXWgHT1EMr_;@5le4^G9@!lqF4Q1nLr[ZI
%SA*gjgj$8o8G68rNfS/Qa!.97iXb2O=^<_@Y2pe-49hPl6!Quk]f48/A>)?_BQH"ZEK(pG'jJ06]Q.)>mJuR%e^e#&h:%`ga%'(&
%F?=%nX:\Os=np[\59uG'lrIZVJCt;%Rdor--UB5uZHacE>4U;nR>fHOk"%Jo0P=-V9DA)6PmM&Pg(cC?4A^o(#00I2RYqa9mDIZE
%JSQ>@m$&U&,emquYB+'?LD?FW-.KY9]"$bU!CM?]C@,s.d07nt%ah8p)^ZU$9A`/9O^4A"g=nEkN0/P@+1YLT*O[ZTD\MJen?%bV
%gImP_DLXmJ^5LJ'^\"`K2g:e4RGW)LJ'+&EZ9!Ze3W*!Hfr6kN3pOr"_m^Qphl0OI/9t'6V.9%Ig=oNR/R?eGQ,f`sRIAnE6o(8o
%csfV%*grr38`)Rl+K)"c:%NDhBP`hlm5eh=H1BrC9h"Pp57N%1Gug:lfN#2jc$KEQ@tIW\Vl%[9]GCl]\r%50C[UjE[iXO4dh:J_
%<.!iZn@%sY,8T>lI#'HsU.O)?W6ilA*htcBKmMZ._$f"DHrK)5Fmq^Zi&TAK2!B3NI:K+1G<^K@T'Na(codeSDZm(]F+u)he9=)G
%l,N]O'.knMZK7VGNU[8clL+QnfA)n1n)7"uhHY7i[".#-9;]54K3rA2"?&cJf#+!BmHknB@Fb'EVo,6i:<ePKobbT?ru#,b&lLMs
%*,P!=khmN`7oGrlLSrTSG*o/s\;<6N+WYXWWP,G.-mOX5Ndc%r&,751I@pFr\_OBYf:LV7meG`P:0>r?n&F85rTU.K2n'3C+$p5(
%H5GK-D.sR(T'=L6Ia("cRJ-Qk*<Q&m+C'5K+gpg9CR=;M]cZFNH?`XLlsK8.<u=$g_eIC+>^W!JK,7nRmJ-\$CWmg3rrRBLm_?Wq
%Jbr77GMqJe$m'fco,Jekf@)8lI/*peO.;K-BC]G#05u2U!F0()n.Iq*kJ<_]Ls^j%mjtBWpHSXa]&OC+#MRKYHgh=h\NP3)=`t<\
%I$3B>Q_%a_n;*_"pqQu,Z@)/iZTK<aj\IUZE)]VSIJD@=Z@1e+HH>lteU!PQK,:.krSXP5bPT+-HC"AZ(I-pYi"'JR5:D'-npg/g
%P7/QJiE&!(n:4._+F([J*Y:Hl$53^55KsAKMbgX0nCm($5Wl3I)*p6ek;Yd&W`,uA]^d$q#iC,c)2&M[aUQ+&ca&2mifj9_>i003
%6FcX4EJ..a36Mq$=`K!?K_Jh^$DB/%Sh#I,r@D.Y00[PqiZmE-`XjX]k;Yj([^3%Y4B!m%LA7N.cQ'eJG(D`.pRbt,nX9/7IgB]Q
%/;&b>lSBM)]^unrLiq\>GsnaHcuT)qGT*_E7au>BXokGT&,oLt,5bbK=@Mdl:[s<epj\3O%Yjo]#KHF@/rm%2^"iB2*g<M+r?Qdu
%O-o):<8<2j-rdqWdJi#dW1Wlp%nU5J/b_J#'18I6Kdc)ae,F9YB4%.?/)f4oG9t5a@n%E+he+rdE:FZD)ntY?Y79B=L"QY@36c<X
%\".*>ES$fF\+/7FA%;'JV`8S\?oc2He,;lLQu:Q*P3[iU]u"r&f@2gp)d[oTnV03=_Kg2apV36kLA,'6^#:0L^jO&s:NG@Zf:HWi
%EQ:iEhq[Y<T4,ND0@"RqnC!LO3:+Nt*ZTXOkF$:,\,7oA_XS[/_hOBPqB7'nIlPW._b%JUMSfts4>5"Im=1K@#M3;?`o6;\ZfC!3
%Zhueqp+/Q@0>>5aKDV9Ramn35oAng1B:3f8ZEmdrS<kaB3W.`8pi<l&T4Z=+h%r%l/5a`uk+k7eaIGVKE0<<'o&+6U*7"EPr&K0'
%8Hp2AH^7%>K'$b_*KKH"*Za*cKh7'3i?Xab8<d%h3h2NEHoc74T4$1-pU\5@F1XD\.BAJ/qWE-HqPj@J>K8suA(Ru)Gb/8t;fRM"
%a8=h@NZE'1F"BBgV<<)HX<'RO[$,9'?2N_g47;Ms[N/,]=hYn_I"cR\S,7KV*M<,QZgR;`=*SraJ1Ji*I)$Kb*V\K;p)Rm2kP07=
%8,G(N4FHQ3%N[jmGnqGbi!L"@],plj-6>A///QXE\,B_n*e&tsHp%Co:G_Qp&TN\l`uF[k/'k>"G_2:&)TqZq4JDP@ioZqb4j2.2
%_t&)%*ZgV[)1)(d7iXZm?d>qKfQV@rV^E4;LKm"9n!mnRnR;&P?]V>MF,W7Gc-C>&=G)'o[E#<4o=R5XSEH;eCf6kbmbu,tfm@TN
%UhBILDEN9l0_ebF4NHE%Z_Mu0`Q'M+Goe'rJEN>J3&t'MHn;ImBCiB-3Q:0&,A;OddDnV$Ra]<go(/qH4iZuIfuHC5F5/qh?9QX&
%6Q>AC^CT4FQJom0flJ,tmk4V$/3ijd50NO2Nfc+k5Bk`Y+g.I+J%Wkrj+0A>pVR5@@JmA`m!6kuIbZHT5MuM9$[@08s7$mZs#=oi
%4SR1r5@.n#i<-7Ps53pE(kDO7Eu[I3mTC;J?i3"s&0GkF$&IL5$5\dGn2qZ:]*J7S5+pY%I"Drd&%KI_`!9OU"nE"ISem1n36M`k
%MpHAFIK/=RFs,[kNZSNCT4S@TpZ,],&]=oZ@0tq+^VUXpfm&N+kkcI:_A./CU47nLaMRt&^7aqEqur$F2qlm0E<c4QI%E4:Vr70Z
%5up"l0aE.,j"K=#\eT6M_]IkLHB(5Rh4T6XK95!a4GT"Gicu<5Sm_2H8a-$nIfYlI---fZ+[4g8T+E<i=[jPuq$O#2-fPK6crDXh
%6[g0[,gS4S@0i2ZL;*]X,0S@-5Q1_UTm%=Q@AY2C`"fGKG;K&MfnR3J<rN%_d_DW>oJ;ltL\t!JMU+(H);kHV8(?-,f>#l8r]c's
%IS=bC36+%B.u-13cs/RfFH5SMq]E"=?,[p]O^6d&l$n`]b,abWPZLV'4\'g0c@BuC=&/ZT7snn%K]f><ppM^6=3da)7t5ZF#53*@
%=QX=BSc[(<(=/1PR6fjQ%G&.rrF$m$9;UgNYagL@4;jH]fCO)dh>udFYp).)'IB'SbO_N3I)&lgXOtX=`)urr/2\1r5"goYZlJK?
%ZLGbGMCbb>B1]CRnQD;3G2ip,(*@LL.P%C\0jPQE3(oWmM_@q>i;o99ZhT'WZrt':/9)FY^-\C0#@&Fuip:!Fcf,&0&86Llj$a<W
%,?r5PN>@"'9;Iimr3K@+I)$IP/U-r73j#PVGNH1X60pf!!WND<dn8jg2='$5R,bfEZYOOW-F<j/Umg_?lo:89>CqmXaORR_A&<tu
%Jf$oo;`<UNJj0SS&%Kfe75^Us=1]`prO\#'GS6cV@ftfuK]YJXeO;Jfdm>4c*ksMt-&*eg0];CoBjG4c`WMGg-%uhWK!m87@u<P.
%rb=phVD1@DDC(*iKNjL1Q,b(>/WqgM2X#=/WGp>2g\5-:,9OH\Hs_@Ms5#Wi78I4,GCiMAIEb>apDPd``pPN_C7t.GnX'<TB@jUo
%\[\Fsk3]?L!FqaE$0uTa-A?^\UiGm?iC)%<Ce#-K-hqY&HgjZnrnC'Km\#PLg3Ze-IGA'd#WEd5o07n:@a5]t$i$1GL%&,kEM\Y/
%hM/pL+r`[1qkg.A#;;_'e4f',TAQ?,^qNJ,G+@gWV)Ultjr-V9jLbZ#aT,0:dnT/>aKbE%RCe;93!SnsnPh4,gi>[sVb>-h5V<nu
%eJ&KJ@^Ro?;.Le5?r$$:qn0,h:ZAKjr),4+7Ujt4J"5&:Ino^oG,3BNVeM6NcW`%f]t/Va_LgPT\6UbKIStie,n5shH!,8OoXW*Z
%(%ZpNfRU/1Gn.W7fIu,Rs*%l`N&A5CJ>EONaN`-Z$)\(*Z]%LM]Mc:JjO;h:r9FDn'nUsVGoXA3ToXH^hP-_h/b-!oO!8r/4r`fr
%jm2jqToSKi,5JTaC[qA^X)YUF5oO:s`c\Jo^#*D0S\ZHGkifTtp<m;G&i...T4T^gr\A(0'K`&5>o4LTS,(Al&s&IM#X\='U^^6-
%1f?<<ji(O&!IH5RL_!Z:&g+u)0TsXken4+8Cc<:!QGV&<.s2a^1mTE^6>-n?GJ)@UE8M;"4(N_p?#f/_`a!`c@XI^\7^PARY;,Ao
%9UF>D#P,fkN=*3Zj/t!2p,Q+'?2Dp)_,IdW)t*9Y4]Y\s9c&tbWjg2i5,asup?!C9Q$L"VOk5k()TE?_q\qtIJg;oph+A)"=)TmS
%,X7RJFGT:#<X*^jCg&LEqRL<`-$TBpR!HWLY]+t=?=*2%kT]qdR!sF.ad(Xg%Qb+47MK`.rj"mK:UU"[GK(d\f&YklO/FS'1%!"0
%%?+@1ah*i\M1UDT'STGP[*)FV0<SUrq2EuQGX:i$hgGs2Q8-L&eO!2(\(8EX!XLJImD8`'mH[jp8q%AJ_2[)ba"AM:NOANBW6FlA
%@@ckbhC#2u20:V!BX(qgUWd^%6l8E$Ba!1pG/%.IZ1Wh7T'/\V2?UNQ#V]sKg&KF:Q+,QnAZca8%F@E)O9Ec-q*2(9qr.<L6Kr6\
%`s.M@!E,%g4,QMhW/JWVU/,foeM13u^b;SgX*q_uSK0RUo"HulI+Y9Y;R,+b;M;i9^f"%%-6;)>W>hu4[E(pq[^Y"Vdk<#oN;\D8
%df-0oWlYAZAN]f[&_;^_esgdH:THY\nVprc'uf#dVXS$1S=r3@5E[j4Y^3g0UKf8L$afG;*,t2VP:0E!8$kf2&8UEV3*VUsWKR0"
%E3`:o7$ju4m*_Lf9W3#\\AdXec0`F-.hR<Oe<+$%F#U>lQH=,i*@E*hdoW_l/#(*rSX%-:B.\MQC*UKfYlR)a.).^Z[nMhdO[Aib
%l[Ia$4K(FfOm>B:MA)2.aAc)TSs8P2A^![0hF89Z&FOO=mt.&0;as8U.H/?n/koU"d1hAl/?.C-6tfP8!ZjR>TO1rnAb:B=`\pdi
%SkP_Xp_pA;hL(-ILN-)JdtnOmMUFH!_:1rdYc6s&7_KZmoi:V!UFd)bQ,U!eV8^.:]fAMFma6lrT+d#=I:A[kZ\D2CAuO,kU_(Mu
%]Q!=jHV_cZHQ.>+Aej2Q)+\rf.Wf/.[I^9?lNcL"O?>SDL.p!s3m9$sD=?;nWGQ(B%pS87/P1.P(q`c<!sE=t2U9!rXB?;G.>Ke*
%5Y5.+WCb8fa3]Bf9$In9.N+2mbX6?jTE=l"[eU^1]Iu2eRs@,uYtqnIj)ge:OJ"F%8E$)(]s04AY*M#uTUNO9F#a=TPf];Qhqr@B
%f/k$k,)%(T0I+W`D)(lS/o3;T6dBO)_\LI62"p:Y<XU=qZ^ZsKTA=Ctq!<_Cr9Da8cM5D#S'Lf3kI7"5k"fnXUU\Td^$gIK"e3gl
%lZ:h,:p/t?+CiRMBfAGjUoPQKG=@^/5F@L?PBHEK`^8%;]3--!ddQ,+0s>_bqPuO,BJL?,nqV/-!BIH4,9&Ho?Ik)J!5MZ\iS?pP
%Xct_[efW[0aFq?@"HG:,KC3-0;aK?H&pg%6i8B%#'sMMDh&&M9aSB)>'XPnV-s3fRY43:]=i!BD2])&jm+]-lRT^L]PC=5u\L^uF
%;rAYFmCS7OjrchFb]E5OAl4I6&pSLlP_/>B$BK%$KM!fsZ9S62ZhEXJT+^GOr[iBh"=GoOF1,lL#G:$g%[\8]U0P%"-bSqj>^;37
%LC^']:LhIBQiKLYII*#B=A!e<m\T6#1UOe$8-pkY0'-B,h4OcY6qH6s'qgD=V<BaE>,lP67pQnO_33P3,V6$7\LnXh-@+abj'rLP
%UhMa`NN5[+(d&S2>*u/[^\[ZK`l+6pnFUQm.Go?s8NpMpL0u6[#J%tqR-^j3QEk!2:;aF`LDG@'TWHQ/'96O/XRu8#q,4CS&5_$4
%N3c`h5DM6el7\Jn3#dW%fYa#NJ\%K9qa,Bo\)2ZF+&(i]Lr%NcIhG!(l&T;@lFG7#'X;^$`YUl<BoMFBpMo%1/*"*"<WJrCTt!l5
%nYP#kEt,=n/niIG"4@3QoC-CR2LMC@DHF%d=:/pQ<6C_b"W_0/X[_[%E[>q3$)C@2%s6's+8']$Ei@qOKQ>uG=4cU!8>3RbJpiZM
%<TC^F7h%9cSG.nMb5Ks'2COkfeR!*jf]/$3,>KR,%Gh9#,]=[QXsGYXdWs'Y*%KnTJVP$SSVQbicaN`<38KX\=dpem_POc-3o41(
%-V=M[P27sL3_k,Ph<XGWmCG_e<8<tBFF0L<c:rjEh7ZB)=2[9I8dt-D[>.-Okb1gRoW-oVKK$5KS@`D'#fYU0?fCF**=eN(h?<W2
%Q80&$(OqZOj84>p#L+X]%c`*$s*iAQ\0*-/%rY_b4Z#tZS2b,>&-Nqf2q^e2'4c0G0(nkMD39>M36h'UL&;k:7$ACg&T$)I@!7X7
%K]9\Gjbe!toZ^m4n2[E9A%ru1<s8GrO]1>4*.+JF4?\!Si5576Dsl*`]T])=2cJ"c]OeMiqq4lg<[eA?.'@T(>CpehVKMdd2DcqO
%S*\b'ABC0^Y6fL+Q-n"W=J%0e">>Eg8>#VG+Pis)=-ppm(,t"e(-%7EffOT,kf"&of#="k#"O!o'FrLe5"0C8JqpU*Z2`K</]/E)
%2AZNr%rM#>]Y1q!Ph)kA1l8a[C`GN6BPEEj\K;VClt;maDq;:TIDHUXb._F(X(]b+Z)"VN8&W!e\T'j4[lB=%+u?XfL#t#O<-Rt1
%o7XB98%8Pkl0Y&+Pa;H&6m';)FcYDP;tOP6;hn)G.A(O,D[[U8N&-ld1U^qL'!/qN"633E4mI_T`P4BgjD\__$4mQ.KHXDpZ0T&6
%E#X'\et0Hb3JN=hlW2uV;8meEgQ>[JaCbBe:TLUfY(=hhbo%GP4.e-cG"p4jQP9<!$j(is#h8CeG_00m7WK2K)Q8;-qSjH44i"b,
%K-C;H#CUk[KV'=;O7!>gEp!o"@2U,5IS/7c-$(>a+SuUL:@mEFE^?DMMd7H]9X-4rPiOY,\2XKIE^+q`NM8K4e[7@dp7RbU;<0\=
%ikPlY\a4f9W"m'bDp)J[_DZaVU+_-&M/<`H,R+/FH_LadJBc7!=+.e#=kRg4@DK+,lR&K*cRrGHac6B9jKB!\DcaIo:17Vmcmh4U
%<(rGf?@$%U]5GUgP(BU62$u4F2Ng6+ITNA9`2&YE$Z56[#9Y:0B9Q];%X7ZM-BNQH><GQZS>Ua?>aZ\pY)E,OF&\&%qUq.;ji]35
%kIHkrBVII"eg*>L=bZ(G?^@'U4OXt4cqj;$?h;f$nj&NAi7rP@Mu/t=P5%/Wid";g1Hr!,F<[aTES1G;2KKG6\@eUM0OE2p?8?Z2
%bf@9^:S!9YS,Dg===ACLN4JB"F?%KeVK<K3men5SWXN#RO[YhreY10N>Wbgl2:n7-So(YiK'%;lmo%I2>rSPYSXH]mR6iO3O;.Eg
%@<L>okZ.Xbs!qVV#djeG`Y8*D"PK"be_OSQ'W9Y04mSqTfC+#&?10cHVG;S`KkJ.NMco]\X/3(eGp7^<NUB/o9$>3'+o]`<kg`,"
%/biQ-,`0NY.:DUjRGI<ef"3:[dF[o#7Q\#-8E71KXj\Z/VoY+EhlWg9!<*W%Z)8e1)#L!k=cMLFM^]]g0onub[S)LF0ni".:SKH&
%@mY`d!6'4!$`BeY[j2J0$gVZtr=Zdsj-K/u4aPVdh!E`@EWA_8\&$WD7lnelcSgMkQsmn2f3:@&:Yq.GeR&JU/5_7;&s<t2d"AMN
%2NH6c;nhF\Y;,iG/1*48LJ**4;PT-*h-`RXG!TAOe:9O"R6I#/feZfm9.U,DV=k)KHdGQ?4J(gPMu;_2q*FKH'YU&8OI*MM\-[[u
%ri"pgb!P\SL*X1N/_R>gT.)(>_;/npUV6sl8;2PPNY0pMPHl"`&:l?\FW4:l./62bY:T-6K+M]@KNM=q*A!!H+ghLfMae9Cd)e;u
%OOk$n/_IaI]s_2`cqo,^<1-*T1+hTP<TJ7E?Fu.5UMbbM02-'7Z396saVkK,\`;*Y++4+<0\o?%WfG:9btZCN9kSfiLQG8?4[I!K
%B.oYSE<"Fsmd)F^^FF=a+Q%X?'*2sYn6=t?ZmXmrQg6j%qUp+K#l3/PGSK*G>_Wb/k[!1cq)X0rIRj/](e8CF_fJ@3;tX%!0Z'S6
%8&p$Jh]=h^*Y-82jE!\/eGJ$oI.<&%n]J0?HfpT]Esk4G/`(iLQ9=E,=u8JARMb'6doK,VFQNQ,-I09]0rmb"4YsN;c[2Y3[k7-Y
%Q?@%j?@Np*lYG`q5Y:fps%L0:\@.Er`i%dE"A)-?VE<GpK1%Cl7^X8C=R=K3inlsVGCO4*:+>/4q43d6R0i>t<')L4ilr8X*BZak
%S%C'1/>cQ698e['(5^TgE[j06CEs)(2ldEkV-LWZBYNk)H*oXsT@]R&TZ,sl_Cn"U50joQn27a$RsfXE*nmIEc`i5<'4'qP$(IK`
%_O4bWa^oHs;nPS?a`<WWq=V5d8$3l*%oO<Y^#u;kM(Keq8Wc)/NFErBF'_bo1a\peE8.8El[qj*W&+7_(IJTA3Vo50VFQ8g-k7=p
%de>ttT-b3d4?l\jfp/Q5rl8A"=l97(I_+AB=n=bg'9o%D4d,n2h__7n5aq)39,Ig`8Eh/dg<&PKl,Y(HS3B)^:W=iIl84C^IeG3^
%<Oj.8GHHn>*m<p`qqHtL>X@A`9p!;$P5nIO;?2kBWZFT#b:OgDQlgIX"+kGL0D4Cf)#g2#D*A;<V*`>)n/To4'-S!pk]uCYH_YAZ
%dsWGQf36bc^44h2c17,p3T9m@[p5*n^12Q5frfa7@=I/!s0X-f7nGcVQ-2Mc[9$oON@gBd,K"3Cn(,DIB09IGGE&0aeWk1Q,!Z"e
%4qk^1pX>3'a)D"JLO]*ihgY<tJ*Md'r,;W-S):LXe"m!s4>PV<A6_eArhk.4d.kNYq;!.kEN+HYkm-djr7S9'p\V`%c0OhJo?Y2M
%LYmOUo]L&f]>+@(Du]cCIJWP2J,J@,4d7&_MuR7YrI81tO8IK)07WQWhr2/]^d"41?fRcnqcBq:0(/c7nH$Puks+NarK"YZ?U**3
%l*!>MQiC5QrSr,!O+2e)%fc&YN2h?D==cBB(t4eu<;"2$r8?^_s(6"H('F?FL,ktTdL'A/Dp/oHCB6_lQi1fHkGQ_WLQ9-$hfi2(
%L+VB)WcaC1(CY!LpT0@WL))rb^3YMP%%i;N&Z>s;,9G(m.)$]N-**-!-/;<fakQsYkL^"^GN7](nD^3uH&ok9<7U-l9J4t?Epg47
%1:o=AX)V1O+Ma!YGXK8nA1VkGkkYNBmmC-IDc%?NXo%g2(D]B%)HddX05eVM[\''WR@05gP&k\_7TV$AE5^-J_!SamG$)[3Q@M8<
%kS$'lU[p^lm5e%%aR:%Dijh$Qau1+b]dWCT-gA:3Tel9*#]!UEU)SsJ;[a*JD@lRkTZG3a-!<%`^38DLGT-4uh#]>Y#1cZck+dT"
%&)P:-"a/]FT4918W+cqj6A42DQ"C^#ONV)RW/?3O+%A*=Ac_7EC+^G+!W'^omI:8^b[U\Ca+%8Hq;\d[aeqB#cbKM9DgqRZTDnU=
%s74dFYQ+1hDuTS,s+$#GAUkE]F'$Ob6Cd>lcr(-,+i%XD8iu7BqhbG#npsEFpNl_%9+_Y:[ttuFASMEB&40+#CRKke1<\&a088(6
%6isO7XeMS!>(rT9)29YBAmog[eXYG[5[?m*-qC,;!kO'\j\2"8fgs9QXMU&p7nCt;)!Mu!VHDB*DU?,Q5O6254H\+YVL?#+dFl4f
%W-sM5:J(e(E:>/oZ#dD'DBGE=]=6`EAJSNF8GM%&a$[\b$5gqBL1=nunjYBhNK(YhCtdKX_"blF4-%U5T!H3q]>V;N0'e5PeqO"&
%R]9C7QhAnuK`m*<k[GQNFrAaP2e+"uZ_h$50AsDZoe\0r'V#cIjAeVS,,$']RLB1Ge7ubGOrc4'^&@jaji&S`.^$Il<:PK3M\Qc4
%Zs<>1S6iG4p;3!3rQd-#%/&&S`</jggkT\0-YpI=[;rkp]m_)&b,qP\$uUN#dqJ)`JV"j1S<7OZl[5)m>sDF27)^dP3(?2:.L#U_
%8nHjZjo%^l,L=.CV^.Y%[EML-Pi+2+Z`Xs=cA8Y)3V!qpG#QV/Nq=&+[rJDe[WLF*f8i*Hs+Q*\%99?sHZu=iT^;iur[s\i5s\`o
%Y\VF44V*V7/0GM%A/Z/90>@jSiC,g1WEcc#A*=Q(A"+26GI#Zqleh^"0F?FhfDXB2MQ_85(hRe(S-Crnb,N@>Oq_tn,Xg,&gS45g
%IGH%h;Fp4D;8S*k%fEO_^9+4Un`t&ho]Z5q4[S@=&EjOB1,?o_2Gc+ZKDMO2j9@KT1sIpI*_-K=1,6/W,kBl:M2+,UU(NDdaq<G#
%;S@S[a,]XPC'qhK1(5>m@)/&LY9f)[-Gj:17r.eYcUL6A]6_SNTgp@3GUR_h,1_FHEP)ZmThC';'dgM=rC;?6Pi5lX.6oj!H,Ka7
%btAh??DJ<N5^q=DDAt),]>H/-AaUS1\ae,n;6Ok<:4]+k\0jR%+I8#af73PqLKH:]0c(91\U/uB"?6r9bQ8)hGf/k_b6of2#e*80
%fY%t#O@q?N`t>U,2&68rc8tjjhu@OpX9pgNZRMB%j@T\$&V+-kq&'_:7_f'h_`is@12+()!LSg/N;Fi6#8<g9BHs]K2'0kGPc,j/
%`e1aMn-?p82eh\GHK]/ZNc,`9fKEFF??<&)'K3aoKKS%F%ONQ0foiiN`ZqVSFc\f/.m^&*jU"8IX>9;5r?"3i0Up;+Bpe7Ia(.J"
%"#37lAg6<B?u^$nd[8HKYodo:J06F"07?$+:m2*>lq";)`V],?lbDtA7E#9;K"<1+aj30:,qa^0>+!mi8F7dRSXQ$^+0QDYW\WSQ
%_,K*Sc3,*-n?Qeoe9s-28`dec5Pg"![V`?NHIe7>&T7/#J]"!I$nR)uRN+#3^aa,QX,R9<h*=O$TrW@?nI0?E=m[rE<?Rk<YQ+(m
%mb_R`(bJH8%</TO#oh1(@46$;iJA'Vj4!"jqt<oS!?\>(THM7aH@VB6Ka)%\"grc)o_rd1(-mLge5&pW%GQ^AL>b.4msohB1^FXd
%ep*Y4&Det8.=2*TR7%@9B@8WPY)H/;PUHoWpepE7IX:Y_O$5I75[]t"]F>H?-O1^[26bh17"[3l0Q/ZW:VDY&fa=:f$H4f6PNE(/
%"C7)^&Ss>S]XtY&o^J_<\d.$]@[R>)IAlK?BQUd[=gqmP?ljFrdpSZ>LT!,#<($3&U3mR_&2%P"%0?-9[Y_WjJ)^^UU-h5N&O82$
%b$lC=NN^"uW^06'G*cstS#:uj5.L`cI>E7n3IW-=j4f3kC7#9[#thc6n,KrgNaisXl01Qh^3(Lqc'FS>dMu\MTbn<iG2%8(4h]^D
%.4(#n(L"XBWT#.-0nf)RaF$8;dio[i_>D";.1-2f1!^&"LsK,aikSemp]0'4OW(gKVV$Y@E2C[9Gn@Y;A_4#oEV/D<#45HY>IRtd
%=Ldqip"t#(,9?$L(*VL@)DCkNGYeIB,Y\9341k=n`<+m9YM&7WSF,RX;to>"UhRca^01-_UbsF%pH]%uh2))ska5.qpQ+51d<q=8
%Nse+696HHC[MX$7!O5fm`!JUV'+IX^ZdqneM20A**,&#C#6K)X.aufm]4k266!0.B7erm:S\'COcV<S#a5'Md"bts4L_SZ!3,q:e
%C2q$?C*M#qO:+d>*eahF`tnooW-Hr*%=GNP17<JG9R3M?0tBg0-$QQmnF6N5$Ki%L0P')<m#u<qYKPYk'O+*3ck2_\R0YW!TeIgP
%TE-HHNZII;`.#Ugf2N<6/qT>bpODN8mrbj?9Mq+n#t%=VcQ5NSMD"'.`Bbdb^UAeuY^'RU<T[S+^P%:@Infs;fEcfgO=[d5*Vei:
%b1p^Vo?\2sQX^nl(P=Z)o.@R:6LinaZptOV+UL/p\\,D=TV3X_Z3_I((Z7P68aY@"5C.k/m'DLj1K*Q>.O-VB>Ts1aLX$NHD8H4p
%B#i/YC;CQ"T"%Wh:Z^N*_7T?dh'=h>jk]7;m@"3foM!"V*;/QdJR31e!n:pEN`IFXnpHlq-,#'"glJ[*_TAr]5jm`[A.>Xtm_cuq
%QGD21^]1(D.'S>mAH3;t('6O00%l,h$%('cY[FAL3(QRJ9^.3+\fqJ+HT"$&.(Blgo#cORe6!MIVB0m<_hV@3l`qRU-.BkEOLH>P
%Ajf#_aHQu88rdf]PnGo"qWVs"dD%JjhMmlDcd1*3Z5;;?i#=?(3rMZ1H,<7`DXA?J"9(<Xg4KEr30^:d*oU)RA^W%CR9WWe;'%1o
%4WQp@^\LmaTWKmnAEWpW5PU/2-E/.W-qsiX:BShWJ<X0;L'UOeO>u$F`0H?o20YK+/QdX&:7G6Mm*5"!g?U-ja,.<QqaZ^N`1EW#
%.(oK1<DpE$hE*n,j:"a&A7F/PZA:E`RmZB`&;+DmE!?kXS#ouINEiD$PshD(^]#1Q#%4^3a/]>j;9'$Vf?Ad"m35Jk+Orhe1_`22
%:G\K@:'M8(M5G"2o,^7$c7.8?;,9XOPrY]/3q1N`#T4n2!S,E8U9RmE'XTIOpOJP:1'[H]<kW$J#->V6,3Ejk!\PblJ3$s&l0$6o
%;!?/D,l>:X+$E$QhP=e?eL<]Zdl>!>U',3WR7*\kkTnUgEW.bi#0?1F?lBJqAj_7<Pb(:q"4#LI;h&[ls,C)30QX"117EnJ4s#[q
%p=JXHaS;SgKn9t#hJ-s#YqWA`RU^cSgP4/=bqE8fTG`q!rnYbIG-&lsbJNG5rl"nel?+H2EolXjrZW4T4l.B24+%U4*?Tn59mgYC
%W(RBuZ#,2"hVh<R5?R(i]`/omTe0jCfJ4fp4gr.>=cO1KQ.=q?,c6K@;3=a99^SE[d63]0VoF6G/VRmUUNNC<Du[hP*Fe'6N!%.,
%5!/[O+P#O&1TEnt(PBiW,)e7X_4aUl/d!tSjGZ6+PMcQ?oZ$At4F$n8)t5*@be"1dRq@I%gCgTT.hV[^nB^#>@g6g1BYKK@7?ka1
%:pK<`g!/.rE\]=l$QXO9!#snP.&3b/bEGu$]EKj2D5f*P1LELW!d6)%1Ghpn8O,-oWX*\';7&4rM^1ZqLo-j-X:Z^Yf]I'6RDJeQ
%5`CcecTdqg6/i6TbTWX*B4m>[H[[$N%AIa=7sF=U&@p[qJri"p4YUtA[3]9m#j[m5NaY6>/Q7a*!E$1"'#H[g9b37s7:VF(!)39j
%^#&nK6O+:B=$rOT9oM(!i64X0AL3&h0LQ8oIJ:L(bN8JC](!Vj#pW:=b*:icV^DoiT:WK0]@u*LedofA!h%9FR$Fp#j+UmNn<Vo^
%`[-5(f?m,#;HZNq6Q+*W^02^"=b:2g<'eJg;=1_F<G.2H3:NG=icN!N&1m+rncnjhQjCg?T?5YXXC8]G8sGG/E$/.mENQhh1D&$i
%^]JpPM>Z9gBd#c.YTaqPZM?r1g0bbQj/=heI%(MkX8l/NkfJcW0VTKN[OSb>D,SJHX9>12]!R(@Np8YtYp*5a*eBLkY9Mte5l`g(
%.+-5k7EgKsr[[n0;_1jEYEq-7N])p3UQj+6p#$(Q:E!Y&S*`LU.=ul>7#Qn:&HS"IJ&pH@.Wc#E#IPWKMsXojGB>:T@Lt3_N[:W-
%(C+)7$Y(MVjJ<CBcUb2ND_T$Pg7gOV/7=JKAc\@>_TaoBTa.(?.q"_^<SZ.V*[T4,92T&f;.#KR%E6<(8=`D/';L&QWJc.1/pi20
%<JODPjmWGTbU0B#V!?Ah/'ccbWtQHG'8f\'?fGk>Om<W_CK(!:d)O-6g\;QHqm8fTX7kMH[JX^irc$d<\!".7e(hgac]LU46R#2i
%7:&AWr^c;=00tV2H506aP[e(`c9')%bZP<2h-g-7@t2=-,(q8JckaXZ_95@S+#$mjCQe?Db'&p:C+-Ac>Hmt22=eS@X!pr::C=]k
%'<Q$"+G"UnrYu*ZV\nq^@!\ir<;6k>>lu5uAN(Y1U>/\tLG`B@'(2/C#07U9`26is%!bq^XV.,)P"G]^9+%cke$D_di8`EqcO$Fi
%-NS#@e0ai:9#bW'0tTd73MdntLE\Vc63XAa@Y.S*+gF&Di%dt-B#'=]fZ.Kt]g4ad*P[4(dKE0sX>@D6>0WYX]G2(6`;4_cAfd*&
%IV!@n+[*HKQqq^5I5-$CapMWqkmM:N[(Xeh11^Dl=_BA@HtoL?(ub:u`jr[bgA&)%Y.&T]jkI8<30s6Rq*;W3_P\Y%!BjRk"l+c`
%<AloRU<[AiW&/d&%](8&BO7J+j,.gCN.`Ah`&!eh=B1+<r%Y?:8WM/<OSR,C3)DCXqV-'Ws#mPRI?;R<E2GWeq\Y8-/j9EgC=A*d
%61\`^(8C)PZmZb.l^St9D#+H%-eBQN1/gMi%TLG!EjSi6VEbNY3HbtVj9^dXBB$(urrl=O@%5c'?_+*u!;Jt$%_ce1OE:Vd6=k,1
%9u>M>4,S.ofm>T;jefH`o(Xa8@(%lBo:86sKoI3U#?';+bKHtW5Zq$;@<7WgjNYoeMnU@A@hS7)LABOI(I9AP[1'/ZenPq8G+WQ'
%'2;'BGng]O+Gh:L#"THLd_28Re@n'5r_EcJq&iD4g,(#.MPT*?1_EgfRa6^gg=s!f@@j8&i$OjDT8S*_+s7X2Z'^W*6Q$?J>R;<J
%nk\I_?t<+H(t]tZjZocmaW1Boh^E@RRM0CT/TqZ.PPNlk'D!W/PnUtn"s)d/&W0kpXKK>nYpB+1e1e1%^]poU<Y*3!cVVZ.o8i%T
%6oO4?$%h]i4Ai>SSLIfkEiqs+Iq?'+L%nJ^?sk)%<ZgKa$2.(?al&!JMfi$&$C*YQ^hFFXbaU2KZLE&\AQ:Ge2Oi'jci]F]T$X[g
%*.+j,EqfDhPMlLo9Ci0Q2)lY#C]gRXD3B#I)K$N2FN$P;:W\g7bMH5K:*cV"C_1s1i+f=(FL6m"[dh99hnK-8_QNrEa=PKBG"=U:
%@qI%9^9dACY9R0rCIrMm(M@f.&1Xpp7>pjaq$X/akgE>,0%EIU[(l&pF:F2!P*UWb5hTSt@&hJIlp*99O]q2AF5X@V^>f$'N=icC
%ltPIo/F$E$)>WEm)D>B/K>\jR+M-,*'4.f2MCNn-dhRi/js6M7]E\p1E:dOnFXB+r/>TWseHip/4b,0S;"V\=0nYkfYE+,U.=5YF
%1MctN@SS6m;//d=-Kj-f#S#m-*3tF=@b9?LFFpo,#B$0>B&RtuZq58qBAH8.qsOE$E>DD'n=h=`^.+2m:YKkg4"qm\dBWm`T2(Pt
%@]3CjC4<$W0TND9b5iuKVqNN+"YK_+%`H#R(r?p)AKtOprfF"P)-X]Z9l[>jj"SUf^t1khPr.-YI8p8uMe*(#NDE7o"["7RXWTU_
%prN1_O'YQ>f7G&D"2H*]'n6-:0^\gE'Pp60FX`@P#\X?b'!pS2F&7jBZZ7BA#N^o4*=lKVp5#K9S1H.4'->uU5%M3?-qmn!@CKcZ
%=t*rWpf>p;J`3in9%6Z-8t+=+c3IIMS5psbIdloi\KhcbR=e<d'Q_fSR[eJ[=G*3LLu:^!GRH$es-0Vi90f<lk!a;[UdA4Y*p?8U
%&,'qPajYP8qWJcpjs=&%Ub%8;.E#E:jS.8'M2Z($efDb:N=(^CB4pFi%up?7T?9!,R]%i8IeWiFHra.kg;Ok"e"feZ"e\,_E"rWZ
%/#(7#<rZAbLR)MD=l4HJ&^/%_D-8g0D+Vt$[!a".53<A2Wc>J6Nn%Y,V4,GgX.cm#ejFN^Qa3Wl.G_=J;.Y,/_%J'b'\-<I(GMm^
%f:"O(GOLTaTo>ko[s:`=,ZfDZ2mp.Z8:MYn$^#-h)aK38nm9M/8dr%lhio7)IQUb9YW=*I3kXdoj)<*Zgbbn,/Jno;Eo$GA1`)#0
%k#WH%Kj<'cQK0O25qm6faT8O9WDSeo2a=^oi^g'2%D71?bi(`SNT,?#[UfK?C3L5UP5X7VKN;2s+im1d.*NL#7'8brqX`4`[W9ag
%OL2KRl!foLpu(hm0/*c3$^QOUH,`BM58gk5Zu+iG>]n4*Pf#)YmrA!BcV?Du0n?1fQ:Nd\_6Z1XnBq+TITh?(ATL,"ZZ*Spe^Jfp
%/<5!<`"EtL`/7OY,"YYmN[S_C!:XT28i!?nV#mmF]Y+"5YE.]P@@BoN&G)'a^qh,uL-BY337\DUU]/n!,rIo>.r2KHKMBnf3OfQ0
%mP!_lH.7E/g:CE9>U_@tGK#.[>g?.tA<F]N+]U"l[_AROPtSckiS3"t&o":uf!H0Ue\R.e9\P-.hga?ME/bB#UERC3pG,S?@@f_M
%:`^@[dUj"*>r0o<C][.kfrVYs&&;o-GUmO^Qki82:8O0@LG.3$7kaV&KDW]7WPu_UPfP]oJBc'$0uK2W&D/_0Pd$rB;&c/:)=+hq
%(KT5ZY["%_0!,^SK/7W1kIBtGFH(EI(gj>(A]ZG(%@/I0KCT3-s'A+[^EshQQ@rpW^kY9Tj&Pa_ounT%^uCb^U^][tGk^pq(L4);
%,3edi-!C7F;^R)q3&"!#fG`0O%'RKR@S'.CfO2<Ne<#7q.PcZ_[J7Sm+3LOCK+pK>Lk#-mR3Ht"n0`o>/a2VLQgPV?=m<L6$H6Z!
%S-8s88#Jl^^?YATQWWm3?O*F9SQ0A!cV'rWC4U4R0Wq`tF3&DND0Slo690^ONMei7OoBdp-EB)SRtFHC;AV.U4IW)Cn%pKiUWK;R
%lf</nM#ESF`<4C\.Cn[r9I`P[E`sJn3An)1>[E/8r6P,oWq"PFJ#=EMXGfuR-$lHpIj)%unqL]fJsZbXCl4/M+ZT(GUBW%2B7d6B
%hc6)>F@4OQ6N=&AqIQofob>E6_]1?B+X+gRS.>'XLTeeIFWa$l9`99\p'6ZN<F#[8N9p1Ki3g4R18Y(R+'k3JF&GJsfI@/"hkKW.
%qgb(2pVg4JS%YH.qkO2jh&l%UrS%iX2?fT;GKQDaWFto4WVBuMf)a?+osGM5iZ'LH,7j;1NFjPkr1pFm$iu;S5:idb8imD[eYCar
%6%gX9`@UmY3"9,e2eY`5brf1S79tTk4`lQ:n^Ud<N)@f/'N5uM;6B)3gfLZ.[^B2*"km1sPd*^2i;:!5kjWi*>N;P]/$sQr8S!>%
%&mqJ\D_p*9l60;DCTMAL/-LYpk_*>bZU;!Nmr=/0*=q$+_8CnHP>g?I>EWbFebhfu_6?WePj9^<TrK-I3Tu-E'or9ikL)_.b=!1L
%_"GO55Bp_CR5g\\r\\up&WiJu:_KJa3minIXIBR[L=;rT96tRMS3d`RCt`i]23U,%HmcUrGOPOhYmjWd>IW[JU1GnH$0p+pn%,=6
%2(/b.AcrD0#6ZUr)heqsP'9[7PA6Y:e2TCad<3jn^&LG).-L'_W;hST]%$f"6>YkaI]k5fN7t'o(rFTVV_hX0/hh;mQ;YQ'\>Z9D
%I^:ubaYG8\`GD7Rn,M=,#RMs%]ScmGm#"hCGq9i_'BB!G"u$+TBCa52+6(BBMcFjq:p'Y,-p#pu+g81#G\B#Z$LcmP_#p3)%\C"a
%[)d?P8'1ouQ^oP?Fpe.t87^dk+WTNMs'hWKW>$=M0*h1g&2,H1%F\PW6Ou6ITd+sGefNp#"l[ZBIR^-?kU7EOHaB"iY_=XuQdl;a
%qo*VB`J.2V9i(khR8XL0>J``37nf`]q>U%/I+6IH/]h"2g]KobSpEBi"=8Y!+cSJi;VC@ZED_*A\8:`+c;D*bdp"f8E>k";Jrtrf
%pODZ4_,[S\1*eb10gLuZ</_4@/hIGWE@BB9$bs'^lEF--/hD&lZA<*DiPJ&efPtoAD!AD>3q-ufCg-sK[$]Anr&CIAmaDfK2kq\*
%D6'@W6'd2VeL9C8ig-#d`[IR7g5tSK-pY>?n)+/]?Z_ZuO3.&?5MM[pi%6[)`$umQU57H8"SA/m.r2'!)Ctlr/?#DCku1TCE=\!6
%4F7#4%rgmOm5`?q9?c-)QjiN).A6b0hYeMLJ;-"cet?:W"\?@d9=HIV1N"q7IBJOT^OQ8B?*Q(0(OZeg>-f4"go'#EBU\GQmTs(S
%$W\Cu1b:4AMVG<KY1mpjes9/=580]2Iea5Ps5<@&c_3>=](XSE-mRi\eY61n1sbk>7Ppq80<7mm:=H(SBse3(]f\^*)YP!V8f],M
%n,M;Hek#!)mi"oFq.M/;qJs[i.Aqh2`Nc:m@_NJ\>E.oZ,,C/k"]$:Gd^6+$F<Jl\+dDj6I*38J36JPR;7%4/-PSr@^8!3Ilu@_C
%&L@mF;*0g[0[c&fe\2o_E)<rno83TCnJ,\V&6p*,]^O_W_0Xs%[F.-E5Aa9@))6Gh%b;q>ScMP?qD'J9"UrMcLtVPt'@@;JU-aF$
%A2HaF8ji[g9Y#NM#ENdZ[5"Eo]j>^o%ho0SCD?j0/WC\/8A6P&9+GY4&6:QE#:ZrXpI-,GPV$:n7(5L!5C!,c>HZj?A42#rmaZ/K
%<d[XK\Z+f),6WnsEb1'pF413_JN7;U2r1R16p-?49!El6`3f;E#D.2N!uf"r8$Dqp\HW@'-[LKn4H9p\Qi]F%Kip86K>Ugu:4XKa
%#+C4q.KG+d(Wm7`C7,i(IZ#%?'_d(+JI`g\4IQ#JTFO?)G)1<C!.5G%)P,q?.)iWNRkhfse^9&M?*&QJX\1sR@(FY)?6Ue)/G^I%
%s+:P99i6KB`sGc[#70OU-[XENXo$k&eOVkhr*\)@*.r,0IL;F'KF2!#_b>[UL<U3k0p8aMT,r.5S*fnKFM$u`rr&Oel.Rd>:"Oi&
%BtF==e`jmH3^CTQ&`lONl":D%H%`>_c)f5G1g!7]EsRRY27'Jr(mk=>d]X-shAk076L,%+IYMLjM@SoGm!gS%[l3>+;'-ku9TKA)
%-b61<oIrSC>BZ!`H1TOE``CKA`05Igp)@7d.jWFr-Pm7B*[+:e_"Ao,"`c!Kl/(T(<oL*=Nic$cGqhCiZ4Vh27,-_>'r]m!;MHP#
%'93"()H<r7XB8bY^iW0p6@3BMJUMJ-/H@iKo<c*'M^m!>d\RW`9uMqqF(Y*q)/mBHAQ]8HmI+n,,;.p)&nbWCYm[%#%g90c"jeV+
%*J*a[::%;VWaN#jQ^<QeX25F4<?)JR^.&oWgY6n`ER=V>_=KO9n>grX:&KocCXYTTq.u\?Taa8(+N3:5BHC[E^jHVK<#B<0BaK[a
%XZ1j:7HP-c=_=#CO\\>AI@d*AKV*5>IPBG66,(8Wq80G=+T*4X\78MmF^b;[OTTM+'V93S+GF<W1n\nJ`J2H%68h+;$>0,XfF01M
%)DLTV]EQ+>B9k-A9d;&6rl.LmCsu\CiJ8lmmQM@8k!qej(aBI)>'aq<:nW:I#j#XuT"qnclt@V7]*mbL+\fD>OnAV`o7D)n0:e=!
%T]Y10ALrrVLt),-MVS>%?]!N7qPlhW=GC3."2JXgYX$j<o5]D:%uHHd.`f&C\)rr(j20-IJdAockgJaE:>bU,Ebp_hYH!#W8l0'c
%KOnuJ[`!fK[UoIIC*R+UF=FI_f$,<f;>O3l0TD0YNhg9am)h6C^<;k.1@fZ=4P,6N"]=@<J#C_>@i_V=8Opk]P^l;!P<h85*iXG"
%Febd/h?'!/U$=Kr_ch;Z#-VU3XoV>\k*hJf5h(\H251FC?m5'NQ6=@g^bH7_@VqeLT6F'2;I_4/!E25eQHJVHZVfBP-Q;!Ma[lN:
%-N2=[04P]*6S049I6j6%UEPI:[b$+d@m5-!9"D%mYAr7#jA^i>!8s=M:fX0DG5X65/3KKUYPO^/9nW(B^g'EB!YSmWfG=q;+%bPq
%7d\@QbFfI]>)<(,Sq6g,!=2[+#eEuQ%a7FukY"]A.rgI8b#$"N<!5/jq9^R8&K'^Dh?R'KX$f>fC+_2KMe$FiJ(tB7-<m.3_P<8L
%B&H:1hkCJ3!2)if1""7!_#U_3M=GPRp2?7CqoN(pFEB(Ya@KaPBh1RA6edU5cfWd[[#!a8j$BeYZC^_1iN*sK4Dhkj<kKBA@*K9`
%X/jO7m,r2k]CaWo=QohTln]MNV+UR%3g6flY^>6g2<lEl0(6^i-.!ruj+&(Jqdu%!<N6=trHLI`Nf+I!7r2<4Bc&n]2TCrjTP&%@
%]Y.%5:!?>C\f@(H_IS3(-:J2T6cCfdFu>,WS5QkIX<\Rhfb@</Gsen"bkY5T*E%c,C1`+8aLiO>$TgDeV'r'/5`\AS9Xm6!6G`N;
%1SCh<%i#S.97tA-lC8FX"I;fRe'RG\U'fD>P1R=nThHnPqd"Cb.:C0;J4)*-l24aT'E1k?XO?,U.g]Z&g-UQ_bl@g/;+tYgN*&sh
%6&_->;[3F?%Mk<]h3TM0\\auHOW/$oflmUTQBMLDh?GYf6_/jn@9u[*,e8KdMQnfM!#kWp=T0)_$.]AM.dXAXGUW\+nD2F6Zq=sU
%%fPcVeMrl?M9RDSBQ<5,dfZ%CFK-Ni70RoQjFPa"_"4U.:.3CJf\EG#WsnZJC%F:boV#7D%qju:;0HRt'.uC!S+tJ`dYVnS,+nX\
%.h[`GGYU_r8E"hC"[q;q3CQKu'hO,/ge4p[&%Eme=?6)4]E7KO-&G'RY:DBOok9ta>37Y'-b"'bC!">PYK/=KO=ScFLedn,N#L>9
%T,@U+U[5=\r;+clg?iM6:QGBea",7ofY"S7OR:)g@T'KIHQEHOd$=JMD)3`#,SjbR\m<mh*kK.[bdIe,:mM%t\tBi.QHU2Q.;56V
%DQpEQQ8QoZ\%UM&F]T*?p9rXcMN5/)+no@";86hLLE"#GfgcUtgnnGK"!DMO2BR]234%i)4LK_7JM*99+*6^di-]fo-$$Y$l'RES
%NGaX43)>?jdTC-/1u/[5>h81t9>=RHFu)f*S4!5&rECEo>CM8nRmScG\!NDP(mB^l7+EP(KB%%SN/=L\:H>[SmOD-ZoYJD])fiCH
%b7I%6BMU5fS7>6C\Xb@gn]\#BJCJkQRt>J?D`?7':g_t#36H4Oh+(hRI;@TsGEsN9?5[F@_&5U1_HSX.\t,Q,MAI5"JS7jM'D@b_
%S+M*LZSpWG)QjNG!LgK6%:9\qAE_HjG<6clD=OHlXS/otp]89Z51`Y\.,@Lo'\ueJ07bhuA!j&TDGEds*7L<7`SIT@jD<tfiA'5i
%gnh;R>("V-?^$]d3>/AUDf:*%SUn#3"`?[+illp"g4ULJS%b\@1%ner;#o&?iCXEC)Bao@%4.aba4m(K@^!cTaB+>\a]\nkn8XZN
%;T"NVHE<<TPOnS"OoCX&^]e`:eI526D<SWaoBj`5/!jZ)#1!OF@1-594Eh`-!*Dm5j1<H=^GOZY(]n?2moBMXeNM:#:Fm:9J;EU5
%4APZ/P=#kIejEf<U8Y7dL(plr8`5A(QSQtZbs3ZR8!_)_JLH(Y+%dI;UZe\MIP80sK(<o5Z\\J5A.gf[h<MSo&'j!)J"`,;W8NcC
%Hn$nj\Xmf?LjJ!/Taj=(r)t9NH?Jk1.ZV78R')ge7@O+fgFA9$-2:Mm^M]pDFdYqC8S"-7nC-CP%HMK-4&ZM_Q]f`F8Ej7inm_1C
%\F@Ed"r^*6U9^)i"/OSmT*]=dZ95o;.9@<]/F'[BKW*"GQSi%3YY<'bL7?ph&'E!67tGs")#^tjm]<=t>i,s;eMbOQPm7nL^e60*
%$>>N/I@1SSIgL@p7ZSf:Z(K6*691K$+XZDZEE!"^Q]U'CA8C#[Au,ODm3nkcrG$MK!26];.oT0;#iCI$TNV\sW&R,2:c,@VnsXPL
%3c>h)en$^>M<(Vj$EQ"W0_t(AL.Z`-7IW0Mc0i3$o(K!M":3U&J;_Ilak#5$.#3/F@456_%mlo7M3rTh#s9=s^KSZ;f<JppSPVW$
%C]TI-l[XRU@J,nIo`9")5(mpKY\:LfC/_fc?+Pa:KD\TG/&[@Q7d:gq^LW>!4-YCTiGh@=7Z.th*-3+A:/AVT^sUNJQ-ltRW#!/*
%3Fcpq)6b7/1M4K+b"GH'c-H*=4-iCXIO[a.jaD#lDCeUI&8$B6;LshHDULE7K^o1aBQF3I)mkBX;=LcO+AeBA6Ouo=Et/Ha[Mht6
%Y17Vra3=Y5;;c4u)Z:?bdM]#HN!J#MFQ]C]"F%.A]=oE.n[ttV;ZOCnGAgr`A=ti:f7[*J,GMWp]Zj'=@^=k/)+IHP6pjKjPCL0.
%e7BJFeMD8%;:S-&M!pbeVZ+fo)Y#N`c=I,"?CdD5$nW$QgFnQl>L:CB)5aYD^\F%=F1SoRMIoq&90Wpk6kbe\Kmr1Bn#Uq.Ggs_H
%0e_'U<sRb>!j>D"8F(5.do.UtKsFpqH_7oIhd`U#J<F*W(?@'H+<,W)p$'J&:!`D-B'T!U_t7(H_hB`4!Te&;4e]DB&MK5XSb#OP
%:`1W@F'if;c&_c9?b_:.+^>d.#./S$g+Z8uT)kd0Hg)<>F'pD!dK+'CAR#_OUoploQf.hBTndsGoBj,ih(s.o2tDh'3J(P)]S,h`
%oiau7=gm:nMfndTi+`TQYk_(8+Mh#$70guD=sVraRi?B'#CfB,C/?L8RKpc_$WIN@%Bud-PR"Q;F=i#nRZ.5^OuOJVJEhU3>Oo=[
%]U<NZ;'rj)jtu=IdM?:45TT5O1SWX&&"jFCp'[/.*])[7.iFoKrensEGLnBLonN][;-OZ-<RhDk:W4PtTKcHN%e5iC7<K@q$9Aog
%)"aM=dKe:h]t#$L;jk?dh$N8ZD<&<T%UG/[ZrtpWX9oGt[W1gmAPXf'.)Zu2c\4tj?,MQtJt+Yc(5j=`\D'mt#/?$Y/.U\"Am2D)
%;1CiUn9,6X>Ur^B>gSR<!oI#CISg)SNW"OC1:!i[jrR1;EuY"p,Qs^>LJ+\eh?#msd<u)f^R^/"5MSA#'N49181*E9L!NtWEOI;[
%8%KR81!H4GepacS]/58$3P9%1Q+`gnMgZm$PW&#EK_L=L%O:4QTOGgL`4k=[!_4"cYK/GO[OQ',13l'Y*QSY1kFH_bPFIO@#kp(0
%WJ[YVJj:"M?WQ>de"CN`lo.hSm<l?>c"]D*c:40T:du1XDP;H3".K='.n!$1ka8h`QOR';X'[KcH3#.U)M%\+a]k).[kFdUEkQl,
%Yn'kNZAbI$JcVi]68fh;7X;`-p1UU[@XpeAZ,`\Wo3)1s,,#<K++mS9dN]4C5WT_5.*gLBQV;#t!6cSP;abI2%2WW]I)C_4(\%Xd
%10^_C,&A-X9@XF2G,$YnIkt^N<P,2`+)XUJkIeb#:qugc!$2fP@os0]6QQoPH#/p[C?aksD*CEc&mDFD3"pD^mFG+tVT]1'5U<\k
%"lF>CL#-WgB,@8m"HV0Fm5>N$\25RCXfg^=Lq89;!?gauo"jaF'j7*.8pQB(q;ZA\/C_)(g9b>Vb4cGG06r<;g=:KlA/6XYCUF95
%VG3a14VT=a`5nV@"OAH#.AR^[Us2mS)\q>Zc)S8";E<%T('>IE]ta`9dtB[c?!D95&ScX)Eg>iQKGR+_60d=[7dg]F+A[<r>.OeJ
%]8RaNm[hW6)sETQ_M:<Em6IW>qJ*g[BYAsP:O"+7*YDfnihtLa":Uc[#h1SQ+9q2cKZLT$l[__S*Rai>(Y@PPAJ]c'i,Q8.OLcco
%*ZWpkX[1hZh8*-)feC-2%SgEXd8,572VRFC#"ks/WnT#l+0oKH[>e^:3Q5IF-il9(\VHnebR,#lJfdCK7UbfLqN,Kgq1&WuKcOGX
%+d4Pa`(Ua'\AA=L0E\*jJM[0O#5ktGE9;NlN!g3*#B_/N=(-(M4WP-\cd?RXZj$f)BWJs=NXA,g1B%oY#%M>N-q(D47qE*E!i%AI
%qHsTO(dka#r0'Q%97c-72)Ulb#U*[%GR5K/dpq*RBR4eJ:?pJOiP*6HZrgY@/_&jTKA41?[`k5KH(EH=!(H0$YbF\d`/MLRk"1-U
%rIn;5(<THF)Pk;>d\M%H/jTFQcS!2^9,O@ooI+_"6I;=^#WR!pEONuDD/f[u/rfWjg)*ChT(m,S^3,F#c2Km:R^,YDfBfHYa`rQr
%p3O@G&!ob)K(D:K"+5fCBU0tJY3qltk&V]5JuT\K5duO,P]1j#/p!M"`u6%;Y%6eNeTS)C'AcHugc.[HqhPsZg%O=%W\njb2lLd?
%Al'I)hC<E,dj'"$_kepbdA.%P7A"'+d&NjGY:bAVW%GLf6,mJGB$C,=9*BItke]@O@MHB4e?F9Hj'?SlD0'9pX9tniU'`,nd3-V-
%2:k.GCQCOdj*`*7>rBCPVYiunNHQXbl%>uJZnC+8ZR^DHH"fpU6eR'.Q%]h1m4=1c@S`HpmgI=UX`=4LVR-2:Wrks^/iMI)KeZC"
%BON9,UFE+Pk>?".I&-%:2:8i"%_sTa7G6>qW5:H6:_#\`ZV@p\[#4HQ;E5552buJ4Wn?ls^'nu!Mqs\_luqk_96R"^[%o3orQQ%e
%CKf6*&3eDUlb/0kLWgG*h!rMWK-hp0g2qO1)!LM<0XQmXQ?psPinJ<?JYZ2/bus70K++"ZD2ut>fp_iT9Btn%WWg8qlaT_@H,*kn
%GqqdW4O@T:dl3U3513%;*@G90nTFIH^\Du!%`,0YWNb.hU)3lZeLErkO=U]WQ]Elk&?LbN[5g#-aZ-EJ#7&Ef-^\,:#9`+n9<2DY
%`h't<(7.-=#)*J@3a$7R>sjo$UXWj$&l/TDP$%$OAEU//DNq!oiWt*?FR6O&l676I-7Na[Yo1?^-s8Non<kuBc]O0$kQ!peo)=0)
%;-]L#EZkB.g8N0ZeMT&J6P+(OJ#YY((lk(4hs@(MY7X-afnq7gMOc=2+'oT*L(K;NZH+i=="bFe1gHL6!RN*&cad&_ljIHC=G!2p
%l#A1o%)"WJ,fBeRBB:e@9n(5n:0umA!MWsmgqH=4UT,<bl47d@0H$?i]^lh!)Fo_f`%8)K\;eMV9>nqEhOW%Q97%6AM6E_1fl/e1
%OJ[\<NJ:g=i9!RW#eDC/>*:alb'<M;+.nlpJ2(j4_/H&>LC%Fmn+8>'9u.*(H7m".+f^8G5V6Y*a7Y\%S&rkE`OB%X,A[%T]:3(R
%es:QiS`%tuZU6CL2Fe@p*E;8'UQE8R[&jojO#@/Mf*G7p/tKo6#EoZ^g>DMMaep+t+(jnXn]Br;8<*,4Fo';dhRki@Ko7W'Pmemg
%g%in>-C&PYcg0*f1.$C3SisY!e.QL?Z),QH-6]sb4M+Qm69YMPFTe3OlnVb_<!8;GFpYgF#n)Nki<N-'0P>9ap)Y?D,IqJQ6:0o<
%6c)G1>6bE-4&=NF&p]Jr-_TS+?sAWiGr:PRfFp&<*HZj$IVlT7ZuH(#d=E<T]"81?nE*UmNrWUM(i)Z<U,moR3#'p7&rOi#Rh=hH
%im;Is+k-M>pIB*Xo[m6?.O%ll7/a'qKG"_qX-k"R3ZCesL2Y^5HFS"&dplfh!"g%0.>g$RXR&!8agIkP)EHSq%&jX@NbY"^__RW$
%VABc:G-P'WDhQG!]MF:@FNnB$"=2QFCZ8BXs/LgS-QQ3'P?&-+%P?Dd9P7=b:Y&QM_LFph&+@dP8$im,ojY^scuspD#pW:#d37UL
%V'4&a-K]QH!F4c'`+gP%M`h>=>,/0bl9q^s;M@J/\0Ca/i4Dlj*8s#%@5%g16AQp#Y3O`QNi2.nTT9Hj^*ofBX.)or58`"JaR%&a
%-DSSV>lr>R&Tj(ji%6]='.&B*IXYm0J(kb).I__A,ZEVQ:Adq1FJu+DrS6]MctQfY3uq)%<CLXo[m4RI#^P\J)5j7gB`bhTCN.b?
%6Pemo/R0qg(H5DRUDmk[N\8+TBTq<RD,JJ.I8"%DJPO(2h_pDL)f<_t79Id(I7q)Fck_BohbM2mTZ5.&,o)$d<l6lt!7<P%a0kMs
%$0$$o)R)FU(,]4=7p.Z'1'),/G7TRm^O-ja.pO&m'WbCm6;>#nI0KZhjcu>dAWtt6a7l0bU),tb(@a.Kp?N@jG5d0q9YB/Z^t$^F
%JdNf($"$_A1T6TB\_rr4T(QicV*I*"FJSoKde-S1cg/!MKGOdWCWL@tQ@sOd<aSB!0)04=b-JNPE</n`Yl`fu@"4FP$kIu(?GP/*
%:d397ON'T5?P('a<ep`&'k8X!b:8ns8h@_%:j5#MDVBgT5!1_Nfd-uU#S)eqW<c*3#HVoO%&#*-8o7,M),Q&AfJ0?9nIVF2'k7r>
%nrA'QkDk9+^imj_k<(FR#-=E;PfRLrV_'qhic\=18E*>j#:nVtY&[=4?jgXWR>r*@X<\DoopCC>%YKou4VpNp2_:2V9P2><je1>5
%S.VZ8gtWZErJU7r!V&5s2QpGPd#'/)<X-9gFi!A*ocmG7ZnZ>'KXhn!h!CMHYT;%V*o:Gsd]#d-$W+l)Qg\L,8^IQ/(sZZYo>^Fn
%$q;0ZehM0Ms4FtFHbjrKGi#1WRfkdA;R->YAh8@s@O5IW=lF$'@h`*gacib9'%2I=lq/`M>-$*lnfa.60JQ*jp>R<$q>plH;>sr,
%6nral0!2cVi]!OS2I3T0M@M(JqS!m<VIU[:nFgZ@W$_6q`@5(O`10VY-M`YM]@F*<>aI6]c!oCc6W9?+17O.U#+o/m[TDVW%[$uG
%_tM62M7d*;$rOnq$unrNc]T:LZLJ/Y$`ZRQ3bbnIAgI`)k/o0nm>A(iA;e@o`IS]#;F-,Bb1gR8:BAChkmV?\YXVc&q@_Fm+SG)i
%l`X(G;hPo[",hb+CW-'qE#NTCA@'Lq9AJ?m(!L+@Ye=t=mjQrMj[rQ7?CHX&8;\lAc;S7GOU.\:P%l31UTtIuE(4L3:umt4,5kn\
%NMeYjhBKiW7d@uY1tn`L^]l+]LM]'e&S#$-F9LhJK.AQSKcmEDF*(:u3uP'BUdXP8]Ad\CfK+C^/Ur<8GPJC3O;!>AJ5q)=4B/$Z
%OFEc1Ci]SqLoU#V(=74,TDmhJhe8>Q$Ar!)Qe+df*sRGLrnbO$'sL+84\b,TjH@[^67%!G<Yer&0sESi`bM:%lPj^IARRIZ=>90D
%di03>-M4%cLOXAj7g5(sc(0Pf@%7'l8/WX@l\f9#SpTsY6?cheH-p)OcV\-%0c[5E/N0dCA4t:G7X]_nOEN05'A&[-A+3%5&VqdT
%iPf5I8(Z-^X<6/\TX.Z@>7.it&cmh"es_C:E$-*KAkiu"`"mV/XQn/'$I*+79obaR3Gbbqma^GF$nFbg0H'F3+d[a(qSa[<q#njW
%-nsQK"#Zrm82>ru&"&J&W'DUj4[gMiXV8$8&KS5U1OCkKJbj/=ia6B(JUj5TdKm4jbd(mi`/!HuiR/Lu0E<gEVuR1C@0tRAn\L?+
%5RN_ZE:$-)aUfgZX_80UL-#J$1+Dm9V3!U96!d0RPb0+U4g=)9N`^Y(&k@e`6gH9.$epUp=p$^;2Rs0fr<Mn\XU=s,&P,6X,C%Gt
%"3usE_C)M'%DFgI53Z)_2[AKdTgRHQRL&6qGG]N,1Rd^fm[(e>[4fKfEEWgNNjj!'n8:X?j9TDVTDJYO'>4Z@L]BWprNQ(Xf'Pb4
%!H=7]?8Z#C9+_/q+=L%)Ct&7"fI1A>bQ0jqRmT2Dd38Gmg*0OA(#7ffSMtd8$)`+F&8neT?\gV8Xl_@od0,QaYDQonm90ri%6]9Z
%plm?l1j&49EdAc'S8FIpc2Q>JKj`9gaRlj93Oq(Ei<Y,5!"8N+_r?!6YB,1d&/>ejAoa>.rC3:Q<2-FK91uA1aX#,IZPNrYm,ZO0
%p=(od]+bMcgJc:2E_74CK+>psY!;VpQsfE#9c!G9F(fq&FIN8;U9qFYEU:a?!(bLt:H4oUOO<1rdH&_YFj%:dS+Q-?fFo(($#,$l
%9pC*4_i^4uFP[H^*JJrmXu0a2E]-.fI9JIQ)1j>`%E'TN]8-Fl8P"f!Yt_JOZr-hS23V==9%[ZpZT)dVXP4J=@2h#Oq+(uMg0P1H
%[>Z#0\W1t"G3t;epSTVe$/p2%4aRJiNb0N\JKjX?2;?QO4h(d^Wr]SkadD.;@?\Ioi(Q2?q2*/tRiL^s810MZ*;S7hlK2CVTb@[;
%AA4V(o]C79p'WYhMoQDF[>UYZ"Ge@Xcih/:?P7+A^oqf=cj1r[S,ijEC]u#%6'>,C%a`<tOnR*Zj-(^NMDbjj7M:'-)F1Jpd7gI(
%m;3+A'F,L7!Kj9b^Gn%oUSOd0Smb7"3Q;^]97,EVYjNS2@'a989a-MQpcbE'/[,5*O8B&oB$&EC>Kg;e<dSU#!D<g)@g1L^nL;!@
%8&p]A?$+'Lo>%L^JJ`9Uj!>^\r[2&8::D#bJ@5V:VaB!WgfiKE]!5d(=Gaj[5Ph/u4JBB;mOKFqn:A\n251%6%@Em7YJPmK!p'Yo
%!ns/9:lT.P%6Fb@Xq#`(-4<jSoMC`P8Tj1YMskfnhqfnl5R%)5:k^5TfA>(6Z)r@ffkba9RO(sg+Mn4C6qSTU,&<mL0:^9rQt+,R
%9i*NJ7D@Iub#YcQ3ShlUC7+IPR20FNAO0Rp+.ViG*"7bDB]JJ3"-J@3pW9ChP'DIb&NR%3')8)Cf?GpMINm$`>of4RW^maDr]eBm
%E9mgT(n.S0-7ido/0c1B";r35HpE3Y]G]I,JbNL+WXk%;82-<M#On^X92WKnfqa;PRa`?S,tJ2p2MZ1m(@*("caRg5X+sXqL[V8=
%=*BR8Z*BVqTOT=q&JRX%1;e7o;Bukmc9^qmF4O4taS$iA4p\2+ijd^:7[r`rVTObk$u/6>Lh$5;fPJ*#P0t.`M.e_rDd+Cn[?q1o
%DkFpjf\c*b4eP]DGdo1L_S!*<,]60rb'Ki6AG`3=Uk0<$bX`W3&19_Y`gAH\m*I+hA(D%qJu`#;^GYUW!.@S/,+>pE@-sr'k*cS`
%V7NP^g@Me2$<=e7DT=_0$"+66,E9/'dUl?Y#Q9dH&R1O.@\)FZdSJI)QPosM%uYj]5k4I]ph]lt1k:l&\,`5Ar>.`+]_qnjQM4_d
%dc17!:g-'@$CI+i\,rSI""jUhq1&j7>2F`4<6GMOJCWZY/&5?Fs#dZS[pK0fiW0SK[I8S.!8I;-=bnZu^B1^[""qE+q1.XZ[_2P?
%e<]i9!Sd/G(Z;a3rrV,E[pO[@o):/4><h%kfWC"mSd4-C!EYr'I_bR5><^tZparH@XoNEdrtPel*cM:9bPRoeiUZ^*J[iAk!YguT
%Sf`K&fmWs^bPSICErCN88?RGe)O/G!fN2IkGec[SY(([#R`ep=J91O:/+?e.i+[]on%SqO`</kfFF!B[QnIiW*iR9:Y<[7#J7l^0
%]_;J4QfP)H!5!Wo"ir=bIibu?gFp?caY%o@\BFcQ5^3$S-c*F-pB#`/pKmsjiW3+']Y+7GLmR2>(LXngrsFjS%sS6=oac7S?B4d^
%SCc)8*mi(8>_2P<!De;naW#X3f#n;'!VStnSqZm,=SulP0CQXUn)aLL!5@m:o+57bW':a^jo&7g^>r))!;,CO(SJLTrrUj)msb]4
%l`iYbq"4`\L&Cf@k<Zj(r:@."ci2D/?a'LmTtaq6:P4/W$Tnaqp$L'-JD'rQ&7?UVpE3kE1=*jgBtdpS!n6ah!=B7(r@;8`'$3@i
%"8dl:!Ps0!,=o%gGTIQ8VYm?#_/]M(^gKCbH"\lRE!76*#@)caj8M[Oi>BD;&7Kb?$:re[3!U,jE1[@Bo)Vpc_L0-6YV7/<!A;Un
%Y5j;_:?-W@0H]dHB\9dY%ib3N4:N;("?[,6k5EVYLO&b#pb;0O!$M"6:IBqXrtQ*Mmsc6Fbkn":'(bN!:h!M4GofZ'#@)fno)Vnm
%`?)nFOCI'r"]UEc>_*X]r^Xb5rbr$EbQhAR(IO1o">Am>XoOFVJEJ)q]_qoQR,t%p^l3R='qhfRn3#3f&%DTt`r27^`dGQ*^bP;-
%)KO'607](&rtX0@n%Sibk5AASa*>BGn1c#(!Ii8iY5j[SJ7g%H]_=Dt12hRZL.h^E$4rU9\,\tkrQg+Yq1'u7A3]!t5dHpdcU3lc
%J1I:'gj]WrbQhAR-M%8a6^)fm'lYoME!;hl#@%<Y_\7/!U?i+I%oVNlY/$:tJ."VRU1c2FQ$NB5Yd3_I*j3]l>QHAtX#`Rkq,Wb$
%;4_;,cl.&BcYQ(DGVMB4?s%\'$@<M/p(m^TV:IJgWY4;ag(Ql*.Q-%skVYnn3<era8T6@])(ul^Nb0&XER?"4ruqfZkY&<0'5E&J
%F_&7h/ccIgWsocI];qq>FB@k[@I.!*E'CiAHh]jW?_%:Q6sWTM<\$%c[a0lB@9Y3c7O#-5hP:BW*")r3V'H`1oP1hb!)(:b/QMfo
%IF+7ZGfe;^iIf-=N]rV^rq#Q.02#F8154"03Z-,r&Ic!$^=auK0rSgh_8@CAR\'p#%!V#qmga-7=M7+l[<%WidhBd#@5HTeW0\%R
%V$@/c[1"Uf?6V_4*4IMiMV7^GjZ8-cTjJ/^h@t[p!]W-Y.Bp"D3&C<k+n1S8I?-e[%<90ZCOffsHZ]`mp<UL@_9tCFp7gPa#[l>O
%0(RZ`-=ibi@'`B%<u+W?047lE-WM%S>L]63^oO`Sn/RQ<6>3AZQWSmB\[<:<ba=<R!"9?-R%!!%;Y@aYd#`4#BsFB6d%pN7PA=<O
%3^!k@U00[?Q)JYr<JII%6m#i(PlfN5<*,DlD1VIP+TMal+<a][&^DkWKo"0MUDu83,Y/)n`h`EglqLJ4FR4G5$O[+QIAMQ.!F-'e
%^>11@1oo,2m1h9YHt?tS$@e"/QMRWgj5cPW7pa.W&[&Rc'L?IKkp;dMW09+'<J_jW!l`V9FgFKCLk$Y#li:@c6&!Z<8+RoG[!ht\
%ADQ1jK`^):ie,Nr?u8L@1++*1*&inh:]0jdQQ]D>Ae7#>Jp=#Y#?MMQqH6d%&K;eccZ7sCXCY68o[7Lgi^DrVkSGT4LF>Y.\OA'>
%:P43V`;Zf7?=F:L&3lna_A)GIjOXh47[n:&U6tAnV,8=ZM:.qK@&W^mXZBZR'eMGoBlWJP6$+:.cmG+c&SP--ZL-2,PL@5VQdTD'
%BQDQS@=?'"kIS5,@>\A,6p*4YO.`F!UVqqY=q83@S]`\T./@D?,A3YD"$AZ\Ve\uf3#tVW_KV\+d3HO:TX/Tm!gRFYhc;="+XoB:
%EF.jB+oZEf@(PWCNq2E:^-=[fIn36cYX8R35TTKbks-rP<=sIp%8Gt7pjjI*^lqa''n?>JObC@kd*SWS!r3:1"(?;Tk1Wm.]e(]_
%3gY]4"&cu1.^HB#PXelljG2T7?rsiB]W8!lfk>jSi#e2!HeTN;mTOs+%@@`6l6mIE3`)2%'g5"e6p5Sj2$?BAoEreZ[E)od@1^m6
%TdoeYlG*qT!j1.Q3u@cu&!s^)@A>V2JCYKo1lfPj#F`'uen$)gJ3EsEG!O?P5SrK*EC9s"oc3\(2Zci#V5nqF=UJ96O=eo;+BCS1
%%qMC77p@qdi?RKr5gu[slp(q6q]sp<G?/rQ>e56:Yt_'!9&cDM+Yf.%PA@Gmjbg,`lQcL)/nLY4Q*Tf-/2IdXoh//e8(CAc_1;qo
%<YcCMK/FLYE_(5Q3f&6(ZX[/eTaN)5c&7!YLtXAs&Fgu@l*LbuZ7h3j5n0'.8X1%@P2$:5(#$;O[UcT\E8\(W"s8IrQC5WXjl'VF
%ee+<ITgW%PFSHg-3Uh!FYA<%F[Q.Kp!k_'`Am8cY?u;k-0J$Q*mpCYP6ot=E!j!k;-5-oo*]>TaH(t^_<'%#7\sO9A+a?CT'mlPr
%(&+Pkdn4,WBj#)6h4%'>ZD*=_FH.1nS"RC.">tf_8YF('_%0BZq2FKmMnp(lgR0K%'IGf>'&p*&'<:a$;M:cQai_e+ZP%3'iREL>
%&[i91^6E">*Mp<(_M*/Z7%8'9%RoO>d[#T7=,Vm#fdNmt73";fC)ZmZ7D[@5N2FDsA%J@[1.OU<.Iug@^r\Z4Y#jj=^htOVS!5R]
%,!>acgNP/Cq)4q:]W1Fn&Vfn9i]AB$jL_]ZP\jS64Pd7V56q(g+G`b^&aDD@9^=6:igU\)^q^i>+G_5tNZh-S6??(bG1?Ff(.+!G
%.DR._Vc%>iTfnQ2\#=lcNR_Y9&C.t3nk=P<%OC]MQ`;MmXnb9X%uLi3l5l^t&n9=A<tB)@)9+@<LiD"d!uO<2:Q#;IeaZ<[Fr6bZ
%+*n]b*]>D4!Y;P.HQ9rV"C#Ag1hW^_)JbA%lqY#T<)PegF7&ZS0(,g#"3JIqWLmuZfa4l8Ek:\*NfioAkgj#;117iW*h?U1;oYP+
%\0@!oc#pq?KL4&43A3QAGJ0uoDFWWE1ZU<A1c\b3lIm.+r&OMO`@WQse#ZeRNpugo+]P1NkUNp#8os+P.<D/V<#lqqp?IV\^rr*6
%$XL&8Nfjg8oY)F$4@U&A%cAF^&[d+#<JU<[<an5hZigL@!@3s0K:6>7QHj[Y&nj;Qc&(:'XTt/5F0'DL)$$d[%,JJ!W[XG-K'[o^
%je:n7T*[OS8a0JWYcpIS<(\$[Vt(EEPj\!rZrLXB,AQ9XoY;<)/pi7EI4!3rHnjdI0r)*gPkV:q#:7Y-[Y2GkdD<DB$>I9\@ee1W
%fp)uK[FXj/,IgFL&(hWZ&b-]]KfpcLRMc=pO0SA_>ubKWUnp.@Fk+L]?NJ6Z!"u$E@.PSUL7es3'i^6H&^CGq;#+B_D2mP=XRa(.
%)W&HhV:,]_[G'6MLH:J@g/P^@61FhNUl<CSh^=^`"uWmN\i$J'Y9p>+N"OU)RF$rR=AeuJ(]t6u@7+5b*7QYS,MPc,0KY.9M&E<N
%it=8>bJD>OocUu*Y$ICVo+2._e).Wf;o;2ACr$\rCC[72OXk?k&ONunZmGPqbO\:0dL]oA,=OWE9MT+B;Ob!JqW=tS^J7`i7*`0j
%k/J=[M#B)efq@XT&ORA@%ntW:N^#8-<%+u1eKkB-hMa"<!DEHjEYJh:7:%'!krN530EDm"aNRl$@.V2%LDqf1X[OZWa9_&CYbsF2
%NKMO4.h]Q^q5<X\JCb#?,@=:_,.m#sZJZ_#;sFFf]qR27*U^#Oi7tdt8ct]47;ZFqjB9HQ8W@@_#<qsbo"]Y38*Y`UFjDKJbd5$X
%69*<iGpU=$!N4G'+9a`u8<<r6Jgs(?O0ct3?ZoJ@+LM0+64m)b'.O/=I8[$UFQ7sV@Hbrb`I]M;/#n;CC<n@G"sH16?5SEC9#2W\
%p8j.fMpEjj"<:`E1CR<2>1"JNj+=9s[))uX_bbo^eIC;`8`:e3aq^1o@f;24_*d:/[=]jk'uf2R<+(phnNYpOqSuB]r>hZmK<d7o
%DiOrc7bY+*R[esUO;YjSH7-uH7)-:VTNq68M9oquN1U15MNtlac&"-H%b:R@e`Sn7eXi$PM4FWo"u))meKNa\5uGN*CiC\Zc5#-C
%8:&,R0aMFo/;V7n*,Y;/+`a@4:pO6os&R$7Zu41G5qKlTmX7?A\GX-s,lC<tZ1AZm05MXrXPh1*H8X;L6ApB4lC?R"hTA0W+GCHF
%L.uZG]2,fkrSPBeU]$te(16sbIf6n9s4)$oJ,c!frp;rJm`VLm8)#-c.=uI7lde;roOn4"pV6UMDu](N+91G0rqc<\?U"M75QC^)
%E:KQJqKKIA0CY&#@%[GY7mK[]fiJrg<-1AL<<3S(!_J^=1-ge0A@/1C_ImF6^,_'ggc#:58a(3lbW"h?+#O;iSjW)Gr:=V#CbLpF
%0*o>=U9]B",g?=/HoMJ`m3rNHAqj4/gctJLqn4s9[kb`r-M8<t!]`U!,oO(eclSjm,!MXrfYeHJ8ZrYrqU,8e%O1;=MK<cU9t^6Z
%C2+9A6P=HJ&%rjJ'M13P!_3bBqVf-5A1<0?+eAk#.SdK]%T<s=k>$&rgN2@'(*2q+T).FEhNC99'Db5t*Wu\$3i300\DJP7B`sE!
%Yri(%?\F8Jg[kE<+5Ld%i04j8/4s+CCoEe*#,pO`-J4NPa&n/TGVbl2l#A\&a_:5&W?:!c27OY<m@Sg66Mjb$,Cm=&:3`G_qC-\[
%hX'!>&gZt\.jP(<chuEjq\,#c8nFm<B7#[KJf+Wq>Y*_*hG$"[4ApUY+e1p;k.ri<][naAL7Kut?I,lEOEe8BU/s*SFHDpcArXi(
%A=S:Jp&:p4hX;B!hmr2H61U6f$:Q]b$[62FDTPR86aEs0K-*5K_ttGd5L<ldW`$SJ,N"S0/ZTeSSlFi,Pbo[Pn+@4oKLTJb_7O?/
%Gct$V>FfBqfcE`d-(,c+D"K\6$-T.*:%`jibrZl%rnsIlhX)o]A_<$)\t;-@T!/)CO61AodkoVB/].&I5q*q&s4!+t2n"qpr0u/l
%eF,EmFVaS>:ra:\&bF.U<VF$BeM'Q.^45'rGBjUE&jZgYe#Ul_pr(<5!;ipUBkF2nX2AEm\ZZ;p^3f!tGBsY$'+V]%HAr=[/aN?;
%$f!oLXiq\$Y_r2Z(G_)+?:jl%rRc!0IH1@ln9=^#C]*dJs8'NA/YE$[rn%2&g]$lpDSCSr0E8G-qT&'uhu8@m`rq>U:M#tm]5c!g
%<ht+AYr.*b_9^T8EnDZ^?@p^F#;>S06BBCjnjpl+>N#LX5l;`r?YE>hb)$l@a>oAu"sAJf/"q;LMrsM7O4%OSRHt'*_ek4ho27,p
%qSRDCkk<)?Vh^bC,QQFk-($k$OeEr%CPp9VA2b*_`3'H-af;CUK/kQ=DXoDn7BK.m8'njr9ou1qU?"=:p^$B=h=ogiS/j\0qsIVd
%\(S#Rj;nBp7*j=pA!bFQ!`E\,kJ:=N.99.XqIYuaVN3MYH0"p&Ir9W3Z=sko&R#*P(=VC>3?['[qOi5/h@G*qi&5@):q[a:@C-jp
%iS6Hf:]9L+K;Cs%A$]lLf^CQM?Vl+b+p5*_\aN"%okt?9"^ZQ,@JAuZ+5Q<5Z?B9QEPh29fneM7I[K1bkG#7?BeZZiKb(\>F=G:C
%"R<^Nk_FA/$OluC%[kZ2bU=,C:9)8>&GA^@gG24[&7gF/<K"3KmZAUIBs?r-j`3B_4$<h43kYLQTJ0R/3(LHkg$L1j"S*Wj#i@l>
%U\g$-CumRV:5;ia__\sNF1>&UnEm,6nn*ihJ?H5BD]_.7_n2JDci""&lm%ft94TkP3U#tpGF;,Aran*kh$HVUD^5P#J*KPu)p4Vp
%8h^@aaV)l]a)^l+OMZTA]YOFR#!j`=hb0+OQ68B*J*Mg`HSb('E?2X55DNlKW@^e4'Hql;%j<?WM%-YU-0%$V!lb+:5J#aFWDVLU
%+m#J1adP]XesmS-XCEtiJW_u=2`O,5mETODs&Ij^m+@:CfDP^G#AkCKAfAl=P@Q;d_AFsL^g;7M&7hJO5c(&LgL\mlqjp:\YDREt
%8P2?3JR[^M^+poXcJq%Nn??!GN/6EdY)rB3:uT$eo:UZu/_M](oOu!RWH7].&%W[$CtRP($UOlU7ZI7j#[Frm;%m"A;,7mq*aN+a
%/qe$^[s+F)2a$$KP5oVN@S*jH-I0J=9qn[V1MTRocfJh4SH^)TFpVbFEqGZ_NXuo&BX5^O[tI?t9L/=cS#rWYdjXiPS"@f;d,@iW
%ncCn?f]bh3cY_1+C(0E:SdlpjN$bKHZ;V$8_M1Eojn#.?_ZnsgNE7BtT!DAofBoSM^Tc3"rG^oKME3#!J1qTmiaU-:;30VVY%s86
%W(lTId":&g_Qgm1Xej%k.bm7,6`YFp,>G_lQ>605,'dieL+:Jc)H_VO$k1Js5T4Rt[TWQU!:ikIKa(R!969`^?);LW0N/n=\\q-;
%'UFKmPU[T5at`nu(`\H\J@&]YJmcY"Y@@)K&1B+D^IVB%]tN(J[ml.7Ws.n"FQFqCmjA$0!>K6lp4$"5f:o'Ac21[EjmMr8T,u;d
%p9E[OYGM/iD6+_Qd][*&$MbGeKCn!(Zpf,T3Q]mi@+X<DU\19,k]t\8rO0H60'EJ*aqJHa!1P_02<=`pJm_!9.j=N3[Tmk7F_:<L
%=nCCuW2%85_6[bXhYICk)S%_TDa`!_mgA$^V77e+pJ6#d:qq/<C!b6nQ]MltGD70"U2EP$?ds>Yk@Z^N[KbZS%W9kX!3p8F8$Zc[
%NfVmpI+0fb4eoH"_c?k-FIk<5Chl*tPY_h9o;I;Z?BY3s*#L"`KtUSs@@r/Dg=H<u3e)VN]4=LCE1j]ZF*,dn686[YDb0a#@$BP.
%,fNg#6H@%8(lq,SF^H_UF><(UYYBh)Ot#*_&[mQ:KOr4+nCVqp,m$"d_Nt02oFJf'mkj=nYZo0n5^P$PAa#`Y#fSs8T%-4/EO1&p
%30!4<[V\-d3'-%Z7<;0+N6K88dcgSM!A`becoqs;26SW)k!_'*=/-68)``oCht-fU#aW.R'K+75;#ITY`-h;6[O!X>]4dI2K8tsQ
%J3<^,n"ZI*34@Gc%Aop4>8D;+$s;+/FmqEip!/2MO1L](d+)6Hn8p'8'rm21!A\Z$Y5>O(h"SlW%P;S^G3IHIW2%8%K=Tg2p>O:O
%+F[iO"(*15k_ms]d>qjY-$TqV`m^TUK<EV>JJL=T"H%L7GQ:@t19]M3Z$WmRfqTXI1!2(Ya"Kn&*-MbnMOcqJOfC%-R#5"Ip4_Qi
%l_2ik04(;[i,`]Oc@_.kfd.t%T^#D>Iu$[$LV_YO)?L5;<9ipi7W=.F"p"Q,Gij:qTg=as\aE%\!C@IKpVSN7K1?ZjK\BcB$Y:pj
%_9o$>U7kBa&1o>QNuZSAG023jkEU+)+4mlSKIOi7Fio-D6QWR6:[Qc"HIkfG>2]Fg8)C]tL%Gq>L\cP^6)Z1_<mn@N9IqptQH_'+
%GR]ed5abV<<Z.][-BR[')fj@fKIp=np:hU6LNSe34-W#&P,Kk0?#qE(UXcQkL>8;Y4lBaI]#F'.4e<I,?#MC^m8a*^>??V"7"2j@
%=b/6V[[FH96<>G0KYDn,*$'\Q>c?;m2"tJ'^[l#bh*$k0X568>*I1]f+^RgSm<aKf<gT<oMN\97N>@fE,<`NGVa1Om9pN?Um$qo(
%7Le)^0tqr^q;\M2GTAaWGC'$eRT2-Y\J/>/3]QId%)QQs?kaV=HdtlYE[no;?t5%gUO#"EM1-g#'q-AmUQ,hrKEK?'B>9*1=_h1h
%E*gd+N#EW_]/_EKa=d`<*&W7!@Q2\LE-9YQ`M?^kN+5+Vnd]@_7ugrB&@6us`aY@0e#7o:L4G^rOOYP3$l`/3@5G-/P)O0LE&MIT
%L9'lnE7kaI>o!Yu7NENCX@Wn8+mtj7ob&]mFWj+nK<PDb)6WKq!e\GI!#ATj0[F5=NZ%^lI5piG0;_">2BgU[M4>G_RRc+t.f,+7
%L)VsUGBPDf`Z,pSlYp1/Ro5IU^G\",$g\@1K^_O$@i%j/Vp!:<X/EDS`Ls!$Sq>l0pG,S4'Qp[P2Z7hZ?e7,\Ue88.-"T-M$>X<q
%Sd-8U2.Ucn!+Xd5]pkaDZ9#-s#K[+)fI@ZtUH-:kYOW_'![SA'*cuAN>O[PBDm.^1YFbZI`RHZKL91Qg=gOS8rb_HeQPOpM)G+1m
%3]cUQb;SZ[/*uA85ACi$Zd_l-Qb,D\)?^jD%ZVDA=TU=g04%o3"f,1gHl>^\cO8Sd+l?QaQPoNKj'b$MHJN;^d6X*i4s@);`jRbd
%S>i^#96n-R1_@[$CUWUQ9W!`!E#?&U(S_HM];7_DqH?%>UY&Rd[U,/odW:8#!3,3j[kh7HfjNgBK&h4(Ti$m.\3dT(p4d]^C&f\g
%h;XOT71$JiG,XVuQdu!o#T'Eu?FJc.QcSmb_V*2TQJslD"$JJ2Bj*CkKLqo5;clfC(ffeY.=A2,JX\U9Iub''^4kG6'_Xc,fZ6Gn
%K:?8`g/q@)*o7NS7BOHhKtJkj+ROcp6qMIW;a$-JV-\"^Hhn9ZVRIVY:CGaklSrH1QVc7f2Wuu#nmkU5H0Hc3>AOdjnUt3M+,1?C
%<(d*tn6n@1Kp=Q?oacL\+WBSt\_nW7G?<P`4^)5gSY!O,pM`"Tmpd9Mp,33Li>6WFjl+$o8dNS8_foC<4g8h'K4)N%BjKGnmUFPj
%;9pC<!n`d]Zk<MMdQn=>B^3pHT!as158qPVciX>FaKPPVd,@iG_t#OW7$^WC_.(fG3P`O*M!ksJ)-lF\2^H<G0!L3fIi`]RfI0iO
%^1sFe#7"`]),8m6b7m%5hj+DE$BX:^cen`PW2&Bj[rmWHFs,V^Tm2B$r0E$#1Sbcp!o-hu-OZt<Kg#$<C"fUb8&r<g\JR37Qp*JH
%93];a\kte&?)+f[FkjZ%?B2Tu<0!W>rPb_1j$j,W_U>CTcGfS;ejE[^$;BH\Cal$kfh2"d#\e'-6RuOZ3W1f"kdZ0JO:Lk5l.A7:
%Ws0q[Gi!>*Ru9P:cZcjFCNjgCX=@Ka3]u]P/iK6Z\j+?L:ps1W_*1WuB2Hnf4H,3'r,cG,o4#qk62)\\Z"L[#L42G(q.A0X7@goM
%I*MX/oa@Qsh!'mM8<uH!3]:k2S!BOSp/pn9`r0(.X_*ECaLOI^BW(c]4KCBrBhUuak'>>4@IGOR;sGA4Z3LVE"aE,<'67kq<ob]F
%1qZb?]2tm[=+cMC].C30/r_3(K&RQ4BKCKfgbhA_a*5.Rd]9U)]gV^_cip=57n6j[NQn:OpOu/L[7nj]VBUH<`p3WLm)_t/@qh@/
%k]i^i*?OsH('R.Q=BO@E+Q+T<')RnOS=aVo-T(62BfnH4ip`O0*?@(HfQP-!'$nm3X==DQP%]^aU*eS.E<j\,Qbs>Q[YNA_W+4k:
%_3T8k`oR0V(1YPY`P.^BYRs6NcAn!p0?i"_,.GHZVL9S`(m3("gU*0m,QL>78'`ufL!9e0HqW[/*d/I/,GFB<P'EZZb8*]TeVr?4
%mnL`kMPF!g`b`87):m>,kugoac][TBI@=:c#<N6^e!-;da`@/$fgG5U"oB`gf$Yd5?*/+%"PdX*Z>-=M8jRK[TL0YZKW3_;VCl:\
%U2B=ja\G/S9uEda8*-<??&I^iU9#_NZ^B8?j9dX@)OlPW:.AP"fV!d-6N'"<#A96\kS0uH4(.*55--3G%sDP-a^MSjo0_67,&k>V
%-.q6F%&_\+DG5TU8M:!F5dM23eBg`>/IK<W>sHPoI`sqs8>">lN(*n[f+D\!T1^1?O\$Dog?d6@"Xf#NWH'88`>/)M[\sP,e^\M/
%Cc>J!WdsXJit/AXVusA8`bS[dg-I5W#'"U-Fl%ie1:nmRDdc.RPMA=,%Q#s%npqjbI_=/l>E5<?WUT/8"#Tt3V"[f`3Cf<d0a,H2
%l=$dQg/-W<\kT5/5VMGtLFouOU8FT&6XP+TE8@PeO7SNr*JrMfGQ6s]4n5NNc'!8J>hC$h^W<4.$_+!l<Ktcgs.cj$apLZI5r0u9
%]X-e-L,UCe4^??eZ3g+Z=Cer2ft;lua[_9Sp_l7GLeUX5ER7?+Lh'7l9OM=^_,0;c#cTL%+)OhU?$GTXCPhL.V(*".Ou[oDY[LP>
%\^E-nB.deF!5Yt_\-n[j[$/>liZD@kB*cRFE$0M?eh-feablH`j*J+D)s``W/>+So4Cth>h8KJB5p[&tc2I?er$W6d`CZQ1X4]\>
%BL]!bf^/@6-R`P7#]$tN8Sule'5Gs$4-03L.E0oq!Ie%7BjS&V0k-=CB&h:7og,bt<G.u(AH9.A:7GF*p9/s(i7N"B($iSKZg/5K
%/h)cGk7t_G,sTdp@kpM9Kn#DGHCK?2T8blkD!5$%C--4jHS?;\T?V,=OB^45fN_,dW.+B_)`j(=[:)j@%ZVFj38n/qc#B,(VsinD
%[13J.!("fmo+jYOYaRN@3+s<KK8pE[Faq]pCHomk>`0oYZo(Lo@Z<0ZGj:,_Q*RP<p/"mo_?g+nW.W!BGr[f$,Wc6bM>$P06anbj
%flLU*:GY8G0Ufan<G,%a'&:2<FE#aV8QDg)gCj"7`'rd-X?,@h_+lEf`X^h-Hd'oUFl&$B#6t^?"D)@n(Ztd<@"I\gh^%aPD0!4A
%I75V/!P[].m2d2*(P<3XqHsYH[_*%DR^&K3Mq!(_fmAVD)n&:]H.f#\,$'!C`MeF,L+"2Q-WC?YV8*.+\b.?d.t/_Rh;+!nG4D?d
%L2hoQ1&tCNNXiZ*<FE.LR_g\>JaUe>ApEmDVUP)h_F>ki6!ddP?B%!*CbuB&XEE2p8?eDOE.U@hdamZ18$[6)NV%eSN-2Aq\XWmF
%*;,QA$^eN"('?7RV:.^4U'*u[!g^uRfc)1NbT1Jl@(FlOO#]8b&q7*QOI%?sJ<7]af&"<+&fIn/&aOauJh8Rg]l)HHX&6ol%7H7C
%p?9dtJJB`ZSJ>S"3?*,tqB"sOLOuA\ki/TkQ_]O*#=hM^,$F<gF9bnZ9lKEZ])<%>)j0*a*'oRrS#T*lX?ERcG91j>eGg'KP:<m.
%iJ\CQ?+G=NiFkN$BGh,LarUp,p#k.$J:U)rVjD"*h@_:lC"Eg!ZIo)uO'(=t_do&nWr-8&n:O10S97&t/u]pO\Pbe70dBEP`+lH8
%bR!"hW2bHkA>^>/69AOjQgjic0K6[Rpuh?LPO=+:IDV2=^FN\[[hC0<GRMW3+ED3u>+;mj,i0SY%?r80[m8p(IDuQ_imGCIG-]o[
%hL5BCYS4(?hDV)mDg3N_-!X."U43Z"HrF]CZF)a*_0t7(i81ur^%oh`s'G[$lgB:2$>WfhLDKYnJIMu)Fle0@d=rq1'$g(`Z!E2=
%7N<FhmC!SH9kanm8Wf8aQ/$75DTkuoSU0oc],NNoG0)q-3BCh9;40j1mkPpmph@=_re+tcg2&PW9q=B)6elA0VOrV`*AhRhluZ+m
%[(N>Bg?_GN,.tSR^%Z;d)J!o8C<UI,OI\l^*B,R\VeC;!rXa(e<"DCPG&Uf_#"h]`C61#!m+(87QZsQoFPLZcO#:.?4F!9./>CQk
%91Z&u<m^46,dfW@b)[k-4QP_![i2`019'R_AseKW'tSCUIQ#Di^3d6i)!8=(4P].NpIS=+!fH]-Q_[W0@9lZq>*h^"iAN>$nJ3HY
%][+H04<JWhd#ih$RQa^DMS2gtoHCOkms0.@g\-69J"Dqg`4DP[*$'-q7elAH3:I\KCj^Z#";UZEE,\PA%TN-1dS-,DY&k_-Cu!Or
%O2Pj/d52'fN!Q3]ANW,lFRXOt\=nDR*qs+sTrV$\a,S6MI-oZ3W?=US)VJo!FLnTJE4bl._'>jWhg"S*QTl!A4R=Z(FQh6"JK99>
%Z8!Or_Hk_p\lmSn[C9+u`9fJSi&p;g\1<YE9VQN>'([e'.%Q:>C:oHj),mO@aV@;5;R`m\4M2MQFP,dfX-8V#aOZYVM"dnZc"O3:
%`4PeC"1^IXm;I9]1lRb6RYU&l7u*(QS9eA[Ki=WEE#0Z"Tq*A"YZj"EV7L+&qk:Of2]7Y?)\!b4UQ1?2"hW?*gQ8T=R8=hiCBmk#
%JpW9Q4n0!4Y+J')A?E[\5E8%7IGZSHIWp#Go"f;SV(QeUTd4)$28kL%gN`>4![A>_h.Q?+&>Hes0]qF!!$)S/999$&eS9\o0a6tc
%>";KBR&.F4p!RT(kf!W'n`EK`=a1hD21Nd[)3iW_I1oU.6&75dBlhN8RPX(KU._)`G-d;cKY+IpcU63c`%anqi0YYWka=FV*B)j(
%LHkWS=I%->)`2J>=0U.1=pOW^1.geeaW?^=RgBWibf$F3!Q;ATDMPTG-^+oe3q!_A>^Am5:4$c`OB[F.!=+k%%'9.8MLm_0Y#(@m
%]2&_lSQ;*"0UoRG0_KCKS&58l.kMCU2kJ:D7V1]#p\>BUCjAOJYZ</Xkj^UOgP*UTU4m$hWd/&.JrU_32dh`dC%:<cWPU`K.>?lP
%\"67Cksr0N_@^E!#<GAI*\Y#S65%\F:T4T*!.[GmP"dc!i2j$!\_"LbY1Bi,(p!<U45ghU\+Z&X7?LPI'g4Lrkk3NONs!`T;lZo3
%b[WF&A)2q]""__D9,)0_BqPKB#1=PFRc%FbEJAE;Ta\E24lfDnDBK\]C'AQY`'B%hW>k"331$[YX\NGIN"ab]pY?;4\P6)ZEP-]G
%@fPFWjeb_1LTpmd98&V(=T!-F'(94P,o5$,ZdO1\"A`F=fi7-6P8Ui>G3.5mZ<R6JfTPm%JB#L(-f:J@[$$j]*5DStZa%]FqRnDg
%&^V/IjaQj`k9*(Zfp'NVA%9SHn/<tu83C[q"<5cHnh$Fmr5D'SN0[tlhF'DW%QRD$BSQ;.8duIPlkR$?V5DH'eU$8IXS1B&l:pqU
%\,X<?En@38Te\.RRpJC,BrE=8TqZ[$F*'p'h,3uecc'EV5*s20!e6P3l.?gjNjPZ9;p0o2$!f)UNaB/AN:Y(jdsIsJ8^%KKc)1JH
%@Pn6:dsW=uN-WXa&Y#%N,mN+u0=LRnI`2`6bp_C)opCas*<3%Qd2,IQ>:)5K1q;YZ9h7gIVfqq=5_uorEYWj%?B2QIp]p:XrA?!`
%gmB2J7<Nq8I>)G^N;^RqQKLG2K:?\ak+igLlOm[gU-Sp$XLn.q0eH,Fn@@aH]eWU;.G\g.+3`QG8gH!HlKg.464B^3*FX,8%M0B'
%<h:LZ[.O03@HP1UF$H2$=>+Ffr^:9:ZQ]1j%8a=]9"Nc:k.RtH*Y/(K(7)Cl!rl6E.o6-^MgQ]*OeUZp4diu0mJHU5f8(*"rZ:uE
%[mPB&i:k:+9\/bgWQs$dVoGuZX)u#l'Y<1"@9`m>LLWeZDJjhUW7=Ympeo(;#5u.`qF+4SIRs`L@acFb%\*jhB7nAA:`Kk5[CMSo
%G4m&Y!UeBs<Qe.X\/Yh`h-Su1%gZ?+S5OVi[qSX\;KrlQAPoTp%%9Ld!l#e_C5D._Y42UGl]1P!538$?X"'cup2C*6n%;%%<@J>_
%RY<_VP.4=j<Q7.\?=>*o.)iN2N%MSn$uk+&/I;i;C;@d="J-4XM^#u*QnHe/Ne#'tBA;Ia.bK#]9(/&\TIroK['uD!BWr7f-K3-G
%;HLZ<OmDU\XB^,5#3ZrCB@,,9)>%C;g3#a:OH`]nJaVKj!*Dl#S1BaEn*^QMQ[@C,S1^'%[H^%<cb6JpPf\8K:`2qtlY9;i8C2**
%JPXbJHVU%(4#kk\?d3od^OG^ca-0jkoC:lXc@'fnId-3SP@$<L0nsV=!I_X7RKNLe0:N,bnor?2*8mYL+\gBl3Z$LIr>TB:r:Tg.
%L\-4Kfo4!N?T9Fmh!^[Hq.&;:0Ac^-qdr;+nD^tj-bjnLA8'jT5P!BQo*i_Wk1f&ir;$*2P!Ap,dk)Yhr==DSo]mm[9p`?of<_PM
%4F:kUKtR]/B8al.X0cnT!(HqtmUTNh1kd?;DFX5lD(p3&FYZqQHgN-&T$sF3*f6DFc^9JVA=Si0d!KT-TNUDD7o:Qi*;`uA3<&iA
%e9=^KCX=IY-n[^CP']sLJ84#\TZZl608Bn3p*hG99/lreTC72l!Z[JZWsf8T-TBXQ.cbl@QO*iO#4up/kS!F11(4:@IsNuW<MS-k
%h&kgRG.5.FNi""!o$XL;JFEHY)5S_4DOdph8(+*rpVP'gWo"eoDP;TR)asE'&:"D,RER*ZMQqh;?!f$7_^X5)BrD9lrkX])E.mM`
%CtL9k]-\9a8CHrth,CBUqjpU8Bu6(W/g8B1L]5\JgZkN`6?"mFMG-YpLMf12Go]m=m_1Zg`G1[X$lmYqQ;kZ'[`_7GQSl^.n,=<N
%W8up@a*onI:GO=^%iP<9@h[C9NA`5A9A:)_6O<#>/^[4IO4S!pa."-:Vmgs_dPae^jc5ILr$3r<Yimo`S5[&sJ$[9Ug\o&!a9Nq[
%$F+p0=Bdfg,q?Ht`3IZGnHa?:m_1!/cfP'L#c"j$S+D=-?iE&j*Q6mK$d'.(<M6o[/YsX`627A#TN7"l/Tlh9l'1o#cjXg.,)(S0
%H"?&0$HRrHBQ4n)PX]m/=k^7.F-9Dl%:[#6XLS]e]'39^St?F\f4#ZX?JgSikX4'CY:NH]&k6)R-Ea$0^]o\07%O&4;c`K(Fe8V\
%&HbErXeE//J`Nh[J+;^5'fSb2;4auP^JUm3#iA$:,CE$f3D*?1W1uCYf;L9T?8Cb'/J*>TM9lt4aAK!.Kj*ht;6PGjN*@h[5.b"J
%9r_pP.&[SdGNgH,(sJc[pM!9uWZD@F>DV0ANU#E=Q"V5qp:K4_R']98._E+MlB]NE2BCe0Fj4^lr5]gco'CO)hUQP4J6HkAR;/WN
%MckYop'3b!p+XgTItsZ&FO"@XTuNZj2j!5rUlLg[oQ(T-bD139W<csnC,fI;ehCX8Cj".""/>:TJ1H:_k"tr_8AZs5&f[.9KJkad
%Gk<iD4n$$3N(bYi>:@BqrVZ-X40`VXY5XnIipQjFp)e5Qs/1?aJ,/]6It.@`l,2[Krpb0iVgj-hbD1TEr9cd6Ie`j+&&8&9md\3\
%GFq'-j:?aRrR^@B5(E@p^OH.ZiUq-hna$55#lZ7Pi2<4Hr%J*Bl4<n&P#gO[~>
%AI9_PrivateDataEnd
