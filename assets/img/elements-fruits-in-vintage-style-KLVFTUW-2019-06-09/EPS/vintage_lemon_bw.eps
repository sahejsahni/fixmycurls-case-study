%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_lemon_bw.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 722 579
%%HiResBoundingBox: 0 0 721.8960 578.5992
%%CropBox: 0 0 721.8960 578.5992
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_lemon_bw</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T01:30:39+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T01:30:40+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T01:30:40+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>208</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYqo3t7Z2NrJd3s8dtaxDlLPMyoijxZmIAxViJ/MWbVGMXk/RrjXQCVOoufq&#xA;engjrS4lHKSn/FaN88jxdzLh70o1fVdat6jzX570zy5t+807S1i9eh8JrsyyE+6wjIk95SB3Bh19&#xA;5x/JQBzd6rr/AJpKAs/Ke/ZNiAfh5WkVPip047++R4osqklVz5u/KRGZrf8ALW/uPTMwd7mIhgbZ&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:3199A0C8D8E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3299A0C8D8E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b197324f-91dd-b341-8079-98b446edb086</stRef:instanceID>
            <stRef:documentID>xmp.did:F329A99815206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -578.599 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 578.599 li
721.896 578.599 li
721.896 0 li
cp
clp
[1 0 0 1 0 0 ]ct
513.756 390.042 mo
481.749 390.042 449.206 385.117 417.014 375.406 cv
339.327 351.957 295.737 302.07 279.85 218.402 cv
276.381 200.133 274.362 185.266 272.733 173.316 cv
271.913 167.266 271.198 161.984 270.444 157.43 cv
264.889 123.777 278.979 85.1016 280.342 81.4688 cv
281.217 78.3711 289.268 52.3633 315.346 43.6719 cv
320.854 41.8359 327.37 38.0313 334.909 33.625 cv
356.991 20.7188 393.627 0 451.944 0 cv
472.846 0 495.729 2.53516 519.956 7.53906 cv
580.655 20.0781 630.639 53.8945 666.596 100.566 cv
699.936 143.832 715.131 195.012 708.381 241.176 cv
709.44 244.766 713.178 257.543 717.846 275.07 cv
721.94 290.433 732.827 331.25 685.616 347.527 cv
668.35 353.48 655.514 358.125 644.194 362.222 cv
629.124 367.679 617.213 371.98 602.03 376.773 cv
574.163 385.582 544.459 390.042 513.756 390.042 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.27451 .207843 .145098 rgb
f
284.842 82.9375 mo
284.842 82.9375 291.795 56.5078 316.842 48.1602 cv
345.323 38.668 389.698 -14.9531 517.663 11.4727 cv
645.639 37.9023 717.448 151.098 703.542 241.512 cv
703.542 241.512 707.709 255.422 713.276 276.289 cv
718.834 297.152 723.709 322.886 683.37 336.796 cv
643.034 350.707 627.03 363.917 600.6 372.265 cv
574.178 380.613 506.913 397.589 418.381 370.875 cv
359.616 353.136 303.147 315.726 284.499 217.516 cv
279.284 190.043 277.342 170.172 275.112 156.656 cv
269.545 122.93 284.842 82.9375 284.842 82.9375 cv
cp
1 1 1 rgb
f
270.303 100.66 mo
271.022 101.063 271.561 101.551 271.963 102 cv
273.959 104.203 274.514 107.492 273.901 113.336 cv
273.545 116.746 273.979 118.531 274.28 119.168 cv
274.358 118.43 274.428 117.668 274.499 116.898 cv
274.936 112.141 275.436 106.75 277.788 101.777 cv
281.768 93.375 282.952 88.5781 283.209 85.9688 cv
282.784 86.8906 282.241 87.9531 281.417 89.1289 cv
278.334 93.5195 274.721 94.1953 271.842 94.1211 cv
271.811 94.293 271.78 94.457 271.752 94.6016 cv
271.557 95.7617 271.327 97.082 270.905 98.3438 cv
270.62 99.2109 270.428 100.008 270.303 100.66 cv
cp
274.401 139.953 mo
274.202 139.953 274.01 139.941 273.842 139.934 cv
271.862 139.824 269.409 138.449 269.014 134.926 cv
268.94 134.262 268.881 133.449 268.819 132.563 cv
268.706 131.016 268.448 127.48 267.936 126.281 cv
265.819 124.336 263.647 120.367 264.487 112.352 cv
264.67 110.668 264.694 109.555 264.674 108.852 cv
263.62 108.453 262.694 107.75 262.006 106.797 cv
259.811 103.742 260.749 98.8906 261.928 95.3516 cv
262.17 94.6367 262.292 93.8008 262.432 92.9844 cv
262.823 90.6875 264.049 83.6719 270.479 84.5 cv
272.881 84.8047 272.889 84.8047 273.667 83.6992 cv
274.229 82.9063 274.545 82.1602 274.932 81.293 cv
275.913 79.0625 277.135 76.2891 281.561 73.9023 cv
283.94 72.6211 285.608 68.8281 285.924 67.8789 cv
291.276 62.0742 li
292.436 65.0977 li
293.815 65.75 294.893 67.0229 295.417 68.5898 cv
296.147 70.793 295.752 73.3711 294.229 76.457 cv
294.241 76.4609 li
294.194 76.5508 293.999 76.9453 293.76 77.5586 cv
293.292 78.7695 292.53 81.1641 292.694 83.6602 cv
293.042 88.8203 290.963 96.0664 286.338 105.828 cv
284.702 109.285 284.307 113.598 283.92 117.766 cv
283.678 120.406 284.459 125.375 283.459 127.797 cv
280.846 134.055 276.42 139.953 274.401 139.953 cv
cp
.27451 .207843 .145098 rgb
f
290.061 74.2422 mo
290.061 74.2422 289.741 74.8398 289.346 75.8516 cv
288.659 77.6211 290.233 71.9844 289.713 83.9805 cv
289.487 89.2031 285.194 97.1953 282.065 103.801 cv
278.936 110.41 282.76 118.406 281.374 124.668 cv
279.975 130.93 274.069 137.535 273.721 134.406 cv
273.374 131.273 273.37 124.668 271.284 122.93 cv
270.182 122.008 268.502 119.453 269.194 112.844 cv
269.889 106.234 268.85 104.496 266.764 104.496 cv
264.678 104.496 265.374 99.9766 266.417 96.8477 cv
267.456 93.7188 267.108 88.8477 269.889 89.1953 cv
272.678 89.5469 274.241 87.9805 276.674 84.5 cv
279.112 81.0229 279.28 80.5078 283.803 78.0703 cv
288.327 75.6328 290.413 69.375 290.413 69.375 cv
290.413 69.375 292.198 70.2188 289.741 74.8398 cv
290.061 74.2422 li
cp
1 1 1 rgb
f
296.569 254.172 mo
296.569 254.172 375.319 426.671 618.858 359.398 cv
618.858 359.398 520.319 376.671 430.319 346.671 cv
328.139 312.617 296.569 254.172 296.569 254.172 cv
296.569 254.172 li
cp
.27451 .207843 .145098 rgb
f
705.272 223.082 mo
705.272 223.082 708.413 235.25 706.323 240.82 cv
704.229 246.379 712.924 264.809 715.709 286.023 cv
715.709 286.023 712.577 279.07 708.405 278.371 cv
704.233 277.676 704.581 276.285 701.452 269.332 cv
698.315 262.375 687.194 264.813 686.147 271.07 cv
685.112 277.328 686.842 280.46 679.542 286.371 cv
672.237 292.281 673.627 296.109 666.674 300.281 cv
659.717 304.453 646.167 332.625 645.815 334.71 cv
645.463 336.796 649.987 313.843 661.807 296.804 cv
668.639 286.953 671.549 277.676 678.151 268.289 cv
684.76 258.898 703.19 240.82 705.272 223.082 cv
cp
f
338.229 40.1641 mo
338.229 40.1641 420.467 .171875 503.932 16.168 cv
503.932 16.168 609.303 29.0352 670.502 120.492 cv
670.502 120.492 608.838 50.8438 523.405 28.168 cv
427.772 2.78516 338.229 40.1641 338.229 40.1641 cv
cp
f
gsave
399.256 119.102 mo
399.256 119.102 400.999 88.8477 434.374 85.7188 cv
466.499 82.707 508.108 102.41 505.67 138.922 cv
503.237 175.438 470.553 183.438 439.596 173.008 cv
408.643 162.574 395.776 140.316 399.256 119.102 cv
cp
clp
403.081 94.7617 mo
403.081 94.7617 389.87 104.848 394.737 126.059 cv
394.737 126.059 394.737 112.148 403.081 94.7617 cv
cp
1 1 .886275 rgb
f
412.124 88.1563 mo
412.124 88.1563 394.737 107.625 398.913 141.012 cv
398.913 141.012 399.256 116.32 412.124 88.1563 cv
cp
.27451 .207843 .145098 rgb
f
423.252 81.375 mo
423.252 81.375 399.256 113.191 405.518 152.316 cv
405.518 152.316 405.518 121.539 423.252 81.375 cv
cp
f
433.163 79.8047 mo
433.163 79.8047 406.557 116.844 411.979 163.789 cv
411.979 163.789 411.979 127.355 433.163 79.8047 cv
cp
f
444.116 79.8047 mo
444.116 79.8047 413.374 119.371 419.639 169.527 cv
419.639 169.527 419.639 130.602 444.116 79.8047 cv
cp
f
453.506 81.375 mo
453.506 81.375 422.764 120.938 429.03 171.094 cv
429.03 171.094 429.03 132.172 453.506 81.375 cv
cp
f
461.85 85.5469 mo
461.85 85.5469 431.108 125.109 437.374 175.266 cv
437.374 175.266 437.374 136.34 461.85 85.5469 cv
cp
f
472.807 87.1094 mo
472.807 87.1094 440.752 128.285 447.28 180.48 cv
447.28 180.48 447.28 139.977 472.807 87.1094 cv
cp
f
482.194 90.7617 mo
482.194 90.7617 450.143 131.938 456.67 184.133 cv
456.67 184.133 456.67 143.625 482.194 90.7617 cv
cp
f
492.631 91.8047 mo
492.631 91.8047 460.573 132.977 467.104 185.176 cv
467.104 185.176 467.104 144.672 492.631 91.8047 cv
cp
f
497.1 105.594 mo
497.1 105.594 471.042 138.484 476.741 179.758 cv
476.741 179.758 477.456 147.402 497.1 105.594 cv
cp
f
505.444 108.723 mo
505.444 108.723 479.389 141.617 485.084 182.887 cv
485.084 182.887 485.795 150.535 505.444 108.723 cv
cp
f
510.885 118.93 mo
510.885 118.93 489.584 145.297 494.256 178.398 cv
494.256 178.398 494.831 152.453 510.885 118.93 cv
cp
f
grestore
336.143 37.0313 mo
336.143 37.0313 325.186 47.4648 324.147 51.1172 cv
323.096 54.7695 320.491 54.7695 315.795 52.6836 cv
311.1 50.5977 301.709 53.7227 301.709 53.7227 cv
301.709 53.7227 322.573 41.207 336.143 37.0313 cv
cp
f
gsave
338.229 41.207 mo
338.229 41.207 381.522 14.082 456.635 16.6914 cv
531.749 19.3008 587.042 44.3359 618.858 68.8516 cv
650.678 93.3711 693.452 135.102 707.018 195.609 cv
697.624 207.605 li
697.624 207.605 647.03 179.961 637.12 162.227 cv
627.209 144.488 581.823 91.2813 477.499 68.332 cv
404.444 52.2578 375.26 63.6367 352.311 64.1563 cv
329.362 64.6797 318.405 53.7227 338.229 41.207 cv
cp
clp
384.131 21.3828 mo
384.131 21.3828 364.686 32.8047 358.045 73.0229 cv
358.045 73.0229 356.155 32.8047 384.131 21.3828 cv
cp
f
395.608 19.3008 mo
395.608 19.3008 371.885 32.2188 363.788 77.7188 cv
363.788 77.7188 364.831 31.2969 395.608 19.3008 cv
cp
f
400.819 19.3008 mo
400.819 19.3008 371.612 34.9453 369.526 88.6758 cv
369.526 88.6758 375.78 44.3359 400.819 19.3008 cv
cp
f
409.694 17.2148 mo
409.694 17.2148 380.479 32.8594 378.393 86.5898 cv
378.393 86.5898 384.647 42.25 409.694 17.2148 cv
cp
f
419.596 13.5586 mo
419.596 13.5586 390.389 29.2109 388.307 82.9375 cv
388.307 82.9375 394.561 38.6016 419.596 13.5586 cv
cp
f
427.944 11.9961 mo
427.944 11.9961 398.733 27.6445 396.647 81.375 cv
396.647 81.375 402.913 37.0313 427.944 11.9961 cv
cp
f
436.295 10.9492 mo
436.295 10.9492 407.081 26.6016 404.995 80.3281 cv
404.995 80.3281 411.256 35.9922 436.295 10.9492 cv
cp
f
444.639 10.4297 mo
444.639 10.4297 415.424 26.0781 413.342 79.8047 cv
413.342 79.8047 419.596 35.4688 444.639 10.4297 cv
cp
f
452.983 10.4297 mo
452.983 10.4297 423.776 26.0781 421.69 79.8047 cv
421.69 79.8047 427.944 35.4688 452.983 10.4297 cv
cp
f
461.327 9.91016 mo
461.327 9.91016 432.12 25.5586 430.03 79.2852 cv
430.03 79.2852 436.295 34.9453 461.327 9.91016 cv
cp
f
469.151 10.9492 mo
469.151 10.9492 439.944 26.6016 437.858 80.3281 cv
437.858 80.3281 444.116 35.9922 469.151 10.9492 cv
cp
f
477.499 10.4297 mo
477.499 10.4297 448.292 26.0781 446.202 79.8047 cv
446.202 79.8047 452.467 35.4688 477.499 10.4297 cv
cp
f
485.327 12.5156 mo
485.327 12.5156 456.116 28.168 454.03 81.8906 cv
454.03 81.8906 460.284 37.5547 485.327 12.5156 cv
cp
f
493.678 11.9961 mo
493.678 11.9961 464.459 27.6445 462.37 81.375 cv
462.37 81.375 468.631 37.0313 493.678 11.9961 cv
cp
f
501.495 13.0391 mo
501.495 13.0391 472.292 28.6875 470.194 82.4141 cv
470.194 82.4141 476.459 38.0781 501.495 13.0391 cv
cp
f
509.842 12.5156 mo
509.842 12.5156 480.631 28.168 478.545 81.8906 cv
478.545 81.8906 484.799 37.5547 509.842 12.5156 cv
cp
f
517.143 15.125 mo
517.143 15.125 487.936 30.7729 485.846 84.5 cv
485.846 84.5 492.104 40.1641 517.143 15.125 cv
cp
f
525.495 14.6055 mo
525.495 14.6055 496.276 30.25 494.194 83.9805 cv
494.194 83.9805 500.456 39.6406 525.495 14.6055 cv
cp
f
532.795 18.2539 mo
532.795 18.2539 503.581 33.9063 501.495 87.6328 cv
501.495 87.6328 507.749 43.293 532.795 18.2539 cv
cp
f
541.139 17.7344 mo
541.139 17.7344 511.924 33.3828 509.842 87.1094 cv
509.842 87.1094 516.1 42.7729 541.139 17.7344 cv
cp
f
548.444 20.3438 mo
548.444 20.3438 519.233 35.9922 517.143 89.7188 cv
517.143 89.7188 523.405 45.3828 548.444 20.3438 cv
cp
f
556.792 19.8203 mo
556.792 19.8203 527.573 35.4688 525.495 89.1953 cv
525.495 89.1953 531.749 44.8594 556.792 19.8203 cv
cp
f
559.401 24.5156 mo
559.401 24.5156 531.749 55.2891 533.311 92.3281 cv
533.311 92.3281 536.967 60.5078 559.401 24.5156 cv
cp
f
540.397 91.1719 mo
540.397 91.1719 543.874 48 564.831 28.2813 cv
564.831 28.2813 548.256 53.4688 540.397 91.1719 cv
cp
f
547.178 94.2969 mo
547.178 94.2969 550.651 51.1328 571.612 31.4102 cv
571.612 31.4102 555.045 56.6016 547.178 94.2969 cv
cp
f
553.959 96.3828 mo
553.959 96.3828 557.432 53.2148 578.393 33.4961 cv
578.393 33.4961 561.823 58.6875 553.959 96.3828 cv
cp
f
560.741 99.5156 mo
560.741 99.5156 564.213 56.3438 585.17 36.6289 cv
585.17 36.6289 568.608 61.8164 560.741 99.5156 cv
cp
f
566.479 105.25 mo
566.479 105.25 569.952 62.082 590.913 42.3672 cv
590.913 42.3672 574.346 67.5547 566.479 105.25 cv
cp
f
573.256 108.383 mo
573.256 108.383 576.733 65.2148 597.69 45.4961 cv
597.69 45.4961 581.127 70.6875 573.256 108.383 cv
cp
f
579.522 112.555 mo
579.522 112.555 582.991 69.3867 603.952 49.668 cv
603.952 49.668 587.381 74.8555 579.522 112.555 cv
cp
f
586.303 115.684 mo
586.303 115.684 589.772 72.5156 610.733 52.7969 cv
610.733 52.7969 594.167 77.9883 586.303 115.684 cv
cp
f
592.038 120.379 mo
592.038 120.379 595.514 77.2109 616.471 57.4922 cv
616.471 57.4922 599.909 82.6836 592.038 120.379 cv
cp
f
598.815 123.512 mo
598.815 123.512 602.292 80.3398 623.256 60.625 cv
623.256 60.625 606.686 85.8125 598.815 123.512 cv
cp
f
604.557 129.25 mo
604.557 129.25 608.034 86.0781 628.991 66.3594 cv
628.991 66.3594 612.417 91.5508 604.557 129.25 cv
cp
f
611.338 132.375 mo
611.338 132.375 614.811 89.2109 635.772 69.4922 cv
635.772 69.4922 619.206 94.6797 611.338 132.375 cv
cp
f
617.592 139.68 mo
617.592 139.68 621.077 96.5117 642.038 76.793 cv
642.038 76.793 625.463 101.984 617.592 139.68 cv
cp
f
624.374 142.813 mo
624.374 142.813 627.858 99.6406 648.815 79.9258 cv
648.815 79.9258 632.241 105.113 624.374 142.813 cv
cp
f
629.596 149.594 mo
629.596 149.594 633.069 106.422 654.034 86.7031 cv
654.034 86.7031 637.459 111.891 629.596 149.594 cv
cp
f
636.374 152.719 mo
636.374 152.719 639.85 109.551 660.815 89.8359 cv
660.815 89.8359 644.245 115.023 636.374 152.719 cv
cp
f
642.116 157.934 mo
642.116 157.934 645.584 114.77 666.549 95.0508 cv
666.549 95.0508 649.983 120.238 642.116 157.934 cv
cp
f
648.901 161.066 mo
648.901 161.066 652.37 117.898 673.327 98.1797 cv
673.327 98.1797 656.764 123.371 648.901 161.066 cv
cp
f
653.588 168.891 mo
653.588 168.891 657.061 125.723 678.03 106.008 cv
678.03 106.008 661.456 131.195 653.588 168.891 cv
cp
f
660.366 172.023 mo
660.366 172.023 663.85 128.852 684.811 109.133 cv
684.811 109.133 668.237 134.324 660.366 172.023 cv
cp
f
665.584 177.238 mo
665.584 177.238 669.057 134.07 690.026 114.348 cv
690.026 114.348 673.452 139.539 665.584 177.238 cv
cp
f
672.37 180.367 mo
672.37 180.367 675.842 137.199 696.807 117.48 cv
696.807 117.48 680.233 142.668 672.37 180.367 cv
cp
f
678.108 189.234 mo
678.108 189.234 681.577 146.066 702.545 126.344 cv
702.545 126.344 685.971 151.539 678.108 189.234 cv
cp
f
684.889 192.367 mo
684.889 192.367 688.358 149.195 709.323 129.477 cv
709.323 129.477 692.756 154.664 684.889 192.367 cv
cp
f
689.581 199.145 mo
689.581 199.145 693.053 155.977 714.018 136.258 cv
714.018 136.258 697.448 161.449 689.581 199.145 cv
cp
f
696.362 202.277 mo
696.362 202.277 699.834 159.105 720.795 139.391 cv
720.795 139.391 704.229 164.574 696.362 202.277 cv
cp
f
376.823 20.8633 mo
376.823 20.8633 357.381 32.2852 350.741 72.5039 cv
350.741 72.5039 348.85 32.2852 376.823 20.8633 cv
cp
f
370.569 17.2148 mo
370.569 17.2148 351.124 28.6328 344.479 68.8516 cv
344.479 68.8516 342.584 28.6328 370.569 17.2148 cv
cp
f
grestore
gsave
287.819 212.922 mo
287.819 212.922 281.569 299.171 430.319 346.671 cv
547.108 383.968 614.069 364.171 625.319 344.171 cv
636.569 324.171 641.569 280.421 622.819 275.422 cv
604.069 270.422 565.768 212.551 449.487 199.176 cv
308.237 182.926 287.819 206.672 287.819 212.922 cv
cp
clp
479.069 227.426 mo
479.069 227.426 449.854 303.585 459.245 361.488 cv
459.245 361.488 442.553 298.89 479.069 227.426 cv
cp
f
488.975 226.383 mo
488.975 226.383 453.506 292.632 469.151 375.046 cv
469.151 375.046 462.37 302.023 488.975 226.383 cv
cp
f
498.366 226.906 mo
498.366 226.906 462.897 293.152 478.545 375.57 cv
478.545 375.57 471.764 302.542 498.366 226.906 cv
cp
f
508.276 229.512 mo
508.276 229.512 472.807 295.761 488.459 378.179 cv
488.459 378.179 481.674 305.148 508.276 229.512 cv
cp
f
519.233 232.645 mo
519.233 232.645 483.756 298.89 499.409 381.308 cv
499.409 381.308 492.631 308.281 519.233 232.645 cv
cp
f
529.135 233.688 mo
529.135 233.688 493.678 299.933 509.323 382.351 cv
509.323 382.351 502.534 309.32 529.135 233.688 cv
cp
f
539.577 235.773 mo
539.577 235.773 504.108 302.023 519.752 384.437 cv
519.752 384.437 512.967 311.41 539.577 235.773 cv
cp
f
548.959 238.383 mo
548.959 238.383 513.491 304.625 529.135 387.046 cv
529.135 387.046 522.358 314.019 548.959 238.383 cv
cp
f
556.792 248.813 mo
556.792 248.813 524.428 308.554 538.706 382.875 cv
538.706 382.875 532.514 317.019 556.792 248.813 cv
cp
f
564.19 258.059 mo
564.19 258.059 532.608 313.847 547.846 382.492 cv
547.846 382.492 540.807 321.578 564.19 258.059 cv
cp
f
570.424 266.688 mo
570.424 266.688 543.229 319.21 558.655 382.601 cv
558.655 382.601 550.815 326.203 570.424 266.688 cv
cp
f
578.163 276.469 mo
578.163 276.469 554.686 323.554 569.389 379.644 cv
569.389 379.644 561.569 329.652 578.163 276.469 cv
cp
f
585.874 283.652 mo
585.874 283.652 563.092 326.628 578.592 376.632 cv
578.592 376.632 570.061 331.917 585.874 283.652 cv
cp
f
591.444 298.859 mo
591.444 298.859 573.854 334.203 586.522 375.179 cv
586.522 375.179 579.389 338.519 591.444 298.859 cv
cp
f
597.917 306.562 mo
597.917 306.562 581.186 338.281 594.772 373.398 cv
594.772 373.398 586.811 341.769 597.917 306.562 cv
cp
f
604.698 311.773 mo
604.698 311.773 590.006 339.132 601.831 369.367 cv
601.831 369.367 594.917 342.128 604.698 311.773 cv
cp
f
611.042 316.625 mo
611.042 316.625 597.35 341.054 608.147 367.929 cv
608.147 367.929 601.87 343.699 611.042 316.625 cv
cp
f
616.78 321.843 mo
616.78 321.843 605.592 343.019 614.663 366.46 cv
614.663 366.46 609.35 345.351 616.78 321.843 cv
cp
f
397.819 209.926 mo
397.819 209.926 368.604 286.085 377.995 343.988 cv
377.995 343.988 361.303 281.39 397.819 209.926 cv
cp
f
407.725 208.883 mo
407.725 208.883 372.256 275.133 387.901 357.546 cv
387.901 357.546 381.12 284.523 407.725 208.883 cv
cp
f
417.116 209.406 mo
417.116 209.406 381.647 275.652 397.295 358.07 cv
397.295 358.07 390.514 285.042 417.116 209.406 cv
cp
f
427.026 212.012 mo
427.026 212.012 391.557 278.261 407.209 360.679 cv
407.209 360.679 400.424 287.648 427.026 212.012 cv
cp
f
437.983 215.145 mo
437.983 215.145 402.506 281.39 418.159 363.808 cv
418.159 363.808 411.381 290.781 437.983 215.145 cv
cp
f
447.885 216.188 mo
447.885 216.188 412.428 282.433 428.073 364.851 cv
428.073 364.851 421.284 291.82 447.885 216.188 cv
cp
f
458.327 218.273 mo
458.327 218.273 422.858 284.523 438.502 366.937 cv
438.502 366.937 431.717 293.91 458.327 218.273 cv
cp
f
467.709 220.883 mo
467.709 220.883 432.241 287.125 447.885 369.546 cv
447.885 369.546 441.108 296.519 467.709 220.883 cv
cp
f
316.569 198.676 mo
316.569 198.676 287.354 274.836 296.745 332.738 cv
296.745 332.738 280.053 270.141 316.569 198.676 cv
cp
f
326.475 197.633 mo
326.475 197.633 291.006 263.883 306.651 346.296 cv
306.651 346.296 299.87 273.273 326.475 197.633 cv
cp
f
335.866 198.156 mo
335.866 198.156 300.397 264.402 316.045 346.82 cv
316.045 346.82 309.264 273.793 335.866 198.156 cv
cp
f
345.776 200.762 mo
345.776 200.762 310.307 267.012 325.959 349.429 cv
325.959 349.429 319.174 276.398 345.776 200.762 cv
cp
f
356.733 203.895 mo
356.733 203.895 321.256 270.141 336.909 352.558 cv
336.909 352.558 330.131 279.531 356.733 203.895 cv
cp
f
366.635 204.938 mo
366.635 204.938 331.178 271.184 346.823 353.601 cv
346.823 353.601 340.034 280.57 366.635 204.938 cv
cp
f
377.077 207.023 mo
377.077 207.023 341.608 273.273 357.252 355.687 cv
357.252 355.687 350.467 282.66 377.077 207.023 cv
cp
f
386.459 209.633 mo
386.459 209.633 350.991 275.875 366.635 358.296 cv
366.635 358.296 359.858 285.269 386.459 209.633 cv
cp
f
grestore
269.202 112.844 mo
269.202 112.844 265.725 104.324 268.331 101.715 cv
270.944 99.1055 271.846 94.1211 271.846 94.1211 cv
271.846 94.1211 274.049 97.0703 271.967 102 cv
269.893 106.93 266.768 118.406 271.987 127.797 cv
271.987 127.797 265.377 120.316 269.202 112.844 cv
cp
f
112.098 422.447 mo
110.938 422.548 109.566 422.607 107.902 422.607 cv
104.68 422.603 101.773 422.689 99.0703 422.779 cv
91.5234 423.001 85.0078 423.197 77.3398 421.244 cv
73 420.142 69.5781 419.525 66.5508 418.974 cv
62.9648 418.326 59.582 417.708 55.6602 416.478 cv
53.4766 415.791 52.4727 415.728 51.2031 415.638 cv
48.2422 415.455 45.6211 415.099 38.8789 412.291 cv
30.3281 408.732 26.3789 405.298 22.1875 401.654 cv
20.6914 400.353 19.1172 398.978 17.1992 397.521 cv
9.875 391.927 2.52734 384.291 2.21484 383.97 cv
0 381.662 li
1.31641 378.744 li
1.57422 378.177 7.73438 364.701 19.5703 351.138 cv
32.7305 336.056 54.0938 322.31 60.3359 318.451 cv
68.0586 313.677 85.5039 305.103 115.461 301.373 cv
118.656 300.978 121.75 300.634 124.758 300.361 cv
151.691 297.931 173.254 300.431 203.734 320.396 cv
206.523 322.22 li
205.738 325.47 li
205.43 326.732 198.008 356.724 177.254 382.837 cv
157.234 408.033 145.363 414.048 129.191 416.822 cv
123.648 417.767 121.984 418.779 120.375 419.751 cv
118.23 421.048 116.258 422.064 112.098 422.447 cv
cp
f
201.141 324.357 mo
201.141 324.357 193.895 354.298 173.551 379.896 cv
153.203 405.498 141.988 409.826 128.391 412.154 cv
114.781 414.494 120.066 417.884 107.902 417.876 cv
95.75 417.873 88.1211 419.107 78.5039 416.662 cv
68.8945 414.212 63.9063 414.111 57.0859 411.962 cv
50.2617 409.818 51.5977 412.466 40.6953 407.919 cv
29.7813 403.38 27.1953 399.193 20.0742 393.755 cv
12.9531 388.322 5.625 380.689 5.625 380.689 cv
5.625 380.689 11.625 367.447 23.1367 354.244 cv
34.6563 341.048 53.3984 328.306 62.8203 322.474 cv
72.2422 316.654 91.3164 306.88 118.078 303.548 cv
150.32 299.533 170.008 303.955 201.141 324.357 cv
cp
1 1 1 rgb
f
189.801 326.4 mo
189.801 326.4 159.648 357.923 22.2617 379.24 cv
22.2617 379.24 115.73 364.517 189.801 326.4 cv
cp
.27451 .207843 .145098 rgb
f
109.113 366.681 mo
109.113 366.681 108.445 382.455 95.582 408.236 cv
95.582 408.236 106.32 382.123 105.953 366.447 cv
105.953 366.447 108.695 362.005 109.113 366.681 cv
cp
f
117.301 364.544 mo
117.301 364.544 115.688 383.373 102.824 409.146 cv
102.824 409.146 114.508 379.986 114.137 364.306 cv
114.137 364.306 116.883 359.869 117.301 364.544 cv
cp
f
125.859 362.724 mo
125.859 362.724 123.309 382.685 110.445 408.462 cv
110.445 408.462 123.07 378.169 122.703 362.486 cv
122.703 362.486 125.445 358.052 125.859 362.724 cv
cp
f
133.703 360.619 mo
133.703 360.619 130.641 382.72 117.785 408.501 cv
117.785 408.501 130.91 376.06 130.539 360.38 cv
130.539 360.38 133.277 355.943 133.703 360.619 cv
cp
f
141.453 357.474 mo
141.453 357.474 139.648 378.068 126.789 403.841 cv
126.789 403.841 138.66 372.919 138.293 357.24 cv
138.293 357.24 141.031 352.802 141.453 357.474 cv
cp
f
150.012 355.654 mo
150.012 355.654 148.086 374.857 135.23 400.638 cv
135.23 400.638 147.219 371.099 146.852 355.416 cv
146.852 355.416 149.598 350.982 150.012 355.654 cv
cp
f
157.852 353.548 mo
157.852 353.548 157.184 369.322 144.328 395.103 cv
144.328 395.103 155.063 368.99 154.695 353.314 cv
154.695 353.314 157.43 348.876 157.852 353.548 cv
cp
f
166.68 346.822 mo
166.68 346.822 164.754 366.025 151.891 391.802 cv
151.891 391.802 163.879 362.259 163.512 346.583 cv
163.512 346.583 166.258 342.142 166.68 346.822 cv
cp
f
174.52 344.712 mo
174.52 344.712 173.844 360.49 160.988 386.263 cv
160.988 386.263 171.715 360.158 171.352 344.478 cv
171.352 344.478 174.094 340.041 174.52 344.712 cv
cp
f
183.566 336.568 mo
183.566 336.568 182.883 349.888 171.199 371.724 cv
171.199 371.724 180.977 349.623 180.719 336.376 cv
180.719 336.376 183.199 332.611 183.566 336.568 cv
cp
f
94.0898 370.572 mo
94.0898 370.572 93.4883 385.189 81.6953 409.076 cv
81.6953 409.076 91.5352 384.884 91.1836 370.341 cv
91.1836 370.341 93.6992 366.232 94.0898 370.572 cv
cp
f
101.609 368.595 mo
101.609 368.595 100.141 386.044 88.3516 409.931 cv
88.3516 409.931 99.0547 382.904 98.6992 368.369 cv
98.6992 368.369 101.219 364.251 101.609 368.595 cv
cp
f
78.4688 373.701 mo
78.4688 373.701 77.8516 386.72 66.7656 408.029 cv
66.7656 408.029 76.0391 386.451 75.7578 373.509 cv
75.7578 373.509 78.1211 369.845 78.4688 373.701 cv
cp
f
85.4961 371.916 mo
85.4961 371.916 84.0625 387.455 72.9648 408.763 cv
72.9648 408.763 83.0586 384.662 82.7852 371.724 cv
82.7852 371.724 85.1484 368.056 85.4961 371.916 cv
cp
f
64.207 377.017 mo
64.207 377.017 63.625 388.224 53.7188 406.595 cv
53.7188 406.595 62.0078 387.998 61.8047 376.861 cv
61.8047 376.861 63.9023 373.697 64.207 377.017 cv
cp
f
70.4531 375.458 mo
70.4531 375.458 69.1367 388.841 59.2305 407.212 cv
59.2305 407.212 68.2539 386.439 68.043 375.306 cv
68.043 375.306 70.1484 372.142 70.4531 375.458 cv
cp
f
50.7695 379.205 mo
50.7695 379.205 50.2734 388.599 41.9609 403.998 cv
41.9609 403.998 48.918 388.412 48.7461 379.076 cv
48.7461 379.076 50.5156 376.419 50.7695 379.205 cv
cp
f
57.4219 378.119 mo
57.4219 378.119 56.3164 389.341 47.9961 404.736 cv
47.9961 404.736 55.5781 387.33 55.3984 377.998 cv
55.3984 377.998 57.1758 375.341 57.4219 378.119 cv
cp
f
38.2969 380.333 mo
38.2969 380.333 37.1641 389.595 32.375 394.56 cv
32.375 394.56 36.4531 389.541 36.2813 380.201 cv
36.2813 380.201 38.043 377.548 38.2969 380.333 cv
cp
f
44.9531 379.251 mo
44.9531 379.251 46.418 384.583 38.1016 399.982 cv
38.1016 399.982 43.1133 388.451 42.9375 379.126 cv
42.9375 379.126 44.6992 376.47 44.9531 379.251 cv
cp
f
105.027 355.478 mo
105.027 355.478 97.3438 341.689 74.2852 324.419 cv
74.2852 324.419 95.5977 342.935 102.301 357.115 cv
102.301 357.115 106.75 359.849 105.027 355.478 cv
cp
f
89.8555 358.755 mo
89.8555 358.755 82.7578 345.962 61.4961 329.904 cv
61.4961 329.904 81.1484 347.111 87.3594 360.259 cv
87.3594 360.259 91.4453 362.802 89.8555 358.755 cv
cp
f
97.457 357.142 mo
97.457 357.142 88.3125 342.208 67.0625 326.146 cv
67.0625 326.146 88.75 345.498 94.9609 358.646 cv
94.9609 358.646 99.0547 361.197 97.457 357.142 cv
cp
f
74.4922 362.962 mo
74.4922 362.962 68.1016 351.607 48.6211 337.544 cv
48.6211 337.544 66.5898 352.662 72.1602 364.349 cv
72.1602 364.349 75.9141 366.568 74.4922 362.962 cv
cp
f
81.5703 361.412 mo
81.5703 361.412 73.3125 348.169 53.8359 334.103 cv
53.8359 334.103 73.668 351.107 79.2344 362.787 cv
79.2344 362.787 82.9844 365.009 81.5703 361.412 cv
cp
f
60.2578 366.408 mo
60.2578 366.408 54.7031 356.654 37.6055 344.681 cv
37.6055 344.681 53.3594 357.58 58.1719 367.623 cv
58.1719 367.623 61.4766 369.505 60.2578 366.408 cv
cp
f
66.5352 364.994 mo
66.5352 364.994 59.3477 353.623 42.25 341.654 cv
42.25 341.654 59.6484 356.162 64.4492 366.212 cv
64.4492 366.212 67.7578 368.091 66.5352 364.994 cv
cp
f
47.2617 370.482 mo
47.2617 370.482 42.6055 362.31 28.2695 352.287 cv
28.2695 352.287 41.4805 363.08 45.5195 371.498 cv
45.5195 371.498 48.2891 373.08 47.2617 370.482 cv
cp
f
53.6992 368.462 mo
53.6992 368.462 47.6719 358.939 33.332 348.912 cv
33.332 348.912 47.9219 361.06 51.9453 369.478 cv
51.9453 369.478 54.7227 371.06 53.6992 368.462 cv
cp
f
35.6172 375.072 mo
35.6172 375.072 30.4453 367.306 23.9336 365.013 cv
23.9336 365.013 29.832 367.669 33.875 376.099 cv
33.875 376.099 36.6406 377.669 35.6172 375.072 cv
cp
f
42.0547 373.052 mo
42.0547 373.052 40.9648 367.626 26.625 357.603 cv
26.625 357.603 36.2656 365.654 40.3008 374.072 cv
40.3008 374.072 43.0703 375.65 42.0547 373.052 cv
cp
f
126.719 348.283 mo
126.719 348.283 119.035 334.494 95.9766 317.228 cv
95.9766 317.228 117.289 335.744 124 349.916 cv
124 349.916 128.438 352.65 126.719 348.283 cv
cp
f
111.984 352.564 mo
111.984 352.564 102.188 337.447 80.9336 321.392 cv
80.9336 321.392 103.289 340.923 109.492 354.068 cv
109.492 354.068 113.582 356.615 111.984 352.564 cv
cp
f
119.594 350.951 mo
119.594 350.951 107.098 332.646 85.1914 318.216 cv
85.1914 318.216 110.891 339.31 117.102 352.455 cv
117.102 352.455 121.184 355.005 119.594 350.951 cv
cp
f
134.5 345.482 mo
134.5 345.482 126.809 331.693 103.75 314.427 cv
103.75 314.427 125.063 332.943 131.773 347.123 cv
131.773 347.123 136.211 349.857 134.5 345.482 cv
cp
f
142.277 342.173 mo
142.277 342.173 135.148 329.541 113.43 313.916 cv
113.43 313.916 133.469 330.716 139.66 343.712 cv
139.66 343.712 143.855 346.177 142.277 342.173 cv
cp
f
149.711 339.4 mo
149.711 339.4 142.586 326.771 120.859 311.154 cv
120.859 311.154 140.906 327.955 147.098 340.947 cv
147.098 340.947 151.285 343.408 149.711 339.4 cv
cp
f
156.734 335.189 mo
156.734 335.189 150.344 324.322 129.961 311.376 cv
129.961 311.376 148.672 325.423 154.148 336.654 cv
154.148 336.654 158.109 338.662 156.734 335.189 cv
cp
f
166.629 332.279 mo
166.629 332.279 160.352 321.986 139.633 310.158 cv
139.633 310.158 158.582 323.111 163.895 333.783 cv
163.895 333.783 167.926 335.595 166.629 332.279 cv
cp
f
176.473 328.193 mo
176.473 328.193 171.117 319.837 152.594 310.732 cv
152.594 310.732 169.453 320.841 173.918 329.544 cv
173.918 329.544 177.539 330.912 176.473 328.193 cv
cp
f
116.516 324.349 mo
115.852 324.025 115.078 323.595 114.172 323.041 cv
112.422 321.962 110.809 321.041 109.305 320.181 cv
105.117 317.787 89.2656 309.72 80 294.38 cv
76.9453 289.31 75.5234 286.392 74.4609 283.017 cv
74.0742 281.802 73.6719 280.533 73.1211 279.091 cv
70.9922 273.599 69.5391 266.986 69.4688 266.708 cv
69.0352 264.712 li
70.7266 263.56 li
71.0547 263.341 78.9063 258.052 89.8906 254.611 cv
102.098 250.783 118.328 250.419 123.004 250.4 cv
128.82 250.376 141.184 251.525 158.758 259.486 cv
160.633 260.337 162.422 261.185 164.156 262.041 cv
179.648 269.708 190.57 278.267 200.516 299.322 cv
201.422 301.244 li
199.91 302.748 li
199.324 303.333 185.27 317.208 165.242 324.505 cv
145.926 331.556 137.449 330.873 127.707 326.986 cv
124.367 325.658 123.133 325.65 121.926 325.646 cv
120.32 325.63 118.914 325.533 116.516 324.349 cv
cp
f
197.773 300.611 mo
197.773 300.611 183.84 314.505 164.207 321.669 cv
144.578 328.833 137.797 328.99 129.602 325.716 cv
121.406 322.451 122.379 324.521 115.758 320.462 cv
109.129 316.4 104.465 316.009 100.047 311.466 cv
95.6172 306.919 92.2617 305.169 89.2656 301.724 cv
86.2578 298.275 86.875 298.716 82.4531 292.603 cv
78.0195 286.49 78.0039 283.341 75.9336 277.998 cv
73.875 272.662 72.4297 266.064 72.4297 266.064 cv
72.4297 266.064 80.1172 260.845 90.7969 257.494 cv
101.48 254.146 115.945 253.451 123.02 253.423 cv
130.105 253.392 143.758 254.435 159.453 261.548 cv
178.367 270.123 187.625 279.107 197.773 300.611 cv
cp
1 1 1 rgb
f
190.922 297.943 mo
190.922 297.943 163.961 305.06 81.9805 270.826 cv
81.9805 270.826 137.828 293.994 190.922 297.943 cv
cp
.27451 .207843 .145098 rgb
f
133.5 292.962 mo
133.5 292.962 127.875 301.341 112.262 311.095 cv
112.262 311.095 126.824 300.443 131.859 291.783 cv
131.859 291.783 134.832 290.279 133.5 292.962 cv
cp
f
138.672 294.537 mo
138.672 294.537 131.516 304.259 115.898 314.009 cv
115.898 314.009 132 302.017 137.031 293.349 cv
137.031 293.349 140.008 291.849 138.672 294.537 cv
cp
f
143.945 296.392 mo
143.945 296.392 135.895 306.419 120.285 316.177 cv
120.285 316.177 137.277 303.88 142.305 295.216 cv
142.305 295.216 145.285 293.712 143.945 296.392 cv
cp
f
148.93 297.865 mo
148.93 297.865 139.879 308.892 124.27 318.646 cv
124.27 318.646 142.242 305.345 147.281 296.685 cv
147.281 296.685 150.25 295.181 148.93 297.865 cv
cp
f
154.195 298.74 mo
154.195 298.74 146.344 309.361 130.73 319.115 cv
130.73 319.115 147.523 306.224 152.551 297.552 cv
152.551 297.552 155.523 296.048 154.195 298.74 cv
cp
f
159.469 300.607 mo
159.469 300.607 152.016 310.435 136.402 320.189 cv
136.402 320.189 152.789 308.087 157.824 299.419 cv
157.824 299.419 160.805 297.919 159.469 300.607 cv
cp
f
164.445 302.076 mo
164.445 302.076 158.82 310.443 143.199 320.205 cv
143.199 320.205 157.766 309.556 162.801 300.892 cv
162.801 300.892 165.773 299.384 164.445 302.076 cv
cp
f
171.508 301.353 mo
171.508 301.353 164.039 311.177 148.43 320.931 cv
148.43 320.931 164.82 308.833 169.855 300.166 cv
169.855 300.166 172.828 298.662 171.508 301.353 cv
cp
f
176.473 302.818 mo
176.473 302.818 170.844 311.193 155.23 320.951 cv
155.23 320.951 169.797 310.302 174.828 301.634 cv
174.828 301.634 177.805 300.13 176.473 302.818 cv
cp
f
184.125 301.4 mo
184.125 301.4 179.309 308.431 165.652 316.431 cv
165.652 316.431 178.355 307.65 182.641 300.345 cv
182.641 300.345 185.246 299.126 184.125 301.4 cv
cp
f
124.016 290.068 mo
124.016 290.068 118.813 297.833 104.41 306.919 cv
104.41 306.919 117.852 297.017 122.512 288.974 cv
122.512 288.974 125.246 287.572 124.016 290.068 cv
cp
f
128.773 291.498 mo
128.773 291.498 122.145 300.521 107.75 309.611 cv
107.75 309.611 122.605 298.451 127.266 290.412 cv
127.266 290.412 130.008 289.009 128.773 291.498 cv
cp
f
114.453 286.564 mo
114.453 286.564 109.777 293.451 96.6172 301.361 cv
96.6172 301.361 108.875 292.701 113.047 285.56 cv
113.047 285.56 115.559 284.345 114.453 286.564 cv
cp
f
118.891 287.935 mo
118.891 287.935 112.918 295.923 99.7578 303.833 cv
99.7578 303.833 113.297 294.068 117.469 286.923 cv
117.469 286.923 119.977 285.712 118.891 287.935 cv
cp
f
105.578 283.607 mo
105.578 283.607 101.52 289.525 89.9883 296.224 cv
89.9883 296.224 100.719 288.861 104.324 282.72 cv
104.324 282.72 106.523 281.693 105.578 283.607 cv
cp
f
109.504 284.837 mo
109.504 284.837 104.324 291.701 92.7852 298.404 cv
92.7852 298.404 104.637 290.091 108.238 283.958 cv
108.238 283.958 110.453 282.935 109.504 284.837 cv
cp
f
97.5273 280.318 mo
97.5273 280.318 94.1172 285.267 84.4492 290.888 cv
84.4492 290.888 93.4492 284.716 96.4609 279.576 cv
96.4609 279.576 98.3125 278.716 97.5273 280.318 cv
cp
f
101.512 281.947 mo
101.512 281.947 97.1719 287.689 87.4922 293.306 cv
87.4922 293.306 97.4336 286.349 100.453 281.205 cv
100.453 281.205 102.301 280.345 101.512 281.947 cv
cp
f
90.3477 276.771 mo
90.3477 276.771 86.6406 281.435 82.375 282.548 cv
82.375 282.548 86.2734 281.173 89.293 276.025 cv
89.293 276.025 91.1406 275.166 90.3477 276.771 cv
cp
f
94.3438 278.404 mo
94.3438 278.404 93.3555 281.802 83.6836 287.408 cv
83.6836 287.408 90.2656 282.802 93.2813 277.662 cv
93.2813 277.662 95.1328 276.802 94.3438 278.404 cv
cp
f
135.008 285.494 mo
135.008 285.494 135.426 275.416 128.621 258.31 cv
128.621 258.31 134.059 275.513 132.984 285.478 cv
132.984 285.478 134.488 288.451 135.008 285.494 cv
cp
f
125.648 282.212 mo
125.648 282.212 126.051 272.876 119.82 257.025 cv
119.82 257.025 124.793 272.962 123.785 282.201 cv
123.785 282.201 125.168 284.955 125.648 282.212 cv
cp
f
130.336 283.876 mo
130.336 283.876 130.328 272.681 124.109 256.841 cv
124.109 256.841 129.469 274.623 128.473 283.861 cv
128.473 283.861 129.852 286.615 130.336 283.876 cv
cp
f
115.875 279.384 mo
115.875 279.384 116.18 271.06 110.258 256.9 cv
110.258 256.9 114.996 271.126 114.137 279.361 cv
114.137 279.361 115.445 281.822 115.875 279.384 cv
cp
f
120.246 280.9 mo
120.246 280.9 120.168 270.923 114.25 256.763 cv
114.25 256.763 119.383 272.646 118.516 280.873 cv
118.516 280.873 119.816 283.333 120.246 280.9 cv
cp
f
106.961 276.509 mo
106.961 276.509 107.199 269.341 101.871 257.111 cv
101.871 257.111 106.16 269.4 105.422 276.478 cv
105.422 276.478 106.598 278.607 106.961 276.509 cv
cp
f
110.859 277.837 mo
110.859 277.837 110.738 269.24 105.414 257.005 cv
105.414 257.005 110.051 270.724 109.324 277.802 cv
109.324 277.802 110.492 279.931 110.859 277.837 cv
cp
f
98.5234 274.396 mo
98.5234 274.396 98.7188 268.384 94.2461 258.134 cv
94.2461 258.134 97.8398 268.431 97.2266 274.365 cv
97.2266 274.365 98.2148 276.146 98.5234 274.396 cv
cp
f
102.707 275.439 mo
102.707 275.439 102.602 268.236 98.1328 257.99 cv
98.1328 257.99 102.023 269.478 101.414 275.412 cv
101.414 275.412 102.398 277.197 102.707 275.439 cv
cp
f
90.6484 273.013 mo
90.6484 273.013 90.4219 267.044 87.6328 263.626 cv
87.6328 263.626 89.9609 267.044 89.3516 272.982 cv
89.3516 272.982 90.3398 274.767 90.6484 273.013 cv
cp
f
94.832 274.056 mo
94.832 274.056 96.043 270.736 91.5742 260.482 cv
91.5742 260.482 94.1484 268.091 93.5273 274.029 cv
93.5273 274.029 94.5195 275.81 94.832 274.056 cv
cp
f
149.234 288.814 mo
149.234 288.814 149.648 278.736 142.844 261.63 cv
142.844 261.63 148.277 278.833 147.211 288.794 cv
147.211 288.794 148.711 291.771 149.234 288.814 cv
cp
f
139.781 286.232 mo
139.781 286.232 139.484 274.72 133.258 258.88 cv
133.258 258.88 138.922 276.982 137.918 286.216 cv
137.918 286.216 139.293 288.97 139.781 286.232 cv
cp
f
144.461 287.892 mo
144.461 287.892 143.758 273.744 136.637 258.568 cv
136.637 258.568 143.602 278.642 142.594 287.876 cv
142.594 287.876 143.973 290.63 144.461 287.892 cv
cp
f
154.406 289.884 mo
154.406 289.884 154.82 279.798 148.016 262.701 cv
148.016 262.701 153.449 279.896 152.375 289.869 cv
152.375 289.869 153.883 292.837 154.406 289.884 cv
cp
f
159.754 290.673 mo
159.754 290.673 160.086 281.416 153.461 265.65 cv
153.461 265.65 158.777 281.494 157.82 290.638 cv
157.82 290.638 159.281 293.384 159.754 290.673 cv
cp
f
164.727 291.646 mo
164.727 291.646 165.063 282.388 158.438 266.626 cv
158.438 266.626 163.75 282.466 162.789 291.615 cv
162.789 291.615 164.25 294.357 164.727 291.646 cv
cp
f
169.961 291.693 mo
169.961 291.693 170.105 283.642 163.32 269.779 cv
163.32 269.779 168.828 283.681 168.07 291.634 cv
168.07 291.634 169.547 294.048 169.961 291.693 cv
cp
f
176.324 293.408 mo
176.324 293.408 176.34 285.708 169 272.345 cv
169 272.345 174.996 285.732 174.332 293.322 cv
174.332 293.322 175.93 295.65 176.324 293.408 cv
cp
f
183.059 294.466 mo
183.059 294.466 182.926 288.13 175.871 276.986 cv
175.871 276.986 181.68 288.119 181.207 294.357 cv
181.207 294.357 182.73 296.31 183.059 294.466 cv
cp
f
184.555 199.408 mo
185.23 198.47 186.09 197.396 187.195 196.146 cv
189.32 193.724 191.168 191.49 192.887 189.4 cv
197.688 183.576 201.848 178.541 208.355 174.064 cv
212.047 171.529 214.773 169.361 217.184 167.451 cv
220.031 165.181 222.727 163.041 226.234 160.912 cv
228.191 159.72 228.902 159.009 229.805 158.107 cv
231.902 156.005 233.895 154.271 240.457 151.048 cv
248.766 146.962 253.953 146.255 259.441 145.513 cv
261.418 145.24 263.484 144.966 265.848 144.486 cv
274.879 142.662 285.465 142.173 285.91 142.15 cv
289.109 142.001 li
290.438 144.916 li
290.695 145.482 296.766 158.998 299.168 176.841 cv
301.824 196.685 298.086 221.806 296.867 229.037 cv
295.363 238.001 290.309 256.767 273.371 281.751 cv
271.563 284.419 269.777 286.966 268.004 289.408 cv
252.078 311.271 235.984 325.833 200.875 335.591 cv
197.664 336.486 li
195.742 333.755 li
194.996 332.689 177.332 307.337 171.375 274.517 cv
165.633 242.857 168.938 229.962 177.508 215.97 cv
180.445 211.177 180.781 209.263 181.117 207.412 cv
181.555 204.943 182.082 202.787 184.555 199.408 cv
cp
f
199.609 331.029 mo
199.609 331.029 180.129 307.994 174.289 275.814 cv
168.445 243.646 174.328 230.208 181.547 218.443 cv
188.758 206.673 182.723 208.412 190.75 199.271 cv
198.773 190.13 200.535 182.845 208.711 177.232 cv
216.887 171.615 222.578 168.666 228.688 164.955 cv
234.805 161.236 231.93 160.501 242.535 155.298 cv
253.141 150.083 258.004 150.904 266.789 149.126 cv
275.563 147.357 286.125 146.876 286.125 146.876 cv
286.125 146.876 292.145 160.111 294.48 177.474 cv
296.805 194.837 294.035 217.33 292.203 228.255 cv
290.375 239.173 285.145 259.966 270.012 282.291 cv
251.785 309.181 235.469 321.064 199.609 331.029 cv
cp
1 1 1 rgb
f
205.539 321.158 mo
205.539 321.158 201.711 277.701 276.25 160.337 cv
276.25 160.337 225.715 240.333 205.539 321.158 cv
cp
.27451 .207843 .145098 rgb
f
228.445 233.931 mo
228.445 233.931 217.027 223.029 206.121 196.361 cv
206.121 196.361 218.672 221.65 230.711 231.705 cv
230.711 231.705 232.238 236.693 228.445 233.931 cv
cp
f
224.656 241.494 mo
224.656 241.494 211.559 227.873 200.656 201.205 cv
200.656 201.205 214.883 229.212 226.922 239.267 cv
226.922 239.267 228.445 244.263 224.656 241.494 cv
cp
f
220.375 249.134 mo
220.375 249.134 207.055 234.048 196.148 207.388 cv
196.148 207.388 210.609 236.857 222.645 246.916 cv
222.645 246.916 224.172 251.9 220.375 249.134 cv
cp
f
216.793 256.412 mo
216.793 256.412 202.195 239.544 191.285 212.88 cv
191.285 212.88 207.027 244.134 219.059 254.189 cv
219.059 254.189 220.586 259.181 216.793 256.412 cv
cp
f
214.051 264.31 mo
214.051 264.31 199.754 249.38 188.852 222.72 cv
188.852 222.72 204.281 252.033 216.316 262.091 cv
216.316 262.091 217.844 267.076 214.051 264.31 cv
cp
f
209.773 271.955 mo
209.773 271.955 196.602 257.845 185.695 231.185 cv
185.695 231.185 200 259.673 212.039 269.732 cv
212.039 269.732 213.566 274.716 209.773 271.955 cv
cp
f
206.195 279.232 mo
206.195 279.232 194.766 268.33 183.863 241.666 cv
183.863 241.666 196.422 266.955 208.449 277.013 cv
208.449 277.013 209.988 281.998 206.195 279.232 cv
cp
f
205.438 290.306 mo
205.438 290.306 192.262 276.197 181.355 249.537 cv
181.355 249.537 195.664 278.021 207.703 288.087 cv
207.703 288.087 209.23 293.072 205.438 290.306 cv
cp
f
201.852 297.587 mo
201.852 297.587 190.43 286.685 179.527 260.025 cv
179.527 260.025 192.086 285.306 204.117 295.365 cv
204.117 295.365 205.648 300.357 201.852 297.587 cv
cp
f
202.016 309.759 mo
202.016 309.759 192.449 300.47 183.723 277.291 cv
183.723 277.291 193.902 299.208 204.031 307.748 cv
204.031 307.748 205.223 312.095 202.016 309.759 cv
cp
f
235.43 220.072 mo
235.43 220.072 224.828 209.974 214.641 185.365 cv
214.641 185.365 226.355 208.716 237.512 218.033 cv
237.512 218.033 238.945 222.63 235.43 220.072 cv
cp
f
231.961 227.025 mo
231.961 227.025 219.801 214.416 209.602 189.806 cv
209.602 189.806 222.875 215.669 234.039 224.986 cv
234.039 224.986 235.48 229.583 231.961 227.025 cv
cp
f
243.367 206.259 mo
243.367 206.259 233.98 197.212 225.27 174.83 cv
225.27 174.83 235.379 196.021 245.297 204.345 cv
245.297 204.345 246.496 208.541 243.367 206.259 cv
cp
f
240.086 212.716 mo
240.086 212.716 229.336 201.392 220.625 179.005 cv
220.625 179.005 232.098 202.482 242.008 210.806 cv
242.008 210.806 243.211 215.001 240.086 212.716 cv
cp
f
250.281 193.345 mo
250.281 193.345 242.238 185.521 234.949 165.962 cv
234.949 165.962 243.469 184.458 251.98 191.642 cv
251.98 191.642 252.977 195.306 250.281 193.345 cv
cp
f
247.336 199.068 mo
247.336 199.068 238.137 189.259 230.855 169.693 cv
230.855 169.693 240.52 190.181 249.035 197.365 cv
249.035 197.365 250.023 201.029 247.336 199.068 cv
cp
f
257.496 181.798 mo
257.496 181.798 250.754 175.24 244.648 158.833 cv
244.648 158.833 251.789 174.341 258.918 180.365 cv
258.918 180.365 259.754 183.439 257.496 181.798 cv
cp
f
253.918 187.513 mo
253.918 187.513 246.219 179.291 240.113 162.884 cv
240.113 162.884 248.211 180.064 255.344 186.08 cv
255.344 186.08 256.168 189.162 253.918 187.513 cv
cp
f
264.867 171.673 mo
264.867 171.673 258.645 164.72 258.063 157.845 cv
258.063 157.845 259.164 164.224 266.289 170.248 cv
266.289 170.248 267.117 173.326 264.867 171.673 cv
cp
f
261.289 177.396 mo
261.289 177.396 256.313 174.982 250.211 158.58 cv
250.211 158.58 255.586 169.943 262.719 175.962 cv
262.719 175.962 263.551 179.044 261.289 177.396 cv
cp
f
239.563 238.244 mo
239.563 238.244 255 241.556 283.188 235.591 cv
283.188 235.591 255.211 239.416 240.129 235.119 cv
240.129 235.119 235.148 236.654 239.563 238.244 cv
cp
f
247.102 224.673 mo
247.102 224.673 261.402 227.767 287.492 222.369 cv
287.492 222.369 261.598 225.802 247.617 221.802 cv
247.617 221.802 243.008 223.205 247.102 224.673 cv
cp
f
243.297 231.451 mo
243.297 231.451 260.559 234.419 286.648 229.017 cv
286.648 229.017 257.797 232.583 243.816 228.583 cv
243.816 228.583 239.207 229.986 243.297 231.451 cv
cp
f
254.063 210.345 mo
254.063 210.345 266.824 213.021 290.242 207.646 cv
290.242 207.646 267.02 211.185 254.563 207.681 cv
254.563 207.681 250.422 209.037 254.063 210.345 cv
cp
f
250.563 216.693 mo
250.563 216.693 265.969 219.208 289.387 213.837 cv
289.387 213.837 263.527 217.544 251.066 214.029 cv
251.066 214.029 246.926 215.384 250.563 216.693 cv
cp
f
260.859 197.369 mo
260.859 197.369 271.852 199.63 292.125 194.662 cv
292.125 194.662 272.047 198.001 261.316 195.005 cv
261.316 195.005 257.723 196.244 260.859 197.369 cv
cp
f
257.781 203.021 mo
257.781 203.021 271.066 205.111 291.34 200.146 cv
291.34 200.146 268.969 203.662 258.238 200.658 cv
258.238 200.658 254.648 201.904 257.781 203.021 cv
cp
f
266.363 184.916 mo
266.363 184.916 275.582 186.802 292.57 182.626 cv
292.57 182.626 275.734 185.443 266.746 182.931 cv
266.746 182.931 263.738 183.97 266.363 184.916 cv
cp
f
263.641 191.08 mo
263.641 191.08 274.773 192.833 291.766 188.658 cv
291.766 188.658 273.016 191.615 264.023 189.095 cv
264.023 189.095 261.008 190.142 263.641 191.08 cv
cp
f
270.594 173.13 mo
270.594 173.13 279.836 174.361 285.852 170.978 cv
285.852 170.978 279.961 173.658 270.965 171.142 cv
270.965 171.142 267.957 172.189 270.594 173.13 cv
cp
f
267.863 179.302 mo
267.863 179.302 272.664 182.06 289.656 177.884 cv
289.656 177.884 277.238 179.83 268.254 177.314 cv
268.254 177.314 265.242 178.361 267.863 179.302 cv
cp
f
230.676 259.291 mo
230.676 259.291 246.117 262.611 274.293 256.65 cv
274.293 256.65 246.324 260.474 231.238 256.173 cv
231.238 256.173 226.258 257.708 230.676 259.291 cv
cp
f
237.164 245.396 mo
237.164 245.396 254.992 247.994 281.082 242.599 cv
281.082 242.599 251.664 246.529 237.68 242.529 cv
237.68 242.529 233.07 243.927 237.164 245.396 cv
cp
f
233.367 252.177 mo
233.367 252.177 255.367 254.845 280.66 247.884 cv
280.66 247.884 247.859 253.306 233.883 249.31 cv
233.883 249.31 229.266 250.705 233.367 252.177 cv
cp
f
227.652 266.982 mo
227.652 266.982 243.086 270.302 271.277 264.341 cv
271.277 264.341 243.297 268.158 228.219 263.861 cv
228.219 263.861 223.234 265.4 227.652 266.982 cv
cp
f
225.016 275.025 mo
225.016 275.025 239.215 277.99 265.273 271.955 cv
265.273 271.955 239.438 275.951 225.582 272.041 cv
225.582 272.041 220.965 273.568 225.016 275.025 cv
cp
f
222.199 282.435 mo
222.199 282.435 236.395 285.404 262.453 279.369 cv
262.453 279.369 236.617 283.365 222.762 279.455 cv
222.762 279.455 218.152 280.982 222.199 282.435 cv
cp
f
220.738 290.501 mo
220.738 290.501 233.117 292.857 256.289 286.06 cv
256.289 286.06 233.391 290.873 221.34 287.591 cv
221.34 287.591 217.219 289.24 220.738 290.501 cv
cp
f
216.398 299.857 mo
216.398 299.857 228.273 301.919 250.836 294.134 cv
250.836 294.134 228.605 299.849 217.078 296.806 cv
217.078 296.806 213.047 298.646 216.398 299.857 cv
cp
f
212.992 309.951 mo
212.992 309.951 222.805 311.431 241.852 303.509 cv
241.852 303.509 223.141 309.517 213.645 307.134 cv
213.645 307.134 210.234 308.958 212.992 309.951 cv
cp
f
389.454 570.318 mo
375.282 570.318 352.5 551.435 318.325 388.13 cv
299.836 299.787 286.895 210.298 286.766 209.4 cv
286.422 206.962 li
288.219 205.279 li
289.293 204.267 299.747 195.416 334.618 195.416 cv
348.086 195.416 363.633 196.74 380.844 199.357 cv
454.149 210.513 487.797 251.763 503.969 271.587 cv
504.293 271.986 li
520.309 291.615 525.426 312.279 529.165 327.369 cv
529.731 329.642 li
530.489 332.669 531.364 335.591 532.262 338.603 cv
535.739 350.22 539.684 363.388 539.262 388.771 cv
538.735 420.201 521.774 464.111 510.469 483.888 cv
502.461 497.9 495.961 505.333 490.735 511.314 cv
489.047 513.236 487.504 515.005 486.09 516.802 cv
480.11 524.408 439.563 564.302 391.133 570.22 cv
390.579 570.287 390.008 570.318 389.454 570.318 cv
cp
f
291.45 208.732 mo
291.45 208.732 308.145 193.08 380.133 204.037 cv
452.11 214.986 484.458 255.15 500.625 274.974 cv
516.793 294.798 521.489 316.185 525.137 330.791 cv
528.793 345.396 535.055 357.392 534.528 388.685 cv
534.008 419.986 516.793 463.283 506.364 481.537 cv
495.934 499.794 488.102 506.576 482.364 513.88 cv
476.625 521.181 437.508 559.787 390.555 565.521 cv
343.614 571.259 291.45 208.732 291.45 208.732 cv
cp
1 1 1 rgb
f
335.786 578.599 mo
326.704 578.599 322.5 577.259 318.438 575.966 cv
315.723 575.103 313.161 574.287 308.758 573.888 cv
302.446 573.31 301.016 572.806 298.536 571.513 cv
297.086 570.755 294.887 569.603 287.079 567.474 cv
283.301 566.451 li
266.821 561.986 254.907 558.763 249.59 551.666 cv
245.434 546.134 226.977 529.455 218.473 522.169 cv
213.524 517.923 209.762 512.134 206.125 506.537 cv
203.903 503.13 201.606 499.603 199.102 496.517 cv
190.438 485.861 180.282 468.705 177.758 452.533 cv
177.079 448.208 176.098 442.876 175.059 437.193 cv
171.188 416.107 168.551 400.599 169.954 393.041 cv
172.418 379.798 171.442 376.103 170.489 372.529 cv
169.852 370.13 169.137 367.416 169.356 362.896 cv
169.438 361.271 169.383 359.126 169.321 356.544 cv
168.969 342.154 168.317 315.361 185.153 287.154 cv
188.157 282.111 li
205.305 253.287 214.782 237.369 241.68 220.048 cv
243.508 218.501 250.094 213.15 254.836 211.962 cv
255.282 211.845 256.672 211.146 257.895 210.541 cv
264.344 207.31 277.782 200.595 304.958 197.251 cv
312.5 196.322 319.528 195.873 326.426 195.873 cv
357.075 195.873 383.493 204.884 409.551 224.232 cv
415.532 228.673 421.071 232.736 426.204 236.494 cv
451.196 254.818 466.286 265.884 475.766 278.978 cv
486.782 294.193 497.114 316.193 504.106 339.33 cv
508.454 353.681 508.891 362.548 509.215 369.029 cv
509.399 372.728 509.528 375.404 510.329 377.806 cv
513.461 387.189 513.024 410.787 510.477 423.521 cv
510.11 425.38 509.77 427.189 509.434 428.951 cv
507.438 439.583 505.547 449.623 498.379 461.095 cv
495.094 466.353 492.618 473.462 490.219 480.337 cv
487.106 489.283 484.165 497.728 479.329 502.22 cv
474.61 506.607 473.555 508.208 470.45 512.974 cv
469.079 515.06 467.364 517.681 464.864 521.275 cv
463.485 523.267 li
455.434 534.927 447.106 546.982 421.438 560.326 cv
403.571 569.619 390.583 570.986 381.098 571.986 cv
376.297 572.494 372.504 572.896 369.293 574.115 cv
357.524 578.599 350.711 578.599 335.786 578.599 cv
cp
.27451 .207843 .145098 rgb
f
244.508 223.857 mo
244.508 223.857 251.813 217.591 255.981 216.552 cv
260.153 215.513 271.625 206.119 305.54 201.947 cv
339.446 197.779 372.305 200.38 406.735 225.943 cv
441.157 251.505 460.977 266.63 471.934 281.751 cv
482.891 296.88 492.797 318.267 499.575 340.697 cv
506.364 363.13 503.235 371.474 505.844 379.302 cv
508.454 387.123 508.454 409.556 505.844 422.599 cv
503.235 435.634 502.188 446.068 494.36 458.587 cv
486.54 471.107 483.407 491.974 476.11 498.755 cv
468.805 505.533 469.329 506.576 460.977 518.58 cv
452.633 530.572 445.333 542.568 419.25 556.134 cv
393.168 569.693 378.559 565.521 367.61 569.693 cv
356.657 573.869 350.395 573.869 335.786 573.869 cv
321.188 573.869 320.665 570.216 309.188 569.173 cv
297.711 568.13 305.54 567.611 288.321 562.916 cv
271.11 558.216 258.067 555.087 253.375 548.83 cv
248.676 542.568 228.852 524.837 221.555 518.58 cv
214.254 512.314 209.555 501.884 202.774 493.541 cv
195.993 485.189 185.04 468.501 182.43 451.806 cv
179.825 435.111 172.774 403.771 174.606 393.908 cv
178.782 371.474 173.563 373.564 174.086 363.13 cv
174.606 352.697 169.915 321.919 189.215 289.583 cv
208.512 257.24 216.86 241.591 244.508 223.857 cv
cp
1 1 1 rgb
f
332.141 365.736 mo
332.141 365.736 326.922 370.951 324.313 362.083 cv
321.704 353.216 314.399 324.525 305.008 305.228 cv
295.625 285.927 290.93 266.63 288.321 261.939 cv
285.711 257.24 280.5 243.154 295.625 234.81 cv
309.567 227.119 316.489 229.595 322.75 229.595 cv
329.008 229.595 346.743 226.986 356.657 232.201 cv
366.563 237.416 374.915 246.81 370.743 259.849 cv
366.563 272.892 356.133 317.228 353.524 323.486 cv
350.918 329.748 338.922 367.298 337.36 370.435 cv
335.786 373.564 331.094 370.951 332.141 365.736 cv
cp
.27451 .207843 .145098 rgb
f
329.262 361.923 mo
328.165 358.763 329 361.24 328.852 360.751 cv
328.458 359.416 327.965 357.626 327.364 355.482 cv
323.887 343.052 317.415 319.908 309.266 303.158 cv
303.516 291.333 299.594 279.595 296.727 271.021 cv
294.875 265.451 293.649 261.771 292.461 259.634 cv
291.852 258.541 288.899 252.798 290.5 247.228 cv
291.446 243.931 293.942 241.142 297.911 238.951 cv
305.954 234.517 311.114 233.947 314.708 233.947 cv
316.188 233.947 317.543 234.048 318.825 234.134 cv
320.188 234.232 321.477 234.322 322.75 234.322 cv
324.106 234.322 325.977 234.212 328.18 234.076 cv
331.075 233.896 334.672 233.673 338.336 233.673 cv
345.602 233.673 351.024 234.591 354.454 236.392 cv
360.473 239.556 370 246.626 366.231 258.404 cv
364.204 264.755 360.766 278.173 357.442 291.146 cv
354.137 304.068 350.391 318.705 349.157 321.666 cv
347.782 324.955 344.278 335.49 340.563 346.634 cv
339.915 348.568 339.446 361.568 333.704 364.173 cv
333.704 364.173 330.36 365.083 329.262 361.923 cv
cp
1 1 1 rgb
f
350.395 375.13 mo
350.395 375.13 349.356 377.736 345.7 376.693 cv
345.165 376.537 338.399 373.564 344.137 357.916 cv
348.168 346.908 355.086 328.701 360.829 309.923 cv
366.563 291.146 375.434 264.017 379.606 257.759 cv
383.782 251.505 393.168 249.935 393.692 257.759 cv
393.692 257.759 393.168 252.544 403.602 254.634 cv
414.032 256.72 412.993 264.017 412.993 264.017 cv
412.993 264.017 422.907 262.978 426.555 269.24 cv
430.204 275.498 437.508 277.583 440.118 284.888 cv
442.719 292.189 459.415 312.533 446.375 319.833 cv
433.336 327.138 416.641 338.615 403.602 347.486 cv
390.555 356.349 374.391 364.693 367.086 368.345 cv
359.786 371.998 360.309 368.345 360.309 368.345 cv
360.309 368.345 357.172 377.212 350.395 375.13 cv
cp
.27451 .207843 .145098 rgb
f
346.883 371.158 mo
346.364 369.447 346.258 365.865 348.579 359.541 cv
350.411 354.564 li
354.618 343.189 360.372 327.603 365.352 311.31 cv
373.454 284.798 380.594 264.814 383.547 260.384 cv
384.922 258.314 388.93 257.501 388.969 258.06 cv
388.969 258.06 397.731 259.056 397.727 259.068 cv
397.731 259.064 398.125 258.873 399.243 258.873 cv
400.192 258.873 401.348 259.009 402.672 259.271 cv
408.051 260.345 408.329 262.794 408.286 263.521 cv
407.961 269.087 li
413.485 268.724 li
413.551 268.72 413.969 268.685 414.594 268.685 cv
416.04 268.685 420.875 268.9 422.469 271.623 cv
424.493 275.091 427.29 277.447 429.766 279.521 cv
432.375 281.712 434.633 283.607 435.665 286.478 cv
436.399 288.548 437.836 291.083 439.508 294.025 cv
442.758 299.748 447.665 308.392 446.368 313.041 cv
446.153 313.802 445.704 314.791 444.063 315.708 cv
431.727 322.611 416.153 333.216 403.641 341.732 cv
400.942 343.568 li
388.559 351.986 373.09 360.052 364.977 364.115 cv
362.868 365.166 362.075 365.24 362.047 365.24 cv
362.047 365.24 li
362.52 365.24 363.446 365.474 364.204 366.341 cv
364.665 366.876 361.012 366.048 360.829 367.298 cv
355.844 366.771 li
355.356 368.087 353.793 370.712 352.418 370.712 cv
352.231 370.712 352.024 370.677 351.79 370.607 cv
347.622 369.322 li
346.883 371.158 li
cp
1 1 1 rgb
f
364.477 375.13 mo
364.477 375.13 347.262 384.517 347.782 390.259 cv
348.313 395.99 351.961 398.599 376.997 399.642 cv
402.036 400.689 411.95 405.904 421.333 408.509 cv
430.723 411.119 446.899 416.337 460.977 416.337 cv
475.063 416.337 480.282 410.599 480.282 403.294 cv
480.282 395.99 483.93 383.47 480.282 371.474 cv
476.625 359.478 471.411 337.572 462.543 330.267 cv
453.676 322.962 447.418 324.525 423.422 339.134 cv
399.43 353.744 373.868 373.041 364.477 375.13 cv
cp
.27451 .207843 .145098 rgb
f
460.977 411.607 mo
449.333 411.607 435.586 407.666 426.485 405.052 cv
422.602 403.951 li
420.708 403.423 418.793 402.787 416.727 402.103 cv
408.68 399.427 397.657 395.767 377.196 394.916 cv
354.508 393.97 352.778 391.689 352.54 390.15 cv
353.469 388.041 359.774 383.169 366.219 379.572 cv
372.833 377.779 383.602 370.767 400.297 359.681 cv
408.665 354.134 417.313 348.392 425.883 343.177 cv
438.821 335.302 447.325 330.748 452.504 330.748 cv
454.79 330.748 456.762 331.634 459.536 333.919 cv
466.02 339.259 470.875 356.048 474.083 367.162 cv
474.68 369.212 475.231 371.134 475.758 372.857 cv
478.04 380.365 477.047 388.521 476.254 395.072 cv
475.895 398.048 475.551 400.865 475.551 403.294 cv
475.551 408.81 470.645 411.607 460.977 411.607 cv
cp
1 1 1 rgb
f
355.086 412.162 mo
355.086 412.162 349.875 406.427 355.61 403.814 cv
361.352 401.212 371.258 403.814 394.215 407.466 cv
417.165 411.119 417.165 414.771 429.161 416.337 cv
441.157 417.904 462.024 422.599 467.243 433.548 cv
472.458 444.505 471.411 455.458 461.504 466.412 cv
451.594 477.369 455.766 489.361 445.333 490.404 cv
434.903 491.451 423.946 478.931 416.641 474.24 cv
409.336 469.541 398.907 452.33 389.516 445.025 cv
380.133 437.724 355.086 412.162 355.086 412.162 cv
cp
.27451 .207843 .145098 rgb
f
444.086 485.736 mo
438.547 485.736 431.723 480.142 426.243 475.646 cv
423.75 473.599 421.391 471.666 419.204 470.259 cv
416.188 468.314 411.778 462.873 407.52 457.603 cv
402.614 451.537 397.54 445.267 392.422 441.294 cv
383.391 434.267 358.715 409.107 358.469 408.853 cv
358.313 408.662 358.094 408.333 357.926 408.017 cv
358.989 407.63 360.161 407.494 361.657 407.494 cv
365.762 407.494 372.086 408.564 380.836 410.048 cv
384.54 410.677 388.727 411.388 393.473 412.142 cv
405.973 414.13 411.196 416.041 415.801 417.72 cv
419.399 419.037 422.805 420.279 428.551 421.029 cv
442.071 422.787 459.196 427.662 462.969 435.58 cv
467.688 445.49 466.098 454.271 457.993 463.236 cv
452.922 468.849 451.016 474.771 449.618 479.095 cv
447.813 484.716 447.282 485.458 444.86 485.697 cv
444.602 485.728 444.344 485.736 444.086 485.736 cv
cp
1 1 1 rgb
f
343.614 433.548 mo
343.614 433.548 338.922 417.376 343.614 415.814 cv
348.313 414.248 347.262 409.033 358.219 419.986 cv
369.172 430.943 388.473 450.24 388.993 452.853 cv
389.516 455.458 402.036 464.849 411.422 475.806 cv
420.817 486.759 431.247 491.974 429.684 502.923 cv
428.122 513.88 416.641 517.013 412.993 520.658 cv
409.336 524.31 403.602 526.4 395.778 530.572 cv
387.95 534.748 371.782 538.4 367.086 528.486 cv
362.391 518.58 357.172 498.755 353.524 487.798 cv
349.875 476.845 343.614 433.548 343.614 433.548 cv
cp
.27451 .207843 .145098 rgb
f
379.344 530.091 mo
373.086 530.091 371.793 527.357 371.364 526.458 cv
368.278 519.947 364.864 508.623 361.852 498.634 cv
360.454 494.037 359.161 489.74 358.012 486.302 cv
354.536 475.873 348.36 433.302 348.297 432.876 cv
348.25 432.548 li
348.161 432.232 li
346.793 427.505 346 422.017 346.309 419.83 cv
347.508 419.271 348.403 418.619 349.043 418.15 cv
349.047 418.15 li
349.665 418.587 351.391 419.849 354.875 423.333 cv
363.055 431.513 382.012 450.474 384.516 454.435 cv
385.266 456.802 387.508 458.97 393.461 464.478 cv
397.821 468.505 403.247 473.521 407.833 478.88 cv
410.61 482.119 413.473 484.876 415.993 487.318 cv
422.602 493.701 425.75 496.998 425 502.259 cv
424.243 507.564 420.36 510.279 414.977 513.541 cv
412.954 514.751 411.059 515.904 409.645 517.314 cv
407.598 519.361 404.219 521.029 399.938 523.15 cv
397.989 524.115 395.86 525.166 393.551 526.396 cv
390.098 528.236 384.372 530.091 379.344 530.091 cv
cp
1 1 1 rgb
f
314.922 383.47 mo
308.145 387.123 295.102 386.08 276.325 383.994 cv
257.543 381.908 222.598 378.779 214.77 377.736 cv
206.95 376.693 199.125 370.435 198.079 358.439 cv
197.036 346.439 200.688 336.529 200.688 336.529 cv
200.688 336.529 201.735 326.615 204.864 323.486 cv
207.989 320.357 203.821 314.095 213.731 314.095 cv
223.641 314.095 229.375 319.833 241.899 327.662 cv
254.418 335.482 266.415 348.001 272.672 349.048 cv
278.93 350.087 286.235 356.349 289.368 359.478 cv
292.497 362.607 321.704 379.826 314.922 383.47 cv
cp
.27451 .207843 .145098 rgb
f
300.985 381.158 mo
294.875 381.158 287.219 380.443 276.844 379.291 cv
267.637 378.271 254.54 376.998 242.649 375.833 cv
230.649 374.673 219.313 373.564 215.395 373.048 cv
209.875 372.31 203.657 367.974 202.793 358.021 cv
201.86 347.31 205.098 338.244 205.133 338.15 cv
205.333 337.611 li
205.395 337.025 li
205.852 332.787 207.211 327.837 208.208 326.83 cv
210.372 324.669 210.778 322.025 211.04 320.279 cv
211.11 319.869 211.196 319.279 211.286 318.99 cv
211.293 318.99 211.313 318.994 211.336 318.994 cv
211.567 318.994 212.297 318.83 213.731 318.83 cv
219.997 318.83 224.43 321.798 231.782 326.708 cv
234.059 328.232 236.555 329.896 239.395 331.673 cv
244.493 334.857 249.672 338.998 254.25 342.658 cv
261.422 348.384 267.09 352.912 271.891 353.716 cv
276.024 354.404 282.114 358.919 286.02 362.826 cv
287.079 363.888 289.086 365.279 293.161 368.076 cv
296.883 370.638 305.606 376.63 309.508 380.423 cv
307.321 380.912 304.493 381.158 300.985 381.158 cv
cp
1 1 1 rgb
f
199.125 400.166 mo
199.125 400.166 195.993 386.08 212.165 385.56 cv
228.336 385.041 266.934 388.685 279.454 388.685 cv
291.973 388.685 307.622 390.259 313.36 391.298 cv
319.098 392.337 320.141 403.294 303.969 410.599 cv
287.805 417.904 272.672 430.943 257.543 436.681 cv
242.422 442.416 225.727 461.712 218.422 457.544 cv
211.125 453.373 208.512 445.548 208.512 445.548 cv
208.512 445.548 202.258 438.763 201.211 431.458 cv
200.165 424.162 193.383 411.646 199.125 400.166 cv
cp
.27451 .207843 .145098 rgb
f
220.661 453.392 mo
215.204 450.259 213.016 444.087 212.989 444.029 cv
212.672 443.091 li
211.993 442.337 li
210.532 440.744 206.571 435.537 205.895 430.794 cv
205.579 428.587 204.875 426.158 204.125 423.587 cv
202.153 416.822 199.918 409.154 203.356 402.279 cv
204.106 400.783 li
203.743 399.142 li
203.54 398.134 203.344 394.974 204.938 392.955 cv
206.247 391.302 208.731 390.404 212.321 390.287 cv
213.352 390.259 214.477 390.24 215.684 390.24 cv
225.282 390.24 238.68 389.4 251.813 390.259 cv
262.961 390.982 277.715 391.822 283.102 391.822 cv
294.961 391.822 306.696 394.896 312.508 395.951 cv
312.504 395.951 312.504 395.951 312.504 395.951 cv
312.422 395.951 312.571 396.455 312.313 397.365 cv
311.989 398.509 310.297 402.552 302.024 406.291 cv
294.165 409.837 286.633 414.634 279.344 419.267 cv
271.188 424.462 263.477 429.369 255.868 432.255 cv
248.805 434.935 241.649 440.162 235.344 444.767 cv
230.083 448.615 223.532 453.4 220.786 453.4 cv
220.704 453.4 220.665 453.392 220.661 453.392 cv
cp
1 1 1 rgb
f
276.325 509.708 mo
276.325 509.708 269.024 515.966 260.153 511.791 cv
251.286 507.623 247.637 508.146 242.422 498.232 cv
240.461 494.513 234.071 483.626 235.118 480.498 cv
236.157 477.369 221.555 469.541 231.989 460.15 cv
242.422 450.767 265.372 438.763 284.149 427.814 cv
302.926 416.857 312.836 407.994 320.141 405.904 cv
327.446 403.814 325.875 414.771 319.098 429.896 cv
312.313 445.025 286.758 499.794 276.325 509.708 cv
cp
.27451 .207843 .145098 rgb
f
266.422 508.498 mo
264.985 508.498 263.559 508.166 262.168 507.513 cv
260.254 506.611 258.579 505.919 257.063 505.298 cv
251.879 503.169 249.946 502.373 246.602 496.029 cv
245.532 494.048 li
244.161 491.529 240.047 483.994 239.75 481.494 cv
240.54 478.267 238.375 475.65 236.446 473.33 cv
232.129 468.111 231.922 466.576 235.153 463.666 cv
242.821 456.763 258.266 447.998 273.211 439.525 cv
277.739 436.958 282.243 434.404 286.532 431.9 cv
294.852 427.044 301.493 422.572 306.821 418.986 cv
312.583 415.103 316.934 412.173 320.211 410.873 cv
320.055 413.4 318.911 418.751 314.786 427.962 cv
303.106 454.005 281.461 498.287 273.071 506.271 cv
273.071 506.263 li
273.051 506.263 270.172 508.498 266.422 508.498 cv
cp
1 1 1 rgb
f
319.165 364.173 mo
319.165 364.173 298.754 302.623 294.586 293.755 cv
290.411 284.888 285.196 278.626 282.063 269.24 cv
278.93 259.849 275.805 254.634 269.54 252.544 cv
263.286 250.458 257.543 254.634 256.504 259.326 cv
255.461 264.017 251.286 256.197 234.071 274.455 cv
216.86 292.708 221.036 301.576 222.598 304.185 cv
224.161 306.791 238.243 320.88 249.2 328.177 cv
260.153 335.482 281.54 346.958 287.805 352.697 cv
294.059 358.439 314.797 372.388 318.442 371.869 cv
322.102 371.341 319.165 364.173 319.165 364.173 cv
cp
.27451 .207843 .145098 rgb
f
316.583 367.013 mo
308.688 362.412 295.801 353.607 291 349.208 cv
286.782 345.345 277.375 339.74 267.407 333.814 cv
261.508 330.298 255.93 326.978 251.829 324.244 cv
241.25 317.193 228.051 303.857 226.637 301.712 cv
223.774 296.958 227.836 287.962 237.516 277.701 cv
247.586 267.021 252.274 266.322 254.532 265.99 cv
256.176 265.748 260.047 265.169 261.125 260.357 cv
261.508 258.599 263.649 256.724 266.204 256.724 cv
266.817 256.724 267.43 256.83 268.047 257.037 cv
272.223 258.423 274.618 261.88 277.575 270.732 cv
279.618 276.869 282.477 281.751 285.239 286.478 cv
286.958 289.416 288.743 292.447 290.297 295.767 cv
293.434 302.427 308.481 344.212 316.583 367.013 cv
cp
1 1 1 rgb
f
297.192 533.701 mo
297.192 533.701 281.016 529.009 286.758 517.013 cv
292.497 505.013 311.961 458.013 317.536 442.939 cv
326.399 418.939 329.524 414.81 334.223 415.814 cv
341.528 417.376 341.008 460.15 345.176 476.322 cv
349.356 492.494 366.047 536.314 351.961 539.439 cv
351.961 539.439 340.485 545.697 325.875 540.482 cv
325.875 540.482 311.274 544.658 297.192 533.701 cv
cp
.27451 .207843 .145098 rgb
f
337.739 537.826 mo
334.274 537.826 330.817 537.22 327.469 536.025 cv
326.04 535.517 li
324.575 535.931 li
324.575 535.931 322.336 536.533 318.911 536.533 cv
314.176 536.533 307.071 535.396 300.094 529.966 cv
299.375 529.408 li
298.512 529.154 li
296.899 528.677 291.95 526.607 290.594 523.548 cv
290.239 522.748 289.899 521.408 291.02 519.052 cv
297.075 506.392 316.5 459.384 321.973 444.58 cv
323.926 439.291 329.633 423.841 332.672 420.794 cv
335.004 418.685 337.532 435.189 338.399 444.767 cv
339.356 455.318 340.098 470.318 341.79 476.845 cv
342.563 479.849 344.344 485.169 345.7 489.623 cv
349.805 503.111 355.668 527.474 351.782 534.134 cv
351.469 534.662 351.227 534.755 350.934 534.818 cv
350.278 534.966 li
349.696 535.287 li
349.672 535.298 344.809 537.826 337.739 537.826 cv
cp
1 1 1 rgb
f
302.055 359.654 mo
302.055 359.654 304.145 356.525 298.93 352.701 cv
293.711 348.873 289.54 346.439 287.458 342.962 cv
285.372 339.486 283.633 337.052 277.024 336.005 cv
270.411 334.966 268.329 332.181 262.418 329.4 cv
256.504 326.615 242.247 318.97 242.247 318.97 cv
242.247 318.97 256.157 329.052 262.766 333.228 cv
269.368 337.396 273.891 342.611 280.5 344.009 cv
287.106 345.396 283.625 348.873 289.887 350.962 cv
296.149 353.052 299.625 361.74 302.055 359.654 cv
cp
.27451 .207843 .145098 rgb
f
236.137 289.498 mo
236.137 289.498 230.629 285.58 231.352 283.853 cv
232.079 282.13 233.149 280.06 236.907 284.638 cv
240.661 289.224 240.305 289.564 245.094 294.505 cv
249.883 299.458 258.758 309.681 259.438 310.736 cv
260.122 311.791 243.668 296.576 240.59 293.392 cv
237.516 290.216 238.208 290.572 236.137 289.498 cv
cp
f
269.196 483.626 mo
269.196 483.626 263.981 489.541 261.543 492.318 cv
259.11 495.103 255.985 497.884 252.504 498.931 cv
249.024 499.97 249.028 505.537 252.504 505.884 cv
255.981 506.232 256.329 507.279 258.415 509.013 cv
260.5 510.751 263.981 509.013 264.672 510.06 cv
265.372 511.099 270.239 507.623 270.239 507.623 cv
270.239 507.623 271.625 511.099 275.805 506.927 cv
279.977 502.759 281.715 499.279 281.715 499.279 cv
281.715 499.279 281.016 497.541 274.762 501.361 cv
268.5 505.189 263.981 503.451 265.719 499.97 cv
267.458 496.494 268.508 492.318 270.239 489.888 cv
271.973 487.455 275.11 480.845 275.11 480.845 cv
275.11 480.845 263.633 493.716 263.286 494.751 cv
262.938 495.802 269.196 483.626 269.196 483.626 cv
cp
f
442.719 548.83 mo
442.719 548.83 488.629 515.966 505.317 446.068 cv
505.317 446.068 507.407 506.056 442.719 548.83 cv
cp
f
447.938 546.224 mo
447.938 546.224 495.934 513.361 512.622 443.462 cv
512.622 443.462 512.622 503.451 447.938 546.224 cv
cp
f
455.766 539.439 mo
455.766 539.439 503.75 506.576 520.446 436.681 cv
520.446 436.681 520.446 496.666 455.766 539.439 cv
cp
f
gsave
328.75 421.552 mo
328.75 421.552 311.532 466.412 305.54 480.236 cv
299.536 494.056 284.672 517.533 288.586 523.794 cv
292.497 530.052 302.145 533.966 304.227 535.005 cv
306.321 536.048 318.579 538.658 324.836 538.919 cv
331.094 539.181 330.836 507.884 331.618 502.923 cv
332.399 497.974 330.836 457.806 333.442 445.287 cv
336.051 432.767 339.704 413.466 328.75 421.552 cv
cp
clp
291.02 519.052 mo
291.02 519.052 299.016 533.701 326.922 531.615 cv
326.922 531.615 302.594 528.4 291.02 519.052 cv
cp
f
292.586 512.271 mo
292.586 512.271 300.583 526.919 328.485 524.837 cv
328.485 524.837 304.161 521.615 292.586 512.271 cv
cp
f
292.586 504.185 mo
292.586 504.185 300.583 518.837 328.485 516.748 cv
328.485 516.748 304.161 513.529 292.586 504.185 cv
cp
f
293.899 497.142 mo
293.899 497.142 301.883 511.791 329.79 509.708 cv
329.79 509.708 305.465 506.49 293.899 497.142 cv
cp
f
295.719 490.361 mo
295.719 490.361 303.708 505.013 331.618 502.923 cv
331.618 502.923 307.29 499.708 295.719 490.361 cv
cp
f
296.5 483.841 mo
296.5 483.841 304.489 498.49 332.399 496.408 cv
332.399 496.408 308.071 493.189 296.5 483.841 cv
cp
f
297.543 477.06 mo
297.543 477.06 305.54 491.712 333.442 489.623 cv
333.442 489.623 309.11 486.408 297.543 477.06 cv
cp
f
299.629 470.279 mo
299.629 470.279 307.622 484.931 335.528 482.845 cv
335.528 482.845 311.196 479.623 299.629 470.279 cv
cp
f
298.848 463.236 mo
298.848 463.236 306.84 477.884 334.747 475.806 cv
334.747 475.806 310.415 472.583 298.848 463.236 cv
cp
f
298.848 456.458 mo
298.848 456.458 306.84 471.107 334.747 469.017 cv
334.747 469.017 310.415 465.802 298.848 456.458 cv
cp
f
296.243 449.935 mo
296.243 449.935 304.227 464.583 332.141 462.501 cv
332.141 462.501 307.813 459.283 296.243 449.935 cv
cp
f
295.981 443.939 mo
295.981 443.939 303.969 458.587 331.879 456.498 cv
331.879 456.498 307.547 453.283 295.981 443.939 cv
cp
f
297.286 438.197 mo
297.286 438.197 305.278 452.853 333.184 450.767 cv
333.184 450.767 308.852 447.544 297.286 438.197 cv
cp
f
297.543 432.72 mo
297.543 432.72 305.54 447.373 333.442 445.287 cv
333.442 445.287 309.11 442.064 297.543 432.72 cv
cp
f
298.325 426.466 mo
298.325 426.466 306.321 441.115 334.223 439.029 cv
334.223 439.029 309.899 435.806 298.325 426.466 cv
cp
f
298.067 420.462 mo
298.067 420.462 306.059 435.111 333.965 433.033 cv
333.965 433.033 309.633 429.81 298.067 420.462 cv
cp
f
300.672 414.728 mo
300.672 414.728 308.668 429.38 336.567 427.291 cv
336.567 427.291 312.243 424.072 300.672 414.728 cv
cp
f
grestore
gsave
344.657 423.119 mo
344.657 423.119 353.379 473.74 357.172 488.322 cv
360.977 502.904 366.258 527.33 373.196 529.837 cv
380.137 532.357 390.149 529.486 392.43 529.017 cv
394.719 528.548 405.973 523.041 411.059 519.388 cv
416.149 515.736 399.43 528.486 382.219 494.58 cv
379.942 490.107 361.801 451.791 356.133 440.326 cv
350.469 428.861 348.29 410.001 344.657 423.119 cv
cp
clp
372.188 524.603 mo
372.188 524.603 387.516 531.212 408.2 512.357 cv
408.2 512.357 387.067 524.83 372.188 524.603 cv
cp
f
369.25 518.302 mo
369.25 518.302 384.571 524.904 405.25 506.048 cv
405.25 506.048 384.118 518.521 369.25 518.302 cv
cp
f
364.254 511.939 mo
364.254 511.939 379.579 518.541 400.27 499.693 cv
400.27 499.693 379.133 512.158 364.254 511.939 cv
cp
f
360.942 505.591 mo
360.942 505.591 376.27 512.193 396.954 493.341 cv
396.954 493.341 375.817 505.806 360.942 505.591 cv
cp
f
358.196 499.126 mo
358.196 499.126 373.52 505.728 394.204 486.88 cv
394.204 486.88 373.067 499.349 358.196 499.126 cv
cp
f
354.801 493.509 mo
354.801 493.509 370.114 500.111 390.797 481.263 cv
390.797 481.263 369.665 493.732 354.801 493.509 cv
cp
f
351.43 487.529 mo
351.43 487.529 366.754 494.134 387.438 475.279 cv
387.438 475.279 366.305 487.748 351.43 487.529 cv
cp
f
348.891 480.904 mo
348.891 480.904 364.219 487.509 384.903 468.658 cv
384.903 468.658 363.766 481.123 348.891 480.904 cv
cp
f
343.93 475.841 mo
343.93 475.841 359.262 482.447 379.942 463.595 cv
379.942 463.595 358.805 476.064 343.93 475.841 cv
cp
f
339.75 470.501 mo
339.75 470.501 355.079 477.111 375.762 458.255 cv
375.762 458.255 354.625 470.728 339.75 470.501 cv
cp
f
333.68 466.978 mo
333.68 466.978 349.008 473.583 369.684 454.732 cv
369.684 454.732 348.547 467.197 333.68 466.978 cv
cp
f
329.774 462.416 mo
329.774 462.416 345.098 469.025 365.782 450.169 cv
365.782 450.169 344.645 462.638 329.774 462.416 cv
cp
f
327.266 457.095 mo
327.266 457.095 342.586 463.705 363.266 444.849 cv
363.266 444.849 342.129 457.318 327.266 457.095 cv
cp
f
324.094 452.623 mo
324.094 452.623 339.415 459.224 360.094 440.376 cv
360.094 440.376 338.961 452.845 324.094 452.623 cv
cp
f
320.844 447.212 mo
320.844 447.212 336.172 453.822 356.852 434.966 cv
356.852 434.966 335.719 447.435 320.844 447.212 cv
cp
f
316.938 442.65 mo
316.938 442.65 332.262 449.259 352.946 430.404 cv
352.946 430.404 331.805 442.876 316.938 442.65 cv
cp
f
315.454 436.529 mo
315.454 436.529 330.778 443.13 351.465 424.283 cv
351.465 424.283 330.329 436.748 315.454 436.529 cv
cp
f
grestore
gsave
357.696 411.119 mo
357.696 411.119 396.411 447.759 405.688 459.634 cv
418.731 476.322 435.071 487.416 442.149 485.318 cv
449.223 483.216 453.676 475.966 455.239 474.24 cv
456.801 472.501 464.477 460.384 466.403 454.423 cv
468.325 448.466 466.793 462.083 432.809 445.025 cv
428.325 442.779 390.454 422.716 379.083 416.857 cv
367.719 410.998 352.833 398.408 357.696 411.119 cv
cp
clp
438.227 481.705 mo
438.227 481.705 454.477 477.916 459.926 450.462 cv
459.926 450.462 450.329 473.048 438.227 481.705 cv
cp
f
432.114 478.38 mo
432.114 478.38 448.364 474.591 453.809 447.142 cv
453.809 447.142 444.211 469.732 432.114 478.38 cv
cp
f
424.321 476.22 mo
424.321 476.22 440.571 472.431 446.02 444.982 cv
446.02 444.982 436.415 467.564 424.321 476.22 cv
cp
f
417.883 473.08 mo
417.883 473.08 434.137 469.291 439.579 441.841 cv
439.579 441.841 429.977 464.427 417.883 473.08 cv
cp
f
411.833 469.505 mo
411.833 469.505 428.09 465.724 433.536 438.275 cv
433.536 438.275 423.938 460.861 411.833 469.505 cv
cp
f
405.766 467.013 mo
405.766 467.013 422.012 463.228 427.458 435.783 cv
427.458 435.783 417.856 458.361 405.766 467.013 cv
cp
f
399.508 464.201 mo
399.508 464.201 415.762 460.416 421.208 432.958 cv
421.208 432.958 411.606 455.541 399.508 464.201 cv
cp
f
393.524 460.376 mo
393.524 460.376 409.782 456.587 415.231 429.142 cv
415.231 429.142 405.625 451.72 393.524 460.376 cv
cp
f
386.532 459.248 mo
386.532 459.248 402.782 455.462 408.227 428.013 cv
408.227 428.013 398.629 450.591 386.532 459.248 cv
cp
f
379.997 457.435 mo
379.997 457.435 396.254 453.646 401.7 426.197 cv
401.7 426.197 392.094 448.783 379.997 457.435 cv
cp
f
373.024 458.205 mo
373.024 458.205 389.278 454.419 394.719 426.966 cv
394.719 426.966 385.114 449.556 373.024 458.205 cv
cp
f
367.172 456.857 mo
367.172 456.857 383.422 453.068 388.868 425.619 cv
388.868 425.619 379.266 448.208 367.172 456.857 cv
cp
f
361.985 454.064 mo
361.985 454.064 378.243 450.279 383.688 422.826 cv
383.688 422.826 374.083 445.416 361.985 454.064 cv
cp
f
356.782 452.349 mo
356.782 452.349 373.032 448.564 378.477 421.119 cv
378.477 421.119 368.875 443.697 356.782 452.349 cv
cp
f
350.958 449.927 mo
350.958 449.927 367.219 446.138 372.657 418.685 cv
372.657 418.685 363.055 441.275 350.958 449.927 cv
cp
f
345.102 448.576 mo
345.102 448.576 361.36 444.787 366.801 417.337 cv
366.801 417.337 357.204 439.923 345.102 448.576 cv
cp
f
340.274 444.525 mo
340.274 444.525 356.524 440.744 361.973 413.287 cv
361.973 413.287 352.375 435.873 340.274 444.525 cv
cp
f
grestore
gsave
321.586 405.298 mo
321.586 405.298 281.915 432.404 269.11 440.361 cv
256.313 448.314 230.739 459.166 230.391 466.537 cv
230.055 473.912 235.762 482.623 236.879 484.662 cv
238.012 486.712 246.606 495.83 251.606 499.603 cv
256.606 503.38 274.196 477.486 277.657 473.857 cv
281.118 470.224 302.676 436.302 311.95 427.49 cv
321.211 418.677 335.192 404.876 321.586 405.298 cv
cp
clp
235.102 464.029 mo
235.102 464.029 233.34 480.626 257.481 494.787 cv
257.481 494.787 239.297 478.294 235.102 464.029 cv
cp
f
240.239 459.345 mo
240.239 459.345 238.481 475.943 262.618 490.099 cv
262.618 490.099 244.446 473.607 240.239 459.345 cv
cp
f
244.84 452.697 mo
244.84 452.697 243.079 469.287 267.223 483.447 cv
267.223 483.447 249.04 466.958 244.84 452.697 cv
cp
f
249.922 447.642 mo
249.922 447.642 248.161 464.24 272.297 478.4 cv
272.297 478.4 254.122 461.908 249.922 447.642 cv
cp
f
255.278 443.107 mo
255.278 443.107 253.516 459.701 277.657 473.857 cv
277.657 473.857 259.477 457.369 255.278 443.107 cv
cp
f
259.629 438.189 mo
259.629 438.189 257.872 454.779 282.016 468.939 cv
282.016 468.939 263.833 452.455 259.629 438.189 cv
cp
f
264.344 433.205 mo
264.344 433.205 262.586 449.794 286.723 463.955 cv
286.723 463.955 268.547 447.474 264.344 433.205 cv
cp
f
269.926 428.814 mo
269.926 428.814 268.161 445.412 292.297 459.564 cv
292.297 459.564 274.118 443.08 269.926 428.814 cv
cp
f
273.286 422.572 mo
273.286 422.572 271.524 439.173 295.661 453.33 cv
295.661 453.33 277.481 436.841 273.286 422.572 cv
cp
f
277.133 417.001 mo
277.133 417.001 275.383 433.599 299.516 447.748 cv
299.516 447.748 281.336 431.263 277.133 417.001 cv
cp
f
278.704 410.15 mo
278.704 410.15 276.946 426.748 301.086 440.904 cv
301.086 440.904 282.899 424.419 278.704 410.15 cv
cp
f
281.907 405.072 mo
281.907 405.072 280.141 421.666 304.278 435.826 cv
304.278 435.826 286.094 419.337 281.907 405.072 cv
cp
f
286.235 401.095 mo
286.235 401.095 284.473 417.689 308.614 431.845 cv
308.614 431.845 290.434 415.357 286.235 401.095 cv
cp
f
289.563 396.732 mo
289.563 396.732 287.805 413.333 311.95 427.49 cv
311.95 427.49 293.766 411.001 289.563 396.732 cv
cp
f
293.77 392.037 mo
293.77 392.037 292.008 408.626 316.149 422.787 cv
316.149 422.787 297.973 406.302 293.77 392.037 cv
cp
f
296.969 386.947 mo
296.969 386.947 295.211 403.548 319.352 417.701 cv
319.352 417.701 301.172 401.216 296.969 386.947 cv
cp
f
302.379 383.716 mo
302.379 383.716 300.622 400.306 324.758 414.466 cv
324.758 414.466 306.583 397.982 302.379 383.716 cv
cp
f
grestore
gsave
309.188 391.298 mo
309.188 391.298 273.086 390.998 258.067 389.732 cv
243.051 388.466 210.723 383.138 206.04 388.853 cv
201.368 394.56 200.743 404.951 200.422 407.259 cv
200.102 409.576 201.547 422.021 203.301 428.037 cv
205.055 434.052 234.629 423.794 239.575 422.951 cv
244.524 422.111 282.067 407.783 294.77 406.255 cv
307.465 404.712 320.348 399.095 309.188 391.298 cv
cp
clp
211.321 389.65 mo
211.321 389.65 199.993 401.908 210.895 427.681 cv
210.895 427.681 206.165 403.599 211.321 389.65 cv
cp
f
218.239 388.966 mo
218.239 388.966 206.915 401.216 217.813 426.994 cv
217.813 426.994 213.083 402.916 218.239 388.966 cv
cp
f
225.899 386.376 mo
225.899 386.376 214.575 398.634 225.473 424.408 cv
225.473 424.408 220.747 400.326 225.899 386.376 cv
cp
f
232.989 385.361 mo
232.989 385.361 221.665 397.619 232.563 423.388 cv
232.563 423.388 227.836 399.31 232.989 385.361 cv
cp
f
240 384.927 mo
240 384.927 228.672 397.177 239.575 422.951 cv
239.575 422.951 234.844 398.873 240 384.927 cv
cp
f
246.426 383.58 mo
246.426 383.58 235.102 395.833 246 421.607 cv
246 421.607 241.27 397.529 246.426 383.58 cv
cp
f
253.18 382.396 mo
253.18 382.396 241.856 394.654 252.766 420.431 cv
252.766 420.431 248.028 396.341 253.18 382.396 cv
cp
f
260.278 382.212 mo
260.278 382.212 248.95 394.466 259.852 420.236 cv
259.852 420.236 255.122 396.158 260.278 382.212 cv
cp
f
266.7 379.212 mo
266.7 379.212 255.375 391.47 266.27 417.24 cv
266.27 417.24 261.543 393.158 266.7 379.212 cv
cp
f
273.125 377.044 mo
273.125 377.044 261.797 389.302 272.7 415.072 cv
272.7 415.072 267.969 390.99 273.125 377.044 cv
cp
f
278.469 372.49 mo
278.469 372.49 267.141 384.748 278.047 410.521 cv
278.047 410.521 273.313 386.435 278.469 372.49 cv
cp
f
284.067 370.318 mo
284.067 370.318 272.739 382.583 283.641 408.353 cv
283.641 408.353 278.911 384.271 284.067 370.318 cv
cp
f
289.918 369.72 mo
289.918 369.72 278.594 381.978 289.5 407.755 cv
289.5 407.755 284.774 383.673 289.918 369.72 cv
cp
f
295.196 368.216 mo
295.196 368.216 283.868 380.474 294.77 406.255 cv
294.77 406.255 290.043 382.162 295.196 368.216 cv
cp
f
301.372 366.958 mo
301.372 366.958 290.043 379.212 300.946 404.986 cv
300.946 404.986 296.219 380.908 301.372 366.958 cv
cp
f
306.977 364.791 mo
306.977 364.791 295.657 377.052 306.555 402.826 cv
306.555 402.826 301.833 378.744 306.977 364.791 cv
cp
f
313.247 365.431 mo
313.247 365.431 301.922 377.681 312.821 403.462 cv
312.821 403.462 308.09 379.38 313.247 365.431 cv
cp
f
grestore
gsave
307.622 375.13 mo
307.622 375.13 272.442 351.673 259.852 343.38 cv
247.27 335.087 221.415 314.955 214.575 317.736 cv
207.735 320.513 202.227 329.341 200.836 331.22 cv
199.45 333.099 202.543 350.228 201.211 356.349 cv
199.879 362.466 199.125 346.439 221.036 355.306 cv
225.688 357.193 272.305 370.708 284.188 375.435 cv
296.086 380.162 313.696 387.31 307.622 375.13 cv
cp
clp
218.829 320.958 mo
218.829 320.958 203.024 326.31 200.274 354.162 cv
200.274 354.162 207.633 330.748 218.829 320.958 cv
cp
f
225.235 323.666 mo
225.235 323.666 209.43 329.013 206.68 356.861 cv
206.68 356.861 214.043 333.451 225.235 323.666 cv
cp
f
233.204 325.052 mo
233.204 325.052 217.391 330.404 214.653 358.251 cv
214.653 358.251 222.008 334.845 233.204 325.052 cv
cp
f
239.918 327.552 mo
239.918 327.552 224.106 332.9 221.368 360.751 cv
221.368 360.751 228.719 337.345 239.918 327.552 cv
cp
f
246.274 330.521 mo
246.274 330.521 230.473 335.865 227.727 363.716 cv
227.727 363.716 235.083 340.306 246.274 330.521 cv
cp
f
252.563 332.408 mo
252.563 332.408 236.762 337.759 234.016 365.611 cv
234.016 365.611 241.375 342.201 252.563 332.408 cv
cp
f
259.071 334.603 mo
259.071 334.603 243.258 339.951 240.516 367.806 cv
240.516 367.806 247.872 344.388 259.071 334.603 cv
cp
f
265.391 337.826 mo
265.391 337.826 249.586 343.177 246.836 371.025 cv
246.836 371.025 254.188 347.619 265.391 337.826 cv
cp
f
272.465 338.267 mo
272.465 338.267 256.661 343.619 253.903 371.466 cv
253.903 371.466 261.266 348.052 272.465 338.267 cv
cp
f
279.137 339.435 mo
279.137 339.435 263.336 344.787 260.586 372.63 cv
260.586 372.63 267.95 349.224 279.137 339.435 cv
cp
f
286.012 337.99 mo
286.012 337.99 270.204 343.341 267.461 371.193 cv
267.461 371.193 274.813 347.775 286.012 337.99 cv
cp
f
291.961 338.755 mo
291.961 338.755 276.165 344.115 273.415 371.966 cv
273.415 371.966 280.774 348.544 291.961 338.755 cv
cp
f
297.391 341.029 mo
297.391 341.029 281.586 346.38 278.844 374.24 cv
278.844 374.24 286.204 350.826 297.391 341.029 cv
cp
f
302.75 342.232 mo
302.75 342.232 286.946 347.583 284.188 375.435 cv
284.188 375.435 291.555 352.021 302.75 342.232 cv
cp
f
308.782 344.083 mo
308.782 344.083 292.965 349.427 290.227 377.279 cv
290.227 377.279 297.579 353.873 308.782 344.083 cv
cp
f
314.735 344.857 mo
314.735 344.857 298.926 350.208 296.176 378.06 cv
296.176 378.06 303.54 354.65 314.735 344.857 cv
cp
f
319.938 348.412 mo
319.938 348.412 304.125 353.759 301.375 381.615 cv
301.375 381.615 308.747 358.205 319.938 348.412 cv
cp
f
grestore
gsave
316.422 362.833 mo
316.422 362.833 303.196 322.666 298.403 308.373 cv
293.614 294.091 276.645 259.271 269.54 257.24 cv
262.454 255.208 261.7 261.783 259.458 262.408 cv
257.196 263.033 249.071 278.423 244.243 282.412 cv
239.43 286.416 248.719 273.326 260.489 293.818 cv
262.989 298.173 291.348 337.572 297.79 348.619 cv
304.227 359.673 313.692 376.166 316.422 362.833 cv
cp
clp
279.946 265.419 mo
279.946 265.419 264.2 259.884 244.86 280.111 cv
244.86 280.111 265.094 266.224 279.946 265.419 cv
cp
f
283.317 271.509 mo
283.317 271.509 267.571 265.97 248.227 286.185 cv
248.227 286.185 268.469 272.306 283.317 271.509 cv
cp
f
288.731 277.509 mo
288.731 277.509 272.989 271.978 253.653 292.208 cv
253.653 292.208 273.875 278.314 288.731 277.509 cv
cp
f
292.477 283.623 mo
292.477 283.623 276.723 278.08 257.387 298.306 cv
257.387 298.306 277.625 284.423 292.477 283.623 cv
cp
f
295.657 289.884 mo
295.657 289.884 279.907 284.341 260.567 304.572 cv
260.567 304.572 280.805 290.677 295.657 289.884 cv
cp
f
299.434 295.244 mo
299.434 295.244 283.696 289.712 264.356 309.943 cv
264.356 309.943 284.586 296.056 299.434 295.244 cv
cp
f
303.2 300.986 mo
303.2 300.986 287.458 295.443 268.118 315.677 cv
268.118 315.677 288.352 301.783 303.2 300.986 cv
cp
f
306.188 307.423 mo
306.188 307.423 290.446 301.884 271.102 322.111 cv
271.102 322.111 291.333 308.216 306.188 307.423 cv
cp
f
311.485 312.134 mo
311.485 312.134 295.743 306.591 276.399 326.81 cv
276.399 326.81 296.633 312.931 311.485 312.134 cv
cp
f
316.02 317.173 mo
316.02 317.173 300.278 311.634 280.934 331.861 cv
280.934 331.861 301.172 317.962 316.02 317.173 cv
cp
f
322.321 320.267 mo
322.321 320.267 306.583 314.732 287.235 334.955 cv
287.235 334.955 307.465 321.068 322.321 320.267 cv
cp
f
326.528 324.544 mo
326.528 324.544 310.782 319.017 291.446 339.244 cv
291.446 339.244 311.68 325.345 326.528 324.544 cv
cp
f
329.399 329.681 mo
329.399 329.681 313.653 324.142 294.313 344.38 cv
294.313 344.38 314.551 330.49 329.399 329.681 cv
cp
f
332.875 333.931 mo
332.875 333.931 317.133 328.392 297.79 348.619 cv
297.79 348.619 318.024 334.732 332.875 333.931 cv
cp
f
336.481 339.107 mo
336.481 339.107 320.739 333.56 301.403 353.798 cv
301.403 353.798 321.625 339.904 336.481 339.107 cv
cp
f
340.688 343.392 mo
340.688 343.392 324.946 337.853 305.606 358.08 cv
305.606 358.08 325.844 344.193 340.688 343.392 cv
cp
f
342.586 349.4 mo
342.586 349.4 326.852 343.861 307.504 364.087 cv
307.504 364.087 327.739 350.201 342.586 349.4 cv
cp
f
grestore
gsave
338.75 354.037 mo
338.75 354.037 352.954 313.029 357.934 298.373 cv
362.926 283.736 370.891 244.681 366.543 238.509 cv
362.172 232.349 357.559 237.208 355.395 236.283 cv
353.235 235.353 337.375 242.677 331.102 242.837 cv
324.844 243.021 340.215 238.314 336.938 262.435 cv
336.243 267.56 334.45 317.583 332.754 330.65 cv
331.059 343.716 328.415 363.126 338.75 354.037 cv
cp
clp
369.727 251.771 mo
369.727 251.771 360.696 237.251 333.004 241.361 cv
333.004 241.361 357.5 242.97 369.727 251.771 cv
cp
f
368.649 258.853 mo
368.649 258.853 359.625 244.341 331.934 248.443 cv
331.934 248.443 356.442 250.052 368.649 258.853 cv
cp
f
369.25 267.173 mo
369.25 267.173 360.211 252.662 332.536 256.771 cv
332.536 256.771 357.028 258.373 369.25 267.173 cv
cp
f
368.454 274.517 mo
368.454 274.517 359.415 259.994 331.735 264.107 cv
331.735 264.107 356.243 265.712 368.454 274.517 cv
cp
f
367.118 281.615 mo
367.118 281.615 358.086 267.103 330.399 271.216 cv
330.399 271.216 354.903 272.818 367.118 281.615 cv
cp
f
366.813 288.38 mo
366.813 288.38 357.793 273.873 330.098 277.982 cv
330.098 277.982 354.59 279.583 366.813 288.38 cv
cp
f
366.266 295.435 mo
366.266 295.435 357.231 280.912 329.54 285.025 cv
329.54 285.025 354.055 286.63 366.266 295.435 cv
cp
f
364.672 302.56 mo
364.672 302.56 355.645 288.048 327.95 292.154 cv
327.95 292.154 352.458 293.755 364.672 302.56 cv
cp
f
365.969 309.751 mo
365.969 309.751 356.938 295.24 329.254 299.33 cv
329.254 299.33 353.75 300.947 365.969 309.751 cv
cp
f
366.454 316.724 mo
366.454 316.724 357.422 302.22 329.731 306.322 cv
329.731 306.322 354.239 307.923 366.454 316.724 cv
cp
f
369.536 323.251 mo
369.536 323.251 360.5 308.736 332.813 312.853 cv
332.813 312.853 357.309 314.447 369.536 323.251 cv
cp
f
370.235 329.4 mo
370.235 329.4 361.188 314.896 333.5 318.998 cv
333.5 318.998 358.012 320.607 370.235 329.4 cv
cp
f
369.34 335.4 mo
369.34 335.4 360.309 320.884 332.618 324.994 cv
332.618 324.994 357.118 326.603 369.34 335.4 cv
cp
f
369.477 341.06 mo
369.477 341.06 360.45 326.548 332.754 330.65 cv
332.754 330.65 357.266 332.255 369.477 341.06 cv
cp
f
369.157 347.56 mo
369.157 347.56 360.122 333.033 332.43 337.154 cv
332.43 337.154 356.934 338.744 369.157 347.56 cv
cp
f
369.848 353.712 mo
369.848 353.712 360.817 339.201 333.122 343.302 cv
333.122 343.302 357.633 344.916 369.848 353.712 cv
cp
f
367.657 359.791 mo
367.657 359.791 358.629 345.279 330.938 349.388 cv
330.938 349.388 355.438 350.99 367.657 359.791 cv
cp
f
grestore
gsave
349.29 373.892 mo
349.29 373.892 387.204 352.931 401.297 346.552 cv
415.391 340.197 449.352 319.31 450.883 311.919 cv
452.399 304.525 445.688 304.474 444.891 302.259 cv
444.094 300.044 427.907 293.47 423.508 289.009 cv
419.094 284.572 433.032 292.568 413.188 306.666 cv
408.965 309.654 371.227 342.533 360.528 350.224 cv
349.829 357.923 335.59 372.552 349.29 373.892 cv
cp
clp
443.379 323.31 mo
443.379 323.31 447.797 306.791 425.875 289.388 cv
425.875 289.388 441.454 308.369 443.379 323.31 cv
cp
f
437.465 327.369 mo
437.465 327.369 441.899 310.853 419.985 293.443 cv
419.985 293.443 435.551 312.435 437.465 327.369 cv
cp
f
431.813 333.482 mo
431.813 333.482 436.219 316.966 414.301 299.576 cv
414.301 299.576 429.879 318.548 431.813 333.482 cv
cp
f
425.899 337.923 mo
425.899 337.923 430.329 321.408 408.403 304.009 cv
408.403 304.009 423.981 322.994 425.899 337.923 cv
cp
f
419.809 341.806 mo
419.809 341.806 424.227 325.287 402.309 307.892 cv
402.309 307.892 417.883 326.869 419.809 341.806 cv
cp
f
414.665 346.201 mo
414.665 346.201 419.086 329.697 397.157 312.291 cv
397.157 312.291 412.731 331.275 414.665 346.201 cv
cp
f
409.137 350.626 mo
409.137 350.626 413.563 334.107 391.637 316.705 cv
391.637 316.705 407.223 335.689 409.137 350.626 cv
cp
f
402.852 354.33 mo
402.852 354.33 407.27 337.826 385.348 320.416 cv
385.348 320.416 400.93 339.388 402.852 354.33 cv
cp
f
398.481 360.189 mo
398.481 360.189 402.907 343.681 380.997 326.271 cv
380.997 326.271 396.559 345.259 398.481 360.189 cv
cp
f
393.719 365.318 mo
393.719 365.318 398.141 348.802 376.219 331.4 cv
376.219 331.4 391.801 350.376 393.719 365.318 cv
cp
f
391.059 372.025 mo
391.059 372.025 395.485 355.501 373.555 338.107 cv
373.555 338.107 389.137 357.083 391.059 372.025 cv
cp
f
387.055 376.732 mo
387.055 376.732 391.454 360.22 369.54 342.806 cv
369.54 342.806 385.122 361.802 387.055 376.732 cv
cp
f
382.067 380.185 mo
382.067 380.185 386.485 363.666 364.555 346.263 cv
364.555 346.263 380.137 365.248 382.067 380.185 cv
cp
f
378.024 384.154 mo
378.024 384.154 382.446 367.642 360.528 350.224 cv
360.528 350.224 376.11 369.224 378.024 384.154 cv
cp
f
373.067 388.361 mo
373.067 388.361 377.493 371.83 355.567 354.439 cv
355.567 354.439 371.141 373.412 373.067 388.361 cv
cp
f
369.043 393.072 mo
369.043 393.072 373.461 376.552 351.543 359.146 cv
351.543 359.146 367.118 378.134 369.043 393.072 cv
cp
f
363.11 395.626 mo
363.11 395.626 367.54 379.115 345.606 361.712 cv
345.606 361.712 361.176 380.693 363.11 395.626 cv
cp
f
grestore
gsave
357.934 393.861 mo
357.934 393.861 400.586 399.791 415.43 404.166 cv
430.254 408.556 469.36 417.857 475.348 413.255 cv
481.325 408.646 476.274 404.228 477.114 402.037 cv
477.961 399.83 469.985 384.283 469.567 378.033 cv
469.125 371.783 474.458 386.947 450.227 384.662 cv
445.079 384.169 395.024 384.439 381.899 383.283 cv
368.77 382.123 348.434 383.908 357.934 393.861 cv
cp
clp
462.231 416.986 mo
462.231 416.986 476.364 407.365 471.118 379.869 cv
471.118 379.869 470.524 404.408 462.231 416.986 cv
cp
f
455.102 416.201 mo
455.102 416.201 469.239 406.583 464.008 379.091 cv
464.008 379.091 463.399 403.638 455.102 416.201 cv
cp
f
446.821 417.138 mo
446.821 417.138 460.942 407.509 455.7 380.025 cv
455.7 380.025 455.11 404.564 446.821 417.138 cv
cp
f
439.446 416.646 mo
439.446 416.646 453.586 407.021 448.34 379.533 cv
448.34 379.533 447.743 404.076 439.446 416.646 cv
cp
f
432.29 415.611 mo
432.29 415.611 446.426 405.982 441.188 378.49 cv
441.188 378.49 440.594 403.037 432.29 415.611 cv
cp
f
425.532 415.572 mo
425.532 415.572 439.657 405.962 434.415 378.462 cv
434.415 378.462 433.813 403.001 425.532 415.572 cv
cp
f
418.458 415.318 mo
418.458 415.318 432.598 405.697 427.348 378.197 cv
427.348 378.197 426.754 402.755 418.458 415.318 cv
cp
f
411.274 414.025 mo
411.274 414.025 425.407 404.408 420.165 376.904 cv
420.165 376.904 419.571 401.451 411.274 414.025 cv
cp
f
404.141 415.611 mo
404.141 415.611 418.274 405.99 413.043 378.49 cv
413.043 378.49 412.438 403.041 404.141 415.611 cv
cp
f
397.188 416.38 mo
397.188 416.38 411.313 406.759 406.079 379.263 cv
406.079 379.263 405.489 403.814 397.188 416.38 cv
cp
f
390.797 419.72 mo
390.797 419.72 404.93 410.103 399.684 382.603 cv
399.684 382.603 399.094 407.154 390.797 419.72 cv
cp
f
384.684 420.677 mo
384.684 420.677 398.797 411.041 393.563 383.548 cv
393.563 383.548 392.969 408.111 384.684 420.677 cv
cp
f
378.653 420.033 mo
378.653 420.033 392.782 410.404 387.536 382.904 cv
387.536 382.904 386.946 407.462 378.653 420.033 cv
cp
f
373.004 420.404 mo
373.004 420.404 387.133 410.787 381.899 383.283 cv
381.899 383.283 381.297 407.837 373.004 420.404 cv
cp
f
366.504 420.345 mo
366.504 420.345 380.645 410.716 375.391 383.228 cv
375.391 383.228 374.805 407.775 366.504 420.345 cv
cp
f
360.372 421.294 mo
360.372 421.294 374.508 411.666 369.274 384.169 cv
369.274 384.169 368.668 408.72 360.372 421.294 cv
cp
f
354.215 419.349 mo
354.215 419.349 368.344 409.736 363.094 382.236 cv
363.094 382.236 362.5 406.783 354.215 419.349 cv
cp
f
grestore
461.504 258.287 mo
461.504 258.287 497.497 276.537 502.711 323.486 cv
502.711 323.486 490.192 282.798 461.504 258.287 cv
cp
f
468.286 253.587 mo
468.286 253.587 504.278 271.845 509.489 318.794 cv
509.489 318.794 496.969 278.107 468.286 253.587 cv
cp
f
474.02 249.416 mo
474.02 249.416 510.016 267.669 515.231 314.619 cv
515.231 314.619 502.711 273.931 474.02 249.416 cv
cp
f
203.301 428.037 mo
203.301 428.037 206.426 437.201 209.04 438.248 cv
211.645 439.291 215.817 437.201 215.817 438.763 cv
215.817 440.326 218.946 435.634 222.598 435.634 cv
226.25 435.634 236.157 430.419 236.157 430.419 cv
253.899 424.162 li
253.899 424.162 234.071 436.681 225.204 440.326 cv
216.336 443.986 215.293 449.201 218.946 452.853 cv
222.598 456.498 214.77 454.935 212.165 448.154 cv
209.555 441.373 201.739 435.568 203.301 428.037 cv
cp
f
388.473 255.15 mo
388.473 255.15 393.692 255.15 393.692 257.759 cv
393.692 260.365 382.739 282.279 382.739 282.279 cv
382.739 282.279 389.516 258.802 385.348 258.802 cv
381.172 258.802 385.348 254.634 388.473 255.15 cv
cp
f
389.516 267.15 mo
389.516 267.15 391.836 258.275 397.727 259.068 cv
403.602 259.849 401.52 260.365 403.602 262.978 cv
405.688 265.587 407.774 268.716 406.735 270.802 cv
405.688 272.892 401.086 281.302 399.43 283.326 cv
394.735 289.056 393.692 293.755 393.692 293.755 cv
385.864 306.275 li
385.864 306.275 401.09 287.033 405.688 279.673 cv
413.516 267.15 420.293 268.716 420.293 268.716 cv
410.903 266.107 li
410.903 266.107 414.032 260.365 406.735 258.287 cv
399.43 256.197 393.692 256.72 391.606 258.287 cv
389.516 259.849 389.516 267.15 389.516 267.15 cv
cp
f
179.301 387.123 mo
179.301 387.123 178.782 380.345 182.43 380.865 cv
186.079 381.388 186.602 385.041 185.563 388.169 cv
184.516 391.298 179.825 391.298 179.301 387.123 cv
cp
f
177.739 397.552 mo
177.739 397.552 177.739 393.908 181.387 394.427 cv
185.04 394.951 184.516 397.552 183.477 400.166 cv
182.43 402.775 182.43 409.556 180.868 407.994 cv
179.301 406.427 176.172 402.775 177.739 397.552 cv
cp
f
181.387 371.474 mo
181.387 371.474 185.555 376.341 181.735 377.041 cv
177.915 377.736 177.563 367.298 181.387 371.474 cv
cp
f
181.387 355.826 mo
181.387 355.826 183.129 365.912 180.348 365.56 cv
177.563 365.22 176.872 360.005 176.872 358.263 cv
176.872 356.517 178.954 350.962 181.387 355.826 cv
cp
f
180 340.529 mo
180 340.529 183.129 343.31 178.954 344.701 cv
174.782 346.087 175.122 341.224 176.52 339.482 cv
177.915 337.744 178.61 338.095 180 340.529 cv
cp
f
181.387 413.208 mo
181.387 413.208 184.172 420.162 181.387 419.814 cv
178.61 419.466 178.61 409.38 181.387 413.208 cv
cp
f
186.602 438.939 mo
186.602 438.939 189.391 445.201 186.602 445.892 cv
183.821 446.587 182.782 442.767 183.129 440.326 cv
183.477 437.896 185.215 435.462 186.602 438.939 cv
cp
f
191.125 458.412 mo
191.125 458.412 197.04 465.021 192.52 466.412 cv
188 467.802 185.211 453.892 191.125 458.412 cv
cp
f
196.688 470.931 mo
196.688 470.931 199.133 474.755 196.688 475.802 cv
194.254 476.841 189.04 473.365 191.821 470.58 cv
194.606 467.802 196.688 468.15 196.688 470.931 cv
cp
f
202.598 481.361 mo
202.598 481.361 209.907 485.884 206.426 488.314 cv
202.95 490.751 196.336 480.322 202.598 481.361 cv
cp
f
211.993 496.314 mo
211.993 496.314 216.168 497.013 215.469 500.833 cv
214.77 504.662 206.774 500.142 211.993 496.314 cv
cp
f
218.598 510.224 mo
218.598 510.224 222.075 507.443 224.161 509.876 cv
226.25 512.31 225.903 516.49 223.821 516.83 cv
221.727 517.177 218.946 512.31 218.598 510.224 cv
cp
f
228.68 521.353 mo
228.68 521.353 223.469 517.876 226.946 516.138 cv
230.426 514.4 233.551 518.224 231.465 521.353 cv
229.375 524.482 228.68 521.353 228.68 521.353 cv
cp
f
234.942 525.873 mo
234.942 525.873 236.333 525.521 238.418 527.958 cv
240.504 530.396 238.418 531.087 238.418 531.087 cv
238.418 531.087 232.157 525.181 234.942 525.873 cv
cp
f
241.204 532.826 mo
241.204 532.826 241.555 530.396 244.684 533.525 cv
247.809 536.654 249.551 534.22 250.938 537.001 cv
252.329 539.787 253.379 540.13 256.157 541.177 cv
258.938 542.216 261.02 545.001 263.11 545.001 cv
265.196 545.001 268.329 550.216 263.461 550.56 cv
258.59 550.912 258.586 551.259 254.762 546.044 cv
250.938 540.826 243.633 537.697 241.204 532.826 cv
cp
f
270.063 553.693 mo
270.063 553.693 270.762 547.083 274.239 548.822 cv
277.715 550.56 277.715 551.958 280.844 552.306 cv
283.977 552.65 288.145 555.435 286.758 558.216 cv
285.372 560.998 274.586 556.474 270.063 553.693 cv
cp
f
296.493 561.341 mo
296.493 561.341 298.926 554.736 301.711 558.216 cv
304.489 561.693 305.54 562.74 306.583 561.341 cv
307.622 559.951 312.145 558.216 313.536 562.388 cv
314.922 566.564 308.668 567.955 305.54 566.908 cv
302.403 565.865 296.141 564.126 296.493 561.341 cv
cp
f
318.754 566.908 mo
318.754 566.908 321.875 561.349 325.704 563.779 cv
329.532 566.212 334.047 562.041 337.184 564.818 cv
340.309 567.603 340.309 569.689 333.008 570.384 cv
325.704 571.083 319.102 569.693 318.754 566.908 cv
cp
f
347.965 568.646 mo
347.965 568.646 347.965 559.603 355.61 560.65 cv
363.262 561.693 361.176 562.74 363.262 561.693 cv
365.348 560.65 369.524 558.912 370.567 562.74 cv
371.606 566.564 369.165 569.341 361.176 569.693 cv
353.18 570.041 348.665 571.779 347.965 568.646 cv
cp
f
397.688 552.998 mo
397.688 552.998 401.868 559.259 397.688 560.302 cv
393.516 561.341 391.438 557.865 391.782 555.435 cv
392.129 552.998 394.907 550.56 397.688 552.998 cv
cp
f
417.165 548.13 mo
417.165 548.13 421.68 554.037 417.508 555.783 cv
413.34 557.521 408.813 551.958 410.204 549.869 cv
411.598 547.779 415.778 546.392 417.165 548.13 cv
cp
f
428.29 540.482 mo
428.29 540.482 434.903 546.392 429.336 547.779 cv
423.77 549.173 419.254 542.564 428.29 540.482 cv
cp
f
442.895 524.83 mo
442.895 524.83 449.852 529.349 443.946 530.744 cv
438.028 532.134 436.293 527.611 442.895 524.83 cv
cp
f
454.372 517.876 mo
454.372 517.876 456.461 525.873 451.247 524.83 cv
446.032 523.791 445.68 519.267 448.461 517.177 cv
451.247 515.091 453.329 516.49 454.372 517.876 cv
cp
f
469.672 500.49 mo
469.672 500.49 470.024 506.4 465.153 505.705 cv
460.282 505.005 465.844 497.357 469.672 500.49 cv
cp
f
481.5 478.927 mo
481.5 478.927 484.977 484.146 480.11 484.146 cv
475.239 484.146 477.672 480.666 478.715 478.58 cv
479.762 476.494 481.153 475.451 481.5 478.927 cv
cp
f
488.454 462.931 mo
488.454 462.931 490.192 466.759 484.977 466.759 cv
479.762 466.759 481.493 464.673 483.235 462.232 cv
484.977 459.798 489.145 458.06 488.454 462.931 cv
cp
f
388.102 222.728 mo
388.102 222.728 394.125 219.466 395.036 222.193 cv
395.942 224.912 392.211 226.244 389.75 226.087 cv
387.301 225.927 384.735 224.388 388.102 222.728 cv
cp
f
273.204 211.548 mo
273.204 211.548 280.852 207.064 281.325 211.771 cv
281.782 216.478 267.598 216.451 273.204 211.548 cv
cp
f
300.805 205.498 mo
300.805 205.498 304.43 202.775 305.661 205.119 cv
306.883 207.466 303.825 212.935 300.836 210.38 cv
297.844 207.818 298.032 205.712 300.805 205.498 cv
cp
f
287.036 209.525 mo
287.036 209.525 294.067 204.583 294.942 208.736 cv
295.817 212.884 283.625 214.876 287.036 209.525 cv
cp
f
493.95 451.419 mo
493.95 451.419 487.309 451.236 488.774 447.638 cv
490.231 444.037 491.625 443.927 491.723 440.783 cv
491.829 437.63 494.274 433.255 497.165 434.427 cv
500.036 435.595 496.372 446.693 493.95 451.419 cv
cp
f
499.528 424.478 mo
499.528 424.478 492.75 422.564 495.997 419.517 cv
499.25 416.474 500.211 415.357 498.743 414.419 cv
497.274 413.49 495.192 409.115 499.243 407.408 cv
503.297 405.697 505.172 411.83 504.372 415.025 cv
503.571 418.232 502.321 424.611 499.528 424.478 cv
cp
f
503.344 401.849 mo
503.344 401.849 497.555 399.166 499.688 395.166 cv
501.813 391.158 497.301 386.978 499.829 383.642 cv
502.364 380.306 504.446 380.142 505.708 387.373 cv
506.969 394.599 506.09 401.291 503.344 401.849 cv
cp
f
499.684 367.376 mo
499.684 367.376 490.668 368.08 491.11 360.376 cv
491.559 352.666 492.758 354.662 491.559 352.666 cv
490.356 350.669 488.301 346.642 492.032 345.306 cv
495.766 343.97 498.731 346.181 499.692 354.126 cv
500.668 362.072 502.75 366.439 499.684 367.376 cv
cp
f
483.356 324.232 mo
483.356 324.232 489.266 319.583 490.633 323.666 cv
491.997 327.748 488.688 330.091 486.235 329.935 cv
483.786 329.779 481.141 327.197 483.356 324.232 cv
cp
f
476.993 305.197 mo
476.993 305.197 482.532 300.228 484.59 304.251 cv
486.649 308.283 481.45 313.216 479.262 311.994 cv
477.067 310.767 475.36 306.712 476.993 305.197 cv
cp
f
468.493 294.693 mo
468.493 294.693 473.872 287.646 475.7 293.087 cv
477.516 298.529 471.274 303.541 468.493 294.693 cv
cp
f
455.415 272.998 mo
455.415 272.998 459.379 265.708 461.227 271.498 cv
463.071 277.291 458.696 279.369 455.415 272.998 cv
cp
f
445.504 262.619 mo
445.504 262.619 453.317 259.916 452.68 265.201 cv
452.04 270.482 447.571 271.181 445.27 268.568 cv
442.969 265.951 444.196 263.763 445.504 262.619 cv
cp
f
427.5 250.279 mo
427.5 250.279 433.368 249.478 433.051 254.38 cv
432.739 259.291 424.68 254.341 427.5 250.279 cv
cp
f
413.438 240.685 mo
413.438 240.685 418.364 236.822 418.747 241.669 cv
419.122 246.517 415.465 244.365 413.305 243.486 cv
411.137 242.607 409.993 241.294 413.438 240.685 cv
cp
f
405.293 231.341 mo
405.293 231.341 408.969 229.31 409.375 234.517 cv
409.774 239.712 407.571 238.146 405.004 236.595 cv
402.438 235.048 400.383 231.029 405.293 231.341 cv
cp
f
189.899 296.732 mo
189.899 296.732 192.024 290.275 195.196 292.158 cv
198.364 294.048 197.438 297.619 195.274 300.103 cv
193.11 302.591 188.774 300.787 189.899 296.732 cv
cp
f
184.438 305.755 mo
184.438 305.755 185.852 302.392 189.016 304.283 cv
192.184 306.162 190.704 308.369 188.731 310.376 cv
186.762 312.388 184.157 318.646 183.317 316.595 cv
182.477 314.544 180.985 309.974 184.438 305.755 cv
cp
f
197.848 283.091 mo
197.848 283.091 199.821 289.193 196.024 288.365 cv
192.231 287.533 195.918 277.767 197.848 283.091 cv
cp
f
207.563 270.541 mo
207.563 270.541 203.028 279.72 200.981 277.798 cv
198.946 275.873 201.45 271.259 202.477 269.849 cv
203.497 268.447 208.469 265.181 207.563 270.541 cv
cp
f
265.571 218.857 mo
265.571 218.857 267.387 222.63 263.004 222.306 cv
258.614 221.978 260.805 217.623 262.766 216.552 cv
264.719 215.482 265.227 216.08 265.571 218.857 cv
cp
f
181.793 321.607 mo
181.793 321.607 181.68 329.107 179.243 327.708 cv
176.813 326.314 180.696 317.013 181.793 321.607 cv
cp
f
320.665 206.119 mo
320.665 206.119 323.274 202.99 327.446 202.99 cv
331.618 202.99 336.833 202.99 337.875 206.646 cv
338.922 210.294 337.36 212.376 333.704 210.294 cv
330.055 208.208 320.665 212.9 320.665 206.119 cv
cp
f
235.719 232.74 mo
235.719 232.74 240.852 230.119 243.461 226.986 cv
246.071 223.857 249.2 226.458 249.2 228.548 cv
249.2 230.638 247.114 231.681 245.032 233.763 cv
242.938 235.853 235.801 240.052 235.719 232.74 cv
cp
f
225.711 241.849 mo
225.711 241.849 227.325 237.466 230.942 239.794 cv
234.567 242.119 234.399 247.279 230.29 248.998 cv
226.172 250.716 220.629 250.912 225.711 241.849 cv
cp
f
368.649 208.732 mo
368.649 208.732 370.219 214.466 363.438 213.423 cv
356.657 212.376 353.524 204.556 358.747 205.072 cv
363.961 205.599 368.649 208.732 368.649 208.732 cv
cp
f
405.165 521.705 mo
405.165 521.705 410.383 518.58 408.821 513.88 cv
407.25 509.185 411.422 509.185 411.422 509.185 cv
411.422 509.185 409.86 505.533 414.032 507.099 cv
418.208 508.666 424.469 509.185 424.469 509.185 cv
405.165 521.705 li
cp
f
478.188 373.041 mo
478.188 373.041 468.805 370.435 467.766 360.521 cv
466.715 350.611 468.286 346.958 464.633 343.306 cv
460.977 339.654 443.77 346.958 443.77 346.958 cv
443.77 346.958 450.547 341.744 455.239 340.181 cv
459.938 338.615 462.282 333.306 452.504 330.748 cv
442.719 328.177 456.801 325.052 463.071 335.482 cv
469.329 345.912 478.188 373.041 478.188 373.041 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_lemon_bw.eps)
%%CreationDate: 3/12/2016 1:30 AM
%AI9_DataStream
%Gb",KBj2OedcgWlcSPU;fgu1ApB=*>N?KHr5_+OS`7PMYGTgC\anbH*p04#tgNI'c'5),;^?<5n&6UTaUtVkK\p#gbkg[e@qJ!\6
%pJOJiI5do_^6^QJ6d$=$li-_#]mDC^HU4^9A(J'tK6h0)a#)`gh9T8jBAdu/eoqN15;"cbSQ\j.mku,]T[d4]<#a*5;J,</Z(BW$
%T#*/"b_MipD>][@=,Wnrpa3Ia+)OuW_+(2&/%.6/<hi.ULd$:BK!/P^r*.l6l_S?o*:1Q:6$]d@^UNDCpPAgR+10e,EgTkI(%"01
%`tu(HdHEf9TD!lc8upc![O[@6Q\X3N\*<CXqnY^`It5@C*;Ii"r0So9-cJigc)\rS^#761_[I#0T@pcjQ54o1^dL6^8!EuB^N;,F
%;#a\Jnc),8qZ"FINJs:1Gb3aI!mY4n#=ls>2Z.C4#C>81fJ5sT`'$3gC)>E04.u1&1el0I);Y%8pn+^=WU=^hN!c_"A5*_V7^lYf
%X''E>J/jTE_;(?M!@#T4&LIXIQ/JjBb_r,r%[qFr\Rp3'nio*9*G2)HOrsBYeY)`H?>7UYjYhNNPO1h"W2_`o@&$oD;i^;[rO;DY
%-oOkR2W/VNg;,":b';krY<0.oim.U%e!*FI/qWpciuK`%0`a,`=i2tRXJQka7KX2BTGAUT`HSEI"C3BuY%i2$$V+*9\4g&;J=SdH
%b%[]dUmC6d4`=BD&^%[S`oI(C:pOEos*XKhZ=8@!h%&^b:NYW1D*&XB%WQh;B3h^-f,?M/$7(g^GsM6f:dh^2._eIQT\j.5c@l6b
%%7dT@n3Nn2"982;C];R?g9#PVa61]:k@1cHdeNEp\Ql[b*+X5Nm5#mQTO)M!bX`]Q1W,hMlW3+F2.hc3MhaZSh#CM=DH&-g=u]p&
%-2]jL:^>6S$/ink*.JJk5dYU\&H0#oWO.:76g`n,2sWPJL:GoNSRi9LNG>soko`3E^]Wlm2\Ru=fK!XIpi1<Z?Ro0XQ.'@8iiH$M
%)F*3TE2"ks9f"A_?8IC,U4:&[T&BXG6Kf&Q>1/;?IgW+;s'dbG_1OeJe:Fr=LiB)ZDq$C9M9,%U'ecd/HZ$cJVHH+h>gNge\3[7_
%ouj#^\;2.jfM[A/%u\\j<2<MGer.c]r=Fu`S8#G<gocE:;-PlYI0?&rc5@E7L[n,Eiue$Q4U6\=NPb1)pig<Vrq1_elSZaDqR]QQ
%U"ChQIh)9g3A^DRX]gK%(ZF_LQ/bV$!7na^*HTJ;Z+!NnXAUW/K0&ZZ164?peF6!+YP(aS0DKN^]D"#NGTVYCL=t,=Z<6KbT:]2,
%W>B@*"/c(>X-lour_<L2hr=e>[%e=#r)G2TcVa`er?`JNZ_2>bekQ7*l8UD8)Pfj@XJOm[SIi>qMOO[_Y282j1:MOnX'V;2O7_Dh
%<QZb`_G1L'<]k(YZ/'+8K8ib^"iL(d^Da[&iS\2HW8?0F=5'LOGXi14(A1%!0Fd/foc=og`c.mAS_?i<?+`i7<4qhT6s<WtLP'_S
%C]td&i("#K23!R_ks$fYOM$;Mf*kiRC)Zo@3i6FG=05UI[-$<e5<'M"1h(5A]^oVn'\%_i!=@J(Ze0.P;]JEZF^/%Whrlmi_/m'`
%;TQ5Gi9uhCogu'M9)U5_fF<TjG'Y=lYsmec$?Gr:X!#Z&p];LhOd]FER;rrA_T\761gjpmggljof$'@?Bbj"$YJ+mR=u0Z+$B2M0
%-p*.&>RI+Gba+aOE\gp;B$8G8\X>#Scn$(o^m[n$`2)./ekNI5;?8R2p)I0qq;=$,m[k6;NPB)!X&Sq:X'I=\QPIYX9P#!X]8p"q
%+LCbGaT(:8k:0%\`EMm)@].bV'^PRqTpol33Sgr64E`SW:0Kr1^a]1*N_M!5/#Q7"b%&qVd_Lr6)_1kNG$<cH*1KPMYG0<ofmG*W
%/F_9EeTOTPeGNHDiu=53P:]oaSqXR)K$mEW.f>`)rfn[uUXa(M'MH8kWL+1E]"3sIU.>;$*+l*PCp#Y\X`gt@k-XtL)&ms,H2uRs
%^1c#KCB59#18P2q,$sV-Yt(#GWj#Df1#]j(73gVsr%A3jru8S1Z.l5,gKWoI&IZ?l)>cb#>G=&MV:'GF63=,DKUK"7Y=!D+B?e\[
%E_IAV-oNUCZWb^N'0r$::67dE4\p]>kJh&M@&ALk*$5S<oT&ODi9Z%]T55@Io&=c-@#^ZQhOIu![F1q1R5[Z%?:0#6cO%X+1kMpk
%EPE!sNUoEEKB?lu4#rS[:3rdW1XG*jY%!^Y1FdlKWcX2VGFbR\@DX$t\irdX\I+dF-i*[Q/o@[I)V'3k#l^/7*-p$)R*$-p?$=[Z
%("j:FeXONuV3;+#<QFX`R5ZE<.g6>[@pZ#mNtLuEhkk<MRMTU=].SdM1kB8[N/^Oo)nQF#lSi+cRT*C$b\LZ_@cAg]7:]tE87V0:
%,f-?<O_H!..F*O9?&YDYMt&7e8#PicHjW;_8h\2^@WN294jthUdips(!&H3YB?CSr>a<GEB@1G"i5_>dIP]&-`Hb,fRAU&I3b1Fb
%]]r\2+_(O_01B8fmAsEn#M&dG)O/Zq_"p85(OWb-_;":nfDis[V+mZ3]"jYWn:?_hil+lSS6?MZ9+a4T$;2amngDo\Vr%+0E.I3!
%1_t`/373\5i^I\k(XDZ/g+a9Yr*;FF+.sOj,UT"qV7D@ANJ0SpiRl(II1#GfoMBrC?uC::b"9`4SWc[RRP"]A3_!uG.d8&L_?Hj:
%W(d&I$^>,nYN!kBhuF4oMp7L9`]_?GP+;ZEEghSAghU_6Uen`DBb^$Upg?W9@o&PQ=rN!jDW?>D)3?j;*1C?I>\R7ldhkJMf5X)V
%Dq*6d<%<$*SH2kR>sQ@iNsi%(V&g=LgaafgX!N-Y2$I)Zf5UhV65>KPR@=%2!AXN)]).Q=Z7+9S[8b5Un@M_?'+2)%!#qSQUG>]Z
%)j#o>k!Z)cI5/o5R3_h!NQsp`;\<dP;c.H%K6sR7h8IL_S!8ho#+0*:4]@r1P!YA#P$F6@60:*T(F9ME';(2GMHA&C;.d?es,+1O
%je>G9XYV4'j_!YLUgi[(05>E'/kR$iVF@8OjeDB]ee=1(Op]5VT'C5l/kR$iVM4;*)5Wb@S=3DiGn'$Wk?1Q(n[qg=?F,i_^>]jU
%EtH*/(#rQ8NN-?QgH6r^Kq"hL41_:dIbi(K5A@d8do,Gn2\sCS.q?8!Q'iLs]+/1hApiu8o!K1p3ob!3^39,Cg3OE9B'S(lErg0s
%%HD1ZD/I;CrkhuXVQATEXu=bZAmF^fajoA_Tqa?\[jQ#c;Ja1Q`g*GO!&u3ul][Gm,GPrW0I*>1)0Oo^J*%?7h9+V@FgkQPGr4O8
%J`E`@TOmI(H'c2>H`9mr@st8>s##F4j3!epZf3QH"6B_&Dpd#RcP0>sd51X)Tk/<br`dR]s"2.GnA!096fnU7F][kii1s8cqAJ$?
%1qX*Om6[hjMtJ),BX=Ed;cNCcFb++2L''>67:1d`)?7O109`7Or<oL](u;>RjfQD[<"Fsa9bMq:E;kc0r+"0+DHQfb-%8QLeX%2^
%Mae(Re"'6kBC2UOqQCnO]?X.BEAE,'F^A"g"cCPsqlCR?e""NZEJ"sC^%4'/G!<oL#&.JT.Mo#k#'5/GUi8tu?Nk'Y%/OMPE)k8j
%$O1BM`6)%NadZ7LnX:6;IniO0@j'd"\2lLh5dQr/ZhX"]a+$TaU2LhISJ5>#`IG(AA/>39`IA-^&W?]/g2]fW15ktR@_TS^WZ)lJ
%]o`hRb[S;G8b_l&@_U=Lf:'[+LY,\7R-uRo>-=BcFOIfG1,X0:)PW(47JmRoe](t6!NB*pce?`SZ%Q+R;ZPAF_:WS;ZtQq@ni;9(
%h@g<_i94@>%b>ed%9<(L0fHX%L$mE(Sq%98p<^C_Vj'i<-4XW/ZC-L7hr6:JjF(5JDp,''+K-rG3Ya2IlK-0&A,3FYW!;YNAl)fO
%1lM#W@o>,7g!"RsF.LQ\B/-&W.)Ie?g";Q9h+J=h.K6MKla3jA&@1V(<6oRCSWa,FTF1]kkm`UE*OD64:a'mi$OLUM\L@]jJ$t$I
%V\8B8Ls)`>&X5P,2/cMn4_U<Dg!fLFR-eBU(J"Ro+RCu@/cD;8oZ>3ifDiPbD=q'47\@mE0/LYlbjk72E4h!rKcMi+Kd$K>bjdH0
%]Z_?K1WR\_nM50u9SMN'3l!C'9p,FC"">L`hmJPo0mKSLK66,\9jGl.2"QZ#6WWE#mN1bsfYkO1+CNWU9r*>KdYghq.@;h?2Xt^*
%hr"#&`L'Wup27-UV2op@"_@Igj-akV$--0pVWenWZV!oT+WSr=PGs\&2lQl-26HcUS8b"<Gl'AfFB3g(<de[eB_n@#^9iAj/3!PH
%p!Z"OaI,q*T:4TY+1n-9qekMV;hWAtZVLdK2,6nM5oWUn)3e'_bg`T?.3A(3Vg(q%3__@<=39_[)#bR<c0l4Hr>0=$ImR^*dhnIZ
%PI[ZRA^;p7)eYirlLqpM(n*pcNDZ4B"!W^iqg3]Uka%M9LqbG$<(VYhDf!4VBn/2OdNt]C*QP&(rl=pR,;(-&NS9XRo4(IFV)e-W
%9V__Po4(J.+2b\kIZ-*;bkr:k/nnsIN(IU@1I&n'O"hr0N;noleh3iBW4_Bgfh&MPC)<qS)jN6?^\lp7r<S0#dp;;<G,8KUb.Z88
%H"+O@8i>.qs/t5=!\R3(R!P[=",D2j$EA@6E<2nI;q-L]0"-@kB(2Q/e4XKilCS"8Juplhgp6GMOi!;>2&9C7?uA$[^JT]>DI@UY
%)cE1rbGKMiVVOe<;D]_*4In;J[5=+7h8TW?XDZCdDU>J&cu/t8NIq!K/0"5n*'X\!k&I:+HTdop_&HJS,aDOrl%[Kb4NQudfGip#
%9p:o"iTXZ_5a_1S0C:)4H_gdUQL#?-3_Vpi+]:^gY.Eou+7^tjLT+jkE5KKQKG.6oIS=0,6+a\d"=11?Q`2pMjX/0:98@(7CMl8a
%1:-+Tf%eK<RosegC[Uq#F"+K;Rr6Kqd_hs*SkDqC?jc;3'N!&u\X>H:1ZrB4gru:XR<*G-q@,.BdK))e-CoRK9Y+3=bY5T>1[,Ag
%NUgeiQq"17FF,Wo-9]?0(iIX:'#1Um_ZYTJC?#+r$JVYb`+0G$NNOcdX,kq8=(7+ZG&s&&BF8:/`u/.d7?1a:>ro,(9BXJ9DJEDj
%99o4sV,X&'<r6MeNL*iFN=52Q5!D(dr%'-Vdm?MCLj2ii75rN(R23,@lHD4pc_65PCSPMD;fbnseKI(ir9]4U2lY\CS/N0)raj2C
%-i^s,;Ve"Kb3SDPK-XD9VVVj'"^gP-g\+:Z<4[0Qmg4_@:irg:DmbL)^;SW7ReD1b0'H1Y/%%F_P@>t3HYD6k;p(n-P6SUd@Uk;q
%X4020,#D^oE?-j?L_1H-),F])'SWW?.f:f.*$WsXbj&-#6EFQF>o7P>G:nPne!<OiR5QunoB//qLJEguGLQ5XImKr,W[=MQp)9r-
%s!M</0844>X'Pc&U/;H("^puE9IZDMV.c_>c#f]=$eZ=7Snb+c`jtTBq6p,nfpcP[c^`f:UmmYC=Y30Eb'^3K64-;/Sd*0ZNQHq6
%WerN:0UNMj.\'krV[E]WZHqL0`/uYhXDr==S!2c6XgE;1Pq1+^BbZZnj'+=u3"q=eRjh.EE(gAOU^P4"Jn68K-V9]LjPki^_uE$U
%3/o!?fjfYuWq?31?8t+2nQT'LPo)6ViA4asHuA!YD`>3Rlcj_`IVA8C=^e%EEUm9FL.bC@@4HN3T$cU`8UlFG_kEnke*oZRE>g6@
%in;7kppr=*lY26e"Plu0*^je-bpI=OOcPtUB7KqM^N%]KeCVe:ID1]GJ?s<\0:+;gYUq39=N9?VX(@6RqPUjE`/VsB]8!%<nQZKN
%m`<9UITtL\WF=*P_*H+ebg\J15>S+:I6D&..c-9HK&fV!T#m[5_R9+c6$&gL*2EODdS@;X4AKt/;rO9(1+AqO"Rs%1m`2KeA*,*W
%SU,!g.bVm;6F*\^d5!X$c(<8.Ctr^$hgB%%+)>m&R5fF;pn1ck[nbAaUbI?ZJ)acUf2L.q6L3\LaR@S>VrMg@bk:LE*"/UUjf6k!
%L%A(hE0au/HVuDEdgE8R#h$EAVQLrAf?<,_8CV6]e'[JNI2>AH1,b'=Se"RHp%U1irpfjE++N>BDn0J,+%oVC!)[(Q)h6E&?\g:T
%\N78G?c1;0O+9hTKCJWU`1B$_EqGODgtGo9;U9<K%G;99_g*e](6Uo:D\l(0fDdDHD#%P@;X0^Nff0KHIq6njW]Nr>][4P@?r%^.
%]qEkgQ@gskarP&/@[TdUJ,]8!Q?`ddI>>8G10/!KoBD1!.K9^hmGW!Q^L\B+E?YKe2A[;^6l;:10dcL:\(GLEJsEMDp%"3H(^pJ*
%cjbPg!eT(IUCjY8pg>N$)YJ-Kd_6'?mZ0kk&9uX<ZuJ&jZu8%1?!5q#s-M-=NiAL#ro#o0@t;7a[6;e,@:QWuCY:cJYNC-HG0qmG
%o=`BF,&VXO"O_W/-sR:R!^Moe1octS\#j':18sZ+b;UHDD@B)*c2-<`WIo!F+4^76$(O%dlILnuca`Y,>@3RuLWRI/T,IBoESl8e
%II.pHST3O)pUpe*rIpH-Z.YTJ;JJ,e$/1<.CAUYocgFkL(Y+>f?7F86MmAA(`YY(T@XC+CMWkV>B9o^4p]m1%L2GrmL2K(:rF&oZ
%k'cYYH@`6k!kM%\"Vl;hf'DFbhds;"B=CtPg?jDVgHA#.>g(_-!X5YqK#Q8Vc\"H0:%o[9d^`/#0L2\pUhm:h%r#8)rsuTFqhIE9
%fIar>jeLpjP?uRtZiu)*SQ7u!guTXSX`TPPh#CM=DH(VSrtkF+osA$_K.OU\.!98j]j3%p!DVu&4]W#J9_cpdcS.2ogr9Xb?gWN#
%cCl3Nh\p)pZWuTD]lu<[gO8O(mXDilFBNFgQA<&_Tel[%1is_?VUbXkWS]1%+bp:*TO5*(3Y-r\,,UX(XpYmDi,PTRmt;4dO9p=9
%BD-uOCP!l:T^hHF7#G@/P^rjhHUm>/U4TogW@0"98WOl(Y0RfJ0%7-1loQ'jO)UCGX`gHt!UT9aU?GLULe8N,:nY_uR/1aJc2R3Z
%7/ut,DAF\1:B$[^r13sbhPsUK2i!CY?qY'*a##T5pOZjs!8Kpp:=:V@:'fV*D;WUl[UBSuCZo%r?H%T5jViHro5/Co=FX>n_dDf(
%Kh0OH!7,i%XR5o];"2b^1iGq38lXE!!)Q`<Xt(YWDR;^]fEtC-43bq4nC/Ub9`ITrUK.r@jD:eX\h5?tY5iQ$&aQA!m:$qIXq<5)
%s5h5T.>ue'(!adEoB2aSK6!eebNoD77^XIiWc4WdVQOPu[g_IrSVt]](!n_7#L1J11M?sZ9[*:tUJ937>iDDZ<q^Lr0s26qkIi_'
%\nJHtq\?.H7009_ad/2F.TpJmUoDkB2Bu=FS!dNZh8npt>OA(dq-VK1Ci7_J>SJgkP#eF1WCD(m,:()X`Ff"W;/DOSd?A0JK>88%
%?-Snk_=2Abg6pE%UN80"DZt<sfFB[Wkc:iDHT!&O277'Vqf^=I$ULF3`m-'J.FBM)Sb<4<@E:s!D4C6a?tOL_=,:EWXBuq<j=cBb
%/DLG;<m%XniSG%boX#KhaDW#`iEb9mLp(3"heN\V%"0p!(E@SJ]8i#8^Ng]-%YDIMRItTs>s,8h/+&tVU!',-,d^RQT6?*i6"[TG
%&RpU!Npq>%EEoU5"W*_EWs^/ifsT$q8;*gSjT63U7c<1.fMhQ3d>AkDf(DUu&7b5c.('(DR&`c#XThOATtkMM#0dPJkI)#-gPL>U
%XLB\tT\Q:,BR:ngmKQB:/W=,lkC>ig-j80%DTDO8mUW_Ar9DINDKDROXf@q>#9s5InE]SkpJ@4?)IC#W8tasSV&j1$E2Ge2"d)/S
%+0Od$Vhg,!fa9?alB&\XUUDR[)TqV7Z_C[6mg%AZ`AYNDeL205aCJN)+^#NcHc'<Fk%:<fDuB>3["NGad$QLM1PAVBmoluF=`!Iq
%KY<>6)hk5:QJWLqlJ;po"2&kKG%&.$(UU6S*CNC/0k9H'#R0nFqX4?E;5@"V0Z-.R,lK^Nb8u.O*+sh&+=$?=ftI>:JE29,Sd%>.
%lL!1aY?W%L;4]ul4DtmPYLs8%L!:c.&tHpU2.\_c"^=?&;Ea&Z/Vbki")on4a.)ac7OF.:E=#lg6p)boW=pqKM\dgB'LI[CC.TL"
%Xs)8!';i<a-.A[(/4L_r@r@_'k*C!ic/#!NMrb;OqI7,h_L%rck-)3)=`[=:MBkgO=(tVk7-h3!_7^*?7"=B1&ruDtpIi84h#H)T
%`h0*[ZoD^&,;Hi8q)bO,QoGC=SG];'?Og8)dsA9G:0qVHC['iQR6>=VEMXiWrp&n&2`(/:#PS4U`_L**"=kY[gKDurR[9n23>FYL
%ch^`:lnZoM$Gd%=6of>d1K.t=d#Hr#kl!8KNXUG&[ZCO%).,e[-;cEo=,4)dmUc'P<,H5_NUl"m2p9lDo/&ORiR1:d8p'ICDH(R"
%*,TB0b<a=L?5M/?cN2\8SP&S+^b(78D,>:@CF'QQ:M].H<g\7iTG+7J6$ZS1;R:?t@,34'G.(ZC5+TVeXj1nlS!c*9.pMDlk*!:q
%=-,iZ>&u2u%o/%]I1G[FC=LuPGokJ7WhV[-[en`c:WM$h&_)=R`k2tsTiP>->(+%FhX0ciCnFRde-Sj1!NUtsNJg\E=HD%+*M=J8
%:-'!>oAL7L#+Yq+UJifTA.I+i=KdKTM#lFe1?;=bc:-mPB(rX"_r)Bm0;srnbicP8_k#W0%l9Ql'i;^H(X9rkV:o^PpN-I:.]A$O
%:/[udgH-2NhEW5S4lc,Dlr\'E=5((A+PacHgo6\aZ4m$eO:-l12Yr15/Jl$RqBTb%V*S9AZXZrtMSiHp4\l(8cPk(.70\*J2pu#f
%W<5+7XKl$B80K[_iuf+5S2.%<EE=3;WQ\6H;e+uNTJ%9b]@)^75&8f-]ES1a[XecpO8MaZ/6YCU0FW^/CW996L5H=[g)LouX[-/0
%8KL^7JE<C3<62Xt[i6.J4#aeEP@<9-*h`F/=8&g4S*-oFQ)EgdXZT&8prZNWmooNeijW1+BV%'G",WA?@L[TLCWL4B^^JjZ_CY6e
%pIKmJ+-Riu,cU*D.Xm&fO4dCBhnbE0Oe"_SjA@i>-OOjZ>@Q[$=p$*!Bu+]!;XNX44rEs/[*Jr&'=r1ldgEmhb2Y\kSL\LY\c^%n
%)!R&d=iH6WY#2;*A<h;lY^PQ@g/V_K&Dn!A80/SZ9>?jW0VIl')<H%LSphCjK=N[ZAL8Di9P+lE_Gk9c.Yfg[Y\-AhKC(hi*N/SH
%<Zh)),5,nU:JUSD4+"-t#Zi)!X^\?%'DKpeU!JY[pC;@DXG=rFbjO@A?3]/',aF:&OR)FPKeABlQgoMf<*tA?#+Pfi5Zi4<)b4!i
%E@kX5Y:B59!;o]$d3AjL`a<l6m>?=7Q1.d\*],CTD;`QlERQlb"4?^nT5_"?0=4[kia5afQ+4EA',?+"]>BSkf7Pr%2:4%?-j"K%
%`C(/^d#QT3i@@b%>lh^9r^.\*K;"D1rgtoAP&/9S=_P`R\fsOgU:=*.m";\aZo:6Xmbsb6!Zk,a*UM9]4G=$FJDT4f#)7?)pkEtX
%D(D9s4G^TZ#3$KF!CkJQ=f6FJ035**jBMb@m5Cu0J_gko&W*Zmb!9=Gl3h6b\2XV!7U9D:Ruq_QR+drm!,idohRaPnO7V9q>I*-=
%f#tku;Cku@Ne+c_pU539Uat$spiUR2d*:$.]_P*H+1,lnoL:8C#A9^FA,qTFTYY/,%VL<HnE*:mo@I,Aca8Rr8C>D&B!Y\.4J_Ge
%[V.KRBFSO1/c7>)DB+:&.VsdSqJ6@4(^GfqDXhpV"931Z1)EscZr,-Pa@TeU>Qt^bMRWO6FoIDuQ:VlJ0QB';*VM>=DW!dV+B+tI
%824$pnom;QXT3MW&=Xp@X\S*h(VEm(O:OAjN+\IPi!;VAb;;tg"]\`o:Al/NG\+)*]OE-dC/usARBp14ER5P5q1m0!V#+S>r2p\1
%Q$VN)QrL[!2_8.?W2-,Y);F`+5LDJ)D4hFRa]ZC+Ct*ugs(XC:@rr<@G'&5&0!SmtBbRbQO`Ae6j`oBrPk>:apmo;l1$G`-@nD*Y
%h5E7VF^Pl*`8#@mEfd#c5)!FDW))!IY,1]*Q@Zh%-^Dd>)$k/iqU;';F"L@JA$fYiH'GI.$IeEai_E)96E5=C_7eF,.Rb[cC,V*1
%mB,BoTK+tGdsXQMb#!$FZGSJYO$g.VF9W[(,\+jeNoseXj?]nK<k)9c!LHBWHjn=3\_]s-BEUmR8N/,(&RJ##<&SFPk\(U2LVZsA
%KDs!_iG20D2ah++jEde(=/*bN#b>-n<MU<BAF$=/X;*BJnZ3@4%N+<s%C>T4:n4@=B<b]B&e9GL>]$mTn3;47(hP:1a(4#B+.,25
%BN]c)'LqO-_cBa<[S,/JQ*._Jh2U`[D@AM&Gjec6DA#]6?+"LFea8_sZYEF\Geg'e&92;$=E;)*)u6M!%1BoE_lR4K]9s"D6hs,K
%mS[<7+4`Bbq,o)mJK"!+/MtqZLLs"?RLNB1faDD\U!;nsNn'%KCHmaMTm3=AMknAE'aMTJoMp&$BDlp[821UkF`>@aUTB"\HQ=ju
%HM2@rOCf;j_g:X^>ET14;\H'Q4gq7o&''X#`?YVXj1VY4-*MC\qK9m#lriqadkS"ZY[(?GP2(hc>&F0pPj"(u7&Tcq:m)nU^975_
%;RNMe#KhfQb)A!r)7m@+?15B9h_<Dm/eThP>kJ-[!Y!?3M!o'(#>'Y<mt0QP[DP8\qEQ+'.qj>e$l*^4gENa9iaJ3rc11J`nHW"+
%IdJ0+YDGY:0*Hoa_792jN4oH)5b_/O'=&es.GLqrB<Xd!4@J>Ch-%cO)on?eEk8Y60jjq?Hpt%%\c&q\:!YGBl<^>s9_YW$481ta
%Y8f`OYZuRjnC"taZ^>*:5-LM/S^q_mgpjaGpL(+$bdQq#DdTS-GEu:e5(C.\4^6Y:r*XlZfdXHNlc-AW:UdDeRars90:XY.G?:-G
%Afn.X/6oP_>Ha"+0[8nReubh7os1,QIIUobFi=^]f.'RfQ3u=3K@@QF[`T\"6FX1=DoqtQ]Nt=3-#\3:>fbG6>HQ]CIf!s\WH4uD
%;6]I0k.at>*5XOd'CFn$ib3OAs29?[k0rMK_-6Qge[*9m/U^c-3T'V;]%"mRjpMRk3ZE.db9ntQmFT?:0[C(R?Okn>Fg_'pkp1c0
%?9<3ml<QLBm=(b)DuEdDH1p0X#D,CRf"R`)D89NQIhXfaS%%sHhY4XmrP^j@?Gu_M\HC=Uhrj,plQuGQgtJ0=[(MR6BAT9,^L$[n
%^Uj-smD`>VH1^abb<'@[V,Hh's/O;HT5:(ge@P@`kVar8^F`I"^+AHJpRXNMCsIOujL4dNs$-Q*XtIIO1LV27q;%Cf>eTd&2ZI<7
%q6=0$r1r>`O'<uDY$'K.kKfLeE6(r9Aa:B'SGOFJ%o'1=<*=QQKL=>"T?Jl>"So(0>@SL6Cu&<$gK_:1\A$nU=>?k\q8p2=e6Qj;
%SR6YDrj62Uht]V!5-<]EOIeLombk?tEXnX!Fkj!pq=BBeU*/[3ns6/&\[,Rd>[4hSEGPP`';oj>LT`NAFb+86j4g%=rF>ik`es]%
%Ek)++ql_TQJ)eq8&&or(n9]$Ol-o;/U[[XBM%"M$A7`=LrUj5Qc#CWUhG2p.dm1,7bA[bpU*]#E:\M"o?r<DA.pk91m4JODB9r/:
%q-M2a'Y_m0:*.1HZ!JtF\=7]&hnJW)n%F4?gKD_g(/FQR5?<8]=ZV7No%&SK,Mpe.:ANrHOZrdtDnXKaC_XT**j&GV4-,_(CA1I^
%ekR:NY_Q#h\aEe7&P_KVs/<WRm;+q3[8D0NI`8pop6nPQ;4r?"I5Coi?1A/Po[NDgX31b8gUVs'm7olb4e!DF$$@*RS%$mDq`mG/
%CKN`9rF>Z[WUXie=[Cg;]P8'#XF+7*-if8i>+!Vpr3*fse\/N`_c;K.kk"/BeY.CXB]<7hEpJ#=kbV%!ZSI$8r,#s3jAe+9XW2^F
%*o?k,_COm-&Z;tu#9.aY0-79e3IBrTo39n-#[`,m4uA)Km&u`f;-/=[CA.b=3tKq<cdl=gEp;stcM_Drp7B1iMs@pW_/DPF?X,Sa
%PE*UH%plBS1qA8+niSUqVg]f(p#/#I^!npjn+d4_"Gg^Hd#@/=G!Gi1G;gT2<gP`Pp.&Wll18gq?S)<gi$t:6X;>\3mk!n>,MnX7
%?bBU9=UU;*>s-8ZDjP88CAhE_GB!9T/r]=84riKiIA-2bfXS][I`h&KS3;DK^>.$ro35kE3Zf,4*kZH"]o=g[M<jWe^JGmjApF"1
%^t`$TII\HTrO9YKF`s.!H`tramWUn)GOVTsIBP9+&9j&n!_sDOBY;hqo&k'1Q&V'lqHT!0J)#BMN,K*FQ5Jr=[H#R/glih8OlYd&
%'bPbpm@M/rKDiLohRE=Bc.33jn'W4<YBR"=Er4a#Y0!krmb@$LMmY*Xq=Y<n_:JRtripO/g[?+adBD%;GoF'><h#q^qg;po6@Jc?
%jk7p_h;(.QS^WY7^<N)?Dr"\he6^UrYALE$?Ve(rch/YhE4kg:?^P&E(:HAc^49plY1/F1bTgJ"UG(l(cMj."#(M'<T;rj\YV"1r
%j]3-U>^N`[B,l?4=N<$Ee/A9hJ8)k(k-<P(BHWlN-gVma2-g.0n;ClCK$2iD22)%nBI,>A6-:nAZJ=7PgBZB>9VY&*cksI.U__cJ
%/,_7DDdQ3PISLt:@g<(r=gX[JT,,Ke=[-2@'5kZND.tuS9$d#N$?Vn@_YO1`_rs)e2%>%gq\9Q8JC%>>n&Q/o/,CWQ(/Ffj@1fQ^
%co`=t/A,Zm.ia^bmJ\Kn"q#s_d,RaR^s6.->S4[qmMGhP#i37&:Dd?2+LNFi,,hd<:=?lMODMF^:Lqq#+JipXl5ntgpN"j%W>W*j
%Au3cbocZXl8(Mgi:F"qsrjWiV"HlmtQae!?&Oods6#coDp\NW-(hm[8Bd7>&KkX-6OFR^QoQnU"`tHg`YYJB`T&]&GGN^\D!X+1B
%O8nmX>:4f_4*^M"^9RMW2ul%u`/)SI5?A*SH+LERD>V6!`iVa6'PduCV_iqC]:dIac;tPF]KKQ$Hp(Y=0:i-Qca#."A(^2)X3I3F
%/i%oIjpkR1h%gMQ[;`_Pn/:PF]:0<q7maE&*n0PY^3_QsYFTh04r.J<qN6hkPWoLqHhG8$lMfDt0e0Z_eXG>XbrhC09<YbgdE:IX
%NCNB?O)I8\"GZ3RMtPN8_;i27?nB;k90IcP=pQ1O^PGiA;P7?>r+L":48\C3`2pS\Ac_TU)SgfEUN+.c>MfGL/bj.enT]ELEt0"@
%$5D^pp;^Mp?;alXUd4mQnWLb0;<hPFW/Cp$)qJ:1o%3KSK(5kojpO2)\+e0:D0l4;:E",X<RFW%cL;s'>?P2a4r7PeSHgjd_rLZa
%ePD7sDsi$fPH'RH_bJd`\>_gIs3u=Z/Sol[Mp]hDiIRIG8!'ddE8O[)%WXXL?NJj_R50dl/%Ngbi%9BB30-BeGb2*"Vk;$gJ8$5!
%TRWrW:>u$E]`@9_bmM$H9(:G!qt\4uA)Enc[U+0=]6/f:ZgpAKc1B_>F`e`h5Q.:Bp7CXgX)DqP@a6#W$=LWoXWbsjj5]s+[Bn2g
%Q=.[%7g]F6A-(U>Ee4/ap,j0A]-gWM-qe54I*J9&:MrTcKK-.eQ"sA/O6U;C-10bP<n9KJ_bo3KY?r@,fiYG%O?AMLIa)C#>.FJ)
%PNS7??KU/3Y(H<@:jXcem<lF1Hh2R`*Lc'SLVrSXCieXNk+6dWGI=Q2D"W'h-YW3IXiRh]p/+TpdtF+!Z.a#c]sX07&"h5XbM';a
%DeK-RBd`o6Ao-t-Mu8LGe]DV'_V<YDY&jC12<QX-=q#m?Y^U+53O[Mi(KR$7?bY0;oPhVJeo_6&cpG8QibECAj65I(1PF:`>rhmf
%?TicmIt-^!I_Ps4d/Ql)*oke!Y)X<VKpU%ShZVF)n`JF!;skQ%En>!haOkHPpIQWncXn"?Rus=`0H%o3Jn,;@@cM"$d],:fITZNT
%VnH@8Z.:^A$?&1Ggc)]-Qn'pM6)f-0V(PEPG7-!SNJAU!gUUB-oJ3'#P?4s2KlYFF:ae;I)pJ+j>%-g;*>VD.NE]2blnDgcgYifm
%.JS'NOKEi6q`%s-mccFhI[tQmR"jdOrRUkOIe<<i-WpB4XjnNhYB-BC3t&;(Gd)8`*c-SGM)+::rV5p'9"/D"r;..qp`dSa:/QR_
%&%=4c]B)%sF]Zf[@/]E:nI]FcbK,$**j1jl[EgjKc@5qtnBb\D5it#oXKF[4HbZdfX*i(En(q\uD]\;;k4T;IdI;C0n+dbYJ$,--
%E<V(#b`g)$bthQ):]oCG0#4Mhp61g2*SeEA^N"AYreJ>sCg"L;h-DGAS9m4c.Smtd8A.!rG7L#!hd/LW]76,#Ws)sTYI-Roa>o+#
%4$9^)U\r`oGB_g/E9]#7k0mO0HY[+%&_]Fi/p@3ei0LhIl1p3q&W0ialY_2:3E`@EGd@jjhEl+TnDV?],iH91g%-oBns@@oc\$PW
%HfVmn/ar=R=Ur/04=@nudd,BDb5+HbUCM+geoU`^`g>krp7hlFmsE,lqJb[o$Y7HS)65^BSG1@]?E_%heq5(Xqe4j_"=j)*4ZM]V
%+#10#L=3B3_h\$P!Q@hIc63RKqT<fLD#AO_;Q+KdOb,+hq=W%8_TDed``hKt>oW:fg<%m;DDmXhM9Z<FDl6IDn@)17la`R_oiJ3;
%q2;ad/o+[Z>AZ"h*TYSJ3VQ2BFlC:=p3?OGd(\DDV>g5OK*0I(^4+-\c?:8fVKJY-W(#)u5=`nPANee,Tuth3NgYPHrcrD[+QrTJ
%Ue`$H:>W?S82JkZotIrBZ'P9-]!8\i](b4P'7D\"5<dC>GKE#E^A@8*Zad8<BZHD@I/2(TeYU1AFOe!:*g%s/@2cBG*mo660(#7,
%KpD>GmSR#V=1;u::Yk1e:u;-F\GRL4/JGYVH4+$VDZE;Ahd:eUEmTXPrmZ5H.:i1qMlTLS^RrP'GPJ?DkOqAn9gUc^h>YKXM4:]"
%4R>+\#M$k-_:NU?])sRt,;44$Kbn*#XhqsF`qmiq]D(.`7Xk,pYO+H[qiU$cD%L@C+%_#ef&qSJ=nb1:4*Y!i3G="-W1DFIUq#+S
%o'Q7dNE`SeRs2TT$R^pG2?@`EOJA]a0f\fSA*r?F)3L&eDbsq_d='3<f>cY@h^b.(T:Zji5J7k`hVgQ_\LkMlfF#Z)hO*%K+//f4
%)7d``6Ep"q%>iAXA0Zh;,4j4;6dKX&++gfjr-N<Oc^S=%5<E4XH$XHX:6\@4K"oHh@iMDT(-XcThcf>+Hh#W*A/T^11t7GLqK9\8
%8/+t22n&#;-+aXc04l:Qm+6l[]>)#[kO;n=f>sN,>qlfTr[[H;1$1a#dS?.;k=q&?#PW/5,2"U8Qa=5[!(+H6ecp.YW96"tfu=sr
%X`)p>ksNoPXM24>TfOh`:sj>$S">+3X]"pkW>tM*?@I8>gE7%p?h.3@oe'Ac&eK1>1>tF^+R@Za>!,r%L9S[G(#(A_CADW;i`hJ7
%+2bIQ-pM$&elEj1om7S)i?**j@Xp1m3uI>3EdNeJG%"hB7p.9;kFHSF?1N`I\\DI^m<eq-k>lY6h:m;(X+C1nZ+!0ao^YT@rdD$=
%^H7R8Pb8b-"92]RdXgF8!u-aV_tEhr#P50T?P`t?Hb'[Yq!'J*]oc$X)Q!gR5?qKnDENk.ke3bY?VQ&Ab<OQaYP[3J^s##[IInaR
%M6%AaH8>6Wi<Q_t?9bUJ=]uDC=7t9,W]kTV@62q=p\j?&c?nD_@j$2>A+&I<]/BP(XgK-"h6-k/HOo.85Q+G(oo_<,ZVo/p3]f@j
%pu4+W+c-)GHrGCn8mk"j53W3p?:N^p<-TD[,)e5ik+J($L[OV`1;:N.Z$Hbu^>Cq!%nC,b/7[B?ZkBeJLCObi;HC5Iq[9HD2Q)W$
%?.0@FY*V2YO)j)dp,8q.:(NM=I&[Eslb$JGhS&mYc?#V[]i[An<5+>=f^74S2s/`/X&gg\_mjdVB;h_F'^r6//q8-S)QEUG?8E@G
%P^r"J49mTgEfo+Wg4rrb\bLW]p$hqI_Q0"M@/leq71sfE8H?@Eh1MIt*Sko9GLi?":2T1fb!P94`Hh=?d5mXdO+(oHCm5&O6XCM5
%.E.m3VmXJ*fY'NLAC\A!TO\1-ad4l/^YDpW<W1qFf>YfU\l:;K%[N(5UYU<?;*T=)ro<l:S4u'eq>[tJl`\@"NGi/bB:-O*J;gDF
%qSIePLClaiNLm-/'01?NGR15IFtQi\5&H"$Y%u+^7ZF3Q/8q;!gioFCIdOolI^fV6mS,)*<A<eoGOX0HLpkVo?i@\B^t0(.gmkn'
%h[Vqa?"g@1[ds8=k")?Ib!/ug-p4Ll0!-[PGa6U#$_'-4r<bkY<#b*o=7*^_+Ar*g6-%-7E]^I2@,1GI"7Cii[AGml5un,\QA^NX
%mqC]E?N5ImA)2'&f"\p`HOIK!nO#YCDpI+.:Z$lZCi+R6Eq#'DmH)?6aa%R_[i[f8\Fn**o45*"]!:.C0!N%Z!3l=fa7[C^hJ(h-
%1`'XM;#.\ARQDq)*]ZGk'q[Vi$[N;aY8+`t_Jk`0(r'3;?93R6pepp,-\cNt5\0kH%'!SjLA>HKCpgoXfW;4rp8A"\n`KG6NO`,9
%&'nk^j$G!!"^N0k-fbjSZr-5`j+DJ9@Zt(rImdl-7@?9ob*hhJ-he!Od\^(5p<P:l(VbB*aOQp=g>2N^pVfClpfr&hlU6XHW!5K_
%]"GTF@aA2's7R;&#rY1q"G@H&nPV^Z1$X6!@><*J5JOOHk=_hV-/1YQ?f.ILJbnLFJ<g[Kl_UL4@&UR/0CJ[Tf0A*a:Ckj9L:+][
%T76KLmbk1r``<#qdjY7!41D@X7GKm:2S/M'(MBu?;1nc=<Z@#/d9Xm;<X9QN<9E\1I'1*F8Tuhh;4c-K3T4FBm/=emQh0Y(gO!$(
%j3QBTI<=5(?UN?)m6j*IA6_?OD_/d*BGha.[uULd@ntJpB"$uhA!h&?PMSBH]333+A`f$P2ROdnbe'hp61;9kD%9h0&\aH"mkqiZ
%ld%dVo`+_qaK07<s.bo&Fjn;o>fUmo(]LZ/D+K%Od?)Bl%1Sq1`"sOJ>P#NO:IFGOcPqt#Y3T4ho:1d-GturBI6UY_B$L"B=n?+I
%L1WGKf64FDf<_&[]?mEZ=kdqtN:(J-eqQCF-.klJFL%M(q9Ws1=\Z5Nr5d)#n0PHP<n?jOSC;VeQ=cL<OR9kLRSKK%Y*nrWdt)*I
%"u:SkWl$kK3#W6<GC0YIiPGeD[ZN:dc-/3a:[U5leoE;P>CG&NnR1b2!pfLc"NSd`p];`uq68n`]DSdn[4L-cB%tPp*pbW*i]m_h
%(9&P6%daTSh"**;dC6HJDn;>o=u]49psb7@IDA@[JY&ROkD!F8q]@MP!M=]mNFB],pmTI^VL,Nf%X'_sXDU!UDBQ"tL;Pn[Fp5qo
%[MN!/B\6pb=jqIErnN7u/c==GZLEb[4^l=@lbc:3!/9kY(7lc;%tPe1Q0?;sXN>78]$cuik^[SSbA_I%FZ4(<ej16m1]Te5lMru)
%_393e/]7(`!#(B+Qs%["Otn!b:_dWj@2@=i,;T`MnA+X7Md\hl;hNs.d]DI@&pSBf2NDWh[R(DT+P-^;K5HBU=Kl]\fPJ?fE8p@I
%O:ChP*/.th4q236Lmj&Obnu+Od#8oQi5WW:fnL%'0MU1/`aB0ddLBHn#AZ\CndYB0Zu'-]")C4CL1V*l^jS"TKU9a]NmoikE_F`i
%Q:%Qg_-`YIT,UPVEGZ[1YSF#8-k,J#fFG@+l-k`5PX,2W7Lb10o530'(_l\-C!uVb-ZmPQC2cdbg.`]2fXMUR3lu<`X-[qe'*G\&
%Okn/pL.+3+RXmt2/fqQsAM)YW(c:Z<L[Sr]WL&F/YTsbD%rp7k/_h2h`>UmYoLRRldAEHl&/NttbO]#r+@'q_,1D<Q"Wi4"$2oF_
%G`G4+Tk=C+4[oee;2*:1Yf1R'A5`[d-OZ%;dD?!M7MNZ$BE<H5#mC;HJL;R]o!=o_?/[%)S-TK^&Y=rZ0f9#'GWSjNf0[c!'>"@h
%ZYa'*S^'k5>d,cOH%KoIVSKGt^2$2NLmSN^#cdsR7*]?u%g/+!]Bg_se-5U*CF?/K]+DZVOO=9Q*5N0kkTPRSlt-^U+YEmg@;EAA
%2B]1,?SJA]@Pr/=)WQO*1Ko[F_*kG%.s$7Y*TXpqS2JZ_+mdX2NCO]0EJop:-=P(n6FF:Pro%MP*bO7NdY3`mXJ-fbiY?S7"jFgk
%rVmS@i7mnVKq3\s^M'=UJ77sG0B!aco<2O>T'7oe)%M`He*\7,;4@Z?ZVf&9]#=sLW&&bEMKKP.%8^lWnc2CO1#cg"VB9TN2VUO)
%Uc(U'-<WMiH![;\OJ7BP\qqdCJds%]0m>m(>;rC<<%hkYVPCL?LP6U']:.l&=,Y"o%L=/)DRql(@j,^bIe^I)8ffek/m,2;d?h'g
%%l)NX)BrU,_bPNNOc]"kQtel*%Zutl%kp@@*5QjA62.Wu@U-$rrBM0<FNk1N00j56?sEb11::8\UcGA%\urCXZm*l]FSqYA7n![5
%,]'o7cQ+V8*(6iFi/iJU[dE&:/eT!/EG0OkTg38qPm9hu]6^O\PA[/+]#UFI*`B0O8kHC7BQe[kLm,&og_CA+5:=-1GIS+S%u]1=
%&S9<df:Xi=6pI;&%_**'dh`1MFBD90:t5MID^-Q1%MtRVRl1T-=H/<J!L3`2aH2E2/0'f&j&(A`Ca<kn66S7#,Ap.k(,$[b?H;Td
%m&![hI8l&OT*a7\VQ@9MYo$ce%0f#=S<c?o?"@aT[1rBK/'PM/)R[BfS!LEa/tP,fUqi?kRnql3K\rNH"TL54>G@P\KV?3XR?(9&
%W^r.cE3nI)DP^p64Krc#2Re5Il1"gKf+?)VD'Oc?bmph:GSmf=[d#VMU@A%p7hL,QZRoK62Z$o58/\f^dL)u,dKrQo1o3$igGD02
%;=AVd+.rmCROP2qCC81Fon-_BTf1.Opn1mL1V$(*JJN&=iRbNa-jj<c`0EGq0K,X=a<H[=0A([98i3=7JWrPS1mlMgFZQ[`=9@Xl
%8<-f(li;7$ce'Q'!;%Z+>TLLD$9I\]7QaIG=(m4L!(>hmV%$O'7'T"@XNMi\o9hP1h8hBp1#<rmc'ki-.>S2gfq]md4b>a_/0((6
%CZ-VO[R+b"TeNps;*g]<(*L:4d3Pfbf*l3Mg:RuLD$&]dQ:ib5qH:HjfIl0Ol>rX`A7<'E":.pjn0O"Z5\qZt!@Sp_g(Hdu93F'\
%Vp1qKgR)oq)$kG/Q*A821riLX)iD<2J+a:[HdKb8Kj7P)#<'DO'B&7#;jfiT?%U:+A9$l?&`X0r!4tpc.2mmnD%U0L+'R%<Cm(NC
%c,+R28>7(hf^Mj'+]8"Jp:sXCLVlG9M^Gna+pV5^iL1PRB%J2@JeJ^C$Z-rjSM_"m+pC)]GoX<@*^^SQ1H,on'=W1m89!l5iBF!E
%87%>t+g=N\%Qr"q2KGC^=E._so!P@uQj\ZU80q"<4uG1=8J=ia=N9MoDoJ.q$odFPbk@[5eNgOZP$qisk-8%olE`.G\m^E>...Gh
%L.UN6;GRj*3b]nS+#7b:4Lo!aTsLd'#BXbo:d4.U-(.9q!;qRc"AajL'V7=W(&S5[@^'Mm3N=VHKr,>EL<IZU9G0'eA/Sd4@=,)A
%&E`TI/m.tKoBMX:oLU/<`uki2o\&!8;Nn?jfF/4gKW^7@C6IV>fPj9'O(RDCB670hX0S4&:lCgn_886L_CF:L2&JjN#Pq.=>]H$R
%LH/YX',?QjBuk9FLKFb.",;RGCC<!OB"YCOL4TXbc*M+T1Sca%Q#oYnNZL>boGVm/iCj`<C_A!SZ2J?uGeSEgC?K,NBXZ8O@i^4/
%gg^I1*CA8gDIpjcp47-4ED<kFaZE#:7?eZ:'+'I`jlh8->Gr/(fOV`@XMQ=g"r)OK=$K--?k!<9J7.`=MbCnG*[7U2>J!JF-9n:M
%2sU8J"=J9hF-71mm[k.5%IblY7g&YriJA`RcUgn:prC<Chu=&Zd/^pJJ?jt1QimR#r\4ut)Q"fJnHPg4`+0L]?KDY6\LToiM$hgs
%:7)H!R6;H:;*cK3G]b8_0UN<AbSAbVeBr@[h<Ckb>uEN!Q(I2FTq7\b2OW>g%TNUm+!"Feh.Sa0_:_%7EO,RUk"pR0YV$$C>g500
%3N7kiP`J-uQSg7>ct9SQ9f!eJ'Zb'i.8*/eESF0,J[)&Kl"GC3jGPs^V[IW1;k2Il<B&">::;C;,Yr;V:C<b>Z&-hS!1J/`+GU*&
%?8i<hq:`omo2.eA72#q0:0+\H]R\j$lp1(j6nZCH/>6ucVr`hhT.N0"Z_R;GiJCKjAp6q+D0Y'%KJqbAA?EEqHO:'O>!'b0!.d/u
%je5t=7_RbQ=9dKpaMO9d.5F6N#5I1s5Pj/)Ar\-kBLM&SDG(d?GqdPrN;ohI&Agsj;8Y:YkIIHg,XM?bciaVedX$G]kW5C^(^27T
%D6t?)]o'IELY\^.OiDI+QA`1IF;+qXh6(@QgXBYb?gSe*##4j=^q`;>3jUeD,D_S;L*a:THj]G+-#G\Zb#30k8(038L63t&BTS+_
%\0h\=B#k`S`'LQBg+n9I;ZP!+5DjE,LCGugeKcX]6ScULaU*gV#[_r+TULFm79Baa`H3k_':-dImiS9@,FWiq3M,.s.>g[/!R[Es
%0ZCP1CNLj3_!39O:X_@jZIaW&%GO@tY1\^$_bs#J;_1m1BdQ)[BbDo4XnPB]A#L0VV(a1=WT!PYUef^klc9Z!(l/;?Ka6#giM3.N
%A#Q7pNb<G\OS_HOTH/(&pO`cZTDeQj0\q%NS6HZ8MN$)i/RJo%%8AfI.:TX%=II$_f$WJ$du$$o`>8o2TFI355e\4M-L[akNY5fg
%;);C`3nf#hUL)B:rOR*$_0caYdCFSeaKG1e_ro)mD4.o\9Uc-T]]*lX!M^YZQ%W"[`IO/VD/>C;ZQg5elPThML.c"V95r!<2_7!H
%6E[9;[Q1@W1o?]NfKFp/am2Ir73YFP5fEeJ1a+#IZM6":$Krtt(2L>Y-I)':8Y`<]5S,qNhfO1C$_lA;P99o5aq5X7,_0I[/?*+'
%TQcR@ShR+3c.7HmB[^F;8_YC,*UjMtM$7"89tiM"(lfu.)R]]oB)\#KAiQ9`PXhBid`-Mi:JnQ[4uEtYQ@`2%'F:-ZC'GaJTL+l"
%W1"46r9U*ZbmMLffh>2P1b;FUW<S8.Ptj[L7?rsH;lrU]Uo>[L):%=o*?$LG+^5cbA2CP)d,AO\D+g7^jr9i]6*l9iQl&*\Ou02-
%cc=Bl\\^YON:6u:&iNQO)Tn4??a_]<66gENj+JtLRmFAg[sQPriH3_AeUI-AHSQW<%b[li]5"m`6Pc`()P@uqddV'jW5ooAB>5^O
%ag3:+*6g&:)[4W#`udXlkB!ItVmb4@HE9o*NW=83Q2(Ih2,%@XNJ7[B$c%H]UVqdT`Q*(*?5>(ncl:I[%aaKkk`Q\/5O->ANG_Nn
%lqF_KB\a^6aiNRV,!E7ddtR+%-si0^NL4:'`:#F&Wfaj@5O)q6*VTYXqZJsEjd&LGhE/;8"Cc%&[1L:%WQ!f/UD$tkYDPYMH]g)L
%=jCDp8=e3:6s9C%6Et1%6"5u-SlRP"ZR-#L)Chk6PW_Ye+N&JgKI""((6d6.V4\609b`o!q5M:Yoh?khUKNe6-B46fCskVG'qF6i
%8]$Z\8gusgR*l;fB[.kH8ctn)UU4HD"_fr7U+iF;;MnE>Rp)ISdj>B$)Ch:[V(G=j=Cp(2Y^4O"8JJ>7UpT+r4/WjuUL/M6OJO8"
%'si":Ba*m[fDdbslEaX?^530P=N:$KT51S+VC;Y+fk-Jk9/[^"j\3ft^q<S&75NZE<NZ@7U*7+PgCFH070X/f_Yoj1Wc>Uee7=:O
%F?h"PA/>")S08M1%u1;Nd>:5!=No/=[/)3b&WL9EZAYl?Ut&gqHT5Ie&G_-qT0D0kGtT-0h)iQ7FNtH6!4U-@)A4PJgn<->E@Ce)
%Z\7TQ;mM9)k:%d78.lF.BTu_*E\SsIO<&qa-+VdW"bn:ZY*"Ln%"3f?bKLBc@3BKh1aja)&W>$jCBG=RS:i,pR&=`RCkgnL90aHF
%ZX$3j.[&IpF/BZC-;!Xp+r;OP,Vs_p3#_Tjcu7.+J-S\L76W+%*egO%bTU&ER$\W0g%!^2GSjNPF^(A;l=?*=kXt<fY>PS:`-k=C
%,%bbDqII2\O9d9`#XUK])pAU\5'EU##L'"f0/;Fu%2p-2Q:F+8#JCh4Tc`D,.2:e+Hso2u#_s!GCJjX=O9WYH7Or!*ARL#p)-t[h
%iI%4B^%KXJ;hW)^A8IUFXaiYh3QjZf2+0pN+e,!/&E7o^TZZ6sAW?;+csuBFY"\#YbV7`q%J)eibhaT+^t1Q$M.Z>f8]X7MB&A'S
%TP?Mn\H34:P:>`e\_UARTi74T'mtu)YR7.G0pUKfd_8OH@Weu+eBj%`X.'D*B%&_OkeuIr*\]//PV,B5/<s?T;\.!9@H/MA;G!X<
%DCcHG.q'De!&6-)\Zsd01;J4!7>(BC/VcZr%`\Qo5#4QhB'B*T926B_FCQ1<h&+&-Ta;)PlZ7*9Xi]B*<8,k+P=Xqun"$<H]p#6h
%03)mSE*B&Jg:OL:%:)**nL9S/aFi8*A[Hm5Pl7A3hCOr]@N`D>L2<jJ$dUXp/Z1D&a;-<)^8-fqG+XU8SYSP)qh"/;/I$&@&CGp!
%VQ2t<%MZ7[3D6C<5aAGb44!ml6iU3.bI][aZ6^qQ[^d6\iFKL%c*]DDb(qsbJ(-!A`S;cm(5oN$g"g3h&0tpT`g!T'!\(++-[-k+
%Nl49K[7Ok_hCb(s(FMu1*L3oH&gnPo&s2Q+:(/L)gQ%)rJ(-ko$!rSY&IfrEnBhs5'rXN)dK!M^Cq.WpnaTMA-`7=VK.IejOdo,F
%Vue]B`cC=:CO^oi$5h.pK6j^VB&bt3&MRF5i]EYaC@^nhFs.3ZK6_pg%IL.eCLGkD'8R)%:52`AHCit0lRNB9-&nq?`CjC?&I*#9
%1nS]d**^&Ua<DkQ=q*8]fYQ^,h.6T*R@$%&1ho7b$&>YC"YAd<5lE<#9rgPnStj"6g;LpkfEn;JCb"<sqA;Vk7+Kg2iRC)lJfYK?
%@4mETP(k@5q'thM1Zr&X2rTM5K;#\JmMf$+9hUMCJ'9E<)H6$W5<55H8<\[t/#bZT1Q%2'F#Utg?kfOBlV*Vt5H"Y6`fpL&oP=lO
%dWC3q3e,5.U;I@;89ttm]Pkj9Z+_pt+#A1r3&0$hNJP/TA"sLo;DoklRO<BK<lD%]fP$bBV_1Og8Y_"FN*6U'%%\IdB96D,OV8"=
%(@ee&4f/=-XLDQZ0o<-TRsr";rM'kq*s9r+DL0&VC91mq(p&hi](*K\!K%Ye5t;tp4)Ku^e%/s87'SY7pe)HH[-K'O[_jq8bQ&F?
%T+eCf<Y,'u$7FpHZbD<MAr.M#Ch;2PFiE&J"s*AsgE*tl0G?B39OO3/.?er&iVW[LSg1EW;Q,FdaL#[rFDNU\%Akpfp5V/e7JF&$
%9GV%1Yq&C.%"p.!fR.*oZe-6p3jZelF9i.G/se--:j2Mm3pOD&[Ep_u`D?b%IEW%@?(hZt>1Qc;ks["Q=k.o]=`Y;&oT/j<[i][B
%q#17#GtfKFKX'U=_'Ct+(cE^Nn;.u7-SH)H_!(Qj1M++Zq`eN9;=?^*o\brs][MXr,@7gZ&mdCl=ibq5-Xp2*/VDW6RXs6L!d;^m
%OT&+,oBpsM=.2g0]NTo4B`s0/WZ)ehcZUh$JS&;aWM02d1(Yr"I)DOrD-TiRll1)sgQ-P7.8LDR&("T\??^XX$r%Io;](8+BU!qB
%W,ZoClrV#Ui2jA?;1J'.1WGThL&M+lHb_2j407M+:aH/_+UG;r*R,9@r%R_B0%qS13TA:RKU,h;Q5*tZTKc0,$#p^.?jK3b_2W#f
%ku&XV"0!?`L&Or!oB)7T;7B/3&I\k_7>!4eGT%e-fd)O'GgD=$[':iSEX)>7'<1U%K8t9PNA0N)eRqP?OJ$J9<k>=_$H!5@)1Aff
%jDLX^S26O0E*8FVfK\S<hL$QlSMT%L,6SE[Q/V.GE`Lm;P?^t;J[tOYKk[UBDN5Qs8Y_;lpJ"S''F"umWo/$#ngnn_Q3e.A`U`G,
%8-g6%Zu/PPp.7jWO!j+-d\sp+qZ3BN:^t(-/lWJuGfcRF=,o[>\-r]$YJoKF\h5s1\ZrTu=*>$NV>CH;p#]J=\cetdFQ8Nc*VrTK
%T5Wln*baML19b)=%,jaoWs3_apui[h2fHBhieI5u-C:QEZ8BkK8%"n>&<ncjc7$?7@7r?i>0%>_`I]URC*jBNlFdF4eL*9Z?CjHa
%V,]Ug_L"oW9Us>NEWC%9.4535P`VtM$_t8(":;XErQT]X-j3%9#[o;P!Qp"M9S9\)!=I=<.0os]i*`i%6/dQ,1*h-;E_.*je=5nT
%'ZUmo1-B7+(_MnA#^@SNJg6qB8VVoc8'-RSEmGd>AFQBW-]Rtl\)11GfGGlX`H,SJKm+<B-JtSqjEFVA645q3FR-^h'biebZMAoY
%NdC.W<Tm'HXOuB^_BjD]%<;/>FX;pqU?6$4.bokh,rV_2bj6I-AH/=;H0Zn0JaS%r5q[7Cf48_.V6uLoN)EVK?'hKC-Mt;&#Li1=
%4q(H18/cHs)\5Doe1m^R$+:BqW%o^W>fJijkU)!0HR]KC7'c3k%)XN(#%upCNV`Nqr[hJ2IUE*G%k#N$(er?oCW!Ep#F!03=B\EK
%Ru'"==]0"M[ledB$uAhrPA%4tY2[EHp5Q&G[s7kfd/1\ZPf%'jqiC3Dq,CjXM`Q+1'kk0Y6VK8d[=?\T=6LB%.6e#JPZYU*-$YQ4
%"3#@@`01"0<,9CE.q?XBYIm:n-4+Z0/pZDsrd`eDU`sq6X3jE30fMtHKP@DgCt6oA-UuZ[_kG,5Q`*K@,l1VAG<YP'$#@IY0nLk[
%+>g0:@ZDDb=Oi5XX87F:P.Hl<KdK'41[oi<QV?Z$T\l7-5_1$YbeaKX`sG]$WNmVdq^KsJ)CB4CPc/$$.Oc>l8u&HiW]EMd&c2f5
%5rgDs8#;^AR"mOmStnG\VF_)5.Z?rq)LYm;f__],PUjmKd\("Wct:OWig."tiDg,`bto]7o^kt"X"YYcZ^JP$''t$I<G=LPlUpj[
%)TLZN<D<k1:Urj0Ce;bO_<<m4=_cghW#;';9QpC(:7X$%c3^8Gq8.@ak%L2URS]:]e]s)DLbAq"0[Q#+C_]*6WK"h!po[u@W+!Kd
%OZGK>*@=Qn/KSROo$uB./2ET1F#plbY"hqE\1/=r@'L-'`dNKZ![+S,@#u<s$3P%e"!Rk5&Oblb`#!5di[)O>EP)IPU[Wk+VX?b#
%Cqtk[9omE$OWt[p$YHG:EYI>8$s1YqHNZ(Ng@G&o/7+@F9M%hD)7(ulKaGPgq`m*9lj95<`DpnOWGk:Q8N"dG-/L$r)j)Cj^A_![
%Hl*:MH]0)CIE@GA6$1sW\m%apW?jt\Bg0_j,[uQ)0T<uZNAXSG9[]jAV)[TIJ?ZB/3uG5qLg86U,)db+#W2shoB%P"f?iSZZ0<Zi
%ZTNBP'PQ%)aViesk-.:DE2;)f1u9j]XEVhTn\mLSGQ#q>8JtuX[Z4nO_Qj2rFjCDi80XBOD!&q8IA79V[d@22FtI&^"W$p&Uor^:
%FE`9g%V%,K.@!_PDULB(esCDZA33]r;CV+e5No=O],on]2-0*ae<lVoXsqs_(+NehAJsdk4c@2i`8X.UX/ep,ck_/oR#q/7*O]e1
%YmpXMSoYI:%c)r\dV#"RALBDCj+nTD@n]WUGhH]ql9,JHLNXVPn+rn\3pRZ+aKiX6"$QT$5%hO.c2<f(##qtKB&RT9JrZ^L^k*cY
%Y\:\e+ZHYcgOg8TiiN84dm)ol="IML0S.4PS3n!V.Y<SFG).!_h_,-WZ"BK)n,r!CZ,U3M*BN_RpP_/mA`K=mdpQc\GMY>(@4K,]
%=/ElE+G4H`677aFp2`dA$/s?9!%3^cdP^dO]!-%6/h:gX:,N4;@2!3]</!.]FKeoD=dk^\BM%V>B$o;%c\bl3"ASoh9%CiMVCj<K
%G[EX,h"=[m5F,,XK*S/.2JJIVC0;jkHCXOr8Y?i7QMlH9kqK<[nTZ(_Xfb<l,pNR2Yl:2jF64hr#]acn5Kms:Pl.DiYG>=p%B=$X
%CC0&+6bC.C_u&Lm_2D31?.LPa8aD,q*3RU]e+k3\kTc9Ede/[$jo_>c^TrSc=.s5_qAWAE3Y<jXl=,_pb2V%?=JDcoB([kD9:$RL
%4eo%Q5[\QF1[=+?W**S;NR]2rMW:`n=@n/_#+!)%R\clSq&DG#SM\NC6.L(c.d2JPRZ:ifGQUWsS4"3%8uWgT028F3QldeX/j)hn
%U)Qf)UT4-[Yk0POoV'e[&Kj+I0"N(+RJ<YUN#pGH3\L]TM!bqr9MF$3;T)I/`K`Q'/t7S8OKLiG=W0epFb<CN$a3nD+^u$/G#+h%
%b8'^`7TE1j"!c;`1Tk8teYMg`(GaOFr3,EZ[;^am4H)6kL,l8#HpJJ81-/[*^Mce')_aU:N%m7l[K)*@/18YAV@-CWSi0etW:a>O
%%M9rn7c8)f-*r(t24LEL8>*X5eTK5D8L>gD77*`c_kd1I?PoS9FGSK_'e)IYZAJSX#?B7+.Z6]9V'%oqVgBR_$dZ_t3!"R'b0lXc
%Bl8\84PWr#lCdd1)Z#fM2&?^;/ZQ\P^>Z'>o]X>7_a5u/VhQ)SgS=g?fk1`Qe!gXMK<"1_ouFM.j+l"j(rVbWV!._nM_D<_73f]]
%.O<'$`WdK!r>OK9koWl!kG_uqA?R.ciZJr`8!^8SrPrm![+,L:dFM.\!H1&f<[MP)_.eR@Y%SpG9eRt;-DaS9GZ[[4,d[9`X4iSu
%G/f]1FB?c,HmVpN(@>,9mcTHl=K5DJ;TY*%<iRY!;C`T"9_sLHlB7;^YNh9WL4o_HWT,Ghf<Bc>([R+G\)HLT.'BW5.[;ISV/hTk
%8uM>Ig4*L7q*4\kQ1]HkSm,?&r,^Ku/1*Qo,*/sM]te)`k62Xm3\R^r!E!+7^MZnk=a[jaZS$"BluAG>C8Pb(d,sou;B$?OK/QpK
%>>oAbqA`4>h,hkBK,q<AUbK3q[Ip1edYXo^**;pGK4S(hmV7WKbOH;(a#8C:_Vo]DW6OJ+0DZZ0*4Rhu/Pi!h?1.9i*`QjC-*lRP
%>pX<]lE^&iK2*bn6ASM]IHuE5Y,VS`H.7Xfct9:E[-2u2UopVJSkfdC7hrk69k-@YD$CdU"(_)c?6cn@4\22TlraZ$lMSj4[)p:7
%C83n%*S.'%n2bS/O?Q/nHW]?oSTp0'b-NZfW)Q:2!Bo,4)gPCO(M+,*N_-BYj3EqB/J_\mQ"XHidq5;u;AEYHT-J7G3N>&D4qX#;
%%5gLddmQ2]=!$\f[N?92,e$")OG.:JSXV:#o39`2nPt!XX\o=BDY?FLa-5M!%]]7E.E,shOk/mWN?uFrTCS5s7Um9eY:3pu41Q-r
%m'qk9/U+Vej?9Y'L!0iL"!`ZI`Ri5XB(4lQg]q4o0-S#eWY(N.-^tB_SVTI+PK2I.^*Z?s$9Q/UFK,0VkmtS*%:sY.Gt@1&d!XC8
%3dA+KUI)bl2:cTB.husK4V3.L*OaJ_V^fTQ>kTL(akoUR^bo-Uh7'4/3]G4c$h>)g9"AUeYS(P]iWO=b(hj"Un4u"Ec9P#fKI#C`
%b;]3%%-H`s>`>nu,*o+AS.#2K#R_MKl#,8:NNtS(@`q1WBTqFj7*AQ(PkWkn//;V*16YHV!hFTH,oA"L_6kHS+WjZ@lPd=t6Q`jY
%ICuUH\#8cl!fb[qTipQ3=1Y9ReE^T:5%7caItl!i8R&;GNe5P3H<A)($p.+G;U,t)KK[:JGH+>r-!1lK],8`1"EJsDMOZ`;XcBW5
%T.c7KZ$`1Ws$RI!Y.HOfaLL`f0f(FdMFI\hG#XTRoX&:0]@t(.VXi@AqY-(5lPrp$((W&Q!B"&Ceft#)UZ@`V8$3O22$Q6<%-*K%
%cb[Y):phIk6B_KAa=RR+fAri'*5)3n*AQD@(*R]0GtnG,SSH"CFA8%\##!$'N!92j8i](_jb.1":Z@;HWm[e:\TX?2;l5YmU?duP
%P+`_FW=TiALR92$(FE4Aj2dcp,%3!b?+ri?EaqtjaRKuA6m!U6`eZ20i\q#C8\-]^_&+a5MK]2j<mbp'P`E0UaeJu4/Lcs#6j+1,
%>b"J)oKu7!^qRQO*&t_eOTu<aCBT4kr%eu%07SODnFL!0'DssMTj[&jUk4#EM-+F]It:i9-[pn[W%d^skbYJsnF(U=aMh@#[`OC,
%]d6&J$3`&=BQUsdXot_jSr/-Ir?N"P=G9g+6cc#M$"FI'b?Ssm>g6,''JMM&0h/Tin89H/001:[c,Lq8XQ8DONJ;Za>cKo&866<0
%2Gb?f2#6>I9.sj3-6VrX;&/&Cq*ti9?DF5(`'*4`=5IXln$/soa(n-oE.lu.L[7pW^;b=2VA,+^fu4XF+ujrOdH5dM1_UVhU6<o/
%BXi!S&Hdg?*9j"-gecET#s>kI_TuW<jVZT[lVpUnDclOe%8E7WBHj*^(7P^b-\L?elAuHB^.&>>L]%l5+#.l7*j3K@3'TbH4euTX
%"Z'UR>b-oQ12%8,8lrT?9n?N/%q1qsmf;=FaK;Ehk(%KV`6cKDQ8&?;!Q:4;T"o!Y9)tE<@sCt>*T`E!KWd%;`IDtto<KAkZI-'R
%GoNn8on[;.Lq-n[#%!-1IjsPG,g8J^!%h8W^4rHI&:@Th`T3pP%EYGe0l`1)&[LgU3>T729>t&4*Z\tsfL5B]BM]&2?-6+tYgJEk
%+A2\+,6eYd%a%[;nC<atBA*t+AqBAZFX)&lW#(iR-BTQll:Ohs;4DMr_rPQ1QSPSnR>A]?FA>rRL`s^*k9e6$`U"iUnbtBbdoa5D
%]L?LUbC_tqO`E9=6.EaG;-\4#;"+SA1ccHGLb&4!L*ss_aXrc3s+g\D(VRum"cCJ:GkCKt_fTh=Tm00Gp>oFG?8I>T#XNT'4SGp&
%WBpFjY\2)R\]T2LAHaNshDb7d@InS\8>6KI1A2#8%&pM%1??/!X]aolTo2Hd3@k`7->/lF3\JNG%"Al-lH.4B),pgU5RFFD$1j2n
%5R51>oI-03C;\Z!=d-2?JUNV-'b_$FGB`ihW_;GFjX79[6S&r$E#&1@>3D`@C+t>+jl3'>N#G#i?7*VEE0T%p&A"Si,;s"K-CIJb
%Fn?<E.01ph+DZuC99*RnRm<^r3k24<]GC*r.DhW0rJ9E"@ug:Z?D&G1>fG:h>s+A@N[)*&lmTbB4"]0G?M2bmrePFN(">oPI(5D<
%fpMER;iaCIs84*r%t1#bjYpm3=6^n.l"s%AHd>dY[2\tm0gAr`(rt+DPDU4":VJp_"rda6im`i/!.I]X:J4s$r<jGsKU<Co%i+n(
%=,<eHZP]p<9(>7BZ,+a&Bd#5tX02R@R"Rr##KN,;J,G\B-5e=McP$hcj!*NmJ,W:IkU@fL<<B+U6]Ps_>W([s3g_VH3fHFEi`q?g
%>e,8?^.(M-r73>-)&a&'K2LfEKlNNpfgcGl?&P@Wr6Q4u]\AnG)fdbB?NcU\MQbm6`TIHqUhJGIUL$UcjK/i*1ZW,j34m0)[H#E?
%@LtS7rXf6gH4uT)?u9(M&K%+&W!PX\`!;)e=bp2D9gWFM@TSDG@D+##I0=DApec"[BJ33Tj"*H<9-[mE&HbQ2^Fp?PV#h3Y<'S`l
%(W\QbfJ.ag#/H^9BFeB@=%teRP)9<X-9p6UUUn;\Bejr\fU$64P85ie*"?7u6l\M?`&MLPd3WCaW(59>*1K>$4k-;7'k7,TE\m4V
%W?`fA9uV("WO$asP:>apEL8+f!MahU(n<3SV@)RH/E\U6i>!AX&e]Aa-lDd&,l<OK1Mm#WOuYqI>C6rF-fhNC`_p5%%/a!!El.01
%^]TSRZ;[Z)K+q4e6_jOoO=VRgA"rJYbk+>'iM@aQ;\Iqc>g`&+',P`#`:Y7>Alo%ZTpJ+!\G]?e(c3ck7h=%q2C$[_f]7I,3Y7W&
%iq/a![:.`Sj^E0l8"GI8>ji//leo9$hD#GNL>!VR8Wk3GrrPXu+^-=\`@`<rI>Z+mf&fX2jS0^Ja)iYJF`@`h/'-qi@-n,O,Ps%=
%IAWKGW6+R>H`1<Cdp:d.NuBQV`P(ebW@dR%Tc,6_B8B=lobMgK$1DRYgDq`*+!RVuGo3&j-,=D<\RMDREC^kLQHPmHbs,Y;0kA/^
%Khbaol"%VC.'JpK3qZ3O<UN:Ce5O?h"q-+.<-l0/R3W!M[ANb9&h5JndlJn<e!?ekT(tkbTOXu!2;D3P;j,t!#GESHO,R+=>s+f8
%4*1YR'#ce*ja%b,%B^r#G$^u`.?hW4]9WcPNu1((i[=gGQh75)9gkD>PoaOG;!%sB'(Bas&FIiZB6$8Rj<QVrRc8D(86ht/fpo99
%WjV-G49)5k<0,e-!hG<r\2lE0NR_T=WY)N!9.5M*;AF+&UeT-?%,4@)G!n^ZHQep"HtWRb](X?3@bAmY[hdH^6e@!b]^SHT&q2'n
%9E#.6,>/o'k](%024lL!_k=U%&#!`)mSKao.>N0#ZZ#\;_riOAKXJU<H(,^>Uhmt)G<dN%`^1t^WQQfHQa/t"Q\sAeO:SmrZJ^q!
%Z>*FsQrDEZ"&+GFR")IC\l>&(B:P`;FW<A]jN2KX"WZWIk[cqeI<_=<<;o&ir@gZC3i?Od\di@lOm=Uk?'E<tlG'*Y,QR`)+#//3
%aqCF/1!QUC%OY=Md>.7'f2DrIe_E$%%O)B<J9Y^W!h1$<&qQ$dd`(<<!Ab3+P0BWC+UJMn0n`M`S&Uf,a#27o3L,F@Q#tQE*%.70
%L.,a[DCu%TM+8N6]U@6[`,eZ3[,ec+!(3A%hIrb,B&E5*"qMueAqt,r&e>[)U=^Po9&qKA/s6Z:57h^S,=Me/6m&ff(%X1[(+O%Q
%9"]dca+[h*EMJUicN6QFTs%pGW'bo0CP"lA/@7!?Xh#@(i8BE$`X'c;`P%'+#Wu/uY-I\W\(_$MZ,WlBY"EZ9AA[[X#1(/A@qea/
%(."<@5SYe3\\cOn]-;PmW7@"C[jn8qq(;C,K]H$5+atY9L7rh7;e@8):!-Sd!_*SA?+_9m\&8kc'>W;$`TS+na7.4WgH1E9M^mYi
%Yr7-_fU0Xn?g@Eo8<q(hR)?(AHKtkd+CY6]"%`/5.(FucNiA<oj[14WjSY^A!PF3V;:NRI8.dN0;4J4=;B.W8_RqJCD"a^+A(.JN
%":Y0K'':8jJ?HO"60U_#a2IL4:NE&sNX3fY6rmc@!$5^fnsWkG^-k6.+bkP%p(nA?MP]NG;1/qtj2:KL780(sUu94q5S.QEhkVi9
%WCdnf&1b?i37Ne..jmI4l;;1.EFK_m:;.kXk:#HEqrdR!!)ITI9XnZj78G%i.RO\Vh$i`XW'0k-PU'=]kY.#;![Fkj$HKVCjCN!s
%r>.oT;mHc_CrpH^=0tX"A[J\0n?>6AAP8aC"tSf;'3f`[aPO>#GRS5+TsZF+'jh=#Pf.3P>F+&!'CRZM!l&SBHf@$57aD3HnddcQ
%f#4uADh-kZ2F+Ds)3W1UC31X"OD:)jpTV@nHX'j3fcjL3cpK`'b&Vf=S`5hZ;0Rh#dL19si]$"_a=BeZr04KrCbB:[9o_j&``JU6
%\p?s:j&&A('MX,8j^<IeF!^.7Sd1sb)UA<TQmG#(_fn4K>L8)-R<%F"7Q<4/a,4;k/%-tC%mqBbQXUQ&.8rhZAWZ_]ceXk&"PdNh
%<WAm0HWT#AE2g"C+n]4+Si&H:Gn\%"f45[N9P,]J'D5[<!+oPX`ZS<+[p;Rq2&5;[V+Lc#WJHh!jN\WFY[LLDPJik2DNdB<Ke4&A
%>kWh+Q^F8ras:r*5-UrR*)"_g_]2'\2MkBRj_;S"ISNQ&VuD5bmYb2B'l8EM<AN"!\D'XO_B]t&*\5)e\k1Lu:jjSGMAo$uOH16m
%B]Ss8%.bbrMo_eaYM&_L>!k&=:krO,(6)_OMb9_^qQ*FgQG;kYVXigc3`&J99,lk!_.s_$XW4L]:T:'H,I8.KXe[DL(Z&Tjq/Lb,
%[ROiKMnP!NV%ad;,Y&JcMm+9UidS%`4o%!8QoBUUg?BM#3f(aQ`cMC4r6P`tZH/5&=3TrG0&9!%Og@3LNN]AW&Q^]P'r3$;MGs'J
%J=78JE0<+/Y69-6k)T((Y?W3`9)om*CK(ZX?h^fFQ07RnkD%V(\VaN&+\RSKFk)cp'@ibP2Ue"V`*9H('sYVfiq020$550'/g!N>
%$>g*SRjcZ)0AYi>^"6+1SX@pE<kPV6YnQVL=JG]#l)$Pk4c)AlLQiK>3Q]$&,F%EkO/W8srZsUf2#2Vl.JWQhd0^BQ9@Q91Unnmm
%S<dVtB7>PHn8*Q1C2e]1U74IEmaieTIjs@4;]]&RB;^O9JZaql3,J,n\j!ln79`-'8_AX6dTT%uT#!V_UeqA3rR]pGEXR]G/1)e\
%G'2mf,,6ilmS$YpF/sBtnumirj@H[9FIJ#2:8b3&2UbJD>gJP4"Pm";*3RXn`pc0XTjlsX:]iOR$DoF/%<1tuPp:ug`L+GVl$NX8
%+!'=a@Gi28]ZrCPM]<!Z#Ens#0PV0`kp*WP`.k7JInECH<t\.snRIW8,<d,S[\_b?BF]=1e&)BWVoRSB)!p8`4Rs149g3Uej=+i`
%IG]1bN,V@_V6W5%R1)5X^LJEr"@b4e[,HgP](D^ST:j3u!E@4K"N<L&=IZ[J;1iQ*q_0R=$q!8_)hFPH=B/'?5D\9tq_/jZ$o8a)
%fG^6aXsU,ZjF,s!21;W1_9S=mi:SpL]sW@dOTXg)dug$0\u1F>6(&!!7gTeZC;p!bB_dR9MLaYjIlqS//P%ta3c:>XJHhpGago,r
%s7]5OC?Y0[!2]e0d#=Au2=Y1u*AT!QMcQ2YCcc'?(W-kH0uP'MqdgK:_1^#d_Vg*NlFKk/4_anX6g2^Q+-HePaZl#)m%C)9o&M%8
%-f!eN[hC(D;L5ul7]9fX@31:VF_07nV'uH/L2P36"cOA<aKal2I,e)7of2C\+lq"$XmTa3KG)9IBLH@M4@m1\Jd"LF'Upc>/'"5J
%;H/O49[`R."qVGa>p[fAh`@ojh/DMNikb[tTR`YU7ZBMm6e(5m]Vm).nUF>5%sVTp!F;Z-(d=[)7mp:Yb*B2];1j\06tRjGm>'Bn
%\p?Bl<sA"@ro8o8LM[6U=bW24>[PU!6^*uWSs9.LJKb++CT7-rZ1"02j8_5uqE;r"?i^/,j0P\.Pc[A-8TK@)AVHT)*MuH=?E!g,
%au$sbasrg0!YD*N\71(:/7?sMioNKbZ`mV_W/YPp.TPmcWs)E&Q/-)ZJ@lT2M^Y`9W,Y6:%#0W+kj)*3-`VPTfAs_>,HMdT04<i`
%3\#rCG:cYZnL83&#QU)5[pl<^XL]=O)sU`@g4[[c4@<D0"5IHBkA1"gV>0m4&l4iO1.eg5)EpkA#?/H?-18klANSQQlfhg5:qE!F
%lA-CVmJH08%=2qqo>.43(AI*OUWVCl%f@``gGf/R+`p`?(47Z<Z-m<BSukW,pu/mh=,Pm@8gHdu'W5nmW<2!u/JW[):"%`E4JL2"
%V6T_i5@XC9JWd?H0tgHk6b;$i"@q"gCm,M9`+tA*b[%cU8/I;rff,-#"Ta_#MS'pK.?d>LTcZ="qA1i+&:J!Q30bt&KhIYl'bH.r
%(ONS_i':d*]UFB4A&Y"68^V%gNt0?ne@R-rfG>En0`D#)mbN1@8'WX$G6.@YnjS';N+<,1A41N(8_"ltNANcX\\NheUS(1mghuo.
%1U;DXp$[\%nca<%bc75'4=*6@-$ZqP_-gN^bPKf$qu(7AjGtR=)c!dF0T,Ln6:I5k^gi6jaeSuJ@k93Dq\;QCj:*)6jVTCU(131h
%:C7+M*Ou%]-Mp<X91tmr#V0K0dt)UJ=;2Gc)0`&4lJQFu*">A@3JPeY^A<MXZ7C5?htm0?D\$/ri_#_EJ`\LoaK6O8:P$>7US5]O
%mkM9h?k6:1nQ+lpTWHljUR$)2R"2>a-gl`*nbGECL@B/Zp/TZ>7[mlK"^Yi9Xs1cWY3H2&^XA!u/!meN@?[U!Q3$-m[cOVVK=9JN
%S?BkbI/`'Y?`]HA@5l5"]_'B@Uk8>?nHESq0-nSlERsI.a%-=DA(6nJ2C0^O+n'=<N$YRVetHWpkMQ5m#a^M_`MFq#i.*S>\M\?&
%33T>,`\=7l@K^"<<&a;I3shHJU6V9@QTE_"f!Op$a62@ZL*^[6Fl+7Oa+VX2\4Jd'Ds]IC7f%kQ(4*Brg8&"!OEJ(qcsq-c2[m)c
%,VlL"PE-`oq\=m&'e(U>^r?mQTO^EP89ao^*9c*c>]fOO@umGo]QMES3+Y;_].IX9;3B=BB7i<gi:^7=5V^^eKrnCp>fU`G&jkD\
%(;HR=l8a.')_Jm12tYULCV.0,QteAj=p^5&_p`OQ4k.6n!9QI2_S-gnL':9aDM<pd>]DZY.6E+n0X[8re?/'pboe0&#4&M6XjU:g
%a&4t_jS?975\lAE]Ggr.LN@^;d)f\`*Hof-1fBKJ/D^;oh+'ijBr^u=UXbBtDk4P/N0?&'O$a0?reRt*i6!=Xqhsj*=@[5/Bb,a<
%,W'dK19lf7SVn&'C9s9*d4C2s-/"#;4T>%WlF[Y"auX@`dRg:!>$UoYeKg\ZE9?$GArIs!\'%M(AACi7X1\MIR6uS`.gbE^m(hH+
%2"s$Y33B`/aNcIrWaE#mqdE@-1g%R+3-?"6oa!"V?3EbeRnMQ[TY<Gl*;91"]AIN68iKii,^Y>0$oJk]YbiI.Fc+"@PmO9gVrF5b
%Cr,@sA>`oYBXHrjVBlLpYQUC54Zrc<0A(i*A.stkg6V1sM7oo):gZP@ERZ1U9L%U6"H^D"-b>T`+OJiR*QC0R=`Pp5A-D]&oXj"!
%:'&hB7Ecgq;tSH7H>FmI,,4FN.Ft72]-TUY?G3l^RDlH*=O$@N\!g3kk.nkUSq$VVQ6>.c&AAEpr-I&_8hFRCpaXuPPMpN_5'EI$
%$gB(g_uZlb+sn#S9p#R%.d#B7]3fOq"o@<>Vb%cu6S;UD4.R4)B%PB@6dj9fA8N;(DSbASA<ZS"BXR"<QdjKXAg';&_!S>XOmggT
%]bb$^'Y80\XKH+GP`[>?1>7)g]L:VQ:#T]X6<?G!]$J>,K,^L`-Ua"9\GI#ae3er=<f"oA!c9Yq/,\TTquM5%/]1KQ4R#md/>Ed5
%k__sAelT?G"Es1Rcsm=KI`9U\6JqsC=f5FI,SdDK8psES/9ELdIQc$kM<Cn-,_AEW7^0jZI!(q(MW:D18if08hA?)p@g+<b,hP!5
%kOD-EZ\9)+&U-S#f:`WX%$7pFC3nBLW4&gb4(N`+'-)f9\K@K*OTUIdN3ISXSjCd)g<1ER)_l=>Qk*:SQ#sD>CFLmF*`B!QWe3*S
%@q(^3e\`p&d2F;G:`)hST*eJ#6j;1XJP)l_lu$4YhAFQhEXtFW:dIrdM@)+-H57s?-=FMFa`aBG,jQHFo5Re;)RUSs=k%F'h$pP:
%-WO"Y9(Cl)X;7Y)\%!0)b2dE->X_!XkCnXhSZ91$W+=]cmof7VN'-_E_6ocNG!W[W,'NM,^2E;ojObB#3*.hRn?O$,E:D%?_DR1m
%6!$FG+b:7XOPO;I+fpC_i(AHN)jar'?;hs^f*G"3[>Hh9Sp$d,(e__Warle-SZ,8>?nfg6`+?:Ll4rSlr?&d67[V[5Uc[OgK6emi
%<9u,I;PBp.(`Gu(;GeK58.t`mL86MR^lea#V4X7+S_?P6-A?ZL0OW!^aukM!WHiu\2kkI,$72<h@f7Fo=!S)V+6S[&XBq4h^+JVM
%E%ZAb9G&.J5IW4`Xq>A,-cqBs)[e/f>B%s@;bb%Q7<b%HJQY?Aqc97T`e)_7g8`d!:t1/7pO[sbl]u<'WgrYT@!)5R?Gt;J$MofM
%TgaRDK?WF*LM0##DX\'".U]V[X@?*3\7S8\1fRr_@0;N!D2_Z>JmkDn<D;Oo[dj<8SH((*LYNs-BcjAh-pc#\!6Q!eB0aYk5`$@P
%M,Q/W]CW"c8M5(CehfgsY+u?TjsB:Q#Qc7'QLYN&mMiRI"@tOoOn)aDNBO,u6j&.fHW$XNI;@EM5W+D,<QG7->XU>=2*]/W0Psbo
%]70(R-7;>GD:\-9I9HYZCpZlfY1KZg]s)kK3(V/BE;gcK9Q-T1,:VD2M*F`d%H6<jK0,;eX+G$*)k?hW.PB8tW1BUH+C#T#*^tE8
%mV+L)6p'8$FhD$u[P>&!&Lnu]>BikA%B@E.YZ%P1,Y=\+Zu%%(eMbEk)QH]2A3P)EeJt)ZBTX;'lNaTJf0@5tWKfH.^>Y*$2Sp*3
%[fi+6gBjlfCN1*klt&6Oeg[HV49XXh+E<pV5?]N*[4CEWV81ak+[l4T21h;NXV022>ZiG%NsdILrV`S#K&9p=/SO(jH9hWDY8H'm
%n=%2<(KM!;F^a+apK(D@&(V)8mDAZjC'C9%j8*)pgCPD.(eYS"j1hN(%sO#6+h94gRiITYMT8M)R6,3VL]*gJ*ZE\mh?#s41RT=,
%lY9HS(=g->(*MJ3Zo$RC8E\N69K\;&3M[D2B!#-r1^%op;BM*JRWUb"hfI4sgL&>`&_&>uM0J_^8a5jeH5tRaHu%D$52[c!Ac?_D
%nj\<[UOr<7c=jNpWpOApd0A:Gj6qH5e5n-nQI2Bka?7"T3;6h%C=>65%dPeK5'<f-K`!MZ9=^*uX^`"Ob)&0j%\34,9OjZ:i:^6r
%JIQ"dZH:=p]'O'*.^eG:_l<oUi't3pA)[5GNTqZ7Y434A'EgJ1Y't#He!'XBFaX,S0:88sUu]DVBQ\A!OonA='cabeR@ng1SV,En
%Pq+P#lYP*^$;e`jR:XbRc;%K7!/P':j4!IG4X*(T[$u1<lhtk"rDN5iO*HQ[=R7')(NY6h*']?T%>?WLfT_A[!H1>3DJ(\K8f^!4
%q^YE=GQA<!Sl.kWMCpkd>rm!,T$DMFB:10OFuZ6VIPA,4Q;7YJgI@cgf.kbfa>H!O`t$o(MIZ-8+Z(o8nQ/tfa[EG@XJIr^Ko$b&
%;KAbuBd7+\Cbrq.k3K(J#13e_f.]O[Urk`Fr66mNrFCP>:B=m5^dUTL&K64km;+(W+b=&GJZb.LAj5A*1siP*/cSSV4lm<UmAIhC
%c_(4I0,R\M78hC!UdN?]@*TeE9Yi._&d]CuqLkE7)TkkJ&+G=VTS$Q91?T^m=&B@PdLqP\Ylf2GdV4YL>7r6NR1@:,,emqo"T@Mo
%SqM3%q_&&f9MO@i0WZ":%MY2"/Ruj`OTj9\&"QWs7irh&]04UE*fpi'Ha+<9&u2k`UXN])-+pqBUA1;9Dho$;aH;WiHqLZ-,-Mek
%HeRfV/TNQJn]Bh[IR+6[.`@,E\<s)YUH2>BXY;PQ0[cMr\%]ij@+Z3KWco<p40#<lN*G;<Jf%1[[ACpiO,q&(MO'(!6N88lRfY7.
%0L&a5Wm@P"6<A,V"Ss)o[*uU:#=l&UaZT0bi7l:AOd\s`<0kXq4[/o>:KYIR@83kH*U;,p!,D6W:^c^UUr7ksS.(]OXEEG2PC%R4
%o6i6aKD3WBM"PfGDNBjmrT/)":1^J"_A9CUB5LV%$pQ.%'iTGH;/$AG>3Z_IB'uH[80df@#SK?g4-_fGZ/bHEI`$GkAO4tVKmtS^
%ltMKWTr19KBXeWe2SH&ChS8%ji-?O1&4mYs6e5;)h(-e,a<f:\,3gNr\G[.@FJ^s-I.W:077+N>UfP^i!cI](-#uL:XEVspYWs8J
%?q-\WK#lP:K1KVIJl>J8'smD$4T=ab"B,T8Ys_T&_^FpcP!_b@n\JllMEuq6rp!_0Yg6NRLl>#/olnA^j/<4UpS*F;(<o&-_!U$`
%7UWR1%5(d4IDFH#@A%d63:?]JR&8@3e&^4[!``D,ZC=6d,-\&5PGY:e?qNF!+8cU=KYi>^Vie\cY;V+O1^2E/A[.Nk8'Yk_qGtp<
%0H%qSQlI./XeF:\/_EpOTH$)[^^n1(8?Cs<VQ\]C(Ki,Y0A\$h<REen$YKpDC56t5=7i15[#RH5pfPRfAXSe_RWgMm3!Odl@PuI'
%Xc=F3r=t*l3e5$RN`PFG47j6?:/j1K'9k-@_Negj(pLQn!$aWNh-96d+YO%(Zj><Q6cefYq00U4Co&4W*SWlpjN&Z$;j^rP(0bro
%Z4f:W<n#SM5m`=WlcBBe,5Bl-mL\*k\`^:/h#7n$n'&!ZR'77LZr6&S#6CYog]l3>&_C;LY'$%L!*`\BTNHA6=3S_/;BV4`'7tDu
%m+Xat1$uD2/0BLt]YdF>fX$-I.oWg8>;6l\'WqS+(`Si`NQ>$mS(.k?.V4@=AJ'97o(^sHE/l2hnPn!Gp2>J?QVo7<5R:,E6MbPR
%0)j91hX^2"LER$HMI8Nb]_*aD(13K%j7D_g6S'sGPM3O'E&"\poR;]J2eY%15`s0rNZuED,a+E;lsh_BieY'emY=E$EU^l!juqtE
%mB;no;hsiJNc2Vjf[GW/+:h.E#Mb\hN)'Q4*._L5:DIo@l/uWQ5f0&`=b3@oZ&'hK\G[-mZ,O)CO9sGF(.iSgN#"[ZR^&-$<JuGK
%ga^&Y%>[K:;RccITdZtR9n:Us-AC.r@TX,$^]!ifLj?kC?A<^@5nQE.10'_#TQ%oH[@P.I]"6i_(4#dn[G#h<S!I^sRSL`Z4D`%J
%h#3,OHAr>FgNNpa+unFG3O1Cb+8LSM=2qAMCt0.T\>don[iU<"e'/_0T^nSgV8qcVrIQ3'Kt,sqhB%:YG7;\]"Umtl&"mhajT)d:
%T6hIXKSUJTM@?DaCU.TSMEl-t0N"&"fR_daYm5b$E=\F:]OG+e"-`e7,o+U_mB'aZ'5a6`-8D>f+HC$6k[hP">87,F1.mTJ\:'gk
%,(rg=;%W'2<ch/O#g+*&$7o[a@VG*/RVl0#Hq.BM!1q0+9YHn&EmF5`8]_-i-dTR+%EI,ei;iQW.4f"dfesY2EMoaj]F]!=g3uSe
%"lb^:Grh=j3:_dWA'"mKqMpaLh#3,W^)$GW8d'`h"9I7(Si@_NL7WLi99O19Vlpc:Y])+s1K0/mqd9CB,6jhWdaKSi^\nUIeB)M;
%@5opF/NB44#YI/U.X5Wm6'!%^R2dM4R*hp"q61O@S7q,*f-hb)H2d2L3(8+%Z09,af;GSd?prF)KVPFHn2bI;T%H8Zs!P2An0Z/l
%K$C9MJN(lE@Q(p+kMQ8nK2)V_Hb)ZQVjSs>@#7R/#&U?CSZ",XPnGdme4AT;r2pm"QF7_AeGcI_NhW71&s"'CpD*FV"(1p!a5<um
%rq^Qrn,DG[^\df\mskAX?iJIiIe3GdqWC*4db932@>0X\5@F4f^W?8$_hT*G5Q9Qtr9P6;pfAP$IM!OlfDkVi+9.D:rD+O7_hVTH
%pHPP6]Ck=dpu*%(rnB8W\)+gtj_a19&&6,6rpe<hjo55W\>\B(IpW0Jhq)XnrfDjFJ+qp:r7BoFn%Ms)p^c[@ZZL#N/J?F0BgC]]
%$*9/fe-[(*&Jk]&$"U;UZ%OW$<WUT^0up(:W#<F:SBKt1!K5rVD-@aA@L5/bKXk_*T)Rq]>WiV+=cO\/:3Dt)NHFh_e*#ZBX39RG
%KL0PfS3nIjmM`YCYhOKXQ8c:ia/F&En@8pH[5OJ,5Y_fhLL@cq$k21t4c]$:r>Ha.j"/mc#!c8AFk6);F(ftn??P-1lZ[`pAMAuo
%DsG>E>I!m1<XtI7:K1gqddOEdc;mHn1+)<n0Ls#]TkVM5;;gP9RfV&kAV\,Mp2Sp!n//*nR#cMdOKd]@Kh#`Ak+HWK8Od\4Jn_p,
%pt$312S>9@a',!Y+G0q%gs\g)i\\gF-Ved!+;(52eg(0A(f416N.8eT;22s>P!F>81\DScV.J33d!&`=gdMX!KU20B%J+$<PU=_?
%j[4sKhrpp.f49UWP8FX`_e0rJV:i4fZI",i=K9FY4@G]G(l)g]KiM^uFffQKr+9(P(SK^cO21DHBb*mG+AEo-(F[W^NJjondN4Yk
%1p`mWCcD\&]R3<4-B!Ta!8U+D<`1LXSN%`ECee!XI5;m"Ab"B38eU[kC:8[-(VrM)#M!E8L1GreB<cq,^'"gYQ9g[h9c7%Jg!nC;
%-Mg)n.sWsS4&f2L'HP'<8l7CUe"#d'1<D/8iB58*0p!XmAQL$98rchjAhHi#lc4pnHo3de7Y<RlbT8MY0^.8gf_%YA<jE!*Qu(<u
%K2DAQN\[F[%j1B>!3biWkGR3a^&IdCs7pjT^\QU!V6>p:?i'2(i6%D,#X&.Sn`rhT+(+?MmnX5_!BPWjDAmP$df_oI83@_;i%>(V
%^j4dDVRE(4!35h!l]fD*Uh9jd=m0_\C`(?c9f4oZ?\$pG)On6F]I+1??nfo7D#Go>CBObbS&l:BLmu]u&aNi=E@i0cMUF>I>LajH
%n2T15WK%Tg#D-'*L.18E/Wdqu["8+[5R-`$nRE'OfmN-('eAo:]0clC;@?KqpWS^ESL1+oKrSS_-qV!,6bm'&mmljX==n-Y%8jDk
%EnDN,hBj$a+bR&(#ecWNM0MW6\^9P\MZeiWC6kR>GbW+H4=A`0:I]m]_-'D>#>.:p##J=T/*=nj_%5=!cps7RQIs%=YR+HWq&p'h
%#!bgmD_]7jUUcfshir0U;l:lc-n,!);?Nt)%s!MaKFB#A!-HINiHU%T3AXfJc=<+4A!\m$mXsdt2_kT%jYZ30&"]3!VX8/<!)1-3
%':8o#UG`>=X#;h#?c@En3#d/")`<)=eej`6DHJ*_M<)'YVY"dSnqC7On`iGa.Xk'tOkP?8j.gTm(JuBS?nb)6oJ#$hk'\eZKZQ?D
%M2sP1B/$?JB-LRl(mANk!osZS-<lZ2!9;#%)R`__f"!=3$<e8O7EW\O3=pRq/7V]E!=1BZEbhhUS)m?u^Za#bT[RCo0r;C@OJgd%
%KH/k\Jc@2%*4;?k$S^8d,%lE/CB7Gp&I*2Xe?rc3iKg=/$$)SFm!5h^oN,,r9$T9"[qkp;g<X=]DskQYEfNI]6le^_0JLJ!Uqb*J
%(l933$[\8t(89[-*,uaD%6m=u:<V]_lP'&''E_p!j%3[]6(Z">P2ak[M8>0\aG@qD)8DRa`&!k*M=LOU0b(NC_%0\Y%8_Qh&UbPR
%MiCUC$a[U\QLcAuFO=8!J[0qGEg.((Egp25#?j=TeI(,0V/Pb2(pC'2X_!3sUW]Z22Z$VpL#g=$%<;aH)R0'rWoN%q&3MsKrI@lk
%4UlV$R0U*0)EDeXD\8PAMdni$X6c78dAdBLK"6<`&Ha$[(<94@A-g+J.bD.SLWmn<$\Ep?193M4f3D$,/([4F<a4uOpFitb_P#P5
%_5riq-iSke.BcUdhAQk/-Y&=S!XiV3m4[2s=hORY_AKeP,A.jZ4Pb#uKo6[G#YgQ^1E-D2CjFU.=lMX&o#E0"VuO/R#^YJPkp#jX
%%qId9ZRr`&jQOssaMi8:THFBa-$BTkP/2?%Og%/I<N\CNFTtcVLkeP.=.0L5-XEV@LFo&G&TX)Yq&?tD9.Nqe:=pTGEbjLW5&ket
%:M*=$H#r@d4FMq\L10V43pjeF5jg3DXk=:acL?)lLih;A-\1"4p<RY"7T*:XbAJtcR6I(^fXNr1+I@#'+F@pmUjGs(:M0g[B<$ed
%k[$(/0t@!XW2-+9fV)COd^BQ<L`pE\Q7Z$^cSiSPfUE1hT_K4aD+_1cb(<5A1'iLt_D91*@^DYpo94G68sLh"/43/mfZ'0nfuCL*
%)`AK^..+3l?Guj+ZdWP!P0fBu!ZJTOZNa$+`ZR)dZhQ+l'*?miCeK-eILXug3?h0lK`5-?O^#Ca&'/]!V(^510!5b_J]2E0(Nd,4
%^4OirWqZ,d![`e'J;aT7G_2Pg,M3E0PBr8#emYqE(%"Ug'sNA=OtHd2AZ8"jc.5#t`fn(F`I2`dNj?#>Z!'^*/W5.k?gGn7?dg/>
%<oECHA-]J!1@DFnR;$Z5.q[lQb[.g;O&UW\('I?]kCeC:#QoR43$D][HD+m6DSn>7CCPKU8GF(0)WHXVb)HYraZ.js2o9$0Z'J"H
%"U"FsNI(?DB_U+EdAj:`Q:_L+/!dJ+9'`QX9F\C6h/Yh9D2+lRb?ZLu(lYf!?s%D.>?3O'.l/%*YWN"WGB;\`36N#K"1CWV/Iih>
%l"!g$8e<CZa8h&Caa'rV=l\eIT$)0)@Q!Jld3d[G<A\-$/rQ!321Dsf+4Z.Sr#O.rC,38i9S1[/W!=$Q[&G,@hbU.YQd^@D.]a`G
%WEH0KAZnSYi50Ak\Ae(:21Bs^a%"/4_Of#E?eMj?^kI3+YQ+OGNLsS3]@"Ejh&DR@df,41Y3b*ArM;ZIC^SMWiqW>7I@P*O_G3k#
%N%968R6%M;k%5rcH9^T]TAS&lo*]n+#4U'Dr_iu!;&@gE,q&N_&PUH'!04l>=6m9e.kJ$E7Q"$'NG,We]tGaj$ATN37r#^khSG:0
%79QO)OuZ@l(XY:@!,Y$jZ8/*5ID2ltEomk1q"a"+/!nn;Lt@X1!L.;=,cX(^HOqWWBr5<"-\:)XS7Z#[->mdu#2k--f/23(Aqk<V
%GM@"H`fdTm&FAg(&Ud75'`%&@CF1NmV0"?Bhj,B]&9BRf$#VI8Z16Mn.=jj_5<-")F"'=;AIF170>q3ZcQ$3-bW$j@7+U8d"H79U
%SF]3(:WEk*!L)`>hLsgrA^o;u8!/K'PW?sj:ChfAD2]GdifOWnCMM.W9C>)^IL=*j)bG>MYJ/UGn;[)8)@1Kj`l1gi\Y.&)E=!lC
%4)$H3R"/nsH:e&r3@^(5BPHsNB\jD[p)h7\($$Q]Meu.@Op7cdO=rP&$S2jK>Dm3KI)&jQV%HlVig:Ar3K8TL'?1IQT??Jt@"SYq
%RfOt`R42AbQm*L^7PJ)Y$Dc+oT9%Y+B.Q9NTX!lbC99DW-I]-eiONN<B?!)u31%/<Bo>o0U+kNM,q)kj"2DYb6nU/5fD^gR>HbYS
%Oe(GSqrZIP<[]3Lfh1b5Vc`,O0*k_ks4YjqId'/,A0)u@\m+C4(*@seXh),e$<%X5cC.-i;/"ZDMr,Js6;:2e_O8E"-%dP+`"W[@
%V]^(ddlLbnY*knu]/<ZD(AT)D+kUC^+[WJ.8'6alb0Gh1KZ.;K29ju"LR@GD)cX'c>K]L*9Su(g4q"h-.]Y%F>Ku\k%F,9;3cEfM
%fQs'6.%sNc$]H%A*/PMC>8@%-G6o\5?$(>;+khN1jD+K;rCb),!.Xc/a4p5>54ruC1dcJ27lYMJ;Mqdgonn!`Du%XMm!:@;=@75:
%)nhj=?K\p9s);Q,Em%8I>l=Pc]o-%j/%ZTLi[anmnH@2,?u4c<*l]A5Y`$o.\?M%apK)Mn:P*6R1B.3gDFQ%jQ2QYJh3Aui%:%T8
%fRXFB)Fr`&^;chgKq431nBnr:Vt**a;r5SdV=Fp$T5rFP[7N<0Uq6-Q[`ZV_l59E`?jm)!?R59TI@C%g,PGboc7$tgJbBS`IN!Qd
%9VJ8L,`I0`(HfY;*Hq39:H1(r8)b5HN%C[!>'KJ&J4/AB_8sp7Y[^pBgk1;&&pttDHd:mI+7F*lbf!`UK^0$42$Q*W]4G:br7bAE
%=G+9XXcqZ&cB0l)+.*CIE`Ur[:b;-9X:NVEGp*3kYqYe(@7=/A@ks3hGDg"(`XOFi5//<#86;$)IBU2pjG5kYamfh1:b:6t12"rD
%6UYXB-j-NHP.V5h6?>E.3$@i^2ZK[bSZl$b]b,.]=#"k&7@]YDk&?Y_iVJ+U_Z!>mBi1!u=P1.VHRBF5[RX*RdW^WJKR\F*-UPYQ
%n/0''1D23*7m:%hFK/l;Hd,aWPcYb)NCd'=,<S0)N>8r70onnYeaehc2\)8LK&S_6an<.tOB4-+L5KLZ/3pObkIRJ1aZ$!_R/9R/
%?[tZr=&W?Y=j:%kMjX0k7X:aq+SaNa`s%p,8(9(*?5[H[,_Ghe#ekTa0,"312;':t/1CP]iE"?Hi7aoU!@;Ql\Uk%ASp9'7/jPui
%`OXf^Y)k[oGj7kCk&W:pN4(R*(*PDqX3mc!<sQpP#k(9?]]+Xed-%n;odi`BfS"BnIIqPmI[ekg<"4Z,#(>F8[t,"VD9S`hc*G)"
%i/h)]rnX\6/38;#KQm^bDF9L]c2#"l$lB>*E`:E;;H_q<rIP]LqoXX(kpQiTEo%&j]uYjc3lKfrIVI@^5`<lAGAmis?C_<,/Z#]F
%%/X[R.J>7[?VgjhBi&bRBIsrh912^Y-_Y(:!)W)`WS.1T:_tc(o7SUn--STGcg1-FfTZd`Mp@L)nfRDaS@73G(c:BaE0Js@2f3]o
%rap^:[1]M+>=EB_laaTB`7!m'(n*,q=Ut>X*Wijf(u`N<\D[ma/)mV,OF0LHBot1b>X,_D8:/+k4rl;+FJD33e8&iNPkJ+D'ZBAc
%*5PNGkRjJcrZ]H(a?6ln7@)10[e4g,8"<5#MGt"%V'?VbTYYZ$a9H>[)@m7`k,cg(YWZ?UA^P%?^:?t2+C639IhV3H+A4GI^U74-
%MUH9/G5B8NrVtoW(OCC&fDpEtUu:^fc3i:E=&',[E9Y##".)akVOS\j1Cc?nmA[o+Y+-G%Z!B@Mr;4CbJa953L]?lAq8!9<S02M'
%dM]n+Sj,Z2P.kssYa47j8\t\7S0]5-k>)c:gU$L)lgMuQ6J).PRDLQ>lr7uB:S008rKWS#4Zb`0]PB]R\o90Krd8].icr>1T,f#'
%\nJl?eAB;@N<\Glf5!P9(4d/&!/#?V=-]RL<J2jq3@r&1QB$SK)597SST*heN;3ZQ`?qP_.'F?#H(lp164jJs"^N;iOJQUSYq3<J
%)A9?7A<J*E1q@1j+@+[c#>N.5:WC:e`GRX.WeJE7"1q2oDV2>a(ZV%m`6CoSUNi_kP"'k`&-):!3/gA@>^e/Rn<BPKTJs*2W1sOV
%JEWCsXt(72TLf_>a'=VJ0=UPM`8Xbi#ee3&ItG+m&?dOkJ0FR$N`4rr*9*H]Si-CPBTXtHqou`I5LJ!daGCKjSh1!Nj4eYPqURqF
%"VpMA"rH'6<\Wg^bO["SI+42,:e[%L-F[AfX&6GXJSBQg&G%Rhc;R?X=NSd1N?Due.$(toenblu08j?I(!tF*HF2AB;lkil!!D?(
%+WSKY1!;Km+kO4Ka<@Vg1][:OQH;C2(/8:FnCPS\8Lged]kS(j$qk\jrK/eZNK!4<g0S%=lf`#kpu_f=)#L#::(qP>0JTiGagkVT
%kJRXu:W0=qDbO0'Z?'EQqmB5>I!^4qh3qWK`'$Tg6$e2'"-,q)YP^6ph/okpAoKUZ0HWLT?r.k'ESrenaQFF6?=+[VE,k,Pm-/R"
%"UcYj1CUhS6cAc#0,`QD>g#//$),G9=D&8%eR(1j?<TRc<4p(B0tKC4$C(fS\R!tY3;k=/T]XXLa@I2^=]EH7p[*gPnqD3YHfrOD
%V7grY<b[M!=fo''T3nccqO_-"c9se.B'F8?=g]sa:Tmuke'G4&:7;Q+QQX=!X-]*Zc`^^Tr5o@Y!uKOmJ,fErri%HcSr>s$.nBWY
%6#1lso(6Yh!C*JS._Jo']>6%"aIuM,7uim%*rSPT=bPf[PGRSs3MD^Eg=^S[CST+!no:X0pl/-`$o<`QD*-$OUj'm5/!h(u+JE#J
%$7R^\b4pU-<tOS5R6al/<9J'p$\[RuF.=j*_e!SS&dh@?[8D=lR]RaHL#jL6i`%?I@i+*)1VpBL5)8J:e*"?=$cO(C>K*#5r!Y9S
%b1+>eA+_P`DP_,82@2\W5^4')o#:jkg.ls,a*I1Qj*"f?N$kj.!H[<+UdDV@fadT>qI8Fb<:QpU1F-r`akfh9ZEmBQT+WlT4G?Ic
%%]?\dZ(sq4&FMl8!=4Ek^l$El:B1A,CNBVKmOQ)adq16C.a&'5ep5S"a'#YWV^Q/UKhC[#FRtEs(=Y@3XE3;]B0bC_!fCc[EQs7I
%2?qY9Id;#1]3.ca_^Vb!PRu2Q_F&8oP7.ZIQt=dnf82ti#'bR,?)#uebGRf))p7r1r?[/C-h$Q:4."O]7ZDe6WK,0;Hg8bf#fq7H
%QL5tbXM)RO-M;JT;+LG&=joWg%]k=9O"(Q'ge%f664.4CUhsR051]\b9-.$]RF^&-`1h;udN70TU<CAZidH+/'^c5@>rW;UDOc6S
%L<kUD5EI"6)-i$Cb(3ko[D(>XiW4Z?GQ>=X4TpnhJM#A0GU\LnRll?-%]/_ti`+5iE.FeRD%Ldj$j/kGBe)!Y@EeNKFe_eG-62[]
%Kt"d[!E;F*!nUorcj@'PYVjDFl(Vck=mq^FEL!/#S#<lL%?foK"'V0qFp*RkTAL;qPWcc30Sjpa?_CDFAS5BQ:[\`$eQpiKS4.[O
%J)CQVIYZha\?\VD%R7^$cmZW6:UouYq43,<o>4hMhd>%gIPTE:3H_pLpYu$]Nub;i"e,=Zb>,3d(ZtpBYlO]+Pa#_Qe30;anG\#c
%8;HCAW0Fqs`Ia>@R^fS5'd\W(W38l/:c#J&1Y]bRh1nafs3Z$4C@!^oi@KO*5T#eu9TVc.j$hO.M@XXUBk&j+JN4i,=2[]_N*HV8
%dEW(fm=,e]>p,ZgCM$h$CRLn$C6?uo;*kH_5U;n33f(CcY@,h[c\_pZ,J]!Hgo0`/WQ'u\DQ'ef,)2YZS+ag%4+L.li9cC[TFR;T
%Bm]%6@$=A09E0/V4_th=SBd#o;&3]k?6%4J^AG3B;60j[1l!Lr/T-8.F$MNs2OLbbm8etPZS5eeSXT:k=/'+NmP/.c42igR9`i<:
%_(89Qq0!6]G4l(q-jhUB;pcR)3rK@QJlNsc?>ZR4Y^./7TUZhL=X;g'N(@@\N9802#jV=R"V4L>Oc+FfBH7atCt9s>c]-3$a?QKP
%M$q4Uc2t\(QGYqne%4fo>qQ]2RmI0+:COj6,,#6XF)V<Vb9&l9'Tul4Jt$oS@h-X_`o].B:buWY*HP[62'XD).t/WlW0(]^TFtfq
%,JF"F<<[eddosP,.`%QjYeMM?g59pYcBeU#>c1Y;VD&q,dQheH%c.k,9fX&BN3Krpb'r*ZU`?KHKA=0432(>Pn09FcXZZ^='HjCN
%oHp5,/^[#$mUT7V"c>r,gZ\Ntb+q+>:q3>^#lZ.h(eW`PGZss3SKdZ^N@T4#&2l"4H6sPcOT&4YldE+7-s'nl#+OC;)`aR+P(Y$#
%pZ\B[-,u7T%[7;:D96V^UDS1.>M'FRNTJaSUNQ!]f]M80\&`,B$-Zu_qB+[<U#85ha)1u>mPSXSq%r`M7k:4gQ"V"@fTuYarq+JM
%n_U2<-7<Vj]9E86gn1+YI<pZh_p@dKCuB,r15tG]IEEH+kBADFq9SM0`rA03>L?$PZ<t::CHSq5fi*<Jc_@1TA_/^:kkTYMTA\t)
%Mf[h!hXsf-$>Bp8+;4Kg3-.$1$">-tLKHo;OR[0B?:0&e@V?HKe:L,*@$VeMi6MG`8u7/2[O3-%W5@K=ToD8&$Sb$X-58`[$BrGN
%0o3&+VX`+oP44d4J;O`62e$pNlYP6(+5_PmnR3"U1G^?aT#$n>05),d]B97hA=Wi3bqQa45?sIfW'XO2-Ecle`f>2qDI*!ucfu"Y
%3%t&.378_i'UXZG6<b2/X^7l7NN6M6T8RZ)eg!tSNIt>,l;4D:)X6>iPR93-Wbb]LCZPh4BbZJn?/Qnl(sDNLX`uU^*emOJb#I'E
%[OXH'omGM*Eg0&)E=$'PP4pd^V%Y/X)ZVC/d(YMV:bOm-dTX_VUJtc#2,EK`+;1mJjY?D`5prtNj`dZ)Dc+3eZlA]^]IBZ<9[bsH
%7?rDCZJm\(/Tc*3\s6`'G?\WX@jcO)8M!q>$NWY$'>/;<RI=[pXK&ij&P*I>\uV$[P')&-P0f_OTcQ6gA/E'e'U8peH"U87_iE/Z
%kU9\lNA[>2nnhOm`q("uP`9JkAC@Z6L4g;9,2A-%(+q2m.7eGVS:W'll!+0kCj#]^Y3?naR`'\p9d%TgVM@)B1q^B,765at+mQG:
%lZl9<`B%.U$i@&9$ImHc8%Ij9U*agB=@iZhKkJ?o0M+#[8)6uo/qBbgM`t=9\'f-AHLU,fKplRC@.oP1K_"K$PKc.M/OYsmU6YjT
%0p,52'b[b_9aS>I9O0Z33E<Hi'NJIK;jd[o8.0r!(o<Wr'7aS,8G3HO![qY9h!kfJ?Blg@gjXi$-,iAm_2h:^@[+O#r\jh1bBeVJ
%01V5*%&WY^cJ7OtG)@`+YD4Ym*-*@s*O3=9Pe2A+\0[\,'^&]P^)6[Fc&2]f=10b=E+oD!_p!fdN!qjN2DKC5C`DsfNZ/l9E+(9g
%.mL_8nb3j.1]RIM%?1g%g![sbFCA+cmk8Nn_(PKS`^XFJ.pEr2\?NN+"Q7Gr`i\:<#"KG[$X;C^jEGDE4mZ*n;D6qo.2mCo`m=bs
%""o9[VDZX"!<Gc_a;Rn,.h^m(80E42\FR(K&c+B1U\.jMoa%n\6/RFSO2fBq4]m`5(qDHtg^M?3IV'+^(:UX!QqQW"@nVr'CSAo)
%XnODYZLaiqaVu-g59Z2j3J=aoKp>#!X?>JAql\F0OZGELNB:ek,XE2>@`leQb0TJ0.&JF17Gp^N01B9%nZQ$N>2g43=(YJKnL8Ii
%'@k(MoolTY'j^spnOC8EZ%)BY5X6H1A;lR=TTX:ZUO=2\CQbjIo;;VWqP]%k$bl@*)hsr=PJ6HTO53XGGE"etZ:LCGk#=BHd2C4l
%<4OS8mZT0X.%R5&A;`V\YpMb%?6UR.Gbm`L#mS?ka[9)<%(RdpQo,Zj)&+I:C/D!k,V(lWbq\MYV-bU,qMS"B=rp8o6eN<QFs2RU
%+UUI;j4GFo2o,hDeO7'K_c0ko_AXshChc5NF=7kcT&ec.jR6M.?/7\V!;(Q]7!FhnGQ!tX[P96HqOLQ?dFJq^O24c+4[fk@&;;+3
%b6jOq^^9<a%6_iV*!hC:TBr^u5M*"_I.-9(&XoB4a1tq13RTNS!CQ7@c`[4R1h$:XIrhY;@NDP@5r>RtP"O;&>0FIIoQaSD_NVnm
%iKD1-8d!O%6A3@j;r(?l-5IP!O?F;HDD<RC-^lCk6bCppW1//<7&3";Md5-tQdAr%i.[:!`g[3_g)Q?N1_:K),'o:c0#"X"*A2S"
%)5VQUacJM/a;/Bm6TnrMHH(E.R=WjB%C:NNgXphba6[_eN&e>AZRtItCH1.mpkS#k1]I;g40r(7f[+GQ5.RNCg4"3DZ[_KB[`7L&
%D/B3hEGP.fT&8?$b"lqor^+qLE:iEJCiOPIYAA6&CnKSHa>*AO7RpDN_H,jW5J>b?AM7kDB%_TM__]:"o33:!b(WPC[]-16]q<B0
%kU?e!kL's=<=$D`@9aSkE,CQoPR^;3oTF8Tj%NH%f9%<Q;MaG$`u9"2\_@\'TlFmK7PFt$`uIi.[5s-7i<Vctc$6TaHq*u*,QrT%
%dI/KI2f(RgD9_+JCq950,;;SI%47nq(n9'9[8Snr#hlIWY(P*D(s0Uc2AT?o(IL63n(9Ve`h0"73sqK_jFC,JmJ]tnYkOC!q%#:"
%9/`I=Q9_;AR>'j"^@#&^%*K>,$tV@7E_VP@IW)tPn=)4leVQHaAu5iHU`dV*5f=r-C'r.GA:"eM$a;d0H\YL^ZnYG8'7M/^jcd3O
%>sX0Q;:Pc+F6&H,Gh&Y22K'm75=l]C^^oCo%[b&e-1"9<I7@[@!^=caP(0\C.E)$4ddU:)2\lO/L4TGVb_6RJJnAe+kqR-Fp1fJP
%Q:?L+=P3j&A9-l*pK<Q@D:=%TSE<:e:m2V"?`21b`-TQ;DC>5D_CsoZ`NWqq6=1U>="\X[Yo=\Ae]I_tM8b)IXi7@bD!7OlUEle/
%BlUMZLCD6-dLKp:'Jh,tr-Ii5oeth*"/2GM^0'o0`dS5A_%I\;ek&p,%9WUm!_?hfbdmC(CQeui\>gik>o'l'N#@X1DF!te'.Lub
%=4bk!(g!!<NlsQPN#LKROi)3#2f;EX*WL(iiE7qql(r$@MJ!_IIt"^$Gl>bdABa\_'')'&AJ+JB/hB@Z9V5[JOXk]t.GCMDIPI;b
%oVpqC$hO/tacSYfP&^Hb7JW-u8%S,3Y^e3A%m75o=`P?Y+C.kF*.XcWaRlL'mO?3rks?e(!X1=3:'eS'NP=bR4_8,1$:l!"KuodD
%h)Ye9VKdYcA/Wc9',Q3H=d+$s>e/Umk:GLY"A(b53DZ263*8/P,t\#6Tqk&CJnrt.Gq4bnj[bB]/A$X;["0`hF4?*7W#;ggQ6*[[
%A&eUfOd7OW$nXFScYu@*,ZZHJ[22=$bhsM5"B/>-Xf8M^*i89+'bLIeJgXqb=r>C9!P>*6((0"m7!.:$=#Kl?`#+KUFMsfrUT]39
%1]%gHe&:AV_6a@+B>%_S`hu7*$k--e=V1Nj7lD5T,<OfU,+6b,%R(`81Bea3RnK5VqV;Tr7eOaH">1ALbM_G1LP@r%p_l0W,4pF[
%AdVWAZCjR(&Q+sZfadBSX\=il6d::pK'/e\_phM>5)"jc--)!4atq")gAjKmA-@=PM6+i>aQ+DnEH/OApmdb*Y#`kVMDEaM)(?D[
%e7)=5cA*OGl+ER&k:e]TlHP-qG_8Y7l."O^Q"?45[QCh4`\jm[XGW&t[q6p<"_L^X'D5An:_UuP5DKRmq.27VV'fMA3%%9/"drt[
%3LQ<Zr4c.h`aO[f08<f'1*IU5I>u:oNqA8$C_l>_%G#YiC_XS"jrbF&m$,fS#5,k]_m?-f8]Dp=W?[t/%,ka2mGeg>[G9&o&eDN'
%Moe!,B9s8@^FK]7(=ofbM?_XqMi+snKk85I^Tas9A,"L$U=k!,ENt)XQPWAi$Ob1"n+e8!oCViIp/;.2=r,k&.bT&`>%4=D`+K`I
%mXm&fbP(c:kZLGU:!!4YRE^QSBg1*RB)o4-5i#<kg3'5lQam>0(+C:lDeMb3$X::fIm,a5+n$lo=mdWL]RsO"@j`96U@t(08uH`#
%F^LBp:>pcc+o")[<Ek$(eiOEB99/8t>0gJ&X.X2?<Y>cbiF#6;D#NdcJJ<mUrsHp9af\QFLO^cc<GJE1Qkg7fZ'R=7&jEXN@%:LM
%NL+/im9>&LiKFUB]IX4q_HEg,Lo]Ugph5T0'oN&^X0/dU5Q.%h\<;VsG:Tn+oO-6>B46.UA^H9IBCPRuqZYQ66gT0Fc9o'k+5enQ
%4s'mh`u.mU(9Uns\afa.hi8]*ON\ZQ#o>BVK*$<LD49c:2i&XrU!dpg&]B;G!V/:"o!9-42-:oObBm&s$P63('k-0^+i.[pR8PN.
%.'>TKd`8cRX8uF6AG/b]>;n(7`c!fP?!^dc@UKNQ(HKbaFgl&r]ZG4mX$PJhUc>Zu)PRcDRB!b4]T'VW;[[<Dh>e1.Y*+'/gapmO
%O@hcH;@oc>g_HiLPJ[qsd>s1H+S_\2R2cC4DcDsAlVi(fb's+;Hm6aBKn6FNlu@kCnDF)qY.n/Pb:2$N(:2Tn4n3u$Nc\#>7>?T'
%8nkco%Vt[kCcYe;]RFE(;bZ4f)=n@d$^h4SUJ%"6?WbN7(=/;Qs);5i!Gm++8b44BYc.NuVjI)&^UpqY3?^"+m@SlPEH/<;mePu3
%ZFZqM\1)!]?K-G5EKNc)hri0FY!9PFIkoKT3V\CajFl'XpdK3,(2@reEJ]AaV*):-)Uc,.^j-?gDlejKTVEnE!]jBWl2m<7/>V]0
%M%%$7X-$^fIN3O7&@'l]B"Rt6O5@k=&;ur=0]]O?b!%o'E&KmG5(=(%]rh,<RprE&9=%+YqZngQd1T_gL>^toWAJ9J?Cgh5)&%*F
%[=a&'<C#Fj8(o(r4Lllp*"XfS3<ca[q?D`V;=3&+iO.=k(h'\k3EDTcL)#ruI634BHi2[ABJR/;"X180e!8;9AT/`VL*CbJ87!uo
%8<8?]j#*!>66;ogPDGIrlapBRXp<r5VC\Gu"C2<eNi8/)piq1KRg28cK`J@kW*Fki?6l#C@Z==UW!$]MCmC$X0#:5kR+Y=n+\b)T
%bHBn:YR.R'7r"V7U37;3h3#Ohd6J[qSMhY.Sb$,S319;5@Jm/42U7%ZKE(Q3rqb5rr6p/lk>-U(kC<HJDu]V2L];m?^\B*?f4Ee%
%s6@L/s)3D`j$3S&T0E242o#1]Vbd?lndkcsVr-Lr^\[FaiR\$bs3Tcg'J-9+Fn/mBk9M'iDQ;"I__l)L!,`2=DLP()'W?>e7Qs0p
%l?#l7WYMJG1KPdH5VjOEEeZcB`HB257fQ)4gIt3*I\,&""S1>FUjE7&7qJd/\NtBapc9m<M/l(#^2<-)=BI!B[:d4eHe_5[cs-,$
%M>>98Go+P2-ZQL;Nr?b+I.*`!(>&!"M#OaL<;V)dLsAH/-&W=h&T;*L8o\"RpMW4Wo`foC17IhAZIGs$Nig<>>2nc&]d\gE,XJq6
%QD3[%6Z3mT1")$O=kP'+hEE*+DiZK``+iSp7O^0e8l\)=Dq^pqs*N'SCSb+a3GceJjtcat?C_aL/Mo@KU"^(+q>5dV]T_+81>sKD
%"D<3!"bKT2la'Cib8='sbX:hL%1`?qb>B8>XASfDjD]-(Z+j_Nio<j].`2:O;CqW=8.H!U^Fjt"X'b1"l)`!OfLBTn6%]ts3;%=e
%d&Tqnm#RklCj:8rYMqp=T^CC/T(`24o<\ARn%N54Y*n.^A;9.*`MaYWMa>=m(O_&Sa;>Z8/Qc_TXW@Tklt[(n'X[WI#ub<9OP[A<
%\?_kqH0M50ZUFr%9ZMQk6%-)W&;C4s,gH/?[0ol.dmH6WE>(sWaBP'I&EiJ7ShW(-+Qt]Ic6[Wue<HBZCWG;Mb;,Zo.14>1rLDN?
%RA%9-E-dBZ\cACU6<HN^_>lu#L\S5aE8W.kM]]^[qXaa\c-Otkn-;I4rr*CC0b'K[-SA,(=sLa?Kp#iq<\IiAK3@k^i/!r(*&LP@
%XhNL)Bg^)O<)+TDXli^)38q!]!.esf%OOa=N"IE&OGJ/lg[<_VnS+-Ir;:8/i60s*ed[<ci+J+g(Rh)2lE`tWj&5Z2V$S1?@RFBI
%9SWl$]9=VmnRo%si'SsuU.A2RUt,IWIK0?VN,:!pHng<C,-JsXXlkBD%1XndMiY"6kCl]i/XnAlSi9PnSdWFkT\EoVQ58>`*]H.f
%:d]$_Us8nG-rL,"OU(\T%$@upWe.$``HAZ\eVW!>[>+2/O)=Tg'qZmrGB%F(?\N]G!"#U:Ml!MB1+4;j*(C(_k?7'-KL;O5EDT<*
%G9&Mn0E*"+/:[B>q[nKrc-KiS3^'Xu9WEcL8CdL^lLB.pq1[Zh&!a2maP8q^#_;Eto27fiO0.iIVGTAt#9$OI\=.5UVcgnf'I^a)
%bL$)j1!gp0Lr(t0f]qmMZB&rC%mEY\F`Jr+HH*a8U!GRGj)Lei"k7dDgh2W7<eAO83"?(%`(EiGU!jKlFqt,H"%sT>e'Omf<HMl5
%*gQj;&$g)e>mc8TMONdSr4H;DE7-$/FjfRCGr9=gGV6tq<-eP4AF\5e=VoT6:7C+2.i+2fT!B_\mN/g@Z5ES_g`Ign#T@YI#`^_8
%`_(*u80&+%:'P<*'n_"eA:IL:n/7`!\Fprj6%>!CGrb-Be]u77/qN5@Q/qarE^[Hea$u*kli6;=hnt4Vj$3S=B,Y?"K/UW&s1J?s
%^TZ8gr*_J755^cI3dg_Y2s]B#J^NT,gp-@;^qI\CcNroQO-r%s=6F1s<S=GrPi(72Q%pQQV.*,=Obqm6rgBKeW_K,e6Z7_#ol[^1
%Zj[HCTX\cjH-"@U=;"Pb3V!F57+J9"]*)97S:uf5K%Z-@$+]7P]:0uO!er&f.X*&-:0'qA/JBkhIHI=>Mgs\Z$S('M<46:$Q9j,6
%!r$9DA0Go*f&-tf?qs5_SH[uTQu\3oBQ(M2+Vk'd[<8`*?P*XTeH?!oSOuI]BT\IGo;Y:D"6NppW#\`B1p\k:32th4VA=?D-IB$>
%f,k?TI-hJ!`Zs+>/3$['WR%=hGjs@YnJ^H5@\5s":/Nl'>Hd%fdCXar!bMi_]cU.f+io@'?`Z8<nhT/_b>'n,/=rJf@KQ1FNih0n
%m5^F&?r'N:hs(n]";4bHe)8;&gYa=ghQ(R;EiR''E74%-h4D<<;*W:`1<Oa^2(<-?Q@oJ@0Na4RK;d6d9PeNn-MI>Lc+Ej8H;DEQ
%Z*'%V?A_8t&ErXu=K@RHUap4M>;.0l`$8bI%'lE\H?68UJZ+R<2L.mZFZ*J@Ha.<0Z!/VMb8SPB"p7UD`RiZV9M^%Pp$Q]N%c8)n
%=[[jPl!/[^Y%miKLl.;%AI*ct8J,fjFX&6YA#jft]1_4IQRA*Z]U2-W7!0[\mDg:GJS>EdAa]5@/5]EQj3[)9h<m]=n:bQ<^NdaK
%[6Rn$c0`s$n5EoSiiDNI>aBN;>.M[Cn*Y=U'%k$.^_]ce6\n!O,X5lIeo(Q^\b'3VWuVRMO2:l;>J7T%A(T1%B(C2O"W9>Vin?@A
%&((2?@<f,&K)DQ\)Ss]HVO1k_GBZ)<AI.2uR'#Xq`*6>K1:&SL@HJ9#lc_;ogJb:W8M+u6a&_ZsFpaLjd8^LhM')_;UqK=KUg'`c
%BXCjuC,k"9K-:-FlHS.>6`f;(eTi_>]21@7B4d[.#((J>U56hBfN6r[K:^@9Mhhm\hVI95`Uh0[_D?IWACgSX@gR<!3ggDD]5mo$
%GC&;=EX:YG)nil8;t'nn8*GlKd8ia<V#h7$J2,-_`NE=[_d2.l8MWd8FZ:E]]sZJd40S8B9)ansiuk_.bC[,u<.GpgdWQnA@5bc%
%KZI[0J^C4DQfEos3tc*mlmT<L@nK81MUc[W<-4IW,nWPo2.M'lWe+)gR]bZ.&Cia^H.Ns\mM$WqaYX:;](!TMToZH.oKhRq;d;\8
%d-BA<!@3"h1!2uLf*FuNmP%2FJTXfONNU)3C+UU\a0`=Bkq]m+Nj&d<-mC1`aQW0k4Q*dp;71k*qA40XWF>3G&S9@JZ\*=H)FdR]
%0BNlYX3i(69"B1T"[V*MP<ZR]^30d\b9U:51hh*>YjX.:G>,V?qXDk\enc24YWpZF>\c;5=W,7,n*Y19g^d*;%R*c7:i%#Jb`\i0
%%d#fI?pgE[54;$bVsHUSH#oV,m$nGI/c"8Ql/Ws&7W4FMr"SQXigO<O;T-Q6Oe<>Z==&3.p#^.%J@%'L67qI[$;(S!+hQ`%NL;5<
%\9qT>WHbMDFK!H*;5EKQdCVI\3TmuSmU<ATH0pfH<.#?06R"5N'2IR;r8DBV"JtsgeQ]Z1&51C4YC!rU)l.Fak@9?9"`DC$2;EiU
%*$!Tf#AeDggjI]<h;&R'*VQZdY/(0?S+4D",[[-0dhQ<YD$'gJP)9$I7K(Qd]XcM)5T@.Nb$L'<SBMnc#V`i9^2=Z2M"<ZcL?,kS
%m10Z_gu/l^V)?r;%=?'W[\unFI1+6(R&?C.T!_uD4RDgBR=<`Nh7Xk]DMU*WfZHP)gM*X0.hfQK_XX^dmm_^GFcsP'c@\`Q%W1(X
%kp:PG_hO(14`h1&8T5`bL^B&[3l4LGW9?]"_!8_A<c@CalA<H"$K`n0C5O[i4[nV"08%NXBP0-4^,csBM[cX;erQB/H?Zi>XLYF*
%AnYi%0n>rS\:f8lgEM#fjP<KlDu^Wu34*sPT)gLjWI_E0NoGjJRe7SL0*Nf?Fufc:K!?2?fbLGTf$J:0XO4Y,h.8/D'8d,JYR$0]
%'ql"u3&"7a<>Ck9\fcnYGgKECff3d>k$A.XX!eL3Pc"cq!)p"*TG.0AY$*Q#g817CTkK2A/f8\Hp""$<n#c`<V4^a`]r:?2igbo9
%!L&Qq>AAT>TfA/9'RjJt,-%$Z7@.>4P6R0gOq10;!48c7n&uqGnuFHj$HiPa?6`,D\JFd1)gB^OdpC:5%+Ns8"+dGgg)TeodMX4J
%W_LX&VdGhr0a5"^"e6ZWbi(X+G7tI_nnJkp<R_Ck/+U%<&8G'pX)gh&'=Igq+5+2mUQ1+@YW9>&2e"\#YOd:RqFbW+oBOO!V)#0K
%C=D0:VUsn),$\-@T-]jr5T!s0[s&-R.WFu>lVg4UIF@<i0!2;u"n"Q#Ah@fb?ecChOPH2^Pt'h#=]Lh/Mo2iX)k(*SV-&L2n*W$4
%EJ/-8OqIC+1Jl@<*C/W7H&b:/Lm\qLH?#&e<i0[(O0.9qmh57b#Zc*WiMMm+`h;L"g28[iEGWEI;TT$.\h0(eD"[4FcQ2k8E9:se
%%\9kd=XjW=*d8*:]C^>OB.Q/'H@*+_64]HaiflR1[j!n%7AT2]W7*)K[.ZUD;=O:^`uKX*A#jhJH\p`CJ>'QNcNU8,E=AR/n,Nch
%`L(YE>EOL,DGa_adcg)SmSPqDBsN_1`#LqP@0u8,X"h4(#.>iE%A*mL1^0$AZ.6J`?)"EoZ\GI:X]n65A71):G0\OT`<De(hCar:
%@QEUCX1.gb#G)70EfkI_8SSV249]jtgU**tL4CVAYorI[%_f/WX1.hMl,\*J1q`U+Pgu0H&OHpGc1l!G\!+kM#fPCKmn'"XpU[@'
%%?n0m8Q%Um.:VYlp03SODet5^KguF5%gNQ*.AYdCB_1XeGKi$>d@PJ,iNeDh#ed9fGZ[;>H/<MdjB=>a?4%.RA#$MW]=?i;T:0b=
%Fh9/3/6:UiYr15%(>''B7`=q>B_:_1j/Gp'";1q$^:N,%:Tss^?0dSB)W]]WKR0FX9F5M2Ut+5sSHDClLf=_&Wf:Gk(K]+m,0*C<
%F5%KEf*KG?7&"G$A#m*5]*17(\ON]&JB12Hg.[#R<"2Eb"T#\m,W5f(:1`7BFE%emhV7MrrE4AT$:0C"b_se)n"+[iqF;Pg?-@t4
%U#i?WVWo]Z%3aIA#`LM?"/F.R1[#U/(;b^Sp!_Pr.(1An9XEuE-=KF7KYr6=ObSMn0&+QP%sujn1:_%_hAcZ#!&Q-fJe2sHVkF5O
%"QR&9c4GGeOlc^&T&M1eL=r1pFsVOYYF!Lc9'/YS'$E^D0$mTg!MCL.Ao3R(rq_eOkL3Bf!>H\g4&<T:,9AGrMY$ZJraHp#=GrtE
%:c:QC5*eV\9(tRn2f,IKek6i+HdE)0D2B5NrSb`g[=^`ZW5JgW;;Rtq^:M`OW76`%&Cj*!/UIqI2=CiS$0IF@n*W&hUL_fGSuG3X
%G;<`&%H26^)/&]R<F:k_?\LY^i:aKHn*]l`Os7\O7#`+44L>!QAiXbal-gHFidh$7gRSk9QBV_=%ZT?%lOnO(XS[%Z))6OUH_A_N
%6o0Tm6]mflTMVJK3uf3Q]A'9COXGgVC8\c>0qt+''R6OS4tA+XITN;UBmH`<n_!-_rC6'GJ4Q%1TZ9mD>NCK8botK#3VYU:gG?f<
%!nf7>]g6$orme:(g\W#01$!)U%>qsKi(iI<&7H"']W\.YbU[oC/Sam&PBV4ra\Go(>:lR+@ta271bNBq-/e`r9b4S@;bOpGGF(O0
%o'RPt3i/5("K'.r4!FYe2I,"QaSrCgbN:@45>kN/N#WS_*nn9?du-kR?pN0+Gk("P)+4[0/o38W,ooq8U:`t>6"^_:AuW-W>J7Z+
%.#a;6B@&hrTr?1(lc#_YeApOS/=e;gFFJ;p\k?B'f]__Y%XBGO"83'nau@G9DE5436$G%R!-Mc[*s:=-PJ5%.r`Q"?GIn#+3K&[1
%&ud>.ga$K@D!k\9L@79@255=pW]c+qDsqcWEi02%^O4TKD?IOKi>U4>GKG130Y:GlXi"Y42g:_gi?EH!_$&iNM`[\9F:1hn3dgK5
%at?nZ)]\$pgS,,?Z-g1q]afgCX&@A[f-pma,rJoU;V3EFWsQ4f%NK7]fm7K(hCcQqlP_)EMOKMfoP,0:EK9_G:K`4s%>89S;[40X
%l&*YVKLfoEnLA,mFu7Y$)h6@f`X<C?Maa!]05!J\@T*B3X@\nDWQF;^JL<9n;WT@+KZH#E-"[irY`*-l56WDR&JXbN-$KMj?d-<\
%K58NB[LrG4C&lY?:NdS,>e>&U,A/:]/JQTgn,Y"6\rYtDT`rf?L^g^f"N-b7*a8ng+$\(]Nbcc&A0(YYNb_fZU%bkI_hJ.Q!@+]_
%/1n(6L_+PG?9L)<B:"rEacES'f])b=@:2-rGWo;F7K&6EBG0!T#Rf@3P=YWV5saT9-?%A#P@ft=[X*/4_1KJ\H^iKEB-q2b+'S(>
%LC$E!P`YqcTMnCX#a)DP8Q>0!<c@GN2ZXIPmen1o+;/LD6Pls_6XX)@e5pT,H/,Ycao+E1H?[-/he:GMgQ]PMVoSl3_P))hW4'%>
%"Z,6rMKXB)&EuceGP?HE(dK=]-JN?KBhhKdRV7[KMM/"3;k!'2iP5ZrIhi%YXOZ)&]r2Qt/>,j-O-lof'``b^J<QEqlLrR_3Z%Rp
%fo2>oPtm@!hVDt/igIT&7hSQ@%;G+#*_]FkFl7Y_XW(V'JrBGQT,hF&iuD::]AFai@n[UGldW>*9:1?G&l:$"AkoMa7DF1K+8@$G
%7T"pUA>Fu]Dt!E51m)<]$U-%>1MU_f,S2!g2ZQ@o1iBJ_i*oAYBcc$A]@UH/>dX:+r9"mZo"Fio;aam+5eou]N-5N]!YQO%PpHs+
%Cp7EM\+_sTq=+SIH?'<:if(\hN=EV7m6Rr[p.<,WW_WP.Nh/V-GB^Xk'+o'**@"Tg?]r=1\hpZ9N%Jep,)>O2!kogHH&msAghgHs
%</Ae)G>#t;@F*c'LCHGR2IHEfjE4?!;hQ.27W7bh'(RcPWpo(T%;$Nq16X<q.Df)Sd+UroJ8D<ELVV2NYj8"1]6atp8`grbMa5KB
%=MQUB4c<(tAmGeSfHr`@d$r"B=\klj%^"UEn)E=PX=(l43[;%XOJb(n>Fa[ii>pV0iY4k?@YD'gn*Tj2J;Zd!O4l3r%5Kij/cfc?
%S-WG-"f6(8@e^;s65%u"-oH1e.T!B'2*$BH2LW0dG4Kh"T^#BTMg:o<.Ulg8QID6%jM>V8YM!RrF>/$_6E)<3cQ%+#lS:RN;j7be
%Z`oX4ak]b/)H5WHgH]@bP1*;Oqk\@@-P<aVa-lU7cq/D:Xu_nADL+*Zc/r&;NHG_^\B[6m))GI,&cSl=j9?j7:VP+!*\EQ/F_^"k
%k0XqNN`*Co\Xjq!0)DXqaIQC:dL(QMA2:>H"UR>d9N7ApT/HG^lfr7U5Y2Im5f#>d[Mp%qM9:PaX>8%B</+i<"QuXIN2*7F%Njfb
%kj@2d8p$;HD;?h5Sa;8%c)<=_.pK>\>$r1I6\>R&dXYi&GB^Z9dT4i:;h9oq(_1Z-J4e`K`'OtsJ+le_Uns'^NNpikXkqoQLM0ob
%*"GqRkF.HR?SuO>1bGVsrdbesY5'B^5n7bghWZ>^]jU:O=r`ZQ`m=-Z"qB,e.ch,d`t1Z]fn`H^*J.htf]:;JjrR&D^!)Ac#GfZ1
%%M]D2c!1<:iIV,fA,>Ip/K[gK(caL#H`s>$.)B1QKii.K3B!JpXUf\,Ps5J78%lpTk>tfV0fa%Ap22fF%\rlYlrZCoTn=$Fh`fd^
%!tA+!;I$ri<H&(]ah^\uD"[4FV^V,6io-cZ)ej(A:)Jaa6>m#nnLXgqOao$&Nh81RH^C3%7>T+[BYao>CQ&"WkcZrWR`>jg^L=W;
%PMo]p6_el"HH`6(#4khi@4YJA(NTn*@+[_AAJb4FB7e%9F%Bd^S%QG\9?bn%AI`lEolCZZ*@O.G%BK+Z"(":)LFeCk1D+%PRIm3#
%]=U38E?IW+IHoVuS3)Wtb:oJ*Qg4>#Kkt3RS[<]i^N13L/6gLr9.i$=Es8tI5:&f$`(itP@&D;^@";.6YfB4Omrj]/e7>g!0d;Se
%(*IEAnmk]*3H&%^iJ*"o(&C1<TVs6!NS`LY:.3++^s_JFnh06AE`d,pOs!BWY>!689P$$%^EV,SD;O%5qjl=f":FY33eAA"PF+R#
%.)ul42bWW>A`pb$)V]6=*-U?4KucA#<9/.A65uhk7+9b+RmTf)VZ`$@EQEFGbF&u'BYaWn"os1BEj=I+fsErRUYOj#V6cPagQKD=
%cZ@U,N]%YtXg9.2L@pDR7U[c_]23l`5:m.%R8lr+F6$:<:WM]pmLUsE9O[%=kD57/kHN<]?50!q$5P'=kY:q2L0>)4dAk??j!T/k
%K3e5MP/d&/,U+j57$/fCKf0&@k!oUqn7em!_\aef([7B7aYdZ2OZiP#oGgXFrS[qR[A+kX.;9hN"5_RFCNPu@/6Q/0$Y&KsPprha
%:VnlgQU;JKUt'\Q2sH>_(V:iGIM7XDFs`!1hDC%)8?0lT6sA!V>Y9KK_9ZVln'H!.YD,p6Q,.smKg;NF-E1<NZ>$FN)\.fW`nRO*
%L<9APXNfLHS\nrpJEDcfm*\>8--:k)JG,!/E?ZQ!P7:#A!t7c^QH*%`U#/W$eBV.8DNhep0ft0(`t41t+JEpdA'hYV=UhqZVFpg"
%dG'"27=)/7*ISH-QO^;PAlYLkZpN_'D2Ct*c,rP`iE%diNfDoPmEe^^+F*=;-`Bh'A0XeH'W<Bj!c+)9lDkH)nC8nE?67jKLVXb?
%<p\:&l\"T74Q7)cR.B64U7=I_a'u9$?if18mc%`WmkD-SRk3-_O+'1i>B3fn/J4O(_d6._=W&97^`mGP2L9_Z6\(*lfJ_MjG]Kcl
%<KU.AlYO\4S0OdNMbL3,W1o?T^-fZQ\)*V#F7#*UeI\H1-MW`%0(<nn7`udQ-=X3N4ZP]Aof^SlE]u<p(\`BF(dqcF/CbF3(W7Oe
%\Icd8]/6pO>DNa$D=p'SM'B8sqJMco%<HTHMTqp,fr'[l;"Ljn=$!ec%\kUEf!4Ud^b4Xbg+UmA;D)Z@%!Po`%]<h%38HrsmkE<*
%6=L:CS(U\&OGApf^%[Eb1gu@Mq(FVTQW-e)B_1p]Rt_%0YRZK/A@<uSP_-Z/[']orl%N8^Y^AIr.ZTMFgZs%peQFH`68bS\Ml=1]
%.!f\Eq%6Yt0X>3<*_jfX="GNq,i,[,iNm=Nen[.-Ck7b3.cG\2PgYZ#aC9&2*Oq#CQ$f2pgZ^.HQ!>+U+',,Hci@X[GFY3AJ_C3r
%+Qdr<8r:2JL_A05p5b[V-6sb+A`J<(,"FuHh6G6NIm#?6P#s7pX8oj&FDuc<:9ib+kW#"D8t%deYd15MSd;"1<^_4k*22BtHH_eZ
%[4UVr"YaQ45pbO?'Um(A'E+qG$"KAk5`6OS`<kk=]]ed<,uI*eF4TW;XfnoI#!16DF_B1m]XTbt'?+9M97f08E>;A-g"n9.Dhi9J
%LHa!e]t</%(s18nd'F(0`6P=6"ORs*I&H$DE>YCcTgut,U[@6I:j$UIp3oL4/l&[ffdh6cEp#-&!5>*bkSS3B[.p[NJ#-&`3!,&!
%ZW?P_2b84)rdZjD.H2.f`Z)^0q)Ke/_q]'3_67c*Rd%4nINMe-^#,RmO"&;^Z2Q@.G$p=r[$IZ**:0h_"rqhS])pYjP%Td2h<go2
%4NF:VIrd(EY^$X_1Ebq(.m+BL3&,(hQ89AJ,]l%^p%EhF&KDl_3IELJN,*G8,"sPOTfhqpogO,jAt+)&*R@p&\)3&RBMkV&o7H5C
%!I8gP)PQP'9rl&$fGLGN23Usp;B-Xh^"Xun%8to[2]F';-DR-.h$K2amu/Zcm\HU8<:MXgB$i1O>J7Z+[7@Y+T'<>OD2N-f#e$S7
%#6cgcAl,Ma@sYOYAL;",AidAHHbXViM2!#Y&I-WQ2a2>D5d]QFa<u'If,>sn80RiY**^+gh]$tM[(SgDRB5*\mkb2JeM?jg*d0k[
%>n.KgU.CO0f]ql&N\i8d>j:jnpiVf%+3\VIAp(-.PK@!*dVF<[A#$MWHg$\TFXPZIA.!T[=@=P$7)\p)@KKVTYRJAOoEkf;NZsh1
%<q#JNZ:%8;MZ&1TN#I"3q%):T%pf6\IPi_)mg+=a")SLWA#m*5HO*7#Reg_I^J!'E5c`s:bt!M6r`,#,e;fu(UqV*)k.SHW(Wd[d
%686]acam.=H#<p)"?rp:hk4]O!^Kn^U:WpEG$sG>C8^'pSss-IWtuI?2cq<KHj&?J_DU7._i.\N70+9u,>AHJ$&VS>pLNB3FUh+s
%b%$I9%[V,o81f@N0!AEWQ]Ub"B.pqlFtaPg]sRQ&Y`2K]-=HckIkn]Se&7uL^6p^*gEfgDgIgeu3R]V"]KY,YqNQ)f/DqL!GrX<b
%k0@T]kRlD^LVp^cr_c;IE?Ir5<0m$QN"b9]Q%f_ZF,cU6V6`I_&DD"D0:Pe=N8`P3)u\aWosLP[<M5urgKXZ5%5tP4:(h#>;R#\"
%T.$B=Zi3Xl)KJi;Zp]t7hVE#_hA+MDOCCos8"lN3d3^b\]f$$'bL3L5ohbN$;6a*X3OF'UVh+GXetV0P=/T!`4K.*AG_,r.`PF:[
%Gmm-/4R]6-.X^lP7dob&KU+1Rm#"][Cc_M,lGP.uQ_qi-OQ=:/CD'&Kh[!6b2RB_jDt!F20bcacV_iOU6uBaC3#%e!DMB>EpGN2e
%)1!f9ZU7r@G;_%X$SS!-_RO*=1aR6h'h(P;R#Vmo,`!Mi\:cgrOQ8N>o^6ULPYNSBb$48,XF3A[VS1[)W(<[m_P&d6o!7nnGd=1:
%iN1;YH_#b+kfo&m9q=7u#=\%uf*M5=rJZL+Op%W(VU9j+p"k-JoV1HT%%Bj-`lmsrfVo%o8R8oS,$7/iFufqmF_LC7:3T9APYR3D
%-k1tFfiH2i.Jq^hBZ5R!Bo^,JMh!p83YYIV[X*;8a6:b6!f7_;`X`8>Y19Wuh?5>UG;XLU<$g#FL-YF*e[t\f6>*$MnH>;00CFeK
%BU5<UTU*:0damCF,ge3D;e`La3,A$W/fV;Io"$G6>s"`<U?d]**c4P1Y`XS_nL24Ha%#Oc2F%`M$!dT6IBcBuct\l?N,0>(:T*QI
%%GSe5bY\Cidd#Ze#'rNkrkMYgL8r*$0\LIojMoUf_n,:laET;2BJ?WlQ$-j4p.d!O8OW^;-(:LM.7-Va@>pWq@_]_@(:8\'Cka_m
%R?WCe[!HZ*+)kS*nj:(W!lI6Jirdc4(k`TWZ='(@Ir:(T0N0`/F_=C([>BQN25IQAOE!PE[n9%#dTr4U3ju')Pgo"uCe08FOFlnk
%3?3(kXOi>&>Z%r<fJDfGfM"3LFKQ-K`j8]5M1mb6WjKi+)^[3FcYe7j`mggb&^?6.L$akB>Y;p*fVfj87]e6,Tl(kQT.@X@ThD<!
%:@;9e+?\&#0j/qR_Y!K8[\*#k@>AP@e(S0sr3`TaQU=P(fPeAJ):sHLX%Fjj]+s#8_)9='ikGHTB4_PYklC9;r<k4[%RKt$,0X'(
%XCE(1EeduW:J3$.UKgrb)HH&#NhsL&oR4q&;>.0ilbB_R\PjmU)aVY#iRAXea^^U<+MtDslug[*+u0gbARe\N1T16VT'ZKtJTOcm
%8Y`\OCc>EfDjU4MP$*':hqe\ta];ZdW7$HeKdunica)\d5gBjg4-m6ZMf[4Cs0Go1b?&ZQf_teYrF(61p(p*5UCr-IC1tMm3C)U1
%B!uN*BjJ_M,lo^^<I"QWEik[Qff/Y".L#f^S!:,eVX9'/(hPL]d'ar@9+B`1q/"Pb(rjmO4_/,$<BdLc,r.S$PdZk0]:>HIWRf`C
%!!/4hA*_\67Z6Q,^p5a_J`H8RNZ*dI&-GDVBW'?SHe);;^>3E(X`61*fJ!*7/UCoqe"H[-?eiN"BsEY3+-kZJ]=feYl,@r&D5n(c
%C0+'!D*S'mf`^YKoJfX\k7%4]pn&%hd0EJtOIt$+Jn@^k<o^LPct;TU]bHPc;I;>g>*QVo0XJ<^emhKsLkTlT^2[N$;cFYaA-moe
%LP/l`3aR,M_<2c(%_^B/fH8m5s6^85j$,Zu5.L@0)tEY=hWa4\rF$_4&&7o4+(1l%[Jl_h_o5^<[14Cim:qWZCk9e4Mr.Bc4e&:;
%>maki/lo3!1E*+&Soq-WU/3ncdPb'4lJOS,]=*CJ.\:PGf;/i!n`fE\K=+KI)Q<7]U;kdFkAU0MO*i]"Dm',]E;1A859P@+Pp(E7
%<PNuZ^,/LBD+POEN="c1m29&*IMN`dLc]bo5(jHQN'K1].'FMc0sj,g%o<&=V`O.+f@XS]nqVY-=$J`HA(oSq$M`5,+N6X^<$g+u
%YoW/<5iD'WJ0Zmol@LJh;ZWZ]\%KCR($!]1ka,^,Yne6V_I\N;<'5?o`s-h`.NIM>?cI`ro]u#@:VP2B^/)fZ!194-8o45odhEe"
%gJ^pt)4E\l?Mig5^R%iR/$.m0o&o61TE9T3=s?00l-2O;B-Vu[GYV05*T2oGLWH0Y?hd*'YOhH,rQ#AOQ02N=brU15V1*5$0mbsN
%Mmfj)-9F=6rnZD4-nhsUh6%!Y5Sd5dG&8u.o>uW6A2W^8`0#MU9AZ53maQ6Pp3lj_&):bo9NG]R^b$.M!q^6T_6i$e3X1^"UdQ%l
%+?1<T6k=jsBj?7<IW[U<PCMn>%2__RY2K5!PQb&-+3qHB53/WF_EU0Z1B'I5^5d^Aj9pBE@KVo?ObL1&H\6Wa#cf<(:d_*^$P(lO
%6/o>]0S`1*@L%hXM68is)A%AkUb</J=c`'-L\o"jY4UueA$pKq)Y(_N;,EAB>ERlQ<'fF@cEoUQ"ah62M@C^_M94eeU+07'jCt21
%TIC#=JuH[Z_dIYk[!PWWbC@sbo79)R*WG$6(ZN+E?AZG3nl"Z.M*59lVR1WHB/H!9$@Ohe:_/M)*lMAZMK-lXZU@`8=90Y,:*/DS
%h`g4FT[3MQ5<RRC2tD'_^,/U0)IV?=]$`)s%JA7[l&2J[]!Mllnou!e&:R-rMeBK*/\m(`0Kj9&&]l#boS&DglOj-cE1_CHQ!SlI
%XB*Nkj16).W3KO.EpPObkpc.?!FAQVj2-,e3B5#'[TS-iP=-0Z!0GDSjP/U92>V\Ke-Yj&V\U(':1`jf<Y:hV20eKLq)G"\%KGqU
%qr$<]DrbOorD$_p8g&.%Ti+29-[6]Z"4%Zl"ULJb5hAdM3kg?2?S=X.h24%<8hQDY^`85TEGR7nkn!XOkDKt\J-eJ-PfGt9J,2l7
%qp%DgfR)J%V>ou&@rLjj0//@i4Vc%qf3g;.&2`D-\=BAtM=OW3X;1e7LL=GAc,,]T6,]BBcMlC_/ci9Y@oI+BD&.j&O,ncR*UM6m
%ndge)PW(hZ<=\AJSc.!H<p)20c8us>.4CU.4iic90.;YA2"2o/A)0o%6O:)N7:&n;O7n<jCeuElRB.A[L!AapVZJS9';.jp>?T3M
%,6OL>.<*e@VF=%foJUdS2U9jCEeV"N7NspE[pKfJXQ>W=GL"SV@)pgW&t!<:UXL:q=2c@9.mCaaN67K,G3K608J3^*X(`(@7IRo!
%8*B/l+>aNQ%$<$%:-R&#epI6:q1hI)-#UHh1"jA6T+aH(oKgm?Pu$ZT4T/.Qr`;;L(Y7f%X?@euW!3JP?!Oot\hHV,$NP9:ZkaAQ
%jA(=gY<OP\mVUidS$i'J/sSDKe^NE4$'Fe3#:eYU[$qqhB0Ne`.2;&D2GD5NP"_aPT8uH9PgkDAbLhSl#ar$ZCS&lEe)B4,*ZPaH
%HYH$t^nj>*"':6=$Sqqt-X!$VRu@`iAVVr!kQikP_/rk-^R.t>7R7^7J?'al&>7cXdcrB?bbYtdp'6<0Ylpam$IKLkQo-:k;lh19
%8l-:lA<)I1?O^gCRhZ3t[2N4KZI$F+9"hBUNs=\qUfu;R,[4/J\3V='Gf>7k4?:hb7d5;pSW5&snE>,"2d[J#rr1'-U4Gt4b1F<^
%Y3.SU&TIhsqnkg/fj#'6-Bs`@"U;HYeMBiA^Hh@eRahBopCIM&Q6lgOTLF`.n=TlqBX#UBh,;95WlB_8gg)E[OqlXiiF2tpQ=;tu
%Y"-AL"c'$#AoN\nf69EmjQT&o*t8/-dG_mccOU;1I;)7Ipa_!fKis#u<4NZ0mDT5*b:"91?Rb&2M]hDDCuE@t9\>Y<0CdaJ^Z0_l
%kDAK$hQ!S9=i,d0B-sl0pr@`FqRN:)qkXO9PMdI?M9,e-*lU*]^.LCV&:)_0UuInn53qg4%Fb,83uuVUJ,#-,`Qaa(PRUk8<&S],
%=OFp\Jc3Gj"`T9[7%D^gcNTnTc<t-qUDUZ$M?VFJ:<h^bD>t=9S*W^CV&3%Z'\MkT`[?D,'\i*&-h9cY^i&5'FRsm_SA#L5nE:8M
%jpSAGhd:Z.e*f\&<_jE[k9_GH;c%(mi([d^KYYIg<@Uk<"LsUMZIkaKb(T!M+sY@0j*E:FZHDA<\509-E86;%=OSIqfL,pdGS;>V
%53_7`G<13o?@VU$Gk72%63C:ql3lK`IB%%[i(<<<?,h['DQSLo:]]m,HEa/(?45\&D2'>dY5egV-#psQSIbC-O77p[qnuO<o]cfo
%Q%9gG4UB3T::63O'XqTT^W@Cj#TrfQC@EqYU\n0Gg&^9\&T/?B.@0h#4m79l:-6BY4P1qil]k4n@AH06-a,%PSgmO[&J'\Z)+hFc
%Qe\'YF\*]YZ3h(4Pu*+?bCRk]5lf>`7>n:'3;/=uV]PN-lbeJ`:df:"XInYXIJQ/*_kV.gYB&Tmq"lR[on>'<;?scb`Gtr3^8tN)
%!oVZsKIML:/D_g(+RHHoTP<J\!Y'/O:mW;c8%N>1!W2CIk9GE/+91<)*q?R!hkr,d;e`E0J<][[bs'JSd8PDobSDhI0+g("CE+_Q
%rMR,KcHuZs+98p\?<\U96H/7FWqD:F0$"W:EDQ\@X_K<krMefHf['//5(+ONiSc_).i7'!^VB>??hdOL9[hKTNl:^qaokfKQT"P]
%mFP\%NqIQGH9e['lH)(_Wep0>,cW5@H8?ou+O@'#!I9\41Qk`>cT6COWD6fVIsCUNh@B2l0D/pd4S)_e_2V8[BLMn,oV&WD.O,]@
%]m#t[aWa-?%a+%_5m8GsMs,TFHgTb@(4>Fe8AnS5MtiCAJJNTa@!W%4Q!5Z7RAqeAMk<?ppnXP\bC-)<.ksCS:QH9<]l=Z[LW+H:
%@fsW<0+8;:EFj+arGNUD@mIJ)V4=Ae/=L-8(9lqP4[H>k'5C^8.D3"YliX[YOfo4LW0HE5pNc6cX107DoAe_V.]WaQE09%IaQVl(
%nIH/E)"50-C-VXH^@'6@_W[;F@nBqnY5Gls]ATLFb7QS-mPJja>n[J`VN[&2(A!#H/7M^7jXB3LTu-pW'J*<u28SH/Tb.DgaS*q`
%MWu6;f5U*:H`m#4+^oWld6Za9cOUCFnasW0mjbM$FuE;P"GIk2>tEC4CW$k,D2c.\W7nf+S*M"N$A**E'Ik;77i+ALpnT#3l=jDU
%CJTBOdhh&2GkBO2o9G[>i@jqJmrgP0f(U<`X[5r0LHu[qq7+SqC>'07Gl_k=NBu&%6Ur$]WCL*+#\sJ5_;g@'UpLHdD(7hO`<&FS
%W?G\3iD'@poq3j"/QN(fgbZPNLHfZF_kl'^@*dG?;cK\kK-Ho-GC7GZicIG"U-1Q5@6He;W,1Df@HBR55HsUec`gn'2QR$YATKB0
%cq9(<X.r1#Imm(("MRlQf#p]c68(^QMmj>gAJ"(H!MtQ>q\sd`+=mboR7V1kE9Y3,+B*bEYo\C#r9MqqUKMYUref"mPGhi\bqpWI
%2jDO5X;B'cHu^OH=EFg-,8F.`&0p-N$3hNkk^DXkfdG`#*rRM"q8-e'n#q,+[=N+cL(-9FESbi_nBJnB_%Nkal7<LLQ!`@nU0msN
%R=tf7YtJ^rCdA16Hq,3_pPuBPP\&_L\T]&6GiK?nVO8A6?to[41l<J%1hM!GK^:.kXUVRZ?ZSD%+TN=HQH?V9*#ifa.YY4<I*YrF
%5,b!-Nt*[Y^+up1i7Xgc>?i'$GMhWgci_d-mU>Ba%GQCK/2]/-c*Xq$XNdq,/PJJok(n1h:EgR2>)!$]TAB7`L5j0OJ^Phd!^;e2
%Ti#:;YoPfuQL,!#'_f.0l7k96V*iYAa>nLnCRS^EA/!f47&$=J[nKpMZ2=flM*aMR3-ehX2G!;MeK;O4c&G6.MJ\R?^Pf4hB>4l4
%il\`="'<4^qlUhEVK6G5;5_d!j/s.RRS3-tY2@:"41"1SA(?so4ep#\g63qDa^'rqac/@KUo+DEXOkXg#H!Y"5dO(8Q;6>->A1qp
%48Q*9pN0X[^jU$04EI,:)`DYHFP_6(PjFPR&6uO\0:l!n<.Q+9Pf:%G)C!..Yr"L$eEdlT[n2@EjgJ"A.Y8HN$)N`%$pFd`+H-%7
%,]HAaJPD,7bEUkO5Fcle?"_FHR!:YT1b*\HSfS\lin9H>h\cOL:d#GbAttG&F&F#CSC#Q/4XqjCKci4Y;*r9QhM>1kN17nI#?Q<h
%iTBYjn+tF-?]-#cYnuH&='k9B^D_4;U_Gn,W2B7YU'_()_@l/i>L/1#:"_jd$qr=Lfq2dsin're8L;<DNmE"&YBKbGr559_`c(nT
%X1dt'b>[TZbMobT='P'4`>*r_c8;B[6*LO,E0,*=C2K8)g0cTDH)B'S@Be,]-(RobWp%kp).#[#62XbUr8tpa'>g9\;g6g;GQ$a'
%UV`)kkd[j^$R9/WcdQCq^9_G<P2P@EijiHdDSRntoh->Qj@ohj&>?a66\S7QFW<lS#N5P<N2)ZOc^sa2TDeDi#a]l,`I..'YP,\;
%D06tW%OL<8BR(L_(L)F'=N<eUgt2nVQtABGYG()Y\5>sIdc!#n<@X,W-C#h?*7I<>.6g%bQ&aQVlfB[g=eZsO>tB!B3oc!%^?[^B
%*>JM3Z!lUn<sFBrcO3,3^2mm'K4-HPKfW,2eCKkr''J16A?0H7>^Ur1P;.YMht2l]"$u8uF(Z=Y[`m-2?Jq"ZhL=F+hm5`FH<`?S
%3[+JG'Bn)lGF^OfK>Ki83\7r>l%(Qir;!%3[lJNP-WEDiZ0p,S5VF<tT1$]?X4(<_.f&aR^9"2s-tZAk.C_etOpe3U-LMIb1u#iY
%K`Att7m/@J?DeEX-W@c[V6hW+r389S92nIC2Wn]c^urVP5<LnZjC5YR2#R<;_>0d-o[RGm_K1t<M^3>s"D=Ar$K7DA&SMb81L9':
%lAgEp5o,tno4fGA35:T*'g7J#S<k9l,:Csi*Tphb9GXh%?*lpBOt&W[A[cg@Z8K=^FkJ-`H<Jo9C/6BH4hfu=:V)`E2='42UZr0^
%r4&2]lfjNh2;PTKqp'8+?&r#&#LcIgQ#K$XV3hFQn2rH,`@A's&,MgHR+5fJBAAq%']3*@N?',5^(]]%`V>2n?S*VMdkCI0?`jlN
%R?Y$9>.C+C:(f[*ed3K>g![\"nm]->5bBiJ!<uU/O<T&`\TDIC(d*"fr^XtdYih\)?X$;O1&u/lp]!oPEpVojhgHBoJU@s)F?1s=
%DY;AlR%EZtU#E>\%*jpXS$*d#'*a<82B)c(!$r2-6l,_FnZWuGb2^R+Rn\+r)H8)([0`inGF71pN6N]p<<LZ`[U!>WW$+fV208ej
%5XIabP_gSsG1+QXh(;A,L"@CdQCnV2G$n!Fo(:;Ao-luCCpm@fh7XV3<a?9"30Kgb-"&%C%*__t+m2ZuT?W#.,>\E[3V_0#*q[1E
%`9E3U&!+Dm$%&:n\bGuAT=HkU).ln?C0:ssiY'Br%^NJgh+0^ejI$t]^UPPX"`0?\.W'CHs0&uI]f(eKJ.IN8Bi3e(C,\DD;s_%t
%ko7K*/MfO9=_@W@:SrB0(c'PFjG2R+&AY)P,!1(l0CUN_%0j?N*ZP[HHY#I`[.+!TR-*B'5rhuX]Tpti][Al>G1$8HH,:!V8"u=[
%)pj]u#@nB+F?9f5>dRR,g8h0W;L%9I@%3\?rXp'3N9];->m(I>01dBh\r\s>J_--Rjg<Km5oF>H2GdA,D_n@L":C;;V*B7C:R8O7
%_%'gcg0dW#`DZfT'VKU4Xr-I5R]FCO2q'1l!_16n8Dp1n;bAc8L/?!ha3n9`C*SGLa'7_;$r&<Q07g-"f??a-m,k2fe8k[%_m3&+
%Y7c=selGW8Y&1lel,FCDD>=+Y_gUhg[E_85#bf+iU6=8a7WD2N+reeqhrYu]7&9n!,[C+@@F`RO8]\!>5'=S,cJIH,o<W",T"7@.
%MLd5.X3\-;3+!XXA.4CGLQ`96W0\;@-"Ji"M_K?-b9C)2RYOUb4E9b8\!`Z7/kiZ.;f4<(dUq'AM@fMsN6YmHX8sK=3"X1Oh_ofE
%s1a5=e8.]E<,4>FbhQtZf%(ZbA;?L3+@DgLbfOFkl^(W=,_/DiG_TT@O[LN*J;Uu>-0/_MO;MZej<%/d<-)<SWf?I3s5$2n",Uiu
%WNnj\Bh0"a@QUDt*@8Ip?NVDI,g\&pDM9e7j1,VU?r=!I3M`8Pm0r=BWqp>\JAP?\GWBK88"qi<?CB-5;o(8uDD'JG;*L.bIf.I%
%m!eoBo65]ULYmOXmJ"Bqj"Gnm?MO?ro%SZjrVul;hu<5^r;Mc7r9U'TmC0:6s7"c-quI3!p]'^YV[rh"a5?pOTDnME^]3eAs6X1n
%N%=[#s2!$2r\o?,5C`:2ru\A&Bta~>
%AI9_PrivateDataEnd
