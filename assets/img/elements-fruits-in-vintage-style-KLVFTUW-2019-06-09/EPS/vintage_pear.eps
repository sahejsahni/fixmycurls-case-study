%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_pear.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/11/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_grusha</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-11T23:18:58+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-11T23:18:58+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-11T23:18:58+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6xnNu4dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:DC82B6B5C5E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:6BBBE47CC6E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:f0464095-03d7-fa4c-8550-e06051c8a1f4</stRef:instanceID>
            <stRef:documentID>xmp.did:4232F49441206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.878431 .745098 .545098 rgb
f
485.422 820.479 mo
435.875 825.494 400.758 808.42 370.188 783.178 cv
313.665 736.537 292.821 681.506 301.536 617.174 cv
310.43 551.494 345.993 510.279 363.083 490.471 cv
364.938 488.326 366.586 486.416 367.961 484.752 cv
368.196 484.459 392.219 454.986 411.696 405.943 cv
431.743 355.459 459.063 303.861 509.813 303.299 cv
513.012 302.26 524.637 298.811 537.813 298.811 cv
550.371 298.811 560.68 301.904 568.461 308.021 cv
576.102 309.521 606.18 319.377 631.859 382.904 cv
637.652 397.225 642.57 409.893 647.074 421.498 cv
664.203 465.643 675.523 494.811 707.07 541.545 cv
746.273 599.619 744.977 682.596 704 738.834 cv
656.781 803.65 607.898 816.811 582.273 818.252 cv
542.754 820.479 534.797 814.174 520.488 815.475 cv
511.652 816.271 492.321 820.479 485.422 820.479 cv
cp
.27451 .207843 .145098 rgb
f
371.852 487.963 mo
371.852 487.963 396.352 458.271 416.391 407.799 cv
436.43 357.334 465.008 309.83 512.508 309.83 cv
512.508 309.83 546.281 295.729 566.32 312.803 cv
566.32 312.803 598.977 315.029 627.18 384.795 cv
655.391 454.564 662.805 484.998 702.883 544.377 cv
742.969 603.748 732.578 684.471 694.723 736.42 cv
656.871 788.381 610.484 808.045 575.594 808.795 cv
540.715 809.533 528.461 810.834 502.488 812.311 cv
476.508 813.799 421.586 814.537 374.825 775.947 cv
328.067 737.346 299.305 687.436 308.954 616.182 cv
318.602 544.928 357.75 505.037 371.852 487.963 cv
cp
.85098 .839216 .309804 rgb
f
530.328 311.314 mo
530.328 311.314 537.008 307.6 550.367 309.088 cv
563.727 310.576 561.129 316.881 561.129 316.881 cv
578.57 316.881 582.281 326.529 582.281 326.529 cv
579.316 326.154 574.113 326.529 574.113 326.529 cv
581.164 326.529 584.133 329.502 584.133 329.502 cv
575.965 326.9 568.922 328.014 562.609 328.389 cv
556.301 328.756 553.703 329.869 539.234 328.756 cv
524.758 327.643 524.016 326.162 524.016 326.162 cv
515.617 325.486 508.207 328.236 502.609 331.447 cv
495.836 335.33 491.727 339.889 491.727 339.889 cv
491.727 339.889 494.696 334.322 500.262 330.982 cv
500.262 330.982 498.036 328.756 489.129 330.982 cv
489.129 330.982 494.688 327.643 500.633 328.756 cv
498.407 327.643 li
498.407 327.643 499.516 326.529 501.375 327.275 cv
503.234 328.014 501.008 329.127 503.234 328.014 cv
505.461 326.9 502.488 323.561 502.488 323.561 cv
502.488 323.561 502.859 322.822 505.836 323.561 cv
508.797 324.303 507.313 322.076 510.648 322.822 cv
513.992 323.561 513.992 322.076 516.223 322.076 cv
518.449 322.076 519.563 320.221 519.563 320.221 cv
520.676 316.881 li
520.676 316.881 522.156 314.283 523.648 315.768 cv
525.129 317.256 524.383 316.881 525.5 315.029 cv
526.609 313.166 527.727 312.428 530.328 311.314 cv
cp
.27451 .207843 .145098 rgb
f
461.665 802.666 mo
379.282 798.213 329.801 719.732 322.008 658.49 cv
316.137 612.361 330.618 565.592 354.04 533.236 cv
377.422 500.951 407.625 469.752 431.977 405.572 cv
459.434 333.209 479.848 329.502 479.848 329.502 cv
479.848 329.502 455.543 351.291 440.141 396.666 cv
426.407 437.127 400.723 483.311 368.516 527.115 cv
340.68 564.971 316.868 636.471 344.024 698.018 cv
366.29 748.49 377.422 758.135 410.825 780.4 cv
444.223 802.666 461.665 802.666 461.665 802.666 cv
cp
f
647.965 458.646 mo
647.965 458.646 659.098 493.158 684.703 533.236 cv
710.309 573.322 730.164 629.295 710.309 690.588 cv
680.617 782.252 601.945 795.986 573.367 797.1 cv
573.367 797.1 664.109 789.869 693.609 670.736 cv
703.703 629.979 700.02 576.619 680.195 537.709 cv
653.531 485.365 647.965 458.646 647.965 458.646 cv
cp
f
483.93 377.33 mo
483.93 377.33 485.825 339.537 505.305 337.369 cv
521.047 335.623 512.75 353.174 504.383 362.467 cv
496.02 371.76 482.075 399.639 482.075 399.639 cv
483.93 377.33 li
cp
1 1 1 rgb
f
523.273 413.373 mo
523.273 413.373 523.266 416.713 521.414 415.6 cv
519.563 414.486 522.156 411.514 523.273 413.373 cv
cp
.27451 .207843 .145098 rgb
f
518.074 428.588 mo
518.074 428.588 518.078 431.561 516.223 430.814 cv
514.367 430.072 515.473 427.107 518.074 428.588 cv
cp
f
537.742 382.568 mo
537.742 382.568 537.742 384.057 536.633 384.428 cv
535.516 384.795 534.781 381.455 537.742 382.568 cv
cp
f
525.129 395.928 mo
525.129 395.928 528.102 396.678 524.016 397.416 cv
519.93 398.154 522.902 394.814 525.129 395.928 cv
cp
f
547.766 385.908 mo
547.766 385.908 549.617 388.135 547.02 388.135 cv
544.422 388.135 546.281 383.682 547.766 385.908 cv
cp
f
537 398.529 mo
537 398.529 539.227 401.869 537 401.869 cv
534.773 401.869 534.398 398.529 537 398.529 cv
cp
f
537 414.115 mo
537 414.115 536.637 416.713 535.148 415.6 cv
533.66 414.486 535.512 412.264 537 414.115 cv
cp
f
545.906 365.869 mo
545.906 365.869 547.395 367.721 545.539 368.096 cv
543.68 368.471 540.34 364.756 545.906 365.869 cv
cp
f
540.715 428.213 mo
540.715 428.213 543.68 430.814 539.227 429.701 cv
534.773 428.588 540.715 428.213 540.715 428.213 cv
cp
f
526.242 439.354 mo
526.242 439.354 528.102 441.947 525.129 441.947 cv
522.156 441.947 523.273 437.865 526.242 439.354 cv
cp
f
537.375 437.865 mo
537.375 437.865 540.715 440.834 537.742 440.834 cv
534.773 440.834 536.262 437.494 537.375 437.865 cv
cp
f
548.875 345.463 mo
548.875 345.463 549.621 348.057 547.766 348.057 cv
545.906 348.057 545.906 344.717 548.875 345.463 cv
cp
f
536.633 342.861 mo
536.633 342.861 537.375 345.088 535.148 344.717 cv
532.922 344.35 535.148 340.635 536.633 342.861 cv
cp
f
533.289 362.904 mo
533.289 362.904 534.398 365.131 532.547 365.502 cv
530.695 365.869 531.063 361.049 533.289 362.904 cv
cp
f
530.508 455.865 mo
530.508 455.865 533.848 458.646 529.395 459.205 cv
524.941 459.76 530.508 454.193 530.508 455.865 cv
cp
f
545.539 445.846 mo
545.539 445.846 547.766 449.74 545.539 449.74 cv
543.313 449.74 543.313 444.732 545.539 445.846 cv
cp
f
565.02 384.053 mo
565.02 384.053 568.359 387.947 563.906 387.947 cv
559.453 387.947 565.02 384.053 565.02 384.053 cv
cp
f
562.793 370.135 mo
562.793 370.135 564.461 374.588 561.68 374.588 cv
558.898 374.588 560.566 367.354 562.793 370.135 cv
cp
f
460.368 812.686 mo
460.368 812.686 487.461 813.061 501.555 807.119 cv
506.977 804.834 513.133 802.057 517.148 801.553 cv
523.57 800.732 527.141 803.322 533.289 804.893 cv
559.453 811.572 587.844 808.232 587.844 808.232 cv
587.844 808.232 503.414 820.854 460.368 812.686 cv
cp
f
524.016 326.162 mo
524.016 326.162 541.078 299.436 555.926 249.709 cv
570.773 199.979 567.059 191.818 567.059 185.131 cv
567.059 178.451 570.773 177.713 575.227 177.713 cv
579.68 177.713 580.418 178.451 587.098 180.678 cv
593.781 182.904 594.527 188.104 590.813 200.725 cv
587.098 213.346 583.391 222.99 573.738 255.65 cv
564.086 288.303 546.281 326.9 546.281 326.9 cv
546.281 326.9 533.664 329.869 524.016 326.162 cv
cp
f
529.953 323.561 mo
529.953 323.561 533.289 318.736 543.688 294.615 cv
554.074 270.49 564.094 230.408 567.434 216.311 cv
570.773 202.205 570.035 192.557 571.148 189.592 cv
572.262 186.619 574.113 189.221 573.742 192.186 cv
573.375 195.158 573.375 203.689 572.262 207.029 cv
571.148 210.373 564.094 238.213 559.273 255.65 cv
554.449 273.088 547.77 290.154 542.57 303.146 cv
537.375 316.143 529.953 323.561 529.953 323.561 cv
cp
.741176 .580392 .403922 rgb
f
gsave
416.391 571.096 mo
416.391 571.096 402.93 548.799 430.493 499.096 cv
457.821 449.807 464.915 405.736 469.829 385.533 cv
480.36 342.275 494.918 340.26 505.508 340.334 cv
520.5 340.447 509.969 354.99 503.969 382.568 cv
497.985 410.143 497.075 437.127 491.532 486.967 cv
485.989 536.818 491.946 557.717 472.758 576.971 cv
461.157 588.619 423.969 590.811 416.391 571.096 cv
cp
clp
486.528 339.525 mo
486.528 339.525 501.152 350.76 537.344 346.146 cv
537.344 346.146 499.868 355.271 486.528 339.525 cv
cp
1 1 1 rgb
f
483.055 344.889 mo
483.055 344.889 497.68 356.115 533.875 351.502 cv
533.875 351.502 496.399 360.631 483.055 344.889 cv
cp
f
493.438 336.244 mo
493.438 336.244 511.211 343.236 531.102 339.369 cv
531.102 339.369 508.797 347.436 493.438 336.244 cv
cp
f
478.891 351.396 mo
478.891 351.396 493.516 362.619 529.719 358.014 cv
529.719 358.014 492.235 367.143 478.891 351.396 cv
cp
f
473.602 357.572 mo
473.602 357.572 493.954 372.252 536.383 365.877 cv
536.383 365.877 493.125 378.596 473.602 357.572 cv
cp
f
469.489 365.189 mo
469.489 365.189 489.836 379.869 532.273 373.494 cv
532.273 373.494 489.008 386.221 469.489 365.189 cv
cp
f
467.211 372.35 mo
467.211 372.35 487.563 387.029 530 380.654 cv
530 380.654 486.735 393.373 467.211 372.35 cv
cp
f
463.821 379.564 mo
463.821 379.564 482.461 397.287 527.367 388.201 cv
527.367 388.201 484.981 403.869 463.821 379.564 cv
cp
f
461.563 387.092 mo
461.563 387.092 480.2 404.822 525.105 395.736 cv
525.105 395.736 482.719 411.396 461.563 387.092 cv
cp
f
459.282 394.252 mo
459.282 394.252 477.922 411.982 522.832 402.889 cv
522.832 402.889 480.446 418.557 459.282 394.252 cv
cp
f
458.895 402.076 mo
458.895 402.076 475.325 420.279 517.281 411.697 cv
517.281 411.697 478.911 425.689 458.895 402.076 cv
cp
f
457.043 410.33 mo
457.043 410.33 477.528 427.975 515.352 418.096 cv
515.352 418.096 481.829 432.615 457.043 410.33 cv
cp
f
456.247 417.428 mo
456.247 417.428 476.309 433.975 514.133 424.088 cv
514.133 424.088 481.04 439.705 456.247 417.428 cv
cp
f
455.051 423.795 mo
455.051 423.795 475.114 440.35 512.938 430.459 cv
512.938 430.459 479.844 446.08 455.051 423.795 cv
cp
f
453.852 430.166 mo
453.852 430.166 473.915 446.713 511.734 436.826 cv
511.734 436.826 478.641 452.443 453.852 430.166 cv
cp
f
448.461 434.127 mo
448.461 434.127 470.633 456.15 514.281 443.775 cv
514.281 443.775 471.645 462.053 448.461 434.127 cv
cp
f
446.188 441.287 mo
446.188 441.287 468.36 463.318 512.004 450.943 cv
512.004 450.943 469.372 469.213 446.188 441.287 cv
cp
f
444.602 447.299 mo
444.602 447.299 466.774 469.33 510.422 456.955 cv
510.422 456.955 467.782 475.225 444.602 447.299 cv
cp
f
442.68 454.072 mo
442.68 454.072 464.852 476.104 508.5 463.729 cv
508.5 463.729 465.86 481.998 442.68 454.072 cv
cp
f
440.735 460.475 mo
440.735 460.475 462.915 482.506 506.563 470.131 cv
506.563 470.131 463.922 488.408 440.735 460.475 cv
cp
f
438.446 467.268 mo
438.446 467.268 460.618 489.299 504.266 476.924 cv
504.266 476.924 461.633 495.193 438.446 467.268 cv
cp
f
432.555 472.553 mo
432.555 472.553 455.368 500.49 516.18 481.768 cv
516.18 481.768 457.911 507.439 432.555 472.553 cv
cp
f
430.102 479.904 mo
430.102 479.904 452.915 507.85 513.727 489.123 cv
513.727 489.123 455.454 514.799 430.102 479.904 cv
cp
f
428.782 487.768 mo
428.782 487.768 451.594 515.713 512.414 496.986 cv
512.414 496.986 454.137 522.654 428.782 487.768 cv
cp
f
426.36 495.678 mo
426.36 495.678 449.168 523.623 509.984 504.896 cv
509.984 504.896 451.711 530.564 426.36 495.678 cv
cp
f
424.489 503.561 mo
424.489 503.561 447.293 531.51 508.113 512.783 cv
508.113 512.783 449.836 538.451 424.489 503.561 cv
cp
f
417.34 509.83 mo
417.34 509.83 438.235 540.643 510.938 521.752 cv
510.938 521.752 443.594 548.201 417.34 509.83 cv
cp
f
414.93 518.295 mo
414.93 518.295 435.833 549.111 508.531 530.221 cv
508.531 530.221 441.196 556.67 414.93 518.295 cv
cp
f
413.063 526.182 mo
413.063 526.182 433.961 556.998 506.66 538.107 cv
506.66 538.107 439.321 564.557 413.063 526.182 cv
cp
f
410.079 534.115 mo
410.079 534.115 430.977 564.936 503.68 546.041 cv
503.68 546.041 436.336 572.494 410.079 534.115 cv
cp
f
408.18 541.451 mo
408.18 541.451 429.083 572.268 501.781 553.369 cv
501.781 553.369 434.438 579.826 408.18 541.451 cv
cp
f
406.864 549.311 mo
406.864 549.311 427.766 580.123 500.469 561.232 cv
500.469 561.232 433.118 587.682 406.864 549.311 cv
cp
f
404.438 557.221 mo
404.438 557.221 425.336 588.033 498.036 569.143 cv
498.036 569.143 430.696 595.592 404.438 557.221 cv
cp
f
410.657 571.428 mo
410.657 571.428 430.086 594.51 482.336 579.334 cv
482.336 579.334 430.946 601.158 410.657 571.428 cv
cp
f
grestore
gsave
456.258 800.24 mo
456.258 800.24 373.758 785.99 339.813 709.701 cv
318.446 661.678 323.168 610.307 337.586 573.877 cv
348.165 547.154 382.891 508.158 406.008 464.236 cv
428.274 421.928 433.852 410.174 442.758 386.236 cv
451.665 362.303 479.508 329.236 479.508 329.236 cv
479.508 329.236 456.551 377.541 448.758 406.486 cv
440.965 435.432 415.446 498.127 386.579 554.947 cv
351.504 623.975 377.766 730.092 456.258 800.24 cv
cp
clp
370.25 761.85 mo
370.25 761.85 400.676 774.459 444.469 770.006 cv
444.469 770.006 402.172 779.662 370.25 761.85 cv
cp
.27451 .207843 .145098 rgb
f
357.625 752.193 mo
357.625 752.193 388.063 768.529 441.504 762.588 cv
441.504 762.588 396.598 774.834 357.625 752.193 cv
cp
f
354.446 746.311 mo
354.446 746.311 391.938 759.951 432.915 755.111 cv
432.915 755.111 397.719 766.045 354.446 746.311 cv
cp
f
383.61 772.232 mo
383.61 772.232 409.958 782.252 441.129 776.686 cv
441.129 776.686 409.211 786.342 383.61 772.232 cv
cp
f
386.946 778.549 mo
386.946 778.549 413.297 788.568 444.469 783.002 cv
444.469 783.002 412.555 792.646 386.946 778.549 cv
cp
f
399.563 784.854 mo
399.563 784.854 420.305 793.9 444.836 788.873 cv
444.836 788.873 419.711 797.592 399.563 784.854 cv
cp
f
346.125 738.834 mo
346.125 738.834 382.868 751.455 424.43 748.115 cv
424.43 748.115 390.665 757.396 346.125 738.834 cv
cp
f
339.973 730.361 mo
339.973 730.361 376.93 744.412 418.493 741.072 cv
418.493 741.072 382.868 751.092 339.973 730.361 cv
cp
f
334.161 721.502 mo
334.161 721.502 370.868 736.209 412.485 733.596 cv
412.485 733.596 376.688 742.982 334.161 721.502 cv
cp
f
330.454 713.709 mo
330.454 713.709 367.161 728.416 408.774 725.803 cv
408.774 725.803 372.977 735.189 330.454 713.709 cv
cp
f
324.516 704.428 mo
324.516 704.428 361.227 719.135 402.836 716.521 cv
402.836 716.521 367.04 725.92 324.516 704.428 cv
cp
f
318.579 695.521 mo
318.579 695.521 355.282 710.229 396.903 707.615 cv
396.903 707.615 361.11 717.014 318.579 695.521 cv
cp
f
314.125 686.24 mo
314.125 686.24 350.829 700.947 392.45 698.334 cv
392.45 698.334 356.657 707.732 314.125 686.24 cv
cp
f
405.129 790.045 mo
405.129 790.045 425.872 799.104 450.407 794.076 cv
450.407 794.076 425.282 802.783 405.129 790.045 cv
cp
f
416.262 793.76 mo
416.262 793.76 437.004 802.807 461.54 797.779 cv
461.54 797.779 436.415 806.498 416.262 793.76 cv
cp
f
311.157 677.334 mo
311.157 677.334 347.86 692.041 389.477 689.428 cv
389.477 689.428 353.68 698.826 311.157 677.334 cv
cp
f
310.043 668.99 mo
310.043 668.99 346.747 683.697 388.368 681.084 cv
388.368 681.084 352.563 690.471 310.043 668.99 cv
cp
f
307.817 660.635 mo
307.817 660.635 344.52 675.342 386.141 672.729 cv
386.141 672.729 350.336 682.127 307.817 660.635 cv
cp
f
306.704 652.291 mo
306.704 652.291 343.407 666.986 385.024 664.385 cv
385.024 664.385 349.227 673.771 306.704 652.291 cv
cp
f
306.149 643.385 mo
306.149 643.385 342.852 658.08 384.469 655.479 cv
384.469 655.479 348.672 664.865 306.149 643.385 cv
cp
f
306.149 635.592 mo
306.149 635.592 342.852 650.287 384.469 647.686 cv
384.469 647.686 348.672 657.072 306.149 635.592 cv
cp
f
306.149 626.127 mo
306.149 626.127 342.852 640.83 384.469 638.217 cv
384.469 638.217 348.672 647.604 306.149 626.127 cv
cp
f
307.817 617.221 mo
307.817 617.221 344.52 631.924 386.141 629.314 cv
386.141 629.314 350.336 638.697 307.817 617.221 cv
cp
f
310.602 608.314 mo
310.602 608.314 347.305 623.014 388.922 620.408 cv
388.922 620.408 353.125 629.795 310.602 608.314 cv
cp
f
313.938 598.85 mo
313.938 598.85 350.641 613.553 392.262 610.943 cv
392.262 610.943 356.469 620.33 313.938 598.85 cv
cp
f
317.282 589.939 mo
317.282 589.939 353.985 604.646 395.602 602.037 cv
395.602 602.037 359.805 611.424 317.282 589.939 cv
cp
f
312.27 576.346 mo
312.27 576.346 347.969 593.35 389.665 593.377 cv
389.665 593.377 353.352 600.486 312.27 576.346 cv
cp
f
315.407 568.822 mo
315.407 568.822 351.461 585.053 393.149 584.197 cv
393.149 584.197 356.989 592.072 315.407 568.822 cv
cp
f
314.196 556.486 mo
314.196 556.486 349.477 574.354 391.161 575.389 cv
391.161 575.389 354.672 581.611 314.196 556.486 cv
cp
f
318.829 546.971 mo
318.829 546.971 353.821 565.393 395.485 567.1 cv
395.485 567.1 358.911 572.736 318.829 546.971 cv
cp
f
318.829 537.51 mo
318.829 537.51 353.821 555.932 395.485 557.635 cv
395.485 557.635 358.911 563.271 318.829 537.51 cv
cp
f
325.329 530.326 mo
325.329 530.326 360.61 548.186 402.293 549.229 cv
402.293 549.229 365.805 555.451 325.329 530.326 cv
cp
f
329.961 520.811 mo
329.961 520.811 364.954 539.225 406.618 540.936 cv
406.618 540.936 370.043 546.572 329.961 520.811 cv
cp
f
329.961 511.346 mo
329.961 511.346 364.954 529.764 406.618 531.475 cv
406.618 531.475 370.043 537.111 329.961 511.346 cv
cp
f
332.188 502.717 mo
332.188 502.717 367.18 521.139 408.844 522.85 cv
408.844 522.85 372.27 528.479 332.188 502.717 cv
cp
f
332.188 494.279 mo
332.188 494.279 367.18 512.701 408.844 514.412 cv
408.844 514.412 372.27 520.049 332.188 494.279 cv
cp
f
340.54 485.842 mo
340.54 485.842 375.532 504.256 417.196 505.967 cv
417.196 505.967 380.618 511.604 340.54 485.842 cv
cp
f
340.54 477.404 mo
340.54 477.404 375.532 495.814 417.196 497.529 cv
417.196 497.529 380.618 503.166 340.54 477.404 cv
cp
f
347.774 468.959 mo
347.774 468.959 382.766 487.381 424.43 489.088 cv
424.43 489.088 387.856 494.725 347.774 468.959 cv
cp
f
347.774 460.521 mo
347.774 460.521 382.766 478.943 424.43 480.65 cv
424.43 480.65 387.856 486.287 347.774 460.521 cv
cp
f
351.672 452.092 mo
351.672 452.092 386.665 470.506 428.329 472.213 cv
428.329 472.213 391.75 477.85 351.672 452.092 cv
cp
f
351.672 443.654 mo
351.672 443.654 386.665 462.064 428.329 463.775 cv
428.329 463.775 391.75 469.412 351.672 443.654 cv
cp
f
357.797 435.209 mo
357.797 435.209 392.782 453.627 434.45 455.338 cv
434.45 455.338 397.875 460.975 357.797 435.209 cv
cp
f
357.797 426.771 mo
357.797 426.771 392.782 445.189 434.45 446.9 cv
434.45 446.9 397.875 452.537 357.797 426.771 cv
cp
f
363.922 418.33 mo
363.922 418.33 398.915 436.752 440.571 438.455 cv
440.571 438.455 404 444.092 363.922 418.33 cv
cp
f
363.922 409.893 mo
363.922 409.893 398.915 428.314 440.571 430.018 cv
440.571 430.018 404 435.654 363.922 409.893 cv
cp
f
368.93 401.455 mo
368.93 401.455 403.922 419.877 445.583 421.588 cv
445.583 421.588 409.008 427.217 368.93 401.455 cv
cp
f
368.93 393.018 mo
368.93 393.018 403.922 411.432 445.583 413.143 cv
445.583 413.143 409.008 418.779 368.93 393.018 cv
cp
f
373.383 384.58 mo
373.383 384.58 408.375 402.994 450.036 404.705 cv
450.036 404.705 413.461 410.342 373.383 384.58 cv
cp
f
373.383 376.135 mo
373.383 376.135 408.375 394.557 450.036 396.264 cv
450.036 396.264 413.461 401.9 373.383 376.135 cv
cp
f
378.391 367.697 mo
378.391 367.697 413.383 386.119 455.047 387.826 cv
455.047 387.826 418.469 393.463 378.391 367.697 cv
cp
f
378.391 359.26 mo
378.391 359.26 413.383 377.682 455.047 379.389 cv
455.047 379.389 418.469 385.025 378.391 359.26 cv
cp
f
383.961 350.83 mo
383.961 350.83 418.954 369.24 460.61 370.951 cv
460.61 370.951 424.04 376.588 383.961 350.83 cv
cp
f
383.961 342.385 mo
383.961 342.385 418.954 360.803 460.61 362.514 cv
460.61 362.514 424.04 368.15 383.961 342.385 cv
cp
f
388.969 333.947 mo
388.969 333.947 423.961 352.369 465.622 354.076 cv
465.622 354.076 429.047 359.713 388.969 333.947 cv
cp
f
388.969 325.506 mo
388.969 325.506 423.961 343.928 465.622 345.631 cv
465.622 345.631 429.047 351.268 388.969 325.506 cv
cp
f
395.094 317.068 mo
395.094 317.068 430.086 335.49 471.743 337.193 cv
471.743 337.193 435.172 342.83 395.094 317.068 cv
cp
f
grestore
gsave
522.527 810.096 mo
519.719 811.326 633.859 805.643 673.203 732.154 cv
702.703 677.053 708.828 590.396 688.043 548.084 cv
667.258 505.779 649.445 470.15 633.859 422.646 cv
618.273 375.15 601.945 338.037 584.133 332.104 cv
566.32 326.162 556.086 336.186 559.641 366.99 cv
564.094 405.584 587.133 436.732 607.883 484.26 cv
642.398 563.303 665.777 747.002 522.527 810.096 cv
cp
clp
706.023 665.979 mo
706.023 665.979 675.984 679.092 618.875 673.42 cv
618.875 673.42 671.313 686.557 706.023 665.979 cv
cp
.27451 .207843 .145098 rgb
f
707.875 658.092 mo
707.875 658.092 677.844 671.205 620.73 665.533 cv
620.73 665.533 673.18 678.67 707.875 658.092 cv
cp
f
709.133 649.115 mo
709.133 649.115 679.094 662.229 621.984 656.545 cv
621.984 656.545 674.426 669.693 709.133 649.115 cv
cp
f
705.879 674.908 mo
705.879 674.908 675.844 688.021 618.734 682.338 cv
618.734 682.338 671.188 695.486 705.879 674.908 cv
cp
f
703.57 685.045 mo
703.57 685.045 673.535 698.158 616.43 692.486 cv
616.43 692.486 668.871 705.623 703.57 685.045 cv
cp
f
701.789 694.596 mo
701.789 694.596 671.754 707.709 614.648 702.037 cv
614.648 702.037 667.09 715.174 701.789 694.596 cv
cp
f
697.18 703.186 mo
697.18 703.186 667.141 716.287 610.031 710.615 cv
610.031 710.615 662.477 723.752 697.18 703.186 cv
cp
f
694.313 713.346 mo
694.313 713.346 664.277 726.459 607.164 720.775 cv
607.164 720.775 659.609 733.924 694.313 713.346 cv
cp
f
688.055 722.604 mo
688.055 722.604 658.672 736.385 602.555 729.881 cv
602.555 729.881 654.148 744.33 688.055 722.604 cv
cp
f
683.52 732.764 mo
683.52 732.764 654.031 745.244 598.055 740.064 cv
598.055 740.064 649.438 752.322 683.52 732.764 cv
cp
f
677.266 742.01 mo
677.266 742.01 647.234 755.111 590.121 749.439 cv
590.121 749.439 642.57 762.588 677.266 742.01 cv
cp
f
660.867 760.607 mo
660.867 760.607 630.828 773.721 573.719 768.049 cv
573.719 768.049 626.168 781.186 660.867 760.607 cv
cp
f
671.016 751.221 mo
671.016 751.221 640.98 764.334 583.867 758.65 cv
583.867 758.65 636.313 771.799 671.016 751.221 cv
cp
f
653.445 768.764 mo
653.445 768.764 623.414 781.865 566.305 776.193 cv
566.305 776.193 618.742 789.342 653.445 768.764 cv
cp
f
639.25 775.783 mo
639.25 775.783 610.711 789.893 556.023 782.861 cv
556.023 782.861 606.344 798.096 639.25 775.783 cv
cp
f
624.711 785.006 mo
624.711 785.006 598.891 796.525 549.738 791.404 cv
549.738 791.404 594.891 803.088 624.711 785.006 cv
cp
f
709.555 639.717 mo
709.555 639.717 679.512 652.842 622.398 647.158 cv
622.398 647.158 674.848 660.295 709.555 639.717 cv
cp
f
710.797 630.74 mo
710.797 630.74 680.766 643.854 623.656 638.182 cv
623.656 638.182 676.094 651.318 710.797 630.74 cv
cp
f
709.555 620.795 mo
709.555 620.795 679.512 633.904 622.398 628.236 cv
622.398 628.236 674.848 641.369 709.555 620.795 cv
cp
f
710.797 611.818 mo
710.797 611.818 680.766 624.932 623.656 619.252 cv
623.656 619.252 676.094 632.393 710.797 611.818 cv
cp
f
712.328 603.639 mo
712.328 603.639 682.297 616.752 625.184 611.08 cv
625.184 611.08 677.633 624.217 712.328 603.639 cv
cp
f
713.586 595.459 mo
713.586 595.459 683.547 608.572 626.438 602.9 cv
626.438 602.9 678.879 616.041 713.586 595.459 cv
cp
f
712.469 587.279 mo
712.469 587.279 682.438 600.393 625.324 594.721 cv
625.324 594.721 677.766 607.857 712.469 587.279 cv
cp
f
713.586 579.104 mo
713.586 579.104 683.547 592.213 626.438 586.541 cv
626.438 586.541 678.879 599.682 713.586 579.104 cv
cp
f
711.359 570.924 mo
711.359 570.924 681.32 584.033 624.211 578.361 cv
624.211 578.361 676.652 591.502 711.359 570.924 cv
cp
f
709.133 562.744 mo
709.133 562.744 679.094 575.854 621.984 570.182 cv
621.984 570.182 674.426 583.322 709.133 562.744 cv
cp
f
703.563 554.564 mo
703.563 554.564 673.531 567.678 616.418 562.002 cv
616.418 562.002 668.859 575.15 703.563 554.564 cv
cp
f
701.336 546.385 mo
701.336 546.385 671.305 559.498 614.191 553.822 cv
614.191 553.822 666.633 566.963 701.336 546.385 cv
cp
f
697.992 538.205 mo
697.992 538.205 667.961 551.326 610.852 545.643 cv
610.852 545.643 663.293 558.783 697.992 538.205 cv
cp
f
696.879 530.033 mo
696.879 530.033 666.852 543.139 609.738 537.467 cv
609.738 537.467 662.18 550.611 696.879 530.033 cv
cp
f
693.539 521.854 mo
693.539 521.854 663.508 534.959 606.398 529.287 cv
606.398 529.287 658.84 542.432 693.539 521.854 cv
cp
f
688.531 513.674 mo
688.531 513.674 658.492 526.787 601.391 521.107 cv
601.391 521.107 653.828 534.252 688.531 513.674 cv
cp
f
685.746 505.494 mo
685.746 505.494 655.719 518.607 598.602 512.928 cv
598.602 512.928 651.047 526.072 685.746 505.494 cv
cp
f
682.961 497.529 mo
682.961 497.529 652.93 510.643 595.82 504.967 cv
595.82 504.967 648.266 518.107 682.961 497.529 cv
cp
f
680.18 489.35 mo
680.18 489.35 650.148 502.463 593.031 496.787 cv
593.031 496.787 645.48 509.928 680.18 489.35 cv
cp
f
675.172 480.83 mo
675.172 480.83 645.133 493.943 588.031 488.268 cv
588.031 488.268 640.469 501.408 675.172 480.83 cv
cp
f
672.387 472.65 mo
672.387 472.65 642.352 485.76 585.242 480.088 cv
585.242 480.088 637.688 493.229 672.387 472.65 cv
cp
f
669.602 463.576 mo
669.602 463.576 639.57 476.689 582.461 471.01 cv
582.461 471.01 634.906 484.154 669.602 463.576 cv
cp
f
666.82 455.396 mo
666.82 455.396 636.785 468.502 579.672 462.83 cv
579.672 462.83 632.121 475.975 666.82 455.396 cv
cp
f
666.266 446.877 mo
666.266 446.877 636.227 459.982 579.117 454.311 cv
579.117 454.311 631.563 467.455 666.266 446.877 cv
cp
f
663.48 438.689 mo
663.48 438.689 633.445 451.803 576.336 446.131 cv
576.336 446.131 628.781 459.275 663.48 438.689 cv
cp
f
664.039 430.17 mo
664.039 430.17 634 443.283 576.891 437.611 cv
576.891 437.611 629.336 450.756 664.039 430.17 cv
cp
f
661.254 421.99 mo
661.254 421.99 631.219 435.104 574.109 429.428 cv
574.109 429.428 626.555 442.576 661.254 421.99 cv
cp
f
660.695 414.584 mo
660.695 414.584 630.664 427.697 573.551 422.021 cv
573.551 422.021 626 435.17 660.695 414.584 cv
cp
f
657.914 406.404 mo
657.914 406.404 627.879 419.518 570.766 413.842 cv
570.766 413.842 623.215 426.982 657.914 406.404 cv
cp
f
659.027 398.443 mo
659.027 398.443 628.992 411.557 571.883 405.877 cv
571.883 405.877 624.328 419.021 659.027 398.443 cv
cp
f
656.242 390.264 mo
656.242 390.264 626.211 403.377 569.098 397.697 cv
569.098 397.697 621.547 410.842 656.242 390.264 cv
cp
f
657.914 382.299 mo
657.914 382.299 627.879 395.412 570.766 389.736 cv
570.766 389.736 623.215 402.877 657.914 382.299 cv
cp
f
655.133 374.119 mo
655.133 374.119 625.094 387.232 567.984 381.557 cv
567.984 381.557 620.43 394.697 655.133 374.119 cv
cp
f
654.574 365.6 mo
654.574 365.6 624.539 378.713 567.43 373.037 cv
567.43 373.037 619.875 386.178 654.574 365.6 cv
cp
f
651.789 357.42 mo
651.789 357.42 621.758 370.529 564.645 364.857 cv
564.645 364.857 617.094 377.998 651.789 357.42 cv
cp
f
651.234 350.572 mo
651.234 350.572 621.199 363.686 564.086 358.006 cv
564.086 358.006 616.535 371.15 651.234 350.572 cv
cp
f
648.453 342.393 mo
648.453 342.393 618.414 355.498 561.305 349.826 cv
561.305 349.826 613.75 362.971 648.453 342.393 cv
cp
f
646.781 334.986 mo
646.781 334.986 616.746 348.092 559.633 342.42 cv
559.633 342.42 612.082 355.564 646.781 334.986 cv
cp
f
644 326.799 mo
644 326.799 613.961 339.912 556.852 334.24 cv
556.852 334.24 609.297 347.385 644 326.799 cv
cp
f
grestore
475.766 805.643 mo
475.766 805.643 486.157 809.357 498.782 803.416 cv
511.395 797.475 524.754 793.021 536.633 801.189 cv
536.633 801.189 530.695 790.045 516.594 793.021 cv
502.488 795.986 496.547 805.643 475.766 805.643 cv
cp
.27451 .207843 .145098 rgb
f
546.273 460.787 mo
546.273 460.787 547.508 463.896 545.375 463.541 cv
543.234 463.189 544.559 459.467 546.273 460.787 cv
cp
f
547.047 476.846 mo
547.047 476.846 548.145 479.607 546.148 479.6 cv
544.141 479.596 544.086 476.432 547.047 476.846 cv
cp
f
548.383 426.814 mo
548.383 426.814 548.938 428.197 548.031 428.959 cv
547.137 429.709 545.219 426.877 548.383 426.814 cv
cp
f
541.578 443.889 mo
541.578 443.889 544.609 443.482 541.09 445.674 cv
537.57 447.873 539.098 443.67 541.578 443.889 cv
cp
f
558.93 426.232 mo
558.93 426.232 561.477 427.623 559.063 428.576 cv
556.648 429.533 556.727 424.709 558.93 426.232 cv
cp
f
553.578 441.932 mo
553.578 441.932 556.875 444.217 554.805 445.037 cv
552.734 445.857 551.156 442.893 553.578 441.932 cv
cp
f
559.313 456.428 mo
559.313 456.428 559.934 458.971 558.141 458.482 cv
556.344 457.998 557.25 455.248 559.313 456.428 cv
cp
f
549.828 408.287 mo
549.828 408.287 551.891 409.459 550.305 410.49 cv
548.711 411.525 544.242 409.299 549.828 408.287 cv
cp
f
567.961 468.162 mo
567.961 468.162 571.676 469.486 567.125 470.092 cv
562.578 470.693 567.961 468.162 567.961 468.162 cv
cp
f
558.602 483.842 mo
558.602 483.842 561.289 485.576 558.527 486.674 cv
555.766 487.768 555.297 483.557 558.602 483.842 cv
cp
f
568.414 478.365 mo
568.414 478.365 572.609 479.893 569.848 480.99 cv
567.086 482.084 567.242 478.428 568.414 478.365 cv
cp
f
545.07 388.213 mo
545.07 388.213 546.715 390.357 544.984 391.041 cv
543.266 391.721 542.031 388.615 545.07 388.213 cv
cp
f
532.723 390.311 mo
532.723 390.311 534.242 392.107 532.023 392.584 cv
529.82 393.057 530.523 388.787 532.723 390.311 cv
cp
f
537.008 410.178 mo
537.008 410.178 538.852 411.838 537.27 412.861 cv
535.68 413.889 534.25 409.271 537.008 410.178 cv
cp
f
568.656 497.623 mo
568.656 497.623 572.781 498.982 568.844 501.139 cv
564.914 503.295 568.039 496.072 568.656 497.623 cv
cp
f
578.938 482.775 mo
578.938 482.775 582.438 485.576 580.371 486.396 cv
578.305 487.213 576.457 482.561 578.938 482.775 cv
cp
f
550.336 416.396 mo
550.336 416.396 554.875 418.787 550.734 420.428 cv
546.594 422.068 550.336 416.396 550.336 416.396 cv
cp
f
530.828 470.061 mo
530.828 470.061 534.023 473.588 531.434 474.607 cv
528.844 475.639 527.734 468.291 530.828 470.061 cv
cp
f
566.32 323.936 mo
566.32 323.936 585.984 318.736 601.578 344.717 cv
617.164 370.697 626.445 396.303 632.379 416.713 cv
632.379 416.713 608.625 361.049 595.633 344.35 cv
582.645 327.643 557.781 326.162 557.781 326.162 cv
566.32 323.936 li
cp
f
516.223 312.428 mo
516.223 312.428 508.422 307.6 494.329 310.568 cv
494.329 310.568 506.566 305.373 510.281 306.115 cv
513.992 306.861 515.477 307.975 516.223 312.428 cv
cp
f
588.586 184.764 mo
588.586 184.764 585.246 182.537 580.422 184.018 cv
575.602 185.506 575.227 185.877 574.113 184.764 cv
573 183.65 569.66 184.764 569.66 184.764 cv
569.66 184.764 568.914 181.424 571.887 181.791 cv
574.859 182.166 574.488 183.65 577.086 182.537 cv
579.68 181.424 586.359 181.424 588.586 184.764 cv
cp
.741176 .580392 .403922 rgb
f
705.855 601.529 mo
705.855 601.529 719.961 706.924 647.965 765.553 cv
647.965 765.553 730.352 715.83 705.855 601.529 cv
cp
1 1 1 rgb
f
326.094 565.486 mo
326.094 565.486 292.758 660.74 343.907 739.443 cv
343.907 739.443 277.758 677.99 326.094 565.486 cv
cp
f
326.325 354.484 mo
326.095 354.484 325.86 354.484 325.626 354.484 cv
323.372 354.484 321.782 354.348 321.782 354.348 cv
314.817 353.758 li
315.36 352.48 li
314.919 352.492 314.474 352.492 314.028 352.492 cv
308.536 352.492 304.364 351.699 301.278 350.066 cv
300.271 349.539 299.833 349.469 299.833 349.469 cv
299.833 349.469 li
300.688 349.469 298.63 349.133 297.149 350.992 cv
296.903 351.297 295.294 353.77 295.294 353.77 cv
290.282 337.625 292.294 326.258 294.95 319.691 cv
293.255 322.039 li
294.169 315.043 li
294.669 309.945 297.435 303.816 299.704 299.535 cv
299.704 296.617 li
299.704 291.313 302.325 287.113 304.79 284.328 cv
305.231 282.426 li
306.724 276.559 310.458 272.512 312.724 270.5 cv
314.013 264.723 317.47 259.914 320.271 256.797 cv
320.728 255.371 li
322.067 251.176 324.688 247.121 327.411 243.719 cv
331.044 236.465 li
333.458 231.637 337.95 226.938 342.06 223.285 cv
346.263 217.273 li
347.771 215.125 350.661 212.969 353.567 211.176 cv
356.563 207.637 li
359.81 203.785 366.122 201.418 370.81 200.113 cv
370.653 199.574 li
373.028 197.469 li
376.438 194.441 382.872 192.332 385.771 191.492 cv
389.286 188.609 394.442 186.695 396.044 186.148 cv
397.888 185.328 399.899 184.844 402.052 184.691 cv
402.739 184.082 li
406.2 181.059 413.075 179.727 416.099 179.277 cv
420.317 177.355 424.419 176.938 427.185 176.938 cv
428.849 176.938 430.185 177.078 431.044 177.215 cv
432.958 176.973 434.95 176.852 436.974 176.852 cv
440.024 176.852 442.833 177.125 445.177 177.477 cv
449.63 177.273 li
450.099 177.25 450.56 177.242 451.017 177.242 cv
457.7 177.242 463.692 179.406 466.317 180.512 cv
469.263 180.559 471.981 182.246 473.708 183.617 cv
479.302 184.117 485.005 187.461 487.372 189.004 cv
493.161 190.094 497.021 193.82 498.888 196.094 cv
505.88 198.285 509.728 202.859 512.868 206.605 cv
514.919 209.035 516.685 211.141 519.005 212.359 cv
528.161 217.156 531.38 224.469 531.716 225.289 cv
531.919 225.781 li
532.013 226.309 li
532.767 230.441 534.567 243.453 529.017 250.199 cv
528.708 254.371 527.583 262.742 523.513 267.863 cv
523.278 271.035 522.216 276.605 517.841 279.922 cv
516.966 282.055 515.255 285.406 512.493 287.793 cv
511.638 290.359 509.911 294.273 506.817 296.441 cv
505.966 298.824 504.208 302.184 500.704 304.293 cv
499.849 306.477 498.778 308.746 495.091 310.949 cv
493.739 312.52 490.614 315.781 486.388 317.984 cv
485.263 319.574 483.239 321.758 480.196 322.625 cv
478.161 323.219 473.474 325.258 472.044 327.723 cv
467.212 336.074 456.911 340.223 455.755 340.672 cv
449.446 343.098 li
448.224 343.766 447.341 344.172 447.083 344.281 cv
431.489 349.691 li
434.724 346.637 li
434.708 346.645 434.7 346.648 434.685 346.656 cv
429.575 348.676 423.552 349.789 423.294 349.832 cv
423.161 349.434 li
419.845 350.465 416.47 351.133 415.552 351.309 cv
409.661 352.426 li
405.263 353.738 400.778 354.648 398.845 355.023 cv
389.786 356.734 li
390.173 355.762 li
388.778 355.879 387.431 355.918 386.212 355.918 cv
384.528 355.918 383.427 355.836 383.427 355.836 cv
374.825 355.176 li
374.88 355.098 li
371.825 355.457 369.255 355.543 367.474 355.543 cv
365.825 355.543 364.88 355.469 364.88 355.469 cv
360.099 355.094 li
358.978 355.18 357.802 355.223 356.563 355.223 cv
354.411 355.223 352.911 355.086 352.911 355.086 cv
348.442 354.664 li
345.177 355.051 342.692 355.133 341.169 355.133 cv
340.216 355.133 339.712 355.098 339.712 355.098 cv
336.872 354.918 li
324.794 356.184 li
326.325 354.484 li
cp
.27451 .207843 .145098 rgb
f
467.677 325.191 mo
470.614 320.113 478.81 317.77 478.81 317.77 cv
481.411 317.031 482.888 314.059 482.888 314.059 cv
488.075 311.832 491.794 307.012 491.794 307.012 cv
497.356 304.047 494.396 302.184 498.106 299.957 cv
501.81 297.73 502.56 292.906 502.56 292.906 cv
506.263 292.164 508.13 284.746 508.13 284.746 cv
511.837 282.52 513.692 276.578 513.692 276.578 cv
518.888 273.977 518.517 265.82 518.517 265.82 cv
523.708 261.367 524.083 247.996 524.083 247.996 cv
530.024 243.543 527.048 227.211 527.048 227.211 cv
527.048 227.211 524.45 220.914 516.661 216.828 cv
508.864 212.746 507.013 203.094 495.876 200.5 cv
495.876 200.5 492.169 194.563 485.489 193.82 cv
485.489 193.82 477.692 188.246 471.755 188.621 cv
471.755 188.621 468.052 184.918 465.45 185.656 cv
465.45 185.656 458.028 181.949 449.864 182.316 cv
450.599 183.801 li
450.599 183.801 441.333 180.836 430.935 182.316 cv
430.935 182.316 424.255 180.828 417.575 184.168 cv
417.575 184.168 409.036 185.289 406.067 187.883 cv
409.786 190.848 li
409.786 190.848 403.466 188.246 397.903 190.848 cv
397.903 190.848 391.224 193.074 388.255 196.047 cv
388.255 196.047 379.72 198.277 376.38 201.242 cv
377.122 203.84 li
377.122 203.84 364.505 206.066 360.419 210.895 cv
363.388 211.633 li
363.388 211.633 352.997 216.461 350.399 220.168 cv
353.739 220.539 li
353.739 220.539 340.013 229.82 335.56 238.727 cv
339.642 238.355 li
339.642 238.355 328.509 247.633 325.536 256.914 cv
327.396 256.914 li
327.396 256.914 318.489 263.957 317.376 273.238 cv
317.376 273.238 311.802 277.07 310.106 283.727 cv
310.052 283.938 309.997 284.152 309.95 284.371 cv
311.81 284.746 li
311.81 284.746 304.755 289.563 304.755 296.617 cv
306.981 296.992 li
306.981 296.992 299.927 308.117 299.188 315.543 cv
302.161 316.285 li
302.161 316.285 292.88 331.879 297.333 347.09 cv
297.333 347.09 297.333 342.266 303.642 345.605 cv
309.95 348.945 323.31 346.719 323.31 346.719 cv
322.2 349.316 li
322.2 349.316 331.099 350.059 335.927 347.832 cv
334.442 350.43 li
340.38 348.203 li
340.013 350.059 li
340.013 350.059 346.321 350.43 356.341 348.203 cv
353.372 350.059 li
353.372 350.059 361.536 350.805 366.36 348.578 cv
365.247 350.43 li
365.247 350.43 375.263 351.172 386.028 347.465 cv
383.802 350.805 li
383.802 350.805 393.825 351.543 398.653 348.203 cv
397.903 350.059 li
397.903 350.059 411.638 347.457 415.72 344.492 cv
414.606 346.352 li
414.606 346.352 422.399 344.863 425.739 343.012 cv
422.399 344.863 li
422.399 344.863 428.122 343.824 432.81 341.961 cv
433.724 341.598 434.606 341.207 435.388 340.785 cv
435.388 340.785 441.325 340.41 446.892 336.695 cv
445.036 339.672 li
445.036 339.672 451.716 336.695 455.052 332.242 cv
453.942 335.957 li
453.942 335.957 463.599 332.242 467.677 325.191 cv
cp
.439216 .592157 .352941 rgb
f
527.052 225.367 mo
527.052 225.367 499.958 229.074 495.505 232.422 cv
491.052 235.762 481.794 235.809 469.528 240.953 cv
446.521 250.602 441.692 254.313 433.903 258.395 cv
426.106 262.48 390.481 281.781 368.587 293.652 cv
346.692 305.523 317.372 327.145 299.278 338.277 cv
299.278 338.277 332.962 313.684 348.548 304.41 cv
364.134 295.133 396.786 275.094 411.638 268.414 cv
426.481 261.734 445.036 249.859 445.036 249.859 cv
445.036 249.859 465.45 240.953 475.466 237.242 cv
485.489 233.535 511.837 224.992 516.29 223.879 cv
520.743 222.766 525.567 221.652 527.052 225.367 cv
cp
.27451 .207843 .145098 rgb
f
559.708 242.797 mo
559.708 242.797 546.81 223.508 520.833 227.219 cv
494.856 230.934 492.997 232.234 492.997 232.234 cv
492.997 232.234 522.966 220.914 534.841 222.395 cv
546.716 223.879 552.653 226.848 561.192 235.375 cv
561.192 235.375 562.677 236.863 559.708 242.797 cv
cp
f
520.743 230.195 mo
520.743 230.195 516.661 264.699 498.849 292.164 cv
498.849 292.164 513.317 264.793 518.142 230.559 cv
518.142 230.559 519.263 227.961 520.743 230.195 cv
cp
f
513.853 231.25 mo
513.853 231.25 506.474 277.984 486.239 306.32 cv
486.239 306.32 505.767 270.461 511.247 231.578 cv
511.247 231.578 512.403 229 513.853 231.25 cv
cp
f
507.731 232.363 mo
507.731 232.363 495.981 289.07 475.743 317.398 cv
475.743 317.398 499.646 271.574 505.122 232.691 cv
505.122 232.691 506.282 230.113 507.731 232.363 cv
cp
f
500.771 233.758 mo
500.771 233.758 494.114 277.598 468.782 318.793 cv
468.782 318.793 492.688 272.961 498.161 234.086 cv
498.161 234.086 499.321 231.508 500.771 233.758 cv
cp
f
492.7 237.379 mo
492.7 237.379 484.372 285.391 456.817 328.813 cv
456.817 328.813 484.614 276.582 490.091 237.699 cv
490.091 237.699 491.255 235.121 492.7 237.379 cv
cp
f
513.036 220.539 mo
513.036 220.539 488.825 190.762 427.036 184.914 cv
427.036 184.914 458.763 189.367 479.356 199.668 cv
499.958 209.961 506.356 216.641 508.583 219.148 cv
510.81 221.652 513.036 220.539 513.036 220.539 cv
cp
f
508.583 224.16 mo
508.583 224.16 479.638 191.035 414.505 187.695 cv
414.505 187.695 449.024 191.316 474.903 203.281 cv
495.81 212.945 501.903 220.262 504.13 222.766 cv
506.356 225.273 508.583 224.16 508.583 224.16 cv
cp
f
501.903 226.398 mo
501.903 226.398 472.364 194.527 405.88 191.316 cv
405.88 191.316 441.106 194.793 467.528 206.313 cv
488.868 215.609 495.083 222.648 497.356 225.063 cv
499.63 227.469 501.903 226.398 501.903 226.398 cv
cp
f
495.091 228.664 mo
495.091 228.664 464.427 198.055 395.446 194.969 cv
395.446 194.969 432.005 198.309 459.411 209.371 cv
481.56 218.305 488.021 225.063 490.372 227.383 cv
492.731 229.695 495.091 228.664 495.091 228.664 cv
cp
f
487.575 230.352 mo
487.575 230.352 456.263 201.746 385.794 198.863 cv
385.794 198.863 423.13 201.988 451.134 212.324 cv
473.755 220.672 480.349 226.984 482.763 229.152 cv
485.161 231.313 487.575 230.352 487.575 230.352 cv
cp
f
486.021 238.527 mo
486.021 238.527 477.286 288.332 448.372 333.359 cv
448.372 333.359 477.544 279.184 483.278 238.859 cv
483.278 238.859 484.497 236.184 486.021 238.527 cv
cp
f
478.974 241.492 mo
478.974 241.492 470.235 291.297 441.325 336.332 cv
441.325 336.332 470.493 282.156 476.231 241.824 cv
476.231 241.824 477.45 239.148 478.974 241.492 cv
cp
f
472.294 243.719 mo
472.294 243.719 463.556 293.523 434.646 338.559 cv
434.646 338.559 463.813 284.383 469.552 244.051 cv
469.552 244.051 470.771 241.375 472.294 243.719 cv
cp
f
464.497 246.688 mo
464.497 246.688 455.763 296.492 426.853 341.523 cv
426.853 341.523 456.021 287.348 461.755 247.023 cv
461.755 247.023 462.974 244.344 464.497 246.688 cv
cp
f
456.333 250.004 mo
456.333 250.004 447.778 298.656 419.427 342.637 cv
419.427 342.637 448.028 289.727 453.646 250.332 cv
453.646 250.332 454.841 247.719 456.333 250.004 cv
cp
f
448.536 254.434 mo
448.536 254.434 439.911 301.738 411.263 344.492 cv
411.263 344.492 440.165 293.055 445.817 254.75 cv
445.817 254.75 447.032 252.207 448.536 254.434 cv
cp
f
479.044 232.59 mo
479.044 232.59 447.997 204.215 378.372 203.316 cv
378.372 203.316 415.302 206.223 443.001 215.832 cv
465.38 223.598 471.896 229.469 474.286 231.477 cv
476.657 233.488 479.044 232.59 479.044 232.59 cv
cp
f
471.247 236.676 mo
471.247 236.676 442.435 209.035 370.579 207.402 cv
370.579 207.402 407.505 210.309 435.208 219.918 cv
457.579 227.676 464.099 233.547 466.489 235.563 cv
468.864 237.57 471.247 236.676 471.247 236.676 cv
cp
f
533.728 224.254 mo
533.728 224.254 553.021 225.734 558.966 236.875 cv
558.966 236.875 550.427 227.961 533.728 224.254 cv
cp
.741176 .580392 .403922 rgb
f
464.2 239.289 mo
464.2 239.289 435.763 213.184 364.872 211.637 cv
364.872 211.637 401.31 214.387 428.638 223.457 cv
450.712 230.785 457.146 236.336 459.505 238.238 cv
461.845 240.133 464.2 239.289 464.2 239.289 cv
cp
.27451 .207843 .145098 rgb
f
458.634 242.27 mo
458.634 242.27 429.88 217.902 358.192 216.461 cv
358.192 216.461 395.044 219.02 422.677 227.492 cv
444.993 234.336 451.505 239.512 453.88 241.293 cv
456.247 243.063 458.634 242.27 458.634 242.27 cv
cp
f
451.114 244.516 mo
451.114 244.516 423.591 222.93 354.946 221.652 cv
354.946 221.652 390.224 223.926 416.685 231.426 cv
438.06 237.488 444.29 242.07 446.567 243.648 cv
448.837 245.219 451.114 244.516 451.114 244.516 cv
cp
f
444.993 247.598 mo
444.993 247.598 417.622 228.625 349.38 227.5 cv
349.38 227.5 384.454 229.496 410.755 236.09 cv
432.009 241.422 438.208 245.445 440.474 246.836 cv
442.724 248.211 444.993 247.598 444.993 247.598 cv
cp
f
441.302 258.027 mo
441.302 258.027 432.427 304.281 402.817 346.07 cv
402.817 346.07 432.677 295.797 438.489 258.336 cv
438.489 258.336 439.743 255.852 441.302 258.027 cv
cp
f
433.79 262.176 mo
433.79 262.176 424.81 306.84 394.747 347.184 cv
394.747 347.184 425.052 298.648 430.931 262.469 cv
430.931 262.469 432.2 260.07 433.79 262.176 cv
cp
f
425.716 266.867 mo
425.716 266.867 416.88 309.367 387.231 347.738 cv
387.231 347.738 417.114 301.574 422.896 267.145 cv
422.896 267.145 424.153 264.863 425.716 266.867 cv
cp
f
417.364 271.555 mo
417.364 271.555 408.856 311.594 380.278 347.738 cv
380.278 347.738 409.083 304.25 414.646 271.813 cv
414.646 271.813 415.856 269.668 417.364 271.555 cv
cp
f
409.856 274.305 mo
409.856 274.305 401.06 312.617 371.372 347.184 cv
371.372 347.184 401.278 305.586 407.024 274.551 cv
407.024 274.551 408.278 272.492 409.856 274.305 cv
cp
f
402.337 278.441 mo
402.337 278.441 393.13 314.746 361.903 347.465 cv
361.903 347.465 393.356 308.09 399.356 278.676 cv
399.356 278.676 400.673 276.719 402.337 278.441 cv
cp
f
393.708 283.117 mo
393.708 283.117 384.778 316.539 354.388 346.625 cv
354.388 346.625 384.989 310.402 390.806 283.332 cv
390.806 283.332 392.091 281.535 393.708 283.117 cv
cp
f
385.638 287.254 mo
385.638 287.254 376.599 318.508 345.759 346.625 cv
345.759 346.625 376.81 312.777 382.692 287.453 cv
382.692 287.453 383.989 285.766 385.638 287.254 cv
cp
f
377.286 291.66 mo
377.286 291.66 368.7 320.313 339.36 346.07 cv
339.36 346.07 368.896 315.051 374.481 291.836 cv
374.481 291.836 375.716 290.293 377.286 291.66 cv
cp
f
368.028 296.258 mo
368.028 296.258 359.794 322.344 331.567 345.789 cv
331.567 345.789 359.974 317.563 365.325 296.41 cv
365.325 296.41 366.513 295.012 368.028 296.258 cv
cp
f
358.364 302.125 mo
358.364 302.125 350.685 324.699 324.333 344.957 cv
324.333 344.957 350.849 320.551 355.837 302.258 cv
355.837 302.258 356.942 301.039 358.364 302.125 cv
cp
f
348.337 307.633 mo
348.337 307.633 341.372 327.02 317.372 344.398 cv
317.372 344.398 341.517 323.457 346.044 307.742 cv
346.044 307.742 347.052 306.699 348.337 307.633 cv
cp
f
338.044 313.949 mo
338.044 313.949 331.903 328.996 310.692 342.449 cv
310.692 342.449 332.028 326.23 336.009 314.031 cv
336.009 314.031 336.899 313.223 338.044 313.949 cv
cp
f
439.427 251.23 mo
439.427 251.23 412.38 234.078 344.927 233.066 cv
344.927 233.066 379.591 234.871 405.595 240.828 cv
426.595 245.645 432.716 249.285 434.958 250.539 cv
437.185 251.785 439.427 251.23 439.427 251.23 cv
cp
f
433.86 255.145 mo
433.86 255.145 406.997 238.355 343.255 239.188 cv
343.255 239.188 376.489 240.77 401.423 246.008 cv
421.56 250.238 427.368 253.566 429.575 254.535 cv
434.544 256.727 433.86 255.145 433.86 255.145 cv
cp
f
427.462 258.25 mo
427.462 258.25 401.427 243.641 335.466 243.641 cv
335.466 243.641 369.208 245.09 394.521 249.887 cv
414.97 253.762 420.872 256.809 423.106 257.699 cv
428.161 259.703 427.462 258.25 427.462 258.25 cv
cp
f
419.942 262.469 mo
419.942 262.469 395.306 248.094 332.399 248.934 cv
332.399 248.934 364.513 250.27 388.603 254.715 cv
408.06 258.309 413.677 261.125 415.81 261.953 cv
420.614 263.805 419.942 262.469 419.942 262.469 cv
cp
f
412.435 265.633 mo
412.435 265.633 390.013 253.66 329.614 255.043 cv
329.614 255.043 359.989 256.094 382.786 259.566 cv
401.188 262.379 406.497 264.582 408.521 265.227 cv
413.06 266.676 412.435 265.633 412.435 265.633 cv
cp
f
405.192 269.594 mo
405.192 269.594 383.333 259.227 324.88 260.898 cv
324.88 260.898 354.341 261.754 376.442 264.613 cv
394.294 266.922 399.435 268.73 401.396 269.258 cv
405.806 270.449 405.192 269.594 405.192 269.594 cv
cp
f
397.614 274.227 mo
397.614 274.227 377.212 263.406 321.825 266.188 cv
321.825 266.188 346.767 266.395 368.864 269.246 cv
386.708 271.555 391.86 273.367 393.817 273.895 cv
398.231 275.09 397.614 274.227 397.614 274.227 cv
cp
f
389.544 278.738 mo
389.544 278.738 373.036 268.973 320.153 272.27 cv
320.153 272.27 342.989 272.434 363.22 274.738 cv
379.56 276.59 384.271 278.047 386.067 278.469 cv
390.106 279.43 389.544 278.738 389.544 278.738 cv
cp
f
379.716 281.5 mo
379.716 281.5 355.224 274.813 315.7 278.27 cv
315.7 278.27 337.231 277.68 356.892 279.547 cv
372.778 281.055 375.747 282.266 377.489 282.613 cv
381.419 283.391 379.716 281.5 379.716 281.5 cv
cp
f
375.005 286.188 mo
375.005 286.188 352.72 279.273 313.747 283.543 cv
313.747 283.543 334.349 283.059 353.161 284.594 cv
368.364 285.824 371.2 286.813 372.872 287.102 cv
376.63 287.738 375.005 286.188 375.005 286.188 cv
cp
f
367.767 290.641 mo
367.767 290.641 346.317 284.277 311.521 289.012 cv
311.521 289.012 327.114 287.512 345.927 289.047 cv
361.13 290.277 363.966 291.266 365.634 291.555 cv
369.388 292.191 367.767 290.641 367.767 290.641 cv
cp
f
361.954 294.535 mo
361.954 294.535 342.146 287.898 309.575 294.02 cv
309.575 294.02 325.177 291.406 342.192 292.941 cv
355.95 294.172 358.513 295.164 360.028 295.445 cv
363.427 296.09 361.954 294.535 361.954 294.535 cv
cp
f
326.63 321.125 mo
326.63 321.125 320.833 332.852 300.669 343.285 cv
300.669 343.285 320.942 330.695 324.7 321.18 cv
324.7 321.18 325.544 320.551 326.63 321.125 cv
cp
f
353.606 298.152 mo
353.606 298.152 339.919 293.188 306.521 299.031 cv
306.521 299.031 316.255 297.641 330.454 297.918 cv
339.028 298.082 344.981 297.813 351.677 299.066 cv
355.075 299.703 353.606 298.152 353.606 298.152 cv
cp
f
346.95 303.219 mo
346.95 303.219 329.341 298.199 303.173 304.484 cv
303.173 304.484 312.231 302.488 325.427 302.887 cv
333.388 303.121 338.935 302.734 345.149 304.531 cv
348.313 305.453 346.95 303.219 346.95 303.219 cv
cp
f
338.356 308 mo
338.356 308 320.989 302.926 300.388 309.578 cv
300.388 309.578 308.255 308.281 319.692 307.578 cv
327.388 307.105 331.286 307.938 336.294 308.492 cv
339.946 308.898 338.356 308 338.356 308 cv
cp
f
334.216 312.32 mo
334.216 312.32 318.614 307.051 300.114 313.961 cv
300.114 313.961 307.177 312.613 317.446 311.879 cv
324.364 311.387 327.864 312.25 332.364 312.836 cv
335.646 313.258 334.216 312.32 334.216 312.32 cv
cp
f
328.161 317.48 mo
328.161 317.48 316.091 313.496 301.786 318.723 cv
301.786 318.723 307.247 317.703 315.192 317.16 cv
320.54 316.777 323.255 317.434 326.728 317.875 cv
329.271 318.191 328.161 317.48 328.161 317.48 cv
cp
f
322.646 320.5 mo
322.646 320.5 310.028 318.941 297.013 326.855 cv
297.013 326.855 302.169 324.793 309.856 322.715 cv
315.032 321.297 317.817 321.414 321.313 321.16 cv
323.868 320.973 322.646 320.5 322.646 320.5 cv
cp
f
314.864 324.359 mo
314.864 324.359 303.731 326.863 297.606 334.379 cv
297.606 334.379 303.454 328.813 314.864 324.359 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_pear.eps)
%%CreationDate: 3/11/2016 11:19 PM
%AI9_DataStream
%Gb",KBj26BfC8Z_Y&"#(*(<.9oY(;T=U62o#Uo*XOq'mcR0CY._t2X?ZW)'kOsXn_0Nfa3pLr!SXu^^jeCj0;_EtijW>3UabB3^O
%on7'0$NHsE^]+.@@GtenfPAH?R&q/c<Njt;C=Wc!X-KYclHRn+,4d<l9-!"GiKnrOK3,&%IjWU/I,Q"#8aVu0\T5[4eXP*:4(0EM
%HDmIbbAUVS(3G)!`UhnhU!bB98+=5ogo\H^/c*FMV_9E(]+%TRW%(,U]TWg-Z^t"Wcf1j4n$:_`2tQEW^%Q"DS#1?\*q[BdjS9&E
%%/PN>Mst4#l]q%38t2MG"KgTlHRXMO/11oHpnU>s=YPq0Ih_F.^T!7n5lOndnc(n]r_N;l9BZ\7a#Q3'iYWRmY`sfL_U"Zq61#Tk
%T.CV:Lr3/pg8O)e*j)99-q_o]W35I'5@*/WF''MjG$E@W]'_V`p9pGiN.e(=G1*Z1(u*E%Uhbfg!_Vs"b21J;`(MajoU97*;pG#-
%q1#WQWe,>g.#RfY\5VpdDenIC=MN@gbA2,p07"B/N&o$[o!lhN4ON&\`G*&3l*Z([l]hr4aa1ho7sWpimcT(F8=I+,jKRUn:@%?S
%e5b6uBWc+u(_N4"E%N;:2;8J?V<eiPa1#Wp[Vb%k*<ASM2TqHKg:@F352U(?MZK7">/K75#lLJ3qTkH,#q06-mC$)[GYkg>bX'Sh
%/DS&JNk/LHB'NAa5AlI71m!"mG!VsR.=M`?cu79"V]dBR&'eP6iIu:]49"i4fDM+ZIT5RIO#tU4Vm0GVec5PW0ib;^G_r2Cq[,6g
%="C_F'&jdY:%0\&FME2J+"$U@`mTr$:OZ:slBQCjl?=(oid[!;eS-gHJ9`CM0>;c:fVj_f61F-7;f6r%\iN1M2f"1+SoM*c\k8LD
%lP1L4d6RWj:EITBhjKitr5MS9^lO]6GpZmtPV8O%``9P\eUPO+r]ms*)eW:*H;-'VM8$jA-2]\;5o44bU*/n'aWI8WNQE"B(TLH;
%!B3g$`X+>+Y;T3K8=WrH)u(7Sk!CZ[^^iaI1k?3Td*qC9NE<)<64;^9ahrXAq.:l&euIeHq.>5-nG=QXFHd#Jf>F`S=jX9r%\,?!
%)-9mpnk<'B+&Cb\J<JAN!P%9A:9;@BpBUT!6+52(Cq5(j.c:.]jJS!Uinr9Y%=VQ9[;2']3c,C0mg:mF24OEu2MJ2PV:bETe3Zg0
%mD;j$+7ZQ.03g1*ED]k@9!"RKQbY;eRbZsS*RX$$/PU!U.^sr%Ik`dD3eb=Y9]>I19`[)F(mF_t0".rm9LQ7Wm)`LXjia]JN7l:,
%j-i`6e;02D1jj0eg?tcf`gC.8lZ(0)[<nLF1p6E4lL=&'M_SgtNE5%)4D?p_h.^2G>uE1t_f<M2%E4(Zq,etCX.QcBmD<_Q,;br,
%[6sgE%cqlA*nTJ[iNoP,WeZ:Or[-3l_MuS_dZTJJHs.?^QBuB55<;'0EFa/eqf,=?\(C,k28*%g&k>.,L,#+@D(r#C?lmV`^!gC`
%,6[UGb`?=4:^\=&8^P2@q0'Fh@o7iTj.`iCHDap8G1cMH+k(=uJ!Wj0:&;"Af5>)Rh=K"5^0es+Clp^qA%UM0'Vp!`#@J""eATA^
%PadIXbY>W>S'9ZPRnQc+R%&,mAfc'ib3OAa2)jZp^mL$GZ;YG\`UKkND7R2/2n.o2[bTZ(S(hs;RoO;0XLWS>Qum]#QmI)3emtYt
%Sc_V5mG3#PPH0)9rc9-lMPWPHg;U.;;l37.=Csk/q04as12CMfra/Vc[n3SKes^gRSQ;e]YGH00h.5irnWmbGWN0>T[Cl3`<VT9,
%RoIC.N2$jta/BNfR6qs2W;-,>p\H&\fMq;0$L010bu^P?!^El+[p-G>k-%Ashk4XAfofq+=]h``'b3=7dFU5GY8HLDX\Q3e06eju
%Hot$eC-FP6,0%9'0ftYJ1K1KbgA+pBe`qWqD"CTb:N64"7_Rs?BnF/O;eg9QiaJDq31=qjKc+YA'CMo'e`&1#s'e[^Iq.(bNp>_0
%HU")P@cdU)3"]A;?g%qtWV"D>80G?q0\:IHoblT5=YlOEN_/72q.@0c<V>'c!bbNO$"@S@f5X@J>+=k=k],aXO)GL_oT&7lk1MTs
%FgC1LRhqu<%`Z#hn*C2#/*/Z0ba]gWGmEHm5:7GKd0RIEa8IXfD4Cu[i&*/N`8jm447S`YCp(gl68?gW)3qr`<]\7=]?Xm0@DX$t
%W]ErH\SX7b:@e5,*88K`l]lS@oDTON*'*>19Z8cQ/"8Cl75Dkcok(p?m_g8Qfl4TIk,b@h`L+QmR$VgDA&S<*hXo'=ZZ1],lXD8.
%'53-Eg"=6LYutI@pN-OR;WffJ?5'XX'>H>46rp0sCTPfJ&o='QR?e:G`EBG:KCRE50Kqu*kS,(sO.f*>l,!-sCi87/B,j?i>,5f$
%a\7WNRIUC_\#$B`=`iFMq!k5rcc.l(Yo_B#c!sH00&(boH.AI+6cLm@iu!?`bZ2AXo-u+o`@JmuJG$Z4Y5+o'"E3`m^]%<S/8_]S
%<Wd9t_$`^Bnr9U_3Rp66(F+#]'p_U6btk)&UY>B\pk7mA*/d*@S7oo+nY.pr$YOcRm2-0=hA;759;_tKM94muER%ufA)WJN1cFm9
%5)/fDH?O^qaio'W8h"A@:8qKt`61EGN)?(S:&9XYE8G0->pe9bCF]/&chss`dt'[3c8T8$2JtOX.@Dof;iFXoLKfaT)DP4[H5so9
%5/'%qOKkWo]c(P$;mUJgUZmn$2gdOZ@^4]@ho%7*Ju7Rs<NTSc1SmF3;sb"7b3>?oW:@Bp<@QP4I#N+mKm]_IQ_qci<mYqnPDZ&k
%L=]*/rgG/gI+c*cO4CPWf?2WG`3s\n&BmIL[Mc:M$8[s(iljY78t6Wa(AGd1'4m@)ZSS//&uQr)'W.VKn:c4o(u<-RcWSCZM)1Q6
%&Ns'aM\8C@R?Cg>g">GnP`$/e1)$:<&rTi9F&D)1.0#13RHL;<R&r.i!G+01;.;9RM&3S+P`$/e1=MspcZ;t[2!^">7>XHC'>NjG
%.2O;UA>WqiO"s<`NB&l$f('<_CRf0#h8StpAU)I$@ets\9[?&\.hq#s@&E3*VKU:l<8lte`/_!7P[?4LlR.]OG$6BoggadZYqjnB
%<LK9H[CbocCX1ODP-;i,f/[3-o<m93CYMR.10<*,=S*.:1WIu-g=i'trJ.r;>ZmOfXu=n^k$7:<ajn6?U%:"W[jMV20i7AOETO/,
%!7&($h7&M0haT=s0],@kD:D!1s-ZN)NlliuQ(ptNfD14u#EG_IJs%ftjBXP3O(5"mL>#BOs(cr2qQ2Uak/CQE2O,.2hP/"mSggVp
%U*eA!9hD91r2h7&^CBrHs),U_M&FJ%0%YteWEd(6)VZl"Cj>c!2V-lAg5]r`o:dm:<:m$;^p5W2-T4sn?\W84s1sRGPGT8s$`;l"
%h6+))=5cTLMoMYAM*Kj=rekLgA(#p?/:J:s^*\9[([BO?]`kG#@40(&p/A<pmi2qOb=V;F14kHiYGpRaq.@0c<V>'cemtej5n(6Z
%FW;%+*b-dS3-2S](T;*ZqY91a__$.^gH<+1TMG2#D@9Wkc,#b_Yqf<WEgA1-hU-rNcO%^-$q/m5<i78^BR\BJ*rhf1q!X#3oZcF2
%P=!Iaq!TdjRE'g?n_X@p"=(^NZ4W:ub[\BYR.(!tC.;^I1O7Bg4Q]k?FAM?fjuX$$Xa/-7Lj_.Aq9D@'`H%s-M0"TreEiCO1R`Pi
%`%S;lWW*r%O\5H?WXTD<$WmQi`h[of(n7WDQg@IV?74+MH@fcUBJ`YkJ[JdAZ`ErZ(n4eM6hfh%941-+?*s%^1$-iZM1`?oD!iJD
%\+n.*gi(BqD<%qdH*n)XVnA"0X]W<=DqpTC'sG<uoSOU\B"iG(9PWuVS%Hu.Y-Y\)/2X=CMX]DN2KiY'F^da+o)C4A471cTK^;kX
%flC>>B>p6u=+P9E]n)lc@s6=3b@GMWj2N!QDG$5^T7*u^VipCZ`+@G5GQj18c.P^h#AnOJ4Y?\cffl9TJJ]%6"FCAt9E-LU]lF2.
%mCsU5XkmcD_(0TIbM;VCGJ*hi*&#1R_N#GkKd$K>h!m.D]Z_BLF2uJZnM5=$9SMN'1;GOt9p,Fc"3KFUpBAWp0R0JKK/@Y'-LTqf
%RX<&O+Y31LGE-iQCuX>)&2<@f-K<6XdYgi<.@;hC2Xt^*hg;p5@SA7uq^>gceOMc^!]#5EnQ\'!L#]fYe+=$gGpT?0&<?:7ajeDN
%=fT8Z8*g.=-QK$=hL5\jSQB0e='lj^RJpj!0:cA0MtN^;^3XE13E(n%;tEr`A(Peimo99G7EGBdqd`N)]i8`lD-Vdl=,a\$VFI,:
%ELCGo`bi$2BThOtS#l%H_r"t]o7o_Ls$[mbTBrl:1^5:DAS1V@m(%g.Eu*K0C+]pmcoCT4N8cDF,iT*:^W/8>ePK^Kib,e=.k+<%
%)r"oq30UoDi[(Dr%EG?mrl=pR,;(-&NS9XTpL?mJV)e9[9V__PpL?n2+2aKI5=V/'bl&@l/nsKtN(IU@F$I\"O"hr0N;nolf$;=Y
%W18#-XOPH1gA/nWH9"aG0>BF[++Ero3bs/l0"24t\TbV9:Mb5YY/EBnhpm$XPD`?`VUh^f_P5o*RT6lf\0e$tA(64CaLAfee,.P_
%C5"VSF\hmSc)i\Zgp6HD,).I\C+QeQPF6R%5?!8jB!=>BN"kGPOtgj@C"MCD'_MbK:Sh[:)J>sEZZ46#?8lP(2eZMVkaj+97m[(a
%Q4:DYa3SItH-rSkY,B_t3-3VG@]@nADWo<fKA>@ESLI'CS@k?u:\T`&Kh5)6;J%B2/(S7na^--g_aK.j!_)2J[\Nj%+jX&5Qs)BY
%-`g!:3$CcR`tUuVPh?Kni:`VQ9YItg2d*Ro4=Zh)F5tq*F),Z2c-<B$\MZ=Tk3giiMkNSb\huEB&">1u/k/9].CA8Ib\D%@c-<f0
%3B&n[k2tISS6K5uB>C0u2i1*bl-*9cl!dA!DUM7J8U"4=(GD9R3+@<emC=(&oG!X%R%9-]m]RbN"A`[[S+"'*[Wu/8ak.jp>utKA
%+1&/R`#+>IG*plp$=o+9)-m83Nc4#b^Sp3$f,G$F<,^h*jn>nN=J!B1qc>)(QWga8(Z!'CI!BE$=j6\8b;RKdiD&DdRQ9hK>frM9
%1ZQ,2LFOK[7aD47AuTCm+['Q;D+9JRf_7'p%1@uAZfIp#s.<At:/G$1mHgm+,ZK"`]e>=[I^-(n4"96#l-`k>-[8[D6o4L>X.@#u
%-GD+][.fQ"bq;Jk;QJ7tjU5DM7I+h4;^P5-1f3i^Lro\#>j]Ie5l!"P[EQQ57U3`@4GBJ='XI9Zn1A5l,1Le[l;P,bXC+8!(i\S#
%!?p=,0;Q`qRiA-uF-k';VadGNFZnqqOK"GD#t]`^K.>CNb1Phm6afO!\,U?qCYkU/(q_V*MC(hBRd3@_SS0u*-XmT^[8Ji&0)Rff
%XZfh[k1S@-B/^.]B"<=iojX1AT.5j46P<_G+gGg"ZKH12`L*egkS%e_>i4,0CC]W?YJY46,@,@E`m&pE-c*2gDBIu`\!gUO-m7Qj
%\)tPI/fa>L.8RNoN&-5\(QNJ<b?R#%Ot`<I`<eJYs+@Us)El15b6B=ol+%mB3'HSIY>@n=7EfQB9NM[qRCqNrQ><eOem7c4MtbF'
%'9.p6=7adEN%ti@_8FfV,5suYnt->_/U`Sq#A(eefNAm6-?e>7epsj".HV7b9'Ka1?CPah1##,\Ajt#%s$=D>m\-V`O`>lbNNl1?
%E0_$$Y/[[t-GEU%lA2KPN-"_hEKQ*GbH8C/U,MOH%"7Qb_bT[&D!oe,kPnq_A3=I=SBIP&;OtPVAst4+&EA<%>bRb4U#2TPpEd#2
%.lYN4s-U/.DW`\4XR9&4-ac@$-k&iF?!R,6=6hS^P?b"d31``#1.t$$ZkH&@f#_`@:1iN51NiDZ=aI0k+_9TjOl4]#^=FdQ\Og32
%Bn#2L+*UZ4VF'V0(s)[?S^VSgAa]Ei2jT.qhGTW]gqrlb4)gd#Gs<aDpB8;Q00rc4mAe>)G-0t8L.'?]I!#A!?9<aFW/T!$Gb4U]
%bI-gmJ,\uLnW2RIq6s>0I=e;q><jT`[JJ2fI7%aP9\%3)q&2M23eCXXj8$Hn&UWfmMSW"^Mj^Vn\X)/#3Iq^b_c[Xi<h`q_C$,lU
%GCM3iB^'oF>j**+=hjY7^SK8Db$e4*?KpD\J<P<VfIPI@7B]7sE^PDH:aXWf?[r'K,[S<bn*o[V_FPXl5(-9@`BW=jA,Hf8/RnHF
%'+(>;`DBW"_8+\o0o<<5I'XhRX`VO_'o/Gkn._gVmMT[mAe9PVki$^##L=SmY8'.\p2)VLIX+<aJLg\'Lr0](]H%'bP*ViS)IP4t
%l)*S]nA15_'N8ulpt(&bWWaJ<pt#XA5"SK!`;;Y@4?`eF]`dE66`U2C8_<9n`8]O;[sd;e%ZA;/-``Z''"kRL[o_c9/Gu9U5;.Ue
%-WEO&F6biqSoa50EbioV>QoDZTrPP4_?\8+*)/q@9ai"*f^p,gCZ=F-QoY#5?-h3s5@W6I46P19DE[16GNIDkL(.?59cBBUl./2C
%`fEHuG,0;`_fs(eF6P]O^,),T"OH\19)D8K:S3lPNCq!aR3iU<p_!L6;EH3]cp_LHoa0A,O^p%8QG,DRlF(<!b+XD%BY!a9e<.]H
%e6N>\Pls`m\%?6@St>=Q1$%L8mP$]E=1i_2j/F&)i*:)l,?_HbkVO(p2^!Ke("K];Ul1k*Tn?CX8_IfbQ3])2s+fh)ro)0fNXG8_
%3WR2BoPT\iIH\%R[JK(1:&^iY9NCl.P@)juH3LqWIpq5?cdUW<&3smoKhg1![BoZeONGB8RXBY(KO;>RdI8:>VN1HIG,HuMp>*I_
%<];6AjYlSo_YHIcqSN'fj'(dH-JrWV%!A[>A,KbKW7m$(ebsXU;$@m%n,NTuX4.O/hU'-["Gps+1(b24.+drpo&0g=Te4X8M:[2N
%Z\^EaE:Zp>`U>$_?iX]q4<>upR%"\'B>ds;YnP"1RDSepI("QB-\L>sSqTq??*@!'qn#oB?#Sh%#t#R;q_141rYtasAGE^3IiG!4
%g<-PGcO$95.H'9h9"?W;Cg8h4YU5FEHtC*XLRum=!.IWJa,W$RTdM`9J4Z/l&n=NubJiH7Je/Kfjn)76b):=."[O<$:<)@j5O6mg
%?.@W%=mUL3p0k:T3BT$QJE_Pt@[%/XNgu#m7RuWPBFuBB-3B4-f?P0u]c$o*mV`4!YUFlEZ"Pc>RU?):i"aG+C?!l]eLM[!Q1@"/
%mAap<GJ\m=e7g1K'd-/Qju!fB9s<Zd'-U;XDf=p,j9glo;-L`KJ%1qc?2*cl<hnO>D3qGjjUTY"cOe6VNH.oZ1rQ.U^![>ORbCK3
%3ph7Q38\Itc1:nIhJQ9(DPE83^e@qnC8V]7(_)9(S)g(+MgE*?9EZ0/F`da6P#tF`f>,V6GM7nsB"cY1gpRV.caUU+"aXe(G[$1B
%HkL'OqLR80nu"_qL=Ri5Pi.hE::gNL%!frM:#3I)RL'_enu5:j[;07fIO!agZ>_MBEY5P=j*#+6QVGdRIT&$ZkOuo!(kSGun'l@+
%pV[ID3,#=8/L(jWo>XFnH@NC;gVn1pIo3A5gV8>/(S18<U&BB+ZBN&q&kDVL:F2lC_OX<t,%!A()P'L$M^&,IPsiaOKS<%/!PkGO
%pGW)!$#dnu@L!S4HDO2dZ$PFFg+Yr4.o00O"qK+De#hMPbm&K4>7oA%L#0o&g>rJ(gq7H:3^/fMGtfhpN'Z8?TV-??K%kda6[VJ5
%P"IKWYi\!SS*O$'&sMdW#FI"=3kY2se0V];=)OEPm+b4DjsA`cVEMQqM*nL2K]c&WO,KR]pMRXd&DYB6>81H;AU0m[d4O-L]ZSEF
%)s4b>0B=Y)A6[P+=r$O2"0c*Q2quk@r;.qs]f<A%g<q"tT;+em-==C,[n_O7]n+66!`D2>pB@Y0OeF(O(EWu8S9/1*\ZOP!YQOt_
%(/5!qTUOLs3Z6A(B[b_\YUR[G]b]gCCZ"Fo8RN:SaSTLkDn?3iH!m51?4TH;m98-'`W^2$l_VGX2M(Rj/Is"@%dB/=RBKS!2NqCM
%20;U!AU%N#5)[?ugT11iDQQl6KP<%iJSXq/V^0DBiaq+O7naYOLglHLdRT35A==CP1llQdRadYBkh8,\QK`:))4&h.I&EAcQBB_\
%CIKDZ#E!;GCEJBje`=21U@c,67o_p^Nf+0\4TH/oNMEt%(h;>R50CD6ST2ZQ`B[Uo1RN_14t?U"<Bs6B4J*u#l/jXFXn$$Th`W:g
%)K&_l1n)Oe\gZAkUtsARG'tTF.s>P9f[8?MaDkQ9,[E4*CJj-?YT\dRA#Munes9V(q-qo*_+GCT(V^U9-4&Gs.?E=E6fuI?q1eqf
%JB]bZ;+RE^Uok2=A)1PcpJbiRX7bI[aIC.Z]m6"c%(Ksrj!(LDCGRI'iV,7;iQWM7WE#]kpbdS*\5AsN)Mh:)e-7e^[oO]0o<N\5
%D#(%W!uc_?iY@5+.Q$IN!H=B?m:<KM]fM:8>+H%NDL0f?X^n84Ru;$%;+;<U#j,0nk$@+Hq]+Ck:p78Uc9/%&77DKhDtgTSSqaAJ
%4K&9eLj;KK6`m`X[JG,l\Coc!A=l^1eHem1!RO2lHD=:YetP#-"4X'tM'i@O?6$8K6"^4?FD?M\b^isZCGjuu0qd2rL0U[3\]Edb
%j@M+Hk$<N8"nf-fpq1ilG'NY).<2-=1+VR]dB&\WQ!VA@V\,k*?J2f2U)Nj]hM(If%2<j41-G!?LABCh\R!GjU((q^NLCG'4-KW\
%Fog"=7fUgXE3ZCG:P'?f(o0SV4%@aF57@U,=TWoaW]0qo)!mC08:)AS%cG,&AL65i+YZ=%5qJTeV,p%EXuMM@RACOmL=UE2>?InK
%\K.c!;DTPC$ap4U!u8`qq&Knq>!ljT%#20*L(`O$M@+IZ>i_BV5q!0f&#`XHnk0'"ZL6<2H6[n!B"*4EX?"<'UgNE<p=4Q^]%$n.
%N7J$j0cGfjO3tTJo%V*$Z-m<OlEu24Q_\(*GsZ;fC4j=ng-*;(n.#+_Jn?*g+Y+h<l")DpKYif';7k`%&D`G=5JuPZpC<2ti[hQl
%Ok4=W(n@B*]BosU?N^+3d'DNB)X'oZVV+_f"/@?*?O*\`TE3l"j:)N>a0$EA89%_7<'7J/\o$*6r`ecIZuh,mq_O&r(Rp>++XLP^
%gI;e:G,5rrMT0$VN(o]H#;)]R"ILn).^7(SN66&VD"YX<*k)XJotaZN\*r&;h6*?6C`diogt<8l4g+\X<]_V_9=rk@0:pqQ=X.;F
%Q1pBrJ!.S:%U_lNNJa(fnS@qQNaA(B8^1=DL,fI>#YMnC*bBEU=I(ZT0XSN6XZ1i[jBH^p6FQm"`gL)*[r)kno$,Wq\U"6\q(->#
%7oLOVT(!I)(?+eME^]ik[RinS2gD!sf4pZ*;=]%;AhF<Li[p$$3XoPmRQ1Z6KKHhVlD,rg(Y*tjj+$Q77(WB$cr?`UaoEtLilYO=
%+uN8'aYuu1>4pT0&=CLoZWNF3Q&.GDC+_W&VkJXti3roFGA_\]Yk>Hdd:/]%>mCIG%*&@Ckk(lR]r:&9PsKFCK#3Q5Q1@1YLE)+<
%f7&"<Y?eSj2+Lgi11;M8?u!<)E]\NT1OfD]1l/hh!LsYki'AbOC$08#@!FCkQFp_#mbEf1/r=[#$p\0Z`]uIYfB,d4lMD^2q9^.\
%9UoF?!g<U>:4NP4&99`2HO.rcZk>U,]NV%p^VLq]Y9e?BQ-L#U8%(k"R6YO9O`03>WFGf-A5Y>K#O@Q[+CXURrbh7Q>oisFG7olB
%]NVKb4QN:l$A-*b?K0YREfJtOTuEZT#oM=`TE[AM[-Q@A_+U"A)Nmlqo).>t9Ig*:!b$.<^XXc<+i(^t/GYrkc?NkS*\8IJBo.-b
%!3"[FFDBEPSh#)EjqZTJKk@kMbae&EMpqMFbMQqr+PkAVMg&b$BC)4N6W3:eg+WeITp#7uAdILTJ"h!Rg-@hJP-[@(XB/g<s/\/_
%6i/&AmHB!V?=LsJX\G926cMQqQfHo<;:Zs#i-,YMKk>6k)GBY?K6jX@VusZ1,Gm*Y2hMh+paHV=7=DOdFXNGe[g3qc>UftjcbT@"
%X$?Ps20U700L]b\PXjsRV(aNn,;CL-(LiBY4l&1/.oTtVKkC9-hql]ZnsY1u1#4@5W=63.&N`+moJhLB$Whjd0:FZa[QLGi,7bDj
%!T@pu!*gkJnhE6kjDL(!d0QI?P&=1--+jdRWGKr&_9t_T%tf(3&,A`9L[R'A?Pej0OLq>ah+Am#&9M_G<GnXp+PUKc,Em%bi`Xs4
%*&,Oo*G4=L?_#(lB9f858U6sQ='Fu:r1bTi@CALG9[Y![K&6*NP#R2FU%Q,S%&/-G?)TT>Gg1BY>e=5/g44;Q[gqNg7aYbn<(WB[
%h2]$*;!V$!"!&+a'.49?-.f`6O`,kg=Ra"RcKa5Sl`oTS8Y9Zi/;;XP@;Wp':Kikje8Y"@OdU5K1=Q*AC]N[Fmkj'HXl#+[N*arS
%r6!WGdZ$"5OrB'*4:*7\=4N#Ng?$,3@X&6(Tc'tNB+<Y$GM.^S%k`W3;X^(8Yh!PB9&e3-bY>+mNU80=UG8kUR&H[!\FglPjBYem
%]ur=^HXIo'3ng,1[Yq0`/bd)^<9c]'DE9BKVGhgQ']k)Y_\G?k.\TIUTR7#AH5J&G-uqsd\&T"L)!Ei:aMT[?]n!Wn6Sg^=3:1u7
%b)kfj.%FR)Cs#B-PR$L]9&BnA`S93FV"DrW(a\"CJ$lcc_7O$e1IfnV&s:a,K>F$C]/)]U+$]paW)2sXX@Ph'G&,\9/;OrLOkI/p
%*?C@Ur2P4.3$bD+.hV@6YGKE?D,6^5G'=r_$`\Q98hVb50+K(R>2DAgp1,EJIcZjopi&+(e_I-1X^BX#]ZNB>=aZA]kEE#<f%ZPG
%f#.0_[l_nHN#1gWT:[*>2*1t'\#gZ1$`[Vt<0UGWHhMJKH*k!L2>M?0F/@:<C@,_N0[/+fre%(aor=RsI/.B(CX_cJ1?E/p$e](]
%a^s@3qo'("TUj=ZXP4h@g=bq%d`0>XPuP0*hb*:-[',df>7Wg+XRYL*rOqd_%#2liPZJZ`]fi[WP5XgnVpD?k9_.$,UP@O*J(`Pg
%c@+ALD^DI-fp.7dDK2RVJmepl\SklIAP6CUluZg>np\9:^1q;`m#Plt7_V%2(=`:)>FR:;S8h%!F=ZtUnnT704oUT"/abenY<(P_
%V+t&5eej5;q-jS`EPF.Z(Ua_6S&NU:EPA]G>0n?EVdHWT>MdLbH(3!%SYsfk]m=q2;(1M/nPa^Y]<m(,6`\@5hJSW$I9S@SI8rsB
%(1'++D(^>+V"RS*s1eplD/HqsdU<u.j5$'(<3>Yc]):o&A'M0*ITEoE[8ojp2%.%]o(BTZG?N#$C:s_nfhXa-9NR,;jigmL(0NeF
%[^`p.V(;7:Q07XFIpjk6]D:r4Hc7kI5#uk$PP+FUSZ.*EhL&E&['![sr'L?GY:[PSSm+u4ij*s;cE&r^7+Lo$ooc^4#kVDB?W"R#
%4NO\e2]q3(/:VKq0GaZWQ$T,N0T:&Bf<.DHQCm=u`M^tem6,?Z=kWeo]kJRq?(g-Mb4>/egFHJ$`T8o'dFkkNNT0]a?YMBGLnVT$
%Zmgc]<p<[L#[[WEeAZ(@fZH#6RJ@tr4XY>a^"*S/qIk:1Ue\8RQa<Nr]cZ#)r0'Wblf.:NpLrOagXKXYI?Z=SP^dNJpp,>T_k`8&
%Vrs#cO&kf2p:7d4/oA6s*TjZbcd"?.n(-2^WOd&:bESTuJA^R-D#:_E%gI,NIT6&>L\jmAEnR;K*b._"R^W9[5eE/+Zi&fgrWc6`
%\`Mn]2GW"VV+tC*48kB/6#HrAE\ZE0+3:T[?j@]aYZBEMa5Xt4p20Ci<lodHdYSGl^MW,=5U0'+QIC!NC[ZRl,<*9FE\Wr/?<jm!
%KI<9a(fdd5G>dV-<2,l,ji5<LggXtNR8Pq=5AEiP^2>\Oh&*CXa0(b5I,%iH>Zo,!gWTK9>X5Ks%mJL"fpljpO\iMpG?#a&j;opb
%0!D]fp."$.EQ\9ZSb9/'dEB\EY0R($fj7spE2/`<^%V.T0MLd(TXYESk.-sUmshj-JsVp\g?j9l9<`]M2+?7S%f4;FI?[qsWbgb%
%k!s:aq9Cq#VA;i7k#Ehk[^2j%[T3pr&ar;k0AinYW7eRsNMl%0m:%qYWP,@1:9WM=Jj/mor=0b#/+qLtmd[=U.<Sn,H319uH(;=/
%pTF_c>frA(]X.[qqA$?Tm<A#+8raB+m!UnEF'G!WhBTf8QG"uTc;JQs$E``>O&O)sT.8.\b3C<n[m2S(0L:?f.qLMb^"=ar2L!Zi
%&?GhUr%oKb$cnVFlW0:/cM$8(+(p/cl1l&#HEh<o!eB-!?N]KGo#>RJ"T5n$cqLL2b,<b2[oXI;X./so[J;SAKI5U5!C,4dS5qjt
%c;Q*];^;(&)C&%1-e5>2@Jqo6=a6^EIFrpeR&Sd4?N-YhWr6X)fitOq_dCBiZDSI:r9;aeB.eRXru@Wl\&-J@b;?n`_h=NA`LD44
%QPoV]GPJQ+*q;n_FZBMI`4\$Kd-ek-I/9Gr-DGKI%-%GGXhl++0\'uX+!L.P2dTc+ZN;,$$)+,#!!jKtB1cGR=A.llIO9B9H-n>@
%H7tS3TR02bh\=^orcg>n?A)X7eNVcA<c;?\?_:5)Csr*:?ah:)2rB:M^aT0VjL+@9CFVS%%b&*pdHc/2`TUH]?l8:INl2`a.b]Au
%/lC/Q&T/D4AYL@=_4gaW\8=-DQA+J:T4F;Jf<2;J)mhN4ON.@Tq"S5]4Kj9AqXI!=cnJ>lioq(2,Xt,,`l=-c,m"Ct>2V)">49Dg
%,r)(M7lNE$h9$E1oXns=m#OYbs.&gXY[lQ_bNQhr\NM&[C<MF(M6Gl%#a6`toj+X.2Rk9KLCt&)rB3q/6tuYc#;>Ur]Zg9u@\dQI
%'5"&fT#T0EX@)f?VM#WA\N]iEXV3lmS\EjZjgLb*VdKao['9II;`0Z.Qi"=3#9VN<&"Y+FX=<#F\g'(_eOQ:YA?WJf*ko>3PeWf.
%D&9@)4D*7^dP8u>dI$'k=;P+(,BF*l[;LnX5g<W<0"kY`n7[%1F!1+dlnRV\f"3;fDW[s?r%YgmpEL]M;Yo0A*S7TP>:3dI(T?+i
%[]4*:0["!1XM7dckF8O0EqS9rfD\tM"GZ3R`cbePF=h@3BWE<*;GCM'B"b+s0*@Jt'W>(R2o(F"c9==F+mUb^=b-I.#-_=ReP!!P
%ol]c\JCdifCBqnP;[=3i:nZ"$++M=UM.*rV!qi&&9+9!4We3L/Y2\NpYjSfY^Kq-\N)N;+?]&uN]5T@OVY@:BUu;NV$G)Zd_h7;m
%BlUiaSD?hB:LJjPMtEL@:J]GX(;@.I<E<GnW-/<D_PRZ;s)Vs/RGIgZk6&r%iIT&`99?0e[,4mW:K*$epOMU=Rkfs-OPFGh0M7sA
%el.&?m%c/_jX7>C@$n_lkQfX"bjJ^hGd,NNCngg%!2!<G4,q!->^(J2Ghq3Er[g%PjqGRIG#B]QX^ubUnqUC.IW;<']m\fGF8#7*
%#PbkgL,]FFO4Omu=.^S9"2sBcOp&KE@DYUs!pT$'AM@)D8qt)Xf$SC1R_I@E4U?N+BjOpq<\"M0eZ1;qg.LNd[m)8=?L6J!02E\P
%[VHo=T%\d#FdTmD*j'j2m)&b&oUDVX,Al[4osFe-o3ig8k4QhX1s+hiBA[i_k5&T,^@#5G.Jo*8AZ'\721((DgTtPb;%F,Rplq3$
%C,W9P)X@W@05-"Jji,4u1]T=(aj'1,3^7GV?`&fX>#AAX[N9Om_l'[eG@PRAs5DK&OY!E_>2*B:CB!nkAa\g2M?0gE$k/eo@L^9+
%E@uILo\^)>Wc)`\I'%7V]iffsI^OQ$#&3:M-ZTafl98:ibLPs[k0n7#de`4j_=hqflL3f:hVrB^bt:,GO[q[*@67U&r02iCE<m34
%`aCCL9:9h$Cm"U'ob/_ggHRGV?,l@<K_g,g!/.o<`k&aFfrIr5Fk(d,)S*Z3LSK$-mt4g)[=#FW\sP'Mh%`M5Mgp:<s$Fh>?9VoY
%Zs%tK4NS'8p9pMT1Y9<YO$/&oQUbiU9(H)<:/>W#Mnh#/k3KM%QgOCJ$_IFsb6M69dU*f=&U*87+7N\(d/kH.h*i3'\UCaVZ.uJ7
%&HD_t-GC&Mqj46Hfk1PLPAYZk:$kZ'gY;^RG]=33b6IO/daE;I=o"RC(>Upb$I9^C&&e8>_l_0"D]`V9X6!,koA0:SlHReQbLH(H
%EXqig_TirZIB=9S@0MAhbd4_Dm\g#]W.>pe'B%E1-W/e`ViMpjjN\i2rfA]4b0h$fd7X,_imK$M4966@p#:#N)CWN%CSUOcj=4V<
%"2sJECO>lV<=6o2>d).mqWl_E8+!`LoKFhtjTDQsT0oA-D4W(U]7,+t5hZ+CZRPb?75"CY&&+B&lfBL4%RAWM8`d6"?9X@;>ZX".
%)2?i>;ZHB7:oee9mFR&O_k&1ohUeT>o"2$=^>(,TYLGe:^a;c5F^jLIlr;_8T4#;"5-sLKV2$Xa/I,@YhRp)Lmpoa;hS&+r&/"eQ
%55571ooETbl)c$N[8D%B,QYeqGfKj(:En@5#oe$5ZC^0,]\L_3p<>ig((9s2iIbt2jBFcGrp,[QoPGSFC<q+i;1q>QK=#i)0/VI:
%d[HUc>i4Dmg.40>C:Sk3F)e7kl?87VDl)eR`Rie+qe^3IUXstMK2VGjo>rHF!ae0fl;ra:&S^&Hj(hNaolC*sJG!A16n6NT=aCdI
%\C[_Ie!05@P<O8`/\PklOCkX=i-kDTQUuV9b[n48O'b(sVXC>:[Hge6PLS(M>OP=2o=<+^3s6&_jbJ>&Xe0m*>>Cr=:9Mfs@CES?
%VmKbq91N''kK<X.G;#FIQ%SAmF*m'rb*sIp2a7#;V$#?)DP<!g%FE2ja'8")Vk$ZIc`L9>D">*G]!_P6qfPGNLVHTd^N-`@#i5:Q
%p.%`m:dhl%nuum9SlF:D]W^3<\ih9sOdCiom)uT7<d*RK\%T?EB]1O>jG+iAlJZfjT4m*Z"lenF,:QG.l67oF@f^\]e$X#VZjHH!
%;Q>J[ibn)*\"/6.K>"DL_lrHDWSU<<d&d[roPt7j6go)adL/4j7af":NPS*Y/ZW3g8+43Z(!XD*b3hB!n3HG]/b[s8hL059rGL[3
%GDg*IJ:9t*nNQ8UIRQVuZQ.VRI[EZU]"$ggc&FMUQ?L!?%b7orf(b0hXj-$gLZ(rV[3PHG>RM]QBruciT"d.k;s*B%)e9h$`%]\u
%5lI/#:*YJB?b--hG/:8rd&Y9b#^ed,fd@"b=GIDWWHtSOGfqdkrB9>P4r-G`;D-Q3Q?A:kViMq<g9P#60@o9o%H.-NPr<IAdooAk
%?KBrCBmipg$QkgLG3``"LMXV$7n(a5C>/Kf<MAoW<&p8:^&%LRKHLgn?d][9lOd8<+s:W/AAWfL6.U%g^096,qK!,C.Loc;.HsI$
%nZBjW%oHM$P[A66.%=#LqRu+@iZD'`]SA5$LD]AT;TJJ/G'<!:7o:a4f,Yt"/pTh%4Ph^gAUOSPk<Uo5m2Wn-eNeSr4PhH,HD=Gf
%r"uO4moH)*7;)i0^q[@B[,<pf!(CDXCjZ!IaYMfDlft-dcOXDJmQH/qF31AS@2OLdZ`VJEDCMZ[p\&cNqZb!Pr$1fZg\jSCB)-`<
%UDkmZA=Y]\B8^\o5+i)NHEI*aI8f@@Z;p>*Z=X-TZmo;RqoeAkZdWZ!+FQ,VphKJ-7X\KXD0YB-X"`l"V=;jXIoK"Q,S'dIi,uBO
%:<L+\>_XL,Z/:U\nh398X=G6dNn<W/`:^%][EokAN0u(!]c979pB6`NP?`"k&r?L^F'9PY`YM^sKF,!u%Y0;Z1f.(.%oOc*>Hg#P
%:MX7R&<1QD3e*]uSCQ\-W%(t66jE4]k,"('@aTMrp<,P<IZ\oD\b];'$Vdk?[Pm%,?aG*+Rt(6RkMFfe:WqiADf9K?GmbOirFT3[
%<dka5l$p>M0jJIhN[s6p(JE&gheFaVs!t_U8dFX2Qu7"=);ZdUWF-mT:kpBPANg(`oMr>]a^8\QQIcIlr6&_Y51f?Cf&s3sJtnD#
%l*lFB[)ehVD1#?t=[/-O)2J%%Q#o>V7.'4.o!?hh&U+(dl7@9rI(>!.C2\eGRG?lmad;Bpb:WmTHhnQU8gN<J?8!'%VsCP$??C5F
%^3$M+qk:Os"SpY^:q]%T9ODG)I,Fp*\G-ogAK@)pj_?Djr1GLe1:m<N5(<q;F6=8mbhuRP3iN.ArC.'@([o&to_7h#?gaGUK5iHe
%Bu9N>mJOH51+ZUWh1#6Dq*[80$"%=[]!A?-mX0+Oh]fE(LAg'b@'2]lOk\(p>(a*K02P;8o?C_`.:UbPHW47&c22[\gVa>ZYaToP
%2;c&o5pl#`(QZt'Hj(FnPm<b-F--@k4dk_Pmi6o^(E:NrpbA7ZSpu^egtKA4^I^SodRL9Lg%K-T)"$b"r4V_K>=u@djR*J@^miX\
%F,PBZ-ZurnoF)CUb!8<ig-#NB3tg/BP\r\L&`DW.^@#k$Z54Ujg\SG4g=SIiV+Om9T7-C*Ui\WRhgkE@OF'=&BC=lAF1Ai!8ecqA
%rp/[L/!m6aD!PfV=ots072,E0pX!e1PLak7AD$4*cb>^REL>P4^09lhA)!J'Sa8d_nasYlI9&Q15aqfX`p/<Z^mtY]aM\stZfDKO
%V)O;p)au8nFg@>E5<n/1?=qMj+\sVU"X@l$'p@P?g7DkW^HS['JD!$-Uk'sH1nDOF&!iI.q<GfM_<2meZK,(VbG^&^q;piJJFd@f
%VZ*\"1k3'KTUP^)prgXa=l)>EG!R]UIu!FEk^Zo?HM;p8K*8jTjLQmBET^<Ri6X-LSAE'4F`,f8DD^-;G:eGD-"O)RRDM>^WU?c6
%h6!nPGsnEeLm'imlO%tkb$2Z^p94b@T:tTIkdVX?I]/.)'%MZ$Yh]FgW<iMP#nnEK?i9`?i^LS#N?ud<1tI,8Opt@7G18AsDg/OE
%ogIC>N*56^hK\?&l9K%/nVT`GWq$$`KI#*0G<uKM3bjDPl8Drhm9c*FFQ>$2[NTN>2>P/G/h5E@$5'j>U^Emo?hVGT9mk@b^;so_
%5QB@H?,9&KmCj8(:.SF8R)hGj>?B,#fSJqA[fEn7NrPj^2$(,[_6t=VZbuNYCZ<W69gN%E`L:d#X=CnbCV#Oo1c3HJW0Zft9itC^
%[]>n%MLYbQCr"JfDF/I\!5ru$Gil"3$"1u^@:[DMW4$Fe*DOur"aJd!oqZ.:(-K%tUg\!,[d@hV5_5eml6Hhj^pb'B7lR-4j5@,,
%-=0c:L9>2DUu@-G*Q(R^0&Q^PG*=gX)kK@YMPHRG9i2IF=,_#78QU,oWN%9s>K7m=$NRUDI&=e/"!?2fTN?GM!YmfV>plV_VSc2(
%!YPLb<'\$l!"92I]BWkOgrqX=MJ65c[]?Gonc5Hi,)+ot9fK%R3]qDaUoHL7"7)lk2EnG^?q;.X>_EM.`g9sM\l!E7blArli#2G$
%Lj!d@\h.7_T,$j<;b?8_Wcg8-n01et\oa*mCZ=P36c2f,I&85rgG*tq)o,C&Ttt6S5!IOs"eP8M%WnN*/7=3mklTE9;XP,%#G`Us
%P8YiQd^Dkd?t`-\<cl7l&;alF1O'3[PX)O.Q.>YH=>6,.MK:S:\k+Jj5ej2VngLB&%_Mp_6]\`D8]-2jJ?NaC"ks'H&r#T\c:nE=
%]=*EX"`P@eC_:pJ5_9."n8]ZW9A2Y38C1C82dDk9N8_9;+I8cq1]h[f!1&6FlnH:bI^Z5fTq+R?gTH7V?saL3_\rS?*SNC]&;:=u
%U">E[&7m\[XT?:=+Rl1%Hc5A.C4g,SZZS`V?*q7s)"o\eX+j9?C.TO&Q.UV>Gi?\t.Y38DY.I5<$LS<Jh]&;<M`34>]S3;./_D_6
%UGGUFP$RM4KZ+Hb@q<Fpi_n\a!O<$"Y\=+WppstQXoqLEK2$o]BkcN\0!^*$WS*G4EAK+1))nq<-@i*u]QF\>7&%,?djTsq4'Y(%
%@>U.t4U:5o,W]SDdXXV+DaQ'h-8sA9U`EtQa;pB$^bfH@2.TD%l\I&`g2_-o!b[1?#-8ta8-t$e%+I`B"d4V#OB^*gJt2?3]N-oR
%0t_%"aD*Q:F+Ie*,%B1DRSR.l!sL=X;usU0pp%e2":Rt8(.b7C4P9bl%TJ(bCWOLPS!bB-"NX*1%EPhKfK=[h(WZiC!)j+J=GD\!
%)cji*M1+^*P8lroD^T6JR`ahnCnu'k"I97^*,-B.9oRq!Es8<)[t"D9-5Mp\n*q[>q(8t15K'EoB`)*,\T!!&$H:#iBbVKc%[CMr
%LYne()ZFq/Pq_eK[#-C*>L\OPn6>OB*W-\l/tCNiK3V+#lEu<21>RsoMZYF2rXB!d,R)OU-7N]*%4Hg7!PaMD&ee7GbLW&8>u9(>
%EEXc'Qmc7%.AS/]37Jqt##O+6imV9`SS]]inX--qD#i)jV%.4.Rf]<abM^F6VBO4$8u\iIf@3+>CT*rIn-kc&]^QdM&'US+"`;R@
%*,_ac.%*qP!O=se@2W;TPpush>9S.-7bUjbTaS]NKUpAK5o2fU9pe'm)*!_XUQtn\O9?TA#dpGZJ\5f_E,'/T+2MTo'eM.7*D?P:
%'_[li&unf)7cb0eh8'9V:1:K^9`"ldR"Zt,Xm:S%TG-`Y"gX6C^b]M42SodSRu1/@7845bEN6g^/DI%.JT<:N#IctA"R9VkN4PV+
%TScm7d]@0l5Z^nJe`i[(JeZCD-f1/[)N&*]RTAW,kTm1Y]qh<NlF+ed@B3R*I>T)_[9,V+.>ZSFX-"Ir25;Hp9W>E("<eWi4@@s8
%%#'uMq'<#>2KE'B'I)7Q6VSFFLXe7[2_C?sY^rB;4,;EnhBfrIJJuF3(50[;.[q4=[Hgub3j:K$bQ@U!?O)f6DGO3HVo>E`R:Eii
%cUgJmSlT4d`sOu\P!G5<9hjQ^b^"=;.r6f!"9qY%1]<:CX28'BBNfVeE3Id:%#HRm&!j"t@*fB4jWMbm0<p(.T^!W8Tidn]?U37r
%JE*F8*KY:J1PFo3c[cRB@'7:R26`&S<68t^M;(L3%C7<7X^ZQSifC0QTL!-6LIZWAVA2c,Mal?4Tn+P.!6[\u%Qda98`![a+6dp`
%3U>3d_hs!He:k<>d.!sDTM7s(SSQt0>C']3M4G#dSY6]I_bOLm@PAhCE7?L87KN_r&u$(V=W8Z]CET6>'h&:87r6NV"!mIB6`,Tb
%JIQLVllqfI8PCm9Bu@c3W"2G2(&G9W17>t!=&@liK##MDL9eqI^b,ZqES:&/d:?Xk(R5rXO_kF>LCdtug)UQ4W='Y2LgVK-gkLIk
%kZ'u8rUl.Pnm=cmA-+N%8#8r#gY8a(0>f!D]N5,M6Znb%M.HoBLSP>l"7GU8Jg+XO#1msN714AdCfF.rmD'u@)CPe]1NsOFfe<Z#
%X>sr"\1gUP3lPJ?*uMN5656#BJq\eVg8ZXj"aF7/&\pEq%jGB*LJnctLL=$$5_RfVs1"/phhA1i!5TmbE*.D1Pm.AmR?$9-;:,\8
%E;&=PZ)S((J\>0a4TNM-7`>/+VQjs:$@`Sg+Ggn4XGAt'$9s0?3%&;U^mtqoN\G1<ej`)t(BLe:FfY:"">g_;Gr-\tX<`i9ZHs`*
%"L\DY!=j]^\g?HA5F@_O]_u+VMRXgtm\"4nXh^E+q:%_;$#BbNT=-]&ekh2T3X.*4KERnj.tBW'i-i&7!2D>PPk>L(]T9S8FEsfY
%KiS.-EXQp/#h^B_KE=JD70^mW(dae2a0'"^X2(s=.C'!,#`5LB,Rc^H3XI,)L4Hktl]1NjkZ\6W%q_!DqA>Y2aOge'*@FWDKf!,g
%fte"=N,4(o914ab@0cuImP4'qQbnl6-Y.rM$'IR*Jusgb3k5m+7eRL3=.s;B\2Dt.A2;0!#*L+Ep9?3@"T76\O!,&C=6ab)@!'n_
%p1a#T?nbC]O:E1D.Le`[D,7MgU.,KUJgWgp'!DB+$kfCM2+kj;%XmFB!+[m6Kj"Lc\0U?NLHYTk#=\J8H,5,:_Qas3!O0QnBb&r\
%5Y#H>Gp@q^5ieTdlS)8.G!OY%50AG\f`.oi%!GXPKFSt<+/<``%9..Yl=>=;bXIj=UKj-L9R+di/6\Q)bT*7C;SVZBabN17VmJ*J
%c_u#0m-hCP=ocas>YkcRO=tfY<3O%^V#s$1*[(K`@@99CY*]]gY9@*BTA=VRFlB2]K)m=$P!"O;.CA,,#PT0=].m_dX5)U:nkm_d
%K8)(GV$d0SSFR8epaC>?HiRp_b*T+)(l+*JOlBlNP2?C(76\?JVOLE2i#/W-UXSAk*QUa$cc<h_-c^QkN#-=!nj<1`mrur'd%n4/
%mM:uplVLNaH?oD^&*/@n4,XDKpr]W=[pmt+-c[F5)]^gfC/Jnl-.s_\o7]aSh;h.]%0R]b)(L3a2inQ%,.q("\H4h=d8D>P,4u57
%-!+nSU(Z(>8c[ekTJ24rYUJu*'t1`kjO#naL^!:^<WM;4H=nK2i.X[FKk@nkU8t8<-<U><ADsE%1Qr9%W0&>6kiicI*$q.-?i\TT
%MeIhlpDN2;K$*.1JcQU8PM?D:VL?-M('+5_R$rp+%+5FmB1O6_p:XiYW$aBJPL"J5LVj[/9``3KGmf.-BX^J?eF,^-[?CGR2LF;&
%d#Wi0#SJ%#@,uNQ=TuWtS;@TeL%.2o8fuF%3Lg0C./3f[]&^@E"^gUmOSQ7Ji#17W[P6QhFceThh5PFscl3>c%`_n/5=<jRO+It=
%65]@qVo'huM&jt:KJV&r/q40T""A4(/5[!J;7"$"N4R?5_j%,-eI8j.EZGdT\JcCE)NpaD<XEUP@["AI21.+:0Gn<Y1LTtf1&Tst
%.^hH6/9m-A:,G8S?##fBbdJsrP5hU+4E!nSTr)3jOR3bIdBSC:V1SuKM\n%E&\??GF;`1F',N'dSq24J&r!lR$od2*feRs:pSsq$
%MgLF_$$Kjs)M-"*q\1`"isisAP+rju6#6_O'eiNUTiCTq"H&H9nbhtN&#7m!f=u>bJ^pE]"t503`.SIK#0dC3NhL:iU^/FQAL?>R
%@6;?AJ$k*j(pQPspV-:k<4ht<UU&Rn8d,MH%?2jeKQoQt68]!!Z@0tGTK'>kTe3B-9IPXu,6f1EpQ:5e6Gq0S9:@cmPWDDZ?%J=N
%WL^8@da<W,mLObP';?GI-t.3%/m<(+ZNc/"7CiJBl/5=qf6*CI?m?$%gjc,.#R5D>6td,@3(Mmgnj*=VO^6HoEM5D?*bXl;RnNg#
%llq(j;I5RFi-;IVm/TB%N$3<K"^7Tmg7uDipi62^nlJ6+l'=3I+(DE72ZBh$`t!Q6jf*mi=aTGlT<CGlrYt/V0_isCJCZ4t%<R;D
%<(14npsC%:0bO_@##Rk?"g+A4'p>NZ.H88\;jEIr*M%bME7[ah"rc-a%RW8d\gpWUTh]?)b_V+_i#0a8F+bi2_):ee!1sM@`FZ08
%SEq5n;CQSfYUL2UJ0%-=':r>NnH%IfU7',l%,fOp5QKrV0V*eH(!f4D4H'?ihB=q5"XSiM1\U2=^.V-3d`Gb0]GBBX"SO!@<TmPm
%FI%s:'GO>jAn\8rPB2q/NR1IuaOD:'.K\?@))t%/e,Z_+0.AMdCdbB9]RKP:+0_KK-?(QR[PCNN[mTD3l#`q%kZ!W/>o-1l'X!J?
%f]r4F.7>I))$.F2n?pr(E4]M,%O]GM5pTHFTMj9PaR;X[HR$BXjMIaH+q`f%n!.JALh9(.3RDt,[X9J)<>>m;/nTW&B-X#X$!TBu
%L"Sf,5;7&tQpE6ZSE'QrNYlG+B,H+8jYT]*aoRc@.V[\8-"Cq&5m`Sc)U6!K-&;_m118npkt$Bn:oX^LqIC6Y(kgIoD@RnL\/J6L
%ZYa)S[`Y(=KZ4kb)FhqU2@IHXm-f)8kdGVoQr>mHl/WInMQg$fK?YZNq$pjF4.69jG!AE!<:mf^#*%nh`'=DX2&o,:ih54=433[a
%==o=;Mj,l>B!Ji*7Pkht,J_i#E^o^_C9[(NEdpP.Gp9'[AkG/8(!]#I^VZj8RE,@1fe[Urm$<[sDUe1@6F7n".A)=Qe_&[<*'oi6
%%fh1%<.LNS$\'*P"\D1tECuZF0&PRNW1d6ZkX5TS.c`.$4p8ih_.7ZA.7Ce*iJ2bnIQ$AG3b$E(F?3m(9bB]<s0p8@*S<n":=]i.
%KS'0`;Ikh+Y]7d7BmPM"H*![_Ot%?skGVfYhIJAe'_Q(*nYSrW+`*:u9C;p@#]UoY<s_7sF)t@(QNBUAoZr=g7h%:g3#'A$XXAq%
%!N'!8UB7N)DC:-MFHapt7h$npn:_T;<;+F'M!B-4@&&@Agbk,3d@@5X%tn4W4seAW>:/?+nr7TV&_Id\-higZ#"V^sUBV[%:m2[O
%[Q)tdB`ohc\?CTZ(,qQK6+`A%bp7ma!JSBUST7_&XQf1qe55Hd3t.BtOl_*k9do\3+)+#Q7nG>sD,bB.nHmsE_uR/`9TsK2q`5`P
%d&=Ho)SBXElHVZ<,Tnp\*Qj=1!YN$Vf3dV35Z9P^/i)6p+)"'7UP@Hr6O2Zu,sajOZSU3EQ,@(O)u=<#HkR3@TKN/lTa9kj.brUF
%H.(U7W.?j[G,'S:8Ql'%[=nh!bFhr]#?;@57`<#M(de#u^0q[bV?AdK`'s>[C9TRhoi(Y)=7j:-'k@X5Qgb]@#&Q-h.6Wu*2DH)-
%-KS&FCK-@i#$DO!%u0[(iLW?dj@2Oaeto#_-q,>k:]>E:YRcZnYQ0BJ8hQR2?:PF4mRUIhb,:5U>?0XpVj&MP$X-t2\e+ZFBH>in
%8AW>K!q0=beL8@#qKj5?fH:7:Z9r3K0I-n>Uh92/;i2]E'NB@L"GoFAVNDQ<Gtt5qBotOHmrd,fj-^T.@)WZ%!A&gn#SpEr(n!=@
%/)]&H$\8U&PY@$"NPO/pe*2[^ef;d5</iWR:a;5DP\"A"1.IK'/;h_59anHRZK=u-+ZgjIf270;8_/jb6CLk@%#cd%:BM=E><8K,
%n_BrPOS"1@"DtMKf\/[Z5H<106Z'&97ii-(!X>Sh.s5",8#HU(fc9^aP#[6.^'qFn/5%l(36/8<f+EY;ik!Pe.=$N=.bG->#tVlK
%\\:>TUcae)Tc"JX>uHk8N3]BW7h)jL?)Mqeb#eE.*29TuL(AXWEC>75A]><:O:fcGX*f#M-D9[L4>ES^;1l""nNKkBkX5G=Xn144
%!_$N)YrIYr8:_D^psbNY:42"oK`TcVkGVfi0YStG^rV`_@U>;`asj-fdjZJ2L@e;DH9ooS_dj5#=W@q=mrZKE;`'bflONA0Jf<].
%SH1$=8A:4=Q-],s;C=VTS._pP(0"E#Np:`9:h'tf%:q"/fO:^5JjEPPW_4OiU&tV3Z!jP.7/KH8P0+Ze^mcdb/?7/r6S1$HB,koD
%1!le&G0l+O$q1;3%>]DQq04,tal:"4a?8hg:.J+2(<6V9-Y2NE-jlLjEq'Qh.s"Q6!@nj!O[*t-_LYieW%4msO[:(K3efl6$%3;S
%'^prL%6?]!G.KZ;%?(qkAiT6c(U4\oP7ot0>K8PAFD`SLHfL=DN"M^S'!\G=)CGo0#CR@%\8j:rQZ3F#=d>o#_$j9l"WXp"$IeN*
%D[t"$Wl-WR1HSSk^WK@!7tbYo);1$0P_H_8QlYCt`=-9(-e%h3qQHA4!M'`K]4@;g$!MN0@U'Y;rXsH2aYSH-a9Jn*9\-+:(%T:9
%m0S^Oi,:X]0hmRL,GsJ+L5gJX30&V7)J4^@:@le3;JnWI2i]KF/sKqnSA</*?J[.0lP>LeF[fC[JAY?RSZ^@32rKOoo5ZMuc^^XJ
%Z8HV9*j&0!;)X/*?0Q3'5ZP8WUk"2VRC8T@lBF4;*NZ#'(9.h4'NlkQQ0>6Dd<(M`8eR]bA]#/'gaG5GBVKj@!)r-DGCQ7aBSIX<
%gXH<0lsS$LR?;>7o'hDe<IYsb8ZDuUB!Y\XJC+*?A5oH/\\]gCScB).Z'cIN:p^pY>M18OCeLi97]oTsP@k\6mEt,_!hLeOktTZj
%]_p,Sa8?`*&_3l!&gi/!KJ4BU9'6>iWk#RS7me^.*2W`jk?Jnr;h_mh)p@B&_Pg5kE+fm4>,ru_BsE%_`0!b53J-RSd9)#j#ZU$h
%<aB,Di7SNYbbqX?3>af#Qo;n9IjR*K*0.95OhAu>3GFCr$:a;7d'Fps=eP)4*;f]*Ng]ru+Tp%'I)-HkX2Hu&!?u>Pa!T?[i=#g5
%k4fFOSf':rM<K*CE.`RQTeUK?*"lkf'aY7;;CNfKp*o,9^a"a^J2^qhFI:`Nhmc;A^\YM]$8ZKnf=;"-MD4./4FldUg'<r2&$'`q
%&6'If=U0urs1C;+X9m/)[R:6PU<c[=XVp+@R-g>n]&NcNC)XqJ..Yk'SquH%jQKk'j$l_(&'!RE'X$WIhs76"`j6jIT?8o+(kS5t
%YN[_`eosF[+Ye:nh;R?J]"]>,a"\M8&uR^6<3IO%gCQFfX4md"'Ukj8etEc?,jM@<$nrBb&(sPIdP3>I9&a[*dDl/\7gq:*]g=iC
%m#ZCuL5pQ?k;J-Ao&#Tb5pm6&RHXt(W%"nY-MimD,H=h]D)(X:c6O&:VrSWE_D*3u$OYO8\eCqH&cD`]@W`LE\hmAM3N,l9R&Eb+
%F&up>OJ?eq#?hg@!mie-$Xf1O9$4/"HPELg8]$3NdD`Xf>UhW=qth?n.4H81""p:Q!aZUnau6bANQ'jOdYc\:MA-PF&5[-nlPs(%
%.&tTj6VViW=Co=r`Sh&V)KUY$F%A1+iq';AbRQr?\5V&D_NI$_-hhgFEhK\S&s[j[Ud71n"J9g&l&IBDUB%\N:WD[EVOq:JVQSjT
%%N`'P%'9G'mf@1RE"Edq)QJj5NNF9`#gH4@a-#X(08)_OVYuTKNjGG>(fA!'+5E/9qg7:F3OT]XgXH;42$>k(2:76Nqg6"@\C'Cb
%65UlMkn$f)\g_i'f6Y9Qfap74n+?T;U_@dtp`%Y%3&D?+O;QRak=WW2'':D59n/f0_#1^n$JJmnNX>(u;6L.'>ScUb_dPMS'gQ1e
%ag6]J6mGVb"]OmSFl[N-Cb`Mc^+#"O`1b/K"XI$:M@7FdZpLJH#G#k`$.?(IZ:@<\,DXtg_ODOPQ6N^gSWe:Q>umD0n4BA$k(5N#
%2HF@]KlKr0,(f+KFl[LOrZ*B\>2mU?d>6$=[5e2=SP\Z`U'.qjXR!NAWB^bEptdWYJZOGqN+q4T5rOEn_3tt#.TR9Z+$O7)_$E=M
%\mQ!24E=tA'2jWWN^gF1R9tHI6W*5QQE&b8Z1[-(KWD*aI&o#q!_B66BQ(.IKVl%$ZcLK6_V>Yr;;Ip<*<!P\`OCl88a^+[Yi^qM
%#tberV!Wto$KagNpB!pUD,#'ALm-*1e<,;p<)bDSW*)9s%Y`Yfakjj#%S!ZZG"DACNAWc<[2=K7A<GB&_Jk.1bZWm:]oF"KFT772
%>ct-L#,`Z89'C8kK-OoGM@cbdYVF1QRjhHr9B@n-Am'VeUS\]H<Up@$`VBLggCV?>0Z-4fdi]%W?ji7ePY-caF_dcZKD/r,Y9V)s
%56Bu2qFiSn)l90%J\hD)/.WtG;o3M6YmfKUrOn40DV/DJa1#nLc/F"J37<PlknZ_N'Sj$e-l51,5B<Y5UIM^#e\LP?nt'6do.lPX
%g&j-#of3R)_!D=3>W9kZ+3KW-Emuc^$CfA3\nOcJ)p@m<,b&)'$U%AZ?8,k?=0"urea][dTpa#+CO`P^#</%%VTc^CiML],.`W+9
%c*b9%`U8H7ja'm'SW4\+gJ?>:\i?_Y7],YaV9Vp-`5%AVq%\A2!fnm2c5$roSYM2.o,`I+6dE+?C96sCM5DGp>s<hk%5g2FfQ?HJ
%FOX].m*=0MGmHVP+'!+el!_"AQ]T38U!@B&(t6:MV]-6*U$@W3Q3O=GrOq&0gfT-SOJEo4NB+9gHc_%I%qX4Ei5U?UjPQ$^Fl[N%
%fi#ruZ4(d"F,WeVBjh4CBBcKqO_9lX4BRmkOgDT%3)P>7D"dOIImAX79qIaoW(lN8%tSSTPN=r8)n%:Qg>D4pi=;#D*AofKJ2miY
%4V\lSm5\]l[N`k9RXQ;3Q8MPS=d=L>48k`,+5!lhG7W?70YG$UG.G\!&):8_N:R)HHQ>-%N[QT9Kp)e!*(^SNVGPD:`Tg/M-]`6o
%rre!!c[=[h%s%J6Fa@t6j2!=a@5$8n9L&mA`q#(;%Sd!_*`NpjoD<hS2;EF7gnF;4BXt,uq[h7(S[TN/($:`8;\=.EnSFKQ9(H#*
%H$TI-HZgk4pNh=.@m[g"D?k.@@46Cd9#?Q6bGb29&):-#*s3Go]oF(M8(>/je">^>PEC3K0V.O>n,XBD(=d;S;^WDG[Tl*3<'r+7
%fDC1>'C5TV;#n)fVn3+OA%%\QFtJ4`*@l@E3i^e/_sN90:--$.ACmiA4SXd]8hc@IRJR>^dFUd?;3%Q2HDEqB`+G`i]g'"]=%7oY
%_Jm+,d14'RBfH#OirEu0"N#,[6r^?7LYH70*u.tUpaX<;",,?ti^o!)Q:;+kNNW&Q/'/#H=E0b^ra,%(DVJQ)[0LTrj[<!N!4Q\3
%H21dV*R8J\l?1Tq""RD+q4$XP]:r88O@;aK5e0-2g?7J('<5+%VbrnQ%E8S!f[&C2lY,5uFm^NEO]VsI$J<N/+(Q><)18GQ7IDYX
%%QYDrL:IN?QfrgnM/$6Qk<@=b&pWu89>Y0"8ot9T1\0=p/HZWTdYk&S17sEDl?B8<Xoo8Q@p*iXi\`>CNa>nA&ea^7'45/liIMag
%(Q2U$*WJ[B+e-Wk\'V\.56#RjFp-X/6nOtfXohgIM<khWie.IJaS3_F1U4/#_4c["c(Ujb<(E@;a4g+&.;HLp(6#D'TkXUQN0Y;?
%_2dqZ\s3F^Sm3lTl_)ujY)nWuG3FHRs.\=ZiZtT*AoVhmXMO#5W0B$.T;==pNi'%0:<:IB)&,N:b85&pV926n-kO=^Hm1TlQ>u7n
%0\*ZpKl5:H:b[\VChkLdc3;bf2?b]iK]:S63L`UiSmeR?5/mb#<Bb(.dHRT\G"&f!9":!p9X.,L;&,oMPG=NQ8dP'!R,=-P_'$YF
%30tNS%.QG]7'E?i)q/UO#-=4Y`EAuJJS\?A_*eu(B7_SD-;A8"&X>)Oa9r1rH6"lqZ="c/EFdK//\J'P,$@CbkZ09#X"-NW1<r8=
%*/I6V>Z!RDU=2t,N=gH&mM.N<UTc4%aS.MghA'C9@W7<S,\''g8c0'7%a6kQ$rPnCU=7LVNL,(`DR.ZX.>fno/6j8/F8!+I#2[Ls
%kZf+b%>r?&oJNR,UQ#N5WDIhhVk]"#&=gq0jo;?T3kE<n)/4e^p*mGKb\gq(IsE%;Q)!>"lDT8B=?3D1&OVOeQ)\'B-lH;`et,B/
%Y.C-o8m3cISeb$8^)MX>2FN6lbeN9"g(D#Y)JkA*\gAp@'_841=9LXO#+$]He!"2@"M:C%$EFJTck#a.\_:X`Y9O8+[eZ.Cjmou,
%cq+R+h=)$;fsC9?,BdKFHj'46Lj`kQrW.PJ?:PF47CgR*n;el826PYeFrdVt2C="Z7J$<N6S)@l1>Jj>&>_tP..p.^MWf03aB#hq
%-=qPIA0<XQ>_eAKR$>cb<B::3=Su5[qI+i=gjFA9L<c2WF?3m00qQN(0)u%Ub1:)@=2^c1FcH6q_RDbo^9tdde"G2e3iYWk<e%:t
%"rka=RsY_]-,^GCGW['`NUb7)FPe5jaJ@&=Gn!d7gQSCdWkHg)-`![6pGl]EZ"/N<cJYHZAC'1*2j_GkQHln[Oc)eW3h6f!PI;[$
%7X@-T`JV?6M(taVdHc5)L,%">7[$F4U\aQrN)FrO2/+9pFPKQ4I(bSU>uQc_\/D*Wf+EXpZp=@N_L#OmR_X(\Y'Ea@5'0>LB\hZY
%?9B&UNr)^c8tjpIDBW"9M<OWhY`5qlnb#'fgF0,%<,`,tns6<tCnjh'>&"Y_hA`mD;0'2PgU>3A2.:=]Y>Tu[O:@qGEe^;L*Au=b
%?^J_*(g<rtI<a#*(fqO-*$00Bpte&eo6tV2I'qUQJb`/N,-'*h6]IE;no_`q`GJUi-jB_>WhMm?8jV#g0[;"tD?.'hN>IA2PXk@+
%H;#7nQSHkboFAaF"OImaY#7:nV0>b#Sg>GO>*'A_"Yhha&_63\Tir+B1qI[d=b9mB2o%:>+\]?MeT<Muh+SI/l)::V\Y_PP0N#)f
%W)\!_;9C+(*[g2<eN)m*8'@6ZGQ`tC`l7-LT(e--oY152GZ$toog8i]!d_U-_j:9*KI+R@V1/MAX,'uZqKom\6f"L%#P.0,^egpC
%.h(=^V)i.cWr`uTCm3+cJQM(LN9G?TG.Oht"Anh[&aToN"cqZ`M?rQVg2)AAF,AsZo%@4KXZBh,):e!8m<#qlO3T>>K1t"`/mWSa
%)SSQUb645T=On/r@0RZHdo)iAAJHkudnrJL8JZiMGY@>%QK:JIEAekU7%s<_[\,(4`5oR+Xoth<6cm#=]oF"IST"(lCdE>5QnV(]
%XSM-fFtZtG1Q4j#<U%ZBHB>]gC+Pf)qtiGq]mE%]3sV><P4b5b5*s\;JHFJhKB,YI1mdLXUfTsNYlMr]GLQ5/3bkU5,cX:bf0:[H
%opM\]D6\2Cc8U]m=P/kZ#-WN<Q\4634UOh-/9]+_^VAAtK<=[`$ZZ=eClN?>UKY@*bRn0fb-D94:d/I.L1O-^e`NYF7eA`VYSFnW
%Rc5.T"gAa#=2GYQ$Goa'$&*9t<!;#2fU*Au(DA=3#Z89qg:`#&4Xs%%#%;G%7>,V6CgjW!_3&,(R7hN#.=*1k\qDLgFR;@^YG2:@
%cOJ>\B38jbj]b`>PIO"2(:?![j_!L)/\Gal?Go4M6`@p`c;6nGqKj6j$d.RZ7`g49W0'_*!l!\[Ti)Dc8juaFM.!U:]l8a(.;HT9
%#ifTG77'DGUB]K4IE'rkMS.XV%k0Jc=-h#**+*!HMCZX+_Gd`H\H2MX(TL+IdHTkg(<%!P@%$Eb/T-0X$6`YA))M6UU-Peb.Ed20
%]l[LIP-4>Lcrj_RUBXn7-:"P]\gV,b+]f6c`o9(-XU`q5UUuR!'NsIZDW^$WJ*=U"N@O&^pH!&n.>PjFAuc4/;&?r%EJ6,49V*TB
%:-s0#?%=kunO2Tt"MT;nYJX4)%(_nl=!:J;-O1ZMSDK;Q+1V<L/Zsi))d<0?1T>o;8X6DP>?nc]dHa?>mKc$8h]@QSbtnL$2W(Bb
%fo20K7;cqjUjPn<*%hl8&TBHf$M!ia2el\RQ2rjri03=*W(9)9RXDT0UC$jU]ArBoX#Qn?c5fVaaf(+\)q!tB_%%iaF@9A,Te!KL
%\k:3[BIDrDM;n$@SNS1K_=__9+JY<BdDl!>fPl><UW1![8<U(Th[aX^lSGaV^I<@Q>4S7sN0)0*5Ve5m!^fZ8'Frgq:@B(nEiJTG
%)HgK/6pOkWT2OrA"GF4PIq*PUJ1uLGRT4j8UIMprU!WO%R@4Pl.Iq%(=juLpo.6@o%i"[jjB\0q+bI3@f+_FMU=Xb34eS)n\tTQ`
%'rfbn3>oQ['aR2AVT$0M(gO`$aUc*a+[f6SXKp$D^XH'??3L!_dca5AUg_7Ch6;Op9_`?3$W@9)``eQhJ./h;Q\fUZ-aN4,oU\p`
%E]fV^]V7_O9`g4i-U_Lk&:+!o?OP>)7(@tV6^61gCeA5mp%LLVggcIk^4aZD552(5kAf0a]^^fj5bs>-p#N"0k:Lb_5Eh:1l'uWj
%QhQD`/D.fU(=GpM]"ksnZ0BGUf2DSaA]=JS`!-NU=J)10-!"$p9l[Re:T'sW]UtfE3@%WKi-S$IlqXGOOb\bam,V0JaN6=>Q6_SB
%dFI3h@Jh]a[.V0.k9&9:<6l.fq;%VpMYV`b[5K`B6ZjCI,Z)XQ-2kcVi^m6$6F5>D[7*A-.s/J8b4k@&2'eCSjM:77V_6@#XH"^4
%Di&gB*BrB!<uhY8/?$WXp!uj?E[Y:mOjLGnE.$7KeSjq"V2<=6!VfMjilbnqp?AkX^*+BsfA[DI^:8cu!<tN_IQ&-;Hp\.-SK]tC
%2]FH#_5@dtZFJrZ5#d5rF6`=>p$Qf,K.0J!,Me?M36X=pZfZk)9nVbgd7$T"'?_#oqoc5)"mIFUr<q'D_IL`5ji<+[<LM=ajgUPg
%'Y\4U;,>.C=)FZ1X,>=ToN5@\Jf6#;r.a[9Z2Kla"JNuI_V9I]/M3PJFDNjGUP9ZZ4B*loVD8sN(XNKch\E#_aX0%)ea&;i!F>*0
%4%`f_i@-K=.N?JW'1m2?;j:h@6jtp3R8?1==4gW\N$h1Rb1L2KN.H#g^#!kM]Pu.->S`NnX`+V")p70'H;gnCs#?dFM!ecqiE1D+
%JB,qi;b!GEe>6W1o9[1;8(WsoI]!l@g/"U2?ZU/_))H[CNHuqS]Jpl=PDHf,o[ouZ=G`hET0N\#`^W9l\R)9qKhJE3L=#`-ISFc8
%gD'4mB9Z9^&XO^G@&g1),rgQUiAq!b6OB-)^F6-YBUY?HJ#U#sWB4pYMTd/0qES?dY*&^77Q_>%5pQ,3E!nTG-aid0&k+'0@oHCa
%efqHEa[maK#!GA%*IWF8^IGrDKel`:r9=ZsZh\cPoIR>T#Fk:dg3A?9i).!qfSLbih;Gp38\MuIKq"`bUerdq<4N_N_i*;rA5.[3
%C48>c3nXqUN5kPh<d^#i90:\$o.'B'O:o,/D"\nA%5d?E!?*b$!j%9KKr[OAZ,s(;p!mO.@i3X[<ZHCk!Ga"J(Jl*>jGB@r7&<M"
%cB<OIJ"RD"">B)gaHB&T*WO9%_fr*4,%QC%.E@OA$,7H%#NFc)W;A:qiC;gmF>'X@0"UBeB[eiSo=h"4;TX+(DfnS&(W_&)Me]h5
%Op'V,bX[;=h\W?1o0)j/m8HSl5t$O`l)=Y\e2X5\-5K6)KnZtj-,PYEW%q+u=VZ>7JLbKkn1HHJPsj=aB-Le`iP/E(kd5i4&Pp@=
%og,\>VTEV1ANEeXFl>4,2?dWqMRWr+:_,mgTQ?"H3d?pu.;j!uCMfdM)RV+tA445\K7FW7+>g1[PI[Y`o`LBqV/ID8K?:%>d.=@Q
%4na(\@aQ>Ta]XSeTtS_J=M\f+^?HU>Auq8*@[]t(:c(IGA0Fj:+.#2(#*heL8YZJ..K769H.VjWMecr[<LK#riaU7DbiH\hJZVi#
%B,Qb3`CUZ%oWTDN;8EJOnL>G@pkLk(+sJ.I<2;=%^p-I^#0+Kip_<Li?5M'$M\Dop?QQ6)S0MFqdd86>2u\]+<J=7?_H:<fM&5^Y
%H6fAhdG94#<e3^ZOYS&her,DcLiph6l1-hq;[X$c9gnIGN^ZWBOU'<Jo5XC&*tr.[\1ZMI30:ejZO\D?@`RdOW%8pU&V+T=9Mi=5
%US6-=kg"iuJf1ig>M)5Ni4iI:+/0'k#ZmZAWNQCTIe#Z-daA#iX.lU$LMdAJfMpFm+T$jm)dP>^Q$d8oOEI>!L+kSAY_KW&"Tsn1
%_knds8)QrtTc9;L<kedlAd?&QMY`S^nq)$;51:2hr%WD`cHRQk%Yn^+G*Ra$Z)+bdc]=c>Kp2q(j&hh[f_)<VCV3-qh6_-M$[1ci
%\G4%_^Oos@56d.Q?!JpZT>,qiHN/1C]l7<To+*^`R&\\P#o2cQZLa1XW:["Fq8[,#9e&3i3^L?>L:JLmrb&jS4N9j%8e!frAGC?b
%JjQ2NdKuHsUn!4=?>i5?F3W\Xo2NBDYKD\l)#<S@7i+Yqka8EoFk\LeNt0TH1sqOS'@aD(f:+t`gJ7p;;S2)eG-/9Hs5c+>=2fg!
%G?M)r,=E^T@B=/LF;i%bi#a7Rikt_Q5Q=hb[&(]im5Bg-pASJ"m;=heSle,T>?B+DnHQ)=Y,\!ZC\X`1hLn#(UH?VH(FLl1:Y47^
%D$'Q-;/Vu1C53kZa]ukaN8A35Aq_;RX[&8sA+R,&5teR71bfOf6[oZD=ril$6AX:Z^8O/pMm7(^e$gu6].*tJV,rtS!C9o&cTn8P
%6dH#j\n7#?(dV*5C!e\(X@62)LX-$;2SUkl./Z-c>qn?S@u*:"3>sqCU85d>7+8hFpVm#qj-ZO\ck8c0S[gTUo5khK2-^`l;C(lm
%h&W0s8@dl79kB'$=.g("[e'8BF:$WfDF16Hl(g#@7"6,I06?[51.Ct7.gD#taO&[&8_+"b&g1Mb:QKLV'CtZKHVf[_;i@8WmN*J"
%FAZDBoGbI1T$DU(8o2Xge`^0r?mZbB.J[(Y+7+I&@u%D@Y\^-Y<BR0ECm\8LVXkQMB4#3Ucc@&*3Z;CI\<YI&:.?KC%1hJ:Wkh-4
%l(T[;mpr7#JjW$M\/FM\g`t5\q-64d&BB>B@c>D72,'pB!si!LJLNuC7(!GL*NKZ`2EaO;aC0`7'=6n5Ne%?i%!h"9d>3NI^;Q.Y
%1kO+cd4kS#Ppu!`$7t1oC6giu:;(,R'MSmPO1'/$.gb]+CR@OWRIF;c?83ljhA3g.lI;JR.<&<i;%[C)^0c#F-KZ/>/-=B/[g4J-
%S0_piMSCLaa:U5NLapbZrScLUlNtErSPgJG!l;9(97`+5W>`&P%<F#0;O6<$F*ZRtU(j\?P(6&S_K-(]U?WJ3I3!r8rn^"H:.Mt6
%*oW1h?RJ6X8lr5\!=k/N^,/V+Gm/(K)@Md7cuqtsOBKj=(B#pDP0^^1o>_M:]Hm92S,jL1Q&i(97.l5ZA`Ee3ps3>F:-N/;1(6(J
%_pA8ZLlZE/'rh\>RI:*spFp=h.k[Ko(ok5]PJ":a;'Oo2M6%[sFe-TMA+\1!<5a$(:"Tq\0U(.iY":[j3mpP6TkEpG44*)kY,6GF
%Y\8nCb:6MiQ:-VV-te]4a.h*TV"D)B$SaE!i\Q]WXCI>f[mJDSE85E$@<=BGWssk'1lVeUc[(-@i:%u^'%,(A;jlYY7$>Ed"I_Rh
%.O875c(lAs:FJdVo>4KXr/>RV_aGDth/A/Ump2Xu5W&cunS3/sFO7=Lh[i>'p5q6R4m&TJnP"rm<([Xg@P0\V+XE<cGpU.@UM20V
%L=39(OtRYe7#79o+opA^V6Z+M>[<8UPDf,Nm:.0SXF*_m*cKMP)d)[4"?M"!L_ZK8A]WrMarQ.1X=M,d7[P17r6D]]]E*;dKo#gQ
%KfCVW2MNm42-43,PAEF@k_Q_SfDQlU/5?J]%9;F;#e,@7R#iX8#XEDk6)8K$?<oN%<8reD38[BEiu*%^h)75@\1_*PK&,1kLp.6W
%YtYJK29V7n>uWkQiusU"Yu"L5M2%,s<%0R(<a%Wq'd/L;ICsA3H'P7b6:`)$'r"1Xcm?H.$^F,t]K=+Hd$ht<dKE1a/`dg+MFQ4L
%Wr+naChHUDFD#YY/Xd4rk(31tT+RXpFQKc#491`\JUC+Wa1o+u&m]:t6A_^.;htKnE@(1Q'3?OP0-Uu_38I-DeW0agME!9MW#"3/
%WsG,s@[Ujtn1!F^`+\A=$_9DXF9C+?>`j0Ok9+$pOfkWZ*1sg1GG>*[3+QErV"-NTebLJJ_oFkrXq3k%ULe2Fqa$@"iQt$2?.'J:
%F:8@L/%Cnj.MF::`"m/\S`jf#p\3CQ<*,1pq/'=L9N%^]gG[qIl=.Op<CJJhQNtP='aX2o6-7*?YaV60qARB;1e73VSRE('-J^`&
%Oq8.HBr'W_2C"Kh^^Ir#U)NYRM;pW6gF!ua@l)?=<PY=Z<*Ku4e1#29>BHkM&tU.c[s37R.14\\,-+BReg"I95T?;di@Za=EcEEt
%1X%lmB39/#OGLjFj\\ZVWj\9hAI1mbak')<7^!MWKLpHD+UX3Km2m%)XNI5Kbt9seknF6Y.6-Ah),Z!M[2q(HUi&aoCRIpgJYHW8
%8C,/10Z?`])I=I*.m."$Y@#ol)^Zb66V7a;&@(J='o"I5,hp$]`$[W)7$/'4C2N0lkZEt6<XJ=/O3!,sn1GaWZ6CsL1c.8+L]*p]
%P"[ZRC'`;8?tF4_4sp""s(f64*QrFI]-"igd$n@q&4quu5@D,Z?n]/O)MLM)J4b18D5:$YDk0Bpb*(HoVXNja\kIsFpc&k*iWP#J
%dgA,,7r'eESC50`V8[HO1tHc*I6n[&q7gflI`aLK+E!iN=q>P&,WCr<XO1$?10'Q59cfR#aoOon2-$ne%C"/QF"F]K5n8&<KKPtm
%IT/;WKoZ=OYk>$]<S7A&S`6`&QC)Nf\>HjSMg+_je&%!8kP*11J6OjICOA@7'!R"!#8Z^)J%2uUs)<3YS,Ap-\PQ0!%PZX=(-3*E
%6p2[Q#lFamhfnSaA@UEtc;SU^:%&'\"Bu!(@X[[Qh=+\fJqWdG#(YCL4)?@["-_<C0k\B6jPLR3Wp+,kRi#sOA1GP[(au,g't##X
%%$XQ!65e8ZHtAD/(rm-tQ*dnu#-*CN;ug(@#:b6PPXclC>r,RUX.A-+SIinB]EQj<#rXS8gL;7P63P%4*QQH$8V%[lScV'UBu$mA
%>=;EJ&/;oF+]6%]YJphL(hIcMJ4W7!%2BAZG^Khq%+(^[<sFkHVDQ2?4(-PiYo[I:NYrCHe*nk[G'eG#@&"qM#gK=kGWu6cFC$dO
%/8j:pSBjbT&9(Xb3-3Y81,=+$9F1L?g!g+(V_hh%o(bfA$oTo2+qQc:.@$U`2]<,1L):F>[KJ6R2IkHo*I)mF35FD\5)a]T#utR=
%W!cuXJ)R)Y>jW^805WDo?DeItishXmi6DhG4Viau5t;(H=r()L/i#ITPD4e1Rgb+SbcPQYo)fgn_7B9Ydb64&fC?.K$#>[Vm&'6d
%O\3Ab!FE7>#0n*1'o3q^LJ9ig-9A2YpbRi0+X9XI)qYQi<_`IujrkkTk\Y/N>UAq\7K,14m'8c1dOgc`kgkW2=]X?LhgtWkh/cEd
%%?&!KU;gH/FmNiC5[:/7mYc;EJG;cN5F*5R)P!.#>eHm5o-RhAV9D#33!_bo`7c]pZVabnT+(]@/f3@F3L/B;k%3BM`,JKArP_DL
%'i(UB`N_)i%N*%^a*,:o/Eb(XhPeN6m4,MBB-F4o8WV&<o`2#XAMJ7('aR=>KT`I":\./*"gMF>Vf8uq<*2IqjL>ts]6AVTA@LPR
%SX3^Mcl9h=_`:&rQK/S4FR8;t3H,pK!nXqJ%RACL:fbKb/iP9jCF+k0YP->87&4srHGh&.+O-7gHuB>f^m*9p</[8`?gXo;L96A7
%o9\s_)351f@5*['eB33aZY5oF_)\\R&%-ADA-&FSa6>VQqo.F&P#FBsKU=*j]C-=&5()k_40V%goArAd210:b[\L-4:;0(_<3E-;
%He].1)`#0YReF4cNbaKO?I37>"S9NU#6]X<8iFRM\A>40g3F6NZhcA31$qh%DRBV*2C4_@FPLkGKYNMI"CIA";r3%&:\:kIX,*-R
%?b<`\<O=A8_CnWuf`.e=%BX?nd]$eW;pBmP*D2a.d6?>3gY!>?Ji526eZ_=)O>lf1S1JthqrLF%:Ip7W,<<H&Y"(Y]J5G-Hhb7_h
%ZE#j1+1&?Xk[iSWIdGYt)B#!>aK&HlN53-.8KNl[^tps8pAJ?I!>OOKa06,7*s4kgIL$D1p=Fg^"E#=!6T0B#&CL8-6tG>U+;'ST
%_F-5/$5@d?VbiMZir9?$q9beN7F&6;J<@22+_4!qa.SQSmpIAhGR>G<p*k)OgW/7"NN_i65<K+2HfO9#&rduc82e27OndliOC[B5
%.#B%;Jk<DaK9Q)h0q^qp>=aSm*eR'C^4V^Gi?>F9e#1QUNIMDIS59"t?K-a\!0`E2+Qi[@A!"g%gqc\@j<;l\gP8Uh%t"^Bq.]<U
%->1Uk^ra$/OOJ:D$9CCFi\THN%o7bSf>n\QEWnW1T58l[5Ih^q"e]OV$UM=-4TqHpHNupC5<]7FCjQCU\ZJ("U\Bc./l)Ks)ZL^H
%)Q2.2:s-e%Y`sq&;ddbf2pddZp/>pVVTI)Ak?#!lKTEK1ma!5mH?0p=./p_E-th$h]NQ+uQl(4H\3[IMTD2L_("]N/L_sY<BH,+2
%PeGH;bG(Ygd#m'IQZ46MIL)<5nXRo"Ff>u)DmB$Q'<`7-=LI%<ouM@qb-'9Sn<D)Ah4FPPL!L_1#YOmXk`O5;2E)2ZZ5H]fa$9SE
%["(W<2r\h1hXJ$V!_u"&cF%lnOA[M9.Sc<jOq<FZp-Ak64CXWg28ULSj7J_]e4c>F2,h,'BlY=l"?9aF'8ZmOp7:DX5>;i\>8,-C
%%-4,8X*bDIX1Zl&_C1]ZZ8,pn]gjD(c@1J6OeA@0V<\Q%dVYDT-^9Z[4tr*CDo`/;#VhK\JSHY^66q"n)M6D[M#_sg-7`a2V.TC&
%:&,e!h#mJ>2<)s_i'q/#>>ioc_H9@@YNe@bTOcJRdYrlP7?2s_g$9Q8-`?WD`qaL1qsc_0ie?4Mc&lt7,hUqopER(s1$32;"\2j7
%%C3^HR/ui$"#i"ne1q:LG_aRn\NW6(7W&c^rLdhHB,0dV8<GV,0hKk>..'RsITeTJ2(H?l*WdO]H5b5(<dgER*i"VUCR'+A]R4tp
%^Qg_P/\o1$eFG^4"S068hI-f3#L_a9"0d?%+tZ0Xiq)iYUaMl5h>:_eM.uRYJ31eepqP^oGWV6P9p-`.Ygi!A*I.AkQXIZf'3=#'
%>S>j1pj>8&nW(T*7&#K14_#(liJ3+<C<i2'Q<"`:N0b^;`K.%LH@>d.8&u/i6BAg^@?!nR@J)OMPI&gd[4:lf'_Q`qe)luo/C=iG
%.-VVZ.@4<[G35GOi(F+%lgnK^%7-3,7NY+TRq%>-KWo9@o(!aANin.-+3&dh@quD4?LY2/@tKdZ(!2Mh+)er?EQnr$Di3QcLPV<_
%S!A09NgeJ<A,F#ari>dYGn1U!.`9=0\HPF7/Mi0<7I-b)SK*G1G]dQQ(5fZ*JJ3"6VC;6Ga,G<Kp8>je=S\ZC2Q#uH.\Fo!'o1Kj
%Y?emEY[GZrqR69B>fV8N[L*HpS%26P:hR'0',tdM"l0`5?hA'>P7o/Z5%/@mVX>3V29^:/fn*D'NqHe]9YVbI5:5?%"Les*J>m25
%hJ6@Db#7YnHKM`kC-"h@>'?u*-nZ#75dILsb;j6b9+jg-T:."W_VdH9Lk]drHk@d)9\YJs;IRN]"W+2*3O5KF)%'W5g0"4b=T-tR
%(tf[2.;[89FZ?Zf*M?muDi9QY6<ajAH,g\I-\j?g@AsI`$\j&e!5cZO8@X>FTUYpK5$$'f:>J%'VV,`#6eDIG!jfl&)cZEurm-_7
%G\'jeLuOtmgd7UJS+J]cSNsCqincqa&\tPYD$,"(]=^jY+)oPB$AX>o<gcZ8c[YW]NtbXrO_P5Fco?1c7&N[g+.UP?OBl(<O(E>;
%UB9=<))"]+-r:nUXp;=O;dfP"r0NHu;B[BZr[ku,[<@rpZ<_,X'99k'$,"<UqnH,m\.T*XjFe/3UP:cW5k-a[?<:]ZhECnh,A_G`
%^_[*($*Cr\.q"dNj1-$?dM:-(jCt1V/ENg9d)'W0kN&")>Flq<\eN7\#@9P]9&:8M\KitPKZmBQ8qJ%njrQM4G)pcc'6PXTruRi_
%>^:X-Wf?1%U$K'sp2O`m3%p>Bp%[*TH@;jXMlKr"[+g6c<(')]s->=CcP:!3Wp-Tp";\-H\e%0uOU%Un+caRsPFV[7i@ePj@j\B%
%]-W>G,LK?Z"ruQ\Po4pbUd-'CREcKQXuC<I`IrpeSAdRXO6H>blK!T,JEC5ib&uPc'amRQHT7N7#bm0oMqT17$ZN.[cqWuhI-?>+
%<lA.k\?[ob-I&(f/@?"KCBk6BqrC,l8Mf0mSE[CF2k`Ts`2F)prZ=[%oN9\?jgbU$K]8Epb>*mo^@b:!7l^^-C5Y!m0"q;]s-RXt
%0-o!L\u#)W/Bi4/P)u3j_SlMu5MMZX1d%r-PM(Atl!7]n(ESSYSj&`_T6B-/Ecb[TIH:.K9,sl=qe=ZL)unKJ,fHqKZJ)b9[YT@\
%^`H!MTb4Yc&$<=u\VMPARNe[3,Un-LF#%G3,pH_Z'/!bk3KmoJRX`FYBXlSd]"W>PeeMt=(&N8Y_H4^sL[dS!5:D7U19c0s&^D&V
%UrJkZU4ON#l#nHUY9,hR._j)J;s,RW*6$o:5o^\i3pa]%"/AD+GIjACosO[<?n!'#(!a^>SQ45+#liT;J.&<pXdlIY%;^%>'jkV<
%Wu:;"Ttt&iCU+bb8G[tUPkHk/bD/,jf*kp*1T.)%)!.H!7ja+7qA?m;5/q`X_eOr4a+]V`Ho\DK<*spprH[jrR6ue\1&hp!jMIiY
%b*Ud_:_(('C`nF*2n@<r:@4CpgT=>(a8Rs;fAi?Lo#C$4cOdY#lhVT#MDGKPZP3;(*!g&u&gL$Zf*EQ:3V]Xdc8]FO'_g/t1gKQ&
%]K[NhbCR1+1X#16JQEr;fY6j89,HbuZZ1si'!oQCXSg,Ap`)%h;_p8U&\oOkF++?2%85;Yle-UWC'Ucdh#$g8Y9"_dCN;\,,!BX7
%b8*D$&cNcG<6/[f!-=5V0nV@FJ\[cgKUbEGM;f)e]3ed*B=iPIm!\69X+uLUM[jp?:]^JR6r7bhFb2[2&etKhLA<MkO@POA<L!oZ
%ers2/nFIg_0/#kYa6W0PY9)QW3Bn5;"(MfoH##dA(YJl68[/U$@>Z,jr<Q:m^C'$H0qC()/Rc=i1JMS-TbqatJX6mea)fsKTeoiA
%8V)u2Hm2t2fmV;c]C_52M&]1[g62/%AfTQ<Q(:[H+mp#88Od[Mg:Fh<i5J&O#8O\`b1jQ;Z0aWZ#rtRV=MUmP60Q0!,7]O'4>]So
%lJNcRQI::rON2o=BF3oK"YE3jqssA\%hI;aL^A)'7[IXF3EQ_[,:dFNFf<o/qdt5h9e'\?!YY+T*QCNGmi!HS'V3bDJ^QblTj45i
%l4G'YYC2Cpn2;LDm.<L:SY[$NqTu*aS;oomeYYo$$0=iX2(.)#Pi=*%2,J.YTW0RhMd;qSl4LJh+BY_4_%@mLBH`?VPuh*A7u+bc
%5eak04<pc@S?PJZ@K@Rp&^G9Vp:ICMI,&l&eO-EBLnB4_W_fLU*L)T;,=ICl1GbR-UHQ=;EcVhMckf(O.CTfB1-/.8OQd]oZbFfZ
%l)u-L>d3XSflS4kRSJM==TTt66ENa;Ehc5Z--:!!OQ,2/>tD!><0oJ:npj8[C"MO_H@u:jl3nZM+JEh/AY'7U_BsX7H-atK3"G3d
%GmQKu;q+qsi<-/I6>BE!gD3MQ,qJI=Vb(2Vn8^c4mQ7ACY_,8Y3NNF<9IVm)!P#1ECSHGrpD@=32+3U-5.9n2_YO[Q1;0B$H(>hr
%3Aqs_]X2`/<jBdFa)d-X6j]t(FO_/s[JOB+P[Zd%i-U&F!LYi;(?U?L%kGMm#TDdaOKd[DITE.6]7<<tK?b*V)V>JuTGG-:L>\+B
%f!RDm17iNhiVDMJWKF:p[6RgS/A:aA7L$[IdWf/roK!#A?UV<-)4?D[dDRnZL>suF!kbU#CB?FBKsq-S&Jj>>1M"+N@q4u.a\iBl
%M:T$pr#@15Nr:(&QSkcrSW?'&(QCN/1h,>.<[\"i/<-@`+@pgg[b-!X[^,UOet_EBZU"qdN!srA[sHt-)sZ_tm",*gdh,3Y_W<Q\
%bB4XAYT11gi;\[IH.2^PYj%W.lY2\*PL'a/B9Cj#L`<O\J==NKmFMuS!5UQ6cS3"A.:NpGNJh*s[a,9K=959$f`DE_lYAj?TSG$5
%Tl7W0;SqI>m<sp$Zk:-NZH1sL1L.6KIaP9C\ClpA5T,X-+'ZN!R1^2^e<9E=X=BVdOL[hO#PEGUb*A%@Z_Z@fH.Qj\/ik";\Z83&
%=F\I>\9?a3"!'8_'idVG$Uc=k>_spJ:gFa2!W>&;%a_Gu+=]hH/AX&DDWi"?$_baUW#YLNM>giV3@]67:92G;)2+k#Jl:pE?TseH
%V>Du$5^CC>PKZl5Cbd'II\p9[,dhGlB04U"YT-RRp0*ZT'.'lm8*"t5\NCT`R7L4af:WAC?l_jKdsXu+Z+OMt6VF^s^mHBmaSX%E
%GO9m=N9Li&7S(=r)Lf<3?V+'3ls[FmTU.Tm<Vh*&fgWr4W5Q/6#M(+]2b+"0Z;CI,F@;%^5C)N"^"R5bR`LYI8<H%9)i?2=D`^2(
%'H0?;^qN7!&_RlSYBpkh@ina>*G@s?-Pie8oT5s_QbA,g#9p4=ojKB'XT3oJZC>:YgO5;Y]Y>MN?IXcM(6$,12(p3-cZ.S8(`:AS
%>TM#7WV#=A@lbaHP"`0G@\X"2/Wp=#R:3R<MTRc[o*eC@FFGl2r7*[)-Ln8.Dd"i-MsggF[/$k2LnB&o3iN;4`J(m8fDa*Y@90QI
%mG[=/k#Gop4VEBL%N4L<"p0nTfjZ;j&@t+c]ZK*h[8Xo"@W);1\$J>c&=!:W5Kk*&/Z%]?1WS?UN@\%#@/Y?9\Fr-VQK&??P\4/T
%6#?ca>TQk%0M6nk>5.I@/V@@n6Hq)XW>aP*X"I^E[9Cn`H7k8.\YW?NcA,Vhj:q^o&HZ"_?;a8<A:Q>V$,(t4lu\[Yn^eCkp*J&#
%,&S;@K_ee?f!`bCXL4Lo.sj:UAAUV(`!K+[e,/oXqkA+3bcjKu52:shQPl)ejXd*[1G!.4ETM/gU<YT*)Yc_ZOREEXKJ]E/8[I26
%%%(J*b&/C_eQaB8$/QERi287VangPFOT(TYrl<+R)i"eRce3!((%g#nW53S7/hO!VlQu,a&keINEhCA4f&ot1TQo>p>9</8!"S6"
%_>C&s/X69X%W"1?U1+<u-#05Xq]EC5a0ULi%G=h#1N5PkSAu"\\5pMQKSph*kD[4D]7WOm2BOqWdF@28B3T(H;jA'tR8HK`FRup>
%4#rVtCt4T6%]g#$FoYhsZ$"Om\T:H,Xt;0aiQ]OloYd1C:sap(9G7]F]pC`3B.>'A=Yi5FHGd.mN+8>c$"u$,[+FIi[Yi*5YolPt
%+_4hNQ<_@sYl$&0]5+I^G('oOa%HEZnX*d``>uHc1PO(&?XVcp;]6g"CuGI?@re&fmmQ&;\=16l-%,o#T86qNWkf(O@PsjX<tD`1
%]TLPJ(?#o)$uksGn,K(`!>nA852SsU3NQ?c.<2TZpi>;&dlu3N>el]dS1#AlF*8`ZQJ:Pt4l>)gaud,bU&P$e5Q(<PcThBt5@:'M
%rSu3g]RTqKLVNcs^&S#FqbQ,Jps\Dus7,iU5(E=u?iU+$>erYLJ,'$?s8M'IJ+I%I!h]-dVZ~>
%AI9_PrivateDataEnd
