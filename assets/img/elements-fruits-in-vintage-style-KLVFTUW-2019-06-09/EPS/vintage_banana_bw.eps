%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vintage_banana_bw.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Алексей Попов
%%CreationDate: 3/12/2016
%%BoundingBox: 0 0 896 457
%%HiResBoundingBox: 0 0 895.7159 456.8135
%%CropBox: 0 0 895.7159 456.8135
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vintage_banan_bw</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2016-03-12T00:32:14+03:00</xap:CreateDate>
         <xap:ModifyDate>2016-03-12T00:32:15+03:00</xap:ModifyDate>
         <xap:MetadataDate>2016-03-12T00:32:15+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>132</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAhAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qgtb1nTtE0m71bUZf&#xA;RsbKMyzydaAdgO5J2A7nATSQLfPOt/mD5t/NKSTTdNSTRvLEs8VjGFP726ublwqJLIOyR85njTbi&#xA;pqT8JykyMm0REXrMf5VWmjiObyZqU/l28RQsqL/pNncUAFZ7WVuPLb7SFT1yzgrk18V80VHqf5o2&#xA;Hw32i6frSDpNpt01rIR/xhu14V/57YbK0FZfzBtYf+Oto+raTT7TzWbzxA9N5bM3KAe5Ix4l4U70&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:D0D5C151D0E7E5119BEA8FBC829CE640</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:D1D5C151D0E7E5119BEA8FBC829CE640</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:c364d25e-9809-434a-bdee-0363f770bc68</stRef:instanceID>
            <stRef:documentID>xmp.did:0880117407206811822A8E87B3A63B49</stRef:documentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>352.777778</stDim:w>
            <stDim:h>352.777778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -456.813 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 456.813 li
895.716 456.813 li
895.716 0 li
cp
clp
[1 0 0 1 0 0 ]ct
172.963 244.472 mo
153.609 230.555 117.792 201.605 95.4463 163.989 cv
73.5313 127.111 68.8325 106.625 65.7275 93.0688 cv
63.7324 84.3237 62.6191 79.5088 57.9653 74.8101 cv
40.6699 57.4248 45.6353 41.4761 48.2979 32.9111 cv
51.8076 21.5747 54.71 17.626 68.3564 11.3936 cv
71.4165 9.99854 73.2837 8.1084 75.2676 6.11719 cv
81.1104 .278809 86.6826 -3.5166 100.693 4.87988 cv
111.042 11.0898 127.002 14.3486 143.889 17.791 cv
153.073 19.6738 162.575 21.6084 171.991 24.1626 cv
192.489 29.7085 219.08 47.416 249.864 67.9248 cv
261.718 75.811 273.961 83.9668 286.963 92.1987 cv
334.565 122.33 457.4 192.699 569.518 195.293 cv
624.29 196.558 653.762 195.41 673.258 194.645 cv
694.332 193.824 705.961 193.374 727.078 196.771 cv
741.264 199.055 793.273 171.762 831.084 145.842 cv
844.764 136.46 851.738 126.897 855.898 121.179 cv
859.092 116.78 863.922 110.146 870.141 114.608 cv
870.707 115.018 871.234 115.52 871.723 116.097 cv
874.082 118.873 875.398 122.78 876.809 126.92 cv
878.645 132.373 880.723 138.541 885.064 141.665 cv
892.303 146.866 896.779 158.776 895.498 169.377 cv
894.264 179.525 888.268 187.242 878.627 191.101 cv
858.748 199.074 777.291 258.991 760.389 282.508 cv
696.402 371.544 584.938 380.071 539.99 379.61 cv
405.515 378.216 275.93 311.845 190.91 256.419 cv
190.828 256.386 183.688 252.175 172.963 244.472 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.27451 .207843 .145098 rgb
f
193.955 251.735 mo
193.955 251.735 132.763 215.84 100.25 161.139 cv
63.8452 99.8599 76.0103 85.0586 61.9253 70.8799 cv
47.8403 56.7085 50.54 44.4873 53.6304 34.5649 cv
56.7129 24.646 58.6362 21.9688 70.6851 16.4668 cv
82.73 10.9663 80.855 -.501465 97.8203 9.66846 cv
114.785 19.8418 147.448 21.5601 174.545 28.8984 cv
201.643 36.23 236.683 66.9873 283.974 96.9238 cv
331.25 126.849 454.523 196.726 567.957 199.336 cv
681.402 201.965 687.568 193.745 727.468 200.165 cv
745.955 203.139 802.604 172.134 834.246 150.455 cv
860.176 132.676 863.102 114.541 867.471 119.708 cv
871.85 124.88 872.48 139.498 881.818 146.199 cv
891.148 152.907 896.428 177.938 876.537 185.915 cv
856.654 193.876 774.068 253.888 755.855 279.245 cv
731.863 312.62 668.578 375.347 540.043 374.019 cv
411.515 372.691 284.885 311.012 193.955 251.735 cv
cp
1 1 1 rgb
f
48.6128 54.2222 mo
48.6128 54.2222 45.125 52.7261 45.4478 43.8462 cv
45.7666 34.9697 54.5303 22.0547 61.5166 17.9639 cv
68.5024 13.8872 65.3525 12.6387 72.3389 8.54736 cv
79.314 4.45996 81.519 -.0175781 84.8604 2.38232 cv
88.1899 4.77881 81.4927 14.105 79.3589 22.6997 cv
77.2324 31.291 66.9951 37.085 62.8662 44.2324 cv
58.7378 51.395 48.6128 54.2222 48.6128 54.2222 cv
cp
.27451 .207843 .145098 rgb
f
74.2554 38.2588 mo
74.2554 38.2588 103.164 71.0146 124.34 85.3813 cv
149.502 102.447 166.468 112.621 213.357 147.324 cv
260.248 182.03 324.485 222.128 391.438 250.015 cv
391.438 250.015 317.69 227.367 240.305 171.759 cv
138.905 98.8848 130.513 91.8389 118.055 82.8838 cv
107.375 75.2109 81.7627 51.7437 74.2554 38.2588 cv
cp
f
861.594 170.108 mo
861.594 170.108 708.252 330.009 471.516 268.115 cv
471.516 268.115 676.205 326.96 861.594 170.108 cv
cp
f
50.7129 48.3501 mo
50.7129 48.3501 58.2988 45.8525 64.6626 37.1675 cv
71.4951 27.8262 76.5239 23.2925 78.2754 9.78125 cv
78.2754 9.78125 73.4824 23.3486 67.5239 27.4136 cv
61.5649 31.4751 65.21 40.2012 50.7129 48.3501 cv
cp
1 1 1 rgb
f
gsave
79.2578 90.4097 mo
79.2578 90.4097 84.7402 141.894 148.366 199.752 cv
202.573 249.062 287.743 288.602 350.938 319.04 cv
414.136 349.472 527.908 368.191 596.248 357.751 cv
664.596 347.323 664.686 341.36 693.485 326.96 cv
693.485 326.96 622.926 357.2 488.252 329.267 cv
411.11 313.258 182.06 240.151 79.2578 90.4097 cv
cp
clp
70.3027 63.9609 mo
70.3027 63.9609 51.6616 71.3638 40.0513 93.7886 cv
40.0513 93.7886 54.5151 73.8198 70.3027 63.9609 cv
cp
.27451 .207843 .145098 rgb
f
71.4614 69.3418 mo
71.4614 69.3418 52.79 76.7451 41.1987 99.1738 cv
41.1987 99.1738 55.6553 79.2085 71.4614 69.3418 cv
cp
f
42.9277 103.745 mo
42.9277 103.745 54.2153 82.7524 76.9478 72.0425 cv
76.9478 72.0425 60.9277 81.7622 42.9277 103.745 cv
cp
f
44.915 108.909 mo
44.915 108.909 56.229 87.9272 78.9653 77.2397 cv
78.9653 77.2397 62.9341 86.9111 44.915 108.909 cv
cp
f
46.1675 115.216 mo
46.1675 115.216 58.4565 92.356 83.229 80.7012 cv
83.229 80.7012 65.7651 91.2534 46.1675 115.216 cv
cp
f
47.3525 121.043 mo
47.3525 121.043 59.6265 98.1875 84.395 86.5322 cv
84.395 86.5322 66.9653 97.085 47.3525 121.043 cv
cp
f
49.5728 126.398 mo
49.5728 126.398 61.8652 103.531 86.6377 91.876 cv
86.6377 91.876 69.1777 102.44 49.5728 126.398 cv
cp
f
51.5713 131.15 mo
51.5713 131.15 64.4902 106.793 91.2803 94.7974 cv
91.2803 94.7974 72.4478 105.77 51.5713 131.15 cv
cp
f
53.9526 135.759 mo
53.9526 135.759 66.8828 111.414 93.6729 99.4248 cv
93.6729 99.4248 74.8477 110.405 53.9526 135.759 cv
cp
f
57.5527 139.171 mo
57.5527 139.171 70.4678 114.837 97.269 102.841 cv
97.269 102.841 78.4478 113.81 57.5527 139.171 cv
cp
f
59.9526 143.806 mo
59.9526 143.806 72.875 119.45 99.6538 107.469 cv
99.6538 107.469 80.8213 118.449 59.9526 143.806 cv
cp
f
64.1602 146.833 mo
64.1602 146.833 77.0977 122.487 103.88 110.483 cv
103.88 110.483 85.0552 121.475 64.1602 146.833 cv
cp
f
66.5566 151.445 mo
66.5566 151.445 79.4751 127.107 106.28 115.115 cv
106.28 115.115 87.4365 126.099 66.5566 151.445 cv
cp
f
69.8413 156.313 mo
69.8413 156.313 82.7676 131.967 109.554 119.967 cv
109.554 119.967 90.7251 130.944 69.8413 156.313 cv
cp
f
72.2378 160.929 mo
72.2378 160.929 85.1528 136.569 111.95 124.587 cv
111.95 124.587 93.1104 135.567 72.2378 160.929 cv
cp
f
76.625 164.75 mo
76.625 164.75 90.2603 139.059 118.505 126.391 cv
118.505 126.391 98.6602 137.998 76.625 164.75 cv
cp
f
79.1338 169.614 mo
79.1338 169.614 92.7803 143.93 121.018 131.259 cv
121.018 131.259 101.173 142.861 79.1338 169.614 cv
cp
f
83.7012 172.73 mo
83.7012 172.73 97.3477 147.046 125.593 134.375 cv
125.593 134.375 105.74 145.978 83.7012 172.73 cv
cp
f
86.21 177.624 mo
86.21 177.624 99.8564 151.936 128.098 139.257 cv
128.098 139.257 108.238 150.845 86.21 177.624 cv
cp
f
91.104 180.684 mo
91.104 180.684 104.368 154.989 132.658 142.306 cv
132.658 142.306 112.835 153.909 91.104 180.684 cv
cp
f
93.7363 185.563 mo
93.7363 185.563 106.993 159.867 135.294 147.17 cv
135.294 147.17 115.468 158.78 93.7363 185.563 cv
cp
f
99.5 187.411 mo
99.5 187.411 112.993 161.825 141.365 149.427 cv
141.365 149.427 121.457 160.839 99.5 187.411 cv
cp
f
102.084 192.316 mo
102.084 192.316 115.565 166.741 143.934 154.344 cv
143.934 154.344 124.04 165.74 102.084 192.316 cv
cp
f
108.069 194.319 mo
108.069 194.319 121.813 168.08 151.16 155.63 cv
151.16 155.63 130.58 167.18 108.069 194.319 cv
cp
f
110.818 199.415 mo
110.818 199.415 124.542 173.176 153.92 160.737 cv
153.92 160.737 133.325 172.269 110.818 199.415 cv
cp
f
117.448 201.065 mo
117.448 201.065 131.135 174.999 160.19 162.515 cv
160.19 162.515 139.805 174.042 117.448 201.065 cv
cp
f
120.118 206.094 mo
120.118 206.094 133.813 180.031 162.875 167.551 cv
162.875 167.551 142.498 179.075 120.118 206.094 cv
cp
f
127.014 207.538 mo
127.014 207.538 140.6 181.595 169.58 169.261 cv
169.58 169.261 149.24 180.672 127.014 207.538 cv
cp
f
129.71 212.563 mo
129.71 212.563 143.304 186.635 172.272 174.282 cv
172.272 174.282 151.966 185.708 129.71 212.563 cv
cp
f
135.388 215.026 mo
135.388 215.026 149.131 188.784 178.482 176.341 cv
178.482 176.341 157.888 187.873 135.388 215.026 cv
cp
f
138.129 220.111 mo
138.129 220.111 151.865 193.891 181.235 181.434 cv
181.235 181.434 160.647 192.958 138.129 220.111 cv
cp
f
144.767 221.757 mo
144.767 221.757 158.443 195.702 187.498 183.226 cv
187.498 183.226 167.113 194.746 144.767 221.757 cv
cp
f
147.455 226.805 mo
147.455 226.805 161.135 200.742 190.19 188.255 cv
190.19 188.255 169.82 199.786 147.455 226.805 cv
cp
f
154.318 228.226 mo
154.318 228.226 167.908 202.302 196.88 189.954 cv
196.88 189.954 176.578 201.384 154.318 228.226 cv
cp
f
157.029 233.251 mo
157.029 233.251 170.607 207.331 199.58 194.982 cv
199.58 194.982 179.259 206.401 157.029 233.251 cv
cp
f
164.143 232.824 mo
164.143 232.824 178.76 207.031 208.385 195.748 cv
208.385 195.748 187.498 206.476 164.143 232.824 cv
cp
f
166.663 238.059 mo
166.663 238.059 181.295 212.27 210.935 200.975 cv
210.935 200.975 190.055 211.708 166.663 238.059 cv
cp
f
173.207 239.99 mo
173.207 239.99 187.764 214.374 217.093 203.049 cv
217.093 203.049 196.415 213.77 173.207 239.99 cv
cp
f
175.67 245.158 mo
175.67 245.158 190.25 219.541 219.579 208.231 cv
219.579 208.231 198.901 218.952 175.67 245.158 cv
cp
f
182.465 246.89 mo
182.465 246.89 196.925 221.409 226.167 210.211 cv
226.167 210.211 205.562 220.835 182.465 246.89 cv
cp
f
184.951 252.065 mo
184.951 252.065 199.419 226.572 228.658 215.375 cv
228.658 215.375 208.059 226.006 184.951 252.065 cv
cp
f
190.667 254.63 mo
190.667 254.63 205.288 228.83 234.935 217.572 cv
234.935 217.572 214.044 228.29 190.667 254.63 cv
cp
f
193.209 259.873 mo
193.209 259.873 207.83 234.072 237.478 222.792 cv
237.478 222.792 216.598 233.514 193.209 259.873 cv
cp
f
201.425 258.973 mo
201.425 258.973 217.183 234.054 246.83 224.378 cv
246.83 224.378 225.792 233.96 201.425 258.973 cv
cp
f
203.998 264.98 mo
203.998 264.98 219.129 239.656 248.626 229.092 cv
248.626 229.092 227.772 239.296 203.998 264.98 cv
cp
f
208.993 268.704 mo
208.993 268.704 223.468 243.208 252.703 232.006 cv
252.703 232.006 232.1 242.637 208.993 268.704 cv
cp
f
211.775 274.251 mo
211.775 274.251 225.808 248.563 254.926 236.772 cv
254.926 236.772 234.451 247.802 211.775 274.251 cv
cp
f
218.488 274.779 mo
218.488 274.779 232.955 249.271 262.198 238.077 cv
262.198 238.077 241.595 248.698 218.488 274.779 cv
cp
f
221.267 280.333 mo
221.267 280.333 235.307 254.608 264.403 242.836 cv
264.403 242.836 243.935 253.873 221.267 280.333 cv
cp
f
228.853 280.382 mo
228.853 280.382 243.32 254.9 272.566 243.695 cv
272.566 243.695 251.953 254.345 228.853 280.382 cv
cp
f
231.639 285.958 mo
231.639 285.958 245.66 260.233 274.771 248.462 cv
274.771 248.462 254.315 259.487 231.639 285.958 cv
cp
f
238.363 286.435 mo
238.363 286.435 253.04 260.758 282.534 249.351 cv
282.534 249.351 261.732 260.144 238.363 286.435 cv
cp
f
241.134 292.021 mo
241.134 292.021 255.388 266.112 284.728 254.108 cv
284.728 254.108 264.088 265.313 241.134 292.021 cv
cp
f
249.02 292.317 mo
249.02 292.317 263.99 266.394 293.784 254.687 cv
293.784 254.687 272.758 265.688 249.02 292.317 cv
cp
f
251.776 297.887 mo
251.776 297.887 266.3 271.741 295.989 259.464 cv
295.989 259.464 275.098 270.864 251.776 297.887 cv
cp
f
259.471 297.864 mo
259.471 297.864 274.43 271.933 304.247 260.233 cv
304.247 260.233 283.209 271.243 259.471 297.864 cv
cp
f
262.228 303.429 mo
262.228 303.429 276.763 277.296 306.44 265.021 cv
306.44 265.021 285.549 276.41 262.228 303.429 cv
cp
f
269.045 303.86 mo
269.045 303.86 284 277.937 313.82 266.237 cv
313.82 266.237 292.775 277.231 269.045 303.86 cv
cp
f
271.801 309.44 mo
271.801 309.44 286.325 283.28 315.995 271.007 cv
315.995 271.007 295.111 282.414 271.801 309.44 cv
cp
f
281.248 308.811 mo
281.248 308.811 296.214 282.876 326.026 271.175 cv
326.026 271.175 304.989 282.182 281.248 308.811 cv
cp
f
284.03 314.372 mo
284.03 314.372 298.535 288.223 328.22 275.949 cv
328.22 275.949 307.318 287.356 284.03 314.372 cv
cp
f
290.87 314.754 mo
290.87 314.754 306.834 287.886 337.749 275.14 cv
337.749 275.14 315.868 286.94 290.87 314.754 cv
cp
f
293.593 320.368 mo
293.593 320.368 309.118 293.274 339.89 279.954 cv
339.89 279.954 318.151 292.168 293.593 320.368 cv
cp
f
303.515 318.872 mo
303.515 318.872 317.968 293.397 347.218 282.182 cv
347.218 282.182 326.607 292.824 303.515 318.872 cv
cp
f
306.298 324.452 mo
306.298 324.452 320.308 298.727 349.426 286.959 cv
349.426 286.959 328.97 297.977 306.298 324.452 cv
cp
f
313.021 324.936 mo
313.021 324.936 327.703 299.248 357.189 287.848 cv
357.189 287.848 336.388 298.629 313.021 324.936 cv
cp
f
315.785 330.526 mo
315.785 330.526 330.042 304.592 359.39 292.595 cv
359.39 292.595 338.75 303.804 315.785 330.526 cv
cp
f
323.667 330.819 mo
323.667 330.819 338.626 304.88 368.439 293.185 cv
368.439 293.185 347.405 304.183 323.667 330.819 cv
cp
f
326.428 336.388 mo
326.428 336.388 340.963 310.247 370.633 297.962 cv
370.633 297.962 349.741 309.369 326.428 336.388 cv
cp
f
334.123 336.365 mo
334.123 336.365 349.089 310.431 378.897 298.73 cv
378.897 298.73 357.868 309.729 334.123 336.365 cv
cp
f
336.883 341.935 mo
336.883 341.935 351.417 315.778 381.084 303.501 cv
381.084 303.501 360.193 314.911 336.883 341.935 cv
cp
f
343.693 342.339 mo
343.693 342.339 358.655 316.419 388.468 304.737 cv
388.468 304.737 367.438 315.733 343.693 342.339 cv
cp
f
348.357 346.49 mo
348.357 346.49 366.478 317.263 398.548 304.175 cv
398.548 304.175 371.42 318.354 348.357 346.49 cv
cp
f
355.903 347.289 mo
355.903 347.289 374.491 319.153 403.94 306.421 cv
403.94 306.421 379.64 320.671 355.903 347.289 cv
cp
f
358.647 352.88 mo
358.647 352.88 380.083 321.897 410.244 308.255 cv
410.244 308.255 382.948 324.384 358.647 352.88 cv
cp
f
365.537 353.24 mo
365.537 353.24 383.353 326.14 415.04 310.28 cv
415.04 310.28 392.135 323.327 365.537 353.24 cv
cp
f
373.76 354.005 mo
373.76 354.005 393.41 324.654 425.026 309.245 cv
425.026 309.245 398.308 325.813 373.76 354.005 cv
cp
f
382.415 353.15 mo
382.415 353.15 400.213 326.038 431.912 310.171 cv
431.912 310.171 409.025 323.237 382.415 353.15 cv
cp
f
390.635 353.938 mo
390.635 353.938 410.285 324.575 441.897 309.147 cv
441.897 309.147 415.194 325.712 390.635 353.938 cv
cp
f
399.106 352.824 mo
399.106 352.824 416.926 325.723 448.61 309.864 cv
448.61 309.864 425.724 322.899 399.106 352.824 cv
cp
f
407.33 353.601 mo
407.33 353.601 426.984 324.249 458.6 308.841 cv
458.6 308.841 431.893 325.386 407.33 353.601 cv
cp
f
413.304 354.714 mo
413.304 354.714 431.12 327.602 462.808 311.747 cv
462.808 311.747 439.902 324.812 413.304 354.714 cv
cp
f
421.539 355.49 mo
421.539 355.49 441.193 326.128 472.794 310.7 cv
472.794 310.7 446.098 327.275 421.539 355.49 cv
cp
f
427.01 357.032 mo
427.01 357.032 444.826 329.941 476.502 314.057 cv
476.502 314.057 453.602 327.118 427.01 357.032 cv
cp
f
435.223 357.808 mo
435.223 357.808 454.884 328.456 486.496 313.04 cv
486.496 313.04 459.789 329.593 435.223 357.808 cv
cp
f
440.277 359.338 mo
440.277 359.338 458.09 332.237 489.781 316.374 cv
489.781 316.374 466.888 329.436 440.277 359.338 cv
cp
f
448.49 360.114 mo
448.49 360.114 468.158 330.763 499.771 315.362 cv
499.771 315.362 473.053 331.899 448.49 360.114 cv
cp
f
455.322 361.262 mo
455.322 361.262 473.131 334.16 504.812 318.286 cv
504.812 318.286 481.926 331.337 455.322 361.262 cv
cp
f
463.547 362.026 mo
463.547 362.026 483.2 332.675 514.813 317.263 cv
514.813 317.263 488.105 333.834 463.547 362.026 cv
cp
f
470.701 362.511 mo
470.701 362.511 488.51 335.397 520.197 319.524 cv
520.197 319.524 497.318 332.574 470.701 362.511 cv
cp
f
478.918 363.275 mo
478.918 363.275 498.579 333.925 530.18 318.501 cv
530.18 318.501 503.473 335.05 478.918 363.275 cv
cp
f
486.141 363.275 mo
486.141 363.275 503.968 336.186 535.647 320.312 cv
535.647 320.312 512.75 333.362 486.141 363.275 cv
cp
f
494.36 364.052 mo
494.36 364.052 514.025 334.688 545.627 319.276 cv
545.627 319.276 518.919 335.837 494.36 364.052 cv
cp
f
501.77 364.3 mo
501.77 364.3 519.582 337.198 551.27 321.313 cv
551.27 321.313 528.369 334.362 501.77 364.3 cv
cp
f
509.99 365.063 mo
509.99 365.063 529.651 335.702 561.26 320.3 cv
561.26 320.3 534.557 336.849 509.99 365.063 cv
cp
f
518.131 365.188 mo
518.131 365.188 535.933 338.087 567.631 322.202 cv
567.631 322.202 544.73 335.263 518.131 365.188 cv
cp
f
526.332 365.952 mo
526.332 365.952 546.009 336.602 577.617 321.2 cv
577.617 321.2 550.914 337.749 526.332 365.952 cv
cp
f
533.915 366.054 mo
533.915 366.054 551.735 338.941 583.423 323.067 cv
583.423 323.067 560.518 336.14 533.915 366.054 cv
cp
f
542.135 366.819 mo
542.135 366.819 561.793 337.468 593.405 322.056 cv
593.405 322.056 566.697 338.604 542.135 366.819 cv
cp
f
551.825 365.312 mo
551.825 365.312 569.645 338.21 601.332 322.337 cv
601.332 322.337 578.432 335.387 551.825 365.312 cv
cp
f
560.045 366.077 mo
560.045 366.077 579.714 336.714 611.326 321.324 cv
611.326 321.324 584.607 337.862 560.045 366.077 cv
cp
f
572.75 361.914 mo
572.75 361.914 590.555 334.813 622.242 318.95 cv
622.242 318.95 599.338 331.989 572.75 361.914 cv
cp
f
580.978 362.679 mo
580.978 362.679 600.616 333.351 632.229 317.927 cv
632.229 317.927 605.521 334.476 580.978 362.679 cv
cp
f
591.875 359.845 mo
591.875 359.845 609.68 332.743 641.387 316.869 cv
641.387 316.869 618.463 329.907 591.875 359.845 cv
cp
f
600.103 360.608 mo
600.103 360.608 619.745 331.269 651.365 315.845 cv
651.365 315.845 624.65 332.405 600.103 360.608 cv
cp
f
611.787 357.347 mo
611.787 357.347 629.593 330.212 661.276 314.36 cv
661.276 314.36 638.391 327.421 611.787 357.347 cv
cp
f
620.008 358.101 mo
620.008 358.101 639.665 328.749 671.256 313.337 cv
671.256 313.337 644.559 329.886 620.008 358.101 cv
cp
f
633.725 353.825 mo
633.725 353.825 651.533 326.724 683.214 310.847 cv
683.214 310.847 660.313 323.9 633.725 353.825 cv
cp
f
641.93 354.591 mo
641.93 354.591 661.596 325.228 693.204 309.831 cv
693.204 309.831 666.492 326.376 641.93 354.591 cv
cp
f
657.418 348.223 mo
657.418 348.223 675.227 321.122 706.91 305.255 cv
706.91 305.255 684.02 318.298 657.418 348.223 cv
cp
f
grestore
77.7202 93.4961 mo
77.7202 93.4961 94.5015 169.13 174.845 224.847 cv
255.178 280.569 371.12 341.63 464.953 357.47 cv
558.777 373.311 626.975 365.671 679.588 334.688 cv
679.588 334.688 610.048 373.737 484.359 350.169 cv
358.655 326.601 243.046 260.825 188.12 223.265 cv
101.292 163.906 77.7202 93.4961 77.7202 93.4961 cv
cp
.27451 .207843 .145098 rgb
f
855.215 140.881 mo
855.215 140.881 842.961 154.28 819.023 168.714 cv
803.982 177.781 779.211 190.647 762.571 197.262 cv
762.571 197.262 781.471 188.221 798.162 177.927 cv
814.84 167.63 835.197 155.045 844.512 147.777 cv
853.828 140.521 855.215 140.881 855.215 140.881 cv
cp
f
gsave
175.955 44.2622 mo
175.955 44.2622 183.691 37.3325 220.295 66.9761 cv
269.502 106.827 377.821 163.839 443.949 187.096 cv
515.533 212.281 557.45 211.921 601.1 212.071 cv
638.304 212.202 681.392 203.81 701.533 209.011 cv
722.12 214.329 726.346 227.716 704.634 237.324 cv
682.926 246.936 637.696 251.071 546.684 247.093 cv
423.676 241.745 314.326 178.614 246.557 127.933 cv
171.744 71.9863 161.66 48.7437 175.955 44.2622 cv
cp
clp
167.375 20.5737 mo
167.375 20.5737 161.698 43.9736 136.783 59 cv
136.783 59 167.968 45.4097 167.375 20.5737 cv
cp
f
174.928 25.8159 mo
174.928 25.8159 172.468 54.5601 139.22 68.9224 cv
139.22 68.9224 164.09 55.0435 174.928 25.8159 cv
cp
f
182.188 31.3472 mo
182.188 31.3472 179.877 56.626 152.687 70.981 cv
152.687 70.981 172.31 58.021 182.188 31.3472 cv
cp
f
188.99 33.9575 mo
188.99 33.9575 184.588 61.1636 153.204 78.7886 cv
153.204 78.7886 187.809 66.5034 188.99 33.9575 cv
cp
f
195.973 39.1812 mo
195.973 39.1812 191.563 66.3911 160.175 84.0088 cv
160.175 84.0088 194.772 71.7163 195.973 39.1812 cv
cp
f
202.67 44.0972 mo
202.67 44.0972 198.268 71.3076 166.884 88.9248 cv
166.884 88.9248 201.478 76.6396 202.67 44.0972 cv
cp
f
209.345 49.5874 mo
209.345 49.5874 204.943 76.79 173.548 94.4258 cv
173.548 94.4258 208.167 82.1338 209.345 49.5874 cv
cp
f
215.743 54.7925 mo
215.743 54.7925 211.344 81.9951 179.945 99.6162 cv
179.945 99.6162 214.55 87.3389 215.743 54.7925 cv
cp
f
222.193 58.8237 mo
222.193 58.8237 217.801 86.0376 186.417 103.663 cv
186.417 103.663 221.008 91.3813 222.193 58.8237 cv
cp
f
227.772 63.1172 mo
227.772 63.1172 223.37 90.3311 191.994 107.952 cv
191.994 107.952 226.588 95.6675 227.772 63.1172 cv
cp
f
233.93 67.4375 mo
233.93 67.4375 229.52 94.6436 198.136 112.272 cv
198.136 112.272 232.741 99.9873 233.93 67.4375 cv
cp
f
240.076 71.7573 mo
240.076 71.7573 235.67 98.9639 204.29 116.581 cv
204.29 116.581 238.888 104.308 240.076 71.7573 cv
cp
f
245.949 75.7773 mo
245.949 75.7773 241.558 102.991 210.174 120.608 cv
210.174 120.608 244.76 108.331 245.949 75.7773 cv
cp
f
252.114 80.0859 mo
252.114 80.0859 247.715 107.289 216.32 124.917 cv
216.32 124.917 250.921 112.644 252.114 80.0859 cv
cp
f
257.675 84.3799 mo
257.675 84.3799 253.28 111.586 221.908 129.215 cv
221.908 129.215 256.498 116.941 257.675 84.3799 cv
cp
f
263.836 88.6997 mo
263.836 88.6997 259.43 115.917 228.062 133.531 cv
228.062 133.531 262.647 121.25 263.836 88.6997 cv
cp
f
269.72 92.7275 mo
269.72 92.7275 265.31 119.93 233.934 137.551 cv
233.934 137.551 268.535 125.266 269.72 92.7275 cv
cp
f
275.87 97.0361 mo
275.87 97.0361 271.475 124.25 240.088 141.871 cv
240.088 141.871 274.682 129.594 275.87 97.0361 cv
cp
f
282.073 100.201 mo
282.073 100.201 277.674 127.415 246.283 145.032 cv
246.283 145.032 280.873 132.748 282.073 100.201 cv
cp
f
288.227 104.521 mo
288.227 104.521 283.816 131.735 252.433 149.353 cv
252.433 149.353 287.034 137.067 288.227 104.521 cv
cp
f
294.095 108.538 mo
294.095 108.538 289.693 135.762 258.313 153.38 cv
258.313 153.38 292.91 141.106 294.095 108.538 cv
cp
f
300.252 112.854 mo
300.252 112.854 295.85 140.067 264.466 157.688 cv
264.466 157.688 299.071 145.4 300.252 112.854 cv
cp
f
307.28 116.918 mo
307.28 116.918 302.877 144.132 271.49 161.75 cv
271.49 161.75 306.091 149.465 307.28 116.918 cv
cp
f
313.43 121.235 mo
313.43 121.235 309.035 148.449 277.651 166.07 cv
277.651 166.07 312.245 153.792 313.43 121.235 cv
cp
f
319.303 125.255 mo
319.303 125.255 314.908 152.476 283.524 170.097 cv
283.524 170.097 318.118 157.801 319.303 125.255 cv
cp
f
325.464 129.571 mo
325.464 129.571 321.065 156.785 289.678 174.406 cv
289.678 174.406 324.275 162.121 325.464 129.571 cv
cp
f
331.745 132.556 mo
331.745 132.556 328.299 159.905 297.553 178.621 cv
297.553 178.621 331.7 165.136 331.745 132.556 cv
cp
f
338.053 136.651 mo
338.053 136.651 334.61 164.007 303.841 182.716 cv
303.841 182.716 337.997 169.231 338.053 136.651 cv
cp
f
344.068 140.465 mo
344.068 140.465 340.625 167.825 309.86 186.53 cv
309.86 186.53 344.008 173.041 344.068 140.465 cv
cp
f
350.36 144.56 mo
350.36 144.56 346.91 171.92 316.16 190.625 cv
316.16 190.625 350.315 177.14 350.36 144.56 cv
cp
f
356.908 147.192 mo
356.908 147.192 353.855 174.586 323.36 193.722 cv
323.36 193.722 357.32 179.761 356.908 147.192 cv
cp
f
363.264 151.197 mo
363.264 151.197 360.208 178.599 329.713 197.735 cv
329.713 197.735 363.669 183.777 363.264 151.197 cv
cp
f
369.339 154.94 mo
369.339 154.94 366.275 182.326 335.78 201.451 cv
335.78 201.451 369.74 187.501 369.339 154.94 cv
cp
f
375.688 158.949 mo
375.688 158.949 372.624 186.342 342.136 205.467 cv
342.136 205.467 376.1 191.506 375.688 158.949 cv
cp
f
382.749 159.433 mo
382.749 159.433 381.095 186.938 351.65 207.624 cv
351.65 207.624 384.838 191.934 382.749 159.433 cv
cp
f
389.3 163.107 mo
389.3 163.107 387.654 190.617 358.183 211.295 cv
358.183 211.295 391.385 195.62 389.3 163.107 cv
cp
f
395.551 166.52 mo
395.551 166.52 393.905 194.038 364.438 214.711 cv
364.438 214.711 397.644 199.029 395.551 166.52 cv
cp
f
402.103 170.195 mo
402.103 170.195 400.457 197.712 371 218.39 cv
371 218.39 404.191 202.688 402.103 170.195 cv
cp
f
408.71 171.549 mo
408.71 171.549 409.051 197.96 382.288 219.541 cv
382.288 219.541 412.978 202.505 408.71 171.549 cv
cp
f
415.228 174.672 mo
415.228 174.672 415.588 201.076 388.813 222.657 cv
388.813 222.657 419.502 205.614 415.228 174.672 cv
cp
f
421.46 177.541 mo
421.46 177.541 421.813 203.945 395.053 225.549 cv
395.053 225.549 425.735 208.494 421.46 177.541 cv
cp
f
427.992 180.657 mo
427.992 180.657 428.353 207.072 401.57 228.654 cv
401.57 228.654 432.271 211.606 427.992 180.657 cv
cp
f
434.342 180.886 mo
434.342 180.886 435.826 207.256 410.03 229.989 cv
410.03 229.989 439.955 211.617 434.342 180.886 cv
cp
f
441.002 183.717 mo
441.002 183.717 442.506 210.08 416.698 232.813 cv
416.698 232.813 446.615 214.445 441.002 183.717 cv
cp
f
447.343 186.309 mo
447.343 186.309 448.85 212.69 423.024 235.415 cv
423.024 235.415 452.96 217.055 447.343 186.309 cv
cp
f
454.006 189.151 mo
454.006 189.151 455.502 215.51 429.703 238.246 cv
429.703 238.246 459.627 219.878 454.006 189.151 cv
cp
f
460.318 188.165 mo
460.318 188.165 463.187 214.418 438.635 238.486 cv
438.635 238.486 467.548 218.559 460.318 188.165 cv
cp
f
467.113 190.636 mo
467.113 190.636 470.008 216.886 445.438 240.958 cv
445.438 240.958 474.343 221.034 467.113 190.636 cv
cp
f
473.582 192.897 mo
473.582 192.897 476.48 219.147 451.914 243.219 cv
451.914 243.219 480.822 223.299 473.582 192.897 cv
cp
f
480.398 195.376 mo
480.398 195.376 483.29 221.63 458.721 245.687 cv
458.721 245.687 487.633 225.762 480.398 195.376 cv
cp
f
486.627 195.163 mo
486.627 195.163 491.008 221.191 467.889 246.639 cv
467.889 246.639 495.598 225.083 486.627 195.163 cv
cp
f
493.558 197.229 mo
493.558 197.229 497.949 223.272 474.822 248.724 cv
474.822 248.724 502.535 227.154 493.558 197.229 cv
cp
f
500.15 199.111 mo
500.15 199.111 504.545 225.155 481.408 250.603 cv
481.408 250.603 509.131 229.047 500.15 199.111 cv
cp
f
507.08 201.192 mo
507.08 201.192 511.49 227.244 488.353 252.669 cv
488.353 252.669 516.051 231.117 507.08 201.192 cv
cp
f
512.285 200.124 mo
512.285 200.124 518.537 225.785 497.297 252.815 cv
497.297 252.815 523.37 229.329 512.285 200.124 cv
cp
f
519.346 201.688 mo
519.346 201.688 525.602 227.337 504.35 254.39 cv
504.35 254.39 530.439 230.893 519.346 201.688 cv
cp
f
526.055 203.094 mo
526.055 203.094 532.311 228.751 511.055 255.8 cv
511.055 255.8 537.162 232.31 526.055 203.094 cv
cp
f
533.12 204.676 mo
533.12 204.676 539.391 230.341 518.131 257.353 cv
518.131 257.353 544.228 233.874 533.12 204.676 cv
cp
f
540.238 203.866 mo
540.238 203.866 547.572 229.228 527.502 257.157 cv
527.502 257.157 552.557 232.565 540.238 203.866 cv
cp
f
547.348 205.137 mo
547.348 205.137 554.705 230.495 534.624 258.421 cv
534.624 258.421 559.689 233.829 547.348 205.137 cv
cp
f
554.109 206.251 mo
554.109 206.251 561.485 231.62 541.385 259.543 cv
541.385 259.543 566.461 234.961 554.109 206.251 cv
cp
f
561.241 207.522 mo
561.241 207.522 568.596 232.891 548.518 260.803 cv
548.518 260.803 573.59 236.221 561.241 207.522 cv
cp
f
567.814 206.626 mo
567.814 206.626 575.877 231.766 556.617 260.267 cv
556.617 260.267 580.955 234.961 567.814 206.626 cv
cp
f
574.971 207.691 mo
574.971 207.691 583.033 232.835 563.758 261.32 cv
563.758 261.32 588.125 236.03 574.971 207.691 cv
cp
f
581.766 208.625 mo
581.766 208.625 589.85 233.761 570.568 262.258 cv
570.568 262.258 594.92 236.964 581.766 208.625 cv
cp
f
588.928 209.686 mo
588.928 209.686 596.994 234.841 577.723 263.304 cv
577.723 263.304 602.075 238.014 588.928 209.686 cv
cp
f
594.53 206.907 mo
594.53 206.907 604.662 231.297 587.859 261.286 cv
587.859 261.286 609.999 234.054 594.53 206.907 cv
cp
f
601.745 207.376 mo
601.745 207.376 611.9 231.748 595.082 261.751 cv
595.082 261.751 617.232 234.515 601.745 207.376 cv
cp
f
608.585 207.725 mo
608.585 207.725 618.74 232.107 601.922 262.101 cv
601.922 262.101 624.084 234.871 608.585 207.725 cv
cp
f
615.826 208.179 mo
615.826 208.179 625.971 232.58 609.145 262.558 cv
609.145 262.558 631.303 235.333 615.826 208.179 cv
cp
f
621.785 207.185 mo
621.785 207.185 633.522 230.847 618.748 261.897 cv
618.748 261.897 639.02 233.24 621.785 207.185 cv
cp
f
629.022 207.177 mo
629.022 207.177 640.768 230.821 625.985 261.883 cv
625.985 261.883 646.272 233.221 629.022 207.177 cv
cp
f
635.87 207.065 mo
635.87 207.065 647.623 230.731 632.84 261.774 cv
632.84 261.774 653.135 233.131 635.87 207.065 cv
cp
f
643.119 207.05 mo
643.119 207.05 654.853 230.708 640.078 261.748 cv
640.078 261.748 660.365 233.105 643.119 207.05 cv
cp
f
649.813 205.445 mo
649.813 205.445 662.998 228.301 650.218 260.229 cv
650.218 260.229 668.645 230.349 649.813 205.445 cv
cp
f
657.023 204.972 mo
657.023 204.972 670.242 227.829 657.439 259.749 cv
657.439 259.749 675.883 229.876 657.023 204.972 cv
cp
f
663.86 204.433 mo
663.86 204.433 677.071 227.289 664.27 259.22 cv
664.27 259.22 682.719 229.351 663.86 204.433 cv
cp
f
671.082 203.949 mo
671.082 203.949 684.305 226.839 671.502 258.748 cv
671.502 258.748 689.941 228.867 671.082 203.949 cv
cp
f
677.87 202.43 mo
677.87 202.43 691.832 224.851 680.135 257.185 cv
680.135 257.185 697.547 226.696 677.87 202.43 cv
cp
f
685.07 201.721 mo
685.07 201.721 699.051 224.12 687.32 256.472 cv
687.32 256.472 704.758 225.987 685.07 201.721 cv
cp
f
691.881 200.964 mo
691.881 200.964 705.853 223.366 694.138 255.688 cv
694.138 255.688 711.582 225.222 691.881 200.964 cv
cp
f
699.096 200.236 mo
699.096 200.236 713.068 222.654 701.338 254.968 cv
701.338 254.968 718.764 224.499 699.096 200.236 cv
cp
f
707.469 201.65 mo
707.469 201.65 721.43 224.06 709.719 256.394 cv
709.719 256.394 727.134 225.905 707.469 201.65 cv
cp
f
714.665 200.934 mo
714.665 200.934 728.642 223.329 716.915 255.677 cv
716.915 255.677 734.356 225.188 714.665 200.934 cv
cp
f
721.468 200.168 mo
721.468 200.168 735.447 222.579 723.736 254.907 cv
723.736 254.907 741.174 224.435 721.468 200.168 cv
cp
f
728.676 199.438 mo
728.676 199.438 742.658 221.87 730.926 254.181 cv
730.926 254.181 748.363 223.711 728.676 199.438 cv
cp
f
grestore
255.732 138.481 mo
255.732 138.481 384.189 237.103 537.785 247.032 cv
537.785 247.032 391.243 250.074 255.732 138.481 cv
cp
f
gsave
761.885 273.677 mo
761.885 273.677 787.445 247.396 827.766 220.756 cv
868.086 194.116 874.205 188.716 883.564 182.236 cv
892.926 175.756 884.285 155.596 879.246 154.876 cv
874.205 154.156 861.965 172.156 854.766 176.476 cv
847.564 180.796 813.725 211.036 788.525 223.996 cv
763.325 236.956 749.645 239.836 749.645 239.836 cv
749.645 239.836 765.125 252.437 761.885 273.677 cv
cp
clp
869.893 160.636 mo
869.893 160.636 885.252 174.552 882.854 191.356 cv
882.854 191.356 880.449 176.956 869.893 160.636 cv
cp
f
864.609 163.04 mo
864.609 163.04 879.973 176.956 877.568 193.756 cv
877.568 193.756 875.166 179.356 864.609 163.04 cv
cp
f
859.324 165.44 mo
859.324 165.44 874.689 179.356 872.285 196.16 cv
872.285 196.16 869.885 181.76 859.324 165.44 cv
cp
f
854.529 167.36 mo
854.529 167.36 869.893 181.276 867.488 198.076 cv
867.488 198.076 865.086 183.676 854.529 167.36 cv
cp
f
848.77 169.76 mo
848.77 169.76 864.133 183.676 861.729 200.48 cv
861.729 200.48 859.324 186.08 848.77 169.76 cv
cp
f
843.492 173.12 mo
843.492 173.12 858.854 187.036 856.453 203.836 cv
856.453 203.836 854.053 189.436 843.492 173.12 cv
cp
f
838.689 176 mo
838.689 176 854.053 189.916 851.648 206.716 cv
851.648 206.716 849.246 192.316 838.689 176 cv
cp
f
833.893 179.356 mo
833.893 179.356 849.252 193.272 846.854 210.076 cv
846.854 210.076 844.449 195.676 833.893 179.356 cv
cp
f
829.086 182.236 mo
829.086 182.236 844.449 196.152 842.045 212.956 cv
842.045 212.956 839.645 198.556 829.086 182.236 cv
cp
f
824.773 186.08 mo
824.773 186.08 840.133 199.996 837.732 216.796 cv
837.732 216.796 835.332 202.396 824.773 186.08 cv
cp
f
819.969 188.96 mo
819.969 188.96 835.332 202.876 832.93 219.676 cv
832.93 219.676 830.525 205.276 819.969 188.96 cv
cp
f
815.176 192.316 mo
815.176 192.316 830.541 206.232 828.137 223.036 cv
828.137 223.036 825.732 208.636 815.176 192.316 cv
cp
f
810.373 195.196 mo
810.373 195.196 825.732 209.112 823.332 225.916 cv
823.332 225.916 820.934 211.516 810.373 195.196 cv
cp
f
806.537 199.516 mo
806.537 199.516 821.9 213.433 819.496 230.236 cv
819.496 230.236 817.092 215.836 806.537 199.516 cv
cp
f
801.732 202.396 mo
801.732 202.396 817.092 216.313 814.693 233.116 cv
814.693 233.116 812.293 218.716 801.732 202.396 cv
cp
f
797.412 207.672 mo
797.412 207.672 812.773 221.589 810.373 238.393 cv
810.373 238.393 807.973 223.992 797.412 207.672 cv
cp
f
792.609 210.552 mo
792.609 210.552 807.973 224.469 805.568 241.272 cv
805.568 241.272 803.166 226.873 792.609 210.552 cv
cp
f
788.289 214.873 mo
788.289 214.873 803.652 228.789 801.248 245.593 cv
801.248 245.593 798.846 231.192 788.289 214.873 cv
cp
f
783.484 217.752 mo
783.484 217.752 798.846 231.668 796.445 248.473 cv
796.445 248.473 794.045 234.072 783.484 217.752 cv
cp
f
779.648 222.072 mo
779.648 222.072 795.012 235.989 792.609 252.793 cv
792.609 252.793 790.205 238.393 779.648 222.072 cv
cp
f
774.846 224.952 mo
774.846 224.952 790.205 238.869 787.805 255.673 cv
787.805 255.673 785.404 241.272 774.846 224.952 cv
cp
f
770.289 226.393 mo
770.289 226.393 785.652 240.309 783.248 257.112 cv
783.248 257.112 780.846 242.712 770.289 226.393 cv
cp
f
765.969 230.712 mo
765.969 230.712 781.332 244.629 778.93 261.433 cv
778.93 261.433 776.525 247.032 765.969 230.712 cv
cp
f
761.165 233.592 mo
761.165 233.592 776.525 247.509 774.125 264.313 cv
774.125 264.313 771.725 249.913 761.165 233.592 cv
cp
f
757.329 237.913 mo
757.329 237.913 772.693 251.829 770.289 268.633 cv
770.289 268.633 767.885 254.233 757.329 237.913 cv
cp
f
752.525 240.792 mo
752.525 240.792 767.885 254.709 765.484 271.513 cv
765.484 271.513 763.085 257.112 752.525 240.792 cv
cp
f
874.934 157.036 mo
874.934 157.036 890.293 170.952 887.893 187.756 cv
887.893 187.756 885.488 173.356 874.934 157.036 cv
cp
f
grestore
890.449 168.567 mo
890.449 168.567 873.969 161.514 872.443 152.48 cv
870.912 143.446 872.465 146.075 866.053 139.216 cv
859.648 132.354 858.867 120.999 865.002 117.38 cv
871.145 113.765 870.561 121.79 876.77 132.316 cv
882.969 142.846 898.551 160.25 890.449 168.567 cv
cp
f
865.805 122 mo
865.805 122 862.445 128.72 868.205 133.52 cv
873.965 138.316 875.404 141.196 876.365 148.396 cv
877.324 155.596 886.926 160.396 886.926 160.396 cv
886.926 160.396 880.693 156.552 880.205 150.316 cv
879.725 144.076 877.813 138.316 873.006 135.436 cv
868.205 132.556 865.805 122 865.805 122 cv
cp
1 1 1 rgb
f
777.439 184.93 mo
777.439 184.93 756.945 192.276 755.311 201.524 cv
753.668 210.76 752.221 216.34 752.221 216.34 cv
752.221 216.34 753.195 203.95 747.466 200.237 cv
741.732 196.529 724.299 192.025 724.299 192.025 cv
724.299 192.025 731.379 191.136 743.813 191.612 cv
756.256 192.096 777.439 184.93 777.439 184.93 cv
cp
.27451 .207843 .145098 rgb
f
766.381 233.237 mo
766.381 233.237 785.82 259.157 764.221 286.518 cv
781.5 267.798 li
781.5 267.798 783.66 248.357 766.381 233.237 cv
cp
f
812.199 29.1626 mo
812.199 29.1626 812.764 22.6226 818.502 24.5688 cv
824.24 26.5073 824.914 33.2236 831.912 34.4351 cv
838.92 35.6499 847.838 45.5537 850.34 48.6138 cv
852.838 51.6812 877.441 64.0938 867.182 67.6377 cv
856.932 71.1777 842.668 70.3037 830.873 61.6938 cv
819.053 53.0801 812.199 29.1626 812.199 29.1626 cv
cp
f
134.528 398.031 mo
40.3169 351.126 27.3159 311.875 23.041 298.972 cv
22.7856 298.184 li
20.7686 292.188 17.8657 287.504 14.8022 282.535 cv
12.1919 278.347 9.51074 274.007 7.52344 268.956 cv
6.99854 267.636 6.48096 266.388 5.99316 265.218 cv
2.58447 256.993 -.644043 249.243 7.04346 240.625 cv
8.8623 238.581 9.06445 237.205 9.47314 234.464 cv
10.0132 230.804 10.7632 225.797 15.8335 219.085 cv
19.9995 213.569 22.7031 211.712 24.916 210.4 cv
25.0059 210.351 25.0811 210.306 25.1558 210.261 cv
25.2832 209.973 25.501 209.376 25.8232 208.203 cv
26.5693 205.417 27.9907 201.524 31.5869 199.911 cv
33.6348 198.989 35.8882 199.045 37.9546 200.069 cv
38.5845 200.384 39.1206 200.748 39.5708 201.119 cv
48.856 203.939 65.9482 204.321 84.0083 204.726 cv
101.933 205.131 122.236 205.581 141.004 208.353 cv
153.987 210.272 168.166 214.559 186.106 219.981 cv
222.706 231.051 272.341 248.274 349.805 253.788 cv
466.891 262.104 565.006 228.377 602.483 205.784 cv
676.381 161.237 690.563 163.731 710.693 159.67 cv
726.413 156.509 727.737 155.305 757.83 117.002 cv
791.604 74.0239 800.611 37.585 800.975 36.0552 cv
802.258 30.6777 804.822 27.0664 808.58 25.3037 cv
812.326 23.5562 816.354 24.2803 818.678 25.4351 cv
820.223 26.2114 li
821.057 27.7227 li
823.328 31.8477 826.08 33.4712 829.279 35.3687 cv
833.281 37.7314 838.258 40.6826 840.811 48.2949 cv
842.057 52.0112 847.809 56.7212 856.201 60.895 cv
859.83 62.7061 862.646 63.7563 862.674 63.7749 cv
869.762 66.4111 li
865.119 72.3813 li
864.469 73.2178 800.266 150.265 784.381 185.718 cv
779.799 195.951 780.232 213.021 781.219 225.865 cv
783.537 256.161 786.414 293.864 727.238 350.665 cv
643.598 430.938 526.104 445.136 455.893 453.606 cv
377.581 463.067 254.386 452.661 155.738 408.077 cv
148.418 404.781 141.278 401.396 134.528 398.031 cv
cp
f
816.203 30.3999 mo
816.203 30.3999 808.906 26.7661 806.363 37.3413 cv
803.832 47.9277 792.219 82.2178 762.387 120.183 cv
732.556 158.144 730.01 161.437 711.785 165.107 cv
693.56 168.783 660.541 174.917 605.404 210.501 cv
565.107 236.507 465.129 265.424 349.906 257.233 cv
234.683 249.044 179.213 219.61 140.198 213.839 cv
101.176 208.071 55.2383 212.522 36.6382 205.998 cv
36.6382 205.998 33.3457 201.625 31.1709 209.646 cv
29.0034 217.675 28.2607 211.84 20.2656 222.426 cv
12.2559 233.02 17.3672 237.377 11.1797 244.319 cv
4.99219 251.261 8.65576 256.716 12.6831 266.917 cv
16.7109 277.112 24.0083 284.399 28.0435 296.425 cv
32.0708 308.451 44.2583 351.629 158.015 403.038 cv
256.891 447.712 378.683 457.353 455.236 448.104 cv
531.781 438.857 643.193 423.636 723.395 346.66 cv
807.117 266.309 761.107 227.013 777.459 190.529 cv
793.797 154.045 860.738 68.9727 860.738 68.9727 cv
860.738 68.9727 839.225 60.9888 835.557 50.0615 cv
831.889 39.1265 822.418 41.6914 816.203 30.3999 cv
cp
1 1 1 rgb
f
33.0381 211.93 mo
33.0381 211.93 40.3208 206.437 37.0322 202.994 cv
33.7432 199.544 26.8281 203.354 23.5547 208.112 cv
20.2808 212.875 19.6396 211.859 11.0708 214.428 cv
2.51709 216.993 3.43945 225.644 2.62939 234.123 cv
2.26953 237.951 3.09082 239.594 .73584 243.426 cv
-1.62305 247.255 2.1123 250.267 5.95605 256.277 cv
5.95605 256.277 4.48584 250.075 9.03809 249.156 cv
13.5908 248.241 12.856 241.502 13.5835 238.218 cv
14.3032 234.933 18.8481 231.276 18.3008 227.815 cv
17.7495 224.35 16.647 221.976 22.1108 220.15 cv
27.582 218.32 29.9443 217.218 33.0381 211.93 cv
cp
.27451 .207843 .145098 rgb
f
29.1006 280.573 mo
29.1006 280.573 45.7207 343.206 147.961 388.931 cv
242.367 431.163 342.751 449.038 471.248 435.146 cv
599.746 421.251 703.553 365.027 752.386 294.393 cv
752.386 294.393 775.291 257.987 767.021 216.989 cv
767.021 216.989 770.094 261.55 740.629 298.788 cv
711.158 336.028 607.43 418.124 426.395 427.844 cv
257.963 436.866 84.5068 379.188 29.1006 280.573 cv
cp
f
60.5259 261.235 mo
60.5259 261.235 155.536 331.136 281.836 351.913 cv
281.836 351.913 166.463 340.503 60.5259 261.235 cv
cp
f
787.539 118.146 mo
787.539 118.146 761.355 159.752 730.764 180.036 cv
730.764 180.036 672.879 224.976 638.086 242.721 cv
638.086 242.721 708.203 203.402 732.957 182.046 cv
757.711 160.675 778.816 132.929 787.539 118.146 cv
cp
f
gsave
41.9033 301.521 mo
41.9033 301.521 79.186 361.982 179.506 394.622 cv
279.83 427.271 346.921 431.522 420.938 434.684 cv
494.952 437.834 599.893 400.844 659.99 367.927 cv
720.091 335.005 744.473 306.171 761.531 260.931 cv
761.531 260.931 701.881 344.159 557.93 379.042 cv
398.506 417.663 197.723 398.987 41.9033 301.521 cv
cp
clp
38.9707 304.462 mo
38.9707 304.462 24.6606 317.261 23.9595 340.165 cv
23.9595 340.165 28.5044 318.31 38.9707 304.462 cv
cp
f
42.5332 308.575 mo
42.5332 308.575 28.2158 321.37 27.5259 344.274 cv
27.5259 344.274 32.0635 322.424 42.5332 308.575 cv
cp
f
31.2607 347.493 mo
31.2607 347.493 32.3296 325.911 49.002 308.89 cv
49.002 308.89 38.2432 322.698 31.2607 347.493 cv
cp
f
35.5356 351.122 mo
35.5356 351.122 36.6084 329.526 53.2959 312.527 cv
53.2959 312.527 42.5259 326.316 35.5356 351.122 cv
cp
f
39.6196 355.96 mo
39.6196 355.96 40.7783 332.459 58.9434 313.931 cv
58.9434 313.931 47.2134 328.948 39.6196 355.96 cv
cp
f
43.4219 360.431 mo
43.4219 360.431 44.5732 336.929 62.731 318.399 cv
62.731 318.399 51.0269 333.419 43.4219 360.431 cv
cp
f
47.9932 364.132 mo
47.9932 364.132 49.1597 340.618 67.3169 322.09 cv
67.3169 322.09 55.5947 337.116 47.9932 364.132 cv
cp
f
52.0732 367.409 mo
52.0732 367.409 53.146 342.427 73.0771 322.899 cv
73.0771 322.899 60.2407 338.759 52.0732 367.409 cv
cp
f
56.4683 370.435 mo
56.4683 370.435 57.5483 345.452 77.4756 325.927 cv
77.4756 325.927 64.6436 341.796 56.4683 370.435 cv
cp
f
61.4561 372.032 mo
61.4561 372.032 62.5244 347.054 82.4595 327.521 cv
82.4595 327.521 69.6309 343.375 61.4561 372.032 cv
cp
f
65.8545 375.059 mo
65.8545 375.059 66.9307 350.076 86.8506 330.55 cv
86.8506 330.55 74.0186 346.42 65.8545 375.059 cv
cp
f
71.2544 376.104 mo
71.2544 376.104 72.3384 351.122 92.251 331.585 cv
92.251 331.585 79.4258 347.459 71.2544 376.104 cv
cp
f
75.646 379.132 mo
75.646 379.132 76.7222 354.16 96.6572 334.622 cv
96.6572 334.622 83.8135 350.493 75.646 379.132 cv
cp
f
81.001 382.045 mo
81.001 382.045 82.0771 357.063 102.008 337.524 cv
102.008 337.524 89.1685 353.388 81.001 382.045 cv
cp
f
85.396 385.071 mo
85.396 385.071 86.4683 360.077 106.403 340.559 cv
106.403 340.559 93.5708 356.421 85.396 385.071 cv
cp
f
91.3247 386.726 mo
91.3247 386.726 92.4609 360.362 113.461 339.749 cv
113.461 339.749 99.9419 356.493 91.3247 386.726 cv
cp
f
95.9482 389.909 mo
95.9482 389.909 97.0845 363.554 118.088 342.944 cv
118.088 342.944 104.573 359.688 95.9482 389.909 cv
cp
f
101.72 390.91 mo
101.72 390.91 102.867 364.548 123.859 343.934 cv
123.859 343.934 110.337 360.685 101.72 390.91 cv
cp
f
106.351 394.116 mo
106.351 394.116 107.499 367.757 128.491 347.144 cv
128.491 347.144 114.968 363.88 106.351 394.116 cv
cp
f
112.411 394.96 mo
112.411 394.96 113.183 368.726 134.213 348.089 cv
134.213 348.089 120.729 364.825 112.411 394.96 cv
cp
f
117.151 398.099 mo
117.151 398.099 117.931 371.875 138.961 351.228 cv
138.961 351.228 125.468 367.982 117.151 398.099 cv
cp
f
123.481 397.626 mo
123.481 397.626 124.523 371.402 145.763 350.976 cv
145.763 350.976 132.095 367.589 123.481 397.626 cv
cp
f
128.183 400.833 mo
128.183 400.833 129.237 374.608 150.473 354.183 cv
150.473 354.183 136.808 370.784 128.183 400.833 cv
cp
f
134.791 400.394 mo
134.791 400.394 135.766 373.54 157.928 352.709 cv
157.928 352.709 143.682 369.67 134.791 400.394 cv
cp
f
139.745 403.69 mo
139.745 403.69 140.716 376.825 162.886 356.017 cv
162.886 356.017 148.636 372.966 139.745 403.69 cv
cp
f
146.791 402.723 mo
146.791 402.723 147.811 376.026 169.666 355.296 cv
169.666 355.296 155.607 372.167 146.791 402.723 cv
cp
f
151.658 405.985 mo
151.658 405.985 152.671 379.312 174.533 358.563 cv
174.533 358.563 160.479 375.431 151.658 405.985 cv
cp
f
158.858 404.759 mo
158.858 404.759 159.826 378.209 181.673 357.618 cv
181.673 357.618 167.626 374.372 158.858 404.759 cv
cp
f
163.729 408.021 mo
163.729 408.021 164.716 381.482 186.541 360.88 cv
186.541 360.88 172.516 377.646 163.729 408.021 cv
cp
f
170.258 408.077 mo
170.258 408.077 171.233 381.224 193.396 360.403 cv
193.396 360.403 179.146 377.354 170.258 408.077 cv
cp
f
175.205 411.386 mo
175.205 411.386 176.191 384.531 198.354 363.7 cv
198.354 363.7 184.111 380.649 175.205 411.386 cv
cp
f
182.258 410.406 mo
182.258 410.406 183.263 383.732 205.129 362.991 cv
205.129 362.991 191.067 379.862 182.258 410.406 cv
cp
f
187.129 413.681 mo
187.129 413.681 188.146 386.995 210.001 366.261 cv
210.001 366.261 195.953 383.125 187.129 413.681 cv
cp
f
194.311 412.454 mo
194.311 412.454 195.301 385.915 217.133 365.313 cv
217.133 365.313 203.101 382.067 194.311 412.454 cv
cp
f
199.193 415.705 mo
199.193 415.705 200.176 389.167 222.008 368.579 cv
222.008 368.579 207.976 385.33 199.193 415.705 cv
cp
f
205.756 412.825 mo
205.756 412.825 207.766 386.038 230.723 366.104 cv
230.723 366.104 215.828 382.473 205.756 412.825 cv
cp
f
210.563 416.323 mo
210.563 416.323 212.588 389.526 235.55 369.591 cv
235.55 369.591 220.655 385.96 210.563 416.323 cv
cp
f
217.658 415.638 mo
217.658 415.638 219.698 389.009 242.345 369.142 cv
242.345 369.142 227.648 385.454 217.658 415.638 cv
cp
f
222.376 419.103 mo
222.376 419.103 224.438 392.462 247.096 372.595 cv
247.096 372.595 232.388 388.896 222.376 419.103 cv
cp
f
229.628 418.146 mo
229.628 418.146 231.635 391.663 254.251 371.931 cv
254.251 371.931 239.581 388.132 229.628 418.146 cv
cp
f
234.368 421.589 mo
234.368 421.589 236.382 395.106 258.999 375.386 cv
258.999 375.386 244.325 391.573 234.368 421.589 cv
cp
f
240.983 421.735 mo
240.983 421.735 242.997 394.927 265.966 375.003 cv
265.966 375.003 251.056 391.371 240.983 421.735 cv
cp
f
245.806 425.223 mo
245.806 425.223 247.823 398.425 270.785 378.479 cv
270.785 378.479 255.886 394.858 245.806 425.223 cv
cp
f
253.186 421.566 mo
253.186 421.566 256.688 395.106 280.403 376.511 cv
280.403 376.511 264.826 391.979 253.186 421.566 cv
cp
f
258.398 425.684 mo
258.398 425.684 261.121 399.111 284.273 379.817 cv
284.273 379.817 269.161 395.747 258.398 425.684 cv
cp
f
264.856 427.045 mo
264.856 427.045 266.874 400.552 289.486 380.819 cv
289.486 380.819 274.812 397.019 264.856 427.045 cv
cp
f
270.061 430.712 mo
270.061 430.712 271.55 404.208 293.791 384.024 cv
293.791 384.024 279.421 400.518 270.061 430.712 cv
cp
f
276.661 428.767 mo
276.661 428.767 278.671 402.272 301.294 382.552 cv
301.294 382.552 286.613 398.74 276.661 428.767 cv
cp
f
281.858 432.444 mo
281.858 432.444 283.362 405.917 305.581 385.757 cv
305.581 385.757 291.218 402.25 281.858 432.444 cv
cp
f
289.088 429.813 mo
289.088 429.813 291.106 403.33 313.718 383.598 cv
313.718 383.598 299.044 399.809 289.088 429.813 cv
cp
f
294.293 433.491 mo
294.293 433.491 295.782 406.976 318.016 386.815 cv
318.016 386.815 303.653 403.285 294.293 433.491 cv
cp
f
300.908 431.522 mo
300.908 431.522 303.031 404.804 325.793 384.802 cv
325.793 384.802 311.003 401.215 300.908 431.522 cv
cp
f
306.098 435.224 mo
306.098 435.224 307.718 408.46 330.072 388.019 cv
330.072 388.019 315.616 404.714 306.098 435.224 cv
cp
f
313.726 432.681 mo
313.726 432.681 316.01 405.659 338.937 385.296 cv
338.937 385.296 324.023 401.958 313.726 432.681 cv
cp
f
318.912 436.371 mo
318.912 436.371 320.678 409.315 343.216 388.524 cv
343.216 388.524 328.621 405.479 318.912 436.371 cv
cp
f
326.202 433.626 mo
326.202 433.626 328.486 406.604 351.413 386.253 cv
351.413 386.253 336.503 402.913 326.202 433.626 cv
cp
f
331.388 437.327 mo
331.388 437.327 333.166 410.271 355.696 389.481 cv
355.696 389.481 341.097 406.435 331.388 437.327 cv
cp
f
338.048 435.269 mo
338.048 435.269 340.336 408.246 363.271 387.896 cv
363.271 387.896 348.354 404.556 338.048 435.269 cv
cp
f
343.238 438.981 mo
343.238 438.981 345.008 411.913 367.538 391.124 cv
367.538 391.124 352.951 408.077 343.238 438.981 cv
cp
f
351.919 435.101 mo
351.919 435.101 354.211 408.066 377.138 387.715 cv
377.138 387.715 362.221 404.388 351.919 435.101 cv
cp
f
357.117 438.79 mo
357.117 438.79 358.876 411.745 381.417 390.944 cv
381.417 390.944 366.814 407.909 357.117 438.79 cv
cp
f
363.8 436.675 mo
363.8 436.675 366.608 408.505 390.091 386.894 cv
390.091 386.894 374.746 404.522 363.8 436.675 cv
cp
f
368.963 440.433 mo
368.963 440.433 371.243 412.229 394.343 390.179 cv
394.343 390.179 379.321 408.101 368.963 440.433 cv
cp
f
377.701 435.674 mo
377.701 435.674 379.707 409.202 402.323 389.459 cv
402.323 389.459 387.649 405.67 377.701 435.674 cv
cp
f
382.902 439.364 mo
382.902 439.364 384.387 412.837 406.628 392.677 cv
406.628 392.677 392.258 409.146 382.902 439.364 cv
cp
f
389.513 437.396 mo
389.513 437.396 391.644 410.665 414.398 390.674 cv
414.398 390.674 399.616 407.076 389.513 437.396 cv
cp
f
394.703 441.085 mo
394.703 441.085 396.323 414.321 418.677 393.88 cv
418.677 393.88 404.221 410.575 394.703 441.085 cv
cp
f
402.338 438.554 mo
402.338 438.554 404.611 411.521 427.542 391.169 cv
427.542 391.169 412.628 407.83 402.338 438.554 cv
cp
f
407.517 442.243 mo
407.517 442.243 409.291 415.188 431.816 394.386 cv
431.816 394.386 417.226 411.351 407.517 442.243 cv
cp
f
414.811 439.499 mo
414.811 439.499 417.098 412.465 440.019 392.125 cv
440.019 392.125 425.112 408.786 414.811 439.499 cv
cp
f
420.001 443.188 mo
420.001 443.188 421.763 416.132 444.301 395.343 cv
444.301 395.343 429.698 412.296 420.001 443.188 cv
cp
f
426.653 441.13 mo
426.653 441.13 428.941 414.107 451.876 393.768 cv
451.876 393.768 436.959 410.429 426.653 441.13 cv
cp
f
432.987 442.952 mo
432.987 442.952 436.756 412.049 461.191 389.729 cv
461.191 389.729 441.953 411.216 432.987 442.952 cv
cp
f
440.524 440.962 mo
440.524 440.962 445.23 410.8 467.345 389.706 cv
467.345 389.706 450.826 410.261 440.524 440.962 cv
cp
f
445.703 444.663 mo
445.703 444.663 451.809 411.115 474.181 389.021 cv
474.181 389.021 455.671 412.184 445.703 444.663 cv
cp
f
452.408 442.548 mo
452.408 442.548 456.859 413.522 479.652 389.009 cv
479.652 389.009 463.906 408.044 452.408 442.548 cv
cp
f
460.572 440.274 mo
460.572 440.274 465.736 408.719 488.671 384.621 cv
488.671 384.621 470.918 407.954 460.572 440.274 cv
cp
f
468.398 436.495 mo
468.398 436.495 472.838 407.47 495.631 382.968 cv
495.631 382.968 479.899 402.003 468.398 436.495 cv
cp
f
476.559 434.233 mo
476.559 434.233 481.723 402.678 504.649 378.58 cv
504.649 378.58 486.908 401.901 476.559 434.233 cv
cp
f
484.111 430.319 mo
484.111 430.319 488.559 401.294 511.351 376.792 cv
511.351 376.792 495.608 395.826 484.111 430.319 cv
cp
f
492.264 428.058 mo
492.264 428.058 497.431 396.501 520.365 372.393 cv
520.365 372.393 502.613 395.726 492.264 428.058 cv
cp
f
498.459 426.876 mo
498.459 426.876 502.906 397.851 525.706 373.349 cv
525.706 373.349 509.959 392.396 498.459 426.876 cv
cp
f
506.618 424.615 mo
506.618 424.615 511.782 393.059 534.709 368.95 cv
534.709 368.95 516.969 392.282 506.618 424.615 cv
cp
f
512.535 423.974 mo
512.535 423.974 516.983 394.96 539.771 370.446 cv
539.771 370.446 524.033 389.493 512.535 423.974 cv
cp
f
520.691 421.724 mo
520.691 421.724 525.867 390.156 548.795 366.059 cv
548.795 366.059 531.042 389.38 520.691 421.724 cv
cp
f
526.201 421.218 mo
526.201 421.218 530.648 392.204 553.448 367.69 cv
553.448 367.69 537.702 386.736 526.201 421.218 cv
cp
f
534.361 418.968 mo
534.361 418.968 539.535 387.399 562.463 363.306 cv
562.463 363.306 544.719 386.624 534.361 418.968 cv
cp
f
541.369 417.505 mo
541.369 417.505 545.824 388.479 568.605 363.974 cv
568.605 363.974 552.871 383.013 541.369 417.505 cv
cp
f
549.537 415.243 mo
549.537 415.243 554.701 383.688 577.629 359.587 cv
577.629 359.587 559.883 382.911 549.537 415.243 cv
cp
f
556.546 413.106 mo
556.546 413.106 560.993 384.093 583.782 359.575 cv
583.782 359.575 568.043 378.614 556.546 413.106 cv
cp
f
564.702 410.845 mo
564.702 410.845 569.873 379.288 592.801 355.184 cv
592.801 355.184 575.053 378.513 564.702 410.845 cv
cp
f
571.576 408.292 mo
571.576 408.292 576.02 379.277 598.813 354.761 cv
598.813 354.761 583.073 373.81 571.576 408.292 cv
cp
f
579.732 406.042 mo
579.732 406.042 584.896 374.474 607.823 350.372 cv
607.823 350.372 590.082 373.698 579.732 406.042 cv
cp
f
586.876 403.622 mo
586.876 403.622 591.331 374.598 614.115 350.087 cv
614.115 350.087 598.381 369.13 586.876 403.622 cv
cp
f
595.032 401.361 mo
595.032 401.361 600.203 369.794 623.135 345.7 cv
623.135 345.7 605.394 369.018 595.032 401.361 cv
cp
f
602.816 398.583 mo
602.816 398.583 607.261 369.558 630.061 345.048 cv
630.061 345.048 614.326 364.094 602.816 398.583 cv
cp
f
610.973 396.321 mo
610.973 396.321 616.148 364.757 639.076 340.66 cv
639.076 340.66 621.331 363.981 610.973 396.321 cv
cp
f
618.211 393.723 mo
618.211 393.723 622.662 364.701 645.455 340.188 cv
645.455 340.188 629.716 359.233 618.211 393.723 cv
cp
f
626.371 391.462 mo
626.371 391.462 631.538 359.901 654.473 335.8 cv
654.473 335.8 636.725 359.125 626.371 391.462 cv
cp
f
634.879 386.771 mo
634.879 386.771 639.334 357.741 662.127 333.235 cv
662.127 333.235 646.389 352.274 634.879 386.771 cv
cp
f
643.043 384.509 mo
643.043 384.509 648.211 352.944 671.146 328.848 cv
671.146 328.848 653.396 352.161 643.043 384.509 cv
cp
f
653.191 376.521 mo
653.191 376.521 657.639 347.504 680.424 322.99 cv
680.424 322.99 664.688 342.024 653.191 376.521 cv
cp
f
661.344 374.261 mo
661.344 374.261 666.515 342.708 689.441 318.603 cv
689.441 318.603 671.701 341.931 661.344 374.261 cv
cp
f
670.403 368.017 mo
670.403 368.017 674.844 338.999 697.644 314.493 cv
697.644 314.493 681.894 333.527 670.403 368.017 cv
cp
f
678.556 365.755 mo
678.556 365.755 683.727 334.202 706.658 310.094 cv
706.658 310.094 688.906 333.419 678.556 365.755 cv
cp
f
688.156 358.878 mo
688.156 358.878 692.604 329.853 715.389 305.339 cv
715.389 305.339 699.657 324.382 688.156 358.878 cv
cp
f
696.316 356.612 mo
696.316 356.612 701.479 325.049 724.407 300.948 cv
724.407 300.948 706.666 324.28 696.316 356.612 cv
cp
f
707.375 348.175 mo
707.375 348.175 711.818 319.149 734.611 294.636 cv
734.611 294.636 718.861 313.675 707.375 348.175 cv
cp
f
715.523 345.906 mo
715.523 345.906 720.694 314.351 743.626 290.249 cv
743.626 290.249 725.881 313.573 715.523 345.906 cv
cp
f
727.306 335.095 mo
727.306 335.095 731.754 306.069 754.553 281.563 cv
754.553 281.563 738.807 300.61 727.306 335.095 cv
cp
f
735.466 332.841 mo
735.466 332.841 740.633 301.277 763.557 277.177 cv
763.557 277.177 745.816 300.497 735.466 332.841 cv
cp
f
grestore
gsave
135.897 229.161 mo
135.897 229.161 136.021 220.06 197.041 236.935 cv
258.072 253.825 365.333 275.354 435.08 268.292 cv
504.818 261.239 563.42 241.99 601.283 220.274 cv
639.132 198.55 685.801 172.218 706.973 170.324 cv
728.153 168.422 739.313 178.784 723.035 196.067 cv
706.748 213.344 650.438 253.394 565.018 285.032 cv
449.559 327.813 330.608 312.985 241.666 284.41 cv
152.727 255.839 124.456 238.848 135.897 229.161 cv
cp
clp
130.269 214.694 mo
130.269 214.694 134.108 238.465 116.979 261.978 cv
116.979 261.978 140.453 237.351 130.269 214.694 cv
cp
f
139.261 216.595 mo
139.261 216.595 148.148 244.038 123.072 270.179 cv
123.072 270.179 140.611 247.739 139.261 216.595 cv
cp
f
148.092 218.879 mo
148.092 218.879 155.776 243.07 136.28 266.849 cv
136.28 266.849 149.348 247.296 148.092 218.879 cv
cp
f
155.378 218.643 mo
155.378 218.643 161.874 245.429 139.786 273.847 cv
139.786 273.847 166.913 249.101 155.378 218.643 cv
cp
f
163.838 220.75 mo
163.838 220.75 170.333 247.536 148.238 275.954 cv
148.238 275.954 175.362 251.204 163.838 220.75 cv
cp
f
171.919 222.681 mo
171.919 222.681 178.418 249.472 156.327 277.886 cv
156.327 277.886 183.451 253.139 171.919 222.681 cv
cp
f
180.203 225.156 mo
180.203 225.156 186.702 251.935 164.607 280.364 cv
164.607 280.364 191.742 255.614 180.203 225.156 cv
cp
f
188.116 227.466 mo
188.116 227.466 194.618 254.249 172.516 282.67 cv
172.516 282.67 199.651 257.928 188.116 227.466 cv
cp
f
195.635 228.681 mo
195.635 228.681 202.137 255.468 180.046 283.886 cv
180.046 283.886 207.166 259.146 195.635 228.681 cv
cp
f
202.441 230.478 mo
202.441 230.478 208.936 257.268 186.848 285.681 cv
186.848 285.681 213.968 260.935 202.441 230.478 cv
cp
f
209.787 232.067 mo
209.787 232.067 216.278 258.861 194.191 287.278 cv
194.191 287.278 221.318 262.532 209.787 232.067 cv
cp
f
217.126 233.665 mo
217.126 233.665 223.625 260.451 201.533 288.868 cv
201.533 288.868 228.661 264.126 217.126 233.665 cv
cp
f
224.101 235.09 mo
224.101 235.09 230.611 261.88 208.516 290.294 cv
208.516 290.294 235.636 265.556 224.101 235.09 cv
cp
f
231.455 236.676 mo
231.455 236.676 237.953 263.462 215.858 291.88 cv
215.858 291.88 242.986 267.142 231.455 236.676 cv
cp
f
238.25 238.476 mo
238.25 238.476 244.752 265.263 222.668 293.681 cv
222.668 293.681 249.792 268.941 238.25 238.476 cv
cp
f
245.604 240.066 mo
245.604 240.066 252.106 266.86 230.015 295.267 cv
230.015 295.267 257.131 270.527 245.604 240.066 cv
cp
f
252.582 241.495 mo
252.582 241.495 259.081 268.281 236.99 296.694 cv
236.99 296.694 264.113 271.948 252.582 241.495 cv
cp
f
259.921 243.081 mo
259.921 243.081 266.423 269.868 244.336 298.285 cv
244.336 298.285 271.459 273.546 259.921 243.081 cv
cp
f
266.87 243.595 mo
266.87 243.595 273.372 270.382 251.277 298.799 cv
251.277 298.799 278.394 274.053 266.87 243.595 cv
cp
f
274.216 245.185 mo
274.216 245.185 280.711 271.979 258.624 300.396 cv
258.624 300.396 285.747 275.649 274.216 245.185 cv
cp
f
281.183 246.614 mo
281.183 246.614 287.693 273.407 265.598 301.825 cv
265.598 301.825 292.726 277.087 281.183 246.614 cv
cp
f
288.537 248.2 mo
288.537 248.2 295.036 274.993 272.944 303.411 cv
272.944 303.411 300.068 278.661 288.537 248.2 cv
cp
f
296.588 249.224 mo
296.588 249.224 303.091 276.011 280.996 304.424 cv
280.996 304.424 308.124 279.685 296.588 249.224 cv
cp
f
303.931 250.817 mo
303.931 250.817 310.433 277.607 288.346 306.021 cv
288.346 306.021 315.47 281.282 303.931 250.817 cv
cp
f
310.906 252.246 mo
310.906 252.246 317.408 279.032 295.321 307.45 cv
295.321 307.45 322.441 282.704 310.906 252.246 cv
cp
f
318.256 253.833 mo
318.256 253.833 324.758 280.618 302.667 309.04 cv
302.667 309.04 329.791 284.298 318.256 253.833 cv
cp
f
325.212 254.147 mo
325.212 254.147 332.637 280.69 311.558 309.861 cv
311.558 309.861 337.801 284.188 325.212 254.147 cv
cp
f
332.611 255.476 mo
332.611 255.476 340.04 282.024 318.946 311.2 cv
318.946 311.2 345.192 285.524 332.611 255.476 cv
cp
f
339.631 256.656 mo
339.631 256.656 347.063 283.206 325.973 312.378 cv
325.973 312.378 352.212 286.705 339.631 256.656 cv
cp
f
347.026 257.995 mo
347.026 257.995 354.458 284.545 333.368 313.716 cv
333.368 313.716 359.615 288.036 347.026 257.995 cv
cp
f
354.076 257.875 mo
354.076 257.875 361.883 284.309 341.206 313.776 cv
341.206 313.776 367.088 287.732 354.076 257.875 cv
cp
f
361.493 259.108 mo
361.493 259.108 369.293 285.538 348.612 315.011 cv
348.612 315.011 374.499 288.97 361.493 259.108 cv
cp
f
368.536 260.192 mo
368.536 260.192 376.332 286.626 355.651 316.083 cv
355.651 316.083 381.533 290.05 368.536 260.192 cv
cp
f
375.946 261.419 mo
375.946 261.419 383.746 287.864 363.068 317.316 cv
363.068 317.316 388.955 291.276 375.946 261.419 cv
cp
f
382.644 259.124 mo
382.644 259.124 391.79 285.13 372.665 315.618 cv
372.665 315.618 397.167 288.272 382.644 259.124 cv
cp
f
390.106 259.976 mo
390.106 259.976 399.26 285.974 380.116 316.462 cv
380.116 316.462 404.637 289.128 390.106 259.976 cv
cp
f
397.189 260.698 mo
397.189 260.698 406.347 286.698 387.203 317.185 cv
387.203 317.185 411.725 289.848 397.189 260.698 cv
cp
f
404.66 261.542 mo
404.66 261.542 413.813 287.542 394.681 318.036 cv
394.681 318.036 419.183 290.688 404.66 261.542 cv
cp
f
411.271 260.233 mo
411.271 260.233 421.827 284.437 405.537 314.718 cv
405.537 314.718 427.209 287.103 411.271 260.233 cv
cp
f
418.493 260.575 mo
418.493 260.575 429.061 284.774 412.76 315.056 cv
412.76 315.056 434.438 287.44 418.493 260.575 cv
cp
f
425.348 260.808 mo
425.348 260.808 435.916 285.007 419.622 315.295 cv
419.622 315.295 441.289 287.677 425.348 260.808 cv
cp
f
432.578 261.146 mo
432.578 261.146 443.153 285.354 426.845 315.632 cv
426.845 315.632 448.523 288.011 432.578 261.146 cv
cp
f
438.519 258.896 mo
438.519 258.896 450.113 282.621 435.15 313.581 cv
435.15 313.581 455.611 285.04 438.519 258.896 cv
cp
f
445.756 258.917 mo
445.756 258.917 457.358 282.632 442.393 313.604 cv
442.393 313.604 462.845 285.063 445.756 258.917 cv
cp
f
452.604 258.851 mo
452.604 258.851 464.221 282.58 449.243 313.54 cv
449.243 313.54 469.703 285.007 452.604 258.851 cv
cp
f
459.852 258.876 mo
459.852 258.876 471.451 282.599 456.488 313.559 cv
456.488 313.559 476.948 285.028 459.852 258.876 cv
cp
f
465.278 255.524 mo
465.278 255.524 478.111 278.604 464.82 310.319 cv
464.82 310.319 483.729 280.735 465.278 255.524 cv
cp
f
472.501 255.163 mo
472.501 255.163 485.355 278.237 472.047 309.951 cv
472.047 309.951 490.959 280.375 472.501 255.163 cv
cp
f
479.341 254.743 mo
479.341 254.743 492.195 277.817 478.887 309.524 cv
478.887 309.524 497.81 279.955 479.341 254.743 cv
cp
f
486.582 254.384 mo
486.582 254.384 499.43 277.458 486.121 309.16 cv
486.121 309.16 505.043 279.584 486.582 254.384 cv
cp
f
492.24 251.767 mo
492.24 251.767 506.382 274.06 494.941 306.486 cv
494.941 306.486 512.115 275.864 492.24 251.767 cv
cp
f
499.43 250.986 mo
499.43 250.986 513.582 273.284 502.141 305.718 cv
502.141 305.718 519.309 275.084 499.43 250.986 cv
cp
f
506.236 250.165 mo
506.236 250.165 520.399 272.462 508.936 304.896 cv
508.936 304.896 526.126 274.274 506.236 250.165 cv
cp
f
513.428 249.393 mo
513.428 249.393 527.6 271.69 516.144 304.101 cv
516.144 304.101 533.314 273.49 513.428 249.393 cv
cp
f
517.823 246.377 mo
517.823 246.377 533.528 267.614 524.438 300.768 cv
524.438 300.768 539.367 269.001 517.823 246.377 cv
cp
f
524.926 245.091 mo
524.926 245.091 540.653 266.309 531.556 299.485 cv
531.556 299.485 546.488 267.704 524.926 245.091 cv
cp
f
531.66 243.786 mo
531.66 243.786 547.389 265.004 538.287 298.181 cv
538.287 298.181 553.227 266.402 531.66 243.786 cv
cp
f
538.793 242.496 mo
538.793 242.496 554.521 263.722 545.4 296.868 cv
545.4 296.868 560.348 265.104 538.793 242.496 cv
cp
f
545.033 238.994 mo
545.033 238.994 561.631 259.524 553.97 293.05 cv
553.97 293.05 567.519 260.665 545.033 238.994 cv
cp
f
552.08 237.408 mo
552.08 237.408 568.695 257.92 561.023 291.456 cv
561.023 291.456 574.591 259.067 552.08 237.408 cv
cp
f
558.751 235.81 mo
558.751 235.81 575.379 256.334 567.694 289.866 cv
567.694 289.866 581.262 257.481 558.751 235.81 cv
cp
f
565.809 234.216 mo
565.809 234.216 582.432 254.743 574.748 288.257 cv
574.748 288.257 588.323 255.88 565.809 234.216 cv
cp
f
571.531 230.837 mo
571.531 230.837 588.706 250.886 582.004 284.624 cv
582.004 284.624 594.627 251.856 571.531 230.837 cv
cp
f
578.535 229.042 mo
578.535 229.042 595.719 249.089 589.002 282.827 cv
589.002 282.827 601.646 250.063 578.535 229.042 cv
cp
f
585.154 227.271 mo
585.154 227.271 602.355 247.308 595.64 281.046 cv
595.64 281.046 608.273 248.29 585.154 227.271 cv
cp
f
592.171 225.471 mo
592.171 225.471 609.365 245.53 602.641 279.239 cv
602.641 279.239 615.282 246.486 592.171 225.471 cv
cp
f
596.251 220.735 mo
596.251 220.735 615.057 239.286 611.198 273.444 cv
611.198 273.444 621.042 239.759 596.251 220.735 cv
cp
f
603.087 218.365 mo
603.087 218.365 621.896 236.894 618.038 271.071 cv
618.038 271.071 627.886 237.374 603.087 218.365 cv
cp
f
609.525 216.036 mo
609.525 216.036 628.351 234.573 624.48 268.739 cv
624.48 268.739 634.34 235.049 609.525 216.036 cv
cp
f
616.373 213.651 mo
616.373 213.651 635.191 232.199 631.313 266.365 cv
631.313 266.365 641.176 232.671 616.373 213.651 cv
cp
f
621.48 210.422 mo
621.48 210.422 641.476 227.68 639.908 262.026 cv
639.908 262.026 647.476 227.748 621.48 210.422 cv
cp
f
628.148 207.606 mo
628.148 207.606 648.144 224.841 646.568 259.202 cv
646.568 259.202 654.15 224.92 628.148 207.606 cv
cp
f
634.41 204.85 mo
634.41 204.85 654.432 222.096 652.846 256.446 cv
652.846 256.446 660.439 222.175 634.41 204.85 cv
cp
f
641.09 202.019 mo
641.09 202.019 661.092 219.272 659.506 253.618 cv
659.506 253.618 667.1 219.344 641.09 202.019 cv
cp
f
646.636 197.942 mo
646.636 197.942 667.662 213.895 668.27 248.278 cv
668.27 248.278 673.658 213.591 646.636 197.942 cv
cp
f
653.104 194.714 mo
653.104 194.714 674.153 210.647 674.738 245.039 cv
674.738 245.039 680.149 210.344 653.104 194.714 cv
cp
f
659.198 191.564 mo
659.198 191.564 680.24 207.505 680.828 241.896 cv
680.828 241.896 686.247 207.212 659.198 191.564 cv
cp
f
665.663 188.313 mo
665.663 188.313 686.73 204.276 687.305 238.656 cv
687.305 238.656 692.716 203.965 665.663 188.313 cv
cp
f
671.334 184.285 mo
671.334 184.285 692.903 199.529 694.662 233.875 cv
694.662 233.875 698.881 199.015 671.334 184.285 cv
cp
f
677.693 180.835 mo
677.693 180.835 699.271 196.064 701.007 230.421 cv
701.007 230.421 705.256 195.562 677.693 180.835 cv
cp
f
683.671 177.49 mo
683.671 177.49 705.248 192.723 706.992 227.062 cv
706.992 227.062 711.244 192.216 683.671 177.49 cv
cp
f
690.038 174.025 mo
690.038 174.025 711.615 189.269 713.348 223.604 cv
713.348 223.604 717.59 188.755 690.038 174.025 cv
cp
f
698.307 172.079 mo
698.307 172.079 719.873 187.323 721.629 221.661 cv
721.629 221.661 725.848 186.809 698.307 172.079 cv
cp
f
704.663 168.629 mo
704.663 168.629 726.233 183.846 727.973 218.215 cv
727.973 218.215 732.226 183.351 704.663 168.629 cv
cp
f
710.637 165.284 mo
710.637 165.284 732.215 180.516 733.966 214.855 cv
733.966 214.855 738.211 180.002 710.637 165.284 cv
cp
f
717.004 161.812 mo
717.004 161.812 738.586 177.063 740.314 211.397 cv
740.314 211.397 744.556 176.549 717.004 161.812 cv
cp
f
grestore
739.823 145.394 mo
739.823 145.394 732.195 158.894 732.195 164.361 cv
732.211 169.833 734.037 171.651 726.004 167.646 cv
717.983 163.656 704.131 165.869 704.131 165.869 cv
704.131 165.869 726.725 160.728 739.823 145.394 cv
cp
f
198.807 274.454 mo
198.807 274.454 454.973 373.247 649.936 247.263 cv
649.936 247.263 479.251 382.731 198.807 274.454 cv
cp
f
6.78076 243.678 mo
6.78076 243.678 9.66064 235.757 10.021 229.998 cv
10.3809 224.237 8.94092 219.917 14.7007 218.478 cv
20.4609 217.038 29.4609 207.678 29.4609 207.678 cv
29.4609 207.678 27.6606 213.078 20.4609 217.038 cv
13.2607 220.998 12.541 222.438 11.8208 228.198 cv
11.1006 233.958 10.3809 238.638 6.78076 243.678 cv
cp
1 1 1 rgb
f
805.295 50.4814 mo
805.295 50.4814 790.063 101.192 743.476 150.85 cv
743.476 150.85 790.449 111.4 805.295 50.4814 cv
cp
.27451 .207843 .145098 rgb
f
807.834 39.8911 mo
807.834 39.8911 810.549 29.8677 813.834 33.3252 cv
817.119 36.7788 818.771 39.8799 823.688 41.875 cv
828.623 43.8662 832.08 46.9678 833.926 52.4277 cv
835.748 57.8911 845.053 65.7139 853.996 67.8926 cv
853.996 67.8926 844.152 68.4478 836.664 61.5361 cv
829.186 54.6289 827.709 47.5112 822.057 44.2373 cv
816.398 40.9712 811.279 33.8726 807.834 39.8911 cv
cp
f
766.381 186.438 mo
766.381 186.438 782.221 238.277 771.42 276.438 cv
771.42 276.438 780.781 249.077 779.34 222.438 cv
777.9 195.797 782.221 189.317 779.34 195.078 cv
772.92 207.921 773.58 190.757 766.381 186.438 cv
cp
f
gsave
66.1807 271.397 mo
61.2534 267.366 57.541 259.157 68.3408 262.757 cv
79.1406 266.357 100.741 278.237 133.501 293.718 cv
166.261 309.198 219.507 329.909 246.886 338.274 cv
274.261 346.638 279.661 351.317 270.301 352.757 cv
260.941 354.198 163.021 350.598 66.1807 271.397 cv
cp
clp
69.7358 256.667 mo
69.7358 256.667 63.2896 263.681 59.5132 278.459 cv
59.5132 278.459 58.4331 265.941 69.7358 256.667 cv
cp
f
72.6157 258.591 mo
72.6157 258.591 66.1694 265.604 62.3936 280.382 cv
62.3936 280.382 61.3135 267.865 72.6157 258.591 cv
cp
f
76.2158 260.751 mo
76.2158 260.751 69.7695 267.764 65.9932 282.542 cv
65.9932 282.542 64.9131 270.024 76.2158 260.751 cv
cp
f
82.1445 260.121 mo
82.1445 260.121 73.3359 268.607 68.2285 286.524 cv
68.2285 286.524 68.2207 271.642 82.1445 260.121 cv
cp
f
85.9883 261.802 mo
85.9883 261.802 77.1758 270.292 72.0684 288.205 cv
72.0684 288.205 72.0645 273.321 85.9883 261.802 cv
cp
f
89.5884 263.962 mo
89.5884 263.962 80.7759 272.451 75.6685 290.365 cv
75.6685 290.365 75.6646 275.481 89.5884 263.962 cv
cp
f
89.896 269.147 mo
89.896 269.147 83.4497 276.163 79.6733 290.938 cv
79.6733 290.938 78.5933 278.425 89.896 269.147 cv
cp
f
93.2559 270.831 mo
93.2559 270.831 87.3872 277.21 83.5732 290.632 cv
83.3857 291.276 83.2061 291.94 83.0332 292.622 cv
83.0332 292.622 81.9531 280.104 93.2559 270.831 cv
cp
f
100.028 269.722 mo
100.028 269.722 91.2158 278.212 86.1084 296.125 cv
86.1084 296.125 86.1045 281.241 100.028 269.722 cv
cp
f
103.628 271.882 mo
103.628 271.882 94.8159 280.371 89.7085 298.285 cv
89.7085 298.285 89.7046 283.401 103.628 271.882 cv
cp
f
103.936 277.067 mo
103.936 277.067 97.4897 284.084 93.7134 298.858 cv
93.7134 298.858 92.6333 286.345 103.936 277.067 cv
cp
f
107.296 278.751 mo
107.296 278.751 100.846 285.764 97.0732 300.542 cv
97.0732 300.542 95.9932 288.024 107.296 278.751 cv
cp
f
114.068 276.921 mo
114.068 276.921 105.256 285.411 100.148 303.325 cv
100.148 303.325 100.145 288.441 114.068 276.921 cv
cp
f
117.668 279.081 mo
117.668 279.081 108.856 287.571 103.749 305.485 cv
103.749 305.485 103.745 290.601 117.668 279.081 cv
cp
f
117.976 284.268 mo
117.976 284.268 111.53 291.284 107.753 306.059 cv
107.753 306.059 106.673 293.545 117.976 284.268 cv
cp
f
121.336 285.951 mo
121.336 285.951 114.886 292.964 111.113 307.743 cv
111.113 307.743 110.033 295.226 121.336 285.951 cv
cp
f
127.749 284.841 mo
127.749 284.841 118.936 293.331 113.828 311.245 cv
113.828 311.245 113.825 296.361 127.749 284.841 cv
cp
f
131.348 287.001 mo
131.348 287.001 122.536 295.491 117.428 313.405 cv
117.428 313.405 117.425 298.521 131.348 287.001 cv
cp
f
131.656 292.188 mo
131.656 292.188 125.209 299.204 121.433 313.979 cv
121.433 313.979 120.354 301.465 131.656 292.188 cv
cp
f
135.016 293.871 mo
135.016 293.871 128.566 300.884 124.793 315.663 cv
124.793 315.663 123.713 303.146 135.016 293.871 cv
cp
f
141.788 291.321 mo
141.788 291.321 132.976 299.812 127.868 317.726 cv
127.868 317.726 127.865 302.841 141.788 291.321 cv
cp
f
145.388 293.481 mo
145.388 293.481 136.576 301.972 131.468 319.886 cv
131.468 319.886 131.464 305.001 145.388 293.481 cv
cp
f
145.696 298.667 mo
145.696 298.667 139.25 305.684 135.473 320.459 cv
135.473 320.459 134.394 307.944 145.696 298.667 cv
cp
f
149.056 300.351 mo
149.056 300.351 142.606 307.364 138.833 322.143 cv
138.833 322.143 137.753 309.625 149.056 300.351 cv
cp
f
155.468 298.161 mo
155.468 298.161 146.656 306.651 141.548 324.565 cv
141.548 324.565 141.544 309.681 155.468 298.161 cv
cp
f
159.068 300.321 mo
159.068 300.321 150.256 308.812 145.148 326.726 cv
145.148 326.726 145.145 311.841 159.068 300.321 cv
cp
f
159.376 305.507 mo
159.376 305.507 152.93 312.524 149.153 327.299 cv
149.153 327.299 148.073 314.785 159.376 305.507 cv
cp
f
162.736 307.191 mo
162.736 307.191 156.286 314.204 152.513 328.982 cv
152.513 328.982 151.433 316.465 162.736 307.191 cv
cp
f
169.868 304.642 mo
169.868 304.642 161.056 313.132 155.948 331.045 cv
155.948 331.045 155.944 316.161 169.868 304.642 cv
cp
f
173.468 306.802 mo
173.468 306.802 164.656 315.292 159.548 333.205 cv
159.548 333.205 159.544 318.321 173.468 306.802 cv
cp
f
173.776 311.987 mo
173.776 311.987 167.33 319.004 163.553 333.778 cv
163.553 333.778 162.473 321.265 173.776 311.987 cv
cp
f
177.136 313.671 mo
177.136 313.671 170.686 320.684 166.913 335.462 cv
166.913 335.462 165.833 322.944 177.136 313.671 cv
cp
f
183.548 311.481 mo
183.548 311.481 174.736 319.972 169.628 337.886 cv
169.628 337.886 169.625 323.001 183.548 311.481 cv
cp
f
187.148 313.642 mo
187.148 313.642 178.336 322.132 173.229 340.045 cv
173.229 340.045 173.225 325.161 187.148 313.642 cv
cp
f
187.456 318.827 mo
187.456 318.827 181.01 325.844 177.233 340.618 cv
177.233 340.618 176.153 328.104 187.456 318.827 cv
cp
f
190.816 320.511 mo
190.816 320.511 184.366 327.524 180.593 342.303 cv
180.593 342.303 179.513 329.785 190.816 320.511 cv
cp
f
199.418 315.261 mo
199.418 315.261 190.208 323.306 184.216 340.944 cv
184.216 340.944 184.947 326.08 199.418 315.261 cv
cp
f
202.906 317.598 mo
202.906 317.598 193.696 325.642 187.711 343.281 cv
187.711 343.281 188.435 328.413 202.906 317.598 cv
cp
f
202.966 322.795 mo
202.966 322.795 196.178 329.481 191.678 344.05 cv
191.678 344.05 191.221 331.495 202.966 322.795 cv
cp
f
206.232 324.64 mo
206.232 324.64 199.448 331.326 194.948 345.896 cv
194.948 345.896 194.487 333.34 206.232 324.64 cv
cp
f
213.818 320.661 mo
213.818 320.661 204.608 328.705 198.616 346.345 cv
198.616 346.345 199.347 331.479 213.818 320.661 cv
cp
f
217.306 322.997 mo
217.306 322.997 208.096 331.042 202.111 348.681 cv
202.111 348.681 202.834 333.813 217.306 322.997 cv
cp
f
217.366 328.194 mo
217.366 328.194 210.578 334.882 206.078 349.45 cv
206.078 349.45 205.621 336.896 217.366 328.194 cv
cp
f
220.632 330.04 mo
220.632 330.04 213.848 336.726 209.348 351.295 cv
209.348 351.295 208.887 338.74 220.632 330.04 cv
cp
f
228.218 326.062 mo
228.218 326.062 219.008 334.104 213.016 351.745 cv
213.016 351.745 213.747 336.88 228.218 326.062 cv
cp
f
231.706 328.397 mo
231.706 328.397 222.496 336.441 216.511 354.081 cv
216.511 354.081 217.234 339.212 231.706 328.397 cv
cp
f
231.766 333.595 mo
231.766 333.595 224.979 340.281 220.479 354.851 cv
220.479 354.851 220.021 342.295 231.766 333.595 cv
cp
f
235.032 335.44 mo
235.032 335.44 228.249 342.126 223.749 356.694 cv
223.749 356.694 223.287 344.14 235.032 335.44 cv
cp
f
243.338 330.741 mo
243.338 330.741 234.128 338.785 228.136 356.425 cv
228.136 356.425 228.867 341.56 243.338 330.741 cv
cp
f
246.826 333.077 mo
246.826 333.077 237.616 341.121 231.631 358.761 cv
231.631 358.761 232.354 343.893 246.826 333.077 cv
cp
f
246.886 338.274 mo
246.886 338.274 240.098 344.962 235.598 359.53 cv
235.598 359.53 235.141 346.976 246.886 338.274 cv
cp
f
250.152 340.12 mo
250.152 340.12 243.368 346.806 238.868 361.375 cv
238.868 361.375 238.407 348.819 250.152 340.12 cv
cp
f
258.458 335.781 mo
258.458 335.781 249.249 343.825 243.256 361.465 cv
243.256 361.465 243.987 346.601 258.458 335.781 cv
cp
f
261.946 338.118 mo
261.946 338.118 252.736 346.161 246.751 363.802 cv
246.751 363.802 247.475 348.933 261.946 338.118 cv
cp
f
262.006 343.315 mo
262.006 343.315 255.218 350.001 250.718 364.569 cv
250.718 364.569 250.261 352.015 262.006 343.315 cv
cp
f
265.272 345.16 mo
265.272 345.16 258.488 351.847 253.988 366.419 cv
253.988 366.419 253.527 353.86 265.272 345.16 cv
cp
f
273.578 340.101 mo
273.578 340.101 264.368 348.146 258.376 365.788 cv
258.376 365.788 259.107 350.92 273.578 340.101 cv
cp
f
277.066 342.438 mo
277.066 342.438 267.856 350.481 261.871 368.118 cv
261.871 368.118 262.595 353.253 277.066 342.438 cv
cp
f
277.126 347.636 mo
277.126 347.636 270.338 354.321 265.838 368.894 cv
265.838 368.894 265.381 356.335 277.126 347.636 cv
cp
f
280.392 349.479 mo
280.392 349.479 273.608 356.167 269.108 370.739 cv
269.108 370.739 268.647 358.181 280.392 349.479 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\753\745\752\761\745\751 \717\756\757\756\742) ()
%%Title: (vintage_banana_bw.eps)
%%CreationDate: 3/12/2016 12:32 AM
%AI9_DataStream
%Gb",KBj2OucM%/2>hAlYB.!_MhA7:@2MQkf!WfT&6B'`NK,<Mn1H?PKhu;o,WnU`f2^e=OB)KkoAtZ,(X&LQc-)p=gbLTkI@]=[>
%Xo5qrdV[T.l)s3G%*R1"L1*)lr9)qM(SubWd5NcHlC-%oe"14B.pCX^*"VMkBufrV]UZ#;>*Yc7goo<:6)1\^/(a'GQ.3gWHo8=$
%5GQ!S;]gX4\b9)S>L"$;kafr+ICrQ0#@"T^-/VBVBoO4'a8GM_#/*G*n?[GT>qM:F`F,=p%uT*VqKmkpiZ@\ELI&7<R+#,Z@!(m#
%gPO-H9&kC:4s'o?V+.e_DjG.g0+TcoZgGh(%ti'<r.0A1*;X<!rg:h3VtjB(.G1HMUZfb\_\>?eVY2Y4Uqpt0oHBe*dF:DOS*i]U
%_LIkor-s&qs%iFC8=:o"^9bSH_`%uAi+OR_VEZ$b"hj@,Gd>+UJqcc]jg(Cp#/%[)VJ0a+V>Iu&s69A3*)>fEXPdh_g,+3g9];m,
%MjE7EduL3N[k0s?qi6!!bmD54;Xi:1l:$df#'I?3R<nJ/oNtd(S\E,D;L^Z>Q%SqfC8n2`0=1&hRdAU_5rj>4!4L$qXE#\Zptoi)
%;8.Jp1l7Q7jVF.m-07R&H/5LejF7>@9ga>>mkUg_e_W$\b6ILJW>bskD>M3<\kbQfNn%GrfBHD`&1h2h63u=gYu^b?P^E)O=fJtF
%@cndsYEt,`:3DP\-i`0DUqMfgq;M>fU,;7L1T6&(d#I(Fh)6N^]A5i%FgG9,W)^&'fH'^l`9gRY#j'd.qJ5sErYpE%?)i2>KB(Q@
%HD+:Ai'754>5mY)n!@8Na63,!lZ0U`>5R>E$^kJk,Y7=cS*./VK5.[]0VtA_Y:4aNT'hhlL(Dc/dcJ@i+:is%:28lgUCmUoHkQCJ
%"Op:3?_D\?p.i=,"kp!bl9Y<F_cE`S,QY:`o%0ph<LIj?eMp>FeS=1O8Mrd3.@NA=XLp>H+,L3BI=V;V]tcStj`9UeT"dB@(#n/l
%r&so'(%3LF/8`(Hd"]KRdXP'_ha@lYi)P]Q\GK(L-i2_fNpgAL:.nS"kUG@JD9CH[Q`qK.LZeJ+4N>IENfcp&-Tt,B5R25se'71(
%TNo+q=FfU,Sj)p5?b]:A[EA;[^7O=K7'KfLmH7'poggT^econ3PN;(pN6BC3AYuWP*tR6l-Te44*V_Vj3OM2gIG!A$:$R^fcBSa`
%<r)Tq+b*Zi/c8m'=6Ydh[!),j8ZN_jkZsp6R<h$R4/Qt'.MqD:Pt)[ja4iH$k`>L?o,#u9rj\WWH^K,,80CK3Fq+880=TGu?WRZ8
%jsr3=55e-YRFWhbSR;eS:MpMM'IB-b?_q6'4MaG8\ETU/Gu-O`D^LiG3,hdEWNd>gi?Sl)gF7&b[VQUNY\Wm,Asq=9cBL!.o>g^s
%l'7,4Aq`NDaY9;ERFl?+:WPDm(4tMPOLKsB,6C&k#utbrbu1leQ0d_%:4pU'"\ceD?)&c)3FhicWiaEMTpbqKBMtCR-`5>?RQZ%%
%-i$69<=aPcLfKZ&kaq=.RN/cfnB'457]W%I5D0+P$Ce)8ed(.r>iGuY_h:Jac@[Q1O[Xg94D^0kIFn)8>!9]r["hD6b78<iH6IMc
%^0^r4G1HN&FBWh@G>5&_PrS-%LGA>t_TlYDh8ofSAP?41jY\$/a5j%n<p-X@<(p`gb"^W$k-!K]\oQBWPrl,2ad+TpY*BoHB5RpD
%\HFHFK?d_RR*+3NS,75I?Z,;Tc$d.501W?O2K"%(QY[;`ma##pae)3_R@3U.aOA685D/OcH+mDXCOUAjaF8"`Mn.bYM3Aej\HSPA
%-Yiae>C-JEs%0bDQ):!YX8.%TeS(3<ea1hmRr5hufs4:7GL]Ga)aSP\.f:WS9rhYP-8C:5'=<OXbTVg#<;_+&H[Us#CaO@O))_l.
%q$L@OnCRKdIS6$Yr)HK))cYjp>I.#:#]!ZLKtZ&;r&'E'.mZ3dUK'P'(P9Ok4rL8@%A0"XO^MM&R&tDC^/:phRe^]]e`qWq@e8'3
%:N5pob??d5ecaa2bc&FaN-_&u1n+,7Kq2lm;]_uA2NfZ3IhPN9^D"(2p1pL>F!k*=@VL4'*3--PU[3`'1jX&pO[*@`@;bE/j"n8Y
%Yi]PhE_Mr*aOa)0o1IA'Ee$&HOs#;ZHBEm"/r]%dK:-6[k2bZd_!\_BC7\^Pd&24#=%.,?k$UneqVIa[noC_OKpakj6!hHRq:@(9
%=`f8!'61e4I[fDMmKW?j!0j!FCF?[>\=)Y;<\3B95,4"e,YH+EqTrAs3D=_V9\8H!5$-!@dRcY&R\Ge$>-4<s#Jkm'*(SlX4JlQo
%*Qr>(U`uA&<kY(XQ<Hl42B4\Z5P(bJA0mV\bda!2emlYh@r1jNXaYPUhK9-`TIFtMk$i/l`Rmlr?=PJ$Rb#$nL"FhU`7477"=G]U
%ZSe%e65"*t'q(<r5/UO-o>::U.Z@/b5<=FNnHfWG)(geC,j(t1HR:K>B17.oREV`\Sf)HCE)eA\Vhe*:"[C]4pRAG4'<K7@D"@dn
%\^!+*?<MEQglR@diul1Si5U&V=q/W05rg>=Mh(K819((\&ffb7It%@"9N^'18rZJK^k3"aG4V%VWH'J6!ghj/E$d]<p.[cN^*!$N
%+,<XZIn\iVKEJ,UYYVs49b>10*E>1P#(ts!EH:Nt+<`Jqnh!ERjt&Fi8Ao":^ZuP$De<Y6-^`+P:JWuFR&4q..[Q?1+I+<f9jFOn
%4/6c2=e]3!`_C1tq=7ng?O<SsH`3@9-erPoE`,iA'25<kUu@>mRb0G0R,54rL3IKTF%Ds6:[>D\Oq#aT-8gj1_!^"Ig#S(1;R?!O
%M*oc63iQ7^CXj\/.MQ'OepsilY"<aET%(-iV.u)f:fgQ9QOC;^28QZR6ROaj"K#kqRY;i5c''!YCu+,!l<32KV+MqD>8e:^2k_t\
%%IaB*2_#K[])e<J8QKA&_ADf;P\H$$hWRXt,TX.%0GW[R?auFncqV4Q]LfX^8L?5DWb9=m;%ctd1QmZ:1Ud*Rb!elWRAnM$8L1A!
%\L@&SP^c*Ub]?XYbh!_qJ9!Ge;%a3/WE6Jd.2O;PA7ifTT')j?=k6N6Mirn:VLI.SUg0-0PF7\A5KZon=j3j:[$K=r?'AO:fl!CJ
%.)Ti7'!p2[@WiMrXB8./K,`@U0XH1tisn#g,7\h?UAh`d]mc,4@qVXecPRU2:K4Q)YKP-pY$FQ#3HM`S,NW*\Fe-^`\QlalEc&-X
%:ZgfnIhi(sieC%4\[=>^CB%bB2E03)Uf<i<C3-BJYEWdm-UPie38^;cOsD0dn")&Ue,eKT)dRq4\as[&J->I\1uCc.4S,beKP/'l
%G>R-LkC4M5\2nRa>o0l4SKRB!LjtL7os/)oN68n]:oRaRdpV%FAR\TKJ^%Ek,g.tGh-9N9^1q=1h55[;.JhpOrCm5sV*Cbn:gS@F
%=q"/!eZ5mYm:*uV+Q(Bh>.fm#PFC4<l,sJmI;)r\mE>!UbuE/Y@91C_YiEp6R7@4,CH0/7lV4pjn0HCMj"ln;T56Rg`\dZ$fg%L_
%r$W_<:&D(He1-fm#+;?8XT[80cckglp5.FE.a9=i#WBQmRRnriYEt^@Q(XOU9kI!9,RE^A,[ms9$2-,F15DoNJ\'uO:2UOJ_NG^:
%c*M0qqK1'BW^Ft43EWV^<b=rshP?0ifCWJMF\6Zi%jJ0uX##qJ1p?P@TE!49q<s,DoZb^3VhLK#kJ(*BA:FM>5Q;`H7rSNGBWDGN
%b5BJ-Ic`_`=l%F\h]$jga8F/j2XQX`q3g\&`3n`?^-hh!q3g^LLpU8F4`)LU7:^$(8`CU^I44)V:bLB!)Es:(l0Q&S"-s>YJsp(F
%]e<('f1X80LC(-tkScV'ZVios;6,kh>tqW*qVIU,?^nk)C"6#$LJ#-kh89okV.ij5o*F#36M=3sQQ't[Xf/_ZZ[*0^=36s><_LtP
%l)_>iZW&F[c..,:>clQJeLStAk+T,,k\M;$Rto9M-C)@XT#]/(DCk$YK%#hZInQ&-o;W0A]9X`_3@V[`&kjZ$dr,PfJK85J*2^iC
%f\P2r`gURY8l#;V*OWdtP3m0YaJa(r'M*T$DcTb!=dq?1dddpYm1W).82)d;Yh'/ioY303/#TW-r;2YYeS@m`rQ77l1(V%A"#'\/
%^l&Q+8Dlp*@6"6A&%p*g0D!!&4Rb*:]Z^I21D+j\%u<m&dRjI$J.ujgE?TA$*1iRY+PjOs'A&*fbp-`)O;7VqX.u4ES+rm#"AF0K
%M'R/0p1=t0)J73_:&Ir<G:_?Q9ZUa_mcR5E`i*NI5pjo;Sh%jlEh%>_RXO9Wn&.%'at^F^R2N\_P<(C'e%>Y3.E>RRDncLKcFYaS
%].Zm9:&d*,QO_@5`S+[o^3XE-,u]E`;tI$eM;(&NX3.'1$CR6e:Bu*o:/;fp'<=q?M@$c9ba?ic0(UV@\4r7o:%K@-da_WEpj;"I
%IZJdAhrk1?0>$R_3Wmj>1,nm3m(%mpj#j\[h7bh<6^-`?$*(=BP=VFprgqmjFA#7\M8)[%6qMrEgr(OL-CN)'O=VP,)E9I(p0STU
%(i]rJ=gY?%GoU;u4O&-k@k%rGGoU>jiu$V^Lgq]u_`Wr6jdL?6a-]m^5*'3titsQba8#CRB[(q!N67XXT:OR)KkA's\lMFdo.08=
%V+1Z;6FGC"bu1le<HtFbo>J/6;E7V%J(NmU9eK"qQti\-7uR4"dB#A6:MNd23^I,?PC+V-WWtal6+)fmT^E[^WOWa5S6In>8L0+&
%c&B]/A26)Lm,+a26T;52cOFU6USSXZ0%6mJ0e$j9Y+ADS[7ZUQ_S[]XPBl&YH/G9?hk2\u.Z&`Q05MRaY/&@\X+&JH'<Pn'.!Xd`
%T-Q1mVqoag[g*f.NkJ;@dNj)u;kEEBA.$eWm%rO6A?SCbR4!?("<FB!.%tL6*+)_2s"B6\22@T2oAbM#krDL0OSLV`V[;)%4\ifd
%\p9]iF'igrI(<cm2YZ>\ZWlSKgt\BgHZO7HDXPc/f:,E@7G`-)DOqn->Q.lZNW_0%cR"t/gmsqHF)uPCm`s)5\[af2YcQ^^LG%7*
%VVS)TDj!b[BJOXqDVA@,pU+2pXI`4^eo/,aQb\cUiH>Vgk@0;<2.W*6l&9r[NQY_!pQ_,+9ld$+9$I0Bp@X]<+HtV$iAI&.)3Y@r
%QcY>Q>Bs:Fb5&onC.]Pt0(Xcpo@HU/87A:hX.1G-Xi=(mmh/qj4>ZOZiI#6K)f:/rAo\^D\EIO&cC14YPIs&64!JR$?3nd!;VfiQ
%oX)`L)rfWu^5$]?6pU=4-)Z1gs)jp3K"A%$B3u^UTfVAdqnf/kQh]:C_a6PL/_r:1MJ&bfFJDlR2"Of*`7O+>p:`8\fd00iC:*9(
%q*L0bdCP)\e4J,d%<OB,@IjFM<Eb5STV@R4>%SN^,ApmFRE!S[)Hd5TqCUYd7*!pdRnpR-Mh7L1a+-hC7"f.#Nm]CuCMnalcZLiN
%SJd@RVV=E:J52Y99.4?'CR@HeY=rb]$$8grmH3;m[;'Z_$+=3/)b&4c'[:Kh\P4n#O[HO3BA+cFE?Y6qhQ8t#p?(&[o3aL-l$B=S
%?3q7P17p"PO?aIc,[mqcA%LiB<QCK03LEb4.U649VJ?\<FK`S^M'H;IYU1rMDbbn"\^]E\Q`bGBAl1i@5Mqn[a1641[nrZ>jd9Qg
%e#j[S.$hDaS0hf&f8ESq%fZoZj"*Z]kEcWQX3i^E=ZAM/0ifi;OsB*PHtKF7c],Tsm3_R<]ifQq%rL/ZDbMu:8RBLP\--XeAjV7<
%.8BaSpJ^]pph]cH,]YRY3"%f`lG^\_HFkmSlY2*M"BR&>%bb^I/LG@YPE23-B?+BC2p"3>o0"kK(Yb=uFS9TmETqKFhdYl?ALrnP
%>K.q4rsUiS\8f'%f.b^O?A]og%N0FH[^N_&,Fndf#:5RR;j1Jc4Hnq"oet8mabBp%P&l8%Y(qIaf05]/orV,?K(4n9>N'2n,g#>s
%7!-jJ,rgV;$,9+OId@t9@;3$tWYQ(V;N0BV-;1s"/ToOqm.m0r-I$0!bnk!FM'e"^Mh@2NUO'Z.3)+FW_A)S=N=1/>cV0f7X&I;/
%`b0M@7WHU6o^P^.$`CXKb2p0ho=s_/H&C^.;CokA_)3l3\sM+$[H#MH0tIdMT@nI2r45qb-RdciAm%:C#%scIk?n5`cg/dSq&NiA
%QDleRdAjcDN:NuPql@lSJQimF<=VO5-Ida1BUAW*U;&p)n^OQSgG_,ECn0Z]eW^Kq;Y33qc=8_D.K6`mB"i5(rR[3[/Xp[C$=0:(
%f.MZk0,a[\H*=@T0D3BlU.MJ4&/8mP@Sl.#b!8CaN_H5Z^]+"hQ?l+eIA^_-V6&0alLPfD<W%LKG(@?TIu=:;Sk'H[/TcN#(l#a6
%N_)Cjce"Yke&mu/C2jM.##BdnFO.`n0S9kZgCUMWI./[FC=Qdoe@]N#h(OhF+gBD075t9\dqqkr<RT:ac\FWS,\ICrQQ[RJ9NAq\
%>H=#f$Z@!#k0K^3="N3M2RtP@U3ANq%LOfG,(C$i_s<GtTBUWm/=eGbiqKZV\Lb5/n!0sY/kS4>VjW!kIW-lCa+$h@clMu![<16D
%&%_!D[Z)@;h0+2F_7'9kLWjlX<Y$(6b=9'T`Cbk!;hp5JY,h9fje198A8:uhR#>bUR__qm/<f8VC:<<Q&&+q<:5J/Ok5te4B\)ue
%m)qaCbD6+LSDA\ij$3DEqHp[j:@us"l-(.Lg9k,_F-\!LUP^DiJH'lhX)_)g"4[A:1`Lb4?M+JUFKSYX<J"sAQZ!M+gcKs)4odCt
%f.J;8*ctN*0n6pkhP@uM`VE;\):;Ng1(<Ul%lEYA*A?3O2NE:Ll]'Gg<]po3+,38,,&A1R^Wns@aJp6Jqp;inX`+j\mCC6(KL;*'
%@Y,u(.]u/ZSpO4BM.[<Nk%gP_Jr+X\+!jk`5#DO\:A9d4OeRN5E2&ncA>L[!#hKk".mK5U"cSu^L;uCaX[]WtR0)n;<YetTjC*^-
%LXJ@[cDgi^^,[1)1AO`+F0i;qj7KN(i9qPFjGe2ZE-&t-mWr3no.29^p`RYE#L%O.N]:P=CJ)ORDS&s'eMVj?]S<;C$PlYr0@.+A
%>)kUb>)DYVB11H4LJNAFQL1J2h&O_"a_h`(9KMSSTDSib0Z%tobYDnIZ8HfWe)juMF>j&]KTYMKBkkj!QBuVG`:p6,LL!42DCY.S
%"O2=V%'C0bj8V"mGD[kbP)/9^7a(+iGCsA(<Cn26NEWlhi`$M_bdO[PU9G'Z:T_gi<ghSqW!;qEIQ_?IbuBJif=*]n;W0B<%/o-5
%@U.#6/pd7oj0I8&*LAFG_B!$!RNbo)ZBPhFOEsm)Q0[hJB!tX+<jS)Qa>]PR^%C3T(Mm^<:L3*9BdSg;V,_E2YIBo&6h9p48M+:&
%VV8L<F9*NtKiCcP<6=[6[@4)$HED<MG\i3bSo4h4'?"WYB\fetTGGra?f);2kKst\`K%@k,YIs!]iO`f:`/bdA)!l/jYTmsi>$@#
%d4qe\Pb?3I*BblcR\_3*0;@i1TP*p?@Xd(9%.EJt7OJC-a'K-m4c7Jm7CYK[moi1mrqaq`FVOc09PkP<c2:/4>\a7Q0=h5=^P-k%
%e[&<U/4f0[/gE!R_^0\:Y+=Xs#JjuPh!!b=kj)F;1tmV:Ep8aKKbO5?+aZ[sKR:[T:TWlI3]"eHc_/X\.FP]r>f&_p1RI'BCHmIJ
%-/uIp)")Q.hT/cfV%i=PHoTLH+th[^lKFsse(a'(6,ufRRt!@YjHAr,[<-&IhaM.(X&Ud-P^Gt4BWC^ViQr*C96>a:Y*^O&giBA4
%UmeZf4gG78TgU!lH.0oGYu<a#c_*CRFs5?>+/DB;][*_D<pk`/q*i"hoA-A\nmr*["qQMK"esCtCf'$7FcGedq[kr!Hoa[L0g.=]
%@n>I9I._-dES0.#Wuu<WLoL^Y^*B^s@MgPW`I!ILLL!m+Xr;K5?@oU><^R(rTUslm59'_nNTgU&CeEZPIb_BT*e1AaUe+NNOSA#+
%hJnmhj[j]g"[*^qNb_ma/l-.Z?9B5*h)b(4]b(7^q@J`Nc[<9nE*+Ll)aid&NpN:fC*Y!C!;EdBZ<]VqV)in);Zg*:D4-P:<EYWe
%*4(;F$8]XDZ_WWu2]sq9PgDP&;J>W';5930M6tKM9?U(9/]444o>M>1ID/lab'TemQFD%QXI6Z4`>YTAXX'b^fK(H)AFojooFHu>
%_OVC)EQLd!j0)05GqB'E3[KF7<l=g2^On;@M:3U,ao?MT(P>3AXIAVWVBFSQZuC:n:S66<*Vke:J+\ifq_CW4J:#(l`h9&r"G]Ut
%\'q2dpKdc77o7%.oX',0a=d47+W$Zs8eb2O^J_U'.G`:6ZedW&glVX/mm(C`2*6qV,8-&HF*4DulUIos;RrC%e;Al5Y8>ZqqH8+u
%ibD;7;PIr.%cc9[#hmXV56mn.UFs`D?N[f,"r4.tJL%'X9epc7D^C]0cRKaq7[/9U?kA_M6#kPM6G7P&!:SBO1L2PUY>4GW7dD=g
%Ri1t*7_7Alc,C,P.7$?1_RYf3#%r3`T7]WKC=OZ'4:`?0etEWGc$hD"1CtAN#PF`WGfL;H<E]hMIBpJ+f\`%[5,TN@&6t7sf[GZ1
%AYD"u6t6c3GXSg%9Ek.&3+PgKbsLK)<=8n_"-:T+X&2]&^p'L6\PVOT+q&><L[!=ci.U_UR?,>:T*pGCp\+W7R/1N%0e3<E=g+B^
%b.Wg\cQG!>Jl:[s`!qU*]b;.<)lVhBAES.A%a6k,9$KtW&8tsX%'%@Hlra'VgP&U"'Chb^k[J49:QcGu(h?'n3/6[[+,0fU4=,G@
%YLW[-G1^;[Z1U0%*5I=9bB!S;J\k4c#Dm\kPX-&0?#_!bMF_;Rm9%[8@qhp2V.P)9dtSkn>;2AE%2amaqE#a$GXEct%#0bBGGN@j
%<>>enSE0!q5pU;_*\t&mjIZo=aLXl#CR<-Jf=UF6@Dh1h+H/s!3PLZ[?Sm'_:GBA>H%Nl'QmWa-L&"a6[ogAGT@U"E2_Ssc$=lJ5
%aD-pU$^s6$X;r8Jd00,++i@VWgsEAqnd*B6`)3j*^^r_,Jj70F;>1Q\<T9a^P`s^4%/;et$OPQ&._c21_=krRo6aq&Tpo\!NI[P!
%/:JVHY!`JI"$%:P[N2ucMIY1BX]u@g/*ln;qqsE%jj;Ib\KB'=*\N2JE?.NcJ?bG0kj<CJ3>Rs6V(dX]&8mPf(D5`FPU[q.LC:+q
%A:(?fp@i*>k?]7sou[!3c/'K+ab8\9K0@frKSR#3:;5-"W:85YXtP[qpB%tN=!Qb=_s]h6rsX'b8P5?2+O_"UMF&;r+lgITAA/H[
%$ofu3J@Y+2[Z8`[Atps)?BqP0!W3VF`Vit][D/`)gXYiF<Q[7Jo;Guqm#k=shru'"F!)Z&GXW+#;!1`63WH[*;R+j`r_P4\1eSH0
%Gs0e8%mRES>8.`3C7g>$p)o5KmEkA%Yj9(XDZ#U3s5;S/"TDaK;i1)pgM"E[.s7Bol*9M'I,g=$eY'HA$M+6S9/Lpq9X;5#E"sfa
%l8[-0r78[DSL`Q*C;"He]U23[Tn@nYL2W/PFEHB>S5f*VnfU(3_dWGMEbSpg,Q&+RY+="V=F3#nef;=^AAZ3p,h09W`pM^?0(OR(
%die2;KlFJ!"qMp"@5D7BP/'_@E[X!Rg<SMbldA=*i^!EaGr[S&e$XJ-D=`/efqQrbd$QdR-Nb\aCn)[W-Dg?RMY7T2:E$4Ic@]l3
%OoL7YSZep!bN7;BIZJo8>!3%-.$\`/O-sJEKQL+0.lsb-Vhg$-R/Yp'pUUA)WjP`kAU:ab9a-WSoG+#B5gN70=K9Mjr+YiOV%e>;
%!`123VOB@B.Kl^`T8)E*jh/8#$Y]c48RcKrd;QB!k<O:(Rc>6,)jl"UI?0\UXL(so[#In]O_RlL:uR\R_Xd!E;MBG]EgSrC`>1tO
%6(WQOHq:la%o1uHK"hpc53U@.=7Cs`==]RlZ84R5T))f1c<)/:i^=:-Dq/V<g;8?il5(K<U>rVUqpf56*J:dYDjCiU/fMD9mi$b_
%*b@TdQXceNfit`,;Y]6hX]fM0"5C$l1FKT&K+-l&.1ARDICs]F/X'hZ8/o3`>&(Z4"6\EUrq*,=>`2TC3SH1H,"boRKh:MK9.?.=
%OQa=4e%O=F_\AM4TjBh&2g=i-K)4E#R-k\U.RUVS0*0BoIN64aKl\GW&C26G>FqU@-P%B/$H)7GJYYt+j(!=_aRq5]@M-Ph,i,P@
%`UQ:cUp<9nDD+_cpFpjDorrrDq=(dUh$5.t/ED,V;cg9G'b$Yc9F\I/LEbIe1LhYZ.>_]6Li^WdVftOfDa`kATf]<Oh,qrI'=ln3
%VWg<kRKR5t_iIC$K3p<Z?I7-sOA?_,D[aN3?Z$Y%FXu-a;[k[g#Mg6$:7\.Anos,=Z9;/[QQ"\2\Kk:HToLKa.aTM;m?1#CG%Dn*
%L"W]Jp\m2=f,JTSR^WmK6k`Ite'&ml[ZgK#-T6M/3W*&sVHo8-N.*Z(J@aDqbp8t,l`lK#b;pTWo$sF]UCB:VmDQ&H&lrhMWf*J!
%Z[kW(SQ!$.cPV'lCZ(5dc8IM*BK9mlB%J;`NRiGJP(XnjDGokJ@SaTWNu:+%`#Um_NkU74]["[cf@`W*&'i'na1)o&G&^NhjZWn1
%Ep^'(S'FR=l1?"u`Piu^n`m2"%C+'u62;(fbYFt(Tu9+]]#o%Q_8rdiN%KLhl365M%*d_oUhS-_EK3F?6Clf;_ksO.9mNtFT_3_A
%W-Z&sM6u+W&*'I$_Uj.n&)R!U[4/+_PDP7T)%>@1`jHC6q@FR\7"nep&k1bNflm$4Kbc\>7qAdWSTXk9G*:S>TN`Yk&^,Zo/VRe`
%k&=gWgTts3\ehmpdlm$MhYkcYC[[lX=Nu=tH>26n>L'D'T3'<>cDn?[DV\K"Gd(&fV]0iN[kBY14"KW8T0M/>SuqAWq-\E[hC?$>
%S&VUT:UdDeRb#Q.c^cY%GLop2VB;qD/R:9c)m>4@oU5C&SQkc+eB;Itm)>Hboee6ZgaG=2>0*Ph&'k$c[8Zuo+*;R.pK$'Fc^VK6
%?aA7\jeYYI[aW<6+#_F]T/q1"><2$;qs=(JKD5#+go:#<,So*>f0=E8^%qS=k%H"<mcq!!Na)=b^36dSAUUD;Xt8_$m^9J=Sek2e
%1JG!SDrdMO:;=GcZfUlNLR$?TH#r$$rM4X7jP0W<6/VLC^@pp0HN?N*2`ACAIBCmmpOD84Mqb_HbMN!*RD\,J<C,V3^=]1+ptll'
%$_%=sc,.K2FhG;O\S'c+be@E[[^a'Ai9f)bd!G?Vh9.nCX+`n>!^Dqc2c"YCjjUg73:GEkGJC8E^:l.1bP.Sk=KX=VfuiY$hZ&-5
%4Bu6AH#D&CSCMgjehbjnK?E2;h:9P`jj,;#f6uF62)FpB[_@!kU.6=6\X/;"6ok!-i4_.Xi_!qFELmqKhgMf7]G+o"mX@Uen8[XJ
%qSr6_SbJUH^5\.U\a@_gSYtmFmH`cc]Ahugj5eK%LAS?(O/DR!H#s;7o%A<W]W$K^:U:iJSRod5mts2qroMFCmW!^Crmn3j:N_')
%_&pBH'HTT5d8"Rt>Pu\(e#bM#e(X]D=#,57C%IfZ1Hl`3`5*P&`MZKjQ]0_+ZR6+,q^60[`UC"FnnLW2'>2#[*I``4AR@nTHtf@K
%00D81W5.D*p8r0!R)tm,)UBttPOlJL3QcbWbagqHoj]eMIrI@4S@j:1n)+$32RBlTh9VW5Q@>q8pp+p0T?17YO,epeT:Fo=c!u1l
%?.Sk6g"XYtIt,+.qX-IP4g!L$gY+W8U_=30IWO=t@]fSpn*ij/<G$14dAsD)_r<2?:.T0R!apTAAbs[2ZZl3e18Un/QX=)_C>R5U
%]kk.R-eC`@%SDD4nY(C^"Ed6sBQ""/__s^on!t?Ret2!1XZtE3k(C'[CKigYO[i'&fp_rKGJ1SEgUXiQ@L2in4)_Kn:7+a'WF#!T
%cQ'^LR;^Xl03>o*/Y'OIB=,(A:WC;a?e5FEDMgEU"$bFA\:=<nj4lZ)fNd3'DmfD+p;+cf$_,&Y+rGHnG$!ch:%$<ENO/6$L:^W6
%H]W53)=Mq(@K/dl>o3"bcSq2W:AhV5nLoJq)t]QBd;ErdK[!F[QehI^&Vi"Mm25TqUO,V&B@G4dkLON8q_\&V*q#@r[rV0iA+AgT
%Ds4CUSf5kSE4WHFZe_^h]_@Ft:Ki8<DMc,sHi3:%;>,@C=NQl0mqS8co+-$O`iI&a^ua]VmBs3AJ(adj3B00O5d,UHT61oncB[U@
%Qof`c_BF;Bk9:NthgK_]8p'pHX"R!*f)"'`&!6PCE[TH6qomfAKgtgHqjE)3cXlQlH$PCG>?`c=1[P4NQeGX:@c=W"[J!j4kRdEZ
%%Na^na[3S86ZhYJ8S`D+acH15c-u8c0_@]\4X1)^_nH0.\&Hnb`[T$u_At_=\&t=!LYlEUW5&1sDsM0l2UXGCgH1Q'486)XVq,kM
%Y]XKas2os;e*'A7]j=gO02'm,;'19mHa^C\FUq6n(A*foD_pPS>B`$Bg)Kn[NLb4ioMg25>^rIO-S*O8V1jnAdBfb<2s<'bU&5bB
%Ag%sLpeCb<3SZ@Gi3,r;p$`>.Ga9(XRC2-.f3Z`C(rr7$2_ej&#NODUI3q97Mc$\4JE/N]?oO&;#lU[K)ll((kj1*#d=a<7$%7P@
%.WYetmf&.#,<T1AB^O,"N*[uf8G@RuIuWA,L7a</kEf4(J1'oh9hc\T#RV`UB<,qp+ri@0UX-%7/0@ueHaR>6pO?;(Ss9RG,;4US
%D;[Mg-<2unT('DH^G<1[e'DNc=HB*!e)AIo8FoUh8GR#pYJM5T"BVkKQ+V[a441^pr";XUrW="KT3b<(]"EY^MEGV!)M@eDkh<@S
%,8raC7-g6iP@^R0`j9Q)2PNtTC\N4A#Ien!(qRCk>tb(%c+H.[`5ol5RFMS^rCDkQX7@?!.DTo+:[Z%m_c1881?=PGihR_n0&!)P
%@n'UeBJ1g^a]KTDT)N\iJ!)+n6l:@MlVk8epaC4UmT"CFrBYBjI__r1WB^;SQ*f`-cITJ\O"4GD*i5R]0JtMj!1*):4d3K[It-YK
%fgb5lnbQkVil?JpD&kNhh;#d!h<D:8(>lI1")k<rj'bo.B?LgXM+tLprUA.Add-JEZodUB*\@(*kH0A4\Q>t`A36]R4Us4Pe_K$X
%iRdo4N8*oL7IU6",.eU@YI3rkg@D_T>45f?hgY?g*7]8"Rt[]6a'!&s=RL,[p$Be'/pOc!U2=qU!VNb[[qVV=ZTl.:%e$RLZ69/^
%%^9<sWh#%#ed(,c7B\;p*q(0JR/pbNTZEG.5Q-W6P/)-I"6qh9QNWmQBF[Lj\r=afA)65iJ%]NB0O?bFJ"bHPmC`m=2LTh<AIGtA
%W]$dpkBO5G*I:sDrli'u3Y1E^%o9KLeiuCA^:F!7aeghhL)WL[:03.[s/GT>S_O/3k1c,QirS/=--0%m\F7R%8"%'"YDDR[RgP4b
%0tGHi&<]5"S4CsjGb-KKB:mj9T[1"$K76dP^"i4;HNEN?2er\K'^2Hkk4?dN-bd@*C;'%i]5rZ:Zh?WjS*-3Wo(jQDIeH,^*'Dt3
%f&,?TPrj?b-m3hA=@7ZB`i"_V)s;_-=s8icO$a]XP,8P`+U,.f]8PaKm%7J/7Tk<"n25Q$4Ls#A6cATM9!M:FYZ*9f4D?1T[C5mD
%3eH@/IJra#cIQU8L$`U0o.-F%f@&KqT09Zfo.p2TJ"<sea3&1OC?sonba[4>n)0@aIsD"L<+N/ffA);8ahG3)R4^^Blim'R:P[]2
%kNeoB1jp_1bcUParVWe*ZMXV=Ipl?([e^FCi.cF?DesUthn.+HaBG^IVD#W"h!/'ucX/L-lDs%1%nG33F=AHkg?-h0rV"DN>E9gX
%=X:T8P680kXHL.Uf\/B8Gj?>j2:pGT^/ikC^KJ4aEkZd#,&QOnB6Na*eU=-O(X'@UogdmRVtKZ+Xj*b!1tp&Wd#r6U_o^\HQ,k\L
%@6<.Ya!h73isnbeNQGD+SSjZ1-&9AKbF]<PQ^^2tH9`g5#'@Y/F,Q9.\;a3<C0m0NaGTEAJk*'<nDesRoBN)WPdPo0l?+g_XS>F3
%$SL3]GQ+"rgN[^.Pga[?f$gu/$maR#re\<$I(LIK;SC_4S1UWLF96bjAQsgO,N!nIf))aur:SoZ6N?E'qN(!pKh-og8)-TifXZ?i
%LuE8>#G#_'4T8=F[VT&pIqBL(WUQH7(f9Yth93]RI4dnC201S+r47)m9GYf$AC'MXc,-4KB?"-EhiK76mtlIc^2Mk2?[MM?IVubq
%qOFtNI7S#-4PE$C*#pQInT]NOq%ku:Tbm$c#)jst-]`?'T6D?m!]f0^,cfN,j3[O\mb^1_3kf\8A+#RPQ7[H-QZ=_q*\O\=e!:&O
%?C]i`+O9IpYFaT64HK<<7;DLgZ+9YN3UP=?=Kfp.m+:oSGFQk@dlXq\B=FDncIN"5g-/+^GQ$pF/T(CVo/-[r;Rme!h>MeK\l*kD
%As[>IV9E!.j,6EIPNs-"0@FK6^XPII3G?pS8+,][l<_eue_oc2$]_j$]KTOOD(a@&kp.Tm4`b:TI<f.55'ha!h]lRYa%LUpUg&#g
%`OpKYI!EBqHK3hf*X5JS+8&j1ae\oU5V'PIUVgnITX6OQpcWLXi:E/"F\'tNIH<Fa[XPkkbE[;<[XkLqo';iN\^SH7[>iW%]/K2g
%[?mjVh6+^O'!DahDm*3OoQO(Ql^>GObua53fum-s>iE-"Y[1]1>EI4t)>?eoFmdcZp3?1-d(J7';ZD+B_%G?%?U&.;kBi7TZu21d
%X=4)@cSkWQf!F`R<dFP[1#od^^W:44AR,7cmE+DDl'hmAZq(X[mu'83)jr?l>8um@#;>L/dC1q2j,6V/ONaKglgKkBo36"@Ad:@B
%Qg`^9?[3``Xa?E-@h*(iI"m$_8%`0H9DdmDk:6142jC`5jk\)=;tp(qkaNZd<^0'SAWkQuC`p[rL3VeVrUkB48$*9Z:S!iS>l(,'
%]Y<t5qaH;%:B*@qDJrN6eBq!tDgu<M`Q_FS+*K6PKC\'oi9Rk6gk"!IOV`AHgl&@q7W.I$CNJn%h0X's,<u1K<q`-=rClhF2Q=$@
%:M`:ul3em0XF"Kq*Bh]=*nA@Se4qM7>B.:FjkKBR>IRq@fC+*(k"]^bF:@('Udr`Pic+,!f#Hr1Zb;>brrs6kMt!j9?<_V<HnT2g
%I;tj*rq'M^G),NWjL4RG;^6n+]!\bJHk-JS:IpBS\R=eT*/W6UgII3_M9JHt%m@P=qOWYBkMJ(BHIa?[r7T'cg=+5,SXVCANp*D#
%isnCjNMTFre$mn?`a4,e"sQEqq$`<n<53;g8$P\Op=;u]ZX?l!e'%!21%]dRE=[9&BH9;)B53j`Ke#>Se:6Rc"_3+B.d_%`GL7\l
%H?B0fU+P-=rG$2Pg&P"*?>Iu45,r3Oj4W!&@]aS&B&R7UcE4jkr"0EFWkm&'KU\Q_>VG^=@q]m65'ctgAI!cW%=Q?ah=\DHBrD,2
%#:C2QUD?8<_92?5>!8<iB<5S:`Bu4]/mj(nnaeh%X[AAGCn><U%m'*)"k&MtABO]JB,Yu5fV<!fC-0\qdb^$oBL#k1,.+uS%=dO>
%B&U2iKfko1orUsWi'jgQo&I^*%_L2jVj7/Rah.T@Zq[>5X'h:TpL]j1*1n*VBWSr*>hj\182U7U4D<O!?.t@CmaA#BdW(nVcU;,i
%^V3b*HIur)pHgsSH37V0s4DS0l$m1HZhUota_qPZLec1ZahjO&+5t&KIU'IjZDMHoE7EHYq6<9gdj_K4+3lc#hXa2M#O0E9$SRk(
%D<PmgNR_FuIYDB^n?DN5:Oc?r]OV?IX:TK3c;qqH\NK3)&1i8p]ue#3,I"&IT!j5sY99u2b!#0;,<B=Hc9[]TL[H7I0n-X?[=1Th
%Ib6\2%VK:,4_(>l]S'SMU%\a/.;QP`_khKZS$PW8Y0Se_DAHEbO#,X5qDM#9Vh`Ab5?3?;F\s\Nn(rM=kIJns?>Q-]0&D<jG'eZ)
%NVPI+lIFVUkhN`C2:uVIq>6ZIX'a_H7I%Tie;U4G"VU[(/k?GD?=j\ipA6J)SH#hMGkg6@maXso\Go=t1/>E88HAX[gnWn1'k+_l
%3u^t9B=;l.D5m2@aa*aCd3cCqO+(oID&!a`7^=KV;k\G619I6tNrAj5:Y+@V3DN$d9YP>QLW.sc9_HT@?^KLZd?S1GE3s*8+73^a
%bPKWX&"c$bBl0<lG5P-j]`*6*gA:N>FcHlj#OFQ)=-npu?B!/5fD(da=cq1RbO90<h_&H>-YJE0c?4^9C/e:cG3!L^_0ngsmFN-$
%nDcYEEGo%J^FE!*T/h5`*js,Q?`\b7TugBmGD/%Cl#6#^B3f83N4/HVZ6PIRoZB@"43B]94YEffI=.=)GY?eAGJAgan?.c;UoUF9
%/s%je2T`t](,C6??JsW3lm!oeFQ)lS2X-+Wo4n8Qm5nS.a.(uTD/K-WdcT-lkANrc/:WTrs35i$p\DE62EP,m?3u#F@<8ib=`>G9
%g"hDo95\nLbp#79]j^7dA..aA4WpoAqe:-IUN`$3hOD\//5Z2SFI"r02'+bB?KIeB+V/mM]WX3+qh#KF7l\7d4^#=?P5A/RGc-2M
%,!bMoP7FTt"iG_oEP>aac>An,hY3B<RdoOd4'N)rZ6%S/s3jlJK*5HlF=34`-2=G4k/l#Jh%l2[TDet'i^JtSh-i#!PL&2(p7tEb
%fH$Seg!"sC^6GT\]=#EHD;gD(:%;lajfMI`NF3%iq!75=hMVJKjhogdRSC#_Ce%qo,r].F#S=oQHUqN=ZSTnqXPEW7-u6ruNu'a!
%(Ob"cMbCFDNZ+C@V_8>*g\[=]rO88gn+p\ciCO]#0+cT.J'At((Ri/1s.6[jn%*T+EnnT=11Aop^J[%D^.1$uf@t/L'1@$pK8rFB
%BMb*_NI7V8kt1UtoI,b<Zl2l1drBkGccpb0E;(DW@/SDlIihbHa_cjF\iWbb)(F05iJpA'O-[*AE9H;Cs"%j[_phGHEssktB&%e^
%DmseeQ.3\@hkkQjK8#cJ0o^W$p#Z7/a1*LZmq_jjf,t$,L&WfM6`+]6s2UHjlDBI]>fUmoQ[Z/Y4X;X[1t;JcL5+FtE=&FPCVDag
%g/;5B]`uomgpH+1?HUVO4`)$rPH*QGiMB9)a(*pPfVXk\*T'EBRVC/*b=ZP6Tr:%*IG&cQHKOI+=7bfYJR3OO05Xeq4k=b:OEQ!i
%C7/ej12V>LqJ"23%6W+fQKd@rD582i\)_\\93W1GUcWnVUoDd=dnQ=/VW4).eifXtd7^WPdPJbXo/oBH-^7>$UG^Oa_S[Zb\moDf
%drG^=_Ofn(i9Q,cehiF7C$8%?oitd/2k77WHO`1sXL)l4plaU6/H[+)U5\4QVG'O%>f+oCXgG'1Y*qGGB?4REmJ+DRTl/TY/V'X2
%fH(WjT)!*X`S:osL[F?klaEAXLd^mfZI>--"*m_Z2t8rBAEXe8GNl:L(="$HHFg"FkLjS$2AK,M7ZWBaZo#?V,=%PjMs4\VI%McX
%\C$91FdIPs4k%A[-`n7%?71sHcd@Ff)C+_!,[J[QB0%cKmE"URS(9<(H>9@+%s)rC1[Y$@2kLl'"5uCp@h\$6h<92f+M@*0%M@C3
%A&kM/F>9">a`.d/$Eg?A6A19V=ku!bQEQ\$f8)>fNFf#A2'!348K=JjTVb0ek$og%%h&HTCGrGi7b"6c#sI9?n<ZU$eh,./[C1l:
%1=GZZ-a8gFQq"FTZt>e$32.2%D40tE"38j5\FNVnjkHY`q3kCmcf_KVC#9K-e$9Om>k!M<KQXNT%$PAhHPX&ZCSlCM/WCOt[fDPP
%ok]EJAe:.;RWr$A$.,ZA2BU>po$n6BLs>1P8I0#oBSco>Kl6P8U]HjZ:@n.$:kgkS8KS$[-760<Ch8Ogk1MdZ6Ys\g^ooP`njiiN
%Bl8eMq3Gm?1Yqa!D*l=^/9KT=N[F*fO$/pE7M<S0@H24![B@k56@=ThN%e&J,o2cTC&Lc\k/[+XHJK&qUq')W=gh*Zf`4UU?Sg6,
%=[Z^n#Ifo\9RA*U\pBh6XX/P\ciRYO//N=B<-KAZLo0>%Gi>)W+LrhtmMK\7CGrGXND7;MRP(oI;;G;H%]W`@<aKbJ$tBp>OR8.(
%NIosiFs5j\fVQ1JR'a1V=`B"TU^<4n,#4m^K'u8+'B=>M4\4r/Ep=EkdBST86d6hqGb5OS'#3^Vm%uAgN:[e2gp(NeF<B:ggE(#a
%!tIQeYd8#.2L(8r6^XGiO%nHG:n"NNj5W>jG2%PcNR9<LqWV#FF((IjTT*?%hS5K'AdY?P%r,C@-^=mQ?%$:.GRlVS976(cJsT82
%>dPG)L?4"U1^!U\Lm&sZ!PHPr/X&mss/At[D*r6'JgD2kTgUGuQkM63DeOlG,hYWd__VAD(<=A0[LN$7<?qXn1$l8U6Zdo4\B'RL
%&cF6rqDp2[[(kfj@Rbu]]E)0Q8rM9@[(t0:bm=j1K7o[BZ5iaK=5UH#Q58d;;?\=,nKHU+[KEroTVb+;\V-a"+#bA7ARCWJ+fXIZ
%fXF<%OEr$hC4!*]N@&LYRP'$;Aro'YXfl&TYue_21ee&4Gi2Uce70a;j:4!*4B`m=jNo%W>g$$^gfDV7nd@L:(Q5/".H0NsI:86E
%i-;PeM#JS7%,6mR6B?so-L3kLS'8f%U4&Ib`3B@5"9Dn]X-Hq_4jI;":CU_9;VP`2kh)_n`^C4@-&o.5=aJGP>+nb9@[![.74)a4
%)aVeTiX*L<dA^Xh_'Y&D5ZG<m"<ptjNeX6^dd-N6C/np:jcCm"),!o8%A&UK7nSkD'l+!3WKFa2H5@cbQ3qlbIO><`M**XH<an6,
%IY^%eO(0,$M\/2#`-GAH42`]B9F#0?LCoPS#bM6X"]@,/#WYfKL'SAH9YieYIfg%=6krj4U-9]dC_M`q6BfU:=m@HHjMEUG<@.&U
%dtm]L5a",pU+I+dV[G%WhMt@<po/t&W=LD^3K=n!Gb/#naRp^k+[uIiG6A3sn/J))n,J\-!J'&?-_U3P#o!I1>9\b?_#03h+TT8%
%<p956'.a.Q>G;9$IRCX7"F`kRJ:PB\@))iY,@^']?g7Gp?c)$+KhN3l+_=.1o!;tE)DGuAD+R@IN%=63PFs\a6h1]FG'8hp*[E2o
%g#UVeh*[5T'O9'EKUD=p'26]+Or',]"\_aWa2)mTQ265RCd]m'Hs?=;22CoZ(=-T48)-W&Q7%-d:=E(+MZr"%"cFuC%6^Hs.BhAM
%K^j^2c4s-CVFq,t]F5`a@nB*roYlC$b8NIhKT7XX$[fnODo9ih4VbQD53CK"#m0Z->n0dU[_]8-p85`n2rYFXlRM-l4%!.F0^C=a
%@=87^9GM4(=cHc5[=gQs6@/m3J6"F>a7=P?FRcRn:aRGA3J^%OWot$m3[XgNb=s%d=t^mH7sme0kXpfu]\-OP,Mb_V`Y+&`"#JrH
%PM3@rm3+EBA1'*i7j!?7!Z;BfL8Y-]ZYkVh?jf=!3\dDK/#JG:2GJ.K7inq4KB2%jdYo#=P'i9BHBdks`F^F,%W*HL!1$D#X)]59
%UI>BH;i!IUGuu,+!"p'S9T$)CO6bHb[`*XI8'f%C=,],iOcU0'^m9dQ"bnNNaRY'F"VcR/$T5ljPO?$g*grZ(8UiEQ*l9'9T>)K1
%c[Xa1Jl*_H#,+]PKr7<LGR2`Tj"-d5_cAJ5Irn,SPBg\RSqnH3=*C&Cr\Yf\TMeIL#R6Ybp-6sIj$b.Ng"4.2S!SjTQ]VpIE_%FT
%[roW^Ld^7W3@\EiXU``$3;F3N,IXn*E.,rp`bKM5PE:d6UdW/Zh]X5ZT9PFrg$b#CI%'^uYA1FB]781l9bkRpab8cc*qLd/'N21I
%/fI&c(8@.MP'q/jq3ETplFMe.P";L)@#Ni01rY!MJh9R6ZKC28:\0jMN,R'&>=GK=>YT*UI+)/dS%_I+V_3]4D0+>V/>[_5G)YV4
%a'If_@`^J5"HTC`$6bVd:=@M@//<%X*)@i!>=;#PdgZm9/6M^_:0[!+8uG>KK2eRuU59<f=T:).8QlH]BMD'!Z5_.\:&<02+9*M\
%%p2o]pF_Q<QLGd6q$9_]ra8MlJq#hA/c_iEUAq*+32/7OaG8^VHdZ?[!7l_`/,93maC$=S,3[3F>sHiT1>!apU_Br,lOe!pLcB`L
%A1%cA?lE'jSi@pA%`6;mZEt4f(U6JfhdIN4o3,D@I\<H*>6iof3FO@48^KpDS<%X)KU,.S*F"5Y#>!\*C<nn":([bl"N9>NNZ;o.
%j:B;D*CT=\U`^;59`dDnG'Q=A/l61X%RRq%XcOk</O&+`jG55hjJ['QG6`$Hn2n>J7k,@r7Uda5(8#"IqJ%2afl3&#U4P8-;e[Wt
%_%n+Pog9`[hM1S4E'?S]\Ynq/M8ltQn[Pa4@f,J[,@PM"@th<3/qFb*l2<;+NjU15JD<n_#JM9h%:@X_nH9m'QB1Pe0/QYes8H!3
%&rC'V[(Y/Ikm'7iZlM/d@rIe!U;S-&&jp.LB[Y2UGid'7-h!SET-h:;i9`#?;.iVlZ)c=YFl[eb2)j&oQQNb!(Ai6%$tY9,6?n];
%o_9;?+WN9FhW-WL]F6&_$t%;(qk/rbmhXB<X=&c>'nHc<e2X6Z6:ZsBR%s39/r;A[GfR.UP6MU4&mUd`mPpT/-9._DMDXs*hb\nD
%HVn#sXLZ:N!bb8_cZP(i$q!$l*%*S2.7d$m?dD7:I8EFlpY-1I\tomW8Gqc<XH*LVZME_M)Dd"SL-\cTBB/>'K0aTPkoW="`2>HG
%2JsVdOfNgafh&4&$hRF=m8m8CKQ@he_89iVn[*8),(SgDMYa,M8T<B-9)-Up%d9:ZDcu?>=i6r,(Ju8/FAJIbb3?Y#&OqeW_O(0o
%VL`75.(EopXjmYu%(;JJd2^*r>pg=E`!PKZGp4h^K-LjIg%UNPgk!r-d$]#]Q-M[Vd^1]W.Lta2WD?3*EnjFmO'!YeGT'ESY4t(R
%GQ?]4(U+D"iFRZH!?#>no/R<2>toE[+4O/O+)95eJ-HLf/Ob+.>772NS\jn6Dd/s#bTBk&01(t`-RsZ%/'eY&Pocma-9iB$]"tX&
%3*N#UV-c(16]`>LL7=!1Ba>W_hU`>r1h7Lm@.?o&O`q6XIim0;PMacP"&I2jH,5g#Zm=aMc?n!$g&o*Gn2<TfW]>)roM```'W:ho
%8h5^K3bIsCe3`?")$eHTV/1Am=_L-N9iBU<9[@f__eR-ZIM`J@n(X.=%:9p84V$b]Bm@S&Nc>O!,7Ddc"P&(e#\>>1g@;]ur,[ma
%\g1K:9bN(L*>kBR/:B*4M*`tUc8rNYl=f_U,JS#N?KI[o""mD=d57?tm73Kf\N9+J[[B"+77,Zp5E"D#EN.s0rBNltr2p^q>/=G6
%%(0et9a/+aGPIPc;sDrR"*9j<V'HR'KPU2IoHcI<#BJ%Y:YX3<I?gjFd^RaH*6HSOgrMS-q:HF;ZHA9V,f\/M0#Z=$>n&]ScB>UX
%kbq'KHqc`):1+MN+:?i:QmsZVCkEC^@(2WaJNKLl$JHb.bjb8?1-!5"%s?+GpVYHsjNBRi=]H/-4jHIG>YX=8\i;s;'+ik+8;'s?
%*D"YCC$608M1[j(nj?@q//V)ll7&hCROYI+@[Q1JAuPJ)?k5.N"`:R92)u.5DAu7II\>_t4t"#^S=W5/]'a5]Yo1*gbiWI6OH9\X
%+Wj[.*5PEP*JiZ*Lc$g']7D)@%*0$EhUO0BAum.X'8h0.(tLBgU<_^+cG9*9faTt[!fCJ!ATg'URmsC\gjYo+-9\_u05I[f?n7,1
%*hlD_)mg1eg0D.p^+bh5\>.cmjOMrc_0.+V1_/fLWNX3-ABAH9P-nUn1mLTAV_)S0&8L5ZJ58*EjfSmG`*G9nO4kj*/WK;gK0!o@
%qs*Ad-a,^M0qJRbhr];[A=b"\7sC*0U3<Pf<+dpEEV/SeJMm"iIH1OL5ohiYOU]7n0hBVVI(,h@Wl1`f;eA<W&so,SU]NX1aHCng
%B/M`Fh$8&G`&D@^MO)XqTd\4g3CUMMD3GX7FP#&CPX-O+,2<n@iJ<LMbqWSN%>k6KC>,.:XM@\aVAitd$JLT-bg.R)9EuqGXrE6k
%jKIh,JJ]I10`XTQI5kCb5fZQG6t82F$m4O]r//A9@Qt[8&C!XY<qD$G@%M()lF6KiB#.Ik0gLN>_BR\Z51nl^-:bT,=,S.QBTk<T
%fh--d*+*hOS0ofKE"+hri;Fd\.?*nI(-DI[7uMO4nPL-sZ[b</!iT3u,aI?l%I%4(+0$O8MnNA+_E!pcp+LI.$oLrBaY?%N9mkr0
%.2L@QpU9<tKm&^&8`H?UlNh?H51$'!kQj*\d`=sfX[WD,U9#C3@#gZK2GR3HW#&l59c[o"TTW$LnTb2SNi.TO3+VqX$4K]4700Q"
%b>?O$fguV%OV=@'5mMEKM0<-C,']mNb3+F#T36cm2O.nbm2lL$>]rSISDthC2$W-/Bi"Gr8Jk)),C<0@#@EY:#WHdt;2mu-nC?qQ
%[ft6D.DSekY7SQVA%(i]3GQ^3\qm#We1&/7oG#^%[NJ+_SI[/l:Id;lcN@m%=t&julZ0d2irNu?otqb*l,d>b9dd$0_6qT(Kc@(=
%R=teZlCgn2-Up=>AKtf<c(IZIF^7ljid_N0"dp[FQ^mcj<JDp^;B57n'\=#5.RR&Xa_u0mS>hN4_*lH)+KS/1MWp10S&U#sI[EL-
%G"AVns"j%6K6$lZpK^V2da]VU0]W?f=VZ2dn[1"8@ELKnBfMV#8g@2(WMe``Ngf>uA3@(eK@^gk3Qq^Jh&pp3<Ze62*m2u+G,::^
%D:g#Ti4rLV$b7USEt\Xu.,G5uqu8JBICMum&r_nqUjKhEL)[!AUQUeHRnX`"Z6$05F7Cf'U^Al@LGbM`n4$,s*u0egp_0sX;=__Z
%;b)F,#s,4@V*0>kHV[bbF4;qTa'gk`P(cOKd';$4`AC%BWu6@b=6VZZ:,=n3$INDA7FDqh08@ZD<Xk=Bb"_EaUH>?A$(!Ke5ooIs
%@(/]?T9"%eOrAp2lCqQ5nfr4k@Ep6a=NU]]ieH]r"^j"%p-g[X;/$HgnT)@!dKc*Pn*#COnh&=03SI*(=eH1i1ubUi;S0ajhc49>
%,%GkV4CR!!4W4EEeC<)e3HLoJE1W/II*YbH%GH$?K[R@OJSX854i/aV)N$jacP$=tHG!)Q:rc7XK264CHYhYA6I`Nj'XQ^+A<Ne1
%/I]*=Bid`O$`7u)$dN=C!BOuTUDB;>]mU:M1:ikJT#HL?g89Po]dP)J/8hJH3G\sZIq^/Ga'bJUQt%JVM$&7Y48>I@"7Wg$S[Ye\
%ZT&m>RiG,S*F"s[@7Sld9u=3@>P`o2Re0E@_TYOk%M-oL>F1k,&pKqQ?p%5O$4pg/OI:rfa>'rrHGE$]6r1cf*Ad4_n7Ari6YHnm
%[5*`GkfcQePG>1S>$D\lM_[/4+sEf6Ca*9,%dW8+W1t\(nih2KCR^-PD.RFUJH?pS&2FG+mutcCUr7tt_spaXKni,+86"UNFMhU`
%ZleM!WK1F;T:k.qT'%Sk%oWXSAipHT,oL`nFN`.kisMB4l\GA+VIAe\45CEieC4_M==di>o\h3`90:\^3.]E?0A*Tp)$i(?&2&/Y
%`AAuE0j%W5>hA5:idd&WqPa/_Ubr/#4=k&!HZ5o7?Y7,3Lq8X$T-HfNB@u`"LpLoaKdT\%]>VN*2=6P'VjT"<T,YfVetsES&Mf)?
%,,"d0qGFKaj][s*OaUegZ<jgC==OgGpk[h:&?_pg(Ob_:&[IU]-9,hRUWj'*IF%s(TQTfe-hM2cKQDF;L\O1Ecr$tL0a`-X@B>jd
%"`7dEn4MUabLN#ZVufGeNEO6m9nbJC2]f:fBdqXF1"uqUbhE-n$76_2"pthK&OP-[m+_(f/6c$le+<NWCY6dHpN8VUp/(JHpgtuc
%lDVg#gQ1['\Y;b.&*$J5_L7#<pZNMsgVOkjNIYM!9dLAIA0%ut'/elm32I_^R*![>0$Lo6?&<@I1isHT+l$$g1]9__>=*dkQsZEJ
%qD\f0g#YZ*Y\lu(1L3gI9R^e<Y)h`=7&I-(b?WldZLgEsee[BpO^di:Y^,GU@8g9U":%)$iohZul?LG>CZphsr[C%0;Ajjam_5l:
%_$QstM.j1)LbXa/^_K70$_YX9>_##2UF*^XP/:@T\=p578Z*M*Pi[ZYZ)q1[Yt57;>+pq>7Th*5eSiAk*Ad5.:Ki2:#>JF!nXp)X
%lZdXmL(r%19opb*'L.B(-dTnlB$=S1%+J.<+16/"[j4<*N[Danb8ZN00!s4cD-NMH_e,LUh@.XeE0-m>qM#sWNBX"F-9dS%&<1.-
%@;3HLAq?!^8oH1Ha@.!pUPmSg2rl.:6=0e"N!@O7la.c!W/2&QY_>i,8B-NR`oW?g&CM5-!AP8]#CWr=3$$/"bHP*fb"6[`e1m/Z
%f\!E57m;b"0U[WmdU7H.'m"=Q.L?-DdZBFNi&Hl_^uA])])"[PRe2mnkKWW"SbruZX2FJVV4SN,YZU*bi?Ompr"W/<\mVnmSO/8[
%Zu"Z.:CP`-P9.boL*Dgu.A%E*Q*9OdS@!::1l]tsK_/[^$8%&_>)[1!/;QKWUS^2kVnCr\')*VZXMNn*Y95p!O)+PZKk2H#[;;,4
%%lTTV-d9n</pe\e0pA3[hp^D#S%4E-YjPsA"#W&uS;^sX)I5F`i:+!-8QK+fYJQ$B0Lni`GcR,_n24RcFDh*?OAR-bQ^3<G;IH7g
%>]8@+Z,VZWCsl9q\UL2]VS&g)mF]A=reiOi0\%(VPA@cj%6tpPR4;@$B*!4>CC`--DV,U-Fk"?"_R))BQ)<ZoXZi1OMNi3?cAY)X
%0P`2+2T!SS79UPdKN2E!.<lBAZ-o2r7-Y[%5]`_1/Ka<5VQ8J\@X+/\N#n/AB/qI5OcS!,bAbX-mc<%+FL5#F&"m#9hB*^tU6J"!
%5bSq5jcKnnNGpaF:GXK)KXhZp@nhls.$L@"fpq3Q#B@t@-[$g0A7$&<Xu+,eV@cu:U&2m0NjO;$_+@t6RKJm_$M+hPE9kU_W1t\&
%b4VR@--gKmKf83B*HmQqJ]T0+\6G!"O?.uN,sg9#j.0i(1,9'tR#-mq+#F7un"FL<Z.1C=krIJ<^4tmO1'5RCp\?dS8lI^7<k:;!
%_PY6HK`+_;9mi1L8gM_=UC:MT`[$Lc+fQg1ih!=lJk"ldj3;Fd39ib-oGhb>gCJGNjQG+%0]G5j]6>"c&aG[qWbW5Ej8('oF*#u\
%K^6q45Rj'rSeoXR2losucr!^`0"0_Y>7a/t25:U.aqoYM:M"Eeb9DUb-?NuK=eE;l@=I"',S&t(C%#``9t5B[?5Up48OtnmQ-)[<
%3]QC3NQT`>gsE(NNNa&#+6oe]O%.IZ3lW=6`sT:,ZFIj*7@6l>oY?@#W=JNYA`ubU+>;!tTS%t[;Vn_X:rc7Ye2hh._=0bYh94:*
%'Lu)21NqD:O=`?-P#H!e!S)0.<%Q?rOhMpsW(HGHrJY__BM*a[k&ODU%o"@YF5aRrC13cA+X?rj,tt.(/KjqaNg]Mn^Z@#e6i*3c
%rMB*ljB[U9*H#&@np`[nJ[`o*=.TV:nL`R[%;^lel\@N1ntXj'X\#%[\LNWc9MUaSD-4'%FmaJAl,#<D1,?[=%P'4Bc&@$M^Y93<
%]VO0,^5q)G*!f`2+3k<(/;s6TGp$R-U0S-EnXau%>[k]o5b+%-+gQ?U/eWRt7nn4ROBRg>i'jnhDBEA(*(:tY%$MWW,/t`kDJmiM
%3MtRP7l!_'HVO?IoKsWTnI[20;eM.I=<);ld>jiG\2/"<N(.\O,`W7Vo%-<KTkfOG.>_A#c:&`";,\S8DY]Ngf,"H-7N7>,jRa>S
%J_[2rS3\pC>fHH7Ebj's7\.,)DV0HF+6])KDhZ=H<f)`eI%H%E\@o"8b(1m;;iYT8j`<o'g:_#cCR1k<!Z1i$%*VSthF8/HDC:9m
%%Gb))eg6`%Lg+O`C)>Q=Nq@0s>K:k4+buA:]N7+$e'Wl@m>6:j@j\qMKZRLjN(1f/:P1Kb.HVLBK-RVUoU*N9CbC&omGVb%5uZ'e
%i!B5F)O);9US^5aT]Yl7qLTLVW'k,o^=n*C%PFoLgHs]b/0[K:gD'5PAZ"FP_D+<r9RJ,KEh4/:B\X\s)f9=jG`o8bP*mQn%je+]
%W>-m)LR&'uTjaur8a,LG3bm@^O^6f7,S"4;d55rH1gT3XM[i0C>bCVE&6XgBV1H?X%dsX5#tg9BI\>_t4^(b+#nI*8Sn)%]ZPZ6>
%@"QNA)?sG:&Z;M;AqXfJ$S[h>W(U<2%+#U8*dc8M"YfiT?'Fb.2`-l0M`s'i7]U?X9-.maI78Q(@u^1C)G<m`;;k!r0gNcQHX(tD
%*hBL_N-H,:G;EN9d7[cG!M@78cUPbR+BfHR1g1`:cnoY'g]qu/eF1M0iP(l%5Q9\rce`dA^#KU)$!a$T`i57QD:&bP%$^0:\>"g)
%!A=5No*nCKE_HhFfKn&_N,%eY`[;0]<o8cYc+'cCROt:FhVfkB0!mC0<AjM^[NrrVda%Sle\p54G]P"D(2#A/Nc=8GYJW:N..uWk
%Te!^MX("$;Qb/dQjP/)crb(t&ZgK@BjQT4GAnd+1*;BQBI\'Njj2Au;rLM@16B`l<oIfZn<#k9pgCh,^N=62MhC.<DLkm[;h6]i2
%n:E"ZjlVJU9XM0h$NX(UU*B8bM6MZ5;s0$+gt#u8qghSYX5Wut0_q_"%enti:?G=s*S$7DbE]VdWp(Eq1MN=3m7Rj$YqcN:0SlgD
%"eSiU]<$B(K$DmUl+SoaBITaF%U\+%+SCt9!t@g^Hl53Le;"XiYRT2=P7m_IlD]]18&!c/gS'DAgU>8mAYEs%>fVoD026b3PC,)a
%c+.IU*QZ-iC6H>A)X;K+Fn5UU5igE,(Hm:i$LC`-U/Rji<p(NG./h`I,?OLqqEaWt"*b$d:f&':oiEiln<OD4R`5MnQ>3iu'R-:4
%O>Q^]gLMrfY3-0&pg+1b[^O\Viu0STM1O`4krY`LS#<UT;\<9AN8a7dm\>uso00-i\]b@mn=4iZ@1EbT\<AU%Qoq?G16pP\&K@to
%_T]t.Y.4I*3kjk2[n_0V)^hcXAJrQ2f=?JGH;8d7YpUZB)L>FC8V^XeRbC0s8TjesdCjXKa-@m\&XJ(0Ug4@H4Q(r83_bsl?/###
%b5,Gs#XRQQdSP&e>TD80)N`$J,$EkCp#*RLC2<>'^C_7A]4%=&?Oq'Jd7q_%As_1nmBD'El?,+=`'VB4;K5N'NOOmR;4b?[JQ#lC
%#`tV9ET:.T-JtAMHNm2/]UHXd_^]1B7\Z^sW?g_<&dNO.BKN'o!;Xn[DV?7Iqk>rN;;.mh!uH$>SZet&1t8,A97SN'R+D3Y7u]>T
%<BS"C!e!:UeQ'e8<23A]`fsdUEc2B\He.:R!Q!Jk<M\:D/>D-sNZ;t=Q,^/,U4k_hL)9#mf55\g>s;?NDPGp.4RDWiqHPXD`\!>.
%5VEW4W:;2Ud,Y6UZm4&-YYs;4:A.ZAD(4>]jeoQZ6eA05T(2N5Y^`sRY54!-3bl<iW,'TD(7LJ+9:\#0A@A=\BtN`4@%WTg0Vr'X
%(5bB4rTB!5k"2"L*70hCm7?([bN!an%qH.6dYOHXO1=I[QY]EWQ><A"b3I@c;O:CfjJ%htW$B<o?(.mjP2=[B<RD`:3[=?oqPZB`
%jH3Fq=cHkZRippgfWfFTM^/!6W$B@;PPZHT-o2hh"$PG)C[/dYbV-V-q<A$$5MB\rY%0!Q"_[*IY(!%=7N9$KOd%@O/8TH^Wa^)O
%0^bntq%d19?13[:8'(s5<[[--Bf(MT\]C<YTVFsq(P18R]',IIG<m24'7u1Z(P&fA:f1Aj*A+%K^?TA6h@Y3o!BP8.;'@,M_j7/I
%;L==c<gF[OkH_)t03eu=k<kh5Y4HT8A/_=!O"aNAe5>7c\6,O,bqKkJ28`k;A;aQAm1S4:_0qbk4CWSErKsRb^-K1P=1mB,W$B@;
%6]Rrg$BUa68@biK24r+89O!eo0"5cHFm1e;BY18b)*1f&(AAs9#<HV,/ZZduk>PJ3<Rm=NLUPL`Zr[B`/OsJOq`pB7E^:6-Nb*5\
%76f!n@r6!*=lo2S7n%JqlmR:j3I?l;#l,SU)V;o\D+[Z_9:gtbXJ9RtFnGhW3SKM)YT%VL0A2K1<'sFH\N`&4]4:s$MiXWI@5]*l
%6#s/JjrEfB'aJj1B]HB/^:?_rCW9U(.]DJ,@I=Bg4&Te[ap%Fm'\9X-`S7m4gp4fg=0<0lJN@haiE/*4n4$\04_2QH@7,"JR`%"W
%$n*l76Lhj6^`7+NG`;#/WiE9.kbunkHV#Nn@S"[mY_&20W(+EjOV#brUk'e3<jbc_+?CY>3ku@$4a$L@&(&^uh,;dU8k9nmoUQ`@
%h9`&FH\jC!jfL"6=.kCbfT2Q_THkSrVSX\O<'Sl0;r$sg+\fW.K_>1$-tV(daIQRi^jFVjP]T(s%QO\ERr'%CMif"bFjt[5<d9+V
%ToK0WDa3SqL^*D)(_<*9/d'"6F.q&/g#^ZHPquNJ5,d^u3b#a!p^PPB8RGJgM'05Wh3r>!0%XfHYF9jp$6#f\^>]d_;n&ENH2(jh
%(mq'e3pq6&KJ>/+ZcEmR&>iu9lDjD2]L38._ke+Sk6H$c#Y,;'4B`lk*8*_T&]aqKJIWn3H"*prSYA87no@m!C6fMKXSPiY^p.:f
%B46Lke8bQm,eppR80DU$1_;Z]%\HVj6QJ2DO<e9NfHOtF9$]1Wc;f;<Od7LVQYLnrOV\eeHHKef>,c")V+2WW;<&,+Js"G<'ipPC
%8TcB$H)61G.A[$E8N;_m>h+L'b1^[^d9fm`og9`OhW*HTW%CgIO62,e$DE?TY.TMY&>&ut6W:$WK%a4b4AOqU"[WH.T2Q3qJIWu`
%LBu*]Wr?7GTT2]@>BN*e;@d'er$))tq_`@pBP@_<MB3S8EAYM6(EHeoa;CSF`nI`J28FSSK<6cIi"B(QaUYHqiG)"24L4*=#?4qm
%/SN$dOETGNh".?s:ES(`j,H6p*1OtH$Eg5:gRrrKjNag706cZ#\qWUI1fPQOAU_(b3oJsT+)YF'"*1b>O*fdBK[UP"3O)9#2/Qp_
%C>8lD/&lSTU+05X?N\.S\87(7TT.rG93nIK"`l(\9T9bV2/3=IB`pk30]Xu8WRiuVD,r4T<4`bfCb9A,afj"1*@GYNN1c`bWNZ7s
%7u]Hqmfm,l$,[>Uk,?R)mRW'pOru1\P''@g8&LUrl`6)Z!F+A7lo9gg`W.#>g?Rg4\Y`I:'d`gQY5*T5nn_*b+^DS?!s_;q""b<m
%qg>K(DVEN-/-bBQnK.GEn]\415J#`U@?J=&Y1Sk_-14UpLOkq<DdoRNcHN(_X/3Dma$C_8(!".eEn@8doVE??CIC&_UfLJo@;NZT
%_I2&VEt<8I;8f[7m,3P$%fRUijg7&QkbunKH&J^PRtYQY;3)HL\FWuEUnArr(rq@Hd84RojU(uuI;!&e_&fPM`LAq\no9ZE9-ISB
%<<lN9IT%Pf@m:eOb?(6V^1F]fCjhANP=U4<^7i,:G/G:Odc9.D>V`;3S.4L$`PkZMURIF-1.a$TPq+V]//H@KU=FWkMh[*p8',jI
%[A<2D3Kte&!Ld,X#QhRLg0(#Ml>KKPWcORYDS,#2Gu42dq$Po-?<qV"NJn;^o8$/b`Amfm7u]Iq;mk_%#i)uRLD@!PdL>_^1l]J=
%%tQ$dXgRB0*L>cHlk*LZ,E]ZgW$B>%^6R1Y4*#=`7292K6887-osofgXE0\'Gc::6Q0QN2g:52@e)a&[5,b6qHe_h\dqaAT?!MnY
%HcK*:)dt>/lj95K&:A&hTEIibJd.1BeBXe0107HJ6QJW2nu6`e9"paA6&B/$e'([&>?9rP,BmHQ6A`s1%iScR6k$g%61Gn3"]dQ3
%oYMS.dU$*S7FbF3c)_E(h\'M'ZN&8pQrD=MnEYg<MQ]l7%G<A2ce38c0Lq*ZI?Y-o9.X:BAJV@13DB\U_B`,[Y)[/>(j:;ga:*:\
%iF76jSbliU(@,u/)Fk;a!R>m_Q!"RX)6t@>ABsVM%!CY]3k^Vo;mO?l_X@4Z[FNsPk_D3`.eF25)JeS^l?o#+;fQ#77Fa)mN(Q:U
%[FH!Xb\M%CYk'Mm]BX&>Bpc?JH*[BF7u]H"7`8:plVT="h(J,Jj&h7k>;jF[7N)`fs!,e<%s92P5,(#7]"Zgj6/2Qbe9H&CZS!SD
%(d\ig<fSWUCVsc;j-X7>,Ms3gq,8TIE`ZC%;</k)+6[CC*r"O-W<Oa&U/'QGGDaPBJe\V!\LRZVobtCBpc).?$rq9hV:&a#-/1<^
%kV/_B[ue@oHmsIobi_Do8_6r/U8Ie:n629@Ui,4M2GNl5%XhALagO'"f$`#`FX_&9e.L^M"?G.:DVELTMH>f//Cii-^0Co#df:g#
%,k&p78u?`:-*"i_i&'X7THct]%9':SUt\_bMRk*f=D[0kAT8`%cfhVISdt@k[rNU64\RNn"$0Vea1QIIH`?dL91>7`3f.Z2Xa)4h
%-j`rqWt%.'7W#+;6JT7,GCJT5#0=`u*(CQ-eC,)'E%u\(Nak`-RK[DtD_0slj?b:ZQ'#+/Sf>)_j2;q:45si4c/&tOj>`q(P+*bc
%IWS'cQWk\f+WHeYI!dQf8r!5^laEqBk3N1UGs:$@/Iq'EnOE<uVr7+<Pch.220%TFk,=bqq"d=flX%`dO^R=PVCY89;=.+8?PTTZ
%5TMH5j5)\u^^OFI;/u<?P]$X(>?dUac\Y6K:tlBH_D"t!,*rZFrM%9t#<J(tNb')bX(pi+5'e9N]1+Y0A4#%9%b7kPNYuHbWB1hk
%*NI7_FY:[Co*ErC3Lme6%s?BHgQ4`79QB0M;!Q9,0Kq`@fah#><7=_J.4n9Y)oiJ-o[Q'(MA658e7^q@.ZQc*O/@[Na441M0%Slh
%NMG7.[#KF]ECgZ#NVX%/;,IG9j34<JW2%=Ygj9:&N)k1C,-4N_MOue4,mQ$9L(h5>rT0CMUZPN\@2N;tAm$Tp^Dl/dJf((k\V\N/
%GSqbkJT%UurDg#cd<0$?E0_I''(MT4Kdm>L2HG&K(q3(o"$12(4d="Al>f04f:c/CftTT!j@!R8Ag#"Cg+hGm&N:0l_TTp7WWpZ7
%I]0$]gM]Sbd1&r1BL&tiOu'="FLE+HK1V[GoYn*m<T/qLc8[ZeG]S^L*7WBq4mm`NlaQeR?Yj!S6%dq!R%Xmq98OZifGC98!?<^_
%jN;8K3Rq`ph%+TU;0:;i-*MYc4);YC?]]XY_M***/#G/gHrVnkj#_#AOKM[Xi^bbgHg-&<Rh,HO7uaksVV(IeLMBPD%(11FC>[u*
%BTgOY?]tq;W"s9*iCY13`Yo&2.Lt[`d=sHOKjV&`s"+>D,NU&'4",,f%B`4ZR"iYe9/RSPPZ=l_#2[)99a:HeNY_(<D]H[!U>n1,
%c8;?gJh%jSE'.T%^C`!/i.CDWo$gj[f!Y<=)]g3tpPOM^N$`'TH<tXP_;K[#/bK;!:gT0upJpgi)O?)J(N,jq-ii;PXr$+-CXe[n
%W@_3)`'GD(hHlS(L5$F<fHJ,_<N[t[W&1B\l%OQDd.tVFN&@bDQ3K#_N8Xo+(oX4LgZ#k7q*:<i6b&4(Y1qo8hcq^M+=1-8_G8/&
%EDYm82M%0]5X3WC@Qj.M@iM,[6MZ;pWO5-X+RZ@g^([e9[\`hLEHFHOO$Q[jOQN#PK$uOtf`uRH9m"uXIM437R4F'BoEF,pe^!-c
%bW,$ICKoKB2B3sS?kF-1L82rt^1>DcBM5L!%+J/7%C5iAb&6-Cb'7unXJtX1jeE^r\c%iL/?2/7oJFunk;M*fL)UWp_]1PbkQ!5t
%!0hUcWb\Yd4(s<?3@t=Wa5@/<lr3bLQm.JIX;/h[6lU9@770;hdGd=WSO6^'\MUGr_HNNd+HX_H,F,1lR,%_X;uNkd#Pk)]:^,)b
%4DF/TqiXes#BeOs#o)1a.X2qA<YuWd5U0f*;*)G&bF)M[:n?!-Uc:>]\$2PE7`N4`2:A!;_]H)%rFI6DAa0i)guQD(^E?X*&ggO9
%Wi?g`d#VGaUiAm4hIHLL7uT?)e`3OqcmYnVQB4E&,p1,DI'4A*]5T3Y[.D'j6a"KZ'3iZAdq.=Z`=_b[W8lbqSW.XG>cZg\+/mSr
%?fDGj\NGP?odIV8mebo][5]RFqs5TFa,helr2@.f2cB3`\Qfs<7T&O$%s+[Hr4fVS+kP!Ogc2L#2]?ao".P@b,rBDb+Q=t:fOpla
%9@d"o'Gft_I6Q8eEVCt%pfJqLiDXef23P4@GiNi:d4n)LEr-qK23Qp9_@2W`Wfo0k6orq,>.340b)b3+jL:oQJ8N-$(4+cGHl>[&
%?618/05*G]PQ=A9+X9=p;ONrMkCoI@9hS)#EKdV3-d8'q%=@i:LddaF3lC'60Ki.J$8$O.]n#[P?Tci)TI(bF)JgY:OSrf^GFDS-
%s.ep46fbQ6XpR?O$StW#P:("l#g3=C-nV71E02Z6]M2%.8+[YOY'fI$KQHR:.==`<J_Co(47Lb]!V/*@FmJ7AJTb4kbYa>GAh7:o
%G>cqB6laS;Eu+U#E98qLK$oI*TakSd5cj\$.l%=Y@4,Y2]+c57#B;Ip_scR\.Z8$"dKVFk0AJi'PZMn+/W2:Fnl7_%Vj76\"B,+$
%Ag5sia$G^!B1f(::).C-pj6\C,FL#u+QsPnY+i"$&AqE'MrnLGP,9$#2>eLfE$`9I28l#Mn!Oc#W8_327Vq*elARL2qj]`pW>&=d
%;<cag:o!KId6dZWbc&ql`)[qNKe.W9X2Q,da=]q1,5=cB?Klp3iTF$eX4Bl474!U1Hbg3@8h?A$11d7?7a%_,iFY@O]MQ<aC@jYF
%>&:N^`c_=_.jCo]cQ$Z*bP,0/%[$3K_?E)f/>deZ<:rE'8#%&I`5BQs-m4CQi&Za/KhdfhZ(Y(Fja.oT1M2-TjBC%MT[DqYmDX*6
%)7CFN^,?CBfe&oa8kV`N(t6@DELdpS=Yt3\D%d"-r#3lW`<HX8\e5'Qrl/BC@k3i+EN<AIQ=2@,4V"kMT?SK"'a$8g)@@omig6br
%6?YUj/Stf&:X'Xj[ATm66D[nPdOBQ`F[*t2;nC+"i<k#KbV]:^*5FBV35NPLD%@V5#oB2)l6mV6l2%\!@pk$5F.I7Wi<iZ_@$o$j
%A`?g,C.:7s#KA#29LCIO?:n)d0gMM[)<q\^BMOh5cS-&+i>tuoY\R0-6iD\\N\DXG7<,OQG#UiGDOBD'aK/3aK(c8eqAEQ]a95$%
%7*'Mu4^;5=8&YVa<OrET)2!dm#;c4D]"`p=nV87"q4*XI<B(n.6GUacVC)'"aEL<7g#N-p8r`+e(Oh$1`,%>!d"u'LP]smG_2Y+#
%H=XXMm:b.pRYSTl\Y>"#'aHSlS/'1KoOKlp!HIr]4WMQUj';47=ZGNbf2Oe^$):**/(Gi`^^NFSSOQUk@FV-g!sH3;E/R&Qg$pYm
%iYJO:^?NGVi2n(R@N85?>]7sAs'OQjok8@cftA'WJ!_#Rnq1QGI^,Lj=U#"f@4u!jINu?I6=+&Tl_U\fq<sm;P1;]o-$>9G4rD4)
%ggYJL<*!<L,>Obm\Mh9L)trH1@=Q!fL$W-kGCD_%TSE,a1>o;2,7qa6qSUYH*Np=RB#Yhdrd;,!b5h8\e9+@1.F)4`-$LhZ4c\5>
%O.4%Pc2H6Zm+[MkL_b73e,n@J@:JTM'`&VM.O0RS;'M??7NWK#PKi-+60q;&H2XQ=(0K-VL;-&]MApP?<j[e`G(2CO9rkIg"U^l7
%F8O8`$)Egub/"DXM$Xl:3.bpNU=@rE5;`(36ULe$:O$ID4@q`5AM%tAkMqD>A_gk]h@%./8@WAJBh&8m4@`M3af9:kSSSd-:KGej
%r8V/Sl2N9/0]1Y/9^bkCrSX`E-g/98i3`W;M__oS#T\J1WDm=@#-90OTPe`_lk1/QJqATDiPBQA09CHt.Zn+gA@*2L$L7hj4>VGF
%[b3JL.Cut5QhUL6/FX9C6P2+<93jjnffZ]YX;iY[c]!8Q"V3*?'#"lCN_82q4PY``^N28'mr,nbs$`msr"JnPdq;ARN#Y-$Sp[`>
%&0(O!U<ped`MtAi/DPQnbiF4FIoGn.p)RVo^%IO--?uUsjI9F0JAs)+qo@0n*or?mri`TdO8e-sVW3XjpQ]hB#.#B0)5$32NfJP-
%k57<@SNZQWI>I68JRT)W,4D)6n8%/,;P+3YQd\S)meaaSR.q2q*DROKM?1]b^NrHH_lk"YrohrB.pqY."8gpK5CNE'I.ODrr.Gsd
%q9J^%\*GDjo8!2@msk2o],uLtn`O9Zg(/Z0j.H>H-U,DNlQ8k#oEG<+jnnnHn>>4(]79\NRpUmAn(t_SX2MdQn3?pD]Dqkcs7ka6
%^\QFSs#5`%f+7n:jjbG^pjW26qCeHn[qAq5I7]k\flbn:hoP0(^Z1C^A.>&V\Ae4aQ,CU9QND%A#AArLnl,8qeo<L_G]gnHoEP]W
%00X\pBLeJQ5Da[@I#fhElqTQ)7K9mMZCHam&lH+\ZK^%60gKE,*Z*83XPX676J'C)\mh5b6!=jU^e'"FqY)auYDL!ES17aj6GPZ>
%XKLbE_N^GpjJ\1G!2PbffMKR6'h-1</SG+&EP*TgZ'Gb8f[#'5\.Ger&m<hFmAXlV[jF[C0La=ORR_*:`A>S(h=6Cr.:li-TF=:.
%h;d1g7ETN%.98e_pFe$2n"#[TXtfGn&"+['9gs4*6qq4=;UQnU?SAI'BVehCIl*<]WI#S@/7V1HiWT6AdRI]>,DCO7Y>ZoNNrb$O
%kmR?7c!'Ds9`B@"lm8?PCRfOQP8%Bo_Rc'^h/tHB023D@Xm>;0Bfa2d1&uV&\N\,(`>5GH5"$l#aX4\Jnp8kX<J!7?qN`VB:Fd?N
%5QQa_naG%Ij(Xq2n:2'&G4'R%>h*JB=Ecn4$!meeChFoH=$&h.'a4JtD,G.e`bTW>MgE?E"@DZuK;8ER`JnAe/ESMYMP/P/DYmhc
%.dG;k3_I..FTEbm6(g[cSs^/nE(c'7YFTV1*-G32^G1E$YG3O^etQQBE7OUiD0aA]^1;K?T;gTZK%YMCf+HuHK4#]hA4G[eY(T!W
%<[J&NZ)?QNHk$%#!Jc!Nc"W95^*6\FH3X$DXP=.VT,P_rh$ARBr]2?>\GK**";DRJ89&_HM[?+uSTQ4ea?QT[T"G"\=5csI9IeMY
%eK>pKUX>N[HUS[@$W%5\T34*/h!N]e$L2J>/h/5*QJboj/DXm]*`M5\&G;(A4Bia!e;^$kYs1;l5j,Tr-INlZ64h?*f>m<W`<>;c
%Dh+BQ20Uol4fi9e[T-t5)[;,5:-GFg^!Rf-Im!nXimUIuNbs1YqPJ_H5.(k=qmDjZ,gQKl=XtbZFYcRC`^^,:9:Vl]RGAMlJf\bR
%PA"R!:Zs%O.2G%(3kNe?)%u_Me/Ua.pDj0!bV5,X?TB;U^sPT`Nl3'R$MI]q/+^513IF\B,`i1DHt<ZsrgU:Z!W$hW,ANjF8jjga
%Gh^kR1,e9)%Rm7%Lp?>Nn]ZJXC_MtH3"?`I!N;BKTV0ko`D(HaVXY?A+u-.O8t:Eb@1Y7FBn/6Pg$0VoZ\uE'o/)CGW%,3@N%B3!
%L)TpqVAAc2<Ykgg.b5<+;#k2k_aQPs`We:6ia`Z\:`KJG]?,+W"3M3/Q3eE5*!P>ue#*`*P6BqJ=/d;Vaj%V+4q:.B=5o_][2sdd
%8)Nd*dFNFOk@PTILu(.]gY%YkfHTGDht`KG<&"C\G1=;P<<rSrZAI4GjQl!Yq1C$RWDA2;pk2*oiL]lcaNFD9Z10Pf/eLVT?;*(f
%6M;]>"TukW5c#4!_F#4Qj>BIqBVKX>Y14(0<.JSpIE"Y!RpU&Mo^\`<JsUSk,OV9WSr&sPcdi?a0VR@2FtfGlk\S4-n]nNo@6-\E
%9d93-=9+PmTR<BW@,t:4('e%*C]Z._Eu)_d*u[fq$M/i<Z579(i!SL44EN51G0%g#,Q-JTB/1s`'^HYQBOC?EPFEpJ3m!79:l''9
%%3l%U-+5SY'e(?_(/.7\\;-&/U;<k2/Q4iDIHN+Wn,rni(^6PG3D5Qi8(UOK$SZ`>rV=L?)-=6?A03S",DM3hG:=lN82?]tY.k6*
%IWoRDo9p@\7M:`Z+BC%S4N4@:?H2D%X2ZI8,m5iobYE#8p-FaAZDMm8S0?7]8CP6OSi*J$TT+KGbhP(`>G5E.RE)X3/0KR56+%=P
%<3Zt3ET#7GIm]7u5;V$1HS>cdN80QdXt"RXJlA;hl"3lrB!XB1-@JkP@Y`Zg$\;PY/2T&@6;f9kK,L*NHquYHE%r.t57M,,6<mp4
%"bjm;M6^C-onI/f'gbB4][^<&inV@9#T4pG9'34&)Pi&e0okh+YNY41fUk%o,-kCu@$-?YNBfJ)54V4;\Pl`cPg1:9L_VXfrM;g5
%CBR48f4`t*4)f!41)DB<P8(C(23AeE36W5!;$EJXn[7UCE.d5S7-YoY84beZIC\b(,Yud5eif=\CBCS8O]U&'QulidTrc_j_Kof+
%"%>VCT5*aLPU=d#2=f=T>`^dkCHU4@Ct^P"1AGW&-V%dDR&/`Sq:KhM,9.gr+<u+,fuF\-nZ,NTCj$inS6SU2:/]`=)T$hGO!%"+
%UVBc03op!eKEe-K1jkNSMb7i<II<7&1A[HC3(eJqnm^FP"i>M:J+))g%0YAdQR>'P"@?!S`l0(b1;u?8<:5PdeW[JNY_AUEO_-)\
%2A&YS\Y\UOmLke[g1:QFcd05Gqjiq_CNk,sgUl=]n/kuMO5Yl/AgbLbJ(7l6%"-TC[XS8Bp9X5%s104frVfmcC&%X.mqVdZYLqIX
%msj0="p85=\)I(rC3S\DI*MYFn,5+**%'HBm;ZC'?aIql^oR2i,e79qe)?(sC9M-9r3dm$o5slcC$RX7d-X!(A9MEc)6g3-1pq=C
%h6&7O0Bu(o#Z8E<>AA.EJb;@l/Yj#9+3gW-c#&#?fPl]C^6:?ol7\tYYD+60YZBcAI)J)48huJ]m!3%iD47h^=^M!Xal[_5PQ2,@
%//KX2,.]q--E,GOjHdttkYXQ*#bV?]5oL^.(Vmr0BB^j)>'HfnrdIo3R7O5E]u6H/mq5D?S&,k<k)PG2HQ,DDSJ!GJW)ZE[YD3>S
%.eS>G3OTW7<WYg?RCn,dlRX[-5:,_?LDQ@\MIogj_[@$uF?3-C&>#"[99!KB8=_KOc*>3i4dbJk\8G(/W"digcg]X.1n9HB\MNSX
%DF%\PR!U[dU4cqmo(-<#^/StJ_A.aA@ROrZ;Zp/Ab)Oh&bg[b(_O[b1G6V4[$'_f7"V^B0P&_?Tb*najNEo@5.Jaks.+AgiTk_"/
%-h?6oE.\c`C_W^L'aVFF*?hRP'Q/$5`;Q!@'O?@oH_j8;U@'7*+F6do:OBFWXbHHa4j(X9Lm'HT)kIX,EAh+I5uflTP28-8Y/i"Z
%a[`*=TM>RLPI,OD?;r4d-qqSW&G:/orR.?M(n!3NQP&iDkAe96_e&r^btCn6"dT!4PZjK,O%"8@IS[6sY#?_V,_Ic)aeM2d$eUZ!
%6b0Gt&t6S:@rZr`ZUY+>iXH38.Y8R=!uhm<9\rdc]@cE-DC?o7D+%o$AO5E;TVW9b;=OY[1Cg_K0=lgY6BOd#Qo;m_MLE8];)]IL
%-eBJt%;52Jn><=R"*F]3a?F\EhN,7uIN)tM@PQ%ebElJAb9QX19BRQUZO?;;UfZ/<G3PQU(AXj@3-WtTPE9XYj8cKI>f[7C\c3El
%CnP(I1U4k@2i?FCeZ&(Vd#AiS,)=?M`TT`WS5bI35b^fT\*+eTT=fiJ1MV4\Rk.e(MQ`$CTI(V%*<(8.X59;3q_3^.NqM44;rO,B
%-pY$#oaqOPF+T)%3fp']CS[5>0qb_6f_mlE:H(o4U?"S6LZPrfE?AFhadnK4O=:)4eul@P3RiZrPhT#l7$upQU)Nl^eJB1"Ak]C0
%#@DtS9?EUlq,Xf]*@3Sp%n$T>@oE15UlWb=TE*kN[d;2lg$%6uYCY^SMOG4Bn?CXiG\2"TdF,[Di:pC:o:!R,1T*0HI*k@t:/;(4
%+6^DmX'D\p);R(na]BUe_aD+GJHUuin"VAgCK0s-!!F;nadoQjmPidI\XZ`c[ScgY]uuMpfdYnb-#n[jd.]N:P(l08<;_We^:COp
%]@SRG-9'.NVZ\YKnf%1S6M[4HK49,^2_-e:Rr`g\UXkaQ\es6pFCk,_^Jf/a)p2D#kNiFT.7Yb7(PS?dA"uYa>lVj]CVaag/I+^U
%Hptj9YDh?+2K&=:8VnjTl1G<OOilZF2E)U:bACX+H(B[oa)D,6<1,*60mi&L3Es2OD\Q>91D.;Me>;&9M-qbLb#dYL>pjrMro)^<
%\shs9Nrmg!'JermJXad7lFhZHKn$U0hNEb<aQU`cC_8ot?lL?cG<$/g.utWCh_(@noc;D4Vk\UpIX)kpft;[A=XBtmd+?Rl?DA>H
%)FW/s,a$FlAh&H(=ER8uf5'':kq#Q'(t42hHi<pPgqWjH3\4I2@,Y(f8[!]oLUFG$(U)FU!frfY,.VBTPQmNpp."Y`dI):gHM?o]
%A=C](Q_.c/!=UtEKLEjrk$d0!Z.)=U+.i_;XVspS0?%Glb3FV7+&.*E[pNGMZ;2`\Fn556\9l42#^hA*Q,!Rq*O@S=Vi7H$8]g;s
%g$7D2%ubta5Qtbkl#o-HMc!KH>u<@&[>sREBCu&J@<`6A9lbkm(k(o36f9=J:Q(7uI_8*nn:J-BbhIH%iFdCn:%>R(#ruXQha2DJ
%D"[54n&FurkHuBZ'R1&n)&pdME5S2*QaHW7X.:8[oc6+ZO>85,E45W$iC>D'Q8EI+FOt;M2(.mH(U$_hZC7]t6Td=ZTWttLWU;E.
%_RV1tG7QnF>27DYqt]J7@"8B-iDR7i3(W9Y;@#>sB8&rq:GbKc]chIc(IfK/p]Hj#Sl7L/$\bSJalB:5m]Mln%XH+].lNk\]pNZu
%qa-4+lh>5e`KqDrUt6"P2"Y*4-52K%RJY>7J5qABhb_^\l_[];W^R\i?>gL;Gc!QlEFJNH^JBKCq@%A:UPsi>('PL!8YO#E`)5ls
%&n8K]:h<8r24EaK),@IhoZHID1V]]?7lVI7lrVGZbjm1pD<O#(8HqKpiC\5&8+ij`O+RCEl33S#]<M+`M%::3RRYlcX((tb42`6O
%%'$1f[>&8*Q;uX365/T(L+n$\,K'Uh(qk:W;)bGcUdt]<\IGVd'2bEu@`]1h*p0gYmlR765,%dFnShAUqo\,T`u[nT)Q"cr+C>1P
%4;Kf:s5T:0V$O+/ERNj,HR>/%jE?Te??R3V:#8&(PVbebId@P)3Sg775bprfTB5`fWb>cfbSE))5Re-m$nd!8=afedPF"Vo\"Gg^
%o(FK7E8J(l,fgll+;qM;:L;D5[g2dJUU+j#W[k,o%mP3N!Z?L!i/@/Q*YTWpBI9QQ_65t$Mb[9_h*im8,pGnML!^-d5+pZt'At(l
%!nX6bOTl[1WX_Q4miWHm)3Fmh23<Lcc"'@lkK<)GUL0m;1$^J,M.4j#FhFnCN6XiIZ9([bNF5Q)YRc(D<2E!k_;')J2BP'Vi)oP(
%<PhH&%b/7QHAC05K2u)::pag;I=r#j!:&AnTl0A+c+?K[`U+!N^8$m@*W5Ap#!h\l%F[niX]'?l02K%hcSrOF;DZCZeH_06g<p)t
%p7/NLI^!UhIBU+FDO[e'o'IaBPBlN>'Arj+1jP?42#(nZm_SAf^so$J,^[[!>_kI)9:Itlk.[**Stnsjh'S=TX1HG'qf$!:_1Rf'
%U;fn?8.X1P_)7!/+K9';4Ak`MnZ"h8CY$Z4'uDs*,g*VNqU/$0+/40LLY-S7"c!Dj=^E>Fc',$mg;4tuLf_8"i(3U&O'^XCp["Wc
%lIkC7?Cut$VW3%7lIb-$i$o@]a)5[E9UGQBXaUY@A[%JX9P.jDgk*G$$`eI^52-a]^EaJsamU[<eE+0mhS>@#MGQcP&N*bf9el4;
%=&_?V_WkWdIfpHskjPj(5>cK)\<(I.033%WeJoj54n'gf*=7?tDijk10RE?S!tQ;2a)7+>cu#R1-aQLBPid5ui(hojjZZ,bO3T!G
%<7JL!@J%Bg^FggLC7d:dR,.mlhgPm_*#LLfqGObKMAg.+)L@4.?Qu7$kfW,FK+GiKaM5kZ[r3WZ<O,J`aT8,%H-9^@+JWPU&BXA\
%p=0NhnAG<4=FK]&Vf&jG^38?h+"B6K$i$)UJ9Jrl,X(ESIZ(b?";#@hb?Ys5nKlbaMm%luE&oM-JRJm4Uge;^k!t"QlI^[6*8J[K
%NX]'Sf7de,7a(lV^oYrR_.QeUoXi]F77s_T%R.mmXcib#*9mAuOO@WX>f_k((%DZkLjp@Wg"'p=VNRIf+a(qme[t!.R"<Z@3CoCa
%[bGYkYNlA7A>DHjE)P3@FqK=qNBf[P_4fc^guaMia&%-X]>ks(5#$Q@RKgJ/g$7X%G%3!82h@B;FF<+qn1>d6RC(I0/8od^B1D>2
%HA%Hm63DUc%)(F;#37R+!#.KsA"Q=k).n0=B"m=B<$LaHoV$o`nSd*WL-[k5LCRRbOcpRf"@g8L.hoN&)VksPk2HBDeJmiT3rR4d
%h&cX+M89&mi.tdMHZ4o@J>NqLY"Sq@V%RaN[<NuRYdn`q?#Ngh;hHHm&"`]4&>hk\J[3a/!9_O`eiIQr`t'"PQ"t'QSpU#1mN%3!
%Z"<Ep4'TCFn527Qq?oS,&GhAJ9%o\m`"7Bl[>.i&Yt:eU2d3:]o.0ZF3*Uh#n<4ZVgNq(>[rqJcDC#(urb"QVRVGmj=`+lVU9<:$
%!@BtrAb)hN]8%L,cm^J9A=t6X8a=@D7k0T?(hb^&_MoB@Du9TmjLf!5UgW.loWa%0#sG]]@X>&O^bm4<ORnrN&85n2k71[Qj%[;j
%P,EaA;#/8tc!q9#O=s5BPW*Ve`0uX5PiA3HHO`.+5iAWsY.t#uLFd9=L!^,95![7jqf@jZ_?]rRK`)*#%D6Vt:QbjG;hu-fI#W5Y
%%Y5$Ae20-h]mKB+T@HODct@H,R<U-VF)p,9!@[@kFW2Jp?Z#tnc,a9??a#DPGkAh`P*sB<b=MBkj%dcM'Df_aN#hgbp[Tq*0>9o!
%=MrN&I,r00h4pTd*uY?@%"e*jjTGb_i/"B!og?;<FV"M'?iYqK@\%m8.qtQV5'Zk%fuEt2Qg>u//,CS4/:<?UU9BPiK@:]"\4"CJ
%_c#6\r'JGrXkl5=,p1AWp!ALuO/m9=(k/NH,*8eCW0".8\,N;(?&c&/.<9"mEPm;&'VH\3$IhB)<r=C3e>I[cgVOS2=Oi*H]4lFk
%G;_je_'BXClWtFAqb&&rM+m:Z2mk"EkrlD[-gB<BIl?a0g_N:[DEej[RZ^Pb7N]8O:kD>O+$.4t._$fb.?6/]Ks2`H2tC.5&L@si
%K/cEW&N+iBp$TY7;j:6Tm?,)>IKRQ^$'J#N1oFp5Gp,:bMeFg<k(t!0@\*ss%j(Xt+>q"-<?qdPra&U]^oH6__^,*2I?LEio?f4n
%R?c0C6_rerlJ7(']ThPl(7,op-:8f/5%kU?;^`T/F;`u(:/X>+3(=djn2$VO5'ZG71i`VVX4*?Q8V6a%D=gC=e6(UCAi@?@1gC?f
%QfLLM7dhDoH.35RKOF80ghn'F7(l4$`?Cf=6=#\a_FHFtKqjTXK7ZAY$`adYI'Ee;g'o+UAq?'UZ=EsGHDRbP.YXEU`2kZq-#)5`
%LoDRN>O=&EhE1X5P+LH%!6O#,mVldieZudHa>Y7Z5'G,["Ymi]n&fOf<B[ktq(o&^*e&4g$_EE;\XUOU%7ot5Hs=)6U,GPD\F:Ec
%_@LHf-Ekl0JY*Z@5I5\1n08D2%6CKn7)(HFiq.Bq*Ll.KoVht+KP6N+R6b9CKHe:`=NmH<RF)8#IWD]]>9-#8Hj`XD^?bZ.#Y,=-
%AGo:]8%lnR<K$8Nerr4!]mKCVd$2I7aZ6?V5b]T9]\l!+\J!YZ\8?c`]=V*sM8OP,?8g?oB3$*:r8f=XJ5e(%fc.dajE"lLK9gHG
%aJ_$$\^!Qa&RVBRi-\=a`l-Qqh89b[K;PZT"U4+6"_KeS3?oT]J,hq+0_"S_Z<:N\mZ_,$cXb9aZhiV=-`e^V.87<W^'6h0ncL>b
%-a#qtWnS(X1LGc';ZYJmU'79c$`eI^5D"$P]MK#J@kmodjL":%'tT=BouC)JB#P:C(U2rg'#bPMqo\2VLEH2<SX\"op;+Ig7k*8o
%6JqiCrg?Xo6<9;>aTlb/$LP$UhEC_F5p[8_JQ'#/A;=&d3N;$GXOPF/qEde]+1kpn;*b]IiM6K=R=+MF!sQRX55`*cXP6+g<#jf2
%q\5em"#]LH041NC"]<8#(C_lr7dhCDoEm",61Nf7ISLAsH6BZsp'X^S;ri^!Utu'*5m-S^8OB`8MU"[548:Ot+&o<c6^SqkAtTX2
%`S;`B;8"e/Il=T9lBY$l=//NnXPQ)9OT5q%<7;.A^O^@OB*[ti,Ro$BDP%Z24HkOB%'O@`;'e!,$`adZrn-!X%*/pbC4$Hj/;3)`
%`aY`GaJm<Sd*mphIE$6V;++J%7dhDs<5be/`DYT7_*btL68CNa%9P(1AE"F_AOQlnd;-[qXBmT2!"m##d0G^q(ng-ur=M61[fFBj
%fGN<X321P:Mt8O%6P><hcPTAQ]^3Mth*V^7\<\*%,&<LcCN*kr"u^8_-ej&ci/Ne832ggm(pN4]1C,^sB$ArlK?##]N1k#"8<&&F
%MU`?rH4>s@O\;&S,^bScR,e%jIe95P[t@r2(KTuGIAC1@d=q-*\PqS`qL8LqUb`<mP<;CU=J>ASe=jLg8pO(4JcS?_$[WC*GdM=K
%NEca$\QFn98`mi7G(CX]K+/E/qE@q40_'`u!SQ-cld&&h*d;;E'eVand@b"0K.4(TEJ8Xf3+NY?%cJR&S*s8_I$\APKA16^D`Shc
%nDL&L<*;G!>t&,LafR.4PJ3mK_$qeT+c<_Q\(:5Ie$RN_&CS(mHM?WunTeZcnlZ.,2:+Y%SV/=D5=-Q9dCPDE,HF[arTKhZ34bn+
%FL(`#Yt)Eqb(iNS)%"F<P.P^)F*@/s'AQ.PTBNpkU;gU45pk9r$_')9HpZsa.Je(H(6M9g`EV8)G[4&.i.P8g$r^-t)L#7tqS?s(
%B:Ng&G3$L-:R3^=Lrn*n6+XAc/\3cd'*s+DW=UM8,<RM[qnj[uC1_$DY)M4#oRQZ3FH>^0UYG&.k0qBNg@(^_f8BoV-j1[-LB.8E
%>NGAl<ZaI#e8\)"&F3Z/2:T@O&u6`UM$30]-<WM=Bs_q.&?$.O$h+JMO]P$@*e!VO;Db.=j\b8#=LQkfJ_#=O.KFS5jS1"nTsG(4
%EgA1=KY6Ccc;l#LqW35P,EX[5hcu5?3p2?:C".i181'.k#!o%&Y4/aNkIDq\20EL'mbpZ+K[B"48nrp+f?KE^G`hd!'@I'DJ:pgD
%:fV@\'shL:d5,'2IIQa$Z`J;im/qsJHjsa2`FA6R"q,5H%,PN,$+g$)2,M4koaoWL\:7de]mKNOXjrPo"+OE3)/ObP%)SFjEXJ&^
%R)gNnT7^X&P>,"I_357b%j(Q^rpnBs@A0P]K5_5FEd+096(P5R80&L#L_j:d94660AUL5UO$o-I<pq++))biQjdG<jo.nk?Be7J+
%\PBiUZ^NE`DWe6N&LMXplC/0NNu`R\o`Tt&dF':N"q;&Ia;`6I_`@u3PT@3[]X<87W^*,UTo,H:b3I5]T4?5V_EEN!.fDj!Ra&[9
%ijojkInsA5j?5GBAA(`W/.B9Zb5UPGl9c^W,fTcC\)4PC$/]A6P5k6b`#m08g5dM#=BA0'GrGm?S)^4*B^MdbeWUk"-qF:4hHZ@:
%6:+LYf(([fd.`aH>L3pSj*M\B`%*ZI9[Q/*AIC+pYeS1?UhS$;FI*hEh)]*R-**32UQa:V96tG[:e3")+K6cdke9ItY\RC@*HG#*
%90.VtK=n0S`huSs=mDTBV](6jeghCJ(T>.YTqH#.?!=)B?j=s:=p:$YO[_VL[=uQ,:u#4f.Zdkomu<hOX"TZietVQ4Rh69#9'T#*
%;J<s:^]#'S_e0Ee[ePre8t\P.bm4kMMH=0YQ%Z01p&$SMi#;u&41)=oe6H3%qZ90U1>\$^[VeW=A1B&OQ-[0@LmdqCHdG%uf?+k$
%TI/NLeX%';]"tRsfb^lQj=ThN4&a3*?cS7%4iD7X5"rkIdYd;8@"N?%-mVWgMpUTso5:Jb?6F%_3]9"4S"Z9#AV<@O*PH,IXh^<E
%NW\Ltc'>S89]a+qbrgXQ$`eLKNL&G;@86.qQJYEMA'=?!"\.Je$!ngL=#\/-\-J5Z7"i[p0RC@c:iR*/Hk?n9VRGuCM+\LqZoNkm
%7o-"GML4GN\)+OI()9ZKXPW>g1!#cYqUAgd/]?3Q_]XgrUgn\48e=Uf@jB>cD@q^*a4=?CoaT5Jn+OAZbq>"Y]QgqjFB3^*=]]X>
%Lb8p;n:lLsT7h<bIPNSjIpqncT5b60gr^ii,,7/?g3!!%a/jsMT'0?#`_%(#^#n.&)p,<dd$<.nrT6saXjQVp7j'fXAVS<?Q-Kr2
%cH$;3)oip!_4.*S)kD=aoQI^;Yg,K=E2qaBejl%7-<5jmOb[XL[F;O&F;Rl47KdjC8EXeM)nk!CKM,k.hl=hn*XGg;_[m;a,!)D;
%A7NP0)jP`\NRXpPYH5Ctg#h*c,='I@_4XRPDlSnU$]j@qX/1D%D9O78AqXu,,s\S+Wt%U/hVp/hhX:+LY6ni5aLEdUK]Bihg!k\B
%2dVZt&ubFA$CsU8/&?Wq(KPJJS"Nk4k6A3,Lg(u>&P36^q'ej@_B)fM/01*p@Uu89"9#LI'[+V^h-O$]1`3-I`2ML`9&3,:RE=X;
%/3=B8qF&^uE'Om1;*\#Y2a(BYgMc;p7Kjl6NC;boB^Y+rgr)$+nX<'/<i`ms.YY;U:8emE1+.9Wole*^AT3r:)kNsnY%`!i:e=Jc
%$4HnB)KsqA"SCOnb%e4.q9=W0]04HY@_E1GOU^*i!ATd$(KtaF8-OOLfin]lF.W5M)IcP&`pT.S^Tr0phkW/l>$F%j#UH&_p=`&r
%"@^mZ=e%3@,7;YRMN(S70@d1$TA$s6l(M]i`miLe=3l<N!ce0H^;su,V15:a[)aVAGM0&$.P!eKcURAH]2hd?U2;"]GBs6(_G-HU
%?!oLbA_DVgabo$d)[q5_Qp;^K<U'sUGP_eBB%^?kDD`7>s)iet(:U1gDe7W6rKa4*<d,7%\Vmr2la`YB][pfhdmqk]\LjNrrUcDC
%!E\C@ec</>^gT[NV7WQ1!32`L"2FoIM(bse4ktIQ#o@e7P,"tJ*a,#-0-;NDGS"3QoOEX)FX[A^`8?+kV`Alq2Xg>X"`=WWU2#O&
%@J-<A_pL2l/qsN'*MQ1^Q0kqg;g.[cX`e:IDQcpcDUO`,:NX+f>F23kmaek_]ZIik\>>VMR?Rn$;o,#uKO>Gec]$`Hp/T]:`dASR
%,il.[s0[T$FL=ccNe7tU_#]D5(g2<V)gc'M'FTO[_cK<7)O.nCnFl.S[/>!>.Nju0D="d_Yp[,nTIY>@b))D,hL=*:4p.2c^gbW^
%]J+Z@g[Pih5cMoJ!*$6TA(7s2*hb;U1.E-RX7#pZD3$6P!Q=ArNSa%[r3P*](Q#!DSrt#RQ]Ie"U==b8b>:m,^+8#/b?n_5)832s
%/mVSmfC&sJ*&R'W_$q8-lm_CpGi\FQ2[N*bZ4oC.#t?'h5.^.:>lX$W-_op[d2*%!SQ]AcaU\>Kd+,0'B;/`'@KIOP#I7$Tks=;[
%@'jU:E/Z9YUp@nOfS,$ce[tc4Gq0Z5PCf0C[9gn_$E!+.2oAe]T%4<e#*%$`I@Z.`h'd3EN8ErF%=@i#^iajERs>S9#iOI$]E`Nt
%Nh"ZG?mc]F`^Y]pY'T+Cm[fEplh7*?c?a-`5mZ<#q]I_#6?&KQpe+q]Ep)aE2=;^uoB86.QS#Iq?!)Mp<)DqM?dO=0p,s>X[,]X:
%;/BkR"p.^gAGNKtm,TGI:c,S*lWaVTQR"?3<q#a/NRhXMZMoIQ[b%ganmcF8'%dn>YJtCe$bueLk$E1%mo*H"3srVGrs\O&NBq.X
%<74!52gii"5#8-sp-\S<_4rVRi%'V`'qL<?lh7)T$a`[N_h3Hn9n4]3\]PMd5YV^b@LAhiG4/nUf:<Bi8EY;1oL7h+bGj#FBNrg'
%O\iNuUC-8fs/n4C;tg#o[!lu>'R-f)\*$XI)I=n7&LX@JHHf]FCPcGqT=a2<9&N5ToGNQ>=#p/j.3Z<#OY[V\J18&6pmJ\I*U])g
%j'SIRZ5g:s.m;ba#6a);iuG.d`QFMi4:KM)\(^Rh<q#_YZ"o*UK9W7ZJe@^TUp:Yf\5&ehRFBBE/H@XgkGG\-+h-s_E<X"\qD-h1
%X6e$@h0#8.9f/$u'2Rq@.BAW@"S2E+A8rB>bT,QhNn6dUhjK2!Zdmh/5%'-_R:79qRasp;!l'TRj)hX(Bsr*kr<E6m8'kRO='"e`
%4)ae-re7+)(:dT(;D?tC:(jp"H4Thb>92*b/K$0lCF8""-`d"<rTMdqkH<c<?]NZ[T%n;0gtq+`6M=iiSu3oOp1?s7$IK=IT<G?1
%1b-jq.ppZ4MIJD&:$-PaU&*!HgX5K<#jd0,Z]5_V`Ke\K5Rm7oC[d/\P-`]Nr<>>bh2-otRgt;T$I.VU7,Idf]]m$NR+_56n'L,%
%eraV.c^!%mrC5_=%iViPeQ6),l,2k!!];;hJ`'#N;9MHsn'j(Bd%@Q2$_-lOrTL)1DalKtKIWJAR#U:'KP/s`&+T]o1Z'=Mb8L$$
%%IRt+6\mhp"p06goYj*&A'Qb&P#'tOo)d&$iK"#IF?rY%VPqmfkbf8=rE:<c$VCOrTCQgjDR\;i7D.fjSG<EaYK*TiRcP(2Nri%L
%[!tnLi1ld["]E-k;$5*te_C$,^iV9`h8C)&f(?'M$A(-I?.Z]]'s4uNZ,n$<O!;NDXr\pq-Cp.Qlh7*?cJ2^%-uS,\gpA'08hGqP
%5u[p+blEo!Ri_tXnq$]AW4=kYEh&*&1ajl+b2LmM&j"LIE3I&Rm/B^E.2@Bnr].nqdG-"!RVK-cf_XJMZ@EXc:r[.K2u=%s83#r4
%@G7:?BfCs/+I3B*+J@JRfpHN1"5EFF3bBL13f0@j)nk!C_"U_$k>cPVLeeKVM(3e7/Z0&qNG_7P9dcm5%,bP1r/+;JL2>DTZ?i_3
%%ph>*Hn`#BQu'ZPli8-79*:1iaE>m00a*&beZINp^[F'mJ%W)`2b,0EV12bd^OU-o&WokRFIJ]`!ke;cHO(Z<4URo??W+_:?qrJ!
%r9(:kOFXSDUGk8/Z;i+7E-3-F*=_u\dmP(.9:pk%hARZdZCM3#)RWb2fLkEH4r_2gCFGH<U<h6E2LNAoCVUq84%SG*QF_.<eh(!A
%B%(Q/nkW#I$_t1WrTI76>o6LsI#k&i';oEXNEADXRo;_O,8S0cK6,4PZd7q%7Ga0oBGX-F)AB?#Q7j@qa<H3JYor<3+q-0s2NN@Q
%rpie5`IZ1k0YR8X;)#\hW>GI;R18%dX*;0=<?EUdQi6&e]C3o\0US(%%"R+_gY@ZqA@ape"To#U6)41>eXPB$Z1f)gA0hqD]?_E-
%T7RN(kHgI.5Qcn&M:qU]53B#s:.P+]2K*a7dE?-M*g%TXm,'_-c^=,h`bE9gA5XSpT[5#+_Bru6)<-DqU6%F3=&rZFPSj9)X'YfP
%+g*QQN.eiA2STP79.r=YL)Qr9ra)J=E9l5U"Idi>LhqmsmD@r//s!<A0.:Bi#<OAFOlUN:>oOK4%l(=%duXY*liWS>W4X.hh,\l2
%oOb:>FI\B0A8sjC=4gX$1hrHRk$WNA.dS9KFq-Z43C\u0kU?M7qJ>b(T-(aUB%+d4ok!#TcYKG4i/T_!om^LL-mia5U7:_r*0V,'
%miOu2(.hiX<aQc0jk>*1b^_/2cETK"NO*mSGU;JF7<qfE=erc?s(n<ogI')*rhr/o$`eK`4eZZ;DTSQs&%Oh<l7`Ct&EAuA6'uZq
%24J_AJK;DkY+Vfgm'G*/]r!mtQR[jfVn#1q[M%V0C8uBZB165R4.17hS.$#TOpj1Th%+h?HE5d2?9"<QCg(3^[b&33+AKi@4lGUA
%o>;ebUD+]Xa(.=SU2]&16)!EkUG%Qt.Xg-:?N2Gt^DAE_:US3i#Q*Lu?X?%g<Bune:+G)klh"Ua)*3(Xn(-?ZeXPBLLe!h-*>?Hl
%_7hW#aRr0N4n>RKBpSMT,FaG=k=H:r.!?-GeW\CM]`r_Mk;VlPQ8)U86sX(p/J`/Wj;)/mng\Pr-qD:9+riQB=epO3gUu)"7k^=Z
%6pJV#3ZAPe22DpP/8pY[!uDe,U_jWPfpZSW4:hA32DTHuZdG,ZAAf<k?]%K6D%9qR@[c=5pbG:+cIR3Fq/g;B0ft9L[be[J_7\4k
%-.`3Tbar*B^"[CV[FQE:Dg0WmY-9^3rI(taZ!!\I7iqBJmEoW9aLl\k[)4EdL!?*8##QI,AZ$qe557dljX5Lk>UA".Tj683;NM^M
%CPLUG4B3N*?FXTB7W3GGd;,U`Z&POg.f_Apd1l=#$_##-X[c*mT=h)+_Z<+kDA8'E`<MIn]eFd(LEs55mdV&EE$8Li[m_+^#,(U!
%RP4aGQl@S(7G\`YEi^?Wi[MAkHF)(qRUubXQ=B5`\\dh?79FLJ_s=!s#Jr4H=47<r7h_/e?HX#F_WoB`c_qNh91cdgLqtCP9qkWX
%QO`O$@!,mtL.D:s'Y-Alrb(IKRcEUBp#4*V3N:1dr[ju_Y[MoGeT*G<N:Z/6PmI@&<btm-,D4)m4[Lqn]^G%1T>cHEdPHa/"&4$"
%T*0Nr*+i1$E.?q(n^+&8KM)&emqjP$">DSGY))&t*\,`NII9&/nF)`qO9Ff9J6mO$@R!CNU@eo*`PGoW.T[=Y=jX%V8LIB9A\>G]
%m9T;d0h1#?0K!bTosVJ60!*pqpKob(n5&+0pt2$]a\sinnCc$!kp,I3I,O%ZNbddsB0f<CSs^QH<qV,pjH!?t-rIhne71X/"3BU:
%l3#jAF\F6<EB@]T4BQGM$HHF:3]9u1./OmbX)JE[2UlL'<!GPnIe;XOj]"Gm</UQSnLR\XTd8>sJQg@H6j!QY^\98G*pj60;?#eL
%RYYJnY!!SRpRYa]q/ZN'qnFo-r"#tOB)_;O$oAC*HDoF+^OEEOg/e]l?g[;(nF+*kBmm?I^\Z2N=972%^Nr]RFGEV:Y`?T%=B-Pq
%4!Xk]khV.O4,?RFm'I@>)9uEe+0Fhu+Bs,[8BY7?]ls]`Ij)M-]L&^)>$JL8ko#Ef'`f&5'c@a:%)fW(2!V):[n3n;E#Vs7q2@9u
%1V*a85G1l>V(sP-jPn&D'\=8im"OH.75V7t`iUU@'h6@A,'?e8KCebP9pMlbRL4.23B66GJa;Wafu?rY[#b*/.d5buDN:9c[JQ;G
%Xr_t\.fW6HO'u$L2ED.;(FemUKI;@)!2u..TU-8;TtFi2ds_M)^@rZj$IX`?)0H+CY/s(W`T(BOrXeO:rmW7^ohq\'*'\SRH7>2C
%l0`L.7H'PW-iPO/24D/-$AT$Q1N/\;2CX=@k<GEb*mH4p%(,m'Q_6Suo^)?q1sfVHiM`H6=_r"m_-q.V#$\F%[,=u0oh$.0J,Ar/
%!nOSFa_o[Z\t_HZ?4EW:9f[*QN3"sQRDOEqPnFGYT]78u*f=2n>[[#=@)>`3M2`b4;;6tBelL1jTc(sGAr%Y`RYQra%Ya9k%2L3l
%"VQSY4^pJp>7$"+%JE"!!VLp9gl&]^XleF/^oAsNP6(1M+?9R\UJ/Z,b]?=.nLRe',QBU?2X<XD&,Xn54f=(IS(=\B@U.W)Pfs21
%YHIuK%qZ<,)*HKV/S9i*5"%om)KoIGOc(o9@J!"L8/aM'^2LQU"\PmbUPj8_DI`0j)KCB%Z5`F$`6Q_'j<1q(at2a7bAXPBhX*4a
%Pg[H=F:::&gpUsT^eVFb*_;WL0QD=#/@VPQd@b:$(>T@n\%<)s@l4anG&p230P$!X"1MaJj>Wm)"`gd;8Rl%epT.EAre8mLr<<Qp
%,B-sG:d.A43[@N,5;fkZ!c&_4c[GPZ;ZB+ej7,SRP4e@^khRHniE5chNd)rcK&9'$J-'_ROpRb1PO6k*0D*_.m&:=:(IfM)2K=!n
%\/q44N@].f/kdeO2!g]!?)hR7G7T"pR$P<\_#?nhag9OPrU-/[TGN_Rdr-MPVqT7S]*B8`hBc$TK\^`eD^T4:dYVtNUc,S6o;&A=
%^j8-.DRdpm9>(!#1\]APUSO,qiR>JYrOEPW"&4V<V,_J#%78n*$dR>>V#okl3)MtY^8561\6:APU)Xt=n,@Kh+Js_7"8f^c#)-nU
%\e_eT8-^p+6@5pHkqUd^91iGp=abhXU9\9hbUb-$aQ6gp#aQg'Im`S6U)hC'WIWR4BI9lI#V&"S7dp$hiBYb+B[9F-0W(j^]R95U
%#$tc@'G/n=-WiSC2RM'"#Wl7=n6B=EWD1KeIlgtHmPWUJ[=p;e7HQ\TEUE>Gl=P0Q5[>5?Hh:0Fcs@5@RE_tdeg[s1hp&5WF\RO3
%2`%gj_lE[FRKkLMC$*:r"5Ic]XA)R!NH,u:^p*Q,2S*<D'\s2gPBbr1*08PmR9/FclKs&0*T3TI^$N66lIOhXP7b;6#nhAXk'f-&
%XiKPUn%mr+:NNu@fZDui=k6in#$lGW4?&TR7,',/J/QQD[Wl6GhB;W]ZNf&knQ2<AhE:WT5Uc:3Y?B-$"hEGJ5=O\Y7Pc4Mh1iEs
%iUrF@TAUk?-2`JA#C)eDo;PMK+aFOn+5T[6<'kmY9Ea1AEYMNCgdYD>k*BIGm0f\u]+(&1N@IgMRjJols"9m,i-sW#?DWMp"YJ3k
%rEG>T:8t&_kUW\ET'?o?411hc\S?E;pI8#=U>tmJ,3;,67Si.pk@;aSM[,bhhECLf;C#*IEMkG@T*;X8)Ip'C&b@-&r\;r9%)%$n
%:%?P4I:`'PI]o6)f@Q-G+?=bs9EuYX1$<s!F&T)7W<5g)?d82n8\2-P]AI"_DAKk*A^?Nq`bKL=NON)7k^X6G3&#8_*aau#cDY@/
%mgGm$T'89%WIP2K6QcFi0's?u;f#nEV^`H&:iWAkf>-FX?\:A1$`eK44pXgs,[mA>i"Otk^^HlE>,$#;.*OZB/Q"\Iqb>p?oORT;
%YKPZSZk!?A9]`_%Wp,EYdkDHZ1',@]9bIfmGXo[0+X,2-L"4rVmQ2'e2YsZP(:YLXr>[b%4_mo"UCiJ+e[$Og6]0]1>S^tI&"`*c
%h.X,a_R]MTg<oqr2$`eS2GE&R9K`C&E-430O1@WTWHio'p$U3\A$75`na>HO8aX2\K9K)u$=9L[?$>d1O1@_Y=7YUmkQBU`Q3lk,
%qJ+_-p0!cZ9[-bsS[pqRe^9%2+$K#bI_Xm`SD0M`X*=H#(di,r<02.9#T8EA*hZL,H$#uY`:-/_L!mcnm^L^7L!9kKFn5B"DPfOS
%#)J,tkb4$<BRhk8P3RCsl+k?iYMj0QD"[54-`i3N@%`N;MDUYP4"9VU>5HMVK0/s4UO::FSU/pnUM$X:qjlT$@MORSkQ[7*<PgU=
%`Dj$$V?.oO&j+pVCQSPJqgE\VmVMN=YNsJO6/6-qmjoa^iu^aQ>NZU(_TJgOeiW1ur]$o<A7FVFFLM&(aUU33.@"9gbkj95O.naB
%Z@k;PYg\]4j19#`DbM?!I]+#.Lip$"ibS2#55,km;j`r=U7]8c*JlhrY)'f[&&V@#6Qp6r%Ur8`+]13G9c>n&\MF!e[j@"<)4Q`$
%6$?5PFCmG_$6ZU:oaCmnmYL!6E?-Eq7/k?oh0tQ8Jh<H@$@DYYc^s0uc^jnp,S6A8-/)'``Q'B<l?LQRRLgjIp\K<,mA0)I*+">^
%eSEA\0Xc^CI?B&OW>(3@aB!!;)k3Q5_bYIM$`eI^s#cMG.23`'%g$qDd+Su;(rh(4Klk/hZ[NNsJS'&`OT`H'Fk&+G5/M7,L0[a_
%o"/c\[ht@`k?Muj+-K4XjMoZ=V91qXRBDM*mPZ\ZaaaM3DBJT=;<fY+3^d[!V6^.cfS"TN4/o5a!VQgDcjQV0Sa6H1]kQno3B(=;
%+RKl@"%JoK?o27Z"((9'Z]99=kn?m'%SQN4kfn`EfV[u<Hf.mHBTg;p+/ZCCd'nS?Zd9[RD9g2f&t1]O.[Q]c5/QWgV3o2O-b&7S
%i`d!&4hs1Q$oM2Y2glZ30LDKV8DlnI14$Re;nQ@m_bhTUYc!LZb97sB6G&gT6//M^Je'(A(@jEp$K7M65'Ws":UOm9/lXa\97U>;
%_0L*LKbr3L!\_CLp;_*JSlE\V"0a0;MU"][*d^/Bo)?5=P0n+dO2A\_fY:@c,&G75d+qL<;c$S@]@KBti"OaeAb?XaIgXG`hds?k
%h(]2i+E]%qKAU[L6\%h*7SBG=>568(m;A\Rci#e%II.PlmW<=(\BH2G*QU;,):6E<$bAg67Il6Q?kp>[qV\oE1me")JVT8Wl_L`6
%K!j/\,c[*U)oG[7O+,tELVkpu+3uk6*rF_N2>I$Z'c/fS^!g*Q7JG%mi&20m:q^pjAN`M\3H]b+1.<YY_Wh7$mV6G?epF3p>W$p8
%!]?qRrLa-DT+/"H%#[@oX_PX\hQ7?%X1.s8kV!$R1k=]X,[D]g00%u<#ai2pJM53Jm<kEZ"Z?X)VE!2\l@\7\n?.W^Z+-Z0eaR'%
%g$Um;?;68].c&.L24+CbU%:6NdHQ-lp$UeB;2AL!T,VFUrbsV`?u.AUkJFf*<2mLr3P6DWETIeI=r>Lh=FG_WU)h0Y86pK9?%!>p
%/hdGiR&K&?m_1'[NI'('3J@lW[bIDl^"r'JI4sCrE$bD>aeMKLHk@=aJ<6%fos3gQpbZ&IP$o]J$_*3HlCW45>s<c4g\#p.q*Y,[
%pHSWHh%.9uq"(\=]cMRq?[qk"O8nV1+9)(CIf0#rDuTCl+$T]!k(fRX_I*62J$&bCk"e5Apuh\UY<W'^k0O)!?iLY.i0TI2q!PcO
%s-NcXm5P%UE+d+#~>
%AI9_PrivateDataEnd
